.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 8E248D85F879854D35E8AD09AF65EEC3FCEDD9939B91A3D58500C17923859498
.text:00401000 ; Input MD5    : ED0888D25C563261198DC6C953A5DED2
.text:00401000 ; Input CRC32  : 1713C78F
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/pe_benchmark/msconfig.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Hash        : 2687CC6E
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00011654 (  71252.)
.text:00401000 ; Section size in file          : 00011800 (  71680.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000 ; PDB File Name : msconfig.pdb
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000 off_401000      dd offset ??_GC30Program@D3DXShader@@UAEPAXI@Z
.text:00401000                                         ; DATA XREF: std::bad_alloc::bad_alloc(std::bad_alloc const &)+14↓o
.text:00401000                                         ; std::out_of_range::out_of_range(std::string const &,_STL70 *)+14↓o ...
.text:00401000                                         ; D3DXShader::C30Program::`scalar deleting destructor'(uint)
.text:00401004                 dd offset sub_4065F0
.text:00401008                 dd offset ?_Doraise@logic_error@std@@MBEXXZ_1 ; std::logic_error::_Doraise(void)
.text:0040100C off_40100C      dd offset ??_Gtype_info@@UAEPAXI@Z
.text:0040100C                                         ; DATA XREF: .data:std::out_of_range `RTTI Type Descriptor'↓o
.text:0040100C                                         ; .data:CDialog `RTTI Type Descriptor'↓o ...
.text:0040100C                                         ; type_info::`scalar deleting destructor'(uint)
.text:00401010 ; const struct _EXCEPTION_POINTERS ExceptionInfo
.text:00401010 ExceptionInfo   _EXCEPTION_POINTERS <offset dword_413488, offset dword_4134D8>
.text:00401010                                         ; DATA XREF: ___report_gsfailure+102↓o
.text:00401018 dword_401018    dd 53h, 3 dup(0)        ; DATA XREF: .text:00401064↓o
.text:00401028                 dd 2Ah
.text:0040102C                 dd offset ?OnHelpInfo@CWnd@@IAEHPAUtagHELPINFO@@@Z ; CWnd::OnHelpInfo(tagHELPINFO *)
.text:00401030                 dd 111h, 0
.text:00401038                 dd 2 dup(0E146h), 0Ch
.text:00401044                 dd offset sub_403C20
.text:00401048                 align 20h
.text:00401060 off_401060      dd offset sub_403C30    ; DATA XREF: sub_403C40↓o
.text:00401064                 dd offset dword_401018
.text:00401068                 dd offset ??_R4CAutoStartDlg@@6B@ ; const CAutoStartDlg::`RTTI Complete Object Locator'
.text:0040106C ; const CAutoStartDlg::`vftable'
.text:0040106C ??_7CAutoStartDlg@@6B@ dd offset ?GetRuntimeClass@CDialog@@UBEPAUCRuntimeClass@@XZ
.text:0040106C                                         ; DATA XREF: sub_40C7B0+33F↓o
.text:0040106C                                         ; CDialog::GetRuntimeClass(void)
.text:00401070                 dd offset ??_GGdiException@Base@@UAEPAXI@Z ; Base::GdiException::`scalar deleting destructor'(uint)
.text:00401074                 dd offset nullsub_1
.text:00401078                 dd offset @_guard_check_icall_nop@4 ; _guard_check_icall_nop(x)
.text:0040107C                 dd offset nullsub_1
.text:00401080                 dd offset ?OnCmdMsg@CDialog@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z ; CDialog::OnCmdMsg(uint,int,void *,AFX_CMDHANDLERINFO *)
.text:00401084                 dd offset ?OnFinalRelease@CWnd@@UAEXXZ ; CWnd::OnFinalRelease(void)
.text:00401088                 dd offset ?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z ; CCmdTarget::IsInvokeAllowed(long)
.text:0040108C                 dd offset ?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z ; CCmdTarget::GetDispatchIID(_GUID *)
.text:00401090                 dd offset ?GetTypeInfoCount@CCmdTarget@@UAEIXZ ; CCmdTarget::GetTypeInfoCount(void)
.text:00401094                 dd offset ?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ ; CCmdTarget::GetTypeLibCache(void)
.text:00401098                 dd offset ?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z ; CCmdTarget::GetTypeLib(ulong,ITypeLib * *)
.text:0040109C                 dd offset sub_403C40
.text:004010A0                 dd offset ?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ ; CCmdTarget::GetCommandMap(void)
.text:004010A4                 dd offset ?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ ; CCmdTarget::GetDispatchMap(void)
.text:004010A8                 dd offset ?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ ; CCmdTarget::GetConnectionMap(void)
.text:004010AC                 dd offset ?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ ; CCmdTarget::GetInterfaceMap(void)
.text:004010B0                 dd offset ?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ ; CCmdTarget::GetEventSinkMap(void)
.text:004010B4                 dd offset ?OnCreateAggregates@CCmdTarget@@UAEHXZ ; CCmdTarget::OnCreateAggregates(void)
.text:004010B8                 dd offset ?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z ; CCmdTarget::GetInterfaceHook(void const *)
.text:004010BC                 dd offset ?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z ; CCmdTarget::GetExtraConnectionPoints(CPtrArray *)
.text:004010C0                 dd offset ?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z ; CCmdTarget::GetConnectionHook(_GUID const &)
.text:004010C4                 dd offset ?PreSubclassWindow@CWnd@@UAEXXZ ; CWnd::PreSubclassWindow(void)
.text:004010C8                 dd offset ?Create@CWnd@@UAEHPBG0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z ; CWnd::Create(ushort const *,ushort const *,ulong,tagRECT const &,CWnd *,uint,CCreateContext *)
.text:004010CC                 dd offset ?DestroyWindow@CWnd@@UAEHXZ ; CWnd::DestroyWindow(void)
.text:004010D0                 dd offset ?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTW@@@Z ; CWnd::PreCreateWindow(tagCREATESTRUCTW &)
.text:004010D4                 dd offset ?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z ; CWnd::CalcWindowRect(tagRECT *,uint)
.text:004010D8                 dd offset ?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOW@@@Z ; CWnd::OnToolHitTest(CPoint,tagTOOLINFOW *)
.text:004010DC                 dd offset ?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z ; CWnd::GetScrollBarCtrl(int)
.text:004010E0                 dd offset ?WinHelpW@CWnd@@UAEXKI@Z ; CWnd::WinHelpW(ulong,uint)
.text:004010E4                 dd offset ?ContinueModal@CWnd@@UAEHXZ ; CWnd::ContinueModal(void)
.text:004010E8                 dd offset ?EndModalLoop@CWnd@@UAEXH@Z ; CWnd::EndModalLoop(int)
.text:004010EC                 dd offset ?OnCommand@CWnd@@MAEHIJ@Z ; CWnd::OnCommand(uint,long)
.text:004010F0                 dd offset ?OnNotify@CWnd@@MAEHIJPAJ@Z ; CWnd::OnNotify(uint,long,long *)
.text:004010F4                 dd offset ?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ ; CWnd::GetSuperWndProcAddr(void)
.text:004010F8                 dd offset sub_403B70
.text:004010FC                 dd offset sub_403C60
.text:00401100                 dd offset sub_403C50
.text:00401104                 dd offset ?PreTranslateMessage@CDialog@@UAEHPAUtagMSG@@@Z ; CDialog::PreTranslateMessage(tagMSG *)
.text:00401108                 dd offset ?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z ; CWnd::OnAmbientProperty(COleControlSite *,long,tagVARIANT *)
.text:0040110C                 dd offset ?WindowProc@CWnd@@MAEJIIJ@Z ; CWnd::WindowProc(uint,uint,long)
.text:00401110                 dd offset ?OnWndMsg@CWnd@@MAEHIIJPAJ@Z ; CWnd::OnWndMsg(uint,uint,long,long *)
.text:00401114                 dd offset ?DefWindowProcW@CWnd@@MAEJIIJ@Z ; CWnd::DefWindowProcW(uint,uint,long)
.text:00401118                 dd offset ?PostNcDestroy@CWnd@@MAEXXZ ; CWnd::PostNcDestroy(void)
.text:0040111C                 dd offset ?OnChildNotify@CWnd@@MAEHIIJPAJ@Z ; CWnd::OnChildNotify(uint,uint,long,long *)
.text:00401120                 dd offset ?CheckAutoCenter@CDialog@@UAEHXZ ; CDialog::CheckAutoCenter(void)
.text:00401124                 dd offset ?IsFrameWnd@CWnd@@UBEHXZ ; CWnd::IsFrameWnd(void)
.text:00401128                 dd offset ?SetOccDialogInfo@CDialog@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z ; CDialog::SetOccDialogInfo(_AFX_OCC_DIALOG_INFO *)
.text:0040112C                 dd offset ?DoModal@CDialog@@UAEHXZ ; CDialog::DoModal(void)
.text:00401130                 dd offset ?OnInitDialog@CDialog@@UAEHXZ ; CDialog::OnInitDialog(void)
.text:00401134                 dd offset ?OnSetFont@CDialog@@UAEXPAVCFont@@@Z ; CDialog::OnSetFont(CFont *)
.text:00401138                 dd offset ?OnOK@CDialog@@MAEXXZ ; CDialog::OnOK(void)
.text:0040113C                 dd offset ?OnCancel@CDialog@@MAEXXZ ; CDialog::OnCancel(void)
.text:00401140                 dd offset ?PreInitDialog@CDialog@@MAEXXZ ; CDialog::PreInitDialog(void)
.text:00401144                 dd offset ??_R4logic_error@std@@6B@ ; const std::logic_error::`RTTI Complete Object Locator'
.text:00401148 ; const std::logic_error::`vftable'
.text:00401148 ??_7logic_error@std@@6B@ dd offset ??_GCBuffer@D3DX11Core@@UAEPAXI@Z_0
.text:00401148                                         ; DATA XREF: std::logic_error::logic_error(std::string const &)+21↓o
.text:00401148                                         ; std::logic_error::~logic_error(void)+C↓o ...
.text:00401148                                         ; D3DX11Core::CBuffer::`scalar deleting destructor'(uint)
.text:0040114C                 dd offset sub_4065F0
.text:00401150                 dd offset ?_Doraise@logic_error@std@@MBEXXZ ; std::logic_error::_Doraise(void)
.text:00401154                 dd offset ??_R4bad_alloc@std@@6B@ ; const std::bad_alloc::`RTTI Complete Object Locator'
.text:00401158 ; const std::bad_alloc::`vftable'
.text:00401158 ??_7bad_alloc@std@@6B@ dd offset ??_Ebad_alloc@std@@UAEPAXI@Z
.text:00401158                                         ; DATA XREF: sub_4066C6+12↓o
.text:00401158                                         ; sub_4066F0↓o ...
.text:00401158                                         ; std::bad_alloc::`vector deleting destructor'(uint)
.text:0040115C                 dd offset ?what@exception@@UBEPBDXZ ; exception::what(void)
.text:00401160                 dd offset sub_406730
.text:00401164                 dd offset ??_R4length_error@std@@6B@ ; const std::length_error::`RTTI Complete Object Locator'
.text:00401168 ; const std::length_error::`vftable'
.text:00401168 ??_7length_error@std@@6B@ dd offset ??_GObjectAsIPropertyValue@Projection@@EAEPAXI@Z
.text:00401168                                         ; DATA XREF: Projection::ObjectAsIPropertyValue::`scalar deleting destructor'(uint)+8↓o
.text:00401168                                         ; sub_406580↓o ...
.text:00401168                                         ; Projection::ObjectAsIPropertyValue::`scalar deleting destructor'(uint)
.text:0040116C                 dd offset sub_4065F0
.text:00401170                 dd offset ?_Doraise@logic_error@std@@MBEXXZ_0 ; std::logic_error::_Doraise(void)
.text:00401174                 align 8
.text:00401178 dword_401178    dd 2, 3 dup(0)          ; DATA XREF: .text:0040123C↓o
.text:00401188                 dd 0Ch
.text:0040118C                 dd offset sub_404300
.text:00401190                 dd 4Eh, 0FF9Bh, 2 dup(100h), 26h
.text:004011A4                 dd offset sub_405500
.text:004011A8                 dd 111h, 0
.text:004011B0                 dd 2 dup(0FDh), 0Ch
.text:004011BC                 dd offset sub_4055D0
.text:004011C0                 dd 111h, 0
.text:004011C8                 dd 2 dup(0FCh), 0Ch
.text:004011D4                 dd offset sub_4055F0
.text:004011D8                 dd 111h, 0
.text:004011E0                 dd 2 dup(0FEh), 0Ch
.text:004011EC                 dd offset sub_405620
.text:004011F0                 dd 4Eh, 0FF94h, 2 dup(100h), 26h
.text:00401204                 dd offset sub_405680
.text:00401208                 dd 4Eh, 0FFF9h, 2 dup(100h), 26h
.text:0040121C                 dd offset sub_405910
.text:00401220                 dd 6 dup(0)
.text:00401238 off_401238      dd offset sub_4040C0    ; DATA XREF: sub_4040D0↓o
.text:0040123C                 dd offset dword_401178
.text:00401240                 dd offset ??_R4CPageServices@@6B@_0 ; const CPageServices::`RTTI Complete Object Locator'
.text:00401244 ; const CPageServices::`vftable'
.text:00401244 ??_7CPageServices@@6B@_0 dd offset sub_406500
.text:00401244                                         ; DATA XREF: sub_403F0B+48↓o
.text:00401244                                         ; sub_404002+17↓o
.text:00401248                 dd offset sub_405740
.text:0040124C                 dd offset sub_403C90
.text:00401250                 dd offset sub_405870
.text:00401254                 dd offset sub_406E40
.text:00401258                 dd offset sub_406DF0
.text:0040125C                 dd offset sub_4058F0
.text:00401260                 dd offset sub_405900
.text:00401264                 dd offset ??_R4CPageServices@@6B@ ; const CPageServices::`RTTI Complete Object Locator'
.text:00401268 ; const CPageServices::`vftable'
.text:00401268 ??_7CPageServices@@6B@ dd offset sub_403E10
.text:00401268                                         ; DATA XREF: sub_403F0B+42↓o
.text:00401268                                         ; sub_404002+11↓o
.text:0040126C                 dd offset ??_GCBuffer@D3DX11Core@@UAEPAXI@Z ; D3DX11Core::CBuffer::`scalar deleting destructor'(uint)
.text:00401270                 dd offset nullsub_1
.text:00401274                 dd offset @_guard_check_icall_nop@4 ; _guard_check_icall_nop(x)
.text:00401278                 dd offset nullsub_1
.text:0040127C                 dd offset ?OnCmdMsg@CDialog@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z ; CDialog::OnCmdMsg(uint,int,void *,AFX_CMDHANDLERINFO *)
.text:00401280                 dd offset ?OnFinalRelease@CWnd@@UAEXXZ ; CWnd::OnFinalRelease(void)
.text:00401284                 dd offset ?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z ; CCmdTarget::IsInvokeAllowed(long)
.text:00401288                 dd offset ?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z ; CCmdTarget::GetDispatchIID(_GUID *)
.text:0040128C                 dd offset ?GetTypeInfoCount@CCmdTarget@@UAEIXZ ; CCmdTarget::GetTypeInfoCount(void)
.text:00401290                 dd offset ?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ ; CCmdTarget::GetTypeLibCache(void)
.text:00401294                 dd offset ?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z ; CCmdTarget::GetTypeLib(ulong,ITypeLib * *)
.text:00401298                 dd offset sub_4040D0
.text:0040129C                 dd offset ?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ ; CCmdTarget::GetCommandMap(void)
.text:004012A0                 dd offset ?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ ; CCmdTarget::GetDispatchMap(void)
.text:004012A4                 dd offset ?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ ; CCmdTarget::GetConnectionMap(void)
.text:004012A8                 dd offset ?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ ; CCmdTarget::GetInterfaceMap(void)
.text:004012AC                 dd offset ?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ ; CCmdTarget::GetEventSinkMap(void)
.text:004012B0                 dd offset ?OnCreateAggregates@CCmdTarget@@UAEHXZ ; CCmdTarget::OnCreateAggregates(void)
.text:004012B4                 dd offset ?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z ; CCmdTarget::GetInterfaceHook(void const *)
.text:004012B8                 dd offset ?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z ; CCmdTarget::GetExtraConnectionPoints(CPtrArray *)
.text:004012BC                 dd offset ?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z ; CCmdTarget::GetConnectionHook(_GUID const &)
.text:004012C0                 dd offset ?PreSubclassWindow@CWnd@@UAEXXZ ; CWnd::PreSubclassWindow(void)
.text:004012C4                 dd offset ?Create@CWnd@@UAEHPBG0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z ; CWnd::Create(ushort const *,ushort const *,ulong,tagRECT const &,CWnd *,uint,CCreateContext *)
.text:004012C8                 dd offset ?DestroyWindow@CWnd@@UAEHXZ ; CWnd::DestroyWindow(void)
.text:004012CC                 dd offset ?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTW@@@Z ; CWnd::PreCreateWindow(tagCREATESTRUCTW &)
.text:004012D0                 dd offset ?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z ; CWnd::CalcWindowRect(tagRECT *,uint)
.text:004012D4                 dd offset ?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOW@@@Z ; CWnd::OnToolHitTest(CPoint,tagTOOLINFOW *)
.text:004012D8                 dd offset ?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z ; CWnd::GetScrollBarCtrl(int)
.text:004012DC                 dd offset ?WinHelpW@CWnd@@UAEXKI@Z ; CWnd::WinHelpW(ulong,uint)
.text:004012E0                 dd offset ?ContinueModal@CWnd@@UAEHXZ ; CWnd::ContinueModal(void)
.text:004012E4                 dd offset ?EndModalLoop@CWnd@@UAEXH@Z ; CWnd::EndModalLoop(int)
.text:004012E8                 dd offset ?OnCommand@CWnd@@MAEHIJ@Z ; CWnd::OnCommand(uint,long)
.text:004012EC                 dd offset ?OnNotify@CPropertyPage@@MAEHIJPAJ@Z ; CPropertyPage::OnNotify(uint,long,long *)
.text:004012F0                 dd offset ?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ ; CWnd::GetSuperWndProcAddr(void)
.text:004012F4                 dd offset nullsub_1
.text:004012F8                 dd offset sub_403C60
.text:004012FC                 dd offset sub_403C50
.text:00401300                 dd offset ?PreTranslateMessage@CPropertyPage@@MAEHPAUtagMSG@@@Z ; CPropertyPage::PreTranslateMessage(tagMSG *)
.text:00401304                 dd offset ?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z ; CWnd::OnAmbientProperty(COleControlSite *,long,tagVARIANT *)
.text:00401308                 dd offset ?WindowProc@CWnd@@MAEJIIJ@Z ; CWnd::WindowProc(uint,uint,long)
.text:0040130C                 dd offset ?OnWndMsg@CWnd@@MAEHIIJPAJ@Z ; CWnd::OnWndMsg(uint,uint,long,long *)
.text:00401310                 dd offset ?DefWindowProcW@CWnd@@MAEJIIJ@Z ; CWnd::DefWindowProcW(uint,uint,long)
.text:00401314                 dd offset ?PostNcDestroy@CWnd@@MAEXXZ ; CWnd::PostNcDestroy(void)
.text:00401318                 dd offset ?OnChildNotify@CWnd@@MAEHIIJPAJ@Z ; CWnd::OnChildNotify(uint,uint,long,long *)
.text:0040131C                 dd offset ?CheckAutoCenter@CDialog@@UAEHXZ ; CDialog::CheckAutoCenter(void)
.text:00401320                 dd offset ?IsFrameWnd@CWnd@@UBEHXZ ; CWnd::IsFrameWnd(void)
.text:00401324                 dd offset ?SetOccDialogInfo@CDialog@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z ; CDialog::SetOccDialogInfo(_AFX_OCC_DIALOG_INFO *)
.text:00401328                 dd offset ?DoModal@CDialog@@UAEHXZ ; CDialog::DoModal(void)
.text:0040132C                 dd offset sub_4040E0
.text:00401330                 dd offset ?OnSetFont@CDialog@@UAEXPAVCFont@@@Z ; CDialog::OnSetFont(CFont *)
.text:00401334                 dd offset ?OnOK@CPropertyPage@@UAEXXZ ; CPropertyPage::OnOK(void)
.text:00401338                 dd offset ?OnCancel@CPropertyPage@@UAEXXZ ; CPropertyPage::OnCancel(void)
.text:0040133C                 dd offset ?PreInitDialog@CDialog@@MAEXXZ ; CDialog::PreInitDialog(void)
.text:00401340                 dd offset sub_405800
.text:00401344                 dd offset ?OnReset@CPropertyPage@@UAEXXZ ; CPropertyPage::OnReset(void)
.text:00401348                 dd offset ?OnSetActive@CPropertyPage@@UAEHXZ ; CPropertyPage::OnSetActive(void)
.text:0040134C                 dd offset ?OnKillActive@CPropertyPage@@UAEHXZ ; CPropertyPage::OnKillActive(void)
.text:00401350                 dd offset ?OnQueryCancel@CPropertyPage@@UAEHXZ ; CPropertyPage::OnQueryCancel(void)
.text:00401354                 dd offset ?OnWizardBack@CPropertyPage@@UAEJXZ ; CPropertyPage::OnWizardBack(void)
.text:00401358                 dd offset ?OnWizardNext@CPropertyPage@@UAEJXZ ; CPropertyPage::OnWizardNext(void)
.text:0040135C                 dd offset ?OnWizardFinish@CPropertyPage@@UAEHXZ ; CPropertyPage::OnWizardFinish(void)
.text:00401360                 dd offset ??_R4CPageBase@@6B@ ; const CPageBase::`RTTI Complete Object Locator'
.text:00401364 ; const CPageBase::`vftable'
.text:00401364 ??_7CPageBase@@6B@ dd offset ??_EProjectionTypeReleaser@Projection@@UAEPAXI@Z
.text:00401364                                         ; DATA XREF: sub_403F0B+22↓o
.text:00401364                                         ; sub_404002+99↓o ...
.text:00401364                                         ; Projection::ProjectionTypeReleaser::`vector deleting destructor'(uint)
.text:00401368                 dd offset _purecall
.text:0040136C                 dd offset sub_403C90
.text:00401370                 dd offset sub_406E30
.text:00401374                 dd offset sub_406E40
.text:00401378                 dd offset _purecall
.text:0040137C                 dd offset _purecall
.text:00401380                 dd offset _purecall
.text:00401384 off_401384      dd offset aCpageservices
.text:00401384                                         ; DATA XREF: sub_403E10↓o
.text:00401384                                         ; "CPageServices"
.text:00401388                 dd 0FCh, 0FFFFh
.text:00401390                 dd offset sub_403DC0
.text:00401394                 dd offset sub_403E00
.text:00401398                 align 10h
.text:004013A0 dword_4013A0    dd 2, 3 dup(0)          ; DATA XREF: .text:00401404↓o
.text:004013B0                 dd 0Ch
.text:004013B4                 dd offset ?OnDestroy@CWnd@@IAEXXZ ; CWnd::OnDestroy(void)
.text:004013B8                 dd 4Eh, 0FFFEh, 2 dup(125h), 26h
.text:004013CC                 dd offset sub_406F30
.text:004013D0                 dd 4Eh, 0FFFCh, 2 dup(125h), 26h
.text:004013E4                 dd offset sub_406F30
.text:004013E8                 align 20h
.text:00401400 off_401400      dd offset sub_4040C0    ; DATA XREF: sub_406F20↓o
.text:00401404                 dd offset dword_4013A0
.text:00401408                 dd offset ??_R4CPageStartup@@6B@_0 ; const CPageStartup::`RTTI Complete Object Locator'
.text:0040140C ; const CPageStartup::`vftable'
.text:0040140C ??_7CPageStartup@@6B@_0 dd offset sub_407080
.text:0040140C                                         ; DATA XREF: sub_406E96+39↓o
.text:00401410                 dd offset sub_407010
.text:00401414                 dd offset sub_403C90
.text:00401418                 dd offset @_guard_check_icall_nop@4 ; _guard_check_icall_nop(x)
.text:0040141C                 dd offset sub_406E40
.text:00401420                 dd offset sub_407090
.text:00401424                 dd offset sub_407060
.text:00401428                 dd offset sub_407070
.text:0040142C                 dd offset ??_R4CPageStartup@@6B@ ; const CPageStartup::`RTTI Complete Object Locator'
.text:00401430 ; const CPageStartup::`vftable'
.text:00401430 ??_7CPageStartup@@6B@ dd offset sub_406E90
.text:00401430                                         ; DATA XREF: sub_406E96+33↓o
.text:00401430                                         ; sub_406EE0+8↓o
.text:00401434                 dd offset sub_406EE0
.text:00401438                 dd offset nullsub_1
.text:0040143C                 dd offset @_guard_check_icall_nop@4 ; _guard_check_icall_nop(x)
.text:00401440                 dd offset nullsub_1
.text:00401444                 dd offset ?OnCmdMsg@CDialog@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z ; CDialog::OnCmdMsg(uint,int,void *,AFX_CMDHANDLERINFO *)
.text:00401448                 dd offset ?OnFinalRelease@CWnd@@UAEXXZ ; CWnd::OnFinalRelease(void)
.text:0040144C                 dd offset ?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z ; CCmdTarget::IsInvokeAllowed(long)
.text:00401450                 dd offset ?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z ; CCmdTarget::GetDispatchIID(_GUID *)
.text:00401454                 dd offset ?GetTypeInfoCount@CCmdTarget@@UAEIXZ ; CCmdTarget::GetTypeInfoCount(void)
.text:00401458                 dd offset ?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ ; CCmdTarget::GetTypeLibCache(void)
.text:0040145C                 dd offset ?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z ; CCmdTarget::GetTypeLib(ulong,ITypeLib * *)
.text:00401460                 dd offset sub_406F20
.text:00401464                 dd offset ?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ ; CCmdTarget::GetCommandMap(void)
.text:00401468                 dd offset ?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ ; CCmdTarget::GetDispatchMap(void)
.text:0040146C                 dd offset ?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ ; CCmdTarget::GetConnectionMap(void)
.text:00401470                 dd offset ?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ ; CCmdTarget::GetInterfaceMap(void)
.text:00401474                 dd offset ?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ ; CCmdTarget::GetEventSinkMap(void)
.text:00401478                 dd offset ?OnCreateAggregates@CCmdTarget@@UAEHXZ ; CCmdTarget::OnCreateAggregates(void)
.text:0040147C                 dd offset ?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z ; CCmdTarget::GetInterfaceHook(void const *)
.text:00401480                 dd offset ?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z ; CCmdTarget::GetExtraConnectionPoints(CPtrArray *)
.text:00401484                 dd offset ?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z ; CCmdTarget::GetConnectionHook(_GUID const &)
.text:00401488                 dd offset ?PreSubclassWindow@CWnd@@UAEXXZ ; CWnd::PreSubclassWindow(void)
.text:0040148C                 dd offset ?Create@CWnd@@UAEHPBG0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z ; CWnd::Create(ushort const *,ushort const *,ulong,tagRECT const &,CWnd *,uint,CCreateContext *)
.text:00401490                 dd offset ?DestroyWindow@CWnd@@UAEHXZ ; CWnd::DestroyWindow(void)
.text:00401494                 dd offset ?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTW@@@Z ; CWnd::PreCreateWindow(tagCREATESTRUCTW &)
.text:00401498                 dd offset ?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z ; CWnd::CalcWindowRect(tagRECT *,uint)
.text:0040149C                 dd offset ?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOW@@@Z ; CWnd::OnToolHitTest(CPoint,tagTOOLINFOW *)
.text:004014A0                 dd offset ?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z ; CWnd::GetScrollBarCtrl(int)
.text:004014A4                 dd offset ?WinHelpW@CWnd@@UAEXKI@Z ; CWnd::WinHelpW(ulong,uint)
.text:004014A8                 dd offset ?ContinueModal@CWnd@@UAEHXZ ; CWnd::ContinueModal(void)
.text:004014AC                 dd offset ?EndModalLoop@CWnd@@UAEXH@Z ; CWnd::EndModalLoop(int)
.text:004014B0                 dd offset ?OnCommand@CWnd@@MAEHIJ@Z ; CWnd::OnCommand(uint,long)
.text:004014B4                 dd offset ?OnNotify@CPropertyPage@@MAEHIJPAJ@Z ; CPropertyPage::OnNotify(uint,long,long *)
.text:004014B8                 dd offset ?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ ; CWnd::GetSuperWndProcAddr(void)
.text:004014BC                 dd offset nullsub_1
.text:004014C0                 dd offset sub_403C60
.text:004014C4                 dd offset sub_403C50
.text:004014C8                 dd offset ?PreTranslateMessage@CPropertyPage@@MAEHPAUtagMSG@@@Z ; CPropertyPage::PreTranslateMessage(tagMSG *)
.text:004014CC                 dd offset ?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z ; CWnd::OnAmbientProperty(COleControlSite *,long,tagVARIANT *)
.text:004014D0                 dd offset ?WindowProc@CWnd@@MAEJIIJ@Z ; CWnd::WindowProc(uint,uint,long)
.text:004014D4                 dd offset ?OnWndMsg@CWnd@@MAEHIIJPAJ@Z ; CWnd::OnWndMsg(uint,uint,long,long *)
.text:004014D8                 dd offset ?DefWindowProcW@CWnd@@MAEJIIJ@Z ; CWnd::DefWindowProcW(uint,uint,long)
.text:004014DC                 dd offset ?PostNcDestroy@CWnd@@MAEXXZ ; CWnd::PostNcDestroy(void)
.text:004014E0                 dd offset ?OnChildNotify@CWnd@@MAEHIIJPAJ@Z ; CWnd::OnChildNotify(uint,uint,long,long *)
.text:004014E4                 dd offset ?CheckAutoCenter@CDialog@@UAEHXZ ; CDialog::CheckAutoCenter(void)
.text:004014E8                 dd offset ?IsFrameWnd@CWnd@@UBEHXZ ; CWnd::IsFrameWnd(void)
.text:004014EC                 dd offset ?SetOccDialogInfo@CDialog@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z ; CDialog::SetOccDialogInfo(_AFX_OCC_DIALOG_INFO *)
.text:004014F0                 dd offset ?DoModal@CDialog@@UAEHXZ ; CDialog::DoModal(void)
.text:004014F4                 dd offset sub_406FA0
.text:004014F8                 dd offset ?OnSetFont@CDialog@@UAEXPAVCFont@@@Z ; CDialog::OnSetFont(CFont *)
.text:004014FC                 dd offset ?OnOK@CPropertyPage@@UAEXXZ ; CPropertyPage::OnOK(void)
.text:00401500                 dd offset ?OnCancel@CPropertyPage@@UAEXXZ ; CPropertyPage::OnCancel(void)
.text:00401504                 dd offset ?PreInitDialog@CDialog@@MAEXXZ ; CDialog::PreInitDialog(void)
.text:00401508                 dd offset sub_407050
.text:0040150C                 dd offset ?OnReset@CPropertyPage@@UAEXXZ ; CPropertyPage::OnReset(void)
.text:00401510                 dd offset ?OnSetActive@CPropertyPage@@UAEHXZ ; CPropertyPage::OnSetActive(void)
.text:00401514                 dd offset ?OnKillActive@CPropertyPage@@UAEHXZ ; CPropertyPage::OnKillActive(void)
.text:00401518                 dd offset ?OnQueryCancel@CPropertyPage@@UAEHXZ ; CPropertyPage::OnQueryCancel(void)
.text:0040151C                 dd offset ?OnWizardBack@CPropertyPage@@UAEJXZ ; CPropertyPage::OnWizardBack(void)
.text:00401520                 dd offset ?OnWizardNext@CPropertyPage@@UAEJXZ ; CPropertyPage::OnWizardNext(void)
.text:00401524                 dd offset ?OnWizardFinish@CPropertyPage@@UAEHXZ ; CPropertyPage::OnWizardFinish(void)
.text:00401528 off_401528      dd offset aCpagestartup ; DATA XREF: sub_406E90↓o
.text:00401528                                         ; "CPageStartup"
.text:0040152C                 dd 0A0h, 0FFFFh
.text:00401534                 dd offset sub_406E50
.text:00401538                 dd offset sub_403E00
.text:0040153C                 align 10h
.text:00401540 dword_401540    dd 2, 3 dup(0)          ; DATA XREF: .text:0040161C↓o
.text:00401550                 dd 0Ch
.text:00401554                 dd offset ?OnDestroy@CWnd@@IAEXXZ_0 ; CWnd::OnDestroy(void)
.text:00401558                 dd 111h, 0
.text:00401560                 dd 2 dup(0E3h), 0Ch
.text:0040156C                 dd offset sub_407510
.text:00401570                 dd 111h, 0
.text:00401578                 dd 2 dup(0E2h), 0Ch
.text:00401584                 dd offset sub_4075C0
.text:00401588                 dd 111h, 0
.text:00401590                 dd 2 dup(0E4h), 0Ch
.text:0040159C                 dd offset sub_4076A0
.text:004015A0                 dd 111h, 0
.text:004015A8                 dd 2 dup(0E8h), 0Ch
.text:004015B4                 dd offset sub_407740
.text:004015B8                 dd 111h, 0
.text:004015C0                 dd 2 dup(0E7h), 0Ch
.text:004015CC                 dd offset sub_407760
.text:004015D0                 dd 401h, 3 dup(0)
.text:004015E0                 dd 0Ah
.text:004015E4                 dd offset sub_407690
.text:004015E8                 dd 111h, 0
.text:004015F0                 dd 2 dup(3F2h), 0Ch
.text:004015FC                 dd offset sub_407780
.text:00401600                 dd 6 dup(0)
.text:00401618 off_401618      dd offset sub_4040C0    ; DATA XREF: sub_407270↓o
.text:0040161C                 dd offset dword_401540
.text:00401620                 dd offset ??_R4CPageGeneral@@6B@_0 ; const CPageGeneral::`RTTI Complete Object Locator'
.text:00401624 ; const CPageGeneral::`vftable'
.text:00401624 ??_7CPageGeneral@@6B@_0 dd offset sub_4077F0
.text:00401624                                         ; DATA XREF: sub_4071D6+3D↓o
.text:00401628                 dd offset UserMathErrorFunction
.text:0040162C                 dd offset sub_403C90
.text:00401630                 dd offset @_guard_check_icall_nop@4 ; _guard_check_icall_nop(x)
.text:00401634                 dd offset sub_406E40
.text:00401638                 dd offset sub_407800
.text:0040163C                 dd offset @_guard_check_icall_nop@4 ; _guard_check_icall_nop(x)
.text:00401640                 dd offset @_guard_check_icall_nop@4 ; _guard_check_icall_nop(x)
.text:00401644                 dd offset ??_R4CPageGeneral@@6B@ ; const CPageGeneral::`RTTI Complete Object Locator'
.text:00401648 ; const CPageGeneral::`vftable'
.text:00401648 ??_7CPageGeneral@@6B@ dd offset sub_4071D0
.text:00401648                                         ; DATA XREF: sub_4071D6+37↓o
.text:00401648                                         ; sub_407230+8↓o
.text:0040164C                 dd offset sub_407230
.text:00401650                 dd offset nullsub_1
.text:00401654                 dd offset @_guard_check_icall_nop@4 ; _guard_check_icall_nop(x)
.text:00401658                 dd offset nullsub_1
.text:0040165C                 dd offset ?OnCmdMsg@CDialog@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z ; CDialog::OnCmdMsg(uint,int,void *,AFX_CMDHANDLERINFO *)
.text:00401660                 dd offset ?OnFinalRelease@CWnd@@UAEXXZ ; CWnd::OnFinalRelease(void)
.text:00401664                 dd offset ?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z ; CCmdTarget::IsInvokeAllowed(long)
.text:00401668                 dd offset ?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z ; CCmdTarget::GetDispatchIID(_GUID *)
.text:0040166C                 dd offset ?GetTypeInfoCount@CCmdTarget@@UAEIXZ ; CCmdTarget::GetTypeInfoCount(void)
.text:00401670                 dd offset ?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ ; CCmdTarget::GetTypeLibCache(void)
.text:00401674                 dd offset ?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z ; CCmdTarget::GetTypeLib(ulong,ITypeLib * *)
.text:00401678                 dd offset sub_407270
.text:0040167C                 dd offset ?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ ; CCmdTarget::GetCommandMap(void)
.text:00401680                 dd offset ?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ ; CCmdTarget::GetDispatchMap(void)
.text:00401684                 dd offset ?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ ; CCmdTarget::GetConnectionMap(void)
.text:00401688                 dd offset ?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ ; CCmdTarget::GetInterfaceMap(void)
.text:0040168C                 dd offset ?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ ; CCmdTarget::GetEventSinkMap(void)
.text:00401690                 dd offset ?OnCreateAggregates@CCmdTarget@@UAEHXZ ; CCmdTarget::OnCreateAggregates(void)
.text:00401694                 dd offset ?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z ; CCmdTarget::GetInterfaceHook(void const *)
.text:00401698                 dd offset ?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z ; CCmdTarget::GetExtraConnectionPoints(CPtrArray *)
.text:0040169C                 dd offset ?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z ; CCmdTarget::GetConnectionHook(_GUID const &)
.text:004016A0                 dd offset ?PreSubclassWindow@CWnd@@UAEXXZ ; CWnd::PreSubclassWindow(void)
.text:004016A4                 dd offset ?Create@CWnd@@UAEHPBG0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z ; CWnd::Create(ushort const *,ushort const *,ulong,tagRECT const &,CWnd *,uint,CCreateContext *)
.text:004016A8                 dd offset ?DestroyWindow@CWnd@@UAEHXZ ; CWnd::DestroyWindow(void)
.text:004016AC                 dd offset ?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTW@@@Z ; CWnd::PreCreateWindow(tagCREATESTRUCTW &)
.text:004016B0                 dd offset ?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z ; CWnd::CalcWindowRect(tagRECT *,uint)
.text:004016B4                 dd offset ?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOW@@@Z ; CWnd::OnToolHitTest(CPoint,tagTOOLINFOW *)
.text:004016B8                 dd offset ?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z ; CWnd::GetScrollBarCtrl(int)
.text:004016BC                 dd offset ?WinHelpW@CWnd@@UAEXKI@Z ; CWnd::WinHelpW(ulong,uint)
.text:004016C0                 dd offset ?ContinueModal@CWnd@@UAEHXZ ; CWnd::ContinueModal(void)
.text:004016C4                 dd offset ?EndModalLoop@CWnd@@UAEXH@Z ; CWnd::EndModalLoop(int)
.text:004016C8                 dd offset ?OnCommand@CWnd@@MAEHIJ@Z ; CWnd::OnCommand(uint,long)
.text:004016CC                 dd offset ?OnNotify@CPropertyPage@@MAEHIJPAJ@Z ; CPropertyPage::OnNotify(uint,long,long *)
.text:004016D0                 dd offset ?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ ; CWnd::GetSuperWndProcAddr(void)
.text:004016D4                 dd offset nullsub_1
.text:004016D8                 dd offset sub_403C60
.text:004016DC                 dd offset sub_403C50
.text:004016E0                 dd offset ?PreTranslateMessage@CPropertyPage@@MAEHPAUtagMSG@@@Z ; CPropertyPage::PreTranslateMessage(tagMSG *)
.text:004016E4                 dd offset ?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z ; CWnd::OnAmbientProperty(COleControlSite *,long,tagVARIANT *)
.text:004016E8                 dd offset ?WindowProc@CWnd@@MAEJIIJ@Z ; CWnd::WindowProc(uint,uint,long)
.text:004016EC                 dd offset ?OnWndMsg@CWnd@@MAEHIIJPAJ@Z ; CWnd::OnWndMsg(uint,uint,long,long *)
.text:004016F0                 dd offset ?DefWindowProcW@CWnd@@MAEJIIJ@Z ; CWnd::DefWindowProcW(uint,uint,long)
.text:004016F4                 dd offset ?PostNcDestroy@CWnd@@MAEXXZ ; CWnd::PostNcDestroy(void)
.text:004016F8                 dd offset ?OnChildNotify@CWnd@@MAEHIIJPAJ@Z ; CWnd::OnChildNotify(uint,uint,long,long *)
.text:004016FC                 dd offset ?CheckAutoCenter@CDialog@@UAEHXZ ; CDialog::CheckAutoCenter(void)
.text:00401700                 dd offset ?IsFrameWnd@CWnd@@UBEHXZ ; CWnd::IsFrameWnd(void)
.text:00401704                 dd offset ?SetOccDialogInfo@CDialog@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z ; CDialog::SetOccDialogInfo(_AFX_OCC_DIALOG_INFO *)
.text:00401708                 dd offset ?DoModal@CDialog@@UAEHXZ ; CDialog::DoModal(void)
.text:0040170C                 dd offset sub_407280
.text:00401710                 dd offset ?OnSetFont@CDialog@@UAEXPAVCFont@@@Z ; CDialog::OnSetFont(CFont *)
.text:00401714                 dd offset ?OnOK@CPropertyPage@@UAEXXZ ; CPropertyPage::OnOK(void)
.text:00401718                 dd offset ?OnCancel@CPropertyPage@@UAEXXZ ; CPropertyPage::OnCancel(void)
.text:0040171C                 dd offset ?PreInitDialog@CDialog@@MAEXXZ ; CDialog::PreInitDialog(void)
.text:00401720                 dd offset sub_407680
.text:00401724                 dd offset ?OnReset@CPropertyPage@@UAEXXZ ; CPropertyPage::OnReset(void)
.text:00401728                 dd offset sub_4072C0
.text:0040172C                 dd offset ?OnKillActive@CPropertyPage@@UAEHXZ ; CPropertyPage::OnKillActive(void)
.text:00401730                 dd offset ?OnQueryCancel@CPropertyPage@@UAEHXZ ; CPropertyPage::OnQueryCancel(void)
.text:00401734                 dd offset ?OnWizardBack@CPropertyPage@@UAEJXZ ; CPropertyPage::OnWizardBack(void)
.text:00401738                 dd offset ?OnWizardNext@CPropertyPage@@UAEJXZ ; CPropertyPage::OnWizardNext(void)
.text:0040173C                 dd offset ?OnWizardFinish@CPropertyPage@@UAEHXZ ; CPropertyPage::OnWizardFinish(void)
.text:00401740 off_401740      dd offset aCpagegeneral ; DATA XREF: sub_4071D0↓o
.text:00401740                                         ; "CPageGeneral"
.text:00401744                 dd 0A0h, 0FFFFh
.text:0040174C                 dd offset sub_407190
.text:00401750                 dd offset sub_403E00
.text:00401754                 align 8
.text:00401758                 dd offset ??_R4CToolItem@@6B@ ; const CToolItem::`RTTI Complete Object Locator'
.text:0040175C ; const CToolItem::`vftable'
.text:0040175C ??_7CToolItem@@6B@ dd offset ??_GCBuffer@D3DX11Core@@UAEPAXI@Z_1
.text:0040175C                                         ; DATA XREF: sub_4080F8+1B↓o
.text:0040175C                                         ; sub_408632+11↓o
.text:0040175C                                         ; D3DX11Core::CBuffer::`scalar deleting destructor'(uint)
.text:00401760 dword_401760    dd 2, 3 dup(0)          ; DATA XREF: .text:0040180C↓o
.text:00401770                 dd 0Ch
.text:00401774                 dd offset sub_407C70
.text:00401778                 dd 4Eh, 0FF9Bh, 2 dup(12Dh), 26h
.text:0040178C                 dd offset sub_407C80
.text:00401790                 dd 111h, 0
.text:00401798                 dd 2 dup(12Eh), 0Ch
.text:004017A4                 dd offset sub_407CA0
.text:004017A8                 dd 4Eh, 0FFF9h, 2 dup(12Dh), 26h
.text:004017BC                 dd offset sub_408090
.text:004017C0                 dd 4Eh, 0FF94h, 2 dup(12Dh), 26h
.text:004017D4                 dd offset sub_4082C0
.text:004017D8                 dd 111h, 0
.text:004017E0                 dd 2 dup(12Fh), 0Ch
.text:004017EC                 dd offset sub_407E50
.text:004017F0                 dd 6 dup(0)
.text:00401808 off_401808      dd offset sub_4040C0    ; DATA XREF: sub_407990↓o
.text:0040180C                 dd offset dword_401760
.text:00401810                 dd offset ??_R4CPageTool@@6B@_0 ; const CPageTool::`RTTI Complete Object Locator'
.text:00401814 ; const CPageTool::`vftable'
.text:00401814 ??_7CPageTool@@6B@_0 dd offset sub_408570
.text:00401814                                         ; DATA XREF: sub_407856+48↓o
.text:00401814                                         ; sub_407910+17↓o
.text:00401818                 dd offset UserMathErrorFunction
.text:0040181C                 dd offset sub_403C90
.text:00401820                 dd offset sub_406E30
.text:00401824                 dd offset sub_406E40
.text:00401828                 dd offset sub_408580
.text:0040182C                 dd offset @_guard_check_icall_nop@4 ; _guard_check_icall_nop(x)
.text:00401830                 dd offset @_guard_check_icall_nop@4 ; _guard_check_icall_nop(x)
.text:00401834                 dd offset ??_R4CPageTool@@6B@ ; const CPageTool::`RTTI Complete Object Locator'
.text:00401838 ; const CPageTool::`vftable'
.text:00401838 ??_7CPageTool@@6B@ dd offset sub_407850 ; DATA XREF: sub_407856+42↓o
.text:00401838                                         ; sub_407910+11↓o
.text:0040183C                 dd offset sub_407910
.text:00401840                 dd offset nullsub_1
.text:00401844                 dd offset @_guard_check_icall_nop@4 ; _guard_check_icall_nop(x)
.text:00401848                 dd offset nullsub_1
.text:0040184C                 dd offset ?OnCmdMsg@CDialog@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z ; CDialog::OnCmdMsg(uint,int,void *,AFX_CMDHANDLERINFO *)
.text:00401850                 dd offset ?OnFinalRelease@CWnd@@UAEXXZ ; CWnd::OnFinalRelease(void)
.text:00401854                 dd offset ?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z ; CCmdTarget::IsInvokeAllowed(long)
.text:00401858                 dd offset ?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z ; CCmdTarget::GetDispatchIID(_GUID *)
.text:0040185C                 dd offset ?GetTypeInfoCount@CCmdTarget@@UAEIXZ ; CCmdTarget::GetTypeInfoCount(void)
.text:00401860                 dd offset ?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ ; CCmdTarget::GetTypeLibCache(void)
.text:00401864                 dd offset ?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z ; CCmdTarget::GetTypeLib(ulong,ITypeLib * *)
.text:00401868                 dd offset sub_407990
.text:0040186C                 dd offset ?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ ; CCmdTarget::GetCommandMap(void)
.text:00401870                 dd offset ?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ ; CCmdTarget::GetDispatchMap(void)
.text:00401874                 dd offset ?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ ; CCmdTarget::GetConnectionMap(void)
.text:00401878                 dd offset ?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ ; CCmdTarget::GetInterfaceMap(void)
.text:0040187C                 dd offset ?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ ; CCmdTarget::GetEventSinkMap(void)
.text:00401880                 dd offset ?OnCreateAggregates@CCmdTarget@@UAEHXZ ; CCmdTarget::OnCreateAggregates(void)
.text:00401884                 dd offset ?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z ; CCmdTarget::GetInterfaceHook(void const *)
.text:00401888                 dd offset ?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z ; CCmdTarget::GetExtraConnectionPoints(CPtrArray *)
.text:0040188C                 dd offset ?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z ; CCmdTarget::GetConnectionHook(_GUID const &)
.text:00401890                 dd offset ?PreSubclassWindow@CWnd@@UAEXXZ ; CWnd::PreSubclassWindow(void)
.text:00401894                 dd offset ?Create@CWnd@@UAEHPBG0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z ; CWnd::Create(ushort const *,ushort const *,ulong,tagRECT const &,CWnd *,uint,CCreateContext *)
.text:00401898                 dd offset ?DestroyWindow@CWnd@@UAEHXZ ; CWnd::DestroyWindow(void)
.text:0040189C                 dd offset ?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTW@@@Z ; CWnd::PreCreateWindow(tagCREATESTRUCTW &)
.text:004018A0                 dd offset ?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z ; CWnd::CalcWindowRect(tagRECT *,uint)
.text:004018A4                 dd offset ?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOW@@@Z ; CWnd::OnToolHitTest(CPoint,tagTOOLINFOW *)
.text:004018A8                 dd offset ?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z ; CWnd::GetScrollBarCtrl(int)
.text:004018AC                 dd offset ?WinHelpW@CWnd@@UAEXKI@Z ; CWnd::WinHelpW(ulong,uint)
.text:004018B0                 dd offset ?ContinueModal@CWnd@@UAEHXZ ; CWnd::ContinueModal(void)
.text:004018B4                 dd offset ?EndModalLoop@CWnd@@UAEXH@Z ; CWnd::EndModalLoop(int)
.text:004018B8                 dd offset ?OnCommand@CWnd@@MAEHIJ@Z ; CWnd::OnCommand(uint,long)
.text:004018BC                 dd offset ?OnNotify@CPropertyPage@@MAEHIJPAJ@Z ; CPropertyPage::OnNotify(uint,long,long *)
.text:004018C0                 dd offset ?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ ; CWnd::GetSuperWndProcAddr(void)
.text:004018C4                 dd offset nullsub_1
.text:004018C8                 dd offset sub_403C60
.text:004018CC                 dd offset sub_403C50
.text:004018D0                 dd offset ?PreTranslateMessage@CPropertyPage@@MAEHPAUtagMSG@@@Z ; CPropertyPage::PreTranslateMessage(tagMSG *)
.text:004018D4                 dd offset ?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z ; CWnd::OnAmbientProperty(COleControlSite *,long,tagVARIANT *)
.text:004018D8                 dd offset ?WindowProc@CWnd@@MAEJIIJ@Z ; CWnd::WindowProc(uint,uint,long)
.text:004018DC                 dd offset ?OnWndMsg@CWnd@@MAEHIIJPAJ@Z ; CWnd::OnWndMsg(uint,uint,long,long *)
.text:004018E0                 dd offset ?DefWindowProcW@CWnd@@MAEJIIJ@Z ; CWnd::DefWindowProcW(uint,uint,long)
.text:004018E4                 dd offset ?PostNcDestroy@CWnd@@MAEXXZ ; CWnd::PostNcDestroy(void)
.text:004018E8                 dd offset ?OnChildNotify@CWnd@@MAEHIIJPAJ@Z ; CWnd::OnChildNotify(uint,uint,long,long *)
.text:004018EC                 dd offset ?CheckAutoCenter@CDialog@@UAEHXZ ; CDialog::CheckAutoCenter(void)
.text:004018F0                 dd offset ?IsFrameWnd@CWnd@@UBEHXZ ; CWnd::IsFrameWnd(void)
.text:004018F4                 dd offset ?SetOccDialogInfo@CDialog@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z ; CDialog::SetOccDialogInfo(_AFX_OCC_DIALOG_INFO *)
.text:004018F8                 dd offset ?DoModal@CDialog@@UAEHXZ ; CDialog::DoModal(void)
.text:004018FC                 dd offset sub_407B60
.text:00401900                 dd offset ?OnSetFont@CDialog@@UAEXPAVCFont@@@Z ; CDialog::OnSetFont(CFont *)
.text:00401904                 dd offset ?OnOK@CPropertyPage@@UAEXXZ ; CPropertyPage::OnOK(void)
.text:00401908                 dd offset ?OnCancel@CPropertyPage@@UAEXXZ ; CPropertyPage::OnCancel(void)
.text:0040190C                 dd offset ?PreInitDialog@CDialog@@MAEXXZ ; CDialog::PreInitDialog(void)
.text:00401910                 dd offset sub_407050
.text:00401914                 dd offset ?OnReset@CPropertyPage@@UAEXXZ ; CPropertyPage::OnReset(void)
.text:00401918                 dd offset ?OnSetActive@CPropertyPage@@UAEHXZ ; CPropertyPage::OnSetActive(void)
.text:0040191C                 dd offset ?OnKillActive@CPropertyPage@@UAEHXZ ; CPropertyPage::OnKillActive(void)
.text:00401920                 dd offset ?OnQueryCancel@CPropertyPage@@UAEHXZ ; CPropertyPage::OnQueryCancel(void)
.text:00401924                 dd offset ?OnWizardBack@CPropertyPage@@UAEJXZ ; CPropertyPage::OnWizardBack(void)
.text:00401928                 dd offset ?OnWizardNext@CPropertyPage@@UAEJXZ ; CPropertyPage::OnWizardNext(void)
.text:0040192C                 dd offset ?OnWizardFinish@CPropertyPage@@UAEHXZ ; CPropertyPage::OnWizardFinish(void)
.text:00401930 off_401930      dd offset aCpagetool    ; DATA XREF: sub_407850↓o
.text:00401930                                         ; "CPageTool"
.text:00401934                 dd 0D4h, 0FFFFh
.text:0040193C                 dd offset sub_407810
.text:00401940                 dd offset sub_403E00
.text:00401944                 align 8
.text:00401948                 dd offset ??_R4CBootIniAdvancedDlg@@6B@ ; const CBootIniAdvancedDlg::`RTTI Complete Object Locator'
.text:0040194C ; const CBootIniAdvancedDlg::`vftable'
.text:0040194C ??_7CBootIniAdvancedDlg@@6B@ dd offset sub_40C2F0
.text:0040194C                                         ; DATA XREF: sub_40B6C0+1D↓o
.text:0040194C                                         ; sub_40B6C0+8C↓o ...
.text:00401950                 dd offset sub_40C5D0
.text:00401954                 dd offset nullsub_1
.text:00401958 dword_401958    dd 111h, 0              ; DATA XREF: .text:00401B0C↓o
.text:00401960                 dd 2 dup(3F6h), 0Ch
.text:0040196C                 dd offset sub_40AF10
.text:00401970                 dd 111h, 1, 2 dup(0CEh), 0Ch
.text:00401984                 dd offset sub_40B0A0
.text:00401988                 dd 111h, 0
.text:00401990                 dd 2 dup(0DBh), 0Ch
.text:0040199C                 dd offset sub_40B0D0
.text:004019A0                 dd 111h, 0
.text:004019A8                 dd 2 dup(0DAh), 0Ch
.text:004019B4                 dd offset sub_40B120
.text:004019B8                 dd 111h, 0
.text:004019C0                 dd 2 dup(0D9h), 0Ch
.text:004019CC                 dd offset sub_40B170
.text:004019D0                 dd 111h, 0
.text:004019D8                 dd 2 dup(0DCh), 0Ch
.text:004019E4                 dd offset sub_40B1C0
.text:004019E8                 dd 111h, 0
.text:004019F0                 dd 2 dup(0D8h), 0Ch
.text:004019FC                 dd offset sub_40B210
.text:00401A00                 dd 111h, 0
.text:00401A08                 dd 2 dup(0DFh), 0Ch
.text:00401A14                 dd offset sub_40B390
.text:00401A18                 dd 111h, 0
.text:00401A20                 dd 2 dup(0E0h), 0Ch
.text:00401A2C                 dd offset sub_40B3F0
.text:00401A30                 dd 111h, 0
.text:00401A38                 dd 2 dup(0E1h), 0Ch
.text:00401A44                 dd offset sub_40B440
.text:00401A48                 dd 111h, 0
.text:00401A50                 dd 2 dup(0DEh), 0Ch
.text:00401A5C                 dd offset sub_40B490
.text:00401A60                 dd 111h, 300h, 2 dup(0D6h), 0Ch
.text:00401A74                 dd offset sub_40B4E0
.text:00401A78                 dd 111h, 200h, 2 dup(0D6h), 0Ch
.text:00401A8C                 dd offset sub_40B530
.text:00401A90                 dd 111h, 0
.text:00401A98                 dd 2 dup(0CFh), 0Ch
.text:00401AA4                 dd offset sub_40B6C0
.text:00401AA8                 dd 111h, 0
.text:00401AB0                 dd 2 dup(0D1h), 0Ch
.text:00401ABC                 dd offset sub_40B770
.text:00401AC0                 dd 111h, 0
.text:00401AC8                 dd 2 dup(124h), 0Ch
.text:00401AD4                 dd offset sub_40B810
.text:00401AD8                 dd 2, 3 dup(0)
.text:00401AE8                 dd 0Ch
.text:00401AEC                 dd offset sub_40C000
.text:00401AF0                 dd 6 dup(0)
.text:00401B08 off_401B08      dd offset sub_4040C0    ; DATA XREF: sub_40A950↓o
.text:00401B0C                 dd offset dword_401958
.text:00401B10                 dd offset ??_R4CPageBootIni@@6B@_0 ; const CPageBootIni::`RTTI Complete Object Locator'
.text:00401B14 ; const CPageBootIni::`vftable'
.text:00401B14 ??_7CPageBootIni@@6B@_0 dd offset sub_40C2B0
.text:00401B14                                         ; DATA XREF: sub_40A876+6F↓o
.text:00401B14                                         ; sub_40A900+E↓o
.text:00401B18                 dd offset sub_40B820
.text:00401B1C                 dd offset sub_403C90
.text:00401B20                 dd offset sub_40BED0
.text:00401B24                 dd offset sub_406E40
.text:00401B28                 dd offset sub_40C2C0
.text:00401B2C                 dd offset sub_40BF70
.text:00401B30                 dd offset @_guard_check_icall_nop@4 ; _guard_check_icall_nop(x)
.text:00401B34                 dd offset ??_R4CPageBootIni@@6B@ ; const CPageBootIni::`RTTI Complete Object Locator'
.text:00401B38 ; const CPageBootIni::`vftable'
.text:00401B38 ??_7CPageBootIni@@6B@ dd offset sub_40A870
.text:00401B38                                         ; DATA XREF: sub_40A876+69↓o
.text:00401B38                                         ; sub_40A900+8↓o
.text:00401B3C                 dd offset sub_40A900
.text:00401B40                 dd offset nullsub_1
.text:00401B44                 dd offset @_guard_check_icall_nop@4 ; _guard_check_icall_nop(x)
.text:00401B48                 dd offset nullsub_1
.text:00401B4C                 dd offset ?OnCmdMsg@CDialog@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z ; CDialog::OnCmdMsg(uint,int,void *,AFX_CMDHANDLERINFO *)
.text:00401B50                 dd offset ?OnFinalRelease@CWnd@@UAEXXZ ; CWnd::OnFinalRelease(void)
.text:00401B54                 dd offset ?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z ; CCmdTarget::IsInvokeAllowed(long)
.text:00401B58                 dd offset ?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z ; CCmdTarget::GetDispatchIID(_GUID *)
.text:00401B5C                 dd offset ?GetTypeInfoCount@CCmdTarget@@UAEIXZ ; CCmdTarget::GetTypeInfoCount(void)
.text:00401B60                 dd offset ?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ ; CCmdTarget::GetTypeLibCache(void)
.text:00401B64                 dd offset ?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z ; CCmdTarget::GetTypeLib(ulong,ITypeLib * *)
.text:00401B68                 dd offset sub_40A950
.text:00401B6C                 dd offset ?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ ; CCmdTarget::GetCommandMap(void)
.text:00401B70                 dd offset ?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ ; CCmdTarget::GetDispatchMap(void)
.text:00401B74                 dd offset ?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ ; CCmdTarget::GetConnectionMap(void)
.text:00401B78                 dd offset ?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ ; CCmdTarget::GetInterfaceMap(void)
.text:00401B7C                 dd offset ?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ ; CCmdTarget::GetEventSinkMap(void)
.text:00401B80                 dd offset ?OnCreateAggregates@CCmdTarget@@UAEHXZ ; CCmdTarget::OnCreateAggregates(void)
.text:00401B84                 dd offset ?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z ; CCmdTarget::GetInterfaceHook(void const *)
.text:00401B88                 dd offset ?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z ; CCmdTarget::GetExtraConnectionPoints(CPtrArray *)
.text:00401B8C                 dd offset ?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z ; CCmdTarget::GetConnectionHook(_GUID const &)
.text:00401B90                 dd offset ?PreSubclassWindow@CWnd@@UAEXXZ ; CWnd::PreSubclassWindow(void)
.text:00401B94                 dd offset ?Create@CWnd@@UAEHPBG0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z ; CWnd::Create(ushort const *,ushort const *,ulong,tagRECT const &,CWnd *,uint,CCreateContext *)
.text:00401B98                 dd offset ?DestroyWindow@CWnd@@UAEHXZ ; CWnd::DestroyWindow(void)
.text:00401B9C                 dd offset ?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTW@@@Z ; CWnd::PreCreateWindow(tagCREATESTRUCTW &)
.text:00401BA0                 dd offset ?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z ; CWnd::CalcWindowRect(tagRECT *,uint)
.text:00401BA4                 dd offset ?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOW@@@Z ; CWnd::OnToolHitTest(CPoint,tagTOOLINFOW *)
.text:00401BA8                 dd offset ?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z ; CWnd::GetScrollBarCtrl(int)
.text:00401BAC                 dd offset ?WinHelpW@CWnd@@UAEXKI@Z ; CWnd::WinHelpW(ulong,uint)
.text:00401BB0                 dd offset ?ContinueModal@CWnd@@UAEHXZ ; CWnd::ContinueModal(void)
.text:00401BB4                 dd offset ?EndModalLoop@CWnd@@UAEXH@Z ; CWnd::EndModalLoop(int)
.text:00401BB8                 dd offset ?OnCommand@CWnd@@MAEHIJ@Z ; CWnd::OnCommand(uint,long)
.text:00401BBC                 dd offset ?OnNotify@CPropertyPage@@MAEHIJPAJ@Z ; CPropertyPage::OnNotify(uint,long,long *)
.text:00401BC0                 dd offset ?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ ; CWnd::GetSuperWndProcAddr(void)
.text:00401BC4                 dd offset nullsub_1
.text:00401BC8                 dd offset sub_403C60
.text:00401BCC                 dd offset sub_403C50
.text:00401BD0                 dd offset ?PreTranslateMessage@CPropertyPage@@MAEHPAUtagMSG@@@Z ; CPropertyPage::PreTranslateMessage(tagMSG *)
.text:00401BD4                 dd offset ?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z ; CWnd::OnAmbientProperty(COleControlSite *,long,tagVARIANT *)
.text:00401BD8                 dd offset ?WindowProc@CWnd@@MAEJIIJ@Z ; CWnd::WindowProc(uint,uint,long)
.text:00401BDC                 dd offset ?OnWndMsg@CWnd@@MAEHIIJPAJ@Z ; CWnd::OnWndMsg(uint,uint,long,long *)
.text:00401BE0                 dd offset ?DefWindowProcW@CWnd@@MAEJIIJ@Z ; CWnd::DefWindowProcW(uint,uint,long)
.text:00401BE4                 dd offset ?PostNcDestroy@CWnd@@MAEXXZ ; CWnd::PostNcDestroy(void)
.text:00401BE8                 dd offset ?OnChildNotify@CWnd@@MAEHIIJPAJ@Z ; CWnd::OnChildNotify(uint,uint,long,long *)
.text:00401BEC                 dd offset ?CheckAutoCenter@CDialog@@UAEHXZ ; CDialog::CheckAutoCenter(void)
.text:00401BF0                 dd offset ?IsFrameWnd@CWnd@@UBEHXZ ; CWnd::IsFrameWnd(void)
.text:00401BF4                 dd offset ?SetOccDialogInfo@CDialog@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z ; CDialog::SetOccDialogInfo(_AFX_OCC_DIALOG_INFO *)
.text:00401BF8                 dd offset ?DoModal@CDialog@@UAEHXZ ; CDialog::DoModal(void)
.text:00401BFC                 dd offset sub_40AE70
.text:00401C00                 dd offset ?OnSetFont@CDialog@@UAEXPAVCFont@@@Z ; CDialog::OnSetFont(CFont *)
.text:00401C04                 dd offset ?OnOK@CPropertyPage@@UAEXXZ ; CPropertyPage::OnOK(void)
.text:00401C08                 dd offset ?OnCancel@CPropertyPage@@UAEXXZ ; CPropertyPage::OnCancel(void)
.text:00401C0C                 dd offset ?PreInitDialog@CDialog@@MAEXXZ ; CDialog::PreInitDialog(void)
.text:00401C10                 dd offset ?OnApply@CPageBootIni@@UAEHXZ ; CPageBootIni::OnApply(void)
.text:00401C14                 dd offset ?OnReset@CPropertyPage@@UAEXXZ ; CPropertyPage::OnReset(void)
.text:00401C18                 dd offset ?OnSetActive@CPropertyPage@@UAEHXZ ; CPropertyPage::OnSetActive(void)
.text:00401C1C                 dd offset ?OnKillActive@CPropertyPage@@UAEHXZ ; CPropertyPage::OnKillActive(void)
.text:00401C20                 dd offset ?OnQueryCancel@CPropertyPage@@UAEHXZ ; CPropertyPage::OnQueryCancel(void)
.text:00401C24                 dd offset ?OnWizardBack@CPropertyPage@@UAEJXZ ; CPropertyPage::OnWizardBack(void)
.text:00401C28                 dd offset ?OnWizardNext@CPropertyPage@@UAEJXZ ; CPropertyPage::OnWizardNext(void)
.text:00401C2C                 dd offset ?OnWizardFinish@CPropertyPage@@UAEHXZ ; CPropertyPage::OnWizardFinish(void)
.text:00401C30 off_401C30      dd offset aCpagebootini ; DATA XREF: sub_40A870↓o
.text:00401C30                                         ; "CPageBootIni"
.text:00401C34                 dd 0C4h, 0FFFFh
.text:00401C3C                 dd offset sub_40A830
.text:00401C40                 dd offset sub_403E00
.text:00401C44                 align 8
.text:00401C48 dword_401C48    dd 53h, 3 dup(0)        ; DATA XREF: .text:00401C94↓o
.text:00401C58                 dd 2Ah
.text:00401C5C                 dd offset ?OnHelpInfo@CWnd@@IAEHPAUtagHELPINFO@@@Z ; CWnd::OnHelpInfo(tagHELPINFO *)
.text:00401C60                 dd 111h, 0
.text:00401C68                 dd 2 dup(0E146h), 0Ch
.text:00401C74                 dd offset sub_403C20
.text:00401C78                 dd 6 dup(0)
.text:00401C90 off_401C90      dd offset sub_40C660    ; DATA XREF: sub_40C670↓o
.text:00401C94                 dd offset dword_401C48
.text:00401C98                 dd offset ??_R4CMSConfigSheet@@6B@ ; const CMSConfigSheet::`RTTI Complete Object Locator'
.text:00401C9C ; const CMSConfigSheet::`vftable'
.text:00401C9C ??_7CMSConfigSheet@@6B@ dd offset sub_40C610
.text:00401C9C                                         ; DATA XREF: sub_40C642+9↓o
.text:00401C9C                                         ; sub_40CE7B+34↓o ...
.text:00401CA0                 dd offset ??_GCBuffer@D3DX11Core@@UAEPAXI@Z_2 ; D3DX11Core::CBuffer::`scalar deleting destructor'(uint)
.text:00401CA4                 dd offset nullsub_1
.text:00401CA8                 dd offset @_guard_check_icall_nop@4 ; _guard_check_icall_nop(x)
.text:00401CAC                 dd offset nullsub_1
.text:00401CB0                 dd offset ?OnCmdMsg@CPropertySheet@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z ; CPropertySheet::OnCmdMsg(uint,int,void *,AFX_CMDHANDLERINFO *)
.text:00401CB4                 dd offset ?OnFinalRelease@CWnd@@UAEXXZ ; CWnd::OnFinalRelease(void)
.text:00401CB8                 dd offset ?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z ; CCmdTarget::IsInvokeAllowed(long)
.text:00401CBC                 dd offset ?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z ; CCmdTarget::GetDispatchIID(_GUID *)
.text:00401CC0                 dd offset ?GetTypeInfoCount@CCmdTarget@@UAEIXZ ; CCmdTarget::GetTypeInfoCount(void)
.text:00401CC4                 dd offset ?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ ; CCmdTarget::GetTypeLibCache(void)
.text:00401CC8                 dd offset ?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z ; CCmdTarget::GetTypeLib(ulong,ITypeLib * *)
.text:00401CCC                 dd offset sub_40C670
.text:00401CD0                 dd offset ?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ ; CCmdTarget::GetCommandMap(void)
.text:00401CD4                 dd offset ?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ ; CCmdTarget::GetDispatchMap(void)
.text:00401CD8                 dd offset ?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ ; CCmdTarget::GetConnectionMap(void)
.text:00401CDC                 dd offset ?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ ; CCmdTarget::GetInterfaceMap(void)
.text:00401CE0                 dd offset ?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ ; CCmdTarget::GetEventSinkMap(void)
.text:00401CE4                 dd offset ?OnCreateAggregates@CCmdTarget@@UAEHXZ ; CCmdTarget::OnCreateAggregates(void)
.text:00401CE8                 dd offset ?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z ; CCmdTarget::GetInterfaceHook(void const *)
.text:00401CEC                 dd offset ?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z ; CCmdTarget::GetExtraConnectionPoints(CPtrArray *)
.text:00401CF0                 dd offset ?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z ; CCmdTarget::GetConnectionHook(_GUID const &)
.text:00401CF4                 dd offset ?PreSubclassWindow@CWnd@@UAEXXZ ; CWnd::PreSubclassWindow(void)
.text:00401CF8                 dd offset ?Create@CWnd@@UAEHPBG0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z ; CWnd::Create(ushort const *,ushort const *,ulong,tagRECT const &,CWnd *,uint,CCreateContext *)
.text:00401CFC                 dd offset ?DestroyWindow@CWnd@@UAEHXZ ; CWnd::DestroyWindow(void)
.text:00401D00                 dd offset ?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTW@@@Z ; CWnd::PreCreateWindow(tagCREATESTRUCTW &)
.text:00401D04                 dd offset ?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z ; CWnd::CalcWindowRect(tagRECT *,uint)
.text:00401D08                 dd offset ?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOW@@@Z ; CWnd::OnToolHitTest(CPoint,tagTOOLINFOW *)
.text:00401D0C                 dd offset ?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z ; CWnd::GetScrollBarCtrl(int)
.text:00401D10                 dd offset ?WinHelpW@CWnd@@UAEXKI@Z ; CWnd::WinHelpW(ulong,uint)
.text:00401D14                 dd offset ?ContinueModal@CPropertySheet@@UAEHXZ ; CPropertySheet::ContinueModal(void)
.text:00401D18                 dd offset ?EndModalLoop@CWnd@@UAEXH@Z ; CWnd::EndModalLoop(int)
.text:00401D1C                 dd offset ?OnCommand@CPropertySheet@@UAEHIJ@Z ; CPropertySheet::OnCommand(uint,long)
.text:00401D20                 dd offset ?OnNotify@CWnd@@MAEHIJPAJ@Z ; CWnd::OnNotify(uint,long,long *)
.text:00401D24                 dd offset ?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ ; CWnd::GetSuperWndProcAddr(void)
.text:00401D28                 dd offset nullsub_1
.text:00401D2C                 dd offset sub_403C60
.text:00401D30                 dd offset sub_403C50
.text:00401D34                 dd offset ?PreTranslateMessage@CPropertySheet@@UAEHPAUtagMSG@@@Z ; CPropertySheet::PreTranslateMessage(tagMSG *)
.text:00401D38                 dd offset ?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z ; CWnd::OnAmbientProperty(COleControlSite *,long,tagVARIANT *)
.text:00401D3C                 dd offset ?WindowProc@CWnd@@MAEJIIJ@Z ; CWnd::WindowProc(uint,uint,long)
.text:00401D40                 dd offset ?OnWndMsg@CWnd@@MAEHIIJPAJ@Z ; CWnd::OnWndMsg(uint,uint,long,long *)
.text:00401D44                 dd offset ?DefWindowProcW@CWnd@@MAEJIIJ@Z ; CWnd::DefWindowProcW(uint,uint,long)
.text:00401D48                 dd offset ?PostNcDestroy@CWnd@@MAEXXZ ; CWnd::PostNcDestroy(void)
.text:00401D4C                 dd offset ?OnChildNotify@CWnd@@MAEHIIJPAJ@Z ; CWnd::OnChildNotify(uint,uint,long,long *)
.text:00401D50                 dd offset ?CheckAutoCenter@CWnd@@UAEHXZ ; CWnd::CheckAutoCenter(void)
.text:00401D54                 dd offset ?IsFrameWnd@CWnd@@UBEHXZ ; CWnd::IsFrameWnd(void)
.text:00401D58                 dd offset ?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z ; CWnd::SetOccDialogInfo(_AFX_OCC_DIALOG_INFO *)
.text:00401D5C                 dd offset ?DoModal@CPropertySheet@@UAEHXZ ; CPropertySheet::DoModal(void)
.text:00401D60                 dd offset ?BuildPropPageArray@CPropertySheet@@UAEXXZ ; CPropertySheet::BuildPropPageArray(void)
.text:00401D64                 dd offset sub_40C680
.text:00401D68 off_401D68      dd offset aCmsconfigsheet
.text:00401D68                                         ; DATA XREF: sub_40C610↓o
.text:00401D68                                         ; "CMSConfigSheet"
.text:00401D6C                 align 10h
.text:00401D70                 dd 0FFFFh, 0
.text:00401D78                 dd offset sub_40C600
.text:00401D7C                 align 10h
.text:00401D80                 dd offset ??_R4CRebootDlg@@6B@ ; const CRebootDlg::`RTTI Complete Object Locator'
.text:00401D84 ; const CRebootDlg::`vftable'
.text:00401D84 ??_7CRebootDlg@@6B@ dd offset sub_40DBD0
.text:00401D84                                         ; DATA XREF: sub_40D13E+D9↓o
.text:00401D84                                         ; sub_40D13E:loc_40D2D7↓o
.text:00401D88                 dd offset sub_40C5D0
.text:00401D8C                 dd offset nullsub_1
.text:00401D90                 dd offset ??_R4CMSConfigApp@@6B@ ; const CMSConfigApp::`RTTI Complete Object Locator'
.text:00401D94 ; const CMSConfigApp::`vftable'
.text:00401D94 ??_7CMSConfigApp@@6B@ dd offset ?GetRuntimeClass@CWinApp@@UBEPAUCRuntimeClass@@XZ
.text:00401D94                                         ; DATA XREF: sub_403AC0+12↓o
.text:00401D94                                         ; CWinApp::GetRuntimeClass(void)
.text:00401D98                 dd offset ??_GGdiException@Base@@UAEPAXI@Z_0 ; Base::GdiException::`scalar deleting destructor'(uint)
.text:00401D9C                 dd offset nullsub_1
.text:00401DA0                 dd offset @_guard_check_icall_nop@4 ; _guard_check_icall_nop(x)
.text:00401DA4                 dd offset nullsub_1
.text:00401DA8                 dd offset ?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z ; CCmdTarget::OnCmdMsg(uint,int,void *,AFX_CMDHANDLERINFO *)
.text:00401DAC                 dd offset ?OnFinalRelease@CCmdTarget@@UAEXXZ ; CCmdTarget::OnFinalRelease(void)
.text:00401DB0                 dd offset ?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z ; CCmdTarget::IsInvokeAllowed(long)
.text:00401DB4                 dd offset ?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z ; CCmdTarget::GetDispatchIID(_GUID *)
.text:00401DB8                 dd offset ?GetTypeInfoCount@CCmdTarget@@UAEIXZ ; CCmdTarget::GetTypeInfoCount(void)
.text:00401DBC                 dd offset ?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ ; CCmdTarget::GetTypeLibCache(void)
.text:00401DC0                 dd offset ?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z ; CCmdTarget::GetTypeLib(ulong,ITypeLib * *)
.text:00401DC4                 dd offset sub_40C770
.text:00401DC8                 dd offset ?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ ; CCmdTarget::GetCommandMap(void)
.text:00401DCC                 dd offset ?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ ; CCmdTarget::GetDispatchMap(void)
.text:00401DD0                 dd offset ?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ ; CCmdTarget::GetConnectionMap(void)
.text:00401DD4                 dd offset ?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ ; CCmdTarget::GetInterfaceMap(void)
.text:00401DD8                 dd offset ?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ ; CCmdTarget::GetEventSinkMap(void)
.text:00401DDC                 dd offset ?OnCreateAggregates@CCmdTarget@@UAEHXZ ; CCmdTarget::OnCreateAggregates(void)
.text:00401DE0                 dd offset ?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z ; CCmdTarget::GetInterfaceHook(void const *)
.text:00401DE4                 dd offset ?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z ; CCmdTarget::GetExtraConnectionPoints(CPtrArray *)
.text:00401DE8                 dd offset ?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z ; CCmdTarget::GetConnectionHook(_GUID const &)
.text:00401DEC                 dd offset sub_40C7B0
.text:00401DF0                 dd offset ?Run@CWinApp@@UAEHXZ ; CWinApp::Run(void)
.text:00401DF4                 dd offset ?PreTranslateMessage@CWinThread@@UAEHPAUtagMSG@@@Z ; CWinThread::PreTranslateMessage(tagMSG *)
.text:00401DF8                 dd offset ?PumpMessage@CWinThread@@UAEHXZ ; CWinThread::PumpMessage(void)
.text:00401DFC                 dd offset ?OnIdle@CWinApp@@UAEHJ@Z ; CWinApp::OnIdle(long)
.text:00401E00                 dd offset ?IsIdleMessage@CWinThread@@UAEHPAUtagMSG@@@Z ; CWinThread::IsIdleMessage(tagMSG *)
.text:00401E04                 dd offset sub_40D3B0
.text:00401E08                 dd offset ?ProcessWndProcException@CWinApp@@UAEJPAVCException@@PBUtagMSG@@@Z ; CWinApp::ProcessWndProcException(CException *,tagMSG const *)
.text:00401E0C                 dd offset ?ProcessMessageFilter@CWinThread@@UAEHHPAUtagMSG@@@Z ; CWinThread::ProcessMessageFilter(int,tagMSG *)
.text:00401E10                 dd offset ?GetMainWnd@CWinThread@@UAEPAVCWnd@@XZ ; CWinThread::GetMainWnd(void)
.text:00401E14                 dd offset ?Delete@CWinThread@@UAEXXZ ; CWinThread::Delete(void)
.text:00401E18                 dd offset ?OpenDocumentFile@CWinApp@@UAEPAVCDocument@@PBG@Z ; CWinApp::OpenDocumentFile(ushort const *)
.text:00401E1C                 dd offset ?AddToRecentFileList@CWinApp@@UAEXPBG@Z ; CWinApp::AddToRecentFileList(ushort const *)
.text:00401E20                 dd offset ?InitApplication@CWinApp@@UAEHXZ ; CWinApp::InitApplication(void)
.text:00401E24                 dd offset ?SaveAllModified@CWinApp@@UAEHXZ ; CWinApp::SaveAllModified(void)
.text:00401E28                 dd offset ?DoMessageBox@CWinApp@@UAEHPBGII@Z ; CWinApp::DoMessageBox(ushort const *,uint,uint)
.text:00401E2C                 dd offset ?DoWaitCursor@CWinApp@@UAEXH@Z ; CWinApp::DoWaitCursor(int)
.text:00401E30                 dd offset ?OnDDECommand@CWinApp@@UAEHPAG@Z ; CWinApp::OnDDECommand(ushort *)
.text:00401E34                 dd offset ?WinHelpW@CWinApp@@UAEXKI@Z ; CWinApp::WinHelpW(ulong,uint)
.text:00401E38 dword_401E38    dd 111h, 0              ; DATA XREF: .text:00401E6C↓o
.text:00401E40                 dd 2 dup(0E146h), 0Ch
.text:00401E4C                 dd offset ?OnHelp@CWinApp@@IAEXXZ ; CWinApp::OnHelp(void)
.text:00401E50                 dd 6 dup(0)
.text:00401E68 off_401E68      dd offset sub_40C760    ; DATA XREF: sub_40C770↓o
.text:00401E6C                 dd offset dword_401E38
.text:00401E70 off_401E70      dd offset aRpcss        ; DATA XREF: sub_406092+13↓r
.text:00401E70                                         ; sub_406092+1F↓o ...
.text:00401E70                                         ; "rpcss"
.text:00401E74                 dd offset aDcomlaunch   ; "dcomlaunch"
.text:00401E78                 dd offset aAppinfo      ; "appinfo"
.text:00401E7C                 dd offset aProfsvc      ; "profsvc"
.text:00401E80                 dd offset aSppsvc       ; "sppsvc"
.text:00401E84                 dd offset aUsermanager  ; "usermanager"
.text:00401E88                 align 10h
.text:00401E90 __load_config_used dd 98h               ; Size
.text:00401E94                 dd 0                    ; Time stamp
.text:00401E98                 dw 2 dup(0)             ; Version: 0.0
.text:00401E9C                 dd 0                    ; GlobalFlagsClear
.text:00401EA0                 dd 0                    ; GlobalFlagsSet
.text:00401EA4                 dd 0                    ; CriticalSectionDefaultTimeout
.text:00401EA8                 dd 0                    ; DeCommitFreeBlockThreshold
.text:00401EAC                 dd 0                    ; DeCommitTotalFreeThreshold
.text:00401EB0                 dd 0                    ; LockPrefixTable
.text:00401EB4                 dd 0                    ; MaximumAllocationSize
.text:00401EB8                 dd 0                    ; VirtualMemoryThreshold
.text:00401EBC                 dd 0                    ; ProcessAffinityMask
.text:00401EC0                 dd 0                    ; ProcessHeapFlags
.text:00401EC4                 dw 0                    ; CSDVersion
.text:00401EC6                 dw 0                    ; Reserved1
.text:00401EC8                 dd 0                    ; EditList
.text:00401ECC                 dd offset ___security_cookie ; SecurityCookie
.text:00401ED0                 dd offset ___safe_se_handler_table ; SEHandlerTable
.text:00401ED4                 dd 35h                  ; SEHandlerCount
.text:00401ED8                 dd offset ___guard_check_icall_fptr ; GuardCFCheckFunctionPointer
.text:00401EDC                 dd 0                    ; GuardCFDispatchFunctionPointer
.text:00401EE0                 dd offset ___guard_fids_table ; GuardCFFunctionTable
.text:00401EE4                 dd 0F7h                 ; GuardCFFunctionCount
.text:00401EE8                 dd 17500h               ; GuardFlags
.text:00401EEC                 dd 3 dup(0)
.text:00401EF8                 dd offset dword_402C68
.text:00401EFC                 dd 1, 0Ah dup(0)
.text:00401F28 ; CAutoStartDlg::`RTTI Base Class Array'
.text:00401F28 ??_R2CAutoStartDlg@@8 dd offset ??_R1A@?0A@EA@CAutoStartDlg@@8
.text:00401F28                                         ; DATA XREF: .text:00402050↓o
.text:00401F28                                         ; reference to base class decription 1
.text:00401F2C                 dd offset ??_R1A@?0A@EA@CDialog@@8 ; reference to base class decription 2
.text:00401F30                 dd offset ??_R1A@?0A@EA@CWnd@@8 ; reference to base class decription 3
.text:00401F34                 dd offset ??_R1A@?0A@EA@CCmdTarget@@8 ; reference to base class decription 4
.text:00401F38                 dd offset ??_R1A@?0A@EA@CObject@@8 ; reference to base class decription 5
.text:00401F3C                 align 10h
.text:00401F40 ; CWnd::`RTTI Base Class Array'
.text:00401F40 ??_R2CWnd@@8    dd offset ??_R1A@?0A@EA@CWnd@@8
.text:00401F40                                         ; DATA XREF: .text:00401F5C↓o
.text:00401F40                                         ; reference to base class decription 1
.text:00401F44                 dd offset ??_R1A@?0A@EA@CCmdTarget@@8 ; reference to base class decription 2
.text:00401F48                 dd offset ??_R1A@?0A@EA@CObject@@8 ; reference to base class decription 3
.text:00401F4C                 align 10h
.text:00401F50 ; CWnd::`RTTI Class Hierarchy Descriptor'
.text:00401F50 ??_R3CWnd@@8    dd 0                    ; DATA XREF: .text:00401F78↓o
.text:00401F50                                         ; signature
.text:00401F54                 dd 0                    ; attributes
.text:00401F58                 dd 3                    ; # of items in the array of base classes
.text:00401F5C                 dd offset ??_R2CWnd@@8  ; reference to the array of base classes
.text:00401F60 ; CWnd::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:00401F60 ??_R1A@?0A@EA@CWnd@@8 dd offset ??_R0?AVCWnd@@@8
.text:00401F60                                         ; DATA XREF: .text:00401F30↑o
.text:00401F60                                         ; .text:CWnd::`RTTI Base Class Array'↑o ...
.text:00401F60                                         ; reference to type description
.text:00401F64                 dd 2                    ; # of sub elements within base class array
.text:00401F68                 dd 0                    ; member displacement
.text:00401F6C                 dd -1                   ; vftable displacement
.text:00401F70                 dd 0                    ; displacement within vftable
.text:00401F74                 dd 40h                  ; base class attributes
.text:00401F78                 dd offset ??_R3CWnd@@8  ; reference to class hierarchy descriptor
.text:00401F7C ; CCmdTarget::`RTTI Base Class Array'
.text:00401F7C ??_R2CCmdTarget@@8 dd offset ??_R1A@?0A@EA@CCmdTarget@@8
.text:00401F7C                                         ; DATA XREF: .text:00401F94↓o
.text:00401F7C                                         ; reference to base class decription 1
.text:00401F80                 dd offset ??_R1A@?0A@EA@CObject@@8 ; reference to base class decription 2
.text:00401F84                 align 8
.text:00401F88 ; CCmdTarget::`RTTI Class Hierarchy Descriptor'
.text:00401F88 ??_R3CCmdTarget@@8 dd 0                 ; DATA XREF: .text:00401FB0↓o
.text:00401F88                                         ; signature
.text:00401F8C                 dd 0                    ; attributes
.text:00401F90                 dd 2                    ; # of items in the array of base classes
.text:00401F94                 dd offset ??_R2CCmdTarget@@8 ; reference to the array of base classes
.text:00401F98 ; CCmdTarget::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:00401F98 ??_R1A@?0A@EA@CCmdTarget@@8 dd offset ??_R0?AVCCmdTarget@@@8
.text:00401F98                                         ; DATA XREF: .text:00401F34↑o
.text:00401F98                                         ; .text:00401F44↑o ...
.text:00401F98                                         ; reference to type description
.text:00401F9C                 dd 1                    ; # of sub elements within base class array
.text:00401FA0                 dd 0                    ; member displacement
.text:00401FA4                 dd -1                   ; vftable displacement
.text:00401FA8                 dd 0                    ; displacement within vftable
.text:00401FAC                 dd 40h                  ; base class attributes
.text:00401FB0                 dd offset ??_R3CCmdTarget@@8 ; reference to class hierarchy descriptor
.text:00401FB4 ; CObject::`RTTI Base Class Array'
.text:00401FB4 ??_R2CObject@@8 dd offset ??_R1A@?0A@EA@CObject@@8
.text:00401FB4                                         ; DATA XREF: .text:00401FC8↓o
.text:00401FB4                                         ; reference to base class decription 1
.text:00401FB8                 dd 0
.text:00401FBC ; CObject::`RTTI Class Hierarchy Descriptor'
.text:00401FBC ??_R3CObject@@8 dd 0                    ; DATA XREF: .text:00401FE4↓o
.text:00401FBC                                         ; signature
.text:00401FC0                 dd 0                    ; attributes
.text:00401FC4                 dd 1                    ; # of items in the array of base classes
.text:00401FC8                 dd offset ??_R2CObject@@8 ; reference to the array of base classes
.text:00401FCC ; CObject::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:00401FCC ??_R1A@?0A@EA@CObject@@8 dd offset ??_R0?AVCObject@@@8
.text:00401FCC                                         ; DATA XREF: .text:00401F38↑o
.text:00401FCC                                         ; .text:00401F48↑o ...
.text:00401FCC                                         ; reference to type description
.text:00401FD0                 dd 0                    ; # of sub elements within base class array
.text:00401FD4                 dd 0                    ; member displacement
.text:00401FD8                 dd -1                   ; vftable displacement
.text:00401FDC                 dd 0                    ; displacement within vftable
.text:00401FE0                 dd 40h                  ; base class attributes
.text:00401FE4                 dd offset ??_R3CObject@@8 ; reference to class hierarchy descriptor
.text:00401FE8 ; CDialog::`RTTI Base Class Array'
.text:00401FE8 ??_R2CDialog@@8 dd offset ??_R1A@?0A@EA@CDialog@@8
.text:00401FE8                                         ; DATA XREF: .text:00402008↓o
.text:00401FE8                                         ; reference to base class decription 1
.text:00401FEC                 dd offset ??_R1A@?0A@EA@CWnd@@8 ; reference to base class decription 2
.text:00401FF0                 dd offset ??_R1A@?0A@EA@CCmdTarget@@8 ; reference to base class decription 3
.text:00401FF4                 dd offset ??_R1A@?0A@EA@CObject@@8 ; reference to base class decription 4
.text:00401FF8                 dd 0
.text:00401FFC ; CDialog::`RTTI Class Hierarchy Descriptor'
.text:00401FFC ??_R3CDialog@@8 dd 0                    ; DATA XREF: .text:00402024↓o
.text:00401FFC                                         ; signature
.text:00402000                 dd 0                    ; attributes
.text:00402004                 dd 4                    ; # of items in the array of base classes
.text:00402008                 dd offset ??_R2CDialog@@8 ; reference to the array of base classes
.text:0040200C ; CDialog::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:0040200C ??_R1A@?0A@EA@CDialog@@8 dd offset ??_R0?AVCDialog@@@8
.text:0040200C                                         ; DATA XREF: .text:00401F2C↑o
.text:0040200C                                         ; .text:CDialog::`RTTI Base Class Array'↑o ...
.text:0040200C                                         ; reference to type description
.text:00402010                 dd 3                    ; # of sub elements within base class array
.text:00402014                 dd 0                    ; member displacement
.text:00402018                 dd -1                   ; vftable displacement
.text:0040201C                 dd 0                    ; displacement within vftable
.text:00402020                 dd 40h                  ; base class attributes
.text:00402024                 dd offset ??_R3CDialog@@8 ; reference to class hierarchy descriptor
.text:00402028 ; CAutoStartDlg::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:00402028 ??_R1A@?0A@EA@CAutoStartDlg@@8 dd offset ??_R0?AVCAutoStartDlg@@@8
.text:00402028                                         ; DATA XREF: .text:CAutoStartDlg::`RTTI Base Class Array'↑o
.text:00402028                                         ; reference to type description
.text:0040202C                 dd 4                    ; # of sub elements within base class array
.text:00402030                 dd 0                    ; member displacement
.text:00402034                 dd -1                   ; vftable displacement
.text:00402038                 dd 0                    ; displacement within vftable
.text:0040203C                 dd 40h                  ; base class attributes
.text:00402040                 dd offset ??_R3CAutoStartDlg@@8 ; reference to class hierarchy descriptor
.text:00402044 ; CAutoStartDlg::`RTTI Class Hierarchy Descriptor'
.text:00402044 ??_R3CAutoStartDlg@@8 dd 0              ; DATA XREF: .text:00402040↑o
.text:00402044                                         ; .text:00402064↓o
.text:00402044                                         ; signature
.text:00402048                 dd 0                    ; attributes
.text:0040204C                 dd 5                    ; # of items in the array of base classes
.text:00402050                 dd offset ??_R2CAutoStartDlg@@8 ; reference to the array of base classes
.text:00402054 ; const CAutoStartDlg::`RTTI Complete Object Locator'
.text:00402054 ??_R4CAutoStartDlg@@6B@ dd 0            ; DATA XREF: .text:00401068↑o
.text:00402054                                         ; signature
.text:00402058                 dd 0                    ; offset of this vtable in complete class (from top)
.text:0040205C                 dd 0                    ; offset of constructor displacement
.text:00402060                 dd offset ??_R0?AVCAutoStartDlg@@@8 ; reference to type description
.text:00402064                 dd offset ??_R3CAutoStartDlg@@8 ; reference to hierarchy description
.text:00402068 ; CPageServices::`RTTI Base Class Array'
.text:00402068 ??_R2CPageServices@@8 dd offset ??_R1A@?0A@EA@CPageServices@@8
.text:00402068                                         ; DATA XREF: .text:00402110↓o
.text:00402068                                         ; reference to base class decription 1
.text:0040206C                 dd offset ??_R1A@?0A@EA@CPropertyPage@@8 ; reference to base class decription 2
.text:00402070                 dd offset ??_R1A@?0A@EA@CDialog@@8 ; reference to base class decription 3
.text:00402074                 dd offset ??_R1A@?0A@EA@CWnd@@8 ; reference to base class decription 4
.text:00402078                 dd offset ??_R1A@?0A@EA@CCmdTarget@@8 ; reference to base class decription 5
.text:0040207C                 dd offset ??_R1A@?0A@EA@CObject@@8 ; reference to base class decription 6
.text:00402080                 dd offset ??_R1JA@?0A@EA@CPageBase@@8 ; reference to base class decription 7
.text:00402084                 align 8
.text:00402088 ; CPropertyPage::`RTTI Base Class Array'
.text:00402088 ??_R2CPropertyPage@@8 dd offset ??_R1A@?0A@EA@CPropertyPage@@8
.text:00402088                                         ; DATA XREF: .text:00402100↓o
.text:00402088                                         ; reference to base class decription 1
.text:0040208C                 dd offset ??_R1A@?0A@EA@CDialog@@8 ; reference to base class decription 2
.text:00402090                 dd offset ??_R1A@?0A@EA@CWnd@@8 ; reference to base class decription 3
.text:00402094                 dd offset ??_R1A@?0A@EA@CCmdTarget@@8 ; reference to base class decription 4
.text:00402098                 dd offset ??_R1A@?0A@EA@CObject@@8 ; reference to base class decription 5
.text:0040209C                 align 10h
.text:004020A0 ; CPageBase::`RTTI Base Class Descriptor at (144, -1, 0, 64)'
.text:004020A0 ??_R1JA@?0A@EA@CPageBase@@8 dd offset ??_R0?AVCPageBase@@@8
.text:004020A0                                         ; DATA XREF: .text:00402080↑o
.text:004020A0                                         ; .text:004022B8↓o ...
.text:004020A0                                         ; reference to type description
.text:004020A4                 dd 0                    ; # of sub elements within base class array
.text:004020A8                 dd 144                  ; member displacement
.text:004020AC                 dd -1                   ; vftable displacement
.text:004020B0                 dd 0                    ; displacement within vftable
.text:004020B4                 dd 40h                  ; base class attributes
.text:004020B8                 dd offset ??_R3CPageBase@@8 ; reference to class hierarchy descriptor
.text:004020BC ; CPageServices::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:004020BC ??_R1A@?0A@EA@CPageServices@@8 dd offset ??_R0?AVCPageServices@@@8
.text:004020BC                                         ; DATA XREF: .text:CPageServices::`RTTI Base Class Array'↑o
.text:004020BC                                         ; reference to type description
.text:004020C0                 dd 6                    ; # of sub elements within base class array
.text:004020C4                 dd 0                    ; member displacement
.text:004020C8                 dd -1                   ; vftable displacement
.text:004020CC                 dd 0                    ; displacement within vftable
.text:004020D0                 dd 40h                  ; base class attributes
.text:004020D4                 dd offset ??_R3CPageServices@@8 ; reference to class hierarchy descriptor
.text:004020D8 ; CPropertyPage::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:004020D8 ??_R1A@?0A@EA@CPropertyPage@@8 dd offset ??_R0?AVCPropertyPage@@@8
.text:004020D8                                         ; DATA XREF: .text:0040206C↑o
.text:004020D8                                         ; .text:CPropertyPage::`RTTI Base Class Array'↑o ...
.text:004020D8                                         ; reference to type description
.text:004020DC                 dd 4                    ; # of sub elements within base class array
.text:004020E0                 dd 0                    ; member displacement
.text:004020E4                 dd -1                   ; vftable displacement
.text:004020E8                 dd 0                    ; displacement within vftable
.text:004020EC                 dd 40h                  ; base class attributes
.text:004020F0                 dd offset ??_R3CPropertyPage@@8 ; reference to class hierarchy descriptor
.text:004020F4 ; CPropertyPage::`RTTI Class Hierarchy Descriptor'
.text:004020F4 ??_R3CPropertyPage@@8 dd 0              ; DATA XREF: .text:004020F0↑o
.text:004020F4                                         ; signature
.text:004020F8                 dd 0                    ; attributes
.text:004020FC                 dd 5                    ; # of items in the array of base classes
.text:00402100                 dd offset ??_R2CPropertyPage@@8 ; reference to the array of base classes
.text:00402104 ; CPageServices::`RTTI Class Hierarchy Descriptor'
.text:00402104 ??_R3CPageServices@@8 dd 0              ; DATA XREF: .text:004020D4↑o
.text:00402104                                         ; .text:00402124↓o ...
.text:00402104                                         ; signature
.text:00402108                 dd 1                    ; attributes
.text:0040210C                 dd 7                    ; # of items in the array of base classes
.text:00402110                 dd offset ??_R2CPageServices@@8 ; reference to the array of base classes
.text:00402114 ; const CPageServices::`RTTI Complete Object Locator'
.text:00402114 ??_R4CPageServices@@6B@_0 dd 0          ; DATA XREF: .text:00401240↑o
.text:00402114                                         ; signature
.text:00402118                 dd 144                  ; offset of this vtable in complete class (from top)
.text:0040211C                 dd 0                    ; offset of constructor displacement
.text:00402120                 dd offset ??_R0?AVCPageServices@@@8 ; reference to type description
.text:00402124                 dd offset ??_R3CPageServices@@8 ; reference to hierarchy description
.text:00402128 ; const CPageServices::`RTTI Complete Object Locator'
.text:00402128 ??_R4CPageServices@@6B@ dd 0            ; DATA XREF: .text:00401264↑o
.text:00402128                                         ; signature
.text:0040212C                 dd 0                    ; offset of this vtable in complete class (from top)
.text:00402130                 dd 0                    ; offset of constructor displacement
.text:00402134                 dd offset ??_R0?AVCPageServices@@@8 ; reference to type description
.text:00402138                 dd offset ??_R3CPageServices@@8 ; reference to hierarchy description
.text:0040213C ; std::length_error::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:0040213C ??_R1A@?0A@EA@length_error@std@@8 dd offset ??_R0?AVlength_error@std@@@8
.text:0040213C                                         ; DATA XREF: .text:std::length_error::`RTTI Base Class Array'↓o
.text:0040213C                                         ; reference to type description
.text:00402140                 dd 2                    ; # of sub elements within base class array
.text:00402144                 dd 0                    ; member displacement
.text:00402148                 dd -1                   ; vftable displacement
.text:0040214C                 dd 0                    ; displacement within vftable
.text:00402150                 dd 40h                  ; base class attributes
.text:00402154                 dd offset ??_R3length_error@std@@8 ; reference to class hierarchy descriptor
.text:00402158 ; std::length_error::`RTTI Base Class Array'
.text:00402158 ??_R2length_error@std@@8 dd offset ??_R1A@?0A@EA@length_error@std@@8
.text:00402158                                         ; DATA XREF: .text:00402174↓o
.text:00402158                                         ; reference to base class decription 1
.text:0040215C                 dd offset ??_R1A@?0A@EA@logic_error@std@@8 ; reference to base class decription 2
.text:00402160                 dd offset ??_R1A@?0A@EA@exception@@8 ; reference to base class decription 3
.text:00402164                 align 8
.text:00402168 ; std::length_error::`RTTI Class Hierarchy Descriptor'
.text:00402168 ??_R3length_error@std@@8 dd 0           ; DATA XREF: .text:00402154↑o
.text:00402168                                         ; .text:00402188↓o
.text:00402168                                         ; signature
.text:0040216C                 dd 0                    ; attributes
.text:00402170                 dd 3                    ; # of items in the array of base classes
.text:00402174                 dd offset ??_R2length_error@std@@8 ; reference to the array of base classes
.text:00402178 ; const std::length_error::`RTTI Complete Object Locator'
.text:00402178 ??_R4length_error@std@@6B@ dd 0         ; DATA XREF: .text:00401164↑o
.text:00402178                                         ; signature
.text:0040217C                 dd 0                    ; offset of this vtable in complete class (from top)
.text:00402180                 dd 0                    ; offset of constructor displacement
.text:00402184                 dd offset ??_R0?AVlength_error@std@@@8 ; reference to type description
.text:00402188                 dd offset ??_R3length_error@std@@8 ; reference to hierarchy description
.text:0040218C ; std::logic_error::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:0040218C ??_R1A@?0A@EA@logic_error@std@@8 dd offset ??_R0?AVlogic_error@std@@@8
.text:0040218C                                         ; DATA XREF: .text:0040215C↑o
.text:0040218C                                         ; .text:std::logic_error::`RTTI Base Class Array'↓o
.text:0040218C                                         ; reference to type description
.text:00402190                 dd 1                    ; # of sub elements within base class array
.text:00402194                 dd 0                    ; member displacement
.text:00402198                 dd -1                   ; vftable displacement
.text:0040219C                 dd 0                    ; displacement within vftable
.text:004021A0                 dd 40h                  ; base class attributes
.text:004021A4                 dd offset ??_R3logic_error@std@@8 ; reference to class hierarchy descriptor
.text:004021A8 ; std::logic_error::`RTTI Base Class Array'
.text:004021A8 ??_R2logic_error@std@@8 dd offset ??_R1A@?0A@EA@logic_error@std@@8
.text:004021A8                                         ; DATA XREF: .text:004021C0↓o
.text:004021A8                                         ; reference to base class decription 1
.text:004021AC                 dd offset ??_R1A@?0A@EA@exception@@8 ; reference to base class decription 2
.text:004021B0                 dd 0
.text:004021B4 ; std::logic_error::`RTTI Class Hierarchy Descriptor'
.text:004021B4 ??_R3logic_error@std@@8 dd 0            ; DATA XREF: .text:004021A4↑o
.text:004021B4                                         ; .text:004021D4↓o
.text:004021B4                                         ; signature
.text:004021B8                 dd 0                    ; attributes
.text:004021BC                 dd 2                    ; # of items in the array of base classes
.text:004021C0                 dd offset ??_R2logic_error@std@@8 ; reference to the array of base classes
.text:004021C4 ; const std::logic_error::`RTTI Complete Object Locator'
.text:004021C4 ??_R4logic_error@std@@6B@ dd 0          ; DATA XREF: .text:00401144↑o
.text:004021C4                                         ; signature
.text:004021C8                 dd 0                    ; offset of this vtable in complete class (from top)
.text:004021CC                 dd 0                    ; offset of constructor displacement
.text:004021D0                 dd offset ??_R0?AVlogic_error@std@@@8 ; reference to type description
.text:004021D4                 dd offset ??_R3logic_error@std@@8 ; reference to hierarchy description
.text:004021D8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:004021D8 ??_R1A@?0A@EA@bad_alloc@std@@8 dd offset ??_R0?AVbad_alloc@std@@@8
.text:004021D8                                         ; DATA XREF: .text:std::bad_alloc::`RTTI Base Class Array'↓o
.text:004021D8                                         ; reference to type description
.text:004021DC                 dd 1                    ; # of sub elements within base class array
.text:004021E0                 dd 0                    ; member displacement
.text:004021E4                 dd -1                   ; vftable displacement
.text:004021E8                 dd 0                    ; displacement within vftable
.text:004021EC                 dd 40h                  ; base class attributes
.text:004021F0                 dd offset ??_R3bad_alloc@std@@8 ; reference to class hierarchy descriptor
.text:004021F4 ; exception::`RTTI Base Class Array'
.text:004021F4 ??_R2exception@@8 dd offset ??_R1A@?0A@EA@exception@@8
.text:004021F4                                         ; DATA XREF: .text:00402208↓o
.text:004021F4                                         ; reference to base class decription 1
.text:004021F8                 dd 0
.text:004021FC ; exception::`RTTI Class Hierarchy Descriptor'
.text:004021FC ??_R3exception@@8 dd 0                  ; DATA XREF: .text:00402224↓o
.text:004021FC                                         ; signature
.text:00402200                 dd 0                    ; attributes
.text:00402204                 dd 1                    ; # of items in the array of base classes
.text:00402208                 dd offset ??_R2exception@@8 ; reference to the array of base classes
.text:0040220C ; exception::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:0040220C ??_R1A@?0A@EA@exception@@8 dd offset ??_R0?AVexception@@@8
.text:0040220C                                         ; DATA XREF: .text:00402160↑o
.text:0040220C                                         ; .text:004021AC↑o ...
.text:0040220C                                         ; reference to type description
.text:00402210                 dd 0                    ; # of sub elements within base class array
.text:00402214                 dd 0                    ; member displacement
.text:00402218                 dd -1                   ; vftable displacement
.text:0040221C                 dd 0                    ; displacement within vftable
.text:00402220                 dd 40h                  ; base class attributes
.text:00402224                 dd offset ??_R3exception@@8 ; reference to class hierarchy descriptor
.text:00402228 ; std::bad_alloc::`RTTI Base Class Array'
.text:00402228 ??_R2bad_alloc@std@@8 dd offset ??_R1A@?0A@EA@bad_alloc@std@@8
.text:00402228                                         ; DATA XREF: .text:00402240↓o
.text:00402228                                         ; reference to base class decription 1
.text:0040222C                 dd offset ??_R1A@?0A@EA@exception@@8 ; reference to base class decription 2
.text:00402230                 dd 0
.text:00402234 ; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
.text:00402234 ??_R3bad_alloc@std@@8 dd 0              ; DATA XREF: .text:004021F0↑o
.text:00402234                                         ; .text:00402254↓o
.text:00402234                                         ; signature
.text:00402238                 dd 0                    ; attributes
.text:0040223C                 dd 2                    ; # of items in the array of base classes
.text:00402240                 dd offset ??_R2bad_alloc@std@@8 ; reference to the array of base classes
.text:00402244 ; const std::bad_alloc::`RTTI Complete Object Locator'
.text:00402244 ??_R4bad_alloc@std@@6B@ dd 0            ; DATA XREF: .text:00401154↑o
.text:00402244                                         ; signature
.text:00402248                 dd 0                    ; offset of this vtable in complete class (from top)
.text:0040224C                 dd 0                    ; offset of constructor displacement
.text:00402250                 dd offset ??_R0?AVbad_alloc@std@@@8 ; reference to type description
.text:00402254                 dd offset ??_R3bad_alloc@std@@8 ; reference to hierarchy description
.text:00402258 ; CPageBase::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:00402258 ??_R1A@?0A@EA@CPageBase@@8 dd offset ??_R0?AVCPageBase@@@8
.text:00402258                                         ; DATA XREF: .text:CPageBase::`RTTI Base Class Array'↓o
.text:00402258                                         ; reference to type description
.text:0040225C                 dd 0                    ; # of sub elements within base class array
.text:00402260                 dd 0                    ; member displacement
.text:00402264                 dd -1                   ; vftable displacement
.text:00402268                 dd 0                    ; displacement within vftable
.text:0040226C                 dd 40h                  ; base class attributes
.text:00402270                 dd offset ??_R3CPageBase@@8 ; reference to class hierarchy descriptor
.text:00402274 ; CPageBase::`RTTI Base Class Array'
.text:00402274 ??_R2CPageBase@@8 dd offset ??_R1A@?0A@EA@CPageBase@@8
.text:00402274                                         ; DATA XREF: .text:00402288↓o
.text:00402274                                         ; reference to base class decription 1
.text:00402278                 dd 0
.text:0040227C ; CPageBase::`RTTI Class Hierarchy Descriptor'
.text:0040227C ??_R3CPageBase@@8 dd 0                  ; DATA XREF: .text:004020B8↑o
.text:0040227C                                         ; .text:00402270↑o ...
.text:0040227C                                         ; signature
.text:00402280                 dd 0                    ; attributes
.text:00402284                 dd 1                    ; # of items in the array of base classes
.text:00402288                 dd offset ??_R2CPageBase@@8 ; reference to the array of base classes
.text:0040228C ; const CPageBase::`RTTI Complete Object Locator'
.text:0040228C ??_R4CPageBase@@6B@ dd 0                ; DATA XREF: .text:00401360↑o
.text:0040228C                                         ; signature
.text:00402290                 dd 0                    ; offset of this vtable in complete class (from top)
.text:00402294                 dd 0                    ; offset of constructor displacement
.text:00402298                 dd offset ??_R0?AVCPageBase@@@8 ; reference to type description
.text:0040229C                 dd offset ??_R3CPageBase@@8 ; reference to hierarchy description
.text:004022A0 ; CPageStartup::`RTTI Base Class Array'
.text:004022A0 ??_R2CPageStartup@@8 dd offset ??_R1A@?0A@EA@CPageStartup@@8
.text:004022A0                                         ; DATA XREF: .text:004022E8↓o
.text:004022A0                                         ; reference to base class decription 1
.text:004022A4                 dd offset ??_R1A@?0A@EA@CPropertyPage@@8 ; reference to base class decription 2
.text:004022A8                 dd offset ??_R1A@?0A@EA@CDialog@@8 ; reference to base class decription 3
.text:004022AC                 dd offset ??_R1A@?0A@EA@CWnd@@8 ; reference to base class decription 4
.text:004022B0                 dd offset ??_R1A@?0A@EA@CCmdTarget@@8 ; reference to base class decription 5
.text:004022B4                 dd offset ??_R1A@?0A@EA@CObject@@8 ; reference to base class decription 6
.text:004022B8                 dd offset ??_R1JA@?0A@EA@CPageBase@@8 ; reference to base class decription 7
.text:004022BC                 align 10h
.text:004022C0 ; CPageStartup::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:004022C0 ??_R1A@?0A@EA@CPageStartup@@8 dd offset ??_R0?AVCPageStartup@@@8
.text:004022C0                                         ; DATA XREF: .text:CPageStartup::`RTTI Base Class Array'↑o
.text:004022C0                                         ; reference to type description
.text:004022C4                 dd 6                    ; # of sub elements within base class array
.text:004022C8                 dd 0                    ; member displacement
.text:004022CC                 dd -1                   ; vftable displacement
.text:004022D0                 dd 0                    ; displacement within vftable
.text:004022D4                 dd 40h                  ; base class attributes
.text:004022D8                 dd offset ??_R3CPageStartup@@8 ; reference to class hierarchy descriptor
.text:004022DC ; CPageStartup::`RTTI Class Hierarchy Descriptor'
.text:004022DC ??_R3CPageStartup@@8 dd 0               ; DATA XREF: .text:004022D8↑o
.text:004022DC                                         ; .text:004022FC↓o ...
.text:004022DC                                         ; signature
.text:004022E0                 dd 1                    ; attributes
.text:004022E4                 dd 7                    ; # of items in the array of base classes
.text:004022E8                 dd offset ??_R2CPageStartup@@8 ; reference to the array of base classes
.text:004022EC ; const CPageStartup::`RTTI Complete Object Locator'
.text:004022EC ??_R4CPageStartup@@6B@_0 dd 0           ; DATA XREF: .text:00401408↑o
.text:004022EC                                         ; signature
.text:004022F0                 dd 144                  ; offset of this vtable in complete class (from top)
.text:004022F4                 dd 0                    ; offset of constructor displacement
.text:004022F8                 dd offset ??_R0?AVCPageStartup@@@8 ; reference to type description
.text:004022FC                 dd offset ??_R3CPageStartup@@8 ; reference to hierarchy description
.text:00402300 ; const CPageStartup::`RTTI Complete Object Locator'
.text:00402300 ??_R4CPageStartup@@6B@ dd 0             ; DATA XREF: .text:0040142C↑o
.text:00402300                                         ; signature
.text:00402304                 dd 0                    ; offset of this vtable in complete class (from top)
.text:00402308                 dd 0                    ; offset of constructor displacement
.text:0040230C                 dd offset ??_R0?AVCPageStartup@@@8 ; reference to type description
.text:00402310                 dd offset ??_R3CPageStartup@@8 ; reference to hierarchy description
.text:00402314 ; CPageGeneral::`RTTI Base Class Array'
.text:00402314 ??_R2CPageGeneral@@8 dd offset ??_R1A@?0A@EA@CPageGeneral@@8
.text:00402314                                         ; DATA XREF: .text:0040235C↓o
.text:00402314                                         ; reference to base class decription 1
.text:00402318                 dd offset ??_R1A@?0A@EA@CPropertyPage@@8 ; reference to base class decription 2
.text:0040231C                 dd offset ??_R1A@?0A@EA@CDialog@@8 ; reference to base class decription 3
.text:00402320                 dd offset ??_R1A@?0A@EA@CWnd@@8 ; reference to base class decription 4
.text:00402324                 dd offset ??_R1A@?0A@EA@CCmdTarget@@8 ; reference to base class decription 5
.text:00402328                 dd offset ??_R1A@?0A@EA@CObject@@8 ; reference to base class decription 6
.text:0040232C                 dd offset ??_R1JA@?0A@EA@CPageBase@@8 ; reference to base class decription 7
.text:00402330                 dd 0
.text:00402334 ; CPageGeneral::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:00402334 ??_R1A@?0A@EA@CPageGeneral@@8 dd offset ??_R0?AVCPageGeneral@@@8
.text:00402334                                         ; DATA XREF: .text:CPageGeneral::`RTTI Base Class Array'↑o
.text:00402334                                         ; reference to type description
.text:00402338                 dd 6                    ; # of sub elements within base class array
.text:0040233C                 dd 0                    ; member displacement
.text:00402340                 dd -1                   ; vftable displacement
.text:00402344                 dd 0                    ; displacement within vftable
.text:00402348                 dd 40h                  ; base class attributes
.text:0040234C                 dd offset ??_R3CPageGeneral@@8 ; reference to class hierarchy descriptor
.text:00402350 ; CPageGeneral::`RTTI Class Hierarchy Descriptor'
.text:00402350 ??_R3CPageGeneral@@8 dd 0               ; DATA XREF: .text:0040234C↑o
.text:00402350                                         ; .text:00402370↓o ...
.text:00402350                                         ; signature
.text:00402354                 dd 1                    ; attributes
.text:00402358                 dd 7                    ; # of items in the array of base classes
.text:0040235C                 dd offset ??_R2CPageGeneral@@8 ; reference to the array of base classes
.text:00402360 ; const CPageGeneral::`RTTI Complete Object Locator'
.text:00402360 ??_R4CPageGeneral@@6B@_0 dd 0           ; DATA XREF: .text:00401620↑o
.text:00402360                                         ; signature
.text:00402364                 dd 144                  ; offset of this vtable in complete class (from top)
.text:00402368                 dd 0                    ; offset of constructor displacement
.text:0040236C                 dd offset ??_R0?AVCPageGeneral@@@8 ; reference to type description
.text:00402370                 dd offset ??_R3CPageGeneral@@8 ; reference to hierarchy description
.text:00402374 ; const CPageGeneral::`RTTI Complete Object Locator'
.text:00402374 ??_R4CPageGeneral@@6B@ dd 0             ; DATA XREF: .text:00401644↑o
.text:00402374                                         ; signature
.text:00402378                 dd 0                    ; offset of this vtable in complete class (from top)
.text:0040237C                 dd 0                    ; offset of constructor displacement
.text:00402380                 dd offset ??_R0?AVCPageGeneral@@@8 ; reference to type description
.text:00402384                 dd offset ??_R3CPageGeneral@@8 ; reference to hierarchy description
.text:00402388 ; CPageTool::`RTTI Base Class Array'
.text:00402388 ??_R2CPageTool@@8 dd offset ??_R1A@?0A@EA@CPageTool@@8
.text:00402388                                         ; DATA XREF: .text:004023D0↓o
.text:00402388                                         ; reference to base class decription 1
.text:0040238C                 dd offset ??_R1A@?0A@EA@CPropertyPage@@8 ; reference to base class decription 2
.text:00402390                 dd offset ??_R1A@?0A@EA@CDialog@@8 ; reference to base class decription 3
.text:00402394                 dd offset ??_R1A@?0A@EA@CWnd@@8 ; reference to base class decription 4
.text:00402398                 dd offset ??_R1A@?0A@EA@CCmdTarget@@8 ; reference to base class decription 5
.text:0040239C                 dd offset ??_R1A@?0A@EA@CObject@@8 ; reference to base class decription 6
.text:004023A0                 dd offset ??_R1JA@?0A@EA@CPageBase@@8 ; reference to base class decription 7
.text:004023A4                 align 8
.text:004023A8 ; CPageTool::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:004023A8 ??_R1A@?0A@EA@CPageTool@@8 dd offset ??_R0?AVCPageTool@@@8
.text:004023A8                                         ; DATA XREF: .text:CPageTool::`RTTI Base Class Array'↑o
.text:004023A8                                         ; reference to type description
.text:004023AC                 dd 6                    ; # of sub elements within base class array
.text:004023B0                 dd 0                    ; member displacement
.text:004023B4                 dd -1                   ; vftable displacement
.text:004023B8                 dd 0                    ; displacement within vftable
.text:004023BC                 dd 40h                  ; base class attributes
.text:004023C0                 dd offset ??_R3CPageTool@@8 ; reference to class hierarchy descriptor
.text:004023C4 ; CPageTool::`RTTI Class Hierarchy Descriptor'
.text:004023C4 ??_R3CPageTool@@8 dd 0                  ; DATA XREF: .text:004023C0↑o
.text:004023C4                                         ; .text:004023E4↓o ...
.text:004023C4                                         ; signature
.text:004023C8                 dd 1                    ; attributes
.text:004023CC                 dd 7                    ; # of items in the array of base classes
.text:004023D0                 dd offset ??_R2CPageTool@@8 ; reference to the array of base classes
.text:004023D4 ; const CPageTool::`RTTI Complete Object Locator'
.text:004023D4 ??_R4CPageTool@@6B@_0 dd 0              ; DATA XREF: .text:00401810↑o
.text:004023D4                                         ; signature
.text:004023D8                 dd 144                  ; offset of this vtable in complete class (from top)
.text:004023DC                 dd 0                    ; offset of constructor displacement
.text:004023E0                 dd offset ??_R0?AVCPageTool@@@8 ; reference to type description
.text:004023E4                 dd offset ??_R3CPageTool@@8 ; reference to hierarchy description
.text:004023E8 ; const CPageTool::`RTTI Complete Object Locator'
.text:004023E8 ??_R4CPageTool@@6B@ dd 0                ; DATA XREF: .text:00401834↑o
.text:004023E8                                         ; signature
.text:004023EC                 dd 0                    ; offset of this vtable in complete class (from top)
.text:004023F0                 dd 0                    ; offset of constructor displacement
.text:004023F4                 dd offset ??_R0?AVCPageTool@@@8 ; reference to type description
.text:004023F8                 dd offset ??_R3CPageTool@@8 ; reference to hierarchy description
.text:004023FC ; CToolItem::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:004023FC ??_R1A@?0A@EA@CToolItem@@8 dd offset ??_R0?AVCToolItem@@@8
.text:004023FC                                         ; DATA XREF: .text:CToolItem::`RTTI Base Class Array'↓o
.text:004023FC                                         ; reference to type description
.text:00402400                 dd 0                    ; # of sub elements within base class array
.text:00402404                 dd 0                    ; member displacement
.text:00402408                 dd -1                   ; vftable displacement
.text:0040240C                 dd 0                    ; displacement within vftable
.text:00402410                 dd 40h                  ; base class attributes
.text:00402414                 dd offset ??_R3CToolItem@@8 ; reference to class hierarchy descriptor
.text:00402418 ; CToolItem::`RTTI Base Class Array'
.text:00402418 ??_R2CToolItem@@8 dd offset ??_R1A@?0A@EA@CToolItem@@8
.text:00402418                                         ; DATA XREF: .text:0040242C↓o
.text:00402418                                         ; reference to base class decription 1
.text:0040241C                 align 10h
.text:00402420 ; CToolItem::`RTTI Class Hierarchy Descriptor'
.text:00402420 ??_R3CToolItem@@8 dd 0                  ; DATA XREF: .text:00402414↑o
.text:00402420                                         ; .text:00402440↓o
.text:00402420                                         ; signature
.text:00402424                 dd 0                    ; attributes
.text:00402428                 dd 1                    ; # of items in the array of base classes
.text:0040242C                 dd offset ??_R2CToolItem@@8 ; reference to the array of base classes
.text:00402430 ; const CToolItem::`RTTI Complete Object Locator'
.text:00402430 ??_R4CToolItem@@6B@ dd 0                ; DATA XREF: .text:00401758↑o
.text:00402430                                         ; signature
.text:00402434                 dd 0                    ; offset of this vtable in complete class (from top)
.text:00402438                 dd 0                    ; offset of constructor displacement
.text:0040243C                 dd offset ??_R0?AVCToolItem@@@8 ; reference to type description
.text:00402440                 dd offset ??_R3CToolItem@@8 ; reference to hierarchy description
.text:00402444 ; CPageBootIni::`RTTI Base Class Array'
.text:00402444 ??_R2CPageBootIni@@8 dd offset ??_R1A@?0A@EA@CPageBootIni@@8
.text:00402444                                         ; DATA XREF: .text:0040248C↓o
.text:00402444                                         ; reference to base class decription 1
.text:00402448                 dd offset ??_R1A@?0A@EA@CPropertyPage@@8 ; reference to base class decription 2
.text:0040244C                 dd offset ??_R1A@?0A@EA@CDialog@@8 ; reference to base class decription 3
.text:00402450                 dd offset ??_R1A@?0A@EA@CWnd@@8 ; reference to base class decription 4
.text:00402454                 dd offset ??_R1A@?0A@EA@CCmdTarget@@8 ; reference to base class decription 5
.text:00402458                 dd offset ??_R1A@?0A@EA@CObject@@8 ; reference to base class decription 6
.text:0040245C                 dd offset ??_R1JA@?0A@EA@CPageBase@@8 ; reference to base class decription 7
.text:00402460                 dd 0
.text:00402464 ; CPageBootIni::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:00402464 ??_R1A@?0A@EA@CPageBootIni@@8 dd offset ??_R0?AVCPageBootIni@@@8
.text:00402464                                         ; DATA XREF: .text:CPageBootIni::`RTTI Base Class Array'↑o
.text:00402464                                         ; reference to type description
.text:00402468                 dd 6                    ; # of sub elements within base class array
.text:0040246C                 dd 0                    ; member displacement
.text:00402470                 dd -1                   ; vftable displacement
.text:00402474                 dd 0                    ; displacement within vftable
.text:00402478                 dd 40h                  ; base class attributes
.text:0040247C                 dd offset ??_R3CPageBootIni@@8 ; reference to class hierarchy descriptor
.text:00402480 ; CPageBootIni::`RTTI Class Hierarchy Descriptor'
.text:00402480 ??_R3CPageBootIni@@8 dd 0               ; DATA XREF: .text:0040247C↑o
.text:00402480                                         ; .text:004024A0↓o ...
.text:00402480                                         ; signature
.text:00402484                 dd 1                    ; attributes
.text:00402488                 dd 7                    ; # of items in the array of base classes
.text:0040248C                 dd offset ??_R2CPageBootIni@@8 ; reference to the array of base classes
.text:00402490 ; const CPageBootIni::`RTTI Complete Object Locator'
.text:00402490 ??_R4CPageBootIni@@6B@_0 dd 0           ; DATA XREF: .text:00401B10↑o
.text:00402490                                         ; signature
.text:00402494                 dd 144                  ; offset of this vtable in complete class (from top)
.text:00402498                 dd 0                    ; offset of constructor displacement
.text:0040249C                 dd offset ??_R0?AVCPageBootIni@@@8 ; reference to type description
.text:004024A0                 dd offset ??_R3CPageBootIni@@8 ; reference to hierarchy description
.text:004024A4 ; const CPageBootIni::`RTTI Complete Object Locator'
.text:004024A4 ??_R4CPageBootIni@@6B@ dd 0             ; DATA XREF: .text:00401B34↑o
.text:004024A4                                         ; signature
.text:004024A8                 dd 0                    ; offset of this vtable in complete class (from top)
.text:004024AC                 dd 0                    ; offset of constructor displacement
.text:004024B0                 dd offset ??_R0?AVCPageBootIni@@@8 ; reference to type description
.text:004024B4                 dd offset ??_R3CPageBootIni@@8 ; reference to hierarchy description
.text:004024B8 ; CBootIniAdvancedDlg::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:004024B8 ??_R1A@?0A@EA@CBootIniAdvancedDlg@@8 dd offset ??_R0?AVCBootIniAdvancedDlg@@@8
.text:004024B8                                         ; DATA XREF: .text:CBootIniAdvancedDlg::`RTTI Base Class Array'↓o
.text:004024B8                                         ; reference to type description
.text:004024BC                 dd 5                    ; # of sub elements within base class array
.text:004024C0                 dd 0                    ; member displacement
.text:004024C4                 dd -1                   ; vftable displacement
.text:004024C8                 dd 0                    ; displacement within vftable
.text:004024CC                 dd 40h                  ; base class attributes
.text:004024D0                 dd offset ??_R3CBootIniAdvancedDlg@@8 ; reference to class hierarchy descriptor
.text:004024D4 ; ATL::CAxDialogImpl<class CBootIniAdvancedDlg, class ATL::CWindow>::`RTTI Base Class Array'
.text:004024D4 ??_R2?$CAxDialogImpl@VCBootIniAdvancedDlg@@VCWindow@ATL@@@ATL@@8 dd offset ??_R1A@?0A@EA@?$CAxDialogImpl@VCBootIniAdvancedDlg@@VCWindow@ATL@@@ATL@@8
.text:004024D4                                         ; DATA XREF: .text:004024F8↓o
.text:004024D4                                         ; reference to base class decription 1
.text:004024D8                 dd offset ??_R1A@?0A@EA@?$CDialogImplBaseT@VCWindow@ATL@@@ATL@@8 ; reference to base class decription 2
.text:004024DC                 dd offset ??_R1A@?0A@EA@?$CWindowImplRoot@VCWindow@ATL@@@ATL@@8 ; reference to base class decription 3
.text:004024E0                 dd offset ??_R13?0A@EA@CWindow@ATL@@8 ; reference to base class decription 4
.text:004024E4                 dd offset ??_R1A@?0A@EA@CMessageMap@ATL@@8 ; reference to base class decription 5
.text:004024E8                 dd 0
.text:004024EC ; ATL::CAxDialogImpl<class CBootIniAdvancedDlg, class ATL::CWindow>::`RTTI Class Hierarchy Descriptor'
.text:004024EC ??_R3?$CAxDialogImpl@VCBootIniAdvancedDlg@@VCWindow@ATL@@@ATL@@8 dd 0
.text:004024EC                                         ; DATA XREF: .text:00402514↓o
.text:004024EC                                         ; signature
.text:004024F0                 dd 1                    ; attributes
.text:004024F4                 dd 5                    ; # of items in the array of base classes
.text:004024F8                 dd offset ??_R2?$CAxDialogImpl@VCBootIniAdvancedDlg@@VCWindow@ATL@@@ATL@@8 ; reference to the array of base classes
.text:004024FC ; ATL::CAxDialogImpl<class CBootIniAdvancedDlg, class ATL::CWindow>::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:004024FC ??_R1A@?0A@EA@?$CAxDialogImpl@VCBootIniAdvancedDlg@@VCWindow@ATL@@@ATL@@8 dd offset ??_R0?AV?$CAxDialogImpl@VCBootIniAdvancedDlg@@VCWindow@ATL@@@ATL@@@8
.text:004024FC                                         ; DATA XREF: .text:ATL::CAxDialogImpl<CBootIniAdvancedDlg,ATL::CWindow>::`RTTI Base Class Array'↑o
.text:004024FC                                         ; .text:0040261C↓o
.text:004024FC                                         ; reference to type description
.text:00402500                 dd 4                    ; # of sub elements within base class array
.text:00402504                 dd 0                    ; member displacement
.text:00402508                 dd -1                   ; vftable displacement
.text:0040250C                 dd 0                    ; displacement within vftable
.text:00402510                 dd 40h                  ; base class attributes
.text:00402514                 dd offset ??_R3?$CAxDialogImpl@VCBootIniAdvancedDlg@@VCWindow@ATL@@@ATL@@8 ; reference to class hierarchy descriptor
.text:00402518 ; ATL::CDialogImplBaseT<class ATL::CWindow>::`RTTI Base Class Array'
.text:00402518 ??_R2?$CDialogImplBaseT@VCWindow@ATL@@@ATL@@8 dd offset ??_R1A@?0A@EA@?$CDialogImplBaseT@VCWindow@ATL@@@ATL@@8
.text:00402518                                         ; DATA XREF: .text:00402538↓o
.text:00402518                                         ; reference to base class decription 1
.text:0040251C                 dd offset ??_R1A@?0A@EA@?$CWindowImplRoot@VCWindow@ATL@@@ATL@@8 ; reference to base class decription 2
.text:00402520                 dd offset ??_R13?0A@EA@CWindow@ATL@@8 ; reference to base class decription 3
.text:00402524                 dd offset ??_R1A@?0A@EA@CMessageMap@ATL@@8 ; reference to base class decription 4
.text:00402528                 dd 0
.text:0040252C ; ATL::CDialogImplBaseT<class ATL::CWindow>::`RTTI Class Hierarchy Descriptor'
.text:0040252C ??_R3?$CDialogImplBaseT@VCWindow@ATL@@@ATL@@8 dd 0
.text:0040252C                                         ; DATA XREF: .text:00402554↓o
.text:0040252C                                         ; signature
.text:00402530                 dd 1                    ; attributes
.text:00402534                 dd 4                    ; # of items in the array of base classes
.text:00402538                 dd offset ??_R2?$CDialogImplBaseT@VCWindow@ATL@@@ATL@@8 ; reference to the array of base classes
.text:0040253C ; ATL::CDialogImplBaseT<class ATL::CWindow>::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:0040253C ??_R1A@?0A@EA@?$CDialogImplBaseT@VCWindow@ATL@@@ATL@@8 dd offset ??_R0?AV?$CDialogImplBaseT@VCWindow@ATL@@@ATL@@@8
.text:0040253C                                         ; DATA XREF: .text:004024D8↑o
.text:0040253C                                         ; .text:ATL::CDialogImplBaseT<ATL::CWindow>::`RTTI Base Class Array'↑o ...
.text:0040253C                                         ; reference to type description
.text:00402540                 dd 3                    ; # of sub elements within base class array
.text:00402544                 dd 0                    ; member displacement
.text:00402548                 dd -1                   ; vftable displacement
.text:0040254C                 dd 0                    ; displacement within vftable
.text:00402550                 dd 40h                  ; base class attributes
.text:00402554                 dd offset ??_R3?$CDialogImplBaseT@VCWindow@ATL@@@ATL@@8 ; reference to class hierarchy descriptor
.text:00402558 ; ATL::CWindowImplRoot<class ATL::CWindow>::`RTTI Base Class Array'
.text:00402558 ??_R2?$CWindowImplRoot@VCWindow@ATL@@@ATL@@8 dd offset ??_R1A@?0A@EA@?$CWindowImplRoot@VCWindow@ATL@@@ATL@@8
.text:00402558                                         ; DATA XREF: .text:00402574↓o
.text:00402558                                         ; reference to base class decription 1
.text:0040255C                 dd offset ??_R13?0A@EA@CWindow@ATL@@8 ; reference to base class decription 2
.text:00402560                 dd offset ??_R1A@?0A@EA@CMessageMap@ATL@@8 ; reference to base class decription 3
.text:00402564                 align 8
.text:00402568 ; ATL::CWindowImplRoot<class ATL::CWindow>::`RTTI Class Hierarchy Descriptor'
.text:00402568 ??_R3?$CWindowImplRoot@VCWindow@ATL@@@ATL@@8 dd 0
.text:00402568                                         ; DATA XREF: .text:00402590↓o
.text:00402568                                         ; signature
.text:0040256C                 dd 1                    ; attributes
.text:00402570                 dd 3                    ; # of items in the array of base classes
.text:00402574                 dd offset ??_R2?$CWindowImplRoot@VCWindow@ATL@@@ATL@@8 ; reference to the array of base classes
.text:00402578 ; ATL::CWindowImplRoot<class ATL::CWindow>::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:00402578 ??_R1A@?0A@EA@?$CWindowImplRoot@VCWindow@ATL@@@ATL@@8 dd offset ??_R0?AV?$CWindowImplRoot@VCWindow@ATL@@@ATL@@@8
.text:00402578                                         ; DATA XREF: .text:004024DC↑o
.text:00402578                                         ; .text:0040251C↑o ...
.text:00402578                                         ; reference to type description
.text:0040257C                 dd 2                    ; # of sub elements within base class array
.text:00402580                 dd 0                    ; member displacement
.text:00402584                 dd -1                   ; vftable displacement
.text:00402588                 dd 0                    ; displacement within vftable
.text:0040258C                 dd 40h                  ; base class attributes
.text:00402590                 dd offset ??_R3?$CWindowImplRoot@VCWindow@ATL@@@ATL@@8 ; reference to class hierarchy descriptor
.text:00402594 ; ATL::CWindow::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:00402594 ??_R1A@?0A@EA@CWindow@ATL@@8 dd offset ??_R0?AVCWindow@ATL@@@8
.text:00402594                                         ; DATA XREF: .text:ATL::CWindow::`RTTI Base Class Array'↓o
.text:00402594                                         ; reference to type description
.text:00402598                 dd 0                    ; # of sub elements within base class array
.text:0040259C                 dd 0                    ; member displacement
.text:004025A0                 dd -1                   ; vftable displacement
.text:004025A4                 dd 0                    ; displacement within vftable
.text:004025A8                 dd 40h                  ; base class attributes
.text:004025AC                 dd offset ??_R3CWindow@ATL@@8 ; reference to class hierarchy descriptor
.text:004025B0 ; ATL::CWindow::`RTTI Base Class Array'
.text:004025B0 ??_R2CWindow@ATL@@8 dd offset ??_R1A@?0A@EA@CWindow@ATL@@8
.text:004025B0                                         ; DATA XREF: .text:004025C4↓o
.text:004025B0                                         ; reference to base class decription 1
.text:004025B4                 align 8
.text:004025B8 ; ATL::CWindow::`RTTI Class Hierarchy Descriptor'
.text:004025B8 ??_R3CWindow@ATL@@8 dd 0                ; DATA XREF: .text:004025AC↑o
.text:004025B8                                         ; .text:004025E0↓o
.text:004025B8                                         ; signature
.text:004025BC                 dd 0                    ; attributes
.text:004025C0                 dd 1                    ; # of items in the array of base classes
.text:004025C4                 dd offset ??_R2CWindow@ATL@@8 ; reference to the array of base classes
.text:004025C8 ; ATL::CWindow::`RTTI Base Class Descriptor at (4, -1, 0, 64)'
.text:004025C8 ??_R13?0A@EA@CWindow@ATL@@8 dd offset ??_R0?AVCWindow@ATL@@@8
.text:004025C8                                         ; DATA XREF: .text:004024E0↑o
.text:004025C8                                         ; .text:00402520↑o ...
.text:004025C8                                         ; reference to type description
.text:004025CC                 dd 0                    ; # of sub elements within base class array
.text:004025D0                 dd 4                    ; member displacement
.text:004025D4                 dd -1                   ; vftable displacement
.text:004025D8                 dd 0                    ; displacement within vftable
.text:004025DC                 dd 40h                  ; base class attributes
.text:004025E0                 dd offset ??_R3CWindow@ATL@@8 ; reference to class hierarchy descriptor
.text:004025E4 ; ATL::CMessageMap::`RTTI Base Class Array'
.text:004025E4 ??_R2CMessageMap@ATL@@8 dd offset ??_R1A@?0A@EA@CMessageMap@ATL@@8
.text:004025E4                                         ; DATA XREF: .text:004025F8↓o
.text:004025E4                                         ; reference to base class decription 1
.text:004025E8                 dd 0
.text:004025EC ; ATL::CMessageMap::`RTTI Class Hierarchy Descriptor'
.text:004025EC ??_R3CMessageMap@ATL@@8 dd 0            ; DATA XREF: .text:00402614↓o
.text:004025EC                                         ; signature
.text:004025F0                 dd 0                    ; attributes
.text:004025F4                 dd 1                    ; # of items in the array of base classes
.text:004025F8                 dd offset ??_R2CMessageMap@ATL@@8 ; reference to the array of base classes
.text:004025FC ; ATL::CMessageMap::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:004025FC ??_R1A@?0A@EA@CMessageMap@ATL@@8 dd offset ??_R0?AVCMessageMap@ATL@@@8
.text:004025FC                                         ; DATA XREF: .text:004024E4↑o
.text:004025FC                                         ; .text:00402524↑o ...
.text:004025FC                                         ; reference to type description
.text:00402600                 dd 0                    ; # of sub elements within base class array
.text:00402604                 dd 0                    ; member displacement
.text:00402608                 dd -1                   ; vftable displacement
.text:0040260C                 dd 0                    ; displacement within vftable
.text:00402610                 dd 40h                  ; base class attributes
.text:00402614                 dd offset ??_R3CMessageMap@ATL@@8 ; reference to class hierarchy descriptor
.text:00402618 ; CBootIniAdvancedDlg::`RTTI Base Class Array'
.text:00402618 ??_R2CBootIniAdvancedDlg@@8 dd offset ??_R1A@?0A@EA@CBootIniAdvancedDlg@@8
.text:00402618                                         ; DATA XREF: .text:00402640↓o
.text:00402618                                         ; reference to base class decription 1
.text:0040261C                 dd offset ??_R1A@?0A@EA@?$CAxDialogImpl@VCBootIniAdvancedDlg@@VCWindow@ATL@@@ATL@@8 ; reference to base class decription 2
.text:00402620                 dd offset ??_R1A@?0A@EA@?$CDialogImplBaseT@VCWindow@ATL@@@ATL@@8 ; reference to base class decription 3
.text:00402624                 dd offset ??_R1A@?0A@EA@?$CWindowImplRoot@VCWindow@ATL@@@ATL@@8 ; reference to base class decription 4
.text:00402628                 dd offset ??_R13?0A@EA@CWindow@ATL@@8 ; reference to base class decription 5
.text:0040262C                 dd offset ??_R1A@?0A@EA@CMessageMap@ATL@@8 ; reference to base class decription 6
.text:00402630                 dd 0
.text:00402634 ; CBootIniAdvancedDlg::`RTTI Class Hierarchy Descriptor'
.text:00402634 ??_R3CBootIniAdvancedDlg@@8 dd 0        ; DATA XREF: .text:004024D0↑o
.text:00402634                                         ; .text:00402654↓o
.text:00402634                                         ; signature
.text:00402638                 dd 1                    ; attributes
.text:0040263C                 dd 6                    ; # of items in the array of base classes
.text:00402640                 dd offset ??_R2CBootIniAdvancedDlg@@8 ; reference to the array of base classes
.text:00402644 ; const CBootIniAdvancedDlg::`RTTI Complete Object Locator'
.text:00402644 ??_R4CBootIniAdvancedDlg@@6B@ dd 0      ; DATA XREF: .text:00401948↑o
.text:00402644                                         ; signature
.text:00402648                 dd 0                    ; offset of this vtable in complete class (from top)
.text:0040264C                 dd 0                    ; offset of constructor displacement
.text:00402650                 dd offset ??_R0?AVCBootIniAdvancedDlg@@@8 ; reference to type description
.text:00402654                 dd offset ??_R3CBootIniAdvancedDlg@@8 ; reference to hierarchy description
.text:00402658 ; CMSConfigSheet::`RTTI Base Class Array'
.text:00402658 ??_R2CMSConfigSheet@@8 dd offset ??_R1A@?0A@EA@CMSConfigSheet@@8
.text:00402658                                         ; DATA XREF: .text:004026D8↓o
.text:00402658                                         ; reference to base class decription 1
.text:0040265C                 dd offset ??_R1A@?0A@EA@CPropertySheet@@8 ; reference to base class decription 2
.text:00402660                 dd offset ??_R1A@?0A@EA@CWnd@@8 ; reference to base class decription 3
.text:00402664                 dd offset ??_R1A@?0A@EA@CCmdTarget@@8 ; reference to base class decription 4
.text:00402668                 dd offset ??_R1A@?0A@EA@CObject@@8 ; reference to base class decription 5
.text:0040266C                 align 10h
.text:00402670 ; CPropertySheet::`RTTI Base Class Array'
.text:00402670 ??_R2CPropertySheet@@8 dd offset ??_R1A@?0A@EA@CPropertySheet@@8
.text:00402670                                         ; DATA XREF: .text:004026C8↓o
.text:00402670                                         ; reference to base class decription 1
.text:00402674                 dd offset ??_R1A@?0A@EA@CWnd@@8 ; reference to base class decription 2
.text:00402678                 dd offset ??_R1A@?0A@EA@CCmdTarget@@8 ; reference to base class decription 3
.text:0040267C                 dd offset ??_R1A@?0A@EA@CObject@@8 ; reference to base class decription 4
.text:00402680                 dd 0
.text:00402684 ; CMSConfigSheet::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:00402684 ??_R1A@?0A@EA@CMSConfigSheet@@8 dd offset ??_R0?AVCMSConfigSheet@@@8
.text:00402684                                         ; DATA XREF: .text:CMSConfigSheet::`RTTI Base Class Array'↑o
.text:00402684                                         ; reference to type description
.text:00402688                 dd 4                    ; # of sub elements within base class array
.text:0040268C                 dd 0                    ; member displacement
.text:00402690                 dd -1                   ; vftable displacement
.text:00402694                 dd 0                    ; displacement within vftable
.text:00402698                 dd 40h                  ; base class attributes
.text:0040269C                 dd offset ??_R3CMSConfigSheet@@8 ; reference to class hierarchy descriptor
.text:004026A0 ; CPropertySheet::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:004026A0 ??_R1A@?0A@EA@CPropertySheet@@8 dd offset ??_R0?AVCPropertySheet@@@8
.text:004026A0                                         ; DATA XREF: .text:0040265C↑o
.text:004026A0                                         ; .text:CPropertySheet::`RTTI Base Class Array'↑o
.text:004026A0                                         ; reference to type description
.text:004026A4                 dd 3                    ; # of sub elements within base class array
.text:004026A8                 dd 0                    ; member displacement
.text:004026AC                 dd -1                   ; vftable displacement
.text:004026B0                 dd 0                    ; displacement within vftable
.text:004026B4                 dd 40h                  ; base class attributes
.text:004026B8                 dd offset ??_R3CPropertySheet@@8 ; reference to class hierarchy descriptor
.text:004026BC ; CPropertySheet::`RTTI Class Hierarchy Descriptor'
.text:004026BC ??_R3CPropertySheet@@8 dd 0             ; DATA XREF: .text:004026B8↑o
.text:004026BC                                         ; signature
.text:004026C0                 dd 0                    ; attributes
.text:004026C4                 dd 4                    ; # of items in the array of base classes
.text:004026C8                 dd offset ??_R2CPropertySheet@@8 ; reference to the array of base classes
.text:004026CC ; CMSConfigSheet::`RTTI Class Hierarchy Descriptor'
.text:004026CC ??_R3CMSConfigSheet@@8 dd 0             ; DATA XREF: .text:0040269C↑o
.text:004026CC                                         ; .text:004026EC↓o
.text:004026CC                                         ; signature
.text:004026D0                 dd 0                    ; attributes
.text:004026D4                 dd 5                    ; # of items in the array of base classes
.text:004026D8                 dd offset ??_R2CMSConfigSheet@@8 ; reference to the array of base classes
.text:004026DC ; const CMSConfigSheet::`RTTI Complete Object Locator'
.text:004026DC ??_R4CMSConfigSheet@@6B@ dd 0           ; DATA XREF: .text:00401C98↑o
.text:004026DC                                         ; signature
.text:004026E0                 dd 0                    ; offset of this vtable in complete class (from top)
.text:004026E4                 dd 0                    ; offset of constructor displacement
.text:004026E8                 dd offset ??_R0?AVCMSConfigSheet@@@8 ; reference to type description
.text:004026EC                 dd offset ??_R3CMSConfigSheet@@8 ; reference to hierarchy description
.text:004026F0 ; CMSConfigApp::`RTTI Base Class Array'
.text:004026F0 ??_R2CMSConfigApp@@8 dd offset ??_R1A@?0A@EA@CMSConfigApp@@8
.text:004026F0                                         ; DATA XREF: .text:004027AC↓o
.text:004026F0                                         ; reference to base class decription 1
.text:004026F4                 dd offset ??_R1A@?0A@EA@CWinApp@@8 ; reference to base class decription 2
.text:004026F8                 dd offset ??_R1A@?0A@EA@CWinThread@@8 ; reference to base class decription 3
.text:004026FC                 dd offset ??_R1A@?0A@EA@CCmdTarget@@8 ; reference to base class decription 4
.text:00402700                 dd offset ??_R1A@?0A@EA@CObject@@8 ; reference to base class decription 5
.text:00402704                 align 8
.text:00402708 ; CWinApp::`RTTI Base Class Array'
.text:00402708 ??_R2CWinApp@@8 dd offset ??_R1A@?0A@EA@CWinApp@@8
.text:00402708                                         ; DATA XREF: .text:0040278C↓o
.text:00402708                                         ; reference to base class decription 1
.text:0040270C                 dd offset ??_R1A@?0A@EA@CWinThread@@8 ; reference to base class decription 2
.text:00402710                 dd offset ??_R1A@?0A@EA@CCmdTarget@@8 ; reference to base class decription 3
.text:00402714                 dd offset ??_R1A@?0A@EA@CObject@@8 ; reference to base class decription 4
.text:00402718                 dd 0
.text:0040271C ; CWinThread::`RTTI Base Class Array'
.text:0040271C ??_R2CWinThread@@8 dd offset ??_R1A@?0A@EA@CWinThread@@8
.text:0040271C                                         ; DATA XREF: .text:0040279C↓o
.text:0040271C                                         ; reference to base class decription 1
.text:00402720                 dd offset ??_R1A@?0A@EA@CCmdTarget@@8 ; reference to base class decription 2
.text:00402724                 dd offset ??_R1A@?0A@EA@CObject@@8 ; reference to base class decription 3
.text:00402728                 dd 0
.text:0040272C ; CMSConfigApp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:0040272C ??_R1A@?0A@EA@CMSConfigApp@@8 dd offset ??_R0?AVCMSConfigApp@@@8
.text:0040272C                                         ; DATA XREF: .text:CMSConfigApp::`RTTI Base Class Array'↑o
.text:0040272C                                         ; reference to type description
.text:00402730                 dd 4                    ; # of sub elements within base class array
.text:00402734                 dd 0                    ; member displacement
.text:00402738                 dd -1                   ; vftable displacement
.text:0040273C                 dd 0                    ; displacement within vftable
.text:00402740                 dd 40h                  ; base class attributes
.text:00402744                 dd offset ??_R3CMSConfigApp@@8 ; reference to class hierarchy descriptor
.text:00402748 ; CWinApp::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:00402748 ??_R1A@?0A@EA@CWinApp@@8 dd offset ??_R0?AVCWinApp@@@8
.text:00402748                                         ; DATA XREF: .text:004026F4↑o
.text:00402748                                         ; .text:CWinApp::`RTTI Base Class Array'↑o
.text:00402748                                         ; reference to type description
.text:0040274C                 dd 3                    ; # of sub elements within base class array
.text:00402750                 dd 0                    ; member displacement
.text:00402754                 dd -1                   ; vftable displacement
.text:00402758                 dd 0                    ; displacement within vftable
.text:0040275C                 dd 40h                  ; base class attributes
.text:00402760                 dd offset ??_R3CWinApp@@8 ; reference to class hierarchy descriptor
.text:00402764 ; CWinThread::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:00402764 ??_R1A@?0A@EA@CWinThread@@8 dd offset ??_R0?AVCWinThread@@@8
.text:00402764                                         ; DATA XREF: .text:004026F8↑o
.text:00402764                                         ; .text:0040270C↑o ...
.text:00402764                                         ; reference to type description
.text:00402768                 dd 2                    ; # of sub elements within base class array
.text:0040276C                 dd 0                    ; member displacement
.text:00402770                 dd -1                   ; vftable displacement
.text:00402774                 dd 0                    ; displacement within vftable
.text:00402778                 dd 40h                  ; base class attributes
.text:0040277C                 dd offset ??_R3CWinThread@@8 ; reference to class hierarchy descriptor
.text:00402780 ; CWinApp::`RTTI Class Hierarchy Descriptor'
.text:00402780 ??_R3CWinApp@@8 dd 0                    ; DATA XREF: .text:00402760↑o
.text:00402780                                         ; signature
.text:00402784                 dd 0                    ; attributes
.text:00402788                 dd 4                    ; # of items in the array of base classes
.text:0040278C                 dd offset ??_R2CWinApp@@8 ; reference to the array of base classes
.text:00402790 ; CWinThread::`RTTI Class Hierarchy Descriptor'
.text:00402790 ??_R3CWinThread@@8 dd 0                 ; DATA XREF: .text:0040277C↑o
.text:00402790                                         ; signature
.text:00402794                 dd 0                    ; attributes
.text:00402798                 dd 3                    ; # of items in the array of base classes
.text:0040279C                 dd offset ??_R2CWinThread@@8 ; reference to the array of base classes
.text:004027A0 ; CMSConfigApp::`RTTI Class Hierarchy Descriptor'
.text:004027A0 ??_R3CMSConfigApp@@8 dd 0               ; DATA XREF: .text:00402744↑o
.text:004027A0                                         ; .text:004027C0↓o
.text:004027A0                                         ; signature
.text:004027A4                 dd 0                    ; attributes
.text:004027A8                 dd 5                    ; # of items in the array of base classes
.text:004027AC                 dd offset ??_R2CMSConfigApp@@8 ; reference to the array of base classes
.text:004027B0 ; const CMSConfigApp::`RTTI Complete Object Locator'
.text:004027B0 ??_R4CMSConfigApp@@6B@ dd 0             ; DATA XREF: .text:00401D90↑o
.text:004027B0                                         ; signature
.text:004027B4                 dd 0                    ; offset of this vtable in complete class (from top)
.text:004027B8                 dd 0                    ; offset of constructor displacement
.text:004027BC                 dd offset ??_R0?AVCMSConfigApp@@@8 ; reference to type description
.text:004027C0                 dd offset ??_R3CMSConfigApp@@8 ; reference to hierarchy description
.text:004027C4 ; CRebootDlg::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:004027C4 ??_R1A@?0A@EA@CRebootDlg@@8 dd offset ??_R0?AVCRebootDlg@@@8
.text:004027C4                                         ; DATA XREF: .text:CRebootDlg::`RTTI Base Class Array'↓o
.text:004027C4                                         ; reference to type description
.text:004027C8                 dd 5                    ; # of sub elements within base class array
.text:004027CC                 dd 0                    ; member displacement
.text:004027D0                 dd -1                   ; vftable displacement
.text:004027D4                 dd 0                    ; displacement within vftable
.text:004027D8                 dd 40h                  ; base class attributes
.text:004027DC                 dd offset ??_R3CRebootDlg@@8 ; reference to class hierarchy descriptor
.text:004027E0 ; ATL::CAxDialogImpl<class CRebootDlg, class ATL::CWindow>::`RTTI Base Class Array'
.text:004027E0 ??_R2?$CAxDialogImpl@VCRebootDlg@@VCWindow@ATL@@@ATL@@8 dd offset ??_R1A@?0A@EA@?$CAxDialogImpl@VCRebootDlg@@VCWindow@ATL@@@ATL@@8
.text:004027E0                                         ; DATA XREF: .text:00402804↓o
.text:004027E0                                         ; reference to base class decription 1
.text:004027E4                 dd offset ??_R1A@?0A@EA@?$CDialogImplBaseT@VCWindow@ATL@@@ATL@@8 ; reference to base class decription 2
.text:004027E8                 dd offset ??_R1A@?0A@EA@?$CWindowImplRoot@VCWindow@ATL@@@ATL@@8 ; reference to base class decription 3
.text:004027EC                 dd offset ??_R13?0A@EA@CWindow@ATL@@8 ; reference to base class decription 4
.text:004027F0                 dd offset ??_R1A@?0A@EA@CMessageMap@ATL@@8 ; reference to base class decription 5
.text:004027F4                 align 8
.text:004027F8 ; ATL::CAxDialogImpl<class CRebootDlg, class ATL::CWindow>::`RTTI Class Hierarchy Descriptor'
.text:004027F8 ??_R3?$CAxDialogImpl@VCRebootDlg@@VCWindow@ATL@@@ATL@@8 dd 0
.text:004027F8                                         ; DATA XREF: .text:00402820↓o
.text:004027F8                                         ; signature
.text:004027FC                 dd 1                    ; attributes
.text:00402800                 dd 5                    ; # of items in the array of base classes
.text:00402804                 dd offset ??_R2?$CAxDialogImpl@VCRebootDlg@@VCWindow@ATL@@@ATL@@8 ; reference to the array of base classes
.text:00402808 ; ATL::CAxDialogImpl<class CRebootDlg, class ATL::CWindow>::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.text:00402808 ??_R1A@?0A@EA@?$CAxDialogImpl@VCRebootDlg@@VCWindow@ATL@@@ATL@@8 dd offset ??_R0?AV?$CAxDialogImpl@VCRebootDlg@@VCWindow@ATL@@@ATL@@@8
.text:00402808                                         ; DATA XREF: .text:ATL::CAxDialogImpl<CRebootDlg,ATL::CWindow>::`RTTI Base Class Array'↑o
.text:00402808                                         ; .text:00402828↓o
.text:00402808                                         ; reference to type description
.text:0040280C                 dd 4                    ; # of sub elements within base class array
.text:00402810                 dd 0                    ; member displacement
.text:00402814                 dd -1                   ; vftable displacement
.text:00402818                 dd 0                    ; displacement within vftable
.text:0040281C                 dd 40h                  ; base class attributes
.text:00402820                 dd offset ??_R3?$CAxDialogImpl@VCRebootDlg@@VCWindow@ATL@@@ATL@@8 ; reference to class hierarchy descriptor
.text:00402824 ; CRebootDlg::`RTTI Base Class Array'
.text:00402824 ??_R2CRebootDlg@@8 dd offset ??_R1A@?0A@EA@CRebootDlg@@8
.text:00402824                                         ; DATA XREF: .text:0040284C↓o
.text:00402824                                         ; reference to base class decription 1
.text:00402828                 dd offset ??_R1A@?0A@EA@?$CAxDialogImpl@VCRebootDlg@@VCWindow@ATL@@@ATL@@8 ; reference to base class decription 2
.text:0040282C                 dd offset ??_R1A@?0A@EA@?$CDialogImplBaseT@VCWindow@ATL@@@ATL@@8 ; reference to base class decription 3
.text:00402830                 dd offset ??_R1A@?0A@EA@?$CWindowImplRoot@VCWindow@ATL@@@ATL@@8 ; reference to base class decription 4
.text:00402834                 dd offset ??_R13?0A@EA@CWindow@ATL@@8 ; reference to base class decription 5
.text:00402838                 dd offset ??_R1A@?0A@EA@CMessageMap@ATL@@8 ; reference to base class decription 6
.text:0040283C                 align 10h
.text:00402840 ; CRebootDlg::`RTTI Class Hierarchy Descriptor'
.text:00402840 ??_R3CRebootDlg@@8 dd 0                 ; DATA XREF: .text:004027DC↑o
.text:00402840                                         ; .text:00402860↓o
.text:00402840                                         ; signature
.text:00402844                 dd 1                    ; attributes
.text:00402848                 dd 6                    ; # of items in the array of base classes
.text:0040284C                 dd offset ??_R2CRebootDlg@@8 ; reference to the array of base classes
.text:00402850 ; const CRebootDlg::`RTTI Complete Object Locator'
.text:00402850 ??_R4CRebootDlg@@6B@ dd 0               ; DATA XREF: .text:00401D80↑o
.text:00402850                                         ; signature
.text:00402854                 dd 0                    ; offset of this vtable in complete class (from top)
.text:00402858                 dd 0                    ; offset of constructor displacement
.text:0040285C                 dd offset ??_R0?AVCRebootDlg@@@8 ; reference to type description
.text:00402860                 dd offset ??_R3CRebootDlg@@8 ; reference to hierarchy description
.text:00402864 ; const _PVFV First
.text:00402864 First           dd 0                    ; DATA XREF: start:loc_41004B↓o
.text:00402868                 dd offset pre_cpp_init
.text:0040286C                 dd offset sub_403B10
.text:00402870                 dd offset sub_403AC0
.text:00402874                 dd offset sub_403AF0
.text:00402878 ; const _PVFV Last
.text:00402878 Last            dd 0                    ; DATA XREF: start-19A↓o
.text:0040287C ; const _PIFV dword_40287C
.text:0040287C dword_40287C    dd 0                    ; DATA XREF: start-1BD↓o
.text:00402880                 dd offset pre_c_init
.text:00402884                 dd offset sub_4105F0
.text:00402888 ; const _PIFV dword_402888
.text:00402888 dword_402888    dd 0                    ; DATA XREF: start-1C2↓o
.text:0040288C ___guard_fids_table dd rva sub_403AC0   ; DATA XREF: .text:00401EE0↑o
.text:00402890                 dd rva sub_403AF0
.text:00402894                 dd rva sub_403B10
.text:00402898                 dd rva ??_GGdiException@Base@@UAEPAXI@Z ; Base::GdiException::`scalar deleting destructor'(uint)
.text:0040289C                 dd rva sub_403B70
.text:004028A0                 dd rva sub_403C20
.text:004028A4                 dd rva sub_403C30
.text:004028A8                 dd rva sub_403C40
.text:004028AC                 dd rva sub_403C50
.text:004028B0                 dd rva sub_403C60
.text:004028B4                 dd rva nullsub_1
.text:004028B8                 dd rva @_guard_check_icall_nop@4 ; _guard_check_icall_nop(x)
.text:004028BC                 dd rva sub_403C90
.text:004028C0                 dd rva sub_403DC0
.text:004028C4                 dd rva sub_403E00
.text:004028C8                 dd rva sub_403E10
.text:004028CC                 dd rva ??_GCBuffer@D3DX11Core@@UAEPAXI@Z ; D3DX11Core::CBuffer::`scalar deleting destructor'(uint)
.text:004028D0                 dd rva sub_4040C0
.text:004028D4                 dd rva sub_4040D0
.text:004028D8                 dd rva sub_4040E0
.text:004028DC                 dd rva sub_404300
.text:004028E0                 dd rva sub_405410
.text:004028E4                 dd rva sub_405500
.text:004028E8                 dd rva sub_4055D0
.text:004028EC                 dd rva sub_4055F0
.text:004028F0                 dd rva sub_405620
.text:004028F4                 dd rva sub_405680
.text:004028F8                 dd rva sub_405740
.text:004028FC                 dd rva sub_405800
.text:00402900                 dd rva sub_405870
.text:00402904                 dd rva sub_4058F0
.text:00402908                 dd rva sub_405900
.text:0040290C                 dd rva sub_405910
.text:00402910                 dd rva sub_406500
.text:00402914                 dd rva ??_GObjectAsIPropertyValue@Projection@@EAEPAXI@Z ; Projection::ObjectAsIPropertyValue::`scalar deleting destructor'(uint)
.text:00402918                 dd rva sub_406580
.text:0040291C                 dd rva ??0bad_alloc@std@@QAE@ABV01@@Z ; std::bad_alloc::bad_alloc(std::bad_alloc const &)
.text:00402920                 dd rva ??_GCBuffer@D3DX11Core@@UAEPAXI@Z_0 ; D3DX11Core::CBuffer::`scalar deleting destructor'(uint)
.text:00402924                 dd rva sub_4065F0
.text:00402928                 dd rva ??1logic_error@std@@UAE@XZ ; std::logic_error::~logic_error(void)
.text:0040292C                 dd rva ?_Doraise@logic_error@std@@MBEXXZ ; std::logic_error::_Doraise(void)
.text:00402930                 dd rva sub_4066F0
.text:00402934                 dd rva ??_Ebad_alloc@std@@UAEPAXI@Z ; std::bad_alloc::`vector deleting destructor'(uint)
.text:00402938                 dd rva sub_406730
.text:0040293C                 dd rva ??0range_error@std@@QAE@ABV01@@Z ; std::range_error::range_error(std::range_error const &)
.text:00402940                 dd rva ??0logic_error@std@@QAE@ABV01@@Z ; std::logic_error::logic_error(std::logic_error const &)
.text:00402944                 dd rva ?_Doraise@logic_error@std@@MBEXXZ_0 ; std::logic_error::_Doraise(void)
.text:00402948                 dd rva sub_406DF0
.text:0040294C                 dd rva ??_EProjectionTypeReleaser@Projection@@UAEPAXI@Z ; Projection::ProjectionTypeReleaser::`vector deleting destructor'(uint)
.text:00402950                 dd rva sub_406E30
.text:00402954                 dd rva sub_406E40
.text:00402958                 dd rva sub_406E50
.text:0040295C                 dd rva sub_406E90
.text:00402960                 dd rva sub_406EE0
.text:00402964                 dd rva sub_406F20
.text:00402968                 dd rva sub_406F30
.text:0040296C                 dd rva sub_406FA0
.text:00402970                 dd rva ?OnDestroy@CWnd@@IAEXXZ ; CWnd::OnDestroy(void)
.text:00402974                 dd rva sub_407010
.text:00402978                 dd rva sub_407050
.text:0040297C                 dd rva sub_407060
.text:00402980                 dd rva sub_407070
.text:00402984                 dd rva sub_407080
.text:00402988                 dd rva sub_407090
.text:0040298C                 dd rva sub_407190
.text:00402990                 dd rva sub_4071D0
.text:00402994                 dd rva sub_407230
.text:00402998                 dd rva sub_407270
.text:0040299C                 dd rva sub_407280
.text:004029A0                 dd rva sub_4072C0
.text:004029A4                 dd rva sub_407510
.text:004029A8                 dd rva sub_4075C0
.text:004029AC                 dd rva UserMathErrorFunction
.text:004029B0                 dd rva sub_407680
.text:004029B4                 dd rva sub_407690
.text:004029B8                 dd rva sub_4076A0
.text:004029BC                 dd rva sub_407740
.text:004029C0                 dd rva sub_407760
.text:004029C4                 dd rva sub_407780
.text:004029C8                 dd rva sub_4077F0
.text:004029CC                 dd rva sub_407800
.text:004029D0                 dd rva sub_407810
.text:004029D4                 dd rva sub_407850
.text:004029D8                 dd rva sub_407910
.text:004029DC                 dd rva sub_407990
.text:004029E0                 dd rva sub_407B60
.text:004029E4                 dd rva sub_407C70
.text:004029E8                 dd rva sub_407C80
.text:004029EC                 dd rva sub_407CA0
.text:004029F0                 dd rva sub_407E50
.text:004029F4                 dd rva sub_408090
.text:004029F8                 dd rva sub_4081F0
.text:004029FC                 dd rva sub_4082C0
.text:00402A00                 dd rva sub_408570
.text:00402A04                 dd rva sub_408580
.text:00402A08                 dd rva ??_GCBuffer@D3DX11Core@@UAEPAXI@Z_1 ; D3DX11Core::CBuffer::`scalar deleting destructor'(uint)
.text:00402A0C                 dd rva sub_40A650
.text:00402A10                 dd rva sub_40A830
.text:00402A14                 dd rva sub_40A870
.text:00402A18                 dd rva sub_40A900
.text:00402A1C                 dd rva sub_40A950
.text:00402A20                 dd rva sub_40ADD0
.text:00402A24                 dd rva sub_40AE70
.text:00402A28                 dd rva sub_40AF10
.text:00402A2C                 dd rva sub_40B0A0
.text:00402A30                 dd rva sub_40B0D0
.text:00402A34                 dd rva sub_40B120
.text:00402A38                 dd rva sub_40B170
.text:00402A3C                 dd rva sub_40B1C0
.text:00402A40                 dd rva sub_40B210
.text:00402A44                 dd rva sub_40B390
.text:00402A48                 dd rva sub_40B3F0
.text:00402A4C                 dd rva sub_40B440
.text:00402A50                 dd rva sub_40B490
.text:00402A54                 dd rva sub_40B4E0
.text:00402A58                 dd rva sub_40B530
.text:00402A5C                 dd rva sub_40B6C0
.text:00402A60                 dd rva sub_40B770
.text:00402A64                 dd rva sub_40B810
.text:00402A68                 dd rva sub_40B820
.text:00402A6C                 dd rva ?OnApply@CPageBootIni@@UAEHXZ ; CPageBootIni::OnApply(void)
.text:00402A70                 dd rva sub_40BED0
.text:00402A74                 dd rva sub_40BF70
.text:00402A78                 dd rva sub_40C000
.text:00402A7C                 dd rva sub_40C2B0
.text:00402A80                 dd rva sub_40C2C0
.text:00402A84                 dd rva sub_40C2F0
.text:00402A88                 dd rva sub_40C4F0
.text:00402A8C                 dd rva sub_40C5D0
.text:00402A90                 dd rva sub_40C600
.text:00402A94                 dd rva sub_40C610
.text:00402A98                 dd rva ??_GCBuffer@D3DX11Core@@UAEPAXI@Z_2 ; D3DX11Core::CBuffer::`scalar deleting destructor'(uint)
.text:00402A9C                 dd rva sub_40C660
.text:00402AA0                 dd rva sub_40C670
.text:00402AA4                 dd rva sub_40C680
.text:00402AA8                 dd rva sub_40C760
.text:00402AAC                 dd rva sub_40C770
.text:00402AB0                 dd rva ??_GGdiException@Base@@UAEPAXI@Z_0 ; Base::GdiException::`scalar deleting destructor'(uint)
.text:00402AB4                 dd rva sub_40C7B0
.text:00402AB8                 dd rva sub_40D3B0
.text:00402ABC                 dd rva sub_40DBD0
.text:00402AC0                 dd rva ?OnHelpInfo@CWnd@@IAEHPAUtagHELPINFO@@@Z ; CWnd::OnHelpInfo(tagHELPINFO *)
.text:00402AC4                 dd rva ?GetRuntimeClass@CDialog@@UBEPAUCRuntimeClass@@XZ ; CDialog::GetRuntimeClass(void)
.text:00402AC8                 dd rva ?OnCmdMsg@CDialog@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z ; CDialog::OnCmdMsg(uint,int,void *,AFX_CMDHANDLERINFO *)
.text:00402ACC                 dd rva ?OnFinalRelease@CWnd@@UAEXXZ ; CWnd::OnFinalRelease(void)
.text:00402AD0                 dd rva ?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z ; CCmdTarget::IsInvokeAllowed(long)
.text:00402AD4                 dd rva ?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z ; CCmdTarget::GetDispatchIID(_GUID *)
.text:00402AD8                 dd rva ?GetTypeInfoCount@CCmdTarget@@UAEIXZ ; CCmdTarget::GetTypeInfoCount(void)
.text:00402ADC                 dd rva ?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ ; CCmdTarget::GetTypeLibCache(void)
.text:00402AE0                 dd rva ?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z ; CCmdTarget::GetTypeLib(ulong,ITypeLib * *)
.text:00402AE4                 dd rva ?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ ; CCmdTarget::GetCommandMap(void)
.text:00402AE8                 dd rva ?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ ; CCmdTarget::GetDispatchMap(void)
.text:00402AEC                 dd rva ?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ ; CCmdTarget::GetConnectionMap(void)
.text:00402AF0                 dd rva ?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ ; CCmdTarget::GetInterfaceMap(void)
.text:00402AF4                 dd rva ?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ ; CCmdTarget::GetEventSinkMap(void)
.text:00402AF8                 dd rva ?OnCreateAggregates@CCmdTarget@@UAEHXZ ; CCmdTarget::OnCreateAggregates(void)
.text:00402AFC                 dd rva ?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z ; CCmdTarget::GetInterfaceHook(void const *)
.text:00402B00                 dd rva ?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z ; CCmdTarget::GetExtraConnectionPoints(CPtrArray *)
.text:00402B04                 dd rva ?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z ; CCmdTarget::GetConnectionHook(_GUID const &)
.text:00402B08                 dd rva ?PreSubclassWindow@CWnd@@UAEXXZ ; CWnd::PreSubclassWindow(void)
.text:00402B0C                 dd rva ?Create@CWnd@@UAEHPBG0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z ; CWnd::Create(ushort const *,ushort const *,ulong,tagRECT const &,CWnd *,uint,CCreateContext *)
.text:00402B10                 dd rva ?DestroyWindow@CWnd@@UAEHXZ ; CWnd::DestroyWindow(void)
.text:00402B14                 dd rva ?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTW@@@Z ; CWnd::PreCreateWindow(tagCREATESTRUCTW &)
.text:00402B18                 dd rva ?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z ; CWnd::CalcWindowRect(tagRECT *,uint)
.text:00402B1C                 dd rva ?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOW@@@Z ; CWnd::OnToolHitTest(CPoint,tagTOOLINFOW *)
.text:00402B20                 dd rva ?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z ; CWnd::GetScrollBarCtrl(int)
.text:00402B24                 dd rva ?WinHelpW@CWnd@@UAEXKI@Z ; CWnd::WinHelpW(ulong,uint)
.text:00402B28                 dd rva ?ContinueModal@CWnd@@UAEHXZ ; CWnd::ContinueModal(void)
.text:00402B2C                 dd rva ?EndModalLoop@CWnd@@UAEXH@Z ; CWnd::EndModalLoop(int)
.text:00402B30                 dd rva ?OnCommand@CWnd@@MAEHIJ@Z ; CWnd::OnCommand(uint,long)
.text:00402B34                 dd rva ?OnNotify@CWnd@@MAEHIJPAJ@Z ; CWnd::OnNotify(uint,long,long *)
.text:00402B38                 dd rva ?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ ; CWnd::GetSuperWndProcAddr(void)
.text:00402B3C                 dd rva ?PreTranslateMessage@CDialog@@UAEHPAUtagMSG@@@Z ; CDialog::PreTranslateMessage(tagMSG *)
.text:00402B40                 dd rva ?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z ; CWnd::OnAmbientProperty(COleControlSite *,long,tagVARIANT *)
.text:00402B44                 dd rva ?WindowProc@CWnd@@MAEJIIJ@Z ; CWnd::WindowProc(uint,uint,long)
.text:00402B48                 dd rva ?OnWndMsg@CWnd@@MAEHIIJPAJ@Z ; CWnd::OnWndMsg(uint,uint,long,long *)
.text:00402B4C                 dd rva ?DefWindowProcW@CWnd@@MAEJIIJ@Z ; CWnd::DefWindowProcW(uint,uint,long)
.text:00402B50                 dd rva ?PostNcDestroy@CWnd@@MAEXXZ ; CWnd::PostNcDestroy(void)
.text:00402B54                 dd rva ?OnChildNotify@CWnd@@MAEHIIJPAJ@Z ; CWnd::OnChildNotify(uint,uint,long,long *)
.text:00402B58                 dd rva ?CheckAutoCenter@CDialog@@UAEHXZ ; CDialog::CheckAutoCenter(void)
.text:00402B5C                 dd rva ?IsFrameWnd@CWnd@@UBEHXZ ; CWnd::IsFrameWnd(void)
.text:00402B60                 dd rva ?SetOccDialogInfo@CDialog@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z ; CDialog::SetOccDialogInfo(_AFX_OCC_DIALOG_INFO *)
.text:00402B64                 dd rva ?DoModal@CDialog@@UAEHXZ ; CDialog::DoModal(void)
.text:00402B68                 dd rva ?OnInitDialog@CDialog@@UAEHXZ ; CDialog::OnInitDialog(void)
.text:00402B6C                 dd rva ?OnSetFont@CDialog@@UAEXPAVCFont@@@Z ; CDialog::OnSetFont(CFont *)
.text:00402B70                 dd rva ?OnOK@CDialog@@MAEXXZ ; CDialog::OnOK(void)
.text:00402B74                 dd rva ?OnCancel@CDialog@@MAEXXZ ; CDialog::OnCancel(void)
.text:00402B78                 dd rva ?PreInitDialog@CDialog@@MAEXXZ ; CDialog::PreInitDialog(void)
.text:00402B7C                 dd rva ?OnDestroy@CWnd@@IAEXXZ_0 ; CWnd::OnDestroy(void)
.text:00402B80                 dd rva ?OnNotify@CPropertyPage@@MAEHIJPAJ@Z ; CPropertyPage::OnNotify(uint,long,long *)
.text:00402B84                 dd rva ?PreTranslateMessage@CPropertyPage@@MAEHPAUtagMSG@@@Z ; CPropertyPage::PreTranslateMessage(tagMSG *)
.text:00402B88                 dd rva ?OnOK@CPropertyPage@@UAEXXZ ; CPropertyPage::OnOK(void)
.text:00402B8C                 dd rva ?OnCancel@CPropertyPage@@UAEXXZ ; CPropertyPage::OnCancel(void)
.text:00402B90                 dd rva ?OnReset@CPropertyPage@@UAEXXZ ; CPropertyPage::OnReset(void)
.text:00402B94                 dd rva ?OnSetActive@CPropertyPage@@UAEHXZ ; CPropertyPage::OnSetActive(void)
.text:00402B98                 dd rva ?OnKillActive@CPropertyPage@@UAEHXZ ; CPropertyPage::OnKillActive(void)
.text:00402B9C                 dd rva ?OnQueryCancel@CPropertyPage@@UAEHXZ ; CPropertyPage::OnQueryCancel(void)
.text:00402BA0                 dd rva ?OnWizardBack@CPropertyPage@@UAEJXZ ; CPropertyPage::OnWizardBack(void)
.text:00402BA4                 dd rva ?OnWizardNext@CPropertyPage@@UAEJXZ ; CPropertyPage::OnWizardNext(void)
.text:00402BA8                 dd rva ?OnWizardFinish@CPropertyPage@@UAEHXZ ; CPropertyPage::OnWizardFinish(void)
.text:00402BAC                 dd rva ?OnCmdMsg@CPropertySheet@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z ; CPropertySheet::OnCmdMsg(uint,int,void *,AFX_CMDHANDLERINFO *)
.text:00402BB0                 dd rva ?ContinueModal@CPropertySheet@@UAEHXZ ; CPropertySheet::ContinueModal(void)
.text:00402BB4                 dd rva ?OnCommand@CPropertySheet@@UAEHIJ@Z ; CPropertySheet::OnCommand(uint,long)
.text:00402BB8                 dd rva ?PreTranslateMessage@CPropertySheet@@UAEHPAUtagMSG@@@Z ; CPropertySheet::PreTranslateMessage(tagMSG *)
.text:00402BBC                 dd rva ?CheckAutoCenter@CWnd@@UAEHXZ ; CWnd::CheckAutoCenter(void)
.text:00402BC0                 dd rva ?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z ; CWnd::SetOccDialogInfo(_AFX_OCC_DIALOG_INFO *)
.text:00402BC4                 dd rva ?DoModal@CPropertySheet@@UAEHXZ ; CPropertySheet::DoModal(void)
.text:00402BC8                 dd rva ?BuildPropPageArray@CPropertySheet@@UAEXXZ ; CPropertySheet::BuildPropPageArray(void)
.text:00402BCC                 dd rva ?OnHelp@CWinApp@@IAEXXZ ; CWinApp::OnHelp(void)
.text:00402BD0                 dd rva ?GetRuntimeClass@CWinApp@@UBEPAUCRuntimeClass@@XZ ; CWinApp::GetRuntimeClass(void)
.text:00402BD4                 dd rva ?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z ; CCmdTarget::OnCmdMsg(uint,int,void *,AFX_CMDHANDLERINFO *)
.text:00402BD8                 dd rva ?OnFinalRelease@CCmdTarget@@UAEXXZ ; CCmdTarget::OnFinalRelease(void)
.text:00402BDC                 dd rva ?Run@CWinApp@@UAEHXZ ; CWinApp::Run(void)
.text:00402BE0                 dd rva ?PreTranslateMessage@CWinThread@@UAEHPAUtagMSG@@@Z ; CWinThread::PreTranslateMessage(tagMSG *)
.text:00402BE4                 dd rva ?PumpMessage@CWinThread@@UAEHXZ ; CWinThread::PumpMessage(void)
.text:00402BE8                 dd rva ?OnIdle@CWinApp@@UAEHJ@Z ; CWinApp::OnIdle(long)
.text:00402BEC                 dd rva ?IsIdleMessage@CWinThread@@UAEHPAUtagMSG@@@Z ; CWinThread::IsIdleMessage(tagMSG *)
.text:00402BF0                 dd rva ?ProcessWndProcException@CWinApp@@UAEJPAVCException@@PBUtagMSG@@@Z ; CWinApp::ProcessWndProcException(CException *,tagMSG const *)
.text:00402BF4                 dd rva ?ProcessMessageFilter@CWinThread@@UAEHHPAUtagMSG@@@Z ; CWinThread::ProcessMessageFilter(int,tagMSG *)
.text:00402BF8                 dd rva ?GetMainWnd@CWinThread@@UAEPAVCWnd@@XZ ; CWinThread::GetMainWnd(void)
.text:00402BFC                 dd rva ?Delete@CWinThread@@UAEXXZ ; CWinThread::Delete(void)
.text:00402C00                 dd rva ?OpenDocumentFile@CWinApp@@UAEPAVCDocument@@PBG@Z ; CWinApp::OpenDocumentFile(ushort const *)
.text:00402C04                 dd rva ?AddToRecentFileList@CWinApp@@UAEXPBG@Z ; CWinApp::AddToRecentFileList(ushort const *)
.text:00402C08                 dd rva ?InitApplication@CWinApp@@UAEHXZ ; CWinApp::InitApplication(void)
.text:00402C0C                 dd rva ?SaveAllModified@CWinApp@@UAEHXZ ; CWinApp::SaveAllModified(void)
.text:00402C10                 dd rva ?DoMessageBox@CWinApp@@UAEHPBGII@Z ; CWinApp::DoMessageBox(ushort const *,uint,uint)
.text:00402C14                 dd rva ?DoWaitCursor@CWinApp@@UAEXH@Z ; CWinApp::DoWaitCursor(int)
.text:00402C18                 dd rva ?OnDDECommand@CWinApp@@UAEHPAG@Z ; CWinApp::OnDDECommand(ushort *)
.text:00402C1C                 dd rva ?WinHelpW@CWinApp@@UAEXKI@Z ; CWinApp::WinHelpW(ulong,uint)
.text:00402C20                 dd rva ??0bad_alloc@std@@QAE@ABV01@@Z_1 ; std::bad_alloc::bad_alloc(std::bad_alloc const &)
.text:00402C24                 dd rva sub_40FDC0
.text:00402C28                 dd rva ??_GC30Program@D3DXShader@@UAEPAXI@Z ; D3DXShader::C30Program::`scalar deleting destructor'(uint)
.text:00402C2C                 dd rva ?_Doraise@logic_error@std@@MBEXXZ_1 ; std::logic_error::_Doraise(void)
.text:00402C30                 dd rva pre_c_init
.text:00402C34                 dd rva pre_cpp_init
.text:00402C38                 dd rva start
.text:00402C3C                 dd rva @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00402C40                 dd rva ??_Gtype_info@@UAEPAXI@Z ; type_info::`scalar deleting destructor'(uint)
.text:00402C44                 dd rva _purecall
.text:00402C48                 dd rva ??0exception@@QAE@ABV0@@Z ; exception::exception(exception const &)
.text:00402C4C                 dd rva ?what@exception@@UBEPBDXZ ; exception::what(void)
.text:00402C50                 dd rva ?__CxxUnhandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ; __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *)
.text:00402C54                 dd rva sub_4105F0
.text:00402C58                 dd rva __except_handler4
.text:00402C5C                 dd rva Func
.text:00402C60                 dd rva sub_411730
.text:00402C64                 dd rva sub_411740
.text:00402C68 dword_402C68    dd 145A0h, 0            ; DATA XREF: .text:00401EF8↑o
.text:00402C70 aStringTooLong  db 'string too long',0  ; DATA XREF: sub_40FE2A+C↓o
.text:00402C80 aInvalidStringP db 'invalid string position',0
.text:00402C80                                         ; DATA XREF: std::_String_base::_Xran(void)+C↓o
.text:00402C98 aBadAllocation  db 'bad allocation',0   ; DATA XREF: .data:off_413000↓o
.text:00402CA7                 align 4
.text:00402CA8 ; const OLECHAR psz
.text:00402CA8 psz:                                    ; DATA XREF: sub_403B8B+36↓o
.text:00402CA8                 text "UTF-16LE", 'mshelp://windows/?id=bd9e1cb6-a66a-47a8-a4b6-ef7ea6'
.text:00402CA8                 text "UTF-16LE", '72ae4b',0
.text:00402D1C ; const IID rclsid
.text:00402D1C rclsid          dd 8CEC58E7h            ; Data1
.text:00402D1C                                         ; DATA XREF: sub_403B8B+24↓o
.text:00402D1C                 dw 7A1h                 ; Data2
.text:00402D1C                 dw 11D9h                ; Data3
.text:00402D1C                 db 0B1h, 5Eh, 0, 0Dh, 56h, 0BFh, 0E6h, 0EEh; Data4
.text:00402D2C ; const IID riid
.text:00402D2C riid            dd 8CEC5884h            ; Data1
.text:00402D2C                                         ; DATA XREF: sub_403B8B+1B↓o
.text:00402D2C                 dw 7A1h                 ; Data2
.text:00402D2C                 dw 11D9h                ; Data3
.text:00402D2C                 db 0B1h, 5Eh, 0, 0Dh, 56h, 0BFh, 0E6h, 0EEh; Data4
.text:00402D3C aState:                                 ; DATA XREF: sub_403C90+24↓o
.text:00402D3C                                         ; sub_403CFC+21↓o
.text:00402D3C                 text "UTF-16LE", 'state',0
.text:00402D48 aRpcss:                                 ; DATA XREF: .text:off_401E70↑o
.text:00402D48                 text "UTF-16LE", 'rpcss',0
.text:00402D54 aDcomlaunch:                            ; DATA XREF: .text:00401E74↑o
.text:00402D54                 text "UTF-16LE", 'dcomlaunch',0
.text:00402D6A                 align 4
.text:00402D6C aAppinfo:                               ; DATA XREF: .text:00401E78↑o
.text:00402D6C                 text "UTF-16LE", 'appinfo',0
.text:00402D7C aProfsvc:                               ; DATA XREF: .text:00401E7C↑o
.text:00402D7C                 text "UTF-16LE", 'profsvc',0
.text:00402D8C aSppsvc:                                ; DATA XREF: .text:00401E80↑o
.text:00402D8C                 text "UTF-16LE", 'sppsvc',0
.text:00402D9A                 align 4
.text:00402D9C aUsermanager:                           ; DATA XREF: .text:00401E84↑o
.text:00402D9C                 text "UTF-16LE", 'usermanager',0
.text:00402DB4 aCpageservices  db 'CPageServices',0    ; DATA XREF: .text:off_401384↑o
.text:00402DC2                 align 4
.text:00402DC4 ; const WCHAR aHideessentials
.text:00402DC4 aHideessentials:                        ; DATA XREF: sub_4040E0+1AE↓o
.text:00402DC4                 text "UTF-16LE", 'HideEssentialServiceWarning',0
.text:00402DFC aMicrosoft:                             ; DATA XREF: sub_404316+2A9↓o
.text:00402DFC                 text "UTF-16LE", 'microsoft',0
.text:00402E10 ; const WCHAR ValueName
.text:00402E10 ValueName:                              ; DATA XREF: sub_4048DF+151↓o
.text:00402E10                                         ; sub_405AC6+1AD↓o
.text:00402E10                 text "UTF-16LE", 'YEAR',0
.text:00402E1A                 align 4
.text:00402E1C ; const WCHAR aMonth
.text:00402E1C aMonth:                                 ; DATA XREF: sub_4048DF+17B↓o
.text:00402E1C                                         ; sub_405AC6+1C6↓o
.text:00402E1C                 text "UTF-16LE", 'MONTH',0
.text:00402E28 ; const WCHAR off_402E28
.text:00402E28 off_402E28      dd offset loc_410044    ; DATA XREF: sub_4048DF+194↓o
.text:00402E28                                         ; sub_405AC6+1DF↓o
.text:00402E2C                 dd 59h
.text:00402E30 ; const WCHAR aHour
.text:00402E30 aHour:                                  ; DATA XREF: sub_4048DF+1A9↓o
.text:00402E30                                         ; sub_405AC6+1F8↓o
.text:00402E30                 text "UTF-16LE", 'HOUR',0
.text:00402E3A                 align 4
.text:00402E3C ; const WCHAR aMinute
.text:00402E3C aMinute:                                ; DATA XREF: sub_4048DF+1BE↓o
.text:00402E3C                                         ; sub_405AC6+211↓o
.text:00402E3C                 text "UTF-16LE", 'MINUTE',0
.text:00402E4A                 align 4
.text:00402E4C ; const WCHAR aSecond
.text:00402E4C aSecond:                                ; DATA XREF: sub_4048DF+1D3↓o
.text:00402E4C                                         ; sub_405AC6+22A↓o
.text:00402E4C                 text "UTF-16LE", 'SECOND',0
.text:00402E5A                 align 4
.text:00402E5C asc_402E5C:                             ; DATA XREF: sub_405AC6+46↓o
.text:00402E5C                                         ; OpenRegKey(ushort const *,ushort const *,ulong)+BF↓o ...
.text:00402E5C                 text "UTF-16LE", '\',0
.text:00402E60 ; const WCHAR SubKey
.text:00402E60 SubKey:                                 ; DATA XREF: OpenRegKey(ushort const *,ushort const *,ulong):loc_405D98↓o
.text:00402E60                                         ; sub_40D6CA+24↓o ...
.text:00402E60                 text "UTF-16LE", 'SOFTWARE\Microsoft\Shared Tools\MSConfig',0
.text:00402EB2                 align 8
.text:00402EB8 ; const WCHAR aSoftwareMicros_0
.text:00402EB8 aSoftwareMicros_0:                      ; DATA XREF: OpenRegKey(ushort const *,ushort const *,ulong)+69↓o
.text:00402EB8                                         ; sub_40C7B0+3BB↓o ...
.text:00402EB8                 text "UTF-16LE", 'SOFTWARE\Microsoft\Shared Tools',0
.text:00402EF8 ; const WCHAR aMsconfig
.text:00402EF8 aMsconfig:                              ; DATA XREF: OpenRegKey(ushort const *,ushort const *,ulong)+8B↓o
.text:00402EF8                                         ; sub_40D0ED+33↓o ...
.text:00402EF8                 text "UTF-16LE", 'MSConfig',0
.text:00402F0A                 align 4
.text:00402F0C aVectorTTooLong db 'vector<T> too long',0
.text:00402F0C                                         ; DATA XREF: sub_406166+C↓o
.text:00402F1F                 align 10h
.text:00402F20 ; const WCHAR ModuleName
.text:00402F20 ModuleName:                             ; DATA XREF: ATL::CRegKey::DeleteSubKey(ushort const *)+21↓o
.text:00402F20                 text "UTF-16LE", 'API-MS-Win-Core-LocalRegistry-L1-1-0.dll',0
.text:00402F72                 align 4
.text:00402F74 ; const CHAR ProcName[]
.text:00402F74 ProcName        db 'RegDeleteKeyExW',0  ; DATA XREF: ATL::CRegKey::DeleteSubKey(ushort const *)+30↓o
.text:00402F84 ; const WCHAR LibFileName
.text:00402F84 LibFileName:                            ; DATA XREF: ATL::CRegKey::DeleteSubKey(ushort const *)+43↓o
.text:00402F84                 text "UTF-16LE", 'advapi32.dll',0
.text:00402F9E                 align 10h
.text:00402FA0 ; const CHAR aRegdeletekeyw[]
.text:00402FA0 aRegdeletekeyw  db 'RegDeleteKeyW',0    ; DATA XREF: ATL::CRegKey::DeleteSubKey(ushort const *)+52↓o
.text:00402FAE                 align 10h
.text:00402FB0 aServices:                              ; DATA XREF: sub_406DF0↓o
.text:00402FB0                 text "UTF-16LE", 'services',0
.text:00402FC2                 align 4
.text:00402FC4 asc_402FC4:                             ; DATA XREF: sub_403E16+A5↓o
.text:00402FC4                                         ; sub_407CA0+7A↓o ...
.text:00402FC4                 text "UTF-16LE", ' ',0
.text:00402FC8 ; const WCHAR Source
.text:00402FC8 Source          dw 0                    ; DATA XREF: sub_403E16+15↓o
.text:00402FC8                                         ; sub_405F7C+29↓o ...
.text:00402FCA                 align 4
.text:00402FCC aCpagestartup   db 'CPageStartup',0     ; DATA XREF: .text:off_401528↑o
.text:00402FD9                 align 10h
.text:00402FE0 ; const WCHAR Src
.text:00402FE0 Src:                                    ; DATA XREF: sub_406F30+27↓o
.text:00402FE0                 text "UTF-16LE", '%SystemRoot%\System32\Taskmgr.exe',0
.text:00403024 ; const WCHAR Parameters
.text:00403024 Parameters:                             ; DATA XREF: sub_406F30+3A↓o
.text:00403024                 text "UTF-16LE", '/7 /Startup',0
.text:0040303C aStartup:                               ; DATA XREF: sub_407090↓o
.text:0040303C                 text "UTF-16LE", 'startup',0
.text:0040304C                 align 10h
.text:00403050 ; const WCHAR aSoftwareMicros_1
.text:00403050 aSoftwareMicros_1:                      ; DATA XREF: sub_407096+17↓o
.text:00403050                                         ; sub_407115+21↓o
.text:00403050                 text "UTF-16LE", 'SOFTWARE\Microsoft\Shared Tools\MsConfig',0
.text:004030A2                 align 4
.text:004030A4 ; const WCHAR aNorebootui
.text:004030A4 aNorebootui:                            ; DATA XREF: sub_407096+4C↓o
.text:004030A4                                         ; sub_407115+5C↓o
.text:004030A4                 text "UTF-16LE", 'NoRebootUI',0
.text:004030BA                 align 4
.text:004030BC aCpagegeneral   db 'CPageGeneral',0     ; DATA XREF: .text:off_401740↑o
.text:004030C9                 align 4
.text:004030CC aGeneral:                               ; DATA XREF: sub_407800↓o
.text:004030CC                 text "UTF-16LE", 'general',0
.text:004030DC aCpagetool      db 'CPageTool',0        ; DATA XREF: .text:off_401930↑o
.text:004030E6                 align 4
.text:004030E8 ; const WCHAR aWindirSystem32
.text:004030E8 aWindirSystem32:                        ; DATA XREF: sub_408373+50↓o
.text:004030E8                                         ; sub_408E79+6C↓o
.text:004030E8                 text "UTF-16LE", '%windir%\system32\MSCFGTLC.XML',0
.text:00403126                 align 4
.text:00403128 aTools:                                 ; DATA XREF: sub_408580↓o
.text:00403128                 text "UTF-16LE", 'tools',0
.text:00403134 ; const OLECHAR aMsconfigtools
.text:00403134 aMsconfigtools:                         ; DATA XREF: sub_4086C1+22↓o
.text:00403134                 text "UTF-16LE", '//MSCONFIGTOOLS',0
.text:00403154 ; const OLECHAR off_403154
.text:00403154 off_403154      dd offset loc_41004B+3  ; DATA XREF: sub_4086C1:loc_408704↓o
.text:00403158 aMe:
.text:00403158                 text "UTF-16LE", 'ME',0
.text:0040315E                 align 10h
.text:00403160 ; const OLECHAR off_403160
.text:00403160 off_403160      dd offset loc_410050    ; DATA XREF: sub_4086C1:loc_408722↓o
.text:00403164 aTh:
.text:00403164                 text "UTF-16LE", 'TH',0
.text:0040316A                 align 4
.text:0040316C ; const OLECHAR aDefaultOpt
.text:0040316C aDefaultOpt:                            ; DATA XREF: sub_4086C1+73↓o
.text:0040316C                 text "UTF-16LE", 'DEFAULT_OPT',0
.text:00403184 ; const OLECHAR aAdvOpt
.text:00403184 aAdvOpt:                                ; DATA XREF: sub_4086C1+85↓o
.text:00403184                 text "UTF-16LE", 'ADV_OPT',0
.text:00403194 ; const OLECHAR aHelp
.text:00403194 aHelp:                                  ; DATA XREF: sub_4086C1+97↓o
.text:00403194                 text "UTF-16LE", 'HELP',0
.text:0040319E                 align 10h
.text:004031A0 ; const WCHAR Name
.text:004031A0 Name:                                   ; DATA XREF: sub_408D34+47↓o
.text:004031A0                 text "UTF-16LE", 'MSCFGTL.XML',0
.text:004031B8 ; const WCHAR aWindirSystem32_0
.text:004031B8 aWindirSystem32_0:                      ; DATA XREF: sub_408E79:loc_408F31↓o
.text:004031B8                 text "UTF-16LE", '%windir%\SYSTEM32',0
.text:004031DC ; const WCHAR aProgramfiles
.text:004031DC aProgramfiles:                          ; DATA XREF: sub_408E79+CD↓o
.text:004031DC                 text "UTF-16LE", '%ProgramFiles%',0
.text:004031FA                 align 4
.text:004031FC ; const WCHAR asc_4031FC
.text:004031FC asc_4031FC:                             ; DATA XREF: sub_408E79+E5↓o
.text:004031FC                 text "UTF-16LE", '..',0
.text:00403202                 align 4
.text:00403204 ; const wchar_t Format
.text:00403204 Format:                                 ; DATA XREF: sub_4093CA+42↓o
.text:00403204                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+88↓o ...
.text:00403204                 text "UTF-16LE", '%d',0
.text:0040320A                 align 4
.text:0040320C aCom1:                                  ; DATA XREF: sub_4093CA+95↓o
.text:0040320C                 text "UTF-16LE", 'COM1:',0
.text:00403218 aCom2:                                  ; DATA XREF: sub_4093CA+A7↓o
.text:00403218                 text "UTF-16LE", 'COM2:',0
.text:00403224 aCom3:                                  ; DATA XREF: sub_4093CA+B9↓o
.text:00403224                 text "UTF-16LE", 'COM3:',0
.text:00403230 aCom4:                                  ; DATA XREF: sub_4093CA+CB↓o
.text:00403230                 text "UTF-16LE", 'COM4:',0
.text:0040323C a1394:                                  ; DATA XREF: sub_4093CA+DD↓o
.text:0040323C                                         ; CBootIniAdvancedDlg::SetDlgControlState(void)+140↓o ...
.text:0040323C                 text "UTF-16LE", '1394',0
.text:00403246                 align 4
.text:00403248 aUsb:                                   ; DATA XREF: sub_4093CA+EF↓o
.text:00403248                                         ; CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+19E↓o ...
.text:00403248                 text "UTF-16LE", 'USB',0
.text:00403250 a9600:                                  ; DATA XREF: sub_4093CA+115↓o
.text:00403250                 text "UTF-16LE", '9600',0
.text:0040325A                 align 4
.text:0040325C a19200:                                 ; DATA XREF: sub_4093CA+127↓o
.text:0040325C                 text "UTF-16LE", '19200',0
.text:00403268 a38400:                                 ; DATA XREF: sub_4093CA+139↓o
.text:00403268                 text "UTF-16LE", '38400',0
.text:00403274 a57600:                                 ; DATA XREF: sub_4093CA+14B↓o
.text:00403274                 text "UTF-16LE", '57600',0
.text:00403280 a115200:                                ; DATA XREF: sub_4093CA+15D↓o
.text:00403280                 text "UTF-16LE", '115200',0
.text:0040328E                 align 10h
.text:00403290 aComD:                                  ; DATA XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+239↓o
.text:00403290                 text "UTF-16LE", 'COM%d:',0
.text:0040329E                 align 10h
.text:004032A0 ; const WCHAR a1
.text:004032A0 a1:                                     ; DATA XREF: sub_40A52B:loc_40A580↓o
.text:004032A0                 text "UTF-16LE", '1',0
.text:004032A4 aCpagebootini   db 'CPageBootIni',0     ; DATA XREF: .text:off_401C30↑o
.text:004032B1                 align 4
.text:004032B4 ; const WCHAR aFveapiDll
.text:004032B4 aFveapiDll:                             ; DATA XREF: sub_40B860+4B↓o
.text:004032B4                 text "UTF-16LE", 'fveapi.dll',0
.text:004032CA                 align 4
.text:004032CC ; const CHAR aFveopenvolumew[]
.text:004032CC aFveopenvolumew db 'FveOpenVolumeW',0   ; DATA XREF: sub_40B860+60↓o
.text:004032DB                 align 4
.text:004032DC ; const CHAR aFvegetstatus[]
.text:004032DC aFvegetstatus   db 'FveGetStatus',0     ; DATA XREF: sub_40B860+77↓o
.text:004032E9                 align 4
.text:004032EC ; const CHAR aFveclosevolume[]
.text:004032EC aFveclosevolume db 'FveCloseVolume',0   ; DATA XREF: sub_40B860+8E↓o
.text:004032FB                 align 4
.text:004032FC asc_4032FC:                             ; DATA XREF: sub_40B860+FA↓o
.text:004032FC                 text "UTF-16LE", '\\.\',0
.text:00403306                 align 4
.text:00403308 aBackup:                                ; DATA XREF: CPageBootIni::OnApply(void):loc_40BBC1↓o
.text:00403308                                         ; sub_40BEDE+2D↓o ...
.text:00403308                 text "UTF-16LE", '.backup',0
.text:00403318 aBoot:                                  ; DATA XREF: sub_40D856:loc_40D918↓o
.text:00403318                 text "UTF-16LE", 'boot',0
.text:00403322                 align 4
.text:00403324 aSS:                                    ; DATA XREF: CPageBootIni::OnApply(void)+2DF↓o
.text:00403324                 text "UTF-16LE", '%s',0Ah
.text:00403324                 text "UTF-16LE", 0Ah
.text:00403324                 text "UTF-16LE", '%s',0
.text:00403332                 align 4
.text:00403334 asc_403334:                             ; DATA XREF: CPageBootIni::ReDrawOSListBox(void):loc_40C16C↓o
.text:00403334                 text "UTF-16LE", '(',0
.text:00403338 asc_403338:                             ; DATA XREF: CPageBootIni::ReDrawOSListBox(void)+151↓o
.text:00403338                 text "UTF-16LE", ')',0
.text:0040333C asc_40333C:                             ; DATA XREF: CPageBootIni::ReDrawOSListBox(void)+167↓o
.text:0040333C                                         ; CPageBootIni::ReDrawOSListBox(void):loc_40C1E5↓o
.text:0040333C                 text "UTF-16LE", ' : ',0
.text:00403344 asc_403344:                             ; DATA XREF: CPageBootIni::ReDrawOSListBox(void)+1A9↓o
.text:00403344                 text "UTF-16LE", '; ',0
.text:0040334A                 align 4
.text:0040334C aBootini:                               ; DATA XREF: sub_40C2C0↓o
.text:0040334C                 text "UTF-16LE", 'bootini',0
.text:0040335C aCmsconfigsheet db 'CMSConfigSheet',0   ; DATA XREF: .text:off_401D68↑o
.text:0040336B                 align 4
.text:0040336C asc_40336C:                             ; DATA XREF: sub_40C7B0:loc_40C8AA↓o
.text:0040336C                                         ; sub_40C7B0+13F↓o
.text:0040336C                 text "UTF-16LE", '/-',0
.text:00403372                 align 4
.text:00403374 aAuto:                                  ; DATA XREF: sub_40C7B0+1A7↓o
.text:00403374                 text "UTF-16LE", 'auto',0
.text:0040337E                 align 10h
.text:00403380 aBasic:                                 ; DATA XREF: sub_40C7B0+1C8↓o
.text:00403380                 text "UTF-16LE", 'basic',0
.text:0040338C aCommit:                                ; DATA XREF: sub_40C7B0:loc_40C9BB↓o
.text:0040338C                 text "UTF-16LE", 'commit',0
.text:0040339A                 align 4
.text:0040339C a0123456789:                            ; DATA XREF: sub_40C7B0+257↓o
.text:0040339C                 text "UTF-16LE", '0123456789',0
.text:004033B2                 align 4
.text:004033B4 ; const WCHAR pwzCommandline
.text:004033B4 pwzCommandline:                         ; DATA XREF: sub_40C7B0+3F5↓o
.text:004033B4                 text "UTF-16LE", '%windir%\system32\msconfig',0
.text:004033EA                 align 10h
.text:004033F0 ; const WCHAR aSoftwareMicros_2
.text:004033F0 aSoftwareMicros_2:                      ; DATA XREF: sub_40D0ED+1B↓o
.text:004033F0                 text "UTF-16LE", 'SOFTWARE\Microsoft\Windows\CurrentVersion\Run',0
.text:0040344C ; const WCHAR aSeshutdownpriv
.text:0040344C aSeshutdownpriv:                        ; DATA XREF: sub_40D13E+7C↓o
.text:0040344C                 text "UTF-16LE", 'SeShutdownPrivilege',0
.text:00403474 dword_403474    dd 2F002Dh              ; DATA XREF: sub_40D3F3+8B↓r
.text:00403478 word_403478     dw 0                    ; DATA XREF: sub_40D3F3+94↓r
.text:0040347A                 align 4
.text:0040347C ; const WCHAR String2
.text:0040347C String2:                                ; DATA XREF: sub_40D3F3+AB↓o
.text:0040347C                 text "UTF-16LE", 'UnregServer',0
.text:00403494 ; const WCHAR aRegserver
.text:00403494 aRegserver:                             ; DATA XREF: sub_40D3F3+C8↓o
.text:00403494                 text "UTF-16LE", 'RegServer',0
.text:004034A8 ; const WCHAR aSystemrootPss
.text:004034A8 aSystemrootPss:                         ; DATA XREF: sub_40D856+77↓o
.text:004034A8                 text "UTF-16LE", '%systemroot%\pss',0
.text:004034CA                 align 4
.text:004034CC ; const WCHAR aMsconfigrunnin
.text:004034CC aMsconfigrunnin:                        ; DATA XREF: sub_40C7B0+61↓o
.text:004034CC                 text "UTF-16LE", 'MSConfigRunning',0
.text:004034EC ; const WCHAR SubBlock
.text:004034EC SubBlock:                               ; DATA XREF: sub_40DE06+87↓o
.text:004034EC                 text "UTF-16LE", 'VarFileInfo\Translation',0
.text:0040351C ; const wchar_t a04x04x
.text:0040351C a04x04x:                                ; DATA XREF: sub_40DE06+B1↓o
.text:0040351C                 text "UTF-16LE", '%04x%04x',0
.text:0040352E                 align 10h
.text:00403530 a040904b0:                              ; DATA XREF: sub_40DE06+11E↓o
.text:00403530                 text "UTF-16LE", '040904B0',0
.text:00403542                 align 4
.text:00403544 aFileversion:                           ; DATA XREF: sub_40DE06+138↓o
.text:00403544                                         ; sub_40DE06+1A2↓o
.text:00403544                 text "UTF-16LE", 'FileVersion',0
.text:0040355C a040904e4:                              ; DATA XREF: sub_40DE06+14D↓o
.text:0040355C                 text "UTF-16LE", '040904E4',0
.text:0040356E                 align 10h
.text:00403570 a04090000:                              ; DATA XREF: sub_40DE06+177↓o
.text:00403570                 text "UTF-16LE", '04090000',0
.text:00403582                 align 4
.text:00403584 aFiledescriptio:                        ; DATA XREF: sub_40DE06+1BA↓o
.text:00403584                 text "UTF-16LE", 'FileDescription',0
.text:004035A4 aCompanyname:                           ; DATA XREF: sub_40DE06+1CF↓o
.text:004035A4                 text "UTF-16LE", 'CompanyName',0
.text:004035BC aProductname:                           ; DATA XREF: sub_40DE06+1E5↓o
.text:004035BC                 text "UTF-16LE", 'ProductName',0
.text:004035D4 aSSS:                                   ; DATA XREF: sub_40E04D+41↓o
.text:004035D4                 text "UTF-16LE", '\%s\%s\%s',0
.text:004035E8 ; const CHAR aAtlthunkDll[]
.text:004035E8 aAtlthunkDll    db 'atlthunk.dll',0     ; DATA XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long__+28↓o
.text:004035E8                                         ; GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___0+28↓o ...
.text:004035F5                 align 4
.text:004035F8 ; const CHAR aAtlthunkAlloca[]
.text:004035F8 aAtlthunkAlloca db 'AtlThunk_AllocateData',0
.text:004035F8                                         ; DATA XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long__+3E↓o
.text:004035F8                                         ; GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___0+3E↓o ...
.text:0040360E                 align 10h
.text:00403610 ; const CHAR aAtlthunkInitda[]
.text:00403610 aAtlthunkInitda db 'AtlThunk_InitData',0
.text:00403610                                         ; DATA XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long__+53↓o
.text:00403610                                         ; GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___0+53↓o ...
.text:00403622                 align 4
.text:00403624 ; const CHAR aAtlthunkDatato[]
.text:00403624 aAtlthunkDatato db 'AtlThunk_DataToCode',0
.text:00403624                                         ; DATA XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long__+68↓o
.text:00403624                                         ; GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___0+68↓o ...
.text:00403638 ; const CHAR aAtlthunkFreeda[]
.text:00403638 aAtlthunkFreeda db 'AtlThunk_FreeData',0
.text:00403638                                         ; DATA XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long__+7D↓o
.text:00403638                                         ; GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___0+7D↓o ...
.text:0040364A                 align 4
.text:0040364C ; const IID stru_40364C
.text:0040364C stru_40364C     dd 2933BF90h            ; Data1
.text:0040364C                                         ; DATA XREF: sub_408913+9A↓o
.text:0040364C                 dw 7B36h                ; Data2
.text:0040364C                 dw 11D2h                ; Data3
.text:0040364C                 db 0B2h, 0Eh, 0, 0C0h, 4Fh, 98h, 3Eh, 60h; Data4
.text:0040365C ; const IID stru_40365C
.text:0040365C stru_40365C     dd 2933BF81h            ; Data1
.text:0040365C                                         ; DATA XREF: sub_408913+92↓o
.text:0040365C                 dw 7B36h                ; Data2
.text:0040365C                 dw 11D2h                ; Data3
.text:0040365C                 db 0B2h, 0Eh, 0, 0C0h, 4Fh, 98h, 3Eh, 60h; Data4
.text:0040366C dword_40366C    dd 2 dup(0)             ; DATA XREF: sub_408D34+E2↓o
.text:00403674                 dd 0C0h, 46000000h
.text:0040367C dword_40367C    dd 3A0043h              ; DATA XREF: sub_40EAB6+15↓r
.text:00403680 word_403680     dw 0                    ; DATA XREF: sub_40EAB6+22↓r
.text:00403682                 align 4
.text:00403684 ; const wchar_t aS
.text:00403684 aS:                                     ; DATA XREF: sub_40EBA6+4B↓o
.text:00403684                 text "UTF-16LE", '\??\%s',0
.text:00403692                 align 4
.text:00403694 dword_403694    dd 9DEA862Ch, 4E705CDDh, 2BF3C1ACh, 95474D34h
.text:00403694                                         ; DATA XREF: sub_40F1A5+33↓o
.text:00403694                                         ; sub_40F610+24↓o
.text:004036A4 dword_4036A4    dd 4636856Eh, 4170540Fh, 47A830A1h, 54C6F476h
.text:004036A4                                         ; DATA XREF: sub_40F131+1C↓o
.text:004036A4                                         ; sub_40F498+13↓o
.text:004036B4 dword_4036B4    dd 0FA926493h, 41936F1Ch, 0F05814A4h, 1E6D45B2h, 0
.text:004036B4                                         ; DATA XREF: sub_40F254+CC↓o
.text:004036C8 dbl_4036C8      dq -9.5367431640625e-7  ; DATA XREF: sub_4093CA+1D6↓r
.text:004036D0 ; Debug Directory entries
.text:004036D0                 dd 0                    ; Characteristics
.text:004036D4                 dd 2687CC6Eh            ; TimeDateStamp: Tue Jun 26 20:58:22 1990
.text:004036D8                 dw 0                    ; MajorVersion
.text:004036DA                 dw 0                    ; MinorVersion
.text:004036DC                 dd 2                    ; Type: IMAGE_DEBUG_TYPE_CODEVIEW
.text:004036E0                 dd 25h                  ; SizeOfData
.text:004036E4                 dd rva asc_403804       ; AddressOfRawData
.text:004036E8                 dd 2C04h                ; PointerToRawData
.text:004036EC                 dd 0                    ; Characteristics
.text:004036F0                 dd 2687CC6Eh            ; TimeDateStamp: Tue Jun 26 20:58:22 1990
.text:004036F4                 dw 0                    ; MajorVersion
.text:004036F6                 dw 0                    ; MinorVersion
.text:004036F8                 dd 0Dh                  ; Type: IMAGE_DEBUG_TYPE_POGO
.text:004036FC                 dd 288h                 ; SizeOfData
.text:00403700                 dd rva aGctl            ; AddressOfRawData
.text:00403704                 dd 2C2Ch                ; PointerToRawData
.text:00403708                 dd 0                    ; Characteristics
.text:0040370C                 dd 2687CC6Eh            ; TimeDateStamp: Tue Jun 26 20:58:22 1990
.text:00403710                 dw 0                    ; MajorVersion
.text:00403712                 dw 0                    ; MinorVersion
.text:00403714                 dd 10h                  ; Type: IMAGE_DEBUG_TYPE_REPRO
.text:00403718                 dd 0                    ; SizeOfData
.text:0040371C                 dd 0                    ; AddressOfRawData
.text:00403720                 dd 0                    ; PointerToRawData
.text:00403724                 align 10h
.text:00403730 ___safe_se_handler_table dd rva __except_handler4
.text:00403730                                         ; DATA XREF: .text:00401ED0↑o
.text:00403734                 dd rva loc_410A28
.text:00403738                 dd rva loc_410A55
.text:0040373C                 dd rva loc_410AA4
.text:00403740                 dd rva loc_410B01
.text:00403744                 dd rva loc_410B2D
.text:00403748                 dd rva loc_410BC6
.text:0040374C                 dd rva loc_410C27
.text:00403750                 dd rva loc_410C4A
.text:00403754                 dd rva loc_410C7B
.text:00403758                 dd rva loc_410CA8
.text:0040375C                 dd rva loc_410CCE
.text:00403760                 dd rva loc_410CFC
.text:00403764                 dd rva loc_410D29
.text:00403768                 dd rva loc_410D4C
.text:0040376C                 dd rva loc_410D9D
.text:00403770                 dd rva loc_410E01
.text:00403774                 dd rva loc_410E25
.text:00403778                 dd rva loc_410E4B
.text:0040377C                 dd rva loc_410E6E
.text:00403780                 dd rva loc_410E9C
.text:00403784                 dd rva loc_410EB7
.text:00403788                 dd rva loc_410EDD
.text:0040378C                 dd rva loc_410F4A
.text:00403790                 dd rva loc_410F8B
.text:00403794                 dd rva loc_410FB8
.text:00403798                 dd rva loc_410FE8
.text:0040379C                 dd rva loc_41100C
.text:004037A0                 dd rva loc_41104B
.text:004037A4                 dd rva loc_4110CF
.text:004037A8                 dd rva loc_41111A
.text:004037AC                 dd rva loc_411191
.text:004037B0                 dd rva loc_4111BF
.text:004037B4                 dd rva loc_4111E3
.text:004037B8                 dd rva loc_41121A
.text:004037BC                 dd rva loc_41123E
.text:004037C0                 dd rva loc_411272
.text:004037C4                 dd rva loc_4112BE
.text:004037C8                 dd rva loc_4112EE
.text:004037CC                 dd rva loc_41131B
.text:004037D0                 dd rva loc_411391
.text:004037D4                 dd rva loc_4113C8
.text:004037D8                 dd rva loc_4113FF
.text:004037DC                 dd rva loc_411435
.text:004037E0                 dd rva loc_4114E2
.text:004037E4                 dd rva loc_411532
.text:004037E8                 dd rva loc_411558
.text:004037EC                 dd rva SEH_40D13E
.text:004037F0                 dd rva loc_4115D8
.text:004037F4                 dd rva loc_411676
.text:004037F8                 dd rva loc_4116AA
.text:004037FC                 dd rva loc_4116DA
.text:00403800                 dd rva loc_4116FF
.text:00403804 ; Debug information (IMAGE_DEBUG_TYPE_CODEVIEW)
.text:00403804 asc_403804      db 'RSDS'               ; DATA XREF: .text:004036E4↑o
.text:00403804                                         ; CV signature
.text:00403808                 dd 1C31FDB5h            ; Data1 ; GUID
.text:00403808                 dw 48C5h                ; Data2
.text:00403808                 dw 8732h                ; Data3
.text:00403808                 db 59h, 0F0h, 0Fh, 0DDh, 0E8h, 0F5h, 99h, 11h; Data4
.text:00403818                 dd 1                    ; Age
.text:0040381C                 text "UTF-8", 'msconfig.pdb',0 ; PdbFileName
.text:00403829                 align 4
.text:0040382C ; Debug information (IMAGE_DEBUG_TYPE_POGO)
.text:0040382C aGctl           db 'GCTL',0             ; DATA XREF: .text:00403700↑o
.text:00403831                 db 10h, 2 dup(0)
.text:00403834                 dd 0F28h, 6164722Eh, 62246174h, 6372h, 1F28h, 93Ch, 6164722Eh
.text:00403834                 dd 72246174h, 63726224h, 0
.text:0040385C                 dd 2864h, 4, 5452432Eh, 41435824h, 0
.text:00403870                 dd 2868h, 4, 5452432Eh, 41435824h, 41h, 286Ch, 4, 5452432Eh
.text:00403870                 dd 4C435824h, 0
.text:00403898                 dd 2870h, 8, 5452432Eh, 55435824h, 0
.text:004038AC                 dd 2878h, 4, 5452432Eh, 5A435824h, 0
.text:004038C0                 dd 287Ch, 4, 5452432Eh, 41495824h, 0
.text:004038D4                 dd 2880h, 4, 5452432Eh, 41495824h, 41h, 2884h, 4, 5452432Eh
.text:004038D4                 dd 59495824h, 0
.text:004038FC                 dd 2888h, 4, 5452432Eh, 5A495824h, 0
.text:00403910                 dd 288Ch, 3DCh, 6966672Eh, 7364h, 2C68h, 8, 6169672Eh
.text:00403910                 dd 7374h, 2C70h, 0AC0h, 6164722Eh, 6174h, 3730h, 0D4h
.text:00403910                 dd 6164722Eh, 73246174h, 74616478h, 61h, 3804h, 2B0h, 6164722Eh
.text:00403910                 dd 7A246174h, 62647A7Ah, 67h, 3AB4h, 7Ch, 7865742Eh, 69642474h
.text:00403910                 dd 0
.text:00403984                 dd 3B30h, 0CEF0h, 7865742Eh, 6E6D2474h, 0
.text:00403998                 dd 10A20h, 0CFAh, 7865742Eh, 782474h, 1171Ah, 3Eh, 7865742Eh
.text:00403998                 dd 64792474h, 0
.text:004039BC                 dd 11758h, 0EFCh, 6164782Eh, 78246174h, 0
.text:004039D0                 dd 13000h, 8, 7461642Eh, 72622461h, 63h, 13008h, 408h
.text:004039D0                 dd 7461642Eh, 24722461h, 637262h, 13410h, 40h, 7461642Eh
.text:004039D0                 dd 61h, 13450h, 668h, 7373622Eh, 0
.text:00403A18                 dd 14000h, 628h, 6164692Eh, 35246174h, 0
.text:00403A2C                 dd 14628h, 4, 6330302Eh, 6766h, 1462Ch, 118h, 6164692Eh
.text:00403A2C                 dd 32246174h, 0
.text:00403A50                 dd 14744h, 14h, 6164692Eh, 33246174h, 0
.text:00403A64                 dd 14758h, 628h, 6164692Eh, 34246174h, 0
.text:00403A78                 dd 14D80h, 0E26h, 6164692Eh, 36246174h, 0
.text:00403A8C                 dd 16000h, 420h, 7273722Eh, 31302463h, 0
.text:00403AA0                 dd 16420h, 12350h, 7273722Eh, 32302463h, 4 dup(0)
.text:00403AC0
.text:00403AC0 ; =============== S U B R O U T I N E =======================================
.text:00403AC0
.text:00403AC0
.text:00403AC0 sub_403AC0      proc near               ; DATA XREF: .text:00402870↑o
.text:00403AC0                                         ; .text:___guard_fids_table↑o
.text:00403AC0                 push    0
.text:00403AC2                 mov     ecx, offset dword_413980
.text:00403AC7                 call    ds:??0CWinApp@@QAE@PBG@Z ; CWinApp::CWinApp(ushort const *)
.text:00403ACD                 push    offset Func     ; Func
.text:00403AD2                 mov     dword_413980, offset ??_7CMSConfigApp@@6B@ ; const CMSConfigApp::`vftable'
.text:00403ADC                 call    sub_410445
.text:00403AE1                 pop     ecx
.text:00403AE2                 retn
.text:00403AE2 sub_403AC0      endp
.text:00403AE2
.text:00403AE2 ; ---------------------------------------------------------------------------
.text:00403AE3                 align 10h
.text:00403AF0
.text:00403AF0 ; =============== S U B R O U T I N E =======================================
.text:00403AF0
.text:00403AF0
.text:00403AF0 sub_403AF0      proc near               ; DATA XREF: .text:00402874↑o
.text:00403AF0                                         ; .text:00402890↑o
.text:00403AF0                 mov     ecx, offset lpPathName
.text:00403AF5                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00403AFB                 push    offset sub_411730 ; Func
.text:00403B00                 call    sub_410445
.text:00403B05                 pop     ecx
.text:00403B06                 retn
.text:00403B06 sub_403AF0      endp
.text:00403B06
.text:00403B06 ; ---------------------------------------------------------------------------
.text:00403B07                 align 10h
.text:00403B10
.text:00403B10 ; =============== S U B R O U T I N E =======================================
.text:00403B10
.text:00403B10
.text:00403B10 sub_403B10      proc near               ; DATA XREF: .text:0040286C↑o
.text:00403B10                                         ; .text:00402894↑o
.text:00403B10                 push    600h
.text:00403B15                 push    0
.text:00403B17                 call    ?AfxInitialize@@YGHHK@Z ; AfxInitialize(int,ulong)
.text:00403B1C                 mov     byte_4137B4, al
.text:00403B21                 retn
.text:00403B21 sub_403B10      endp
.text:00403B21
.text:00403B21 ; ---------------------------------------------------------------------------
.text:00403B22                 align 10h
.text:00403B30
.text:00403B30 ; =============== S U B R O U T I N E =======================================
.text:00403B30
.text:00403B30 ; Attributes: bp-based frame info_from_lumina
.text:00403B30
.text:00403B30 ; void *__thiscall Base::GdiException::`scalar deleting destructor'(Base::GdiException *__hidden this, unsigned int)
.text:00403B30 ??_GGdiException@Base@@UAEPAXI@Z proc near
.text:00403B30                                         ; DATA XREF: .text:00401070↑o
.text:00403B30                                         ; .text:00402898↑o
.text:00403B30
.text:00403B30 arg_0           = byte ptr  8
.text:00403B30
.text:00403B30                 mov     edi, edi
.text:00403B32                 push    ebp
.text:00403B33                 mov     ebp, esp
.text:00403B35                 push    esi
.text:00403B36                 mov     esi, ecx
.text:00403B38                 call    ds:??1CDialog@@UAE@XZ ; CDialog::~CDialog(void)
.text:00403B3E                 test    [ebp+arg_0], 1
.text:00403B42                 jz      short loc_403B4C
.text:00403B44                 push    esi
.text:00403B45                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00403B4B                 pop     ecx
.text:00403B4C
.text:00403B4C loc_403B4C:                             ; CODE XREF: Base::GdiException::`scalar deleting destructor'(uint)+12↑j
.text:00403B4C                 mov     eax, esi
.text:00403B4E                 pop     esi
.text:00403B4F                 pop     ebp
.text:00403B50                 retn    4
.text:00403B50 ??_GGdiException@Base@@UAEPAXI@Z endp
.text:00403B50
.text:00403B53
.text:00403B53 ; =============== S U B R O U T I N E =======================================
.text:00403B53
.text:00403B53 ; Attributes: bp-based frame
.text:00403B53
.text:00403B53 sub_403B53      proc near               ; CODE XREF: sub_40C7B0+4D00↓j
.text:00403B53
.text:00403B53 var_4           = dword ptr -4
.text:00403B53
.text:00403B53                 mov     edi, edi
.text:00403B55                 push    ebp
.text:00403B56                 mov     ebp, esp
.text:00403B58                 push    ecx
.text:00403B59                 mov     [ebp+var_4], ecx
.text:00403B5C                 call    ds:??1CDialog@@UAE@XZ ; CDialog::~CDialog(void)
.text:00403B62                 mov     esp, ebp
.text:00403B64                 pop     ebp
.text:00403B65                 retn
.text:00403B65 sub_403B53      endp
.text:00403B65
.text:00403B65 ; ---------------------------------------------------------------------------
.text:00403B66                 align 10h
.text:00403B70
.text:00403B70 ; =============== S U B R O U T I N E =======================================
.text:00403B70
.text:00403B70 ; Attributes: bp-based frame
.text:00403B70
.text:00403B70 sub_403B70      proc near               ; DATA XREF: .text:004010F8↑o
.text:00403B70                                         ; .text:0040289C↑o
.text:00403B70
.text:00403B70 arg_0           = dword ptr  8
.text:00403B70
.text:00403B70                 mov     edi, edi
.text:00403B72                 push    ebp
.text:00403B73                 mov     ebp, esp
.text:00403B75                 lea     eax, [ecx+60h]
.text:00403B78                 push    eax
.text:00403B79                 push    3EAh
.text:00403B7E                 push    [ebp+arg_0]
.text:00403B81                 call    ds:?DDX_Check@@YGXPAVCDataExchange@@HAAH@Z ; DDX_Check(CDataExchange *,int,int &)
.text:00403B87                 pop     ebp
.text:00403B88                 retn    4
.text:00403B88 sub_403B70      endp
.text:00403B88
.text:00403B8B
.text:00403B8B ; =============== S U B R O U T I N E =======================================
.text:00403B8B
.text:00403B8B ; Attributes: bp-based frame
.text:00403B8B
.text:00403B8B sub_403B8B      proc near               ; CODE XREF: sub_403C20↓j
.text:00403B8B
.text:00403B8B ppv             = dword ptr -8
.text:00403B8B var_4           = dword ptr -4
.text:00403B8B
.text:00403B8B                 mov     edi, edi
.text:00403B8D                 push    ebp
.text:00403B8E                 mov     ebp, esp
.text:00403B90                 push    ecx
.text:00403B91                 push    ecx
.text:00403B92                 mov     eax, ___security_cookie
.text:00403B97                 xor     eax, ebp
.text:00403B99                 mov     [ebp+var_4], eax
.text:00403B9C                 and     [ebp+ppv], 0
.text:00403BA0                 lea     eax, [ebp+ppv]
.text:00403BA3                 push    esi
.text:00403BA4                 push    edi
.text:00403BA5                 push    eax             ; ppv
.text:00403BA6                 push    offset riid     ; riid
.text:00403BAB                 push    1               ; dwClsContext
.text:00403BAD                 push    0               ; pUnkOuter
.text:00403BAF                 push    offset rclsid   ; rclsid
.text:00403BB4                 call    ds:CoCreateInstance
.text:00403BBA                 mov     edi, eax
.text:00403BBC                 test    edi, edi
.text:00403BBE                 js      short loc_403BF0
.text:00403BC0                 push    ebx
.text:00403BC1                 push    offset psz      ; "mshelp://windows/?id=bd9e1cb6-a66a-47a8"...
.text:00403BC6                 call    ds:SysAllocString
.text:00403BCC                 mov     ebx, eax
.text:00403BCE                 test    ebx, ebx
.text:00403BD0                 jz      short loc_403BEF
.text:00403BD2                 mov     ecx, [ebp+ppv]
.text:00403BD5                 push    ebx
.text:00403BD6                 push    ecx
.text:00403BD7                 mov     edx, [ecx]
.text:00403BD9                 mov     esi, [edx+0Ch]
.text:00403BDC                 mov     ecx, esi
.text:00403BDE                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00403BE4                 call    esi
.text:00403BE6                 mov     edi, eax
.text:00403BE8                 push    ebx             ; bstrString
.text:00403BE9                 call    ds:SysFreeString
.text:00403BEF
.text:00403BEF loc_403BEF:                             ; CODE XREF: sub_403B8B+45↑j
.text:00403BEF                 pop     ebx
.text:00403BF0
.text:00403BF0 loc_403BF0:                             ; CODE XREF: sub_403B8B+33↑j
.text:00403BF0                 mov     ecx, [ebp+ppv]
.text:00403BF3                 test    ecx, ecx
.text:00403BF5                 jz      short loc_403C07
.text:00403BF7                 mov     eax, [ecx]
.text:00403BF9                 push    ecx
.text:00403BFA                 mov     esi, [eax+8]
.text:00403BFD                 mov     ecx, esi
.text:00403BFF                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00403C05                 call    esi
.text:00403C07
.text:00403C07 loc_403C07:                             ; CODE XREF: sub_403B8B+6A↑j
.text:00403C07                 mov     ecx, [ebp+var_4]
.text:00403C0A                 xor     eax, eax
.text:00403C0C                 test    edi, edi
.text:00403C0E                 pop     edi
.text:00403C0F                 setns   al
.text:00403C12                 xor     ecx, ebp        ; StackCookie
.text:00403C14                 pop     esi
.text:00403C15                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00403C1A                 mov     esp, ebp
.text:00403C1C                 pop     ebp
.text:00403C1D                 retn
.text:00403C1D sub_403B8B      endp
.text:00403C1D
.text:00403C1D ; ---------------------------------------------------------------------------
.text:00403C1E                 align 10h
.text:00403C20
.text:00403C20 ; =============== S U B R O U T I N E =======================================
.text:00403C20
.text:00403C20 ; Attributes: thunk
.text:00403C20
.text:00403C20 sub_403C20      proc near               ; DATA XREF: .text:00401044↑o
.text:00403C20                                         ; .text:00401C74↑o ...
.text:00403C20                 jmp     sub_403B8B
.text:00403C20 sub_403C20      endp
.text:00403C20
.text:00403C20 ; ---------------------------------------------------------------------------
.text:00403C25                 align 10h
.text:00403C30
.text:00403C30 ; =============== S U B R O U T I N E =======================================
.text:00403C30
.text:00403C30
.text:00403C30 sub_403C30      proc near               ; DATA XREF: .text:off_401060↑o
.text:00403C30                                         ; .text:004028A4↑o
.text:00403C30                 mov     eax, ds:?messageMap@CDialog@@1UAFX_MSGMAP@@B ; AFX_MSGMAP const CDialog::messageMap
.text:00403C35                 retn
.text:00403C35 sub_403C30      endp
.text:00403C35
.text:00403C35 ; ---------------------------------------------------------------------------
.text:00403C36                 align 10h
.text:00403C40
.text:00403C40 ; =============== S U B R O U T I N E =======================================
.text:00403C40
.text:00403C40
.text:00403C40 sub_403C40      proc near               ; DATA XREF: .text:0040109C↑o
.text:00403C40                                         ; .text:004028A8↑o
.text:00403C40                 mov     eax, offset off_401060
.text:00403C45                 retn
.text:00403C45 sub_403C40      endp
.text:00403C45
.text:00403C45 ; ---------------------------------------------------------------------------
.text:00403C46                 align 10h
.text:00403C50
.text:00403C50 ; =============== S U B R O U T I N E =======================================
.text:00403C50
.text:00403C50
.text:00403C50 sub_403C50      proc near               ; DATA XREF: .text:00401100↑o
.text:00403C50                                         ; .text:004012FC↑o ...
.text:00403C50                 push    1               ; bEnable
.text:00403C52                 push    dword ptr [ecx+20h] ; hWnd
.text:00403C55                 call    ds:EnableWindow
.text:00403C5B                 retn
.text:00403C5B sub_403C50      endp
.text:00403C5B
.text:00403C5B ; ---------------------------------------------------------------------------
.text:00403C5C                 align 10h
.text:00403C60
.text:00403C60 ; =============== S U B R O U T I N E =======================================
.text:00403C60
.text:00403C60
.text:00403C60 sub_403C60      proc near               ; DATA XREF: .text:004010FC↑o
.text:00403C60                                         ; .text:004012F8↑o ...
.text:00403C60                 push    0               ; bEnable
.text:00403C62                 push    dword ptr [ecx+20h] ; hWnd
.text:00403C65                 call    ds:EnableWindow
.text:00403C6B                 retn
.text:00403C6B sub_403C60      endp
.text:00403C6B
.text:00403C6B ; ---------------------------------------------------------------------------
.text:00403C6C                 align 10h
.text:00403C70
.text:00403C70 ; =============== S U B R O U T I N E =======================================
.text:00403C70
.text:00403C70
.text:00403C70 nullsub_1       proc near               ; DATA XREF: .text:00401074↑o
.text:00403C70                                         ; .text:0040107C↑o ...
.text:00403C70                 retn    4
.text:00403C70 nullsub_1       endp
.text:00403C70
.text:00403C70 ; ---------------------------------------------------------------------------
.text:00403C73                 align 10h
.text:00403C80
.text:00403C80 ; =============== S U B R O U T I N E =======================================
.text:00403C80
.text:00403C80
.text:00403C80 ; __fastcall _guard_check_icall_nop(x)
.text:00403C80 @_guard_check_icall_nop@4 proc near     ; CODE XREF: sub_403B8B+53↑p
.text:00403C80                                         ; sub_403B8B+74↑p ...
.text:00403C80                 retn
.text:00403C80 @_guard_check_icall_nop@4 endp
.text:00403C80
.text:00403C81 ; ---------------------------------------------------------------------------
.text:00403C81 ; START OF FUNCTION CHUNK FOR sub_403DC0
.text:00403C81 ;   ADDITIONAL PARENT FUNCTION sub_40CD8D
.text:00403C81
.text:00403C81 loc_403C81:                             ; CODE XREF: sub_403DC0+CC90↓j
.text:00403C81                                         ; sub_40CD8D+4780↓j ...
.text:00403C81 ; __unwind { // loc_411532
.text:00403C81                 mov     edi, edi
.text:00403C83                 push    ecx
.text:00403C84                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00403C8A                 pop     ecx
.text:00403C8B                 retn
.text:00403C8B ; } // starts at 403C81
.text:00403C8B ; END OF FUNCTION CHUNK FOR sub_403DC0
.text:00403C8B ; ---------------------------------------------------------------------------
.text:00403C8C                 align 10h
.text:00403C90
.text:00403C90 ; =============== S U B R O U T I N E =======================================
.text:00403C90
.text:00403C90 ; Attributes: bp-based frame
.text:00403C90
.text:00403C90 sub_403C90      proc near               ; CODE XREF: sub_40AE70+1B↓p
.text:00403C90                                         ; DATA XREF: .text:0040124C↑o ...
.text:00403C90
.text:00403C90 var_20          = dword ptr -20h
.text:00403C90 var_1C          = dword ptr -1Ch
.text:00403C90 var_18          = dword ptr -18h
.text:00403C90 Data            = byte ptr -14h
.text:00403C90 var_4           = dword ptr -4
.text:00403C90 arg_4           = dword ptr  0Ch
.text:00403C90
.text:00403C90 ; FUNCTION CHUNK AT .text:00403DA1 SIZE 00000017 BYTES
.text:00403C90 ; FUNCTION CHUNK AT .text:00410A20 SIZE 0000002D BYTES
.text:00403C90
.text:00403C90 ; __unwind { // loc_410A28
.text:00403C90                 push    14h
.text:00403C92                 mov     eax, offset loc_410A28
.text:00403C97                 call    __EH_prolog3_GS
.text:00403C9C                 mov     esi, ecx
.text:00403C9E                 mov     dword ptr [ebp+Data], esi
.text:00403CA1                 xor     edi, edi
.text:00403CA3                 mov     [ebp+var_20], edi
.text:00403CA6                 mov     [ebp+var_1C], edi
.text:00403CA9                 mov     [ebp+var_18], edi
.text:00403CAC                 mov     edx, 20019h
.text:00403CB1 ;   try {
.text:00403CB1                 mov     [ebp+var_4], edi
.text:00403CB4                 mov     ecx, offset aState ; "state"
.text:00403CB9                 call    sub_40D6CA
.text:00403CBE                 mov     ebx, eax
.text:00403CC0                 mov     [ebp+var_20], ebx
.text:00403CC3                 test    ebx, ebx
.text:00403CC5                 jz      short loc_403CF4
.text:00403CC7                 mov     eax, [esi]
.text:00403CC9                 mov     esi, [eax+14h]
.text:00403CCC                 mov     ecx, esi
.text:00403CCE                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00403CD4                 mov     ecx, dword ptr [ebp+Data]
.text:00403CD7                 call    esi
.text:00403CD9                 push    eax             ; lpValueName
.text:00403CDA                 lea     eax, [ebp+Data]
.text:00403CDD                 push    eax             ; lpData
.text:00403CDE                 lea     ecx, [ebp+var_20]
.text:00403CE1                 call    sub_403D68
.text:00403CE6                 test    eax, eax
.text:00403CE8                 jnz     short loc_403CED
.text:00403CEA                 mov     edi, dword ptr [ebp+Data]
.text:00403CED
.text:00403CED loc_403CED:                             ; CODE XREF: sub_403C90+58↑j
.text:00403CED                 push    ebx             ; hKey
.text:00403CEE                 call    ds:RegCloseKey
.text:00403CF4
.text:00403CF4 loc_403CF4:                             ; CODE XREF: sub_403C90+35↑j
.text:00403CF4                 mov     eax, edi
.text:00403CF6                 call    __EH_epilog3_GS
.text:00403CFB                 retn
.text:00403CFB ;   } // starts at 403CB1
.text:00403CFB ; } // starts at 403C90
.text:00403CFB sub_403C90      endp
.text:00403CFB
.text:00403CFC
.text:00403CFC ; =============== S U B R O U T I N E =======================================
.text:00403CFC
.text:00403CFC ; Attributes: bp-based frame
.text:00403CFC
.text:00403CFC sub_403CFC      proc near               ; CODE XREF: sub_405800+4E↓p
.text:00403CFC                                         ; sub_405870+61↓p ...
.text:00403CFC
.text:00403CFC var_20          = dword ptr -20h
.text:00403CFC var_1C          = dword ptr -1Ch
.text:00403CFC var_18          = dword ptr -18h
.text:00403CFC Data            = byte ptr -14h
.text:00403CFC var_4           = dword ptr -4
.text:00403CFC arg_0           = dword ptr  8
.text:00403CFC
.text:00403CFC ; FUNCTION CHUNK AT .text:00410A20 SIZE 0000002D BYTES
.text:00403CFC
.text:00403CFC ; __unwind { // loc_410A28
.text:00403CFC                 push    14h
.text:00403CFE                 mov     eax, offset loc_410A28
.text:00403D03                 call    __EH_prolog3_GS
.text:00403D08                 mov     ebx, ecx
.text:00403D0A                 xor     eax, eax
.text:00403D0C                 mov     [ebp+var_20], eax
.text:00403D0F                 mov     [ebp+var_1C], eax
.text:00403D12                 mov     [ebp+var_18], eax
.text:00403D15                 mov     edx, 0F003Fh
.text:00403D1A ;   try {
.text:00403D1A                 mov     [ebp+var_4], eax
.text:00403D1D                 mov     ecx, offset aState ; "state"
.text:00403D22                 call    sub_40D6CA
.text:00403D27                 mov     edi, eax
.text:00403D29                 mov     [ebp+var_20], edi
.text:00403D2C                 test    edi, edi
.text:00403D2E                 jz      short loc_403D60
.text:00403D30                 mov     ecx, [ebx]
.text:00403D32                 mov     esi, [ecx+14h]
.text:00403D35                 mov     ecx, esi
.text:00403D37                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00403D3D                 mov     ecx, ebx
.text:00403D3F                 call    esi
.text:00403D41                 mov     ecx, [ebp+arg_0]
.text:00403D44                 push    4               ; cbData
.text:00403D46                 mov     dword ptr [ebp+Data], ecx
.text:00403D49                 lea     ecx, [ebp+Data]
.text:00403D4C                 push    ecx             ; lpData
.text:00403D4D                 push    4               ; dwType
.text:00403D4F                 push    0               ; Reserved
.text:00403D51                 push    eax             ; lpValueName
.text:00403D52                 push    edi             ; hKey
.text:00403D53                 call    ds:RegSetValueExW
.text:00403D59                 push    edi             ; hKey
.text:00403D5A                 call    ds:RegCloseKey
.text:00403D60
.text:00403D60 loc_403D60:                             ; CODE XREF: sub_403CFC+32↑j
.text:00403D60                 call    __EH_epilog3_GS
.text:00403D65                 retn    4
.text:00403D65 ;   } // starts at 403D1A
.text:00403D65 ; } // starts at 403CFC
.text:00403D65 sub_403CFC      endp ; sp-analysis failed
.text:00403D65
.text:00403D68
.text:00403D68 ; =============== S U B R O U T I N E =======================================
.text:00403D68
.text:00403D68 ; Attributes: bp-based frame
.text:00403D68
.text:00403D68 ; int __stdcall sub_403D68(LPBYTE lpData, LPCWSTR lpValueName)
.text:00403D68 sub_403D68      proc near               ; CODE XREF: sub_403C90+51↑p
.text:00403D68                                         ; sub_4040E0+1BD↓p ...
.text:00403D68
.text:00403D68 cbData          = dword ptr -8
.text:00403D68 Type            = dword ptr -4
.text:00403D68 lpData          = dword ptr  8
.text:00403D68 lpValueName     = dword ptr  0Ch
.text:00403D68
.text:00403D68                 mov     edi, edi
.text:00403D6A                 push    ebp
.text:00403D6B                 mov     ebp, esp
.text:00403D6D                 push    ecx
.text:00403D6E                 push    ecx
.text:00403D6F                 and     [ebp+Type], 0
.text:00403D73                 lea     eax, [ebp+cbData]
.text:00403D76                 push    eax             ; lpcbData
.text:00403D77                 push    [ebp+lpData]    ; lpData
.text:00403D7A                 lea     eax, [ebp+Type]
.text:00403D7D                 mov     [ebp+cbData], 4
.text:00403D84                 push    eax             ; lpType
.text:00403D85                 push    0               ; lpReserved
.text:00403D87                 push    [ebp+lpValueName] ; lpValueName
.text:00403D8A                 push    dword ptr [ecx] ; hKey
.text:00403D8C                 call    ds:RegQueryValueExW
.text:00403D92                 cmp     [ebp+Type], 4
.text:00403D96                 jz      short loc_403D9B
.text:00403D98                 push    0Dh
.text:00403D9A                 pop     eax
.text:00403D9B
.text:00403D9B loc_403D9B:                             ; CODE XREF: sub_403D68+2E↑j
.text:00403D9B                 mov     esp, ebp
.text:00403D9D                 pop     ebp
.text:00403D9E                 retn    8
.text:00403D9E sub_403D68      endp
.text:00403D9E
.text:00403DA1 ; ---------------------------------------------------------------------------
.text:00403DA1 ; START OF FUNCTION CHUNK FOR sub_403C90
.text:00403DA1 ;   ADDITIONAL PARENT FUNCTION sub_4040E0
.text:00403DA1 ;   ADDITIONAL PARENT FUNCTION sub_4048DF
.text:00403DA1 ;   ADDITIONAL PARENT FUNCTION sub_405870
.text:00403DA1 ;   ADDITIONAL PARENT FUNCTION sub_405AC6
.text:00403DA1 ;   ADDITIONAL PARENT FUNCTION sub_406B79
.text:00403DA1
.text:00403DA1 loc_403DA1:                             ; CODE XREF: sub_403C90+CD93↓j
.text:00403DA1                                         ; sub_4040E0+CA3F↓j ...
.text:00403DA1 ; __unwind { // loc_410EDD
.text:00403DA1                 mov     edi, edi
.text:00403DA3                 push    esi
.text:00403DA4                 mov     esi, ecx
.text:00403DA6                 cmp     dword ptr [esi], 0
.text:00403DA9                 jz      short loc_403DB6
.text:00403DAB                 push    dword ptr [esi] ; hKey
.text:00403DAD                 call    ds:RegCloseKey
.text:00403DB3                 and     dword ptr [esi], 0
.text:00403DB6
.text:00403DB6 loc_403DB6:                             ; CODE XREF: sub_403C90+119↑j
.text:00403DB6                 pop     esi
.text:00403DB7                 retn
.text:00403DB7 ; } // starts at 403DA1
.text:00403DB7 ; END OF FUNCTION CHUNK FOR sub_403C90
.text:00403DB7 ; ---------------------------------------------------------------------------
.text:00403DB8                 align 10h
.text:00403DC0
.text:00403DC0 ; =============== S U B R O U T I N E =======================================
.text:00403DC0
.text:00403DC0 ; Attributes: bp-based frame
.text:00403DC0
.text:00403DC0 sub_403DC0      proc near               ; DATA XREF: .text:00401390↑o
.text:00403DC0                                         ; .text:004028C0↑o
.text:00403DC0
.text:00403DC0 var_10          = dword ptr -10h
.text:00403DC0 var_4           = dword ptr -4
.text:00403DC0 arg_4           = dword ptr  0Ch
.text:00403DC0
.text:00403DC0 ; FUNCTION CHUNK AT .text:00403C81 SIZE 0000000B BYTES
.text:00403DC0 ; FUNCTION CHUNK AT .text:00410A4D SIZE 00000023 BYTES
.text:00403DC0
.text:00403DC0 ; __unwind { // loc_410A55
.text:00403DC0                 push    4
.text:00403DC2                 mov     eax, offset loc_410A55
.text:00403DC7                 call    __EH_prolog3
.text:00403DCC                 push    0FCh ; 'ü'
.text:00403DD1                 call    ds:__imp_??2@YAPAXI@Z ; operator new(uint)
.text:00403DD7                 pop     ecx
.text:00403DD8                 mov     ecx, eax
.text:00403DDA                 mov     [ebp+var_10], ecx
.text:00403DDD                 xor     eax, eax
.text:00403DDF ;   try {
.text:00403DDF                 mov     [ebp+var_4], eax
.text:00403DE2                 test    ecx, ecx
.text:00403DE4                 jz      short loc_403DEB
.text:00403DE6                 call    sub_403F0B
.text:00403DEB
.text:00403DEB loc_403DEB:                             ; CODE XREF: sub_403DC0+24↑j
.text:00403DEB                 call    __EH_epilog3
.text:00403DF0                 retn
.text:00403DF0 ;   } // starts at 403DDF
.text:00403DF0 ; } // starts at 403DC0
.text:00403DF0 sub_403DC0      endp
.text:00403DF0
.text:00403DF0 ; ---------------------------------------------------------------------------
.text:00403DF1                 align 10h
.text:00403E00
.text:00403E00 ; =============== S U B R O U T I N E =======================================
.text:00403E00
.text:00403E00
.text:00403E00 sub_403E00      proc near               ; DATA XREF: .text:00401394↑o
.text:00403E00                                         ; .text:00401538↑o ...
.text:00403E00                 mov     eax, ds:?classCPropertyPage@CPropertyPage@@2UCRuntimeClass@@B ; CRuntimeClass const CPropertyPage::classCPropertyPage
.text:00403E05                 retn
.text:00403E05 sub_403E00      endp
.text:00403E05
.text:00403E05 ; ---------------------------------------------------------------------------
.text:00403E06                 align 10h
.text:00403E10
.text:00403E10 ; =============== S U B R O U T I N E =======================================
.text:00403E10
.text:00403E10
.text:00403E10 sub_403E10      proc near               ; DATA XREF: .text:const CPageServices::`vftable'↑o
.text:00403E10                                         ; .text:004028C8↑o
.text:00403E10                 mov     eax, offset off_401384 ; "CPageServices"
.text:00403E15                 retn
.text:00403E15 sub_403E10      endp
.text:00403E15
.text:00403E16
.text:00403E16 ; =============== S U B R O U T I N E =======================================
.text:00403E16
.text:00403E16 ; Attributes: bp-based frame
.text:00403E16
.text:00403E16 sub_403E16      proc near               ; CODE XREF: sub_4048DF+219↓p
.text:00403E16                                         ; sub_405F7C+46↓p
.text:00403E16
.text:00403E16 Date            = SYSTEMTIME ptr -14h
.text:00403E16 var_4           = dword ptr -4
.text:00403E16 arg_0           = byte ptr  8
.text:00403E16
.text:00403E16                 mov     edi, edi
.text:00403E18                 push    ebp
.text:00403E19                 mov     ebp, esp
.text:00403E1B                 sub     esp, 14h
.text:00403E1E                 mov     eax, ___security_cookie
.text:00403E23                 xor     eax, ebp
.text:00403E25                 mov     [ebp+var_4], eax
.text:00403E28                 push    ebx
.text:00403E29                 push    esi
.text:00403E2A                 push    edi
.text:00403E2B                 push    offset Source
.text:00403E30                 mov     ebx, ecx
.text:00403E32                 call    ds:??4CString@@QAEABV0@PBG@Z ; CString::operator=(ushort const *)
.text:00403E38                 xor     eax, eax
.text:00403E3A                 lea     edi, [ebp+Date]
.text:00403E3D                 stosd
.text:00403E3E                 push    100h            ; Size
.text:00403E43                 stosd
.text:00403E44                 stosd
.text:00403E45                 stosd
.text:00403E46                 call    ds:malloc
.text:00403E4C                 mov     edi, eax
.text:00403E4E                 pop     ecx
.text:00403E4F                 test    edi, edi
.text:00403E51                 jnz     short loc_403E5D
.text:00403E53                 mov     esi, 8007000Eh
.text:00403E58                 jmp     loc_403EF6
.text:00403E5D ; ---------------------------------------------------------------------------
.text:00403E5D
.text:00403E5D loc_403E5D:                             ; CODE XREF: sub_403E16+3B↑j
.text:00403E5D                 lea     eax, [ebp+Date]
.text:00403E60                 push    eax
.text:00403E61                 lea     ecx, [ebp+arg_0]
.text:00403E64                 call    ds:?GetAsSystemTime@CTime@@QBEHAAU_SYSTEMTIME@@@Z ; CTime::GetAsSystemTime(_SYSTEMTIME &)
.text:00403E6A                 mov     esi, eax
.text:00403E6C                 neg     esi
.text:00403E6E                 sbb     esi, esi
.text:00403E70                 and     esi, 7FFFBFFBh
.text:00403E76                 add     esi, 80004005h
.text:00403E7C                 js      short loc_403EEE
.text:00403E7E                 push    80h ; '€'       ; cchDate
.text:00403E83                 push    edi             ; lpDateStr
.text:00403E84                 push    0               ; lpFormat
.text:00403E86                 lea     eax, [ebp+Date]
.text:00403E89                 push    eax             ; lpDate
.text:00403E8A                 push    1               ; dwFlags
.text:00403E8C                 push    400h            ; Locale
.text:00403E91                 call    ds:GetDateFormatW
.text:00403E97                 test    eax, eax
.text:00403E99                 jnz     short loc_403EB2
.text:00403E9B
.text:00403E9B loc_403E9B:                             ; CODE XREF: sub_403E16+CD↓j
.text:00403E9B                 call    ds:GetLastError
.text:00403EA1                 mov     esi, eax
.text:00403EA3                 test    esi, esi
.text:00403EA5                 jle     short loc_403EEE
.text:00403EA7                 movzx   esi, si
.text:00403EAA                 or      esi, 80070000h
.text:00403EB0                 jmp     short loc_403EEE
.text:00403EB2 ; ---------------------------------------------------------------------------
.text:00403EB2
.text:00403EB2 loc_403EB2:                             ; CODE XREF: sub_403E16+83↑j
.text:00403EB2                 push    edi
.text:00403EB3                 mov     ecx, ebx
.text:00403EB5                 call    ds:??4CString@@QAEABV0@PBG@Z ; CString::operator=(ushort const *)
.text:00403EBB                 push    offset asc_402FC4 ; " "
.text:00403EC0                 mov     ecx, ebx
.text:00403EC2                 call    ds:??YCString@@QAEABV0@PBG@Z ; CString::operator+=(ushort const *)
.text:00403EC8                 push    80h ; '€'       ; cchTime
.text:00403ECD                 push    edi             ; lpTimeStr
.text:00403ECE                 push    0               ; lpFormat
.text:00403ED0                 lea     eax, [ebp+Date]
.text:00403ED3                 push    eax             ; lpTime
.text:00403ED4                 push    0               ; dwFlags
.text:00403ED6                 push    400h            ; Locale
.text:00403EDB                 call    ds:GetTimeFormatW
.text:00403EE1                 test    eax, eax
.text:00403EE3                 jz      short loc_403E9B
.text:00403EE5                 push    edi
.text:00403EE6                 mov     ecx, ebx
.text:00403EE8                 call    ds:??YCString@@QAEABV0@PBG@Z ; CString::operator+=(ushort const *)
.text:00403EEE
.text:00403EEE loc_403EEE:                             ; CODE XREF: sub_403E16+66↑j
.text:00403EEE                                         ; sub_403E16+8F↑j ...
.text:00403EEE                 push    edi             ; Block
.text:00403EEF                 call    ds:__imp_free
.text:00403EF5                 pop     ecx
.text:00403EF6
.text:00403EF6 loc_403EF6:                             ; CODE XREF: sub_403E16+42↑j
.text:00403EF6                 mov     ecx, [ebp+var_4]
.text:00403EF9                 mov     eax, esi
.text:00403EFB                 pop     edi
.text:00403EFC                 pop     esi
.text:00403EFD                 xor     ecx, ebp        ; StackCookie
.text:00403EFF                 pop     ebx
.text:00403F00                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00403F05                 mov     esp, ebp
.text:00403F07                 pop     ebp
.text:00403F08                 retn    4
.text:00403F08 sub_403E16      endp
.text:00403F08
.text:00403F0B
.text:00403F0B ; =============== S U B R O U T I N E =======================================
.text:00403F0B
.text:00403F0B ; Attributes: bp-based frame
.text:00403F0B
.text:00403F0B sub_403F0B      proc near               ; CODE XREF: sub_403DC0+26↑p
.text:00403F0B                                         ; sub_40CD8D+54↓p
.text:00403F0B
.text:00403F0B var_10          = dword ptr -10h
.text:00403F0B var_4           = dword ptr -4
.text:00403F0B arg_4           = dword ptr  0Ch
.text:00403F0B
.text:00403F0B ; FUNCTION CHUNK AT .text:00406144 SIZE 00000022 BYTES
.text:00403F0B ; FUNCTION CHUNK AT .text:00406DF6 SIZE 00000007 BYTES
.text:00403F0B ; FUNCTION CHUNK AT .text:00410A70 SIZE 0000004F BYTES
.text:00403F0B
.text:00403F0B ; __unwind { // loc_410AA4
.text:00403F0B                 push    4
.text:00403F0D                 mov     eax, offset loc_410AA4
.text:00403F12                 call    __EH_prolog3
.text:00403F17                 mov     esi, ecx
.text:00403F19                 mov     [ebp+var_10], esi
.text:00403F1C                 xor     edi, edi
.text:00403F1E                 push    edi
.text:00403F1F                 push    0CBh ; 'Ë'
.text:00403F24                 call    ds:??0CPropertyPage@@QAE@II@Z ; CPropertyPage::CPropertyPage(uint,uint)
.text:00403F2A ;   try {
.text:00403F2A                 mov     [ebp+var_4], edi
.text:00403F2D                 mov     dword ptr [esi+90h], offset ??_7CPageBase@@6B@ ; const CPageBase::`vftable'
.text:00403F37                 mov     [esi+94h], edi
.text:00403F3D                 mov     [esi+98h], edi
.text:00403F3D ;   } // starts at 403F2A
.text:00403F43 ;   try {
.text:00403F43                 mov     byte ptr [ebp+var_4], 1
.text:00403F47                 lea     ecx, [esi+0B8h]
.text:00403F4D                 mov     dword ptr [esi], offset ??_7CPageServices@@6B@ ; const CPageServices::`vftable'
.text:00403F53                 mov     dword ptr [esi+90h], offset ??_7CPageServices@@6B@_0 ; const CPageServices::`vftable'
.text:00403F5D                 push    0Ah
.text:00403F5F                 mov     [esi+0A0h], edi
.text:00403F65                 call    ds:??0CStringList@@QAE@H@Z ; CStringList::CStringList(int)
.text:00403F6B                 mov     [esi+0D8h], edi
.text:00403F71                 mov     [esi+0DCh], edi
.text:00403F77                 mov     [esi+0E0h], edi
.text:00403F7D                 mov     [esi+0F0h], edi
.text:00403F83                 mov     eax, esi
.text:00403F85                 mov     [esi+0F4h], edi
.text:00403F8B                 mov     [esi+0F8h], edi
.text:00403F91                 mov     [esi+9Ch], edi
.text:00403F97                 mov     [esi+0A0h], edi
.text:00403F9D                 or      dword ptr [esi+0E4h], 0FFFFFFFFh
.text:00403FA4                 mov     [esi+0A4h], edi
.text:00403FAA                 mov     [esi+0A8h], edi
.text:00403FB0                 mov     [esi+0ACh], edi
.text:00403FB6                 mov     [esi+0B0h], edi
.text:00403FBC                 mov     dword ptr [esi+0B4h], 1
.text:00403FC6                 mov     [esi+0E8h], edi
.text:00403FCC                 call    __EH_epilog3
.text:00403FD1                 retn
.text:00403FD1 ;   } // starts at 403F43
.text:00403FD1 ; } // starts at 403F0B
.text:00403FD1 sub_403F0B      endp
.text:00403FD1
.text:00403FD1 ; ---------------------------------------------------------------------------
.text:00403FD2                 align 10h
.text:00403FE0
.text:00403FE0 ; =============== S U B R O U T I N E =======================================
.text:00403FE0
.text:00403FE0 ; Attributes: bp-based frame info_from_lumina
.text:00403FE0
.text:00403FE0 ; void *__thiscall D3DX11Core::CBuffer::`scalar deleting destructor'(D3DX11Core::CBuffer *__hidden this, unsigned int)
.text:00403FE0 ??_GCBuffer@D3DX11Core@@UAEPAXI@Z proc near
.text:00403FE0                                         ; CODE XREF: sub_406500+6↓j
.text:00403FE0                                         ; DATA XREF: .text:0040126C↑o ...
.text:00403FE0
.text:00403FE0 arg_0           = byte ptr  8
.text:00403FE0
.text:00403FE0                 mov     edi, edi
.text:00403FE2                 push    ebp
.text:00403FE3                 mov     ebp, esp
.text:00403FE5                 push    esi
.text:00403FE6                 mov     esi, ecx
.text:00403FE8                 call    sub_404002
.text:00403FED                 test    [ebp+arg_0], 1
.text:00403FF1                 jz      short loc_403FFB
.text:00403FF3                 push    esi
.text:00403FF4                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00403FFA                 pop     ecx
.text:00403FFB
.text:00403FFB loc_403FFB:                             ; CODE XREF: D3DX11Core::CBuffer::`scalar deleting destructor'(uint)+11↑j
.text:00403FFB                 mov     eax, esi
.text:00403FFD                 pop     esi
.text:00403FFE                 pop     ebp
.text:00403FFF                 retn    4
.text:00403FFF ??_GCBuffer@D3DX11Core@@UAEPAXI@Z endp
.text:00403FFF
.text:00404002
.text:00404002 ; =============== S U B R O U T I N E =======================================
.text:00404002
.text:00404002 ; Attributes: bp-based frame
.text:00404002
.text:00404002 sub_404002      proc near               ; CODE XREF: D3DX11Core::CBuffer::`scalar deleting destructor'(uint)+8↑p
.text:00404002
.text:00404002 var_10          = dword ptr -10h
.text:00404002 var_4           = dword ptr -4
.text:00404002 arg_4           = dword ptr  0Ch
.text:00404002
.text:00404002 ; FUNCTION CHUNK AT .text:00406144 SIZE 00000022 BYTES
.text:00404002 ; FUNCTION CHUNK AT .text:00406DF6 SIZE 00000007 BYTES
.text:00404002 ; FUNCTION CHUNK AT .text:00410ABF SIZE 0000005D BYTES
.text:00404002
.text:00404002 ; __unwind { // loc_410B01
.text:00404002                 push    4
.text:00404004                 mov     eax, offset loc_410B01
.text:00404009                 call    __EH_prolog3
.text:0040400E                 mov     esi, ecx
.text:00404010                 mov     [ebp+var_10], esi
.text:00404013                 mov     dword ptr [esi], offset ??_7CPageServices@@6B@ ; const CPageServices::`vftable'
.text:00404019                 mov     dword ptr [esi+90h], offset ??_7CPageServices@@6B@_0 ; const CPageServices::`vftable'
.text:00404023 ;   try {
.text:00404023                 mov     [ebp+var_4], 4
.text:0040402A                 mov     eax, [esi+0A8h]
.text:00404030                 test    eax, eax
.text:00404032                 jz      short loc_40403B
.text:00404034                 push    eax             ; Block
.text:00404035                 call    free
.text:0040403A                 pop     ecx
.text:0040403B
.text:0040403B loc_40403B:                             ; CODE XREF: sub_404002+30↑j
.text:0040403B                 mov     eax, [esi+0F0h]
.text:00404041                 test    eax, eax
.text:00404043                 jz      short loc_40404D
.text:00404045                 push    eax
.text:00404046                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:0040404C                 pop     ecx
.text:0040404D
.text:0040404D loc_40404D:                             ; CODE XREF: sub_404002+41↑j
.text:0040404D                 xor     edi, edi
.text:0040404F                 mov     [esi+0F0h], edi
.text:00404055                 mov     [esi+0F4h], edi
.text:0040405B                 mov     [esi+0F8h], edi
.text:00404061                 mov     eax, [esi+0D8h]
.text:00404067                 test    eax, eax
.text:00404069                 jz      short loc_404073
.text:0040406B                 push    eax
.text:0040406C                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00404072                 pop     ecx
.text:00404073
.text:00404073 loc_404073:                             ; CODE XREF: sub_404002+67↑j
.text:00404073                 lea     ecx, [esi+0B8h]
.text:00404079                 mov     [esi+0D8h], edi
.text:0040407F                 mov     [esi+0DCh], edi
.text:00404085                 mov     [esi+0E0h], edi
.text:00404085 ;   } // starts at 404023
.text:0040408B ;   try {
.text:0040408B                 mov     byte ptr [ebp+var_4], 1
.text:0040408F                 call    ds:??1CStringList@@UAE@XZ ; CStringList::~CStringList(void)
.text:0040408F ;   } // starts at 40408B
.text:00404095                 or      [ebp+var_4], 0FFFFFFFFh
.text:00404099                 mov     ecx, esi
.text:0040409B                 mov     dword ptr [esi+90h], offset ??_7CPageBase@@6B@ ; const CPageBase::`vftable'
.text:004040A5                 call    ds:??1CPropertyPage@@UAE@XZ ; CPropertyPage::~CPropertyPage(void)
.text:004040AB                 call    __EH_epilog3
.text:004040B0                 retn
.text:004040B0 ; } // starts at 404002
.text:004040B0 sub_404002      endp
.text:004040B0
.text:004040B0 ; ---------------------------------------------------------------------------
.text:004040B1                 align 10h
.text:004040C0
.text:004040C0 ; =============== S U B R O U T I N E =======================================
.text:004040C0
.text:004040C0
.text:004040C0 sub_4040C0      proc near               ; DATA XREF: .text:off_401238↑o
.text:004040C0                                         ; .text:off_401400↑o ...
.text:004040C0                 mov     eax, ds:?messageMap@CPropertyPage@@1UAFX_MSGMAP@@B ; AFX_MSGMAP const CPropertyPage::messageMap
.text:004040C5                 retn
.text:004040C5 sub_4040C0      endp
.text:004040C5
.text:004040C5 ; ---------------------------------------------------------------------------
.text:004040C6                 align 10h
.text:004040D0
.text:004040D0 ; =============== S U B R O U T I N E =======================================
.text:004040D0
.text:004040D0
.text:004040D0 sub_4040D0      proc near               ; DATA XREF: .text:00401298↑o
.text:004040D0                                         ; .text:004028D4↑o
.text:004040D0                 mov     eax, offset off_401238
.text:004040D5                 retn
.text:004040D5 sub_4040D0      endp
.text:004040D5
.text:004040D5 ; ---------------------------------------------------------------------------
.text:004040D6                 align 10h
.text:004040E0
.text:004040E0 ; =============== S U B R O U T I N E =======================================
.text:004040E0
.text:004040E0 ; Attributes: bp-based frame
.text:004040E0
.text:004040E0 sub_4040E0      proc near               ; DATA XREF: .text:0040132C↑o
.text:004040E0                                         ; .text:004028D8↑o
.text:004040E0
.text:004040E0 lParam          = dword ptr -90h
.text:004040E0 var_88          = dword ptr -88h
.text:004040E0 var_84          = dword ptr -84h
.text:004040E0 Data            = byte ptr -64h
.text:004040E0 var_60          = dword ptr -60h
.text:004040E0 var_5C          = dword ptr -5Ch
.text:004040E0 var_58          = dword ptr -58h
.text:004040E0 var_54          = dword ptr -54h
.text:004040E0 var_50          = dword ptr -50h
.text:004040E0 var_4C          = dword ptr -4Ch
.text:004040E0 Rect            = tagRECT ptr -48h
.text:004040E0 var_38          = dword ptr -38h
.text:004040E0 var_34          = dword ptr -34h
.text:004040E0 var_30          = dword ptr -30h
.text:004040E0 var_2C          = dword ptr -2Ch
.text:004040E0 var_28          = dword ptr -28h
.text:004040E0 var_24          = dword ptr -24h
.text:004040E0 var_20          = dword ptr -20h
.text:004040E0 var_1C          = dword ptr -1Ch
.text:004040E0 var_18          = dword ptr -18h
.text:004040E0 var_14          = dword ptr -14h
.text:004040E0 var_4           = dword ptr -4
.text:004040E0 arg_4           = dword ptr  0Ch
.text:004040E0
.text:004040E0 ; FUNCTION CHUNK AT .text:00403DA1 SIZE 00000017 BYTES
.text:004040E0 ; FUNCTION CHUNK AT .text:00410B1C SIZE 00000039 BYTES
.text:004040E0
.text:004040E0 ; __unwind { // loc_410B2D
.text:004040E0                 push    84h
.text:004040E5                 mov     eax, offset loc_410B2D
.text:004040EA                 call    __EH_prolog3_GS
.text:004040EF                 mov     esi, ecx
.text:004040F1                 call    ds:__imp_?OnInitDialog@CDialog@@UAEHXZ ; CDialog::OnInitDialog(void)
.text:004040F7                 xor     ebx, ebx
.text:004040F9                 mov     [ebp+var_60], ebx
.text:004040FC                 mov     [ebp+var_5C], ebx
.text:004040FF                 mov     [ebp+var_58], ebx
.text:00404102                 lea     ecx, [ebp+var_50]
.text:00404105 ;   try {
.text:00404105                 mov     [ebp+var_4], ebx
.text:00404108                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040410E                 push    100h
.text:00404113                 mov     ecx, esi
.text:00404113 ;   } // starts at 404105
.text:00404115 ;   try {
.text:00404115                 mov     byte ptr [ebp+var_4], 1
.text:00404119                 call    ds:?GetDlgItem@CWnd@@QBEPAV1@H@Z ; CWnd::GetDlgItem(int)
.text:0040411F                 test    eax, eax
.text:00404121                 jz      loc_4042D4
.text:00404127                 mov     eax, [eax+20h]
.text:0040412A                 push    4024h           ; lParam
.text:0040412F                 push    ebx             ; wParam
.text:00404130                 push    1036h           ; Msg
.text:00404135                 push    eax             ; hWnd
.text:00404136                 mov     [esi+0A0h], eax
.text:0040413C                 call    ds:SendMessageW
.text:00404142                 lea     eax, [ebp+Rect]
.text:00404145                 mov     [ebp+var_34], 14h
.text:0040414C                 push    eax             ; lpRect
.text:0040414D                 push    dword ptr [esi+0A0h] ; hWnd
.text:00404153                 mov     edi, 140h
.text:00404158                 mov     [ebp+var_30], 73h ; 's'
.text:0040415F                 mov     [ebp+var_38], edi
.text:00404162                 mov     [ebp+var_2C], 0Ch
.text:00404169                 mov     [ebp+var_28], 72h ; 'r'
.text:00404170                 mov     [ebp+var_24], 1Eh
.text:00404177                 mov     [ebp+var_20], 71h ; 'q'
.text:0040417E                 mov     [ebp+var_1C], 26h ; '&'
.text:00404185                 mov     [ebp+var_18], ebx
.text:00404188                 mov     [ebp+var_14], ebx
.text:0040418B                 call    ds:GetClientRect
.text:00404191                 test    eax, eax
.text:00404193                 jz      loc_4042D4
.text:00404199                 lea     ecx, [ebp+Rect]
.text:0040419C                 call    ds:?NormalizeRect@CRect@@QAEXXZ ; CRect::NormalizeRect(void)
.text:004041A2                 mov     ebx, [ebp+Rect.right]
.text:004041A5                 sub     ebx, [ebp+Rect.left]
.text:004041A8                 push    2               ; nIndex
.text:004041AA                 call    ds:GetSystemMetrics
.text:004041B0                 sub     ebx, eax
.text:004041B2                 mov     dword ptr [esi+0A4h], 1
.text:004041BC                 mov     eax, dword_4137D8
.text:004041C1                 mov     [ebp+lParam], 6
.text:004041CB                 mov     [ebp+var_4C], eax
.text:004041CE                 test    eax, eax
.text:004041D0                 jz      loc_4042D2
.text:004041D6                 call    ds:__imp_?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ ; AfxGetModuleState(void)
.text:004041DC                 mov     ecx, [ebp+var_4C]
.text:004041DF                 and     [ebp+var_54], 0
.text:004041E3                 and     [ebp+var_4C], 0
.text:004041E7                 mov     [eax+0Ch], ecx
.text:004041EA
.text:004041EA loc_4041EA:                             ; CODE XREF: sub_4040E0+164↓j
.text:004041EA                 push    edi
.text:004041EB                 lea     ecx, [ebp+var_50]
.text:004041EE                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:004041F4                 test    eax, eax
.text:004041F6                 jle     short loc_404231
.text:004041F8                 mov     eax, [ebp+var_50]
.text:004041FB                 mov     [ebp+var_84], eax
.text:00404201                 mov     eax, [ebp+var_4C]
.text:00404204                 push    64h ; 'd'
.text:00404206                 pop     ecx
.text:00404207                 mov     eax, [ebp+eax+var_34]
.text:0040420B                 imul    eax, ebx
.text:0040420E                 cdq
.text:0040420F                 idiv    ecx
.text:00404211                 mov     [ebp+var_88], eax
.text:00404217                 lea     eax, [ebp+lParam]
.text:0040421D                 push    eax             ; lParam
.text:0040421E                 push    0               ; wParam
.text:00404220                 push    1061h           ; Msg
.text:00404225                 push    dword ptr [esi+0A0h] ; hWnd
.text:0040422B                 call    ds:SendMessageW
.text:00404231
.text:00404231 loc_404231:                             ; CODE XREF: sub_4040E0+116↑j
.text:00404231                 mov     eax, [ebp+var_54]
.text:00404234                 inc     eax
.text:00404235                 mov     [ebp+var_54], eax
.text:00404238                 shl     eax, 3
.text:0040423B                 mov     [ebp+var_4C], eax
.text:0040423E                 mov     edi, [ebp+eax+var_38]
.text:00404242                 test    edi, edi
.text:00404244                 jnz     short loc_4041EA
.text:00404246                 mov     ecx, esi
.text:00404248                 call    sub_406092
.text:0040424D                 mov     ecx, esi
.text:0040424F                 call    sub_404316
.text:00404254                 mov     ecx, esi
.text:00404256                 call    sub_4048DF
.text:0040425B                 xor     eax, eax
.text:0040425D                 xor     ebx, ebx
.text:0040425F                 cmp     [esi+0B0h], ebx
.text:00404265                 mov     ecx, esi
.text:00404267                 mov     [esi+0A4h], ebx
.text:0040426D                 setnz   al
.text:00404270                 push    eax
.text:00404271                 push    0FEh ; 'þ'
.text:00404276                 call    ds:?CheckDlgButton@CWnd@@QAEXHI@Z ; CWnd::CheckDlgButton(int,uint)
.text:0040427C                 mov     edx, 20019h
.text:00404281                 xor     ecx, ecx
.text:00404283                 call    sub_40D6CA
.text:00404288                 mov     edi, eax
.text:0040428A                 test    edi, edi
.text:0040428C                 jz      short loc_4042B8
.text:0040428E                 push    offset aHideessentials ; "HideEssentialServiceWarning"
.text:00404293                 lea     eax, [ebp+Data]
.text:00404296                 mov     [ebp+var_60], edi
.text:00404299                 push    eax             ; lpData
.text:0040429A                 lea     ecx, [ebp+var_60]
.text:0040429D                 call    sub_403D68
.text:004042A2                 neg     eax
.text:004042A4                 push    edi             ; hKey
.text:004042A5                 sbb     eax, eax
.text:004042A7                 neg     eax
.text:004042A9                 mov     [esi+0B4h], eax
.text:004042AF                 call    ds:RegCloseKey
.text:004042B5                 mov     [ebp+var_60], ebx
.text:004042B8
.text:004042B8 loc_4042B8:                             ; CODE XREF: sub_4040E0+1AC↑j
.text:004042B8                 or      dword ptr [esi+0E4h], 0FFFFFFFFh
.text:004042BF                 mov     ecx, esi
.text:004042C1                 call    sub_405978
.text:004042C6                 mov     dword ptr [esi+98h], 1
.text:004042D0                 jmp     short loc_4042E2
.text:004042D2 ; ---------------------------------------------------------------------------
.text:004042D2
.text:004042D2 loc_4042D2:                             ; CODE XREF: sub_4040E0+F0↑j
.text:004042D2                 xor     ebx, ebx
.text:004042D4
.text:004042D4 loc_4042D4:                             ; CODE XREF: sub_4040E0+41↑j
.text:004042D4                                         ; sub_4040E0+B3↑j
.text:004042D4                 mov     ecx, dword_4137C8
.text:004042DA                 push    2
.text:004042DC                 call    ds:?RemovePage@CPropertySheet@@QAEXH@Z ; CPropertySheet::RemovePage(int)
.text:004042E2
.text:004042E2 loc_4042E2:                             ; CODE XREF: sub_4040E0+1F0↑j
.text:004042E2                 lea     ecx, [ebp+var_50]
.text:004042E2 ;   } // starts at 404115
.text:004042E5 ;   try {
.text:004042E5                 mov     byte ptr [ebp+var_4], bl
.text:004042E8                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004042EE                 xor     eax, eax
.text:004042F0                 inc     eax
.text:004042F1                 call    __EH_epilog3_GS
.text:004042F6                 retn
.text:004042F6 ;   } // starts at 4042E5
.text:004042F6 ; } // starts at 4040E0
.text:004042F6 sub_4040E0      endp
.text:004042F6
.text:004042F6 ; ---------------------------------------------------------------------------
.text:004042F7                 align 10h
.text:00404300
.text:00404300 ; =============== S U B R O U T I N E =======================================
.text:00404300
.text:00404300
.text:00404300 sub_404300      proc near               ; DATA XREF: .text:0040118C↑o
.text:00404300                                         ; .text:004028DC↑o
.text:00404300                 mov     edi, edi
.text:00404302                 push    esi
.text:00404303                 mov     esi, ecx
.text:00404305                 call    ds:__imp_?OnDestroy@CWnd@@IAEXXZ ; CWnd::OnDestroy(void)
.text:0040430B                 push    0
.text:0040430D                 mov     ecx, esi
.text:0040430F                 call    sub_4047EB
.text:00404314                 pop     esi
.text:00404315                 retn
.text:00404315 sub_404300      endp
.text:00404315
.text:00404316
.text:00404316 ; =============== S U B R O U T I N E =======================================
.text:00404316
.text:00404316 ; Attributes: bp-based frame
.text:00404316
.text:00404316 sub_404316      proc near               ; CODE XREF: sub_4040E0+16F↑p
.text:00404316                                         ; sub_405620+38↓p
.text:00404316
.text:00404316 var_A0          = dword ptr -0A0h
.text:00404316 lParam          = dword ptr -9Ch
.text:00404316 var_98          = dword ptr -98h
.text:00404316 var_94          = dword ptr -94h
.text:00404316 var_88          = dword ptr -88h
.text:00404316 var_7C          = dword ptr -7Ch
.text:00404316 Block           = dword ptr -60h
.text:00404316 var_5C          = dword ptr -5Ch
.text:00404316 var_58          = dword ptr -58h
.text:00404316 var_54          = dword ptr -54h
.text:00404316 pcbBytesNeeded  = dword ptr -50h
.text:00404316 var_4C          = dword ptr -4Ch
.text:00404316 ServicesReturned= dword ptr -48h
.text:00404316 ResumeHandle    = dword ptr -44h
.text:00404316 var_40          = byte ptr -40h
.text:00404316 var_3C          = dword ptr -3Ch
.text:00404316 var_38          = dword ptr -38h
.text:00404316 var_34          = dword ptr -34h
.text:00404316 var_30          = byte ptr -30h
.text:00404316 var_2C          = dword ptr -2Ch
.text:00404316 var_28          = dword ptr -28h
.text:00404316 var_24          = dword ptr -24h
.text:00404316 var_20          = dword ptr -20h
.text:00404316 var_1C          = dword ptr -1Ch
.text:00404316 var_18          = dword ptr -18h
.text:00404316 var_14          = dword ptr -14h
.text:00404316 var_4           = dword ptr -4
.text:00404316 arg_4           = dword ptr  0Ch
.text:00404316
.text:00404316 ; FUNCTION CHUNK AT .text:00410B55 SIZE 00000099 BYTES
.text:00404316
.text:00404316 ; __unwind { // loc_410BC6
.text:00404316                 push    94h
.text:0040431B                 mov     eax, offset loc_410BC6
.text:00404320                 call    __EH_prolog3_GS
.text:00404325                 mov     [ebp+var_3C], ecx
.text:00404328                 push    4               ; dwDesiredAccess
.text:0040432A                 xor     ebx, ebx
.text:0040432C                 push    ebx             ; lpDatabaseName
.text:0040432D                 push    ebx             ; lpMachineName
.text:0040432E                 call    ds:OpenSCManagerW
.text:00404334                 mov     edi, eax
.text:00404336                 mov     [ebp+var_4C], edi
.text:00404339                 test    edi, edi
.text:0040433B                 jz      loc_4047E5
.text:00404341                 lea     eax, [ebp+ResumeHandle]
.text:00404344                 mov     [ebp+ResumeHandle], ebx
.text:00404347                 push    eax             ; lpResumeHandle
.text:00404348                 lea     eax, [ebp+ServicesReturned]
.text:0040434B                 push    eax             ; lpServicesReturned
.text:0040434C                 lea     eax, [ebp+pcbBytesNeeded]
.text:0040434F                 push    eax             ; pcbBytesNeeded
.text:00404350                 push    ebx             ; cbBufSize
.text:00404351                 push    ebx             ; lpServices
.text:00404352                 push    3               ; dwServiceState
.text:00404354                 push    30h ; '0'       ; dwServiceType
.text:00404356                 push    edi             ; hSCManager
.text:00404357                 call    ds:EnumServicesStatusW
.text:0040435D                 test    eax, eax
.text:0040435F                 jnz     loc_4047DE
.text:00404365                 call    ds:GetLastError
.text:0040436B                 cmp     eax, 0EAh ; 'ê'
.text:00404370                 jnz     loc_4047DE
.text:00404376                 mov     esi, [ebp+pcbBytesNeeded]
.text:00404379                 push    offset unk_413464
.text:0040437E                 push    esi
.text:0040437F                 mov     [ebp+ResumeHandle], ebx
.text:00404382                 call    sub_410236
.text:00404387                 mov     [ebp+Block], eax
.text:0040438A                 pop     ecx
.text:0040438B                 pop     ecx
.text:0040438C                 test    eax, eax
.text:0040438E                 jz      loc_4047DE
.text:00404394                 mov     edx, esi
.text:00404396                 mov     ecx, eax
.text:00404398                 test    esi, esi
.text:0040439A                 jz      short loc_4043A4
.text:0040439C
.text:0040439C loc_40439C:                             ; CODE XREF: sub_404316+8C↓j
.text:0040439C                 mov     [ecx], bl
.text:0040439E                 inc     ecx
.text:0040439F                 sub     edx, 1
.text:004043A2                 jnz     short loc_40439C
.text:004043A4
.text:004043A4 loc_4043A4:                             ; CODE XREF: sub_404316+84↑j
.text:004043A4                 lea     ecx, [ebp+ResumeHandle]
.text:004043A7                 push    ecx             ; lpResumeHandle
.text:004043A8                 lea     ecx, [ebp+ServicesReturned]
.text:004043AB                 push    ecx             ; lpServicesReturned
.text:004043AC                 lea     ecx, [ebp+pcbBytesNeeded]
.text:004043AF                 push    ecx             ; pcbBytesNeeded
.text:004043B0                 push    esi             ; cbBufSize
.text:004043B1                 push    eax             ; lpServices
.text:004043B2                 push    3               ; dwServiceState
.text:004043B4                 push    30h ; '0'       ; dwServiceType
.text:004043B6                 push    edi             ; hSCManager
.text:004043B7                 call    ds:EnumServicesStatusW
.text:004043BD                 test    eax, eax
.text:004043BF                 jz      loc_4047D5
.text:004043C5                 mov     ebx, [ebp+Block]
.text:004043C8                 lea     ecx, [ebp+var_2C]
.text:004043CB                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:004043D1 ;   try {
.text:004043D1                 and     [ebp+var_4], 0
.text:004043D5                 lea     ecx, [ebp+var_28]
.text:004043D8                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:004043DE                 lea     ecx, [ebp+var_24]
.text:004043DE ;   } // starts at 4043D1
.text:004043E1 ;   try {
.text:004043E1                 mov     byte ptr [ebp+var_4], 1
.text:004043E5                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:004043EB                 lea     ecx, [ebp+var_20]
.text:004043EB ;   } // starts at 4043E1
.text:004043EE ;   try {
.text:004043EE                 mov     byte ptr [ebp+var_4], 2
.text:004043F2                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:004043F8                 lea     ecx, [ebp+var_1C]
.text:004043F8 ;   } // starts at 4043EE
.text:004043FB ;   try {
.text:004043FB                 mov     byte ptr [ebp+var_4], 3
.text:004043FF                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00404405                 lea     ecx, [ebp+var_18]
.text:00404405 ;   } // starts at 4043FB
.text:00404408 ;   try {
.text:00404408                 mov     byte ptr [ebp+var_4], 4
.text:0040440C                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00404412                 lea     ecx, [ebp+var_14]
.text:00404412 ;   } // starts at 404408
.text:00404415 ;   try {
.text:00404415                 mov     byte ptr [ebp+var_4], 5
.text:00404419                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040441F                 lea     ecx, [ebp+var_30]
.text:0040441F ;   } // starts at 404415
.text:00404422 ;   try {
.text:00404422                 mov     byte ptr [ebp+var_4], 6
.text:00404426                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040442C                 push    74h ; 't'
.text:0040442E                 lea     ecx, [ebp+var_2C]
.text:0040442E ;   } // starts at 404422
.text:00404431 ;   try {
.text:00404431                 mov     byte ptr [ebp+var_4], 7
.text:00404435                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:0040443B                 test    eax, eax
.text:0040443D                 jle     loc_40476D
.text:00404443                 push    75h ; 'u'
.text:00404445                 lea     ecx, [ebp+var_28]
.text:00404448                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:0040444E                 test    eax, eax
.text:00404450                 jle     loc_40476D
.text:00404456                 push    76h ; 'v'
.text:00404458                 lea     ecx, [ebp+var_24]
.text:0040445B                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:00404461                 test    eax, eax
.text:00404463                 jle     loc_40476D
.text:00404469                 push    77h ; 'w'
.text:0040446B                 lea     ecx, [ebp+var_20]
.text:0040446E                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:00404474                 test    eax, eax
.text:00404476                 jle     loc_40476D
.text:0040447C                 push    78h ; 'x'
.text:0040447E                 lea     ecx, [ebp+var_1C]
.text:00404481                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:00404487                 test    eax, eax
.text:00404489                 jle     loc_40476D
.text:0040448F                 push    79h ; 'y'
.text:00404491                 lea     ecx, [ebp+var_18]
.text:00404494                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:0040449A                 test    eax, eax
.text:0040449C                 jle     loc_40476D
.text:004044A2                 push    7Ah ; 'z'
.text:004044A4                 lea     ecx, [ebp+var_14]
.text:004044A7                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:004044AD                 lea     ecx, [ebp+var_30]
.text:004044B0                 test    eax, eax
.text:004044B2                 jle     loc_404770
.text:004044B8                 push    80h ; '€'
.text:004044BD                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:004044C3                 test    eax, eax
.text:004044C5                 jle     loc_40476D
.text:004044CB                 and     [ebp+var_58], 0
.text:004044CF                 and     [ebp+var_5C], 0
.text:004044D3                 cmp     [ebp+ServicesReturned], 0
.text:004044D7                 jbe     loc_40476D
.text:004044DD
.text:004044DD loc_4044DD:                             ; CODE XREF: sub_404316+438↓j
.text:004044DD                 push    dword ptr [ebx]
.text:004044DF                 mov     ecx, [ebp+var_3C]
.text:004044E2                 call    sub_405FEB
.text:004044E7                 cmp     eax, 1
.text:004044EA                 jz      loc_40473C
.text:004044F0                 lea     ecx, [ebp+var_34]
.text:004044F3                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:004044F9                 push    1               ; dwDesiredAccess
.text:004044F9 ;   } // starts at 404431
.text:004044FB ;   try {
.text:004044FB                 mov     byte ptr [ebp+var_4], 8
.text:004044FF                 push    dword ptr [ebx] ; lpServiceName
.text:00404501                 push    edi             ; hSCManager
.text:00404502                 call    ds:OpenServiceW
.text:00404508                 mov     esi, eax
.text:0040450A                 test    esi, esi
.text:0040450C                 jz      loc_40472F
.text:00404512                 mov     ecx, [ebp+var_3C]
.text:00404515                 lea     eax, [ebp+var_34]
.text:00404518                 push    eax             ; int
.text:00404519                 lea     eax, [ebp+var_54]
.text:0040451C                 push    eax             ; int
.text:0040451D                 push    esi             ; hService
.text:0040451E                 call    sub_404EFD
.text:00404523                 push    esi             ; hSCObject
.text:00404524                 test    eax, eax
.text:00404526                 jns     short loc_404533
.text:00404528                 call    ds:CloseServiceHandle
.text:0040452E                 jmp     loc_40472F
.text:00404533 ; ---------------------------------------------------------------------------
.text:00404533
.text:00404533 loc_404533:                             ; CODE XREF: sub_404316+210↑j
.text:00404533                 call    ds:CloseServiceHandle
.text:00404539                 cmp     [ebp+var_54], 4
.text:0040453D                 jnz     short loc_404577
.text:0040453F                 mov     edi, [ebp+var_3C]
.text:00404542                 push    ecx
.text:00404543                 mov     eax, [edi+90h]
.text:00404549                 mov     esi, [eax+14h]
.text:0040454C                 mov     ecx, esi
.text:0040454E                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00404554                 lea     ecx, [edi+90h]
.text:0040455A                 call    esi
.text:0040455C                 mov     edx, [ebx]
.text:0040455E                 mov     ecx, eax
.text:00404560                 call    ?OpenRegKey@@YGPAUHKEY__@@PBG0K@Z ; OpenRegKey(ushort const *,ushort const *,ulong)
.text:00404565                 test    eax, eax
.text:00404567                 jz      loc_40472F
.text:0040456D                 push    eax             ; hKey
.text:0040456E                 call    ds:RegCloseKey
.text:00404574                 mov     edi, [ebp+var_4C]
.text:00404577
.text:00404577 loc_404577:                             ; CODE XREF: sub_404316+227↑j
.text:00404577                 lea     ecx, [ebp+var_38]
.text:0040457A                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00404580                 push    ecx
.text:00404580 ;   } // starts at 4044FB
.text:00404581 ;   try {
.text:00404581                 mov     byte ptr [ebp+var_4], 9
.text:00404585                 lea     edx, [ebp+var_38]
.text:00404588                 push    ecx
.text:00404589                 mov     ecx, [ebp+var_34]
.text:0040458C                 call    sub_404FB1
.text:00404591                 test    eax, eax
.text:00404593                 js      loc_404722
.text:00404599                 mov     eax, [ebp+var_3C]
.text:0040459C                 cmp     dword ptr [eax+0B0h], 0
.text:004045A3                 jz      short loc_4045EA
.text:004045A5                 lea     eax, [ebp+var_38]
.text:004045A8                 push    eax
.text:004045A9                 lea     ecx, [ebp+var_40]
.text:004045AC                 call    ds:??0CString@@QAE@ABV0@@Z ; CString::CString(CString const &)
.text:004045B2                 lea     ecx, [ebp+var_40]
.text:004045B2 ;   } // starts at 404581
.text:004045B5 ;   try {
.text:004045B5                 mov     byte ptr [ebp+var_4], 0Ah
.text:004045B9                 call    ds:?MakeLower@CString@@QAEXXZ ; CString::MakeLower(void)
.text:004045BF                 push    offset aMicrosoft ; "microsoft"
.text:004045C4                 lea     ecx, [ebp+var_40]
.text:004045C7                 call    ds:?Find@CString@@QBEHPBG@Z ; CString::Find(ushort const *)
.text:004045C7 ;   } // starts at 4045B5
.text:004045CD ;   try {
.text:004045CD                 mov     byte ptr [ebp+var_4], 9
.text:004045D1                 lea     ecx, [ebp+var_40]
.text:004045D4                 cmp     eax, 0FFFFFFFFh
.text:004045D7                 jz      short loc_4045E4
.text:004045D9                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004045DF                 jmp     loc_404722
.text:004045E4 ; ---------------------------------------------------------------------------
.text:004045E4
.text:004045E4 loc_4045E4:                             ; CODE XREF: sub_404316+2C1↑j
.text:004045E4                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004045EA
.text:004045EA loc_4045EA:                             ; CODE XREF: sub_404316+28D↑j
.text:004045EA                 push    28h ; '('
.text:004045EC                 call    ds:__imp_??2@YAPAXI@Z ; operator new(uint)
.text:004045F2                 pop     ecx
.text:004045F3                 mov     [ebp+var_A0], eax
.text:004045F3 ;   } // starts at 4045CD
.text:004045F9 ;   try {
.text:004045F9                 mov     byte ptr [ebp+var_4], 0Bh
.text:004045FD                 test    eax, eax
.text:004045FF                 jz      short loc_404618
.text:00404601                 push    dword ptr [ebx+4]
.text:00404604                 push    [ebp+var_38]
.text:00404607                 push    [ebp+var_54]
.text:0040460A                 push    ecx
.text:0040460B                 push    dword ptr [ebx]
.text:0040460D                 mov     ecx, eax
.text:0040460F                 call    sub_406D44
.text:00404614                 mov     esi, eax
.text:00404616                 jmp     short loc_40461A
.text:00404618 ; ---------------------------------------------------------------------------
.text:00404618
.text:00404618 loc_404618:                             ; CODE XREF: sub_404316+2E9↑j
.text:00404618                 xor     esi, esi
.text:00404618 ;   } // starts at 4045F9
.text:0040461A
.text:0040461A loc_40461A:                             ; CODE XREF: sub_404316+300↑j
.text:0040461A ;   try {
.text:0040461A                 mov     byte ptr [ebp+var_4], 9
.text:0040461E                 test    esi, esi
.text:00404620                 jz      loc_404753
.text:00404626                 mov     eax, [ebx+4]
.text:00404629                 and     [ebp+var_94], 0
.text:00404630                 mov     edi, [ebp+var_3C]
.text:00404633                 mov     [ebp+var_88], eax
.text:00404639                 mov     eax, [ebp+var_58]
.text:0040463C                 mov     [ebp+var_98], eax
.text:00404642                 inc     eax
.text:00404643                 mov     [ebp+var_58], eax
.text:00404646                 lea     eax, [ebp+lParam]
.text:0040464C                 push    eax             ; lParam
.text:0040464D                 push    0               ; wParam
.text:0040464F                 push    104Dh           ; Msg
.text:00404654                 push    dword ptr [edi+0A0h] ; hWnd
.text:0040465A                 mov     [ebp+var_7C], esi
.text:0040465D                 mov     [ebp+lParam], 5
.text:00404667                 call    ds:SendMessageW
.text:0040466D                 xor     eax, eax
.text:0040466F                 inc     eax
.text:00404670                 mov     [ebp+lParam], eax
.text:00404676                 mov     [ebp+var_94], eax
.text:0040467C                 mov     eax, [ebp+var_38]
.text:0040467F                 mov     [ebp+var_88], eax
.text:00404685                 lea     eax, [ebp+lParam]
.text:0040468B                 push    eax             ; lParam
.text:0040468C                 push    0               ; wParam
.text:0040468E                 push    104Ch           ; Msg
.text:00404693                 push    dword ptr [edi+0A0h] ; hWnd
.text:00404699                 call    ds:SendMessageW
.text:0040469F                 mov     eax, [ebx+0Ch]
.text:004046A2                 sub     eax, 1
.text:004046A5                 jz      short loc_4046EB
.text:004046A7                 sub     eax, 1
.text:004046AA                 jz      short loc_4046E6
.text:004046AC                 sub     eax, 1
.text:004046AF                 jz      short loc_4046E1
.text:004046B1                 sub     eax, 1
.text:004046B4                 jz      short loc_4046DC
.text:004046B6                 sub     eax, 1
.text:004046B9                 jz      short loc_4046D7
.text:004046BB                 sub     eax, 1
.text:004046BE                 jz      short loc_4046D2
.text:004046C0                 sub     eax, 1
.text:004046C3                 jnz     short loc_4046CA
.text:004046C5                 mov     eax, [ebp+var_14]
.text:004046C8                 jmp     short loc_4046EE
.text:004046CA ; ---------------------------------------------------------------------------
.text:004046CA
.text:004046CA loc_4046CA:                             ; CODE XREF: sub_404316+3AD↑j
.text:004046CA                 mov     eax, [ebp+var_88]
.text:004046D0                 jmp     short loc_4046F4
.text:004046D2 ; ---------------------------------------------------------------------------
.text:004046D2
.text:004046D2 loc_4046D2:                             ; CODE XREF: sub_404316+3A8↑j
.text:004046D2                 mov     eax, [ebp+var_18]
.text:004046D5                 jmp     short loc_4046EE
.text:004046D7 ; ---------------------------------------------------------------------------
.text:004046D7
.text:004046D7 loc_4046D7:                             ; CODE XREF: sub_404316+3A3↑j
.text:004046D7                 mov     eax, [ebp+var_1C]
.text:004046DA                 jmp     short loc_4046EE
.text:004046DC ; ---------------------------------------------------------------------------
.text:004046DC
.text:004046DC loc_4046DC:                             ; CODE XREF: sub_404316+39E↑j
.text:004046DC                 mov     eax, [ebp+var_20]
.text:004046DF                 jmp     short loc_4046EE
.text:004046E1 ; ---------------------------------------------------------------------------
.text:004046E1
.text:004046E1 loc_4046E1:                             ; CODE XREF: sub_404316+399↑j
.text:004046E1                 mov     eax, [ebp+var_24]
.text:004046E4                 jmp     short loc_4046EE
.text:004046E6 ; ---------------------------------------------------------------------------
.text:004046E6
.text:004046E6 loc_4046E6:                             ; CODE XREF: sub_404316+394↑j
.text:004046E6                 mov     eax, [ebp+var_28]
.text:004046E9                 jmp     short loc_4046EE
.text:004046EB ; ---------------------------------------------------------------------------
.text:004046EB
.text:004046EB loc_4046EB:                             ; CODE XREF: sub_404316+38F↑j
.text:004046EB                 mov     eax, [ebp+var_2C]
.text:004046EE
.text:004046EE loc_4046EE:                             ; CODE XREF: sub_404316+3B2↑j
.text:004046EE                                         ; sub_404316+3BF↑j ...
.text:004046EE                 mov     [ebp+var_88], eax
.text:004046F4
.text:004046F4 loc_4046F4:                             ; CODE XREF: sub_404316+3BA↑j
.text:004046F4                 push    eax
.text:004046F5                 lea     ecx, [esi+1Ch]
.text:004046F8                 mov     [ebp+var_94], 2
.text:00404702                 call    ds:??4CString@@QAEABV0@PBG@Z ; CString::operator=(ushort const *)
.text:00404708                 lea     eax, [ebp+lParam]
.text:0040470E                 push    eax             ; lParam
.text:0040470F                 push    0               ; wParam
.text:00404711                 push    104Ch           ; Msg
.text:00404716                 push    dword ptr [edi+0A0h] ; hWnd
.text:0040471C                 call    ds:SendMessageW
.text:00404722
.text:00404722 loc_404722:                             ; CODE XREF: sub_404316+27D↑j
.text:00404722                                         ; sub_404316+2C9↑j
.text:00404722                 lea     ecx, [ebp+var_38]
.text:00404722 ;   } // starts at 40461A
.text:00404725 ;   try {
.text:00404725                 mov     byte ptr [ebp+var_4], 8
.text:00404729                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040472F
.text:0040472F loc_40472F:                             ; CODE XREF: sub_404316+1F6↑j
.text:0040472F                                         ; sub_404316+218↑j ...
.text:0040472F                 lea     ecx, [ebp+var_34]
.text:0040472F ;   } // starts at 404725
.text:00404732 ;   try {
.text:00404732                 mov     byte ptr [ebp+var_4], 7
.text:00404736                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040473C
.text:0040473C loc_40473C:                             ; CODE XREF: sub_404316+1D4↑j
.text:0040473C                 mov     eax, [ebp+var_5C]
.text:0040473F                 add     ebx, 24h ; '$'
.text:00404742                 mov     edi, [ebp+var_4C]
.text:00404745                 inc     eax
.text:00404746                 mov     [ebp+var_5C], eax
.text:00404749                 cmp     eax, [ebp+ServicesReturned]
.text:0040474C                 jnb     short loc_40476D
.text:0040474E                 jmp     loc_4044DD
.text:00404753 ; ---------------------------------------------------------------------------
.text:00404753
.text:00404753 loc_404753:                             ; CODE XREF: sub_404316+30A↑j
.text:00404753                 lea     ecx, [ebp+var_38]
.text:00404753 ;   } // starts at 404732
.text:00404756 ;   try {
.text:00404756                 mov     byte ptr [ebp+var_4], 8
.text:0040475A                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00404760                 lea     ecx, [ebp+var_34]
.text:00404760 ;   } // starts at 404756
.text:00404763 ;   try {
.text:00404763                 mov     byte ptr [ebp+var_4], 7
.text:00404767                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040476D
.text:0040476D loc_40476D:                             ; CODE XREF: sub_404316+127↑j
.text:0040476D                                         ; sub_404316+13A↑j ...
.text:0040476D                 lea     ecx, [ebp+var_30]
.text:0040476D ;   } // starts at 404763
.text:00404770
.text:00404770 loc_404770:                             ; CODE XREF: sub_404316+19C↑j
.text:00404770 ;   try {
.text:00404770                 mov     byte ptr [ebp+var_4], 6
.text:00404774                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040477A                 lea     ecx, [ebp+var_14]
.text:0040477A ;   } // starts at 404770
.text:0040477D ;   try {
.text:0040477D                 mov     byte ptr [ebp+var_4], 5
.text:00404781                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00404787                 lea     ecx, [ebp+var_18]
.text:00404787 ;   } // starts at 40477D
.text:0040478A ;   try {
.text:0040478A                 mov     byte ptr [ebp+var_4], 4
.text:0040478E                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00404794                 lea     ecx, [ebp+var_1C]
.text:00404794 ;   } // starts at 40478A
.text:00404797 ;   try {
.text:00404797                 mov     byte ptr [ebp+var_4], 3
.text:0040479B                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004047A1                 lea     ecx, [ebp+var_20]
.text:004047A1 ;   } // starts at 404797
.text:004047A4 ;   try {
.text:004047A4                 mov     byte ptr [ebp+var_4], 2
.text:004047A8                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004047AE                 lea     ecx, [ebp+var_24]
.text:004047AE ;   } // starts at 4047A4
.text:004047B1 ;   try {
.text:004047B1                 mov     byte ptr [ebp+var_4], 1
.text:004047B5                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004047BB                 lea     ecx, [ebp+var_28]
.text:004047BB ;   } // starts at 4047B1
.text:004047BE ;   try {
.text:004047BE                 mov     byte ptr [ebp+var_4], 0
.text:004047C2                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004047C2 ;   } // starts at 4047BE
.text:004047C8                 or      [ebp+var_4], 0FFFFFFFFh
.text:004047CC                 lea     ecx, [ebp+var_2C]
.text:004047CF                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004047D5
.text:004047D5 loc_4047D5:                             ; CODE XREF: sub_404316+A9↑j
.text:004047D5                 push    [ebp+Block]     ; Block
.text:004047D8                 call    free
.text:004047DD                 pop     ecx
.text:004047DE
.text:004047DE loc_4047DE:                             ; CODE XREF: sub_404316+49↑j
.text:004047DE                                         ; sub_404316+5A↑j ...
.text:004047DE                 push    edi             ; hSCObject
.text:004047DF                 call    ds:CloseServiceHandle
.text:004047E5
.text:004047E5 loc_4047E5:                             ; CODE XREF: sub_404316+25↑j
.text:004047E5                 call    __EH_epilog3_GS
.text:004047EA                 retn
.text:004047EA ; } // starts at 404316
.text:004047EA sub_404316      endp
.text:004047EA
.text:004047EB
.text:004047EB ; =============== S U B R O U T I N E =======================================
.text:004047EB
.text:004047EB ; Attributes: bp-based frame
.text:004047EB
.text:004047EB sub_4047EB      proc near               ; CODE XREF: sub_404300+F↑p
.text:004047EB                                         ; sub_405620+31↓p
.text:004047EB
.text:004047EB lParam          = dword ptr -3Ch
.text:004047EB var_38          = dword ptr -38h
.text:004047EB var_34          = dword ptr -34h
.text:004047EB var_1C          = dword ptr -1Ch
.text:004047EB arg_0           = dword ptr  8
.text:004047EB
.text:004047EB                 mov     edi, edi
.text:004047ED                 push    ebp
.text:004047EE                 mov     ebp, esp
.text:004047F0                 sub     esp, 3Ch
.text:004047F3                 push    ebx
.text:004047F4                 push    esi
.text:004047F5                 push    edi
.text:004047F6                 xor     ebx, ebx
.text:004047F8                 mov     [ebp+lParam], 4
.text:004047FF                 push    ebx             ; lParam
.text:00404800                 mov     edi, ecx
.text:00404802                 mov     [ebp+var_34], ebx
.text:00404805                 push    ebx             ; wParam
.text:00404806                 push    1004h           ; Msg
.text:0040480B                 push    dword ptr [edi+0A0h] ; hWnd
.text:00404811                 call    ds:SendMessageW
.text:00404817                 mov     esi, eax
.text:00404819                 jmp     short loc_404846
.text:0040481B ; ---------------------------------------------------------------------------
.text:0040481B
.text:0040481B loc_40481B:                             ; CODE XREF: sub_4047EB+5E↓j
.text:0040481B                 lea     eax, [ebp+lParam]
.text:0040481E                 mov     [ebp+var_38], esi
.text:00404821                 push    eax             ; lParam
.text:00404822                 push    ebx             ; wParam
.text:00404823                 push    104Bh           ; Msg
.text:00404828                 push    dword ptr [edi+0A0h] ; hWnd
.text:0040482E                 call    ds:SendMessageW
.text:00404834                 cmp     eax, 1
.text:00404837                 jnz     short loc_404846
.text:00404839                 mov     ecx, [ebp+var_1C]
.text:0040483C                 test    ecx, ecx
.text:0040483E                 jz      short loc_404846
.text:00404840                 push    ecx
.text:00404841                 call    sub_40486C
.text:00404846
.text:00404846 loc_404846:                             ; CODE XREF: sub_4047EB+2E↑j
.text:00404846                                         ; sub_4047EB+4C↑j ...
.text:00404846                 sub     esi, 1
.text:00404849                 jns     short loc_40481B
.text:0040484B                 cmp     [ebp+arg_0], ebx
.text:0040484E                 jz      short loc_404863
.text:00404850                 push    ebx             ; lParam
.text:00404851                 push    ebx             ; wParam
.text:00404852                 push    1009h           ; Msg
.text:00404857                 push    dword ptr [edi+0A0h] ; hWnd
.text:0040485D                 call    ds:SendMessageW
.text:00404863
.text:00404863 loc_404863:                             ; CODE XREF: sub_4047EB+63↑j
.text:00404863                 pop     edi
.text:00404864                 pop     esi
.text:00404865                 pop     ebx
.text:00404866                 mov     esp, ebp
.text:00404868                 pop     ebp
.text:00404869                 retn    4
.text:00404869 sub_4047EB      endp
.text:00404869
.text:0040486C
.text:0040486C ; =============== S U B R O U T I N E =======================================
.text:0040486C
.text:0040486C ; Attributes: bp-based frame
.text:0040486C
.text:0040486C sub_40486C      proc near               ; CODE XREF: sub_4047EB+56↑p
.text:0040486C
.text:0040486C var_10          = dword ptr -10h
.text:0040486C var_4           = dword ptr -4
.text:0040486C arg_4           = dword ptr  0Ch
.text:0040486C
.text:0040486C ; FUNCTION CHUNK AT .text:00410BEE SIZE 00000054 BYTES
.text:0040486C
.text:0040486C ; __unwind { // loc_410C27
.text:0040486C                 push    4
.text:0040486E                 mov     eax, offset loc_410C27
.text:00404873                 call    __EH_prolog3
.text:00404878                 mov     esi, ecx
.text:0040487A                 mov     [ebp+var_10], esi
.text:0040487D                 lea     ecx, [esi+1Ch]
.text:00404880 ;   try {
.text:00404880                 mov     [ebp+var_4], 4
.text:00404887                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040488D                 lea     ecx, [esi+18h]
.text:0040488D ;   } // starts at 404880
.text:00404890 ;   try {
.text:00404890                 mov     byte ptr [ebp+var_4], 3
.text:00404894                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040489A                 lea     ecx, [esi+0Ch]
.text:0040489A ;   } // starts at 404890
.text:0040489D ;   try {
.text:0040489D                 mov     byte ptr [ebp+var_4], 2
.text:004048A1                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004048A7                 lea     ecx, [esi+8]
.text:004048A7 ;   } // starts at 40489D
.text:004048AA ;   try {
.text:004048AA                 mov     byte ptr [ebp+var_4], 1
.text:004048AE                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004048B4                 lea     ecx, [esi+4]
.text:004048B4 ;   } // starts at 4048AA
.text:004048B7 ;   try {
.text:004048B7                 mov     byte ptr [ebp+var_4], 0
.text:004048BB                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004048BB ;   } // starts at 4048B7
.text:004048C1                 or      [ebp+var_4], 0FFFFFFFFh
.text:004048C5                 mov     ecx, esi
.text:004048C7                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004048CD                 push    esi
.text:004048CE                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:004048D4                 pop     ecx
.text:004048D5                 mov     eax, esi
.text:004048D7                 call    __EH_epilog3
.text:004048DC                 retn    4
.text:004048DC ; } // starts at 40486C
.text:004048DC sub_40486C      endp
.text:004048DC
.text:004048DF
.text:004048DF ; =============== S U B R O U T I N E =======================================
.text:004048DF
.text:004048DF ; Attributes: bp-based frame
.text:004048DF
.text:004048DF sub_4048DF      proc near               ; CODE XREF: sub_4040E0+176↑p
.text:004048DF                                         ; sub_405620+3F↓p
.text:004048DF
.text:004048DF var_C8          = dword ptr -0C8h
.text:004048DF var_BC          = dword ptr -0BCh
.text:004048DF var_B8          = dword ptr -0B8h
.text:004048DF lParam          = dword ptr -8Ch
.text:004048DF var_88          = dword ptr -88h
.text:004048DF var_84          = dword ptr -84h
.text:004048DF var_78          = dword ptr -78h
.text:004048DF var_6C          = dword ptr -6Ch
.text:004048DF var_4C          = byte ptr -4Ch
.text:004048DF var_48          = dword ptr -48h
.text:004048DF var_44          = dword ptr -44h
.text:004048DF Data            = byte ptr -40h
.text:004048DF var_3C          = byte ptr -3Ch
.text:004048DF var_38          = byte ptr -38h
.text:004048DF var_34          = byte ptr -34h
.text:004048DF var_30          = byte ptr -30h
.text:004048DF var_2C          = byte ptr -2Ch
.text:004048DF var_28          = dword ptr -28h
.text:004048DF var_24          = dword ptr -24h
.text:004048DF var_20          = dword ptr -20h
.text:004048DF var_1C          = dword ptr -1Ch
.text:004048DF var_18          = dword ptr -18h
.text:004048DF wParam          = dword ptr -14h
.text:004048DF var_4           = dword ptr -4
.text:004048DF arg_4           = dword ptr  0Ch
.text:004048DF
.text:004048DF ; FUNCTION CHUNK AT .text:00403DA1 SIZE 00000017 BYTES
.text:004048DF ; FUNCTION CHUNK AT .text:00410C42 SIZE 00000030 BYTES
.text:004048DF
.text:004048DF ; __unwind { // loc_410C4A
.text:004048DF                 push    0BCh
.text:004048E4                 mov     eax, offset loc_410C4A
.text:004048E9                 call    __EH_prolog3_GS
.text:004048EE                 mov     edi, ecx
.text:004048F0                 mov     [ebp+var_24], edi
.text:004048F3                 xor     eax, eax
.text:004048F5                 mov     [ebp+var_20], eax
.text:004048F8                 mov     [ebp+var_1C], eax
.text:004048FB                 mov     [ebp+var_18], eax
.text:004048FE ;   try {
.text:004048FE                 mov     [ebp+var_4], eax
.text:00404901                 lea     ebx, [edi+90h]
.text:00404907                 mov     eax, [ebx]
.text:00404909                 mov     [ebp+var_28], ebx
.text:0040490C                 mov     esi, [eax+14h]
.text:0040490F                 mov     ecx, esi
.text:00404911                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00404917                 mov     ecx, ebx
.text:00404919                 call    esi
.text:0040491B                 mov     edx, 20019h
.text:00404920                 mov     ecx, eax
.text:00404922                 call    sub_40D6CA
.text:00404927                 test    eax, eax
.text:00404929                 jz      loc_404B99
.text:0040492F                 push    eax             ; hKey
.text:00404930                 call    ds:RegCloseKey
.text:00404936                 push    0               ; lParam
.text:00404938                 push    0               ; wParam
.text:0040493A                 push    1004h           ; Msg
.text:0040493F                 push    dword ptr [edi+0A0h] ; hWnd
.text:00404945                 call    ds:SendMessageW
.text:0040494B                 mov     ecx, eax
.text:0040494D                 xor     eax, eax
.text:0040494F                 mov     [ebp+var_48], ecx
.text:00404952                 mov     [ebp+wParam], eax
.text:00404955                 test    ecx, ecx
.text:00404957                 jle     loc_404B99
.text:0040495D
.text:0040495D loc_40495D:                             ; CODE XREF: sub_4048DF+2B4↓j
.text:0040495D                 and     [ebp+var_84], 0
.text:00404964                 mov     [ebp+var_88], eax
.text:0040496A                 lea     eax, [ebp+lParam]
.text:00404970                 push    eax             ; lParam
.text:00404971                 push    0               ; wParam
.text:00404973                 push    104Bh           ; Msg
.text:00404978                 push    dword ptr [edi+0A0h] ; hWnd
.text:0040497E                 mov     [ebp+lParam], 4
.text:00404988                 call    ds:SendMessageW
.text:0040498E                 test    eax, eax
.text:00404990                 jz      loc_404B89
.text:00404996                 mov     ebx, [ebp+var_6C]
.text:00404999                 test    ebx, ebx
.text:0040499B                 jz      loc_404B89
.text:004049A1                 mov     eax, [ebp+var_28]
.text:004049A4                 mov     edi, [ebx]
.text:004049A6                 push    ecx
.text:004049A7                 mov     eax, [eax]
.text:004049A9                 mov     esi, [eax+14h]
.text:004049AC                 mov     ecx, esi
.text:004049AE                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:004049B4                 mov     ecx, [ebp+var_28]
.text:004049B7                 call    esi
.text:004049B9                 mov     edx, edi
.text:004049BB                 mov     ecx, eax
.text:004049BD                 call    ?OpenRegKey@@YGPAUHKEY__@@PBG0K@Z ; OpenRegKey(ushort const *,ushort const *,ulong)
.text:004049C2                 mov     esi, eax
.text:004049C4                 mov     [ebp+var_44], esi
.text:004049C7                 test    esi, esi
.text:004049C9                 jz      loc_404B50
.text:004049CF                 push    dword ptr [ebx] ; lpValueName
.text:004049D1                 lea     ecx, [ebx+14h]
.text:004049D4                 mov     [ebp+var_20], esi
.text:004049D7                 push    ecx             ; lpData
.text:004049D8                 lea     ecx, [ebp+var_20]
.text:004049DB                 call    sub_403D68
.text:004049E0                 test    eax, eax
.text:004049E2                 jz      short loc_4049F7
.text:004049E4                 push    esi             ; hKey
.text:004049E5                 call    ds:RegCloseKey
.text:004049EB                 and     [ebp+var_20], 0
.text:004049EF                 mov     edi, [ebp+var_24]
.text:004049F2                 jmp     loc_404B89
.text:004049F7 ; ---------------------------------------------------------------------------
.text:004049F7
.text:004049F7 loc_4049F7:                             ; CODE XREF: sub_4048DF+103↑j
.text:004049F7                 mov     edi, [ebp+var_24]
.text:004049FA                 lea     eax, [ebp+var_C8]
.text:00404A00                 push    eax             ; lParam
.text:00404A01                 push    [ebp+wParam]    ; wParam
.text:00404A04                 mov     [ebp+var_B8], 0F000h
.text:00404A0E                 push    102Bh           ; Msg
.text:00404A13                 push    dword ptr [edi+0A0h] ; hWnd
.text:00404A19                 mov     [ebp+var_BC], 1000h
.text:00404A23                 call    ds:SendMessageW
.text:00404A29                 and     dword ptr [ebx+10h], 0
.text:00404A2D                 lea     eax, [ebp+Data]
.text:00404A30                 push    offset ValueName ; "YEAR"
.text:00404A35                 push    eax             ; lpData
.text:00404A36                 lea     ecx, [ebp+var_20]
.text:00404A39                 mov     [ebp+lParam], 1
.text:00404A43                 mov     [ebp+var_84], 3
.text:00404A4D                 call    sub_403D68
.text:00404A52                 test    eax, eax
.text:00404A54                 jnz     loc_404B02
.text:00404A5A                 push    offset aMonth   ; "MONTH"
.text:00404A5F                 lea     eax, [ebp+var_3C]
.text:00404A62                 push    eax             ; lpData
.text:00404A63                 lea     ecx, [ebp+var_20]
.text:00404A66                 call    sub_403D68
.text:00404A6B                 test    eax, eax
.text:00404A6D                 jnz     loc_404B02
.text:00404A73                 push    offset off_402E28 ; lpValueName
.text:00404A78                 lea     eax, [ebp+var_38]
.text:00404A7B                 push    eax             ; lpData
.text:00404A7C                 lea     ecx, [ebp+var_20]
.text:00404A7F                 call    sub_403D68
.text:00404A84                 test    eax, eax
.text:00404A86                 jnz     short loc_404B02
.text:00404A88                 push    offset aHour    ; "HOUR"
.text:00404A8D                 lea     eax, [ebp+var_34]
.text:00404A90                 push    eax             ; lpData
.text:00404A91                 lea     ecx, [ebp+var_20]
.text:00404A94                 call    sub_403D68
.text:00404A99                 test    eax, eax
.text:00404A9B                 jnz     short loc_404B02
.text:00404A9D                 push    offset aMinute  ; "MINUTE"
.text:00404AA2                 lea     eax, [ebp+var_30]
.text:00404AA5                 push    eax             ; lpData
.text:00404AA6                 lea     ecx, [ebp+var_20]
.text:00404AA9                 call    sub_403D68
.text:00404AAE                 test    eax, eax
.text:00404AB0                 jnz     short loc_404B02
.text:00404AB2                 push    offset aSecond  ; "SECOND"
.text:00404AB7                 lea     eax, [ebp+var_2C]
.text:00404ABA                 push    eax             ; lpData
.text:00404ABB                 lea     ecx, [ebp+var_20]
.text:00404ABE                 call    sub_403D68
.text:00404AC3                 test    eax, eax
.text:00404AC5                 jnz     short loc_404B02
.text:00404AC7                 push    0FFFFFFFFh
.text:00404AC9                 push    dword ptr [ebp+var_2C]
.text:00404ACC                 lea     ecx, [ebp+var_4C]
.text:00404ACF                 push    dword ptr [ebp+var_30]
.text:00404AD2                 push    dword ptr [ebp+var_34]
.text:00404AD5                 push    dword ptr [ebp+var_38]
.text:00404AD8                 push    dword ptr [ebp+var_3C]
.text:00404ADB                 push    dword ptr [ebp+Data]
.text:00404ADE                 call    ds:??0CTime@@QAE@HHHHHHH@Z ; CTime::CTime(int,int,int,int,int,int,int)
.text:00404AE4                 push    ecx
.text:00404AE5                 mov     ecx, esp
.text:00404AE7                 mov     eax, [eax]
.text:00404AE9                 mov     [ebx+20h], eax
.text:00404AEC                 mov     dword ptr [ebx+24h], 1
.text:00404AF3                 mov     [ecx], eax
.text:00404AF5                 lea     ecx, [ebx+0Ch]
.text:00404AF8                 call    sub_403E16
.text:00404AFD                 mov     esi, [ebp+var_44]
.text:00404B00                 jmp     short loc_404B23
.text:00404B02 ; ---------------------------------------------------------------------------
.text:00404B02
.text:00404B02 loc_404B02:                             ; CODE XREF: sub_4048DF+175↑j
.text:00404B02                                         ; sub_4048DF+18E↑j ...
.text:00404B02                 xor     eax, eax
.text:00404B04                 lea     ecx, [ebx+0Ch]
.text:00404B07                 inc     eax
.text:00404B08                 mov     [ebx+20h], eax
.text:00404B0B                 mov     [ebx+24h], eax
.text:00404B0E                 call    ds:?Empty@CString@@QAEXXZ ; CString::Empty(void)
.text:00404B14                 push    7Bh ; '{'
.text:00404B16                 lea     ecx, [ebx+0Ch]
.text:00404B19                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:00404B1F                 test    eax, eax
.text:00404B21                 jz      short loc_404B29
.text:00404B23
.text:00404B23 loc_404B23:                             ; CODE XREF: sub_4048DF+221↑j
.text:00404B23                 mov     eax, [ebx+0Ch]
.text:00404B26                 mov     [ebp+var_78], eax
.text:00404B29
.text:00404B29 loc_404B29:                             ; CODE XREF: sub_4048DF+242↑j
.text:00404B29                 lea     eax, [ebp+lParam]
.text:00404B2F                 push    eax             ; lParam
.text:00404B30                 push    0               ; wParam
.text:00404B32                 push    104Ch           ; Msg
.text:00404B37                 push    dword ptr [edi+0A0h] ; hWnd
.text:00404B3D                 call    ds:SendMessageW
.text:00404B43                 push    esi             ; hKey
.text:00404B44                 call    ds:RegCloseKey
.text:00404B4A                 and     [ebp+var_20], 0
.text:00404B4E                 jmp     short loc_404B89
.text:00404B50 ; ---------------------------------------------------------------------------
.text:00404B50
.text:00404B50 loc_404B50:                             ; CODE XREF: sub_4048DF+EA↑j
.text:00404B50                 mov     edi, [ebp+var_24]
.text:00404B53                 lea     eax, [ebp+var_C8]
.text:00404B59                 push    eax             ; lParam
.text:00404B5A                 push    [ebp+wParam]    ; wParam
.text:00404B5D                 mov     [ebp+var_B8], 0F000h
.text:00404B67                 push    102Bh           ; Msg
.text:00404B6C                 push    dword ptr [edi+0A0h] ; hWnd
.text:00404B72                 mov     [ebp+var_BC], 2000h
.text:00404B7C                 call    ds:SendMessageW
.text:00404B82                 mov     dword ptr [ebx+10h], 1
.text:00404B89
.text:00404B89 loc_404B89:                             ; CODE XREF: sub_4048DF+B1↑j
.text:00404B89                                         ; sub_4048DF+BC↑j ...
.text:00404B89                 mov     eax, [ebp+wParam]
.text:00404B8C                 inc     eax
.text:00404B8D                 mov     [ebp+wParam], eax
.text:00404B90                 cmp     eax, [ebp+var_48]
.text:00404B93                 jl      loc_40495D
.text:00404B99
.text:00404B99 loc_404B99:                             ; CODE XREF: sub_4048DF+4A↑j
.text:00404B99                                         ; sub_4048DF+78↑j
.text:00404B99                 call    __EH_epilog3_GS
.text:00404B9E                 retn
.text:00404B9E ;   } // starts at 4048FE
.text:00404B9E ; } // starts at 4048DF
.text:00404B9E sub_4048DF      endp
.text:00404B9E
.text:00404B9F
.text:00404B9F ; =============== S U B R O U T I N E =======================================
.text:00404B9F
.text:00404B9F ; Attributes: bp-based frame
.text:00404B9F
.text:00404B9F sub_404B9F      proc near               ; CODE XREF: sub_4055D0+7↓p
.text:00404B9F                                         ; sub_4055F0+A↓p ...
.text:00404B9F
.text:00404B9F lParam          = dword ptr -7Ch
.text:00404B9F var_70          = dword ptr -70h
.text:00404B9F var_6C          = dword ptr -6Ch
.text:00404B9F var_40          = dword ptr -40h
.text:00404B9F var_3C          = dword ptr -3Ch
.text:00404B9F var_38          = dword ptr -38h
.text:00404B9F var_20          = dword ptr -20h
.text:00404B9F var_4           = dword ptr -4
.text:00404B9F arg_0           = dword ptr  8
.text:00404B9F
.text:00404B9F                 mov     edi, edi
.text:00404BA1                 push    ebp
.text:00404BA2                 mov     ebp, esp
.text:00404BA4                 sub     esp, 7Ch
.text:00404BA7                 push    ebx
.text:00404BA8                 push    esi
.text:00404BA9                 mov     esi, ecx
.text:00404BAB                 mov     [ebp+var_40], 4
.text:00404BB2                 xor     ecx, ecx
.text:00404BB4                 mov     ebx, ecx
.text:00404BB6                 mov     [ebp+var_38], ecx
.text:00404BB9                 mov     [ebp+var_4], ebx
.text:00404BBC                 mov     eax, [esi+0A0h]
.text:00404BC2                 mov     dword ptr [esi+0A4h], 1
.text:00404BCC                 test    eax, eax
.text:00404BCE                 jz      loc_404C9F
.text:00404BD4                 push    edi
.text:00404BD5                 push    ecx             ; lParam
.text:00404BD6                 push    ecx             ; wParam
.text:00404BD7                 push    1004h           ; Msg
.text:00404BDC                 push    eax             ; hWnd
.text:00404BDD                 call    ds:SendMessageW
.text:00404BE3                 mov     edi, eax
.text:00404BE5                 sub     edi, 1
.text:00404BE8                 js      loc_404C7A
.text:00404BEE                 mov     ebx, [ebp+arg_0]
.text:00404BF1
.text:00404BF1 loc_404BF1:                             ; CODE XREF: sub_404B9F+D2↓j
.text:00404BF1                 push    0F000h          ; lParam
.text:00404BF6                 push    edi             ; wParam
.text:00404BF7                 push    102Ch           ; Msg
.text:00404BFC                 push    dword ptr [esi+0A0h] ; hWnd
.text:00404C02                 mov     [ebp+var_3C], edi
.text:00404C05                 call    ds:SendMessageW
.text:00404C0B                 shr     eax, 0Ch
.text:00404C0E                 dec     eax
.text:00404C0F                 cmp     eax, ebx
.text:00404C11                 jz      short loc_404C49
.text:00404C13                 mov     eax, ebx
.text:00404C15                 mov     [ebp+var_6C], 0F000h
.text:00404C1C                 neg     eax
.text:00404C1E                 mov     ecx, 1000h
.text:00404C23                 sbb     eax, eax
.text:00404C25                 and     eax, ecx
.text:00404C27                 add     eax, ecx
.text:00404C29                 mov     [ebp+var_70], eax
.text:00404C2C                 lea     eax, [ebp+lParam]
.text:00404C2F                 push    eax             ; lParam
.text:00404C30                 push    edi             ; wParam
.text:00404C31                 push    102Bh           ; Msg
.text:00404C36                 push    dword ptr [esi+0A0h] ; hWnd
.text:00404C3C                 call    ds:SendMessageW
.text:00404C42                 mov     [ebp+var_4], 1
.text:00404C49
.text:00404C49 loc_404C49:                             ; CODE XREF: sub_404B9F+72↑j
.text:00404C49                 lea     eax, [ebp+var_40]
.text:00404C4C                 push    eax             ; lParam
.text:00404C4D                 push    0               ; wParam
.text:00404C4F                 push    104Bh           ; Msg
.text:00404C54                 push    dword ptr [esi+0A0h] ; hWnd
.text:00404C5A                 call    ds:SendMessageW
.text:00404C60                 test    eax, eax
.text:00404C62                 jz      short loc_404C6E
.text:00404C64                 mov     eax, [ebp+var_20]
.text:00404C67                 test    eax, eax
.text:00404C69                 jz      short loc_404C6E
.text:00404C6B                 mov     [eax+10h], ebx
.text:00404C6E
.text:00404C6E loc_404C6E:                             ; CODE XREF: sub_404B9F+C3↑j
.text:00404C6E                                         ; sub_404B9F+CA↑j
.text:00404C6E                 sub     edi, 1
.text:00404C71                 jns     loc_404BF1
.text:00404C77                 mov     ebx, [ebp+var_4]
.text:00404C7A
.text:00404C7A loc_404C7A:                             ; CODE XREF: sub_404B9F+49↑j
.text:00404C7A                 and     dword ptr [esi+0A4h], 0
.text:00404C81                 mov     ecx, esi
.text:00404C83                 call    sub_405978
.text:00404C88                 pop     edi
.text:00404C89                 test    ebx, ebx
.text:00404C8B                 jz      short loc_404C9F
.text:00404C8D                 xor     eax, eax
.text:00404C8F                 mov     ecx, esi
.text:00404C91                 inc     eax
.text:00404C92                 push    eax
.text:00404C93                 mov     [esi+9Ch], eax
.text:00404C99                 call    ds:?SetModified@CPropertyPage@@QAEXH@Z ; CPropertyPage::SetModified(int)
.text:00404C9F
.text:00404C9F loc_404C9F:                             ; CODE XREF: sub_404B9F+2F↑j
.text:00404C9F                                         ; sub_404B9F+EC↑j
.text:00404C9F                 pop     esi
.text:00404CA0                 pop     ebx
.text:00404CA1                 mov     esp, ebp
.text:00404CA3                 pop     ebp
.text:00404CA4                 retn    4
.text:00404CA4 sub_404B9F      endp
.text:00404CA4
.text:00404CA7
.text:00404CA7 ; =============== S U B R O U T I N E =======================================
.text:00404CA7
.text:00404CA7 ; Attributes: bp-based frame
.text:00404CA7
.text:00404CA7 sub_404CA7      proc near               ; CODE XREF: sub_405800+2F↓p
.text:00404CA7
.text:00404CA7 lParam          = dword ptr -70h
.text:00404CA7 var_6C          = dword ptr -6Ch
.text:00404CA7 var_68          = dword ptr -68h
.text:00404CA7 var_50          = dword ptr -50h
.text:00404CA7 hCursor         = dword ptr -34h
.text:00404CA7 var_30          = dword ptr -30h
.text:00404CA7 var_2C          = dword ptr -2Ch
.text:00404CA7 var_28          = dword ptr -28h
.text:00404CA7 hSCManager      = dword ptr -24h
.text:00404CA7 var_20          = dword ptr -20h
.text:00404CA7 hService        = dword ptr -1Ch
.text:00404CA7 wParam          = dword ptr -18h
.text:00404CA7 var_14          = dword ptr -14h
.text:00404CA7 var_4           = dword ptr -4
.text:00404CA7 arg_4           = dword ptr  0Ch
.text:00404CA7
.text:00404CA7 ; FUNCTION CHUNK AT .text:00410C7B SIZE 00000025 BYTES
.text:00404CA7
.text:00404CA7 ; __unwind { // loc_410C7B
.text:00404CA7                 push    64h
.text:00404CA9                 mov     eax, offset loc_410C7B
.text:00404CAE                 call    __EH_prolog3_GS
.text:00404CB3                 mov     edi, ecx
.text:00404CB5                 mov     [ebp+var_30], edi
.text:00404CB8                 xor     ebx, ebx
.text:00404CBA                 push    7F02h           ; lpCursorName
.text:00404CBF                 mov     esi, ebx
.text:00404CC1                 push    ebx             ; hInstance
.text:00404CC2                 mov     [ebp+var_14], esi
.text:00404CC5                 call    ds:LoadCursorW
.text:00404CCB                 push    eax             ; hCursor
.text:00404CCC                 call    ds:SetCursor
.text:00404CD2                 push    0F003Fh         ; dwDesiredAccess
.text:00404CD7                 push    ebx             ; lpDatabaseName
.text:00404CD8                 push    ebx             ; lpMachineName
.text:00404CD9                 mov     [ebp+hCursor], eax
.text:00404CDC                 call    ds:OpenSCManagerW
.text:00404CE2                 mov     [ebp+hSCManager], eax
.text:00404CE5                 test    eax, eax
.text:00404CE7                 jnz     short loc_404CFB
.text:00404CE9                 mov     ebx, 80004005h
.text:00404CEE                 call    ds:GetLastError
.text:00404CF4                 mov     esi, eax
.text:00404CF6                 jmp     loc_404ECD
.text:00404CFB ; ---------------------------------------------------------------------------
.text:00404CFB
.text:00404CFB loc_404CFB:                             ; CODE XREF: sub_404CA7+40↑j
.text:00404CFB                 push    ebx             ; lParam
.text:00404CFC                 push    ebx             ; wParam
.text:00404CFD                 push    1004h           ; Msg
.text:00404D02                 push    dword ptr [edi+0A0h] ; hWnd
.text:00404D08                 mov     [ebp+lParam], 4
.text:00404D0F                 mov     [ebp+var_68], ebx
.text:00404D12                 call    ds:SendMessageW
.text:00404D18                 jmp     loc_404EAE
.text:00404D1D ; ---------------------------------------------------------------------------
.text:00404D1D
.text:00404D1D loc_404D1D:                             ; CODE XREF: sub_404CA7+20D↓j
.text:00404D1D                 mov     [ebp+var_6C], eax
.text:00404D20                 lea     eax, [ebp+lParam]
.text:00404D23                 push    eax             ; lParam
.text:00404D24                 push    ebx             ; wParam
.text:00404D25                 push    104Bh           ; Msg
.text:00404D2A                 push    dword ptr [edi+0A0h] ; hWnd
.text:00404D30                 call    ds:SendMessageW
.text:00404D36                 test    eax, eax
.text:00404D38                 jz      loc_404EA8
.text:00404D3E                 mov     esi, [ebp+var_50]
.text:00404D41                 mov     [ebp+var_2C], esi
.text:00404D44                 test    esi, esi
.text:00404D46                 jz      loc_404EA8
.text:00404D4C                 push    3               ; dwDesiredAccess
.text:00404D4E                 push    dword ptr [esi] ; lpServiceName
.text:00404D50                 push    [ebp+hSCManager] ; hSCManager
.text:00404D53                 call    ds:OpenServiceW
.text:00404D59                 mov     [ebp+hService], eax
.text:00404D5C                 test    eax, eax
.text:00404D5E                 jz      loc_404E53
.text:00404D64                 lea     ecx, [ebp+var_20]
.text:00404D67                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00404D6D                 lea     eax, [ebp+var_20]
.text:00404D70                 mov     [ebp+var_4], ebx
.text:00404D73                 push    eax             ; int
.text:00404D74                 lea     eax, [ebp+var_28]
.text:00404D77                 mov     ecx, edi
.text:00404D79                 push    eax             ; int
.text:00404D7A                 push    [ebp+hService]  ; hService
.text:00404D7D                 call    sub_404EFD
.text:00404D82                 test    eax, eax
.text:00404D84                 js      loc_404E38
.text:00404D8A                 mov     eax, [ebp+var_28]
.text:00404D8D                 cmp     eax, 4
.text:00404D90                 jz      short loc_404DEC
.text:00404D92                 mov     ecx, edi
.text:00404D94                 push    esi
.text:00404D95                 cmp     [esi+10h], ebx
.text:00404D98                 jnz     loc_404E33
.text:00404D9E                 mov     [esi+14h], eax
.text:00404DA1                 call    sub_405AC6
.text:00404DA6                 test    eax, eax
.text:00404DA8                 jnz     short loc_404DB9
.text:00404DAA
.text:00404DAA loc_404DAA:                             ; CODE XREF: sub_404CA7+135↓j
.text:00404DAA                 push    [ebp+wParam]    ; wParam
.text:00404DAD                 mov     ecx, edi
.text:00404DAF                 push    1               ; int
.text:00404DB1                 push    esi             ; int
.text:00404DB2                 call    sub_405A71
.text:00404DB7                 jmp     short loc_404E30
.text:00404DB9 ; ---------------------------------------------------------------------------
.text:00404DB9
.text:00404DB9 loc_404DB9:                             ; CODE XREF: sub_404CA7+101↑j
.text:00404DB9                 push    ebx             ; lpDisplayName
.text:00404DBA                 push    ebx             ; lpPassword
.text:00404DBB                 push    ebx             ; lpServiceStartName
.text:00404DBC                 push    ebx             ; lpDependencies
.text:00404DBD                 push    ebx             ; lpdwTagId
.text:00404DBE                 push    ebx             ; lpLoadOrderGroup
.text:00404DBF                 push    ebx             ; lpBinaryPathName
.text:00404DC0                 push    0FFFFFFFFh      ; dwErrorControl
.text:00404DC2                 push    4               ; dwStartType
.text:00404DC4                 push    0FFFFFFFFh      ; dwServiceType
.text:00404DC6                 push    [ebp+hService]  ; hService
.text:00404DC9                 call    ds:ChangeServiceConfigW
.text:00404DCF                 test    eax, eax
.text:00404DD1                 jnz     short loc_404DDE
.text:00404DD3                 call    ds:GetLastError
.text:00404DD9                 mov     [ebp+var_14], eax
.text:00404DDC                 jmp     short loc_404DAA
.text:00404DDE ; ---------------------------------------------------------------------------
.text:00404DDE
.text:00404DDE loc_404DDE:                             ; CODE XREF: sub_404CA7+12A↑j
.text:00404DDE                 push    ebx
.text:00404DDF                 push    [ebp+wParam]
.text:00404DE2                 mov     ecx, edi
.text:00404DE4                 push    esi
.text:00404DE5                 call    sub_405F2F
.text:00404DEA                 jmp     short loc_404E38
.text:00404DEC ; ---------------------------------------------------------------------------
.text:00404DEC
.text:00404DEC loc_404DEC:                             ; CODE XREF: sub_404CA7+E9↑j
.text:00404DEC                 cmp     [esi+10h], ebx
.text:00404DEF                 jz      short loc_404E38
.text:00404DF1                 push    ebx             ; lpDisplayName
.text:00404DF2                 push    ebx             ; lpPassword
.text:00404DF3                 push    ebx             ; lpServiceStartName
.text:00404DF4                 push    ebx             ; lpDependencies
.text:00404DF5                 push    ebx             ; lpdwTagId
.text:00404DF6                 push    ebx             ; lpLoadOrderGroup
.text:00404DF7                 push    ebx             ; lpBinaryPathName
.text:00404DF8                 push    0FFFFFFFFh      ; dwErrorControl
.text:00404DFA                 push    dword ptr [esi+14h] ; dwStartType
.text:00404DFD                 push    0FFFFFFFFh      ; dwServiceType
.text:00404DFF                 push    [ebp+hService]  ; hService
.text:00404E02                 call    ds:ChangeServiceConfigW
.text:00404E08                 mov     ecx, edi
.text:00404E0A                 test    eax, eax
.text:00404E0C                 jnz     short loc_404E25
.text:00404E0E                 push    [ebp+wParam]    ; wParam
.text:00404E11                 push    ebx             ; int
.text:00404E12                 push    esi             ; int
.text:00404E13                 call    sub_405A71
.text:00404E18                 call    ds:GetLastError
.text:00404E1E                 mov     esi, eax
.text:00404E20                 mov     [ebp+var_14], esi
.text:00404E23                 jmp     short loc_404E3B
.text:00404E25 ; ---------------------------------------------------------------------------
.text:00404E25
.text:00404E25 loc_404E25:                             ; CODE XREF: sub_404CA7+165↑j
.text:00404E25                 push    1
.text:00404E27                 push    [ebp+wParam]
.text:00404E2A                 push    esi
.text:00404E2B                 call    sub_405F2F
.text:00404E30
.text:00404E30 loc_404E30:                             ; CODE XREF: sub_404CA7+110↑j
.text:00404E30                 mov     ecx, edi
.text:00404E32                 push    esi
.text:00404E33
.text:00404E33 loc_404E33:                             ; CODE XREF: sub_404CA7+F1↑j
.text:00404E33                 call    sub_405D0B
.text:00404E38
.text:00404E38 loc_404E38:                             ; CODE XREF: sub_404CA7+DD↑j
.text:00404E38                                         ; sub_404CA7+143↑j ...
.text:00404E38                 mov     esi, [ebp+var_14]
.text:00404E3B
.text:00404E3B loc_404E3B:                             ; CODE XREF: sub_404CA7+17C↑j
.text:00404E3B                 push    [ebp+hService]  ; hSCObject
.text:00404E3E                 call    ds:CloseServiceHandle
.text:00404E44                 or      [ebp+var_4], 0FFFFFFFFh
.text:00404E48                 lea     ecx, [ebp+var_20]
.text:00404E4B                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00404E51                 jmp     short loc_404EAB
.text:00404E53 ; ---------------------------------------------------------------------------
.text:00404E53
.text:00404E53 loc_404E53:                             ; CODE XREF: sub_404CA7+B7↑j
.text:00404E53                 call    ds:GetLastError
.text:00404E59                 mov     ebx, [esi]
.text:00404E5B                 mov     [ebp+var_14], eax
.text:00404E5E                 mov     eax, [edi+90h]
.text:00404E64                 push    ecx
.text:00404E65                 mov     esi, [eax+14h]
.text:00404E68                 mov     ecx, esi
.text:00404E6A                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00404E70                 lea     ecx, [edi+90h]
.text:00404E76                 call    esi
.text:00404E78                 mov     edx, ebx
.text:00404E7A                 mov     ecx, eax
.text:00404E7C                 call    ?OpenRegKey@@YGPAUHKEY__@@PBG0K@Z ; OpenRegKey(ushort const *,ushort const *,ulong)
.text:00404E81                 test    eax, eax
.text:00404E83                 jz      short loc_404E92
.text:00404E85                 push    eax             ; hKey
.text:00404E86                 call    ds:RegCloseKey
.text:00404E8C                 xor     ebx, ebx
.text:00404E8E                 mov     eax, ebx
.text:00404E90                 jmp     short loc_404E97
.text:00404E92 ; ---------------------------------------------------------------------------
.text:00404E92
.text:00404E92 loc_404E92:                             ; CODE XREF: sub_404CA7+1DC↑j
.text:00404E92                 xor     eax, eax
.text:00404E94                 inc     eax
.text:00404E95                 xor     ebx, ebx
.text:00404E97
.text:00404E97 loc_404E97:                             ; CODE XREF: sub_404CA7+1E9↑j
.text:00404E97                 push    [ebp+wParam]    ; wParam
.text:00404E9A                 mov     edi, [ebp+var_30]
.text:00404E9D                 mov     ecx, edi
.text:00404E9F                 push    eax             ; int
.text:00404EA0                 push    [ebp+var_2C]    ; int
.text:00404EA3                 call    sub_405A71
.text:00404EA8
.text:00404EA8 loc_404EA8:                             ; CODE XREF: sub_404CA7+91↑j
.text:00404EA8                                         ; sub_404CA7+9F↑j
.text:00404EA8                 mov     esi, [ebp+var_14]
.text:00404EAB
.text:00404EAB loc_404EAB:                             ; CODE XREF: sub_404CA7+1AA↑j
.text:00404EAB                 mov     eax, [ebp+wParam]
.text:00404EAE
.text:00404EAE loc_404EAE:                             ; CODE XREF: sub_404CA7+71↑j
.text:00404EAE                 sub     eax, 1
.text:00404EB1                 mov     [ebp+wParam], eax
.text:00404EB4                 jns     loc_404D1D
.text:00404EBA                 push    [ebp+hSCManager] ; hSCObject
.text:00404EBD                 call    ds:CloseServiceHandle
.text:00404EC3                 sub     esi, 5
.text:00404EC6                 neg     esi
.text:00404EC8                 sbb     esi, esi
.text:00404ECA                 and     esi, [ebp+var_14]
.text:00404ECD
.text:00404ECD loc_404ECD:                             ; CODE XREF: sub_404CA7+4F↑j
.text:00404ECD                 mov     eax, [ebp+hCursor]
.text:00404ED0                 test    eax, eax
.text:00404ED2                 jz      short loc_404EDB
.text:00404ED4                 push    eax             ; hCursor
.text:00404ED5                 call    ds:SetCursor
.text:00404EDB
.text:00404EDB loc_404EDB:                             ; CODE XREF: sub_404CA7+22B↑j
.text:00404EDB                 test    esi, esi
.text:00404EDD                 jz      short loc_404EF5
.text:00404EDF                 jg      short loc_404EE5
.text:00404EE1                 mov     ebx, esi
.text:00404EE3                 jmp     short loc_404EEE
.text:00404EE5 ; ---------------------------------------------------------------------------
.text:00404EE5
.text:00404EE5 loc_404EE5:                             ; CODE XREF: sub_404CA7+238↑j
.text:00404EE5                 movzx   ebx, si
.text:00404EE8                 or      ebx, 80070000h
.text:00404EEE
.text:00404EEE loc_404EEE:                             ; CODE XREF: sub_404CA7+23C↑j
.text:00404EEE                 mov     edx, ebx
.text:00404EF0                 call    sub_40D5E8
.text:00404EF5
.text:00404EF5 loc_404EF5:                             ; CODE XREF: sub_404CA7+236↑j
.text:00404EF5                 mov     eax, ebx
.text:00404EF7                 call    __EH_epilog3_GS
.text:00404EFC                 retn
.text:00404EFC ; } // starts at 404CA7
.text:00404EFC sub_404CA7      endp
.text:00404EFC
.text:00404EFD
.text:00404EFD ; =============== S U B R O U T I N E =======================================
.text:00404EFD
.text:00404EFD ; Attributes: bp-based frame
.text:00404EFD
.text:00404EFD ; int __stdcall sub_404EFD(SC_HANDLE hService, int, int)
.text:00404EFD sub_404EFD      proc near               ; CODE XREF: sub_404316+208↑p
.text:00404EFD                                         ; sub_404CA7+D6↑p
.text:00404EFD
.text:00404EFD pcbBytesNeeded  = dword ptr -4
.text:00404EFD hService        = dword ptr  8
.text:00404EFD arg_4           = dword ptr  0Ch
.text:00404EFD arg_8           = dword ptr  10h
.text:00404EFD
.text:00404EFD                 mov     edi, edi
.text:00404EFF                 push    ebp
.text:00404F00                 mov     ebp, esp
.text:00404F02                 push    ecx
.text:00404F03                 push    esi
.text:00404F04                 push    edi
.text:00404F05                 mov     edi, ecx
.text:00404F07                 lea     eax, [ebp+pcbBytesNeeded]
.text:00404F0A                 push    eax             ; pcbBytesNeeded
.text:00404F0B                 xor     esi, esi
.text:00404F0D                 push    dword ptr [edi+0ACh] ; cbBufSize
.text:00404F13                 push    dword ptr [edi+0A8h] ; lpServiceConfig
.text:00404F19                 push    [ebp+hService]  ; hService
.text:00404F1C                 call    ds:QueryServiceConfigW
.text:00404F22                 test    eax, eax
.text:00404F24                 jnz     short loc_404F87
.text:00404F26                 call    ds:GetLastError
.text:00404F2C                 cmp     eax, 7Ah ; 'z'
.text:00404F2F                 jz      short loc_404F38
.text:00404F31
.text:00404F31 loc_404F31:                             ; CODE XREF: sub_404EFD+88↓j
.text:00404F31                 mov     esi, 80004005h
.text:00404F36                 jmp     short loc_404FA7
.text:00404F38 ; ---------------------------------------------------------------------------
.text:00404F38
.text:00404F38 loc_404F38:                             ; CODE XREF: sub_404EFD+32↑j
.text:00404F38                 mov     eax, [edi+0A8h]
.text:00404F3E                 test    eax, eax
.text:00404F40                 jz      short loc_404F49
.text:00404F42                 push    eax             ; Block
.text:00404F43                 call    free
.text:00404F48                 pop     ecx
.text:00404F49
.text:00404F49 loc_404F49:                             ; CODE XREF: sub_404EFD+43↑j
.text:00404F49                 push    offset unk_413464
.text:00404F4E                 push    [ebp+pcbBytesNeeded]
.text:00404F51                 call    sub_410236
.text:00404F56                 pop     ecx
.text:00404F57                 pop     ecx
.text:00404F58                 mov     ecx, eax
.text:00404F5A                 mov     [edi+0A8h], ecx
.text:00404F60                 test    ecx, ecx
.text:00404F62                 jnz     short loc_404F6B
.text:00404F64                 mov     esi, 8007000Eh
.text:00404F69                 jmp     short loc_404FA7
.text:00404F6B ; ---------------------------------------------------------------------------
.text:00404F6B
.text:00404F6B loc_404F6B:                             ; CODE XREF: sub_404EFD+65↑j
.text:00404F6B                 mov     eax, [ebp+pcbBytesNeeded]
.text:00404F6E                 lea     edx, [ebp+pcbBytesNeeded]
.text:00404F71                 push    edx             ; pcbBytesNeeded
.text:00404F72                 push    eax             ; cbBufSize
.text:00404F73                 push    ecx             ; lpServiceConfig
.text:00404F74                 push    [ebp+hService]  ; hService
.text:00404F77                 mov     [edi+0ACh], eax
.text:00404F7D                 call    ds:QueryServiceConfigW
.text:00404F83                 test    eax, eax
.text:00404F85                 jz      short loc_404F31
.text:00404F87
.text:00404F87 loc_404F87:                             ; CODE XREF: sub_404EFD+27↑j
.text:00404F87                 mov     ecx, [edi+0A8h]
.text:00404F8D                 mov     edx, [ecx+4]
.text:00404F90                 mov     ecx, [ebp+arg_4]
.text:00404F93                 mov     [ecx], edx
.text:00404F95                 mov     ecx, [edi+0A8h]
.text:00404F9B                 push    dword ptr [ecx+0Ch]
.text:00404F9E                 mov     ecx, [ebp+arg_8]
.text:00404FA1                 call    ds:??4CString@@QAEABV0@PBG@Z ; CString::operator=(ushort const *)
.text:00404FA7
.text:00404FA7 loc_404FA7:                             ; CODE XREF: sub_404EFD+39↑j
.text:00404FA7                                         ; sub_404EFD+6C↑j
.text:00404FA7                 pop     edi
.text:00404FA8                 mov     eax, esi
.text:00404FAA                 pop     esi
.text:00404FAB                 mov     esp, ebp
.text:00404FAD                 pop     ebp
.text:00404FAE                 retn    0Ch
.text:00404FAE sub_404EFD      endp
.text:00404FAE
.text:00404FB1
.text:00404FB1 ; =============== S U B R O U T I N E =======================================
.text:00404FB1
.text:00404FB1 ; Attributes: bp-based frame
.text:00404FB1
.text:00404FB1 sub_404FB1      proc near               ; CODE XREF: sub_404316+276↑p
.text:00404FB1
.text:00404FB1 lpSrc           = dword ptr -20h
.text:00404FB1 ppszParameters  = dword ptr -1Ch
.text:00404FB1 var_18          = dword ptr -18h
.text:00404FB1 ppszApplication = dword ptr -14h
.text:00404FB1 var_10          = dword ptr -10h
.text:00404FB1 var_4           = dword ptr -4
.text:00404FB1 arg_4           = dword ptr  0Ch
.text:00404FB1
.text:00404FB1 ; FUNCTION CHUNK AT .text:0040DC4F SIZE 0000000A BYTES
.text:00404FB1 ; FUNCTION CHUNK AT .text:00410CA0 SIZE 00000023 BYTES
.text:00404FB1
.text:00404FB1 ; __unwind { // loc_410CA8
.text:00404FB1                 push    14h
.text:00404FB3                 mov     eax, offset loc_410CA8
.text:00404FB8                 call    __EH_prolog3
.text:00404FBD                 mov     edi, edx
.text:00404FBF                 mov     [ebp+var_10], edi
.text:00404FC2                 mov     eax, ecx
.text:00404FC4                 mov     [ebp+lpSrc], eax
.text:00404FC7                 xor     ebx, ebx
.text:00404FC9                 xor     esi, esi
.text:00404FCB                 and     [ebp+ppszApplication], ebx
.text:00404FCE                 and     [ebp+ppszParameters], ebx
.text:00404FD1                 mov     [ebp+var_18], esi
.text:00404FD4 ;   try {
.text:00404FD4                 and     [ebp+var_4], esi
.text:00404FD7                 test    eax, eax
.text:00404FD9                 jnz     short loc_404FE5
.text:00404FDB                 mov     edi, 80070057h
.text:00404FE0                 jmp     loc_40507D
.text:00404FE5 ; ---------------------------------------------------------------------------
.text:00404FE5
.text:00404FE5 loc_404FE5:                             ; CODE XREF: sub_404FB1+28↑j
.text:00404FE5                 mov     ecx, edi
.text:00404FE7                 call    ds:?Empty@CString@@QAEXXZ ; CString::Empty(void)
.text:00404FED                 push    offset unk_413464
.text:00404FF2                 push    822h
.text:00404FF7                 call    sub_410236
.text:00404FFC                 mov     ebx, eax
.text:00404FFE                 pop     ecx
.text:00404FFF                 pop     ecx
.text:00405000                 test    ebx, ebx
.text:00405002                 jnz     short loc_40500B
.text:00405004                 mov     edi, 8007000Eh
.text:00405009                 jmp     short loc_40507D
.text:0040500B ; ---------------------------------------------------------------------------
.text:0040500B
.text:0040500B loc_40500B:                             ; CODE XREF: sub_404FB1+51↑j
.text:0040500B                 mov     edi, 410h
.text:00405010                 push    edi             ; nSize
.text:00405011                 push    ebx             ; lpDst
.text:00405012                 push    [ebp+lpSrc]     ; lpSrc
.text:00405015                 call    ds:ExpandEnvironmentStringsW
.text:0040501B                 test    eax, eax
.text:0040501D                 jz      short loc_405078
.text:0040501F                 cmp     eax, edi
.text:00405021                 ja      short loc_405078
.text:00405023                 lea     eax, [ebp+ppszParameters]
.text:00405026                 push    eax             ; ppszParameters
.text:00405027                 push    0               ; ppszCommandLine
.text:00405029                 lea     eax, [ebp+ppszApplication]
.text:0040502C                 push    eax             ; ppszApplication
.text:0040502D                 push    ebx             ; pszCmdTemplate
.text:0040502E                 call    ds:SHEvaluateSystemCommandTemplate
.text:00405034                 mov     edi, eax
.text:00405036                 test    edi, edi
.text:00405038                 js      short loc_405078
.text:0040503A                 push    ecx             ; int
.text:0040503B                 push    [ebp+ppszApplication] ; lpWideCharStr
.text:0040503E                 lea     ecx, [ebp+var_18]
.text:00405041                 call    sub_40DDA3
.text:00405046                 mov     esi, [ebp+var_18]
.text:00405049                 test    eax, eax
.text:0040504B                 js      short loc_40507D
.text:0040504D                 test    esi, esi
.text:0040504F                 jz      short loc_405059
.text:00405051                 lea     eax, [esi+248h]
.text:00405057                 jmp     short loc_40505B
.text:00405059 ; ---------------------------------------------------------------------------
.text:00405059
.text:00405059 loc_405059:                             ; CODE XREF: sub_404FB1+9E↑j
.text:00405059                 xor     eax, eax
.text:0040505B
.text:0040505B loc_40505B:                             ; CODE XREF: sub_404FB1+A6↑j
.text:0040505B                 mov     ecx, [ebp+var_10]
.text:0040505E                 push    eax
.text:0040505F                 call    ds:??4CString@@QAEABV0@PBG@Z ; CString::operator=(ushort const *)
.text:00405065                 mov     ecx, [ebp+var_10]
.text:00405068                 mov     eax, [ecx]
.text:0040506A                 cmp     dword ptr [eax-8], 0
.text:0040506E                 jz      short loc_40507D
.text:00405070                 call    ds:?TrimLeft@CString@@QAEXXZ ; CString::TrimLeft(void)
.text:00405076                 jmp     short loc_40507D
.text:00405078 ; ---------------------------------------------------------------------------
.text:00405078
.text:00405078 loc_405078:                             ; CODE XREF: sub_404FB1+6C↑j
.text:00405078                                         ; sub_404FB1+70↑j ...
.text:00405078                 mov     edi, 80004005h
.text:0040507D
.text:0040507D loc_40507D:                             ; CODE XREF: sub_404FB1+2F↑j
.text:0040507D                                         ; sub_404FB1+58↑j ...
.text:0040507D                 mov     eax, [ebp+var_10]
.text:00405080                 mov     eax, [eax]
.text:00405082                 cmp     dword ptr [eax-8], 0
.text:00405086                 jnz     short loc_40509C
.text:00405088                 mov     ecx, [ebp+var_10]
.text:0040508B                 push    7Bh ; '{'
.text:0040508D                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:00405093                 test    eax, eax
.text:00405095                 jg      short loc_40509C
.text:00405097                 mov     edi, 80004005h
.text:0040509C
.text:0040509C loc_40509C:                             ; CODE XREF: sub_404FB1+D5↑j
.text:0040509C                                         ; sub_404FB1+E4↑j
.text:0040509C                 test    ebx, ebx
.text:0040509E                 jz      short loc_4050A7
.text:004050A0                 push    ebx             ; Block
.text:004050A1                 call    free
.text:004050A6                 pop     ecx
.text:004050A7
.text:004050A7 loc_4050A7:                             ; CODE XREF: sub_404FB1+ED↑j
.text:004050A7                 cmp     [ebp+ppszApplication], 0
.text:004050AB                 jz      short loc_4050B6
.text:004050AD                 push    [ebp+ppszApplication] ; pv
.text:004050B0                 call    ds:CoTaskMemFree
.text:004050B6
.text:004050B6 loc_4050B6:                             ; CODE XREF: sub_404FB1+FA↑j
.text:004050B6                 cmp     [ebp+ppszParameters], 0
.text:004050BA                 jz      short loc_4050C5
.text:004050BC                 push    [ebp+ppszParameters] ; pv
.text:004050BF                 call    ds:CoTaskMemFree
.text:004050C5
.text:004050C5 loc_4050C5:                             ; CODE XREF: sub_404FB1+109↑j
.text:004050C5                 push    esi
.text:004050C6                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:004050CC                 pop     ecx
.text:004050CD                 mov     eax, edi
.text:004050CF                 call    __EH_epilog3
.text:004050D4                 retn    8
.text:004050D4 ;   } // starts at 404FD4
.text:004050D4 ; } // starts at 404FB1
.text:004050D4 sub_404FB1      endp
.text:004050D4
.text:004050D7
.text:004050D7 ; =============== S U B R O U T I N E =======================================
.text:004050D7
.text:004050D7 ; Attributes: bp-based frame
.text:004050D7
.text:004050D7 sub_4050D7      proc near               ; CODE XREF: sub_405620+28↓p
.text:004050D7
.text:004050D7 lParam          = dword ptr -74h
.text:004050D7 var_70          = dword ptr -70h
.text:004050D7 var_6C          = dword ptr -6Ch
.text:004050D7 var_54          = dword ptr -54h
.text:004050D7 var_38          = dword ptr -38h
.text:004050D7 var_34          = dword ptr -34h
.text:004050D7 var_30          = dword ptr -30h
.text:004050D7 var_2C          = dword ptr -2Ch
.text:004050D7 var_28          = dword ptr -28h
.text:004050D7 var_24          = dword ptr -24h
.text:004050D7 var_20          = dword ptr -20h
.text:004050D7 var_1C          = dword ptr -1Ch
.text:004050D7 var_18          = dword ptr -18h
.text:004050D7 var_4           = dword ptr -4
.text:004050D7 arg_4           = dword ptr  0Ch
.text:004050D7
.text:004050D7 ; FUNCTION CHUNK AT .text:00410CC3 SIZE 00000030 BYTES
.text:004050D7
.text:004050D7 ; __unwind { // loc_410CCE
.text:004050D7                 push    68h
.text:004050D9                 mov     eax, offset loc_410CCE
.text:004050DE                 call    __EH_prolog3_catch_GS
.text:004050E3                 mov     edi, ecx
.text:004050E5                 mov     [ebp+var_18], edi
.text:004050E8                 xor     ebx, ebx
.text:004050EA                 mov     [ebp+lParam], 4
.text:004050F1                 push    ebx             ; lParam
.text:004050F2                 push    ebx             ; wParam
.text:004050F3                 push    1004h           ; Msg
.text:004050F8                 push    dword ptr [edi+0A0h] ; hWnd
.text:004050FE                 mov     [ebp+var_6C], ebx
.text:00405101                 mov     [ebp+var_24], ebx
.text:00405104                 call    ds:SendMessageW
.text:0040510A
.text:0040510A loc_40510A:                             ; CODE XREF: sub_4050D7+FE↓j
.text:0040510A                 dec     eax
.text:0040510B                 mov     [ebp+var_2C], eax
.text:0040510E                 test    eax, eax
.text:00405110                 js      loc_4052B6
.text:00405116                 mov     [ebp+var_70], eax
.text:00405119                 lea     eax, [ebp+lParam]
.text:0040511C                 push    eax             ; lParam
.text:0040511D                 push    ebx             ; wParam
.text:0040511E                 push    104Bh           ; Msg
.text:00405123                 push    dword ptr [edi+0A0h] ; hWnd
.text:00405129                 call    ds:SendMessageW
.text:0040512F                 test    eax, eax
.text:00405131                 jz      loc_4051D2
.text:00405137                 mov     esi, [ebp+var_54]
.text:0040513A                 mov     [ebp+var_20], esi
.text:0040513D                 test    esi, esi
.text:0040513F                 jz      loc_4051D2
.text:00405145                 lea     eax, [edi+0B8h]
.text:0040514B                 push    ebx
.text:0040514C                 push    dword ptr [esi]
.text:0040514E                 mov     ecx, eax
.text:00405150                 mov     [ebp+var_1C], eax
.text:00405153                 call    ds:?Find@CStringList@@QBEPAU__POSITION@@PBGPAU2@@Z ; CStringList::Find(ushort const *,__POSITION *)
.text:00405159                 push    ecx
.text:0040515A                 mov     ecx, esp
.text:0040515C                 mov     [ebp+var_28], eax
.text:0040515F                 push    esi
.text:00405160                 call    ds:??0CString@@QAE@ABV0@@Z ; CString::CString(CString const &)
.text:00405166                 add     edi, 0D4h ; 'Ô'
.text:0040516C                 lea     ecx, [ebp+var_30]
.text:0040516F                 mov     edx, edi
.text:00405171                 call    sub_4052C3
.text:00405176                 mov     edx, [esi+10h]
.text:00405179                 mov     eax, [ebp+var_28]
.text:0040517C                 test    edx, edx
.text:0040517E                 jz      short loc_4051DE
.text:00405180                 test    eax, eax
.text:00405182                 jz      short loc_4051DA
.text:00405184                 mov     ecx, [ebp+var_1C]
.text:00405187                 push    eax
.text:00405188                 call    ds:?RemoveAt@CStringList@@QAEXPAU__POSITION@@@Z ; CStringList::RemoveAt(__POSITION *)
.text:0040518E                 mov     ecx, [ebp+var_18]
.text:00405191                 mov     eax, [ebp+var_30]
.text:00405194                 cmp     [ecx+0DCh], eax
.text:0040519A                 jz      loc_4052BC
.text:004051A0                 mov     edx, [edi+8]
.text:004051A3                 lea     ecx, [eax+4]
.text:004051A6                 sub     edx, ecx
.text:004051A8                 mov     [ebp+var_1C], ebx
.text:004051AB                 add     edx, 3
.text:004051AE                 shr     edx, 2
.text:004051B1                 cmp     [edi+8], ecx
.text:004051B4                 sbb     esi, esi
.text:004051B6                 not     esi
.text:004051B8                 and     esi, edx
.text:004051BA                 jz      short loc_4051CB
.text:004051BC
.text:004051BC loc_4051BC:                             ; CODE XREF: sub_4050D7+F0↓j
.text:004051BC                 mov     ecx, [eax+4]
.text:004051BF                 inc     ebx
.text:004051C0                 mov     [eax], ecx
.text:004051C2                 lea     eax, [eax+4]
.text:004051C5                 cmp     ebx, esi
.text:004051C7                 jnz     short loc_4051BC
.text:004051C9                 xor     ebx, ebx
.text:004051CB
.text:004051CB loc_4051CB:                             ; CODE XREF: sub_4050D7+E3↑j
.text:004051CB                 add     dword ptr [edi+8], 0FFFFFFFCh
.text:004051CF
.text:004051CF loc_4051CF:                             ; CODE XREF: sub_4050D7+105↓j
.text:004051CF                                         ; sub_4050D7+109↓j ...
.text:004051CF                 mov     edi, [ebp+var_18]
.text:004051D2
.text:004051D2 loc_4051D2:                             ; CODE XREF: sub_4050D7+5A↑j
.text:004051D2                                         ; sub_4050D7+68↑j ...
.text:004051D2                 mov     eax, [ebp+var_2C]
.text:004051D5                 jmp     loc_40510A
.text:004051DA ; ---------------------------------------------------------------------------
.text:004051DA
.text:004051DA loc_4051DA:                             ; CODE XREF: sub_4050D7+AB↑j
.text:004051DA                 test    edx, edx
.text:004051DC                 jnz     short loc_4051CF
.text:004051DE
.text:004051DE loc_4051DE:                             ; CODE XREF: sub_4050D7+A7↑j
.text:004051DE                 test    eax, eax
.text:004051E0                 jnz     short loc_4051CF
.text:004051E2                 push    8
.text:004051E4 ;   try {
.text:004051E4                 mov     [ebp+var_4], ebx
.text:004051E7                 call    ds:__imp_??2@YAPAXI@Z ; operator new(uint)
.text:004051ED                 mov     esi, eax
.text:004051EF                 pop     ecx
.text:004051F0                 mov     [ebp+var_34], esi
.text:004051F0 ;   } // starts at 4051E4
.text:004051F3 ;   try {
.text:004051F3                 mov     byte ptr [ebp+var_4], 1
.text:004051F7                 test    esi, esi
.text:004051F9                 jz      short loc_405205
.text:004051FB                 mov     ecx, esi
.text:004051FD                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00405203                 jmp     short loc_405207
.text:00405205 ; ---------------------------------------------------------------------------
.text:00405205
.text:00405205 loc_405205:                             ; CODE XREF: sub_4050D7+122↑j
.text:00405205                 mov     esi, ebx
.text:00405205 ;   } // starts at 4051F3
.text:00405207
.text:00405207 loc_405207:                             ; CODE XREF: sub_4050D7+12C↑j
.text:00405207 ;   try {
.text:00405207                 mov     byte ptr [ebp+var_4], bl
.text:0040520A                 mov     [ebp+var_24], esi
.text:0040520D                 test    esi, esi
.text:0040520F                 jz      short loc_405225
.text:00405211                 push    [ebp+var_20]
.text:00405214                 mov     ecx, esi
.text:00405216                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:0040521C                 mov     eax, [ebp+var_20]
.text:0040521F                 mov     eax, [eax+20h]
.text:00405222                 mov     [esi+4], eax
.text:00405222 ;   } // starts at 405207
.text:00405225
.text:00405225 loc_405225:                             ; CODE XREF: sub_4050D7+138↑j
.text:00405225                 or      [ebp+var_4], 0FFFFFFFFh
.text:00405229                 mov     edx, [edi+4]
.text:0040522C                 test    edx, edx
.text:0040522E                 jnz     short loc_405234
.text:00405230                 mov     ecx, ebx
.text:00405232                 jmp     short loc_40523C
.text:00405234 ; ---------------------------------------------------------------------------
.text:00405234
.text:00405234 loc_405234:                             ; CODE XREF: sub_4050D7+157↑j
.text:00405234                 mov     ecx, [edi+8]
.text:00405237                 sub     ecx, edx
.text:00405239                 sar     ecx, 2
.text:0040523C
.text:0040523C loc_40523C:                             ; CODE XREF: sub_4050D7+15B↑j
.text:0040523C                 test    edx, edx
.text:0040523E                 jz      short loc_405259
.text:00405240                 mov     eax, [edi+0Ch]
.text:00405243                 sub     eax, edx
.text:00405245                 sar     eax, 2
.text:00405248                 cmp     ecx, eax
.text:0040524A                 jnb     short loc_405259
.text:0040524C                 mov     eax, [edi+8]
.text:0040524F                 lea     ecx, [eax+4]
.text:00405252                 mov     [eax], esi
.text:00405254                 mov     [edi+8], ecx
.text:00405257                 jmp     short loc_405268
.text:00405259 ; ---------------------------------------------------------------------------
.text:00405259
.text:00405259 loc_405259:                             ; CODE XREF: sub_4050D7+167↑j
.text:00405259                                         ; sub_4050D7+173↑j
.text:00405259                 lea     eax, [ebp+var_24]
.text:0040525C                 push    eax             ; int
.text:0040525D                 push    ecx             ; int
.text:0040525E                 push    dword ptr [edi+8] ; Source
.text:00405261                 mov     ecx, edi
.text:00405263                 call    ?_Insert_n@?$vector@PAU_row@@V?$allocator@PAU_row@@@std@@@std@@IAEXV?$_Vector_iterator@PAU_row@@V?$allocator@PAU_row@@@std@@@2@IABQAU_row@@@Z ; std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)
.text:00405268
.text:00405268 loc_405268:                             ; CODE XREF: sub_4050D7+180↑j
.text:00405268                 push    [ebp+var_20]
.text:0040526B                 mov     ecx, [ebp+var_1C]
.text:0040526E                 call    ds:?AddHead@CStringList@@QAEPAU__POSITION@@ABVCString@@@Z ; CStringList::AddHead(CString const &)
.text:00405274                 jmp     loc_4051CF
.text:00405279 ; ---------------------------------------------------------------------------
.text:00405279
.text:00405279 loc_405279:                             ; DATA XREF: .text:stru_411A20↓o
.text:00405279 ;   catch(CMemoryException *) // owned by 4051E4
.text:00405279 ;   catch(CMemoryException *) // owned by 4051F3
.text:00405279 ;   catch(CMemoryException *) // owned by 405207
.text:00405279                 mov     edi, [ebp+var_38]
.text:0040527C                 xor     ebx, ebx
.text:0040527E                 push    ebx
.text:0040527F                 push    ebx
.text:00405280                 mov     eax, [edi]
.text:00405282                 mov     esi, [eax+18h]
.text:00405285                 mov     ecx, esi
.text:00405287                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040528D                 mov     ecx, edi
.text:0040528F                 call    esi
.text:00405291                 mov     ecx, edi
.text:00405293                 call    ds:?Delete@CException@@QAEXXZ ; CException::Delete(void)
.text:00405299                 mov     esi, [ebp+var_24]
.text:0040529C                 test    esi, esi
.text:0040529E                 jz      short loc_4052B0
.text:004052A0                 mov     ecx, esi
.text:004052A2                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004052A8                 push    esi
.text:004052A9                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:004052AF                 pop     ecx
.text:004052B0
.text:004052B0 loc_4052B0:                             ; CODE XREF: sub_4050D7+1C7↑j
.text:004052B0                 mov     eax, offset loc_4052B6
.text:004052B5                 retn
.text:004052B6 ; ---------------------------------------------------------------------------
.text:004052B6
.text:004052B6 loc_4052B6:                             ; CODE XREF: sub_4050D7+39↑j
.text:004052B6                                         ; sub_4050D7+1DE↑j
.text:004052B6                                         ; DATA XREF: ...
.text:004052B6                 call    __EH_epilog3_catch_GS
.text:004052BB                 retn
.text:004052BC ; ---------------------------------------------------------------------------
.text:004052BC
.text:004052BC loc_4052BC:                             ; CODE XREF: sub_4050D7+C3↑j
.text:004052BC                 mov     edi, ecx
.text:004052BE                 jmp     loc_4051D2
.text:004052BE ; } // starts at 4050D7
.text:004052BE sub_4050D7      endp
.text:004052BE
.text:004052C3
.text:004052C3 ; =============== S U B R O U T I N E =======================================
.text:004052C3
.text:004052C3 ; Attributes: bp-based frame
.text:004052C3
.text:004052C3 sub_4052C3      proc near               ; CODE XREF: sub_4050D7+9A↑p
.text:004052C3                                         ; sub_40530F+BC↓p
.text:004052C3
.text:004052C3 var_4           = dword ptr -4
.text:004052C3 arg_0           = dword ptr  8
.text:004052C3 arg_4           = dword ptr  0Ch
.text:004052C3
.text:004052C3 ; FUNCTION CHUNK AT .text:00410CF3 SIZE 00000024 BYTES
.text:004052C3
.text:004052C3 ; __unwind { // loc_410CFC
.text:004052C3                 push    0
.text:004052C5                 mov     eax, offset loc_410CFC
.text:004052CA                 call    __EH_prolog3
.text:004052CF                 mov     ebx, ecx
.text:004052D1                 mov     esi, [edx+4]
.text:004052D4                 mov     edi, [edx+8]
.text:004052D7                 jmp     short loc_4052EE
.text:004052D9 ; ---------------------------------------------------------------------------
.text:004052D9
.text:004052D9 loc_4052D9:                             ; CODE XREF: sub_4052C3+2D↓j
.text:004052D9                 mov     ecx, [esi]
.text:004052DB                 test    ecx, ecx
.text:004052DD                 jz      short loc_4052EB
.text:004052DF                 push    [ebp+arg_0]
.text:004052E2                 call    ?Compare@CString@@QBEHPBG@Z ; CString::Compare(ushort const *)
.text:004052E7                 test    eax, eax
.text:004052E9                 jz      short loc_40530B
.text:004052EB
.text:004052EB loc_4052EB:                             ; CODE XREF: sub_4052C3+1A↑j
.text:004052EB                 add     esi, 4
.text:004052EE
.text:004052EE loc_4052EE:                             ; CODE XREF: sub_4052C3+14↑j
.text:004052EE                 cmp     esi, edi
.text:004052F0                 jnz     short loc_4052D9
.text:004052F2                 mov     [ebx], edi
.text:004052F4
.text:004052F4 loc_4052F4:                             ; CODE XREF: sub_4052C3+4A↓j
.text:004052F4                 or      [ebp+var_4], 0FFFFFFFFh
.text:004052F8                 lea     ecx, [ebp+arg_0]
.text:004052FB                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00405301                 mov     eax, ebx
.text:00405303                 call    __EH_epilog3
.text:00405308                 retn    4
.text:0040530B ; ---------------------------------------------------------------------------
.text:0040530B
.text:0040530B loc_40530B:                             ; CODE XREF: sub_4052C3+26↑j
.text:0040530B                 mov     [ebx], esi
.text:0040530D                 jmp     short loc_4052F4
.text:0040530D ; } // starts at 4052C3
.text:0040530D sub_4052C3      endp
.text:0040530D
.text:0040530F
.text:0040530F ; =============== S U B R O U T I N E =======================================
.text:0040530F
.text:0040530F ; Attributes: bp-based frame
.text:0040530F
.text:0040530F sub_40530F      proc near               ; CODE XREF: sub_405620+46↓p
.text:0040530F
.text:0040530F var_80          = dword ptr -80h
.text:0040530F var_74          = dword ptr -74h
.text:0040530F var_70          = dword ptr -70h
.text:0040530F lParam          = dword ptr -44h
.text:0040530F var_40          = dword ptr -40h
.text:0040530F var_3C          = dword ptr -3Ch
.text:0040530F var_24          = dword ptr -24h
.text:0040530F var_4           = dword ptr -4
.text:0040530F
.text:0040530F                 mov     edi, edi
.text:00405311                 push    ebp
.text:00405312                 mov     ebp, esp
.text:00405314                 sub     esp, 80h
.text:0040531A                 and     [ebp+var_3C], 0
.text:0040531E                 push    ebx
.text:0040531F                 push    esi
.text:00405320                 push    edi
.text:00405321                 push    0               ; lParam
.text:00405323                 mov     ebx, ecx
.text:00405325                 mov     [ebp+lParam], 4
.text:0040532C                 push    0               ; wParam
.text:0040532E                 push    1004h           ; Msg
.text:00405333                 push    dword ptr [ebx+0A0h] ; hWnd
.text:00405339                 call    ds:SendMessageW
.text:0040533F                 mov     esi, eax
.text:00405341                 jmp     loc_4053F4
.text:00405346 ; ---------------------------------------------------------------------------
.text:00405346
.text:00405346 loc_405346:                             ; CODE XREF: sub_40530F+E8↓j
.text:00405346                 lea     eax, [ebp+lParam]
.text:00405349                 mov     [ebp+var_40], esi
.text:0040534C                 push    eax             ; lParam
.text:0040534D                 push    0               ; wParam
.text:0040534F                 push    104Bh           ; Msg
.text:00405354                 push    dword ptr [ebx+0A0h] ; hWnd
.text:0040535A                 call    ds:SendMessageW
.text:00405360                 test    eax, eax
.text:00405362                 jz      loc_4053F4
.text:00405368                 mov     edi, [ebp+var_24]
.text:0040536B                 test    edi, edi
.text:0040536D                 jz      loc_4053F4
.text:00405373                 push    0
.text:00405375                 push    dword ptr [edi]
.text:00405377                 lea     ecx, [ebx+0B8h]
.text:0040537D                 call    ds:?Find@CStringList@@QBEPAU__POSITION@@PBGPAU2@@Z ; CStringList::Find(ushort const *,__POSITION *)
.text:00405383                 neg     eax
.text:00405385                 mov     [ebp+var_70], 0F000h
.text:0040538C                 mov     ecx, 1000h
.text:00405391                 sbb     eax, eax
.text:00405393                 inc     eax
.text:00405394                 mov     [edi+10h], eax
.text:00405397                 neg     eax
.text:00405399                 sbb     eax, eax
.text:0040539B                 and     eax, ecx
.text:0040539D                 add     eax, ecx
.text:0040539F                 mov     [ebp+var_74], eax
.text:004053A2                 lea     eax, [ebp+var_80]
.text:004053A5                 push    eax             ; lParam
.text:004053A6                 push    esi             ; wParam
.text:004053A7                 push    102Bh           ; Msg
.text:004053AC                 push    dword ptr [ebx+0A0h] ; hWnd
.text:004053B2                 call    ds:SendMessageW
.text:004053B8                 push    ecx
.text:004053B9                 mov     ecx, esp
.text:004053BB                 push    edi
.text:004053BC                 call    ds:??0CString@@QAE@ABV0@@Z ; CString::CString(CString const &)
.text:004053C2                 lea     edx, [ebx+0D4h]
.text:004053C8                 lea     ecx, [ebp+var_4]
.text:004053CB                 call    sub_4052C3
.text:004053D0                 mov     eax, [ebp+var_4]
.text:004053D3                 cmp     [ebx+0DCh], eax
.text:004053D9                 jz      short loc_4053F4
.text:004053DB                 cmp     dword ptr [edi+24h], 1
.text:004053DF                 jnz     short loc_4053F4
.text:004053E1                 mov     eax, [eax]
.text:004053E3                 mov     ecx, ebx
.text:004053E5                 push    0
.text:004053E7                 push    esi
.text:004053E8                 push    edi
.text:004053E9                 mov     eax, [eax+4]
.text:004053EC                 mov     [edi+20h], eax
.text:004053EF                 call    sub_405F7C
.text:004053F4
.text:004053F4 loc_4053F4:                             ; CODE XREF: sub_40530F+32↑j
.text:004053F4                                         ; sub_40530F+53↑j ...
.text:004053F4                 sub     esi, 1
.text:004053F7                 jns     loc_405346
.text:004053FD                 pop     edi
.text:004053FE                 pop     esi
.text:004053FF                 pop     ebx
.text:00405400                 mov     esp, ebp
.text:00405402                 pop     ebp
.text:00405403                 retn
.text:00405403 sub_40530F      endp
.text:00405403
.text:00405403 ; ---------------------------------------------------------------------------
.text:00405404                 align 10h
.text:00405410
.text:00405410 ; =============== S U B R O U T I N E =======================================
.text:00405410
.text:00405410 ; Attributes: bp-based frame
.text:00405410
.text:00405410 sub_405410      proc near               ; DATA XREF: .text:004028E0↑o
.text:00405410                                         ; sub_405680+87↓o
.text:00405410
.text:00405410 String1         = dword ptr -14h
.text:00405410 String2         = dword ptr -10h
.text:00405410 var_4           = dword ptr -4
.text:00405410 arg_0           = dword ptr  8
.text:00405410 arg_4           = dword ptr  0Ch
.text:00405410 arg_8           = dword ptr  10h
.text:00405410
.text:00405410 ; FUNCTION CHUNK AT .text:00410D17 SIZE 0000002D BYTES
.text:00405410
.text:00405410 ; __unwind { // loc_410D29
.text:00405410                 push    8
.text:00405412                 mov     eax, offset loc_410D29
.text:00405417                 call    __EH_prolog3
.text:0040541C                 mov     eax, [ebp+arg_8]
.text:0040541F                 lea     ecx, [ebp+String1]
.text:00405422                 movzx   esi, al
.text:00405425                 xor     ebx, ebx
.text:00405427                 and     eax, 0FF00h
.text:0040542C                 mov     [ebp+arg_8], eax
.text:0040542F                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00405435 ;   try {
.text:00405435                 and     [ebp+var_4], ebx
.text:00405438                 lea     ecx, [ebp+String2]
.text:0040543B                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00405441                 mov     ecx, [ebp+arg_0]
.text:00405441 ;   } // starts at 405435
.text:00405444 ;   try {
.text:00405444                 mov     byte ptr [ebp+var_4], 1
.text:00405448                 test    ecx, ecx
.text:0040544A                 jz      short loc_4054CB
.text:0040544C                 mov     edi, [ebp+arg_4]
.text:0040544F                 test    edi, edi
.text:00405451                 jz      short loc_4054CB
.text:00405453                 sub     esi, ebx
.text:00405455                 jz      short loc_4054A1
.text:00405457                 sub     esi, 1
.text:0040545A                 jz      short loc_40548F
.text:0040545C                 sub     esi, 1
.text:0040545F                 jz      short loc_40547D
.text:00405461                 sub     esi, 1
.text:00405464                 jnz     short loc_4054BB
.text:00405466                 mov     eax, [edi+20h]
.text:00405469                 cmp     [ecx+20h], eax
.text:0040546C                 jge     short loc_405473
.text:0040546E                 or      ebx, 0FFFFFFFFh
.text:00405471                 jmp     short loc_4054CB
.text:00405473 ; ---------------------------------------------------------------------------
.text:00405473
.text:00405473 loc_405473:                             ; CODE XREF: sub_405410+5C↑j
.text:00405473                 xor     ebx, ebx
.text:00405475                 cmp     [ecx+20h], eax
.text:00405478                 setnz   bl
.text:0040547B                 jmp     short loc_4054CB
.text:0040547D ; ---------------------------------------------------------------------------
.text:0040547D
.text:0040547D loc_40547D:                             ; CODE XREF: sub_405410+4F↑j
.text:0040547D                 lea     eax, [ecx+1Ch]
.text:00405480                 push    eax
.text:00405481                 lea     ecx, [ebp+String1]
.text:00405484                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:0040548A                 lea     eax, [edi+1Ch]
.text:0040548D                 jmp     short loc_4054B1
.text:0040548F ; ---------------------------------------------------------------------------
.text:0040548F
.text:0040548F loc_40548F:                             ; CODE XREF: sub_405410+4A↑j
.text:0040548F                 lea     eax, [ecx+4]
.text:00405492                 push    eax
.text:00405493                 lea     ecx, [ebp+String1]
.text:00405496                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:0040549C                 lea     eax, [edi+4]
.text:0040549F                 jmp     short loc_4054B1
.text:004054A1 ; ---------------------------------------------------------------------------
.text:004054A1
.text:004054A1 loc_4054A1:                             ; CODE XREF: sub_405410+45↑j
.text:004054A1                 lea     eax, [ecx+8]
.text:004054A4                 push    eax
.text:004054A5                 lea     ecx, [ebp+String1]
.text:004054A8                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:004054AE                 lea     eax, [edi+8]
.text:004054B1
.text:004054B1 loc_4054B1:                             ; CODE XREF: sub_405410+7D↑j
.text:004054B1                                         ; sub_405410+8F↑j
.text:004054B1                 push    eax
.text:004054B2                 lea     ecx, [ebp+String2]
.text:004054B5                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:004054BB
.text:004054BB loc_4054BB:                             ; CODE XREF: sub_405410+54↑j
.text:004054BB                 push    [ebp+String2]   ; String2
.text:004054BE                 push    [ebp+String1]   ; String1
.text:004054C1                 call    ds:_wcsicoll
.text:004054C7                 pop     ecx
.text:004054C8                 pop     ecx
.text:004054C9                 mov     ebx, eax
.text:004054CB
.text:004054CB loc_4054CB:                             ; CODE XREF: sub_405410+3A↑j
.text:004054CB                                         ; sub_405410+41↑j ...
.text:004054CB                 cmp     [ebp+arg_8], 0
.text:004054CF                 jz      short loc_4054D3
.text:004054D1                 neg     ebx
.text:004054D3
.text:004054D3 loc_4054D3:                             ; CODE XREF: sub_405410+BF↑j
.text:004054D3                 lea     ecx, [ebp+String2]
.text:004054D3 ;   } // starts at 405444
.text:004054D6 ;   try {
.text:004054D6                 mov     byte ptr [ebp+var_4], 0
.text:004054DA                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004054DA ;   } // starts at 4054D6
.text:004054E0                 or      [ebp+var_4], 0FFFFFFFFh
.text:004054E4                 lea     ecx, [ebp+String1]
.text:004054E7                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004054ED                 mov     eax, ebx
.text:004054EF                 call    __EH_epilog3
.text:004054F4                 retn    0Ch
.text:004054F4 ; } // starts at 405410
.text:004054F4 sub_405410      endp
.text:004054F4
.text:004054F4 ; ---------------------------------------------------------------------------
.text:004054F7                 align 10h
.text:00405500
.text:00405500 ; =============== S U B R O U T I N E =======================================
.text:00405500
.text:00405500 ; Attributes: bp-based frame
.text:00405500
.text:00405500 sub_405500      proc near               ; DATA XREF: .text:004011A4↑o
.text:00405500                                         ; .text:004028E4↑o
.text:00405500
.text:00405500 lParam          = dword ptr -3Ch
.text:00405500 var_38          = dword ptr -38h
.text:00405500 var_34          = dword ptr -34h
.text:00405500 var_1C          = dword ptr -1Ch
.text:00405500 arg_0           = dword ptr  8
.text:00405500 arg_4           = dword ptr  0Ch
.text:00405500
.text:00405500                 mov     edi, edi
.text:00405502                 push    ebp
.text:00405503                 mov     ebp, esp
.text:00405505                 sub     esp, 3Ch
.text:00405508                 push    esi
.text:00405509                 mov     esi, ecx
.text:0040550B                 xor     ecx, ecx
.text:0040550D                 cmp     [esi+0A4h], ecx
.text:00405513                 jz      short loc_40551F
.text:00405515                 mov     eax, [ebp+arg_4]
.text:00405518                 mov     [eax], ecx
.text:0040551A                 jmp     loc_4055C6
.text:0040551F ; ---------------------------------------------------------------------------
.text:0040551F
.text:0040551F loc_40551F:                             ; CODE XREF: sub_405500+13↑j
.text:0040551F                 push    edi
.text:00405520                 mov     edi, [ebp+arg_0]
.text:00405523                 test    edi, edi
.text:00405525                 jnz     short loc_405531
.text:00405527                 mov     eax, [ebp+arg_4]
.text:0040552A                 mov     [eax], ecx
.text:0040552C                 jmp     loc_4055C5
.text:00405531 ; ---------------------------------------------------------------------------
.text:00405531
.text:00405531 loc_405531:                             ; CODE XREF: sub_405500+25↑j
.text:00405531                 mov     eax, [edi+0Ch]
.text:00405534                 mov     [ebp+var_38], eax
.text:00405537                 lea     eax, [ebp+lParam]
.text:0040553A                 push    eax             ; lParam
.text:0040553B                 push    ecx             ; wParam
.text:0040553C                 push    104Bh           ; Msg
.text:00405541                 push    dword ptr [esi+0A0h] ; hWnd
.text:00405547                 mov     [ebp+lParam], 4
.text:0040554E                 mov     [ebp+var_34], ecx
.text:00405551                 call    ds:SendMessageW
.text:00405557                 test    eax, eax
.text:00405559                 jz      short loc_4055BF
.text:0040555B                 push    ebx
.text:0040555C                 mov     ebx, [ebp+var_1C]
.text:0040555F                 test    ebx, ebx
.text:00405561                 jz      short loc_4055BE
.text:00405563                 push    0F000h          ; lParam
.text:00405568                 push    dword ptr [edi+0Ch] ; wParam
.text:0040556B                 push    102Ch           ; Msg
.text:00405570                 push    dword ptr [esi+0A0h] ; hWnd
.text:00405576                 call    ds:SendMessageW
.text:0040557C                 shr     eax, 0Ch
.text:0040557F                 dec     eax
.text:00405580                 cmp     [ebx+10h], eax
.text:00405583                 jz      short loc_4055BE
.text:00405585                 push    0F000h          ; lParam
.text:0040558A                 push    dword ptr [edi+0Ch] ; wParam
.text:0040558D                 push    102Ch           ; Msg
.text:00405592                 push    dword ptr [esi+0A0h] ; hWnd
.text:00405598                 call    ds:SendMessageW
.text:0040559E                 shr     eax, 0Ch
.text:004055A1                 mov     ecx, esi
.text:004055A3                 dec     eax
.text:004055A4                 mov     [ebx+10h], eax
.text:004055A7                 xor     eax, eax
.text:004055A9                 inc     eax
.text:004055AA                 push    eax
.text:004055AB                 mov     [esi+9Ch], eax
.text:004055B1                 call    ds:?SetModified@CPropertyPage@@QAEXH@Z ; CPropertyPage::SetModified(int)
.text:004055B7                 mov     ecx, esi
.text:004055B9                 call    sub_405978
.text:004055BE
.text:004055BE loc_4055BE:                             ; CODE XREF: sub_405500+61↑j
.text:004055BE                                         ; sub_405500+83↑j
.text:004055BE                 pop     ebx
.text:004055BF
.text:004055BF loc_4055BF:                             ; CODE XREF: sub_405500+59↑j
.text:004055BF                 mov     eax, [ebp+arg_4]
.text:004055C2                 and     dword ptr [eax], 0
.text:004055C5
.text:004055C5 loc_4055C5:                             ; CODE XREF: sub_405500+2C↑j
.text:004055C5                 pop     edi
.text:004055C6
.text:004055C6 loc_4055C6:                             ; CODE XREF: sub_405500+1A↑j
.text:004055C6                 pop     esi
.text:004055C7                 mov     esp, ebp
.text:004055C9                 pop     ebp
.text:004055CA                 retn    8
.text:004055CA sub_405500      endp
.text:004055CA
.text:004055CA ; ---------------------------------------------------------------------------
.text:004055CD                 align 10h
.text:004055D0
.text:004055D0 ; =============== S U B R O U T I N E =======================================
.text:004055D0
.text:004055D0
.text:004055D0 sub_4055D0      proc near               ; DATA XREF: .text:004011BC↑o
.text:004055D0                                         ; .text:004028E8↑o
.text:004055D0                 mov     edi, edi
.text:004055D2                 push    esi
.text:004055D3                 push    0
.text:004055D5                 mov     esi, ecx
.text:004055D7                 call    sub_404B9F
.text:004055DC                 xor     eax, eax
.text:004055DE                 mov     ecx, esi
.text:004055E0                 inc     eax
.text:004055E1                 push    eax
.text:004055E2                 mov     [esi+9Ch], eax
.text:004055E8                 call    ds:?SetModified@CPropertyPage@@QAEXH@Z ; CPropertyPage::SetModified(int)
.text:004055EE                 pop     esi
.text:004055EF                 retn
.text:004055EF sub_4055D0      endp
.text:004055EF
.text:004055F0
.text:004055F0 ; =============== S U B R O U T I N E =======================================
.text:004055F0
.text:004055F0
.text:004055F0 sub_4055F0      proc near               ; DATA XREF: .text:004011D4↑o
.text:004055F0                                         ; .text:004028EC↑o
.text:004055F0                 mov     edi, edi
.text:004055F2                 push    esi
.text:004055F3                 push    edi
.text:004055F4                 xor     edi, edi
.text:004055F6                 mov     esi, ecx
.text:004055F8                 inc     edi
.text:004055F9                 push    edi
.text:004055FA                 call    sub_404B9F
.text:004055FF                 push    edi
.text:00405600                 mov     ecx, esi
.text:00405602                 mov     [esi+9Ch], edi
.text:00405608                 call    ds:?SetModified@CPropertyPage@@QAEXH@Z ; CPropertyPage::SetModified(int)
.text:0040560E                 pop     edi
.text:0040560F                 pop     esi
.text:00405610                 retn
.text:00405610 sub_4055F0      endp
.text:00405610
.text:00405610 ; ---------------------------------------------------------------------------
.text:00405611                 align 10h
.text:00405620
.text:00405620 ; =============== S U B R O U T I N E =======================================
.text:00405620
.text:00405620
.text:00405620 sub_405620      proc near               ; DATA XREF: .text:004011EC↑o
.text:00405620                                         ; .text:004028F0↑o
.text:00405620                 mov     edi, edi
.text:00405622                 push    esi
.text:00405623                 push    0FEh ; 'þ'
.text:00405628                 mov     esi, ecx
.text:0040562A                 call    ds:?IsDlgButtonChecked@CWnd@@QBEIH@Z ; CWnd::IsDlgButtonChecked(int)
.text:00405630                 dec     eax
.text:00405631                 mov     dword ptr [esi+0A4h], 1
.text:0040563B                 neg     eax
.text:0040563D                 mov     ecx, esi
.text:0040563F                 sbb     eax, eax
.text:00405641                 inc     eax
.text:00405642                 mov     [esi+0B0h], eax
.text:00405648                 call    sub_4050D7
.text:0040564D                 push    1
.text:0040564F                 mov     ecx, esi
.text:00405651                 call    sub_4047EB
.text:00405656                 mov     ecx, esi
.text:00405658                 call    sub_404316
.text:0040565D                 mov     ecx, esi
.text:0040565F                 call    sub_4048DF
.text:00405664                 mov     ecx, esi
.text:00405666                 call    sub_40530F
.text:0040566B                 and     dword ptr [esi+0A4h], 0
.text:00405672                 mov     ecx, esi
.text:00405674                 pop     esi
.text:00405675                 jmp     sub_405978
.text:00405675 sub_405620      endp
.text:00405675
.text:00405675 ; ---------------------------------------------------------------------------
.text:0040567A                 align 10h
.text:00405680
.text:00405680 ; =============== S U B R O U T I N E =======================================
.text:00405680
.text:00405680 ; Attributes: bp-based frame fuzzy-sp
.text:00405680
.text:00405680 sub_405680      proc near               ; DATA XREF: .text:00401204↑o
.text:00405680                                         ; .text:004028F4↑o
.text:00405680
.text:00405680 arg_0           = dword ptr  8
.text:00405680 arg_4           = dword ptr  0Ch
.text:00405680
.text:00405680                 mov     edi, edi
.text:00405682                 push    ebp
.text:00405683                 mov     ebp, esp
.text:00405685                 and     esp, 0FFFFFFF8h
.text:00405688                 push    ecx
.text:00405689                 push    ebx
.text:0040568A                 push    esi
.text:0040568B                 push    edi
.text:0040568C                 mov     edi, [ebp+arg_0]
.text:0040568F                 mov     esi, ecx
.text:00405691                 test    edi, edi
.text:00405693                 jz      loc_405724
.text:00405699                 push    0               ; lParam
.text:0040569B                 push    0               ; wParam
.text:0040569D                 push    101Fh           ; Msg
.text:004056A2                 push    dword ptr [edi] ; hWnd
.text:004056A4                 call    ds:SendMessageW
.text:004056AA                 mov     edx, [esi+0E4h] ; wParam
.text:004056B0                 mov     ebx, eax
.text:004056B2                 push    0               ; int
.text:004056B4                 mov     ecx, ebx        ; hWnd
.text:004056B6                 call    sub_40DABF
.text:004056BB                 mov     ecx, [esi+0E4h]
.text:004056C1                 cmp     ecx, [edi+10h]
.text:004056C4                 jnz     short loc_4056CF
.text:004056C6                 xor     dword ptr [esi+0E8h], 1
.text:004056CD                 jmp     short loc_4056DF
.text:004056CF ; ---------------------------------------------------------------------------
.text:004056CF
.text:004056CF loc_4056CF:                             ; CODE XREF: sub_405680+44↑j
.text:004056CF                 and     dword ptr [esi+0E8h], 0
.text:004056D6                 mov     eax, [edi+10h]
.text:004056D9                 mov     [esi+0E4h], eax
.text:004056DF
.text:004056DF loc_4056DF:                             ; CODE XREF: sub_405680+4D↑j
.text:004056DF                 mov     eax, [esi+0E8h]
.text:004056E5                 mov     ecx, ebx        ; hWnd
.text:004056E7                 mov     edx, [esi+0E4h] ; wParam
.text:004056ED                 neg     eax
.text:004056EF                 sbb     eax, eax
.text:004056F1                 and     eax, 0FFFFFE00h
.text:004056F6                 add     eax, 400h
.text:004056FB                 push    eax             ; int
.text:004056FC                 call    sub_40DABF
.text:00405701                 mov     eax, [esi+0E8h]
.text:00405707                 push    offset sub_405410 ; lParam
.text:0040570C                 shl     eax, 8
.text:0040570F                 or      eax, [edi+10h]
.text:00405712                 push    eax             ; wParam
.text:00405713                 push    1030h           ; Msg
.text:00405718                 push    dword ptr [esi+0A0h] ; hWnd
.text:0040571E                 call    ds:SendMessageW
.text:00405724
.text:00405724 loc_405724:                             ; CODE XREF: sub_405680+13↑j
.text:00405724                 mov     eax, [ebp+arg_4]
.text:00405727                 pop     edi
.text:00405728                 pop     esi
.text:00405729                 pop     ebx
.text:0040572A                 and     dword ptr [eax], 0
.text:0040572D                 mov     esp, ebp
.text:0040572F                 pop     ebp
.text:00405730                 retn    8
.text:00405730 sub_405680      endp
.text:00405730
.text:00405730 ; ---------------------------------------------------------------------------
.text:00405733                 align 10h
.text:00405740
.text:00405740 ; =============== S U B R O U T I N E =======================================
.text:00405740
.text:00405740 ; Attributes: bp-based frame
.text:00405740
.text:00405740 sub_405740      proc near               ; DATA XREF: .text:00401248↑o
.text:00405740                                         ; .text:004028F8↑o
.text:00405740
.text:00405740 lParam          = dword ptr -48h
.text:00405740 var_44          = dword ptr -44h
.text:00405740 var_40          = dword ptr -40h
.text:00405740 var_28          = dword ptr -28h
.text:00405740 var_C           = dword ptr -0Ch
.text:00405740 var_8           = dword ptr -8
.text:00405740 var_4           = dword ptr -4
.text:00405740
.text:00405740                 mov     edi, edi
.text:00405742                 push    ebp
.text:00405743                 mov     ebp, esp
.text:00405745                 sub     esp, 48h
.text:00405748                 mov     eax, ___security_cookie
.text:0040574D                 xor     eax, ebp
.text:0040574F                 mov     [ebp+var_4], eax
.text:00405752                 push    esi
.text:00405753                 push    edi
.text:00405754                 mov     edi, ecx
.text:00405756                 xor     eax, eax
.text:00405758                 cmp     [edi+8], eax
.text:0040575B                 jnz     short loc_405770
.text:0040575D                 mov     eax, [edi]
.text:0040575F                 mov     esi, [eax+8]
.text:00405762                 mov     ecx, esi
.text:00405764                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040576A                 mov     ecx, edi
.text:0040576C                 call    esi
.text:0040576E                 jmp     short loc_4057EF
.text:00405770 ; ---------------------------------------------------------------------------
.text:00405770
.text:00405770 loc_405770:                             ; CODE XREF: sub_405740+1B↑j
.text:00405770                 push    ebx
.text:00405771                 push    2
.text:00405773                 pop     esi
.text:00405774                 push    eax             ; lParam
.text:00405775                 push    eax             ; wParam
.text:00405776                 xor     ecx, ecx
.text:00405778                 mov     [ebp+lParam], 4
.text:0040577F                 push    1004h           ; Msg
.text:00405784                 push    dword ptr [edi+10h] ; hWnd
.text:00405787                 inc     ecx
.text:00405788                 mov     [ebp+var_40], eax
.text:0040578B                 mov     [ebp+var_C], ecx
.text:0040578E                 mov     [ebp+var_8], ecx
.text:00405791                 call    ds:SendMessageW
.text:00405797                 mov     ebx, eax
.text:00405799                 sub     ebx, 1
.text:0040579C                 js      short loc_4057EA
.text:0040579E                 mov     esi, [ebp+var_C]
.text:004057A1
.text:004057A1 loc_4057A1:                             ; CODE XREF: sub_405740+98↓j
.text:004057A1                 lea     eax, [ebp+lParam]
.text:004057A4                 mov     [ebp+var_44], ebx
.text:004057A7                 push    eax             ; lParam
.text:004057A8                 push    0               ; wParam
.text:004057AA                 push    104Bh           ; Msg
.text:004057AF                 push    dword ptr [edi+10h] ; hWnd
.text:004057B2                 call    ds:SendMessageW
.text:004057B8                 test    eax, eax
.text:004057BA                 jz      short loc_4057D2
.text:004057BC                 mov     eax, [ebp+var_28]
.text:004057BF                 test    eax, eax
.text:004057C1                 jz      short loc_4057D2
.text:004057C3                 cmp     dword ptr [eax+10h], 0
.text:004057C7                 jz      short loc_4057D0
.text:004057C9                 xor     eax, eax
.text:004057CB                 mov     [ebp+var_8], eax
.text:004057CE                 jmp     short loc_4057D5
.text:004057D0 ; ---------------------------------------------------------------------------
.text:004057D0
.text:004057D0 loc_4057D0:                             ; CODE XREF: sub_405740+87↑j
.text:004057D0                 xor     esi, esi
.text:004057D2
.text:004057D2 loc_4057D2:                             ; CODE XREF: sub_405740+7A↑j
.text:004057D2                                         ; sub_405740+81↑j
.text:004057D2                 mov     eax, [ebp+var_8]
.text:004057D5
.text:004057D5 loc_4057D5:                             ; CODE XREF: sub_405740+8E↑j
.text:004057D5                 sub     ebx, 1
.text:004057D8                 jns     short loc_4057A1
.text:004057DA                 push    2
.text:004057DC                 test    esi, esi
.text:004057DE                 pop     esi
.text:004057DF                 jnz     short loc_4057EA
.text:004057E1                 test    eax, eax
.text:004057E3                 jz      short loc_4057EC
.text:004057E5                 xor     esi, esi
.text:004057E7                 inc     esi
.text:004057E8                 jmp     short loc_4057EC
.text:004057EA ; ---------------------------------------------------------------------------
.text:004057EA
.text:004057EA loc_4057EA:                             ; CODE XREF: sub_405740+5C↑j
.text:004057EA                                         ; sub_405740+9F↑j
.text:004057EA                 xor     esi, esi
.text:004057EC
.text:004057EC loc_4057EC:                             ; CODE XREF: sub_405740+A3↑j
.text:004057EC                                         ; sub_405740+A8↑j
.text:004057EC                 mov     eax, esi
.text:004057EE                 pop     ebx
.text:004057EF
.text:004057EF loc_4057EF:                             ; CODE XREF: sub_405740+2E↑j
.text:004057EF                 mov     ecx, [ebp+var_4]
.text:004057F2                 pop     edi
.text:004057F3                 xor     ecx, ebp        ; StackCookie
.text:004057F5                 pop     esi
.text:004057F6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004057FB                 mov     esp, ebp
.text:004057FD                 pop     ebp
.text:004057FE                 retn
.text:004057FE sub_405740      endp
.text:004057FE
.text:004057FE ; ---------------------------------------------------------------------------
.text:004057FF                 align 10h
.text:00405800
.text:00405800 ; =============== S U B R O U T I N E =======================================
.text:00405800
.text:00405800 ; Attributes: bp-based frame
.text:00405800
.text:00405800 sub_405800      proc near               ; DATA XREF: .text:00401340↑o
.text:00405800                                         ; .text:004028FC↑o
.text:00405800
.text:00405800 var_4           = dword ptr -4
.text:00405800
.text:00405800                 mov     edi, edi
.text:00405802                 push    ebp
.text:00405803                 mov     ebp, esp
.text:00405805                 push    ecx
.text:00405806                 mov     eax, ___security_cookie
.text:0040580B                 xor     eax, ebp
.text:0040580D                 mov     [ebp+var_4], eax
.text:00405810                 push    ebx
.text:00405811                 mov     ebx, ecx
.text:00405813                 cmp     dword ptr [ebx+9Ch], 0
.text:0040581A                 jnz     short loc_405821
.text:0040581C                 xor     eax, eax
.text:0040581E                 inc     eax
.text:0040581F                 jmp     short loc_40585E
.text:00405821 ; ---------------------------------------------------------------------------
.text:00405821
.text:00405821 loc_405821:                             ; CODE XREF: sub_405800+1A↑j
.text:00405821                 push    esi
.text:00405822                 push    edi
.text:00405823                 mov     ecx, 0CBh ; 'Ë'
.text:00405828                 call    sub_40E20E
.text:0040582D                 mov     ecx, ebx
.text:0040582F                 call    sub_404CA7
.text:00405834                 lea     edi, [ebx+90h]
.text:0040583A                 mov     eax, [edi]
.text:0040583C                 mov     esi, [eax+4]
.text:0040583F                 mov     ecx, esi
.text:00405841                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00405847                 mov     ecx, edi
.text:00405849                 call    esi
.text:0040584B                 push    eax
.text:0040584C                 mov     ecx, edi
.text:0040584E                 call    sub_403CFC
.text:00405853                 xor     eax, eax
.text:00405855                 inc     eax
.text:00405856                 pop     edi
.text:00405857                 mov     [ebx+94h], eax
.text:0040585D                 pop     esi
.text:0040585E
.text:0040585E loc_40585E:                             ; CODE XREF: sub_405800+1F↑j
.text:0040585E                 mov     ecx, [ebp+var_4]
.text:00405861                 xor     ecx, ebp        ; StackCookie
.text:00405863                 pop     ebx
.text:00405864                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00405869                 mov     esp, ebp
.text:0040586B                 pop     ebp
.text:0040586C                 retn
.text:0040586C sub_405800      endp
.text:0040586C
.text:0040586C ; ---------------------------------------------------------------------------
.text:0040586D                 align 10h
.text:00405870
.text:00405870 ; =============== S U B R O U T I N E =======================================
.text:00405870
.text:00405870 ; Attributes: bp-based frame
.text:00405870
.text:00405870 sub_405870      proc near               ; DATA XREF: .text:00401250↑o
.text:00405870                                         ; .text:00402900↑o
.text:00405870
.text:00405870 hKey            = dword ptr -1Ch
.text:00405870 var_18          = dword ptr -18h
.text:00405870 var_14          = dword ptr -14h
.text:00405870 var_4           = dword ptr -4
.text:00405870 arg_4           = dword ptr  0Ch
.text:00405870
.text:00405870 ; FUNCTION CHUNK AT .text:00403DA1 SIZE 00000017 BYTES
.text:00405870 ; FUNCTION CHUNK AT .text:00410D44 SIZE 0000002D BYTES
.text:00405870
.text:00405870 ; __unwind { // loc_410D4C
.text:00405870                 push    10h
.text:00405872                 mov     eax, offset loc_410D4C
.text:00405877                 call    __EH_prolog3_GS
.text:0040587C                 mov     edi, ecx
.text:0040587E                 xor     ebx, ebx
.text:00405880                 mov     esi, ebx
.text:00405882                 mov     [ebp+var_18], ebx
.text:00405885                 mov     [ebp+hKey], esi
.text:00405888                 mov     [ebp+var_14], ebx
.text:0040588B                 mov     edx, 0F003Fh
.text:00405890 ;   try {
.text:00405890                 mov     [ebp+var_4], ebx
.text:00405893                 xor     ecx, ecx
.text:00405895                 call    sub_40D6CA
.text:0040589A                 test    eax, eax
.text:0040589C                 jz      short loc_4058CE
.text:0040589E                 mov     [ebp+hKey], eax
.text:004058A1                 mov     eax, [edi]
.text:004058A3                 mov     esi, [eax+14h]
.text:004058A6                 mov     ecx, esi
.text:004058A8                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:004058AE                 mov     ecx, edi
.text:004058B0                 call    esi
.text:004058B2                 push    eax             ; lpSubKey
.text:004058B3                 lea     ecx, [ebp+hKey]
.text:004058B6                 call    sub_406B79
.text:004058BB                 mov     esi, [ebp+hKey]
.text:004058BE                 test    esi, esi
.text:004058C0                 jz      short loc_4058CE
.text:004058C2                 push    esi             ; hKey
.text:004058C3                 call    ds:RegCloseKey
.text:004058C9                 mov     esi, ebx
.text:004058CB                 mov     [ebp+hKey], esi
.text:004058CE
.text:004058CE loc_4058CE:                             ; CODE XREF: sub_405870+2C↑j
.text:004058CE                                         ; sub_405870+50↑j
.text:004058CE                 push    ebx
.text:004058CF                 mov     ecx, edi
.text:004058D1                 call    sub_403CFC
.text:004058D6                 test    esi, esi
.text:004058D8                 jz      short loc_4058E1
.text:004058DA                 push    esi             ; hKey
.text:004058DB                 call    ds:RegCloseKey
.text:004058E1
.text:004058E1 loc_4058E1:                             ; CODE XREF: sub_405870+68↑j
.text:004058E1                 call    __EH_epilog3_GS
.text:004058E6                 retn
.text:004058E6 ;   } // starts at 405890
.text:004058E6 ; } // starts at 405870
.text:004058E6 sub_405870      endp
.text:004058E6
.text:004058E6 ; ---------------------------------------------------------------------------
.text:004058E7                 align 10h
.text:004058F0
.text:004058F0 ; =============== S U B R O U T I N E =======================================
.text:004058F0
.text:004058F0
.text:004058F0 sub_4058F0      proc near               ; DATA XREF: .text:0040125C↑o
.text:004058F0                                         ; .text:00402904↑o
.text:004058F0                 push    1
.text:004058F2                 add     ecx, 0FFFFFF70h
.text:004058F8                 call    sub_404B9F
.text:004058FD                 retn
.text:004058FD sub_4058F0      endp
.text:004058FD
.text:004058FD ; ---------------------------------------------------------------------------
.text:004058FE                 align 10h
.text:00405900
.text:00405900 ; =============== S U B R O U T I N E =======================================
.text:00405900
.text:00405900
.text:00405900 sub_405900      proc near               ; DATA XREF: .text:00401260↑o
.text:00405900                                         ; .text:00402908↑o
.text:00405900                 push    0
.text:00405902                 add     ecx, 0FFFFFF70h
.text:00405908                 call    sub_404B9F
.text:0040590D                 retn
.text:0040590D sub_405900      endp
.text:0040590D
.text:0040590D ; ---------------------------------------------------------------------------
.text:0040590E                 align 10h
.text:00405910
.text:00405910 ; =============== S U B R O U T I N E =======================================
.text:00405910
.text:00405910 ; Attributes: bp-based frame
.text:00405910
.text:00405910 sub_405910      proc near               ; DATA XREF: .text:0040121C↑o
.text:00405910                                         ; .text:0040290C↑o
.text:00405910
.text:00405910 lParam          = dword ptr -3Ch
.text:00405910 var_30          = dword ptr -30h
.text:00405910 var_2C          = dword ptr -2Ch
.text:00405910 arg_4           = dword ptr  0Ch
.text:00405910
.text:00405910                 mov     edi, edi
.text:00405912                 push    ebp
.text:00405913                 mov     ebp, esp
.text:00405915                 sub     esp, 3Ch
.text:00405918                 push    esi
.text:00405919                 push    edi
.text:0040591A                 xor     edi, edi
.text:0040591C                 mov     esi, ecx
.text:0040591E                 push    edi             ; lParam
.text:0040591F                 push    edi             ; wParam
.text:00405920                 push    1032h           ; Msg
.text:00405925                 push    dword ptr [esi+0A0h] ; hWnd
.text:0040592B                 call    ds:SendMessageW
.text:00405931                 test    eax, eax
.text:00405933                 jnz     short loc_40596B
.text:00405935                 push    edi             ; lParam
.text:00405936                 push    edi             ; wParam
.text:00405937                 push    1004h           ; Msg
.text:0040593C                 push    dword ptr [esi+0A0h] ; hWnd
.text:00405942                 call    ds:SendMessageW
.text:00405948                 test    eax, eax
.text:0040594A                 jle     short loc_40596B
.text:0040594C                 push    3
.text:0040594E                 pop     eax
.text:0040594F                 mov     [ebp+var_2C], eax
.text:00405952                 mov     [ebp+var_30], eax
.text:00405955                 lea     eax, [ebp+lParam]
.text:00405958                 push    eax             ; lParam
.text:00405959                 push    edi             ; wParam
.text:0040595A                 push    102Bh           ; Msg
.text:0040595F                 push    dword ptr [esi+0A0h] ; hWnd
.text:00405965                 call    ds:SendMessageW
.text:0040596B
.text:0040596B loc_40596B:                             ; CODE XREF: sub_405910+23↑j
.text:0040596B                                         ; sub_405910+3A↑j
.text:0040596B                 mov     eax, [ebp+arg_4]
.text:0040596E                 mov     [eax], edi
.text:00405970                 pop     edi
.text:00405971                 pop     esi
.text:00405972                 mov     esp, ebp
.text:00405974                 pop     ebp
.text:00405975                 retn    8
.text:00405975 sub_405910      endp
.text:00405975
.text:00405978
.text:00405978 ; =============== S U B R O U T I N E =======================================
.text:00405978
.text:00405978 ; Attributes: bp-based frame
.text:00405978
.text:00405978 sub_405978      proc near               ; CODE XREF: sub_4040E0+1E1↑p
.text:00405978                                         ; sub_404B9F+E4↑p ...
.text:00405978
.text:00405978 var_8           = dword ptr -8
.text:00405978 var_4           = dword ptr -4
.text:00405978
.text:00405978                 mov     edi, edi
.text:0040597A                 push    ebp
.text:0040597B                 mov     ebp, esp
.text:0040597D                 push    ecx
.text:0040597E                 push    ecx
.text:0040597F                 push    ebx
.text:00405980                 push    esi
.text:00405981                 push    edi
.text:00405982                 push    0               ; lParam
.text:00405984                 mov     esi, ecx
.text:00405986                 xor     eax, eax
.text:00405988                 push    0               ; wParam
.text:0040598A                 push    1004h           ; Msg
.text:0040598F                 inc     eax
.text:00405990                 push    dword ptr [esi+0A0h] ; hWnd
.text:00405996                 mov     ebx, eax
.text:00405998                 mov     [ebp+var_4], eax
.text:0040599B                 call    ds:SendMessageW
.text:004059A1                 mov     edi, eax
.text:004059A3                 jmp     short loc_4059E6
.text:004059A5 ; ---------------------------------------------------------------------------
.text:004059A5
.text:004059A5 loc_4059A5:                             ; CODE XREF: sub_405978+71↓j
.text:004059A5                 push    0F000h          ; lParam
.text:004059AA                 push    edi             ; wParam
.text:004059AB                 push    102Ch           ; Msg
.text:004059B0                 push    dword ptr [esi+0A0h] ; hWnd
.text:004059B6                 call    ds:SendMessageW
.text:004059BC                 shr     eax, 0Ch
.text:004059BF                 dec     eax
.text:004059C0                 cmp     [ebp+var_4], 0
.text:004059C4                 jz      short loc_4059D3
.text:004059C6                 test    eax, eax
.text:004059C8                 jnz     short loc_4059D3
.text:004059CA                 mov     [ebp+var_4], 1
.text:004059D1                 jmp     short loc_4059D7
.text:004059D3 ; ---------------------------------------------------------------------------
.text:004059D3
.text:004059D3 loc_4059D3:                             ; CODE XREF: sub_405978+4C↑j
.text:004059D3                                         ; sub_405978+50↑j
.text:004059D3                 and     [ebp+var_4], 0
.text:004059D7
.text:004059D7 loc_4059D7:                             ; CODE XREF: sub_405978+59↑j
.text:004059D7                 test    ebx, ebx
.text:004059D9                 jz      short loc_4059E4
.text:004059DB                 test    eax, eax
.text:004059DD                 jz      short loc_4059E4
.text:004059DF                 xor     ebx, ebx
.text:004059E1                 inc     ebx
.text:004059E2                 jmp     short loc_4059E6
.text:004059E4 ; ---------------------------------------------------------------------------
.text:004059E4
.text:004059E4 loc_4059E4:                             ; CODE XREF: sub_405978+61↑j
.text:004059E4                                         ; sub_405978+65↑j
.text:004059E4                 xor     ebx, ebx
.text:004059E6
.text:004059E6 loc_4059E6:                             ; CODE XREF: sub_405978+2B↑j
.text:004059E6                                         ; sub_405978+6A↑j
.text:004059E6                 sub     edi, 1
.text:004059E9                 jns     short loc_4059A5
.text:004059EB                 call    ds:GetFocus
.text:004059F1                 mov     edi, eax
.text:004059F3                 test    edi, edi
.text:004059F5                 jz      short loc_405A6A
.text:004059F7                 mov     edx, 0FDh ; 'ý'
.text:004059FC                 mov     ecx, esi
.text:004059FE                 call    sub_40DAA3
.text:00405A03                 mov     [ebp+var_8], eax
.text:00405A06                 test    eax, eax
.text:00405A08                 jz      short loc_405A6A
.text:00405A0A                 mov     ecx, [ebp+var_4]
.text:00405A0D                 xor     ecx, 1
.text:00405A10                 push    ecx             ; bEnable
.text:00405A11                 push    eax             ; hWnd
.text:00405A12                 call    ds:EnableWindow
.text:00405A18                 cmp     [ebp+var_4], 0
.text:00405A1C                 jz      short loc_405A32
.text:00405A1E                 cmp     edi, [ebp+var_8]
.text:00405A21                 jnz     short loc_405A32
.text:00405A23                 push    0               ; lParam
.text:00405A25                 push    1               ; wParam
.text:00405A27                 push    28h ; '('       ; Msg
.text:00405A29                 push    dword ptr [esi+20h] ; hWnd
.text:00405A2C                 call    ds:SendMessageW
.text:00405A32
.text:00405A32 loc_405A32:                             ; CODE XREF: sub_405978+A4↑j
.text:00405A32                                         ; sub_405978+A9↑j
.text:00405A32                 mov     edx, 0FCh ; 'ü'
.text:00405A37                 mov     ecx, esi
.text:00405A39                 call    sub_40DAA3
.text:00405A3E                 mov     [ebp+var_8], eax
.text:00405A41                 test    eax, eax
.text:00405A43                 jz      short loc_405A6A
.text:00405A45                 mov     ecx, ebx
.text:00405A47                 xor     ecx, 1
.text:00405A4A                 push    ecx             ; bEnable
.text:00405A4B                 push    eax             ; hWnd
.text:00405A4C                 call    ds:EnableWindow
.text:00405A52                 test    ebx, ebx
.text:00405A54                 jz      short loc_405A6A
.text:00405A56                 cmp     edi, [ebp+var_8]
.text:00405A59                 jnz     short loc_405A6A
.text:00405A5B                 push    0               ; lParam
.text:00405A5D                 push    0               ; wParam
.text:00405A5F                 push    28h ; '('       ; Msg
.text:00405A61                 push    dword ptr [esi+20h] ; hWnd
.text:00405A64                 call    ds:SendMessageW
.text:00405A6A
.text:00405A6A loc_405A6A:                             ; CODE XREF: sub_405978+7D↑j
.text:00405A6A                                         ; sub_405978+90↑j ...
.text:00405A6A                 pop     edi
.text:00405A6B                 pop     esi
.text:00405A6C                 pop     ebx
.text:00405A6D                 mov     esp, ebp
.text:00405A6F                 pop     ebp
.text:00405A70                 retn
.text:00405A70 sub_405978      endp
.text:00405A70
.text:00405A71
.text:00405A71 ; =============== S U B R O U T I N E =======================================
.text:00405A71
.text:00405A71 ; Attributes: bp-based frame
.text:00405A71
.text:00405A71 ; int __stdcall sub_405A71(int, int, WPARAM wParam)
.text:00405A71 sub_405A71      proc near               ; CODE XREF: sub_404CA7+10B↑p
.text:00405A71                                         ; sub_404CA7+16C↑p ...
.text:00405A71
.text:00405A71 lParam          = dword ptr -3Ch
.text:00405A71 var_30          = dword ptr -30h
.text:00405A71 var_2C          = dword ptr -2Ch
.text:00405A71 arg_0           = dword ptr  8
.text:00405A71 arg_4           = dword ptr  0Ch
.text:00405A71 wParam          = dword ptr  10h
.text:00405A71
.text:00405A71                 mov     edi, edi
.text:00405A73                 push    ebp
.text:00405A74                 mov     ebp, esp
.text:00405A76                 mov     edx, [ebp+arg_0]
.text:00405A79                 sub     esp, 3Ch
.text:00405A7C                 push    esi
.text:00405A7D                 mov     esi, ecx
.text:00405A7F                 test    edx, edx
.text:00405A81                 jz      short loc_405ABF
.text:00405A83                 mov     eax, [ebp+arg_4]
.text:00405A86                 mov     ecx, 1000h
.text:00405A8B                 mov     [edx+10h], eax
.text:00405A8E                 neg     eax
.text:00405A90                 mov     [ebp+var_2C], 0F000h
.text:00405A97                 sbb     eax, eax
.text:00405A99                 and     eax, ecx
.text:00405A9B                 add     eax, ecx
.text:00405A9D                 mov     [ebp+var_30], eax
.text:00405AA0                 lea     eax, [ebp+lParam]
.text:00405AA3                 push    eax             ; lParam
.text:00405AA4                 push    [ebp+wParam]    ; wParam
.text:00405AA7                 push    102Bh           ; Msg
.text:00405AAC                 push    dword ptr [esi+0A0h] ; hWnd
.text:00405AB2                 call    ds:SendMessageW
.text:00405AB8                 mov     ecx, esi
.text:00405ABA                 call    sub_405978
.text:00405ABF
.text:00405ABF loc_405ABF:                             ; CODE XREF: sub_405A71+10↑j
.text:00405ABF                 pop     esi
.text:00405AC0                 mov     esp, ebp
.text:00405AC2                 pop     ebp
.text:00405AC3                 retn    0Ch
.text:00405AC3 sub_405A71      endp
.text:00405AC3
.text:00405AC6
.text:00405AC6 ; =============== S U B R O U T I N E =======================================
.text:00405AC6
.text:00405AC6 ; Attributes: bp-based frame
.text:00405AC6
.text:00405AC6 sub_405AC6      proc near               ; CODE XREF: sub_404CA7+FA↑p
.text:00405AC6
.text:00405AC6 var_38          = dword ptr -38h
.text:00405AC6 var_34          = dword ptr -34h
.text:00405AC6 var_30          = dword ptr -30h
.text:00405AC6 var_2C          = dword ptr -2Ch
.text:00405AC6 var_28          = dword ptr -28h
.text:00405AC6 var_24          = dword ptr -24h
.text:00405AC6 var_20          = dword ptr -20h
.text:00405AC6 Data            = byte ptr -1Ch
.text:00405AC6 var_18          = dword ptr -18h
.text:00405AC6 var_14          = byte ptr -14h
.text:00405AC6 var_4           = dword ptr -4
.text:00405AC6 arg_0           = dword ptr  8
.text:00405AC6 arg_4           = dword ptr  0Ch
.text:00405AC6
.text:00405AC6 ; FUNCTION CHUNK AT .text:00403DA1 SIZE 00000017 BYTES
.text:00405AC6 ; FUNCTION CHUNK AT .text:00410D71 SIZE 00000051 BYTES
.text:00405AC6
.text:00405AC6 ; __unwind { // loc_410D9D
.text:00405AC6                 push    2Ch
.text:00405AC8                 mov     eax, offset loc_410D9D
.text:00405ACD                 call    __EH_prolog3_GS
.text:00405AD2                 lea     edi, [ecx+90h]
.text:00405AD8                 mov     eax, [edi]
.text:00405ADA                 mov     esi, [eax+14h]
.text:00405ADD                 mov     ecx, esi
.text:00405ADF                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00405AE5                 mov     ecx, edi
.text:00405AE7                 call    esi
.text:00405AE9                 push    eax
.text:00405AEA                 lea     ecx, [ebp+var_28]
.text:00405AED                 call    ds:??0CString@@QAE@PBG@Z ; CString::CString(ushort const *)
.text:00405AF3                 mov     edi, [ebp+arg_0]
.text:00405AF6                 lea     ecx, [ebp+var_20]
.text:00405AF9 ;   try {
.text:00405AF9                 and     [ebp+var_4], 0
.text:00405AFD                 push    edi
.text:00405AFE                 call    ds:??0CString@@QAE@ABV0@@Z ; CString::CString(CString const &)
.text:00405B04                 mov     esi, eax
.text:00405B06                 xor     ebx, ebx
.text:00405B08                 lea     ecx, [ebp+var_24]
.text:00405B0B                 inc     ebx
.text:00405B0C                 push    offset asc_402E5C ; "\\"
.text:00405B0C ;   } // starts at 405AF9
.text:00405B11 ;   try {
.text:00405B11                 mov     byte ptr [ebp+var_4], bl
.text:00405B14                 call    ds:??0CString@@QAE@PBG@Z ; CString::CString(ushort const *)
.text:00405B1A                 push    esi
.text:00405B1B                 push    eax
.text:00405B1C                 lea     eax, [ebp+Data]
.text:00405B1C ;   } // starts at 405B11
.text:00405B1F ;   try {
.text:00405B1F                 mov     byte ptr [ebp+var_4], 2
.text:00405B23                 push    eax
.text:00405B24                 call    ds:??H@YG?AVCString@@ABV0@0@Z ; operator+(CString const &,CString const &)
.text:00405B2A                 push    eax
.text:00405B2B                 lea     ecx, [ebp+var_28]
.text:00405B2B ;   } // starts at 405B1F
.text:00405B2E ;   try {
.text:00405B2E                 mov     byte ptr [ebp+var_4], 3
.text:00405B32                 call    ds:??YCString@@QAEABV0@ABV0@@Z ; CString::operator+=(CString const &)
.text:00405B38                 lea     ecx, [ebp+Data]
.text:00405B38 ;   } // starts at 405B2E
.text:00405B3B ;   try {
.text:00405B3B                 mov     byte ptr [ebp+var_4], 2
.text:00405B3F                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00405B45                 lea     ecx, [ebp+var_24]
.text:00405B45 ;   } // starts at 405B3B
.text:00405B48 ;   try {
.text:00405B48                 mov     byte ptr [ebp+var_4], bl
.text:00405B4B                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00405B51                 xor     ebx, ebx
.text:00405B53                 lea     ecx, [ebp+var_20]
.text:00405B53 ;   } // starts at 405B48
.text:00405B56 ;   try {
.text:00405B56                 mov     byte ptr [ebp+var_4], bl
.text:00405B59                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00405B5F                 mov     [ebp+var_38], ebx
.text:00405B62                 mov     [ebp+var_34], ebx
.text:00405B65                 mov     [ebp+var_30], ebx
.text:00405B65 ;   } // starts at 405B56
.text:00405B68 ;   try {
.text:00405B68                 mov     byte ptr [ebp+var_4], 4
.text:00405B6C                 mov     edx, 0F003Fh
.text:00405B71                 mov     ecx, [ebp+var_28]
.text:00405B74                 call    sub_40D6CA
.text:00405B79                 mov     esi, eax
.text:00405B7B                 test    esi, esi
.text:00405B7D                 jz      short loc_405BA5
.text:00405B7F                 mov     ecx, [edi+14h]
.text:00405B82                 lea     eax, [ebp+Data]
.text:00405B85                 push    4               ; cbData
.text:00405B87                 push    eax             ; lpData
.text:00405B88                 push    4               ; dwType
.text:00405B8A                 push    ebx             ; Reserved
.text:00405B8B                 push    dword ptr [edi] ; lpValueName
.text:00405B8D                 mov     [ebp+var_38], esi
.text:00405B90                 push    esi             ; hKey
.text:00405B91                 mov     dword ptr [ebp+Data], ecx
.text:00405B94                 call    ds:RegSetValueExW
.text:00405B9A                 test    eax, eax
.text:00405B9C                 jz      short loc_405BBE
.text:00405B9E                 push    esi             ; hKey
.text:00405B9F                 call    ds:RegCloseKey
.text:00405BA5
.text:00405BA5 loc_405BA5:                             ; CODE XREF: sub_405AC6+B7↑j
.text:00405BA5                 mov     esi, ebx
.text:00405BA5 ;   } // starts at 405B68
.text:00405BA7
.text:00405BA7 loc_405BA7:                             ; CODE XREF: sub_405AC6+240↓j
.text:00405BA7                 or      [ebp+var_4], 0FFFFFFFFh
.text:00405BAB                 lea     ecx, [ebp+var_28]
.text:00405BAE                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00405BB4                 mov     eax, esi
.text:00405BB6                 call    __EH_epilog3_GS
.text:00405BBB                 retn    4
.text:00405BBE ; ---------------------------------------------------------------------------
.text:00405BBE
.text:00405BBE loc_405BBE:                             ; CODE XREF: sub_405AC6+D6↑j
.text:00405BBE                 lea     eax, [ebp+var_14]
.text:00405BC1                 push    eax
.text:00405BC2                 call    ds:?GetTickCount@CTime@@SG?AV1@XZ ; CTime::GetTickCount(void)
.text:00405BC8                 push    ebx
.text:00405BC9                 lea     ecx, [ebp+var_18]
.text:00405BCC                 mov     eax, [eax]
.text:00405BCE                 mov     [ebp+var_18], eax
.text:00405BD1                 call    ds:?GetLocalTm@CTime@@QBEPAUtm@@PAU2@@Z ; CTime::GetLocalTm(tm *)
.text:00405BD7                 test    eax, eax
.text:00405BD9                 jz      short loc_405BE6
.text:00405BDB                 mov     edi, [eax+14h]
.text:00405BDE                 add     edi, 76Ch
.text:00405BE4                 jmp     short loc_405BE8
.text:00405BE6 ; ---------------------------------------------------------------------------
.text:00405BE6
.text:00405BE6 loc_405BE6:                             ; CODE XREF: sub_405AC6+113↑j
.text:00405BE6                 mov     edi, ebx
.text:00405BE8
.text:00405BE8 loc_405BE8:                             ; CODE XREF: sub_405AC6+11E↑j
.text:00405BE8                 push    ebx
.text:00405BE9                 lea     ecx, [ebp+var_18]
.text:00405BEC                 call    ds:?GetLocalTm@CTime@@QBEPAUtm@@PAU2@@Z ; CTime::GetLocalTm(tm *)
.text:00405BF2                 test    eax, eax
.text:00405BF4                 jz      short loc_405BFA
.text:00405BF6                 mov     ebx, [eax+10h]
.text:00405BF9                 inc     ebx
.text:00405BFA
.text:00405BFA loc_405BFA:                             ; CODE XREF: sub_405AC6+12E↑j
.text:00405BFA                 push    0
.text:00405BFC                 lea     ecx, [ebp+var_18]
.text:00405BFF                 call    ds:?GetLocalTm@CTime@@QBEPAUtm@@PAU2@@Z ; CTime::GetLocalTm(tm *)
.text:00405C05                 test    eax, eax
.text:00405C07                 jz      short loc_405C11
.text:00405C09                 mov     eax, [eax+0Ch]
.text:00405C0C                 mov     [ebp+var_2C], eax
.text:00405C0F                 jmp     short loc_405C15
.text:00405C11 ; ---------------------------------------------------------------------------
.text:00405C11
.text:00405C11 loc_405C11:                             ; CODE XREF: sub_405AC6+141↑j
.text:00405C11                 and     [ebp+var_2C], 0
.text:00405C15
.text:00405C15 loc_405C15:                             ; CODE XREF: sub_405AC6+149↑j
.text:00405C15                 push    0
.text:00405C17                 lea     ecx, [ebp+var_18]
.text:00405C1A                 call    ds:?GetLocalTm@CTime@@QBEPAUtm@@PAU2@@Z ; CTime::GetLocalTm(tm *)
.text:00405C20                 test    eax, eax
.text:00405C22                 jz      short loc_405C2C
.text:00405C24                 mov     eax, [eax+8]
.text:00405C27                 mov     [ebp+var_20], eax
.text:00405C2A                 jmp     short loc_405C30
.text:00405C2C ; ---------------------------------------------------------------------------
.text:00405C2C
.text:00405C2C loc_405C2C:                             ; CODE XREF: sub_405AC6+15C↑j
.text:00405C2C                 or      [ebp+var_20], 0FFFFFFFFh
.text:00405C30
.text:00405C30 loc_405C30:                             ; CODE XREF: sub_405AC6+164↑j
.text:00405C30                 push    0
.text:00405C32                 lea     ecx, [ebp+var_18]
.text:00405C35                 call    ds:?GetLocalTm@CTime@@QBEPAUtm@@PAU2@@Z ; CTime::GetLocalTm(tm *)
.text:00405C3B                 test    eax, eax
.text:00405C3D                 jz      short loc_405C47
.text:00405C3F                 mov     eax, [eax+4]
.text:00405C42                 mov     [ebp+var_24], eax
.text:00405C45                 jmp     short loc_405C4B
.text:00405C47 ; ---------------------------------------------------------------------------
.text:00405C47
.text:00405C47 loc_405C47:                             ; CODE XREF: sub_405AC6+177↑j
.text:00405C47                 or      [ebp+var_24], 0FFFFFFFFh
.text:00405C4B
.text:00405C4B loc_405C4B:                             ; CODE XREF: sub_405AC6+17F↑j
.text:00405C4B                 push    0
.text:00405C4D                 lea     ecx, [ebp+var_18]
.text:00405C50                 call    ds:?GetLocalTm@CTime@@QBEPAUtm@@PAU2@@Z ; CTime::GetLocalTm(tm *)
.text:00405C56                 test    eax, eax
.text:00405C58                 jz      short loc_405C61
.text:00405C5A                 mov     eax, [eax]
.text:00405C5C                 mov     dword ptr [ebp+Data], eax
.text:00405C5F                 jmp     short loc_405C65
.text:00405C61 ; ---------------------------------------------------------------------------
.text:00405C61
.text:00405C61 loc_405C61:                             ; CODE XREF: sub_405AC6+192↑j
.text:00405C61                 or      dword ptr [ebp+Data], 0FFFFFFFFh
.text:00405C65
.text:00405C65 loc_405C65:                             ; CODE XREF: sub_405AC6+199↑j
.text:00405C65                 push    4               ; cbData
.text:00405C67                 lea     eax, [ebp+var_14]
.text:00405C6A                 mov     dword ptr [ebp+var_14], edi
.text:00405C6D                 push    eax             ; lpData
.text:00405C6E                 push    4               ; dwType
.text:00405C70                 xor     edi, edi
.text:00405C72                 push    edi             ; Reserved
.text:00405C73                 push    offset ValueName ; "YEAR"
.text:00405C78                 push    esi             ; hKey
.text:00405C79                 call    ds:RegSetValueExW
.text:00405C7F                 push    4
.text:00405C81                 mov     dword ptr [ebp+var_14], ebx
.text:00405C84                 lea     eax, [ebp+var_14]
.text:00405C87                 pop     ebx
.text:00405C88                 push    ebx             ; cbData
.text:00405C89                 push    eax             ; lpData
.text:00405C8A                 push    ebx             ; dwType
.text:00405C8B                 push    edi             ; Reserved
.text:00405C8C                 push    offset aMonth   ; "MONTH"
.text:00405C91                 push    esi             ; hKey
.text:00405C92                 call    ds:RegSetValueExW
.text:00405C98                 mov     eax, [ebp+var_2C]
.text:00405C9B                 push    ebx             ; cbData
.text:00405C9C                 mov     dword ptr [ebp+var_14], eax
.text:00405C9F                 lea     eax, [ebp+var_14]
.text:00405CA2                 push    eax             ; lpData
.text:00405CA3                 push    ebx             ; dwType
.text:00405CA4                 push    edi             ; Reserved
.text:00405CA5                 push    offset off_402E28 ; lpValueName
.text:00405CAA                 push    esi             ; hKey
.text:00405CAB                 call    ds:RegSetValueExW
.text:00405CB1                 mov     eax, [ebp+var_20]
.text:00405CB4                 push    ebx             ; cbData
.text:00405CB5                 mov     dword ptr [ebp+var_14], eax
.text:00405CB8                 lea     eax, [ebp+var_14]
.text:00405CBB                 push    eax             ; lpData
.text:00405CBC                 push    ebx             ; dwType
.text:00405CBD                 push    edi             ; Reserved
.text:00405CBE                 push    offset aHour    ; "HOUR"
.text:00405CC3                 push    esi             ; hKey
.text:00405CC4                 call    ds:RegSetValueExW
.text:00405CCA                 mov     eax, [ebp+var_24]
.text:00405CCD                 push    ebx             ; cbData
.text:00405CCE                 mov     dword ptr [ebp+var_14], eax
.text:00405CD1                 lea     eax, [ebp+var_14]
.text:00405CD4                 push    eax             ; lpData
.text:00405CD5                 push    ebx             ; dwType
.text:00405CD6                 push    edi             ; Reserved
.text:00405CD7                 push    offset aMinute  ; "MINUTE"
.text:00405CDC                 push    esi             ; hKey
.text:00405CDD                 call    ds:RegSetValueExW
.text:00405CE3                 mov     eax, dword ptr [ebp+Data]
.text:00405CE6                 push    ebx             ; cbData
.text:00405CE7                 mov     dword ptr [ebp+var_14], eax
.text:00405CEA                 lea     eax, [ebp+var_14]
.text:00405CED                 push    eax             ; lpData
.text:00405CEE                 push    ebx             ; dwType
.text:00405CEF                 push    edi             ; Reserved
.text:00405CF0                 push    offset aSecond  ; "SECOND"
.text:00405CF5                 push    esi             ; hKey
.text:00405CF6                 call    ds:RegSetValueExW
.text:00405CFC                 push    esi             ; hKey
.text:00405CFD                 call    ds:RegCloseKey
.text:00405D03                 xor     esi, esi
.text:00405D05                 inc     esi
.text:00405D06                 jmp     loc_405BA7
.text:00405D06 ; } // starts at 405AC6
.text:00405D06 sub_405AC6      endp
.text:00405D06
.text:00405D0B
.text:00405D0B ; =============== S U B R O U T I N E =======================================
.text:00405D0B
.text:00405D0B ; Attributes: bp-based frame
.text:00405D0B
.text:00405D0B sub_405D0B      proc near               ; CODE XREF: sub_404CA7:loc_404E33↑p
.text:00405D0B
.text:00405D0B hKey            = dword ptr -1Ch
.text:00405D0B var_18          = dword ptr -18h
.text:00405D0B var_14          = dword ptr -14h
.text:00405D0B var_4           = dword ptr -4
.text:00405D0B arg_0           = dword ptr  8
.text:00405D0B
.text:00405D0B ; FUNCTION CHUNK AT .text:00410D44 SIZE 0000002D BYTES
.text:00405D0B
.text:00405D0B ; __unwind { // loc_410D4C
.text:00405D0B                 push    10h
.text:00405D0D                 mov     eax, offset loc_410D4C
.text:00405D12                 call    __EH_prolog3_GS
.text:00405D17                 lea     edi, [ecx+90h]
.text:00405D1D                 mov     eax, [edi]
.text:00405D1F                 mov     esi, [eax+14h]
.text:00405D22                 mov     ecx, esi
.text:00405D24                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00405D2A                 mov     ecx, edi
.text:00405D2C                 call    esi
.text:00405D2E                 mov     edx, 0F003Fh
.text:00405D33                 mov     ecx, eax
.text:00405D35                 call    sub_40D6CA
.text:00405D3A                 test    eax, eax
.text:00405D3C                 jz      short loc_405D71
.text:00405D3E                 xor     ecx, ecx
.text:00405D40                 mov     [ebp+var_18], ecx
.text:00405D43                 mov     [ebp+var_14], ecx
.text:00405D46 ;   try {
.text:00405D46                 mov     [ebp+var_4], ecx
.text:00405D49                 lea     ecx, [ebp+hKey]
.text:00405D4C                 mov     [ebp+hKey], eax
.text:00405D4F                 mov     eax, [ebp+arg_0]
.text:00405D52                 push    dword ptr [eax]
.text:00405D54                 call    ?DeleteSubKey@CRegKey@ATL@@QAEJPBG@Z ; ATL::CRegKey::DeleteSubKey(ushort const *)
.text:00405D59                 mov     esi, eax
.text:00405D5B                 neg     esi
.text:00405D5D                 sbb     esi, esi
.text:00405D5F                 cmp     [ebp+hKey], 0
.text:00405D63                 jz      short loc_405D6E
.text:00405D65                 push    [ebp+hKey]      ; hKey
.text:00405D68                 call    ds:RegCloseKey
.text:00405D6E
.text:00405D6E loc_405D6E:                             ; CODE XREF: sub_405D0B+58↑j
.text:00405D6E                 lea     eax, [esi+1]
.text:00405D71
.text:00405D71 loc_405D71:                             ; CODE XREF: sub_405D0B+31↑j
.text:00405D71                 call    __EH_epilog3_GS
.text:00405D76                 retn    4
.text:00405D76 ;   } // starts at 405D46
.text:00405D76 ; } // starts at 405D0B
.text:00405D76 sub_405D0B      endp
.text:00405D76
.text:00405D79
.text:00405D79 ; =============== S U B R O U T I N E =======================================
.text:00405D79
.text:00405D79 ; Attributes: bp-based frame info_from_lumina
.text:00405D79
.text:00405D79 ; HKEY __stdcall OpenRegKey(const unsigned __int16 *, const unsigned __int16 *, unsigned int)
.text:00405D79 ?OpenRegKey@@YGPAUHKEY__@@PBG0K@Z proc near
.text:00405D79                                         ; CODE XREF: sub_404316+24A↑p
.text:00405D79                                         ; sub_4048DF+DE↑p ...
.text:00405D79
.text:00405D79 var_20          = byte ptr -20h
.text:00405D79 var_1C          = byte ptr -1Ch
.text:00405D79 hKey            = dword ptr -18h
.text:00405D79 lpSubKey        = dword ptr -14h
.text:00405D79 phkResult       = dword ptr -10h
.text:00405D79 var_4           = dword ptr -4
.text:00405D79 arg_4           = dword ptr  0Ch
.text:00405D79
.text:00405D79 ; FUNCTION CHUNK AT .text:00410DC2 SIZE 0000005A BYTES
.text:00405D79
.text:00405D79 ; __unwind { // loc_410E01
.text:00405D79                 push    14h
.text:00405D7B                 mov     eax, offset loc_410E01
.text:00405D80                 call    __EH_prolog3
.text:00405D85                 mov     edi, edx
.text:00405D87                 mov     esi, ecx
.text:00405D89                 test    edi, edi
.text:00405D8B                 jnz     short loc_405D98
.text:00405D8D                 test    esi, esi
.text:00405D8F                 jnz     short loc_405D98
.text:00405D91                 xor     eax, eax
.text:00405D93                 jmp     loc_405F27
.text:00405D98 ; ---------------------------------------------------------------------------
.text:00405D98
.text:00405D98 loc_405D98:                             ; CODE XREF: OpenRegKey(ushort const *,ushort const *,ulong)+12↑j
.text:00405D98                                         ; OpenRegKey(ushort const *,ushort const *,ulong)+16↑j
.text:00405D98                 mov     ebx, offset SubKey ; "SOFTWARE\\Microsoft\\Shared Tools\\MSCo"...
.text:00405D9D                 lea     ecx, [ebp+lpSubKey]
.text:00405DA0                 push    ebx
.text:00405DA1                 call    ds:??0CString@@QAE@PBG@Z ; CString::CString(ushort const *)
.text:00405DA7                 lea     eax, [ebp+phkResult]
.text:00405DAA                 xor     ecx, ecx
.text:00405DAC                 push    eax             ; phkResult
.text:00405DAD                 push    20019h          ; samDesired
.text:00405DB2                 push    ecx             ; ulOptions
.text:00405DB3                 push    ebx             ; lpSubKey
.text:00405DB4 ;   try {
.text:00405DB4                 mov     [ebp+var_4], ecx
.text:00405DB7                 push    80000002h       ; hKey
.text:00405DBC                 mov     [ebp+phkResult], ecx
.text:00405DBF                 call    ds:RegOpenKeyExW
.text:00405DC5                 test    eax, eax
.text:00405DC7                 jnz     short loc_405DD6
.text:00405DC9                 push    [ebp+phkResult] ; hKey
.text:00405DCC                 call    ds:RegCloseKey
.text:00405DD2                 xor     ebx, ebx
.text:00405DD4                 jmp     short loc_405E28
.text:00405DD6 ; ---------------------------------------------------------------------------
.text:00405DD6
.text:00405DD6 loc_405DD6:                             ; CODE XREF: OpenRegKey(ushort const *,ushort const *,ulong)+4E↑j
.text:00405DD6                 lea     eax, [ebp+hKey]
.text:00405DD9                 xor     ebx, ebx
.text:00405DDB                 push    eax             ; phkResult
.text:00405DDC                 push    0F003Fh         ; samDesired
.text:00405DE1                 push    ebx             ; ulOptions
.text:00405DE2                 push    offset aSoftwareMicros_0 ; "SOFTWARE\\Microsoft\\Shared Tools"
.text:00405DE7                 push    80000002h       ; hKey
.text:00405DEC                 call    ds:RegOpenKeyExW
.text:00405DF2                 test    eax, eax
.text:00405DF4                 jnz     short loc_405E28
.text:00405DF6                 push    ebx             ; lpdwDisposition
.text:00405DF7                 lea     eax, [ebp+phkResult]
.text:00405DFA                 push    eax             ; phkResult
.text:00405DFB                 push    ebx             ; lpSecurityAttributes
.text:00405DFC                 push    0F003Fh         ; samDesired
.text:00405E01                 push    ebx             ; dwOptions
.text:00405E02                 push    ebx             ; lpClass
.text:00405E03                 push    ebx             ; Reserved
.text:00405E04                 push    offset aMsconfig ; "MSConfig"
.text:00405E09                 push    [ebp+hKey]      ; hKey
.text:00405E0C                 call    ds:RegCreateKeyExW
.text:00405E12                 test    eax, eax
.text:00405E14                 jnz     short loc_405E1F
.text:00405E16                 push    [ebp+phkResult] ; hKey
.text:00405E19                 call    ds:RegCloseKey
.text:00405E1F
.text:00405E1F loc_405E1F:                             ; CODE XREF: OpenRegKey(ushort const *,ushort const *,ulong)+9B↑j
.text:00405E1F                 push    [ebp+hKey]      ; hKey
.text:00405E22                 call    ds:RegCloseKey
.text:00405E28
.text:00405E28 loc_405E28:                             ; CODE XREF: OpenRegKey(ushort const *,ushort const *,ulong)+5B↑j
.text:00405E28                                         ; OpenRegKey(ushort const *,ushort const *,ulong)+7B↑j
.text:00405E28                 test    esi, esi
.text:00405E2A                 jz      short loc_405E8E
.text:00405E2C                 push    esi
.text:00405E2D                 lea     ecx, [ebp+var_20]
.text:00405E30                 call    ds:??0CString@@QAE@PBG@Z ; CString::CString(ushort const *)
.text:00405E36                 mov     esi, eax
.text:00405E38                 push    offset asc_402E5C ; "\\"
.text:00405E3D                 lea     ecx, [ebp+var_1C]
.text:00405E3D ;   } // starts at 405DB4
.text:00405E40 ;   try {
.text:00405E40                 mov     byte ptr [ebp+var_4], 1
.text:00405E44                 call    ds:??0CString@@QAE@PBG@Z ; CString::CString(ushort const *)
.text:00405E4A                 push    esi
.text:00405E4B                 push    eax
.text:00405E4C                 lea     eax, [ebp+hKey]
.text:00405E4C ;   } // starts at 405E40
.text:00405E4F ;   try {
.text:00405E4F                 mov     byte ptr [ebp+var_4], 2
.text:00405E53                 push    eax
.text:00405E54                 call    ds:??H@YG?AVCString@@ABV0@0@Z ; operator+(CString const &,CString const &)
.text:00405E5A                 push    eax
.text:00405E5B                 lea     ecx, [ebp+lpSubKey]
.text:00405E5B ;   } // starts at 405E4F
.text:00405E5E ;   try {
.text:00405E5E                 mov     byte ptr [ebp+var_4], 3
.text:00405E62                 call    ds:??YCString@@QAEABV0@ABV0@@Z ; CString::operator+=(CString const &)
.text:00405E68                 lea     ecx, [ebp+hKey]
.text:00405E68 ;   } // starts at 405E5E
.text:00405E6B ;   try {
.text:00405E6B                 mov     byte ptr [ebp+var_4], 2
.text:00405E6F                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00405E75                 lea     ecx, [ebp+var_1C]
.text:00405E75 ;   } // starts at 405E6B
.text:00405E78 ;   try {
.text:00405E78                 mov     byte ptr [ebp+var_4], 1
.text:00405E7C                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00405E82                 lea     ecx, [ebp+var_20]
.text:00405E82 ;   } // starts at 405E78
.text:00405E85 ;   try {
.text:00405E85                 mov     byte ptr [ebp+var_4], bl
.text:00405E88                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00405E8E
.text:00405E8E loc_405E8E:                             ; CODE XREF: OpenRegKey(ushort const *,ushort const *,ulong)+B1↑j
.text:00405E8E                 test    edi, edi
.text:00405E90                 jz      short loc_405EF4
.text:00405E92                 push    edi
.text:00405E93                 lea     ecx, [ebp+hKey]
.text:00405E96                 call    ds:??0CString@@QAE@PBG@Z ; CString::CString(ushort const *)
.text:00405E9C                 mov     esi, eax
.text:00405E9E                 push    offset asc_402E5C ; "\\"
.text:00405EA3                 lea     ecx, [ebp+var_1C]
.text:00405EA3 ;   } // starts at 405E85
.text:00405EA6 ;   try {
.text:00405EA6                 mov     byte ptr [ebp+var_4], 4
.text:00405EAA                 call    ds:??0CString@@QAE@PBG@Z ; CString::CString(ushort const *)
.text:00405EB0                 push    esi
.text:00405EB1                 push    eax
.text:00405EB2                 lea     eax, [ebp+var_20]
.text:00405EB2 ;   } // starts at 405EA6
.text:00405EB5 ;   try {
.text:00405EB5                 mov     byte ptr [ebp+var_4], 5
.text:00405EB9                 push    eax
.text:00405EBA                 call    ds:??H@YG?AVCString@@ABV0@0@Z ; operator+(CString const &,CString const &)
.text:00405EC0                 push    eax
.text:00405EC1                 lea     ecx, [ebp+lpSubKey]
.text:00405EC1 ;   } // starts at 405EB5
.text:00405EC4 ;   try {
.text:00405EC4                 mov     byte ptr [ebp+var_4], 6
.text:00405EC8                 call    ds:??YCString@@QAEABV0@ABV0@@Z ; CString::operator+=(CString const &)
.text:00405ECE                 lea     ecx, [ebp+var_20]
.text:00405ECE ;   } // starts at 405EC4
.text:00405ED1 ;   try {
.text:00405ED1                 mov     byte ptr [ebp+var_4], 5
.text:00405ED5                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00405EDB                 lea     ecx, [ebp+var_1C]
.text:00405EDB ;   } // starts at 405ED1
.text:00405EDE ;   try {
.text:00405EDE                 mov     byte ptr [ebp+var_4], 4
.text:00405EE2                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00405EE8                 lea     ecx, [ebp+hKey]
.text:00405EE8 ;   } // starts at 405EDE
.text:00405EEB ;   try {
.text:00405EEB                 mov     byte ptr [ebp+var_4], bl
.text:00405EEE                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00405EF4
.text:00405EF4 loc_405EF4:                             ; CODE XREF: OpenRegKey(ushort const *,ushort const *,ulong)+117↑j
.text:00405EF4                 lea     eax, [ebp+phkResult]
.text:00405EF7                 push    eax             ; phkResult
.text:00405EF8                 push    20019h          ; samDesired
.text:00405EFD                 push    ebx             ; ulOptions
.text:00405EFE                 push    [ebp+lpSubKey]  ; lpSubKey
.text:00405F01                 push    80000002h       ; hKey
.text:00405F06                 call    ds:RegOpenKeyExW
.text:00405F0C                 neg     eax
.text:00405F0E                 lea     ecx, [ebp+lpSubKey]
.text:00405F11                 sbb     esi, esi
.text:00405F13                 not     esi
.text:00405F15                 and     esi, [ebp+phkResult]
.text:00405F15 ;   } // starts at 405EEB
.text:00405F18                 or      [ebp+var_4], 0FFFFFFFFh
.text:00405F1C                 mov     [ebp+phkResult], esi
.text:00405F1F                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00405F25                 mov     eax, esi
.text:00405F27
.text:00405F27 loc_405F27:                             ; CODE XREF: OpenRegKey(ushort const *,ushort const *,ulong)+1A↑j
.text:00405F27                 call    __EH_epilog3
.text:00405F2C                 retn    4
.text:00405F2C ; } // starts at 405D79
.text:00405F2C ?OpenRegKey@@YGPAUHKEY__@@PBG0K@Z endp
.text:00405F2C
.text:00405F2F
.text:00405F2F ; =============== S U B R O U T I N E =======================================
.text:00405F2F
.text:00405F2F ; Attributes: bp-based frame
.text:00405F2F
.text:00405F2F sub_405F2F      proc near               ; CODE XREF: sub_404CA7+13E↑p
.text:00405F2F                                         ; sub_404CA7+184↑p
.text:00405F2F
.text:00405F2F var_4           = byte ptr -4
.text:00405F2F arg_0           = dword ptr  8
.text:00405F2F arg_4           = dword ptr  0Ch
.text:00405F2F arg_8           = dword ptr  10h
.text:00405F2F
.text:00405F2F                 mov     edi, edi
.text:00405F31                 push    ebp
.text:00405F32                 mov     ebp, esp
.text:00405F34                 push    ecx
.text:00405F35                 push    esi
.text:00405F36                 mov     esi, [ebp+arg_0]
.text:00405F39                 push    edi
.text:00405F3A                 mov     edi, ecx
.text:00405F3C                 test    esi, esi
.text:00405F3E                 jz      short loc_405F74
.text:00405F40                 cmp     [ebp+arg_8], 0
.text:00405F44                 jz      short loc_405F50
.text:00405F46                 and     dword ptr [esi+20h], 0
.text:00405F4A                 and     dword ptr [esi+24h], 0
.text:00405F4E                 jmp     short loc_405F66
.text:00405F50 ; ---------------------------------------------------------------------------
.text:00405F50
.text:00405F50 loc_405F50:                             ; CODE XREF: sub_405F2F+15↑j
.text:00405F50                 lea     eax, [ebp+var_4]
.text:00405F53                 push    eax
.text:00405F54                 call    ds:?GetTickCount@CTime@@SG?AV1@XZ ; CTime::GetTickCount(void)
.text:00405F5A                 mov     eax, [eax]
.text:00405F5C                 mov     [esi+20h], eax
.text:00405F5F                 mov     dword ptr [esi+24h], 1
.text:00405F66
.text:00405F66 loc_405F66:                             ; CODE XREF: sub_405F2F+1F↑j
.text:00405F66                 push    [ebp+arg_8]
.text:00405F69                 mov     ecx, edi
.text:00405F6B                 push    [ebp+arg_4]
.text:00405F6E                 push    esi
.text:00405F6F                 call    sub_405F7C
.text:00405F74
.text:00405F74 loc_405F74:                             ; CODE XREF: sub_405F2F+F↑j
.text:00405F74                 pop     edi
.text:00405F75                 pop     esi
.text:00405F76                 mov     esp, ebp
.text:00405F78                 pop     ebp
.text:00405F79                 retn    0Ch
.text:00405F79 sub_405F2F      endp
.text:00405F79
.text:00405F7C
.text:00405F7C ; =============== S U B R O U T I N E =======================================
.text:00405F7C
.text:00405F7C ; Attributes: bp-based frame
.text:00405F7C
.text:00405F7C sub_405F7C      proc near               ; CODE XREF: sub_40530F+E0↑p
.text:00405F7C                                         ; sub_405F2F+40↑p
.text:00405F7C
.text:00405F7C lParam          = dword ptr -3Ch
.text:00405F7C var_38          = dword ptr -38h
.text:00405F7C var_34          = dword ptr -34h
.text:00405F7C var_28          = dword ptr -28h
.text:00405F7C arg_0           = dword ptr  8
.text:00405F7C arg_4           = dword ptr  0Ch
.text:00405F7C arg_8           = dword ptr  10h
.text:00405F7C
.text:00405F7C                 mov     edi, edi
.text:00405F7E                 push    ebp
.text:00405F7F                 mov     ebp, esp
.text:00405F81                 sub     esp, 3Ch
.text:00405F84                 cmp     [ebp+arg_8], 0
.text:00405F88                 mov     eax, [ebp+arg_4]
.text:00405F8B                 push    esi
.text:00405F8C                 push    edi
.text:00405F8D                 mov     edi, ecx
.text:00405F8F                 mov     [ebp+var_38], eax
.text:00405F92                 mov     [ebp+lParam], 1
.text:00405F99                 mov     [ebp+var_34], 3
.text:00405FA0                 jz      short loc_405FB2
.text:00405FA2                 mov     eax, [ebp+arg_0]
.text:00405FA5                 mov     [ebp+var_28], offset Source
.text:00405FAC                 and     dword ptr [eax+20h], 0
.text:00405FB0                 jmp     short loc_405FCC
.text:00405FB2 ; ---------------------------------------------------------------------------
.text:00405FB2
.text:00405FB2 loc_405FB2:                             ; CODE XREF: sub_405F7C+24↑j
.text:00405FB2                 mov     edx, [ebp+arg_0]
.text:00405FB5                 push    ecx
.text:00405FB6                 mov     ecx, esp
.text:00405FB8                 mov     eax, [edx+20h]
.text:00405FBB                 lea     esi, [edx+0Ch]
.text:00405FBE                 mov     [ecx], eax
.text:00405FC0                 mov     ecx, esi
.text:00405FC2                 call    sub_403E16
.text:00405FC7                 mov     eax, [esi]
.text:00405FC9                 mov     [ebp+var_28], eax
.text:00405FCC
.text:00405FCC loc_405FCC:                             ; CODE XREF: sub_405F7C+34↑j
.text:00405FCC                 lea     eax, [ebp+lParam]
.text:00405FCF                 push    eax             ; lParam
.text:00405FD0                 push    0               ; wParam
.text:00405FD2                 push    104Ch           ; Msg
.text:00405FD7                 push    dword ptr [edi+0A0h] ; hWnd
.text:00405FDD                 call    ds:SendMessageW
.text:00405FE3                 pop     edi
.text:00405FE4                 pop     esi
.text:00405FE5                 mov     esp, ebp
.text:00405FE7                 pop     ebp
.text:00405FE8                 retn    0Ch
.text:00405FE8 sub_405F7C      endp
.text:00405FE8
.text:00405FEB
.text:00405FEB ; =============== S U B R O U T I N E =======================================
.text:00405FEB
.text:00405FEB ; Attributes: bp-based frame
.text:00405FEB
.text:00405FEB sub_405FEB      proc near               ; CODE XREF: sub_404316+1CC↑p
.text:00405FEB
.text:00405FEB var_14          = dword ptr -14h
.text:00405FEB var_10          = byte ptr -10h
.text:00405FEB var_4           = dword ptr -4
.text:00405FEB arg_0           = dword ptr  8
.text:00405FEB arg_4           = dword ptr  0Ch
.text:00405FEB
.text:00405FEB ; FUNCTION CHUNK AT .text:00410E1C SIZE 00000024 BYTES
.text:00405FEB
.text:00405FEB ; __unwind { // loc_410E25
.text:00405FEB                 push    8
.text:00405FED                 mov     eax, offset loc_410E25
.text:00405FF2                 call    __EH_prolog3
.text:00405FF7                 mov     esi, ecx
.text:00405FF9                 cmp     [ebp+arg_0], 0
.text:00405FFD                 jz      loc_406088
.text:00406003                 mov     ecx, [esi+0F0h]
.text:00406009                 test    ecx, ecx
.text:0040600B                 jz      short loc_406088
.text:0040600D                 mov     eax, [esi+0F4h]
.text:00406013                 sub     eax, ecx
.text:00406015                 sar     eax, 2
.text:00406018                 test    eax, eax
.text:0040601A                 jz      short loc_406088
.text:0040601C                 push    [ebp+arg_0]
.text:0040601F                 lea     ecx, [ebp+var_10]
.text:00406022                 call    ds:??0CString@@QAE@PBG@Z ; CString::CString(ushort const *)
.text:00406028                 xor     ebx, ebx
.text:0040602A                 lea     ecx, [ebp+var_10]
.text:0040602D ;   try {
.text:0040602D                 mov     [ebp+var_4], ebx
.text:00406030                 call    ds:?MakeLower@CString@@QAEXXZ ; CString::MakeLower(void)
.text:00406036                 mov     eax, [esi+0F0h]
.text:0040603C                 test    eax, eax
.text:0040603E                 jz      short loc_406077
.text:00406040                 mov     edi, [esi+0F4h]
.text:00406046                 sub     edi, eax
.text:00406048                 mov     [ebp+var_14], ebx
.text:0040604B                 sar     edi, 2
.text:0040604E                 test    edi, edi
.text:00406050                 jz      short loc_406077
.text:00406052                 mov     esi, eax
.text:00406054
.text:00406054 loc_406054:                             ; CODE XREF: sub_405FEB+85↓j
.text:00406054                 mov     eax, [esi]
.text:00406056                 lea     ecx, [ebp+var_10]
.text:00406059                 push    dword ptr [eax]
.text:0040605B                 call    ?Compare@CString@@QBEHPBG@Z ; CString::Compare(ushort const *)
.text:00406060                 test    eax, eax
.text:00406062                 jz      short loc_406074
.text:00406064                 mov     eax, [ebp+var_14]
.text:00406067                 add     esi, 4
.text:0040606A                 inc     eax
.text:0040606B                 mov     [ebp+var_14], eax
.text:0040606E                 cmp     eax, edi
.text:00406070                 jb      short loc_406054
.text:00406072                 jmp     short loc_406077
.text:00406074 ; ---------------------------------------------------------------------------
.text:00406074
.text:00406074 loc_406074:                             ; CODE XREF: sub_405FEB+77↑j
.text:00406074                 xor     ebx, ebx
.text:00406076                 inc     ebx
.text:00406076 ;   } // starts at 40602D
.text:00406077
.text:00406077 loc_406077:                             ; CODE XREF: sub_405FEB+53↑j
.text:00406077                                         ; sub_405FEB+65↑j ...
.text:00406077                 or      [ebp+var_4], 0FFFFFFFFh
.text:0040607B                 lea     ecx, [ebp+var_10]
.text:0040607E                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00406084                 mov     eax, ebx
.text:00406086                 jmp     short loc_40608A
.text:00406088 ; ---------------------------------------------------------------------------
.text:00406088
.text:00406088 loc_406088:                             ; CODE XREF: sub_405FEB+12↑j
.text:00406088                                         ; sub_405FEB+20↑j ...
.text:00406088                 xor     eax, eax
.text:0040608A
.text:0040608A loc_40608A:                             ; CODE XREF: sub_405FEB+9B↑j
.text:0040608A                 call    __EH_epilog3
.text:0040608F                 retn    4
.text:0040608F ; } // starts at 405FEB
.text:0040608F sub_405FEB      endp
.text:0040608F
.text:00406092
.text:00406092 ; =============== S U B R O U T I N E =======================================
.text:00406092
.text:00406092 ; Attributes: bp-based frame
.text:00406092
.text:00406092 sub_406092      proc near               ; CODE XREF: sub_4040E0+168↑p
.text:00406092
.text:00406092 var_18          = dword ptr -18h
.text:00406092 var_14          = dword ptr -14h
.text:00406092 var_10          = dword ptr -10h
.text:00406092 var_4           = dword ptr -4
.text:00406092 arg_4           = dword ptr  0Ch
.text:00406092
.text:00406092 ; FUNCTION CHUNK AT .text:00410E40 SIZE 00000026 BYTES
.text:00406092
.text:00406092 ; __unwind { // loc_410E4B
.text:00406092                 push    0Ch
.text:00406094                 mov     eax, offset loc_410E4B
.text:00406099                 call    __EH_prolog3
.text:0040609E                 mov     edi, ecx
.text:004060A0                 mov     [ebp+var_10], edi
.text:004060A3                 xor     ebx, ebx
.text:004060A5                 cmp     ds:off_401E70, ebx ; "rpcss"
.text:004060AB                 jz      loc_40613E
.text:004060B1                 mov     esi, offset off_401E70 ; "rpcss"
.text:004060B6
.text:004060B6 loc_4060B6:                             ; CODE XREF: sub_406092+A6↓j
.text:004060B6                 push    4
.text:004060B8                 call    ds:__imp_??2@YAPAXI@Z ; operator new(uint)
.text:004060BE                 pop     ecx
.text:004060BF                 mov     [ebp+var_18], eax
.text:004060C2 ;   try {
.text:004060C2                 and     [ebp+var_4], 0
.text:004060C6                 test    eax, eax
.text:004060C8                 jz      short loc_4060D8
.text:004060CA                 push    dword ptr [esi]
.text:004060CC                 mov     ecx, eax
.text:004060CE                 call    ds:??0CString@@QAE@PBG@Z ; CString::CString(ushort const *)
.text:004060D4                 mov     esi, eax
.text:004060D6                 jmp     short loc_4060DA
.text:004060D8 ; ---------------------------------------------------------------------------
.text:004060D8
.text:004060D8 loc_4060D8:                             ; CODE XREF: sub_406092+36↑j
.text:004060D8                 xor     esi, esi
.text:004060D8 ;   } // starts at 4060C2
.text:004060DA
.text:004060DA loc_4060DA:                             ; CODE XREF: sub_406092+44↑j
.text:004060DA                 or      [ebp+var_4], 0FFFFFFFFh
.text:004060DE                 mov     [ebp+var_14], esi
.text:004060E1                 test    esi, esi
.text:004060E3                 jz      short loc_40612D
.text:004060E5                 lea     edx, [edi+0ECh]
.text:004060EB                 mov     edi, [edx+4]
.text:004060EE                 test    edi, edi
.text:004060F0                 jnz     short loc_4060F6
.text:004060F2                 xor     ecx, ecx
.text:004060F4                 jmp     short loc_4060FE
.text:004060F6 ; ---------------------------------------------------------------------------
.text:004060F6
.text:004060F6 loc_4060F6:                             ; CODE XREF: sub_406092+5E↑j
.text:004060F6                 mov     ecx, [edx+8]
.text:004060F9                 sub     ecx, edi
.text:004060FB                 sar     ecx, 2
.text:004060FE
.text:004060FE loc_4060FE:                             ; CODE XREF: sub_406092+62↑j
.text:004060FE                 test    edi, edi
.text:00406100                 jz      short loc_40611B
.text:00406102                 mov     eax, [edx+0Ch]
.text:00406105                 sub     eax, edi
.text:00406107                 sar     eax, 2
.text:0040610A                 cmp     ecx, eax
.text:0040610C                 jnb     short loc_40611B
.text:0040610E                 mov     eax, [edx+8]
.text:00406111                 lea     ecx, [eax+4]
.text:00406114                 mov     [eax], esi
.text:00406116                 mov     [edx+8], ecx
.text:00406119                 jmp     short loc_40612A
.text:0040611B ; ---------------------------------------------------------------------------
.text:0040611B
.text:0040611B loc_40611B:                             ; CODE XREF: sub_406092+6E↑j
.text:0040611B                                         ; sub_406092+7A↑j
.text:0040611B                 lea     eax, [ebp+var_14]
.text:0040611E                 push    eax             ; int
.text:0040611F                 push    ecx             ; int
.text:00406120                 push    dword ptr [edx+8] ; Source
.text:00406123                 mov     ecx, edx
.text:00406125                 call    ?_Insert_n@?$vector@PAU_row@@V?$allocator@PAU_row@@@std@@@std@@IAEXV?$_Vector_iterator@PAU_row@@V?$allocator@PAU_row@@@std@@@2@IABQAU_row@@@Z ; std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)
.text:0040612A
.text:0040612A loc_40612A:                             ; CODE XREF: sub_406092+87↑j
.text:0040612A                 mov     edi, [ebp+var_10]
.text:0040612D
.text:0040612D loc_40612D:                             ; CODE XREF: sub_406092+51↑j
.text:0040612D                 inc     ebx
.text:0040612E                 lea     esi, off_401E70[ebx*4] ; "rpcss"
.text:00406135                 cmp     dword ptr [esi], 0
.text:00406138                 jnz     loc_4060B6
.text:0040613E
.text:0040613E loc_40613E:                             ; CODE XREF: sub_406092+19↑j
.text:0040613E                 call    __EH_epilog3
.text:00406143                 retn
.text:00406143 ; } // starts at 406092
.text:00406143 sub_406092      endp
.text:00406143
.text:00406144 ; ---------------------------------------------------------------------------
.text:00406144 ; START OF FUNCTION CHUNK FOR sub_403F0B
.text:00406144 ;   ADDITIONAL PARENT FUNCTION sub_404002
.text:00406144
.text:00406144 loc_406144:                             ; CODE XREF: sub_403F0B+CB94↓j
.text:00406144                                         ; sub_404002+CAEC↓j ...
.text:00406144 ; __unwind { // loc_410B01
.text:00406144                 mov     edi, edi
.text:00406146                 push    esi
.text:00406147                 mov     esi, ecx
.text:00406149                 cmp     dword ptr [esi+4], 0
.text:0040614D                 jz      short loc_406159
.text:0040614F                 push    dword ptr [esi+4]
.text:00406152                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00406158                 pop     ecx
.text:00406159
.text:00406159 loc_406159:                             ; CODE XREF: sub_403F0B+2242↑j
.text:00406159                 xor     eax, eax
.text:0040615B                 mov     [esi+4], eax
.text:0040615E                 mov     [esi+8], eax
.text:00406161                 mov     [esi+0Ch], eax
.text:00406164                 pop     esi
.text:00406165                 retn
.text:00406165 ; } // starts at 406144
.text:00406165 ; END OF FUNCTION CHUNK FOR sub_403F0B
.text:00406166
.text:00406166 ; =============== S U B R O U T I N E =======================================
.text:00406166
.text:00406166 ; Attributes: noreturn bp-based frame
.text:00406166
.text:00406166 sub_406166      proc near               ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &):loc_4063B4↓p
.text:00406166
.text:00406166 pExceptionObject= byte ptr -54h
.text:00406166 var_2C          = byte ptr -2Ch
.text:00406166 var_4           = dword ptr -4
.text:00406166 arg_4           = dword ptr  0Ch
.text:00406166
.text:00406166 ; FUNCTION CHUNK AT .text:00406A2D SIZE 0000000A BYTES
.text:00406166 ; FUNCTION CHUNK AT .text:00410E66 SIZE 0000002D BYTES
.text:00406166
.text:00406166 ; __unwind { // loc_410E6E
.text:00406166                 push    48h
.text:00406168                 mov     eax, offset loc_410E6E
.text:0040616D                 call    __EH_prolog3_GS
.text:00406172                 push    offset aVectorTTooLong ; "vector<T> too long"
.text:00406177                 lea     ecx, [ebp+var_2C]
.text:0040617A                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::string::string(char const *)
.text:0040617F ;   try {
.text:0040617F                 and     [ebp+var_4], 0
.text:00406183                 lea     eax, [ebp+var_2C]
.text:00406186                 push    eax
.text:00406187                 lea     ecx, [ebp+pExceptionObject]
.text:0040618A                 call    ??0bad_alloc@std@@QAE@ABV01@@Z_0 ; std::bad_alloc::bad_alloc(std::bad_alloc const &)
.text:0040618F                 push    offset __TI3?AVlength_error@std@@ ; pThrowInfo
.text:00406194                 lea     eax, [ebp+pExceptionObject]
.text:00406197                 push    eax             ; pExceptionObject
.text:00406198                 call    _CxxThrowException
.text:00406198 ;   } // starts at 40617F
.text:00406198 ; } // starts at 406166
.text:00406198 sub_406166      endp
.text:00406198
.text:00406198 ; ---------------------------------------------------------------------------
.text:0040619D                 align 2
.text:0040619E
.text:0040619E ; =============== S U B R O U T I N E =======================================
.text:0040619E
.text:0040619E ; Attributes: bp-based frame info_from_lumina
.text:0040619E
.text:0040619E ; int __stdcall std::vector<_row *>::_Insert_n(void *Source, int, int)
.text:0040619E ?_Insert_n@?$vector@PAU_row@@V?$allocator@PAU_row@@@std@@@std@@IAEXV?$_Vector_iterator@PAU_row@@V?$allocator@PAU_row@@@std@@@2@IABQAU_row@@@Z proc near
.text:0040619E                                         ; CODE XREF: sub_4050D7+18C↑p
.text:0040619E                                         ; sub_406092+93↑p
.text:0040619E
.text:0040619E var_C           = dword ptr -0Ch
.text:0040619E var_8           = dword ptr -8
.text:0040619E var_4           = dword ptr -4
.text:0040619E Source          = dword ptr  8
.text:0040619E arg_8           = dword ptr  10h
.text:0040619E
.text:0040619E                 mov     edi, edi
.text:004061A0                 push    ebp
.text:004061A1                 mov     ebp, esp
.text:004061A3                 sub     esp, 0Ch
.text:004061A6                 mov     eax, [ebp+arg_8]
.text:004061A9                 push    ebx
.text:004061AA                 push    esi
.text:004061AB                 mov     esi, ecx
.text:004061AD                 xor     ebx, ebx
.text:004061AF                 mov     eax, [eax]
.text:004061B1                 push    edi
.text:004061B2                 mov     [ebp+var_4], eax
.text:004061B5                 mov     ecx, [esi+4]
.text:004061B8                 test    ecx, ecx
.text:004061BA                 jnz     short loc_4061C0
.text:004061BC                 mov     edx, ebx
.text:004061BE                 jmp     short loc_4061C8
.text:004061C0 ; ---------------------------------------------------------------------------
.text:004061C0
.text:004061C0 loc_4061C0:                             ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+1C↑j
.text:004061C0                 mov     edx, [esi+0Ch]
.text:004061C3                 sub     edx, ecx
.text:004061C5                 sar     edx, 2
.text:004061C8
.text:004061C8 loc_4061C8:                             ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+20↑j
.text:004061C8                 test    ecx, ecx
.text:004061CA                 jnz     short loc_4061D0
.text:004061CC                 mov     edi, ebx
.text:004061CE                 jmp     short loc_4061D8
.text:004061D0 ; ---------------------------------------------------------------------------
.text:004061D0
.text:004061D0 loc_4061D0:                             ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+2C↑j
.text:004061D0                 mov     edi, [esi+8]
.text:004061D3                 sub     edi, ecx
.text:004061D5                 sar     edi, 2
.text:004061D8
.text:004061D8 loc_4061D8:                             ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+30↑j
.text:004061D8                 mov     eax, 3FFFFFFFh
.text:004061DD                 sub     eax, edi
.text:004061DF                 xor     edi, edi
.text:004061E1                 inc     edi
.text:004061E2                 cmp     eax, edi
.text:004061E4                 jb      loc_4063B4
.text:004061EA                 test    ecx, ecx
.text:004061EC                 jnz     short loc_4061F2
.text:004061EE                 mov     eax, ebx
.text:004061F0                 jmp     short loc_4061FA
.text:004061F2 ; ---------------------------------------------------------------------------
.text:004061F2
.text:004061F2 loc_4061F2:                             ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+4E↑j
.text:004061F2                 mov     eax, [esi+8]
.text:004061F5                 sub     eax, ecx
.text:004061F7                 sar     eax, 2
.text:004061FA
.text:004061FA loc_4061FA:                             ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+52↑j
.text:004061FA                 inc     eax
.text:004061FB                 cmp     edx, eax
.text:004061FD                 jnb     loc_4062D4
.text:00406203                 mov     eax, edx
.text:00406205                 mov     edi, 3FFFFFFFh
.text:0040620A                 shr     eax, 1
.text:0040620C                 sub     edi, eax
.text:0040620E                 add     eax, edx
.text:00406210                 cmp     edi, edx
.text:00406212                 sbb     edx, edx
.text:00406214                 not     edx
.text:00406216                 and     edx, eax
.text:00406218                 mov     [ebp+var_8], edx
.text:0040621B                 test    ecx, ecx
.text:0040621D                 jnz     short loc_406223
.text:0040621F                 mov     eax, ebx
.text:00406221                 jmp     short loc_40622B
.text:00406223 ; ---------------------------------------------------------------------------
.text:00406223
.text:00406223 loc_406223:                             ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+7F↑j
.text:00406223                 mov     eax, [esi+8]
.text:00406226                 sub     eax, ecx
.text:00406228                 sar     eax, 2
.text:0040622B
.text:0040622B loc_40622B:                             ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+83↑j
.text:0040622B                 inc     eax
.text:0040622C                 cmp     edx, eax
.text:0040622E                 jnb     short loc_406246
.text:00406230                 test    ecx, ecx
.text:00406232                 jnz     short loc_406238
.text:00406234                 mov     eax, ebx
.text:00406236                 jmp     short loc_406240
.text:00406238 ; ---------------------------------------------------------------------------
.text:00406238
.text:00406238 loc_406238:                             ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+94↑j
.text:00406238                 mov     eax, [esi+8]
.text:0040623B                 sub     eax, ecx
.text:0040623D                 sar     eax, 2
.text:00406240
.text:00406240 loc_406240:                             ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+98↑j
.text:00406240                 lea     edx, [eax+1]
.text:00406243                 mov     [ebp+var_8], edx
.text:00406246
.text:00406246 loc_406246:                             ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+90↑j
.text:00406246                 push    edx
.text:00406247                 call    sub_4063BA
.text:0040624C                 mov     ecx, [ebp+Source]
.text:0040624F                 mov     edi, eax
.text:00406251                 sub     ecx, [esi+4]
.text:00406254                 sar     ecx, 2
.text:00406257                 mov     eax, ecx
.text:00406259                 shl     eax, 2
.text:0040625C                 mov     [ebp+var_C], eax
.text:0040625F                 test    ecx, ecx
.text:00406261                 jz      short loc_406275
.text:00406263                 push    eax             ; SourceSize
.text:00406264                 push    dword ptr [esi+4] ; Source
.text:00406267                 push    eax             ; DestinationSize
.text:00406268                 push    edi             ; Destination
.text:00406269                 call    ds:memmove_s
.text:0040626F                 mov     eax, [ebp+var_C]
.text:00406272                 add     esp, 10h
.text:00406275
.text:00406275 loc_406275:                             ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+C3↑j
.text:00406275                 mov     edx, [ebp+var_4]
.text:00406278                 lea     ecx, [edi+4]
.text:0040627B                 add     ecx, eax
.text:0040627D                 mov     [eax+edi], edx
.text:00406280                 mov     eax, [esi+8]
.text:00406283                 sub     eax, [ebp+Source]
.text:00406286                 sar     eax, 2
.text:00406289                 test    eax, eax
.text:0040628B                 jz      short loc_40629F
.text:0040628D                 shl     eax, 2
.text:00406290                 push    eax             ; SourceSize
.text:00406291                 push    [ebp+Source]    ; Source
.text:00406294                 push    eax             ; DestinationSize
.text:00406295                 push    ecx             ; Destination
.text:00406296                 call    ds:memmove_s
.text:0040629C                 add     esp, 10h
.text:0040629F
.text:0040629F loc_40629F:                             ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+ED↑j
.text:0040629F                 mov     eax, [esi+4]
.text:004062A2                 test    eax, eax
.text:004062A4                 jz      short loc_4062BA
.text:004062A6                 mov     ebx, [esi+8]
.text:004062A9                 sub     ebx, eax
.text:004062AB                 sar     ebx, 2
.text:004062AE                 test    eax, eax
.text:004062B0                 jz      short loc_4062BA
.text:004062B2                 push    eax
.text:004062B3                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:004062B9                 pop     ecx
.text:004062BA
.text:004062BA loc_4062BA:                             ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+106↑j
.text:004062BA                                         ; std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+112↑j
.text:004062BA                 mov     eax, [ebp+var_8]
.text:004062BD                 mov     [esi+4], edi
.text:004062C0                 lea     eax, [edi+eax*4]
.text:004062C3                 mov     [esi+0Ch], eax
.text:004062C6                 lea     eax, [ebx+1]
.text:004062C9                 lea     eax, [edi+eax*4]
.text:004062CC                 mov     [esi+8], eax
.text:004062CF                 jmp     loc_4063AB
.text:004062D4 ; ---------------------------------------------------------------------------
.text:004062D4
.text:004062D4 loc_4062D4:                             ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+5F↑j
.text:004062D4                 mov     ecx, [esi+8]
.text:004062D7                 mov     eax, ecx
.text:004062D9                 mov     edx, [ebp+Source]
.text:004062DC                 sub     eax, edx
.text:004062DE                 sar     eax, 2
.text:004062E1                 mov     [ebp+var_8], ecx
.text:004062E4                 cmp     eax, edi
.text:004062E6                 jnb     short loc_406348
.text:004062E8                 test    eax, eax
.text:004062EA                 jz      short loc_406302
.text:004062EC                 shl     eax, 2
.text:004062EF                 push    eax             ; SourceSize
.text:004062F0                 push    edx             ; Source
.text:004062F1                 push    eax             ; DestinationSize
.text:004062F2                 lea     eax, [edx+4]
.text:004062F5                 push    eax             ; Destination
.text:004062F6                 call    ds:memmove_s
.text:004062FC                 mov     edx, [ebp+Source]
.text:004062FF                 add     esp, 10h
.text:00406302
.text:00406302 loc_406302:                             ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+14C↑j
.text:00406302                 mov     eax, [esi+8]
.text:00406305                 sub     eax, edx
.text:00406307                 sar     eax, 2
.text:0040630A                 sub     edi, eax
.text:0040630C                 jz      short loc_40631B
.text:0040630E                 mov     eax, [ebp+var_4]
.text:00406311                 mov     ecx, edi
.text:00406313                 mov     edi, [esi+8]
.text:00406316                 rep stosd
.text:00406318                 mov     edx, [ebp+Source]
.text:0040631B
.text:0040631B loc_40631B:                             ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+16E↑j
.text:0040631B                 add     dword ptr [esi+8], 4
.text:0040631F                 mov     ecx, [esi+8]
.text:00406322                 add     ecx, 0FFFFFFFCh
.text:00406325                 mov     eax, ecx
.text:00406327                 sub     eax, edx
.text:00406329                 add     eax, 3
.text:0040632C                 shr     eax, 2
.text:0040632F                 cmp     ecx, edx
.text:00406331                 sbb     ecx, ecx
.text:00406333                 not     ecx
.text:00406335                 and     ecx, eax
.text:00406337                 jz      short loc_4063AB
.text:00406339                 mov     eax, [ebp+var_4]
.text:0040633C
.text:0040633C loc_40633C:                             ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+1A6↓j
.text:0040633C                 inc     ebx
.text:0040633D                 mov     [edx], eax
.text:0040633F                 lea     edx, [edx+4]
.text:00406342                 cmp     ebx, ecx
.text:00406344                 jnz     short loc_40633C
.text:00406346                 jmp     short loc_4063AB
.text:00406348 ; ---------------------------------------------------------------------------
.text:00406348
.text:00406348 loc_406348:                             ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+148↑j
.text:00406348                 lea     edi, [ecx-4]
.text:0040634B                 mov     eax, ecx
.text:0040634D                 sub     eax, edi
.text:0040634F                 sar     eax, 2
.text:00406352                 mov     ebx, eax
.text:00406354                 shl     ebx, 2
.text:00406357                 test    eax, eax
.text:00406359                 jz      short loc_40636E
.text:0040635B                 push    ebx             ; SourceSize
.text:0040635C                 push    edi             ; Source
.text:0040635D                 push    ebx             ; DestinationSize
.text:0040635E                 push    ecx             ; Destination
.text:0040635F                 call    ds:memmove_s
.text:00406365                 mov     edx, [ebp+Source]
.text:00406368                 add     esp, 10h
.text:0040636B                 mov     ecx, [ebp+var_8]
.text:0040636E
.text:0040636E loc_40636E:                             ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+1BB↑j
.text:0040636E                 sub     edi, edx
.text:00406370                 lea     eax, [ebx+ecx]
.text:00406373                 sar     edi, 2
.text:00406376                 mov     [esi+8], eax
.text:00406379                 test    edi, edi
.text:0040637B                 jle     short loc_406394
.text:0040637D                 mov     eax, edi
.text:0040637F                 shl     eax, 2
.text:00406382                 push    eax             ; SourceSize
.text:00406383                 push    edx             ; Source
.text:00406384                 push    eax             ; DestinationSize
.text:00406385                 sub     ecx, eax
.text:00406387                 push    ecx             ; Destination
.text:00406388                 call    ds:memmove_s
.text:0040638E                 mov     edx, [ebp+Source]
.text:00406391                 add     esp, 10h
.text:00406394
.text:00406394 loc_406394:                             ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+1DD↑j
.text:00406394                 lea     eax, [edx+4]
.text:00406397                 jmp     short loc_4063A7
.text:00406399 ; ---------------------------------------------------------------------------
.text:00406399
.text:00406399 loc_406399:                             ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+20B↓j
.text:00406399                 mov     eax, [ebp+var_4]
.text:0040639C                 mov     [edx], eax
.text:0040639E                 add     edx, 4
.text:004063A1                 mov     eax, [ebp+Source]
.text:004063A4                 add     eax, 4
.text:004063A7
.text:004063A7 loc_4063A7:                             ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+1F9↑j
.text:004063A7                 cmp     edx, eax
.text:004063A9                 jnz     short loc_406399
.text:004063AB
.text:004063AB loc_4063AB:                             ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+131↑j
.text:004063AB                                         ; std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+199↑j ...
.text:004063AB                 pop     edi
.text:004063AC                 pop     esi
.text:004063AD                 pop     ebx
.text:004063AE                 mov     esp, ebp
.text:004063B0                 pop     ebp
.text:004063B1                 retn    0Ch
.text:004063B4 ; ---------------------------------------------------------------------------
.text:004063B4
.text:004063B4 loc_4063B4:                             ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+46↑j
.text:004063B4                 call    sub_406166
.text:004063B4 ?_Insert_n@?$vector@PAU_row@@V?$allocator@PAU_row@@@std@@@std@@IAEXV?$_Vector_iterator@PAU_row@@V?$allocator@PAU_row@@@std@@@2@IABQAU_row@@@Z endp
.text:004063B4
.text:004063B4 ; ---------------------------------------------------------------------------
.text:004063B9                 align 2
.text:004063BA
.text:004063BA ; =============== S U B R O U T I N E =======================================
.text:004063BA
.text:004063BA ; Attributes: bp-based frame
.text:004063BA
.text:004063BA sub_4063BA      proc near               ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+A9↑p
.text:004063BA
.text:004063BA pExceptionObject= byte ptr -0Ch
.text:004063BA arg_0           = dword ptr  8
.text:004063BA
.text:004063BA                 mov     edi, edi
.text:004063BC                 push    ebp
.text:004063BD                 mov     ebp, esp
.text:004063BF                 mov     ecx, [ebp+arg_0]
.text:004063C2                 sub     esp, 0Ch
.text:004063C5                 test    ecx, ecx
.text:004063C7                 jnz     short loc_4063DC
.text:004063C9
.text:004063C9 loc_4063C9:                             ; CODE XREF: sub_4063BA+2C↓j
.text:004063C9                 mov     eax, ecx
.text:004063CB                 shl     eax, 2
.text:004063CE                 push    eax
.text:004063CF                 call    ds:__imp_??2@YAPAXI@Z ; operator new(uint)
.text:004063D5                 pop     ecx
.text:004063D6                 mov     esp, ebp
.text:004063D8                 pop     ebp
.text:004063D9                 retn    4
.text:004063DC ; ---------------------------------------------------------------------------
.text:004063DC
.text:004063DC loc_4063DC:                             ; CODE XREF: sub_4063BA+D↑j
.text:004063DC                 or      eax, 0FFFFFFFFh
.text:004063DF                 xor     edx, edx
.text:004063E1                 div     ecx
.text:004063E3                 cmp     eax, 4
.text:004063E6                 jnb     short loc_4063C9
.text:004063E8                 push    0
.text:004063EA                 lea     ecx, [ebp+pExceptionObject]
.text:004063ED                 call    sub_4066C6
.text:004063F2                 push    offset __TI2?AVbad_alloc@std@@ ; pThrowInfo
.text:004063F7                 lea     eax, [ebp+pExceptionObject]
.text:004063FA                 push    eax             ; pExceptionObject
.text:004063FB                 call    _CxxThrowException
.text:004063FB sub_4063BA      endp
.text:004063FB
.text:004063FB ; ---------------------------------------------------------------------------
.text:00406400                 db 0CCh
.text:00406401 ; Exported entry 375. ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text:00406401
.text:00406401 ; =============== S U B R O U T I N E =======================================
.text:00406401
.text:00406401 ; Attributes: bp-based frame info_from_lumina
.text:00406401
.text:00406401 ; int __stdcall std::string::string(char *Str)
.text:00406401 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text:00406401                                         ; CODE XREF: sub_406166+14↑p
.text:00406401                                         ; sub_40FE2A+14↓p ...
.text:00406401
.text:00406401 arg_0           = dword ptr  8
.text:00406401
.text:00406401                 mov     edi, edi
.text:00406403                 push    ebp
.text:00406404                 mov     ebp, esp
.text:00406406                 push    esi
.text:00406407                 mov     esi, ecx
.text:00406409                 push    0
.text:0040640B                 mov     dword ptr [esi+18h], 0Fh
.text:00406412                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::string::_Eos(uint)
.text:00406417                 push    [ebp+arg_0]
.text:0040641A                 mov     ecx, esi
.text:0040641C                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@QAEAAV12@PBD@Z ; std::string::assign(char const *)
.text:00406421                 mov     eax, esi
.text:00406423                 pop     esi
.text:00406424                 pop     ebp
.text:00406425                 retn    4
.text:00406425 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text:00406425
.text:00406428
.text:00406428 ; =============== S U B R O U T I N E =======================================
.text:00406428
.text:00406428 ; Attributes: bp-based frame info_from_lumina
.text:00406428
.text:00406428 ; int __stdcall std::string::assign(void *Src)
.text:00406428 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@QAEAAV12@PBD@Z proc near
.text:00406428                                         ; CODE XREF: std::string::string(char const *)+1B↑p
.text:00406428
.text:00406428 Source          = dword ptr  8
.text:00406428
.text:00406428                 mov     edi, edi
.text:0040642A                 push    ebp
.text:0040642B                 mov     ebp, esp
.text:0040642D                 mov     edx, [ebp+Source]
.text:00406430                 push    esi
.text:00406431                 lea     esi, [edx+1]
.text:00406434
.text:00406434 loc_406434:                             ; CODE XREF: std::string::assign(char const *)+11↓j
.text:00406434                 mov     al, [edx]
.text:00406436                 inc     edx
.text:00406437                 test    al, al
.text:00406439                 jnz     short loc_406434
.text:0040643B                 sub     edx, esi
.text:0040643D                 push    edx             ; SourceSize
.text:0040643E                 push    [ebp+Source]    ; Source
.text:00406441                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@QAEAAV12@PBDI@Z ; std::string::assign(char const *,uint)
.text:00406446                 pop     esi
.text:00406447                 pop     ebp
.text:00406448                 retn    4
.text:00406448 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@QAEAAV12@PBD@Z endp
.text:00406448
.text:0040644B
.text:0040644B ; =============== S U B R O U T I N E =======================================
.text:0040644B
.text:0040644B ; Attributes: bp-based frame info_from_lumina
.text:0040644B
.text:0040644B ; int __stdcall std::string::assign(void *Src, rsize_t MaxCount)
.text:0040644B ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@QAEAAV12@PBDI@Z proc near
.text:0040644B                                         ; CODE XREF: std::string::assign(char const *)+19↑p
.text:0040644B
.text:0040644B Source          = dword ptr  8
.text:0040644B SourceSize      = dword ptr  0Ch
.text:0040644B
.text:0040644B                 mov     edi, edi
.text:0040644D                 push    ebp
.text:0040644E                 mov     ebp, esp
.text:00406450                 push    esi
.text:00406451                 push    edi
.text:00406452                 mov     edi, [ebp+Source]
.text:00406455                 mov     esi, ecx
.text:00406457                 push    edi
.text:00406458                 call    ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@IAE_NPBD@Z ; std::string::_Inside(char const *)
.text:0040645D                 test    al, al
.text:0040645F                 jz      short loc_40647F
.text:00406461                 cmp     dword ptr [esi+18h], 10h
.text:00406465                 jb      short loc_40646C
.text:00406467                 mov     eax, [esi+4]
.text:0040646A                 jmp     short loc_40646F
.text:0040646C ; ---------------------------------------------------------------------------
.text:0040646C
.text:0040646C loc_40646C:                             ; CODE XREF: std::string::assign(char const *,uint)+1A↑j
.text:0040646C                 lea     eax, [esi+4]
.text:0040646F
.text:0040646F loc_40646F:                             ; CODE XREF: std::string::assign(char const *,uint)+1F↑j
.text:0040646F                 push    [ebp+SourceSize]
.text:00406472                 sub     edi, eax
.text:00406474                 mov     ecx, esi
.text:00406476                 push    edi
.text:00406477                 push    esi
.text:00406478                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@QAEAAV12@ABV12@II@Z ; std::string::assign(std::string const &,uint,uint)
.text:0040647D                 jmp     short loc_4064BA
.text:0040647F ; ---------------------------------------------------------------------------
.text:0040647F
.text:0040647F loc_40647F:                             ; CODE XREF: std::string::assign(char const *,uint)+14↑j
.text:0040647F                 push    0
.text:00406481                 push    [ebp+SourceSize]
.text:00406484                 mov     ecx, esi
.text:00406486                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@IAE_NI_N@Z ; std::string::_Grow(uint,bool)
.text:0040648B                 test    al, al
.text:0040648D                 jz      short loc_4064B8
.text:0040648F                 cmp     dword ptr [esi+18h], 10h
.text:00406493                 jb      short loc_40649A
.text:00406495                 mov     eax, [esi+4]
.text:00406498                 jmp     short loc_40649D
.text:0040649A ; ---------------------------------------------------------------------------
.text:0040649A
.text:0040649A loc_40649A:                             ; CODE XREF: std::string::assign(char const *,uint)+48↑j
.text:0040649A                 lea     eax, [esi+4]
.text:0040649D
.text:0040649D loc_40649D:                             ; CODE XREF: std::string::assign(char const *,uint)+4D↑j
.text:0040649D                 push    [ebp+SourceSize] ; SourceSize
.text:004064A0                 push    edi             ; Source
.text:004064A1                 push    dword ptr [esi+18h] ; DestinationSize
.text:004064A4                 push    eax             ; Destination
.text:004064A5                 call    ds:memcpy_s
.text:004064AB                 add     esp, 10h
.text:004064AE                 mov     ecx, esi
.text:004064B0                 push    [ebp+SourceSize]
.text:004064B3                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::string::_Eos(uint)
.text:004064B8
.text:004064B8 loc_4064B8:                             ; CODE XREF: std::string::assign(char const *,uint)+42↑j
.text:004064B8                 mov     eax, esi
.text:004064BA
.text:004064BA loc_4064BA:                             ; CODE XREF: std::string::assign(char const *,uint)+32↑j
.text:004064BA                 pop     edi
.text:004064BB                 pop     esi
.text:004064BC                 pop     ebp
.text:004064BD                 retn    8
.text:004064BD ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@QAEAAV12@PBDI@Z endp
.text:004064BD
.text:004064C0
.text:004064C0 ; =============== S U B R O U T I N E =======================================
.text:004064C0
.text:004064C0 ; Attributes: bp-based frame info_from_lumina
.text:004064C0
.text:004064C0 ; protected: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>, class _STL70>::_Inside(char const *)
.text:004064C0 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@IAE_NPBD@Z proc near
.text:004064C0                                         ; CODE XREF: std::string::assign(char const *,uint)+D↑p
.text:004064C0
.text:004064C0 arg_0           = dword ptr  8
.text:004064C0
.text:004064C0                 mov     edi, edi
.text:004064C2                 push    ebp
.text:004064C3                 mov     ebp, esp
.text:004064C5                 cmp     dword ptr [ecx+18h], 10h
.text:004064C9                 lea     edx, [ecx+4]
.text:004064CC                 jb      short loc_4064D2
.text:004064CE                 mov     eax, [edx]
.text:004064D0                 jmp     short loc_4064D4
.text:004064D2 ; ---------------------------------------------------------------------------
.text:004064D2
.text:004064D2 loc_4064D2:                             ; CODE XREF: std::string::_Inside(char const *)+C↑j
.text:004064D2                 mov     eax, edx
.text:004064D4
.text:004064D4 loc_4064D4:                             ; CODE XREF: std::string::_Inside(char const *)+10↑j
.text:004064D4                 cmp     [ebp+arg_0], eax
.text:004064D7                 jb      short loc_4064EF
.text:004064D9                 cmp     dword ptr [ecx+18h], 10h
.text:004064DD                 jb      short loc_4064E1
.text:004064DF                 mov     edx, [edx]
.text:004064E1
.text:004064E1 loc_4064E1:                             ; CODE XREF: std::string::_Inside(char const *)+1D↑j
.text:004064E1                 mov     eax, [ecx+14h]
.text:004064E4                 add     eax, edx
.text:004064E6                 cmp     eax, [ebp+arg_0]
.text:004064E9                 jbe     short loc_4064EF
.text:004064EB                 mov     al, 1
.text:004064ED                 jmp     short loc_4064F1
.text:004064EF ; ---------------------------------------------------------------------------
.text:004064EF
.text:004064EF loc_4064EF:                             ; CODE XREF: std::string::_Inside(char const *)+17↑j
.text:004064EF                                         ; std::string::_Inside(char const *)+29↑j
.text:004064EF                 xor     al, al
.text:004064F1
.text:004064F1 loc_4064F1:                             ; CODE XREF: std::string::_Inside(char const *)+2D↑j
.text:004064F1                 pop     ebp
.text:004064F2                 retn    4
.text:004064F2 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@IAE_NPBD@Z endp
.text:004064F2
.text:004064F2 ; ---------------------------------------------------------------------------
.text:004064F5                 align 10h
.text:00406500
.text:00406500 ; =============== S U B R O U T I N E =======================================
.text:00406500
.text:00406500
.text:00406500 sub_406500      proc near               ; DATA XREF: .text:const CPageServices::`vftable'↑o
.text:00406500                                         ; .text:00402910↑o
.text:00406500                 sub     ecx, 90h
.text:00406506                 jmp     ??_GCBuffer@D3DX11Core@@UAEPAXI@Z ; D3DX11Core::CBuffer::`scalar deleting destructor'(uint)
.text:00406506 sub_406500      endp
.text:00406506
.text:0040650B
.text:0040650B ; =============== S U B R O U T I N E =======================================
.text:0040650B
.text:0040650B ; Attributes: bp-based frame info_from_lumina
.text:0040650B
.text:0040650B ; public: __thiscall std::logic_error::logic_error(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>, class _STL70> const &)
.text:0040650B ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@1@@Z proc near
.text:0040650B                                         ; CODE XREF: std::bad_alloc::bad_alloc(std::bad_alloc const &)+F↓p
.text:0040650B                                         ; std::out_of_range::out_of_range(std::string const &,_STL70 *)+F↓p
.text:0040650B
.text:0040650B var_10          = dword ptr -10h
.text:0040650B var_4           = dword ptr -4
.text:0040650B arg_0           = dword ptr  8
.text:0040650B arg_4           = dword ptr  0Ch
.text:0040650B
.text:0040650B ; FUNCTION CHUNK AT .text:00410E93 SIZE 00000024 BYTES
.text:0040650B
.text:0040650B ; __unwind { // loc_410E9C
.text:0040650B                 push    4
.text:0040650D                 mov     eax, offset loc_410E9C
.text:00406512                 call    __EH_prolog3
.text:00406517                 mov     esi, ecx
.text:00406519                 mov     [ebp+var_10], esi
.text:0040651C                 call    ds:__imp_??0exception@@QAE@XZ ; exception::exception(void)
.text:00406522 ;   try {
.text:00406522                 and     [ebp+var_4], 0
.text:00406526                 lea     ecx, [esi+0Ch]
.text:00406529                 push    [ebp+arg_0]
.text:0040652C                 mov     dword ptr [esi], offset ??_7logic_error@std@@6B@ ; const std::logic_error::`vftable'
.text:00406532                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::string::string(std::string const &)
.text:00406537                 mov     eax, esi
.text:00406539                 call    __EH_epilog3
.text:0040653E                 retn    4
.text:0040653E ;   } // starts at 406522
.text:0040653E ; } // starts at 40650B
.text:0040653E ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@1@@Z endp
.text:0040653E
.text:0040653E ; ---------------------------------------------------------------------------
.text:00406541                 align 10h
.text:00406550
.text:00406550 ; =============== S U B R O U T I N E =======================================
.text:00406550
.text:00406550 ; Attributes: bp-based frame info_from_lumina
.text:00406550
.text:00406550 ; void *__thiscall Projection::ObjectAsIPropertyValue::`scalar deleting destructor'(Projection::ObjectAsIPropertyValue *__hidden this, unsigned int)
.text:00406550 ??_GObjectAsIPropertyValue@Projection@@EAEPAXI@Z proc near
.text:00406550                                         ; DATA XREF: .text:const std::length_error::`vftable'↑o
.text:00406550                                         ; .text:00402914↑o
.text:00406550
.text:00406550 arg_0           = byte ptr  8
.text:00406550
.text:00406550                 mov     edi, edi
.text:00406552                 push    ebp
.text:00406553                 mov     ebp, esp
.text:00406555                 push    esi
.text:00406556                 mov     esi, ecx
.text:00406558                 mov     dword ptr [esi], offset ??_7length_error@std@@6B@ ; const std::length_error::`vftable'
.text:0040655E                 call    ??1logic_error@std@@UAE@XZ ; std::logic_error::~logic_error(void)
.text:00406563                 test    [ebp+arg_0], 1
.text:00406567                 jz      short loc_406571
.text:00406569                 push    esi
.text:0040656A                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00406570                 pop     ecx
.text:00406571
.text:00406571 loc_406571:                             ; CODE XREF: Projection::ObjectAsIPropertyValue::`scalar deleting destructor'(uint)+17↑j
.text:00406571                 mov     eax, esi
.text:00406573                 pop     esi
.text:00406574                 pop     ebp
.text:00406575                 retn    4
.text:00406575 ??_GObjectAsIPropertyValue@Projection@@EAEPAXI@Z endp
.text:00406575
.text:00406575 ; ---------------------------------------------------------------------------
.text:00406578                 align 10h
.text:00406580
.text:00406580 ; =============== S U B R O U T I N E =======================================
.text:00406580
.text:00406580
.text:00406580 sub_406580      proc near               ; DATA XREF: .text:00402918↑o
.text:00406580                                         ; .text:__TI3?AVlength_error@std@@↓o
.text:00406580                 mov     dword ptr [ecx], offset ??_7length_error@std@@6B@ ; const std::length_error::`vftable'
.text:00406586                 jmp     ??1logic_error@std@@UAE@XZ ; std::logic_error::~logic_error(void)
.text:00406586 sub_406580      endp
.text:00406586
.text:00406586 ; ---------------------------------------------------------------------------
.text:0040658B                 align 10h
.text:00406590
.text:00406590 ; =============== S U B R O U T I N E =======================================
.text:00406590
.text:00406590 ; Attributes: bp-based frame info_from_lumina
.text:00406590
.text:00406590 ; void __thiscall std::bad_alloc::bad_alloc(std::bad_alloc *this, const std::bad_alloc *__that)
.text:00406590 ??0bad_alloc@std@@QAE@ABV01@@Z proc near
.text:00406590                                         ; CODE XREF: std::logic_error::_Doraise(void)+16↓p
.text:00406590                                         ; DATA XREF: .text:0040291C↑o ...
.text:00406590
.text:00406590 var_4           = dword ptr -4
.text:00406590 arg_0           = dword ptr  8
.text:00406590
.text:00406590                 mov     edi, edi
.text:00406592                 push    ebp
.text:00406593                 mov     ebp, esp
.text:00406595                 push    ecx
.text:00406596                 push    esi
.text:00406597                 push    [ebp+arg_0]
.text:0040659A                 mov     esi, ecx
.text:0040659C                 mov     [ebp+var_4], esi
.text:0040659F                 call    ??0logic_error@std@@QAE@ABV01@@Z ; std::logic_error::logic_error(std::logic_error const &)
.text:004065A4                 mov     dword ptr [esi], offset ??_7length_error@std@@6B@ ; const std::length_error::`vftable'
.text:004065AA                 mov     eax, esi
.text:004065AC                 pop     esi
.text:004065AD                 mov     esp, ebp
.text:004065AF                 pop     ebp
.text:004065B0                 retn    4
.text:004065B0 ??0bad_alloc@std@@QAE@ABV01@@Z endp
.text:004065B0
.text:004065B0 ; ---------------------------------------------------------------------------
.text:004065B3                 align 10h
.text:004065C0
.text:004065C0 ; =============== S U B R O U T I N E =======================================
.text:004065C0
.text:004065C0 ; Attributes: bp-based frame info_from_lumina
.text:004065C0
.text:004065C0 ; void *__thiscall D3DX11Core::CBuffer::`scalar deleting destructor'(D3DX11Core::CBuffer *__hidden this, unsigned int)
.text:004065C0 ??_GCBuffer@D3DX11Core@@UAEPAXI@Z_0 proc near
.text:004065C0                                         ; DATA XREF: .text:const std::logic_error::`vftable'↑o
.text:004065C0                                         ; .text:00402920↑o
.text:004065C0
.text:004065C0 arg_0           = byte ptr  8
.text:004065C0
.text:004065C0                 mov     edi, edi
.text:004065C2                 push    ebp
.text:004065C3                 mov     ebp, esp
.text:004065C5                 push    esi
.text:004065C6                 mov     esi, ecx
.text:004065C8                 call    ??1logic_error@std@@UAE@XZ ; std::logic_error::~logic_error(void)
.text:004065CD                 test    [ebp+arg_0], 1
.text:004065D1                 jz      short loc_4065DB
.text:004065D3                 push    esi
.text:004065D4                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:004065DA                 pop     ecx
.text:004065DB
.text:004065DB loc_4065DB:                             ; CODE XREF: D3DX11Core::CBuffer::`scalar deleting destructor'(uint)+11↑j
.text:004065DB                 mov     eax, esi
.text:004065DD                 pop     esi
.text:004065DE                 pop     ebp
.text:004065DF                 retn    4
.text:004065DF ??_GCBuffer@D3DX11Core@@UAEPAXI@Z_0 endp
.text:004065DF
.text:004065DF ; ---------------------------------------------------------------------------
.text:004065E2                 align 10h
.text:004065F0
.text:004065F0 ; =============== S U B R O U T I N E =======================================
.text:004065F0
.text:004065F0
.text:004065F0 sub_4065F0      proc near               ; DATA XREF: .text:00401004↑o
.text:004065F0                                         ; .text:0040114C↑o ...
.text:004065F0                 cmp     dword ptr [ecx+24h], 10h
.text:004065F4                 jb      short loc_4065FA
.text:004065F6                 mov     eax, [ecx+10h]
.text:004065F9                 retn
.text:004065FA ; ---------------------------------------------------------------------------
.text:004065FA
.text:004065FA loc_4065FA:                             ; CODE XREF: sub_4065F0+4↑j
.text:004065FA                 lea     eax, [ecx+10h]
.text:004065FD                 retn
.text:004065FD sub_4065F0      endp
.text:004065FD
.text:004065FD ; ---------------------------------------------------------------------------
.text:004065FE                 align 10h
.text:00406600
.text:00406600 ; =============== S U B R O U T I N E =======================================
.text:00406600
.text:00406600 ; Attributes: info_from_lumina
.text:00406600
.text:00406600 ; void __thiscall std::logic_error::~logic_error(std::logic_error *__hidden this)
.text:00406600 ??1logic_error@std@@UAE@XZ proc near    ; CODE XREF: Projection::ObjectAsIPropertyValue::`scalar deleting destructor'(uint)+E↑p
.text:00406600                                         ; sub_406580+6↑j ...
.text:00406600                 mov     edi, edi
.text:00406602                 push    esi
.text:00406603                 mov     esi, ecx
.text:00406605                 push    0               ; SourceSize
.text:00406607                 push    1               ; char
.text:00406609                 lea     ecx, [esi+0Ch]
.text:0040660C                 mov     dword ptr [esi], offset ??_7logic_error@std@@6B@ ; const std::logic_error::`vftable'
.text:00406612                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
.text:00406617                 mov     ecx, esi
.text:00406619                 pop     esi
.text:0040661A                 jmp     ds:__imp_??1exception@@UAE@XZ ; exception::~exception(void)
.text:0040661A ??1logic_error@std@@UAE@XZ endp
.text:0040661A
.text:00406620
.text:00406620 ; =============== S U B R O U T I N E =======================================
.text:00406620
.text:00406620 ; Attributes: noreturn bp-based frame info_from_lumina
.text:00406620
.text:00406620 ; void __thiscall __noreturn std::logic_error::_Doraise(std::logic_error *__hidden this)
.text:00406620 ?_Doraise@logic_error@std@@MBEXXZ proc near
.text:00406620                                         ; DATA XREF: .text:00401150↑o
.text:00406620                                         ; .text:0040292C↑o
.text:00406620
.text:00406620 pExceptionObject= byte ptr -2Ch
.text:00406620 var_4           = dword ptr -4
.text:00406620
.text:00406620                 mov     edi, edi
.text:00406622                 push    ebp
.text:00406623                 mov     ebp, esp
.text:00406625                 sub     esp, 2Ch
.text:00406628                 mov     eax, ___security_cookie
.text:0040662D                 xor     eax, ebp
.text:0040662F                 mov     [ebp+var_4], eax
.text:00406632                 push    ecx
.text:00406633                 lea     ecx, [ebp+pExceptionObject]
.text:00406636                 call    ??0logic_error@std@@QAE@ABV01@@Z ; std::logic_error::logic_error(std::logic_error const &)
.text:0040663B                 push    offset __TI2?AVlogic_error@std@@ ; pThrowInfo
.text:00406640                 lea     eax, [ebp+pExceptionObject]
.text:00406643                 push    eax             ; pExceptionObject
.text:00406644                 call    _CxxThrowException
.text:00406644 ?_Doraise@logic_error@std@@MBEXXZ endp
.text:00406644
.text:00406644 ; ---------------------------------------------------------------------------
.text:00406649                 align 2
.text:0040664A
.text:0040664A ; =============== S U B R O U T I N E =======================================
.text:0040664A
.text:0040664A ; Attributes: bp-based frame info_from_lumina
.text:0040664A
.text:0040664A ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>, class _STL70> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>, class _STL70>::erase(unsigned int, unsigned int)
.text:0040664A ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@QAEAAV12@II@Z proc near
.text:0040664A                                         ; CODE XREF: std::string::assign(std::string const &,uint,uint)+35↓p
.text:0040664A                                         ; std::string::assign(std::string const &,uint,uint)+42↓p
.text:0040664A
.text:0040664A var_4           = dword ptr -4
.text:0040664A arg_0           = dword ptr  8
.text:0040664A arg_4           = dword ptr  0Ch
.text:0040664A
.text:0040664A                 mov     edi, edi
.text:0040664C                 push    ebp
.text:0040664D                 mov     ebp, esp
.text:0040664F                 push    ecx
.text:00406650                 push    ebx
.text:00406651                 mov     ebx, [ebp+arg_0]
.text:00406654                 push    esi
.text:00406655                 mov     esi, ecx
.text:00406657                 push    edi
.text:00406658                 cmp     [esi+14h], ebx
.text:0040665B                 jnb     short loc_406662
.text:0040665D                 call    ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran(void)
.text:00406662 ; ---------------------------------------------------------------------------
.text:00406662
.text:00406662 loc_406662:                             ; CODE XREF: std::string::erase(uint,uint)+11↑j
.text:00406662                 mov     eax, [esi+14h]
.text:00406665                 mov     edi, [ebp+arg_4]
.text:00406668                 sub     eax, ebx
.text:0040666A                 cmp     eax, edi
.text:0040666C                 jnb     short loc_406670
.text:0040666E                 mov     edi, eax
.text:00406670
.text:00406670 loc_406670:                             ; CODE XREF: std::string::erase(uint,uint)+22↑j
.text:00406670                 test    edi, edi
.text:00406672                 jz      short loc_4066BB
.text:00406674                 mov     edx, [esi+18h]
.text:00406677                 lea     ecx, [esi+4]
.text:0040667A                 cmp     edx, 10h
.text:0040667D                 jb      short loc_406689
.text:0040667F                 mov     ebx, [ecx]
.text:00406681                 mov     [ebp+var_4], ebx
.text:00406684                 mov     ebx, [ebp+arg_0]
.text:00406687                 jmp     short loc_40668C
.text:00406689 ; ---------------------------------------------------------------------------
.text:00406689
.text:00406689 loc_406689:                             ; CODE XREF: std::string::erase(uint,uint)+33↑j
.text:00406689                 mov     [ebp+var_4], ecx
.text:0040668C
.text:0040668C loc_40668C:                             ; CODE XREF: std::string::erase(uint,uint)+3D↑j
.text:0040668C                 cmp     edx, 10h
.text:0040668F                 jb      short loc_406693
.text:00406691                 mov     ecx, [ecx]
.text:00406693
.text:00406693 loc_406693:                             ; CODE XREF: std::string::erase(uint,uint)+45↑j
.text:00406693                 sub     eax, edi
.text:00406695                 sub     edx, ebx
.text:00406697                 push    eax             ; SourceSize
.text:00406698                 mov     eax, [ebp+var_4]
.text:0040669B                 add     eax, ebx
.text:0040669D                 add     eax, edi
.text:0040669F                 push    eax             ; Source
.text:004066A0                 push    edx             ; DestinationSize
.text:004066A1                 lea     eax, [ecx+ebx]
.text:004066A4                 push    eax             ; Destination
.text:004066A5                 call    ds:memmove_s
.text:004066AB                 mov     eax, [esi+14h]
.text:004066AE                 add     esp, 10h
.text:004066B1                 sub     eax, edi
.text:004066B3                 mov     ecx, esi
.text:004066B5                 push    eax
.text:004066B6                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::string::_Eos(uint)
.text:004066BB
.text:004066BB loc_4066BB:                             ; CODE XREF: std::string::erase(uint,uint)+28↑j
.text:004066BB                 pop     edi
.text:004066BC                 mov     eax, esi
.text:004066BE                 pop     esi
.text:004066BF                 pop     ebx
.text:004066C0                 mov     esp, ebp
.text:004066C2                 pop     ebp
.text:004066C3                 retn    8
.text:004066C3 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@QAEAAV12@II@Z endp
.text:004066C3
.text:004066C6
.text:004066C6 ; =============== S U B R O U T I N E =======================================
.text:004066C6
.text:004066C6 ; Attributes: bp-based frame
.text:004066C6
.text:004066C6 sub_4066C6      proc near               ; CODE XREF: sub_4063BA+33↑p
.text:004066C6                                         ; sub_406774+2E↓p
.text:004066C6
.text:004066C6 arg_0           = byte ptr  8
.text:004066C6
.text:004066C6                 mov     edi, edi
.text:004066C8                 push    ebp
.text:004066C9                 mov     ebp, esp
.text:004066CB                 push    esi
.text:004066CC                 lea     eax, [ebp+arg_0]
.text:004066CF                 mov     esi, ecx
.text:004066D1                 push    eax
.text:004066D2                 call    ds:??0exception@@QAE@ABQBD@Z ; exception::exception(char const * const &)
.text:004066D8                 mov     dword ptr [esi], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:004066DE                 mov     eax, esi
.text:004066E0                 pop     esi
.text:004066E1                 pop     ebp
.text:004066E2                 retn    4
.text:004066E2 sub_4066C6      endp
.text:004066E2
.text:004066E2 ; ---------------------------------------------------------------------------
.text:004066E5                 align 10h
.text:004066F0
.text:004066F0 ; =============== S U B R O U T I N E =======================================
.text:004066F0
.text:004066F0
.text:004066F0 sub_4066F0      proc near               ; DATA XREF: .text:00402930↑o
.text:004066F0                                         ; .text:__TI2?AVbad_alloc@std@@↓o
.text:004066F0                 mov     dword ptr [ecx], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:004066F6                 jmp     ds:__imp_??1exception@@UAE@XZ ; exception::~exception(void)
.text:004066F6 sub_4066F0      endp
.text:004066F6
.text:004066F6 ; ---------------------------------------------------------------------------
.text:004066FC                 align 10h
.text:00406700
.text:00406700 ; =============== S U B R O U T I N E =======================================
.text:00406700
.text:00406700 ; Attributes: bp-based frame info_from_lumina
.text:00406700
.text:00406700 ; void *__thiscall std::bad_alloc::`vector deleting destructor'(std::bad_alloc *__hidden this, unsigned int)
.text:00406700 ??_Ebad_alloc@std@@UAEPAXI@Z proc near  ; DATA XREF: .text:const std::bad_alloc::`vftable'↑o
.text:00406700                                         ; .text:00402934↑o
.text:00406700
.text:00406700 arg_0           = byte ptr  8
.text:00406700
.text:00406700                 mov     edi, edi
.text:00406702                 push    ebp
.text:00406703                 mov     ebp, esp
.text:00406705                 push    esi
.text:00406706                 mov     esi, ecx
.text:00406708                 mov     dword ptr [esi], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:0040670E                 call    ds:__imp_??1exception@@UAE@XZ ; exception::~exception(void)
.text:00406714                 test    [ebp+arg_0], 1
.text:00406718                 jz      short loc_406722
.text:0040671A                 push    esi
.text:0040671B                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00406721                 pop     ecx
.text:00406722
.text:00406722 loc_406722:                             ; CODE XREF: std::bad_alloc::`vector deleting destructor'(uint)+18↑j
.text:00406722                 mov     eax, esi
.text:00406724                 pop     esi
.text:00406725                 pop     ebp
.text:00406726                 retn    4
.text:00406726 ??_Ebad_alloc@std@@UAEPAXI@Z endp
.text:00406726
.text:00406726 ; ---------------------------------------------------------------------------
.text:00406729                 align 10h
.text:00406730
.text:00406730 ; =============== S U B R O U T I N E =======================================
.text:00406730
.text:00406730 ; Attributes: noreturn bp-based frame
.text:00406730
.text:00406730 sub_406730      proc near               ; DATA XREF: .text:00401160↑o
.text:00406730                                         ; .text:00402938↑o
.text:00406730
.text:00406730 pExceptionObject= byte ptr -0Ch
.text:00406730
.text:00406730                 mov     edi, edi
.text:00406732                 push    ebp
.text:00406733                 mov     ebp, esp
.text:00406735                 sub     esp, 0Ch
.text:00406738                 push    ecx
.text:00406739                 lea     ecx, [ebp+pExceptionObject]
.text:0040673C                 call    ??0range_error@std@@QAE@ABV01@@Z ; std::range_error::range_error(std::range_error const &)
.text:00406741                 push    offset __TI2?AVbad_alloc@std@@ ; pThrowInfo
.text:00406746                 lea     eax, [ebp+pExceptionObject]
.text:00406749                 push    eax             ; pExceptionObject
.text:0040674A                 call    _CxxThrowException
.text:0040674A sub_406730      endp
.text:0040674A
.text:0040674A ; ---------------------------------------------------------------------------
.text:0040674F                 align 10h
.text:00406750
.text:00406750 ; =============== S U B R O U T I N E =======================================
.text:00406750
.text:00406750 ; Attributes: bp-based frame info_from_lumina
.text:00406750
.text:00406750 ; _DWORD __thiscall std::range_error::range_error(std::range_error *__hidden this, const struct std::range_error *)
.text:00406750 ??0range_error@std@@QAE@ABV01@@Z proc near
.text:00406750                                         ; CODE XREF: sub_406730+C↑p
.text:00406750                                         ; operator new(uint)+57↓p
.text:00406750                                         ; DATA XREF: ...
.text:00406750
.text:00406750 var_4           = dword ptr -4
.text:00406750 arg_0           = dword ptr  8
.text:00406750
.text:00406750                 mov     edi, edi
.text:00406752                 push    ebp
.text:00406753                 mov     ebp, esp
.text:00406755                 push    ecx
.text:00406756                 push    esi
.text:00406757                 push    [ebp+arg_0]
.text:0040675A                 mov     esi, ecx
.text:0040675C                 mov     [ebp+var_4], esi
.text:0040675F                 call    ds:__imp_??0exception@@QAE@ABV0@@Z ; exception::exception(exception const &)
.text:00406765                 mov     dword ptr [esi], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:0040676B                 mov     eax, esi
.text:0040676D                 pop     esi
.text:0040676E                 mov     esp, ebp
.text:00406770                 pop     ebp
.text:00406771                 retn    4
.text:00406771 ??0range_error@std@@QAE@ABV01@@Z endp
.text:00406771
.text:00406774
.text:00406774 ; =============== S U B R O U T I N E =======================================
.text:00406774
.text:00406774 ; Attributes: bp-based frame
.text:00406774
.text:00406774 sub_406774      proc near               ; CODE XREF: std::string::_Copy(uint,uint)+50↓p
.text:00406774                                         ; std::string::_Copy(uint,uint)+6E↓p
.text:00406774
.text:00406774 pExceptionObject= byte ptr -0Ch
.text:00406774 arg_0           = dword ptr  8
.text:00406774
.text:00406774                 mov     edi, edi
.text:00406776                 push    ebp
.text:00406777                 mov     ebp, esp
.text:00406779                 mov     ecx, [ebp+arg_0]
.text:0040677C                 sub     esp, 0Ch
.text:0040677F                 test    ecx, ecx
.text:00406781                 jnz     short loc_406791
.text:00406783
.text:00406783 loc_406783:                             ; CODE XREF: sub_406774+27↓j
.text:00406783                 push    ecx
.text:00406784                 call    ds:__imp_??2@YAPAXI@Z ; operator new(uint)
.text:0040678A                 pop     ecx
.text:0040678B                 mov     esp, ebp
.text:0040678D                 pop     ebp
.text:0040678E                 retn    4
.text:00406791 ; ---------------------------------------------------------------------------
.text:00406791
.text:00406791 loc_406791:                             ; CODE XREF: sub_406774+D↑j
.text:00406791                 or      eax, 0FFFFFFFFh
.text:00406794                 xor     edx, edx
.text:00406796                 div     ecx
.text:00406798                 cmp     eax, 1
.text:0040679B                 jnb     short loc_406783
.text:0040679D                 push    0
.text:0040679F                 lea     ecx, [ebp+pExceptionObject]
.text:004067A2                 call    sub_4066C6
.text:004067A7                 push    offset __TI2?AVbad_alloc@std@@ ; pThrowInfo
.text:004067AC                 lea     eax, [ebp+pExceptionObject]
.text:004067AF                 push    eax             ; pExceptionObject
.text:004067B0                 call    _CxxThrowException
.text:004067B0 sub_406774      endp
.text:004067B0
.text:004067B0 ; ---------------------------------------------------------------------------
.text:004067B5                 align 2
.text:004067B6
.text:004067B6 ; =============== S U B R O U T I N E =======================================
.text:004067B6
.text:004067B6 ; Attributes: bp-based frame info_from_lumina
.text:004067B6
.text:004067B6 ; int __stdcall std::string::_Copy(int, rsize_t MaxCount)
.text:004067B6 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@IAEXII@Z proc near
.text:004067B6                                         ; CODE XREF: std::string::_Grow(uint,bool)+21↓p
.text:004067B6
.text:004067B6 var_1C          = dword ptr -1Ch
.text:004067B6 var_18          = dword ptr -18h
.text:004067B6 var_14          = dword ptr -14h
.text:004067B6 var_10          = dword ptr -10h
.text:004067B6 var_4           = dword ptr -4
.text:004067B6 arg_0           = dword ptr  8
.text:004067B6 SourceSize      = dword ptr  0Ch
.text:004067B6
.text:004067B6 ; FUNCTION CHUNK AT .text:00410EB7 SIZE 0000001B BYTES
.text:004067B6
.text:004067B6 ; __unwind { // loc_410EB7
.text:004067B6                 push    10h
.text:004067B8                 mov     eax, offset loc_410EB7
.text:004067BD                 call    __EH_prolog3_catch
.text:004067C2                 mov     esi, ecx
.text:004067C4                 mov     [ebp+var_14], esi
.text:004067C7                 mov     edi, [ebp+arg_0]
.text:004067CA                 push    0FFFFFFFEh
.text:004067CC                 or      edi, 0Fh
.text:004067CF                 pop     ecx
.text:004067D0                 cmp     edi, ecx
.text:004067D2                 jbe     short loc_4067D9
.text:004067D4                 mov     edi, [ebp+arg_0]
.text:004067D7                 jmp     short loc_4067FC
.text:004067D9 ; ---------------------------------------------------------------------------
.text:004067D9
.text:004067D9 loc_4067D9:                             ; CODE XREF: std::string::_Copy(uint,uint)+1C↑j
.text:004067D9                 xor     edx, edx
.text:004067DB                 mov     [ebp+var_18], 3
.text:004067E2                 mov     eax, edi
.text:004067E4                 mov     ebx, [esi+18h]
.text:004067E7                 div     [ebp+var_18]
.text:004067EA                 shr     ebx, 1
.text:004067EC                 cmp     eax, ebx
.text:004067EE                 jnb     short loc_4067FC
.text:004067F0                 mov     eax, [esi+18h]
.text:004067F3                 sub     ecx, ebx
.text:004067F5                 cmp     eax, ecx
.text:004067F7                 ja      short loc_4067FC
.text:004067F9                 lea     edi, [ebx+eax]
.text:004067FC
.text:004067FC loc_4067FC:                             ; CODE XREF: std::string::_Copy(uint,uint)+21↑j
.text:004067FC                                         ; std::string::_Copy(uint,uint)+38↑j ...
.text:004067FC ;   try {
.text:004067FC                 and     [ebp+var_4], 0
.text:00406800                 lea     eax, [edi+1]
.text:00406803                 push    eax
.text:00406804                 mov     ecx, esi
.text:00406806                 call    sub_406774
.text:0040680B                 mov     ecx, eax
.text:0040680D                 mov     [ebp+var_18], eax
.text:00406810                 jmp     short loc_40683E
.text:00406812 ; ---------------------------------------------------------------------------
.text:00406812
.text:00406812 loc_406812:                             ; DATA XREF: .text:stru_411C90↓o
.text:00406812 ;   catch(...) // owned by 4067FC
.text:00406812                 mov     eax, [ebp+arg_0]
.text:00406815                 mov     ecx, [ebp+var_14]
.text:00406818                 mov     [ebp+var_18], eax
.text:0040681B                 inc     eax
.text:0040681C                 mov     [ebp+var_10], esp
.text:0040681F                 push    eax
.text:0040681F ;   } // starts at 4067FC
.text:00406820 ;   try {
.text:00406820                 mov     byte ptr [ebp+var_4], 2
.text:00406824                 call    sub_406774
.text:00406829                 mov     [ebp+var_1C], eax
.text:0040682C                 mov     eax, offset loc_406832
.text:00406831                 retn
.text:00406832 ; ---------------------------------------------------------------------------
.text:00406832
.text:00406832 loc_406832:                             ; CODE XREF: std::string::_Copy(uint,uint)+7B↑j
.text:00406832                                         ; DATA XREF: std::string::_Copy(uint,uint)+76↑o
.text:00406832                 mov     edi, [ebp+var_18]
.text:00406835                 mov     ecx, [ebp+var_1C]
.text:00406838                 mov     esi, [ebp+var_14]
.text:0040683B                 mov     [ebp+var_18], ecx
.text:0040683E
.text:0040683E loc_40683E:                             ; CODE XREF: std::string::_Copy(uint,uint)+5A↑j
.text:0040683E                 mov     ebx, [ebp+SourceSize]
.text:00406841                 test    ebx, ebx
.text:00406843                 jz      short loc_406863
.text:00406845                 cmp     dword ptr [esi+18h], 10h
.text:00406849                 jb      short loc_406850
.text:0040684B                 mov     eax, [esi+4]
.text:0040684E                 jmp     short loc_406853
.text:00406850 ; ---------------------------------------------------------------------------
.text:00406850
.text:00406850 loc_406850:                             ; CODE XREF: std::string::_Copy(uint,uint)+93↑j
.text:00406850                 lea     eax, [esi+4]
.text:00406853
.text:00406853 loc_406853:                             ; CODE XREF: std::string::_Copy(uint,uint)+98↑j
.text:00406853                 push    ebx             ; SourceSize
.text:00406854                 push    eax             ; Source
.text:00406855                 lea     eax, [edi+1]
.text:00406858                 push    eax             ; DestinationSize
.text:00406859                 push    ecx             ; Destination
.text:0040685A                 call    ds:memcpy_s
.text:00406860                 add     esp, 10h
.text:00406863
.text:00406863 loc_406863:                             ; CODE XREF: std::string::_Copy(uint,uint)+8D↑j
.text:00406863                 push    0               ; SourceSize
.text:00406865                 push    1               ; char
.text:00406867                 mov     ecx, esi
.text:00406869                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
.text:0040686E                 mov     eax, [ebp+var_18]
.text:00406871                 mov     ecx, esi
.text:00406873                 push    ebx
.text:00406874                 mov     [esi+4], eax
.text:00406877                 mov     [esi+18h], edi
.text:0040687A                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::string::_Eos(uint)
.text:0040687F                 call    __EH_epilog3
.text:00406884                 retn    8
.text:00406887 ; ---------------------------------------------------------------------------
.text:00406887
.text:00406887 loc_406887:                             ; DATA XREF: .text:stru_411C80↓o
.text:00406887 ;   catch(...) // owned by 406820
.text:00406887                 mov     ecx, [ebp+var_14]
.text:0040688A                 push    0               ; SourceSize
.text:0040688C                 push    1               ; char
.text:0040688E                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
.text:00406893                 push    0               ; pThrowInfo
.text:00406895                 push    0               ; pExceptionObject
.text:00406897                 call    _CxxThrowException
.text:00406897 ;   } // starts at 406820
.text:00406897 ; } // starts at 4067B6
.text:00406897 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@IAEXII@Z endp
.text:00406897
.text:00406897 ; ---------------------------------------------------------------------------
.text:0040689C                 db 0CCh
.text:0040689D
.text:0040689D ; =============== S U B R O U T I N E =======================================
.text:0040689D
.text:0040689D ; Attributes: bp-based frame info_from_lumina
.text:0040689D
.text:0040689D ; protected: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>, class _STL70>::_Grow(unsigned int, bool)
.text:0040689D ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@IAE_NI_N@Z proc near
.text:0040689D                                         ; CODE XREF: std::string::assign(char const *,uint)+3B↑p
.text:0040689D                                         ; std::string::assign(std::string const &,uint,uint)+4C↓p
.text:0040689D
.text:0040689D arg_0           = dword ptr  8
.text:0040689D arg_4           = byte ptr  0Ch
.text:0040689D
.text:0040689D                 mov     edi, edi
.text:0040689F                 push    ebp
.text:004068A0                 mov     ebp, esp
.text:004068A2                 push    esi
.text:004068A3                 mov     esi, [ebp+arg_0]
.text:004068A6                 push    edi
.text:004068A7                 mov     edi, ecx
.text:004068A9                 cmp     esi, 0FFFFFFFEh
.text:004068AC                 jbe     short loc_4068B3
.text:004068AE                 call    sub_40FE2A
.text:004068B3 ; ---------------------------------------------------------------------------
.text:004068B3
.text:004068B3 loc_4068B3:                             ; CODE XREF: std::string::_Grow(uint,bool)+F↑j
.text:004068B3                 cmp     [edi+18h], esi
.text:004068B6                 jnb     short loc_4068C5
.text:004068B8                 push    dword ptr [edi+14h] ; SourceSize
.text:004068BB                 mov     ecx, edi
.text:004068BD                 push    esi             ; int
.text:004068BE                 call    ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@IAEXII@Z ; std::string::_Copy(uint,uint)
.text:004068C3                 jmp     short loc_4068F1
.text:004068C5 ; ---------------------------------------------------------------------------
.text:004068C5
.text:004068C5 loc_4068C5:                             ; CODE XREF: std::string::_Grow(uint,bool)+19↑j
.text:004068C5                 cmp     [ebp+arg_4], 0
.text:004068C9                 jz      short loc_4068E5
.text:004068CB                 cmp     esi, 10h
.text:004068CE                 jnb     short loc_4068E5
.text:004068D0                 mov     eax, [edi+14h]
.text:004068D3                 cmp     esi, eax
.text:004068D5                 jnb     short loc_4068D9
.text:004068D7                 mov     eax, esi
.text:004068D9
.text:004068D9 loc_4068D9:                             ; CODE XREF: std::string::_Grow(uint,bool)+38↑j
.text:004068D9                 push    eax             ; SourceSize
.text:004068DA                 push    1               ; char
.text:004068DC                 mov     ecx, edi
.text:004068DE                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
.text:004068E3                 jmp     short loc_4068F1
.text:004068E5 ; ---------------------------------------------------------------------------
.text:004068E5
.text:004068E5 loc_4068E5:                             ; CODE XREF: std::string::_Grow(uint,bool)+2C↑j
.text:004068E5                                         ; std::string::_Grow(uint,bool)+31↑j
.text:004068E5                 test    esi, esi
.text:004068E7                 jnz     short loc_4068F3
.text:004068E9                 push    esi
.text:004068EA                 mov     ecx, edi
.text:004068EC                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::string::_Eos(uint)
.text:004068F1
.text:004068F1 loc_4068F1:                             ; CODE XREF: std::string::_Grow(uint,bool)+26↑j
.text:004068F1                                         ; std::string::_Grow(uint,bool)+46↑j
.text:004068F1                 test    esi, esi
.text:004068F3
.text:004068F3 loc_4068F3:                             ; CODE XREF: std::string::_Grow(uint,bool)+4A↑j
.text:004068F3                 pop     edi
.text:004068F4                 setnz   al
.text:004068F7                 pop     esi
.text:004068F8                 pop     ebp
.text:004068F9                 retn    8
.text:004068F9 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@IAE_NI_N@Z endp
.text:004068F9
.text:004068FC
.text:004068FC ; =============== S U B R O U T I N E =======================================
.text:004068FC
.text:004068FC ; Attributes: bp-based frame info_from_lumina
.text:004068FC
.text:004068FC ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>, class _STL70> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>, class _STL70>::assign(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>, class _STL70> const &, unsigned int, unsigned int)
.text:004068FC ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@QAEAAV12@ABV12@II@Z proc near
.text:004068FC                                         ; CODE XREF: std::string::assign(char const *,uint)+2D↑p
.text:004068FC                                         ; std::string::string(std::string const &)+1F↓p
.text:004068FC
.text:004068FC arg_0           = dword ptr  8
.text:004068FC arg_4           = dword ptr  0Ch
.text:004068FC arg_8           = dword ptr  10h
.text:004068FC
.text:004068FC                 mov     edi, edi
.text:004068FE                 push    ebp
.text:004068FF                 mov     ebp, esp
.text:00406901                 mov     eax, [ebp+arg_4]
.text:00406904                 push    ebx
.text:00406905                 push    esi
.text:00406906                 push    edi
.text:00406907                 mov     edi, [ebp+arg_0]
.text:0040690A                 mov     esi, ecx
.text:0040690C                 cmp     [edi+14h], eax
.text:0040690F                 jnb     short loc_406919
.text:00406911                 call    ?_Xran@_String_base@std@@SAXXZ ; std::_String_base::_Xran(void)
.text:00406916 ; ---------------------------------------------------------------------------
.text:00406916                 mov     eax, [ebp+arg_4]
.text:00406919
.text:00406919 loc_406919:                             ; CODE XREF: std::string::assign(std::string const &,uint,uint)+13↑j
.text:00406919                 mov     ebx, [edi+14h]
.text:0040691C                 sub     ebx, eax
.text:0040691E                 cmp     [ebp+arg_8], ebx
.text:00406921                 jnb     short loc_406926
.text:00406923                 mov     ebx, [ebp+arg_8]
.text:00406926
.text:00406926 loc_406926:                             ; CODE XREF: std::string::assign(std::string const &,uint,uint)+25↑j
.text:00406926                 mov     ecx, esi
.text:00406928                 cmp     esi, edi
.text:0040692A                 jnz     short loc_406945
.text:0040692C                 push    0FFFFFFFFh
.text:0040692E                 add     eax, ebx
.text:00406930                 push    eax
.text:00406931                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@QAEAAV12@II@Z ; std::string::erase(uint,uint)
.text:00406936                 mov     eax, [ebp+arg_4]
.text:00406939                 mov     ecx, esi
.text:0040693B                 push    eax
.text:0040693C                 push    0
.text:0040693E                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@QAEAAV12@II@Z ; std::string::erase(uint,uint)
.text:00406943                 jmp     short loc_406989
.text:00406945 ; ---------------------------------------------------------------------------
.text:00406945
.text:00406945 loc_406945:                             ; CODE XREF: std::string::assign(std::string const &,uint,uint)+2E↑j
.text:00406945                 push    0
.text:00406947                 push    ebx
.text:00406948                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@IAE_NI_N@Z ; std::string::_Grow(uint,bool)
.text:0040694D                 test    al, al
.text:0040694F                 jz      short loc_406989
.text:00406951                 cmp     dword ptr [edi+18h], 10h
.text:00406955                 jb      short loc_40695C
.text:00406957                 mov     edi, [edi+4]
.text:0040695A                 jmp     short loc_40695F
.text:0040695C ; ---------------------------------------------------------------------------
.text:0040695C
.text:0040695C loc_40695C:                             ; CODE XREF: std::string::assign(std::string const &,uint,uint)+59↑j
.text:0040695C                 add     edi, 4
.text:0040695F
.text:0040695F loc_40695F:                             ; CODE XREF: std::string::assign(std::string const &,uint,uint)+5E↑j
.text:0040695F                 cmp     dword ptr [esi+18h], 10h
.text:00406963                 jb      short loc_40696A
.text:00406965                 mov     ecx, [esi+4]
.text:00406968                 jmp     short loc_40696D
.text:0040696A ; ---------------------------------------------------------------------------
.text:0040696A
.text:0040696A loc_40696A:                             ; CODE XREF: std::string::assign(std::string const &,uint,uint)+67↑j
.text:0040696A                 lea     ecx, [esi+4]
.text:0040696D
.text:0040696D loc_40696D:                             ; CODE XREF: std::string::assign(std::string const &,uint,uint)+6C↑j
.text:0040696D                 mov     eax, [ebp+arg_4]
.text:00406970                 push    ebx             ; SourceSize
.text:00406971                 add     eax, edi
.text:00406973                 push    eax             ; Source
.text:00406974                 push    dword ptr [esi+18h] ; DestinationSize
.text:00406977                 push    ecx             ; Destination
.text:00406978                 call    ds:memcpy_s
.text:0040697E                 add     esp, 10h
.text:00406981                 mov     ecx, esi
.text:00406983                 push    ebx
.text:00406984                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::string::_Eos(uint)
.text:00406989
.text:00406989 loc_406989:                             ; CODE XREF: std::string::assign(std::string const &,uint,uint)+47↑j
.text:00406989                                         ; std::string::assign(std::string const &,uint,uint)+53↑j
.text:00406989                 pop     edi
.text:0040698A                 mov     eax, esi
.text:0040698C                 pop     esi
.text:0040698D                 pop     ebx
.text:0040698E                 pop     ebp
.text:0040698F                 retn    0Ch
.text:0040698F ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@QAEAAV12@ABV12@II@Z endp
.text:0040698F
.text:00406992 ; Exported entry 368. ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
.text:00406992
.text:00406992 ; =============== S U B R O U T I N E =======================================
.text:00406992
.text:00406992 ; Attributes: bp-based frame info_from_lumina
.text:00406992
.text:00406992 ; void __thiscall std::string::string(std::string *this, const std::string *_Right)
.text:00406992 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z proc near
.text:00406992                                         ; CODE XREF: std::logic_error::logic_error(std::string const &)+27↑p
.text:00406992                                         ; std::logic_error::logic_error(std::logic_error const &)+2C↓p
.text:00406992
.text:00406992 arg_0           = dword ptr  8
.text:00406992
.text:00406992                 mov     edi, edi
.text:00406994                 push    ebp
.text:00406995                 mov     ebp, esp
.text:00406997                 push    esi
.text:00406998                 mov     esi, ecx
.text:0040699A                 push    0
.text:0040699C                 mov     dword ptr [esi+18h], 0Fh
.text:004069A3                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::string::_Eos(uint)
.text:004069A8                 push    0FFFFFFFFh
.text:004069AA                 push    0
.text:004069AC                 push    [ebp+arg_0]
.text:004069AF                 mov     ecx, esi
.text:004069B1                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@QAEAAV12@ABV12@II@Z ; std::string::assign(std::string const &,uint,uint)
.text:004069B6                 mov     eax, esi
.text:004069B8                 pop     esi
.text:004069B9                 pop     ebp
.text:004069BA                 retn    4
.text:004069BA ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z endp
.text:004069BA
.text:004069BD ; Exported entry 1158. ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
.text:004069BD
.text:004069BD ; =============== S U B R O U T I N E =======================================
.text:004069BD
.text:004069BD ; Attributes: bp-based frame info_from_lumina
.text:004069BD
.text:004069BD ; void __thiscall std::string::_Eos(std::string *this, unsigned int _Newsize)
.text:004069BD ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z proc near
.text:004069BD                                         ; CODE XREF: std::string::string(char const *)+11↑p
.text:004069BD                                         ; std::string::assign(char const *,uint)+68↑p ...
.text:004069BD
.text:004069BD arg_0           = dword ptr  8
.text:004069BD
.text:004069BD                 mov     edi, edi
.text:004069BF                 push    ebp
.text:004069C0                 mov     ebp, esp
.text:004069C2                 cmp     dword ptr [ecx+18h], 10h
.text:004069C6                 mov     eax, [ebp+arg_0]
.text:004069C9                 mov     [ecx+14h], eax
.text:004069CC                 jb      short loc_4069D3
.text:004069CE                 mov     ecx, [ecx+4]
.text:004069D1                 jmp     short loc_4069D6
.text:004069D3 ; ---------------------------------------------------------------------------
.text:004069D3
.text:004069D3 loc_4069D3:                             ; CODE XREF: std::string::_Eos(uint)+F↑j
.text:004069D3                 add     ecx, 4
.text:004069D6
.text:004069D6 loc_4069D6:                             ; CODE XREF: std::string::_Eos(uint)+14↑j
.text:004069D6                 mov     byte ptr [ecx+eax], 0
.text:004069DA                 pop     ebp
.text:004069DB                 retn    4
.text:004069DB ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z endp
.text:004069DB
.text:004069DE
.text:004069DE ; =============== S U B R O U T I N E =======================================
.text:004069DE
.text:004069DE ; Attributes: bp-based frame info_from_lumina
.text:004069DE
.text:004069DE ; int __stdcall std::string::_Tidy(char, rsize_t MaxCount)
.text:004069DE ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@IAEX_NI@Z proc near
.text:004069DE                                         ; CODE XREF: std::logic_error::~logic_error(void)+12↑p
.text:004069DE                                         ; std::string::_Copy(uint,uint)+B3↑p ...
.text:004069DE
.text:004069DE arg_0           = byte ptr  8
.text:004069DE SourceSize      = dword ptr  0Ch
.text:004069DE
.text:004069DE                 mov     edi, edi
.text:004069E0                 push    ebp
.text:004069E1                 mov     ebp, esp
.text:004069E3                 cmp     [ebp+arg_0], 0
.text:004069E7                 push    esi
.text:004069E8                 mov     esi, ecx
.text:004069EA                 jz      short loc_406A17
.text:004069EC                 cmp     dword ptr [esi+18h], 10h
.text:004069F0                 jb      short loc_406A17
.text:004069F2                 cmp     [ebp+SourceSize], 0
.text:004069F6                 lea     eax, [esi+4]
.text:004069F9                 push    ebx
.text:004069FA                 mov     ebx, [eax]
.text:004069FC                 jbe     short loc_406A0E
.text:004069FE                 push    [ebp+SourceSize] ; SourceSize
.text:00406A01                 push    ebx             ; Source
.text:00406A02                 push    10h             ; DestinationSize
.text:00406A04                 push    eax             ; Destination
.text:00406A05                 call    ds:memcpy_s
.text:00406A0B                 add     esp, 10h
.text:00406A0E
.text:00406A0E loc_406A0E:                             ; CODE XREF: std::string::_Tidy(bool,uint)+1E↑j
.text:00406A0E                 push    ebx
.text:00406A0F                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00406A15                 pop     ecx
.text:00406A16                 pop     ebx
.text:00406A17
.text:00406A17 loc_406A17:                             ; CODE XREF: std::string::_Tidy(bool,uint)+C↑j
.text:00406A17                                         ; std::string::_Tidy(bool,uint)+12↑j
.text:00406A17                 push    [ebp+SourceSize]
.text:00406A1A                 mov     ecx, esi
.text:00406A1C                 mov     dword ptr [esi+18h], 0Fh
.text:00406A23                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::string::_Eos(uint)
.text:00406A28                 pop     esi
.text:00406A29                 pop     ebp
.text:00406A2A                 retn    8
.text:00406A2A ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@IAEX_NI@Z endp
.text:00406A2A
.text:00406A2D ; ---------------------------------------------------------------------------
.text:00406A2D ; START OF FUNCTION CHUNK FOR sub_406166
.text:00406A2D ;   ADDITIONAL PARENT FUNCTION sub_40FE2A
.text:00406A2D
.text:00406A2D loc_406A2D:                             ; CODE XREF: sub_406166+AD03↓j
.text:00406A2D                                         ; sub_40FE2A+18AB↓j
.text:00406A2D ; __unwind { // loc_4116DA              ; SourceSize
.text:00406A2D                 push    0
.text:00406A2F                 push    1               ; char
.text:00406A31                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@std@@IAEX_NI@Z ; std::string::_Tidy(bool,uint)
.text:00406A36                 retn
.text:00406A36 ; } // starts at 406A2D
.text:00406A36 ; END OF FUNCTION CHUNK FOR sub_406166
.text:00406A36 ; ---------------------------------------------------------------------------
.text:00406A37                 align 10h
.text:00406A40
.text:00406A40 ; =============== S U B R O U T I N E =======================================
.text:00406A40
.text:00406A40 ; Attributes: bp-based frame info_from_lumina
.text:00406A40
.text:00406A40 ; _DWORD __thiscall std::logic_error::logic_error(std::logic_error *__hidden this, const struct std::logic_error *)
.text:00406A40 ??0logic_error@std@@QAE@ABV01@@Z proc near
.text:00406A40                                         ; CODE XREF: std::bad_alloc::bad_alloc(std::bad_alloc const &)+F↑p
.text:00406A40                                         ; std::logic_error::_Doraise(void)+16↑p ...
.text:00406A40
.text:00406A40 var_10          = dword ptr -10h
.text:00406A40 var_4           = dword ptr -4
.text:00406A40 arg_0           = dword ptr  8
.text:00406A40
.text:00406A40 ; FUNCTION CHUNK AT .text:00410E93 SIZE 00000024 BYTES
.text:00406A40
.text:00406A40 ; __unwind { // loc_410E9C
.text:00406A40                 push    4
.text:00406A42                 mov     eax, offset loc_410E9C
.text:00406A47                 call    __EH_prolog3
.text:00406A4C                 mov     edi, ecx
.text:00406A4E                 mov     [ebp+var_10], edi
.text:00406A51                 mov     esi, [ebp+arg_0]
.text:00406A54                 push    esi
.text:00406A55                 call    ds:__imp_??0exception@@QAE@ABV0@@Z ; exception::exception(exception const &)
.text:00406A5B ;   try {
.text:00406A5B                 and     [ebp+var_4], 0
.text:00406A5F                 lea     eax, [esi+0Ch]
.text:00406A62                 push    eax
.text:00406A63                 lea     ecx, [edi+0Ch]
.text:00406A66                 mov     dword ptr [edi], offset ??_7logic_error@std@@6B@ ; const std::logic_error::`vftable'
.text:00406A6C                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::string::string(std::string const &)
.text:00406A71                 mov     eax, edi
.text:00406A73                 call    __EH_epilog3
.text:00406A78                 retn    4
.text:00406A78 ;   } // starts at 406A5B
.text:00406A78 ; } // starts at 406A40
.text:00406A78 ??0logic_error@std@@QAE@ABV01@@Z endp ; sp-analysis failed
.text:00406A78
.text:00406A78 ; ---------------------------------------------------------------------------
.text:00406A7B                 align 10h
.text:00406A80
.text:00406A80 ; =============== S U B R O U T I N E =======================================
.text:00406A80
.text:00406A80 ; Attributes: noreturn bp-based frame info_from_lumina
.text:00406A80
.text:00406A80 ; void __thiscall __noreturn std::logic_error::_Doraise(std::logic_error *__hidden this)
.text:00406A80 ?_Doraise@logic_error@std@@MBEXXZ_0 proc near
.text:00406A80                                         ; DATA XREF: .text:00401170↑o
.text:00406A80                                         ; .text:00402944↑o
.text:00406A80
.text:00406A80 pExceptionObject= byte ptr -2Ch
.text:00406A80 var_4           = dword ptr -4
.text:00406A80
.text:00406A80                 mov     edi, edi
.text:00406A82                 push    ebp
.text:00406A83                 mov     ebp, esp
.text:00406A85                 sub     esp, 2Ch
.text:00406A88                 mov     eax, ___security_cookie
.text:00406A8D                 xor     eax, ebp
.text:00406A8F                 mov     [ebp+var_4], eax
.text:00406A92                 push    ecx
.text:00406A93                 lea     ecx, [ebp+pExceptionObject]
.text:00406A96                 call    ??0bad_alloc@std@@QAE@ABV01@@Z ; std::bad_alloc::bad_alloc(std::bad_alloc const &)
.text:00406A9B                 push    offset __TI3?AVlength_error@std@@ ; pThrowInfo
.text:00406AA0                 lea     eax, [ebp+pExceptionObject]
.text:00406AA3                 push    eax             ; pExceptionObject
.text:00406AA4                 call    _CxxThrowException
.text:00406AA4 ?_Doraise@logic_error@std@@MBEXXZ_0 endp
.text:00406AA4
.text:00406AA4 ; ---------------------------------------------------------------------------
.text:00406AA9                 align 2
.text:00406AAA
.text:00406AAA ; =============== S U B R O U T I N E =======================================
.text:00406AAA
.text:00406AAA ; Attributes: bp-based frame info_from_lumina
.text:00406AAA
.text:00406AAA ; void __thiscall std::bad_alloc::bad_alloc(std::bad_alloc *this, const std::bad_alloc *__that)
.text:00406AAA ??0bad_alloc@std@@QAE@ABV01@@Z_0 proc near
.text:00406AAA                                         ; CODE XREF: sub_406166+24↑p
.text:00406AAA                                         ; sub_40FE2A+24↓p
.text:00406AAA
.text:00406AAA var_4           = dword ptr -4
.text:00406AAA arg_0           = dword ptr  8
.text:00406AAA
.text:00406AAA                 mov     edi, edi
.text:00406AAC                 push    ebp
.text:00406AAD                 mov     ebp, esp
.text:00406AAF                 push    ecx
.text:00406AB0                 push    esi
.text:00406AB1                 push    [ebp+arg_0]
.text:00406AB4                 mov     esi, ecx
.text:00406AB6                 mov     [ebp+var_4], esi
.text:00406AB9                 call    ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@1@@Z ; std::logic_error::logic_error(std::string const &)
.text:00406ABE                 mov     dword ptr [esi], offset ??_7length_error@std@@6B@ ; const std::length_error::`vftable'
.text:00406AC4                 mov     eax, esi
.text:00406AC6                 pop     esi
.text:00406AC7                 mov     esp, ebp
.text:00406AC9                 pop     ebp
.text:00406ACA                 retn    4
.text:00406ACA ??0bad_alloc@std@@QAE@ABV01@@Z_0 endp
.text:00406ACA
.text:00406ACD
.text:00406ACD ; =============== S U B R O U T I N E =======================================
.text:00406ACD
.text:00406ACD ; Attributes: bp-based frame info_from_lumina
.text:00406ACD
.text:00406ACD ; int __thiscall ATL::CRegKey::DeleteSubKey(ATL::CRegKey *__hidden this, const unsigned __int16 *)
.text:00406ACD ?DeleteSubKey@CRegKey@ATL@@QAEJPBG@Z proc near
.text:00406ACD                                         ; CODE XREF: sub_405D0B+49↑p
.text:00406ACD                                         ; sub_406B79+100↓p
.text:00406ACD
.text:00406ACD var_4           = dword ptr -4
.text:00406ACD arg_0           = dword ptr  8
.text:00406ACD
.text:00406ACD                 mov     edi, edi
.text:00406ACF                 push    ebp
.text:00406AD0                 mov     ebp, esp
.text:00406AD2                 push    ecx
.text:00406AD3                 mov     eax, ___security_cookie
.text:00406AD8                 xor     eax, ebp
.text:00406ADA                 mov     [ebp+var_4], eax
.text:00406ADD                 push    ebx
.text:00406ADE                 push    esi
.text:00406ADF                 mov     esi, ecx
.text:00406AE1                 xor     ebx, ebx
.text:00406AE3                 push    edi
.text:00406AE4                 cmp     [esi+4], ebx
.text:00406AE7                 jnz     short loc_406B2E
.text:00406AE9                 cmp     [esi+8], ebx
.text:00406AEC                 jnz     short loc_406B2E
.text:00406AEE                 push    offset ModuleName ; "API-MS-Win-Core-LocalRegistry-L1-1-0.dl"...
.text:00406AF3                 call    ds:GetModuleHandleW
.text:00406AF9                 test    eax, eax
.text:00406AFB                 jz      short loc_406B0E
.text:00406AFD                 push    offset ProcName ; "RegDeleteKeyExW"
.text:00406B02                 push    eax             ; hModule
.text:00406B03                 call    ds:GetProcAddress
.text:00406B09                 mov     [esi+4], eax
.text:00406B0C                 jmp     short loc_406B2E
.text:00406B0E ; ---------------------------------------------------------------------------
.text:00406B0E
.text:00406B0E loc_406B0E:                             ; CODE XREF: ATL::CRegKey::DeleteSubKey(ushort const *)+2E↑j
.text:00406B0E                 push    ebx             ; dwFlags
.text:00406B0F                 push    ebx             ; hFile
.text:00406B10                 push    offset LibFileName ; "advapi32.dll"
.text:00406B15                 call    ds:LoadLibraryExW
.text:00406B1B                 test    eax, eax
.text:00406B1D                 jz      short loc_406B2E
.text:00406B1F                 push    offset aRegdeletekeyw ; "RegDeleteKeyW"
.text:00406B24                 push    eax             ; hModule
.text:00406B25                 call    ds:GetProcAddress
.text:00406B2B                 mov     [esi+8], eax
.text:00406B2E
.text:00406B2E loc_406B2E:                             ; CODE XREF: ATL::CRegKey::DeleteSubKey(ushort const *)+1A↑j
.text:00406B2E                                         ; ATL::CRegKey::DeleteSubKey(ushort const *)+1F↑j ...
.text:00406B2E                 mov     edi, [esi+4]
.text:00406B31                 test    edi, edi
.text:00406B33                 jz      short loc_406B48
.text:00406B35                 push    ebx
.text:00406B36                 push    ebx
.text:00406B37                 push    [ebp+arg_0]
.text:00406B3A                 mov     ecx, edi
.text:00406B3C                 push    dword ptr [esi]
.text:00406B3E                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00406B44                 call    edi
.text:00406B46                 jmp     short loc_406B66
.text:00406B48 ; ---------------------------------------------------------------------------
.text:00406B48
.text:00406B48 loc_406B48:                             ; CODE XREF: ATL::CRegKey::DeleteSubKey(ushort const *)+66↑j
.text:00406B48                 mov     edi, [esi+8]
.text:00406B4B                 test    edi, edi
.text:00406B4D                 jz      short loc_406B60
.text:00406B4F                 push    [ebp+arg_0]
.text:00406B52                 mov     ecx, edi
.text:00406B54                 push    dword ptr [esi]
.text:00406B56                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00406B5C                 call    edi
.text:00406B5E                 jmp     short loc_406B66
.text:00406B60 ; ---------------------------------------------------------------------------
.text:00406B60
.text:00406B60 loc_406B60:                             ; CODE XREF: ATL::CRegKey::DeleteSubKey(ushort const *)+80↑j
.text:00406B60                 call    ds:GetLastError
.text:00406B66
.text:00406B66 loc_406B66:                             ; CODE XREF: ATL::CRegKey::DeleteSubKey(ushort const *)+79↑j
.text:00406B66                                         ; ATL::CRegKey::DeleteSubKey(ushort const *)+91↑j
.text:00406B66                 mov     ecx, [ebp+var_4]
.text:00406B69                 pop     edi
.text:00406B6A                 pop     esi
.text:00406B6B                 xor     ecx, ebp        ; StackCookie
.text:00406B6D                 pop     ebx
.text:00406B6E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00406B73                 mov     esp, ebp
.text:00406B75                 pop     ebp
.text:00406B76                 retn    4
.text:00406B76 ?DeleteSubKey@CRegKey@ATL@@QAEJPBG@Z endp
.text:00406B76
.text:00406B79
.text:00406B79 ; =============== S U B R O U T I N E =======================================
.text:00406B79
.text:00406B79 ; Attributes: bp-based frame
.text:00406B79
.text:00406B79 ; int __stdcall sub_406B79(LPCWSTR lpSubKey)
.text:00406B79 sub_406B79      proc near               ; CODE XREF: sub_405870+46↑p
.text:00406B79                                         ; sub_406B79+A4↓p
.text:00406B79
.text:00406B79 ftLastWriteTime = _FILETIME ptr -22Ch
.text:00406B79 phkResult       = dword ptr -224h
.text:00406B79 cchName         = dword ptr -220h
.text:00406B79 hKey            = dword ptr -21Ch
.text:00406B79 var_218         = dword ptr -218h
.text:00406B79 var_214         = dword ptr -214h
.text:00406B79 Name            = word ptr -210h
.text:00406B79 var_4           = dword ptr -4
.text:00406B79 lpSubKey        = dword ptr  8
.text:00406B79 arg_4           = dword ptr  0Ch
.text:00406B79
.text:00406B79 ; FUNCTION CHUNK AT .text:00403DA1 SIZE 00000017 BYTES
.text:00406B79 ; FUNCTION CHUNK AT .text:00410ED2 SIZE 00000033 BYTES
.text:00406B79
.text:00406B79 ; __unwind { // loc_410EDD
.text:00406B79                 push    220h
.text:00406B7E                 mov     eax, offset loc_410EDD
.text:00406B83                 call    __EH_prolog3_GS
.text:00406B88                 mov     edi, ecx
.text:00406B8A                 mov     ebx, [ebp+lpSubKey]
.text:00406B8D                 xor     ecx, ecx
.text:00406B8F                 mov     [ebp+hKey], ecx
.text:00406B95                 mov     [ebp+var_218], ecx
.text:00406B9B                 mov     [ebp+var_214], ecx
.text:00406BA1                 lea     eax, [ebp+phkResult]
.text:00406BA7 ;   try {
.text:00406BA7                 mov     [ebp+var_4], ecx
.text:00406BAA                 push    eax             ; phkResult
.text:00406BAB                 push    2001Fh          ; samDesired
.text:00406BB0                 push    ecx             ; ulOptions
.text:00406BB1                 push    ebx             ; lpSubKey
.text:00406BB2                 push    dword ptr [edi] ; hKey
.text:00406BB4                 mov     [ebp+phkResult], ecx
.text:00406BBA                 call    ds:RegOpenKeyExW
.text:00406BC0                 mov     esi, eax
.text:00406BC2                 test    esi, esi
.text:00406BC4                 jnz     loc_406C80
.text:00406BCA                 cmp     [ebp+hKey], esi
.text:00406BD0                 jz      short loc_406BE0
.text:00406BD2                 push    [ebp+hKey]      ; hKey
.text:00406BD8                 call    ds:RegCloseKey
.text:00406BDE                 mov     esi, eax
.text:00406BE0
.text:00406BE0 loc_406BE0:                             ; CODE XREF: sub_406B79+57↑j
.text:00406BE0                 mov     eax, [ebp+phkResult]
.text:00406BE6                 mov     [ebp+hKey], eax
.text:00406BEC                 test    esi, esi
.text:00406BEE                 jnz     loc_406C80
.text:00406BF4                 lea     ecx, [ebp+ftLastWriteTime]
.text:00406BFA                 push    ecx
.text:00406BFB                 push    esi
.text:00406BFC                 push    esi
.text:00406BFD                 push    esi
.text:00406BFE                 lea     ecx, [ebp+cchName]
.text:00406C04                 push    ecx
.text:00406C05                 lea     ecx, [ebp+Name]
.text:00406C0B                 push    ecx
.text:00406C0C                 push    esi
.text:00406C0D                 push    eax
.text:00406C0E                 jmp     short loc_406C47
.text:00406C10 ; ---------------------------------------------------------------------------
.text:00406C10
.text:00406C10 loc_406C10:                             ; CODE XREF: sub_406B79+E0↓j
.text:00406C10                 lea     eax, [ebp+Name]
.text:00406C16                 push    eax             ; lpSubKey
.text:00406C17                 lea     ecx, [ebp+hKey]
.text:00406C1D                 call    sub_406B79
.text:00406C22                 mov     esi, eax
.text:00406C24                 test    esi, esi
.text:00406C26                 jnz     short loc_406C80
.text:00406C28                 lea     eax, [ebp+ftLastWriteTime]
.text:00406C2E                 push    eax             ; lpftLastWriteTime
.text:00406C2F                 push    esi             ; lpcchClass
.text:00406C30                 push    esi             ; lpClass
.text:00406C31                 push    esi             ; lpReserved
.text:00406C32                 lea     eax, [ebp+cchName]
.text:00406C38                 push    eax             ; lpcchName
.text:00406C39                 lea     eax, [ebp+Name]
.text:00406C3F                 push    eax             ; lpName
.text:00406C40                 push    esi             ; dwIndex
.text:00406C41                 push    [ebp+hKey]      ; hKey
.text:00406C47
.text:00406C47 loc_406C47:                             ; CODE XREF: sub_406B79+95↑j
.text:00406C47                 mov     [ebp+cchName], 100h
.text:00406C51                 call    ds:RegEnumKeyExW
.text:00406C57                 test    eax, eax
.text:00406C59                 jz      short loc_406C10
.text:00406C5B                 cmp     [ebp+hKey], 0
.text:00406C62                 jz      short loc_406C76
.text:00406C64                 push    [ebp+hKey]      ; hKey
.text:00406C6A                 call    ds:RegCloseKey
.text:00406C70                 mov     [ebp+hKey], esi
.text:00406C76
.text:00406C76 loc_406C76:                             ; CODE XREF: sub_406B79+E9↑j
.text:00406C76                 push    ebx
.text:00406C77                 mov     ecx, edi
.text:00406C79                 call    ?DeleteSubKey@CRegKey@ATL@@QAEJPBG@Z ; ATL::CRegKey::DeleteSubKey(ushort const *)
.text:00406C7E                 mov     esi, eax
.text:00406C80
.text:00406C80 loc_406C80:                             ; CODE XREF: sub_406B79+4B↑j
.text:00406C80                                         ; sub_406B79+75↑j ...
.text:00406C80                 cmp     [ebp+hKey], 0
.text:00406C87                 jz      short loc_406C95
.text:00406C89                 push    [ebp+hKey]      ; hKey
.text:00406C8F                 call    ds:RegCloseKey
.text:00406C95
.text:00406C95 loc_406C95:                             ; CODE XREF: sub_406B79+10E↑j
.text:00406C95                 mov     eax, esi
.text:00406C97                 call    __EH_epilog3_GS
.text:00406C9C                 retn    4
.text:00406C9C ;   } // starts at 406BA7
.text:00406C9C ; } // starts at 406B79
.text:00406C9C sub_406B79      endp
.text:00406C9C
.text:00406C9F
.text:00406C9F ; =============== S U B R O U T I N E =======================================
.text:00406C9F
.text:00406C9F ; Attributes: bp-based frame info_from_lumina
.text:00406C9F
.text:00406C9F ; int __thiscall CString::Compare(CString *__hidden this, const unsigned __int16 *)
.text:00406C9F ?Compare@CString@@QBEHPBG@Z proc near   ; CODE XREF: sub_4052C3+1F↑p
.text:00406C9F                                         ; sub_405FEB+70↑p ...
.text:00406C9F
.text:00406C9F arg_0           = dword ptr  8
.text:00406C9F
.text:00406C9F                 mov     edi, edi
.text:00406CA1                 push    ebp
.text:00406CA2                 mov     ebp, esp
.text:00406CA4                 mov     edx, [ebp+arg_0]
.text:00406CA7                 mov     eax, [ecx]
.text:00406CA9
.text:00406CA9 loc_406CA9:                             ; CODE XREF: CString::Compare(ushort const *)+2A↓j
.text:00406CA9                 mov     cx, [eax]
.text:00406CAC                 cmp     cx, [edx]
.text:00406CAF                 jnz     short loc_406CCF
.text:00406CB1                 test    cx, cx
.text:00406CB4                 jz      short loc_406CCB
.text:00406CB6                 mov     cx, [eax+2]
.text:00406CBA                 cmp     cx, [edx+2]
.text:00406CBE                 jnz     short loc_406CCF
.text:00406CC0                 add     eax, 4
.text:00406CC3                 add     edx, 4
.text:00406CC6                 test    cx, cx
.text:00406CC9                 jnz     short loc_406CA9
.text:00406CCB
.text:00406CCB loc_406CCB:                             ; CODE XREF: CString::Compare(ushort const *)+15↑j
.text:00406CCB                 xor     eax, eax
.text:00406CCD                 jmp     short loc_406CD4
.text:00406CCF ; ---------------------------------------------------------------------------
.text:00406CCF
.text:00406CCF loc_406CCF:                             ; CODE XREF: CString::Compare(ushort const *)+10↑j
.text:00406CCF                                         ; CString::Compare(ushort const *)+1F↑j
.text:00406CCF                 sbb     eax, eax
.text:00406CD1                 or      eax, 1
.text:00406CD4
.text:00406CD4 loc_406CD4:                             ; CODE XREF: CString::Compare(ushort const *)+2E↑j
.text:00406CD4                 pop     ebp
.text:00406CD5                 retn    4
.text:00406CD5 ?Compare@CString@@QBEHPBG@Z endp
.text:00406CD5
.text:00406CD8
.text:00406CD8 ; =============== S U B R O U T I N E =======================================
.text:00406CD8
.text:00406CD8 ; Attributes: bp-based frame info_from_lumina
.text:00406CD8
.text:00406CD8 ; HRESULT __stdcall StringCchCopyW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_LPCWSTR pszSrc)
.text:00406CD8 ?StringCchCopyW@@YGJPAGIPBG@Z_0 proc near
.text:00406CD8                                         ; CODE XREF: sub_40B860+FF↓p
.text:00406CD8                                         ; sub_40B860+12C↓p ...
.text:00406CD8
.text:00406CD8 arg_0           = dword ptr  8
.text:00406CD8 cchDest         = byte ptr  0Ch
.text:00406CD8
.text:00406CD8                 mov     edi, edi
.text:00406CDA                 push    ebp
.text:00406CDB                 mov     ebp, esp
.text:00406CDD                 push    esi
.text:00406CDE                 xor     esi, esi
.text:00406CE0                 test    edx, edx
.text:00406CE2                 jz      short loc_406CEC
.text:00406CE4                 cmp     edx, 7FFFFFFFh
.text:00406CEA                 jbe     short loc_406CF1
.text:00406CEC
.text:00406CEC loc_406CEC:                             ; CODE XREF: StringCchCopyW(ushort *,uint,ushort const *)+A↑j
.text:00406CEC                 mov     esi, 80070057h
.text:00406CF1
.text:00406CF1 loc_406CF1:                             ; CODE XREF: StringCchCopyW(ushort *,uint,ushort const *)+12↑j
.text:00406CF1                 test    esi, esi
.text:00406CF3                 js      short loc_406D34
.text:00406CF5                 xor     esi, esi
.text:00406CF7                 test    edx, edx
.text:00406CF9                 jz      short loc_406D2A
.text:00406CFB                 push    ebx
.text:00406CFC                 mov     ebx, [ebp+arg_0]
.text:00406CFF                 push    edi
.text:00406D00                 mov     edi, 7FFFFFFEh
.text:00406D05                 sub     edi, edx
.text:00406D07                 sub     ebx, ecx
.text:00406D09
.text:00406D09 loc_406D09:                             ; CODE XREF: StringCchCopyW(ushort *,uint,ushort const *)+4A↓j
.text:00406D09                 lea     eax, [edi+edx]
.text:00406D0C                 test    eax, eax
.text:00406D0E                 jz      short loc_406D24
.text:00406D10                 movzx   eax, word ptr [ebx+ecx]
.text:00406D14                 test    ax, ax
.text:00406D17                 jz      short loc_406D24
.text:00406D19                 mov     [ecx], ax
.text:00406D1C                 add     ecx, 2
.text:00406D1F                 sub     edx, 1
.text:00406D22                 jnz     short loc_406D09
.text:00406D24
.text:00406D24 loc_406D24:                             ; CODE XREF: StringCchCopyW(ushort *,uint,ushort const *)+36↑j
.text:00406D24                                         ; StringCchCopyW(ushort *,uint,ushort const *)+3F↑j
.text:00406D24                 pop     edi
.text:00406D25                 pop     ebx
.text:00406D26                 test    edx, edx
.text:00406D28                 jnz     short loc_406D38
.text:00406D2A
.text:00406D2A loc_406D2A:                             ; CODE XREF: StringCchCopyW(ushort *,uint,ushort const *)+21↑j
.text:00406D2A                 sub     ecx, 2
.text:00406D2D                 mov     esi, 8007007Ah
.text:00406D32                 jmp     short loc_406D38
.text:00406D34 ; ---------------------------------------------------------------------------
.text:00406D34
.text:00406D34 loc_406D34:                             ; CODE XREF: StringCchCopyW(ushort *,uint,ushort const *)+1B↑j
.text:00406D34                 test    edx, edx
.text:00406D36                 jz      short loc_406D3D
.text:00406D38
.text:00406D38 loc_406D38:                             ; CODE XREF: StringCchCopyW(ushort *,uint,ushort const *)+50↑j
.text:00406D38                                         ; StringCchCopyW(ushort *,uint,ushort const *)+5A↑j
.text:00406D38                 xor     eax, eax
.text:00406D3A                 mov     [ecx], ax
.text:00406D3D
.text:00406D3D loc_406D3D:                             ; CODE XREF: StringCchCopyW(ushort *,uint,ushort const *)+5E↑j
.text:00406D3D                 mov     eax, esi
.text:00406D3F                 pop     esi
.text:00406D40                 pop     ebp
.text:00406D41                 retn    4
.text:00406D41 ?StringCchCopyW@@YGJPAGIPBG@Z_0 endp
.text:00406D41
.text:00406D44
.text:00406D44 ; =============== S U B R O U T I N E =======================================
.text:00406D44
.text:00406D44 ; Attributes: bp-based frame
.text:00406D44
.text:00406D44 sub_406D44      proc near               ; CODE XREF: sub_404316+2F9↑p
.text:00406D44
.text:00406D44 var_10          = dword ptr -10h
.text:00406D44 var_4           = dword ptr -4
.text:00406D44 arg_0           = dword ptr  8
.text:00406D44 arg_4           = dword ptr  0Ch
.text:00406D44 arg_8           = dword ptr  10h
.text:00406D44 arg_C           = dword ptr  14h
.text:00406D44 arg_10          = dword ptr  18h
.text:00406D44
.text:00406D44 ; FUNCTION CHUNK AT .text:00410F05 SIZE 00000060 BYTES
.text:00406D44
.text:00406D44 ; __unwind { // loc_410F4A
.text:00406D44                 push    4
.text:00406D46                 mov     eax, offset loc_410F4A
.text:00406D4B                 call    __EH_prolog3
.text:00406D50                 mov     esi, ecx
.text:00406D52                 mov     [ebp+var_10], esi
.text:00406D55                 push    [ebp+arg_0]
.text:00406D58                 call    ds:??0CString@@QAE@PBG@Z ; CString::CString(ushort const *)
.text:00406D5E ;   try {
.text:00406D5E                 and     [ebp+var_4], 0
.text:00406D62                 lea     ecx, [esi+4]
.text:00406D65                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00406D6B                 lea     ecx, [esi+8]
.text:00406D6B ;   } // starts at 406D5E
.text:00406D6E ;   try {
.text:00406D6E                 mov     byte ptr [ebp+var_4], 1
.text:00406D72                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00406D78                 lea     ecx, [esi+0Ch]
.text:00406D78 ;   } // starts at 406D6E
.text:00406D7B ;   try {
.text:00406D7B                 mov     byte ptr [ebp+var_4], 2
.text:00406D7F                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00406D85                 mov     eax, [ebp+arg_8]
.text:00406D88                 lea     ecx, [esi+18h]
.text:00406D88 ;   } // starts at 406D7B
.text:00406D8B ;   try {
.text:00406D8B                 mov     byte ptr [ebp+var_4], 3
.text:00406D8F                 and     dword ptr [esi+10h], 0
.text:00406D93                 mov     [esi+14h], eax
.text:00406D96                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00406D9C                 lea     ecx, [esi+1Ch]
.text:00406D9C ;   } // starts at 406D8B
.text:00406D9F ;   try {
.text:00406D9F                 mov     byte ptr [ebp+var_4], 4
.text:00406DA3                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00406DA9                 cmp     [ebp+arg_C], 0
.text:00406DA9 ;   } // starts at 406D9F
.text:00406DAD ;   try {
.text:00406DAD                 mov     byte ptr [ebp+var_4], 5
.text:00406DB1                 jz      short loc_406DBF
.text:00406DB3                 push    [ebp+arg_C]
.text:00406DB6                 lea     ecx, [esi+4]
.text:00406DB9                 call    ds:??4CString@@QAEABV0@PBG@Z ; CString::operator=(ushort const *)
.text:00406DBF
.text:00406DBF loc_406DBF:                             ; CODE XREF: sub_406D44+6D↑j
.text:00406DBF                 cmp     [ebp+arg_10], 0
.text:00406DC3                 jz      short loc_406DD1
.text:00406DC5                 push    [ebp+arg_10]
.text:00406DC8                 lea     ecx, [esi+8]
.text:00406DCB                 call    ds:??4CString@@QAEABV0@PBG@Z ; CString::operator=(ushort const *)
.text:00406DD1
.text:00406DD1 loc_406DD1:                             ; CODE XREF: sub_406D44+7F↑j
.text:00406DD1                 and     dword ptr [esi+24h], 0
.text:00406DD5                 mov     eax, esi
.text:00406DD7                 and     dword ptr [esi+20h], 0
.text:00406DDB                 call    __EH_epilog3
.text:00406DE0                 retn    14h
.text:00406DE0 ;   } // starts at 406DAD
.text:00406DE0 ; } // starts at 406D44
.text:00406DE0 sub_406D44      endp
.text:00406DE0
.text:00406DE0 ; ---------------------------------------------------------------------------
.text:00406DE3                 align 10h
.text:00406DF0
.text:00406DF0 ; =============== S U B R O U T I N E =======================================
.text:00406DF0
.text:00406DF0
.text:00406DF0 sub_406DF0      proc near               ; DATA XREF: .text:00401258↑o
.text:00406DF0                                         ; .text:00402948↑o
.text:00406DF0                 mov     eax, offset aServices ; "services"
.text:00406DF5                 retn
.text:00406DF5 sub_406DF0      endp
.text:00406DF5
.text:00406DF6 ; ---------------------------------------------------------------------------
.text:00406DF6 ; START OF FUNCTION CHUNK FOR sub_403F0B
.text:00406DF6 ;   ADDITIONAL PARENT FUNCTION sub_404002
.text:00406DF6 ;   ADDITIONAL PARENT FUNCTION sub_407856
.text:00406DF6
.text:00406DF6 loc_406DF6:                             ; CODE XREF: sub_403F0B+CB77↓j
.text:00406DF6                                         ; sub_404002+CACF↓j ...
.text:00406DF6 ; __unwind { // loc_410F8B
.text:00406DF6                 mov     dword ptr [ecx], offset ??_7CPageBase@@6B@ ; const CPageBase::`vftable'
.text:00406DFC                 retn
.text:00406DFC ; } // starts at 406DF6
.text:00406DFC ; END OF FUNCTION CHUNK FOR sub_403F0B
.text:00406DFC ; ---------------------------------------------------------------------------
.text:00406DFD                 align 10h
.text:00406E00
.text:00406E00 ; =============== S U B R O U T I N E =======================================
.text:00406E00
.text:00406E00 ; Attributes: bp-based frame info_from_lumina
.text:00406E00
.text:00406E00 ; void *__thiscall Projection::ProjectionTypeReleaser::`vector deleting destructor'(Projection::ProjectionTypeReleaser *__hidden this, unsigned int)
.text:00406E00 ??_EProjectionTypeReleaser@Projection@@UAEPAXI@Z proc near
.text:00406E00                                         ; DATA XREF: .text:const CPageBase::`vftable'↑o
.text:00406E00                                         ; .text:0040294C↑o
.text:00406E00
.text:00406E00 arg_0           = byte ptr  8
.text:00406E00
.text:00406E00                 mov     edi, edi
.text:00406E02                 push    ebp
.text:00406E03                 mov     ebp, esp
.text:00406E05                 test    [ebp+arg_0], 1
.text:00406E09                 push    esi
.text:00406E0A                 mov     esi, ecx
.text:00406E0C                 mov     dword ptr [esi], offset ??_7CPageBase@@6B@ ; const CPageBase::`vftable'
.text:00406E12                 jz      short loc_406E1C
.text:00406E14                 push    esi
.text:00406E15                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00406E1B                 pop     ecx
.text:00406E1C
.text:00406E1C loc_406E1C:                             ; CODE XREF: Projection::ProjectionTypeReleaser::`vector deleting destructor'(uint)+12↑j
.text:00406E1C                 mov     eax, esi
.text:00406E1E                 pop     esi
.text:00406E1F                 pop     ebp
.text:00406E20                 retn    4
.text:00406E20 ??_EProjectionTypeReleaser@Projection@@UAEPAXI@Z endp
.text:00406E20
.text:00406E20 ; ---------------------------------------------------------------------------
.text:00406E23                 align 10h
.text:00406E30
.text:00406E30 ; =============== S U B R O U T I N E =======================================
.text:00406E30
.text:00406E30
.text:00406E30 sub_406E30      proc near               ; DATA XREF: .text:00401370↑o
.text:00406E30                                         ; .text:00401820↑o ...
.text:00406E30                 push    0
.text:00406E32                 call    sub_403CFC
.text:00406E37                 retn
.text:00406E37 sub_406E30      endp
.text:00406E37
.text:00406E37 ; ---------------------------------------------------------------------------
.text:00406E38                 align 10h
.text:00406E40
.text:00406E40 ; =============== S U B R O U T I N E =======================================
.text:00406E40
.text:00406E40
.text:00406E40 sub_406E40      proc near               ; DATA XREF: .text:00401254↑o
.text:00406E40                                         ; .text:00401374↑o ...
.text:00406E40                 mov     eax, [ecx+4]
.text:00406E43                 retn
.text:00406E43 sub_406E40      endp
.text:00406E43
.text:00406E43 ; ---------------------------------------------------------------------------
.text:00406E44                 align 10h
.text:00406E50
.text:00406E50 ; =============== S U B R O U T I N E =======================================
.text:00406E50
.text:00406E50 ; Attributes: bp-based frame
.text:00406E50
.text:00406E50 sub_406E50      proc near               ; DATA XREF: .text:00401534↑o
.text:00406E50                                         ; .text:00402958↑o
.text:00406E50
.text:00406E50 var_10          = dword ptr -10h
.text:00406E50 var_4           = dword ptr -4
.text:00406E50
.text:00406E50 ; FUNCTION CHUNK AT .text:00410A4D SIZE 00000023 BYTES
.text:00406E50
.text:00406E50 ; __unwind { // loc_410A55
.text:00406E50                 push    4
.text:00406E52                 mov     eax, offset loc_410A55
.text:00406E57                 call    __EH_prolog3
.text:00406E5C                 push    0A0h ; ' '
.text:00406E61                 call    ds:__imp_??2@YAPAXI@Z ; operator new(uint)
.text:00406E67                 pop     ecx
.text:00406E68                 mov     ecx, eax
.text:00406E6A                 mov     [ebp+var_10], ecx
.text:00406E6D                 xor     eax, eax
.text:00406E6F ;   try {
.text:00406E6F                 mov     [ebp+var_4], eax
.text:00406E72                 test    ecx, ecx
.text:00406E74                 jz      short loc_406E7B
.text:00406E76                 call    sub_406E96
.text:00406E7B
.text:00406E7B loc_406E7B:                             ; CODE XREF: sub_406E50+24↑j
.text:00406E7B                 call    __EH_epilog3
.text:00406E80                 retn
.text:00406E80 ;   } // starts at 406E6F
.text:00406E80 ; } // starts at 406E50
.text:00406E80 sub_406E50      endp ; sp-analysis failed
.text:00406E80
.text:00406E80 ; ---------------------------------------------------------------------------
.text:00406E81                 align 10h
.text:00406E90
.text:00406E90 ; =============== S U B R O U T I N E =======================================
.text:00406E90
.text:00406E90
.text:00406E90 sub_406E90      proc near               ; DATA XREF: .text:const CPageStartup::`vftable'↑o
.text:00406E90                                         ; .text:0040295C↑o
.text:00406E90                 mov     eax, offset off_401528 ; "CPageStartup"
.text:00406E95                 retn
.text:00406E95 sub_406E90      endp
.text:00406E95
.text:00406E96
.text:00406E96 ; =============== S U B R O U T I N E =======================================
.text:00406E96
.text:00406E96 ; Attributes: bp-based frame
.text:00406E96
.text:00406E96 sub_406E96      proc near               ; CODE XREF: sub_406E50+26↑p
.text:00406E96                                         ; sub_40CD8D+83↓p
.text:00406E96
.text:00406E96 var_4           = dword ptr -4
.text:00406E96
.text:00406E96                 mov     edi, edi
.text:00406E98                 push    ebp
.text:00406E99                 mov     ebp, esp
.text:00406E9B                 push    ecx
.text:00406E9C                 push    esi
.text:00406E9D                 push    0
.text:00406E9F                 mov     esi, ecx
.text:00406EA1                 push    0CAh ; 'Ê'
.text:00406EA6                 mov     [ebp+var_4], esi
.text:00406EA9                 call    ds:??0CPropertyPage@@QAE@II@Z ; CPropertyPage::CPropertyPage(uint,uint)
.text:00406EAF                 and     dword ptr [esi+94h], 0
.text:00406EB6                 mov     eax, esi
.text:00406EB8                 and     dword ptr [esi+98h], 0
.text:00406EBF                 mov     dword ptr [esi+90h], offset ??_7CPageBase@@6B@ ; const CPageBase::`vftable'
.text:00406EC9                 mov     dword ptr [esi], offset ??_7CPageStartup@@6B@ ; const CPageStartup::`vftable'
.text:00406ECF                 mov     dword ptr [esi+90h], offset ??_7CPageStartup@@6B@_0 ; const CPageStartup::`vftable'
.text:00406ED9                 pop     esi
.text:00406EDA                 mov     esp, ebp
.text:00406EDC                 pop     ebp
.text:00406EDD                 retn
.text:00406EDD sub_406E96      endp
.text:00406EDD
.text:00406EDD ; ---------------------------------------------------------------------------
.text:00406EDE                 align 10h
.text:00406EE0
.text:00406EE0 ; =============== S U B R O U T I N E =======================================
.text:00406EE0
.text:00406EE0 ; Attributes: bp-based frame
.text:00406EE0
.text:00406EE0 sub_406EE0      proc near               ; CODE XREF: sub_407080+6↓j
.text:00406EE0                                         ; DATA XREF: .text:00401434↑o ...
.text:00406EE0
.text:00406EE0 arg_0           = byte ptr  8
.text:00406EE0
.text:00406EE0                 mov     edi, edi
.text:00406EE2                 push    ebp
.text:00406EE3                 mov     ebp, esp
.text:00406EE5                 push    esi
.text:00406EE6                 mov     esi, ecx
.text:00406EE8                 mov     dword ptr [esi], offset ??_7CPageStartup@@6B@ ; const CPageStartup::`vftable'
.text:00406EEE                 mov     dword ptr [esi+90h], offset ??_7CPageBase@@6B@ ; const CPageBase::`vftable'
.text:00406EF8                 call    ds:??1CPropertyPage@@UAE@XZ ; CPropertyPage::~CPropertyPage(void)
.text:00406EFE                 test    [ebp+arg_0], 1
.text:00406F02                 jz      short loc_406F0C
.text:00406F04                 push    esi
.text:00406F05                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00406F0B                 pop     ecx
.text:00406F0C
.text:00406F0C loc_406F0C:                             ; CODE XREF: sub_406EE0+22↑j
.text:00406F0C                 mov     eax, esi
.text:00406F0E                 pop     esi
.text:00406F0F                 pop     ebp
.text:00406F10                 retn    4
.text:00406F10 sub_406EE0      endp
.text:00406F10
.text:00406F10 ; ---------------------------------------------------------------------------
.text:00406F13                 align 10h
.text:00406F20
.text:00406F20 ; =============== S U B R O U T I N E =======================================
.text:00406F20
.text:00406F20
.text:00406F20 sub_406F20      proc near               ; DATA XREF: .text:00401460↑o
.text:00406F20                                         ; .text:00402964↑o
.text:00406F20                 mov     eax, offset off_401400
.text:00406F25                 retn
.text:00406F25 sub_406F20      endp
.text:00406F25
.text:00406F25 ; ---------------------------------------------------------------------------
.text:00406F26                 align 10h
.text:00406F30
.text:00406F30 ; =============== S U B R O U T I N E =======================================
.text:00406F30
.text:00406F30 ; Attributes: bp-based frame
.text:00406F30
.text:00406F30 sub_406F30      proc near               ; DATA XREF: .text:004013CC↑o
.text:00406F30                                         ; .text:004013E4↑o ...
.text:00406F30
.text:00406F30 Dst             = word ptr -20Ch
.text:00406F30 var_4           = dword ptr -4
.text:00406F30 arg_4           = dword ptr  0Ch
.text:00406F30
.text:00406F30                 mov     edi, edi
.text:00406F32                 push    ebp
.text:00406F33                 mov     ebp, esp
.text:00406F35                 sub     esp, 20Ch
.text:00406F3B                 mov     eax, ___security_cookie
.text:00406F40                 xor     eax, ebp
.text:00406F42                 mov     [ebp+var_4], eax
.text:00406F45                 push    esi
.text:00406F46                 mov     esi, [ebp+arg_4]
.text:00406F49                 lea     eax, [ebp+Dst]
.text:00406F4F                 push    edi
.text:00406F50                 mov     edi, 104h
.text:00406F55                 push    edi             ; nSize
.text:00406F56                 push    eax             ; lpDst
.text:00406F57                 push    offset Src      ; "%SystemRoot%\\System32\\Taskmgr.exe"
.text:00406F5C                 call    ds:ExpandEnvironmentStringsW
.text:00406F62                 test    eax, eax
.text:00406F64                 jz      short loc_406F7F
.text:00406F66                 cmp     eax, edi
.text:00406F68                 jnb     short loc_406F7F
.text:00406F6A                 mov     edx, offset Parameters ; "/7 /Startup"
.text:00406F6F                 lea     ecx, [ebp+Dst]  ; lpFile
.text:00406F75                 call    sub_407D90
.text:00406F7A                 and     dword ptr [esi], 0
.text:00406F7D                 jmp     short loc_406F85
.text:00406F7F ; ---------------------------------------------------------------------------
.text:00406F7F
.text:00406F7F loc_406F7F:                             ; CODE XREF: sub_406F30+34↑j
.text:00406F7F                                         ; sub_406F30+38↑j
.text:00406F7F                 mov     dword ptr [esi], 1
.text:00406F85
.text:00406F85 loc_406F85:                             ; CODE XREF: sub_406F30+4D↑j
.text:00406F85                 mov     ecx, [ebp+var_4]
.text:00406F88                 pop     edi
.text:00406F89                 xor     ecx, ebp        ; StackCookie
.text:00406F8B                 pop     esi
.text:00406F8C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00406F91                 mov     esp, ebp
.text:00406F93                 pop     ebp
.text:00406F94                 retn    8
.text:00406F94 sub_406F30      endp
.text:00406F94
.text:00406F94 ; ---------------------------------------------------------------------------
.text:00406F97                 align 10h
.text:00406FA0
.text:00406FA0 ; =============== S U B R O U T I N E =======================================
.text:00406FA0
.text:00406FA0
.text:00406FA0 sub_406FA0      proc near               ; DATA XREF: .text:004014F4↑o
.text:00406FA0                                         ; .text:0040296C↑o
.text:00406FA0                 mov     edi, edi
.text:00406FA2                 push    esi
.text:00406FA3                 push    1Dh             ; dwOS
.text:00406FA5                 mov     esi, ecx
.text:00406FA7                 call    ds:IsOS
.text:00406FAD                 mov     ecx, esi
.text:00406FAF                 test    eax, eax
.text:00406FB1                 jz      short loc_406FD3
.text:00406FB3                 mov     edx, 191h
.text:00406FB8                 call    sub_40DAA3
.text:00406FBD                 test    eax, eax
.text:00406FBF                 jz      short loc_406FCA
.text:00406FC1                 push    0               ; nCmdShow
.text:00406FC3                 push    eax             ; hWnd
.text:00406FC4                 call    ds:ShowWindow
.text:00406FCA
.text:00406FCA loc_406FCA:                             ; CODE XREF: sub_406FA0+1F↑j
.text:00406FCA                 mov     edx, 125h
.text:00406FCF                 mov     ecx, esi
.text:00406FD1                 jmp     short loc_406FD8
.text:00406FD3 ; ---------------------------------------------------------------------------
.text:00406FD3
.text:00406FD3 loc_406FD3:                             ; CODE XREF: sub_406FA0+11↑j
.text:00406FD3                 mov     edx, 190h
.text:00406FD8
.text:00406FD8 loc_406FD8:                             ; CODE XREF: sub_406FA0+31↑j
.text:00406FD8                 call    sub_40DAA3
.text:00406FDD                 test    eax, eax
.text:00406FDF                 jz      short loc_406FEA
.text:00406FE1                 push    0               ; nCmdShow
.text:00406FE3                 push    eax             ; hWnd
.text:00406FE4                 call    ds:ShowWindow
.text:00406FEA
.text:00406FEA loc_406FEA:                             ; CODE XREF: sub_406FA0+3F↑j
.text:00406FEA                 xor     eax, eax
.text:00406FEC                 inc     eax
.text:00406FED                 mov     [esi+98h], eax
.text:00406FF3                 pop     esi
.text:00406FF4                 retn
.text:00406FF4 sub_406FA0      endp
.text:00406FF4
.text:00406FF4 ; ---------------------------------------------------------------------------
.text:00406FF5                 align 10h
.text:00407000
.text:00407000 ; =============== S U B R O U T I N E =======================================
.text:00407000
.text:00407000 ; Attributes: thunk
.text:00407000
.text:00407000 ; void __thiscall CWnd::OnDestroy(CWnd *__hidden this)
.text:00407000 ?OnDestroy@CWnd@@IAEXXZ proc near       ; DATA XREF: .text:004013B4↑o
.text:00407000                                         ; .text:00402970↑o
.text:00407000                 jmp     ds:__imp_?OnDestroy@CWnd@@IAEXXZ ; CWnd::OnDestroy(void)
.text:00407000 ?OnDestroy@CWnd@@IAEXXZ endp
.text:00407000
.text:00407000 ; ---------------------------------------------------------------------------
.text:00407006                 align 10h
.text:00407010
.text:00407010 ; =============== S U B R O U T I N E =======================================
.text:00407010
.text:00407010 ; Attributes: bp-based frame
.text:00407010
.text:00407010 sub_407010      proc near               ; DATA XREF: .text:00401410↑o
.text:00407010                                         ; .text:00402974↑o
.text:00407010
.text:00407010 var_4           = dword ptr -4
.text:00407010
.text:00407010                 mov     edi, edi
.text:00407012                 push    ebp
.text:00407013                 mov     ebp, esp
.text:00407015                 push    ecx
.text:00407016                 mov     eax, ___security_cookie
.text:0040701B                 xor     eax, ebp
.text:0040701D                 mov     [ebp+var_4], eax
.text:00407020                 push    edi
.text:00407021                 mov     edi, ecx
.text:00407023                 cmp     dword ptr [edi+8], 0
.text:00407027                 jnz     short loc_40703E
.text:00407029                 mov     eax, [edi]
.text:0040702B                 push    esi
.text:0040702C                 mov     esi, [eax+8]
.text:0040702F                 mov     ecx, esi
.text:00407031                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00407037                 mov     ecx, edi
.text:00407039                 call    esi
.text:0040703B                 pop     esi
.text:0040703C                 jmp     short loc_407041
.text:0040703E ; ---------------------------------------------------------------------------
.text:0040703E
.text:0040703E loc_40703E:                             ; CODE XREF: sub_407010+17↑j
.text:0040703E                 mov     eax, [edi+0Ch]
.text:00407041
.text:00407041 loc_407041:                             ; CODE XREF: sub_407010+2C↑j
.text:00407041                 mov     ecx, [ebp+var_4]
.text:00407044                 xor     ecx, ebp        ; StackCookie
.text:00407046                 pop     edi
.text:00407047                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040704C                 mov     esp, ebp
.text:0040704E                 pop     ebp
.text:0040704F                 retn
.text:0040704F sub_407010      endp
.text:0040704F
.text:00407050
.text:00407050 ; =============== S U B R O U T I N E =======================================
.text:00407050
.text:00407050
.text:00407050 sub_407050      proc near               ; DATA XREF: .text:00401508↑o
.text:00407050                                         ; .text:00401910↑o ...
.text:00407050                 xor     eax, eax
.text:00407052                 inc     eax
.text:00407053                 retn
.text:00407053 sub_407050      endp
.text:00407053
.text:00407053 ; ---------------------------------------------------------------------------
.text:00407054                 align 10h
.text:00407060
.text:00407060 ; =============== S U B R O U T I N E =======================================
.text:00407060
.text:00407060
.text:00407060 sub_407060      proc near               ; DATA XREF: .text:00401424↑o
.text:00407060                                         ; .text:0040297C↑o
.text:00407060                 and     dword ptr [ecx+0Ch], 0
.text:00407064                 retn
.text:00407064 sub_407060      endp
.text:00407064
.text:00407064 ; ---------------------------------------------------------------------------
.text:00407065                 align 10h
.text:00407070
.text:00407070 ; =============== S U B R O U T I N E =======================================
.text:00407070
.text:00407070
.text:00407070 sub_407070      proc near               ; DATA XREF: .text:00401428↑o
.text:00407070                                         ; .text:00402980↑o
.text:00407070                 mov     dword ptr [ecx+0Ch], 1
.text:00407077                 retn
.text:00407077 sub_407070      endp
.text:00407077
.text:00407077 ; ---------------------------------------------------------------------------
.text:00407078                 align 10h
.text:00407080
.text:00407080 ; =============== S U B R O U T I N E =======================================
.text:00407080
.text:00407080
.text:00407080 sub_407080      proc near               ; DATA XREF: .text:const CPageStartup::`vftable'↑o
.text:00407080                                         ; .text:00402984↑o
.text:00407080                 sub     ecx, 90h
.text:00407086                 jmp     sub_406EE0
.text:00407086 sub_407080      endp
.text:00407086
.text:00407086 ; ---------------------------------------------------------------------------
.text:0040708B                 align 10h
.text:00407090
.text:00407090 ; =============== S U B R O U T I N E =======================================
.text:00407090
.text:00407090
.text:00407090 sub_407090      proc near               ; DATA XREF: .text:00401420↑o
.text:00407090                                         ; .text:00402988↑o
.text:00407090                 mov     eax, offset aStartup ; "startup"
.text:00407095                 retn
.text:00407095 sub_407090      endp
.text:00407095
.text:00407096
.text:00407096 ; =============== S U B R O U T I N E =======================================
.text:00407096
.text:00407096 ; Attributes: bp-based frame
.text:00407096
.text:00407096 sub_407096      proc near               ; CODE XREF: sub_40DBD0+1C↓p
.text:00407096
.text:00407096 Type            = dword ptr -10h
.text:00407096 cbData          = dword ptr -0Ch
.text:00407096 Data            = byte ptr -8
.text:00407096 phkResult       = dword ptr -4
.text:00407096
.text:00407096                 mov     edi, edi
.text:00407098                 push    ebp
.text:00407099                 mov     ebp, esp
.text:0040709B                 sub     esp, 10h
.text:0040709E                 push    ebx
.text:0040709F                 push    esi
.text:004070A0                 push    edi
.text:004070A1                 lea     eax, [ebp+phkResult]
.text:004070A4                 xor     ebx, ebx
.text:004070A6                 push    eax             ; phkResult
.text:004070A7                 push    0F003Fh         ; samDesired
.text:004070AC                 push    ebx             ; ulOptions
.text:004070AD                 push    offset aSoftwareMicros_1 ; "SOFTWARE\\Microsoft\\Shared Tools\\MsCo"...
.text:004070B2                 push    80000001h       ; hKey
.text:004070B7                 mov     edi, ecx
.text:004070B9                 mov     dword ptr [ebp+Data], ebx
.text:004070BC                 mov     esi, ebx
.text:004070BE                 mov     [ebp+phkResult], ebx
.text:004070C1                 call    ds:RegOpenKeyExW
.text:004070C7                 test    eax, eax
.text:004070C9                 jnz     short loc_4070CE
.text:004070CB                 mov     esi, [ebp+phkResult]
.text:004070CE
.text:004070CE loc_4070CE:                             ; CODE XREF: sub_407096+33↑j
.text:004070CE                 lea     eax, [ebp+cbData]
.text:004070D1                 mov     [ebp+cbData], 4
.text:004070D8                 push    eax             ; lpcbData
.text:004070D9                 lea     eax, [ebp+Data]
.text:004070DC                 push    eax             ; lpData
.text:004070DD                 lea     eax, [ebp+Type]
.text:004070E0                 push    eax             ; lpType
.text:004070E1                 push    ebx             ; lpReserved
.text:004070E2                 push    offset aNorebootui ; "NoRebootUI"
.text:004070E7                 push    esi             ; hKey
.text:004070E8                 call    ds:RegQueryValueExW
.text:004070EE                 cmp     dword ptr [ebp+Data], 1
.text:004070F2                 jnz     short loc_4070FF
.text:004070F4                 push    2               ; nResult
.text:004070F6                 push    dword ptr [edi+4] ; hDlg
.text:004070F9                 call    ds:EndDialog
.text:004070FF
.text:004070FF loc_4070FF:                             ; CODE XREF: sub_407096+5C↑j
.text:004070FF                 test    esi, esi
.text:00407101                 jz      short loc_40710A
.text:00407103                 push    esi             ; hKey
.text:00407104                 call    ds:RegCloseKey
.text:0040710A
.text:0040710A loc_40710A:                             ; CODE XREF: sub_407096+6B↑j
.text:0040710A                 pop     edi
.text:0040710B                 pop     esi
.text:0040710C                 xor     eax, eax
.text:0040710E                 pop     ebx
.text:0040710F                 mov     esp, ebp
.text:00407111                 pop     ebp
.text:00407112                 retn    10h
.text:00407112 sub_407096      endp
.text:00407112
.text:00407115
.text:00407115 ; =============== S U B R O U T I N E =======================================
.text:00407115
.text:00407115 ; Attributes: bp-based frame
.text:00407115
.text:00407115 sub_407115      proc near               ; CODE XREF: sub_40DBD0+3D↓p
.text:00407115                                         ; sub_40DBD0+5F↓p
.text:00407115
.text:00407115 dwDisposition   = dword ptr -0Ch
.text:00407115 Data            = byte ptr -8
.text:00407115 phkResult       = dword ptr -4
.text:00407115
.text:00407115                 mov     edi, edi
.text:00407117                 push    ebp
.text:00407118                 mov     ebp, esp
.text:0040711A                 sub     esp, 0Ch
.text:0040711D                 push    ebx
.text:0040711E                 push    esi
.text:0040711F                 push    edi
.text:00407120                 lea     eax, [ebp+dwDisposition]
.text:00407123                 xor     ebx, ebx
.text:00407125                 push    eax             ; lpdwDisposition
.text:00407126                 lea     eax, [ebp+phkResult]
.text:00407129                 mov     [ebp+phkResult], ebx
.text:0040712C                 push    eax             ; phkResult
.text:0040712D                 push    ebx             ; lpSecurityAttributes
.text:0040712E                 push    0F003Fh         ; samDesired
.text:00407133                 push    ebx             ; dwOptions
.text:00407134                 push    ebx             ; lpClass
.text:00407135                 push    ebx             ; Reserved
.text:00407136                 push    offset aSoftwareMicros_1 ; "SOFTWARE\\Microsoft\\Shared Tools\\MsCo"...
.text:0040713B                 push    80000001h       ; hKey
.text:00407140                 mov     edi, ecx
.text:00407142                 mov     esi, ebx
.text:00407144                 call    ds:RegCreateKeyExW
.text:0040714A                 test    eax, eax
.text:0040714C                 jnz     short loc_407151
.text:0040714E                 mov     esi, [ebp+phkResult]
.text:00407151
.text:00407151 loc_407151:                             ; CODE XREF: sub_407115+37↑j
.text:00407151                 push    3EAh            ; nIDButton
.text:00407156                 push    dword ptr [edi+4] ; hDlg
.text:00407159                 call    ds:IsDlgButtonChecked
.text:0040715F                 neg     eax
.text:00407161                 push    4               ; cbData
.text:00407163                 sbb     eax, eax
.text:00407165                 neg     eax
.text:00407167                 mov     dword ptr [ebp+Data], eax
.text:0040716A                 lea     eax, [ebp+Data]
.text:0040716D                 push    eax             ; lpData
.text:0040716E                 push    4               ; dwType
.text:00407170                 push    ebx             ; Reserved
.text:00407171                 push    offset aNorebootui ; "NoRebootUI"
.text:00407176                 push    esi             ; hKey
.text:00407177                 call    ds:RegSetValueExW
.text:0040717D                 test    esi, esi
.text:0040717F                 jz      short loc_407188
.text:00407181                 push    esi             ; hKey
.text:00407182                 call    ds:RegCloseKey
.text:00407188
.text:00407188 loc_407188:                             ; CODE XREF: sub_407115+6A↑j
.text:00407188                 pop     edi
.text:00407189                 pop     esi
.text:0040718A                 pop     ebx
.text:0040718B                 mov     esp, ebp
.text:0040718D                 pop     ebp
.text:0040718E                 retn
.text:0040718E sub_407115      endp
.text:0040718E
.text:0040718E ; ---------------------------------------------------------------------------
.text:0040718F                 align 10h
.text:00407190
.text:00407190 ; =============== S U B R O U T I N E =======================================
.text:00407190
.text:00407190 ; Attributes: bp-based frame
.text:00407190
.text:00407190 sub_407190      proc near               ; DATA XREF: .text:0040174C↑o
.text:00407190                                         ; .text:0040298C↑o
.text:00407190
.text:00407190 var_10          = dword ptr -10h
.text:00407190 var_4           = dword ptr -4
.text:00407190
.text:00407190 ; FUNCTION CHUNK AT .text:00410A4D SIZE 00000023 BYTES
.text:00407190
.text:00407190 ; __unwind { // loc_410A55
.text:00407190                 push    4
.text:00407192                 mov     eax, offset loc_410A55
.text:00407197                 call    __EH_prolog3
.text:0040719C                 push    0A0h ; ' '
.text:004071A1                 call    ds:__imp_??2@YAPAXI@Z ; operator new(uint)
.text:004071A7                 pop     ecx
.text:004071A8                 mov     ecx, eax
.text:004071AA                 mov     [ebp+var_10], ecx
.text:004071AD                 xor     eax, eax
.text:004071AF ;   try {
.text:004071AF                 mov     [ebp+var_4], eax
.text:004071B2                 test    ecx, ecx
.text:004071B4                 jz      short loc_4071BB
.text:004071B6                 call    sub_4071D6
.text:004071BB
.text:004071BB loc_4071BB:                             ; CODE XREF: sub_407190+24↑j
.text:004071BB                 call    __EH_epilog3
.text:004071C0                 retn
.text:004071C0 ;   } // starts at 4071AF
.text:004071C0 ; } // starts at 407190
.text:004071C0 sub_407190      endp ; sp-analysis failed
.text:004071C0
.text:004071C0 ; ---------------------------------------------------------------------------
.text:004071C1                 align 10h
.text:004071D0
.text:004071D0 ; =============== S U B R O U T I N E =======================================
.text:004071D0
.text:004071D0
.text:004071D0 sub_4071D0      proc near               ; DATA XREF: .text:const CPageGeneral::`vftable'↑o
.text:004071D0                                         ; .text:00402990↑o
.text:004071D0                 mov     eax, offset off_401740 ; "CPageGeneral"
.text:004071D5                 retn
.text:004071D5 sub_4071D0      endp
.text:004071D5
.text:004071D6
.text:004071D6 ; =============== S U B R O U T I N E =======================================
.text:004071D6
.text:004071D6 ; Attributes: bp-based frame
.text:004071D6
.text:004071D6 sub_4071D6      proc near               ; CODE XREF: sub_407190+26↑p
.text:004071D6                                         ; sub_40CD8D+AD↓p
.text:004071D6
.text:004071D6 var_4           = dword ptr -4
.text:004071D6
.text:004071D6                 mov     edi, edi
.text:004071D8                 push    ebp
.text:004071D9                 mov     ebp, esp
.text:004071DB                 push    ecx
.text:004071DC                 push    esi
.text:004071DD                 push    edi
.text:004071DE                 xor     edi, edi
.text:004071E0                 mov     esi, ecx
.text:004071E2                 push    edi
.text:004071E3                 push    69h ; 'i'
.text:004071E5                 mov     [ebp+var_4], esi
.text:004071E8                 call    ds:??0CPropertyPage@@QAE@II@Z ; CPropertyPage::CPropertyPage(uint,uint)
.text:004071EE                 mov     [esi+94h], edi
.text:004071F4                 mov     eax, esi
.text:004071F6                 mov     [esi+98h], edi
.text:004071FC                 mov     dword ptr [esi+90h], offset ??_7CPageBase@@6B@ ; const CPageBase::`vftable'
.text:00407206                 mov     [esi+9Ch], edi
.text:0040720C                 pop     edi
.text:0040720D                 mov     dword ptr [esi], offset ??_7CPageGeneral@@6B@ ; const CPageGeneral::`vftable'
.text:00407213                 mov     dword ptr [esi+90h], offset ??_7CPageGeneral@@6B@_0 ; const CPageGeneral::`vftable'
.text:0040721D                 pop     esi
.text:0040721E                 mov     esp, ebp
.text:00407220                 pop     ebp
.text:00407221                 retn
.text:00407221 sub_4071D6      endp
.text:00407221
.text:00407221 ; ---------------------------------------------------------------------------
.text:00407222                 align 10h
.text:00407230
.text:00407230 ; =============== S U B R O U T I N E =======================================
.text:00407230
.text:00407230 ; Attributes: bp-based frame
.text:00407230
.text:00407230 sub_407230      proc near               ; CODE XREF: sub_4077F0+6↓j
.text:00407230                                         ; DATA XREF: .text:0040164C↑o ...
.text:00407230
.text:00407230 arg_0           = byte ptr  8
.text:00407230
.text:00407230                 mov     edi, edi
.text:00407232                 push    ebp
.text:00407233                 mov     ebp, esp
.text:00407235                 push    esi
.text:00407236                 mov     esi, ecx
.text:00407238                 mov     dword ptr [esi], offset ??_7CPageGeneral@@6B@ ; const CPageGeneral::`vftable'
.text:0040723E                 mov     dword ptr [esi+90h], offset ??_7CPageBase@@6B@ ; const CPageBase::`vftable'
.text:00407248                 call    ds:??1CPropertyPage@@UAE@XZ ; CPropertyPage::~CPropertyPage(void)
.text:0040724E                 test    [ebp+arg_0], 1
.text:00407252                 jz      short loc_40725C
.text:00407254                 push    esi
.text:00407255                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:0040725B                 pop     ecx
.text:0040725C
.text:0040725C loc_40725C:                             ; CODE XREF: sub_407230+22↑j
.text:0040725C                 mov     eax, esi
.text:0040725E                 pop     esi
.text:0040725F                 pop     ebp
.text:00407260                 retn    4
.text:00407260 sub_407230      endp
.text:00407260
.text:00407260 ; ---------------------------------------------------------------------------
.text:00407263                 align 10h
.text:00407270
.text:00407270 ; =============== S U B R O U T I N E =======================================
.text:00407270
.text:00407270
.text:00407270 sub_407270      proc near               ; DATA XREF: .text:00401678↑o
.text:00407270                                         ; .text:00402998↑o
.text:00407270                 mov     eax, offset off_401618
.text:00407275                 retn
.text:00407275 sub_407270      endp
.text:00407275
.text:00407275 ; ---------------------------------------------------------------------------
.text:00407276                 align 10h
.text:00407280
.text:00407280 ; =============== S U B R O U T I N E =======================================
.text:00407280
.text:00407280
.text:00407280 sub_407280      proc near               ; DATA XREF: .text:0040170C↑o
.text:00407280                                         ; .text:0040299C↑o
.text:00407280                 mov     edi, edi
.text:00407282                 push    esi
.text:00407283                 mov     esi, ecx
.text:00407285                 call    ds:__imp_?OnInitDialog@CDialog@@UAEHXZ ; CDialog::OnInitDialog(void)
.text:0040728B                 cmp     dword_413A68, 0
.text:00407292                 jnz     short loc_4072AD
.text:00407294                 mov     edx, 3F2h
.text:00407299                 mov     ecx, esi
.text:0040729B                 call    sub_40DAA3
.text:004072A0                 test    eax, eax
.text:004072A2                 jz      short loc_4072AD
.text:004072A4                 push    0               ; nCmdShow
.text:004072A6                 push    eax             ; hWnd
.text:004072A7                 call    ds:ShowWindow
.text:004072AD
.text:004072AD loc_4072AD:                             ; CODE XREF: sub_407280+12↑j
.text:004072AD                                         ; sub_407280+22↑j
.text:004072AD                 xor     eax, eax
.text:004072AF                 inc     eax
.text:004072B0                 pop     esi
.text:004072B1                 retn
.text:004072B1 sub_407280      endp
.text:004072B1
.text:004072B1 ; ---------------------------------------------------------------------------
.text:004072B2                 align 10h
.text:004072C0
.text:004072C0 ; =============== S U B R O U T I N E =======================================
.text:004072C0
.text:004072C0
.text:004072C0 sub_4072C0      proc near               ; DATA XREF: .text:00401728↑o
.text:004072C0                                         ; .text:004029A0↑o
.text:004072C0                 call    sub_4072C9
.text:004072C5                 xor     eax, eax
.text:004072C7                 inc     eax
.text:004072C8                 retn
.text:004072C8 sub_4072C0      endp
.text:004072C8
.text:004072C9
.text:004072C9 ; =============== S U B R O U T I N E =======================================
.text:004072C9
.text:004072C9 ; Attributes: bp-based frame
.text:004072C9
.text:004072C9 sub_4072C9      proc near               ; CODE XREF: sub_4072C0↑p
.text:004072C9                                         ; sub_407510+93↓p ...
.text:004072C9
.text:004072C9 var_C           = dword ptr -0Ch
.text:004072C9 var_8           = dword ptr -8
.text:004072C9 var_4           = dword ptr -4
.text:004072C9
.text:004072C9                 mov     edi, edi
.text:004072CB                 push    ebp
.text:004072CC                 mov     ebp, esp
.text:004072CE                 sub     esp, 0Ch
.text:004072D1                 mov     eax, ___security_cookie
.text:004072D6                 xor     eax, ebp
.text:004072D8                 mov     [ebp+var_4], eax
.text:004072DB                 xor     eax, eax
.text:004072DD                 inc     eax
.text:004072DE                 push    ebx
.text:004072DF                 mov     ebx, eax
.text:004072E1                 mov     [ebp+var_C], eax
.text:004072E4                 mov     eax, dword_413A64
.text:004072E9                 mov     [ebp+var_8], ebx
.text:004072EC                 push    esi
.text:004072ED                 push    edi
.text:004072EE                 mov     edi, ecx
.text:004072F0                 test    eax, eax
.text:004072F2                 jz      short loc_407311
.text:004072F4                 lea     ecx, [ebp+var_C]
.text:004072F7                 add     eax, 90h
.text:004072FC                 push    ecx
.text:004072FD                 lea     ecx, [ebp+var_8]
.text:00407300                 push    ecx
.text:00407301                 push    0E7h ; 'ç'
.text:00407306                 push    eax
.text:00407307                 mov     ecx, edi
.text:00407309                 call    sub_407498
.text:0040730E                 mov     ebx, [ebp+var_8]
.text:00407311
.text:00407311 loc_407311:                             ; CODE XREF: sub_4072C9+29↑j
.text:00407311                 mov     eax, dword_413A60
.text:00407316                 test    eax, eax
.text:00407318                 jz      short loc_407337
.text:0040731A                 lea     ecx, [ebp+var_C]
.text:0040731D                 add     eax, 90h
.text:00407322                 push    ecx
.text:00407323                 lea     ecx, [ebp+var_8]
.text:00407326                 push    ecx
.text:00407327                 push    0E8h ; 'è'
.text:0040732C                 push    eax
.text:0040732D                 mov     ecx, edi
.text:0040732F                 call    sub_407498
.text:00407334                 mov     ebx, [ebp+var_8]
.text:00407337
.text:00407337 loc_407337:                             ; CODE XREF: sub_4072C9+4F↑j
.text:00407337                 mov     eax, dword_413A68
.text:0040733C                 test    eax, eax
.text:0040733E                 jz      short loc_407374
.text:00407340                 add     eax, 90h
.text:00407345                 mov     [ebp+var_8], eax
.text:00407348                 jz      short loc_407364
.text:0040734A                 mov     eax, [eax]
.text:0040734C                 mov     esi, [eax+4]
.text:0040734F                 mov     ecx, esi
.text:00407351                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00407357                 mov     ecx, [ebp+var_8]
.text:0040735A                 call    esi
.text:0040735C                 test    eax, eax
.text:0040735E                 jnz     short loc_407364
.text:00407360                 push    1
.text:00407362                 jmp     short loc_407367
.text:00407364 ; ---------------------------------------------------------------------------
.text:00407364
.text:00407364 loc_407364:                             ; CODE XREF: sub_4072C9+7F↑j
.text:00407364                                         ; sub_4072C9+95↑j
.text:00407364                 xor     ebx, ebx
.text:00407366                 push    ebx
.text:00407367
.text:00407367 loc_407367:                             ; CODE XREF: sub_4072C9+99↑j
.text:00407367                 push    3F2h
.text:0040736C                 mov     ecx, edi
.text:0040736E                 call    ds:?CheckDlgButton@CWnd@@QAEXHI@Z ; CWnd::CheckDlgButton(int,uint)
.text:00407374
.text:00407374 loc_407374:                             ; CODE XREF: sub_4072C9+75↑j
.text:00407374                 test    ebx, ebx
.text:00407376                 jz      short loc_40739A
.text:00407378                 cmp     dword ptr [edi+9Ch], 0
.text:0040737F                 jnz     short loc_40739A
.text:00407381                 mov     eax, 0E2h ; 'â'
.text:00407386                 mov     ecx, edi
.text:00407388                 push    eax
.text:00407389                 push    0E4h ; 'ä'
.text:0040738E                 push    eax
.text:0040738F                 call    ds:?CheckRadioButton@CWnd@@QAEXHHH@Z ; CWnd::CheckRadioButton(int,int,int)
.text:00407395                 mov     esi, [ebp+var_C]
.text:00407398                 jmp     short loc_4073CA
.text:0040739A ; ---------------------------------------------------------------------------
.text:0040739A
.text:0040739A loc_40739A:                             ; CODE XREF: sub_4072C9+AD↑j
.text:0040739A                                         ; sub_4072C9+B6↑j
.text:0040739A                 mov     esi, [ebp+var_C]
.text:0040739D                 test    esi, esi
.text:0040739F                 jz      short loc_4073B6
.text:004073A1                 cmp     dword ptr [edi+9Ch], 0
.text:004073A8                 jnz     short loc_4073B6
.text:004073AA                 push    0E3h ; 'ã'
.text:004073AF                 push    0E4h ; 'ä'
.text:004073B4                 jmp     short loc_4073BD
.text:004073B6 ; ---------------------------------------------------------------------------
.text:004073B6
.text:004073B6 loc_4073B6:                             ; CODE XREF: sub_4072C9+D6↑j
.text:004073B6                                         ; sub_4072C9+DF↑j
.text:004073B6                 mov     eax, 0E4h ; 'ä'
.text:004073BB                 push    eax
.text:004073BC                 push    eax
.text:004073BD
.text:004073BD loc_4073BD:                             ; CODE XREF: sub_4072C9+EB↑j
.text:004073BD                 push    0E2h ; 'â'
.text:004073C2                 mov     ecx, edi
.text:004073C4                 call    ds:?CheckRadioButton@CWnd@@QAEXHHH@Z ; CWnd::CheckRadioButton(int,int,int)
.text:004073CA
.text:004073CA loc_4073CA:                             ; CODE XREF: sub_4072C9+CF↑j
.text:004073CA                 mov     edx, 0E7h ; 'ç'
.text:004073CF                 mov     ecx, edi
.text:004073D1                 call    sub_40DAA3
.text:004073D6                 mov     ecx, eax
.text:004073D8                 test    ecx, ecx
.text:004073DA                 jz      short loc_4073FC
.text:004073DC                 test    ebx, ebx
.text:004073DE                 jnz     short loc_4073E4
.text:004073E0                 test    esi, esi
.text:004073E2                 jz      short loc_4073F1
.text:004073E4
.text:004073E4 loc_4073E4:                             ; CODE XREF: sub_4072C9+115↑j
.text:004073E4                 cmp     dword ptr [edi+9Ch], 0
.text:004073EB                 jnz     short loc_4073F1
.text:004073ED                 xor     eax, eax
.text:004073EF                 jmp     short loc_4073F4
.text:004073F1 ; ---------------------------------------------------------------------------
.text:004073F1
.text:004073F1 loc_4073F1:                             ; CODE XREF: sub_4072C9+119↑j
.text:004073F1                                         ; sub_4072C9+122↑j
.text:004073F1                 xor     eax, eax
.text:004073F3                 inc     eax
.text:004073F4
.text:004073F4 loc_4073F4:                             ; CODE XREF: sub_4072C9+126↑j
.text:004073F4                 push    eax             ; bEnable
.text:004073F5                 push    ecx             ; hWnd
.text:004073F6                 call    ds:EnableWindow
.text:004073FC
.text:004073FC loc_4073FC:                             ; CODE XREF: sub_4072C9+111↑j
.text:004073FC                 mov     edx, 0E8h ; 'è'
.text:00407401                 mov     ecx, edi
.text:00407403                 call    sub_40DAA3
.text:00407408                 mov     ecx, eax
.text:0040740A                 test    ecx, ecx
.text:0040740C                 jz      short loc_40742E
.text:0040740E                 test    ebx, ebx
.text:00407410                 jnz     short loc_407416
.text:00407412                 test    esi, esi
.text:00407414                 jz      short loc_407423
.text:00407416
.text:00407416 loc_407416:                             ; CODE XREF: sub_4072C9+147↑j
.text:00407416                 cmp     dword ptr [edi+9Ch], 0
.text:0040741D                 jnz     short loc_407423
.text:0040741F                 xor     eax, eax
.text:00407421                 jmp     short loc_407426
.text:00407423 ; ---------------------------------------------------------------------------
.text:00407423
.text:00407423 loc_407423:                             ; CODE XREF: sub_4072C9+14B↑j
.text:00407423                                         ; sub_4072C9+154↑j
.text:00407423                 xor     eax, eax
.text:00407425                 inc     eax
.text:00407426
.text:00407426 loc_407426:                             ; CODE XREF: sub_4072C9+158↑j
.text:00407426                 push    eax             ; bEnable
.text:00407427                 push    ecx             ; hWnd
.text:00407428                 call    ds:EnableWindow
.text:0040742E
.text:0040742E loc_40742E:                             ; CODE XREF: sub_4072C9+143↑j
.text:0040742E                 cmp     dword_413A68, 0
.text:00407435                 jz      short loc_407487
.text:00407437                 test    ebx, ebx
.text:00407439                 jnz     short loc_40743F
.text:0040743B                 test    esi, esi
.text:0040743D                 jz      short loc_407448
.text:0040743F
.text:0040743F loc_40743F:                             ; CODE XREF: sub_4072C9+170↑j
.text:0040743F                 cmp     dword ptr [edi+9Ch], 0
.text:00407446                 jz      short loc_40746E
.text:00407448
.text:00407448 loc_407448:                             ; CODE XREF: sub_4072C9+174↑j
.text:00407448                 mov     ebx, 3F2h
.text:0040744D                 mov     ecx, edi
.text:0040744F                 mov     edx, ebx
.text:00407451                 call    sub_40DAA3
.text:00407456                 mov     esi, eax
.text:00407458                 test    esi, esi
.text:0040745A                 jz      short loc_407487
.text:0040745C                 push    ebx
.text:0040745D                 mov     ecx, edi
.text:0040745F                 call    ds:?IsDlgButtonChecked@CWnd@@QBEIH@Z ; CWnd::IsDlgButtonChecked(int)
.text:00407465                 neg     eax
.text:00407467                 sbb     eax, eax
.text:00407469                 inc     eax
.text:0040746A                 push    eax
.text:0040746B                 push    esi
.text:0040746C                 jmp     short loc_407481
.text:0040746E ; ---------------------------------------------------------------------------
.text:0040746E
.text:0040746E loc_40746E:                             ; CODE XREF: sub_4072C9+17D↑j
.text:0040746E                 mov     edx, 3F2h
.text:00407473                 mov     ecx, edi
.text:00407475                 call    sub_40DAA3
.text:0040747A                 test    eax, eax
.text:0040747C                 jz      short loc_407487
.text:0040747E                 push    0               ; bEnable
.text:00407480                 push    eax             ; hWnd
.text:00407481
.text:00407481 loc_407481:                             ; CODE XREF: sub_4072C9+1A3↑j
.text:00407481                 call    ds:EnableWindow
.text:00407487
.text:00407487 loc_407487:                             ; CODE XREF: sub_4072C9+16C↑j
.text:00407487                                         ; sub_4072C9+191↑j ...
.text:00407487                 mov     ecx, [ebp+var_4]
.text:0040748A                 pop     edi
.text:0040748B                 pop     esi
.text:0040748C                 xor     ecx, ebp        ; StackCookie
.text:0040748E                 pop     ebx
.text:0040748F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00407494                 mov     esp, ebp
.text:00407496                 pop     ebp
.text:00407497                 retn
.text:00407497 sub_4072C9      endp
.text:00407497
.text:00407498
.text:00407498 ; =============== S U B R O U T I N E =======================================
.text:00407498
.text:00407498 ; Attributes: bp-based frame
.text:00407498
.text:00407498 sub_407498      proc near               ; CODE XREF: sub_4072C9+40↑p
.text:00407498                                         ; sub_4072C9+66↑p
.text:00407498
.text:00407498 var_4           = dword ptr -4
.text:00407498 arg_0           = dword ptr  8
.text:00407498 arg_4           = dword ptr  0Ch
.text:00407498 arg_8           = dword ptr  10h
.text:00407498 arg_C           = dword ptr  14h
.text:00407498
.text:00407498                 mov     edi, edi
.text:0040749A                 push    ebp
.text:0040749B                 mov     ebp, esp
.text:0040749D                 push    ecx
.text:0040749E                 mov     eax, ___security_cookie
.text:004074A3                 xor     eax, ebp
.text:004074A5                 mov     [ebp+var_4], eax
.text:004074A8                 push    ebx
.text:004074A9                 push    esi
.text:004074AA                 push    edi
.text:004074AB                 mov     edi, [ebp+arg_0]
.text:004074AE                 mov     ebx, ecx
.text:004074B0                 mov     eax, [edi]
.text:004074B2                 mov     esi, [eax+4]
.text:004074B5                 mov     ecx, esi
.text:004074B7                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:004074BD                 mov     ecx, edi
.text:004074BF                 call    esi
.text:004074C1                 mov     esi, eax
.text:004074C3                 xor     eax, eax
.text:004074C5                 inc     eax
.text:004074C6                 cmp     esi, eax
.text:004074C8                 jnz     short loc_4074CE
.text:004074CA                 xor     eax, eax
.text:004074CC                 jmp     short loc_4074D5
.text:004074CE ; ---------------------------------------------------------------------------
.text:004074CE
.text:004074CE loc_4074CE:                             ; CODE XREF: sub_407498+30↑j
.text:004074CE                 cmp     esi, 2
.text:004074D1                 jnz     short loc_4074D5
.text:004074D3                 push    esi
.text:004074D4                 pop     eax
.text:004074D5
.text:004074D5 loc_4074D5:                             ; CODE XREF: sub_407498+34↑j
.text:004074D5                                         ; sub_407498+39↑j
.text:004074D5                 push    eax
.text:004074D6                 push    [ebp+arg_4]
.text:004074D9                 mov     ecx, ebx
.text:004074DB                 call    ds:?CheckDlgButton@CWnd@@QAEXHI@Z ; CWnd::CheckDlgButton(int,uint)
.text:004074E1                 test    esi, esi
.text:004074E3                 jz      short loc_4074EB
.text:004074E5                 mov     eax, [ebp+arg_8]
.text:004074E8                 and     dword ptr [eax], 0
.text:004074EB
.text:004074EB loc_4074EB:                             ; CODE XREF: sub_407498+4B↑j
.text:004074EB                 pop     edi
.text:004074EC                 cmp     esi, 1
.text:004074EF                 pop     esi
.text:004074F0                 pop     ebx
.text:004074F1                 jz      short loc_4074F9
.text:004074F3                 mov     eax, [ebp+arg_C]
.text:004074F6                 and     dword ptr [eax], 0
.text:004074F9
.text:004074F9 loc_4074F9:                             ; CODE XREF: sub_407498+59↑j
.text:004074F9                 mov     ecx, [ebp+var_4]
.text:004074FC                 xor     ecx, ebp        ; StackCookie
.text:004074FE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00407503                 mov     esp, ebp
.text:00407505                 pop     ebp
.text:00407506                 retn    10h
.text:00407506 sub_407498      endp
.text:00407506
.text:00407506 ; ---------------------------------------------------------------------------
.text:00407509                 align 10h
.text:00407510
.text:00407510 ; =============== S U B R O U T I N E =======================================
.text:00407510
.text:00407510 ; Attributes: bp-based frame
.text:00407510
.text:00407510 sub_407510      proc near               ; DATA XREF: .text:0040156C↑o
.text:00407510                                         ; .text:004029A4↑o
.text:00407510
.text:00407510 var_4           = dword ptr -4
.text:00407510
.text:00407510                 mov     edi, edi
.text:00407512                 push    ebp
.text:00407513                 mov     ebp, esp
.text:00407515                 push    ecx
.text:00407516                 mov     eax, ___security_cookie
.text:0040751B                 xor     eax, ebp
.text:0040751D                 mov     [ebp+var_4], eax
.text:00407520                 push    ebx
.text:00407521                 mov     ebx, ecx
.text:00407523                 mov     ecx, 0E3h ; 'ã'
.text:00407528                 push    esi
.text:00407529                 push    edi
.text:0040752A                 and     dword ptr [ebx+9Ch], 0
.text:00407531                 call    sub_40E20E
.text:00407536                 mov     edi, dword_413A68
.text:0040753C                 test    edi, edi
.text:0040753E                 jz      short loc_407559
.text:00407540                 add     edi, 90h
.text:00407546                 jz      short loc_407559
.text:00407548                 mov     eax, [edi]
.text:0040754A                 mov     esi, [eax+1Ch]
.text:0040754D                 mov     ecx, esi
.text:0040754F                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00407555                 mov     ecx, edi
.text:00407557                 call    esi
.text:00407559
.text:00407559 loc_407559:                             ; CODE XREF: sub_407510+2E↑j
.text:00407559                                         ; sub_407510+36↑j
.text:00407559                 mov     eax, dword_413A64
.text:0040755E                 test    eax, eax
.text:00407560                 jz      short loc_40757D
.text:00407562                 lea     edi, [eax+90h]
.text:00407568                 test    edi, edi
.text:0040756A                 jz      short loc_40757D
.text:0040756C                 mov     eax, [edi]
.text:0040756E                 mov     esi, [eax+1Ch]
.text:00407571                 mov     ecx, esi
.text:00407573                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00407579                 mov     ecx, edi
.text:0040757B                 call    esi
.text:0040757D
.text:0040757D loc_40757D:                             ; CODE XREF: sub_407510+50↑j
.text:0040757D                                         ; sub_407510+5A↑j
.text:0040757D                 mov     eax, dword_413A60
.text:00407582                 test    eax, eax
.text:00407584                 jz      short loc_4075A1
.text:00407586                 lea     edi, [eax+90h]
.text:0040758C                 test    edi, edi
.text:0040758E                 jz      short loc_4075A1
.text:00407590                 mov     eax, [edi]
.text:00407592                 mov     esi, [eax+1Ch]
.text:00407595                 mov     ecx, esi
.text:00407597                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040759D                 mov     ecx, edi
.text:0040759F                 call    esi
.text:004075A1
.text:004075A1 loc_4075A1:                             ; CODE XREF: sub_407510+74↑j
.text:004075A1                                         ; sub_407510+7E↑j
.text:004075A1                 mov     ecx, ebx
.text:004075A3                 call    sub_4072C9
.text:004075A8                 mov     ecx, [ebp+var_4]
.text:004075AB                 pop     edi
.text:004075AC                 pop     esi
.text:004075AD                 xor     ecx, ebp        ; StackCookie
.text:004075AF                 pop     ebx
.text:004075B0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004075B5                 mov     esp, ebp
.text:004075B7                 pop     ebp
.text:004075B8                 retn
.text:004075B8 sub_407510      endp
.text:004075B8
.text:004075B8 ; ---------------------------------------------------------------------------
.text:004075B9                 align 10h
.text:004075C0
.text:004075C0 ; =============== S U B R O U T I N E =======================================
.text:004075C0
.text:004075C0 ; Attributes: bp-based frame
.text:004075C0
.text:004075C0 sub_4075C0      proc near               ; DATA XREF: .text:00401584↑o
.text:004075C0                                         ; .text:004029A8↑o
.text:004075C0
.text:004075C0 var_4           = dword ptr -4
.text:004075C0
.text:004075C0                 mov     edi, edi
.text:004075C2                 push    ebp
.text:004075C3                 mov     ebp, esp
.text:004075C5                 push    ecx
.text:004075C6                 mov     eax, ___security_cookie
.text:004075CB                 xor     eax, ebp
.text:004075CD                 mov     [ebp+var_4], eax
.text:004075D0                 push    ebx
.text:004075D1                 mov     ebx, ecx
.text:004075D3                 mov     ecx, 0E2h ; 'â'
.text:004075D8                 push    esi
.text:004075D9                 push    edi
.text:004075DA                 and     dword ptr [ebx+9Ch], 0
.text:004075E1                 call    sub_40E20E
.text:004075E6                 mov     edi, dword_413A68
.text:004075EC                 test    edi, edi
.text:004075EE                 jz      short loc_407609
.text:004075F0                 add     edi, 90h
.text:004075F6                 jz      short loc_407609
.text:004075F8                 mov     eax, [edi]
.text:004075FA                 mov     esi, [eax+18h]
.text:004075FD                 mov     ecx, esi
.text:004075FF                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00407605                 mov     ecx, edi
.text:00407607                 call    esi
.text:00407609
.text:00407609 loc_407609:                             ; CODE XREF: sub_4075C0+2E↑j
.text:00407609                                         ; sub_4075C0+36↑j
.text:00407609                 mov     eax, dword_413A64
.text:0040760E                 test    eax, eax
.text:00407610                 jz      short loc_40762D
.text:00407612                 lea     edi, [eax+90h]
.text:00407618                 test    edi, edi
.text:0040761A                 jz      short loc_40762D
.text:0040761C                 mov     eax, [edi]
.text:0040761E                 mov     esi, [eax+18h]
.text:00407621                 mov     ecx, esi
.text:00407623                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00407629                 mov     ecx, edi
.text:0040762B                 call    esi
.text:0040762D
.text:0040762D loc_40762D:                             ; CODE XREF: sub_4075C0+50↑j
.text:0040762D                                         ; sub_4075C0+5A↑j
.text:0040762D                 mov     eax, dword_413A60
.text:00407632                 test    eax, eax
.text:00407634                 jz      short loc_407651
.text:00407636                 lea     edi, [eax+90h]
.text:0040763C                 test    edi, edi
.text:0040763E                 jz      short loc_407651
.text:00407640                 mov     eax, [edi]
.text:00407642                 mov     esi, [eax+18h]
.text:00407645                 mov     ecx, esi
.text:00407647                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040764D                 mov     ecx, edi
.text:0040764F                 call    esi
.text:00407651
.text:00407651 loc_407651:                             ; CODE XREF: sub_4075C0+74↑j
.text:00407651                                         ; sub_4075C0+7E↑j
.text:00407651                 mov     ecx, ebx
.text:00407653                 call    sub_4072C9
.text:00407658                 mov     ecx, [ebp+var_4]
.text:0040765B                 pop     edi
.text:0040765C                 pop     esi
.text:0040765D                 xor     ecx, ebp        ; StackCookie
.text:0040765F                 pop     ebx
.text:00407660                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00407665                 mov     esp, ebp
.text:00407667                 pop     ebp
.text:00407668                 retn
.text:00407668 sub_4075C0      endp
.text:00407668
.text:00407668 ; ---------------------------------------------------------------------------
.text:00407669                 align 10h
.text:00407670
.text:00407670 ; =============== S U B R O U T I N E =======================================
.text:00407670
.text:00407670
.text:00407670 ; int __cdecl UserMathErrorFunction(struct _exception *)
.text:00407670 UserMathErrorFunction proc near         ; CODE XREF: pre_c_init+9F↓p
.text:00407670                                         ; DATA XREF: .text:00401628↑o ...
.text:00407670                 xor     eax, eax
.text:00407672                 retn
.text:00407672 UserMathErrorFunction endp
.text:00407672
.text:00407672 ; ---------------------------------------------------------------------------
.text:00407673                 align 10h
.text:00407680
.text:00407680 ; =============== S U B R O U T I N E =======================================
.text:00407680
.text:00407680
.text:00407680 sub_407680      proc near               ; DATA XREF: .text:00401720↑o
.text:00407680                                         ; .text:004029B0↑o
.text:00407680                 push    69h ; 'i'
.text:00407682                 pop     ecx
.text:00407683                 call    sub_40E20E
.text:00407688                 xor     eax, eax
.text:0040768A                 inc     eax
.text:0040768B                 retn
.text:0040768B sub_407680      endp
.text:0040768B
.text:0040768B ; ---------------------------------------------------------------------------
.text:0040768C                 align 10h
.text:00407690
.text:00407690 ; =============== S U B R O U T I N E =======================================
.text:00407690
.text:00407690
.text:00407690 sub_407690      proc near               ; DATA XREF: .text:004015E4↑o
.text:00407690                                         ; .text:004029B4↑o
.text:00407690                 call    ds:?CancelToClose@CPropertyPage@@QAEXXZ ; CPropertyPage::CancelToClose(void)
.text:00407696                 xor     eax, eax
.text:00407698                 retn    8
.text:00407698 sub_407690      endp
.text:00407698
.text:00407698 ; ---------------------------------------------------------------------------
.text:0040769B                 align 10h
.text:004076A0
.text:004076A0 ; =============== S U B R O U T I N E =======================================
.text:004076A0
.text:004076A0
.text:004076A0 sub_4076A0      proc near               ; DATA XREF: .text:0040159C↑o
.text:004076A0                                         ; .text:004029B8↑o
.text:004076A0                 mov     edi, edi
.text:004076A2                 push    esi
.text:004076A3                 mov     esi, ecx
.text:004076A5                 mov     ecx, 0E4h ; 'ä'
.text:004076AA                 call    sub_40E20E
.text:004076AF                 mov     dword ptr [esi+9Ch], 1
.text:004076B9                 mov     ecx, esi
.text:004076BB                 pop     esi
.text:004076BC                 jmp     sub_4072C9
.text:004076BC sub_4076A0      endp
.text:004076BC
.text:004076C1
.text:004076C1 ; =============== S U B R O U T I N E =======================================
.text:004076C1
.text:004076C1 ; Attributes: bp-based frame
.text:004076C1
.text:004076C1 sub_4076C1      proc near               ; CODE XREF: sub_407740+18↓p
.text:004076C1                                         ; sub_407760+18↓p
.text:004076C1
.text:004076C1 var_4           = dword ptr -4
.text:004076C1 arg_0           = dword ptr  8
.text:004076C1 arg_4           = dword ptr  0Ch
.text:004076C1
.text:004076C1                 mov     edi, edi
.text:004076C3                 push    ebp
.text:004076C4                 mov     ebp, esp
.text:004076C6                 push    ecx
.text:004076C7                 mov     eax, ___security_cookie
.text:004076CC                 xor     eax, ebp
.text:004076CE                 mov     [ebp+var_4], eax
.text:004076D1                 push    ebx
.text:004076D2                 push    edi
.text:004076D3                 mov     edi, [ebp+arg_0]
.text:004076D6                 mov     ebx, ecx
.text:004076D8                 test    edi, edi
.text:004076DA                 jz      short loc_407718
.text:004076DC                 push    esi
.text:004076DD                 push    [ebp+arg_4]
.text:004076E0                 call    ds:?IsDlgButtonChecked@CWnd@@QBEIH@Z ; CWnd::IsDlgButtonChecked(int)
.text:004076E6                 sub     eax, 0
.text:004076E9                 jz      short loc_4076F5
.text:004076EB                 sub     eax, 1
.text:004076EE                 jz      short loc_40772A
.text:004076F0                 sub     eax, 1
.text:004076F3                 jnz     short loc_407706
.text:004076F5
.text:004076F5 loc_4076F5:                             ; CODE XREF: sub_4076C1+28↑j
.text:004076F5                 mov     eax, [edi]
.text:004076F7                 mov     esi, [eax+1Ch]
.text:004076FA
.text:004076FA loc_4076FA:                             ; CODE XREF: sub_4076C1+6E↓j
.text:004076FA                 mov     ecx, esi
.text:004076FC                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00407702                 mov     ecx, edi
.text:00407704                 call    esi
.text:00407706
.text:00407706 loc_407706:                             ; CODE XREF: sub_4076C1+32↑j
.text:00407706                 push    1
.text:00407708                 mov     ecx, ebx
.text:0040770A                 call    ds:?SetModified@CPropertyPage@@QAEXH@Z ; CPropertyPage::SetModified(int)
.text:00407710                 mov     ecx, ebx
.text:00407712                 call    sub_4072C9
.text:00407717                 pop     esi
.text:00407718
.text:00407718 loc_407718:                             ; CODE XREF: sub_4076C1+19↑j
.text:00407718                 mov     ecx, [ebp+var_4]
.text:0040771B                 pop     edi
.text:0040771C                 xor     ecx, ebp        ; StackCookie
.text:0040771E                 pop     ebx
.text:0040771F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00407724                 mov     esp, ebp
.text:00407726                 pop     ebp
.text:00407727                 retn    8
.text:0040772A ; ---------------------------------------------------------------------------
.text:0040772A
.text:0040772A loc_40772A:                             ; CODE XREF: sub_4076C1+2D↑j
.text:0040772A                 mov     eax, [edi]
.text:0040772C                 mov     esi, [eax+18h]
.text:0040772F                 jmp     short loc_4076FA
.text:0040772F sub_4076C1      endp
.text:0040772F
.text:0040772F ; ---------------------------------------------------------------------------
.text:00407731                 align 10h
.text:00407740
.text:00407740 ; =============== S U B R O U T I N E =======================================
.text:00407740
.text:00407740
.text:00407740 sub_407740      proc near               ; DATA XREF: .text:004015B4↑o
.text:00407740                                         ; .text:004029BC↑o
.text:00407740                 mov     eax, dword_413A60
.text:00407745                 test    eax, eax
.text:00407747                 jz      short loc_407750
.text:00407749                 add     eax, 90h
.text:0040774E                 jmp     short loc_407752
.text:00407750 ; ---------------------------------------------------------------------------
.text:00407750
.text:00407750 loc_407750:                             ; CODE XREF: sub_407740+7↑j
.text:00407750                 xor     eax, eax
.text:00407752
.text:00407752 loc_407752:                             ; CODE XREF: sub_407740+E↑j
.text:00407752                 push    0E8h ; 'è'
.text:00407757                 push    eax
.text:00407758                 call    sub_4076C1
.text:0040775D                 retn
.text:0040775D sub_407740      endp
.text:0040775D
.text:0040775D ; ---------------------------------------------------------------------------
.text:0040775E                 align 10h
.text:00407760
.text:00407760 ; =============== S U B R O U T I N E =======================================
.text:00407760
.text:00407760
.text:00407760 sub_407760      proc near               ; DATA XREF: .text:004015CC↑o
.text:00407760                                         ; .text:004029C0↑o
.text:00407760                 mov     eax, dword_413A64
.text:00407765                 test    eax, eax
.text:00407767                 jz      short loc_407770
.text:00407769                 add     eax, 90h
.text:0040776E                 jmp     short loc_407772
.text:00407770 ; ---------------------------------------------------------------------------
.text:00407770
.text:00407770 loc_407770:                             ; CODE XREF: sub_407760+7↑j
.text:00407770                 xor     eax, eax
.text:00407772
.text:00407772 loc_407772:                             ; CODE XREF: sub_407760+E↑j
.text:00407772                 push    0E7h ; 'ç'
.text:00407777                 push    eax
.text:00407778                 call    sub_4076C1
.text:0040777D                 retn
.text:0040777D sub_407760      endp
.text:0040777D
.text:0040777D ; ---------------------------------------------------------------------------
.text:0040777E                 align 10h
.text:00407780
.text:00407780 ; =============== S U B R O U T I N E =======================================
.text:00407780
.text:00407780 ; Attributes: bp-based frame
.text:00407780
.text:00407780 sub_407780      proc near               ; DATA XREF: .text:004015FC↑o
.text:00407780                                         ; .text:004029C4↑o
.text:00407780
.text:00407780 var_4           = dword ptr -4
.text:00407780
.text:00407780                 mov     edi, edi
.text:00407782                 push    ebp
.text:00407783                 mov     ebp, esp
.text:00407785                 push    ecx
.text:00407786                 mov     eax, ___security_cookie
.text:0040778B                 xor     eax, ebp
.text:0040778D                 mov     [ebp+var_4], eax
.text:00407790                 mov     eax, dword_413A68
.text:00407795                 push    ebx
.text:00407796                 mov     ebx, ecx
.text:00407798                 test    eax, eax
.text:0040779A                 jz      short loc_4077BB
.text:0040779C                 push    edi
.text:0040779D                 lea     edi, [eax+90h]
.text:004077A3                 test    edi, edi
.text:004077A5                 jz      short loc_4077BA
.text:004077A7                 mov     eax, [edi]
.text:004077A9                 push    esi
.text:004077AA                 mov     esi, [eax+18h]
.text:004077AD                 mov     ecx, esi
.text:004077AF                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:004077B5                 mov     ecx, edi
.text:004077B7                 call    esi
.text:004077B9                 pop     esi
.text:004077BA
.text:004077BA loc_4077BA:                             ; CODE XREF: sub_407780+25↑j
.text:004077BA                 pop     edi
.text:004077BB
.text:004077BB loc_4077BB:                             ; CODE XREF: sub_407780+1A↑j
.text:004077BB                 mov     edx, 0E4h ; 'ä'
.text:004077C0                 mov     ecx, ebx
.text:004077C2                 call    sub_40DAA3
.text:004077C7                 test    eax, eax
.text:004077C9                 jz      short loc_4077D2
.text:004077CB                 push    eax             ; hWnd
.text:004077CC                 call    ds:SetFocus
.text:004077D2
.text:004077D2 loc_4077D2:                             ; CODE XREF: sub_407780+49↑j
.text:004077D2                 mov     ecx, ebx
.text:004077D4                 call    sub_4072C9
.text:004077D9                 mov     ecx, [ebp+var_4]
.text:004077DC                 xor     ecx, ebp        ; StackCookie
.text:004077DE                 pop     ebx
.text:004077DF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004077E4                 mov     esp, ebp
.text:004077E6                 pop     ebp
.text:004077E7                 retn
.text:004077E7 sub_407780      endp
.text:004077E7
.text:004077E7 ; ---------------------------------------------------------------------------
.text:004077E8                 align 10h
.text:004077F0
.text:004077F0 ; =============== S U B R O U T I N E =======================================
.text:004077F0
.text:004077F0
.text:004077F0 sub_4077F0      proc near               ; DATA XREF: .text:const CPageGeneral::`vftable'↑o
.text:004077F0                                         ; .text:004029C8↑o
.text:004077F0                 sub     ecx, 90h
.text:004077F6                 jmp     sub_407230
.text:004077F6 sub_4077F0      endp
.text:004077F6
.text:004077F6 ; ---------------------------------------------------------------------------
.text:004077FB                 align 10h
.text:00407800
.text:00407800 ; =============== S U B R O U T I N E =======================================
.text:00407800
.text:00407800
.text:00407800 sub_407800      proc near               ; DATA XREF: .text:00401638↑o
.text:00407800                                         ; .text:004029CC↑o
.text:00407800                 mov     eax, offset aGeneral ; "general"
.text:00407805                 retn
.text:00407805 sub_407800      endp
.text:00407805
.text:00407805 ; ---------------------------------------------------------------------------
.text:00407806                 align 10h
.text:00407810
.text:00407810 ; =============== S U B R O U T I N E =======================================
.text:00407810
.text:00407810 ; Attributes: bp-based frame
.text:00407810
.text:00407810 sub_407810      proc near               ; DATA XREF: .text:0040193C↑o
.text:00407810                                         ; .text:004029D0↑o
.text:00407810
.text:00407810 var_10          = dword ptr -10h
.text:00407810 var_4           = dword ptr -4
.text:00407810
.text:00407810 ; FUNCTION CHUNK AT .text:00410A4D SIZE 00000023 BYTES
.text:00407810
.text:00407810 ; __unwind { // loc_410A55
.text:00407810                 push    4
.text:00407812                 mov     eax, offset loc_410A55
.text:00407817                 call    __EH_prolog3
.text:0040781C                 push    0D4h ; 'Ô'
.text:00407821                 call    ds:__imp_??2@YAPAXI@Z ; operator new(uint)
.text:00407827                 pop     ecx
.text:00407828                 mov     ecx, eax
.text:0040782A                 mov     [ebp+var_10], ecx
.text:0040782D                 xor     eax, eax
.text:0040782F ;   try {
.text:0040782F                 mov     [ebp+var_4], eax
.text:00407832                 test    ecx, ecx
.text:00407834                 jz      short loc_40783B
.text:00407836                 call    sub_407856
.text:0040783B
.text:0040783B loc_40783B:                             ; CODE XREF: sub_407810+24↑j
.text:0040783B                 call    __EH_epilog3
.text:00407840                 retn
.text:00407840 ;   } // starts at 40782F
.text:00407840 ; } // starts at 407810
.text:00407840 sub_407810      endp ; sp-analysis failed
.text:00407840
.text:00407840 ; ---------------------------------------------------------------------------
.text:00407841                 align 10h
.text:00407850
.text:00407850 ; =============== S U B R O U T I N E =======================================
.text:00407850
.text:00407850
.text:00407850 sub_407850      proc near               ; DATA XREF: .text:const CPageTool::`vftable'↑o
.text:00407850                                         ; .text:004029D4↑o
.text:00407850                 mov     eax, offset off_401930 ; "CPageTool"
.text:00407855                 retn
.text:00407855 sub_407850      endp
.text:00407855
.text:00407856
.text:00407856 ; =============== S U B R O U T I N E =======================================
.text:00407856
.text:00407856 ; Attributes: bp-based frame
.text:00407856
.text:00407856 sub_407856      proc near               ; CODE XREF: sub_407810+26↑p
.text:00407856                                         ; sub_40CD8D+DB↓p
.text:00407856
.text:00407856 var_10          = dword ptr -10h
.text:00407856 var_4           = dword ptr -4
.text:00407856 arg_4           = dword ptr  0Ch
.text:00407856
.text:00407856 ; FUNCTION CHUNK AT .text:00406DF6 SIZE 00000007 BYTES
.text:00407856 ; FUNCTION CHUNK AT .text:00410F65 SIZE 00000041 BYTES
.text:00407856
.text:00407856 ; __unwind { // loc_410F8B
.text:00407856                 push    4
.text:00407858                 mov     eax, offset loc_410F8B
.text:0040785D                 call    __EH_prolog3
.text:00407862                 mov     esi, ecx
.text:00407864                 mov     [ebp+var_10], esi
.text:00407867                 xor     ebx, ebx
.text:00407869                 push    ebx
.text:0040786A                 push    12Ch
.text:0040786F                 call    ds:??0CPropertyPage@@QAE@II@Z ; CPropertyPage::CPropertyPage(uint,uint)
.text:00407875 ;   try {
.text:00407875                 mov     [ebp+var_4], ebx
.text:00407878                 mov     dword ptr [esi+90h], offset ??_7CPageBase@@6B@ ; const CPageBase::`vftable'
.text:00407882                 mov     [esi+94h], ebx
.text:00407888                 mov     [esi+98h], ebx
.text:00407888 ;   } // starts at 407875
.text:0040788E ;   try {
.text:0040788E                 mov     byte ptr [ebp+var_4], 1
.text:00407892                 lea     ecx, [esi+0ACh]
.text:00407898                 mov     dword ptr [esi], offset ??_7CPageTool@@6B@ ; const CPageTool::`vftable'
.text:0040789E                 mov     dword ptr [esi+90h], offset ??_7CPageTool@@6B@_0 ; const CPageTool::`vftable'
.text:004078A8                 mov     [esi+9Ch], ebx
.text:004078AE                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:004078B4                 lea     ecx, [esi+0B0h]
.text:004078B4 ;   } // starts at 40788E
.text:004078BA ;   try {
.text:004078BA                 mov     byte ptr [ebp+var_4], 2
.text:004078BE                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:004078C4                 or      dword ptr [esi+0A8h], 0FFFFFFFFh
.text:004078CB                 mov     eax, esi
.text:004078CD                 or      dword ptr [esi+0C4h], 0FFFFFFFFh
.text:004078D4                 mov     [esi+0A0h], ebx
.text:004078DA                 mov     [esi+0B4h], ebx
.text:004078E0                 mov     dword ptr [esi+0C0h], 19h
.text:004078EA                 mov     [esi+0B8h], ebx
.text:004078F0                 mov     [esi+0C8h], ebx
.text:004078F6                 mov     [esi+0CCh], bl
.text:004078FC                 call    __EH_epilog3
.text:00407901                 retn
.text:00407901 ;   } // starts at 4078BA
.text:00407901 ; } // starts at 407856
.text:00407901 sub_407856      endp
.text:00407901
.text:00407901 ; ---------------------------------------------------------------------------
.text:00407902                 align 10h
.text:00407910
.text:00407910 ; =============== S U B R O U T I N E =======================================
.text:00407910
.text:00407910 ; Attributes: bp-based frame
.text:00407910
.text:00407910 sub_407910      proc near               ; CODE XREF: sub_408570+6↓j
.text:00407910                                         ; DATA XREF: .text:0040183C↑o ...
.text:00407910
.text:00407910 var_10          = dword ptr -10h
.text:00407910 var_4           = dword ptr -4
.text:00407910 arg_0           = byte ptr  8
.text:00407910
.text:00407910 ; FUNCTION CHUNK AT .text:00410F65 SIZE 00000041 BYTES
.text:00407910
.text:00407910 ; __unwind { // loc_410F8B
.text:00407910                 push    4
.text:00407912                 mov     eax, offset loc_410F8B
.text:00407917                 call    __EH_prolog3
.text:0040791C                 mov     esi, ecx
.text:0040791E                 mov     [ebp+var_10], esi
.text:00407921                 mov     dword ptr [esi], offset ??_7CPageTool@@6B@ ; const CPageTool::`vftable'
.text:00407927                 mov     dword ptr [esi+90h], offset ??_7CPageTool@@6B@_0 ; const CPageTool::`vftable'
.text:00407931                 lea     ecx, [esi+0B0h]
.text:00407937 ;   try {
.text:00407937                 mov     [ebp+var_4], 2
.text:0040793E                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00407944                 lea     ecx, [esi+0ACh]
.text:00407944 ;   } // starts at 407937
.text:0040794A ;   try {
.text:0040794A                 mov     byte ptr [ebp+var_4], 1
.text:0040794E                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040794E ;   } // starts at 40794A
.text:00407954                 or      [ebp+var_4], 0FFFFFFFFh
.text:00407958                 mov     ecx, esi
.text:0040795A                 mov     dword ptr [esi+90h], offset ??_7CPageBase@@6B@ ; const CPageBase::`vftable'
.text:00407964                 call    ds:??1CPropertyPage@@UAE@XZ ; CPropertyPage::~CPropertyPage(void)
.text:0040796A                 test    [ebp+arg_0], 1
.text:0040796E                 jz      short loc_407978
.text:00407970                 push    esi
.text:00407971                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00407977                 pop     ecx
.text:00407978
.text:00407978 loc_407978:                             ; CODE XREF: sub_407910+5E↑j
.text:00407978                 mov     eax, esi
.text:0040797A                 call    __EH_epilog3
.text:0040797F                 retn    4
.text:0040797F ; } // starts at 407910
.text:0040797F sub_407910      endp ; sp-analysis failed
.text:0040797F
.text:0040797F ; ---------------------------------------------------------------------------
.text:00407982                 align 10h
.text:00407990
.text:00407990 ; =============== S U B R O U T I N E =======================================
.text:00407990
.text:00407990
.text:00407990 sub_407990      proc near               ; DATA XREF: .text:00401868↑o
.text:00407990                                         ; .text:004029DC↑o
.text:00407990                 mov     eax, offset off_401808
.text:00407995                 retn
.text:00407995 sub_407990      endp
.text:00407995
.text:00407996
.text:00407996 ; =============== S U B R O U T I N E =======================================
.text:00407996
.text:00407996 ; Attributes: bp-based frame
.text:00407996
.text:00407996 sub_407996      proc near               ; CODE XREF: sub_408913+312↓p
.text:00407996
.text:00407996 var_8C          = dword ptr -8Ch
.text:00407996 var_84          = dword ptr -84h
.text:00407996 var_78          = dword ptr -78h
.text:00407996 lParam          = dword ptr -50h
.text:00407996 var_4C          = dword ptr -4Ch
.text:00407996 var_48          = dword ptr -48h
.text:00407996 var_3C          = dword ptr -3Ch
.text:00407996 var_30          = dword ptr -30h
.text:00407996 var_14          = dword ptr -14h
.text:00407996 var_10          = dword ptr -10h
.text:00407996 var_4           = dword ptr -4
.text:00407996 arg_0           = dword ptr  8
.text:00407996 arg_4           = dword ptr  0Ch
.text:00407996
.text:00407996 ; FUNCTION CHUNK AT .text:00410FA6 SIZE 00000030 BYTES
.text:00407996
.text:00407996 ; __unwind { // loc_410FB8
.text:00407996                 push    80h
.text:0040799B                 mov     eax, offset loc_410FB8
.text:004079A0                 call    __EH_prolog3
.text:004079A5                 mov     esi, ecx
.text:004079A7                 mov     edi, [ebp+arg_0]
.text:004079AA                 test    edi, edi
.text:004079AC                 jz      loc_407A91
.text:004079B2                 xor     ebx, ebx
.text:004079B4                 cmp     [esi+9Ch], ebx
.text:004079BA                 jz      loc_407A91
.text:004079C0                 lea     ecx, [ebp+var_14]
.text:004079C3                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:004079C9                 lea     ecx, [ebp+var_10]
.text:004079CC ;   try {
.text:004079CC                 mov     [ebp+var_4], ebx
.text:004079CF                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:004079D5                 lea     eax, [edi+4]
.text:004079D5 ;   } // starts at 4079CC
.text:004079D8 ;   try {
.text:004079D8                 mov     byte ptr [ebp+var_4], 1
.text:004079DC                 push    eax
.text:004079DD                 lea     ecx, [ebp+var_14]
.text:004079E0                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:004079E6                 lea     eax, [ebp+var_10]
.text:004079E9                 mov     ecx, edi
.text:004079EB                 push    eax
.text:004079EC                 call    sub_408693
.text:004079F1                 push    3Ch ; '<'
.text:004079F3                 pop     ecx
.text:004079F4                 lea     eax, [ebp+lParam]
.text:004079F7
.text:004079F7 loc_4079F7:                             ; CODE XREF: sub_407996+67↓j
.text:004079F7                 mov     [eax], bl
.text:004079F9                 inc     eax
.text:004079FA                 sub     ecx, 1
.text:004079FD                 jnz     short loc_4079F7
.text:004079FF                 mov     eax, [esi+0A0h]
.text:00407A05                 mov     [ebp+var_4C], eax
.text:00407A08                 mov     eax, [ebp+var_14]
.text:00407A0B                 mov     [ebp+var_3C], eax
.text:00407A0E                 lea     eax, [ebp+lParam]
.text:00407A11                 push    eax             ; lParam
.text:00407A12                 push    ebx             ; wParam
.text:00407A13                 push    104Dh           ; Msg
.text:00407A18                 push    dword ptr [esi+9Ch] ; hWnd
.text:00407A1E                 mov     [ebp+lParam], 5
.text:00407A25                 mov     [ebp+var_30], edi
.text:00407A28                 mov     [ebp+var_48], ebx
.text:00407A2B                 call    ds:SendMessageW
.text:00407A31                 mov     ecx, eax
.text:00407A33                 test    ecx, ecx
.text:00407A35                 jns     short loc_407A3F
.text:00407A37                 mov     ecx, [esi+0A0h]
.text:00407A3D                 jmp     short loc_407A45
.text:00407A3F ; ---------------------------------------------------------------------------
.text:00407A3F
.text:00407A3F loc_407A3F:                             ; CODE XREF: sub_407996+9F↑j
.text:00407A3F                 mov     [esi+0A0h], ecx
.text:00407A45
.text:00407A45 loc_407A45:                             ; CODE XREF: sub_407996+A7↑j
.text:00407A45                 mov     eax, [ebp+var_10]
.text:00407A48                 mov     [ebp+var_78], eax
.text:00407A4B                 lea     eax, [ebp+var_8C]
.text:00407A51                 push    eax             ; lParam
.text:00407A52                 push    ecx             ; wParam
.text:00407A53                 push    1074h           ; Msg
.text:00407A58                 push    dword ptr [esi+9Ch] ; hWnd
.text:00407A5E                 mov     [ebp+var_84], 1
.text:00407A68                 call    ds:SendMessageW
.text:00407A6E                 inc     dword ptr [esi+0A0h]
.text:00407A74                 lea     ecx, [ebp+var_10]
.text:00407A74 ;   } // starts at 4079D8
.text:00407A77 ;   try {
.text:00407A77                 mov     byte ptr [ebp+var_4], bl
.text:00407A7A                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00407A7A ;   } // starts at 407A77
.text:00407A80                 or      [ebp+var_4], 0FFFFFFFFh
.text:00407A84                 lea     ecx, [ebp+var_14]
.text:00407A87                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00407A8D                 xor     eax, eax
.text:00407A8F                 jmp     short loc_407A96
.text:00407A91 ; ---------------------------------------------------------------------------
.text:00407A91
.text:00407A91 loc_407A91:                             ; CODE XREF: sub_407996+16↑j
.text:00407A91                                         ; sub_407996+24↑j
.text:00407A91                 mov     eax, 80004003h
.text:00407A96
.text:00407A96 loc_407A96:                             ; CODE XREF: sub_407996+F9↑j
.text:00407A96                 call    __EH_epilog3
.text:00407A9B                 retn    4
.text:00407A9B ; } // starts at 407996
.text:00407A9B sub_407996      endp
.text:00407A9B
.text:00407A9E
.text:00407A9E ; =============== S U B R O U T I N E =======================================
.text:00407A9E
.text:00407A9E ; Attributes: bp-based frame
.text:00407A9E
.text:00407A9E sub_407A9E      proc near               ; CODE XREF: sub_407C70+3↓p
.text:00407A9E
.text:00407A9E lParam          = dword ptr -44h
.text:00407A9E var_40          = dword ptr -40h
.text:00407A9E var_3C          = dword ptr -3Ch
.text:00407A9E var_24          = dword ptr -24h
.text:00407A9E var_8           = dword ptr -8
.text:00407A9E var_4           = dword ptr -4
.text:00407A9E
.text:00407A9E                 mov     edi, edi
.text:00407AA0                 push    ebp
.text:00407AA1                 mov     ebp, esp
.text:00407AA3                 sub     esp, 44h
.text:00407AA6                 mov     eax, ___security_cookie
.text:00407AAB                 xor     eax, ebp
.text:00407AAD                 mov     [ebp+var_4], eax
.text:00407AB0                 push    ebx
.text:00407AB1                 push    esi
.text:00407AB2                 push    edi
.text:00407AB3                 push    3Ch ; '<'       ; Size
.text:00407AB5                 xor     esi, esi
.text:00407AB7                 lea     eax, [ebp+lParam]
.text:00407ABA                 mov     ebx, ecx
.text:00407ABC                 push    esi             ; Val
.text:00407ABD                 push    eax             ; void *
.text:00407ABE                 mov     [ebp+var_8], ebx
.text:00407AC1                 call    memset
.text:00407AC6                 add     esp, 0Ch
.text:00407AC9                 mov     [ebp+lParam], 4
.text:00407AD0                 mov     [ebp+var_3C], esi
.text:00407AD3                 push    esi             ; lParam
.text:00407AD4                 push    esi             ; wParam
.text:00407AD5                 push    1004h           ; Msg
.text:00407ADA                 push    dword ptr [ebx+9Ch] ; hWnd
.text:00407AE0                 call    ds:SendMessageW
.text:00407AE6                 mov     edi, eax
.text:00407AE8                 jmp     short loc_407B3F
.text:00407AEA ; ---------------------------------------------------------------------------
.text:00407AEA
.text:00407AEA loc_407AEA:                             ; CODE XREF: sub_407A9E+A4↓j
.text:00407AEA                 lea     eax, [ebp+lParam]
.text:00407AED                 mov     [ebp+var_40], edi
.text:00407AF0                 push    eax             ; lParam
.text:00407AF1                 push    esi             ; wParam
.text:00407AF2                 push    104Bh           ; Msg
.text:00407AF7                 push    dword ptr [ebx+9Ch] ; hWnd
.text:00407AFD                 call    ds:SendMessageW
.text:00407B03                 cmp     eax, 1
.text:00407B06                 jnz     short loc_407B3F
.text:00407B08                 mov     ebx, [ebp+var_24]
.text:00407B0B                 test    ebx, ebx
.text:00407B0D                 jz      short loc_407B23
.text:00407B0F                 mov     eax, [ebx]
.text:00407B11                 push    1
.text:00407B13                 mov     esi, [eax]
.text:00407B15                 mov     ecx, esi
.text:00407B17                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00407B1D                 mov     ecx, ebx
.text:00407B1F                 call    esi
.text:00407B21                 xor     esi, esi
.text:00407B23
.text:00407B23 loc_407B23:                             ; CODE XREF: sub_407A9E+6F↑j
.text:00407B23                 mov     ebx, [ebp+var_8]
.text:00407B26                 lea     eax, [ebp+lParam]
.text:00407B29                 push    eax             ; lParam
.text:00407B2A                 push    esi             ; wParam
.text:00407B2B                 push    104Ch           ; Msg
.text:00407B30                 push    dword ptr [ebx+9Ch] ; hWnd
.text:00407B36                 mov     [ebp+var_24], esi
.text:00407B39                 call    ds:SendMessageW
.text:00407B3F
.text:00407B3F loc_407B3F:                             ; CODE XREF: sub_407A9E+4A↑j
.text:00407B3F                                         ; sub_407A9E+68↑j
.text:00407B3F                 sub     edi, 1
.text:00407B42                 jns     short loc_407AEA
.text:00407B44                 mov     ecx, [ebp+var_4]
.text:00407B47                 pop     edi
.text:00407B48                 pop     esi
.text:00407B49                 xor     ecx, ebp        ; StackCookie
.text:00407B4B                 pop     ebx
.text:00407B4C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00407B51                 mov     esp, ebp
.text:00407B53                 pop     ebp
.text:00407B54                 retn    4
.text:00407B54 sub_407A9E      endp
.text:00407B54
.text:00407B54 ; ---------------------------------------------------------------------------
.text:00407B57                 align 10h
.text:00407B60
.text:00407B60 ; =============== S U B R O U T I N E =======================================
.text:00407B60
.text:00407B60 ; Attributes: bp-based frame fuzzy-sp
.text:00407B60
.text:00407B60 sub_407B60      proc near               ; DATA XREF: .text:004018FC↑o
.text:00407B60                                         ; .text:004029E0↑o
.text:00407B60
.text:00407B60 Rect            = tagRECT ptr -14h
.text:00407B60 var_4           = dword ptr -4
.text:00407B60
.text:00407B60                 mov     edi, edi
.text:00407B62                 push    ebp
.text:00407B63                 mov     ebp, esp
.text:00407B65                 and     esp, 0FFFFFFF8h
.text:00407B68                 sub     esp, 14h
.text:00407B6B                 mov     eax, ___security_cookie
.text:00407B70                 xor     eax, esp
.text:00407B72                 mov     [esp+14h+var_4], eax
.text:00407B76                 push    ebx
.text:00407B77                 push    esi
.text:00407B78                 push    edi
.text:00407B79                 mov     esi, ecx
.text:00407B7B                 call    ds:__imp_?OnInitDialog@CDialog@@UAEHXZ ; CDialog::OnInitDialog(void)
.text:00407B81                 xor     ebx, ebx
.text:00407B83                 mov     edx, 12Dh
.text:00407B88                 inc     ebx
.text:00407B89                 mov     ecx, esi
.text:00407B8B                 mov     [esi+0A4h], ebx
.text:00407B91                 call    sub_40DAA3
.text:00407B96                 test    eax, eax
.text:00407B98                 jz      loc_407C48
.text:00407B9E                 push    4020h           ; lParam
.text:00407BA3                 push    0               ; wParam
.text:00407BA5                 push    1036h           ; Msg
.text:00407BAA                 push    eax             ; hWnd
.text:00407BAB                 mov     [esi+9Ch], eax
.text:00407BB1                 call    ds:SendMessageW
.text:00407BB7                 lea     eax, [esp+20h+Rect]
.text:00407BBB                 push    eax             ; lpRect
.text:00407BBC                 push    dword ptr [esi+9Ch] ; hWnd
.text:00407BC2                 call    ds:GetClientRect
.text:00407BC8                 test    eax, eax
.text:00407BCA                 jz      short loc_407C48
.text:00407BCC                 lea     ecx, [esp+20h+Rect]
.text:00407BD0                 call    ds:?NormalizeRect@CRect@@QAEXXZ ; CRect::NormalizeRect(void)
.text:00407BD6                 mov     eax, [esp+20h+Rect.right]
.text:00407BDA                 sub     eax, [esp+20h+Rect.left]
.text:00407BDE                 mov     [esi+0C0h], eax
.text:00407BE4                 mov     edi, dword_4137D8
.text:00407BEA                 test    edi, edi
.text:00407BEC                 jz      short loc_407C48
.text:00407BEE                 call    ds:__imp_?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ ; AfxGetModuleState(void)
.text:00407BF4                 push    1Eh             ; int
.text:00407BF6                 push    136h            ; uID
.text:00407BFB                 mov     ecx, esi
.text:00407BFD                 mov     [eax+0Ch], edi
.text:00407C00                 and     dword ptr [esi+0BCh], 0
.text:00407C07                 call    sub_4084BB
.text:00407C0C                 test    al, al
.text:00407C0E                 jz      short loc_407C48
.text:00407C10                 push    64h ; 'd'       ; int
.text:00407C12                 push    139h            ; uID
.text:00407C17                 mov     ecx, esi
.text:00407C19                 call    sub_4084BB
.text:00407C1E                 test    al, al
.text:00407C20                 jz      short loc_407C48
.text:00407C22                 mov     ecx, esi
.text:00407C24                 call    sub_4086C1
.text:00407C29                 cmp     byte ptr [esi+0CCh], 0
.text:00407C30                 jz      short loc_407C40
.text:00407C32                 push    ecx
.text:00407C33                 mov     ecx, esi
.text:00407C35                 call    sub_408373
.text:00407C3A                 mov     [esi+0CCh], bl
.text:00407C40
.text:00407C40 loc_407C40:                             ; CODE XREF: sub_407B60+D0↑j
.text:00407C40                 mov     [esi+98h], ebx
.text:00407C46                 jmp     short loc_407C56
.text:00407C48 ; ---------------------------------------------------------------------------
.text:00407C48
.text:00407C48 loc_407C48:                             ; CODE XREF: sub_407B60+38↑j
.text:00407C48                                         ; sub_407B60+6A↑j ...
.text:00407C48                 mov     ecx, dword_4137C8
.text:00407C4E                 push    4
.text:00407C50                 call    ds:?RemovePage@CPropertySheet@@QAEXH@Z ; CPropertySheet::RemovePage(int)
.text:00407C56
.text:00407C56 loc_407C56:                             ; CODE XREF: sub_407B60+E6↑j
.text:00407C56                 mov     ecx, [esp+20h+var_4]
.text:00407C5A                 mov     eax, ebx
.text:00407C5C                 pop     edi
.text:00407C5D                 pop     esi
.text:00407C5E                 pop     ebx
.text:00407C5F                 xor     ecx, esp        ; StackCookie
.text:00407C61                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00407C66                 mov     esp, ebp
.text:00407C68                 pop     ebp
.text:00407C69                 retn
.text:00407C69 sub_407B60      endp
.text:00407C69
.text:00407C69 ; ---------------------------------------------------------------------------
.text:00407C6A                 align 10h
.text:00407C70
.text:00407C70 ; =============== S U B R O U T I N E =======================================
.text:00407C70
.text:00407C70
.text:00407C70 sub_407C70      proc near               ; DATA XREF: .text:00401774↑o
.text:00407C70                                         ; .text:004029E4↑o
.text:00407C70                 mov     edi, edi
.text:00407C72                 push    ecx
.text:00407C73                 call    sub_407A9E
.text:00407C78                 retn
.text:00407C78 sub_407C70      endp
.text:00407C78
.text:00407C78 ; ---------------------------------------------------------------------------
.text:00407C79                 align 10h
.text:00407C80
.text:00407C80 ; =============== S U B R O U T I N E =======================================
.text:00407C80
.text:00407C80 ; Attributes: bp-based frame
.text:00407C80
.text:00407C80 sub_407C80      proc near               ; DATA XREF: .text:0040178C↑o
.text:00407C80                                         ; .text:004029E8↑o
.text:00407C80
.text:00407C80 arg_0           = dword ptr  8
.text:00407C80 arg_4           = dword ptr  0Ch
.text:00407C80
.text:00407C80                 mov     edi, edi
.text:00407C82                 push    ebp
.text:00407C83                 mov     ebp, esp
.text:00407C85                 mov     eax, [ebp+arg_0]
.text:00407C88                 mov     eax, [eax+0Ch]
.text:00407C8B                 mov     [ecx+0A8h], eax
.text:00407C91                 call    sub_407DCC
.text:00407C96                 mov     eax, [ebp+arg_4]
.text:00407C99                 and     dword ptr [eax], 0
.text:00407C9C                 pop     ebp
.text:00407C9D                 retn    8
.text:00407C9D sub_407C80      endp
.text:00407C9D
.text:00407CA0
.text:00407CA0 ; =============== S U B R O U T I N E =======================================
.text:00407CA0
.text:00407CA0 ; Attributes: bp-based frame
.text:00407CA0
.text:00407CA0 sub_407CA0      proc near               ; DATA XREF: .text:004017A4↑o
.text:00407CA0                                         ; .text:004029EC↑o
.text:00407CA0
.text:00407CA0 var_1C          = dword ptr -1Ch
.text:00407CA0 var_18          = dword ptr -18h
.text:00407CA0 var_14          = dword ptr -14h
.text:00407CA0 var_10          = dword ptr -10h
.text:00407CA0 var_4           = dword ptr -4
.text:00407CA0 arg_4           = dword ptr  0Ch
.text:00407CA0
.text:00407CA0 ; FUNCTION CHUNK AT .text:00410FD6 SIZE 0000002D BYTES
.text:00407CA0
.text:00407CA0 ; __unwind { // loc_410FE8
.text:00407CA0                 push    10h
.text:00407CA2                 mov     eax, offset loc_410FE8
.text:00407CA7                 call    __EH_prolog3
.text:00407CAC                 mov     esi, ecx
.text:00407CAE                 lea     ecx, [ebp+var_10]
.text:00407CB1                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00407CB7                 xor     ebx, ebx
.text:00407CB9                 lea     edi, [esi+0ACh]
.text:00407CBF ;   try {
.text:00407CBF                 mov     [ebp+var_4], ebx
.text:00407CC2                 mov     eax, [edi]
.text:00407CC4                 cmp     [eax-8], ebx
.text:00407CC7                 jnz     short loc_407CEA
.text:00407CC9                 mov     edx, 12Eh
.text:00407CCE                 mov     ecx, esi
.text:00407CD0                 call    sub_40DAA3
.text:00407CD5                 test    eax, eax
.text:00407CD7                 jz      loc_407D7D
.text:00407CDD                 push    ebx             ; bEnable
.text:00407CDE                 push    eax             ; hWnd
.text:00407CDF                 call    ds:EnableWindow
.text:00407CE5                 jmp     loc_407D7D
.text:00407CEA ; ---------------------------------------------------------------------------
.text:00407CEA
.text:00407CEA loc_407CEA:                             ; CODE XREF: sub_407CA0+27↑j
.text:00407CEA                 cmp     [esi+0D0h], ebx
.text:00407CF0                 jz      short loc_407D02
.text:00407CF2                 push    1
.text:00407CF4                 push    7D2h
.text:00407CF9                 push    ebx
.text:00407CFA                 call    ds:WinSqmIncrementDWORD
.text:00407D00                 jmp     short loc_407D70
.text:00407D02 ; ---------------------------------------------------------------------------
.text:00407D02
.text:00407D02 loc_407D02:                             ; CODE XREF: sub_407CA0+50↑j
.text:00407D02                 push    edi
.text:00407D03                 lea     ecx, [ebp+var_10]
.text:00407D06                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:00407D0C                 lea     ecx, [esi+0B0h]
.text:00407D12                 mov     eax, [ecx]
.text:00407D14                 cmp     [eax-8], ebx
.text:00407D17                 jz      short loc_407D43
.text:00407D19                 push    ecx
.text:00407D1A                 push    offset asc_402FC4 ; " "
.text:00407D1F                 lea     eax, [ebp+var_14]
.text:00407D22                 push    eax
.text:00407D23                 call    ds:??H@YG?AVCString@@PBGABV0@@Z ; operator+(ushort const *,CString const &)
.text:00407D29                 push    eax
.text:00407D2A                 lea     ecx, [ebp+var_10]
.text:00407D2A ;   } // starts at 407CBF
.text:00407D2D ;   try {
.text:00407D2D                 mov     byte ptr [ebp+var_4], 1
.text:00407D31                 call    ds:??YCString@@QAEABV0@ABV0@@Z ; CString::operator+=(CString const &)
.text:00407D37                 lea     ecx, [ebp+var_14]
.text:00407D37 ;   } // starts at 407D2D
.text:00407D3A ;   try {
.text:00407D3A                 mov     byte ptr [ebp+var_4], bl
.text:00407D3D                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00407D43
.text:00407D43 loc_407D43:                             ; CODE XREF: sub_407CA0+77↑j
.text:00407D43                 mov     ecx, [ebp+var_10]
.text:00407D46                 lea     edx, [ebp+var_14]
.text:00407D49                 mov     [ebp+var_1C], 1
.text:00407D50                 mov     [ebp+var_18], ebx
.text:00407D53                 call    sub_40E188
.text:00407D58                 mov     eax, [ebp+var_14]
.text:00407D5B                 mov     [ebp+var_18], eax
.text:00407D5E                 lea     eax, [ebp+var_1C]
.text:00407D61                 push    eax
.text:00407D62                 push    1
.text:00407D64                 push    7E2h
.text:00407D69                 push    ebx
.text:00407D6A                 call    ds:WinSqmAddToStream
.text:00407D70
.text:00407D70 loc_407D70:                             ; CODE XREF: sub_407CA0+60↑j
.text:00407D70                 mov     edx, [esi+0B0h] ; lpParameters
.text:00407D76                 mov     ecx, [edi]      ; lpFile
.text:00407D78                 call    sub_407D90
.text:00407D78 ;   } // starts at 407D3A
.text:00407D7D
.text:00407D7D loc_407D7D:                             ; CODE XREF: sub_407CA0+37↑j
.text:00407D7D                                         ; sub_407CA0+45↑j
.text:00407D7D                 or      [ebp+var_4], 0FFFFFFFFh
.text:00407D81                 lea     ecx, [ebp+var_10]
.text:00407D84                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00407D8A                 call    __EH_epilog3
.text:00407D8F                 retn
.text:00407D8F ; } // starts at 407CA0
.text:00407D8F sub_407CA0      endp
.text:00407D8F
.text:00407D90
.text:00407D90 ; =============== S U B R O U T I N E =======================================
.text:00407D90
.text:00407D90
.text:00407D90 ; int __fastcall sub_407D90(LPCWSTR lpFile, LPCWSTR lpParameters)
.text:00407D90 sub_407D90      proc near               ; CODE XREF: sub_406F30+45↑p
.text:00407D90                                         ; sub_407CA0+D8↑p
.text:00407D90                 mov     edi, edi
.text:00407D92                 push    esi
.text:00407D93                 push    1               ; nShowCmd
.text:00407D95                 xor     esi, esi
.text:00407D97                 push    esi             ; lpDirectory
.text:00407D98                 push    edx             ; lpParameters
.text:00407D99                 push    ecx             ; lpFile
.text:00407D9A                 push    esi             ; lpOperation
.text:00407D9B                 push    esi             ; hwnd
.text:00407D9C                 call    ds:ShellExecuteW
.text:00407DA2                 cmp     eax, 20h ; ' '
.text:00407DA5                 ja      short loc_407DC3
.text:00407DA7                 test    eax, eax
.text:00407DA9                 jg      short loc_407DAF
.text:00407DAB                 mov     esi, eax
.text:00407DAD                 jmp     short loc_407DB8
.text:00407DAF ; ---------------------------------------------------------------------------
.text:00407DAF
.text:00407DAF loc_407DAF:                             ; CODE XREF: sub_407D90+19↑j
.text:00407DAF                 movzx   esi, ax
.text:00407DB2                 or      esi, 80070000h
.text:00407DB8
.text:00407DB8 loc_407DB8:                             ; CODE XREF: sub_407D90+1D↑j
.text:00407DB8                 test    esi, esi
.text:00407DBA                 jns     short loc_407DC3
.text:00407DBC                 mov     edx, esi
.text:00407DBE                 call    sub_40D5E8
.text:00407DC3
.text:00407DC3 loc_407DC3:                             ; CODE XREF: sub_407D90+15↑j
.text:00407DC3                                         ; sub_407D90+2A↑j
.text:00407DC3                 not     esi
.text:00407DC5                 shr     esi, 1Fh
.text:00407DC8                 mov     eax, esi
.text:00407DCA                 pop     esi
.text:00407DCB                 retn
.text:00407DCB sub_407D90      endp
.text:00407DCB
.text:00407DCC
.text:00407DCC ; =============== S U B R O U T I N E =======================================
.text:00407DCC
.text:00407DCC
.text:00407DCC sub_407DCC      proc near               ; CODE XREF: sub_407C80+11↑p
.text:00407DCC                                         ; sub_407E50↓j
.text:00407DCC                 mov     edi, edi
.text:00407DCE                 push    esi
.text:00407DCF                 push    edi
.text:00407DD0                 mov     edx, 12Fh
.text:00407DD5                 mov     esi, ecx
.text:00407DD7                 call    sub_40DAA3
.text:00407DDC                 mov     ecx, esi
.text:00407DDE                 mov     edi, eax
.text:00407DE0                 call    sub_407EE3
.text:00407DE5                 test    eax, eax
.text:00407DE7                 js      short loc_407E0B
.text:00407DE9                 mov     ecx, esi
.text:00407DEB                 call    sub_407E55
.text:00407DF0                 test    eax, eax
.text:00407DF2                 js      short loc_407E0B
.text:00407DF4                 push    1               ; bEnable
.text:00407DF6                 mov     edx, 12Eh
.text:00407DFB                 mov     ecx, esi
.text:00407DFD                 call    sub_40DAA3
.text:00407E02                 push    eax             ; hWnd
.text:00407E03                 call    ds:EnableWindow
.text:00407E09                 jmp     short loc_407E49
.text:00407E0B ; ---------------------------------------------------------------------------
.text:00407E0B
.text:00407E0B loc_407E0B:                             ; CODE XREF: sub_407DCC+1B↑j
.text:00407E0B                                         ; sub_407DCC+26↑j
.text:00407E0B                 mov     edx, 131h
.text:00407E10                 mov     ecx, esi
.text:00407E12                 call    sub_40DAA3
.text:00407E17                 test    eax, eax
.text:00407E19                 jz      short loc_407E49
.text:00407E1B                 push    offset Source   ; lpString
.text:00407E20                 push    eax             ; hWnd
.text:00407E21                 call    ds:SetWindowTextW
.text:00407E27                 push    0               ; bEnable
.text:00407E29                 mov     edx, 12Eh
.text:00407E2E                 mov     ecx, esi
.text:00407E30                 call    sub_40DAA3
.text:00407E35                 push    eax             ; hWnd
.text:00407E36                 call    ds:EnableWindow
.text:00407E3C                 test    edi, edi
.text:00407E3E                 jz      short loc_407E49
.text:00407E40                 push    0               ; nCmdShow
.text:00407E42                 push    edi             ; hWnd
.text:00407E43                 call    ds:ShowWindow
.text:00407E49
.text:00407E49 loc_407E49:                             ; CODE XREF: sub_407DCC+3D↑j
.text:00407E49                                         ; sub_407DCC+4D↑j ...
.text:00407E49                 pop     edi
.text:00407E4A                 pop     esi
.text:00407E4B                 retn
.text:00407E4B sub_407DCC      endp
.text:00407E4B
.text:00407E4B ; ---------------------------------------------------------------------------
.text:00407E4C                 align 10h
.text:00407E50
.text:00407E50 ; =============== S U B R O U T I N E =======================================
.text:00407E50
.text:00407E50 ; Attributes: thunk
.text:00407E50
.text:00407E50 sub_407E50      proc near               ; DATA XREF: .text:004017EC↑o
.text:00407E50                                         ; .text:004029F0↑o
.text:00407E50                 jmp     sub_407DCC
.text:00407E50 sub_407E50      endp
.text:00407E50
.text:00407E55
.text:00407E55 ; =============== S U B R O U T I N E =======================================
.text:00407E55
.text:00407E55 ; Attributes: bp-based frame
.text:00407E55
.text:00407E55 sub_407E55      proc near               ; CODE XREF: sub_407DCC+1F↑p
.text:00407E55
.text:00407E55 lpString        = dword ptr -10h
.text:00407E55 var_4           = dword ptr -4
.text:00407E55 arg_4           = dword ptr  0Ch
.text:00407E55
.text:00407E55 ; FUNCTION CHUNK AT .text:00411003 SIZE 00000024 BYTES
.text:00407E55
.text:00407E55 ; __unwind { // loc_41100C
.text:00407E55                 push    4
.text:00407E57                 mov     eax, offset loc_41100C
.text:00407E5C                 call    __EH_prolog3
.text:00407E61                 mov     edi, ecx
.text:00407E63                 lea     ecx, [ebp+lpString]
.text:00407E66                 xor     esi, esi
.text:00407E68                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00407E6E ;   try {
.text:00407E6E                 mov     [ebp+var_4], esi
.text:00407E71                 lea     ecx, [edi+0ACh]
.text:00407E77                 mov     eax, [ecx]
.text:00407E79                 cmp     [eax-8], esi
.text:00407E7C                 jnz     short loc_407E85
.text:00407E7E
.text:00407E7E loc_407E7E:                             ; CODE XREF: sub_407E55+6D↓j
.text:00407E7E                 mov     esi, 80004005h
.text:00407E83                 jmp     short loc_407ECE
.text:00407E85 ; ---------------------------------------------------------------------------
.text:00407E85
.text:00407E85 loc_407E85:                             ; CODE XREF: sub_407E55+27↑j
.text:00407E85                 push    ecx
.text:00407E86                 lea     ecx, [ebp+lpString]
.text:00407E89                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:00407E8F                 lea     ebx, [edi+0B0h]
.text:00407E95                 mov     eax, [ebx]
.text:00407E97                 cmp     [eax-8], esi
.text:00407E9A                 jz      short loc_407EB4
.text:00407E9C                 push    offset asc_402FC4 ; " "
.text:00407EA1                 lea     ecx, [ebp+lpString]
.text:00407EA4                 call    ds:??YCString@@QAEABV0@PBG@Z ; CString::operator+=(ushort const *)
.text:00407EAA                 push    ebx
.text:00407EAB                 lea     ecx, [ebp+lpString]
.text:00407EAE                 call    ds:??YCString@@QAEABV0@ABV0@@Z ; CString::operator+=(CString const &)
.text:00407EB4
.text:00407EB4 loc_407EB4:                             ; CODE XREF: sub_407E55+45↑j
.text:00407EB4                 mov     edx, 131h
.text:00407EB9                 mov     ecx, edi
.text:00407EBB                 call    sub_40DAA3
.text:00407EC0                 test    eax, eax
.text:00407EC2                 jz      short loc_407E7E
.text:00407EC4                 push    [ebp+lpString]  ; lpString
.text:00407EC7                 push    eax             ; hWnd
.text:00407EC8                 call    ds:SetWindowTextW
.text:00407EC8 ;   } // starts at 407E6E
.text:00407ECE
.text:00407ECE loc_407ECE:                             ; CODE XREF: sub_407E55+2E↑j
.text:00407ECE                 or      [ebp+var_4], 0FFFFFFFFh
.text:00407ED2                 lea     ecx, [ebp+lpString]
.text:00407ED5                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00407EDB                 mov     eax, esi
.text:00407EDD                 call    __EH_epilog3
.text:00407EE2                 retn
.text:00407EE2 ; } // starts at 407E55
.text:00407EE2 sub_407E55      endp
.text:00407EE2
.text:00407EE3
.text:00407EE3 ; =============== S U B R O U T I N E =======================================
.text:00407EE3
.text:00407EE3 ; Attributes: bp-based frame
.text:00407EE3
.text:00407EE3 sub_407EE3      proc near               ; CODE XREF: sub_407DCC+14↑p
.text:00407EE3
.text:00407EE3 lParam          = dword ptr -5Ch
.text:00407EE3 var_58          = dword ptr -58h
.text:00407EE3 var_54          = dword ptr -54h
.text:00407EE3 var_3C          = dword ptr -3Ch
.text:00407EE3 var_20          = byte ptr -20h
.text:00407EE3 var_1C          = dword ptr -1Ch
.text:00407EE3 var_18          = dword ptr -18h
.text:00407EE3 var_14          = dword ptr -14h
.text:00407EE3 var_10          = byte ptr -10h
.text:00407EE3 var_4           = dword ptr -4
.text:00407EE3 arg_4           = dword ptr  0Ch
.text:00407EE3
.text:00407EE3 ; FUNCTION CHUNK AT .text:00411027 SIZE 0000003F BYTES
.text:00407EE3
.text:00407EE3 ; __unwind { // loc_41104B
.text:00407EE3                 push    50h
.text:00407EE5                 mov     eax, offset loc_41104B
.text:00407EEA                 call    __EH_prolog3
.text:00407EEF                 mov     edi, ecx
.text:00407EF1                 lea     ecx, [ebp+var_14]
.text:00407EF4                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00407EFA ;   try {
.text:00407EFA                 and     [ebp+var_4], 0
.text:00407EFE                 lea     ecx, [ebp+var_10]
.text:00407F01                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00407F07                 lea     ecx, [ebp+var_20]
.text:00407F07 ;   } // starts at 407EFA
.text:00407F0A ;   try {
.text:00407F0A                 mov     byte ptr [ebp+var_4], 1
.text:00407F0E                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00407F14                 lea     ecx, [ebp+var_18]
.text:00407F14 ;   } // starts at 407F0A
.text:00407F17 ;   try {
.text:00407F17                 mov     byte ptr [ebp+var_4], 2
.text:00407F1B                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00407F21                 mov     ebx, 12Fh
.text:00407F21 ;   } // starts at 407F17
.text:00407F26 ;   try {
.text:00407F26                 mov     byte ptr [ebp+var_4], 3
.text:00407F2A                 mov     esi, [edi+0A8h]
.text:00407F30                 mov     ecx, edi
.text:00407F32                 push    ebx
.text:00407F33                 call    ds:?IsDlgButtonChecked@CWnd@@QBEIH@Z ; CWnd::IsDlgButtonChecked(int)
.text:00407F39                 mov     edx, ebx
.text:00407F3B                 mov     [ebp+var_1C], eax
.text:00407F3E                 mov     ecx, edi
.text:00407F40                 call    sub_40DAA3
.text:00407F45                 and     [ebp+var_54], 0
.text:00407F49                 mov     ebx, eax
.text:00407F4B                 lea     eax, [ebp+lParam]
.text:00407F4E                 mov     [ebp+lParam], 4
.text:00407F55                 push    eax             ; lParam
.text:00407F56                 push    0               ; wParam
.text:00407F58                 push    104Bh           ; Msg
.text:00407F5D                 push    dword ptr [edi+9Ch] ; hWnd
.text:00407F63                 mov     [ebp+var_58], esi
.text:00407F66                 call    ds:SendMessageW
.text:00407F6C                 cmp     eax, 1
.text:00407F6F                 jnz     loc_408021
.text:00407F75                 mov     esi, [ebp+var_3C]
.text:00407F78                 test    esi, esi
.text:00407F7A                 jz      loc_408021
.text:00407F80                 lea     eax, [esi+8]
.text:00407F83                 push    eax
.text:00407F84                 lea     ecx, [ebp+var_14]
.text:00407F87                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:00407F8D                 mov     eax, [ebp+var_14]
.text:00407F90                 cmp     dword ptr [eax-8], 0
.text:00407F94                 jz      loc_408021
.text:00407F9A                 lea     eax, [esi+10h]
.text:00407F9D                 push    eax
.text:00407F9E                 lea     ecx, [ebp+var_18]
.text:00407FA1                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:00407FA7                 mov     eax, [ebp+var_18]
.text:00407FAA                 cmp     dword ptr [eax-8], 0
.text:00407FAE                 jnz     short loc_407FCC
.text:00407FB0                 lea     eax, [esi+0Ch]
.text:00407FB3                 push    eax
.text:00407FB4                 lea     ecx, [ebp+var_10]
.text:00407FB7                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:00407FBD                 test    ebx, ebx
.text:00407FBF                 jz      short loc_407FEF
.text:00407FC1                 push    0               ; nCmdShow
.text:00407FC3                 push    ebx             ; hWnd
.text:00407FC4                 call    ds:ShowWindow
.text:00407FCA                 jmp     short loc_407FEF
.text:00407FCC ; ---------------------------------------------------------------------------
.text:00407FCC
.text:00407FCC loc_407FCC:                             ; CODE XREF: sub_407EE3+CB↑j
.text:00407FCC                 test    ebx, ebx
.text:00407FCE                 jz      short loc_407FD9
.text:00407FD0                 push    5               ; nCmdShow
.text:00407FD2                 push    ebx             ; hWnd
.text:00407FD3                 call    ds:ShowWindow
.text:00407FD9
.text:00407FD9 loc_407FD9:                             ; CODE XREF: sub_407EE3+EB↑j
.text:00407FD9                 cmp     [ebp+var_1C], 1
.text:00407FDD                 lea     ecx, [ebp+var_10]
.text:00407FE0                 lea     eax, [esi+10h]
.text:00407FE3                 jz      short loc_407FE8
.text:00407FE5                 lea     eax, [esi+0Ch]
.text:00407FE8
.text:00407FE8 loc_407FE8:                             ; CODE XREF: sub_407EE3+100↑j
.text:00407FE8                 push    eax
.text:00407FE9                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:00407FEF
.text:00407FEF loc_407FEF:                             ; CODE XREF: sub_407EE3+DC↑j
.text:00407FEF                                         ; sub_407EE3+E7↑j
.text:00407FEF                 lea     eax, [ebp+var_14]
.text:00407FF2                 push    eax
.text:00407FF3                 lea     ecx, [edi+0ACh]
.text:00407FF9                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:00407FFF                 xor     eax, eax
.text:00408001                 lea     ecx, [edi+0B0h]
.text:00408007                 cmp     [esi+18h], eax
.text:0040800A                 setz    al
.text:0040800D                 mov     [edi+0D0h], eax
.text:00408013                 lea     eax, [ebp+var_10]
.text:00408016                 push    eax
.text:00408017                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:0040801D                 xor     esi, esi
.text:0040801F                 jmp     short loc_408045
.text:00408021 ; ---------------------------------------------------------------------------
.text:00408021
.text:00408021 loc_408021:                             ; CODE XREF: sub_407EE3+8C↑j
.text:00408021                                         ; sub_407EE3+97↑j ...
.text:00408021                 mov     esi, offset Source
.text:00408026                 lea     ecx, [edi+0B0h]
.text:0040802C                 push    esi
.text:0040802D                 call    ds:??4CString@@QAEABV0@PBG@Z ; CString::operator=(ushort const *)
.text:00408033                 push    esi
.text:00408034                 lea     ecx, [edi+0ACh]
.text:0040803A                 call    ds:??4CString@@QAEABV0@PBG@Z ; CString::operator=(ushort const *)
.text:00408040                 mov     esi, 80004005h
.text:00408045
.text:00408045 loc_408045:                             ; CODE XREF: sub_407EE3+13C↑j
.text:00408045                 lea     ecx, [ebp+var_18]
.text:00408045 ;   } // starts at 407F26
.text:00408048 ;   try {
.text:00408048                 mov     byte ptr [ebp+var_4], 2
.text:0040804C                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00408052                 lea     ecx, [ebp+var_20]
.text:00408052 ;   } // starts at 408048
.text:00408055 ;   try {
.text:00408055                 mov     byte ptr [ebp+var_4], 1
.text:00408059                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040805F                 lea     ecx, [ebp+var_10]
.text:0040805F ;   } // starts at 408055
.text:00408062 ;   try {
.text:00408062                 mov     byte ptr [ebp+var_4], 0
.text:00408066                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00408066 ;   } // starts at 408062
.text:0040806C                 or      [ebp+var_4], 0FFFFFFFFh
.text:00408070                 lea     ecx, [ebp+var_14]
.text:00408073                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00408079                 mov     eax, esi
.text:0040807B                 call    __EH_epilog3
.text:00408080                 retn
.text:00408080 ; } // starts at 407EE3
.text:00408080 sub_407EE3      endp
.text:00408080
.text:00408080 ; ---------------------------------------------------------------------------
.text:00408081                 align 10h
.text:00408090
.text:00408090 ; =============== S U B R O U T I N E =======================================
.text:00408090
.text:00408090 ; Attributes: bp-based frame
.text:00408090
.text:00408090 sub_408090      proc near               ; DATA XREF: .text:004017BC↑o
.text:00408090                                         ; .text:004029F4↑o
.text:00408090
.text:00408090 lParam          = dword ptr -3Ch
.text:00408090 var_30          = dword ptr -30h
.text:00408090 var_2C          = dword ptr -2Ch
.text:00408090 arg_4           = dword ptr  0Ch
.text:00408090
.text:00408090                 mov     edi, edi
.text:00408092                 push    ebp
.text:00408093                 mov     ebp, esp
.text:00408095                 sub     esp, 3Ch
.text:00408098                 push    esi
.text:00408099                 push    edi
.text:0040809A                 xor     edi, edi
.text:0040809C                 mov     esi, ecx
.text:0040809E                 push    edi             ; lParam
.text:0040809F                 push    edi             ; wParam
.text:004080A0                 push    1032h           ; Msg
.text:004080A5                 push    dword ptr [esi+9Ch] ; hWnd
.text:004080AB                 call    ds:SendMessageW
.text:004080B1                 test    eax, eax
.text:004080B3                 jnz     short loc_4080EB
.text:004080B5                 push    edi             ; lParam
.text:004080B6                 push    edi             ; wParam
.text:004080B7                 push    1004h           ; Msg
.text:004080BC                 push    dword ptr [esi+9Ch] ; hWnd
.text:004080C2                 call    ds:SendMessageW
.text:004080C8                 test    eax, eax
.text:004080CA                 jle     short loc_4080EB
.text:004080CC                 push    3
.text:004080CE                 pop     eax
.text:004080CF                 mov     [ebp+var_2C], eax
.text:004080D2                 mov     [ebp+var_30], eax
.text:004080D5                 lea     eax, [ebp+lParam]
.text:004080D8                 push    eax             ; lParam
.text:004080D9                 push    edi             ; wParam
.text:004080DA                 push    102Bh           ; Msg
.text:004080DF                 push    dword ptr [esi+9Ch] ; hWnd
.text:004080E5                 call    ds:SendMessageW
.text:004080EB
.text:004080EB loc_4080EB:                             ; CODE XREF: sub_408090+23↑j
.text:004080EB                                         ; sub_408090+3A↑j
.text:004080EB                 mov     eax, [ebp+arg_4]
.text:004080EE                 mov     [eax], edi
.text:004080F0                 pop     edi
.text:004080F1                 pop     esi
.text:004080F2                 mov     esp, ebp
.text:004080F4                 pop     ebp
.text:004080F5                 retn    8
.text:004080F5 sub_408090      endp
.text:004080F5
.text:004080F8
.text:004080F8 ; =============== S U B R O U T I N E =======================================
.text:004080F8
.text:004080F8 ; Attributes: bp-based frame
.text:004080F8
.text:004080F8 sub_4080F8      proc near               ; CODE XREF: sub_408913+2FC↓p
.text:004080F8
.text:004080F8 var_10          = dword ptr -10h
.text:004080F8 var_4           = dword ptr -4
.text:004080F8 arg_0           = byte ptr  8
.text:004080F8 arg_4           = dword ptr  0Ch
.text:004080F8 arg_8           = byte ptr  10h
.text:004080F8 arg_C           = byte ptr  14h
.text:004080F8 arg_10          = byte ptr  18h
.text:004080F8 arg_14          = dword ptr  1Ch
.text:004080F8
.text:004080F8 ; FUNCTION CHUNK AT .text:00411066 SIZE 00000084 BYTES
.text:004080F8
.text:004080F8 ; __unwind { // loc_4110CF
.text:004080F8                 push    4
.text:004080FA                 mov     eax, offset loc_4110CF
.text:004080FF                 call    __EH_prolog3
.text:00408104                 mov     esi, ecx
.text:00408106                 mov     [ebp+var_10], esi
.text:00408109 ;   try {
.text:00408109                 mov     [ebp+var_4], 4
.text:00408110                 lea     ecx, [esi+4]
.text:00408113                 mov     dword ptr [esi], offset ??_7CToolItem@@6B@ ; const CToolItem::`vftable'
.text:00408119                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040811F                 lea     ecx, [esi+8]
.text:0040811F ;   } // starts at 408109
.text:00408122 ;   try {
.text:00408122                 mov     byte ptr [ebp+var_4], 5
.text:00408126                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040812C                 lea     ecx, [esi+0Ch]
.text:0040812C ;   } // starts at 408122
.text:0040812F ;   try {
.text:0040812F                 mov     byte ptr [ebp+var_4], 6
.text:00408133                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00408139                 lea     ecx, [esi+10h]
.text:00408139 ;   } // starts at 40812F
.text:0040813C ;   try {
.text:0040813C                 mov     byte ptr [ebp+var_4], 7
.text:00408140                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00408146                 lea     ecx, [esi+14h]
.text:00408146 ;   } // starts at 40813C
.text:00408149 ;   try {
.text:00408149                 mov     byte ptr [ebp+var_4], 8
.text:0040814D                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00408153                 mov     ecx, esi
.text:00408153 ;   } // starts at 408149
.text:00408155 ;   try {
.text:00408155                 mov     byte ptr [ebp+var_4], 9
.text:00408159                 lea     eax, [ebp+arg_0]
.text:0040815C                 push    eax
.text:0040815D                 lea     ecx, [ecx+4]
.text:00408160                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:00408166                 mov     ecx, esi
.text:00408168                 lea     eax, [ebp+arg_4]
.text:0040816B                 push    eax
.text:0040816C                 lea     ecx, [ecx+8]
.text:0040816F                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:00408175                 lea     eax, [ebp+arg_8]
.text:00408178                 push    eax
.text:00408179                 lea     ecx, [esi+0Ch]
.text:0040817C                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:00408182                 lea     eax, [ebp+arg_C]
.text:00408185                 push    eax
.text:00408186                 lea     ecx, [esi+10h]
.text:00408189                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:0040818F                 lea     eax, [ebp+arg_10]
.text:00408192                 push    eax
.text:00408193                 lea     ecx, [esi+14h]
.text:00408196                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:0040819C                 mov     eax, [ebp+arg_14]
.text:0040819F                 lea     ecx, [ebp+arg_0]
.text:004081A2                 mov     ebx, esi
.text:004081A2 ;   } // starts at 408155
.text:004081A4 ;   try {
.text:004081A4                 mov     byte ptr [ebp+var_4], 3
.text:004081A8                 mov     [ebx+18h], eax
.text:004081AB                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004081B1                 lea     ecx, [ebp+arg_4]
.text:004081B1 ;   } // starts at 4081A4
.text:004081B4 ;   try {
.text:004081B4                 mov     byte ptr [ebp+var_4], 2
.text:004081B8                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004081BE                 lea     ecx, [ebp+arg_8]
.text:004081BE ;   } // starts at 4081B4
.text:004081C1 ;   try {
.text:004081C1                 mov     byte ptr [ebp+var_4], 1
.text:004081C5                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004081CB                 lea     ecx, [ebp+arg_C]
.text:004081CB ;   } // starts at 4081C1
.text:004081CE ;   try {
.text:004081CE                 mov     byte ptr [ebp+var_4], 0
.text:004081D2                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004081D2 ;   } // starts at 4081CE
.text:004081D8                 or      [ebp+var_4], 0FFFFFFFFh
.text:004081DC                 lea     ecx, [ebp+arg_10]
.text:004081DF                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004081E5                 mov     eax, ebx
.text:004081E7                 call    __EH_epilog3
.text:004081EC                 retn    18h
.text:004081EC ; } // starts at 4080F8
.text:004081EC sub_4080F8      endp
.text:004081EC
.text:004081EC ; ---------------------------------------------------------------------------
.text:004081EF                 align 10h
.text:004081F0
.text:004081F0 ; =============== S U B R O U T I N E =======================================
.text:004081F0
.text:004081F0 ; Attributes: bp-based frame
.text:004081F0
.text:004081F0 sub_4081F0      proc near               ; DATA XREF: .text:004029F8↑o
.text:004081F0                                         ; sub_4082C0+87↓o
.text:004081F0
.text:004081F0 String1         = dword ptr -14h
.text:004081F0 String2         = dword ptr -10h
.text:004081F0 var_4           = dword ptr -4
.text:004081F0 arg_0           = dword ptr  8
.text:004081F0 arg_4           = dword ptr  0Ch
.text:004081F0 arg_8           = dword ptr  10h
.text:004081F0
.text:004081F0 ; FUNCTION CHUNK AT .text:00410D17 SIZE 0000002D BYTES
.text:004081F0
.text:004081F0 ; __unwind { // loc_410D29
.text:004081F0                 push    8
.text:004081F2                 mov     eax, offset loc_410D29
.text:004081F7                 call    __EH_prolog3
.text:004081FC                 mov     ebx, [ebp+arg_8]
.text:004081FF                 xor     esi, esi
.text:00408201                 movzx   edi, bl
.text:00408204                 and     ebx, 0FF00h
.text:0040820A                 cmp     [ebp+arg_0], esi
.text:0040820D                 jz      loc_4082A2
.text:00408213                 cmp     [ebp+arg_4], esi
.text:00408216                 jz      loc_4082A2
.text:0040821C                 lea     ecx, [ebp+String1]
.text:0040821F                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00408225 ;   try {
.text:00408225                 and     [ebp+var_4], esi
.text:00408228                 lea     ecx, [ebp+String2]
.text:0040822B                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040822B ;   } // starts at 408225
.text:00408231 ;   try {
.text:00408231                 mov     byte ptr [ebp+var_4], 1
.text:00408235                 sub     edi, esi
.text:00408237                 jz      short loc_408258
.text:00408239                 sub     edi, 1
.text:0040823C                 jnz     short loc_408278
.text:0040823E                 mov     ecx, [ebp+arg_0]
.text:00408241                 lea     eax, [ebp+String1]
.text:00408244                 push    eax
.text:00408245                 call    sub_408693
.text:0040824A                 mov     ecx, [ebp+arg_4]
.text:0040824D                 lea     eax, [ebp+String2]
.text:00408250                 push    eax
.text:00408251                 call    sub_408693
.text:00408256                 jmp     short loc_408278
.text:00408258 ; ---------------------------------------------------------------------------
.text:00408258
.text:00408258 loc_408258:                             ; CODE XREF: sub_4081F0+47↑j
.text:00408258                 mov     eax, [ebp+arg_0]
.text:0040825B                 lea     ecx, [ebp+String1]
.text:0040825E                 add     eax, 4
.text:00408261                 push    eax
.text:00408262                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:00408268                 mov     eax, [ebp+arg_4]
.text:0040826B                 lea     ecx, [ebp+String2]
.text:0040826E                 add     eax, 4
.text:00408271                 push    eax
.text:00408272                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:00408278
.text:00408278 loc_408278:                             ; CODE XREF: sub_4081F0+4C↑j
.text:00408278                                         ; sub_4081F0+66↑j
.text:00408278                 push    [ebp+String2]   ; String2
.text:0040827B                 push    [ebp+String1]   ; String1
.text:0040827E                 call    ds:_wcsicoll
.text:00408284                 pop     ecx
.text:00408285                 pop     ecx
.text:00408286                 lea     ecx, [ebp+String2]
.text:00408286 ;   } // starts at 408231
.text:00408289 ;   try {
.text:00408289                 mov     byte ptr [ebp+var_4], 0
.text:0040828D                 mov     esi, eax
.text:0040828F                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040828F ;   } // starts at 408289
.text:00408295                 or      [ebp+var_4], 0FFFFFFFFh
.text:00408299                 lea     ecx, [ebp+String1]
.text:0040829C                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004082A2
.text:004082A2 loc_4082A2:                             ; CODE XREF: sub_4081F0+1D↑j
.text:004082A2                                         ; sub_4081F0+26↑j
.text:004082A2                 test    ebx, ebx
.text:004082A4                 jz      short loc_4082A8
.text:004082A6                 neg     esi
.text:004082A8
.text:004082A8 loc_4082A8:                             ; CODE XREF: sub_4081F0+B4↑j
.text:004082A8                 mov     eax, esi
.text:004082AA                 call    __EH_epilog3
.text:004082AF                 retn    0Ch
.text:004082AF ; } // starts at 4081F0
.text:004082AF sub_4081F0      endp ; sp-analysis failed
.text:004082AF
.text:004082AF ; ---------------------------------------------------------------------------
.text:004082B2                 align 10h
.text:004082C0
.text:004082C0 ; =============== S U B R O U T I N E =======================================
.text:004082C0
.text:004082C0 ; Attributes: bp-based frame fuzzy-sp
.text:004082C0
.text:004082C0 sub_4082C0      proc near               ; DATA XREF: .text:004017D4↑o
.text:004082C0                                         ; .text:004029FC↑o
.text:004082C0
.text:004082C0 arg_0           = dword ptr  8
.text:004082C0 arg_4           = dword ptr  0Ch
.text:004082C0
.text:004082C0                 mov     edi, edi
.text:004082C2                 push    ebp
.text:004082C3                 mov     ebp, esp
.text:004082C5                 and     esp, 0FFFFFFF8h
.text:004082C8                 push    ecx
.text:004082C9                 push    ebx
.text:004082CA                 push    esi
.text:004082CB                 push    edi
.text:004082CC                 mov     edi, [ebp+arg_0]
.text:004082CF                 mov     esi, ecx
.text:004082D1                 test    edi, edi
.text:004082D3                 jz      loc_408364
.text:004082D9                 push    0               ; lParam
.text:004082DB                 push    0               ; wParam
.text:004082DD                 push    101Fh           ; Msg
.text:004082E2                 push    dword ptr [edi] ; hWnd
.text:004082E4                 call    ds:SendMessageW
.text:004082EA                 mov     edx, [esi+0C4h] ; wParam
.text:004082F0                 mov     ebx, eax
.text:004082F2                 push    0               ; int
.text:004082F4                 mov     ecx, ebx        ; hWnd
.text:004082F6                 call    sub_40DABF
.text:004082FB                 mov     ecx, [esi+0C4h]
.text:00408301                 cmp     ecx, [edi+10h]
.text:00408304                 jnz     short loc_40830F
.text:00408306                 xor     dword ptr [esi+0C8h], 1
.text:0040830D                 jmp     short loc_40831F
.text:0040830F ; ---------------------------------------------------------------------------
.text:0040830F
.text:0040830F loc_40830F:                             ; CODE XREF: sub_4082C0+44↑j
.text:0040830F                 and     dword ptr [esi+0C8h], 0
.text:00408316                 mov     eax, [edi+10h]
.text:00408319                 mov     [esi+0C4h], eax
.text:0040831F
.text:0040831F loc_40831F:                             ; CODE XREF: sub_4082C0+4D↑j
.text:0040831F                 mov     eax, [esi+0C8h]
.text:00408325                 mov     ecx, ebx        ; hWnd
.text:00408327                 mov     edx, [esi+0C4h] ; wParam
.text:0040832D                 neg     eax
.text:0040832F                 sbb     eax, eax
.text:00408331                 and     eax, 0FFFFFE00h
.text:00408336                 add     eax, 400h
.text:0040833B                 push    eax             ; int
.text:0040833C                 call    sub_40DABF
.text:00408341                 mov     eax, [esi+0C8h]
.text:00408347                 push    offset sub_4081F0 ; lParam
.text:0040834C                 shl     eax, 8
.text:0040834F                 or      eax, [edi+10h]
.text:00408352                 push    eax             ; wParam
.text:00408353                 push    1030h           ; Msg
.text:00408358                 push    dword ptr [esi+9Ch] ; hWnd
.text:0040835E                 call    ds:SendMessageW
.text:00408364
.text:00408364 loc_408364:                             ; CODE XREF: sub_4082C0+13↑j
.text:00408364                 mov     eax, [ebp+arg_4]
.text:00408367                 pop     edi
.text:00408368                 pop     esi
.text:00408369                 pop     ebx
.text:0040836A                 and     dword ptr [eax], 0
.text:0040836D                 mov     esp, ebp
.text:0040836F                 pop     ebp
.text:00408370                 retn    8
.text:00408370 sub_4082C0      endp
.text:00408370
.text:00408373
.text:00408373 ; =============== S U B R O U T I N E =======================================
.text:00408373
.text:00408373 ; Attributes: bp-based frame
.text:00408373
.text:00408373 sub_408373      proc near               ; CODE XREF: sub_407B60+D5↑p
.text:00408373
.text:00408373 Caption         = word ptr -1A0Ch
.text:00408373 var_120C        = word ptr -120Ch
.text:00408373 Buffer          = word ptr -0A0Ch
.text:00408373 Dst             = word ptr -20Ch
.text:00408373 var_4           = dword ptr -4
.text:00408373
.text:00408373                 mov     edi, edi
.text:00408375                 push    ebp
.text:00408376                 mov     ebp, esp
.text:00408378                 mov     eax, 1A0Ch      ; a1
.text:0040837D                 call    __alloca_probe_0_0
.text:00408382                 mov     eax, ___security_cookie
.text:00408387                 xor     eax, ebp
.text:00408389                 mov     [ebp+var_4], eax
.text:0040838C                 push    ebx
.text:0040838D                 push    esi
.text:0040838E                 push    edi
.text:0040838F                 mov     edi, ecx
.text:00408391                 xor     ebx, ebx
.text:00408393                 mov     esi, ebx
.text:00408395                 cmp     [edi+0B8h], ebx
.text:0040839B                 jnz     loc_4084A6
.text:004083A1                 push    208h            ; Size
.text:004083A6                 lea     eax, [ebp+Dst]
.text:004083AC                 push    ebx             ; Val
.text:004083AD                 push    eax             ; void *
.text:004083AE                 call    memset
.text:004083B3                 add     esp, 0Ch
.text:004083B6                 lea     eax, [ebp+Dst]
.text:004083BC                 mov     esi, 104h
.text:004083C1                 push    esi             ; nSize
.text:004083C2                 push    eax             ; lpDst
.text:004083C3                 push    offset aWindirSystem32 ; "%windir%\\system32\\MSCFGTLC.XML"
.text:004083C8                 call    ds:ExpandEnvironmentStringsW
.text:004083CE                 test    eax, eax
.text:004083D0                 jz      loc_4084A1
.text:004083D6                 cmp     eax, esi
.text:004083D8                 jnb     loc_4084A1
.text:004083DE                 push    400h            ; cchBufferMax
.text:004083E3                 lea     eax, [ebp+Buffer]
.text:004083E9                 push    eax             ; lpBuffer
.text:004083EA                 push    7D6h            ; uID
.text:004083EF                 push    ebx             ; lpModuleName
.text:004083F0                 call    ds:GetModuleHandleW
.text:004083F6                 push    eax             ; hInstance
.text:004083F7                 call    ds:LoadStringW
.text:004083FD                 test    eax, eax
.text:004083FF                 jle     loc_4084A1
.text:00408405                 lea     eax, [ebp+Dst]
.text:0040840B                 push    eax
.text:0040840C                 lea     ecx, [ebp+Buffer]
.text:00408412                 call    sub_408586
.text:00408417                 mov     esi, eax
.text:00408419                 test    esi, esi
.text:0040841B                 js      loc_4084A6
.text:00408421                 push    400h            ; cchBufferMax
.text:00408426                 lea     eax, [ebp+var_120C]
.text:0040842C                 push    eax             ; lpBuffer
.text:0040842D                 push    7D7h            ; uID
.text:00408432                 push    ebx             ; lpModuleName
.text:00408433                 call    ds:GetModuleHandleW
.text:00408439                 push    eax             ; hInstance
.text:0040843A                 call    ds:LoadStringW
.text:00408440                 test    eax, eax
.text:00408442                 jle     short loc_4084A1
.text:00408444                 lea     eax, [ebp+var_120C]
.text:0040844A                 push    eax
.text:0040844B                 lea     ecx, [ebp+Buffer]
.text:00408451                 call    sub_408586
.text:00408456                 mov     esi, eax
.text:00408458                 test    esi, esi
.text:0040845A                 js      short loc_4084A6
.text:0040845C                 push    400h            ; cchBufferMax
.text:00408461                 lea     eax, [ebp+Caption]
.text:00408467                 push    eax             ; lpBuffer
.text:00408468                 push    7D1h            ; uID
.text:0040846D                 push    ebx             ; lpModuleName
.text:0040846E                 call    ds:GetModuleHandleW
.text:00408474                 push    eax             ; hInstance
.text:00408475                 call    ds:LoadStringW
.text:0040847B                 test    eax, eax
.text:0040847D                 jle     short loc_4084A1
.text:0040847F                 push    ebx             ; uType
.text:00408480                 lea     eax, [ebp+Caption]
.text:00408486                 push    eax             ; lpCaption
.text:00408487                 lea     eax, [ebp+Buffer]
.text:0040848D                 push    eax             ; lpText
.text:0040848E                 push    ebx             ; hWnd
.text:0040848F                 call    ds:MessageBoxW
.text:00408495                 mov     dword ptr [edi+0B8h], 1
.text:0040849F                 jmp     short loc_4084A6
.text:004084A1 ; ---------------------------------------------------------------------------
.text:004084A1
.text:004084A1 loc_4084A1:                             ; CODE XREF: sub_408373+5D↑j
.text:004084A1                                         ; sub_408373+65↑j ...
.text:004084A1                 mov     esi, 80004005h
.text:004084A6
.text:004084A6 loc_4084A6:                             ; CODE XREF: sub_408373+28↑j
.text:004084A6                                         ; sub_408373+A8↑j ...
.text:004084A6                 mov     ecx, [ebp+var_4]
.text:004084A9                 mov     eax, esi
.text:004084AB                 pop     edi
.text:004084AC                 pop     esi
.text:004084AD                 xor     ecx, ebp        ; StackCookie
.text:004084AF                 pop     ebx
.text:004084B0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004084B5                 mov     esp, ebp
.text:004084B7                 pop     ebp
.text:004084B8                 retn    4
.text:004084B8 sub_408373      endp
.text:004084B8
.text:004084BB
.text:004084BB ; =============== S U B R O U T I N E =======================================
.text:004084BB
.text:004084BB ; Attributes: bp-based frame
.text:004084BB
.text:004084BB ; int __stdcall sub_4084BB(UINT uID, int)
.text:004084BB sub_4084BB      proc near               ; CODE XREF: sub_407B60+A7↑p
.text:004084BB                                         ; sub_407B60+B9↑p
.text:004084BB
.text:004084BB lParam          = dword ptr -238h
.text:004084BB var_230         = dword ptr -230h
.text:004084BB var_22C         = dword ptr -22Ch
.text:004084BB Buffer          = word ptr -20Ch
.text:004084BB var_4           = dword ptr -4
.text:004084BB uID             = dword ptr  8
.text:004084BB arg_4           = dword ptr  0Ch
.text:004084BB
.text:004084BB                 mov     edi, edi
.text:004084BD                 push    ebp
.text:004084BE                 mov     ebp, esp
.text:004084C0                 sub     esp, 238h
.text:004084C6                 mov     eax, ___security_cookie
.text:004084CB                 xor     eax, ebp
.text:004084CD                 mov     [ebp+var_4], eax
.text:004084D0                 push    ebx
.text:004084D1                 push    esi
.text:004084D2                 push    104h            ; cchBufferMax
.text:004084D7                 lea     eax, [ebp+Buffer]
.text:004084DD                 mov     esi, ecx
.text:004084DF                 push    eax             ; lpBuffer
.text:004084E0                 push    [ebp+uID]       ; uID
.text:004084E3                 mov     bl, 1
.text:004084E5                 push    0               ; lpModuleName
.text:004084E7                 call    ds:GetModuleHandleW
.text:004084ED                 push    eax             ; hInstance
.text:004084EE                 call    ds:LoadStringW
.text:004084F4                 test    eax, eax
.text:004084F6                 jle     short loc_408547
.text:004084F8                 lea     eax, [ebp+Buffer]
.text:004084FE                 mov     [ebp+lParam], 6
.text:00408508                 mov     [ebp+var_22C], eax
.text:0040850E                 xor     edx, edx
.text:00408510                 mov     eax, [esi+0C0h]
.text:00408516                 imul    eax, [ebp+arg_4]
.text:0040851A                 push    64h ; 'd'
.text:0040851C                 pop     ecx
.text:0040851D                 div     ecx
.text:0040851F                 mov     [ebp+var_230], eax
.text:00408525                 lea     eax, [ebp+lParam]
.text:0040852B                 push    eax             ; lParam
.text:0040852C                 push    dword ptr [esi+0BCh] ; wParam
.text:00408532                 push    1061h           ; Msg
.text:00408537                 push    dword ptr [esi+9Ch] ; hWnd
.text:0040853D                 call    ds:SendMessageW
.text:00408543                 test    eax, eax
.text:00408545                 jns     short loc_40854B
.text:00408547
.text:00408547 loc_408547:                             ; CODE XREF: sub_4084BB+3B↑j
.text:00408547                 xor     bl, bl
.text:00408549                 jmp     short loc_408551
.text:0040854B ; ---------------------------------------------------------------------------
.text:0040854B
.text:0040854B loc_40854B:                             ; CODE XREF: sub_4084BB+8A↑j
.text:0040854B                 inc     dword ptr [esi+0BCh]
.text:00408551
.text:00408551 loc_408551:                             ; CODE XREF: sub_4084BB+8E↑j
.text:00408551                 mov     ecx, [ebp+var_4]
.text:00408554                 mov     al, bl
.text:00408556                 pop     esi
.text:00408557                 xor     ecx, ebp        ; StackCookie
.text:00408559                 pop     ebx
.text:0040855A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040855F                 mov     esp, ebp
.text:00408561                 pop     ebp
.text:00408562                 retn    8
.text:00408562 sub_4084BB      endp
.text:00408562
.text:00408562 ; ---------------------------------------------------------------------------
.text:00408565                 align 10h
.text:00408570
.text:00408570 ; =============== S U B R O U T I N E =======================================
.text:00408570
.text:00408570
.text:00408570 sub_408570      proc near               ; DATA XREF: .text:const CPageTool::`vftable'↑o
.text:00408570                                         ; .text:00402A00↑o
.text:00408570                 sub     ecx, 90h
.text:00408576                 jmp     sub_407910
.text:00408576 sub_408570      endp
.text:00408576
.text:00408576 ; ---------------------------------------------------------------------------
.text:0040857B                 align 10h
.text:00408580
.text:00408580 ; =============== S U B R O U T I N E =======================================
.text:00408580
.text:00408580
.text:00408580 sub_408580      proc near               ; DATA XREF: .text:00401828↑o
.text:00408580                                         ; .text:00402A04↑o
.text:00408580                 mov     eax, offset aTools ; "tools"
.text:00408585                 retn
.text:00408585 sub_408580      endp
.text:00408585
.text:00408586
.text:00408586 ; =============== S U B R O U T I N E =======================================
.text:00408586
.text:00408586 ; Attributes: bp-based frame
.text:00408586
.text:00408586 sub_408586      proc near               ; CODE XREF: sub_408373+9F↑p
.text:00408586                                         ; sub_408373+DE↑p ...
.text:00408586
.text:00408586 arg_0           = dword ptr  8
.text:00408586
.text:00408586                 mov     edi, edi
.text:00408588                 push    ebp
.text:00408589                 mov     ebp, esp
.text:0040858B                 push    ebx
.text:0040858C                 push    esi
.text:0040858D                 mov     edx, 400h
.text:00408592                 mov     eax, ecx
.text:00408594                 push    edi
.text:00408595                 mov     esi, edx
.text:00408597                 xor     ebx, ebx
.text:00408599
.text:00408599 loc_408599:                             ; CODE XREF: sub_408586+1E↓j
.text:00408599                 cmp     [eax], bx
.text:0040859C                 jz      short loc_4085A6
.text:0040859E                 add     eax, 2
.text:004085A1                 sub     esi, 1
.text:004085A4                 jnz     short loc_408599
.text:004085A6
.text:004085A6 loc_4085A6:                             ; CODE XREF: sub_408586+16↑j
.text:004085A6                 mov     eax, esi
.text:004085A8                 neg     eax
.text:004085AA                 sbb     eax, eax
.text:004085AC                 and     eax, 7FF8FFA9h
.text:004085B1                 add     eax, 80070057h
.text:004085B6                 test    esi, esi
.text:004085B8                 jz      short loc_4085C0
.text:004085BA                 mov     edi, edx
.text:004085BC                 sub     edi, esi
.text:004085BE                 jmp     short loc_4085C2
.text:004085C0 ; ---------------------------------------------------------------------------
.text:004085C0
.text:004085C0 loc_4085C0:                             ; CODE XREF: sub_408586+32↑j
.text:004085C0                 mov     edi, ebx
.text:004085C2
.text:004085C2 loc_4085C2:                             ; CODE XREF: sub_408586+38↑j
.text:004085C2                 test    eax, eax
.text:004085C4                 js      short loc_408606
.text:004085C6                 lea     ecx, [ecx+edi*2]
.text:004085C9                 mov     eax, ebx
.text:004085CB                 sub     edx, edi
.text:004085CD                 jz      short loc_4085F9
.text:004085CF                 mov     ebx, [ebp+arg_0]
.text:004085D2                 lea     esi, [edi+7FFFFBFEh]
.text:004085D8                 add     esi, edx
.text:004085DA                 sub     ebx, ecx
.text:004085DC
.text:004085DC loc_4085DC:                             ; CODE XREF: sub_408586+6D↓j
.text:004085DC                 test    esi, esi
.text:004085DE                 jz      short loc_4085F5
.text:004085E0                 movzx   edi, word ptr [ebx+ecx]
.text:004085E4                 test    di, di
.text:004085E7                 jz      short loc_4085F5
.text:004085E9                 mov     [ecx], di
.text:004085EC                 add     ecx, 2
.text:004085EF                 dec     esi
.text:004085F0                 sub     edx, 1
.text:004085F3                 jnz     short loc_4085DC
.text:004085F5
.text:004085F5 loc_4085F5:                             ; CODE XREF: sub_408586+58↑j
.text:004085F5                                         ; sub_408586+61↑j
.text:004085F5                 test    edx, edx
.text:004085F7                 jnz     short loc_408601
.text:004085F9
.text:004085F9 loc_4085F9:                             ; CODE XREF: sub_408586+47↑j
.text:004085F9                 sub     ecx, 2
.text:004085FC                 mov     eax, 8007007Ah
.text:00408601
.text:00408601 loc_408601:                             ; CODE XREF: sub_408586+71↑j
.text:00408601                 xor     edx, edx
.text:00408603                 mov     [ecx], dx
.text:00408606
.text:00408606 loc_408606:                             ; CODE XREF: sub_408586+3E↑j
.text:00408606                 pop     edi
.text:00408607                 pop     esi
.text:00408608                 pop     ebx
.text:00408609                 pop     ebp
.text:0040860A                 retn    4
.text:0040860A sub_408586      endp
.text:0040860A
.text:0040860A ; ---------------------------------------------------------------------------
.text:0040860D                 align 10h
.text:00408610
.text:00408610 ; =============== S U B R O U T I N E =======================================
.text:00408610
.text:00408610 ; Attributes: bp-based frame info_from_lumina
.text:00408610
.text:00408610 ; void *__thiscall D3DX11Core::CBuffer::`scalar deleting destructor'(D3DX11Core::CBuffer *__hidden this, unsigned int)
.text:00408610 ??_GCBuffer@D3DX11Core@@UAEPAXI@Z_1 proc near
.text:00408610                                         ; DATA XREF: .text:const CToolItem::`vftable'↑o
.text:00408610                                         ; .text:00402A08↑o
.text:00408610
.text:00408610 arg_0           = byte ptr  8
.text:00408610
.text:00408610                 mov     edi, edi
.text:00408612                 push    ebp
.text:00408613                 mov     ebp, esp
.text:00408615                 push    esi
.text:00408616                 mov     esi, ecx
.text:00408618                 call    sub_408632
.text:0040861D                 test    [ebp+arg_0], 1
.text:00408621                 jz      short loc_40862B
.text:00408623                 push    esi
.text:00408624                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:0040862A                 pop     ecx
.text:0040862B
.text:0040862B loc_40862B:                             ; CODE XREF: D3DX11Core::CBuffer::`scalar deleting destructor'(uint)+11↑j
.text:0040862B                 mov     eax, esi
.text:0040862D                 pop     esi
.text:0040862E                 pop     ebp
.text:0040862F                 retn    4
.text:0040862F ??_GCBuffer@D3DX11Core@@UAEPAXI@Z_1 endp
.text:0040862F
.text:00408632
.text:00408632 ; =============== S U B R O U T I N E =======================================
.text:00408632
.text:00408632 ; Attributes: bp-based frame
.text:00408632
.text:00408632 sub_408632      proc near               ; CODE XREF: D3DX11Core::CBuffer::`scalar deleting destructor'(uint)+8↑p
.text:00408632
.text:00408632 var_10          = dword ptr -10h
.text:00408632 var_4           = dword ptr -4
.text:00408632 arg_4           = dword ptr  0Ch
.text:00408632
.text:00408632 ; FUNCTION CHUNK AT .text:004110EA SIZE 0000004B BYTES
.text:00408632
.text:00408632 ; __unwind { // loc_41111A
.text:00408632                 push    4
.text:00408634                 mov     eax, offset loc_41111A
.text:00408639                 call    __EH_prolog3
.text:0040863E                 mov     esi, ecx
.text:00408640                 mov     [ebp+var_10], esi
.text:00408643                 mov     dword ptr [esi], offset ??_7CToolItem@@6B@ ; const CToolItem::`vftable'
.text:00408649                 lea     ecx, [esi+14h]
.text:0040864C ;   try {
.text:0040864C                 mov     [ebp+var_4], 3
.text:00408653                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00408659                 lea     ecx, [esi+10h]
.text:00408659 ;   } // starts at 40864C
.text:0040865C ;   try {
.text:0040865C                 mov     byte ptr [ebp+var_4], 2
.text:00408660                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00408666                 lea     ecx, [esi+0Ch]
.text:00408666 ;   } // starts at 40865C
.text:00408669 ;   try {
.text:00408669                 mov     byte ptr [ebp+var_4], 1
.text:0040866D                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00408673                 lea     ecx, [esi+8]
.text:00408673 ;   } // starts at 408669
.text:00408676 ;   try {
.text:00408676                 mov     byte ptr [ebp+var_4], 0
.text:0040867A                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040867A ;   } // starts at 408676
.text:00408680                 or      [ebp+var_4], 0FFFFFFFFh
.text:00408684                 lea     ecx, [esi+4]
.text:00408687                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040868D                 call    __EH_epilog3
.text:00408692                 retn
.text:00408692 ; } // starts at 408632
.text:00408692 sub_408632      endp
.text:00408692
.text:00408693
.text:00408693 ; =============== S U B R O U T I N E =======================================
.text:00408693
.text:00408693 ; Attributes: bp-based frame
.text:00408693
.text:00408693 sub_408693      proc near               ; CODE XREF: sub_407996+56↑p
.text:00408693                                         ; sub_4081F0+55↑p ...
.text:00408693
.text:00408693 arg_0           = dword ptr  8
.text:00408693
.text:00408693                 mov     edi, edi
.text:00408695                 push    ebp
.text:00408696                 mov     ebp, esp
.text:00408698                 add     ecx, 14h
.text:0040869B                 mov     eax, [ecx]
.text:0040869D                 cmp     dword ptr [eax-8], 0
.text:004086A1                 jnz     short loc_4086B3
.text:004086A3                 mov     ecx, [ebp+arg_0]
.text:004086A6                 push    offset asc_402FC4 ; " "
.text:004086AB                 call    ds:??4CString@@QAEABV0@PBG@Z ; CString::operator=(ushort const *)
.text:004086B1                 jmp     short loc_4086BD
.text:004086B3 ; ---------------------------------------------------------------------------
.text:004086B3
.text:004086B3 loc_4086B3:                             ; CODE XREF: sub_408693+E↑j
.text:004086B3                 push    ecx
.text:004086B4                 mov     ecx, [ebp+arg_0]
.text:004086B7                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:004086BD
.text:004086BD loc_4086BD:                             ; CODE XREF: sub_408693+1E↑j
.text:004086BD                 pop     ebp
.text:004086BE                 retn    4
.text:004086BE sub_408693      endp
.text:004086BE
.text:004086C1
.text:004086C1 ; =============== S U B R O U T I N E =======================================
.text:004086C1
.text:004086C1 ; Attributes: bp-based frame
.text:004086C1
.text:004086C1 sub_4086C1      proc near               ; CODE XREF: sub_407B60+C4↑p
.text:004086C1
.text:004086C1 var_34          = dword ptr -34h
.text:004086C1 var_2C          = dword ptr -2Ch
.text:004086C1 var_24          = dword ptr -24h
.text:004086C1 var_1C          = dword ptr -1Ch
.text:004086C1 bstrString      = dword ptr -18h
.text:004086C1 var_14          = dword ptr -14h
.text:004086C1 var_10          = dword ptr -10h
.text:004086C1 var_C           = dword ptr -0Ch
.text:004086C1 var_8           = dword ptr -8
.text:004086C1 var_4           = dword ptr -4
.text:004086C1
.text:004086C1                 mov     edi, edi
.text:004086C3                 push    ebp
.text:004086C4                 mov     ebp, esp
.text:004086C6                 sub     esp, 34h
.text:004086C9                 push    ebx
.text:004086CA                 push    esi
.text:004086CB                 push    edi
.text:004086CC                 push    6
.text:004086CE                 mov     [ebp+var_4], ecx
.text:004086D1                 lea     edi, [ebp+var_1C]
.text:004086D4                 pop     ecx
.text:004086D5                 xor     eax, eax
.text:004086D7                 xor     esi, esi
.text:004086D9                 rep stosd
.text:004086DB                 push    6
.text:004086DD                 pop     ecx
.text:004086DE                 lea     edi, [ebp+var_34]
.text:004086E1                 rep stosd
.text:004086E3                 push    offset aMsconfigtools ; "//MSCONFIGTOOLS"
.text:004086E8                 call    ds:SysAllocString
.text:004086EE                 mov     ebx, eax
.text:004086F0                 mov     [ebp+var_1C], ebx
.text:004086F3                 test    ebx, ebx
.text:004086F5                 jnz     short loc_408704
.text:004086F7                 mov     edi, [ebp+bstrString]
.text:004086FA                 mov     esi, 8007000Eh
.text:004086FF                 jmp     loc_4087C0
.text:00408704 ; ---------------------------------------------------------------------------
.text:00408704
.text:00408704 loc_408704:                             ; CODE XREF: sub_4086C1+34↑j
.text:00408704                 push    offset off_403154 ; psz
.text:00408709                 call    ds:SysAllocString
.text:0040870F                 mov     edi, eax
.text:00408711                 mov     [ebp+bstrString], edi
.text:00408714                 test    edi, edi
.text:00408716                 jnz     short loc_408722
.text:00408718
.text:00408718 loc_408718:                             ; CODE XREF: sub_4086C1+71↓j
.text:00408718                                         ; sub_4086C1+83↓j ...
.text:00408718                 mov     esi, 8007000Eh
.text:0040871D                 jmp     loc_4087B5
.text:00408722 ; ---------------------------------------------------------------------------
.text:00408722
.text:00408722 loc_408722:                             ; CODE XREF: sub_4086C1+55↑j
.text:00408722                 push    offset off_403160 ; psz
.text:00408727                 call    ds:SysAllocString
.text:0040872D                 mov     [ebp+var_14], eax
.text:00408730                 test    eax, eax
.text:00408732                 jz      short loc_408718
.text:00408734                 push    offset aDefaultOpt ; "DEFAULT_OPT"
.text:00408739                 call    ds:SysAllocString
.text:0040873F                 mov     [ebp+var_10], eax
.text:00408742                 test    eax, eax
.text:00408744                 jz      short loc_408718
.text:00408746                 push    offset aAdvOpt  ; "ADV_OPT"
.text:0040874B                 call    ds:SysAllocString
.text:00408751                 mov     [ebp+var_C], eax
.text:00408754                 test    eax, eax
.text:00408756                 jz      short loc_408718
.text:00408758                 push    offset aHelp    ; "HELP"
.text:0040875D                 call    ds:SysAllocString
.text:00408763                 mov     [ebp+var_8], eax
.text:00408766                 test    eax, eax
.text:00408768                 jnz     short loc_40876F
.text:0040876A                 mov     esi, 8007000Eh
.text:0040876F
.text:0040876F loc_40876F:                             ; CODE XREF: sub_4086C1+A7↑j
.text:0040876F                 test    esi, esi
.text:00408771                 js      short loc_4087B5
.text:00408773                 mov     ebx, [ebp+var_4]
.text:00408776                 lea     eax, [ebp+var_1C]
.text:00408779                 push    0
.text:0040877B                 push    eax
.text:0040877C                 mov     ecx, ebx
.text:0040877E                 call    sub_408913
.text:00408783                 mov     esi, eax
.text:00408785                 test    esi, esi
.text:00408787                 js      short loc_4087AF
.text:00408789                 lea     eax, [ebp+var_34]
.text:0040878C                 mov     ecx, ebx
.text:0040878E                 push    eax
.text:0040878F                 lea     eax, [ebp+var_1C]
.text:00408792                 push    eax
.text:00408793                 call    sub_408913
.text:00408798                 mov     esi, eax
.text:0040879A                 test    esi, esi
.text:0040879C                 jns     short loc_4087AF
.text:0040879E                 cmp     esi, 80070002h
.text:004087A4                 jz      short loc_4087AD
.text:004087A6                 mov     byte ptr [ebx+0CCh], 1
.text:004087AD
.text:004087AD loc_4087AD:                             ; CODE XREF: sub_4086C1+E3↑j
.text:004087AD                 xor     esi, esi
.text:004087AF
.text:004087AF loc_4087AF:                             ; CODE XREF: sub_4086C1+C6↑j
.text:004087AF                                         ; sub_4086C1+DB↑j
.text:004087AF                 mov     ebx, [ebp+var_1C]
.text:004087B2                 mov     edi, [ebp+bstrString]
.text:004087B5
.text:004087B5 loc_4087B5:                             ; CODE XREF: sub_4086C1+5C↑j
.text:004087B5                                         ; sub_4086C1+B0↑j
.text:004087B5                 test    ebx, ebx
.text:004087B7                 jz      short loc_4087C0
.text:004087B9                 push    ebx             ; bstrString
.text:004087BA                 call    ds:SysFreeString
.text:004087C0
.text:004087C0 loc_4087C0:                             ; CODE XREF: sub_4086C1+3E↑j
.text:004087C0                                         ; sub_4086C1+F6↑j
.text:004087C0                 test    edi, edi
.text:004087C2                 jz      short loc_4087CB
.text:004087C4                 push    edi             ; bstrString
.text:004087C5                 call    ds:SysFreeString
.text:004087CB
.text:004087CB loc_4087CB:                             ; CODE XREF: sub_4086C1+101↑j
.text:004087CB                 mov     eax, [ebp+var_14]
.text:004087CE                 test    eax, eax
.text:004087D0                 jz      short loc_4087D9
.text:004087D2                 push    eax             ; bstrString
.text:004087D3                 call    ds:SysFreeString
.text:004087D9
.text:004087D9 loc_4087D9:                             ; CODE XREF: sub_4086C1+10F↑j
.text:004087D9                 mov     eax, [ebp+var_10]
.text:004087DC                 test    eax, eax
.text:004087DE                 jz      short loc_4087E7
.text:004087E0                 push    eax             ; bstrString
.text:004087E1                 call    ds:SysFreeString
.text:004087E7
.text:004087E7 loc_4087E7:                             ; CODE XREF: sub_4086C1+11D↑j
.text:004087E7                 mov     eax, [ebp+var_C]
.text:004087EA                 test    eax, eax
.text:004087EC                 jz      short loc_4087F5
.text:004087EE                 push    eax             ; bstrString
.text:004087EF                 call    ds:SysFreeString
.text:004087F5
.text:004087F5 loc_4087F5:                             ; CODE XREF: sub_4086C1+12B↑j
.text:004087F5                 mov     eax, [ebp+var_8]
.text:004087F8                 test    eax, eax
.text:004087FA                 jz      short loc_408803
.text:004087FC                 push    eax             ; bstrString
.text:004087FD                 call    ds:SysFreeString
.text:00408803
.text:00408803 loc_408803:                             ; CODE XREF: sub_4086C1+139↑j
.text:00408803                 cmp     [ebp+var_34], 0
.text:00408807                 jz      short loc_408812
.text:00408809                 push    [ebp+var_34]    ; bstrString
.text:0040880C                 call    ds:SysFreeString
.text:00408812
.text:00408812 loc_408812:                             ; CODE XREF: sub_4086C1+146↑j
.text:00408812                 cmp     [ebp+var_2C], 0
.text:00408816                 jz      short loc_408821
.text:00408818                 push    [ebp+var_2C]    ; bstrString
.text:0040881B                 call    ds:SysFreeString
.text:00408821
.text:00408821 loc_408821:                             ; CODE XREF: sub_4086C1+155↑j
.text:00408821                 cmp     [ebp+var_24], 0
.text:00408825                 jz      short loc_408830
.text:00408827                 push    [ebp+var_24]    ; bstrString
.text:0040882A                 call    ds:SysFreeString
.text:00408830
.text:00408830 loc_408830:                             ; CODE XREF: sub_4086C1+164↑j
.text:00408830                 pop     edi
.text:00408831                 mov     eax, esi
.text:00408833                 pop     esi
.text:00408834                 pop     ebx
.text:00408835                 mov     esp, ebp
.text:00408837                 pop     ebp
.text:00408838                 retn
.text:00408838 sub_4086C1      endp
.text:00408838
.text:00408839
.text:00408839 ; =============== S U B R O U T I N E =======================================
.text:00408839
.text:00408839 ; Attributes: bp-based frame
.text:00408839
.text:00408839 ; int __stdcall sub_408839(int, int, LPCWSTR lpSrc)
.text:00408839 sub_408839      proc near               ; CODE XREF: sub_408E79+C2↓p
.text:00408839                                         ; sub_408E79+DA↓p ...
.text:00408839
.text:00408839 var_4           = dword ptr -4
.text:00408839 arg_0           = dword ptr  8
.text:00408839 arg_4           = dword ptr  0Ch
.text:00408839 lpSrc           = dword ptr  10h
.text:00408839
.text:00408839                 mov     edi, edi
.text:0040883B                 push    ebp
.text:0040883C                 mov     ebp, esp
.text:0040883E                 push    ecx
.text:0040883F                 and     [ebp+var_4], 0
.text:00408843                 push    esi
.text:00408844                 push    edi
.text:00408845                 push    800h            ; Size
.text:0040884A                 call    ds:malloc
.text:00408850                 mov     edi, eax
.text:00408852                 pop     ecx
.text:00408853                 test    edi, edi
.text:00408855                 jnz     short loc_408861
.text:00408857                 mov     esi, 8007000Eh
.text:0040885C                 jmp     loc_408909
.text:00408861 ; ---------------------------------------------------------------------------
.text:00408861
.text:00408861 loc_408861:                             ; CODE XREF: sub_408839+1C↑j
.text:00408861                 push    ecx             ; int
.text:00408862                 push    edi             ; lpDst
.text:00408863                 push    [ebp+lpSrc]     ; lpSrc
.text:00408866                 xor     eax, eax
.text:00408868                 mov     [edi], ax
.text:0040886B                 call    sub_409283
.text:00408870                 mov     esi, eax
.text:00408872                 test    esi, esi
.text:00408874                 js      loc_408901
.text:0040887A                 lea     eax, [ebp+var_4]
.text:0040887D                 mov     edx, 400h
.text:00408882                 push    eax
.text:00408883                 mov     ecx, edi
.text:00408885                 call    sub_40938A
.text:0040888A                 mov     esi, eax
.text:0040888C                 test    esi, esi
.text:0040888E                 jns     short loc_408897
.text:00408890                 xor     eax, eax
.text:00408892                 mov     [ebp+var_4], eax
.text:00408895                 jmp     short loc_40889A
.text:00408897 ; ---------------------------------------------------------------------------
.text:00408897
.text:00408897 loc_408897:                             ; CODE XREF: sub_408839+55↑j
.text:00408897                 mov     eax, [ebp+var_4]
.text:0040889A
.text:0040889A loc_40889A:                             ; CODE XREF: sub_408839+5C↑j
.text:0040889A                 test    esi, esi
.text:0040889C                 js      short loc_408901
.text:0040889E                 push    5Ch ; '\'
.text:004088A0                 pop     ecx
.text:004088A1                 cmp     cx, [edi+eax*2-2]
.text:004088A6                 jz      short loc_4088C2
.text:004088A8                 push    2Eh ; '.'
.text:004088AA                 pop     eax
.text:004088AB                 cmp     ax, [edi]
.text:004088AE                 jz      short loc_4088C2
.text:004088B0                 push    offset asc_402E5C ; "\\"
.text:004088B5                 mov     ecx, edi
.text:004088B7                 call    sub_408586
.text:004088BC                 mov     esi, eax
.text:004088BE                 test    esi, esi
.text:004088C0                 js      short loc_408901
.text:004088C2
.text:004088C2 loc_4088C2:                             ; CODE XREF: sub_408839+6D↑j
.text:004088C2                                         ; sub_408839+75↑j
.text:004088C2                 push    edi             ; psz
.text:004088C3                 call    ds:SysAllocString
.text:004088C9                 mov     ecx, [ebp+arg_0]
.text:004088CC                 mov     [ecx], eax
.text:004088CE                 test    eax, eax
.text:004088D0                 jnz     short loc_4088D9
.text:004088D2                 mov     esi, 8007000Eh
.text:004088D7                 jmp     short loc_408901
.text:004088D9 ; ---------------------------------------------------------------------------
.text:004088D9
.text:004088D9 loc_4088D9:                             ; CODE XREF: sub_408839+97↑j
.text:004088D9                 lea     eax, [ebp+var_4]
.text:004088DC                 mov     edx, 400h
.text:004088E1                 push    eax
.text:004088E2                 mov     ecx, edi
.text:004088E4                 call    sub_40938A
.text:004088E9                 mov     esi, eax
.text:004088EB                 test    esi, esi
.text:004088ED                 jns     short loc_4088F3
.text:004088EF                 xor     ecx, ecx
.text:004088F1                 jmp     short loc_4088F6
.text:004088F3 ; ---------------------------------------------------------------------------
.text:004088F3
.text:004088F3 loc_4088F3:                             ; CODE XREF: sub_408839+B4↑j
.text:004088F3                 mov     ecx, [ebp+var_4]
.text:004088F6
.text:004088F6 loc_4088F6:                             ; CODE XREF: sub_408839+B8↑j
.text:004088F6                 test    esi, esi
.text:004088F8                 js      short loc_408901
.text:004088FA                 mov     eax, [ebp+arg_4]
.text:004088FD                 xor     esi, esi
.text:004088FF                 mov     [eax], ecx
.text:00408901
.text:00408901 loc_408901:                             ; CODE XREF: sub_408839+3B↑j
.text:00408901                                         ; sub_408839+63↑j ...
.text:00408901                 push    edi             ; Block
.text:00408902                 call    ds:__imp_free
.text:00408908                 pop     ecx
.text:00408909
.text:00408909 loc_408909:                             ; CODE XREF: sub_408839+23↑j
.text:00408909                 pop     edi
.text:0040890A                 mov     eax, esi
.text:0040890C                 pop     esi
.text:0040890D                 mov     esp, ebp
.text:0040890F                 pop     ebp
.text:00408910                 retn    0Ch
.text:00408910 sub_408839      endp
.text:00408910
.text:00408913
.text:00408913 ; =============== S U B R O U T I N E =======================================
.text:00408913
.text:00408913 ; Attributes: bp-based frame
.text:00408913
.text:00408913 sub_408913      proc near               ; CODE XREF: sub_4086C1+BD↑p
.text:00408913                                         ; sub_4086C1+D2↑p
.text:00408913
.text:00408913 var_6C          = dword ptr -6Ch
.text:00408913 var_68          = dword ptr -68h
.text:00408913 var_64          = dword ptr -64h
.text:00408913 var_60          = dword ptr -60h
.text:00408913 pvarg           = VARIANTARG ptr -5Ch
.text:00408913 var_48          = dword ptr -48h
.text:00408913 var_44          = dword ptr -44h
.text:00408913 var_40          = byte ptr -40h
.text:00408913 var_3C          = byte ptr -3Ch
.text:00408913 var_38          = byte ptr -38h
.text:00408913 var_34          = byte ptr -34h
.text:00408913 var_30          = word ptr -30h
.text:00408913 var_2C          = byte ptr -2Ch
.text:00408913 var_28          = dword ptr -28h
.text:00408913 var_24          = dword ptr -24h
.text:00408913 ppv             = dword ptr -20h
.text:00408913 var_1C          = dword ptr -1Ch
.text:00408913 var_18          = dword ptr -18h
.text:00408913 var_4           = dword ptr -4
.text:00408913 arg_0           = dword ptr  8
.text:00408913 arg_4           = dword ptr  0Ch
.text:00408913
.text:00408913 ; FUNCTION CHUNK AT .text:00411135 SIZE 00000081 BYTES
.text:00408913
.text:00408913 ; __unwind { // loc_411191
.text:00408913                 push    64h
.text:00408915                 mov     eax, offset loc_411191
.text:0040891A                 call    __EH_prolog3_GS
.text:0040891F                 mov     ebx, ecx
.text:00408921                 xor     eax, eax
.text:00408923                 lea     ecx, [ebp+var_40]
.text:00408926                 mov     [ebp+var_24], eax
.text:00408929                 mov     [ebp+ppv], eax
.text:0040892C                 mov     [ebp+var_28], eax
.text:0040892F                 mov     [ebp+var_18], eax
.text:00408932                 mov     [ebp+var_1C], eax
.text:00408935                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040893B                 xor     esi, esi
.text:0040893D                 lea     ecx, [ebp+var_2C]
.text:00408940 ;   try {
.text:00408940                 mov     [ebp+var_4], esi
.text:00408943                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00408949                 lea     ecx, [ebp+var_3C]
.text:00408949 ;   } // starts at 408940
.text:0040894C ;   try {
.text:0040894C                 mov     byte ptr [ebp+var_4], 1
.text:00408950                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00408956                 lea     ecx, [ebp+var_38]
.text:00408956 ;   } // starts at 40894C
.text:00408959 ;   try {
.text:00408959                 mov     byte ptr [ebp+var_4], 2
.text:0040895D                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00408963                 lea     ecx, [ebp+var_34]
.text:00408963 ;   } // starts at 408959
.text:00408966 ;   try {
.text:00408966                 mov     byte ptr [ebp+var_4], 3
.text:0040896A                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00408970                 lea     eax, [ebp+pvarg]
.text:00408970 ;   } // starts at 408966
.text:00408973 ;   try {
.text:00408973                 mov     byte ptr [ebp+var_4], 4
.text:00408977                 push    eax             ; pvarg
.text:00408978                 call    ds:VariantInit
.text:0040897E                 lea     eax, [ebp+pvarg]
.text:00408981                 cmp     [ebp+arg_4], esi
.text:00408984                 jnz     short loc_40898E
.text:00408986                 push    eax
.text:00408987                 call    sub_408D34
.text:0040898C                 jmp     short loc_408997
.text:0040898E ; ---------------------------------------------------------------------------
.text:0040898E
.text:0040898E loc_40898E:                             ; CODE XREF: sub_408913+71↑j
.text:0040898E                 push    [ebp+arg_4]     ; int
.text:00408991                 push    eax             ; pvargDest
.text:00408992                 call    sub_408E79
.text:00408997
.text:00408997 loc_408997:                             ; CODE XREF: sub_408913+79↑j
.text:00408997                 mov     edi, eax
.text:00408999                 test    edi, edi
.text:0040899B                 js      loc_408C83
.text:004089A1                 lea     eax, [ebp+ppv]
.text:004089A4                 push    eax             ; ppv
.text:004089A5                 push    offset stru_40365C ; riid
.text:004089AA                 push    1               ; dwClsContext
.text:004089AC                 push    esi             ; pUnkOuter
.text:004089AD                 push    offset stru_40364C ; rclsid
.text:004089B2                 call    ds:CoCreateInstance
.text:004089B8                 mov     edi, eax
.text:004089BA                 test    edi, edi
.text:004089BC                 js      loc_408C83
.text:004089C2                 mov     eax, [ebp+ppv]
.text:004089C5                 push    esi
.text:004089C6                 push    eax
.text:004089C7                 mov     ecx, [eax]
.text:004089C9                 mov     esi, [ecx+0FCh]
.text:004089CF                 mov     ecx, esi
.text:004089D1                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:004089D7                 call    esi
.text:004089D9                 mov     edi, eax
.text:004089DB                 test    edi, edi
.text:004089DD                 js      loc_408C83
.text:004089E3                 mov     eax, [ebp+ppv]
.text:004089E6                 lea     edx, [ebp+var_30]
.text:004089E9                 push    edx
.text:004089EA                 sub     esp, 10h
.text:004089ED                 lea     esi, [ebp+pvarg]
.text:004089F0                 mov     edi, esp
.text:004089F2                 mov     ecx, [eax]
.text:004089F4                 push    eax
.text:004089F5                 movsd
.text:004089F6                 movsd
.text:004089F7                 movsd
.text:004089F8                 movsd
.text:004089F9                 mov     esi, [ecx+0E8h]
.text:004089FF                 mov     ecx, esi
.text:00408A01                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408A07                 call    esi
.text:00408A09                 mov     edi, eax
.text:00408A0B                 test    edi, edi
.text:00408A0D                 js      loc_408C83
.text:00408A13                 xor     eax, eax
.text:00408A15                 cmp     ax, [ebp+var_30]
.text:00408A19                 jz      loc_408C7E
.text:00408A1F                 mov     eax, [ebp+ppv]
.text:00408A22                 lea     ecx, [ebp+var_18]
.text:00408A25                 push    ecx
.text:00408A26                 mov     ecx, [ebp+arg_0]
.text:00408A29                 mov     esi, [eax]
.text:00408A2B                 push    dword ptr [ecx]
.text:00408A2D                 mov     esi, [esi+94h]
.text:00408A33                 mov     ecx, esi
.text:00408A35                 push    eax
.text:00408A36                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408A3C                 call    esi
.text:00408A3E                 test    eax, eax
.text:00408A40                 jnz     loc_408C7E
.text:00408A46                 mov     eax, [ebp+var_18]
.text:00408A49                 lea     edx, [ebp+var_28]
.text:00408A4C                 push    edx
.text:00408A4D                 push    eax
.text:00408A4E                 mov     ecx, [eax]
.text:00408A50                 mov     esi, [ecx+30h]
.text:00408A53                 mov     ecx, esi
.text:00408A55                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408A5B                 call    esi
.text:00408A5D                 mov     edi, eax
.text:00408A5F                 test    edi, edi
.text:00408A61                 js      loc_408C83
.text:00408A67                 mov     eax, [ebp+var_18]
.text:00408A6A                 push    eax
.text:00408A6B                 mov     ecx, [eax]
.text:00408A6D                 mov     esi, [ecx+8]
.text:00408A70                 mov     ecx, esi
.text:00408A72                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408A78                 call    esi
.text:00408A7A                 mov     eax, [ebp+var_28]
.text:00408A7D                 lea     edx, [ebp+var_24]
.text:00408A80                 and     [ebp+var_18], 0
.text:00408A84                 push    edx
.text:00408A85                 push    eax
.text:00408A86                 mov     ecx, [eax]
.text:00408A88                 mov     esi, [ecx+20h]
.text:00408A8B                 mov     ecx, esi
.text:00408A8D                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408A93                 call    esi
.text:00408A95                 mov     edi, eax
.text:00408A97                 test    edi, edi
.text:00408A99                 js      loc_408C83
.text:00408A9F                 mov     eax, [ebp+var_24]
.text:00408AA2                 test    eax, eax
.text:00408AA4                 jz      loc_408C7E
.text:00408AAA                 mov     ecx, 400h
.text:00408AAF                 cmp     eax, ecx
.text:00408AB1                 jbe     short loc_408AB8
.text:00408AB3                 mov     eax, ecx
.text:00408AB5                 mov     [ebp+var_24], eax
.text:00408AB8
.text:00408AB8 loc_408AB8:                             ; CODE XREF: sub_408913+19E↑j
.text:00408AB8                 and     [ebp+var_44], 0
.text:00408ABC                 test    eax, eax
.text:00408ABE                 jz      loc_408C58
.text:00408AC4
.text:00408AC4 loc_408AC4:                             ; CODE XREF: sub_408913+33F↓j
.text:00408AC4                 mov     eax, [ebp+var_28]
.text:00408AC7                 lea     edx, [ebp+var_18]
.text:00408ACA                 push    edx
.text:00408ACB                 push    eax
.text:00408ACC                 mov     ecx, [eax]
.text:00408ACE                 mov     esi, [ecx+24h]
.text:00408AD1                 mov     ecx, esi
.text:00408AD3                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408AD9                 call    esi
.text:00408ADB                 mov     edi, eax
.text:00408ADD                 test    edi, edi
.text:00408ADF                 js      loc_408C83
.text:00408AE5                 mov     eax, [ebp+var_18]
.text:00408AE8                 lea     edx, [ebp+var_1C]
.text:00408AEB                 push    edx
.text:00408AEC                 push    eax
.text:00408AED                 mov     ecx, [eax]
.text:00408AEF                 mov     esi, [ecx+44h]
.text:00408AF2                 mov     ecx, esi
.text:00408AF4                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408AFA                 call    esi
.text:00408AFC                 mov     edi, eax
.text:00408AFE                 test    edi, edi
.text:00408B00                 js      loc_408C83
.text:00408B06                 mov     edi, [ebp+arg_4]
.text:00408B09                 lea     eax, [ebp+var_34]
.text:00408B0C                 push    eax
.text:00408B0D                 lea     eax, [ebp+var_38]
.text:00408B10                 mov     ecx, ebx
.text:00408B12                 push    eax
.text:00408B13                 lea     eax, [ebp+var_3C]
.text:00408B16                 push    eax
.text:00408B17                 lea     eax, [ebp+var_2C]
.text:00408B1A                 push    eax
.text:00408B1B                 lea     eax, [ebp+var_40]
.text:00408B1E                 push    eax
.text:00408B1F                 push    [ebp+var_1C]
.text:00408B22                 push    edi
.text:00408B23                 push    [ebp+arg_0]
.text:00408B26                 call    ?SetToolItem@CPageTool@@AAEJPAU_MSCONFIG_TOOL_TAG@@PAU_MSCONFIG_VALID_PATH@@PAUIXMLDOMNamedNodeMap@@PAVCString@@3333@Z ; CPageTool::SetToolItem(_MSCONFIG_TOOL_TAG *,_MSCONFIG_VALID_PATH *,IXMLDOMNamedNodeMap *,CString *,CString *,CString *,CString *,CString *)
.text:00408B2B                 mov     edx, [ebp+var_1C]
.text:00408B2E                 mov     [ebp+var_48], eax
.text:00408B31                 test    edx, edx
.text:00408B33                 jz      short loc_408B49
.text:00408B35                 mov     ecx, [edx]
.text:00408B37                 push    edx
.text:00408B38                 mov     esi, [ecx+8]
.text:00408B3B                 mov     ecx, esi
.text:00408B3D                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408B43                 call    esi
.text:00408B45                 and     [ebp+var_1C], 0
.text:00408B49
.text:00408B49 loc_408B49:                             ; CODE XREF: sub_408913+220↑j
.text:00408B49                 mov     ecx, [ebp+var_18]
.text:00408B4C                 test    ecx, ecx
.text:00408B4E                 jz      short loc_408B64
.text:00408B50                 mov     eax, [ecx]
.text:00408B52                 push    ecx
.text:00408B53                 mov     esi, [eax+8]
.text:00408B56                 mov     ecx, esi
.text:00408B58                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408B5E                 call    esi
.text:00408B60                 and     [ebp+var_18], 0
.text:00408B64
.text:00408B64 loc_408B64:                             ; CODE XREF: sub_408913+23B↑j
.text:00408B64                 cmp     [ebp+var_48], 0
.text:00408B68                 jge     short loc_408B7E
.text:00408B6A                 test    edi, edi
.text:00408B6C                 jz      loc_408C48
.text:00408B72                 mov     byte ptr [ebx+0CCh], 1
.text:00408B79                 jmp     loc_408C48
.text:00408B7E ; ---------------------------------------------------------------------------
.text:00408B7E
.text:00408B7E loc_408B7E:                             ; CODE XREF: sub_408913+255↑j
.text:00408B7E                 lea     ecx, [ebp+var_2C]
.text:00408B81                 call    sub_40C709
.text:00408B86                 test    eax, eax
.text:00408B88                 jz      loc_408C48
.text:00408B8E                 push    1Ch
.text:00408B90                 call    ds:__imp_??2@YAPAXI@Z ; operator new(uint)
.text:00408B96                 mov     esi, eax
.text:00408B98                 pop     ecx
.text:00408B99                 mov     [ebp+var_60], esi
.text:00408B99 ;   } // starts at 408973
.text:00408B9C ;   try {
.text:00408B9C                 mov     byte ptr [ebp+var_4], 5
.text:00408BA0                 test    esi, esi
.text:00408BA2                 jz      short loc_408C18
.text:00408BA4                 xor     ecx, ecx
.text:00408BA6                 lea     eax, [ebp+var_34]
.text:00408BA9                 test    edi, edi
.text:00408BAB                 setz    cl
.text:00408BAE                 push    ecx
.text:00408BAF                 push    ecx
.text:00408BB0                 mov     ecx, esp
.text:00408BB2                 mov     [ebp+var_48], esp
.text:00408BB5                 push    eax
.text:00408BB6                 call    ds:??0CString@@QAE@ABV0@@Z ; CString::CString(CString const &)
.text:00408BBC                 push    ecx
.text:00408BBC ;   } // starts at 408B9C
.text:00408BBD ;   try {
.text:00408BBD                 mov     byte ptr [ebp+var_4], 6
.text:00408BC1                 lea     eax, [ebp+var_38]
.text:00408BC4                 mov     ecx, esp
.text:00408BC6                 mov     [ebp+var_64], esp
.text:00408BC9                 push    eax
.text:00408BCA                 call    ds:??0CString@@QAE@ABV0@@Z ; CString::CString(CString const &)
.text:00408BD0                 push    ecx
.text:00408BD0 ;   } // starts at 408BBD
.text:00408BD1 ;   try {
.text:00408BD1                 mov     byte ptr [ebp+var_4], 7
.text:00408BD5                 lea     eax, [ebp+var_3C]
.text:00408BD8                 mov     ecx, esp
.text:00408BDA                 mov     [ebp+var_68], esp
.text:00408BDD                 push    eax
.text:00408BDE                 call    ds:??0CString@@QAE@ABV0@@Z ; CString::CString(CString const &)
.text:00408BE4                 push    ecx
.text:00408BE4 ;   } // starts at 408BD1
.text:00408BE5 ;   try {
.text:00408BE5                 mov     byte ptr [ebp+var_4], 8
.text:00408BE9                 lea     eax, [ebp+var_2C]
.text:00408BEC                 mov     ecx, esp
.text:00408BEE                 mov     [ebp+var_6C], esp
.text:00408BF1                 push    eax
.text:00408BF2                 call    ds:??0CString@@QAE@ABV0@@Z ; CString::CString(CString const &)
.text:00408BF8                 push    ecx
.text:00408BF9                 lea     eax, [ebp+var_40]
.text:00408BF9 ;   } // starts at 408BE5
.text:00408BFC ;   try {
.text:00408BFC                 mov     byte ptr [ebp+var_4], 9
.text:00408C00                 mov     ecx, esp
.text:00408C02                 push    eax
.text:00408C03                 call    ds:??0CString@@QAE@ABV0@@Z ; CString::CString(CString const &)
.text:00408C09                 mov     ecx, esi
.text:00408C09 ;   } // starts at 408BFC
.text:00408C0B ;   try {
.text:00408C0B                 mov     byte ptr [ebp+var_4], 5
.text:00408C0F                 call    sub_4080F8
.text:00408C14                 mov     edi, eax
.text:00408C16                 jmp     short loc_408C1A
.text:00408C18 ; ---------------------------------------------------------------------------
.text:00408C18
.text:00408C18 loc_408C18:                             ; CODE XREF: sub_408913+28F↑j
.text:00408C18                 xor     edi, edi
.text:00408C18 ;   } // starts at 408C0B
.text:00408C1A
.text:00408C1A loc_408C1A:                             ; CODE XREF: sub_408913+303↑j
.text:00408C1A ;   try {
.text:00408C1A                 mov     byte ptr [ebp+var_4], 4
.text:00408C1E                 test    edi, edi
.text:00408C20                 jz      short loc_408C48
.text:00408C22                 push    edi
.text:00408C23                 mov     ecx, ebx
.text:00408C25                 call    sub_407996
.text:00408C2A                 test    eax, eax
.text:00408C2C                 js      short loc_408C36
.text:00408C2E                 inc     dword ptr [ebx+0B4h]
.text:00408C34                 jmp     short loc_408C48
.text:00408C36 ; ---------------------------------------------------------------------------
.text:00408C36
.text:00408C36 loc_408C36:                             ; CODE XREF: sub_408913+319↑j
.text:00408C36                 mov     eax, [edi]
.text:00408C38                 push    1
.text:00408C3A                 mov     esi, [eax]
.text:00408C3C                 mov     ecx, esi
.text:00408C3E                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408C44                 mov     ecx, edi
.text:00408C46                 call    esi
.text:00408C48
.text:00408C48 loc_408C48:                             ; CODE XREF: sub_408913+259↑j
.text:00408C48                                         ; sub_408913+266↑j ...
.text:00408C48                 mov     eax, [ebp+var_44]
.text:00408C4B                 inc     eax
.text:00408C4C                 mov     [ebp+var_44], eax
.text:00408C4F                 cmp     eax, [ebp+var_24]
.text:00408C52                 jb      loc_408AC4
.text:00408C58
.text:00408C58 loc_408C58:                             ; CODE XREF: sub_408913+1AB↑j
.text:00408C58                 cmp     dword ptr [ebx+0B4h], 0
.text:00408C5F                 jle     short loc_408C7E
.text:00408C61                 mov     edx, 12Dh
.text:00408C66                 mov     ecx, ebx
.text:00408C68                 call    sub_40DAA3
.text:00408C6D                 test    eax, eax
.text:00408C6F                 jz      short loc_408C7A
.text:00408C71                 push    5               ; nCmdShow
.text:00408C73                 push    eax             ; hWnd
.text:00408C74                 call    ds:ShowWindow
.text:00408C7A
.text:00408C7A loc_408C7A:                             ; CODE XREF: sub_408913+35C↑j
.text:00408C7A                 xor     edi, edi
.text:00408C7C                 jmp     short loc_408C83
.text:00408C7E ; ---------------------------------------------------------------------------
.text:00408C7E
.text:00408C7E loc_408C7E:                             ; CODE XREF: sub_408913+106↑j
.text:00408C7E                                         ; sub_408913+12D↑j ...
.text:00408C7E                 mov     edi, 80004005h
.text:00408C83
.text:00408C83 loc_408C83:                             ; CODE XREF: sub_408913+88↑j
.text:00408C83                                         ; sub_408913+A9↑j ...
.text:00408C83                 lea     eax, [ebp+pvarg]
.text:00408C86                 push    eax             ; pvarg
.text:00408C87                 call    ds:VariantClear
.text:00408C8D                 mov     ecx, [ebp+var_1C]
.text:00408C90                 test    ecx, ecx
.text:00408C92                 jz      short loc_408CA4
.text:00408C94                 mov     eax, [ecx]
.text:00408C96                 push    ecx
.text:00408C97                 mov     esi, [eax+8]
.text:00408C9A                 mov     ecx, esi
.text:00408C9C                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408CA2                 call    esi
.text:00408CA4
.text:00408CA4 loc_408CA4:                             ; CODE XREF: sub_408913+37F↑j
.text:00408CA4                 mov     ecx, [ebp+var_18]
.text:00408CA7                 test    ecx, ecx
.text:00408CA9                 jz      short loc_408CBB
.text:00408CAB                 mov     eax, [ecx]
.text:00408CAD                 push    ecx
.text:00408CAE                 mov     esi, [eax+8]
.text:00408CB1                 mov     ecx, esi
.text:00408CB3                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408CB9                 call    esi
.text:00408CBB
.text:00408CBB loc_408CBB:                             ; CODE XREF: sub_408913+396↑j
.text:00408CBB                 mov     ecx, [ebp+var_28]
.text:00408CBE                 test    ecx, ecx
.text:00408CC0                 jz      short loc_408CD2
.text:00408CC2                 mov     eax, [ecx]
.text:00408CC4                 push    ecx
.text:00408CC5                 mov     esi, [eax+8]
.text:00408CC8                 mov     ecx, esi
.text:00408CCA                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408CD0                 call    esi
.text:00408CD2
.text:00408CD2 loc_408CD2:                             ; CODE XREF: sub_408913+3AD↑j
.text:00408CD2                 mov     ecx, [ebp+ppv]
.text:00408CD5                 test    ecx, ecx
.text:00408CD7                 jz      short loc_408CE9
.text:00408CD9                 mov     eax, [ecx]
.text:00408CDB                 push    ecx
.text:00408CDC                 mov     esi, [eax+8]
.text:00408CDF                 mov     ecx, esi
.text:00408CE1                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408CE7                 call    esi
.text:00408CE9
.text:00408CE9 loc_408CE9:                             ; CODE XREF: sub_408913+3C4↑j
.text:00408CE9                 lea     ecx, [ebp+var_34]
.text:00408CE9 ;   } // starts at 408C1A
.text:00408CEC ;   try {
.text:00408CEC                 mov     byte ptr [ebp+var_4], 3
.text:00408CF0                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00408CF6                 lea     ecx, [ebp+var_38]
.text:00408CF6 ;   } // starts at 408CEC
.text:00408CF9 ;   try {
.text:00408CF9                 mov     byte ptr [ebp+var_4], 2
.text:00408CFD                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00408D03                 lea     ecx, [ebp+var_3C]
.text:00408D03 ;   } // starts at 408CF9
.text:00408D06 ;   try {
.text:00408D06                 mov     byte ptr [ebp+var_4], 1
.text:00408D0A                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00408D10                 lea     ecx, [ebp+var_2C]
.text:00408D10 ;   } // starts at 408D06
.text:00408D13 ;   try {
.text:00408D13                 mov     byte ptr [ebp+var_4], 0
.text:00408D17                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00408D17 ;   } // starts at 408D13
.text:00408D1D                 or      [ebp+var_4], 0FFFFFFFFh
.text:00408D21                 lea     ecx, [ebp+var_40]
.text:00408D24                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00408D2A                 mov     eax, edi
.text:00408D2C                 call    __EH_epilog3_GS
.text:00408D31                 retn    8
.text:00408D31 ; } // starts at 408913
.text:00408D31 sub_408913      endp
.text:00408D31
.text:00408D34
.text:00408D34 ; =============== S U B R O U T I N E =======================================
.text:00408D34
.text:00408D34 ; Attributes: bp-based frame
.text:00408D34
.text:00408D34 sub_408D34      proc near               ; CODE XREF: sub_408913+74↑p
.text:00408D34
.text:00408D34 hMem            = dword ptr -10h
.text:00408D34 Src             = dword ptr -0Ch
.text:00408D34 ppstm           = dword ptr -8
.text:00408D34 var_4           = dword ptr -4
.text:00408D34 arg_0           = dword ptr  8
.text:00408D34
.text:00408D34                 mov     edi, edi
.text:00408D36                 push    ebp
.text:00408D37                 mov     ebp, esp
.text:00408D39                 sub     esp, 10h
.text:00408D3C                 mov     eax, ___security_cookie
.text:00408D41                 xor     eax, ebp
.text:00408D43                 mov     [ebp+var_4], eax
.text:00408D46                 push    ebx
.text:00408D47                 push    esi
.text:00408D48                 push    edi
.text:00408D49                 xor     ebx, ebx
.text:00408D4B                 push    ebx             ; lpModuleName
.text:00408D4C                 mov     [ebp+ppstm], ebx
.text:00408D4F                 call    ds:GetModuleHandleW
.text:00408D55                 mov     esi, eax
.text:00408D57                 test    esi, esi
.text:00408D59                 jnz     short loc_408D79
.text:00408D5B
.text:00408D5B loc_408D5B:                             ; CODE XREF: sub_408D34+57↓j
.text:00408D5B                                         ; sub_408D34+63↓j ...
.text:00408D5B                 call    ds:GetLastError
.text:00408D61                 mov     edi, eax
.text:00408D63                 test    edi, edi
.text:00408D65                 jle     loc_408E40
.text:00408D6B                 movzx   edi, di
.text:00408D6E                 or      edi, 80070000h
.text:00408D74                 jmp     loc_408E3E
.text:00408D79 ; ---------------------------------------------------------------------------
.text:00408D79
.text:00408D79 loc_408D79:                             ; CODE XREF: sub_408D34+25↑j
.text:00408D79                 push    17h             ; lpType
.text:00408D7B                 push    offset Name     ; "MSCFGTL.XML"
.text:00408D80                 push    esi             ; hModule
.text:00408D81                 call    ds:FindResourceW
.text:00408D87                 mov     edi, eax
.text:00408D89                 test    edi, edi
.text:00408D8B                 jz      short loc_408D5B
.text:00408D8D                 push    edi             ; hResInfo
.text:00408D8E                 push    esi             ; hModule
.text:00408D8F                 call    ds:LoadResource
.text:00408D95                 test    eax, eax
.text:00408D97                 jz      short loc_408D5B
.text:00408D99                 push    eax             ; hResData
.text:00408D9A                 call    ds:LockResource
.text:00408DA0                 mov     [ebp+Src], eax
.text:00408DA3                 test    eax, eax
.text:00408DA5                 jnz     short loc_408DB1
.text:00408DA7                 mov     edi, 80004005h
.text:00408DAC                 jmp     loc_408E4D
.text:00408DB1 ; ---------------------------------------------------------------------------
.text:00408DB1
.text:00408DB1 loc_408DB1:                             ; CODE XREF: sub_408D34+71↑j
.text:00408DB1                 push    edi             ; hResInfo
.text:00408DB2                 push    esi             ; hModule
.text:00408DB3                 call    ds:SizeofResource
.text:00408DB9                 mov     esi, eax
.text:00408DBB                 test    esi, esi
.text:00408DBD                 jz      short loc_408D5B
.text:00408DBF                 push    esi             ; dwBytes
.text:00408DC0                 push    2               ; uFlags
.text:00408DC2                 call    ds:GlobalAlloc
.text:00408DC8                 mov     ebx, eax
.text:00408DCA                 test    ebx, ebx
.text:00408DCC                 jnz     short loc_408DD5
.text:00408DCE                 mov     edi, 8007000Eh
.text:00408DD3                 jmp     short loc_408E4D
.text:00408DD5 ; ---------------------------------------------------------------------------
.text:00408DD5
.text:00408DD5 loc_408DD5:                             ; CODE XREF: sub_408D34+98↑j
.text:00408DD5                 push    ebx             ; hMem
.text:00408DD6                 call    ds:GlobalLock
.text:00408DDC                 mov     [ebp+hMem], eax
.text:00408DDF                 test    eax, eax
.text:00408DE1                 jnz     short loc_408DEA
.text:00408DE3                 mov     edi, 8007000Eh
.text:00408DE8                 jmp     short loc_408E42
.text:00408DEA ; ---------------------------------------------------------------------------
.text:00408DEA
.text:00408DEA loc_408DEA:                             ; CODE XREF: sub_408D34+AD↑j
.text:00408DEA                 push    esi             ; Size
.text:00408DEB                 push    [ebp+Src]       ; Src
.text:00408DEE                 push    eax             ; void *
.text:00408DEF                 call    memcpy
.text:00408DF4                 add     esp, 0Ch
.text:00408DF7                 lea     eax, [ebp+ppstm]
.text:00408DFA                 push    eax             ; ppstm
.text:00408DFB                 push    1               ; fDeleteOnRelease
.text:00408DFD                 push    ebx             ; hGlobal
.text:00408DFE                 call    ds:CreateStreamOnHGlobal
.text:00408E04                 mov     edi, eax
.text:00408E06                 test    edi, edi
.text:00408E08                 js      short loc_408E35
.text:00408E0A                 mov     ecx, [ebp+ppstm]
.text:00408E0D                 mov     eax, [ebp+arg_0]
.text:00408E10                 add     eax, 8
.text:00408E13                 push    eax
.text:00408E14                 mov     esi, [ecx]
.text:00408E16                 push    offset dword_40366C
.text:00408E1B                 push    ecx
.text:00408E1C                 mov     ecx, [esi]
.text:00408E1E                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408E24                 call    dword ptr [esi]
.text:00408E26                 mov     edi, eax
.text:00408E28                 test    edi, edi
.text:00408E2A                 js      short loc_408E35
.text:00408E2C                 mov     eax, [ebp+arg_0]
.text:00408E2F                 push    0Dh
.text:00408E31                 pop     ecx
.text:00408E32                 mov     [eax], cx
.text:00408E35
.text:00408E35 loc_408E35:                             ; CODE XREF: sub_408D34+D4↑j
.text:00408E35                                         ; sub_408D34+F6↑j
.text:00408E35                 push    [ebp+hMem]      ; hMem
.text:00408E38                 call    ds:GlobalUnlock
.text:00408E3E
.text:00408E3E loc_408E3E:                             ; CODE XREF: sub_408D34+40↑j
.text:00408E3E                 test    edi, edi
.text:00408E40
.text:00408E40 loc_408E40:                             ; CODE XREF: sub_408D34+31↑j
.text:00408E40                 jns     short loc_408E4D
.text:00408E42
.text:00408E42 loc_408E42:                             ; CODE XREF: sub_408D34+B4↑j
.text:00408E42                 test    ebx, ebx
.text:00408E44                 jz      short loc_408E4D
.text:00408E46                 push    ebx             ; hMem
.text:00408E47                 call    ds:GlobalFree
.text:00408E4D
.text:00408E4D loc_408E4D:                             ; CODE XREF: sub_408D34+78↑j
.text:00408E4D                                         ; sub_408D34+9F↑j ...
.text:00408E4D                 mov     ecx, [ebp+ppstm]
.text:00408E50                 test    ecx, ecx
.text:00408E52                 jz      short loc_408E64
.text:00408E54                 mov     eax, [ecx]
.text:00408E56                 push    ecx
.text:00408E57                 mov     esi, [eax+8]
.text:00408E5A                 mov     ecx, esi
.text:00408E5C                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408E62                 call    esi
.text:00408E64
.text:00408E64 loc_408E64:                             ; CODE XREF: sub_408D34+11E↑j
.text:00408E64                 mov     ecx, [ebp+var_4]
.text:00408E67                 mov     eax, edi
.text:00408E69                 pop     edi
.text:00408E6A                 pop     esi
.text:00408E6B                 xor     ecx, ebp        ; StackCookie
.text:00408E6D                 pop     ebx
.text:00408E6E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00408E73                 mov     esp, ebp
.text:00408E75                 pop     ebp
.text:00408E76                 retn    4
.text:00408E76 sub_408D34      endp
.text:00408E76
.text:00408E79
.text:00408E79 ; =============== S U B R O U T I N E =======================================
.text:00408E79
.text:00408E79 ; Attributes: bp-based frame
.text:00408E79
.text:00408E79 ; int __stdcall sub_408E79(VARIANTARG *pvargDest, int)
.text:00408E79 sub_408E79      proc near               ; CODE XREF: sub_408913+7F↑p
.text:00408E79
.text:00408E79 var_25C         = dword ptr -25Ch
.text:00408E79 FindFileData    = _WIN32_FIND_DATAW ptr -258h
.text:00408E79 var_4           = dword ptr -4
.text:00408E79 pvargDest       = dword ptr  8
.text:00408E79 arg_4           = dword ptr  0Ch
.text:00408E79
.text:00408E79                 mov     edi, edi
.text:00408E7B                 push    ebp
.text:00408E7C                 mov     ebp, esp
.text:00408E7E                 sub     esp, 25Ch
.text:00408E84                 mov     eax, ___security_cookie
.text:00408E89                 xor     eax, ebp
.text:00408E8B                 mov     [ebp+var_4], eax
.text:00408E8E                 mov     eax, [ebp+pvargDest]
.text:00408E91                 push    ebx
.text:00408E92                 push    esi
.text:00408E93                 push    edi
.text:00408E94                 mov     edi, [ebp+arg_4]
.text:00408E97                 mov     [ebp+var_25C], eax
.text:00408E9D                 test    edi, edi
.text:00408E9F                 jz      loc_408FA3
.text:00408EA5                 test    eax, eax
.text:00408EA7                 jz      loc_408FA3
.text:00408EAD                 push    8
.text:00408EAF                 pop     ecx
.text:00408EB0                 push    ecx             ; vt
.text:00408EB1                 push    0               ; wFlags
.text:00408EB3                 push    eax             ; pvarSrc
.text:00408EB4                 push    eax             ; pvargDest
.text:00408EB5                 call    ds:VariantChangeType
.text:00408EBB                 mov     esi, eax
.text:00408EBD                 test    esi, esi
.text:00408EBF                 js      loc_408FA8
.text:00408EC5                 push    800h            ; Size
.text:00408ECA                 call    ds:malloc
.text:00408ED0                 mov     ebx, eax
.text:00408ED2                 pop     ecx
.text:00408ED3                 test    ebx, ebx
.text:00408ED5                 jnz     short loc_408EE1
.text:00408ED7                 mov     esi, 8007000Eh
.text:00408EDC                 jmp     loc_408FA8
.text:00408EE1 ; ---------------------------------------------------------------------------
.text:00408EE1
.text:00408EE1 loc_408EE1:                             ; CODE XREF: sub_408E79+5C↑j
.text:00408EE1                 push    ecx             ; int
.text:00408EE2                 push    ebx             ; lpDst
.text:00408EE3                 xor     eax, eax
.text:00408EE5                 push    offset aWindirSystem32 ; "%windir%\\system32\\MSCFGTLC.XML"
.text:00408EEA                 mov     [ebx], ax
.text:00408EED                 call    sub_409283
.text:00408EF2                 mov     esi, eax
.text:00408EF4                 test    esi, esi
.text:00408EF6                 js      loc_408F99
.text:00408EFC                 lea     eax, [ebp+FindFileData]
.text:00408F02                 push    eax             ; lpFindFileData
.text:00408F03                 push    ebx             ; lpFileName
.text:00408F04                 call    ds:FindFirstFileW
.text:00408F0A                 cmp     eax, 0FFFFFFFFh
.text:00408F0D                 jnz     short loc_408F2A
.text:00408F0F                 call    ds:GetLastError
.text:00408F15                 mov     esi, eax
.text:00408F17                 test    esi, esi
.text:00408F19                 jle     short loc_408F26
.text:00408F1B                 movzx   esi, si
.text:00408F1E                 or      esi, 80070000h
.text:00408F24                 test    esi, esi
.text:00408F26
.text:00408F26 loc_408F26:                             ; CODE XREF: sub_408E79+A0↑j
.text:00408F26                 js      short loc_408F99
.text:00408F28                 jmp     short loc_408F31
.text:00408F2A ; ---------------------------------------------------------------------------
.text:00408F2A
.text:00408F2A loc_408F2A:                             ; CODE XREF: sub_408E79+94↑j
.text:00408F2A                 push    eax             ; hFindFile
.text:00408F2B                 call    ds:FindClose
.text:00408F31
.text:00408F31 loc_408F31:                             ; CODE XREF: sub_408E79+AF↑j
.text:00408F31                 push    offset aWindirSystem32_0 ; "%windir%\\SYSTEM32"
.text:00408F36                 lea     eax, [edi+4]
.text:00408F39                 push    eax             ; int
.text:00408F3A                 push    edi             ; int
.text:00408F3B                 call    sub_408839
.text:00408F40                 mov     esi, eax
.text:00408F42                 test    esi, esi
.text:00408F44                 js      short loc_408F99
.text:00408F46                 push    offset aProgramfiles ; "%ProgramFiles%"
.text:00408F4B                 lea     eax, [edi+0Ch]
.text:00408F4E                 push    eax             ; int
.text:00408F4F                 lea     eax, [edi+8]
.text:00408F52                 push    eax             ; int
.text:00408F53                 call    sub_408839
.text:00408F58                 mov     esi, eax
.text:00408F5A                 test    esi, esi
.text:00408F5C                 js      short loc_408F99
.text:00408F5E                 push    offset asc_4031FC ; ".."
.text:00408F63                 lea     eax, [edi+14h]
.text:00408F66                 push    eax             ; int
.text:00408F67                 lea     eax, [edi+10h]
.text:00408F6A                 push    eax             ; int
.text:00408F6B                 call    sub_408839
.text:00408F70                 mov     esi, eax
.text:00408F72                 test    esi, esi
.text:00408F74                 js      short loc_408F99
.text:00408F76                 push    ebx             ; psz
.text:00408F77                 call    ds:SysAllocString
.text:00408F7D                 mov     ecx, eax
.text:00408F7F                 test    ecx, ecx
.text:00408F81                 jnz     short loc_408F8A
.text:00408F83                 mov     esi, 8007000Eh
.text:00408F88                 jmp     short loc_408F99
.text:00408F8A ; ---------------------------------------------------------------------------
.text:00408F8A
.text:00408F8A loc_408F8A:                             ; CODE XREF: sub_408E79+108↑j
.text:00408F8A                 mov     eax, [ebp+var_25C]
.text:00408F90                 push    8
.text:00408F92                 mov     [eax+8], ecx
.text:00408F95                 pop     ecx
.text:00408F96                 mov     [eax], cx
.text:00408F99
.text:00408F99 loc_408F99:                             ; CODE XREF: sub_408E79+7D↑j
.text:00408F99                                         ; sub_408E79:loc_408F26↑j ...
.text:00408F99                 push    ebx             ; Block
.text:00408F9A                 call    ds:__imp_free
.text:00408FA0                 pop     ecx
.text:00408FA1                 jmp     short loc_408FA8
.text:00408FA3 ; ---------------------------------------------------------------------------
.text:00408FA3
.text:00408FA3 loc_408FA3:                             ; CODE XREF: sub_408E79+26↑j
.text:00408FA3                                         ; sub_408E79+2E↑j
.text:00408FA3                 mov     esi, 80070057h
.text:00408FA8
.text:00408FA8 loc_408FA8:                             ; CODE XREF: sub_408E79+46↑j
.text:00408FA8                                         ; sub_408E79+63↑j ...
.text:00408FA8                 mov     ecx, [ebp+var_4]
.text:00408FAB                 mov     eax, esi
.text:00408FAD                 pop     edi
.text:00408FAE                 pop     esi
.text:00408FAF                 xor     ecx, ebp        ; StackCookie
.text:00408FB1                 pop     ebx
.text:00408FB2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00408FB7                 mov     esp, ebp
.text:00408FB9                 pop     ebp
.text:00408FBA                 retn    8
.text:00408FBA sub_408E79      endp
.text:00408FBA
.text:00408FBA ; ---------------------------------------------------------------------------
.text:00408FBD                 align 10h
.text:00408FC0
.text:00408FC0 ; =============== S U B R O U T I N E =======================================
.text:00408FC0
.text:00408FC0 ; Attributes: bp-based frame info_from_lumina
.text:00408FC0
.text:00408FC0 ; int __thiscall CPageTool::SetToolItem(CPageTool *__hidden this, struct _MSCONFIG_TOOL_TAG *, struct _MSCONFIG_VALID_PATH *, struct IXMLDOMNamedNodeMap *, struct CString *, struct CString *, struct CString *, struct CString *, struct CString *)
.text:00408FC0 ?SetToolItem@CPageTool@@AAEJPAU_MSCONFIG_TOOL_TAG@@PAU_MSCONFIG_VALID_PATH@@PAUIXMLDOMNamedNodeMap@@PAVCString@@3333@Z proc near
.text:00408FC0                                         ; CODE XREF: sub_408913+213↑p
.text:00408FC0
.text:00408FC0 var_1C          = dword ptr -1Ch
.text:00408FC0 var_18          = byte ptr -18h
.text:00408FC0 var_14          = dword ptr -14h
.text:00408FC0 Block           = dword ptr -10h
.text:00408FC0 var_4           = dword ptr -4
.text:00408FC0 arg_0           = dword ptr  8
.text:00408FC0 arg_4           = dword ptr  0Ch
.text:00408FC0 arg_8           = dword ptr  10h
.text:00408FC0 arg_C           = dword ptr  14h
.text:00408FC0 arg_10          = dword ptr  18h
.text:00408FC0 arg_14          = dword ptr  1Ch
.text:00408FC0 arg_18          = dword ptr  20h
.text:00408FC0 arg_1C          = dword ptr  24h
.text:00408FC0
.text:00408FC0 ; FUNCTION CHUNK AT .text:004111B6 SIZE 00000024 BYTES
.text:00408FC0
.text:00408FC0 ; __unwind { // loc_4111BF
.text:00408FC0                 push    14h
.text:00408FC2                 mov     eax, offset loc_4111BF
.text:00408FC7                 call    __EH_prolog3
.text:00408FCC                 mov     [ebp+var_1C], ecx
.text:00408FCF                 mov     esi, [ebp+arg_C]
.text:00408FD2                 xor     edi, edi
.text:00408FD4                 and     [ebp+var_14], 0
.text:00408FD8                 mov     ecx, esi
.text:00408FDA                 call    ds:?Empty@CString@@QAEXXZ ; CString::Empty(void)
.text:00408FE0                 mov     ecx, [ebp+arg_10]
.text:00408FE3                 call    ds:?Empty@CString@@QAEXXZ ; CString::Empty(void)
.text:00408FE9                 mov     ecx, [ebp+arg_14]
.text:00408FEC                 call    ds:?Empty@CString@@QAEXXZ ; CString::Empty(void)
.text:00408FF2                 mov     ecx, [ebp+arg_18]
.text:00408FF5                 call    ds:?Empty@CString@@QAEXXZ ; CString::Empty(void)
.text:00408FFB                 mov     ecx, [ebp+arg_1C]
.text:00408FFE                 call    ds:?Empty@CString@@QAEXXZ ; CString::Empty(void)
.text:00409004                 mov     eax, [ebp+arg_0]
.text:00409007                 test    eax, eax
.text:00409009                 jz      loc_4091B5
.text:0040900F                 mov     ebx, [ebp+arg_8]
.text:00409012                 test    ebx, ebx
.text:00409014                 jz      loc_4091B5
.text:0040901A                 push    esi
.text:0040901B                 push    ebx
.text:0040901C                 push    dword ptr [eax+4]
.text:0040901F                 call    sub_4091C4
.text:00409024                 mov     esi, eax
.text:00409026                 test    esi, esi
.text:00409028                 js      loc_4091BA
.text:0040902E                 mov     eax, [ebp+arg_C]
.text:00409031                 mov     eax, [eax]
.text:00409033                 cmp     [eax-8], edi
.text:00409036                 jnz     short loc_409042
.text:00409038
.text:00409038 loc_409038:                             ; CODE XREF: CPageTool::SetToolItem(_MSCONFIG_TOOL_TAG *,_MSCONFIG_VALID_PATH *,IXMLDOMNamedNodeMap *,CString *,CString *,CString *,CString *,CString *)+A3↓j
.text:00409038                 mov     esi, 80004005h
.text:0040903D                 jmp     loc_4091BA
.text:00409042 ; ---------------------------------------------------------------------------
.text:00409042
.text:00409042 loc_409042:                             ; CODE XREF: CPageTool::SetToolItem(_MSCONFIG_TOOL_TAG *,_MSCONFIG_VALID_PATH *,IXMLDOMNamedNodeMap *,CString *,CString *,CString *,CString *,CString *)+76↑j
.text:00409042                 push    [ebp+arg_10]
.text:00409045                 mov     eax, [ebp+arg_0]
.text:00409048                 push    ebx
.text:00409049                 push    dword ptr [eax+8]
.text:0040904C                 call    sub_4091C4
.text:00409051                 mov     esi, eax
.text:00409053                 test    esi, esi
.text:00409055                 js      loc_4091BA
.text:0040905B                 mov     esi, [ebp+arg_10]
.text:0040905E                 mov     eax, [esi]
.text:00409060                 cmp     [eax-8], edi
.text:00409063                 jz      short loc_409038
.text:00409065                 push    800h            ; Size
.text:0040906A                 call    ds:malloc
.text:00409070                 mov     [ebp+Block], eax
.text:00409073                 pop     ecx
.text:00409074                 test    eax, eax
.text:00409076                 jnz     short loc_409082
.text:00409078                 mov     esi, 8007000Eh
.text:0040907D                 jmp     loc_4091BA
.text:00409082 ; ---------------------------------------------------------------------------
.text:00409082
.text:00409082 loc_409082:                             ; CODE XREF: CPageTool::SetToolItem(_MSCONFIG_TOOL_TAG *,_MSCONFIG_VALID_PATH *,IXMLDOMNamedNodeMap *,CString *,CString *,CString *,CString *,CString *)+B6↑j
.text:00409082                 xor     ecx, ecx
.text:00409084                 push    ecx             ; int
.text:00409085                 push    eax             ; lpDst
.text:00409086                 mov     [eax], cx
.text:00409089                 push    dword ptr [esi] ; lpSrc
.text:0040908B                 call    sub_409283
.text:00409090                 mov     esi, eax
.text:00409092                 test    esi, esi
.text:00409094                 js      loc_40918E
.text:0040909A                 mov     esi, [ebp+arg_10]
.text:0040909D                 mov     ecx, esi
.text:0040909F                 call    ds:?Empty@CString@@QAEXXZ ; CString::Empty(void)
.text:004090A5                 push    [ebp+Block]
.text:004090A8                 lea     ecx, [ebp+var_18]
.text:004090AB                 call    ds:??0CString@@QAE@PBG@Z ; CString::CString(ushort const *)
.text:004090B1 ;   try {
.text:004090B1                 and     [ebp+var_4], 0
.text:004090B5                 mov     ecx, esi
.text:004090B7                 push    eax
.text:004090B8                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:004090B8 ;   } // starts at 4090B1
.text:004090BE                 or      [ebp+var_4], 0FFFFFFFFh
.text:004090C2                 lea     ecx, [ebp+var_18]
.text:004090C5                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004090CB                 cmp     [ebp+arg_4], 0
.text:004090CF                 jz      short loc_4090FB
.text:004090D1                 push    [ebp+arg_4]
.text:004090D4                 push    ecx
.text:004090D5                 mov     ecx, esp
.text:004090D7                 push    esi
.text:004090D8                 call    ds:??0CString@@QAE@ABV0@@Z ; CString::CString(CString const &)
.text:004090DE                 call    sub_4092C4
.text:004090E3                 test    al, al
.text:004090E5                 jnz     short loc_4090FB
.text:004090E7                 mov     eax, [ebp+var_1C]
.text:004090EA                 mov     esi, 80004005h
.text:004090EF                 mov     byte ptr [eax+0CCh], 1
.text:004090F6                 jmp     loc_40918E
.text:004090FB ; ---------------------------------------------------------------------------
.text:004090FB
.text:004090FB loc_4090FB:                             ; CODE XREF: CPageTool::SetToolItem(_MSCONFIG_TOOL_TAG *,_MSCONFIG_VALID_PATH *,IXMLDOMNamedNodeMap *,CString *,CString *,CString *,CString *,CString *)+10F↑j
.text:004090FB                                         ; CPageTool::SetToolItem(_MSCONFIG_TOOL_TAG *,_MSCONFIG_VALID_PATH *,IXMLDOMNamedNodeMap *,CString *,CString *,CString *,CString *,CString *)+125↑j
.text:004090FB                 mov     eax, [ebp+arg_0]
.text:004090FE                 mov     esi, [ebp+arg_14]
.text:00409101                 push    esi
.text:00409102                 push    ebx
.text:00409103                 push    dword ptr [eax+0Ch]
.text:00409106                 call    sub_4091C4
.text:0040910B                 test    eax, eax
.text:0040910D                 js      short loc_40913D
.text:0040910F                 push    800h            ; Size
.text:00409114                 call    ds:malloc
.text:0040911A                 mov     [ebp+var_14], eax
.text:0040911D                 pop     ecx
.text:0040911E                 test    eax, eax
.text:00409120                 jnz     short loc_409129
.text:00409122
.text:00409122 loc_409122:                             ; CODE XREF: CPageTool::SetToolItem(_MSCONFIG_TOOL_TAG *,_MSCONFIG_VALID_PATH *,IXMLDOMNamedNodeMap *,CString *,CString *,CString *,CString *,CString *)+1A1↓j
.text:00409122                 mov     esi, 8007000Eh
.text:00409127                 jmp     short loc_40918E
.text:00409129 ; ---------------------------------------------------------------------------
.text:00409129
.text:00409129 loc_409129:                             ; CODE XREF: CPageTool::SetToolItem(_MSCONFIG_TOOL_TAG *,_MSCONFIG_VALID_PATH *,IXMLDOMNamedNodeMap *,CString *,CString *,CString *,CString *,CString *)+160↑j
.text:00409129                 xor     ecx, ecx
.text:0040912B                 push    ecx             ; int
.text:0040912C                 push    eax             ; lpDst
.text:0040912D                 mov     [eax], cx
.text:00409130                 push    dword ptr [esi] ; lpSrc
.text:00409132                 call    sub_409283
.text:00409137                 mov     esi, eax
.text:00409139                 test    esi, esi
.text:0040913B                 js      short loc_40918E
.text:0040913D
.text:0040913D loc_40913D:                             ; CODE XREF: CPageTool::SetToolItem(_MSCONFIG_TOOL_TAG *,_MSCONFIG_VALID_PATH *,IXMLDOMNamedNodeMap *,CString *,CString *,CString *,CString *,CString *)+14D↑j
.text:0040913D                 mov     eax, [ebp+arg_0]
.text:00409140                 mov     esi, [ebp+arg_18]
.text:00409143                 push    esi
.text:00409144                 push    ebx
.text:00409145                 push    dword ptr [eax+10h]
.text:00409148                 call    sub_4091C4
.text:0040914D                 test    eax, eax
.text:0040914F                 js      short loc_409177
.text:00409151                 push    800h            ; Size
.text:00409156                 call    ds:malloc
.text:0040915C                 mov     edi, eax
.text:0040915E                 pop     ecx
.text:0040915F                 test    edi, edi
.text:00409161                 jz      short loc_409122
.text:00409163                 push    ecx             ; int
.text:00409164                 xor     eax, eax
.text:00409166                 push    edi             ; lpDst
.text:00409167                 mov     [edi], ax
.text:0040916A                 push    dword ptr [esi] ; lpSrc
.text:0040916C                 call    sub_409283
.text:00409171                 mov     esi, eax
.text:00409173                 test    esi, esi
.text:00409175                 js      short loc_40918E
.text:00409177
.text:00409177 loc_409177:                             ; CODE XREF: CPageTool::SetToolItem(_MSCONFIG_TOOL_TAG *,_MSCONFIG_VALID_PATH *,IXMLDOMNamedNodeMap *,CString *,CString *,CString *,CString *,CString *)+18F↑j
.text:00409177                 push    [ebp+arg_1C]
.text:0040917A                 mov     eax, [ebp+arg_0]
.text:0040917D                 push    ebx
.text:0040917E                 push    dword ptr [eax+14h]
.text:00409181                 call    sub_4091C4
.text:00409186                 mov     esi, eax
.text:00409188                 test    esi, esi
.text:0040918A                 jns     short loc_40918E
.text:0040918C                 xor     esi, esi
.text:0040918E
.text:0040918E loc_40918E:                             ; CODE XREF: CPageTool::SetToolItem(_MSCONFIG_TOOL_TAG *,_MSCONFIG_VALID_PATH *,IXMLDOMNamedNodeMap *,CString *,CString *,CString *,CString *,CString *)+D4↑j
.text:0040918E                                         ; CPageTool::SetToolItem(_MSCONFIG_TOOL_TAG *,_MSCONFIG_VALID_PATH *,IXMLDOMNamedNodeMap *,CString *,CString *,CString *,CString *,CString *)+136↑j ...
.text:0040918E                 push    [ebp+Block]     ; Block
.text:00409191                 call    ds:__imp_free
.text:00409197                 mov     eax, [ebp+var_14]
.text:0040919A                 pop     ecx
.text:0040919B                 test    eax, eax
.text:0040919D                 jz      short loc_4091A7
.text:0040919F                 push    eax             ; Block
.text:004091A0                 call    ds:__imp_free
.text:004091A6                 pop     ecx
.text:004091A7
.text:004091A7 loc_4091A7:                             ; CODE XREF: CPageTool::SetToolItem(_MSCONFIG_TOOL_TAG *,_MSCONFIG_VALID_PATH *,IXMLDOMNamedNodeMap *,CString *,CString *,CString *,CString *,CString *)+1DD↑j
.text:004091A7                 test    edi, edi
.text:004091A9                 jz      short loc_4091BA
.text:004091AB                 push    edi             ; Block
.text:004091AC                 call    ds:__imp_free
.text:004091B2                 pop     ecx
.text:004091B3                 jmp     short loc_4091BA
.text:004091B5 ; ---------------------------------------------------------------------------
.text:004091B5
.text:004091B5 loc_4091B5:                             ; CODE XREF: CPageTool::SetToolItem(_MSCONFIG_TOOL_TAG *,_MSCONFIG_VALID_PATH *,IXMLDOMNamedNodeMap *,CString *,CString *,CString *,CString *,CString *)+49↑j
.text:004091B5                                         ; CPageTool::SetToolItem(_MSCONFIG_TOOL_TAG *,_MSCONFIG_VALID_PATH *,IXMLDOMNamedNodeMap *,CString *,CString *,CString *,CString *,CString *)+54↑j
.text:004091B5                 mov     esi, 80070057h
.text:004091BA
.text:004091BA loc_4091BA:                             ; CODE XREF: CPageTool::SetToolItem(_MSCONFIG_TOOL_TAG *,_MSCONFIG_VALID_PATH *,IXMLDOMNamedNodeMap *,CString *,CString *,CString *,CString *,CString *)+68↑j
.text:004091BA                                         ; CPageTool::SetToolItem(_MSCONFIG_TOOL_TAG *,_MSCONFIG_VALID_PATH *,IXMLDOMNamedNodeMap *,CString *,CString *,CString *,CString *,CString *)+7D↑j ...
.text:004091BA                 mov     eax, esi
.text:004091BC                 call    __EH_epilog3
.text:004091C1                 retn    20h ; ' '
.text:004091C1 ; } // starts at 408FC0
.text:004091C1 ?SetToolItem@CPageTool@@AAEJPAU_MSCONFIG_TOOL_TAG@@PAU_MSCONFIG_VALID_PATH@@PAUIXMLDOMNamedNodeMap@@PAVCString@@3333@Z endp
.text:004091C1
.text:004091C4
.text:004091C4 ; =============== S U B R O U T I N E =======================================
.text:004091C4
.text:004091C4 ; Attributes: bp-based frame
.text:004091C4
.text:004091C4 sub_4091C4      proc near               ; CODE XREF: CPageTool::SetToolItem(_MSCONFIG_TOOL_TAG *,_MSCONFIG_VALID_PATH *,IXMLDOMNamedNodeMap *,CString *,CString *,CString *,CString *,CString *)+5F↑p
.text:004091C4                                         ; CPageTool::SetToolItem(_MSCONFIG_TOOL_TAG *,_MSCONFIG_VALID_PATH *,IXMLDOMNamedNodeMap *,CString *,CString *,CString *,CString *,CString *)+8C↑p ...
.text:004091C4
.text:004091C4 pvarg           = VARIANTARG ptr -2Ch
.text:004091C4 var_1C          = byte ptr -1Ch
.text:004091C4 var_18          = dword ptr -18h
.text:004091C4 var_4           = dword ptr -4
.text:004091C4 arg_0           = dword ptr  8
.text:004091C4 arg_4           = dword ptr  0Ch
.text:004091C4 arg_8           = dword ptr  10h
.text:004091C4
.text:004091C4 ; FUNCTION CHUNK AT .text:004111DA SIZE 0000002E BYTES
.text:004091C4
.text:004091C4 ; __unwind { // loc_4111E3
.text:004091C4                 push    20h
.text:004091C6                 mov     eax, offset loc_4111E3
.text:004091CB                 call    __EH_prolog3_GS
.text:004091D0                 and     [ebp+var_18], 0
.text:004091D4                 lea     eax, [ebp+pvarg]
.text:004091D7                 push    eax             ; pvarg
.text:004091D8                 call    ds:VariantInit
.text:004091DE                 cmp     [ebp+arg_0], 0
.text:004091E2                 jnz     short loc_4091EB
.text:004091E4                 mov     edi, 80070057h
.text:004091E9                 jmp     short loc_409258
.text:004091EB ; ---------------------------------------------------------------------------
.text:004091EB
.text:004091EB loc_4091EB:                             ; CODE XREF: sub_4091C4+1E↑j
.text:004091EB                 mov     eax, [ebp+arg_4]
.text:004091EE                 lea     ecx, [ebp+var_18]
.text:004091F1                 push    ecx
.text:004091F2                 push    [ebp+arg_0]
.text:004091F5                 mov     esi, [eax]
.text:004091F7                 push    eax
.text:004091F8                 mov     ecx, [esi+1Ch]
.text:004091FB                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409201                 call    dword ptr [esi+1Ch]
.text:00409204                 mov     edi, eax
.text:00409206                 test    edi, edi
.text:00409208                 jz      short loc_409211
.text:0040920A
.text:0040920A loc_40920A:                             ; CODE XREF: sub_4091C4+6C↓j
.text:0040920A                 mov     edi, 80004005h
.text:0040920F                 jmp     short loc_409258
.text:00409211 ; ---------------------------------------------------------------------------
.text:00409211
.text:00409211 loc_409211:                             ; CODE XREF: sub_4091C4+44↑j
.text:00409211                 mov     ecx, [ebp+var_18]
.text:00409214                 test    ecx, ecx
.text:00409216                 jz      short loc_409258
.text:00409218                 mov     eax, [ecx]
.text:0040921A                 lea     edx, [ebp+pvarg]
.text:0040921D                 push    edx
.text:0040921E                 push    ecx
.text:0040921F                 mov     esi, [eax+20h]
.text:00409222                 mov     ecx, esi
.text:00409224                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040922A                 call    esi
.text:0040922C                 mov     edi, eax
.text:0040922E                 test    edi, edi
.text:00409230                 jnz     short loc_40920A
.text:00409232                 push    dword ptr [ebp+pvarg.anonymous_0+8]
.text:00409235                 lea     ecx, [ebp+var_1C]
.text:00409238                 call    ds:??0CString@@QAE@PBG@Z ; CString::CString(ushort const *)
.text:0040923E                 mov     ecx, [ebp+arg_8]
.text:00409241 ;   try {
.text:00409241                 and     [ebp+var_4], edi
.text:00409244                 push    eax
.text:00409245                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:00409245 ;   } // starts at 409241
.text:0040924B                 or      [ebp+var_4], 0FFFFFFFFh
.text:0040924F                 lea     ecx, [ebp+var_1C]
.text:00409252                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00409258
.text:00409258 loc_409258:                             ; CODE XREF: sub_4091C4+25↑j
.text:00409258                                         ; sub_4091C4+4B↑j ...
.text:00409258                 lea     eax, [ebp+pvarg]
.text:0040925B                 push    eax             ; pvarg
.text:0040925C                 call    ds:VariantClear
.text:00409262                 mov     ecx, [ebp+var_18]
.text:00409265                 test    ecx, ecx
.text:00409267                 jz      short loc_409279
.text:00409269                 mov     eax, [ecx]
.text:0040926B                 push    ecx
.text:0040926C                 mov     esi, [eax+8]
.text:0040926F                 mov     ecx, esi
.text:00409271                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409277                 call    esi
.text:00409279
.text:00409279 loc_409279:                             ; CODE XREF: sub_4091C4+A3↑j
.text:00409279                 mov     eax, edi
.text:0040927B                 call    __EH_epilog3_GS
.text:00409280                 retn    0Ch
.text:00409280 ; } // starts at 4091C4
.text:00409280 sub_4091C4      endp
.text:00409280
.text:00409283
.text:00409283 ; =============== S U B R O U T I N E =======================================
.text:00409283
.text:00409283 ; Attributes: bp-based frame
.text:00409283
.text:00409283 ; int __stdcall sub_409283(LPCWSTR lpSrc, LPWSTR lpDst, int)
.text:00409283 sub_409283      proc near               ; CODE XREF: sub_408839+32↑p
.text:00409283                                         ; sub_408E79+74↑p ...
.text:00409283
.text:00409283 lpSrc           = dword ptr  8
.text:00409283 lpDst           = dword ptr  0Ch
.text:00409283
.text:00409283                 mov     edi, edi
.text:00409285                 push    ebp
.text:00409286                 mov     ebp, esp
.text:00409288                 push    esi
.text:00409289                 push    edi
.text:0040928A                 push    800h            ; Size
.text:0040928F                 xor     esi, esi
.text:00409291                 push    esi             ; Val
.text:00409292                 push    [ebp+lpDst]     ; void *
.text:00409295                 call    memset
.text:0040929A                 add     esp, 0Ch
.text:0040929D                 mov     edi, 400h
.text:004092A2                 push    edi             ; nSize
.text:004092A3                 push    [ebp+lpDst]     ; lpDst
.text:004092A6                 push    [ebp+lpSrc]     ; lpSrc
.text:004092A9                 call    ds:ExpandEnvironmentStringsW
.text:004092AF                 test    eax, eax
.text:004092B1                 jz      short loc_4092B7
.text:004092B3                 cmp     eax, edi
.text:004092B5                 jb      short loc_4092BC
.text:004092B7
.text:004092B7 loc_4092B7:                             ; CODE XREF: sub_409283+2E↑j
.text:004092B7                 mov     esi, 80004005h
.text:004092BC
.text:004092BC loc_4092BC:                             ; CODE XREF: sub_409283+32↑j
.text:004092BC                 pop     edi
.text:004092BD                 mov     eax, esi
.text:004092BF                 pop     esi
.text:004092C0                 pop     ebp
.text:004092C1                 retn    0Ch
.text:004092C1 sub_409283      endp
.text:004092C1
.text:004092C4
.text:004092C4 ; =============== S U B R O U T I N E =======================================
.text:004092C4
.text:004092C4 ; Attributes: bp-based frame
.text:004092C4
.text:004092C4 sub_4092C4      proc near               ; CODE XREF: CPageTool::SetToolItem(_MSCONFIG_TOOL_TAG *,_MSCONFIG_VALID_PATH *,IXMLDOMNamedNodeMap *,CString *,CString *,CString *,CString *,CString *)+11E↑p
.text:004092C4
.text:004092C4 var_10          = dword ptr -10h
.text:004092C4 var_4           = dword ptr -4
.text:004092C4 arg_0           = byte ptr  8
.text:004092C4 arg_4           = dword ptr  0Ch
.text:004092C4
.text:004092C4 ; FUNCTION CHUNK AT .text:00411208 SIZE 0000002D BYTES
.text:004092C4
.text:004092C4 ; __unwind { // loc_41121A
.text:004092C4                 push    4
.text:004092C6                 mov     eax, offset loc_41121A
.text:004092CB                 call    __EH_prolog3
.text:004092D0 ;   try {
.text:004092D0                 and     [ebp+var_4], 0
.text:004092D4                 lea     ecx, [ebp+var_10]
.text:004092D7                 xor     bl, bl
.text:004092D9                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:004092DF                 lea     ecx, [ebp+arg_0]
.text:004092DF ;   } // starts at 4092D0
.text:004092E2 ;   try {
.text:004092E2                 mov     byte ptr [ebp+var_4], 1
.text:004092E6                 call    ds:?MakeLower@CString@@QAEXXZ ; CString::MakeLower(void)
.text:004092EC                 mov     esi, [ebp+arg_4]
.text:004092EF                 lea     ecx, [ebp+var_10]
.text:004092F2                 push    dword ptr [esi+10h]
.text:004092F5                 call    ds:??4CString@@QAEABV0@PBG@Z ; CString::operator=(ushort const *)
.text:004092FB                 lea     ecx, [ebp+var_10]
.text:004092FE                 call    ds:?MakeLower@CString@@QAEXXZ ; CString::MakeLower(void)
.text:00409304                 push    0
.text:00409306                 push    [ebp+var_10]
.text:00409309                 lea     ecx, [ebp+arg_0]
.text:0040930C                 call    ds:?Find@CString@@QBEHPBGH@Z ; CString::Find(ushort const *,int)
.text:00409312                 cmp     eax, 0FFFFFFFFh
.text:00409315                 jnz     short loc_409366
.text:00409317                 push    dword ptr [esi]
.text:00409319                 lea     ecx, [ebp+var_10]
.text:0040931C                 call    ds:??4CString@@QAEABV0@PBG@Z ; CString::operator=(ushort const *)
.text:00409322                 lea     ecx, [ebp+var_10]
.text:00409325                 call    ds:?MakeLower@CString@@QAEXXZ ; CString::MakeLower(void)
.text:0040932B                 push    0
.text:0040932D                 push    [ebp+var_10]
.text:00409330                 lea     ecx, [ebp+arg_0]
.text:00409333                 call    ds:?Find@CString@@QBEHPBGH@Z ; CString::Find(ushort const *,int)
.text:00409339                 test    eax, eax
.text:0040933B                 jz      short loc_409364
.text:0040933D                 push    dword ptr [esi+8]
.text:00409340                 lea     ecx, [ebp+var_10]
.text:00409343                 call    ds:??4CString@@QAEABV0@PBG@Z ; CString::operator=(ushort const *)
.text:00409349                 lea     ecx, [ebp+var_10]
.text:0040934C                 call    ds:?MakeLower@CString@@QAEXXZ ; CString::MakeLower(void)
.text:00409352                 push    0
.text:00409354                 push    [ebp+var_10]
.text:00409357                 lea     ecx, [ebp+arg_0]
.text:0040935A                 call    ds:?Find@CString@@QBEHPBGH@Z ; CString::Find(ushort const *,int)
.text:00409360                 test    eax, eax
.text:00409362                 jnz     short loc_409366
.text:00409364
.text:00409364 loc_409364:                             ; CODE XREF: sub_4092C4+77↑j
.text:00409364                 mov     bl, 1
.text:00409366
.text:00409366 loc_409366:                             ; CODE XREF: sub_4092C4+51↑j
.text:00409366                                         ; sub_4092C4+9E↑j
.text:00409366                 lea     ecx, [ebp+var_10]
.text:00409366 ;   } // starts at 4092E2
.text:00409369 ;   try {
.text:00409369                 mov     byte ptr [ebp+var_4], 0
.text:0040936D                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040936D ;   } // starts at 409369
.text:00409373                 or      [ebp+var_4], 0FFFFFFFFh
.text:00409377                 lea     ecx, [ebp+arg_0]
.text:0040937A                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00409380                 mov     al, bl
.text:00409382                 call    __EH_epilog3
.text:00409387                 retn    8
.text:00409387 ; } // starts at 4092C4
.text:00409387 sub_4092C4      endp
.text:00409387
.text:0040938A
.text:0040938A ; =============== S U B R O U T I N E =======================================
.text:0040938A
.text:0040938A ; Attributes: bp-based frame
.text:0040938A
.text:0040938A sub_40938A      proc near               ; CODE XREF: sub_408839+4C↑p
.text:0040938A                                         ; sub_408839+AB↑p ...
.text:0040938A
.text:0040938A arg_0           = dword ptr  8
.text:0040938A
.text:0040938A                 mov     edi, edi
.text:0040938C                 push    ebp
.text:0040938D                 mov     ebp, esp
.text:0040938F                 push    ebx
.text:00409390                 push    esi
.text:00409391                 xor     ebx, ebx
.text:00409393                 push    edi
.text:00409394                 mov     esi, ebx
.text:00409396                 mov     edi, edx
.text:00409398
.text:00409398 loc_409398:                             ; CODE XREF: sub_40938A+19↓j
.text:00409398                 cmp     [ecx], bx
.text:0040939B                 jz      short loc_4093A5
.text:0040939D                 add     ecx, 2
.text:004093A0                 sub     edx, 1
.text:004093A3                 jnz     short loc_409398
.text:004093A5
.text:004093A5 loc_4093A5:                             ; CODE XREF: sub_40938A+11↑j
.text:004093A5                 test    edx, edx
.text:004093A7                 jnz     short loc_4093AE
.text:004093A9                 mov     esi, 80070057h
.text:004093AE
.text:004093AE loc_4093AE:                             ; CODE XREF: sub_40938A+1D↑j
.text:004093AE                 mov     eax, [ebp+arg_0]
.text:004093B1                 test    eax, eax
.text:004093B3                 jz      short loc_4093C1
.text:004093B5                 test    esi, esi
.text:004093B7                 js      short loc_4093BF
.text:004093B9                 sub     edi, edx
.text:004093BB                 mov     [eax], edi
.text:004093BD                 jmp     short loc_4093C1
.text:004093BF ; ---------------------------------------------------------------------------
.text:004093BF
.text:004093BF loc_4093BF:                             ; CODE XREF: sub_40938A+2D↑j
.text:004093BF                 mov     [eax], ebx
.text:004093C1
.text:004093C1 loc_4093C1:                             ; CODE XREF: sub_40938A+29↑j
.text:004093C1                                         ; sub_40938A+33↑j
.text:004093C1                 pop     edi
.text:004093C2                 mov     eax, esi
.text:004093C4                 pop     esi
.text:004093C5                 pop     ebx
.text:004093C6                 pop     ebp
.text:004093C7                 retn    4
.text:004093C7 sub_40938A      endp
.text:004093C7
.text:004093CA
.text:004093CA ; =============== S U B R O U T I N E =======================================
.text:004093CA
.text:004093CA ; Attributes: bp-based frame
.text:004093CA
.text:004093CA sub_4093CA      proc near               ; CODE XREF: sub_40C2F0+1F↓p
.text:004093CA
.text:004093CA SystemInfo      = _SYSTEM_INFO ptr -88h
.text:004093CA TotalMemoryInKilobytes= qword ptr -64h
.text:004093CA var_5C          = qword ptr -5Ch
.text:004093CA lParam          = dword ptr -54h
.text:004093CA Buffer          = _MEMORYSTATUSEX ptr -50h
.text:004093CA var_4           = dword ptr -4
.text:004093CA arg_4           = dword ptr  0Ch
.text:004093CA
.text:004093CA ; FUNCTION CHUNK AT .text:00411235 SIZE 00000031 BYTES
.text:004093CA
.text:004093CA ; __unwind { // loc_41123E
.text:004093CA                 push    7Ch
.text:004093CC                 mov     eax, offset loc_41123E
.text:004093D1                 call    __EH_prolog3_GS
.text:004093D6                 mov     ebx, ecx
.text:004093D8                 push    9
.text:004093DA                 pop     ecx
.text:004093DB                 xor     eax, eax
.text:004093DD                 lea     edi, [ebp+SystemInfo]
.text:004093E3                 rep stosd
.text:004093E5                 lea     eax, [ebp+SystemInfo]
.text:004093EB                 push    eax             ; lpSystemInfo
.text:004093EC                 call    ds:GetSystemInfo
.text:004093F2                 lea     ecx, [ebp+lParam]
.text:004093F5                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:004093FB                 xor     esi, esi
.text:004093FD                 xor     edi, edi
.text:004093FF                 inc     esi
.text:00409400 ;   try {
.text:00409400                 mov     [ebp+var_4], edi
.text:00409403                 cmp     [ebp+SystemInfo.dwNumberOfProcessors], esi
.text:00409406                 jb      short loc_40944B
.text:00409408
.text:00409408 loc_409408:                             ; CODE XREF: sub_4093CA+7F↓j
.text:00409408                 push    esi
.text:00409409                 lea     eax, [ebp+lParam]
.text:0040940C                 push    offset Format   ; "%d"
.text:00409411                 push    eax
.text:00409412                 call    ds:?Format@CString@@QAAXPBGZZ ; CString::Format(ushort const *,...)
.text:00409418                 add     esp, 0Ch
.text:0040941B                 push    11Bh            ; nIDDlgItem
.text:00409420                 push    dword ptr [ebx+4] ; hDlg
.text:00409423                 call    ds:GetDlgItem
.text:00409429                 mov     ecx, eax
.text:0040942B                 test    ecx, ecx
.text:0040942D                 jz      short loc_409445
.text:0040942F                 mov     eax, [ebp+lParam]
.text:00409432                 cmp     [eax-8], edi
.text:00409435                 jz      short loc_409445
.text:00409437                 push    eax             ; lParam
.text:00409438                 push    edi             ; wParam
.text:00409439                 push    143h            ; Msg
.text:0040943E                 push    ecx             ; hWnd
.text:0040943F                 call    ds:SendMessageW
.text:00409445
.text:00409445 loc_409445:                             ; CODE XREF: sub_4093CA+63↑j
.text:00409445                                         ; sub_4093CA+6B↑j
.text:00409445                 inc     esi
.text:00409446                 cmp     esi, [ebp+SystemInfo.dwNumberOfProcessors]
.text:00409449                 jbe     short loc_409408
.text:0040944B
.text:0040944B loc_40944B:                             ; CODE XREF: sub_4093CA+3C↑j
.text:0040944B                 push    11Ch            ; nIDDlgItem
.text:00409450                 push    dword ptr [ebx+4] ; hDlg
.text:00409453                 call    ds:GetDlgItem
.text:00409459                 mov     esi, eax
.text:0040945B                 test    esi, esi
.text:0040945D                 jz      short loc_4094CB
.text:0040945F                 push    offset aCom1    ; "COM1:"
.text:00409464                 push    edi             ; wParam
.text:00409465                 push    143h            ; Msg
.text:0040946A                 push    esi             ; hWnd
.text:0040946B                 call    ds:SendMessageW
.text:00409471                 push    offset aCom2    ; "COM2:"
.text:00409476                 push    edi             ; wParam
.text:00409477                 push    143h            ; Msg
.text:0040947C                 push    esi             ; hWnd
.text:0040947D                 call    ds:SendMessageW
.text:00409483                 push    offset aCom3    ; "COM3:"
.text:00409488                 push    edi             ; wParam
.text:00409489                 push    143h            ; Msg
.text:0040948E                 push    esi             ; hWnd
.text:0040948F                 call    ds:SendMessageW
.text:00409495                 push    offset aCom4    ; "COM4:"
.text:0040949A                 push    edi             ; wParam
.text:0040949B                 push    143h            ; Msg
.text:004094A0                 push    esi             ; hWnd
.text:004094A1                 call    ds:SendMessageW
.text:004094A7                 push    offset a1394    ; "1394"
.text:004094AC                 push    edi             ; wParam
.text:004094AD                 push    143h            ; Msg
.text:004094B2                 push    esi             ; hWnd
.text:004094B3                 call    ds:SendMessageW
.text:004094B9                 push    offset aUsb     ; "USB"
.text:004094BE                 push    edi             ; wParam
.text:004094BF                 push    143h            ; Msg
.text:004094C4                 push    esi             ; hWnd
.text:004094C5                 call    ds:SendMessageW
.text:004094CB
.text:004094CB loc_4094CB:                             ; CODE XREF: sub_4093CA+93↑j
.text:004094CB                 push    120h            ; nIDDlgItem
.text:004094D0                 push    dword ptr [ebx+4] ; hDlg
.text:004094D3                 call    ds:GetDlgItem
.text:004094D9                 mov     esi, eax
.text:004094DB                 test    esi, esi
.text:004094DD                 jz      short loc_409539
.text:004094DF                 push    offset a9600    ; "9600"
.text:004094E4                 push    edi             ; wParam
.text:004094E5                 push    143h            ; Msg
.text:004094EA                 push    esi             ; hWnd
.text:004094EB                 call    ds:SendMessageW
.text:004094F1                 push    offset a19200   ; "19200"
.text:004094F6                 push    edi             ; wParam
.text:004094F7                 push    143h            ; Msg
.text:004094FC                 push    esi             ; hWnd
.text:004094FD                 call    ds:SendMessageW
.text:00409503                 push    offset a38400   ; "38400"
.text:00409508                 push    edi             ; wParam
.text:00409509                 push    143h            ; Msg
.text:0040950E                 push    esi             ; hWnd
.text:0040950F                 call    ds:SendMessageW
.text:00409515                 push    offset a57600   ; "57600"
.text:0040951A                 push    edi             ; wParam
.text:0040951B                 push    143h            ; Msg
.text:00409520                 push    esi             ; hWnd
.text:00409521                 call    ds:SendMessageW
.text:00409527                 push    offset a115200  ; "115200"
.text:0040952C                 push    edi             ; wParam
.text:0040952D                 push    143h            ; Msg
.text:00409532                 push    esi             ; hWnd
.text:00409533                 call    ds:SendMessageW
.text:00409539
.text:00409539 loc_409539:                             ; CODE XREF: sub_4093CA+113↑j
.text:00409539                 lea     eax, [ebp+TotalMemoryInKilobytes]
.text:0040953C                 mov     dword ptr [ebp+TotalMemoryInKilobytes], edi
.text:0040953F                 push    eax             ; TotalMemoryInKilobytes
.text:00409540                 mov     dword ptr [ebp+TotalMemoryInKilobytes+4], edi
.text:00409543                 mov     [ebp+Buffer.dwLength], 40h ; '@'
.text:0040954A                 call    ds:GetPhysicallyInstalledSystemMemory
.text:00409550                 test    eax, eax
.text:00409552                 jz      short loc_409563
.text:00409554                 mov     ecx, dword ptr [ebp+TotalMemoryInKilobytes]
.text:00409557                 mov     eax, dword ptr [ebp+TotalMemoryInKilobytes+4]
.text:0040955A                 shrd    ecx, eax, 0Ah
.text:0040955E                 shr     eax, 0Ah
.text:00409561                 jmp     short loc_4095B3
.text:00409563 ; ---------------------------------------------------------------------------
.text:00409563
.text:00409563 loc_409563:                             ; CODE XREF: sub_4093CA+188↑j
.text:00409563                 lea     eax, [ebp+Buffer]
.text:00409566                 push    eax             ; lpBuffer
.text:00409567                 call    ds:GlobalMemoryStatusEx
.text:0040956D                 test    eax, eax
.text:0040956F                 jz      short loc_4095B8
.text:00409571                 mov     eax, dword ptr [ebp+Buffer.ullTotalPhys]
.text:00409574                 mov     ecx, dword ptr [ebp+Buffer.ullTotalPhys+4]
.text:00409577                 mov     dword ptr [ebp+var_5C], eax
.text:0040957A                 mov     eax, ecx
.text:0040957C                 and     ecx, 7FFFFFFFh
.text:00409582                 and     eax, 80000000h
.text:00409587                 mov     dword ptr [ebp+var_5C+4], ecx
.text:0040958A                 fild    [ebp+var_5C]
.text:0040958D                 mov     dword ptr [ebp+var_5C+4], eax
.text:00409590                 mov     dword ptr [ebp+var_5C], edi
.text:00409593                 fild    [ebp+var_5C]
.text:00409596                 fchs
.text:00409598                 faddp   st(1), st
.text:0040959A                 fstp    [ebp+var_5C]
.text:0040959D                 fld     [ebp+var_5C]
.text:004095A0                 fmul    ds:dbl_4036C8
.text:004095A6                 call    _ftol2_sse
.text:004095AB                 push    7Fh
.text:004095AD                 pop     ecx
.text:004095AE                 sub     ecx, eax
.text:004095B0                 and     ecx, 0FFFFFF80h
.text:004095B3
.text:004095B3 loc_4095B3:                             ; CODE XREF: sub_4093CA+197↑j
.text:004095B3                 mov     [ebx+1Ch], ecx
.text:004095B6                 jmp     short loc_4095BF
.text:004095B8 ; ---------------------------------------------------------------------------
.text:004095B8
.text:004095B8 loc_4095B8:                             ; CODE XREF: sub_4093CA+1A5↑j
.text:004095B8                 mov     dword ptr [ebx+1Ch], 8000h
.text:004095BF
.text:004095BF loc_4095BF:                             ; CODE XREF: sub_4093CA+1EC↑j
.text:004095BF                 movzx   esi, word ptr [ebx+1Ch]
.text:004095C3                 push    11Ah            ; nIDDlgItem
.text:004095C8                 push    dword ptr [ebx+4] ; hDlg
.text:004095CB                 or      esi, 1000000h
.text:004095D1                 call    ds:GetDlgItem
.text:004095D7                 push    esi             ; lParam
.text:004095D8                 push    edi             ; wParam
.text:004095D9                 mov     esi, 465h
.text:004095DE                 push    esi             ; Msg
.text:004095DF                 push    eax             ; hWnd
.text:004095E0                 call    ds:SendMessageW
.text:004095E6                 push    121h            ; nIDDlgItem
.text:004095EB                 push    dword ptr [ebx+4] ; hDlg
.text:004095EE                 call    ds:GetDlgItem
.text:004095F4                 push    1003Eh          ; lParam
.text:004095F9                 push    edi             ; wParam
.text:004095FA                 push    esi             ; Msg
.text:004095FB                 push    eax             ; hWnd
.text:004095FC                 call    ds:SendMessageW
.text:00409602                 mov     ecx, ebx
.text:00409604                 call    ?SetDlgControlsFromBootState@CBootIniAdvancedDlg@@QAEXXZ ; CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)
.text:00409609                 mov     ecx, ebx
.text:0040960B                 call    ?SetDlgControlState@CBootIniAdvancedDlg@@QAEXXZ ; CBootIniAdvancedDlg::SetDlgControlState(void)
.text:0040960B ;   } // starts at 409400
.text:00409610                 or      [ebp+var_4], 0FFFFFFFFh
.text:00409614                 lea     ecx, [ebp+lParam]
.text:00409617                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040961D                 xor     eax, eax
.text:0040961F                 inc     eax
.text:00409620                 call    __EH_epilog3_GS
.text:00409625                 retn    10h
.text:00409625 ; } // starts at 4093CA
.text:00409625 sub_4093CA      endp
.text:00409625
.text:00409628
.text:00409628 ; =============== S U B R O U T I N E =======================================
.text:00409628
.text:00409628 ; Attributes: bp-based frame info_from_lumina
.text:00409628
.text:00409628 ; void __thiscall CBootIniAdvancedDlg::SetDlgControlState(CBootIniAdvancedDlg *__hidden this)
.text:00409628 ?SetDlgControlState@CBootIniAdvancedDlg@@QAEXXZ proc near
.text:00409628                                         ; CODE XREF: sub_4093CA+241↑p
.text:00409628                                         ; sub_40A2C3+5A↓p ...
.text:00409628
.text:00409628 var_21C         = dword ptr -21Ch
.text:00409628 var_218         = dword ptr -218h
.text:00409628 var_214         = dword ptr -214h
.text:00409628 var_210         = dword ptr -210h
.text:00409628 String          = word ptr -20Ch
.text:00409628 var_4           = dword ptr -4
.text:00409628
.text:00409628                 mov     edi, edi
.text:0040962A                 push    ebp
.text:0040962B                 mov     ebp, esp
.text:0040962D                 sub     esp, 21Ch
.text:00409633                 mov     eax, ___security_cookie
.text:00409638                 xor     eax, ebp
.text:0040963A                 mov     [ebp+var_4], eax
.text:0040963D                 push    ebx
.text:0040963E                 push    esi
.text:0040963F                 push    edi
.text:00409640                 mov     edi, ecx
.text:00409642                 push    114h            ; nIDButton
.text:00409647                 push    dword ptr [edi+4] ; hDlg
.text:0040964A                 call    ds:IsDlgButtonChecked
.text:00409650                 push    11Dh            ; nIDDlgItem
.text:00409655                 push    dword ptr [edi+4] ; hDlg
.text:00409658                 lea     esi, [eax-1]
.text:0040965B                 neg     esi
.text:0040965D                 sbb     esi, esi
.text:0040965F                 inc     esi
.text:00409660                 call    ds:GetDlgItem
.text:00409666                 test    eax, eax
.text:00409668                 jz      short loc_409672
.text:0040966A                 push    esi             ; bEnable
.text:0040966B                 push    eax             ; hWnd
.text:0040966C                 call    ds:EnableWindow
.text:00409672
.text:00409672 loc_409672:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+40↑j
.text:00409672                 push    11Ah            ; nIDDlgItem
.text:00409677                 push    dword ptr [edi+4] ; hDlg
.text:0040967A                 call    ds:GetDlgItem
.text:00409680                 test    eax, eax
.text:00409682                 jz      short loc_40968C
.text:00409684                 push    esi             ; bEnable
.text:00409685                 push    eax             ; hWnd
.text:00409686                 call    ds:EnableWindow
.text:0040968C
.text:0040968C loc_40968C:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+5A↑j
.text:0040968C                 push    115h            ; nIDButton
.text:00409691                 push    dword ptr [edi+4] ; hDlg
.text:00409694                 call    ds:IsDlgButtonChecked
.text:0040969A                 push    11Bh            ; nIDDlgItem
.text:0040969F                 push    dword ptr [edi+4] ; hDlg
.text:004096A2                 lea     esi, [eax-1]
.text:004096A5                 neg     esi
.text:004096A7                 sbb     esi, esi
.text:004096A9                 inc     esi
.text:004096AA                 call    ds:GetDlgItem
.text:004096B0                 test    eax, eax
.text:004096B2                 jz      short loc_4096BC
.text:004096B4                 push    esi             ; bEnable
.text:004096B5                 push    eax             ; hWnd
.text:004096B6                 call    ds:EnableWindow
.text:004096BC
.text:004096BC loc_4096BC:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+8A↑j
.text:004096BC                 push    117h            ; nIDButton
.text:004096C1                 push    dword ptr [edi+4] ; hDlg
.text:004096C4                 call    ds:IsDlgButtonChecked
.text:004096CA                 mov     ebx, 118h
.text:004096CF                 push    ebx             ; nIDDlgItem
.text:004096D0                 push    dword ptr [edi+4] ; hDlg
.text:004096D3                 lea     esi, [eax-1]
.text:004096D6                 neg     esi
.text:004096D8                 sbb     esi, esi
.text:004096DA                 inc     esi
.text:004096DB                 call    ds:GetDlgItem
.text:004096E1                 test    eax, eax
.text:004096E3                 jz      short loc_4096ED
.text:004096E5                 push    esi             ; bEnable
.text:004096E6                 push    eax             ; hWnd
.text:004096E7                 call    ds:EnableWindow
.text:004096ED
.text:004096ED loc_4096ED:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+BB↑j
.text:004096ED                 push    ebx             ; nIDButton
.text:004096EE                 push    dword ptr [edi+4] ; hDlg
.text:004096F1                 call    ds:IsDlgButtonChecked
.text:004096F7                 dec     eax
.text:004096F8                 neg     eax
.text:004096FA                 push    11Ch            ; nIDDlgItem
.text:004096FF                 push    dword ptr [edi+4] ; hDlg
.text:00409702                 sbb     eax, eax
.text:00409704                 inc     eax
.text:00409705                 mov     [ebp+var_210], eax
.text:0040970B                 call    ds:GetDlgItem
.text:00409711                 xor     ebx, ebx
.text:00409713                 mov     ecx, eax
.text:00409715                 inc     ebx
.text:00409716                 test    ecx, ecx
.text:00409718                 jz      short loc_409735
.text:0040971A                 test    esi, esi
.text:0040971C                 jz      short loc_40972B
.text:0040971E                 cmp     [ebp+var_210], 0
.text:00409725                 jz      short loc_40972B
.text:00409727                 mov     eax, ebx
.text:00409729                 jmp     short loc_40972D
.text:0040972B ; ---------------------------------------------------------------------------
.text:0040972B
.text:0040972B loc_40972B:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+F4↑j
.text:0040972B                                         ; CBootIniAdvancedDlg::SetDlgControlState(void)+FD↑j
.text:0040972B                 xor     eax, eax
.text:0040972D
.text:0040972D loc_40972D:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+101↑j
.text:0040972D                 push    eax             ; bEnable
.text:0040972E                 push    ecx             ; hWnd
.text:0040972F                 call    ds:EnableWindow
.text:00409735
.text:00409735 loc_409735:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+F0↑j
.text:00409735                 and     [ebp+var_218], 0
.text:0040973C                 lea     eax, [ebp+String]
.text:00409742                 and     [ebp+var_214], 0
.text:00409749                 and     [ebp+var_21C], 0
.text:00409750                 push    104h            ; cchMax
.text:00409755                 push    eax             ; lpString
.text:00409756                 push    11Ch            ; nIDDlgItem
.text:0040975B                 push    dword ptr [edi+4] ; hDlg
.text:0040975E                 call    ds:GetDlgItemTextW
.text:00409764                 test    eax, eax
.text:00409766                 jz      short loc_4097CB
.text:00409768                 mov     ecx, offset a1394 ; "1394"
.text:0040976D                 lea     eax, [ebp+String]
.text:00409773
.text:00409773 loc_409773:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+16B↓j
.text:00409773                 mov     dx, [eax]
.text:00409776                 cmp     dx, [ecx]
.text:00409779                 jnz     short loc_409799
.text:0040977B                 test    dx, dx
.text:0040977E                 jz      short loc_409795
.text:00409780                 mov     dx, [eax+2]
.text:00409784                 cmp     dx, [ecx+2]
.text:00409788                 jnz     short loc_409799
.text:0040978A                 add     eax, 4
.text:0040978D                 add     ecx, 4
.text:00409790                 test    dx, dx
.text:00409793                 jnz     short loc_409773
.text:00409795
.text:00409795 loc_409795:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+156↑j
.text:00409795                 xor     eax, eax
.text:00409797                 jmp     short loc_40979D
.text:00409799 ; ---------------------------------------------------------------------------
.text:00409799
.text:00409799 loc_409799:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+151↑j
.text:00409799                                         ; CBootIniAdvancedDlg::SetDlgControlState(void)+160↑j
.text:00409799                 sbb     eax, eax
.text:0040979B                 or      eax, ebx
.text:0040979D
.text:0040979D loc_40979D:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+16F↑j
.text:0040979D                 test    eax, eax
.text:0040979F                 jnz     short loc_4097A9
.text:004097A1                 mov     [ebp+var_218], ebx
.text:004097A7                 jmp     short loc_4097CB
.text:004097A9 ; ---------------------------------------------------------------------------
.text:004097A9
.text:004097A9 loc_4097A9:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+177↑j
.text:004097A9                 cmp     [ebp+String], 43h ; 'C'
.text:004097B1                 jnz     short loc_4097BB
.text:004097B3                 mov     [ebp+var_214], ebx
.text:004097B9                 jmp     short loc_4097CB
.text:004097BB ; ---------------------------------------------------------------------------
.text:004097BB
.text:004097BB loc_4097BB:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+189↑j
.text:004097BB                 cmp     [ebp+String], 55h ; 'U'
.text:004097C3                 jnz     short loc_4097CB
.text:004097C5                 mov     [ebp+var_21C], ebx
.text:004097CB
.text:004097CB loc_4097CB:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+13E↑j
.text:004097CB                                         ; CBootIniAdvancedDlg::SetDlgControlState(void)+17F↑j ...
.text:004097CB                 push    119h            ; nIDDlgItem
.text:004097D0                 push    dword ptr [edi+4] ; hDlg
.text:004097D3                 call    ds:GetDlgItem
.text:004097D9                 mov     ecx, eax
.text:004097DB                 test    ecx, ecx
.text:004097DD                 jz      short loc_409803
.text:004097DF                 test    esi, esi
.text:004097E1                 jz      short loc_4097F9
.text:004097E3                 cmp     [ebp+var_210], 0
.text:004097EA                 jz      short loc_4097F9
.text:004097EC                 cmp     [ebp+var_214], 0
.text:004097F3                 jz      short loc_4097F9
.text:004097F5                 mov     eax, ebx
.text:004097F7                 jmp     short loc_4097FB
.text:004097F9 ; ---------------------------------------------------------------------------
.text:004097F9
.text:004097F9 loc_4097F9:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+1B9↑j
.text:004097F9                                         ; CBootIniAdvancedDlg::SetDlgControlState(void)+1C2↑j ...
.text:004097F9                 xor     eax, eax
.text:004097FB
.text:004097FB loc_4097FB:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+1CF↑j
.text:004097FB                 push    eax             ; bEnable
.text:004097FC                 push    ecx             ; hWnd
.text:004097FD                 call    ds:EnableWindow
.text:00409803
.text:00409803 loc_409803:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+1B5↑j
.text:00409803                 push    119h            ; nIDButton
.text:00409808                 push    dword ptr [edi+4] ; hDlg
.text:0040980B                 call    ds:IsDlgButtonChecked
.text:00409811                 dec     eax
.text:00409812                 neg     eax
.text:00409814                 push    120h            ; nIDDlgItem
.text:00409819                 push    dword ptr [edi+4] ; hDlg
.text:0040981C                 sbb     eax, eax
.text:0040981E                 inc     eax
.text:0040981F                 mov     [ebp+var_214], eax
.text:00409825                 call    ds:GetDlgItem
.text:0040982B                 mov     ecx, eax
.text:0040982D                 test    ecx, ecx
.text:0040982F                 jz      short loc_409867
.text:00409831                 test    esi, esi
.text:00409833                 jz      short loc_40985D
.text:00409835                 cmp     [ebp+var_210], 0
.text:0040983C                 jz      short loc_40985D
.text:0040983E                 cmp     [ebp+var_214], 0
.text:00409845                 jz      short loc_40985D
.text:00409847                 cmp     [ebp+var_218], 0
.text:0040984E                 jnz     short loc_40985D
.text:00409850                 cmp     [ebp+var_21C], 0
.text:00409857                 jnz     short loc_40985D
.text:00409859                 mov     eax, ebx
.text:0040985B                 jmp     short loc_40985F
.text:0040985D ; ---------------------------------------------------------------------------
.text:0040985D
.text:0040985D loc_40985D:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+20B↑j
.text:0040985D                                         ; CBootIniAdvancedDlg::SetDlgControlState(void)+214↑j ...
.text:0040985D                 xor     eax, eax
.text:0040985F
.text:0040985F loc_40985F:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+233↑j
.text:0040985F                 push    eax             ; bEnable
.text:00409860                 push    ecx             ; hWnd
.text:00409861                 call    ds:EnableWindow
.text:00409867
.text:00409867 loc_409867:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+207↑j
.text:00409867                 push    11Eh            ; nIDDlgItem
.text:0040986C                 push    dword ptr [edi+4] ; hDlg
.text:0040986F                 call    ds:GetDlgItem
.text:00409875                 mov     ecx, eax
.text:00409877                 test    ecx, ecx
.text:00409879                 jz      short loc_40989F
.text:0040987B                 test    esi, esi
.text:0040987D                 jz      short loc_409895
.text:0040987F                 cmp     [ebp+var_210], 0
.text:00409886                 jz      short loc_409895
.text:00409888                 cmp     [ebp+var_218], 0
.text:0040988F                 jz      short loc_409895
.text:00409891                 mov     eax, ebx
.text:00409893                 jmp     short loc_409897
.text:00409895 ; ---------------------------------------------------------------------------
.text:00409895
.text:00409895 loc_409895:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+255↑j
.text:00409895                                         ; CBootIniAdvancedDlg::SetDlgControlState(void)+25E↑j ...
.text:00409895                 xor     eax, eax
.text:00409897
.text:00409897 loc_409897:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+26B↑j
.text:00409897                 push    eax             ; bEnable
.text:00409898                 push    ecx             ; hWnd
.text:00409899                 call    ds:EnableWindow
.text:0040989F
.text:0040989F loc_40989F:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+251↑j
.text:0040989F                 push    11Eh            ; nIDButton
.text:004098A4                 push    dword ptr [edi+4] ; hDlg
.text:004098A7                 call    ds:IsDlgButtonChecked
.text:004098AD                 dec     eax
.text:004098AE                 neg     eax
.text:004098B0                 push    11Fh            ; nIDDlgItem
.text:004098B5                 push    dword ptr [edi+4] ; hDlg
.text:004098B8                 sbb     eax, eax
.text:004098BA                 inc     eax
.text:004098BB                 mov     [ebp+var_214], eax
.text:004098C1                 call    ds:GetDlgItem
.text:004098C7                 mov     ecx, eax
.text:004098C9                 test    ecx, ecx
.text:004098CB                 jz      short loc_4098FA
.text:004098CD                 test    esi, esi
.text:004098CF                 jz      short loc_4098F0
.text:004098D1                 cmp     [ebp+var_210], 0
.text:004098D8                 jz      short loc_4098F0
.text:004098DA                 cmp     [ebp+var_214], 0
.text:004098E1                 jz      short loc_4098F0
.text:004098E3                 cmp     [ebp+var_218], 0
.text:004098EA                 jz      short loc_4098F0
.text:004098EC                 mov     eax, ebx
.text:004098EE                 jmp     short loc_4098F2
.text:004098F0 ; ---------------------------------------------------------------------------
.text:004098F0
.text:004098F0 loc_4098F0:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+2A7↑j
.text:004098F0                                         ; CBootIniAdvancedDlg::SetDlgControlState(void)+2B0↑j ...
.text:004098F0                 xor     eax, eax
.text:004098F2
.text:004098F2 loc_4098F2:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+2C6↑j
.text:004098F2                 push    eax             ; bEnable
.text:004098F3                 push    ecx             ; hWnd
.text:004098F4                 call    ds:EnableWindow
.text:004098FA
.text:004098FA loc_4098FA:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+2A3↑j
.text:004098FA                 push    121h            ; nIDDlgItem
.text:004098FF                 push    dword ptr [edi+4] ; hDlg
.text:00409902                 call    ds:GetDlgItem
.text:00409908                 mov     ecx, eax
.text:0040990A                 test    ecx, ecx
.text:0040990C                 jz      short loc_40993B
.text:0040990E                 test    esi, esi
.text:00409910                 jz      short loc_409931
.text:00409912                 cmp     [ebp+var_210], 0
.text:00409919                 jz      short loc_409931
.text:0040991B                 cmp     [ebp+var_214], 0
.text:00409922                 jz      short loc_409931
.text:00409924                 cmp     [ebp+var_218], 0
.text:0040992B                 jz      short loc_409931
.text:0040992D                 mov     eax, ebx
.text:0040992F                 jmp     short loc_409933
.text:00409931 ; ---------------------------------------------------------------------------
.text:00409931
.text:00409931 loc_409931:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+2E8↑j
.text:00409931                                         ; CBootIniAdvancedDlg::SetDlgControlState(void)+2F1↑j ...
.text:00409931                 xor     eax, eax
.text:00409933
.text:00409933 loc_409933:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+307↑j
.text:00409933                 push    eax             ; bEnable
.text:00409934                 push    ecx             ; hWnd
.text:00409935                 call    ds:EnableWindow
.text:0040993B
.text:0040993B loc_40993B:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+2E4↑j
.text:0040993B                 push    3F7h            ; nIDDlgItem
.text:00409940                 push    dword ptr [edi+4] ; hDlg
.text:00409943                 call    ds:GetDlgItem
.text:00409949                 test    eax, eax
.text:0040994B                 jz      short loc_40996D
.text:0040994D                 test    esi, esi
.text:0040994F                 jz      short loc_409963
.text:00409951                 cmp     [ebp+var_210], 0
.text:00409958                 jz      short loc_409963
.text:0040995A                 cmp     [ebp+var_21C], 0
.text:00409961                 jnz     short loc_409965
.text:00409963
.text:00409963 loc_409963:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+327↑j
.text:00409963                                         ; CBootIniAdvancedDlg::SetDlgControlState(void)+330↑j
.text:00409963                 xor     ebx, ebx
.text:00409965
.text:00409965 loc_409965:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+339↑j
.text:00409965                 push    ebx             ; bEnable
.text:00409966                 push    eax             ; hWnd
.text:00409967                 call    ds:EnableWindow
.text:0040996D
.text:0040996D loc_40996D:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+323↑j
.text:0040996D                 mov     ecx, [ebp+var_4]
.text:00409970                 pop     edi
.text:00409971                 pop     esi
.text:00409972                 xor     ecx, ebp        ; StackCookie
.text:00409974                 pop     ebx
.text:00409975                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040997A                 mov     esp, ebp
.text:0040997C                 pop     ebp
.text:0040997D                 retn
.text:0040997D ?SetDlgControlState@CBootIniAdvancedDlg@@QAEXXZ endp
.text:0040997D
.text:0040997E
.text:0040997E ; =============== S U B R O U T I N E =======================================
.text:0040997E
.text:0040997E ; Attributes: bp-based frame
.text:0040997E
.text:0040997E ; int __stdcall sub_40997E(int Value, int nIDDlgItem)
.text:0040997E sub_40997E      proc near               ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+14F↓p
.text:0040997E                                         ; CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+269↓p
.text:0040997E
.text:0040997E Buffer          = word ptr -20Ch
.text:0040997E var_4           = dword ptr -4
.text:0040997E Value           = dword ptr  8
.text:0040997E nIDDlgItem      = dword ptr  0Ch
.text:0040997E
.text:0040997E                 mov     edi, edi
.text:00409980                 push    ebp
.text:00409981                 mov     ebp, esp
.text:00409983                 sub     esp, 20Ch
.text:00409989                 mov     eax, ___security_cookie
.text:0040998E                 xor     eax, ebp
.text:00409990                 mov     [ebp+var_4], eax
.text:00409993                 push    esi
.text:00409994                 mov     esi, [ebp+nIDDlgItem]
.text:00409997                 lea     eax, [ebp+Buffer]
.text:0040999D                 push    edi
.text:0040999E                 push    0Ah             ; Radix
.text:004099A0                 push    104h            ; BufferCount
.text:004099A5                 push    eax             ; Buffer
.text:004099A6                 push    [ebp+Value]     ; Value
.text:004099A9                 mov     edi, ecx
.text:004099AB                 call    ds:_itow_s
.text:004099B1                 add     esp, 10h
.text:004099B4                 push    esi             ; nIDDlgItem
.text:004099B5                 push    dword ptr [edi+4] ; hDlg
.text:004099B8                 call    ds:GetDlgItem
.text:004099BE                 mov     esi, eax
.text:004099C0                 test    esi, esi
.text:004099C2                 jz      short loc_409A07
.text:004099C4                 lea     eax, [ebp+Buffer]
.text:004099CA                 push    eax             ; lParam
.text:004099CB                 push    0FFFFFFFFh      ; wParam
.text:004099CD                 push    14Dh            ; Msg
.text:004099D2                 push    esi             ; hWnd
.text:004099D3                 call    ds:SendMessageW
.text:004099D9                 cmp     eax, 0FFFFFFFFh
.text:004099DC                 jnz     short loc_409A07
.text:004099DE                 lea     eax, [ebp+Buffer]
.text:004099E4                 push    eax             ; lParam
.text:004099E5                 push    0               ; wParam
.text:004099E7                 push    143h            ; Msg
.text:004099EC                 push    esi             ; hWnd
.text:004099ED                 call    ds:SendMessageW
.text:004099F3                 cmp     eax, 0FFFFFFFFh
.text:004099F6                 jz      short loc_409A07
.text:004099F8                 push    0               ; lParam
.text:004099FA                 push    eax             ; wParam
.text:004099FB                 push    14Eh            ; Msg
.text:00409A00                 push    esi             ; hWnd
.text:00409A01                 call    ds:SendMessageW
.text:00409A07
.text:00409A07 loc_409A07:                             ; CODE XREF: sub_40997E+44↑j
.text:00409A07                                         ; sub_40997E+5E↑j ...
.text:00409A07                 mov     ecx, [ebp+var_4]
.text:00409A0A                 pop     edi
.text:00409A0B                 xor     ecx, ebp        ; StackCookie
.text:00409A0D                 pop     esi
.text:00409A0E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00409A13                 mov     esp, ebp
.text:00409A15                 pop     ebp
.text:00409A16                 retn    8
.text:00409A16 sub_40997E      endp
.text:00409A16
.text:00409A19
.text:00409A19 ; =============== S U B R O U T I N E =======================================
.text:00409A19
.text:00409A19 ; Attributes: bp-based frame
.text:00409A19
.text:00409A19 ; int __stdcall sub_409A19(LPARAM lParam, int)
.text:00409A19 sub_409A19      proc near               ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+24E↓p
.text:00409A19
.text:00409A19 lParam          = dword ptr  8
.text:00409A19
.text:00409A19                 mov     edi, edi
.text:00409A1B                 push    ebp
.text:00409A1C                 mov     ebp, esp
.text:00409A1E                 push    esi
.text:00409A1F                 push    11Ch            ; nIDDlgItem
.text:00409A24                 push    dword ptr [ecx+4] ; hDlg
.text:00409A27                 call    ds:GetDlgItem
.text:00409A2D                 mov     esi, eax
.text:00409A2F                 test    esi, esi
.text:00409A31                 jz      short loc_409A6E
.text:00409A33                 push    [ebp+lParam]    ; lParam
.text:00409A36                 push    0FFFFFFFFh      ; wParam
.text:00409A38                 push    14Dh            ; Msg
.text:00409A3D                 push    esi             ; hWnd
.text:00409A3E                 call    ds:SendMessageW
.text:00409A44                 cmp     eax, 0FFFFFFFFh
.text:00409A47                 jnz     short loc_409A6E
.text:00409A49                 push    [ebp+lParam]    ; lParam
.text:00409A4C                 push    0               ; wParam
.text:00409A4E                 push    143h            ; Msg
.text:00409A53                 push    esi             ; hWnd
.text:00409A54                 call    ds:SendMessageW
.text:00409A5A                 cmp     eax, 0FFFFFFFFh
.text:00409A5D                 jz      short loc_409A6E
.text:00409A5F                 push    0               ; lParam
.text:00409A61                 push    eax             ; wParam
.text:00409A62                 push    14Eh            ; Msg
.text:00409A67                 push    esi             ; hWnd
.text:00409A68                 call    ds:SendMessageW
.text:00409A6E
.text:00409A6E loc_409A6E:                             ; CODE XREF: sub_409A19+18↑j
.text:00409A6E                                         ; sub_409A19+2E↑j ...
.text:00409A6E                 pop     esi
.text:00409A6F                 pop     ebp
.text:00409A70                 retn    8
.text:00409A70 sub_409A19      endp
.text:00409A70
.text:00409A73
.text:00409A73 ; =============== S U B R O U T I N E =======================================
.text:00409A73
.text:00409A73 ; Attributes: bp-based frame info_from_lumina
.text:00409A73
.text:00409A73 ; void __thiscall CBootIniAdvancedDlg::SetDlgControlsFromBootState(CBootIniAdvancedDlg *__hidden this)
.text:00409A73 ?SetDlgControlsFromBootState@CBootIniAdvancedDlg@@QAEXXZ proc near
.text:00409A73                                         ; CODE XREF: sub_4093CA+23A↑p
.text:00409A73
.text:00409A73 lParam          = dword ptr -10h
.text:00409A73 var_4           = dword ptr -4
.text:00409A73
.text:00409A73 ; FUNCTION CHUNK AT .text:00411003 SIZE 00000024 BYTES
.text:00409A73
.text:00409A73 ; __unwind { // loc_41100C
.text:00409A73                 push    4
.text:00409A75                 mov     eax, offset loc_41100C
.text:00409A7A                 call    __EH_prolog3
.text:00409A7F                 mov     esi, ecx
.text:00409A81                 mov     ecx, [esi+24h]
.text:00409A84                 test    ecx, ecx
.text:00409A86                 jz      loc_409CEE
.text:00409A8C                 xor     eax, eax
.text:00409A8E                 xor     edi, edi
.text:00409A90                 cmp     [ecx+118h], edi
.text:00409A96                 setnz   al
.text:00409A99                 push    eax             ; uCheck
.text:00409A9A                 push    114h            ; nIDButton
.text:00409A9F                 push    dword ptr [esi+4] ; hDlg
.text:00409AA2                 call    ds:CheckDlgButton
.text:00409AA8                 mov     eax, [esi+24h]
.text:00409AAB                 xor     ecx, ecx
.text:00409AAD                 cmp     [eax+13Ch], edi
.text:00409AB3                 setnz   cl
.text:00409AB6                 push    ecx             ; uCheck
.text:00409AB7                 push    115h            ; nIDButton
.text:00409ABC                 push    dword ptr [esi+4] ; hDlg
.text:00409ABF                 call    ds:CheckDlgButton
.text:00409AC5                 mov     eax, [esi+24h]
.text:00409AC8                 xor     ecx, ecx
.text:00409ACA                 cmp     [eax+148h], cl
.text:00409AD0                 setnz   cl
.text:00409AD3                 push    ecx             ; uCheck
.text:00409AD4                 push    116h            ; nIDButton
.text:00409AD9                 push    dword ptr [esi+4] ; hDlg
.text:00409ADC                 call    ds:CheckDlgButton
.text:00409AE2                 mov     eax, [esi+24h]
.text:00409AE5                 xor     ecx, ecx
.text:00409AE7                 cmp     [eax+16Ch], cl
.text:00409AED                 setnz   cl
.text:00409AF0                 push    ecx             ; uCheck
.text:00409AF1                 push    117h            ; nIDButton
.text:00409AF6                 push    dword ptr [esi+4] ; hDlg
.text:00409AF9                 call    ds:CheckDlgButton
.text:00409AFF                 xor     eax, eax
.text:00409B01                 cmp     dword_413878, eax
.text:00409B07                 setnz   al
.text:00409B0A                 push    eax             ; uCheck
.text:00409B0B                 push    118h            ; nIDButton
.text:00409B10                 push    dword ptr [esi+4] ; hDlg
.text:00409B13                 call    ds:CheckDlgButton
.text:00409B19                 xor     eax, eax
.text:00409B1B                 cmp     dword_4138C0, eax
.text:00409B21                 setnz   al
.text:00409B24                 push    eax             ; uCheck
.text:00409B25                 push    119h            ; nIDButton
.text:00409B2A                 push    dword ptr [esi+4] ; hDlg
.text:00409B2D                 call    ds:CheckDlgButton
.text:00409B33                 xor     eax, eax
.text:00409B35                 cmp     dword_4138E4, eax
.text:00409B3B                 setnz   al
.text:00409B3E                 push    eax             ; uCheck
.text:00409B3F                 push    11Eh            ; nIDButton
.text:00409B44                 push    dword ptr [esi+4] ; hDlg
.text:00409B47                 call    ds:CheckDlgButton
.text:00409B4D                 mov     eax, [esi+24h]
.text:00409B50                 cmp     [eax+118h], edi
.text:00409B56                 jz      short loc_409B71
.text:00409B58                 mov     eax, [eax+100h]
.text:00409B5E                 push    edi             ; bSigned
.text:00409B5F                 shr     eax, 14h
.text:00409B62                 push    eax             ; uValue
.text:00409B63                 push    11Dh            ; nIDDlgItem
.text:00409B68                 push    dword ptr [esi+4] ; hDlg
.text:00409B6B                 call    ds:SetDlgItemInt
.text:00409B71
.text:00409B71 loc_409B71:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+E3↑j
.text:00409B71                 cmp     dword_4138E4, edi
.text:00409B77                 jz      short loc_409B8E
.text:00409B79                 push    edi             ; bSigned
.text:00409B7A                 push    uValue          ; uValue
.text:00409B80                 push    11Fh            ; nIDDlgItem
.text:00409B85                 push    dword ptr [esi+4] ; hDlg
.text:00409B88                 call    ds:SetDlgItemInt
.text:00409B8E
.text:00409B8E loc_409B8E:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+104↑j
.text:00409B8E                 mov     eax, [esi+24h]
.text:00409B91                 xor     ebx, ebx
.text:00409B93                 inc     ebx
.text:00409B94                 cmp     [eax+128h], edi
.text:00409B9A                 ja      short loc_409BB2
.text:00409B9C                 jb      short loc_409BA6
.text:00409B9E                 cmp     [eax+124h], ebx
.text:00409BA4                 jnb     short loc_409BB2
.text:00409BA6
.text:00409BA6 loc_409BA6:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+129↑j
.text:00409BA6                 mov     [eax+124h], ebx
.text:00409BAC                 mov     [eax+128h], edi
.text:00409BB2
.text:00409BB2 loc_409BB2:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+127↑j
.text:00409BB2                                         ; CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+131↑j
.text:00409BB2                 mov     eax, [esi+24h]
.text:00409BB5                 mov     ecx, esi
.text:00409BB7                 push    11Bh            ; nIDDlgItem
.text:00409BBC                 push    dword ptr [eax+124h] ; Value
.text:00409BC2                 call    sub_40997E
.text:00409BC7                 lea     ecx, [ebp+lParam]
.text:00409BCA                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:00409BD0 ;   try {
.text:00409BD0                 mov     [ebp+var_4], edi
.text:00409BD3                 cmp     dword_413878, 0
.text:00409BDA                 jz      loc_409CC6
.text:00409BE0                 push    offset a1394    ; "1394"
.text:00409BE5                 lea     ecx, [ebp+lParam]
.text:00409BE8                 call    ds:??4CString@@QAEABV0@PBG@Z ; CString::operator=(ushort const *)
.text:00409BEE                 mov     edx, dword_413860
.text:00409BF4                 mov     eax, edx
.text:00409BF6                 mov     ecx, dword_413864
.text:00409BFC                 or      eax, ecx
.text:00409BFE                 jz      short loc_409C5A
.text:00409C00                 cmp     edx, 2
.text:00409C03                 jnz     loc_409CBB
.text:00409C09                 cmp     ecx, edi
.text:00409C0B                 jnz     loc_409CBB
.text:00409C11                 push    offset aUsb     ; "USB"
.text:00409C16                 lea     ecx, [ebp+lParam]
.text:00409C19                 call    ds:??4CString@@QAEABV0@PBG@Z ; CString::operator=(ushort const *)
.text:00409C1F                 cmp     dword_413908, 0
.text:00409C26                 jz      loc_409CBB
.text:00409C2C                 cmp     Block, 0
.text:00409C33                 jz      loc_409CBB
.text:00409C39                 push    3F7h            ; nIDDlgItem
.text:00409C3E                 push    dword ptr [esi+4] ; hDlg
.text:00409C41                 call    ds:GetDlgItem
.text:00409C47                 test    eax, eax
.text:00409C49                 jz      short loc_409CBB
.text:00409C4B                 push    Block           ; lpString
.text:00409C51                 push    eax             ; hWnd
.text:00409C52                 call    ds:SetWindowTextW
.text:00409C58                 jmp     short loc_409CBB
.text:00409C5A ; ---------------------------------------------------------------------------
.text:00409C5A
.text:00409C5A loc_409C5A:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+18B↑j
.text:00409C5A                 cmp     dword_41389C, 0
.text:00409C61                 jz      short loc_409CBB
.text:00409C63                 mov     ecx, dword_413888
.text:00409C69                 cmp     ecx, edi
.text:00409C6B                 ja      short loc_409C89
.text:00409C6D                 jb      short loc_409C78
.text:00409C6F                 mov     eax, dword_413884
.text:00409C74                 cmp     eax, ebx
.text:00409C76                 jnb     short loc_409C8E
.text:00409C78
.text:00409C78 loc_409C78:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+1FA↑j
.text:00409C78                 mov     eax, ebx
.text:00409C7A                 mov     ecx, edi
.text:00409C7C                 mov     dword_413884, eax
.text:00409C81                 mov     dword_413888, ecx
.text:00409C87                 jmp     short loc_409C8E
.text:00409C89 ; ---------------------------------------------------------------------------
.text:00409C89
.text:00409C89 loc_409C89:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+1F8↑j
.text:00409C89                 mov     eax, dword_413884
.text:00409C8E
.text:00409C8E loc_409C8E:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+203↑j
.text:00409C8E                                         ; CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+214↑j
.text:00409C8E                 cmp     ecx, edi
.text:00409C90                 ja      short loc_409C97
.text:00409C92                 cmp     eax, 4
.text:00409C95                 jbe     short loc_409CA7
.text:00409C97
.text:00409C97 loc_409C97:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+21D↑j
.text:00409C97                 push    4
.text:00409C99                 pop     eax
.text:00409C9A                 mov     ecx, edi
.text:00409C9C                 mov     dword_413884, eax
.text:00409CA1                 mov     dword_413888, ecx
.text:00409CA7
.text:00409CA7 loc_409CA7:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+222↑j
.text:00409CA7                 push    ecx
.text:00409CA8                 push    eax
.text:00409CA9                 lea     eax, [ebp+lParam]
.text:00409CAC                 push    offset aComD    ; "COM%d:"
.text:00409CB1                 push    eax
.text:00409CB2                 call    ds:?Format@CString@@QAAXPBGZZ ; CString::Format(ushort const *,...)
.text:00409CB8                 add     esp, 10h
.text:00409CBB
.text:00409CBB loc_409CBB:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+190↑j
.text:00409CBB                                         ; CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+198↑j ...
.text:00409CBB                 push    ecx             ; int
.text:00409CBC                 push    [ebp+lParam]    ; lParam
.text:00409CBF                 mov     ecx, esi
.text:00409CC1                 call    sub_409A19
.text:00409CC6
.text:00409CC6 loc_409CC6:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+167↑j
.text:00409CC6                 cmp     dword_4138C0, 0
.text:00409CCD                 jz      short loc_409CE1
.text:00409CCF                 push    120h            ; nIDDlgItem
.text:00409CD4                 push    Value           ; Value
.text:00409CDA                 mov     ecx, esi
.text:00409CDC                 call    sub_40997E
.text:00409CDC ;   } // starts at 409BD0
.text:00409CE1
.text:00409CE1 loc_409CE1:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+25A↑j
.text:00409CE1                 or      [ebp+var_4], 0FFFFFFFFh
.text:00409CE5                 lea     ecx, [ebp+lParam]
.text:00409CE8                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00409CEE
.text:00409CEE loc_409CEE:                             ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+13↑j
.text:00409CEE                 call    __EH_epilog3
.text:00409CF3                 retn
.text:00409CF3 ; } // starts at 409A73
.text:00409CF3 ?SetDlgControlsFromBootState@CBootIniAdvancedDlg@@QAEXXZ endp ; sp-analysis failed
.text:00409CF3
.text:00409CF4
.text:00409CF4 ; =============== S U B R O U T I N E =======================================
.text:00409CF4
.text:00409CF4 ; Attributes: bp-based frame info_from_lumina
.text:00409CF4
.text:00409CF4 ; void __thiscall CBootIniAdvancedDlg::SaveBootStateFromDlgControls(CBootIniAdvancedDlg *__hidden this)
.text:00409CF4 ?SaveBootStateFromDlgControls@CBootIniAdvancedDlg@@QAEXXZ proc near
.text:00409CF4                                         ; CODE XREF: sub_40C2F0+49↓p
.text:00409CF4
.text:00409CF4 String          = word ptr -20Ch
.text:00409CF4 var_206         = word ptr -206h
.text:00409CF4 var_202         = word ptr -202h
.text:00409CF4 var_4           = dword ptr -4
.text:00409CF4
.text:00409CF4                 mov     edi, edi
.text:00409CF6                 push    ebp
.text:00409CF7                 mov     ebp, esp
.text:00409CF9                 sub     esp, 20Ch
.text:00409CFF                 mov     eax, ___security_cookie
.text:00409D04                 xor     eax, ebp
.text:00409D06                 mov     [ebp+var_4], eax
.text:00409D09                 push    esi
.text:00409D0A                 mov     esi, ecx
.text:00409D0C                 cmp     dword ptr [esi+24h], 0
.text:00409D10                 jz      loc_40A2B4
.text:00409D16                 push    ebx
.text:00409D17                 push    edi
.text:00409D18                 push    114h            ; nIDButton
.text:00409D1D                 push    dword ptr [esi+4] ; hDlg
.text:00409D20                 call    ds:IsDlgButtonChecked
.text:00409D26                 xor     ebx, ebx
.text:00409D28                 mov     edi, 104h
.text:00409D2D                 inc     ebx
.text:00409D2E                 cmp     eax, ebx
.text:00409D30                 jnz     loc_409DE0
.text:00409D36                 push    edi             ; cchMax
.text:00409D37                 lea     eax, [ebp+String]
.text:00409D3D                 push    eax             ; lpString
.text:00409D3E                 push    11Dh            ; nIDDlgItem
.text:00409D43                 push    dword ptr [esi+4] ; hDlg
.text:00409D46                 call    ds:GetDlgItemTextW
.text:00409D4C                 test    eax, eax
.text:00409D4E                 jz      loc_409DE0
.text:00409D54                 lea     eax, [ebp+String]
.text:00409D5A                 push    eax             ; String
.text:00409D5B                 call    ds:_wtol
.text:00409D61                 pop     ecx
.text:00409D62                 mov     ecx, 100h
.text:00409D67                 mov     edi, eax
.text:00409D69                 cmp     eax, ecx
.text:00409D6B                 jge     short loc_409D6F
.text:00409D6D                 mov     edi, ecx
.text:00409D6F
.text:00409D6F loc_409D6F:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+77↑j
.text:00409D6F                 cmp     edi, [esi+1Ch]
.text:00409D72                 jle     short loc_409D77
.text:00409D74                 mov     edi, [esi+1Ch]
.text:00409D77
.text:00409D77 loc_409D77:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+7E↑j
.text:00409D77                 cmp     eax, edi
.text:00409D79                 jz      short loc_409DAE
.text:00409D7B                 push    edi             ; Args
.text:00409D7C                 push    offset Format   ; "%d"
.text:00409D81                 lea     eax, [ebp+String]
.text:00409D87                 push    104h            ; int
.text:00409D8C                 push    eax             ; Buffer
.text:00409D8D                 call    ?StringCchPrintfW@@YAJPAGIPBGZZ_0 ; StringCchPrintfW(ushort *,uint,ushort const *,...)
.text:00409D92                 add     esp, 10h
.text:00409D95                 test    eax, eax
.text:00409D97                 js      short loc_409DAE
.text:00409D99                 lea     eax, [ebp+String]
.text:00409D9F                 push    eax             ; lpString
.text:00409DA0                 push    11Dh            ; nIDDlgItem
.text:00409DA5                 push    dword ptr [esi+4] ; hDlg
.text:00409DA8                 call    ds:SetDlgItemTextW
.text:00409DAE
.text:00409DAE loc_409DAE:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+85↑j
.text:00409DAE                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+A3↑j
.text:00409DAE                 mov     ecx, [esi+24h]
.text:00409DB1                 mov     eax, edi
.text:00409DB3                 cdq
.text:00409DB4                 mov     edi, 104h
.text:00409DB9                 shld    edx, eax, 14h
.text:00409DBD                 shl     eax, 14h
.text:00409DC0                 mov     [ecx+100h], eax
.text:00409DC6                 mov     [ecx+104h], edx
.text:00409DCC                 mov     eax, [esi+24h]
.text:00409DCF                 mov     [eax+114h], ebx
.text:00409DD5                 mov     eax, [esi+24h]
.text:00409DD8                 mov     [eax+118h], ebx
.text:00409DDE                 jmp     short loc_409DFC
.text:00409DE0 ; ---------------------------------------------------------------------------
.text:00409DE0
.text:00409DE0 loc_409DE0:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+3C↑j
.text:00409DE0                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+5A↑j
.text:00409DE0                 mov     eax, [esi+24h]
.text:00409DE3                 cmp     dword ptr [eax+118h], 0
.text:00409DEA                 jz      short loc_409DFC
.text:00409DEC                 and     dword ptr [eax+118h], 0
.text:00409DF3                 mov     eax, [esi+24h]
.text:00409DF6                 mov     [eax+114h], ebx
.text:00409DFC
.text:00409DFC loc_409DFC:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+EA↑j
.text:00409DFC                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+F6↑j
.text:00409DFC                 push    115h            ; nIDButton
.text:00409E01                 push    dword ptr [esi+4] ; hDlg
.text:00409E04                 call    ds:IsDlgButtonChecked
.text:00409E0A                 cmp     eax, ebx
.text:00409E0C                 jnz     short loc_409E7D
.text:00409E0E                 push    edi             ; cchMax
.text:00409E0F                 lea     eax, [ebp+String]
.text:00409E15                 push    eax             ; lpString
.text:00409E16                 push    11Bh            ; nIDDlgItem
.text:00409E1B                 push    dword ptr [esi+4] ; hDlg
.text:00409E1E                 call    ds:GetDlgItemTextW
.text:00409E24                 test    eax, eax
.text:00409E26                 jz      short loc_409E7D
.text:00409E28                 lea     eax, [ebp+String]
.text:00409E2E                 push    eax             ; String
.text:00409E2F                 call    ds:_wtol
.text:00409E35                 pop     ecx
.text:00409E36                 mov     ecx, [esi+24h]
.text:00409E39                 cmp     dword ptr [ecx+128h], 0
.text:00409E40                 ja      short loc_409E59
.text:00409E42                 jb      short loc_409E4C
.text:00409E44                 cmp     [ecx+124h], ebx
.text:00409E4A                 jnb     short loc_409E59
.text:00409E4C
.text:00409E4C loc_409E4C:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+14E↑j
.text:00409E4C                 mov     [ecx+124h], ebx
.text:00409E52                 and     dword ptr [ecx+128h], 0
.text:00409E59
.text:00409E59 loc_409E59:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+14C↑j
.text:00409E59                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+156↑j
.text:00409E59                 mov     ecx, [esi+24h]
.text:00409E5C                 cdq
.text:00409E5D                 mov     [ecx+124h], eax
.text:00409E63                 mov     [ecx+128h], edx
.text:00409E69                 mov     eax, [esi+24h]
.text:00409E6C                 mov     [eax+138h], ebx
.text:00409E72                 mov     eax, [esi+24h]
.text:00409E75                 mov     [eax+13Ch], ebx
.text:00409E7B                 jmp     short loc_409E99
.text:00409E7D ; ---------------------------------------------------------------------------
.text:00409E7D
.text:00409E7D loc_409E7D:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+118↑j
.text:00409E7D                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+132↑j
.text:00409E7D                 mov     eax, [esi+24h]
.text:00409E80                 cmp     dword ptr [eax+13Ch], 0
.text:00409E87                 jz      short loc_409E99
.text:00409E89                 and     dword ptr [eax+13Ch], 0
.text:00409E90                 mov     eax, [esi+24h]
.text:00409E93                 mov     [eax+138h], ebx
.text:00409E99
.text:00409E99 loc_409E99:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+187↑j
.text:00409E99                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+193↑j
.text:00409E99                 push    116h            ; nIDButton
.text:00409E9E                 push    dword ptr [esi+4] ; hDlg
.text:00409EA1                 call    ds:IsDlgButtonChecked
.text:00409EA7                 test    eax, eax
.text:00409EA9                 mov     eax, [esi+24h]
.text:00409EAC                 push    117h            ; nIDButton
.text:00409EB1                 setnz   cl
.text:00409EB4                 mov     [eax+148h], cl
.text:00409EBA                 mov     eax, [esi+24h]
.text:00409EBD                 mov     [eax+15Ch], ebx
.text:00409EC3                 mov     eax, [esi+24h]
.text:00409EC6                 mov     [eax+160h], ebx
.text:00409ECC                 push    dword ptr [esi+4] ; hDlg
.text:00409ECF                 call    ds:IsDlgButtonChecked
.text:00409ED5                 cmp     eax, ebx
.text:00409ED7                 mov     eax, [esi+24h]
.text:00409EDA                 jnz     loc_40A299
.text:00409EE0                 mov     [eax+16Ch], bl
.text:00409EE6                 mov     eax, [esi+24h]
.text:00409EE9                 push    118h            ; nIDButton
.text:00409EEE                 mov     [eax+180h], ebx
.text:00409EF4                 mov     eax, [esi+24h]
.text:00409EF7                 mov     [eax+184h], ebx
.text:00409EFD                 push    dword ptr [esi+4] ; hDlg
.text:00409F00                 call    ds:IsDlgButtonChecked
.text:00409F06                 cmp     eax, ebx
.text:00409F08                 jnz     loc_40A169
.text:00409F0E                 push    edi             ; cchMax
.text:00409F0F                 lea     eax, [ebp+String]
.text:00409F15                 push    eax             ; lpString
.text:00409F16                 push    11Ch            ; nIDDlgItem
.text:00409F1B                 push    dword ptr [esi+4] ; hDlg
.text:00409F1E                 call    ds:GetDlgItemTextW
.text:00409F24                 test    eax, eax
.text:00409F26                 jz      loc_40A169
.text:00409F2C                 push    4
.text:00409F2E                 mov     ecx, offset a1394 ; "1394"
.text:00409F33                 lea     eax, [ebp+String]
.text:00409F39                 pop     edi
.text:00409F3A
.text:00409F3A loc_409F3A:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+264↓j
.text:00409F3A                 mov     dx, [eax]
.text:00409F3D                 cmp     dx, [ecx]
.text:00409F40                 jnz     short loc_409F5E
.text:00409F42                 test    dx, dx
.text:00409F45                 jz      short loc_409F5A
.text:00409F47                 mov     dx, [eax+2]
.text:00409F4B                 cmp     dx, [ecx+2]
.text:00409F4F                 jnz     short loc_409F5E
.text:00409F51                 add     eax, edi
.text:00409F53                 add     ecx, edi
.text:00409F55                 test    dx, dx
.text:00409F58                 jnz     short loc_409F3A
.text:00409F5A
.text:00409F5A loc_409F5A:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+251↑j
.text:00409F5A                 xor     eax, eax
.text:00409F5C                 jmp     short loc_409F62
.text:00409F5E ; ---------------------------------------------------------------------------
.text:00409F5E
.text:00409F5E loc_409F5E:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+24C↑j
.text:00409F5E                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+25B↑j
.text:00409F5E                 sbb     eax, eax
.text:00409F60                 or      eax, ebx
.text:00409F62
.text:00409F62 loc_409F62:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+268↑j
.text:00409F62                 test    eax, eax
.text:00409F64                 jnz     short loc_409F95
.text:00409F66                 and     dword_413864, eax
.text:00409F6C                 mov     dword_413860, ebx
.text:00409F72                 mov     dword_413874, ebx
.text:00409F78                 mov     dword_413878, ebx
.text:00409F7E                 cmp     dword_41389C, ebx
.text:00409F84                 jnz     loc_40A14B
.text:00409F8A                 and     dword_41389C, eax
.text:00409F90                 jmp     loc_40A145
.text:00409F95 ; ---------------------------------------------------------------------------
.text:00409F95
.text:00409F95 loc_409F95:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+270↑j
.text:00409F95                 mov     ecx, offset aUsb ; "USB"
.text:00409F9A                 lea     eax, [ebp+String]
.text:00409FA0
.text:00409FA0 loc_409FA0:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+2CA↓j
.text:00409FA0                 mov     dx, [eax]
.text:00409FA3                 cmp     dx, [ecx]
.text:00409FA6                 jnz     short loc_409FC6
.text:00409FA8                 test    dx, dx
.text:00409FAB                 jz      short loc_409FC0
.text:00409FAD                 mov     dx, [eax+2]
.text:00409FB1                 cmp     dx, [ecx+2]
.text:00409FB5                 jnz     short loc_409FC6
.text:00409FB7                 add     eax, edi
.text:00409FB9                 add     ecx, edi
.text:00409FBB                 test    dx, dx
.text:00409FBE                 jnz     short loc_409FA0
.text:00409FC0
.text:00409FC0 loc_409FC0:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+2B7↑j
.text:00409FC0                 xor     ecx, ecx
.text:00409FC2                 mov     eax, ecx
.text:00409FC4                 jmp     short loc_409FCC
.text:00409FC6 ; ---------------------------------------------------------------------------
.text:00409FC6
.text:00409FC6 loc_409FC6:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+2B2↑j
.text:00409FC6                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+2C1↑j
.text:00409FC6                 sbb     eax, eax
.text:00409FC8                 or      eax, ebx
.text:00409FCA                 xor     ecx, ecx
.text:00409FCC
.text:00409FCC loc_409FCC:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+2D0↑j
.text:00409FCC                 test    eax, eax
.text:00409FCE                 jnz     loc_40A104
.text:00409FD4                 push    2
.text:00409FD6                 pop     eax
.text:00409FD7                 cmp     dword_413860, eax
.text:00409FDD                 jnz     short loc_409FE7
.text:00409FDF                 cmp     dword_413864, ecx
.text:00409FE5                 jz      short loc_409FFE
.text:00409FE7
.text:00409FE7 loc_409FE7:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+2E9↑j
.text:00409FE7                 mov     dword_413860, eax
.text:00409FEC                 mov     dword_413864, ecx
.text:00409FF2                 mov     dword_413874, ebx
.text:00409FF8                 mov     dword_413878, ebx
.text:00409FFE
.text:00409FFE loc_409FFE:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+2F1↑j
.text:00409FFE                 cmp     dword_41389C, ebx
.text:0040A004                 jnz     short loc_40A012
.text:0040A006                 mov     dword_413898, ebx
.text:0040A00C                 mov     dword_41389C, ecx
.text:0040A012
.text:0040A012 loc_40A012:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+310↑j
.text:0040A012                 cmp     [esi+20h], ecx
.text:0040A015                 jz      short loc_40A085
.text:0040A017                 push    3F7h            ; nIDDlgItem
.text:0040A01C                 push    dword ptr [esi+4] ; hDlg
.text:0040A01F                 call    ds:GetDlgItem
.text:0040A025                 mov     ebx, eax
.text:0040A027                 test    ebx, ebx
.text:0040A029                 jz      short loc_40A082
.text:0040A02B                 push    ebx             ; hWnd
.text:0040A02C                 call    ds:GetWindowTextLengthW
.text:0040A032                 lea     edi, [eax+1]
.text:0040A035                 mov     eax, Block
.text:0040A03A                 test    eax, eax
.text:0040A03C                 jz      short loc_40A046
.text:0040A03E                 push    eax             ; Block
.text:0040A03F                 call    ds:__imp_free
.text:0040A045                 pop     ecx
.text:0040A046
.text:0040A046 loc_40A046:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+348↑j
.text:0040A046                 push    2               ; Size
.text:0040A048                 push    edi             ; Count
.text:0040A049                 call    ds:calloc
.text:0040A04F                 mov     Block, eax
.text:0040A054                 pop     ecx
.text:0040A055                 pop     ecx
.text:0040A056                 test    eax, eax
.text:0040A058                 jz      short loc_40A074
.text:0040A05A                 push    edi             ; nMaxCount
.text:0040A05B                 push    eax             ; lpString
.text:0040A05C                 push    ebx             ; hWnd
.text:0040A05D                 call    ds:GetWindowTextW
.text:0040A063                 xor     ebx, ebx
.text:0040A065                 inc     ebx
.text:0040A066                 mov     dword_413904, ebx
.text:0040A06C                 mov     dword_413908, ebx
.text:0040A072                 jmp     short loc_40A085
.text:0040A074 ; ---------------------------------------------------------------------------
.text:0040A074
.text:0040A074 loc_40A074:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+364↑j
.text:0040A074                 and     dword_413904, 0
.text:0040A07B                 and     dword_413908, 0
.text:0040A082
.text:0040A082 loc_40A082:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+335↑j
.text:0040A082                 xor     ebx, ebx
.text:0040A084                 inc     ebx
.text:0040A085
.text:0040A085 loc_40A085:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+321↑j
.text:0040A085                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+37E↑j ...
.text:0040A085                 mov     edi, 119h
.text:0040A08A                 push    edi             ; nIDDlgItem
.text:0040A08B                 push    dword ptr [esi+4] ; hDlg
.text:0040A08E                 call    ds:GetDlgItem
.text:0040A094                 test    eax, eax
.text:0040A096                 jz      loc_40A1BA
.text:0040A09C                 push    eax             ; hWnd
.text:0040A09D                 call    ds:IsWindowEnabled
.text:0040A0A3                 test    eax, eax
.text:0040A0A5                 jz      loc_40A1A4
.text:0040A0AB                 push    edi             ; nIDButton
.text:0040A0AC                 push    dword ptr [esi+4] ; hDlg
.text:0040A0AF                 call    ds:IsDlgButtonChecked
.text:0040A0B5                 cmp     eax, ebx
.text:0040A0B7                 jnz     loc_40A1A4
.text:0040A0BD                 push    104h            ; cchMax
.text:0040A0C2                 lea     eax, [ebp+String]
.text:0040A0C8                 push    eax             ; lpString
.text:0040A0C9                 push    120h            ; nIDDlgItem
.text:0040A0CE                 push    dword ptr [esi+4] ; hDlg
.text:0040A0D1                 call    ds:GetDlgItemTextW
.text:0040A0D7                 test    eax, eax
.text:0040A0D9                 jz      loc_40A1A4
.text:0040A0DF                 lea     eax, [ebp+String]
.text:0040A0E5                 push    eax             ; String
.text:0040A0E6                 call    ds:_wtol
.text:0040A0EC                 cdq
.text:0040A0ED                 pop     ecx
.text:0040A0EE                 mov     Value, eax
.text:0040A0F3                 mov     dword_4138AC, edx
.text:0040A0F9                 mov     dword_4138C0, ebx
.text:0040A0FF                 jmp     loc_40A1B4
.text:0040A104 ; ---------------------------------------------------------------------------
.text:0040A104
.text:0040A104 loc_40A104:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+2DA↑j
.text:0040A104                 xor     eax, eax
.text:0040A106                 mov     dword_413860, ecx
.text:0040A10C                 mov     [ebp+var_202], ax
.text:0040A113                 lea     eax, [ebp+var_206]
.text:0040A119                 push    eax             ; String
.text:0040A11A                 mov     dword_413864, ecx
.text:0040A120                 mov     dword_413874, ebx
.text:0040A126                 mov     dword_413878, ebx
.text:0040A12C                 call    ds:_wtol
.text:0040A132                 cdq
.text:0040A133                 pop     ecx
.text:0040A134                 mov     dword_413884, eax
.text:0040A139                 mov     dword_413888, edx
.text:0040A13F                 mov     dword_41389C, ebx
.text:0040A145
.text:0040A145 loc_40A145:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+29C↑j
.text:0040A145                 mov     dword_413898, ebx
.text:0040A14B
.text:0040A14B loc_40A14B:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+290↑j
.text:0040A14B                 cmp     dword_413908, ebx
.text:0040A151                 jnz     loc_40A085
.text:0040A157
.text:0040A157 loc_40A157:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+4AE↓j
.text:0040A157                 and     dword_413908, 0
.text:0040A15E                 mov     dword_413904, ebx
.text:0040A164                 jmp     loc_40A085
.text:0040A169 ; ---------------------------------------------------------------------------
.text:0040A169
.text:0040A169 loc_40A169:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+214↑j
.text:0040A169                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+232↑j
.text:0040A169                 cmp     dword_413878, 0
.text:0040A170                 jz      short loc_40A17F
.text:0040A172                 and     dword_413878, 0
.text:0040A179                 mov     dword_413874, ebx
.text:0040A17F
.text:0040A17F loc_40A17F:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+47C↑j
.text:0040A17F                 cmp     dword_41389C, 0
.text:0040A186                 jz      short loc_40A195
.text:0040A188                 and     dword_41389C, 0
.text:0040A18F                 mov     dword_413898, ebx
.text:0040A195
.text:0040A195 loc_40A195:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+492↑j
.text:0040A195                 cmp     dword_413908, 0
.text:0040A19C                 jz      loc_40A085
.text:0040A1A2                 jmp     short loc_40A157
.text:0040A1A4 ; ---------------------------------------------------------------------------
.text:0040A1A4
.text:0040A1A4 loc_40A1A4:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+3B1↑j
.text:0040A1A4                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+3C3↑j ...
.text:0040A1A4                 cmp     dword_4138C0, 0
.text:0040A1AB                 jz      short loc_40A1BA
.text:0040A1AD                 and     dword_4138C0, 0
.text:0040A1B4
.text:0040A1B4 loc_40A1B4:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+40B↑j
.text:0040A1B4                 mov     dword_4138BC, ebx
.text:0040A1BA
.text:0040A1BA loc_40A1BA:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+3A2↑j
.text:0040A1BA                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+4B7↑j
.text:0040A1BA                 mov     edi, 11Eh
.text:0040A1BF                 push    edi             ; nIDDlgItem
.text:0040A1C0                 push    dword ptr [esi+4] ; hDlg
.text:0040A1C3                 call    ds:GetDlgItem
.text:0040A1C9                 test    eax, eax
.text:0040A1CB                 jz      loc_40A2B2
.text:0040A1D1                 push    eax             ; hWnd
.text:0040A1D2                 call    ds:IsWindowEnabled
.text:0040A1D8                 test    eax, eax
.text:0040A1DA                 jz      loc_40A281
.text:0040A1E0                 push    edi             ; nIDButton
.text:0040A1E1                 push    dword ptr [esi+4] ; hDlg
.text:0040A1E4                 call    ds:IsDlgButtonChecked
.text:0040A1EA                 cmp     eax, ebx
.text:0040A1EC                 jnz     loc_40A281
.text:0040A1F2                 push    104h            ; cchMax
.text:0040A1F7                 lea     eax, [ebp+String]
.text:0040A1FD                 push    eax             ; lpString
.text:0040A1FE                 push    11Fh            ; nIDDlgItem
.text:0040A203                 push    dword ptr [esi+4] ; hDlg
.text:0040A206                 call    ds:GetDlgItemTextW
.text:0040A20C                 test    eax, eax
.text:0040A20E                 jz      short loc_40A281
.text:0040A210                 lea     eax, [ebp+String]
.text:0040A216                 push    eax             ; String
.text:0040A217                 call    ds:_wtol
.text:0040A21D                 mov     edi, eax
.text:0040A21F                 pop     ecx
.text:0040A220                 cmp     eax, ebx
.text:0040A222                 jge     short loc_40A226
.text:0040A224                 mov     edi, ebx
.text:0040A226
.text:0040A226 loc_40A226:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+52E↑j
.text:0040A226                 cmp     edi, 3Eh ; '>'
.text:0040A229                 jle     short loc_40A22E
.text:0040A22B                 push    3Eh ; '>'
.text:0040A22D                 pop     edi
.text:0040A22E
.text:0040A22E loc_40A22E:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+535↑j
.text:0040A22E                 cmp     eax, edi
.text:0040A230                 jz      short loc_40A265
.text:0040A232                 push    edi             ; Args
.text:0040A233                 push    offset Format   ; "%d"
.text:0040A238                 lea     eax, [ebp+String]
.text:0040A23E                 push    104h            ; int
.text:0040A243                 push    eax             ; Buffer
.text:0040A244                 call    ?StringCchPrintfW@@YAJPAGIPBGZZ_0 ; StringCchPrintfW(ushort *,uint,ushort const *,...)
.text:0040A249                 add     esp, 10h
.text:0040A24C                 test    eax, eax
.text:0040A24E                 js      short loc_40A265
.text:0040A250                 lea     eax, [ebp+String]
.text:0040A256                 push    eax             ; lpString
.text:0040A257                 push    11Fh            ; nIDDlgItem
.text:0040A25C                 push    dword ptr [esi+4] ; hDlg
.text:0040A25F                 call    ds:SetDlgItemTextW
.text:0040A265
.text:0040A265 loc_40A265:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+53C↑j
.text:0040A265                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+55A↑j
.text:0040A265                 mov     eax, edi
.text:0040A267                 mov     dword_4138E0, ebx
.text:0040A26D                 cdq
.text:0040A26E                 mov     uValue, eax
.text:0040A273                 mov     dword_4138D0, edx
.text:0040A279                 mov     dword_4138E4, ebx
.text:0040A27F                 jmp     short loc_40A2B2
.text:0040A281 ; ---------------------------------------------------------------------------
.text:0040A281
.text:0040A281 loc_40A281:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+4E6↑j
.text:0040A281                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+4F8↑j ...
.text:0040A281                 cmp     dword_4138E4, 0
.text:0040A288                 jz      short loc_40A2B2
.text:0040A28A                 and     dword_4138E4, 0
.text:0040A291                 mov     dword_4138E0, ebx
.text:0040A297                 jmp     short loc_40A2B2
.text:0040A299 ; ---------------------------------------------------------------------------
.text:0040A299
.text:0040A299 loc_40A299:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+1E6↑j
.text:0040A299                 cmp     dword ptr [eax+184h], 0
.text:0040A2A0                 jz      short loc_40A2B2
.text:0040A2A2                 mov     byte ptr [eax+16Ch], 0
.text:0040A2A9                 mov     eax, [esi+24h]
.text:0040A2AC                 mov     [eax+180h], ebx
.text:0040A2B2
.text:0040A2B2 loc_40A2B2:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+4D7↑j
.text:0040A2B2                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+58B↑j ...
.text:0040A2B2                 pop     edi
.text:0040A2B3                 pop     ebx
.text:0040A2B4
.text:0040A2B4 loc_40A2B4:                             ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+1C↑j
.text:0040A2B4                 mov     ecx, [ebp+var_4]
.text:0040A2B7                 xor     ecx, ebp        ; StackCookie
.text:0040A2B9                 pop     esi
.text:0040A2BA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040A2BF                 mov     esp, ebp
.text:0040A2C1                 pop     ebp
.text:0040A2C2                 retn
.text:0040A2C2 ?SaveBootStateFromDlgControls@CBootIniAdvancedDlg@@QAEXXZ endp
.text:0040A2C2
.text:0040A2C3
.text:0040A2C3 ; =============== S U B R O U T I N E =======================================
.text:0040A2C3
.text:0040A2C3
.text:0040A2C3 sub_40A2C3      proc near               ; CODE XREF: sub_40C2F0+A6↓p
.text:0040A2C3                 mov     edi, edi
.text:0040A2C5                 push    esi
.text:0040A2C6                 mov     esi, ecx
.text:0040A2C8                 push    119h            ; nIDButton
.text:0040A2CD                 push    dword ptr [esi+4] ; hDlg
.text:0040A2D0                 call    ds:IsDlgButtonChecked
.text:0040A2D6                 cmp     eax, 1
.text:0040A2D9                 jnz     short loc_40A31B
.text:0040A2DB                 push    ebx
.text:0040A2DC                 push    edi
.text:0040A2DD                 mov     ebx, 120h
.text:0040A2E2                 push    ebx             ; nIDDlgItem
.text:0040A2E3                 push    dword ptr [esi+4] ; hDlg
.text:0040A2E6                 call    ds:GetDlgItem
.text:0040A2EC                 xor     edi, edi
.text:0040A2EE                 push    edi             ; lParam
.text:0040A2EF                 push    edi             ; wParam
.text:0040A2F0                 push    147h            ; Msg
.text:0040A2F5                 push    eax             ; hWnd
.text:0040A2F6                 call    ds:SendMessageW
.text:0040A2FC                 cmp     eax, 0FFFFFFFFh
.text:0040A2FF                 jnz     short loc_40A319
.text:0040A301                 push    edi             ; lParam
.text:0040A302                 push    edi             ; wParam
.text:0040A303                 push    14Eh            ; Msg
.text:0040A308                 push    ebx             ; nIDDlgItem
.text:0040A309                 push    dword ptr [esi+4] ; hDlg
.text:0040A30C                 call    ds:GetDlgItem
.text:0040A312                 push    eax             ; hWnd
.text:0040A313                 call    ds:SendMessageW
.text:0040A319
.text:0040A319 loc_40A319:                             ; CODE XREF: sub_40A2C3+3C↑j
.text:0040A319                 pop     edi
.text:0040A31A                 pop     ebx
.text:0040A31B
.text:0040A31B loc_40A31B:                             ; CODE XREF: sub_40A2C3+16↑j
.text:0040A31B                 mov     ecx, esi
.text:0040A31D                 call    ?SetDlgControlState@CBootIniAdvancedDlg@@QAEXXZ ; CBootIniAdvancedDlg::SetDlgControlState(void)
.text:0040A322                 xor     eax, eax
.text:0040A324                 pop     esi
.text:0040A325                 retn    10h
.text:0040A325 sub_40A2C3      endp
.text:0040A325
.text:0040A328
.text:0040A328 ; =============== S U B R O U T I N E =======================================
.text:0040A328
.text:0040A328
.text:0040A328 sub_40A328      proc near               ; CODE XREF: sub_40C2F0+F0↓p
.text:0040A328                 mov     edi, edi
.text:0040A32A                 push    esi
.text:0040A32B                 push    edi
.text:0040A32C                 mov     esi, ecx
.text:0040A32E                 push    11Ch            ; nIDDlgItem
.text:0040A333                 push    dword ptr [esi+4] ; hDlg
.text:0040A336                 call    ds:GetDlgItem
.text:0040A33C                 mov     edi, eax
.text:0040A33E                 test    edi, edi
.text:0040A340                 jz      short loc_40A381
.text:0040A342                 push    118h            ; nIDButton
.text:0040A347                 push    dword ptr [esi+4] ; hDlg
.text:0040A34A                 call    ds:IsDlgButtonChecked
.text:0040A350                 cmp     eax, 1
.text:0040A353                 jnz     short loc_40A37A
.text:0040A355                 push    ebx
.text:0040A356                 xor     ebx, ebx
.text:0040A358                 push    ebx             ; lParam
.text:0040A359                 push    ebx             ; wParam
.text:0040A35A                 push    147h            ; Msg
.text:0040A35F                 push    edi             ; hWnd
.text:0040A360                 call    ds:SendMessageW
.text:0040A366                 cmp     eax, 0FFFFFFFFh
.text:0040A369                 jnz     short loc_40A379
.text:0040A36B                 push    ebx             ; lParam
.text:0040A36C                 push    ebx             ; wParam
.text:0040A36D                 push    14Eh            ; Msg
.text:0040A372                 push    edi             ; hWnd
.text:0040A373                 call    ds:SendMessageW
.text:0040A379
.text:0040A379 loc_40A379:                             ; CODE XREF: sub_40A328+41↑j
.text:0040A379                 pop     ebx
.text:0040A37A
.text:0040A37A loc_40A37A:                             ; CODE XREF: sub_40A328+2B↑j
.text:0040A37A                 mov     ecx, esi
.text:0040A37C                 call    ?SetDlgControlState@CBootIniAdvancedDlg@@QAEXXZ ; CBootIniAdvancedDlg::SetDlgControlState(void)
.text:0040A381
.text:0040A381 loc_40A381:                             ; CODE XREF: sub_40A328+18↑j
.text:0040A381                 pop     edi
.text:0040A382                 xor     eax, eax
.text:0040A384                 pop     esi
.text:0040A385                 retn    10h
.text:0040A385 sub_40A328      endp
.text:0040A385
.text:0040A388
.text:0040A388 ; =============== S U B R O U T I N E =======================================
.text:0040A388
.text:0040A388 ; Attributes: bp-based frame
.text:0040A388
.text:0040A388 sub_40A388      proc near               ; CODE XREF: sub_40C2F0+114↓p
.text:0040A388
.text:0040A388 lpString        = dword ptr -21Ch
.text:0040A388 String          = word ptr -218h
.text:0040A388 var_4           = dword ptr -4
.text:0040A388 arg_4           = dword ptr  0Ch
.text:0040A388
.text:0040A388 ; FUNCTION CHUNK AT .text:00411266 SIZE 00000034 BYTES
.text:0040A388
.text:0040A388 ; __unwind { // loc_411272
.text:0040A388                 push    210h
.text:0040A38D                 mov     eax, offset loc_411272
.text:0040A392                 call    __EH_prolog3_GS
.text:0040A397                 mov     esi, ecx
.text:0040A399                 push    114h            ; nIDButton
.text:0040A39E                 push    dword ptr [esi+4] ; hDlg
.text:0040A3A1                 call    ds:IsDlgButtonChecked
.text:0040A3A7                 cmp     eax, 1
.text:0040A3AA                 jnz     short loc_40A41D
.text:0040A3AC                 push    104h            ; cchMax
.text:0040A3B1                 lea     eax, [ebp+String]
.text:0040A3B7                 mov     edi, 11Dh
.text:0040A3BC                 push    eax             ; lpString
.text:0040A3BD                 push    edi             ; nIDDlgItem
.text:0040A3BE                 push    dword ptr [esi+4] ; hDlg
.text:0040A3C1                 call    ds:GetDlgItemTextW
.text:0040A3C7                 test    eax, eax
.text:0040A3C9                 jz      short loc_40A3D5
.text:0040A3CB                 cmp     [ebp+String], 30h ; '0'
.text:0040A3D3                 jnz     short loc_40A41D
.text:0040A3D5
.text:0040A3D5 loc_40A3D5:                             ; CODE XREF: sub_40A388+41↑j
.text:0040A3D5                 lea     ecx, [ebp+lpString]
.text:0040A3DB                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040A3E1 ;   try {
.text:0040A3E1                 and     [ebp+var_4], 0
.text:0040A3E5                 lea     eax, [ebp+lpString]
.text:0040A3EB                 push    dword ptr [esi+1Ch]
.text:0040A3EE                 push    offset Format   ; "%d"
.text:0040A3F3                 push    eax
.text:0040A3F4                 call    ds:?Format@CString@@QAAXPBGZZ ; CString::Format(ushort const *,...)
.text:0040A3FA                 add     esp, 0Ch
.text:0040A3FD                 push    [ebp+lpString]  ; lpString
.text:0040A403                 push    edi             ; nIDDlgItem
.text:0040A404                 push    dword ptr [esi+4] ; hDlg
.text:0040A407                 call    ds:SetDlgItemTextW
.text:0040A407 ;   } // starts at 40A3E1
.text:0040A40D                 or      [ebp+var_4], 0FFFFFFFFh
.text:0040A411                 lea     ecx, [ebp+lpString]
.text:0040A417                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040A41D
.text:0040A41D loc_40A41D:                             ; CODE XREF: sub_40A388+22↑j
.text:0040A41D                                         ; sub_40A388+4B↑j
.text:0040A41D                 mov     ecx, esi
.text:0040A41F                 call    ?SetDlgControlState@CBootIniAdvancedDlg@@QAEXXZ ; CBootIniAdvancedDlg::SetDlgControlState(void)
.text:0040A424                 xor     eax, eax
.text:0040A426                 call    __EH_epilog3_GS
.text:0040A42B                 retn    10h
.text:0040A42B ; } // starts at 40A388
.text:0040A42B sub_40A388      endp
.text:0040A42B
.text:0040A42E
.text:0040A42E ; =============== S U B R O U T I N E =======================================
.text:0040A42E
.text:0040A42E
.text:0040A42E sub_40A42E      proc near               ; CODE XREF: sub_40C2F0+138↓p
.text:0040A42E                 mov     edi, edi
.text:0040A430                 push    esi
.text:0040A431                 push    edi
.text:0040A432                 mov     esi, ecx
.text:0040A434                 push    11Bh            ; nIDDlgItem
.text:0040A439                 push    dword ptr [esi+4] ; hDlg
.text:0040A43C                 call    ds:GetDlgItem
.text:0040A442                 mov     edi, eax
.text:0040A444                 test    edi, edi
.text:0040A446                 jz      short loc_40A487
.text:0040A448                 push    115h            ; nIDButton
.text:0040A44D                 push    dword ptr [esi+4] ; hDlg
.text:0040A450                 call    ds:IsDlgButtonChecked
.text:0040A456                 cmp     eax, 1
.text:0040A459                 jnz     short loc_40A480
.text:0040A45B                 push    ebx
.text:0040A45C                 xor     ebx, ebx
.text:0040A45E                 push    ebx             ; lParam
.text:0040A45F                 push    ebx             ; wParam
.text:0040A460                 push    147h            ; Msg
.text:0040A465                 push    edi             ; hWnd
.text:0040A466                 call    ds:SendMessageW
.text:0040A46C                 cmp     eax, 0FFFFFFFFh
.text:0040A46F                 jnz     short loc_40A47F
.text:0040A471                 push    ebx             ; lParam
.text:0040A472                 push    ebx             ; wParam
.text:0040A473                 push    14Eh            ; Msg
.text:0040A478                 push    edi             ; hWnd
.text:0040A479                 call    ds:SendMessageW
.text:0040A47F
.text:0040A47F loc_40A47F:                             ; CODE XREF: sub_40A42E+41↑j
.text:0040A47F                 pop     ebx
.text:0040A480
.text:0040A480 loc_40A480:                             ; CODE XREF: sub_40A42E+2B↑j
.text:0040A480                 mov     ecx, esi
.text:0040A482                 call    ?SetDlgControlState@CBootIniAdvancedDlg@@QAEXXZ ; CBootIniAdvancedDlg::SetDlgControlState(void)
.text:0040A487
.text:0040A487 loc_40A487:                             ; CODE XREF: sub_40A42E+18↑j
.text:0040A487                 pop     edi
.text:0040A488                 xor     eax, eax
.text:0040A48A                 pop     esi
.text:0040A48B                 retn    10h
.text:0040A48B sub_40A42E      endp
.text:0040A48B
.text:0040A48E
.text:0040A48E ; =============== S U B R O U T I N E =======================================
.text:0040A48E
.text:0040A48E ; Attributes: bp-based frame
.text:0040A48E
.text:0040A48E sub_40A48E      proc near               ; CODE XREF: sub_40C2F0+162↓p
.text:0040A48E
.text:0040A48E String          = word ptr -20Ch
.text:0040A48E var_4           = dword ptr -4
.text:0040A48E
.text:0040A48E                 mov     edi, edi
.text:0040A490                 push    ebp
.text:0040A491                 mov     ebp, esp
.text:0040A493                 sub     esp, 20Ch
.text:0040A499                 mov     eax, ___security_cookie
.text:0040A49E                 xor     eax, ebp
.text:0040A4A0                 mov     [ebp+var_4], eax
.text:0040A4A3                 push    ebx
.text:0040A4A4                 push    esi
.text:0040A4A5                 push    edi
.text:0040A4A6                 mov     ebx, 104h
.text:0040A4AB                 lea     eax, [ebp+String]
.text:0040A4B1                 push    ebx             ; cchMax
.text:0040A4B2                 mov     esi, ecx
.text:0040A4B4                 push    eax             ; lpString
.text:0040A4B5                 lea     edi, [ebx+19h]
.text:0040A4B8                 push    edi             ; nIDDlgItem
.text:0040A4B9                 push    dword ptr [esi+4] ; hDlg
.text:0040A4BC                 call    ds:GetDlgItemTextW
.text:0040A4C2                 test    eax, eax
.text:0040A4C4                 jz      short loc_40A516
.text:0040A4C6                 lea     eax, [ebp+String]
.text:0040A4CC                 push    eax             ; String
.text:0040A4CD                 call    ds:_wtol
.text:0040A4D3                 lea     edx, [ebx-4]
.text:0040A4D6                 pop     ecx
.text:0040A4D7                 mov     ecx, eax
.text:0040A4D9                 cmp     eax, edx
.text:0040A4DB                 jge     short loc_40A4DF
.text:0040A4DD                 mov     ecx, edx
.text:0040A4DF
.text:0040A4DF loc_40A4DF:                             ; CODE XREF: sub_40A48E+4D↑j
.text:0040A4DF                 cmp     ecx, [esi+1Ch]
.text:0040A4E2                 jle     short loc_40A4E7
.text:0040A4E4                 mov     ecx, [esi+1Ch]
.text:0040A4E7
.text:0040A4E7 loc_40A4E7:                             ; CODE XREF: sub_40A48E+54↑j
.text:0040A4E7                 cmp     eax, ecx
.text:0040A4E9                 jz      short loc_40A516
.text:0040A4EB                 push    ecx             ; Args
.text:0040A4EC                 push    offset Format   ; "%d"
.text:0040A4F1                 lea     eax, [ebp+String]
.text:0040A4F7                 push    ebx             ; int
.text:0040A4F8                 push    eax             ; Buffer
.text:0040A4F9                 call    ?StringCchPrintfW@@YAJPAGIPBGZZ_0 ; StringCchPrintfW(ushort *,uint,ushort const *,...)
.text:0040A4FE                 add     esp, 10h
.text:0040A501                 test    eax, eax
.text:0040A503                 js      short loc_40A516
.text:0040A505                 lea     eax, [ebp+String]
.text:0040A50B                 push    eax             ; lpString
.text:0040A50C                 push    edi             ; nIDDlgItem
.text:0040A50D                 push    dword ptr [esi+4] ; hDlg
.text:0040A510                 call    ds:SetDlgItemTextW
.text:0040A516
.text:0040A516 loc_40A516:                             ; CODE XREF: sub_40A48E+36↑j
.text:0040A516                                         ; sub_40A48E+5B↑j ...
.text:0040A516                 mov     ecx, [ebp+var_4]
.text:0040A519                 xor     eax, eax
.text:0040A51B                 pop     edi
.text:0040A51C                 pop     esi
.text:0040A51D                 xor     ecx, ebp        ; StackCookie
.text:0040A51F                 pop     ebx
.text:0040A520                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040A525                 mov     esp, ebp
.text:0040A527                 pop     ebp
.text:0040A528                 retn    10h
.text:0040A528 sub_40A48E      endp
.text:0040A528
.text:0040A52B
.text:0040A52B ; =============== S U B R O U T I N E =======================================
.text:0040A52B
.text:0040A52B ; Attributes: bp-based frame
.text:0040A52B
.text:0040A52B sub_40A52B      proc near               ; CODE XREF: sub_40C2F0+19A↓p
.text:0040A52B
.text:0040A52B String          = word ptr -20Ch
.text:0040A52B var_4           = dword ptr -4
.text:0040A52B
.text:0040A52B                 mov     edi, edi
.text:0040A52D                 push    ebp
.text:0040A52E                 mov     ebp, esp
.text:0040A530                 sub     esp, 20Ch
.text:0040A536                 mov     eax, ___security_cookie
.text:0040A53B                 xor     eax, ebp
.text:0040A53D                 mov     [ebp+var_4], eax
.text:0040A540                 push    esi
.text:0040A541                 mov     esi, ecx
.text:0040A543                 push    11Eh            ; nIDButton
.text:0040A548                 push    dword ptr [esi+4] ; hDlg
.text:0040A54B                 call    ds:IsDlgButtonChecked
.text:0040A551                 cmp     eax, 1
.text:0040A554                 jnz     short loc_40A590
.text:0040A556                 push    edi
.text:0040A557                 push    104h            ; cchMax
.text:0040A55C                 lea     eax, [ebp+String]
.text:0040A562                 mov     edi, 11Fh
.text:0040A567                 push    eax             ; lpString
.text:0040A568                 push    edi             ; nIDDlgItem
.text:0040A569                 push    dword ptr [esi+4] ; hDlg
.text:0040A56C                 call    ds:GetDlgItemTextW
.text:0040A572                 test    eax, eax
.text:0040A574                 jz      short loc_40A580
.text:0040A576                 cmp     [ebp+String], 30h ; '0'
.text:0040A57E                 jnz     short loc_40A58F
.text:0040A580
.text:0040A580 loc_40A580:                             ; CODE XREF: sub_40A52B+49↑j
.text:0040A580                 push    offset a1       ; "1"
.text:0040A585                 push    edi             ; nIDDlgItem
.text:0040A586                 push    dword ptr [esi+4] ; hDlg
.text:0040A589                 call    ds:SetDlgItemTextW
.text:0040A58F
.text:0040A58F loc_40A58F:                             ; CODE XREF: sub_40A52B+53↑j
.text:0040A58F                 pop     edi
.text:0040A590
.text:0040A590 loc_40A590:                             ; CODE XREF: sub_40A52B+29↑j
.text:0040A590                 mov     ecx, esi
.text:0040A592                 call    ?SetDlgControlState@CBootIniAdvancedDlg@@QAEXXZ ; CBootIniAdvancedDlg::SetDlgControlState(void)
.text:0040A597                 mov     ecx, [ebp+var_4]
.text:0040A59A                 xor     eax, eax
.text:0040A59C                 xor     ecx, ebp        ; StackCookie
.text:0040A59E                 pop     esi
.text:0040A59F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040A5A4                 mov     esp, ebp
.text:0040A5A6                 pop     ebp
.text:0040A5A7                 retn    10h
.text:0040A5A7 sub_40A52B      endp
.text:0040A5A7
.text:0040A5AA
.text:0040A5AA ; =============== S U B R O U T I N E =======================================
.text:0040A5AA
.text:0040A5AA ; Attributes: bp-based frame
.text:0040A5AA
.text:0040A5AA sub_40A5AA      proc near               ; CODE XREF: sub_40C2F0+1C0↓p
.text:0040A5AA
.text:0040A5AA String          = word ptr -20Ch
.text:0040A5AA var_4           = dword ptr -4
.text:0040A5AA
.text:0040A5AA                 mov     edi, edi
.text:0040A5AC                 push    ebp
.text:0040A5AD                 mov     ebp, esp
.text:0040A5AF                 sub     esp, 20Ch
.text:0040A5B5                 mov     eax, ___security_cookie
.text:0040A5BA                 xor     eax, ebp
.text:0040A5BC                 mov     [ebp+var_4], eax
.text:0040A5BF                 push    ebx
.text:0040A5C0                 push    esi
.text:0040A5C1                 push    edi
.text:0040A5C2                 mov     ebx, 104h
.text:0040A5C7                 lea     eax, [ebp+String]
.text:0040A5CD                 push    ebx             ; cchMax
.text:0040A5CE                 mov     esi, ecx
.text:0040A5D0                 push    eax             ; lpString
.text:0040A5D1                 lea     edi, [ebx+1Bh]
.text:0040A5D4                 push    edi             ; nIDDlgItem
.text:0040A5D5                 push    dword ptr [esi+4] ; hDlg
.text:0040A5D8                 call    ds:GetDlgItemTextW
.text:0040A5DE                 test    eax, eax
.text:0040A5E0                 jz      short loc_40A631
.text:0040A5E2                 lea     eax, [ebp+String]
.text:0040A5E8                 push    eax             ; String
.text:0040A5E9                 call    ds:_wtol
.text:0040A5EF                 pop     ecx
.text:0040A5F0                 mov     ecx, eax
.text:0040A5F2                 cmp     eax, 1
.text:0040A5F5                 jge     short loc_40A5FA
.text:0040A5F7                 xor     ecx, ecx
.text:0040A5F9                 inc     ecx
.text:0040A5FA
.text:0040A5FA loc_40A5FA:                             ; CODE XREF: sub_40A5AA+4B↑j
.text:0040A5FA                 cmp     ecx, 3Eh ; '>'
.text:0040A5FD                 jle     short loc_40A602
.text:0040A5FF                 push    3Eh ; '>'
.text:0040A601                 pop     ecx
.text:0040A602
.text:0040A602 loc_40A602:                             ; CODE XREF: sub_40A5AA+53↑j
.text:0040A602                 cmp     eax, ecx
.text:0040A604                 jz      short loc_40A631
.text:0040A606                 push    ecx             ; Args
.text:0040A607                 push    offset Format   ; "%d"
.text:0040A60C                 lea     eax, [ebp+String]
.text:0040A612                 push    ebx             ; int
.text:0040A613                 push    eax             ; Buffer
.text:0040A614                 call    ?StringCchPrintfW@@YAJPAGIPBGZZ_0 ; StringCchPrintfW(ushort *,uint,ushort const *,...)
.text:0040A619                 add     esp, 10h
.text:0040A61C                 test    eax, eax
.text:0040A61E                 js      short loc_40A631
.text:0040A620                 lea     eax, [ebp+String]
.text:0040A626                 push    eax             ; lpString
.text:0040A627                 push    edi             ; nIDDlgItem
.text:0040A628                 push    dword ptr [esi+4] ; hDlg
.text:0040A62B                 call    ds:SetDlgItemTextW
.text:0040A631
.text:0040A631 loc_40A631:                             ; CODE XREF: sub_40A5AA+36↑j
.text:0040A631                                         ; sub_40A5AA+5A↑j ...
.text:0040A631                 mov     ecx, [ebp+var_4]
.text:0040A634                 xor     eax, eax
.text:0040A636                 pop     edi
.text:0040A637                 pop     esi
.text:0040A638                 xor     ecx, ebp        ; StackCookie
.text:0040A63A                 pop     ebx
.text:0040A63B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040A640                 mov     esp, ebp
.text:0040A642                 pop     ebp
.text:0040A643                 retn    10h
.text:0040A643 sub_40A5AA      endp
.text:0040A643
.text:0040A643 ; ---------------------------------------------------------------------------
.text:0040A646                 align 10h
.text:0040A650
.text:0040A650 ; =============== S U B R O U T I N E =======================================
.text:0040A650
.text:0040A650 ; Attributes: bp-based frame
.text:0040A650
.text:0040A650 ; int __stdcall sub_40A650(HWND hWnd, int, int, int)
.text:0040A650 sub_40A650      proc near               ; DATA XREF: .text:00402A0C↑o
.text:0040A650                                         ; sub_40B6C0+60↓o ...
.text:0040A650
.text:0040A650 var_4           = dword ptr -4
.text:0040A650 hWnd            = dword ptr  8
.text:0040A650 arg_4           = dword ptr  0Ch
.text:0040A650 arg_8           = dword ptr  10h
.text:0040A650 arg_C           = dword ptr  14h
.text:0040A650
.text:0040A650                 mov     edi, edi
.text:0040A652                 push    ebp
.text:0040A653                 mov     ebp, esp
.text:0040A655                 push    ecx
.text:0040A656                 mov     eax, ___security_cookie
.text:0040A65B                 xor     eax, ebp
.text:0040A65D                 mov     [ebp+var_4], eax
.text:0040A660                 push    ebx
.text:0040A661                 push    esi
.text:0040A662                 push    edi
.text:0040A663                 push    offset dword_4137D0
.text:0040A668                 call    ds:AtlModuleExtractCreateWndData
.text:0040A66E                 mov     ebx, [ebp+hWnd]
.text:0040A671                 mov     edi, eax
.text:0040A673                 mov     ecx, [edi]
.text:0040A675                 mov     [edi+4], ebx
.text:0040A678                 mov     esi, [ecx+4]
.text:0040A67B                 mov     ecx, esi
.text:0040A67D                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040A683                 mov     ecx, edi
.text:0040A685                 call    esi
.text:0040A687                 cmp     dword ptr [edi+14h], 0
.text:0040A68B                 mov     esi, eax
.text:0040A68D                 jnz     short loc_40A69B
.text:0040A68F                 call    _AtlThunk_AllocateData@0 ; AtlThunk_AllocateData()
.text:0040A694                 mov     [edi+14h], eax
.text:0040A697                 test    eax, eax
.text:0040A699                 jz      short loc_40A6A5
.text:0040A69B
.text:0040A69B loc_40A69B:                             ; CODE XREF: sub_40A650+3D↑j
.text:0040A69B                 push    edi             ; FirstParameter
.text:0040A69C                 push    esi             ; Proc
.text:0040A69D                 push    dword ptr [edi+14h] ; Thunk
.text:0040A6A0                 call    _AtlThunk_InitData@12 ; AtlThunk_InitData(x,x,x)
.text:0040A6A5
.text:0040A6A5 loc_40A6A5:                             ; CODE XREF: sub_40A650+49↑j
.text:0040A6A5                 push    dword ptr [edi+14h] ; AtlThunkData_t *
.text:0040A6A8                 call    _AtlThunk_DataToCode@4 ; AtlThunk_DataToCode(x)
.text:0040A6AD                 mov     esi, eax
.text:0040A6AF                 push    esi             ; dwNewLong
.text:0040A6B0                 push    4               ; nIndex
.text:0040A6B2                 push    ebx             ; hWnd
.text:0040A6B3                 call    ds:SetWindowLongW
.text:0040A6B9                 push    [ebp+arg_C]
.text:0040A6BC                 mov     ecx, esi
.text:0040A6BE                 push    [ebp+arg_8]
.text:0040A6C1                 push    [ebp+arg_4]
.text:0040A6C4                 push    ebx
.text:0040A6C5                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040A6CB                 call    esi
.text:0040A6CD                 mov     ecx, [ebp+var_4]
.text:0040A6D0                 pop     edi
.text:0040A6D1                 pop     esi
.text:0040A6D2                 xor     ecx, ebp        ; StackCookie
.text:0040A6D4                 pop     ebx
.text:0040A6D5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040A6DA                 mov     esp, ebp
.text:0040A6DC                 pop     ebp
.text:0040A6DD                 retn    10h
.text:0040A6DD sub_40A650      endp
.text:0040A6DD
.text:0040A6E0
.text:0040A6E0 ; =============== S U B R O U T I N E =======================================
.text:0040A6E0
.text:0040A6E0 ; Attributes: bp-based frame info_from_lumina
.text:0040A6E0
.text:0040A6E0 ; HRESULT StringCchPrintfW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_LPCWSTR pszFormat, ...)
.text:0040A6E0 ?StringCchPrintfW@@YAJPAGIPBGZZ_0 proc near
.text:0040A6E0                                         ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+99↑p
.text:0040A6E0                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+550↑p ...
.text:0040A6E0
.text:0040A6E0 Buffer          = dword ptr  8
.text:0040A6E0 arg_4           = dword ptr  0Ch
.text:0040A6E0 Format          = dword ptr  10h
.text:0040A6E0 Args            = byte ptr  14h
.text:0040A6E0
.text:0040A6E0                 mov     edi, edi
.text:0040A6E2                 push    ebp
.text:0040A6E3                 mov     ebp, esp
.text:0040A6E5                 mov     eax, [ebp+arg_4]
.text:0040A6E8                 push    esi
.text:0040A6E9                 xor     esi, esi
.text:0040A6EB                 test    eax, eax
.text:0040A6ED                 jz      short loc_40A6F6
.text:0040A6EF                 cmp     eax, 7FFFFFFFh
.text:0040A6F4                 jbe     short loc_40A6FB
.text:0040A6F6
.text:0040A6F6 loc_40A6F6:                             ; CODE XREF: StringCchPrintfW(ushort *,uint,ushort const *,...)+D↑j
.text:0040A6F6                 mov     esi, 80070057h
.text:0040A6FB
.text:0040A6FB loc_40A6FB:                             ; CODE XREF: StringCchPrintfW(ushort *,uint,ushort const *,...)+14↑j
.text:0040A6FB                 test    esi, esi
.text:0040A6FD                 js      short loc_40A736
.text:0040A6FF                 push    ebx
.text:0040A700                 mov     ebx, [ebp+Buffer]
.text:0040A703                 xor     esi, esi
.text:0040A705                 push    edi
.text:0040A706                 lea     edi, [eax-1]
.text:0040A709                 lea     eax, [ebp+Args]
.text:0040A70C                 push    eax             ; Args
.text:0040A70D                 push    [ebp+Format]    ; Format
.text:0040A710                 push    edi             ; BufferCount
.text:0040A711                 push    ebx             ; Buffer
.text:0040A712                 call    ds:_vsnwprintf
.text:0040A718                 add     esp, 10h
.text:0040A71B                 test    eax, eax
.text:0040A71D                 js      short loc_40A727
.text:0040A71F                 cmp     eax, edi
.text:0040A721                 ja      short loc_40A727
.text:0040A723                 jnz     short loc_40A732
.text:0040A725                 jmp     short loc_40A72C
.text:0040A727 ; ---------------------------------------------------------------------------
.text:0040A727
.text:0040A727 loc_40A727:                             ; CODE XREF: StringCchPrintfW(ushort *,uint,ushort const *,...)+3D↑j
.text:0040A727                                         ; StringCchPrintfW(ushort *,uint,ushort const *,...)+41↑j
.text:0040A727                 mov     esi, 8007007Ah
.text:0040A72C
.text:0040A72C loc_40A72C:                             ; CODE XREF: StringCchPrintfW(ushort *,uint,ushort const *,...)+45↑j
.text:0040A72C                 xor     eax, eax
.text:0040A72E                 mov     [ebx+edi*2], ax
.text:0040A732
.text:0040A732 loc_40A732:                             ; CODE XREF: StringCchPrintfW(ushort *,uint,ushort const *,...)+43↑j
.text:0040A732                 pop     edi
.text:0040A733                 pop     ebx
.text:0040A734                 jmp     short loc_40A742
.text:0040A736 ; ---------------------------------------------------------------------------
.text:0040A736
.text:0040A736 loc_40A736:                             ; CODE XREF: StringCchPrintfW(ushort *,uint,ushort const *,...)+1D↑j
.text:0040A736                 test    eax, eax
.text:0040A738                 jz      short loc_40A742
.text:0040A73A                 mov     ecx, [ebp+Buffer]
.text:0040A73D                 xor     eax, eax
.text:0040A73F                 mov     [ecx], ax
.text:0040A742
.text:0040A742 loc_40A742:                             ; CODE XREF: StringCchPrintfW(ushort *,uint,ushort const *,...)+54↑j
.text:0040A742                                         ; StringCchPrintfW(ushort *,uint,ushort const *,...)+58↑j
.text:0040A742                 mov     eax, esi
.text:0040A744                 pop     esi
.text:0040A745                 pop     ebp
.text:0040A746                 retn
.text:0040A746 ?StringCchPrintfW@@YAJPAGIPBGZZ_0 endp
.text:0040A746
.text:0040A747
.text:0040A747 ; =============== S U B R O U T I N E =======================================
.text:0040A747
.text:0040A747 ; Attributes: bp-based frame
.text:0040A747
.text:0040A747 ; int __thiscall sub_40A747(HWND hWnd, int)
.text:0040A747 sub_40A747      proc near               ; CODE XREF: CPageBootIni::ReDrawOSListBox(void)+1E5↓p
.text:0040A747
.text:0040A747 psizl           = tagSIZE ptr -54h
.text:0040A747 h               = dword ptr -4Ch
.text:0040A747 var_48          = dword ptr -48h
.text:0040A747 lpString        = dword ptr -44h
.text:0040A747 tm              = tagTEXTMETRICW ptr -40h
.text:0040A747 var_4           = dword ptr -4
.text:0040A747 arg_0           = dword ptr  8
.text:0040A747
.text:0040A747                 mov     edi, edi
.text:0040A749                 push    ebp
.text:0040A74A                 mov     ebp, esp
.text:0040A74C                 sub     esp, 54h
.text:0040A74F                 mov     eax, ___security_cookie
.text:0040A754                 xor     eax, ebp
.text:0040A756                 mov     [ebp+var_4], eax
.text:0040A759                 mov     eax, [ebp+arg_0]
.text:0040A75C                 push    ebx
.text:0040A75D                 push    esi
.text:0040A75E                 push    edi
.text:0040A75F                 mov     ebx, ecx
.text:0040A761                 mov     [ebp+lpString], edx
.text:0040A764                 push    ebx             ; hWnd
.text:0040A765                 mov     [ebp+var_48], eax
.text:0040A768                 xor     esi, esi
.text:0040A76A                 call    ds:GetDC
.text:0040A770                 mov     edi, eax
.text:0040A772                 test    edi, edi
.text:0040A774                 jnz     short loc_40A780
.text:0040A776                 mov     esi, 80004005h
.text:0040A77B                 jmp     loc_40A810
.text:0040A780 ; ---------------------------------------------------------------------------
.text:0040A780
.text:0040A780 loc_40A780:                             ; CODE XREF: sub_40A747+2D↑j
.text:0040A780                 push    esi             ; lParam
.text:0040A781                 push    esi             ; wParam
.text:0040A782                 push    31h ; '1'       ; Msg
.text:0040A784                 push    ebx             ; hWnd
.text:0040A785                 call    ds:SendMessageW
.text:0040A78B                 test    eax, eax
.text:0040A78D                 jnz     short loc_40A796
.text:0040A78F
.text:0040A78F loc_40A78F:                             ; CODE XREF: sub_40A747+5C↓j
.text:0040A78F                 mov     esi, 80004005h
.text:0040A794                 jmp     short loc_40A808
.text:0040A796 ; ---------------------------------------------------------------------------
.text:0040A796
.text:0040A796 loc_40A796:                             ; CODE XREF: sub_40A747+46↑j
.text:0040A796                 push    eax             ; h
.text:0040A797                 push    edi             ; hdc
.text:0040A798                 call    ds:SelectObject
.text:0040A79E                 mov     [ebp+h], eax
.text:0040A7A1                 test    eax, eax
.text:0040A7A3                 jz      short loc_40A78F
.text:0040A7A5                 lea     eax, [ebp+tm]
.text:0040A7A8                 push    eax             ; lptm
.text:0040A7A9                 push    edi             ; hdc
.text:0040A7AA                 call    ds:GetTextMetricsW
.text:0040A7B0                 mov     edx, [ebp+lpString]
.text:0040A7B3                 mov     ecx, edx
.text:0040A7B5                 lea     eax, [ecx+2]
.text:0040A7B8                 mov     [ebp+lpString], eax
.text:0040A7BB
.text:0040A7BB loc_40A7BB:                             ; CODE XREF: sub_40A747+7D↓j
.text:0040A7BB                 mov     ax, [ecx]
.text:0040A7BE                 add     ecx, 2
.text:0040A7C1                 cmp     ax, si
.text:0040A7C4                 jnz     short loc_40A7BB
.text:0040A7C6                 sub     ecx, [ebp+lpString]
.text:0040A7C9                 lea     eax, [ebp+psizl]
.text:0040A7CC                 push    eax             ; psizl
.text:0040A7CD                 sar     ecx, 1
.text:0040A7CF                 push    ecx             ; c
.text:0040A7D0                 push    edx             ; lpString
.text:0040A7D1                 push    edi             ; hdc
.text:0040A7D2                 call    ds:GetTextExtentPoint32W
.text:0040A7D8                 test    eax, eax
.text:0040A7DA                 jnz     short loc_40A7F3
.text:0040A7DC                 call    ds:GetLastError
.text:0040A7E2                 mov     esi, eax
.text:0040A7E4                 test    esi, esi
.text:0040A7E6                 jle     short loc_40A808
.text:0040A7E8                 movzx   esi, si
.text:0040A7EB                 or      esi, 80070000h
.text:0040A7F1                 jmp     short loc_40A808
.text:0040A7F3 ; ---------------------------------------------------------------------------
.text:0040A7F3
.text:0040A7F3 loc_40A7F3:                             ; CODE XREF: sub_40A747+93↑j
.text:0040A7F3                 mov     ecx, [ebp+var_48]
.text:0040A7F6                 mov     eax, [ebp+tm.tmMaxCharWidth]
.text:0040A7F9                 push    [ebp+h]         ; h
.text:0040A7FC                 add     eax, [ebp+psizl._cx]
.text:0040A7FF                 push    edi             ; hdc
.text:0040A800                 mov     [ecx], eax
.text:0040A802                 call    ds:SelectObject
.text:0040A808
.text:0040A808 loc_40A808:                             ; CODE XREF: sub_40A747+4D↑j
.text:0040A808                                         ; sub_40A747+9F↑j ...
.text:0040A808                 push    edi             ; hDC
.text:0040A809                 push    ebx             ; hWnd
.text:0040A80A                 call    ds:ReleaseDC
.text:0040A810
.text:0040A810 loc_40A810:                             ; CODE XREF: sub_40A747+34↑j
.text:0040A810                 mov     ecx, [ebp+var_4]
.text:0040A813                 mov     eax, esi
.text:0040A815                 pop     edi
.text:0040A816                 pop     esi
.text:0040A817                 xor     ecx, ebp        ; StackCookie
.text:0040A819                 pop     ebx
.text:0040A81A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040A81F                 mov     esp, ebp
.text:0040A821                 pop     ebp
.text:0040A822                 retn    4
.text:0040A822 sub_40A747      endp
.text:0040A822
.text:0040A822 ; ---------------------------------------------------------------------------
.text:0040A825                 align 10h
.text:0040A830
.text:0040A830 ; =============== S U B R O U T I N E =======================================
.text:0040A830
.text:0040A830 ; Attributes: bp-based frame
.text:0040A830
.text:0040A830 sub_40A830      proc near               ; DATA XREF: .text:00401C3C↑o
.text:0040A830                                         ; .text:00402A10↑o
.text:0040A830
.text:0040A830 var_10          = dword ptr -10h
.text:0040A830 var_4           = dword ptr -4
.text:0040A830
.text:0040A830 ; FUNCTION CHUNK AT .text:00410A4D SIZE 00000023 BYTES
.text:0040A830
.text:0040A830 ; __unwind { // loc_410A55
.text:0040A830                 push    4
.text:0040A832                 mov     eax, offset loc_410A55
.text:0040A837                 call    __EH_prolog3
.text:0040A83C                 push    0C4h ; 'Ä'
.text:0040A841                 call    ds:__imp_??2@YAPAXI@Z ; operator new(uint)
.text:0040A847                 pop     ecx
.text:0040A848                 mov     ecx, eax
.text:0040A84A                 mov     [ebp+var_10], ecx
.text:0040A84D                 xor     eax, eax
.text:0040A84F ;   try {
.text:0040A84F                 mov     [ebp+var_4], eax
.text:0040A852                 test    ecx, ecx
.text:0040A854                 jz      short loc_40A85B
.text:0040A856                 call    sub_40A876
.text:0040A85B
.text:0040A85B loc_40A85B:                             ; CODE XREF: sub_40A830+24↑j
.text:0040A85B                 call    __EH_epilog3
.text:0040A860                 retn
.text:0040A860 ;   } // starts at 40A84F
.text:0040A860 ; } // starts at 40A830
.text:0040A860 sub_40A830      endp ; sp-analysis failed
.text:0040A860
.text:0040A860 ; ---------------------------------------------------------------------------
.text:0040A861                 align 10h
.text:0040A870
.text:0040A870 ; =============== S U B R O U T I N E =======================================
.text:0040A870
.text:0040A870
.text:0040A870 sub_40A870      proc near               ; DATA XREF: .text:const CPageBootIni::`vftable'↑o
.text:0040A870                                         ; .text:00402A14↑o
.text:0040A870                 mov     eax, offset off_401C30 ; "CPageBootIni"
.text:0040A875                 retn
.text:0040A875 sub_40A870      endp
.text:0040A875
.text:0040A876
.text:0040A876 ; =============== S U B R O U T I N E =======================================
.text:0040A876
.text:0040A876 ; Attributes: bp-based frame
.text:0040A876
.text:0040A876 sub_40A876      proc near               ; CODE XREF: sub_40A830+26↑p
.text:0040A876                                         ; sub_40CD8D+26↓p
.text:0040A876
.text:0040A876 var_4           = dword ptr -4
.text:0040A876
.text:0040A876                 mov     edi, edi
.text:0040A878                 push    ebp
.text:0040A879                 mov     ebp, esp
.text:0040A87B                 push    ecx
.text:0040A87C                 push    esi
.text:0040A87D                 push    edi
.text:0040A87E                 xor     edi, edi
.text:0040A880                 mov     esi, ecx
.text:0040A882                 push    edi
.text:0040A883                 push    6Ah ; 'j'
.text:0040A885                 mov     [ebp+var_4], esi
.text:0040A888                 call    ds:??0CPropertyPage@@QAE@II@Z ; CPropertyPage::CPropertyPage(uint,uint)
.text:0040A88E                 mov     [esi+94h], edi
.text:0040A894                 mov     eax, esi
.text:0040A896                 mov     [esi+98h], edi
.text:0040A89C                 mov     dword ptr [esi+90h], offset ??_7CPageBase@@6B@ ; const CPageBase::`vftable'
.text:0040A8A6                 or      dword ptr [esi+0A4h], 0FFFFFFFFh
.text:0040A8AD                 or      dword ptr [esi+0A8h], 0FFFFFFFFh
.text:0040A8B4                 mov     [esi+0B0h], edi
.text:0040A8BA                 mov     [esi+0B8h], edi
.text:0040A8C0                 mov     [esi+0C0h], edi
.text:0040A8C6                 mov     [esi+0ACh], edi
.text:0040A8CC                 mov     [esi+9Ch], edi
.text:0040A8D2                 mov     [esi+0A0h], edi
.text:0040A8D8                 mov     [esi+0BCh], edi
.text:0040A8DE                 pop     edi
.text:0040A8DF                 mov     dword ptr [esi], offset ??_7CPageBootIni@@6B@ ; const CPageBootIni::`vftable'
.text:0040A8E5                 mov     dword ptr [esi+90h], offset ??_7CPageBootIni@@6B@_0 ; const CPageBootIni::`vftable'
.text:0040A8EF                 pop     esi
.text:0040A8F0                 mov     esp, ebp
.text:0040A8F2                 pop     ebp
.text:0040A8F3                 retn
.text:0040A8F3 sub_40A876      endp
.text:0040A8F3
.text:0040A8F3 ; ---------------------------------------------------------------------------
.text:0040A8F4                 align 10h
.text:0040A900
.text:0040A900 ; =============== S U B R O U T I N E =======================================
.text:0040A900
.text:0040A900 ; Attributes: bp-based frame
.text:0040A900
.text:0040A900 sub_40A900      proc near               ; CODE XREF: sub_40C2B0+6↓j
.text:0040A900                                         ; DATA XREF: .text:00401B3C↑o ...
.text:0040A900
.text:0040A900 arg_0           = byte ptr  8
.text:0040A900
.text:0040A900                 mov     edi, edi
.text:0040A902                 push    ebp
.text:0040A903                 mov     ebp, esp
.text:0040A905                 push    esi
.text:0040A906                 mov     esi, ecx
.text:0040A908                 mov     dword ptr [esi], offset ??_7CPageBootIni@@6B@ ; const CPageBootIni::`vftable'
.text:0040A90E                 mov     dword ptr [esi+90h], offset ??_7CPageBootIni@@6B@_0 ; const CPageBootIni::`vftable'
.text:0040A918                 call    sub_40F6A0
.text:0040A91D                 mov     ecx, esi
.text:0040A91F                 mov     dword ptr [esi+90h], offset ??_7CPageBase@@6B@ ; const CPageBase::`vftable'
.text:0040A929                 call    ds:??1CPropertyPage@@UAE@XZ ; CPropertyPage::~CPropertyPage(void)
.text:0040A92F                 test    [ebp+arg_0], 1
.text:0040A933                 jz      short loc_40A93D
.text:0040A935                 push    esi
.text:0040A936                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:0040A93C                 pop     ecx
.text:0040A93D
.text:0040A93D loc_40A93D:                             ; CODE XREF: sub_40A900+33↑j
.text:0040A93D                 mov     eax, esi
.text:0040A93F                 pop     esi
.text:0040A940                 pop     ebp
.text:0040A941                 retn    4
.text:0040A941 sub_40A900      endp
.text:0040A941
.text:0040A941 ; ---------------------------------------------------------------------------
.text:0040A944                 align 10h
.text:0040A950
.text:0040A950 ; =============== S U B R O U T I N E =======================================
.text:0040A950
.text:0040A950
.text:0040A950 sub_40A950      proc near               ; DATA XREF: .text:00401B68↑o
.text:0040A950                                         ; .text:00402A1C↑o
.text:0040A950                 mov     eax, offset off_401B08
.text:0040A955                 retn
.text:0040A955 sub_40A950      endp
.text:0040A955
.text:0040A956
.text:0040A956 ; =============== S U B R O U T I N E =======================================
.text:0040A956
.text:0040A956
.text:0040A956 sub_40A956      proc near               ; CODE XREF: CPageBootIni::SelectLine(int)+7D↓p
.text:0040A956                                         ; sub_40AF10+33↓p ...
.text:0040A956                 mov     edi, edi
.text:0040A958                 push    ebx
.text:0040A959                 push    esi
.text:0040A95A                 push    edi
.text:0040A95B                 mov     edx, 0CEh ; 'Î'
.text:0040A960                 mov     edi, ecx
.text:0040A962                 or      esi, 0FFFFFFFFh
.text:0040A965                 call    sub_40DAA3
.text:0040A96A                 mov     ebx, eax
.text:0040A96C                 test    ebx, ebx
.text:0040A96E                 jz      short loc_40A9B0
.text:0040A970                 push    0               ; lParam
.text:0040A972                 push    0               ; wParam
.text:0040A974                 push    188h            ; Msg
.text:0040A979                 push    ebx             ; hWnd
.text:0040A97A                 call    ds:SendMessageW
.text:0040A980                 cmp     eax, [edi+0A4h]
.text:0040A986                 jl      short loc_40A9B0
.text:0040A988                 cmp     eax, [edi+0A8h]
.text:0040A98E                 jg      short loc_40A9B0
.text:0040A990                 push    0               ; lParam
.text:0040A992                 push    eax             ; wParam
.text:0040A993                 push    199h            ; Msg
.text:0040A998                 push    ebx             ; hWnd
.text:0040A999                 call    ds:SendMessageW
.text:0040A99F                 mov     esi, eax
.text:0040A9A1                 test    esi, esi
.text:0040A9A3                 js      short loc_40A9AD
.text:0040A9A5                 cmp     esi, dword_413AA0
.text:0040A9AB                 jb      short loc_40A9B0
.text:0040A9AD
.text:0040A9AD loc_40A9AD:                             ; CODE XREF: sub_40A956+4D↑j
.text:0040A9AD                 or      esi, 0FFFFFFFFh
.text:0040A9B0
.text:0040A9B0 loc_40A9B0:                             ; CODE XREF: sub_40A956+18↑j
.text:0040A9B0                                         ; sub_40A956+30↑j ...
.text:0040A9B0                 pop     edi
.text:0040A9B1                 mov     eax, esi
.text:0040A9B3                 pop     esi
.text:0040A9B4                 pop     ebx
.text:0040A9B5                 retn
.text:0040A9B5 sub_40A956      endp
.text:0040A9B5
.text:0040A9B6
.text:0040A9B6 ; =============== S U B R O U T I N E =======================================
.text:0040A9B6
.text:0040A9B6 ; Attributes: bp-based frame
.text:0040A9B6
.text:0040A9B6 sub_40A9B6      proc near               ; CODE XREF: sub_40AE70+10↓p
.text:0040A9B6                                         ; sub_40BF70+66↓p
.text:0040A9B6
.text:0040A9B6 arg_0           = dword ptr  8
.text:0040A9B6
.text:0040A9B6                 mov     edi, edi
.text:0040A9B8                 push    ebp
.text:0040A9B9                 mov     ebp, esp
.text:0040A9BB                 push    esi
.text:0040A9BC                 push    edi
.text:0040A9BD                 xor     edi, edi
.text:0040A9BF                 mov     esi, ecx
.text:0040A9C1                 push    edi
.text:0040A9C2                 push    124h
.text:0040A9C7                 call    ds:?CheckDlgButton@CWnd@@QAEXHI@Z ; CWnd::CheckDlgButton(int,uint)
.text:0040A9CD                 mov     ecx, [ebp+arg_0]
.text:0040A9D0                 mov     [esi+0C0h], edi
.text:0040A9D6                 call    sub_40F254
.text:0040A9DB                 test    eax, eax
.text:0040A9DD                 jnz     loc_40AA66
.text:0040A9E3                 push    ebx
.text:0040A9E4                 xor     ebx, ebx
.text:0040A9E6                 inc     ebx
.text:0040A9E7                 cmp     [ebp+arg_0], edi
.text:0040A9EA                 jz      short loc_40A9F2
.text:0040A9EC                 mov     [esi+0C0h], ebx
.text:0040A9F2
.text:0040A9F2 loc_40A9F2:                             ; CODE XREF: sub_40A9B6+34↑j
.text:0040A9F2                 mov     ecx, esi
.text:0040A9F4                 call    ?ReDrawOSListBox@CPageBootIni@@AAEJXZ ; CPageBootIni::ReDrawOSListBox(void)
.text:0040A9F9                 cmp     dword_413930, edi
.text:0040A9FF                 jz      short loc_40AA21
.text:0040AA01                 push    ebx
.text:0040AA02                 mov     [esi+0B0h], ebx
.text:0040AA08                 mov     ecx, esi
.text:0040AA0A                 push    dword_413918
.text:0040AA10                 push    0D6h ; 'Ö'
.text:0040AA15                 call    ds:?SetDlgItemInt@CWnd@@QAEXHIH@Z ; CWnd::SetDlgItemInt(int,uint,int)
.text:0040AA1B                 mov     [esi+0B0h], edi
.text:0040AA21
.text:0040AA21 loc_40AA21:                             ; CODE XREF: sub_40A9B6+49↑j
.text:0040AA21                 mov     eax, [esi+0A4h]
.text:0040AA27                 pop     ebx
.text:0040AA28                 test    eax, eax
.text:0040AA2A                 js      short loc_40AA6F
.text:0040AA2C                 cmp     [esi+0A8h], eax
.text:0040AA32                 jl      short loc_40AA6F
.text:0040AA34                 mov     edx, 0CEh ; 'Î'
.text:0040AA39                 mov     ecx, esi
.text:0040AA3B                 call    sub_40DAA3
.text:0040AA40                 test    eax, eax
.text:0040AA42                 jz      short loc_40AA6F
.text:0040AA44                 push    edi             ; lParam
.text:0040AA45                 push    dword ptr [esi+0A4h] ; wParam
.text:0040AA4B                 push    186h            ; Msg
.text:0040AA50                 push    eax             ; hWnd
.text:0040AA51                 call    ds:SendMessageW
.text:0040AA57                 push    dword ptr [esi+0A4h]
.text:0040AA5D                 mov     ecx, esi
.text:0040AA5F                 call    ?SelectLine@CPageBootIni@@QAEXH@Z ; CPageBootIni::SelectLine(int)
.text:0040AA64                 jmp     short loc_40AA6F
.text:0040AA66 ; ---------------------------------------------------------------------------
.text:0040AA66
.text:0040AA66 loc_40AA66:                             ; CODE XREF: sub_40A9B6+27↑j
.text:0040AA66                 push    edi
.text:0040AA67                 mov     ecx, esi
.text:0040AA69                 call    ds:?EnableWindow@CWnd@@QAEHH@Z ; CWnd::EnableWindow(int)
.text:0040AA6F
.text:0040AA6F loc_40AA6F:                             ; CODE XREF: sub_40A9B6+74↑j
.text:0040AA6F                                         ; sub_40A9B6+7C↑j ...
.text:0040AA6F                 pop     edi
.text:0040AA70                 pop     esi
.text:0040AA71                 pop     ebp
.text:0040AA72                 retn    4
.text:0040AA72 sub_40A9B6      endp
.text:0040AA72
.text:0040AA75
.text:0040AA75 ; =============== S U B R O U T I N E =======================================
.text:0040AA75
.text:0040AA75 ; Attributes: bp-based frame info_from_lumina
.text:0040AA75
.text:0040AA75 ; void __thiscall CPageBootIni::SelectLine(CPageBootIni *__hidden this, int)
.text:0040AA75 ?SelectLine@CPageBootIni@@QAEXH@Z proc near
.text:0040AA75                                         ; CODE XREF: sub_40A9B6+A9↑p
.text:0040AA75                                         ; sub_40AF10+176↓p ...
.text:0040AA75
.text:0040AA75 var_8           = dword ptr -8
.text:0040AA75 var_4           = dword ptr -4
.text:0040AA75 arg_0           = dword ptr  8
.text:0040AA75
.text:0040AA75                 mov     edi, edi
.text:0040AA77                 push    ebp
.text:0040AA78                 mov     ebp, esp
.text:0040AA7A                 push    ecx
.text:0040AA7B                 push    ecx
.text:0040AA7C                 push    esi
.text:0040AA7D                 mov     edx, 0CEh ; 'Î'
.text:0040AA82                 mov     esi, ecx
.text:0040AA84                 call    sub_40DAA3
.text:0040AA89                 test    eax, eax
.text:0040AA8B                 jz      loc_40ADBB
.text:0040AA91                 push    ebx
.text:0040AA92                 push    edi
.text:0040AA93                 mov     edi, [ebp+arg_0]
.text:0040AA96                 mov     ebx, 186h
.text:0040AA9B
.text:0040AA9B loc_40AA9B:                             ; CODE XREF: CPageBootIni::SelectLine(int)+74↓j
.text:0040AA9B                 mov     ecx, [esi+0A4h]
.text:0040AAA1                 mov     edx, [esi+0A8h]
.text:0040AAA7                 cmp     ecx, edx
.text:0040AAA9                 jg      loc_40ADB9
.text:0040AAAF                 cmp     edi, ecx
.text:0040AAB1                 jge     short loc_40AAC6
.text:0040AAB3                 push    0               ; lParam
.text:0040AAB5                 push    ecx             ; wParam
.text:0040AAB6                 push    ebx             ; Msg
.text:0040AAB7                 push    eax             ; hWnd
.text:0040AAB8                 call    ds:SendMessageW
.text:0040AABE                 mov     edi, [esi+0A4h]
.text:0040AAC4                 jmp     short loc_40AADB
.text:0040AAC6 ; ---------------------------------------------------------------------------
.text:0040AAC6
.text:0040AAC6 loc_40AAC6:                             ; CODE XREF: CPageBootIni::SelectLine(int)+3C↑j
.text:0040AAC6                 cmp     edi, edx
.text:0040AAC8                 jle     short loc_40AAF0
.text:0040AACA                 push    0               ; lParam
.text:0040AACC                 push    edx             ; wParam
.text:0040AACD                 push    ebx             ; Msg
.text:0040AACE                 push    eax             ; hWnd
.text:0040AACF                 call    ds:SendMessageW
.text:0040AAD5                 mov     edi, [esi+0A8h]
.text:0040AADB
.text:0040AADB loc_40AADB:                             ; CODE XREF: CPageBootIni::SelectLine(int)+4F↑j
.text:0040AADB                 mov     edx, 0CEh ; 'Î'
.text:0040AAE0                 mov     ecx, esi
.text:0040AAE2                 call    sub_40DAA3
.text:0040AAE7                 test    eax, eax
.text:0040AAE9                 jnz     short loc_40AA9B
.text:0040AAEB                 jmp     loc_40ADB9
.text:0040AAF0 ; ---------------------------------------------------------------------------
.text:0040AAF0
.text:0040AAF0 loc_40AAF0:                             ; CODE XREF: CPageBootIni::SelectLine(int)+53↑j
.text:0040AAF0                 mov     ecx, esi
.text:0040AAF2                 call    sub_40A956
.text:0040AAF7                 test    eax, eax
.text:0040AAF9                 js      loc_40ADB9
.text:0040AAFF                 imul    ebx, eax, 1D0h
.text:0040AB05                 add     ebx, hMem
.text:0040AB0B                 mov     [ebp+var_8], ebx
.text:0040AB0E                 jz      loc_40ADB9
.text:0040AB14                 xor     eax, eax
.text:0040AB16                 mov     [esi+9Ch], ebx
.text:0040AB1C                 cmp     [ebx+40h], eax
.text:0040AB1F                 mov     edi, 0D8h ; 'Ø'
.text:0040AB24                 mov     ecx, esi
.text:0040AB26                 setnz   al
.text:0040AB29                 push    eax
.text:0040AB2A                 push    edi
.text:0040AB2B                 call    ds:?CheckDlgButton@CWnd@@QAEXHI@Z ; CWnd::CheckDlgButton(int,uint)
.text:0040AB31                 xor     eax, eax
.text:0040AB33                 mov     ecx, esi
.text:0040AB35                 cmp     [ebx+70h], al
.text:0040AB38                 setnz   al
.text:0040AB3B                 push    eax
.text:0040AB3C                 push    0D9h ; 'Ù'
.text:0040AB41                 call    ds:?CheckDlgButton@CWnd@@QAEXHI@Z ; CWnd::CheckDlgButton(int,uint)
.text:0040AB47                 xor     eax, eax
.text:0040AB49                 mov     ecx, esi
.text:0040AB4B                 cmp     [ebx+94h], al
.text:0040AB51                 setnz   al
.text:0040AB54                 push    eax
.text:0040AB55                 push    0DAh ; 'Ú'
.text:0040AB5A                 call    ds:?CheckDlgButton@CWnd@@QAEXHI@Z ; CWnd::CheckDlgButton(int,uint)
.text:0040AB60                 xor     eax, eax
.text:0040AB62                 mov     ecx, esi
.text:0040AB64                 cmp     [ebx+0B8h], al
.text:0040AB6A                 setnz   al
.text:0040AB6D                 push    eax
.text:0040AB6E                 push    0DBh ; 'Û'
.text:0040AB73                 call    ds:?CheckDlgButton@CWnd@@QAEXHI@Z ; CWnd::CheckDlgButton(int,uint)
.text:0040AB79                 xor     eax, eax
.text:0040AB7B                 mov     ecx, esi
.text:0040AB7D                 cmp     [ebx+0DCh], al
.text:0040AB83                 setnz   al
.text:0040AB86                 push    eax
.text:0040AB87                 push    0DCh ; 'Ü'
.text:0040AB8C                 call    ds:?CheckDlgButton@CWnd@@QAEXHI@Z ; CWnd::CheckDlgButton(int,uint)
.text:0040AB92                 mov     edx, edi
.text:0040AB94                 mov     ecx, esi
.text:0040AB96                 call    sub_40DAA3
.text:0040AB9B                 xor     edi, edi
.text:0040AB9D                 inc     edi
.text:0040AB9E                 test    eax, eax
.text:0040ABA0                 jz      short loc_40ABAA
.text:0040ABA2                 push    edi             ; bEnable
.text:0040ABA3                 push    eax             ; hWnd
.text:0040ABA4                 call    ds:EnableWindow
.text:0040ABAA
.text:0040ABAA loc_40ABAA:                             ; CODE XREF: CPageBootIni::SelectLine(int)+12B↑j
.text:0040ABAA                 mov     edx, 0D9h ; 'Ù'
.text:0040ABAF                 mov     ecx, esi
.text:0040ABB1                 call    sub_40DAA3
.text:0040ABB6                 test    eax, eax
.text:0040ABB8                 jz      short loc_40ABC2
.text:0040ABBA                 push    edi             ; bEnable
.text:0040ABBB                 push    eax             ; hWnd
.text:0040ABBC                 call    ds:EnableWindow
.text:0040ABC2
.text:0040ABC2 loc_40ABC2:                             ; CODE XREF: CPageBootIni::SelectLine(int)+143↑j
.text:0040ABC2                 mov     edx, 0DAh ; 'Ú'
.text:0040ABC7                 mov     ecx, esi
.text:0040ABC9                 call    sub_40DAA3
.text:0040ABCE                 test    eax, eax
.text:0040ABD0                 jz      short loc_40ABDA
.text:0040ABD2                 push    edi             ; bEnable
.text:0040ABD3                 push    eax             ; hWnd
.text:0040ABD4                 call    ds:EnableWindow
.text:0040ABDA
.text:0040ABDA loc_40ABDA:                             ; CODE XREF: CPageBootIni::SelectLine(int)+15B↑j
.text:0040ABDA                 mov     edx, 0DBh ; 'Û'
.text:0040ABDF                 mov     ecx, esi
.text:0040ABE1                 call    sub_40DAA3
.text:0040ABE6                 test    eax, eax
.text:0040ABE8                 jz      short loc_40ABF2
.text:0040ABEA                 push    edi             ; bEnable
.text:0040ABEB                 push    eax             ; hWnd
.text:0040ABEC                 call    ds:EnableWindow
.text:0040ABF2
.text:0040ABF2 loc_40ABF2:                             ; CODE XREF: CPageBootIni::SelectLine(int)+173↑j
.text:0040ABF2                 mov     edx, 0DCh ; 'Ü'
.text:0040ABF7                 mov     ecx, esi
.text:0040ABF9                 call    sub_40DAA3
.text:0040ABFE                 test    eax, eax
.text:0040AC00                 jz      short loc_40AC0A
.text:0040AC02                 push    edi             ; bEnable
.text:0040AC03                 push    eax             ; hWnd
.text:0040AC04                 call    ds:EnableWindow
.text:0040AC0A
.text:0040AC0A loc_40AC0A:                             ; CODE XREF: CPageBootIni::SelectLine(int)+18B↑j
.text:0040AC0A                 mov     edx, 0CFh ; 'Ï'
.text:0040AC0F                 mov     ecx, esi
.text:0040AC11                 call    sub_40DAA3
.text:0040AC16                 test    eax, eax
.text:0040AC18                 jz      short loc_40AC22
.text:0040AC1A                 push    edi             ; bEnable
.text:0040AC1B                 push    eax             ; hWnd
.text:0040AC1C                 call    ds:EnableWindow
.text:0040AC22
.text:0040AC22 loc_40AC22:                             ; CODE XREF: CPageBootIni::SelectLine(int)+1A3↑j
.text:0040AC22                 mov     eax, [ebx+40h]
.text:0040AC25                 mov     edx, 0DEh ; 'Þ'
.text:0040AC2A                 mov     ecx, esi
.text:0040AC2C                 mov     [ebp+var_4], eax
.text:0040AC2F                 call    sub_40DAA3
.text:0040AC34                 test    eax, eax
.text:0040AC36                 jz      short loc_40AC48
.text:0040AC38                 xor     ecx, ecx
.text:0040AC3A                 cmp     [ebp+var_4], ecx
.text:0040AC3D                 setnz   cl
.text:0040AC40                 push    ecx             ; bEnable
.text:0040AC41                 push    eax             ; hWnd
.text:0040AC42                 call    ds:EnableWindow
.text:0040AC48
.text:0040AC48 loc_40AC48:                             ; CODE XREF: CPageBootIni::SelectLine(int)+1C1↑j
.text:0040AC48                 mov     edx, 0DFh ; 'ß'
.text:0040AC4D                 mov     ecx, esi
.text:0040AC4F                 call    sub_40DAA3
.text:0040AC54                 test    eax, eax
.text:0040AC56                 jz      short loc_40AC68
.text:0040AC58                 xor     ecx, ecx
.text:0040AC5A                 cmp     [ebp+var_4], ecx
.text:0040AC5D                 setnz   cl
.text:0040AC60                 push    ecx             ; bEnable
.text:0040AC61                 push    eax             ; hWnd
.text:0040AC62                 call    ds:EnableWindow
.text:0040AC68
.text:0040AC68 loc_40AC68:                             ; CODE XREF: CPageBootIni::SelectLine(int)+1E1↑j
.text:0040AC68                 mov     edx, 0E0h ; 'à'
.text:0040AC6D                 mov     ecx, esi
.text:0040AC6F                 call    sub_40DAA3
.text:0040AC74                 test    eax, eax
.text:0040AC76                 jz      short loc_40AC88
.text:0040AC78                 xor     ecx, ecx
.text:0040AC7A                 cmp     [ebp+var_4], ecx
.text:0040AC7D                 setnz   cl
.text:0040AC80                 push    ecx             ; bEnable
.text:0040AC81                 push    eax             ; hWnd
.text:0040AC82                 call    ds:EnableWindow
.text:0040AC88
.text:0040AC88 loc_40AC88:                             ; CODE XREF: CPageBootIni::SelectLine(int)+201↑j
.text:0040AC88                 mov     edx, 0E1h ; 'á'
.text:0040AC8D                 mov     ecx, esi
.text:0040AC8F                 call    sub_40DAA3
.text:0040AC94                 test    eax, eax
.text:0040AC96                 jz      short loc_40ACA8
.text:0040AC98                 xor     ecx, ecx
.text:0040AC9A                 cmp     [ebp+var_4], ecx
.text:0040AC9D                 setnz   cl
.text:0040ACA0                 push    ecx             ; bEnable
.text:0040ACA1                 push    eax             ; hWnd
.text:0040ACA2                 call    ds:EnableWindow
.text:0040ACA8
.text:0040ACA8 loc_40ACA8:                             ; CODE XREF: CPageBootIni::SelectLine(int)+221↑j
.text:0040ACA8                 cmp     [ebp+var_4], 0
.text:0040ACAC                 jz      loc_40AD5E
.text:0040ACB2                 push    0
.text:0040ACB4                 push    0E0h ; 'à'
.text:0040ACB9                 mov     ecx, esi
.text:0040ACBB                 call    ds:?CheckDlgButton@CWnd@@QAEXHI@Z ; CWnd::CheckDlgButton(int,uint)
.text:0040ACC1                 push    0
.text:0040ACC3                 push    0E1h ; 'á'
.text:0040ACC8                 mov     ecx, esi
.text:0040ACCA                 call    ds:?CheckDlgButton@CWnd@@QAEXHI@Z ; CWnd::CheckDlgButton(int,uint)
.text:0040ACD0                 push    0
.text:0040ACD2                 push    0DEh ; 'Þ'
.text:0040ACD7                 mov     ecx, esi
.text:0040ACD9                 call    ds:?CheckDlgButton@CWnd@@QAEXHI@Z ; CWnd::CheckDlgButton(int,uint)
.text:0040ACDF                 push    0
.text:0040ACE1                 push    0DFh ; 'ß'
.text:0040ACE6                 mov     ecx, esi
.text:0040ACE8                 call    ds:?CheckDlgButton@CWnd@@QAEXHI@Z ; CWnd::CheckDlgButton(int,uint)
.text:0040ACEE                 mov     eax, [ebx+28h]
.text:0040ACF1                 mov     ecx, [ebx+2Ch]
.text:0040ACF4                 or      eax, ecx
.text:0040ACF6                 jz      short loc_40AD43
.text:0040ACF8                 cmp     [ebx+28h], edi
.text:0040ACFB                 jnz     short loc_40AD36
.text:0040ACFD                 test    ecx, ecx
.text:0040ACFF                 jnz     short loc_40AD36
.text:0040AD01                 push    edi
.text:0040AD02                 push    0DEh ; 'Þ'
.text:0040AD07                 mov     ecx, esi
.text:0040AD09                 call    ds:?CheckDlgButton@CWnd@@QAEXHI@Z ; CWnd::CheckDlgButton(int,uint)
.text:0040AD0F                 push    0
.text:0040AD11                 push    0E0h ; 'à'
.text:0040AD16                 mov     ecx, esi
.text:0040AD18                 call    ds:?CheckDlgButton@CWnd@@QAEXHI@Z ; CWnd::CheckDlgButton(int,uint)
.text:0040AD1E                 push    0
.text:0040AD20                 push    0E1h ; 'á'
.text:0040AD25                 mov     ecx, esi
.text:0040AD27                 call    ds:?CheckDlgButton@CWnd@@QAEXHI@Z ; CWnd::CheckDlgButton(int,uint)
.text:0040AD2D                 push    0
.text:0040AD2F
.text:0040AD2F loc_40AD2F:                             ; CODE XREF: CPageBootIni::SelectLine(int)+2CC↓j
.text:0040AD2F                 push    0DFh ; 'ß'
.text:0040AD34                 jmp     short loc_40AD56
.text:0040AD36 ; ---------------------------------------------------------------------------
.text:0040AD36
.text:0040AD36 loc_40AD36:                             ; CODE XREF: CPageBootIni::SelectLine(int)+286↑j
.text:0040AD36                                         ; CPageBootIni::SelectLine(int)+28A↑j
.text:0040AD36                 cmp     dword ptr [ebx+28h], 2
.text:0040AD3A                 jnz     short loc_40AD5E
.text:0040AD3C                 test    ecx, ecx
.text:0040AD3E                 jnz     short loc_40AD5E
.text:0040AD40                 push    edi
.text:0040AD41                 jmp     short loc_40AD2F
.text:0040AD43 ; ---------------------------------------------------------------------------
.text:0040AD43
.text:0040AD43 loc_40AD43:                             ; CODE XREF: CPageBootIni::SelectLine(int)+281↑j
.text:0040AD43                 cmp     byte ptr [ebx+4Ch], 0
.text:0040AD47                 push    edi
.text:0040AD48                 jz      short loc_40AD51
.text:0040AD4A                 push    0E1h ; 'á'
.text:0040AD4F                 jmp     short loc_40AD56
.text:0040AD51 ; ---------------------------------------------------------------------------
.text:0040AD51
.text:0040AD51 loc_40AD51:                             ; CODE XREF: CPageBootIni::SelectLine(int)+2D3↑j
.text:0040AD51                 push    0E0h ; 'à'
.text:0040AD56
.text:0040AD56 loc_40AD56:                             ; CODE XREF: CPageBootIni::SelectLine(int)+2BF↑j
.text:0040AD56                                         ; CPageBootIni::SelectLine(int)+2DA↑j
.text:0040AD56                 mov     ecx, esi
.text:0040AD58                 call    ds:?CheckDlgButton@CWnd@@QAEXHI@Z ; CWnd::CheckDlgButton(int,uint)
.text:0040AD5E
.text:0040AD5E loc_40AD5E:                             ; CODE XREF: CPageBootIni::SelectLine(int)+237↑j
.text:0040AD5E                                         ; CPageBootIni::SelectLine(int)+2C5↑j ...
.text:0040AD5E                 push    10h             ; Length
.text:0040AD60                 push    ebx             ; Source2
.text:0040AD61                 push    offset unk_41393C ; Source1
.text:0040AD66                 call    ds:RtlCompareMemory
.text:0040AD6C                 mov     edx, 0D1h ; 'Ñ'
.text:0040AD71                 mov     ecx, esi
.text:0040AD73                 lea     ebx, [eax-10h]
.text:0040AD76                 neg     ebx
.text:0040AD78                 sbb     ebx, ebx
.text:0040AD7A                 and     ebx, edi
.text:0040AD7C                 call    sub_40DAA3
.text:0040AD81                 test    eax, eax
.text:0040AD83                 jz      short loc_40AD8D
.text:0040AD85                 push    ebx             ; bEnable
.text:0040AD86                 push    eax             ; hWnd
.text:0040AD87                 call    ds:EnableWindow
.text:0040AD8D
.text:0040AD8D loc_40AD8D:                             ; CODE XREF: CPageBootIni::SelectLine(int)+30E↑j
.text:0040AD8D                 mov     edx, 3F6h
.text:0040AD92                 mov     ecx, esi
.text:0040AD94                 call    sub_40DAA3
.text:0040AD99                 test    eax, eax
.text:0040AD9B                 jz      short loc_40ADB9
.text:0040AD9D                 mov     ecx, [ebp+var_8]
.text:0040ADA0                 cmp     dword ptr [ecx+1Ch], 0
.text:0040ADA4                 jnz     short loc_40ADAF
.text:0040ADA6                 cmp     dword ptr [esi+0ACh], 0
.text:0040ADAD                 jnz     short loc_40ADB1
.text:0040ADAF
.text:0040ADAF loc_40ADAF:                             ; CODE XREF: CPageBootIni::SelectLine(int)+32F↑j
.text:0040ADAF                 xor     edi, edi
.text:0040ADB1
.text:0040ADB1 loc_40ADB1:                             ; CODE XREF: CPageBootIni::SelectLine(int)+338↑j
.text:0040ADB1                 push    edi             ; bEnable
.text:0040ADB2                 push    eax             ; hWnd
.text:0040ADB3                 call    ds:EnableWindow
.text:0040ADB9
.text:0040ADB9 loc_40ADB9:                             ; CODE XREF: CPageBootIni::SelectLine(int)+34↑j
.text:0040ADB9                                         ; CPageBootIni::SelectLine(int)+76↑j ...
.text:0040ADB9                 pop     edi
.text:0040ADBA                 pop     ebx
.text:0040ADBB
.text:0040ADBB loc_40ADBB:                             ; CODE XREF: CPageBootIni::SelectLine(int)+16↑j
.text:0040ADBB                 pop     esi
.text:0040ADBC                 mov     esp, ebp
.text:0040ADBE                 pop     ebp
.text:0040ADBF                 retn    4
.text:0040ADBF ?SelectLine@CPageBootIni@@QAEXH@Z endp
.text:0040ADBF
.text:0040ADBF ; ---------------------------------------------------------------------------
.text:0040ADC2                 align 10h
.text:0040ADD0
.text:0040ADD0 ; =============== S U B R O U T I N E =======================================
.text:0040ADD0
.text:0040ADD0 ; Attributes: bp-based frame
.text:0040ADD0
.text:0040ADD0 ; int __stdcall sub_40ADD0(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
.text:0040ADD0 sub_40ADD0      proc near               ; DATA XREF: .text:00402A20↑o
.text:0040ADD0                                         ; sub_40AE70+6E↓o
.text:0040ADD0
.text:0040ADD0 hWnd            = dword ptr  8
.text:0040ADD0 Msg             = dword ptr  0Ch
.text:0040ADD0 wParam          = dword ptr  10h
.text:0040ADD0 lParam          = dword ptr  14h
.text:0040ADD0
.text:0040ADD0                 mov     edi, edi
.text:0040ADD2                 push    ebp
.text:0040ADD3                 mov     ebp, esp
.text:0040ADD5                 mov     eax, [ebp+Msg]
.text:0040ADD8                 sub     eax, 87h ; '‡'
.text:0040ADDD                 jz      short loc_40AE5A
.text:0040ADDF                 sub     eax, 7Bh ; '{'
.text:0040ADE2                 mov     eax, [ebp+wParam]
.text:0040ADE5                 jnz     short loc_40AE3D
.text:0040ADE7                 cmp     eax, 1Bh
.text:0040ADEA                 jz      short loc_40AE20
.text:0040ADEC                 cmp     eax, 0Dh
.text:0040ADEF                 jz      short loc_40AE20
.text:0040ADF1                 cmp     eax, 9
.text:0040ADF4                 jnz     short loc_40AE3D
.text:0040ADF6                 cmp     dword_4137C4, 0
.text:0040ADFD                 jz      short loc_40AE3D
.text:0040ADFF                 push    10h             ; nVirtKey
.text:0040AE01                 call    ds:GetKeyState
.text:0040AE07                 test    ax, ax
.text:0040AE0A                 mov     eax, dword_4137C4
.text:0040AE0F                 push    0
.text:0040AE11                 jnz     short loc_40AE17
.text:0040AE13                 push    0
.text:0040AE15                 jmp     short loc_40AE19
.text:0040AE17 ; ---------------------------------------------------------------------------
.text:0040AE17
.text:0040AE17 loc_40AE17:                             ; CODE XREF: sub_40ADD0+41↑j
.text:0040AE17                 push    1
.text:0040AE19
.text:0040AE19 loc_40AE19:                             ; CODE XREF: sub_40ADD0+45↑j
.text:0040AE19                 push    28h ; '('
.text:0040AE1B                 push    dword ptr [eax+20h]
.text:0040AE1E                 jmp     short loc_40AE33
.text:0040AE20 ; ---------------------------------------------------------------------------
.text:0040AE20
.text:0040AE20 loc_40AE20:                             ; CODE XREF: sub_40ADD0+1A↑j
.text:0040AE20                                         ; sub_40ADD0+1F↑j
.text:0040AE20                 mov     ecx, dword_4137C4
.text:0040AE26                 test    ecx, ecx
.text:0040AE28                 jz      short loc_40AE3D
.text:0040AE2A                 push    0               ; lParam
.text:0040AE2C                 push    0               ; wParam
.text:0040AE2E                 push    28h ; '('       ; Msg
.text:0040AE30                 push    dword ptr [ecx+20h] ; hWnd
.text:0040AE33
.text:0040AE33 loc_40AE33:                             ; CODE XREF: sub_40ADD0+4E↑j
.text:0040AE33                 call    ds:SendMessageW
.text:0040AE39
.text:0040AE39 loc_40AE39:                             ; CODE XREF: sub_40ADD0+75↓j
.text:0040AE39                 xor     eax, eax
.text:0040AE3B                 jmp     short loc_40AE5D
.text:0040AE3D ; ---------------------------------------------------------------------------
.text:0040AE3D
.text:0040AE3D loc_40AE3D:                             ; CODE XREF: sub_40ADD0+15↑j
.text:0040AE3D                                         ; sub_40ADD0+24↑j ...
.text:0040AE3D                 mov     ecx, dwNewLong
.text:0040AE43                 test    ecx, ecx
.text:0040AE45                 jz      short loc_40AE39
.text:0040AE47                 push    [ebp+lParam]    ; lParam
.text:0040AE4A                 push    eax             ; wParam
.text:0040AE4B                 push    [ebp+Msg]       ; Msg
.text:0040AE4E                 push    [ebp+hWnd]      ; hWnd
.text:0040AE51                 push    ecx             ; lpPrevWndFunc
.text:0040AE52                 call    ds:CallWindowProcW
.text:0040AE58                 jmp     short loc_40AE5D
.text:0040AE5A ; ---------------------------------------------------------------------------
.text:0040AE5A
.text:0040AE5A loc_40AE5A:                             ; CODE XREF: sub_40ADD0+D↑j
.text:0040AE5A                 push    4
.text:0040AE5C                 pop     eax
.text:0040AE5D
.text:0040AE5D loc_40AE5D:                             ; CODE XREF: sub_40ADD0+6B↑j
.text:0040AE5D                                         ; sub_40ADD0+88↑j
.text:0040AE5D                 pop     ebp
.text:0040AE5E                 retn    10h
.text:0040AE5E sub_40ADD0      endp
.text:0040AE5E
.text:0040AE5E ; ---------------------------------------------------------------------------
.text:0040AE61                 align 10h
.text:0040AE70
.text:0040AE70 ; =============== S U B R O U T I N E =======================================
.text:0040AE70
.text:0040AE70
.text:0040AE70 sub_40AE70      proc near               ; DATA XREF: .text:00401BFC↑o
.text:0040AE70                                         ; .text:00402A24↑o
.text:0040AE70                 mov     edi, edi
.text:0040AE72                 push    esi
.text:0040AE73                 push    edi
.text:0040AE74                 mov     esi, ecx
.text:0040AE76                 call    ds:__imp_?OnInitDialog@CDialog@@UAEHXZ ; CDialog::OnInitDialog(void)
.text:0040AE7C                 push    0
.text:0040AE7E                 mov     ecx, esi
.text:0040AE80                 call    sub_40A9B6
.text:0040AE85                 lea     ecx, [esi+90h]
.text:0040AE8B                 call    sub_403C90
.text:0040AE90                 cmp     dword_413A70, 0
.text:0040AE97                 mov     [esi+0B4h], eax
.text:0040AE9D                 jz      short loc_40AEC3
.text:0040AE9F                 mov     edi, 0CFh ; 'Ï'
.text:0040AEA4                 mov     ecx, esi
.text:0040AEA6                 mov     edx, edi
.text:0040AEA8                 call    sub_40DAA3
.text:0040AEAD                 test    eax, eax
.text:0040AEAF                 jz      short loc_40AEC3
.text:0040AEB1                 push    0               ; nCmdShow
.text:0040AEB3                 mov     edx, edi
.text:0040AEB5                 mov     ecx, esi
.text:0040AEB7                 call    sub_40DAA3
.text:0040AEBC                 push    eax             ; hWnd
.text:0040AEBD                 call    ds:ShowWindow
.text:0040AEC3
.text:0040AEC3 loc_40AEC3:                             ; CODE XREF: sub_40AE70+2D↑j
.text:0040AEC3                                         ; sub_40AE70+3F↑j
.text:0040AEC3                 mov     edx, 0D6h ; 'Ö'
.text:0040AEC8                 mov     ecx, esi
.text:0040AECA                 call    sub_40DAA3
.text:0040AECF                 mov     edi, eax
.text:0040AED1                 test    edi, edi
.text:0040AED3                 jz      short loc_40AEF7
.text:0040AED5                 push    0FFFFFFFCh      ; nIndex
.text:0040AED7                 push    edi             ; hWnd
.text:0040AED8                 call    ds:GetWindowLongW
.text:0040AEDE                 push    offset sub_40ADD0 ; dwNewLong
.text:0040AEE3                 push    0FFFFFFFCh      ; nIndex
.text:0040AEE5                 push    edi             ; hWnd
.text:0040AEE6                 mov     dwNewLong, eax
.text:0040AEEB                 mov     dword_4137C4, esi
.text:0040AEF1                 call    ds:SetWindowLongW
.text:0040AEF7
.text:0040AEF7 loc_40AEF7:                             ; CODE XREF: sub_40AE70+63↑j
.text:0040AEF7                 xor     eax, eax
.text:0040AEF9                 inc     eax
.text:0040AEFA                 pop     edi
.text:0040AEFB                 mov     [esi+98h], eax
.text:0040AF01                 pop     esi
.text:0040AF02                 retn
.text:0040AF02 sub_40AE70      endp
.text:0040AF02
.text:0040AF02 ; ---------------------------------------------------------------------------
.text:0040AF03                 align 10h
.text:0040AF10
.text:0040AF10 ; =============== S U B R O U T I N E =======================================
.text:0040AF10
.text:0040AF10 ; Attributes: bp-based frame
.text:0040AF10
.text:0040AF10 sub_40AF10      proc near               ; DATA XREF: .text:0040196C↑o
.text:0040AF10                                         ; .text:00402A28↑o
.text:0040AF10
.text:0040AF10 hWnd            = dword ptr -10h
.text:0040AF10 var_C           = dword ptr -0Ch
.text:0040AF10 var_8           = dword ptr -8
.text:0040AF10 var_4           = dword ptr -4
.text:0040AF10
.text:0040AF10                 mov     edi, edi
.text:0040AF12                 push    ebp
.text:0040AF13                 mov     ebp, esp
.text:0040AF15                 sub     esp, 10h
.text:0040AF18                 push    ebx
.text:0040AF19                 mov     ebx, ecx
.text:0040AF1B                 mov     edx, 0CEh ; 'Î'
.text:0040AF20                 mov     [ebp+var_C], ebx
.text:0040AF23                 call    sub_40DAA3
.text:0040AF28                 mov     [ebp+hWnd], eax
.text:0040AF2B                 test    eax, eax
.text:0040AF2D                 jz      loc_40B08D
.text:0040AF33                 cmp     dword ptr [ebx+0ACh], 0
.text:0040AF3A                 jz      loc_40B08D
.text:0040AF40                 push    edi
.text:0040AF41                 mov     ecx, ebx
.text:0040AF43                 call    sub_40A956
.text:0040AF48                 mov     edi, eax
.text:0040AF4A                 mov     [ebp+var_4], edi
.text:0040AF4D                 test    edi, edi
.text:0040AF4F                 js      loc_40B08C
.text:0040AF55                 push    esi
.text:0040AF56                 imul    esi, edi, 1D0h
.text:0040AF5C                 add     esi, hMem
.text:0040AF62                 mov     [ebp+var_8], esi
.text:0040AF65                 jz      loc_40B08B
.text:0040AF6B                 cmp     dword ptr [esi+1Ch], 1
.text:0040AF6F                 jz      loc_40B08B
.text:0040AF75                 push    10h             ; Length
.text:0040AF77                 push    esi             ; Source2
.text:0040AF78                 push    offset unk_41393C ; Source1
.text:0040AF7D                 call    ds:RtlCompareMemory
.text:0040AF83                 cmp     eax, 10h
.text:0040AF86                 jnz     short loc_40AFCB
.text:0040AF88                 mov     edx, dword_413AA0
.text:0040AF8E                 xor     ecx, ecx
.text:0040AF90                 test    edx, edx
.text:0040AF92                 jz      short loc_40AFCB
.text:0040AF94                 mov     eax, hMem
.text:0040AF99
.text:0040AF99 loc_40AF99:                             ; CODE XREF: sub_40AF10+97↓j
.text:0040AF99                 cmp     dword ptr [eax+1Ch], 1
.text:0040AF9D                 jz      short loc_40AFAB
.text:0040AF9F                 inc     ecx
.text:0040AFA0                 add     eax, 1D0h
.text:0040AFA5                 cmp     ecx, edx
.text:0040AFA7                 jb      short loc_40AF99
.text:0040AFA9                 jmp     short loc_40AFCB
.text:0040AFAB ; ---------------------------------------------------------------------------
.text:0040AFAB
.text:0040AFAB loc_40AFAB:                             ; CODE XREF: sub_40AF10+8D↑j
.text:0040AFAB                 mov     esi, eax
.text:0040AFAD                 mov     edi, offset unk_41393C
.text:0040AFB2                 movsd
.text:0040AFB3                 movsd
.text:0040AFB4                 movsd
.text:0040AFB5                 movsd
.text:0040AFB6                 mov     edi, [ebp+var_4]
.text:0040AFB9                 xor     esi, esi
.text:0040AFBB                 inc     esi
.text:0040AFBC                 mov     dword_413950, esi
.text:0040AFC2                 mov     dword_413954, esi
.text:0040AFC8                 mov     esi, [ebp+var_8]
.text:0040AFCB
.text:0040AFCB loc_40AFCB:                             ; CODE XREF: sub_40AF10+76↑j
.text:0040AFCB                                         ; sub_40AF10+82↑j ...
.text:0040AFCB                 and     [ebp+var_8], 0
.text:0040AFCF                 mov     dword ptr [esi+18h], 1
.text:0040AFD6                 cmp     dword_413970, 0
.text:0040AFDD                 jbe     short loc_40B047
.text:0040AFDF                 mov     edi, [ebp+var_8]
.text:0040AFE2                 xor     ebx, ebx
.text:0040AFE4
.text:0040AFE4 loc_40AFE4:                             ; CODE XREF: sub_40AF10+12F↓j
.text:0040AFE4                 mov     eax, dword_413960
.text:0040AFE9                 push    10h             ; Length
.text:0040AFEB                 push    esi             ; Source2
.text:0040AFEC                 add     eax, ebx
.text:0040AFEE                 push    eax             ; Source1
.text:0040AFEF                 call    ds:RtlCompareMemory
.text:0040AFF5                 mov     edx, dword_413970
.text:0040AFFB                 cmp     eax, 10h
.text:0040AFFE                 jnz     short loc_40B039
.text:0040B000                 dec     edx
.text:0040B001                 mov     dword_413970, edx
.text:0040B007                 cmp     edx, edi
.text:0040B009                 jbe     short loc_40B02D
.text:0040B00B                 mov     ecx, dword_413960
.text:0040B011                 sub     edx, edi
.text:0040B013                 add     ecx, ebx
.text:0040B015                 shl     edx, 4
.text:0040B018                 push    edx             ; Size
.text:0040B019                 lea     eax, [ecx+10h]
.text:0040B01C                 push    eax             ; Src
.text:0040B01D                 push    ecx             ; void *
.text:0040B01E                 call    ds:memmove
.text:0040B024                 mov     edx, dword_413970
.text:0040B02A                 add     esp, 0Ch
.text:0040B02D
.text:0040B02D loc_40B02D:                             ; CODE XREF: sub_40AF10+F9↑j
.text:0040B02D                 mov     dword_413974, 1
.text:0040B037                 jmp     short loc_40B03D
.text:0040B039 ; ---------------------------------------------------------------------------
.text:0040B039
.text:0040B039 loc_40B039:                             ; CODE XREF: sub_40AF10+EE↑j
.text:0040B039                 inc     edi
.text:0040B03A                 add     ebx, 10h
.text:0040B03D
.text:0040B03D loc_40B03D:                             ; CODE XREF: sub_40AF10+127↑j
.text:0040B03D                 cmp     edi, edx
.text:0040B03F                 jb      short loc_40AFE4
.text:0040B041                 mov     ebx, [ebp+var_C]
.text:0040B044                 mov     edi, [ebp+var_4]
.text:0040B047
.text:0040B047 loc_40B047:                             ; CODE XREF: sub_40AF10+CD↑j
.text:0040B047                 mov     ecx, ebx
.text:0040B049                 call    sub_40C5D6
.text:0040B04E                 mov     ecx, ebx
.text:0040B050                 call    ?ReDrawOSListBox@CPageBootIni@@AAEJXZ ; CPageBootIni::ReDrawOSListBox(void)
.text:0040B055                 mov     esi, [ebp+hWnd]
.text:0040B058                 push    0               ; lParam
.text:0040B05A                 push    0               ; wParam
.text:0040B05C                 push    18Bh            ; Msg
.text:0040B061                 push    esi             ; hWnd
.text:0040B062                 call    ds:SendMessageW
.text:0040B068                 cmp     edi, eax
.text:0040B06A                 jl      short loc_40B06F
.text:0040B06C                 lea     edi, [eax-1]
.text:0040B06F
.text:0040B06F loc_40B06F:                             ; CODE XREF: sub_40AF10+15A↑j
.text:0040B06F                 push    0               ; lParam
.text:0040B071                 push    edi             ; wParam
.text:0040B072                 push    186h            ; Msg
.text:0040B077                 push    esi             ; hWnd
.text:0040B078                 call    ds:SendMessageW
.text:0040B07E                 push    dword ptr [ebx+0A4h]
.text:0040B084                 mov     ecx, ebx
.text:0040B086                 call    ?SelectLine@CPageBootIni@@QAEXH@Z ; CPageBootIni::SelectLine(int)
.text:0040B08B
.text:0040B08B loc_40B08B:                             ; CODE XREF: sub_40AF10+55↑j
.text:0040B08B                                         ; sub_40AF10+5F↑j
.text:0040B08B                 pop     esi
.text:0040B08C
.text:0040B08C loc_40B08C:                             ; CODE XREF: sub_40AF10+3F↑j
.text:0040B08C                 pop     edi
.text:0040B08D
.text:0040B08D loc_40B08D:                             ; CODE XREF: sub_40AF10+1D↑j
.text:0040B08D                                         ; sub_40AF10+2A↑j
.text:0040B08D                 pop     ebx
.text:0040B08E                 mov     esp, ebp
.text:0040B090                 pop     ebp
.text:0040B091                 retn
.text:0040B091 sub_40AF10      endp
.text:0040B091
.text:0040B091 ; ---------------------------------------------------------------------------
.text:0040B092                 align 10h
.text:0040B0A0
.text:0040B0A0 ; =============== S U B R O U T I N E =======================================
.text:0040B0A0
.text:0040B0A0
.text:0040B0A0 sub_40B0A0      proc near               ; DATA XREF: .text:00401984↑o
.text:0040B0A0                                         ; .text:00402A2C↑o
.text:0040B0A0                 mov     edi, edi
.text:0040B0A2                 push    esi
.text:0040B0A3                 mov     edx, 0CEh ; 'Î'
.text:0040B0A8                 mov     esi, ecx
.text:0040B0AA                 call    sub_40DAA3
.text:0040B0AF                 test    eax, eax
.text:0040B0B1                 jz      short loc_40B0CB
.text:0040B0B3                 push    0               ; lParam
.text:0040B0B5                 push    0               ; wParam
.text:0040B0B7                 push    188h            ; Msg
.text:0040B0BC                 push    eax             ; hWnd
.text:0040B0BD                 call    ds:SendMessageW
.text:0040B0C3                 push    eax
.text:0040B0C4                 mov     ecx, esi
.text:0040B0C6                 call    ?SelectLine@CPageBootIni@@QAEXH@Z ; CPageBootIni::SelectLine(int)
.text:0040B0CB
.text:0040B0CB loc_40B0CB:                             ; CODE XREF: sub_40B0A0+11↑j
.text:0040B0CB                 pop     esi
.text:0040B0CC                 retn
.text:0040B0CC sub_40B0A0      endp
.text:0040B0CC
.text:0040B0CC ; ---------------------------------------------------------------------------
.text:0040B0CD                 align 10h
.text:0040B0D0
.text:0040B0D0 ; =============== S U B R O U T I N E =======================================
.text:0040B0D0
.text:0040B0D0
.text:0040B0D0 sub_40B0D0      proc near               ; DATA XREF: .text:0040199C↑o
.text:0040B0D0                                         ; .text:00402A30↑o
.text:0040B0D0                 mov     edi, edi
.text:0040B0D2                 push    esi
.text:0040B0D3                 mov     esi, ecx
.text:0040B0D5                 cmp     dword ptr [esi+9Ch], 0
.text:0040B0DC                 jz      short loc_40B11D
.text:0040B0DE                 push    0DBh ; 'Û'
.text:0040B0E3                 call    ds:?IsDlgButtonChecked@CWnd@@QBEIH@Z ; CWnd::IsDlgButtonChecked(int)
.text:0040B0E9                 test    eax, eax
.text:0040B0EB                 mov     eax, [esi+9Ch]
.text:0040B0F1                 setnz   cl
.text:0040B0F4                 mov     [eax+0B8h], cl
.text:0040B0FA                 xor     ecx, ecx
.text:0040B0FC                 mov     eax, [esi+9Ch]
.text:0040B102                 inc     ecx
.text:0040B103                 mov     [eax+0CCh], ecx
.text:0040B109                 mov     eax, [esi+9Ch]
.text:0040B10F                 mov     [eax+0D0h], ecx
.text:0040B115                 mov     ecx, esi
.text:0040B117                 pop     esi
.text:0040B118                 jmp     sub_40C5D6
.text:0040B11D ; ---------------------------------------------------------------------------
.text:0040B11D
.text:0040B11D loc_40B11D:                             ; CODE XREF: sub_40B0D0+C↑j
.text:0040B11D                 pop     esi
.text:0040B11E                 retn
.text:0040B11E sub_40B0D0      endp
.text:0040B11E
.text:0040B11E ; ---------------------------------------------------------------------------
.text:0040B11F                 align 10h
.text:0040B120
.text:0040B120 ; =============== S U B R O U T I N E =======================================
.text:0040B120
.text:0040B120
.text:0040B120 sub_40B120      proc near               ; DATA XREF: .text:004019B4↑o
.text:0040B120                                         ; .text:00402A34↑o
.text:0040B120                 mov     edi, edi
.text:0040B122                 push    esi
.text:0040B123                 mov     esi, ecx
.text:0040B125                 cmp     dword ptr [esi+9Ch], 0
.text:0040B12C                 jz      short loc_40B16D
.text:0040B12E                 push    0DAh ; 'Ú'
.text:0040B133                 call    ds:?IsDlgButtonChecked@CWnd@@QBEIH@Z ; CWnd::IsDlgButtonChecked(int)
.text:0040B139                 test    eax, eax
.text:0040B13B                 mov     eax, [esi+9Ch]
.text:0040B141                 setnz   cl
.text:0040B144                 mov     [eax+94h], cl
.text:0040B14A                 xor     ecx, ecx
.text:0040B14C                 mov     eax, [esi+9Ch]
.text:0040B152                 inc     ecx
.text:0040B153                 mov     [eax+0A8h], ecx
.text:0040B159                 mov     eax, [esi+9Ch]
.text:0040B15F                 mov     [eax+0ACh], ecx
.text:0040B165                 mov     ecx, esi
.text:0040B167                 pop     esi
.text:0040B168                 jmp     sub_40C5D6
.text:0040B16D ; ---------------------------------------------------------------------------
.text:0040B16D
.text:0040B16D loc_40B16D:                             ; CODE XREF: sub_40B120+C↑j
.text:0040B16D                 pop     esi
.text:0040B16E                 retn
.text:0040B16E sub_40B120      endp
.text:0040B16E
.text:0040B16E ; ---------------------------------------------------------------------------
.text:0040B16F                 align 10h
.text:0040B170
.text:0040B170 ; =============== S U B R O U T I N E =======================================
.text:0040B170
.text:0040B170
.text:0040B170 sub_40B170      proc near               ; DATA XREF: .text:004019CC↑o
.text:0040B170                                         ; .text:00402A38↑o
.text:0040B170                 mov     edi, edi
.text:0040B172                 push    esi
.text:0040B173                 mov     esi, ecx
.text:0040B175                 cmp     dword ptr [esi+9Ch], 0
.text:0040B17C                 jz      short loc_40B1BA
.text:0040B17E                 push    0D9h ; 'Ù'
.text:0040B183                 call    ds:?IsDlgButtonChecked@CWnd@@QBEIH@Z ; CWnd::IsDlgButtonChecked(int)
.text:0040B189                 test    eax, eax
.text:0040B18B                 mov     eax, [esi+9Ch]
.text:0040B191                 setnz   cl
.text:0040B194                 mov     [eax+70h], cl
.text:0040B197                 xor     ecx, ecx
.text:0040B199                 mov     eax, [esi+9Ch]
.text:0040B19F                 inc     ecx
.text:0040B1A0                 mov     [eax+84h], ecx
.text:0040B1A6                 mov     eax, [esi+9Ch]
.text:0040B1AC                 mov     [eax+88h], ecx
.text:0040B1B2                 mov     ecx, esi
.text:0040B1B4                 pop     esi
.text:0040B1B5                 jmp     sub_40C5D6
.text:0040B1BA ; ---------------------------------------------------------------------------
.text:0040B1BA
.text:0040B1BA loc_40B1BA:                             ; CODE XREF: sub_40B170+C↑j
.text:0040B1BA                 pop     esi
.text:0040B1BB                 retn
.text:0040B1BB sub_40B170      endp
.text:0040B1BB
.text:0040B1BB ; ---------------------------------------------------------------------------
.text:0040B1BC                 align 10h
.text:0040B1C0
.text:0040B1C0 ; =============== S U B R O U T I N E =======================================
.text:0040B1C0
.text:0040B1C0
.text:0040B1C0 sub_40B1C0      proc near               ; DATA XREF: .text:004019E4↑o
.text:0040B1C0                                         ; .text:00402A3C↑o
.text:0040B1C0                 mov     edi, edi
.text:0040B1C2                 push    esi
.text:0040B1C3                 mov     esi, ecx
.text:0040B1C5                 cmp     dword ptr [esi+9Ch], 0
.text:0040B1CC                 jz      short loc_40B20D
.text:0040B1CE                 push    0DCh ; 'Ü'
.text:0040B1D3                 call    ds:?IsDlgButtonChecked@CWnd@@QBEIH@Z ; CWnd::IsDlgButtonChecked(int)
.text:0040B1D9                 test    eax, eax
.text:0040B1DB                 mov     eax, [esi+9Ch]
.text:0040B1E1                 setnz   cl
.text:0040B1E4                 mov     [eax+0DCh], cl
.text:0040B1EA                 xor     ecx, ecx
.text:0040B1EC                 mov     eax, [esi+9Ch]
.text:0040B1F2                 inc     ecx
.text:0040B1F3                 mov     [eax+0F0h], ecx
.text:0040B1F9                 mov     eax, [esi+9Ch]
.text:0040B1FF                 mov     [eax+0F4h], ecx
.text:0040B205                 mov     ecx, esi
.text:0040B207                 pop     esi
.text:0040B208                 jmp     sub_40C5D6
.text:0040B20D ; ---------------------------------------------------------------------------
.text:0040B20D
.text:0040B20D loc_40B20D:                             ; CODE XREF: sub_40B1C0+C↑j
.text:0040B20D                 pop     esi
.text:0040B20E                 retn
.text:0040B20E sub_40B1C0      endp
.text:0040B20E
.text:0040B20E ; ---------------------------------------------------------------------------
.text:0040B20F                 align 10h
.text:0040B210
.text:0040B210 ; =============== S U B R O U T I N E =======================================
.text:0040B210
.text:0040B210 ; Attributes: bp-based frame
.text:0040B210
.text:0040B210 sub_40B210      proc near               ; DATA XREF: .text:004019FC↑o
.text:0040B210                                         ; .text:00402A40↑o
.text:0040B210
.text:0040B210 hWnd            = dword ptr -8
.text:0040B210 bEnable         = dword ptr -4
.text:0040B210
.text:0040B210                 mov     edi, edi
.text:0040B212                 push    ebp
.text:0040B213                 mov     ebp, esp
.text:0040B215                 push    ecx
.text:0040B216                 push    ecx
.text:0040B217                 push    ebx
.text:0040B218                 push    esi
.text:0040B219                 mov     esi, ecx
.text:0040B21B                 xor     ebx, ebx
.text:0040B21D                 push    edi
.text:0040B21E                 mov     edi, ebx
.text:0040B220                 cmp     [esi+9Ch], ebx
.text:0040B226                 jz      loc_40B381
.text:0040B22C                 push    0D8h ; 'Ø'
.text:0040B231                 call    ds:?IsDlgButtonChecked@CWnd@@QBEIH@Z ; CWnd::IsDlgButtonChecked(int)
.text:0040B237                 mov     ecx, [esi+9Ch]
.text:0040B23D                 mov     edx, 0DEh ; 'Þ'
.text:0040B242                 mov     [ebp+bEnable], eax
.text:0040B245                 mov     [ecx+40h], eax
.text:0040B248                 mov     ecx, esi
.text:0040B24A                 call    sub_40DAA3
.text:0040B24F                 test    eax, eax
.text:0040B251                 jz      short loc_40B25D
.text:0040B253                 push    [ebp+bEnable]   ; bEnable
.text:0040B256                 push    eax             ; hWnd
.text:0040B257                 call    ds:EnableWindow
.text:0040B25D
.text:0040B25D loc_40B25D:                             ; CODE XREF: sub_40B210+41↑j
.text:0040B25D                 mov     edx, 0DFh ; 'ß'
.text:0040B262                 mov     ecx, esi
.text:0040B264                 call    sub_40DAA3
.text:0040B269                 test    eax, eax
.text:0040B26B                 jz      short loc_40B277
.text:0040B26D                 push    [ebp+bEnable]   ; bEnable
.text:0040B270                 push    eax             ; hWnd
.text:0040B271                 call    ds:EnableWindow
.text:0040B277
.text:0040B277 loc_40B277:                             ; CODE XREF: sub_40B210+5B↑j
.text:0040B277                 mov     edx, 0E0h ; 'à'
.text:0040B27C                 mov     ecx, esi
.text:0040B27E                 call    sub_40DAA3
.text:0040B283                 test    eax, eax
.text:0040B285                 jz      short loc_40B291
.text:0040B287                 push    [ebp+bEnable]   ; bEnable
.text:0040B28A                 push    eax             ; hWnd
.text:0040B28B                 call    ds:EnableWindow
.text:0040B291
.text:0040B291 loc_40B291:                             ; CODE XREF: sub_40B210+75↑j
.text:0040B291                 mov     edx, 0E1h ; 'á'
.text:0040B296                 mov     ecx, esi
.text:0040B298                 call    sub_40DAA3
.text:0040B29D                 mov     [ebp+hWnd], eax
.text:0040B2A0                 test    eax, eax
.text:0040B2A2                 jz      short loc_40B2F2
.text:0040B2A4                 push    [ebp+bEnable]   ; bEnable
.text:0040B2A7                 push    eax             ; hWnd
.text:0040B2A8                 call    ds:EnableWindow
.text:0040B2AE                 push    [ebp+hWnd]      ; hWnd
.text:0040B2B1                 call    ds:IsWindowEnabled
.text:0040B2B7                 test    eax, eax
.text:0040B2B9                 jz      short loc_40B2F2
.text:0040B2BB                 push    0E1h ; 'á'
.text:0040B2C0                 mov     ecx, esi
.text:0040B2C2                 call    ds:?IsDlgButtonChecked@CWnd@@QBEIH@Z ; CWnd::IsDlgButtonChecked(int)
.text:0040B2C8                 test    eax, eax
.text:0040B2CA                 jz      short loc_40B2F2
.text:0040B2CC                 mov     eax, [esi+9Ch]
.text:0040B2D2                 mov     byte ptr [eax+4Ch], 1
.text:0040B2D6                 mov     eax, [esi+9Ch]
.text:0040B2DC                 mov     dword ptr [eax+60h], 1
.text:0040B2E3                 mov     eax, [esi+9Ch]
.text:0040B2E9                 mov     dword ptr [eax+64h], 1
.text:0040B2F0                 jmp     short loc_40B361
.text:0040B2F2 ; ---------------------------------------------------------------------------
.text:0040B2F2
.text:0040B2F2 loc_40B2F2:                             ; CODE XREF: sub_40B210+92↑j
.text:0040B2F2                                         ; sub_40B210+A9↑j ...
.text:0040B2F2                 mov     eax, [esi+9Ch]
.text:0040B2F8                 xor     ecx, ecx
.text:0040B2FA                 inc     ecx
.text:0040B2FB                 cmp     [eax+4Ch], bl
.text:0040B2FE                 jz      short loc_40B315
.text:0040B300                 mov     [eax+4Ch], bl
.text:0040B303                 mov     eax, [esi+9Ch]
.text:0040B309                 mov     [eax+60h], ecx
.text:0040B30C                 mov     eax, [esi+9Ch]
.text:0040B312                 mov     [eax+64h], ecx
.text:0040B315
.text:0040B315 loc_40B315:                             ; CODE XREF: sub_40B210+EE↑j
.text:0040B315                 push    0DEh ; 'Þ'
.text:0040B31A                 mov     ecx, esi
.text:0040B31C                 call    ds:?IsDlgButtonChecked@CWnd@@QBEIH@Z ; CWnd::IsDlgButtonChecked(int)
.text:0040B322                 test    eax, eax
.text:0040B324                 jz      short loc_40B32B
.text:0040B326                 xor     edi, edi
.text:0040B328                 inc     edi
.text:0040B329                 jmp     short loc_40B361
.text:0040B32B ; ---------------------------------------------------------------------------
.text:0040B32B
.text:0040B32B loc_40B32B:                             ; CODE XREF: sub_40B210+114↑j
.text:0040B32B                 push    0DFh ; 'ß'
.text:0040B330                 mov     ecx, esi
.text:0040B332                 call    ds:?IsDlgButtonChecked@CWnd@@QBEIH@Z ; CWnd::IsDlgButtonChecked(int)
.text:0040B338                 test    eax, eax
.text:0040B33A                 jz      short loc_40B341
.text:0040B33C                 push    2
.text:0040B33E                 pop     edi
.text:0040B33F                 jmp     short loc_40B361
.text:0040B341 ; ---------------------------------------------------------------------------
.text:0040B341
.text:0040B341 loc_40B341:                             ; CODE XREF: sub_40B210+12A↑j
.text:0040B341                 push    0E1h ; 'á'
.text:0040B346                 mov     ecx, esi
.text:0040B348                 call    ds:?IsDlgButtonChecked@CWnd@@QBEIH@Z ; CWnd::IsDlgButtonChecked(int)
.text:0040B34E                 test    eax, eax
.text:0040B350                 jnz     short loc_40B361
.text:0040B352                 push    1
.text:0040B354                 push    0E0h ; 'à'
.text:0040B359                 mov     ecx, esi
.text:0040B35B                 call    ds:?CheckDlgButton@CWnd@@QAEXHI@Z ; CWnd::CheckDlgButton(int,uint)
.text:0040B361
.text:0040B361 loc_40B361:                             ; CODE XREF: sub_40B210+E0↑j
.text:0040B361                                         ; sub_40B210+119↑j ...
.text:0040B361                 mov     eax, [esi+9Ch]
.text:0040B367                 mov     ecx, esi
.text:0040B369                 mov     [eax+28h], edi
.text:0040B36C                 mov     [eax+2Ch], ebx
.text:0040B36F                 mov     eax, [esi+9Ch]
.text:0040B375                 mov     dword ptr [eax+3Ch], 1
.text:0040B37C                 call    sub_40C5D6
.text:0040B381
.text:0040B381 loc_40B381:                             ; CODE XREF: sub_40B210+16↑j
.text:0040B381                 pop     edi
.text:0040B382                 pop     esi
.text:0040B383                 pop     ebx
.text:0040B384                 mov     esp, ebp
.text:0040B386                 pop     ebp
.text:0040B387                 retn
.text:0040B387 sub_40B210      endp
.text:0040B387
.text:0040B387 ; ---------------------------------------------------------------------------
.text:0040B388                 align 10h
.text:0040B390
.text:0040B390 ; =============== S U B R O U T I N E =======================================
.text:0040B390
.text:0040B390
.text:0040B390 sub_40B390      proc near               ; DATA XREF: .text:00401A14↑o
.text:0040B390                                         ; .text:00402A44↑o
.text:0040B390                 mov     eax, [ecx+9Ch]
.text:0040B396                 test    eax, eax
.text:0040B398                 jz      short locret_40B3E1
.text:0040B39A                 mov     dword ptr [eax+28h], 2
.text:0040B3A1                 xor     edx, edx
.text:0040B3A3                 and     dword ptr [eax+2Ch], 0
.text:0040B3A7                 inc     edx
.text:0040B3A8                 mov     eax, [ecx+9Ch]
.text:0040B3AE                 mov     [eax+3Ch], edx
.text:0040B3B1                 mov     eax, [ecx+9Ch]
.text:0040B3B7                 mov     [eax+40h], edx
.text:0040B3BA                 mov     eax, [ecx+9Ch]
.text:0040B3C0                 cmp     byte ptr [eax+4Ch], 0
.text:0040B3C4                 jz      short loc_40B3DC
.text:0040B3C6                 mov     byte ptr [eax+4Ch], 0
.text:0040B3CA                 mov     eax, [ecx+9Ch]
.text:0040B3D0                 mov     [eax+60h], edx
.text:0040B3D3                 mov     eax, [ecx+9Ch]
.text:0040B3D9                 mov     [eax+64h], edx
.text:0040B3DC
.text:0040B3DC loc_40B3DC:                             ; CODE XREF: sub_40B390+34↑j
.text:0040B3DC                 jmp     sub_40C5D6
.text:0040B3E1 ; ---------------------------------------------------------------------------
.text:0040B3E1
.text:0040B3E1 locret_40B3E1:                          ; CODE XREF: sub_40B390+8↑j
.text:0040B3E1                 retn
.text:0040B3E1 sub_40B390      endp
.text:0040B3E1
.text:0040B3E1 ; ---------------------------------------------------------------------------
.text:0040B3E2                 align 10h
.text:0040B3F0
.text:0040B3F0 ; =============== S U B R O U T I N E =======================================
.text:0040B3F0
.text:0040B3F0
.text:0040B3F0 sub_40B3F0      proc near               ; DATA XREF: .text:00401A2C↑o
.text:0040B3F0                                         ; .text:00402A48↑o
.text:0040B3F0                 mov     eax, [ecx+9Ch]
.text:0040B3F6                 test    eax, eax
.text:0040B3F8                 jz      short locret_40B43E
.text:0040B3FA                 and     dword ptr [eax+28h], 0
.text:0040B3FE                 xor     edx, edx
.text:0040B400                 and     dword ptr [eax+2Ch], 0
.text:0040B404                 inc     edx
.text:0040B405                 mov     eax, [ecx+9Ch]
.text:0040B40B                 mov     [eax+3Ch], edx
.text:0040B40E                 mov     eax, [ecx+9Ch]
.text:0040B414                 mov     [eax+40h], edx
.text:0040B417                 mov     eax, [ecx+9Ch]
.text:0040B41D                 cmp     byte ptr [eax+4Ch], 0
.text:0040B421                 jz      short loc_40B439
.text:0040B423                 mov     byte ptr [eax+4Ch], 0
.text:0040B427                 mov     eax, [ecx+9Ch]
.text:0040B42D                 mov     [eax+60h], edx
.text:0040B430                 mov     eax, [ecx+9Ch]
.text:0040B436                 mov     [eax+64h], edx
.text:0040B439
.text:0040B439 loc_40B439:                             ; CODE XREF: sub_40B3F0+31↑j
.text:0040B439                 jmp     sub_40C5D6
.text:0040B43E ; ---------------------------------------------------------------------------
.text:0040B43E
.text:0040B43E locret_40B43E:                          ; CODE XREF: sub_40B3F0+8↑j
.text:0040B43E                 retn
.text:0040B43E sub_40B3F0      endp
.text:0040B43E
.text:0040B43E ; ---------------------------------------------------------------------------
.text:0040B43F                 align 10h
.text:0040B440
.text:0040B440 ; =============== S U B R O U T I N E =======================================
.text:0040B440
.text:0040B440
.text:0040B440 sub_40B440      proc near               ; DATA XREF: .text:00401A44↑o
.text:0040B440                                         ; .text:00402A4C↑o
.text:0040B440                 mov     eax, [ecx+9Ch]
.text:0040B446                 test    eax, eax
.text:0040B448                 jz      short locret_40B48D
.text:0040B44A                 and     dword ptr [eax+28h], 0
.text:0040B44E                 xor     edx, edx
.text:0040B450                 and     dword ptr [eax+2Ch], 0
.text:0040B454                 inc     edx
.text:0040B455                 mov     eax, [ecx+9Ch]
.text:0040B45B                 mov     [eax+3Ch], edx
.text:0040B45E                 mov     eax, [ecx+9Ch]
.text:0040B464                 mov     [eax+40h], edx
.text:0040B467                 mov     eax, [ecx+9Ch]
.text:0040B46D                 cmp     byte ptr [eax+4Ch], 0
.text:0040B471                 jnz     short loc_40B488
.text:0040B473                 mov     [eax+4Ch], dl
.text:0040B476                 mov     eax, [ecx+9Ch]
.text:0040B47C                 mov     [eax+60h], edx
.text:0040B47F                 mov     eax, [ecx+9Ch]
.text:0040B485                 mov     [eax+64h], edx
.text:0040B488
.text:0040B488 loc_40B488:                             ; CODE XREF: sub_40B440+31↑j
.text:0040B488                 jmp     sub_40C5D6
.text:0040B48D ; ---------------------------------------------------------------------------
.text:0040B48D
.text:0040B48D locret_40B48D:                          ; CODE XREF: sub_40B440+8↑j
.text:0040B48D                 retn
.text:0040B48D sub_40B440      endp
.text:0040B48D
.text:0040B48D ; ---------------------------------------------------------------------------
.text:0040B48E                 align 10h
.text:0040B490
.text:0040B490 ; =============== S U B R O U T I N E =======================================
.text:0040B490
.text:0040B490
.text:0040B490 sub_40B490      proc near               ; DATA XREF: .text:00401A5C↑o
.text:0040B490                                         ; .text:00402A50↑o
.text:0040B490                 mov     eax, [ecx+9Ch]
.text:0040B496                 test    eax, eax
.text:0040B498                 jz      short locret_40B4DD
.text:0040B49A                 xor     edx, edx
.text:0040B49C                 inc     edx
.text:0040B49D                 mov     [eax+28h], edx
.text:0040B4A0                 and     dword ptr [eax+2Ch], 0
.text:0040B4A4                 mov     eax, [ecx+9Ch]
.text:0040B4AA                 mov     [eax+3Ch], edx
.text:0040B4AD                 mov     eax, [ecx+9Ch]
.text:0040B4B3                 mov     [eax+40h], edx
.text:0040B4B6                 mov     eax, [ecx+9Ch]
.text:0040B4BC                 cmp     byte ptr [eax+4Ch], 0
.text:0040B4C0                 jz      short loc_40B4D8
.text:0040B4C2                 mov     byte ptr [eax+4Ch], 0
.text:0040B4C6                 mov     eax, [ecx+9Ch]
.text:0040B4CC                 mov     [eax+60h], edx
.text:0040B4CF                 mov     eax, [ecx+9Ch]
.text:0040B4D5                 mov     [eax+64h], edx
.text:0040B4D8
.text:0040B4D8 loc_40B4D8:                             ; CODE XREF: sub_40B490+30↑j
.text:0040B4D8                 jmp     sub_40C5D6
.text:0040B4DD ; ---------------------------------------------------------------------------
.text:0040B4DD
.text:0040B4DD locret_40B4DD:                          ; CODE XREF: sub_40B490+8↑j
.text:0040B4DD                 retn
.text:0040B4DD sub_40B490      endp
.text:0040B4DD
.text:0040B4DD ; ---------------------------------------------------------------------------
.text:0040B4DE                 align 10h
.text:0040B4E0
.text:0040B4E0 ; =============== S U B R O U T I N E =======================================
.text:0040B4E0
.text:0040B4E0
.text:0040B4E0 sub_40B4E0      proc near               ; DATA XREF: .text:00401A74↑o
.text:0040B4E0                                         ; .text:00402A54↑o
.text:0040B4E0                 mov     edi, edi
.text:0040B4E2                 push    esi
.text:0040B4E3                 mov     esi, ecx
.text:0040B4E5                 cmp     dword ptr [esi+0B0h], 0
.text:0040B4EC                 jnz     short loc_40B521
.text:0040B4EE                 push    edi
.text:0040B4EF                 xor     edi, edi
.text:0040B4F1                 inc     edi
.text:0040B4F2                 push    edi
.text:0040B4F3                 push    0
.text:0040B4F5                 push    0D6h ; 'Ö'
.text:0040B4FA                 call    ds:?GetDlgItemInt@CWnd@@QBEIHPAHH@Z ; CWnd::GetDlgItemInt(int,int *,int)
.text:0040B500                 and     dword_41391C, 0
.text:0040B507                 mov     ecx, esi
.text:0040B509                 mov     dword_41392C, edi
.text:0040B50F                 mov     dword_413930, edi
.text:0040B515                 pop     edi
.text:0040B516                 mov     dword_413918, eax
.text:0040B51B                 pop     esi
.text:0040B51C                 jmp     sub_40C5D6
.text:0040B521 ; ---------------------------------------------------------------------------
.text:0040B521
.text:0040B521 loc_40B521:                             ; CODE XREF: sub_40B4E0+C↑j
.text:0040B521                 pop     esi
.text:0040B522                 retn
.text:0040B522 sub_40B4E0      endp
.text:0040B522
.text:0040B522 ; ---------------------------------------------------------------------------
.text:0040B523                 align 10h
.text:0040B530
.text:0040B530 ; =============== S U B R O U T I N E =======================================
.text:0040B530
.text:0040B530 ; Attributes: bp-based frame
.text:0040B530
.text:0040B530 sub_40B530      proc near               ; DATA XREF: .text:00401A8C↑o
.text:0040B530                                         ; .text:00402A58↑o
.text:0040B530
.text:0040B530 var_224         = byte ptr -224h
.text:0040B530 var_220         = dword ptr -220h
.text:0040B530 var_21C         = dword ptr -21Ch
.text:0040B530 String          = word ptr -218h
.text:0040B530 var_4           = dword ptr -4
.text:0040B530 arg_4           = dword ptr  0Ch
.text:0040B530
.text:0040B530 ; FUNCTION CHUNK AT .text:0041129A SIZE 0000004C BYTES
.text:0040B530
.text:0040B530 ; __unwind { // loc_4112BE
.text:0040B530                 push    218h
.text:0040B535                 mov     eax, offset loc_4112BE
.text:0040B53A                 call    __EH_prolog3_GS
.text:0040B53F                 mov     esi, ecx
.text:0040B541                 push    208h            ; Size
.text:0040B546                 xor     ebx, ebx
.text:0040B548                 lea     eax, [ebp+String]
.text:0040B54E                 push    ebx             ; Val
.text:0040B54F                 push    eax             ; void *
.text:0040B550                 call    memset
.text:0040B555                 add     esp, 0Ch
.text:0040B558                 lea     eax, [ebp+String]
.text:0040B55E                 mov     ecx, esi
.text:0040B560                 push    104h
.text:0040B565                 push    eax
.text:0040B566                 push    0D6h ; 'Ö'
.text:0040B56B                 call    ds:?GetDlgItemTextW@CWnd@@QBEHHPAGH@Z ; CWnd::GetDlgItemTextW(int,ushort *,int)
.text:0040B571                 push    offset Source
.text:0040B576                 lea     ecx, [ebp+var_224]
.text:0040B57C                 call    ds:??0CString@@QAE@PBG@Z ; CString::CString(ushort const *)
.text:0040B582                 lea     eax, [ebp+String]
.text:0040B588 ;   try {
.text:0040B588                 mov     [ebp+var_4], ebx
.text:0040B58B                 push    eax             ; String
.text:0040B58C                 call    ds:_wtoi
.text:0040B592                 mov     edi, eax
.text:0040B594                 cdq
.text:0040B595                 mov     dword_413918, eax
.text:0040B59A                 xor     eax, eax
.text:0040B59C                 inc     eax
.text:0040B59D                 mov     dword_41391C, edx
.text:0040B5A3                 mov     dword_41392C, eax
.text:0040B5A8                 mov     dword_413930, eax
.text:0040B5AD                 pop     ecx
.text:0040B5AE                 cmp     edi, 3
.text:0040B5B1                 jl      short loc_40B5BF
.text:0040B5B3                 cmp     edi, 3E7h
.text:0040B5B9                 jle     loc_40B65B
.text:0040B5BF
.text:0040B5BF loc_40B5BF:                             ; CODE XREF: sub_40B530+81↑j
.text:0040B5BF                 lea     ecx, [ebp+var_220]
.text:0040B5C5                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040B5CB                 lea     ecx, [ebp+var_21C]
.text:0040B5CB ;   } // starts at 40B588
.text:0040B5D1 ;   try {
.text:0040B5D1                 mov     byte ptr [ebp+var_4], 1
.text:0040B5D5                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040B5DB                 push    7Ch ; '|'
.text:0040B5DD                 lea     ecx, [ebp+var_220]
.text:0040B5DD ;   } // starts at 40B5D1
.text:0040B5E3 ;   try {
.text:0040B5E3                 mov     byte ptr [ebp+var_4], 2
.text:0040B5E7                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:0040B5ED                 test    eax, eax
.text:0040B5EF                 jle     short loc_40B61E
.text:0040B5F1                 push    7Dh ; '}'
.text:0040B5F3                 lea     ecx, [ebp+var_21C]
.text:0040B5F9                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:0040B5FF                 test    eax, eax
.text:0040B601                 jle     short loc_40B61E
.text:0040B603                 mov     eax, [ebp+var_220]
.text:0040B609                 cmp     [eax-8], ebx
.text:0040B60C                 jz      short loc_40B61E
.text:0040B60E                 push    ebx
.text:0040B60F                 push    [ebp+var_21C]
.text:0040B615                 mov     ecx, esi
.text:0040B617                 push    eax
.text:0040B618                 call    ds:?MessageBoxW@CWnd@@QAEHPBG0I@Z ; CWnd::MessageBoxW(ushort const *,ushort const *,uint)
.text:0040B61E
.text:0040B61E loc_40B61E:                             ; CODE XREF: sub_40B530+BF↑j
.text:0040B61E                                         ; sub_40B530+D1↑j ...
.text:0040B61E                 push    3
.text:0040B620                 pop     eax
.text:0040B621                 cmp     edi, eax
.text:0040B623                 jl      short loc_40B62E
.text:0040B625                 mov     eax, 3E7h
.text:0040B62A                 cmp     edi, eax
.text:0040B62C                 jle     short loc_40B639
.text:0040B62E
.text:0040B62E loc_40B62E:                             ; CODE XREF: sub_40B530+F3↑j
.text:0040B62E                 mov     dword_41391C, ebx
.text:0040B634                 mov     dword_413918, eax
.text:0040B639
.text:0040B639 loc_40B639:                             ; CODE XREF: sub_40B530+FC↑j
.text:0040B639                 lea     ecx, [ebp+var_21C]
.text:0040B639 ;   } // starts at 40B5E3
.text:0040B63F ;   try {
.text:0040B63F                 mov     byte ptr [ebp+var_4], 1
.text:0040B643                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040B649                 lea     ecx, [ebp+var_220]
.text:0040B649 ;   } // starts at 40B63F
.text:0040B64F ;   try {
.text:0040B64F                 mov     byte ptr [ebp+var_4], bl
.text:0040B652                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040B658                 xor     eax, eax
.text:0040B65A                 inc     eax
.text:0040B65B
.text:0040B65B loc_40B65B:                             ; CODE XREF: sub_40B530+89↑j
.text:0040B65B                 push    eax
.text:0040B65C                 mov     [esi+0B0h], eax
.text:0040B662                 mov     edi, 0D6h ; 'Ö'
.text:0040B667                 push    dword_413918
.text:0040B66D                 mov     ecx, esi
.text:0040B66F                 push    edi
.text:0040B670                 call    ds:?SetDlgItemInt@CWnd@@QAEXHIH@Z ; CWnd::SetDlgItemInt(int,uint,int)
.text:0040B676                 mov     ecx, esi
.text:0040B678                 mov     [esi+0B0h], ebx
.text:0040B67E                 call    sub_40C5D6
.text:0040B683                 mov     edx, edi
.text:0040B685                 mov     ecx, esi
.text:0040B687                 call    sub_40DAA3
.text:0040B68C                 test    eax, eax
.text:0040B68E                 jz      short loc_40B69F
.text:0040B690                 push    0FFFFFFFFh      ; lParam
.text:0040B692                 push    ebx             ; wParam
.text:0040B693                 push    0B1h ; '±'      ; Msg
.text:0040B698                 push    eax             ; hWnd
.text:0040B699                 call    ds:SendMessageW
.text:0040B699 ;   } // starts at 40B64F
.text:0040B69F
.text:0040B69F loc_40B69F:                             ; CODE XREF: sub_40B530+15E↑j
.text:0040B69F                 or      [ebp+var_4], 0FFFFFFFFh
.text:0040B6A3                 lea     ecx, [ebp+var_224]
.text:0040B6A9                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040B6AF                 call    __EH_epilog3_GS
.text:0040B6B4                 retn
.text:0040B6B4 ; } // starts at 40B530
.text:0040B6B4 sub_40B530      endp
.text:0040B6B4
.text:0040B6B4 ; ---------------------------------------------------------------------------
.text:0040B6B5                 align 10h
.text:0040B6C0
.text:0040B6C0 ; =============== S U B R O U T I N E =======================================
.text:0040B6C0
.text:0040B6C0 ; Attributes: bp-based frame
.text:0040B6C0
.text:0040B6C0 sub_40B6C0      proc near               ; DATA XREF: .text:00401AA4↑o
.text:0040B6C0                                         ; .text:00402A5C↑o
.text:0040B6C0
.text:0040B6C0 var_38          = dword ptr -38h
.text:0040B6C0 var_34          = dword ptr -34h
.text:0040B6C0 var_30          = byte ptr -30h
.text:0040B6C0 var_24          = dword ptr -24h
.text:0040B6C0 var_20          = dword ptr -20h
.text:0040B6C0 var_18          = dword ptr -18h
.text:0040B6C0 var_14          = dword ptr -14h
.text:0040B6C0 var_4           = dword ptr -4
.text:0040B6C0 arg_4           = dword ptr  0Ch
.text:0040B6C0
.text:0040B6C0 ; FUNCTION CHUNK AT .text:004112E6 SIZE 00000023 BYTES
.text:0040B6C0
.text:0040B6C0 ; __unwind { // loc_4112EE
.text:0040B6C0                 push    2Ch
.text:0040B6C2                 mov     eax, offset loc_4112EE
.text:0040B6C7                 call    __EH_prolog3
.text:0040B6CC                 mov     ebx, ecx
.text:0040B6CE                 call    sub_40A956
.text:0040B6D3                 test    eax, eax
.text:0040B6D5                 js      loc_40B75D
.text:0040B6DB                 xor     edi, edi
.text:0040B6DD                 mov     [ebp+var_38], offset ??_7CBootIniAdvancedDlg@@6B@ ; const CBootIniAdvancedDlg::`vftable'
.text:0040B6E4                 mov     [ebp+var_34], edi
.text:0040B6E7                 mov     [ebp+var_24], edi
.text:0040B6EA                 mov     [ebp+var_20], edi
.text:0040B6ED                 mov     [ebp+var_18], edi
.text:0040B6F0                 imul    eax, 1D0h
.text:0040B6F6 ;   try {
.text:0040B6F6                 mov     [ebp+var_4], edi
.text:0040B6F9                 add     eax, hMem
.text:0040B6FF                 mov     [ebp+var_14], eax
.text:0040B702                 jz      short loc_40B748
.text:0040B704                 call    ds:GetActiveWindow
.text:0040B70A                 mov     esi, eax
.text:0040B70C                 lea     eax, [ebp+var_38]
.text:0040B70F                 push    eax
.text:0040B710                 lea     eax, [ebp+var_30]
.text:0040B713                 push    eax
.text:0040B714                 push    offset dword_4137D0
.text:0040B719                 call    ds:AtlModuleAddCreateWndData
.text:0040B71F                 push    edi
.text:0040B720                 push    offset sub_40A650
.text:0040B725                 push    esi
.text:0040B726                 push    72h ; 'r'
.text:0040B728                 push    dword_4137D8
.text:0040B72E                 call    ds:AtlAxDialogBoxW
.text:0040B734                 dec     eax
.text:0040B735                 neg     eax
.text:0040B737                 sbb     eax, eax
.text:0040B739                 add     eax, 1
.text:0040B73C                 jz      short loc_40B745
.text:0040B73E                 mov     ecx, ebx
.text:0040B740                 call    sub_40C5D6
.text:0040B745
.text:0040B745 loc_40B745:                             ; CODE XREF: sub_40B6C0+7C↑j
.text:0040B745                 mov     edi, [ebp+var_24]
.text:0040B745 ;   } // starts at 40B6F6
.text:0040B748
.text:0040B748 loc_40B748:                             ; CODE XREF: sub_40B6C0+42↑j
.text:0040B748                 or      [ebp+var_4], 0FFFFFFFFh
.text:0040B74C                 mov     [ebp+var_38], offset ??_7CBootIniAdvancedDlg@@6B@ ; const CBootIniAdvancedDlg::`vftable'
.text:0040B753                 test    edi, edi
.text:0040B755                 jz      short loc_40B75D
.text:0040B757                 push    edi             ; lpMem
.text:0040B758                 call    _AtlThunk_FreeData@4 ; AtlThunk_FreeData(x)
.text:0040B75D
.text:0040B75D loc_40B75D:                             ; CODE XREF: sub_40B6C0+15↑j
.text:0040B75D                                         ; sub_40B6C0+95↑j
.text:0040B75D                 call    __EH_epilog3
.text:0040B762                 retn
.text:0040B762 ; } // starts at 40B6C0
.text:0040B762 sub_40B6C0      endp
.text:0040B762
.text:0040B762 ; ---------------------------------------------------------------------------
.text:0040B763                 align 10h
.text:0040B770
.text:0040B770 ; =============== S U B R O U T I N E =======================================
.text:0040B770
.text:0040B770 ; Attributes: bp-based frame
.text:0040B770
.text:0040B770 sub_40B770      proc near               ; DATA XREF: .text:00401ABC↑o
.text:0040B770                                         ; .text:00402A60↑o
.text:0040B770
.text:0040B770 hWnd            = dword ptr -8
.text:0040B770 wParam          = dword ptr -4
.text:0040B770
.text:0040B770                 mov     edi, edi
.text:0040B772                 push    ebp
.text:0040B773                 mov     ebp, esp
.text:0040B775                 push    ecx
.text:0040B776                 push    ecx
.text:0040B777                 push    ebx
.text:0040B778                 mov     ebx, ecx
.text:0040B77A                 push    esi
.text:0040B77B                 xor     esi, esi
.text:0040B77D                 cmp     [ebx+0B0h], esi
.text:0040B783                 jnz     short loc_40B803
.text:0040B785                 mov     edx, 0CEh ; 'Î'
.text:0040B78A                 call    sub_40DAA3
.text:0040B78F                 mov     [ebp+hWnd], eax
.text:0040B792                 test    eax, eax
.text:0040B794                 jz      short loc_40B803
.text:0040B796                 push    esi             ; lParam
.text:0040B797                 push    esi             ; wParam
.text:0040B798                 push    188h            ; Msg
.text:0040B79D                 push    eax             ; hWnd
.text:0040B79E                 call    ds:SendMessageW
.text:0040B7A4                 mov     [ebp+wParam], eax
.text:0040B7A7                 cmp     eax, [ebx+0A4h]
.text:0040B7AD                 jl      short loc_40B803
.text:0040B7AF                 cmp     eax, [ebx+0A8h]
.text:0040B7B5                 jg      short loc_40B803
.text:0040B7B7                 mov     esi, [ebx+9Ch]
.text:0040B7BD                 test    esi, esi
.text:0040B7BF                 jz      short loc_40B803
.text:0040B7C1                 push    edi
.text:0040B7C2                 mov     edi, offset unk_41393C
.text:0040B7C7                 xor     eax, eax
.text:0040B7C9                 inc     eax
.text:0040B7CA                 mov     ecx, ebx
.text:0040B7CC                 movsd
.text:0040B7CD                 movsd
.text:0040B7CE                 movsd
.text:0040B7CF                 movsd
.text:0040B7D0                 mov     dword_413950, eax
.text:0040B7D5                 mov     dword_413954, eax
.text:0040B7DA                 call    sub_40C5D6
.text:0040B7DF                 mov     ecx, ebx
.text:0040B7E1                 call    ?ReDrawOSListBox@CPageBootIni@@AAEJXZ ; CPageBootIni::ReDrawOSListBox(void)
.text:0040B7E6                 mov     esi, [ebp+wParam]
.text:0040B7E9                 push    0               ; lParam
.text:0040B7EB                 push    esi             ; wParam
.text:0040B7EC                 push    186h            ; Msg
.text:0040B7F1                 push    [ebp+hWnd]      ; hWnd
.text:0040B7F4                 call    ds:SendMessageW
.text:0040B7FA                 push    esi
.text:0040B7FB                 mov     ecx, ebx
.text:0040B7FD                 call    ?SelectLine@CPageBootIni@@QAEXH@Z ; CPageBootIni::SelectLine(int)
.text:0040B802                 pop     edi
.text:0040B803
.text:0040B803 loc_40B803:                             ; CODE XREF: sub_40B770+13↑j
.text:0040B803                                         ; sub_40B770+24↑j ...
.text:0040B803                 pop     esi
.text:0040B804                 pop     ebx
.text:0040B805                 mov     esp, ebp
.text:0040B807                 pop     ebp
.text:0040B808                 retn
.text:0040B808 sub_40B770      endp
.text:0040B808
.text:0040B808 ; ---------------------------------------------------------------------------
.text:0040B809                 align 10h
.text:0040B810
.text:0040B810 ; =============== S U B R O U T I N E =======================================
.text:0040B810
.text:0040B810 ; Attributes: thunk
.text:0040B810
.text:0040B810 sub_40B810      proc near               ; DATA XREF: .text:00401AD4↑o
.text:0040B810                                         ; .text:00402A64↑o
.text:0040B810                 jmp     sub_40C5D6
.text:0040B810 sub_40B810      endp
.text:0040B810
.text:0040B810 ; ---------------------------------------------------------------------------
.text:0040B815                 align 10h
.text:0040B820
.text:0040B820 ; =============== S U B R O U T I N E =======================================
.text:0040B820
.text:0040B820 ; Attributes: bp-based frame
.text:0040B820
.text:0040B820 sub_40B820      proc near               ; DATA XREF: .text:00401B18↑o
.text:0040B820                                         ; .text:00402A68↑o
.text:0040B820
.text:0040B820 var_4           = dword ptr -4
.text:0040B820
.text:0040B820                 mov     edi, edi
.text:0040B822                 push    ebp
.text:0040B823                 mov     ebp, esp
.text:0040B825                 push    ecx
.text:0040B826                 mov     eax, ___security_cookie
.text:0040B82B                 xor     eax, ebp
.text:0040B82D                 mov     [ebp+var_4], eax
.text:0040B830                 push    edi
.text:0040B831                 mov     edi, ecx
.text:0040B833                 cmp     dword ptr [edi+8], 0
.text:0040B837                 jnz     short loc_40B84E
.text:0040B839                 mov     eax, [edi]
.text:0040B83B                 push    esi
.text:0040B83C                 mov     esi, [eax+8]
.text:0040B83F                 mov     ecx, esi
.text:0040B841                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B847                 mov     ecx, edi
.text:0040B849                 call    esi
.text:0040B84B                 pop     esi
.text:0040B84C                 jmp     short loc_40B851
.text:0040B84E ; ---------------------------------------------------------------------------
.text:0040B84E
.text:0040B84E loc_40B84E:                             ; CODE XREF: sub_40B820+17↑j
.text:0040B84E                 mov     eax, [edi+24h]
.text:0040B851
.text:0040B851 loc_40B851:                             ; CODE XREF: sub_40B820+2C↑j
.text:0040B851                 mov     ecx, [ebp+var_4]
.text:0040B854                 xor     ecx, ebp        ; StackCookie
.text:0040B856                 pop     edi
.text:0040B857                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040B85C                 mov     esp, ebp
.text:0040B85E                 pop     ebp
.text:0040B85F                 retn
.text:0040B85F sub_40B820      endp
.text:0040B85F
.text:0040B860
.text:0040B860 ; =============== S U B R O U T I N E =======================================
.text:0040B860
.text:0040B860 ; Attributes: bp-based frame
.text:0040B860
.text:0040B860 sub_40B860      proc near               ; CODE XREF: CPageBootIni::OnApply(void)+35↓p
.text:0040B860
.text:0040B860 var_7C          = dword ptr -7Ch
.text:0040B860 var_78          = dword ptr -78h
.text:0040B860 lpText          = dword ptr -74h
.text:0040B860 lpCaption       = dword ptr -70h
.text:0040B860 var_6C          = dword ptr -6Ch
.text:0040B860 var_68          = dword ptr -68h
.text:0040B860 var_64          = dword ptr -64h
.text:0040B860 var_5C          = dword ptr -5Ch
.text:0040B860 var_4           = dword ptr -4
.text:0040B860 arg_4           = dword ptr  0Ch
.text:0040B860
.text:0040B860 ; FUNCTION CHUNK AT .text:00411309 SIZE 00000037 BYTES
.text:0040B860
.text:0040B860 ; __unwind { // loc_41131B
.text:0040B860                 push    70h
.text:0040B862                 mov     eax, offset loc_41131B
.text:0040B867                 call    __EH_prolog3_GS
.text:0040B86C                 mov     ebx, ecx
.text:0040B86E                 mov     [ebp+var_78], ebx
.text:0040B871                 push    58h ; 'X'       ; Size
.text:0040B873                 xor     esi, esi
.text:0040B875                 lea     eax, [ebp+var_68]
.text:0040B878                 push    esi             ; Val
.text:0040B879                 push    eax             ; void *
.text:0040B87A                 call    memset
.text:0040B87F                 or      [ebp+var_7C], 0FFFFFFFFh
.text:0040B883                 xor     ecx, ecx
.text:0040B885                 add     esp, 0Ch
.text:0040B888                 cmp     [ebx+0BCh], ecx
.text:0040B88E                 jnz     loc_40BA89
.text:0040B894                 mov     eax, [ebx+0A0h]
.text:0040B89A                 test    eax, eax
.text:0040B89C                 jz      loc_40BA89
.text:0040B8A2                 cmp     [eax+14h], ecx
.text:0040B8A5                 jz      loc_40BA89
.text:0040B8AB                 push    offset aFveapiDll ; "fveapi.dll"
.text:0040B8B0                 call    ds:LoadLibraryW
.text:0040B8B6                 mov     edi, eax
.text:0040B8B8                 test    edi, edi
.text:0040B8BA                 jz      loc_40BA65
.text:0040B8C0                 push    offset aFveopenvolumew ; "FveOpenVolumeW"
.text:0040B8C5                 push    edi             ; hModule
.text:0040B8C6                 call    ds:GetProcAddress
.text:0040B8CC                 mov     [ebp+lpText], eax
.text:0040B8CF                 test    eax, eax
.text:0040B8D1                 jz      loc_40BA65
.text:0040B8D7                 push    offset aFvegetstatus ; "FveGetStatus"
.text:0040B8DC                 push    edi             ; hModule
.text:0040B8DD                 call    ds:GetProcAddress
.text:0040B8E3                 mov     [ebp+lpCaption], eax
.text:0040B8E6                 test    eax, eax
.text:0040B8E8                 jz      loc_40BA65
.text:0040B8EE                 push    offset aFveclosevolume ; "FveCloseVolume"
.text:0040B8F3                 push    edi             ; hModule
.text:0040B8F4                 call    ds:GetProcAddress
.text:0040B8FA                 mov     ebx, eax
.text:0040B8FC                 mov     [ebp+var_6C], ebx
.text:0040B8FF                 test    ebx, ebx
.text:0040B901                 jz      loc_40BA67
.text:0040B907                 push    800h            ; Size
.text:0040B90C                 mov     [ebp+var_64], 5
.text:0040B913                 mov     [ebp+var_68], 58h ; 'X'
.text:0040B91A                 call    ds:malloc
.text:0040B920                 mov     ebx, eax
.text:0040B922                 pop     ecx
.text:0040B923                 test    ebx, ebx
.text:0040B925                 jnz     short loc_40B934
.text:0040B927                 mov     esi, 8007000Eh
.text:0040B92C
.text:0040B92C loc_40B92C:                             ; CODE XREF: sub_40B860+200↓j
.text:0040B92C                 mov     ebx, [ebp+var_6C]
.text:0040B92F                 jmp     loc_40BA67
.text:0040B934 ; ---------------------------------------------------------------------------
.text:0040B934
.text:0040B934 loc_40B934:                             ; CODE XREF: sub_40B860+C5↑j
.text:0040B934                 mov     esi, [ebp+var_78]
.text:0040B937                 xor     eax, eax
.text:0040B939                 mov     [ebx], ax
.text:0040B93C                 push    3Ah ; ':'       ; Ch
.text:0040B93E                 mov     eax, [esi+0A0h]
.text:0040B944                 push    dword ptr [eax+14h] ; Str
.text:0040B947                 call    ds:wcsrchr
.text:0040B94D                 mov     edx, 400h
.text:0040B952                 pop     ecx
.text:0040B953                 pop     ecx
.text:0040B954                 mov     ecx, ebx
.text:0040B956                 test    eax, eax
.text:0040B958                 jz      short loc_40B983
.text:0040B95A                 push    offset asc_4032FC ; "\\\\.\\"
.text:0040B95F                 call    ?StringCchCopyW@@YGJPAGIPBG@Z_0 ; StringCchCopyW(ushort *,uint,ushort const *)
.text:0040B964                 mov     esi, eax
.text:0040B966                 test    esi, esi
.text:0040B968                 js      loc_40BA58
.text:0040B96E                 mov     eax, [ebp+var_78]
.text:0040B971                 mov     ecx, ebx
.text:0040B973                 mov     eax, [eax+0A0h]
.text:0040B979                 push    dword ptr [eax+14h]
.text:0040B97C                 call    sub_408586
.text:0040B981                 jmp     short loc_40B991
.text:0040B983 ; ---------------------------------------------------------------------------
.text:0040B983
.text:0040B983 loc_40B983:                             ; CODE XREF: sub_40B860+F8↑j
.text:0040B983                 mov     eax, [esi+0A0h]
.text:0040B989                 push    dword ptr [eax+14h]
.text:0040B98C                 call    ?StringCchCopyW@@YGJPAGIPBG@Z_0 ; StringCchCopyW(ushort *,uint,ushort const *)
.text:0040B991
.text:0040B991 loc_40B991:                             ; CODE XREF: sub_40B860+121↑j
.text:0040B991                 mov     esi, eax
.text:0040B993                 test    esi, esi
.text:0040B995                 js      loc_40BA58
.text:0040B99B                 mov     esi, [ebp+lpText]
.text:0040B99E                 lea     eax, [ebp+var_7C]
.text:0040B9A1                 push    eax
.text:0040B9A2                 push    0
.text:0040B9A4                 push    ebx
.text:0040B9A5                 mov     ecx, esi
.text:0040B9A7                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B9AD                 call    esi
.text:0040B9AF                 mov     esi, eax
.text:0040B9B1                 test    esi, esi
.text:0040B9B3                 js      loc_40BA58
.text:0040B9B9                 mov     esi, [ebp+lpCaption]
.text:0040B9BC                 lea     eax, [ebp+var_68]
.text:0040B9BF                 push    eax
.text:0040B9C0                 push    [ebp+var_7C]
.text:0040B9C3                 mov     ecx, esi
.text:0040B9C5                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B9CB                 call    esi
.text:0040B9CD                 mov     esi, eax
.text:0040B9CF                 test    esi, esi
.text:0040B9D1                 js      loc_40BA58
.text:0040B9D7                 test    [ebp+var_5C], 200h
.text:0040B9DE                 jz      short loc_40BA58
.text:0040B9E0                 lea     ecx, [ebp+lpText]
.text:0040B9E3                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040B9E9 ;   try {
.text:0040B9E9                 and     [ebp+var_4], 0
.text:0040B9ED                 lea     ecx, [ebp+lpCaption]
.text:0040B9F0                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040B9F6                 push    145h
.text:0040B9FB                 lea     ecx, [ebp+lpText]
.text:0040B9FB ;   } // starts at 40B9E9
.text:0040B9FE ;   try {
.text:0040B9FE                 mov     byte ptr [ebp+var_4], 1
.text:0040BA02                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:0040BA08                 push    7Eh ; '~'
.text:0040BA0A                 lea     ecx, [ebp+lpCaption]
.text:0040BA0D                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:0040BA13                 mov     eax, [ebp+var_78]
.text:0040BA16                 push    4               ; uType
.text:0040BA18                 push    [ebp+lpCaption] ; lpCaption
.text:0040BA1B                 push    [ebp+lpText]    ; lpText
.text:0040BA1E                 push    dword ptr [eax+20h] ; hWnd
.text:0040BA21                 call    ds:MessageBoxW
.text:0040BA21 ;   } // starts at 40B9FE
.text:0040BA27 ;   try {
.text:0040BA27                 mov     byte ptr [ebp+var_4], 0
.text:0040BA2B                 lea     ecx, [ebp+lpCaption]
.text:0040BA2E                 cmp     eax, 6
.text:0040BA31                 jz      short loc_40BA38
.text:0040BA33                 xor     esi, esi
.text:0040BA35                 inc     esi
.text:0040BA36                 jmp     short loc_40BA45
.text:0040BA38 ; ---------------------------------------------------------------------------
.text:0040BA38
.text:0040BA38 loc_40BA38:                             ; CODE XREF: sub_40B860+1D1↑j
.text:0040BA38                 mov     eax, [ebp+var_78]
.text:0040BA3B                 mov     dword ptr [eax+0BCh], 1
.text:0040BA45
.text:0040BA45 loc_40BA45:                             ; CODE XREF: sub_40B860+1D6↑j
.text:0040BA45                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040BA45 ;   } // starts at 40BA27
.text:0040BA4B                 or      [ebp+var_4], 0FFFFFFFFh
.text:0040BA4F                 lea     ecx, [ebp+lpText]
.text:0040BA52                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040BA58
.text:0040BA58 loc_40BA58:                             ; CODE XREF: sub_40B860+108↑j
.text:0040BA58                                         ; sub_40B860+135↑j ...
.text:0040BA58                 push    ebx             ; Block
.text:0040BA59                 call    ds:__imp_free
.text:0040BA5F                 pop     ecx
.text:0040BA60                 jmp     loc_40B92C
.text:0040BA65 ; ---------------------------------------------------------------------------
.text:0040BA65
.text:0040BA65 loc_40BA65:                             ; CODE XREF: sub_40B860+5A↑j
.text:0040BA65                                         ; sub_40B860+71↑j ...
.text:0040BA65                 mov     ebx, esi
.text:0040BA67
.text:0040BA67 loc_40BA67:                             ; CODE XREF: sub_40B860+A1↑j
.text:0040BA67                                         ; sub_40B860+CF↑j
.text:0040BA67                 cmp     [ebp+var_7C], 0FFFFFFFFh
.text:0040BA6B                 jz      short loc_40BA7E
.text:0040BA6D                 test    ebx, ebx
.text:0040BA6F                 jz      short loc_40BA7E
.text:0040BA71                 push    [ebp+var_7C]
.text:0040BA74                 mov     ecx, ebx
.text:0040BA76                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040BA7C                 call    ebx
.text:0040BA7E
.text:0040BA7E loc_40BA7E:                             ; CODE XREF: sub_40B860+20B↑j
.text:0040BA7E                                         ; sub_40B860+20F↑j
.text:0040BA7E                 test    edi, edi
.text:0040BA80                 jz      short loc_40BA89
.text:0040BA82                 push    edi             ; hLibModule
.text:0040BA83                 call    ds:FreeLibrary
.text:0040BA89
.text:0040BA89 loc_40BA89:                             ; CODE XREF: sub_40B860+2E↑j
.text:0040BA89                                         ; sub_40B860+3C↑j ...
.text:0040BA89                 mov     eax, esi
.text:0040BA8B                 call    __EH_epilog3_GS
.text:0040BA90                 retn
.text:0040BA90 ; } // starts at 40B860
.text:0040BA90 sub_40B860      endp
.text:0040BA90
.text:0040BA90 ; ---------------------------------------------------------------------------
.text:0040BA91                 align 10h
.text:0040BAA0
.text:0040BAA0 ; =============== S U B R O U T I N E =======================================
.text:0040BAA0
.text:0040BAA0 ; Attributes: bp-based frame info_from_lumina
.text:0040BAA0
.text:0040BAA0 ; int __thiscall CPageBootIni::OnApply(CPageBootIni *__hidden this)
.text:0040BAA0 ?OnApply@CPageBootIni@@UAEHXZ proc near ; DATA XREF: .text:00401C10↑o
.text:0040BAA0                                         ; .text:00402A6C↑o
.text:0040BAA0
.text:0040BAA0 var_30          = dword ptr -30h
.text:0040BAA0 Buffer          = word ptr -2Ch
.text:0040BAA0 DestinationString= _UNICODE_STRING ptr -28h
.text:0040BAA0 var_20          = dword ptr -20h
.text:0040BAA0 dwMessageId     = dword ptr -1Ch
.text:0040BAA0 lpFileName      = dword ptr -18h
.text:0040BAA0 lpText          = dword ptr -14h
.text:0040BAA0 var_4           = dword ptr -4
.text:0040BAA0 arg_4           = dword ptr  0Ch
.text:0040BAA0
.text:0040BAA0 ; FUNCTION CHUNK AT .text:00411340 SIZE 00000076 BYTES
.text:0040BAA0
.text:0040BAA0 ; __unwind { // loc_411391
.text:0040BAA0                 push    24h
.text:0040BAA2                 mov     eax, offset loc_411391
.text:0040BAA7                 call    __EH_prolog3_GS
.text:0040BAAC                 mov     esi, ecx
.text:0040BAAE                 mov     [ebp+var_30], esi
.text:0040BAB1                 lea     ecx, [ebp+lpFileName]
.text:0040BAB4                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040BABA                 xor     ebx, ebx
.text:0040BABC ;   try {
.text:0040BABC                 mov     [ebp+var_4], ebx
.text:0040BABF                 cmp     [esi+0B8h], ebx
.text:0040BAC5                 jz      loc_40BDF2
.text:0040BACB                 push    6Ah ; 'j'
.text:0040BACD                 pop     ecx
.text:0040BACE                 call    sub_40E20E
.text:0040BAD3                 mov     ecx, esi
.text:0040BAD5                 call    sub_40B860
.text:0040BADA                 mov     [ebp+dwMessageId], eax
.text:0040BADD                 cmp     eax, 1
.text:0040BAE0                 jz      loc_40BDF5
.text:0040BAE6                 test    eax, eax
.text:0040BAE8                 js      loc_40BD0A
.text:0040BAEE                 push    124h
.text:0040BAF3                 mov     ecx, esi
.text:0040BAF5                 call    ds:?IsDlgButtonChecked@CWnd@@QBEIH@Z ; CWnd::IsDlgButtonChecked(int)
.text:0040BAFB                 mov     edi, eax
.text:0040BAFD                 mov     dword ptr [ebp+Buffer], eax
.text:0040BB00                 mov     [ebp+dwMessageId], 3
.text:0040BB07                 test    edi, edi
.text:0040BB09                 jz      loc_40BBC1
.text:0040BB0F                 lea     ecx, [ebp+lpText]
.text:0040BB12                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040BB18                 lea     ecx, [ebp+DestinationString.Buffer]
.text:0040BB18 ;   } // starts at 40BABC
.text:0040BB1B ;   try {
.text:0040BB1B                 mov     byte ptr [ebp+var_4], 1
.text:0040BB1F                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040BB25                 lea     ecx, [ebp+var_20]
.text:0040BB25 ;   } // starts at 40BB1B
.text:0040BB28 ;   try {
.text:0040BB28                 mov     byte ptr [ebp+var_4], 2
.text:0040BB2C                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040BB32                 mov     eax, [ebp+dwMessageId]
.text:0040BB35                 lea     ecx, [ebp+var_20]
.text:0040BB38                 push    66h ; 'f'
.text:0040BB38 ;   } // starts at 40BB28
.text:0040BB3A ;   try {
.text:0040BB3A                 mov     byte ptr [ebp+var_4], al
.text:0040BB3D                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:0040BB43                 test    eax, eax
.text:0040BB45                 jle     loc_40BE0A
.text:0040BB4B                 push    7Eh ; '~'
.text:0040BB4D                 lea     ecx, [ebp+DestinationString.Buffer]
.text:0040BB50                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:0040BB56                 test    eax, eax
.text:0040BB58                 jle     loc_40BE0A
.text:0040BB5E                 push    [ebp+var_20]
.text:0040BB61                 lea     eax, [ebp+lpText]
.text:0040BB64                 push    100h
.text:0040BB69                 push    eax
.text:0040BB6A                 call    ds:?Format@CString@@QAAXIZZ ; CString::Format(uint,...)
.text:0040BB70                 mov     eax, [ebp+lpText]
.text:0040BB73                 add     esp, 0Ch
.text:0040BB76                 cmp     [eax-8], ebx
.text:0040BB79                 jz      loc_40BE0A
.text:0040BB7F                 push    4               ; uType
.text:0040BB81                 push    [ebp+DestinationString.Buffer] ; lpCaption
.text:0040BB84                 push    eax             ; lpText
.text:0040BB85                 push    ebx             ; hWnd
.text:0040BB86                 call    ds:MessageBoxW
.text:0040BB8C                 cmp     eax, 6
.text:0040BB8F                 jnz     loc_40BE0A
.text:0040BB95                 xor     edi, edi
.text:0040BB95 ;   } // starts at 40BB3A
.text:0040BB97 ;   try {
.text:0040BB97                 mov     byte ptr [ebp+var_4], 2
.text:0040BB9B                 inc     edi
.text:0040BB9C                 lea     ecx, [ebp+var_20]
.text:0040BB9F                 mov     dword ptr [ebp+Buffer], edi
.text:0040BBA2                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040BBA8                 lea     ecx, [ebp+DestinationString.Buffer]
.text:0040BBA8 ;   } // starts at 40BB97
.text:0040BBAB ;   try {
.text:0040BBAB                 mov     byte ptr [ebp+var_4], 1
.text:0040BBAF                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040BBB5                 lea     ecx, [ebp+lpText]
.text:0040BBB5 ;   } // starts at 40BBAB
.text:0040BBB8 ;   try {
.text:0040BBB8                 mov     byte ptr [ebp+var_4], bl
.text:0040BBBB                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040BBC1
.text:0040BBC1 loc_40BBC1:                             ; CODE XREF: CPageBootIni::OnApply(void)+69↑j
.text:0040BBC1                 push    offset aBackup  ; ".backup"
.text:0040BBC6                 lea     ecx, [ebp+lpText]
.text:0040BBC9                 call    ds:??0CString@@QAE@PBG@Z ; CString::CString(ushort const *)
.text:0040BBCF                 lea     eax, [ebp+lpText]
.text:0040BBCF ;   } // starts at 40BBB8
.text:0040BBD2 ;   try {
.text:0040BBD2                 mov     byte ptr [ebp+var_4], 4
.text:0040BBD6                 push    eax
.text:0040BBD7                 lea     ecx, [ebp+DestinationString.Buffer]
.text:0040BBDA                 call    sub_40D856
.text:0040BBDF                 push    eax
.text:0040BBE0                 lea     ecx, [ebp+lpFileName]
.text:0040BBE0 ;   } // starts at 40BBD2
.text:0040BBE3 ;   try {
.text:0040BBE3                 mov     byte ptr [ebp+var_4], 5
.text:0040BBE7                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:0040BBED                 lea     ecx, [ebp+DestinationString.Buffer]
.text:0040BBED ;   } // starts at 40BBE3
.text:0040BBF0 ;   try {
.text:0040BBF0                 mov     byte ptr [ebp+var_4], 4
.text:0040BBF4                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040BBFA                 lea     ecx, [ebp+lpText]
.text:0040BBFA ;   } // starts at 40BBF0
.text:0040BBFD ;   try {
.text:0040BBFD                 mov     byte ptr [ebp+var_4], bl
.text:0040BC00                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040BC06                 mov     eax, [ebp+lpFileName]
.text:0040BC09                 cmp     [eax-8], ebx
.text:0040BC0C                 jz      loc_40BD10
.text:0040BC12                 cmp     [esi+0B4h], ebx
.text:0040BC18                 jz      short loc_40BC25
.text:0040BC1A                 mov     [ebp+lpText], 1
.text:0040BC21                 test    edi, edi
.text:0040BC23                 jz      short loc_40BC28
.text:0040BC25
.text:0040BC25 loc_40BC25:                             ; CODE XREF: CPageBootIni::OnApply(void)+178↑j
.text:0040BC25                 mov     [ebp+lpText], ebx
.text:0040BC28
.text:0040BC28 loc_40BC28:                             ; CODE XREF: CPageBootIni::OnApply(void)+183↑j
.text:0040BC28                 lea     ecx, [ebp+lpFileName]
.text:0040BC2B                 call    sub_40C709
.text:0040BC30                 test    eax, eax
.text:0040BC32                 jz      loc_40BE73
.text:0040BC38                 cmp     [esi+0C0h], ebx
.text:0040BC3E                 jz      loc_40BE40
.text:0040BC44                 mov     ecx, [ebp+lpFileName] ; Args
.text:0040BC47                 lea     edx, [ebp+lpText]
.text:0040BC4A                 call    sub_40EBA6
.text:0040BC4F                 mov     edi, eax
.text:0040BC51                 test    edi, edi
.text:0040BC53                 js      short loc_40BC79
.text:0040BC55                 push    [ebp+lpText]    ; SourceString
.text:0040BC58                 lea     eax, [ebp+DestinationString]
.text:0040BC5B                 push    eax             ; DestinationString
.text:0040BC5C                 call    ds:RtlInitUnicodeString
.text:0040BC62                 push    1
.text:0040BC64                 lea     eax, [ebp+DestinationString]
.text:0040BC67                 push    eax
.text:0040BC68                 call    ds:BcdImportStoreWithFlags
.text:0040BC6E                 push    [ebp+lpText]    ; hMem
.text:0040BC71                 mov     edi, eax
.text:0040BC73                 call    ds:LocalFree
.text:0040BC79
.text:0040BC79 loc_40BC79:                             ; CODE XREF: CPageBootIni::OnApply(void)+1B3↑j
.text:0040BC79                 push    edi             ; Status
.text:0040BC7A                 call    ds:RtlNtStatusToDosError
.text:0040BC80                 mov     [ebp+dwMessageId], eax
.text:0040BC83                 test    eax, eax
.text:0040BC85                 jnz     loc_40BD10
.text:0040BC8B                 mov     [esi+0C0h], ebx
.text:0040BC91                 cmp     [esi+0B4h], ebx
.text:0040BC97                 jnz     short loc_40BCA2
.text:0040BC99                 push    [ebp+lpFileName] ; lpFileName
.text:0040BC9C                 call    ds:DeleteFileW
.text:0040BCA2
.text:0040BCA2 loc_40BCA2:                             ; CODE XREF: CPageBootIni::OnApply(void)+1F7↑j
.text:0040BCA2                                         ; CPageBootIni::OnApply(void)+3C4↓j ...
.text:0040BCA2                 call    sub_40F610
.text:0040BCA7                 mov     [ebp+dwMessageId], eax
.text:0040BCAA                 test    eax, eax
.text:0040BCAC                 jnz     short loc_40BD10
.text:0040BCAE                 lea     edi, [esi+90h]
.text:0040BCB4                 mov     eax, [edi]
.text:0040BCB6                 mov     esi, [eax+4]
.text:0040BCB9                 mov     ecx, esi
.text:0040BCBB                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040BCC1                 mov     ecx, edi
.text:0040BCC3                 call    esi
.text:0040BCC5                 push    eax
.text:0040BCC6                 mov     ecx, edi
.text:0040BCC8                 call    sub_403CFC
.text:0040BCCD                 cmp     dword ptr [ebp+Buffer], 0
.text:0040BCD1                 mov     esi, [ebp+var_30]
.text:0040BCD4                 mov     dword ptr [esi+94h], 1
.text:0040BCDE                 jz      short loc_40BCF7
.text:0040BCE0                 push    ebx
.text:0040BCE1                 mov     ecx, esi
.text:0040BCE3                 call    sub_40BEDE
.text:0040BCE8                 mov     ecx, dword_413A6C
.text:0040BCEE                 test    ecx, ecx
.text:0040BCF0                 jz      short loc_40BCF7
.text:0040BCF2                 call    sub_4072C9
.text:0040BCF7
.text:0040BCF7 loc_40BCF7:                             ; CODE XREF: CPageBootIni::OnApply(void)+23E↑j
.text:0040BCF7                                         ; CPageBootIni::OnApply(void)+250↑j
.text:0040BCF7                 push    ebx
.text:0040BCF8                 push    124h
.text:0040BCFD                 mov     ecx, esi
.text:0040BCFF                 call    ds:?CheckDlgButton@CWnd@@QAEXHI@Z ; CWnd::CheckDlgButton(int,uint)
.text:0040BD05
.text:0040BD05 loc_40BD05:                             ; CODE XREF: CPageBootIni::OnApply(void)+42B↓j
.text:0040BD05                 mov     eax, [ebp+dwMessageId]
.text:0040BD08                 test    eax, eax
.text:0040BD0A
.text:0040BD0A loc_40BD0A:                             ; CODE XREF: CPageBootIni::OnApply(void)+48↑j
.text:0040BD0A                 jz      loc_40BDF2
.text:0040BD10
.text:0040BD10 loc_40BD10:                             ; CODE XREF: CPageBootIni::OnApply(void)+16C↑j
.text:0040BD10                                         ; CPageBootIni::OnApply(void)+1E5↑j ...
.text:0040BD10                 lea     ecx, [ebp+var_20]
.text:0040BD13                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040BD19                 lea     ecx, [ebp+DestinationString.Buffer]
.text:0040BD19 ;   } // starts at 40BBFD
.text:0040BD1C ;   try {
.text:0040BD1C                 mov     byte ptr [ebp+var_4], 6
.text:0040BD20                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040BD26                 lea     ecx, [ebp+lpText]
.text:0040BD26 ;   } // starts at 40BD1C
.text:0040BD29 ;   try {
.text:0040BD29                 mov     byte ptr [ebp+var_4], 7
.text:0040BD2D                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040BD33                 push    7Dh ; '}'
.text:0040BD35                 lea     ecx, [ebp+var_20]
.text:0040BD35 ;   } // starts at 40BD29
.text:0040BD38 ;   try {
.text:0040BD38                 mov     byte ptr [ebp+var_4], 8
.text:0040BD3C                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:0040BD42                 test    eax, eax
.text:0040BD44                 jz      short loc_40BDA6
.text:0040BD46                 push    123h
.text:0040BD4B                 lea     ecx, [ebp+DestinationString.Buffer]
.text:0040BD4E                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:0040BD54                 test    eax, eax
.text:0040BD56                 jz      short loc_40BDA6
.text:0040BD58                 push    ebx             ; Arguments
.text:0040BD59                 push    ebx             ; nSize
.text:0040BD5A                 lea     eax, [ebp+Buffer]
.text:0040BD5D                 push    eax             ; lpBuffer
.text:0040BD5E                 push    400h            ; dwLanguageId
.text:0040BD63                 push    [ebp+dwMessageId] ; dwMessageId
.text:0040BD66                 push    ebx             ; lpSource
.text:0040BD67                 push    1100h           ; dwFlags
.text:0040BD6C                 call    ds:FormatMessageW
.text:0040BD72                 test    eax, eax
.text:0040BD74                 jz      short loc_40BDA6
.text:0040BD76                 push    dword ptr [ebp+Buffer]
.text:0040BD79                 lea     eax, [ebp+lpText]
.text:0040BD7C                 push    [ebp+DestinationString.Buffer]
.text:0040BD7F                 push    offset aSS      ; "%s\n\n%s"
.text:0040BD84                 push    eax
.text:0040BD85                 call    ds:?Format@CString@@QAAXPBGZZ ; CString::Format(ushort const *,...)
.text:0040BD8B                 add     esp, 10h
.text:0040BD8E                 mov     ecx, esi
.text:0040BD90                 push    ebx
.text:0040BD91                 push    [ebp+var_20]
.text:0040BD94                 push    [ebp+lpText]
.text:0040BD97                 call    ds:?MessageBoxW@CWnd@@QAEHPBG0I@Z ; CWnd::MessageBoxW(ushort const *,ushort const *,uint)
.text:0040BD9D                 push    dword ptr [ebp+Buffer] ; hMem
.text:0040BDA0                 call    ds:LocalFree
.text:0040BDA6
.text:0040BDA6 loc_40BDA6:                             ; CODE XREF: CPageBootIni::OnApply(void)+2A4↑j
.text:0040BDA6                                         ; CPageBootIni::OnApply(void)+2B6↑j ...
.text:0040BDA6                 lea     edi, [esi+90h]
.text:0040BDAC                 mov     eax, [edi]
.text:0040BDAE                 mov     esi, [eax+18h]
.text:0040BDB1                 mov     ecx, esi
.text:0040BDB3                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040BDB9                 mov     ecx, edi
.text:0040BDBB                 call    esi
.text:0040BDBD                 mov     ecx, dword_413A6C
.text:0040BDC3                 test    ecx, ecx
.text:0040BDC5                 jz      short loc_40BDCC
.text:0040BDC7                 call    sub_4072C9
.text:0040BDCC
.text:0040BDCC loc_40BDCC:                             ; CODE XREF: CPageBootIni::OnApply(void)+325↑j
.text:0040BDCC                 lea     ecx, [ebp+lpText]
.text:0040BDCC ;   } // starts at 40BD38
.text:0040BDCF ;   try {
.text:0040BDCF                 mov     byte ptr [ebp+var_4], 7
.text:0040BDD3                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040BDD9                 lea     ecx, [ebp+DestinationString.Buffer]
.text:0040BDD9 ;   } // starts at 40BDCF
.text:0040BDDC ;   try {
.text:0040BDDC                 mov     byte ptr [ebp+var_4], 6
.text:0040BDE0                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040BDE6                 lea     ecx, [ebp+var_20]
.text:0040BDE6 ;   } // starts at 40BDDC
.text:0040BDE9 ;   try {
.text:0040BDE9                 mov     byte ptr [ebp+var_4], bl
.text:0040BDEC                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040BDF2
.text:0040BDF2 loc_40BDF2:                             ; CODE XREF: CPageBootIni::OnApply(void)+25↑j
.text:0040BDF2                                         ; CPageBootIni::OnApply(void):loc_40BD0A↑j
.text:0040BDF2                 xor     ebx, ebx
.text:0040BDF4                 inc     ebx
.text:0040BDF4 ;   } // starts at 40BDE9
.text:0040BDF5
.text:0040BDF5 loc_40BDF5:                             ; CODE XREF: CPageBootIni::OnApply(void)+40↑j
.text:0040BDF5                                         ; CPageBootIni::OnApply(void)+39E↓j
.text:0040BDF5                 or      [ebp+var_4], 0FFFFFFFFh
.text:0040BDF9                 lea     ecx, [ebp+lpFileName]
.text:0040BDFC                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040BE02                 mov     eax, ebx
.text:0040BE04                 call    __EH_epilog3_GS
.text:0040BE09                 retn
.text:0040BE0A ; ---------------------------------------------------------------------------
.text:0040BE0A
.text:0040BE0A loc_40BE0A:                             ; CODE XREF: CPageBootIni::OnApply(void)+A5↑j
.text:0040BE0A                                         ; CPageBootIni::OnApply(void)+B8↑j ...
.text:0040BE0A                 push    ebx
.text:0040BE0B                 push    124h
.text:0040BE10                 mov     ecx, esi
.text:0040BE12                 call    ds:?CheckDlgButton@CWnd@@QAEXHI@Z ; CWnd::CheckDlgButton(int,uint)
.text:0040BE18                 lea     ecx, [ebp+var_20]
.text:0040BE1B ;   try {
.text:0040BE1B                 mov     byte ptr [ebp+var_4], 2
.text:0040BE1F                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040BE25                 lea     ecx, [ebp+DestinationString.Buffer]
.text:0040BE25 ;   } // starts at 40BE1B
.text:0040BE28 ;   try {
.text:0040BE28                 mov     byte ptr [ebp+var_4], 1
.text:0040BE2C                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040BE32                 lea     ecx, [ebp+lpText]
.text:0040BE32 ;   } // starts at 40BE28
.text:0040BE35 ;   try {
.text:0040BE35                 mov     byte ptr [ebp+var_4], bl
.text:0040BE38                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040BE3E                 jmp     short loc_40BDF5
.text:0040BE40 ; ---------------------------------------------------------------------------
.text:0040BE40
.text:0040BE40 loc_40BE40:                             ; CODE XREF: CPageBootIni::OnApply(void)+19E↑j
.text:0040BE40                 lea     edi, [esi+90h]
.text:0040BE46                 mov     eax, [edi]
.text:0040BE48                 mov     esi, [eax+8]
.text:0040BE4B                 mov     ecx, esi
.text:0040BE4D                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040BE53                 mov     ecx, edi
.text:0040BE55                 call    esi
.text:0040BE57                 mov     esi, [ebp+var_30]
.text:0040BE5A                 test    eax, eax
.text:0040BE5C                 jz      short loc_40BE6A
.text:0040BE5E                 cmp     [esi+0B4h], ebx
.text:0040BE64                 jnz     loc_40BCA2
.text:0040BE6A
.text:0040BE6A loc_40BE6A:                             ; CODE XREF: CPageBootIni::OnApply(void)+3BC↑j
.text:0040BE6A                 push    [ebp+lpFileName] ; lpFileName
.text:0040BE6D                 call    ds:DeleteFileW
.text:0040BE73
.text:0040BE73 loc_40BE73:                             ; CODE XREF: CPageBootIni::OnApply(void)+192↑j
.text:0040BE73                 cmp     [ebp+lpText], 0
.text:0040BE77                 jz      loc_40BCA2
.text:0040BE7D                 mov     ecx, [ebp+lpFileName] ; Args
.text:0040BE80                 lea     edx, [ebp+lpText]
.text:0040BE83                 call    sub_40EBA6
.text:0040BE88                 mov     edi, eax
.text:0040BE8A                 test    edi, edi
.text:0040BE8C                 js      short loc_40BEB0
.text:0040BE8E                 push    [ebp+lpText]    ; SourceString
.text:0040BE91                 lea     eax, [ebp+DestinationString]
.text:0040BE94                 push    eax             ; DestinationString
.text:0040BE95                 call    ds:RtlInitUnicodeString
.text:0040BE9B                 lea     eax, [ebp+DestinationString]
.text:0040BE9E                 push    eax
.text:0040BE9F                 call    ds:BcdExportStore
.text:0040BEA5                 push    [ebp+lpText]    ; hMem
.text:0040BEA8                 mov     edi, eax
.text:0040BEAA                 call    ds:LocalFree
.text:0040BEB0
.text:0040BEB0 loc_40BEB0:                             ; CODE XREF: CPageBootIni::OnApply(void)+3EC↑j
.text:0040BEB0                 push    edi             ; Status
.text:0040BEB1                 call    ds:RtlNtStatusToDosError
.text:0040BEB7                 mov     [ebp+dwMessageId], eax
.text:0040BEBA                 test    eax, eax
.text:0040BEBC                 jz      loc_40BCA2
.text:0040BEC2                 push    [ebp+lpFileName] ; lpFileName
.text:0040BEC5                 call    ds:DeleteFileW
.text:0040BECB                 jmp     loc_40BD05
.text:0040BECB ;   } // starts at 40BE35
.text:0040BECB ; } // starts at 40BAA0
.text:0040BECB ?OnApply@CPageBootIni@@UAEHXZ endp
.text:0040BECB
.text:0040BED0
.text:0040BED0 ; =============== S U B R O U T I N E =======================================
.text:0040BED0
.text:0040BED0
.text:0040BED0 sub_40BED0      proc near               ; DATA XREF: .text:00401B20↑o
.text:0040BED0                                         ; .text:00402A70↑o
.text:0040BED0                 push    1
.text:0040BED2                 add     ecx, 0FFFFFF70h
.text:0040BED8                 call    sub_40BEDE
.text:0040BEDD                 retn
.text:0040BEDD sub_40BED0      endp
.text:0040BEDD
.text:0040BEDE
.text:0040BEDE ; =============== S U B R O U T I N E =======================================
.text:0040BEDE
.text:0040BEDE ; Attributes: bp-based frame
.text:0040BEDE
.text:0040BEDE sub_40BEDE      proc near               ; CODE XREF: CPageBootIni::OnApply(void)+243↑p
.text:0040BEDE                                         ; sub_40BED0+8↑p
.text:0040BEDE
.text:0040BEDE lpFileName      = dword ptr -18h
.text:0040BEDE var_14          = byte ptr -14h
.text:0040BEDE var_4           = dword ptr -4
.text:0040BEDE arg_0           = dword ptr  8
.text:0040BEDE arg_4           = dword ptr  0Ch
.text:0040BEDE
.text:0040BEDE ; FUNCTION CHUNK AT .text:004113B6 SIZE 00000037 BYTES
.text:0040BEDE
.text:0040BEDE ; __unwind { // loc_4113C8
.text:0040BEDE                 push    0Ch
.text:0040BEE0                 mov     eax, offset loc_4113C8
.text:0040BEE5                 call    __EH_prolog3_GS
.text:0040BEEA                 mov     edi, ecx
.text:0040BEEC                 cmp     [ebp+arg_0], 0
.text:0040BEF0                 jz      short loc_40BF06
.text:0040BEF2                 mov     eax, [edi]
.text:0040BEF4                 mov     esi, [eax+0D8h]
.text:0040BEFA                 mov     ecx, esi
.text:0040BEFC                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040BF02                 mov     ecx, edi
.text:0040BF04                 call    esi
.text:0040BF06
.text:0040BF06 loc_40BF06:                             ; CODE XREF: sub_40BEDE+12↑j
.text:0040BF06                 xor     esi, esi
.text:0040BF08                 lea     ecx, [ebp+var_14]
.text:0040BF0B                 push    offset aBackup  ; ".backup"
.text:0040BF10                 mov     [edi+0B4h], esi
.text:0040BF16                 call    ds:??0CString@@QAE@PBG@Z ; CString::CString(ushort const *)
.text:0040BF1C                 lea     eax, [ebp+var_14]
.text:0040BF1F ;   try {
.text:0040BF1F                 mov     [ebp+var_4], esi
.text:0040BF22                 push    eax
.text:0040BF23                 lea     ecx, [ebp+lpFileName]
.text:0040BF26                 call    sub_40D856
.text:0040BF2B                 lea     ecx, [ebp+var_14]
.text:0040BF2B ;   } // starts at 40BF1F
.text:0040BF2E ;   try {
.text:0040BF2E                 mov     byte ptr [ebp+var_4], 2
.text:0040BF32                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040BF38                 mov     eax, [ebp+lpFileName]
.text:0040BF3B                 cmp     [eax-8], esi
.text:0040BF3E                 jz      short loc_40BF47
.text:0040BF40                 push    eax             ; lpFileName
.text:0040BF41                 call    ds:DeleteFileW
.text:0040BF47
.text:0040BF47 loc_40BF47:                             ; CODE XREF: sub_40BEDE+60↑j
.text:0040BF47                 push    esi
.text:0040BF48                 lea     ecx, [edi+90h]
.text:0040BF4E                 call    sub_403CFC
.text:0040BF4E ;   } // starts at 40BF2E
.text:0040BF53                 or      [ebp+var_4], 0FFFFFFFFh
.text:0040BF57                 lea     ecx, [ebp+lpFileName]
.text:0040BF5A                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040BF60                 call    __EH_epilog3_GS
.text:0040BF65                 retn    4
.text:0040BF65 ; } // starts at 40BEDE
.text:0040BF65 sub_40BEDE      endp
.text:0040BF65
.text:0040BF65 ; ---------------------------------------------------------------------------
.text:0040BF68                 align 10h
.text:0040BF70
.text:0040BF70 ; =============== S U B R O U T I N E =======================================
.text:0040BF70
.text:0040BF70 ; Attributes: bp-based frame
.text:0040BF70
.text:0040BF70 sub_40BF70      proc near               ; DATA XREF: .text:00401B2C↑o
.text:0040BF70                                         ; .text:00402A74↑o
.text:0040BF70
.text:0040BF70 var_14          = byte ptr -14h
.text:0040BF70 var_10          = dword ptr -10h
.text:0040BF70 var_4           = dword ptr -4
.text:0040BF70 arg_4           = dword ptr  0Ch
.text:0040BF70
.text:0040BF70 ; FUNCTION CHUNK AT .text:004113ED SIZE 0000002D BYTES
.text:0040BF70
.text:0040BF70 ; __unwind { // loc_4113FF
.text:0040BF70                 push    8
.text:0040BF72                 mov     eax, offset loc_4113FF
.text:0040BF77                 call    __EH_prolog3
.text:0040BF7C                 mov     esi, ecx
.text:0040BF7E                 xor     ebx, ebx
.text:0040BF80                 cmp     [esi+24h], ebx
.text:0040BF83                 jz      short loc_40BFF2
.text:0040BF85                 call    sub_40F6A0
.text:0040BF8A                 push    offset aBackup  ; ".backup"
.text:0040BF8F                 lea     ecx, [ebp+var_14]
.text:0040BF92                 call    ds:??0CString@@QAE@PBG@Z ; CString::CString(ushort const *)
.text:0040BF98                 lea     eax, [ebp+var_14]
.text:0040BF9B ;   try {
.text:0040BF9B                 mov     [ebp+var_4], ebx
.text:0040BF9E                 push    eax
.text:0040BF9F                 lea     ecx, [ebp+var_10]
.text:0040BFA2                 call    sub_40D856
.text:0040BFA7                 lea     ecx, [ebp+var_14]
.text:0040BFA7 ;   } // starts at 40BF9B
.text:0040BFAA ;   try {
.text:0040BFAA                 mov     byte ptr [ebp+var_4], 2
.text:0040BFAE                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040BFB4                 mov     eax, [ebp+var_10]
.text:0040BFB7                 cmp     [eax-8], ebx
.text:0040BFBA                 jz      short loc_40BFCD
.text:0040BFBC                 lea     ecx, [ebp+var_10]
.text:0040BFBF                 call    sub_40C709
.text:0040BFC4                 test    eax, eax
.text:0040BFC6                 jz      short loc_40BFCD
.text:0040BFC8                 push    [ebp+var_10]
.text:0040BFCB                 jmp     short loc_40BFCE
.text:0040BFCD ; ---------------------------------------------------------------------------
.text:0040BFCD
.text:0040BFCD loc_40BFCD:                             ; CODE XREF: sub_40BF70+4A↑j
.text:0040BFCD                                         ; sub_40BF70+56↑j
.text:0040BFCD                 push    ebx
.text:0040BFCE
.text:0040BFCE loc_40BFCE:                             ; CODE XREF: sub_40BF70+5B↑j
.text:0040BFCE                 lea     edi, [esi-90h]
.text:0040BFD4                 mov     ecx, edi
.text:0040BFD6                 call    sub_40A9B6
.text:0040BFDB                 mov     ecx, edi
.text:0040BFDD                 call    sub_40C5D6
.text:0040BFDD ;   } // starts at 40BFAA
.text:0040BFE2                 or      [ebp+var_4], 0FFFFFFFFh
.text:0040BFE6                 lea     ecx, [ebp+var_10]
.text:0040BFE9                 mov     [esi+24h], ebx
.text:0040BFEC                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040BFF2
.text:0040BFF2 loc_40BFF2:                             ; CODE XREF: sub_40BF70+13↑j
.text:0040BFF2                 call    __EH_epilog3
.text:0040BFF7                 retn
.text:0040BFF7 ; } // starts at 40BF70
.text:0040BFF7 sub_40BF70      endp
.text:0040BFF7
.text:0040BFF7 ; ---------------------------------------------------------------------------
.text:0040BFF8                 align 10h
.text:0040C000
.text:0040C000 ; =============== S U B R O U T I N E =======================================
.text:0040C000
.text:0040C000
.text:0040C000 sub_40C000      proc near               ; DATA XREF: .text:00401AEC↑o
.text:0040C000                                         ; .text:00402A78↑o
.text:0040C000                 and     dword_4137C4, 0
.text:0040C007                 mov     edx, 0D6h ; 'Ö'
.text:0040C00C                 push    esi
.text:0040C00D                 mov     esi, ecx
.text:0040C00F                 call    sub_40DAA3
.text:0040C014                 mov     ecx, dwNewLong
.text:0040C01A                 test    ecx, ecx
.text:0040C01C                 jz      short loc_40C02C
.text:0040C01E                 test    eax, eax
.text:0040C020                 jz      short loc_40C02C
.text:0040C022                 push    ecx             ; dwNewLong
.text:0040C023                 push    0FFFFFFFCh      ; nIndex
.text:0040C025                 push    eax             ; hWnd
.text:0040C026                 call    ds:SetWindowLongW
.text:0040C02C
.text:0040C02C loc_40C02C:                             ; CODE XREF: sub_40C000+1C↑j
.text:0040C02C                                         ; sub_40C000+20↑j
.text:0040C02C                 mov     ecx, esi
.text:0040C02E                 pop     esi
.text:0040C02F                 jmp     ds:__imp_?OnDestroy@CWnd@@IAEXXZ ; CWnd::OnDestroy(void)
.text:0040C02F sub_40C000      endp
.text:0040C02F
.text:0040C035
.text:0040C035 ; =============== S U B R O U T I N E =======================================
.text:0040C035
.text:0040C035 ; Attributes: bp-based frame info_from_lumina
.text:0040C035
.text:0040C035 ; int __thiscall CPageBootIni::ReDrawOSListBox(CPageBootIni *__hidden this)
.text:0040C035 ?ReDrawOSListBox@CPageBootIni@@AAEJXZ proc near
.text:0040C035                                         ; CODE XREF: sub_40A9B6+3E↑p
.text:0040C035                                         ; sub_40AF10+140↑p ...
.text:0040C035
.text:0040C035 var_38          = dword ptr -38h
.text:0040C035 var_34          = dword ptr -34h
.text:0040C035 var_30          = dword ptr -30h
.text:0040C035 var_2C          = dword ptr -2Ch
.text:0040C035 hWnd            = dword ptr -28h
.text:0040C035 var_24          = dword ptr -24h
.text:0040C035 var_20          = byte ptr -20h
.text:0040C035 var_1C          = byte ptr -1Ch
.text:0040C035 wParam          = dword ptr -18h
.text:0040C035 var_14          = dword ptr -14h
.text:0040C035 lParam          = dword ptr -10h
.text:0040C035 var_4           = dword ptr -4
.text:0040C035 arg_4           = dword ptr  0Ch
.text:0040C035
.text:0040C035 ; FUNCTION CHUNK AT .text:0041141A SIZE 00000036 BYTES
.text:0040C035
.text:0040C035 ; __unwind { // loc_411435
.text:0040C035                 push    2Ch
.text:0040C037                 mov     eax, offset loc_411435
.text:0040C03C                 call    __EH_prolog3
.text:0040C041                 mov     edi, ecx
.text:0040C043                 xor     ebx, ebx
.text:0040C045                 lea     ecx, [ebp+lParam]
.text:0040C048                 and     [ebp+wParam], ebx
.text:0040C04B                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040C051 ;   try {
.text:0040C051                 and     [ebp+var_4], ebx
.text:0040C054                 lea     ecx, [ebp+var_20]
.text:0040C057                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040C05D                 lea     ecx, [ebp+var_1C]
.text:0040C05D ;   } // starts at 40C051
.text:0040C060 ;   try {
.text:0040C060                 mov     byte ptr [ebp+var_4], 1
.text:0040C064                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040C06A                 mov     edx, 0CEh ; 'Î'
.text:0040C06A ;   } // starts at 40C060
.text:0040C06F ;   try {
.text:0040C06F                 mov     byte ptr [ebp+var_4], 2
.text:0040C073                 mov     ecx, edi
.text:0040C075                 call    sub_40DAA3
.text:0040C07A                 mov     esi, eax
.text:0040C07C                 mov     [ebp+hWnd], esi
.text:0040C07F                 test    esi, esi
.text:0040C081                 jnz     short loc_40C08D
.text:0040C083
.text:0040C083 loc_40C083:                             ; CODE XREF: CPageBootIni::ReDrawOSListBox(void)+D4↓j
.text:0040C083                 mov     ebx, 80004005h
.text:0040C088                 jmp     loc_40C276
.text:0040C08D ; ---------------------------------------------------------------------------
.text:0040C08D
.text:0040C08D loc_40C08D:                             ; CODE XREF: CPageBootIni::ReDrawOSListBox(void)+4C↑j
.text:0040C08D                 push    142h
.text:0040C092                 lea     ecx, [ebp+var_20]
.text:0040C095                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:0040C09B                 push    143h
.text:0040C0A0                 lea     ecx, [ebp+var_1C]
.text:0040C0A3                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:0040C0A9                 or      dword ptr [edi+0A8h], 0FFFFFFFFh
.text:0040C0B0                 xor     eax, eax
.text:0040C0B2                 push    eax             ; lParam
.text:0040C0B3                 push    eax             ; wParam
.text:0040C0B4                 push    184h            ; Msg
.text:0040C0B9                 push    esi             ; hWnd
.text:0040C0BA                 mov     [edi+0A4h], eax
.text:0040C0C0                 mov     [edi+0ACh], eax
.text:0040C0C6                 call    ds:SendMessageW
.text:0040C0CC                 and     [ebp+var_30], 0
.text:0040C0D0                 cmp     dword_413970, 0
.text:0040C0D7                 jbe     loc_40C265
.text:0040C0DD                 xor     edx, edx
.text:0040C0DF                 mov     [ebp+var_34], edx
.text:0040C0E2
.text:0040C0E2 loc_40C0E2:                             ; CODE XREF: CPageBootIni::ReDrawOSListBox(void)+22A↓j
.text:0040C0E2                 add     edx, dword_413960
.text:0040C0E8                 xor     eax, eax
.text:0040C0EA                 mov     [ebp+var_38], edx
.text:0040C0ED                 mov     [ebp+var_14], eax
.text:0040C0F0                 cmp     dword_413AA0, eax
.text:0040C0F6                 jbe     loc_40C249
.text:0040C0FC                 xor     ecx, ecx
.text:0040C0FE                 mov     [ebp+var_24], ecx
.text:0040C101
.text:0040C101 loc_40C101:                             ; CODE XREF: CPageBootIni::ReDrawOSListBox(void)+105↓j
.text:0040C101                 mov     esi, hMem
.text:0040C107                 add     esi, ecx
.text:0040C109                 jz      loc_40C083
.text:0040C10F                 push    10h             ; Length
.text:0040C111                 push    esi             ; Source2
.text:0040C112                 push    edx             ; Source1
.text:0040C113                 call    ds:RtlCompareMemory
.text:0040C119                 cmp     eax, 10h
.text:0040C11C                 jz      short loc_40C144
.text:0040C11E                 mov     edx, [ebp+var_14]
.text:0040C121                 mov     ecx, [ebp+var_24]
.text:0040C124                 inc     edx
.text:0040C125                 add     ecx, 1D0h
.text:0040C12B                 mov     [ebp+var_14], edx
.text:0040C12E                 cmp     edx, dword_413AA0
.text:0040C134                 mov     edx, [ebp+var_38]
.text:0040C137                 mov     [ebp+var_24], ecx
.text:0040C13A                 jb      short loc_40C101
.text:0040C13C                 mov     esi, [ebp+hWnd]
.text:0040C13F                 jmp     loc_40C249
.text:0040C144 ; ---------------------------------------------------------------------------
.text:0040C144
.text:0040C144 loc_40C144:                             ; CODE XREF: CPageBootIni::ReDrawOSListBox(void)+E7↑j
.text:0040C144                 inc     dword ptr [edi+0A8h]
.text:0040C14A                 mov     eax, [esi+1B4h]
.text:0040C150                 test    eax, eax
.text:0040C152                 jz      short loc_40C16C
.text:0040C154                 push    eax
.text:0040C155                 lea     ecx, [ebp+lParam]
.text:0040C158                 call    ds:??4CString@@QAEABV0@PBG@Z ; CString::operator=(ushort const *)
.text:0040C15E                 push    offset asc_402FC4 ; " "
.text:0040C163                 lea     ecx, [ebp+lParam]
.text:0040C166                 call    ds:??YCString@@QAEABV0@PBG@Z ; CString::operator+=(ushort const *)
.text:0040C16C
.text:0040C16C loc_40C16C:                             ; CODE XREF: CPageBootIni::ReDrawOSListBox(void)+11D↑j
.text:0040C16C                 push    offset asc_403334 ; "("
.text:0040C171                 lea     ecx, [ebp+lParam]
.text:0040C174                 call    ds:??YCString@@QAEABV0@PBG@Z ; CString::operator+=(ushort const *)
.text:0040C17A                 push    dword ptr [esi+10h]
.text:0040C17D                 lea     ecx, [ebp+lParam]
.text:0040C180                 call    ds:??YCString@@QAEABV0@PBG@Z ; CString::operator+=(ushort const *)
.text:0040C186                 push    offset asc_403338 ; ")"
.text:0040C18B                 lea     ecx, [ebp+lParam]
.text:0040C18E                 call    ds:??YCString@@QAEABV0@PBG@Z ; CString::operator+=(ushort const *)
.text:0040C194                 xor     ebx, ebx
.text:0040C196                 inc     ebx
.text:0040C197                 cmp     [esi+1Ch], ebx
.text:0040C19A                 jnz     short loc_40C1C3
.text:0040C19C                 push    offset asc_40333C ; " : "
.text:0040C1A1                 lea     ecx, [ebp+lParam]
.text:0040C1A4                 call    ds:??YCString@@QAEABV0@PBG@Z ; CString::operator+=(ushort const *)
.text:0040C1AA                 lea     eax, [ebp+var_1C]
.text:0040C1AD                 push    eax
.text:0040C1AE                 lea     ecx, [ebp+lParam]
.text:0040C1B1                 call    ds:??YCString@@QAEABV0@ABV0@@Z ; CString::operator+=(CString const &)
.text:0040C1B7                 mov     [edi+0ACh], ebx
.text:0040C1BD                 mov     [edi+0A0h], esi
.text:0040C1C3
.text:0040C1C3 loc_40C1C3:                             ; CODE XREF: CPageBootIni::ReDrawOSListBox(void)+165↑j
.text:0040C1C3                 push    10h             ; Length
.text:0040C1C5                 push    esi             ; Source2
.text:0040C1C6                 push    offset unk_41393C ; Source1
.text:0040C1CB                 call    ds:RtlCompareMemory
.text:0040C1D1                 cmp     eax, 10h
.text:0040C1D4                 jnz     short loc_40C1FD
.text:0040C1D6                 lea     ecx, [ebp+lParam]
.text:0040C1D9                 cmp     [esi+1Ch], ebx
.text:0040C1DC                 jnz     short loc_40C1E5
.text:0040C1DE                 push    offset asc_403344 ; "; "
.text:0040C1E3                 jmp     short loc_40C1EA
.text:0040C1E5 ; ---------------------------------------------------------------------------
.text:0040C1E5
.text:0040C1E5 loc_40C1E5:                             ; CODE XREF: CPageBootIni::ReDrawOSListBox(void)+1A7↑j
.text:0040C1E5                 push    offset asc_40333C ; " : "
.text:0040C1EA
.text:0040C1EA loc_40C1EA:                             ; CODE XREF: CPageBootIni::ReDrawOSListBox(void)+1AE↑j
.text:0040C1EA                 call    ds:??YCString@@QAEABV0@PBG@Z ; CString::operator+=(ushort const *)
.text:0040C1F0                 lea     eax, [ebp+var_20]
.text:0040C1F3                 push    eax
.text:0040C1F4                 lea     ecx, [ebp+lParam]
.text:0040C1F7                 call    ds:??YCString@@QAEABV0@ABV0@@Z ; CString::operator+=(CString const &)
.text:0040C1FD
.text:0040C1FD loc_40C1FD:                             ; CODE XREF: CPageBootIni::ReDrawOSListBox(void)+19F↑j
.text:0040C1FD                 push    [ebp+lParam]    ; lParam
.text:0040C200                 mov     esi, [ebp+hWnd]
.text:0040C203                 push    0               ; wParam
.text:0040C205                 push    180h            ; Msg
.text:0040C20A                 push    esi             ; hWnd
.text:0040C20B                 call    ds:SendMessageW
.text:0040C211                 mov     edx, [ebp+lParam]
.text:0040C214                 lea     eax, [ebp+var_2C]
.text:0040C217                 push    eax             ; int
.text:0040C218                 mov     ecx, esi        ; hWnd
.text:0040C21A                 call    sub_40A747
.text:0040C21F                 mov     ebx, eax
.text:0040C221                 test    ebx, ebx
.text:0040C223                 js      short loc_40C276
.text:0040C225                 mov     eax, [ebp+wParam]
.text:0040C228                 cmp     [ebp+var_2C], eax
.text:0040C22B                 jbe     short loc_40C233
.text:0040C22D                 mov     eax, [ebp+var_2C]
.text:0040C230                 mov     [ebp+wParam], eax
.text:0040C233
.text:0040C233 loc_40C233:                             ; CODE XREF: CPageBootIni::ReDrawOSListBox(void)+1F6↑j
.text:0040C233                 mov     eax, [ebp+var_14]
.text:0040C236                 push    eax             ; lParam
.text:0040C237                 push    dword ptr [edi+0A8h] ; wParam
.text:0040C23D                 push    19Ah            ; Msg
.text:0040C242                 push    esi             ; hWnd
.text:0040C243                 call    ds:SendMessageW
.text:0040C249
.text:0040C249 loc_40C249:                             ; CODE XREF: CPageBootIni::ReDrawOSListBox(void)+C1↑j
.text:0040C249                                         ; CPageBootIni::ReDrawOSListBox(void)+10A↑j
.text:0040C249                 mov     eax, [ebp+var_30]
.text:0040C24C                 mov     edx, [ebp+var_34]
.text:0040C24F                 inc     eax
.text:0040C250                 add     edx, 10h
.text:0040C253                 mov     [ebp+var_30], eax
.text:0040C256                 mov     [ebp+var_34], edx
.text:0040C259                 cmp     eax, dword_413970
.text:0040C25F                 jb      loc_40C0E2
.text:0040C265
.text:0040C265 loc_40C265:                             ; CODE XREF: CPageBootIni::ReDrawOSListBox(void)+A2↑j
.text:0040C265                 push    0               ; lParam
.text:0040C267                 push    [ebp+wParam]    ; wParam
.text:0040C26A                 push    194h            ; Msg
.text:0040C26F                 push    esi             ; hWnd
.text:0040C270                 call    ds:SendMessageW
.text:0040C276
.text:0040C276 loc_40C276:                             ; CODE XREF: CPageBootIni::ReDrawOSListBox(void)+53↑j
.text:0040C276                                         ; CPageBootIni::ReDrawOSListBox(void)+1EE↑j
.text:0040C276                 lea     ecx, [ebp+var_1C]
.text:0040C276 ;   } // starts at 40C06F
.text:0040C279 ;   try {
.text:0040C279                 mov     byte ptr [ebp+var_4], 1
.text:0040C27D                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040C283                 lea     ecx, [ebp+var_20]
.text:0040C283 ;   } // starts at 40C279
.text:0040C286 ;   try {
.text:0040C286                 mov     byte ptr [ebp+var_4], 0
.text:0040C28A                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040C28A ;   } // starts at 40C286
.text:0040C290                 or      [ebp+var_4], 0FFFFFFFFh
.text:0040C294                 lea     ecx, [ebp+lParam]
.text:0040C297                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040C29D                 mov     eax, ebx
.text:0040C29F                 call    __EH_epilog3
.text:0040C2A4                 retn
.text:0040C2A4 ; } // starts at 40C035
.text:0040C2A4 ?ReDrawOSListBox@CPageBootIni@@AAEJXZ endp
.text:0040C2A4
.text:0040C2A4 ; ---------------------------------------------------------------------------
.text:0040C2A5                 align 10h
.text:0040C2B0
.text:0040C2B0 ; =============== S U B R O U T I N E =======================================
.text:0040C2B0
.text:0040C2B0
.text:0040C2B0 sub_40C2B0      proc near               ; DATA XREF: .text:const CPageBootIni::`vftable'↑o
.text:0040C2B0                                         ; .text:00402A7C↑o
.text:0040C2B0                 sub     ecx, 90h
.text:0040C2B6                 jmp     sub_40A900
.text:0040C2B6 sub_40C2B0      endp
.text:0040C2B6
.text:0040C2B6 ; ---------------------------------------------------------------------------
.text:0040C2BB                 align 10h
.text:0040C2C0
.text:0040C2C0 ; =============== S U B R O U T I N E =======================================
.text:0040C2C0
.text:0040C2C0
.text:0040C2C0 sub_40C2C0      proc near               ; DATA XREF: .text:00401B28↑o
.text:0040C2C0                                         ; .text:00402A80↑o
.text:0040C2C0                 mov     eax, offset aBootini ; "bootini"
.text:0040C2C5                 retn
.text:0040C2C5 sub_40C2C0      endp
.text:0040C2C5
.text:0040C2C6
.text:0040C2C6 ; =============== S U B R O U T I N E =======================================
.text:0040C2C6
.text:0040C2C6 ; Attributes: bp-based frame
.text:0040C2C6
.text:0040C2C6 sub_40C2C6      proc near               ; CODE XREF: sub_40B6C0+5C29↓j
.text:0040C2C6
.text:0040C2C6 var_4           = dword ptr -4
.text:0040C2C6
.text:0040C2C6                 mov     edi, edi
.text:0040C2C8                 push    ebp
.text:0040C2C9                 mov     ebp, esp
.text:0040C2CB                 push    ecx
.text:0040C2CC                 mov     dword ptr [ecx], offset ??_7CBootIniAdvancedDlg@@6B@ ; const CBootIniAdvancedDlg::`vftable'
.text:0040C2D2                 cmp     dword ptr [ecx+14h], 0
.text:0040C2D6                 mov     [ebp+var_4], ecx
.text:0040C2D9                 jz      short loc_40C2E3
.text:0040C2DB                 push    dword ptr [ecx+14h] ; lpMem
.text:0040C2DE                 call    _AtlThunk_FreeData@4 ; AtlThunk_FreeData(x)
.text:0040C2E3
.text:0040C2E3 loc_40C2E3:                             ; CODE XREF: sub_40C2C6+13↑j
.text:0040C2E3                 mov     esp, ebp
.text:0040C2E5                 pop     ebp
.text:0040C2E6                 retn
.text:0040C2E6 sub_40C2C6      endp
.text:0040C2E6
.text:0040C2E6 ; ---------------------------------------------------------------------------
.text:0040C2E7                 align 10h
.text:0040C2F0
.text:0040C2F0 ; =============== S U B R O U T I N E =======================================
.text:0040C2F0
.text:0040C2F0 ; Attributes: bp-based frame
.text:0040C2F0
.text:0040C2F0 sub_40C2F0      proc near               ; DATA XREF: .text:const CBootIniAdvancedDlg::`vftable'↑o
.text:0040C2F0                                         ; .text:00402A84↑o
.text:0040C2F0
.text:0040C2F0 arg_4           = dword ptr  0Ch
.text:0040C2F0 arg_8           = dword ptr  10h
.text:0040C2F0 arg_10          = dword ptr  18h
.text:0040C2F0 arg_14          = dword ptr  1Ch
.text:0040C2F0
.text:0040C2F0                 mov     edi, edi
.text:0040C2F2                 push    ebp
.text:0040C2F3                 mov     ebp, esp
.text:0040C2F5                 cmp     [ebp+arg_14], 0
.text:0040C2F9                 push    esi
.text:0040C2FA                 push    edi
.text:0040C2FB                 mov     esi, ecx
.text:0040C2FD                 jnz     loc_40C4D9
.text:0040C303                 cmp     [ebp+arg_4], 110h
.text:0040C30A                 jnz     short loc_40C321
.text:0040C30C                 sub     esp, 10h
.text:0040C30F                 call    sub_4093CA
.text:0040C314                 mov     ecx, [ebp+arg_10]
.text:0040C317                 mov     [ecx], eax
.text:0040C319                 xor     eax, eax
.text:0040C31B                 inc     eax
.text:0040C31C                 jmp     loc_40C4DB
.text:0040C321 ; ---------------------------------------------------------------------------
.text:0040C321
.text:0040C321 loc_40C321:                             ; CODE XREF: sub_40C2F0+1A↑j
.text:0040C321                 cmp     [ebp+arg_4], 111h
.text:0040C328                 jnz     loc_40C4D9
.text:0040C32E                 mov     eax, [ebp+arg_8]
.text:0040C331                 xor     edi, edi
.text:0040C333                 inc     edi
.text:0040C334                 cmp     di, ax
.text:0040C337                 jnz     short loc_40C35F
.text:0040C339                 call    ?SaveBootStateFromDlgControls@CBootIniAdvancedDlg@@QAEXXZ ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)
.text:0040C33E                 mov     ecx, 0CFh ; 'Ï'
.text:0040C343                 call    sub_40E20E
.text:0040C348                 push    edi             ; nResult
.text:0040C349                 push    dword ptr [esi+4] ; hDlg
.text:0040C34C                 call    ds:EndDialog
.text:0040C352                 mov     ecx, [ebp+arg_10]
.text:0040C355                 and     dword ptr [ecx], 0
.text:0040C358
.text:0040C358 loc_40C358:                             ; CODE XREF: sub_40C2F0+87↓j
.text:0040C358                                         ; sub_40C2F0+B0↓j
.text:0040C358                 mov     eax, edi
.text:0040C35A                 jmp     loc_40C4DB
.text:0040C35F ; ---------------------------------------------------------------------------
.text:0040C35F
.text:0040C35F loc_40C35F:                             ; CODE XREF: sub_40C2F0+47↑j
.text:0040C35F                 push    2
.text:0040C361                 pop     ecx
.text:0040C362                 cmp     cx, ax
.text:0040C365                 jnz     short loc_40C379
.text:0040C367                 push    ecx             ; nResult
.text:0040C368                 push    dword ptr [esi+4] ; hDlg
.text:0040C36B                 call    ds:EndDialog
.text:0040C371
.text:0040C371 loc_40C371:                             ; CODE XREF: sub_40C2F0+D1↓j
.text:0040C371                                         ; sub_40C2F0+1E4↓j
.text:0040C371                 mov     eax, [ebp+arg_10]
.text:0040C374                 and     dword ptr [eax], 0
.text:0040C377                 jmp     short loc_40C358
.text:0040C379 ; ---------------------------------------------------------------------------
.text:0040C379
.text:0040C379 loc_40C379:                             ; CODE XREF: sub_40C2F0+75↑j
.text:0040C379                 mov     ecx, 119h
.text:0040C37E                 cmp     cx, ax
.text:0040C381                 jnz     short loc_40C3A2
.text:0040C383                 shr     eax, 10h
.text:0040C386                 xor     ecx, ecx
.text:0040C388                 cmp     cx, ax
.text:0040C38B                 jnz     loc_40C4D9
.text:0040C391                 sub     esp, 10h
.text:0040C394                 mov     ecx, esi
.text:0040C396                 call    sub_40A2C3
.text:0040C39B
.text:0040C39B loc_40C39B:                             ; CODE XREF: sub_40C2F0+F5↓j
.text:0040C39B                                         ; sub_40C2F0+119↓j ...
.text:0040C39B                 mov     ecx, [ebp+arg_10]
.text:0040C39E                 mov     [ecx], eax
.text:0040C3A0                 jmp     short loc_40C358
.text:0040C3A2 ; ---------------------------------------------------------------------------
.text:0040C3A2
.text:0040C3A2 loc_40C3A2:                             ; CODE XREF: sub_40C2F0+91↑j
.text:0040C3A2                 mov     ecx, 117h
.text:0040C3A7                 cmp     cx, ax
.text:0040C3AA                 jnz     short loc_40C3C3
.text:0040C3AC                 shr     eax, 10h
.text:0040C3AF                 xor     ecx, ecx
.text:0040C3B1                 cmp     cx, ax
.text:0040C3B4
.text:0040C3B4 loc_40C3B4:                             ; CODE XREF: sub_40C2F0+17C↓j
.text:0040C3B4                 jnz     loc_40C4D9
.text:0040C3BA                 mov     ecx, esi
.text:0040C3BC                 call    ?SetDlgControlState@CBootIniAdvancedDlg@@QAEXXZ ; CBootIniAdvancedDlg::SetDlgControlState(void)
.text:0040C3C1                 jmp     short loc_40C371
.text:0040C3C3 ; ---------------------------------------------------------------------------
.text:0040C3C3
.text:0040C3C3 loc_40C3C3:                             ; CODE XREF: sub_40C2F0+BA↑j
.text:0040C3C3                 mov     ecx, 118h
.text:0040C3C8                 cmp     cx, ax
.text:0040C3CB                 jnz     short loc_40C3E7
.text:0040C3CD                 shr     eax, 10h
.text:0040C3D0                 xor     ecx, ecx
.text:0040C3D2                 cmp     cx, ax
.text:0040C3D5                 jnz     loc_40C4D9
.text:0040C3DB                 sub     esp, 10h
.text:0040C3DE                 mov     ecx, esi
.text:0040C3E0                 call    sub_40A328
.text:0040C3E5                 jmp     short loc_40C39B
.text:0040C3E7 ; ---------------------------------------------------------------------------
.text:0040C3E7
.text:0040C3E7 loc_40C3E7:                             ; CODE XREF: sub_40C2F0+DB↑j
.text:0040C3E7                 mov     ecx, 114h
.text:0040C3EC                 cmp     cx, ax
.text:0040C3EF                 jnz     short loc_40C40B
.text:0040C3F1                 shr     eax, 10h
.text:0040C3F4                 xor     ecx, ecx
.text:0040C3F6                 cmp     cx, ax
.text:0040C3F9                 jnz     loc_40C4D9
.text:0040C3FF                 sub     esp, 10h
.text:0040C402                 mov     ecx, esi
.text:0040C404                 call    sub_40A388
.text:0040C409                 jmp     short loc_40C39B
.text:0040C40B ; ---------------------------------------------------------------------------
.text:0040C40B
.text:0040C40B loc_40C40B:                             ; CODE XREF: sub_40C2F0+FF↑j
.text:0040C40B                 mov     ecx, 115h
.text:0040C410                 cmp     cx, ax
.text:0040C413                 jnz     short loc_40C432
.text:0040C415                 shr     eax, 10h
.text:0040C418                 xor     ecx, ecx
.text:0040C41A                 cmp     cx, ax
.text:0040C41D                 jnz     loc_40C4D9
.text:0040C423                 sub     esp, 10h
.text:0040C426                 mov     ecx, esi
.text:0040C428                 call    sub_40A42E
.text:0040C42D                 jmp     loc_40C39B
.text:0040C432 ; ---------------------------------------------------------------------------
.text:0040C432
.text:0040C432 loc_40C432:                             ; CODE XREF: sub_40C2F0+123↑j
.text:0040C432                 mov     ecx, 11Dh
.text:0040C437                 cmp     cx, ax
.text:0040C43A                 jnz     short loc_40C45C
.text:0040C43C                 shr     eax, 10h
.text:0040C43F                 mov     ecx, 200h
.text:0040C444                 cmp     cx, ax
.text:0040C447                 jnz     loc_40C4D9
.text:0040C44D                 sub     esp, 10h
.text:0040C450                 mov     ecx, esi
.text:0040C452                 call    sub_40A48E
.text:0040C457                 jmp     loc_40C39B
.text:0040C45C ; ---------------------------------------------------------------------------
.text:0040C45C
.text:0040C45C loc_40C45C:                             ; CODE XREF: sub_40C2F0+14A↑j
.text:0040C45C                 mov     ecx, 11Ch
.text:0040C461                 cmp     cx, ax
.text:0040C464                 jnz     short loc_40C471
.text:0040C466                 shr     eax, 10h
.text:0040C469                 cmp     di, ax
.text:0040C46C                 jmp     loc_40C3B4
.text:0040C471 ; ---------------------------------------------------------------------------
.text:0040C471
.text:0040C471 loc_40C471:                             ; CODE XREF: sub_40C2F0+174↑j
.text:0040C471                 mov     ecx, 11Eh
.text:0040C476                 cmp     cx, ax
.text:0040C479                 jnz     short loc_40C494
.text:0040C47B                 shr     eax, 10h
.text:0040C47E                 xor     ecx, ecx
.text:0040C480                 cmp     cx, ax
.text:0040C483                 jnz     short loc_40C4D9
.text:0040C485                 sub     esp, 10h
.text:0040C488                 mov     ecx, esi
.text:0040C48A                 call    sub_40A52B
.text:0040C48F                 jmp     loc_40C39B
.text:0040C494 ; ---------------------------------------------------------------------------
.text:0040C494
.text:0040C494 loc_40C494:                             ; CODE XREF: sub_40C2F0+189↑j
.text:0040C494                 mov     ecx, 11Fh
.text:0040C499                 cmp     cx, ax
.text:0040C49C                 jnz     short loc_40C4BA
.text:0040C49E                 shr     eax, 10h
.text:0040C4A1                 mov     ecx, 200h
.text:0040C4A6                 cmp     cx, ax
.text:0040C4A9                 jnz     short loc_40C4D9
.text:0040C4AB                 sub     esp, 10h
.text:0040C4AE                 mov     ecx, esi
.text:0040C4B0                 call    sub_40A5AA
.text:0040C4B5                 jmp     loc_40C39B
.text:0040C4BA ; ---------------------------------------------------------------------------
.text:0040C4BA
.text:0040C4BA loc_40C4BA:                             ; CODE XREF: sub_40C2F0+1AC↑j
.text:0040C4BA                 mov     ecx, 3F7h
.text:0040C4BF                 cmp     cx, ax
.text:0040C4C2                 jnz     short loc_40C4D9
.text:0040C4C4                 shr     eax, 10h
.text:0040C4C7                 mov     ecx, 100h
.text:0040C4CC                 cmp     cx, ax
.text:0040C4CF                 jnz     short loc_40C4D9
.text:0040C4D1                 mov     [esi+20h], edi
.text:0040C4D4                 jmp     loc_40C371
.text:0040C4D9 ; ---------------------------------------------------------------------------
.text:0040C4D9
.text:0040C4D9 loc_40C4D9:                             ; CODE XREF: sub_40C2F0+D↑j
.text:0040C4D9                                         ; sub_40C2F0+38↑j ...
.text:0040C4D9                 xor     eax, eax
.text:0040C4DB
.text:0040C4DB loc_40C4DB:                             ; CODE XREF: sub_40C2F0+2C↑j
.text:0040C4DB                                         ; sub_40C2F0+6A↑j
.text:0040C4DB                 pop     edi
.text:0040C4DC                 pop     esi
.text:0040C4DD                 pop     ebp
.text:0040C4DE                 retn    18h
.text:0040C4DE sub_40C2F0      endp
.text:0040C4DE
.text:0040C4DE ; ---------------------------------------------------------------------------
.text:0040C4E1                 align 10h
.text:0040C4F0
.text:0040C4F0 ; =============== S U B R O U T I N E =======================================
.text:0040C4F0
.text:0040C4F0 ; Attributes: bp-based frame
.text:0040C4F0
.text:0040C4F0 sub_40C4F0      proc near               ; DATA XREF: .text:00402A88↑o
.text:0040C4F0                                         ; sub_40C5D0↓o
.text:0040C4F0
.text:0040C4F0 var_24          = dword ptr -24h
.text:0040C4F0 var_20          = dword ptr -20h
.text:0040C4F0 var_1C          = dword ptr -1Ch
.text:0040C4F0 var_18          = dword ptr -18h
.text:0040C4F0 var_14          = dword ptr -14h
.text:0040C4F0 var_10          = dword ptr -10h
.text:0040C4F0 var_C           = dword ptr -0Ch
.text:0040C4F0 dwNewLong       = dword ptr -8
.text:0040C4F0 var_4           = dword ptr -4
.text:0040C4F0 arg_0           = dword ptr  8
.text:0040C4F0 arg_4           = dword ptr  0Ch
.text:0040C4F0 arg_8           = dword ptr  10h
.text:0040C4F0 arg_C           = dword ptr  14h
.text:0040C4F0
.text:0040C4F0                 mov     edi, edi
.text:0040C4F2                 push    ebp
.text:0040C4F3                 mov     ebp, esp
.text:0040C4F5                 sub     esp, 24h
.text:0040C4F8                 mov     eax, ___security_cookie
.text:0040C4FD                 xor     eax, ebp
.text:0040C4FF                 mov     [ebp+var_4], eax
.text:0040C502                 mov     eax, [ebp+arg_C]
.text:0040C505                 mov     ecx, [ebp+arg_8]
.text:0040C508                 push    ebx
.text:0040C509                 mov     ebx, [ebp+arg_4]
.text:0040C50C                 push    esi
.text:0040C50D                 mov     esi, [ebp+arg_0]
.text:0040C510                 push    edi
.text:0040C511                 mov     [ebp+var_20], ebx
.text:0040C514                 xor     ebx, ebx
.text:0040C516                 mov     [ebp+var_14], ebx
.text:0040C519                 mov     edi, [esi+18h]
.text:0040C51C                 mov     edx, [esi+4]
.text:0040C51F                 mov     [ebp+var_10], ebx
.text:0040C522                 mov     [ebp+var_C], ebx
.text:0040C525                 lea     ebx, [ebp+var_24]
.text:0040C528                 push    0
.text:0040C52A                 mov     [esi+18h], ebx
.text:0040C52D                 lea     ebx, [ebp+dwNewLong]
.text:0040C530                 mov     esi, [esi]
.text:0040C532                 push    ebx
.text:0040C533                 mov     ebx, [ebp+arg_4]
.text:0040C536                 push    eax
.text:0040C537                 push    ecx
.text:0040C538                 push    ebx
.text:0040C539                 mov     [ebp+var_1C], ecx
.text:0040C53C                 mov     ecx, [esi]
.text:0040C53E                 push    edx
.text:0040C53F                 mov     [ebp+var_24], edx
.text:0040C542                 mov     [ebp+var_18], eax
.text:0040C545                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040C54B                 mov     ecx, [ebp+arg_0]
.text:0040C54E                 call    dword ptr [esi]
.text:0040C550                 mov     ecx, [ebp+arg_0]
.text:0040C553                 mov     [ecx+18h], edi
.text:0040C556                 test    eax, eax
.text:0040C558                 jz      short loc_40C599
.text:0040C55A                 cmp     ebx, 2Eh ; '.'
.text:0040C55D                 jb      short loc_40C586
.text:0040C55F                 cmp     ebx, 2Fh ; '/'
.text:0040C562                 jbe     short loc_40C581
.text:0040C564                 cmp     ebx, 37h ; '7'
.text:0040C567                 jz      short loc_40C581
.text:0040C569                 cmp     ebx, 39h ; '9'
.text:0040C56C                 jz      short loc_40C581
.text:0040C56E                 cmp     ebx, 110h
.text:0040C574                 jz      short loc_40C581
.text:0040C576                 lea     eax, [ebx-132h]
.text:0040C57C                 cmp     eax, 6
.text:0040C57F                 ja      short loc_40C586
.text:0040C581
.text:0040C581 loc_40C581:                             ; CODE XREF: sub_40C4F0+72↑j
.text:0040C581                                         ; sub_40C4F0+77↑j ...
.text:0040C581                 mov     eax, [ebp+dwNewLong]
.text:0040C584                 jmp     short loc_40C5BD
.text:0040C586 ; ---------------------------------------------------------------------------
.text:0040C586
.text:0040C586 loc_40C586:                             ; CODE XREF: sub_40C4F0+6D↑j
.text:0040C586                                         ; sub_40C4F0+8F↑j
.text:0040C586                 push    [ebp+dwNewLong] ; dwNewLong
.text:0040C589                 push    0               ; nIndex
.text:0040C58B                 push    dword ptr [ecx+4] ; hWnd
.text:0040C58E                 call    ds:SetWindowLongW
.text:0040C594                 xor     eax, eax
.text:0040C596                 inc     eax
.text:0040C597                 jmp     short loc_40C5BD
.text:0040C599 ; ---------------------------------------------------------------------------
.text:0040C599
.text:0040C599 loc_40C599:                             ; CODE XREF: sub_40C4F0+68↑j
.text:0040C599                 cmp     ebx, 82h ; '‚'
.text:0040C59F                 jnz     short loc_40C5BB
.text:0040C5A1                 mov     eax, [ecx]
.text:0040C5A3                 mov     edx, [ecx+4]
.text:0040C5A6                 and     dword ptr [ecx+4], 0
.text:0040C5AA                 push    edx
.text:0040C5AB                 mov     esi, [eax+8]
.text:0040C5AE                 mov     ecx, esi
.text:0040C5B0                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040C5B6                 mov     ecx, [ebp+arg_0]
.text:0040C5B9                 call    esi
.text:0040C5BB
.text:0040C5BB loc_40C5BB:                             ; CODE XREF: sub_40C4F0+AF↑j
.text:0040C5BB                 xor     eax, eax
.text:0040C5BD
.text:0040C5BD loc_40C5BD:                             ; CODE XREF: sub_40C4F0+94↑j
.text:0040C5BD                                         ; sub_40C4F0+A7↑j
.text:0040C5BD                 mov     ecx, [ebp+var_4]
.text:0040C5C0                 pop     edi
.text:0040C5C1                 pop     esi
.text:0040C5C2                 xor     ecx, ebp        ; StackCookie
.text:0040C5C4                 pop     ebx
.text:0040C5C5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040C5CA                 mov     esp, ebp
.text:0040C5CC                 pop     ebp
.text:0040C5CD                 retn    10h
.text:0040C5CD sub_40C4F0      endp
.text:0040C5CD
.text:0040C5D0
.text:0040C5D0 ; =============== S U B R O U T I N E =======================================
.text:0040C5D0
.text:0040C5D0
.text:0040C5D0 sub_40C5D0      proc near               ; DATA XREF: .text:00401950↑o
.text:0040C5D0                                         ; .text:00401D88↑o ...
.text:0040C5D0                 mov     eax, offset sub_40C4F0
.text:0040C5D5                 retn
.text:0040C5D5 sub_40C5D0      endp
.text:0040C5D5
.text:0040C5D6
.text:0040C5D6 ; =============== S U B R O U T I N E =======================================
.text:0040C5D6
.text:0040C5D6
.text:0040C5D6 sub_40C5D6      proc near               ; CODE XREF: sub_40AF10+139↑p
.text:0040C5D6                                         ; sub_40B0D0+48↑j ...
.text:0040C5D6                 xor     eax, eax
.text:0040C5D8                 mov     dword ptr [ecx+0B4h], 2
.text:0040C5E2                 inc     eax
.text:0040C5E3                 push    eax
.text:0040C5E4                 mov     [ecx+0B8h], eax
.text:0040C5EA                 call    ds:?SetModified@CPropertyPage@@QAEXH@Z ; CPropertyPage::SetModified(int)
.text:0040C5F0                 retn
.text:0040C5F0 sub_40C5D6      endp
.text:0040C5F0
.text:0040C5F0 ; ---------------------------------------------------------------------------
.text:0040C5F1                 align 10h
.text:0040C600
.text:0040C600 ; =============== S U B R O U T I N E =======================================
.text:0040C600
.text:0040C600
.text:0040C600 sub_40C600      proc near               ; DATA XREF: .text:00401D78↑o
.text:0040C600                                         ; .text:00402A90↑o
.text:0040C600                 mov     eax, ds:?classCPropertySheet@CPropertySheet@@2UCRuntimeClass@@B ; CRuntimeClass const CPropertySheet::classCPropertySheet
.text:0040C605                 retn
.text:0040C605 sub_40C600      endp
.text:0040C605
.text:0040C605 ; ---------------------------------------------------------------------------
.text:0040C606                 align 10h
.text:0040C610
.text:0040C610 ; =============== S U B R O U T I N E =======================================
.text:0040C610
.text:0040C610
.text:0040C610 sub_40C610      proc near               ; DATA XREF: .text:const CMSConfigSheet::`vftable'↑o
.text:0040C610                                         ; .text:00402A94↑o
.text:0040C610                 mov     eax, offset off_401D68 ; "CMSConfigSheet"
.text:0040C615                 retn
.text:0040C615 sub_40C610      endp
.text:0040C615
.text:0040C615 ; ---------------------------------------------------------------------------
.text:0040C616                 align 10h
.text:0040C620
.text:0040C620 ; =============== S U B R O U T I N E =======================================
.text:0040C620
.text:0040C620 ; Attributes: bp-based frame info_from_lumina
.text:0040C620
.text:0040C620 ; void *__thiscall D3DX11Core::CBuffer::`scalar deleting destructor'(D3DX11Core::CBuffer *__hidden this, unsigned int)
.text:0040C620 ??_GCBuffer@D3DX11Core@@UAEPAXI@Z_2 proc near
.text:0040C620                                         ; DATA XREF: .text:00401CA0↑o
.text:0040C620                                         ; .text:00402A98↑o
.text:0040C620
.text:0040C620 arg_0           = byte ptr  8
.text:0040C620
.text:0040C620                 mov     edi, edi
.text:0040C622                 push    ebp
.text:0040C623                 mov     ebp, esp
.text:0040C625                 push    esi
.text:0040C626                 mov     esi, ecx
.text:0040C628                 call    sub_40C642
.text:0040C62D                 test    [ebp+arg_0], 1
.text:0040C631                 jz      short loc_40C63B
.text:0040C633                 push    esi
.text:0040C634                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:0040C63A                 pop     ecx
.text:0040C63B
.text:0040C63B loc_40C63B:                             ; CODE XREF: D3DX11Core::CBuffer::`scalar deleting destructor'(uint)+11↑j
.text:0040C63B                 mov     eax, esi
.text:0040C63D                 pop     esi
.text:0040C63E                 pop     ebp
.text:0040C63F                 retn    4
.text:0040C63F ??_GCBuffer@D3DX11Core@@UAEPAXI@Z_2 endp
.text:0040C63F
.text:0040C642
.text:0040C642 ; =============== S U B R O U T I N E =======================================
.text:0040C642
.text:0040C642 ; Attributes: bp-based frame
.text:0040C642
.text:0040C642 sub_40C642      proc near               ; CODE XREF: D3DX11Core::CBuffer::`scalar deleting destructor'(uint)+8↑p
.text:0040C642                                         ; sub_40CE7B+46D8↓j
.text:0040C642
.text:0040C642 var_4           = dword ptr -4
.text:0040C642
.text:0040C642                 mov     edi, edi
.text:0040C644                 push    ebp
.text:0040C645                 mov     ebp, esp
.text:0040C647                 push    ecx
.text:0040C648                 mov     [ebp+var_4], ecx
.text:0040C64B                 mov     dword ptr [ecx], offset ??_7CMSConfigSheet@@6B@ ; const CMSConfigSheet::`vftable'
.text:0040C651                 call    ds:??1CPropertySheet@@UAE@XZ ; CPropertySheet::~CPropertySheet(void)
.text:0040C657                 mov     esp, ebp
.text:0040C659                 pop     ebp
.text:0040C65A                 retn
.text:0040C65A sub_40C642      endp
.text:0040C65A
.text:0040C65A ; ---------------------------------------------------------------------------
.text:0040C65B                 align 10h
.text:0040C660
.text:0040C660 ; =============== S U B R O U T I N E =======================================
.text:0040C660
.text:0040C660
.text:0040C660 sub_40C660      proc near               ; DATA XREF: .text:off_401C90↑o
.text:0040C660                                         ; .text:00402A9C↑o
.text:0040C660                 mov     eax, ds:?messageMap@CPropertySheet@@1UAFX_MSGMAP@@B ; AFX_MSGMAP const CPropertySheet::messageMap
.text:0040C665                 retn
.text:0040C665 sub_40C660      endp
.text:0040C665
.text:0040C665 ; ---------------------------------------------------------------------------
.text:0040C666                 align 10h
.text:0040C670
.text:0040C670 ; =============== S U B R O U T I N E =======================================
.text:0040C670
.text:0040C670
.text:0040C670 sub_40C670      proc near               ; DATA XREF: .text:00401CCC↑o
.text:0040C670                                         ; .text:00402AA0↑o
.text:0040C670                 mov     eax, offset off_401C90
.text:0040C675                 retn
.text:0040C675 sub_40C670      endp
.text:0040C675
.text:0040C675 ; ---------------------------------------------------------------------------
.text:0040C676                 align 10h
.text:0040C680
.text:0040C680 ; =============== S U B R O U T I N E =======================================
.text:0040C680
.text:0040C680
.text:0040C680 sub_40C680      proc near               ; DATA XREF: .text:00401D64↑o
.text:0040C680                                         ; .text:00402AA4↑o
.text:0040C680                 mov     edi, edi
.text:0040C682                 push    ebx
.text:0040C683                 push    esi
.text:0040C684                 push    edi
.text:0040C685                 mov     esi, ecx
.text:0040C687                 call    ds:?OnInitDialog@CPropertySheet@@UAEHXZ ; CPropertySheet::OnInitDialog(void)
.text:0040C68D                 call    ds:__imp_?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ ; AfxGetModuleState(void)
.text:0040C693                 mov     eax, 80h ; '€'
.text:0040C698                 push    eax             ; lpIconName
.text:0040C699                 push    0Eh
.text:0040C69B                 push    eax
.text:0040C69C                 call    ds:?AfxFindResourceHandle@@YGPAUHINSTANCE__@@PBG0@Z ; AfxFindResourceHandle(ushort const *,ushort const *)
.text:0040C6A2                 push    eax             ; hInstance
.text:0040C6A3                 call    ds:LoadIconW
.text:0040C6A9                 mov     ebx, eax
.text:0040C6AB                 xor     edi, edi
.text:0040C6AD                 test    ebx, ebx
.text:0040C6AF                 jz      short loc_40C6D2
.text:0040C6B1                 push    ebx             ; lParam
.text:0040C6B2                 push    1               ; wParam
.text:0040C6B4                 push    80h ; '€'       ; Msg
.text:0040C6B9                 push    dword ptr [esi+20h] ; hWnd
.text:0040C6BC                 call    ds:SendMessageW
.text:0040C6C2                 push    ebx             ; lParam
.text:0040C6C3                 push    edi             ; wParam
.text:0040C6C4                 push    80h ; '€'       ; Msg
.text:0040C6C9                 push    dword ptr [esi+20h] ; hWnd
.text:0040C6CC                 call    ds:SendMessageW
.text:0040C6D2
.text:0040C6D2 loc_40C6D2:                             ; CODE XREF: sub_40C680+2F↑j
.text:0040C6D2                 mov     ecx, esi
.text:0040C6D4                 call    ds:?GetPageCount@CPropertySheet@@QBEHXZ ; CPropertySheet::GetPageCount(void)
.text:0040C6DA                 test    eax, eax
.text:0040C6DC                 jle     short loc_40C6F4
.text:0040C6DE
.text:0040C6DE loc_40C6DE:                             ; CODE XREF: sub_40C680+72↓j
.text:0040C6DE                 push    edi
.text:0040C6DF                 mov     ecx, esi
.text:0040C6E1                 call    ds:?SetActivePage@CPropertySheet@@QAEHH@Z ; CPropertySheet::SetActivePage(int)
.text:0040C6E7                 mov     ecx, esi
.text:0040C6E9                 inc     edi
.text:0040C6EA                 call    ds:?GetPageCount@CPropertySheet@@QBEHXZ ; CPropertySheet::GetPageCount(void)
.text:0040C6F0                 cmp     edi, eax
.text:0040C6F2                 jl      short loc_40C6DE
.text:0040C6F4
.text:0040C6F4 loc_40C6F4:                             ; CODE XREF: sub_40C680+5C↑j
.text:0040C6F4                 push    dword ptr [esi+8Ch]
.text:0040C6FA                 mov     ecx, esi
.text:0040C6FC                 call    ds:?SetActivePage@CPropertySheet@@QAEHH@Z ; CPropertySheet::SetActivePage(int)
.text:0040C702                 pop     edi
.text:0040C703                 xor     eax, eax
.text:0040C705                 pop     esi
.text:0040C706                 inc     eax
.text:0040C707                 pop     ebx
.text:0040C708                 retn
.text:0040C708 sub_40C680      endp
.text:0040C708
.text:0040C709
.text:0040C709 ; =============== S U B R O U T I N E =======================================
.text:0040C709
.text:0040C709 ; Attributes: bp-based frame fuzzy-sp
.text:0040C709
.text:0040C709 sub_40C709      proc near               ; CODE XREF: sub_408913+26E↑p
.text:0040C709                                         ; CPageBootIni::OnApply(void)+18B↑p ...
.text:0040C709
.text:0040C709 FindFileData    = _WIN32_FIND_DATAW ptr -258h
.text:0040C709 var_4           = dword ptr -4
.text:0040C709
.text:0040C709                 mov     edi, edi
.text:0040C70B                 push    ebp
.text:0040C70C                 mov     ebp, esp
.text:0040C70E                 and     esp, 0FFFFFFF8h
.text:0040C711                 sub     esp, 258h
.text:0040C717                 mov     eax, ___security_cookie
.text:0040C71C                 xor     eax, esp
.text:0040C71E                 mov     [esp+258h+var_4], eax
.text:0040C725                 lea     eax, [esp+258h+FindFileData]
.text:0040C728                 push    eax             ; lpFindFileData
.text:0040C729                 push    dword ptr [ecx] ; lpFileName
.text:0040C72B                 call    ds:FindFirstFileW
.text:0040C731                 cmp     eax, 0FFFFFFFFh
.text:0040C734                 jz      short loc_40C742
.text:0040C736                 push    eax             ; hFindFile
.text:0040C737                 call    ds:FindClose
.text:0040C73D                 xor     eax, eax
.text:0040C73F                 inc     eax
.text:0040C740                 jmp     short loc_40C744
.text:0040C742 ; ---------------------------------------------------------------------------
.text:0040C742
.text:0040C742 loc_40C742:                             ; CODE XREF: sub_40C709+2B↑j
.text:0040C742                 xor     eax, eax
.text:0040C744
.text:0040C744 loc_40C744:                             ; CODE XREF: sub_40C709+37↑j
.text:0040C744                 mov     ecx, [esp+258h+var_4]
.text:0040C74B                 xor     ecx, esp        ; StackCookie
.text:0040C74D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040C752                 mov     esp, ebp
.text:0040C754                 pop     ebp
.text:0040C755                 retn
.text:0040C755 sub_40C709      endp
.text:0040C755
.text:0040C755 ; ---------------------------------------------------------------------------
.text:0040C756                 align 10h
.text:0040C760
.text:0040C760 ; =============== S U B R O U T I N E =======================================
.text:0040C760
.text:0040C760
.text:0040C760 sub_40C760      proc near               ; DATA XREF: .text:off_401E68↑o
.text:0040C760                                         ; .text:00402AA8↑o
.text:0040C760                 mov     eax, ds:?messageMap@CWinApp@@1UAFX_MSGMAP@@B ; AFX_MSGMAP const CWinApp::messageMap
.text:0040C765                 retn
.text:0040C765 sub_40C760      endp
.text:0040C765
.text:0040C765 ; ---------------------------------------------------------------------------
.text:0040C766                 align 10h
.text:0040C770
.text:0040C770 ; =============== S U B R O U T I N E =======================================
.text:0040C770
.text:0040C770
.text:0040C770 sub_40C770      proc near               ; DATA XREF: .text:00401DC4↑o
.text:0040C770                                         ; .text:00402AAC↑o
.text:0040C770                 mov     eax, offset off_401E68
.text:0040C775                 retn
.text:0040C775 sub_40C770      endp
.text:0040C775
.text:0040C775 ; ---------------------------------------------------------------------------
.text:0040C776                 align 10h
.text:0040C780
.text:0040C780 ; =============== S U B R O U T I N E =======================================
.text:0040C780
.text:0040C780 ; Attributes: bp-based frame info_from_lumina
.text:0040C780
.text:0040C780 ; void *__thiscall Base::GdiException::`scalar deleting destructor'(Base::GdiException *__hidden this, unsigned int)
.text:0040C780 ??_GGdiException@Base@@UAEPAXI@Z_0 proc near
.text:0040C780                                         ; DATA XREF: .text:00401D98↑o
.text:0040C780                                         ; .text:00402AB0↑o
.text:0040C780
.text:0040C780 arg_0           = byte ptr  8
.text:0040C780
.text:0040C780                 mov     edi, edi
.text:0040C782                 push    ebp
.text:0040C783                 mov     ebp, esp
.text:0040C785                 push    esi
.text:0040C786                 mov     esi, ecx
.text:0040C788                 call    ds:??1CWinApp@@UAE@XZ ; CWinApp::~CWinApp(void)
.text:0040C78E                 test    [ebp+arg_0], 1
.text:0040C792                 jz      short loc_40C79C
.text:0040C794                 push    esi
.text:0040C795                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:0040C79B                 pop     ecx
.text:0040C79C
.text:0040C79C loc_40C79C:                             ; CODE XREF: Base::GdiException::`scalar deleting destructor'(uint)+12↑j
.text:0040C79C                 mov     eax, esi
.text:0040C79E                 pop     esi
.text:0040C79F                 pop     ebp
.text:0040C7A0                 retn    4
.text:0040C7A0 ??_GGdiException@Base@@UAEPAXI@Z_0 endp
.text:0040C7A0
.text:0040C7A0 ; ---------------------------------------------------------------------------
.text:0040C7A3                 align 10h
.text:0040C7B0
.text:0040C7B0 ; =============== S U B R O U T I N E =======================================
.text:0040C7B0
.text:0040C7B0 ; Attributes: bp-based frame
.text:0040C7B0
.text:0040C7B0 sub_40C7B0      proc near               ; DATA XREF: .text:00401DEC↑o
.text:0040C7B0                                         ; .text:00402AB4↑o
.text:0040C7B0
.text:0040C7B0 var_CC          = dword ptr -0CCh
.text:0040C7B0 var_6C          = dword ptr -6Ch
.text:0040C7B0 var_68          = byte ptr -68h
.text:0040C7B0 var_60          = dword ptr -60h
.text:0040C7B0 var_5C          = dword ptr -5Ch
.text:0040C7B0 phkResult       = dword ptr -44h
.text:0040C7B0 var_40          = byte ptr -40h
.text:0040C7B0 var_3C          = byte ptr -3Ch
.text:0040C7B0 var_38          = byte ptr -38h
.text:0040C7B0 var_34          = byte ptr -34h
.text:0040C7B0 var_30          = byte ptr -30h
.text:0040C7B0 var_2C          = byte ptr -2Ch
.text:0040C7B0 var_28          = dword ptr -28h
.text:0040C7B0 var_24          = dword ptr -24h
.text:0040C7B0 var_20          = dword ptr -20h
.text:0040C7B0 lpCaption       = dword ptr -1Ch
.text:0040C7B0 lpText          = dword ptr -18h
.text:0040C7B0 String          = dword ptr -14h
.text:0040C7B0 var_4           = dword ptr -4
.text:0040C7B0 arg_4           = dword ptr  0Ch
.text:0040C7B0
.text:0040C7B0 ; FUNCTION CHUNK AT .text:00411450 SIZE 000000BA BYTES
.text:0040C7B0
.text:0040C7B0 ; __unwind { // loc_4114E2
.text:0040C7B0                 push    0C0h
.text:0040C7B5                 mov     eax, offset loc_4114E2
.text:0040C7BA                 call    __EH_prolog3_GS
.text:0040C7BF                 mov     esi, ecx
.text:0040C7C1                 xor     ebx, ebx
.text:0040C7C3                 push    ebx             ; HeapInformationLength
.text:0040C7C4                 push    ebx             ; HeapInformation
.text:0040C7C5                 push    1               ; HeapInformationClass
.text:0040C7C7                 push    ebx             ; HeapHandle
.text:0040C7C8                 call    ds:HeapSetInformation
.text:0040C7CE                 mov     ecx, esi
.text:0040C7D0                 call    sub_40D3F3
.text:0040C7D5                 test    eax, eax
.text:0040C7D7                 jz      loc_40CD87
.text:0040C7DD                 push    ebx
.text:0040C7DE                 call    ds:?AfxEnableControlContainer@@YAXPAVCOccManager@@@Z ; AfxEnableControlContainer(COccManager *)
.text:0040C7E4                 pop     ecx
.text:0040C7E5                 lea     ecx, [ebp+var_68]
.text:0040C7E8                 call    ds:??0CCommandLineInfo@@QAE@XZ ; CCommandLineInfo::CCommandLineInfo(void)
.text:0040C7EE                 lea     eax, [ebp+var_68]
.text:0040C7F1 ;   try {
.text:0040C7F1                 mov     [ebp+var_4], ebx
.text:0040C7F4                 push    eax
.text:0040C7F5                 mov     ecx, esi
.text:0040C7F7                 call    ds:?ParseCommandLine@CWinApp@@QAEXAAVCCommandLineInfo@@@Z ; CWinApp::ParseCommandLine(CCommandLineInfo &)
.text:0040C7FD                 cmp     [ebp+var_60], 0
.text:0040C801                 jnz     loc_40CD75
.text:0040C807                 cmp     [ebp+var_5C], 0
.text:0040C80B                 jnz     loc_40CD75
.text:0040C811                 push    offset aMsconfigrunnin ; "MSConfigRunning"
.text:0040C816                 push    1               ; lMaximumCount
.text:0040C818                 push    ebx             ; lInitialCount
.text:0040C819                 push    ebx             ; lpSemaphoreAttributes
.text:0040C81A                 call    ds:CreateSemaphoreW
.text:0040C820                 mov     [esi+0C8h], eax
.text:0040C826                 test    eax, eax
.text:0040C828                 jz      short loc_40C850
.text:0040C82A                 call    ds:GetLastError
.text:0040C830                 cmp     eax, 0B7h ; '·'
.text:0040C835                 jnz     short loc_40C850
.text:0040C837                 push    dword ptr [esi+0C8h] ; hObject
.text:0040C83D                 call    ds:CloseHandle
.text:0040C843                 mov     [esi+0C8h], ebx
.text:0040C849                 call    sub_40DB30
.text:0040C84E                 jmp     short loc_40C853
.text:0040C850 ; ---------------------------------------------------------------------------
.text:0040C850
.text:0040C850 loc_40C850:                             ; CODE XREF: sub_40C7B0+78↑j
.text:0040C850                                         ; sub_40C7B0+85↑j
.text:0040C850                 xor     eax, eax
.text:0040C852                 inc     eax
.text:0040C853
.text:0040C853 loc_40C853:                             ; CODE XREF: sub_40C7B0+9E↑j
.text:0040C853                 test    eax, eax
.text:0040C855                 jz      loc_40CD78
.text:0040C85B                 mov     ecx, esi
.text:0040C85D                 call    ds:?Enable3dControls@CWinApp@@IAEHXZ ; CWinApp::Enable3dControls(void)
.text:0040C863                 push    dword ptr [esi+74h]
.text:0040C866                 lea     ecx, [ebp+var_20]
.text:0040C869                 mov     [ebp+lpCaption], ebx
.text:0040C86C                 mov     edi, ebx
.text:0040C86E                 mov     [ebp+lpText], ebx
.text:0040C871                 call    ds:??0CString@@QAE@PBG@Z ; CString::CString(ushort const *)
.text:0040C877                 lea     ecx, [ebp+String]
.text:0040C877 ;   } // starts at 40C7F1
.text:0040C87A ;   try {
.text:0040C87A                 mov     byte ptr [ebp+var_4], 1
.text:0040C87E                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040C884                 lea     ecx, [ebp+var_28]
.text:0040C884 ;   } // starts at 40C87A
.text:0040C887 ;   try {
.text:0040C887                 mov     byte ptr [ebp+var_4], 2
.text:0040C88B                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040C891                 lea     ecx, [ebp+var_20]
.text:0040C891 ;   } // starts at 40C887
.text:0040C894 ;   try {
.text:0040C894                 mov     byte ptr [ebp+var_4], 3
.text:0040C898                 call    ds:?MakeLower@CString@@QAEXXZ ; CString::MakeLower(void)
.text:0040C89E                 mov     eax, [ebp+var_20]
.text:0040C8A1                 cmp     [eax-8], ebx
.text:0040C8A4                 jz      loc_40CB3D
.text:0040C8AA
.text:0040C8AA loc_40C8AA:                             ; CODE XREF: sub_40C7B0+320↓j
.text:0040C8AA                 push    offset asc_40336C ; "/-"
.text:0040C8AF                 lea     ecx, [ebp+var_20]
.text:0040C8B2                 call    ds:?FindOneOf@CString@@QBEHPBG@Z ; CString::FindOneOf(ushort const *)
.text:0040C8B8                 mov     esi, eax
.text:0040C8BA                 cmp     esi, 0FFFFFFFFh
.text:0040C8BD                 jz      loc_40CAD6
.text:0040C8C3                 lea     ecx, [esi+1]
.text:0040C8C6                 push    ecx
.text:0040C8C7                 lea     eax, [ebp+var_24]
.text:0040C8CA                 push    eax
.text:0040C8CB                 lea     ecx, [ebp+var_20]
.text:0040C8CE                 call    ds:?Mid@CString@@QBE?AV1@H@Z ; CString::Mid(int)
.text:0040C8D4                 push    eax
.text:0040C8D5                 lea     ecx, [ebp+String]
.text:0040C8D5 ;   } // starts at 40C894
.text:0040C8D8 ;   try {
.text:0040C8D8                 mov     byte ptr [ebp+var_4], 4
.text:0040C8DC                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:0040C8E2                 lea     ecx, [ebp+var_24]
.text:0040C8E2 ;   } // starts at 40C8D8
.text:0040C8E5 ;   try {
.text:0040C8E5                 mov     byte ptr [ebp+var_4], 3
.text:0040C8E9                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040C8EF                 push    offset asc_40336C ; "/-"
.text:0040C8F4                 lea     eax, [ebp+var_2C]
.text:0040C8F7                 push    eax
.text:0040C8F8                 lea     ecx, [ebp+String]
.text:0040C8FB                 call    ds:?SpanExcluding@CString@@QBE?AV1@PBG@Z ; CString::SpanExcluding(ushort const *)
.text:0040C901                 push    eax
.text:0040C902                 lea     ecx, [ebp+String]
.text:0040C902 ;   } // starts at 40C8E5
.text:0040C905 ;   try {
.text:0040C905                 mov     byte ptr [ebp+var_4], 5
.text:0040C909                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:0040C90F                 lea     ecx, [ebp+var_2C]
.text:0040C90F ;   } // starts at 40C905
.text:0040C912 ;   try {
.text:0040C912                 mov     byte ptr [ebp+var_4], 3
.text:0040C916                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040C91C                 mov     eax, [ebp+String]
.text:0040C91F                 lea     ecx, [ebp+var_20]
.text:0040C922                 mov     eax, [eax-8]
.text:0040C925                 inc     eax
.text:0040C926                 add     eax, esi
.text:0040C928                 push    eax
.text:0040C929                 lea     eax, [ebp+var_30]
.text:0040C92C                 push    eax
.text:0040C92D                 call    ds:?Mid@CString@@QBE?AV1@H@Z ; CString::Mid(int)
.text:0040C933                 push    eax
.text:0040C934                 lea     ecx, [ebp+var_20]
.text:0040C934 ;   } // starts at 40C912
.text:0040C937 ;   try {
.text:0040C937                 mov     byte ptr [ebp+var_4], 6
.text:0040C93B                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:0040C941                 lea     ecx, [ebp+var_30]
.text:0040C941 ;   } // starts at 40C937
.text:0040C944 ;   try {
.text:0040C944                 mov     byte ptr [ebp+var_4], 3
.text:0040C948                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040C94E                 lea     ecx, [ebp+String]
.text:0040C951                 call    ds:?TrimRight@CString@@QAEXXZ ; CString::TrimRight(void)
.text:0040C957                 push    offset aAuto    ; "auto"
.text:0040C95C                 lea     ecx, [ebp+String]
.text:0040C95F                 call    ds:?Find@CString@@QBEHPBG@Z ; CString::Find(ushort const *)
.text:0040C965                 test    eax, eax
.text:0040C967                 jnz     short loc_40C975
.text:0040C969                 mov     [ebp+lpText], 1
.text:0040C970                 jmp     loc_40CACA
.text:0040C975 ; ---------------------------------------------------------------------------
.text:0040C975
.text:0040C975 loc_40C975:                             ; CODE XREF: sub_40C7B0+1B7↑j
.text:0040C975                 mov     eax, [ebp+String]
.text:0040C978                 mov     ecx, offset aBasic ; "basic"
.text:0040C97D
.text:0040C97D loc_40C97D:                             ; CODE XREF: sub_40C7B0+1ED↓j
.text:0040C97D                 mov     dx, [eax]
.text:0040C980                 cmp     dx, [ecx]
.text:0040C983                 jnz     short loc_40C9A3
.text:0040C985                 test    dx, dx
.text:0040C988                 jz      short loc_40C99F
.text:0040C98A                 mov     dx, [eax+2]
.text:0040C98E                 cmp     dx, [ecx+2]
.text:0040C992                 jnz     short loc_40C9A3
.text:0040C994                 add     eax, 4
.text:0040C997                 add     ecx, 4
.text:0040C99A                 test    dx, dx
.text:0040C99D                 jnz     short loc_40C97D
.text:0040C99F
.text:0040C99F loc_40C99F:                             ; CODE XREF: sub_40C7B0+1D8↑j
.text:0040C99F                 mov     eax, ebx
.text:0040C9A1                 jmp     short loc_40C9A8
.text:0040C9A3 ; ---------------------------------------------------------------------------
.text:0040C9A3
.text:0040C9A3 loc_40C9A3:                             ; CODE XREF: sub_40C7B0+1D3↑j
.text:0040C9A3                                         ; sub_40C7B0+1E2↑j
.text:0040C9A3                 sbb     eax, eax
.text:0040C9A5                 or      eax, 1
.text:0040C9A8
.text:0040C9A8 loc_40C9A8:                             ; CODE XREF: sub_40C7B0+1F1↑j
.text:0040C9A8                 test    eax, eax
.text:0040C9AA                 jnz     short loc_40C9BB
.text:0040C9AC                 mov     dword_413A70, 1
.text:0040C9B6                 jmp     loc_40CACA
.text:0040C9BB ; ---------------------------------------------------------------------------
.text:0040C9BB
.text:0040C9BB loc_40C9BB:                             ; CODE XREF: sub_40C7B0+1FA↑j
.text:0040C9BB                 push    offset aCommit  ; "commit"
.text:0040C9C0                 lea     ecx, [ebp+var_38]
.text:0040C9C3                 call    ds:??0CString@@QAE@PBG@Z ; CString::CString(ushort const *)
.text:0040C9C9                 mov     esi, eax
.text:0040C9CB                 push    6
.text:0040C9CD                 lea     eax, [ebp+var_34]
.text:0040C9CD ;   } // starts at 40C944
.text:0040C9D0 ;   try {
.text:0040C9D0                 mov     byte ptr [ebp+var_4], 7
.text:0040C9D4                 push    eax
.text:0040C9D5                 lea     ecx, [ebp+String]
.text:0040C9D8                 call    ds:?Left@CString@@QBE?AV1@H@Z ; CString::Left(int)
.text:0040C9DE                 push    dword ptr [esi]
.text:0040C9E0                 mov     ecx, eax
.text:0040C9E2                 call    ?Compare@CString@@QBEHPBG@Z ; CString::Compare(ushort const *)
.text:0040C9E7                 lea     ecx, [ebp+var_34]
.text:0040C9EA                 mov     esi, eax
.text:0040C9EC                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040C9F2                 lea     ecx, [ebp+var_38]
.text:0040C9F2 ;   } // starts at 40C9D0
.text:0040C9F5 ;   try {
.text:0040C9F5                 mov     byte ptr [ebp+var_4], 3
.text:0040C9F9                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040C9FF                 test    esi, esi
.text:0040CA01                 jnz     loc_40CA9B
.text:0040CA07                 push    offset a0123456789 ; "0123456789"
.text:0040CA0C                 lea     eax, [ebp+var_3C]
.text:0040CA0F                 push    eax
.text:0040CA10                 lea     ecx, [ebp+String]
.text:0040CA13                 call    ds:?SpanExcluding@CString@@QBE?AV1@PBG@Z ; CString::SpanExcluding(ushort const *)
.text:0040CA19                 push    eax
.text:0040CA1A                 lea     ecx, [ebp+var_28]
.text:0040CA1A ;   } // starts at 40C9F5
.text:0040CA1D ;   try {
.text:0040CA1D                 mov     byte ptr [ebp+var_4], 8
.text:0040CA21                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:0040CA27                 lea     ecx, [ebp+var_3C]
.text:0040CA27 ;   } // starts at 40CA1D
.text:0040CA2A ;   try {
.text:0040CA2A                 mov     byte ptr [ebp+var_4], 3
.text:0040CA2E                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040CA34                 mov     eax, [ebp+var_28]
.text:0040CA37                 mov     ecx, [eax-8]
.text:0040CA3A                 mov     eax, [ebp+String]
.text:0040CA3D                 cmp     ecx, [eax-8]
.text:0040CA40                 jge     loc_40CACA
.text:0040CA46                 push    ecx
.text:0040CA47                 lea     eax, [ebp+var_40]
.text:0040CA4A                 push    eax
.text:0040CA4B                 lea     ecx, [ebp+String]
.text:0040CA4E                 call    ds:?Mid@CString@@QBE?AV1@H@Z ; CString::Mid(int)
.text:0040CA54                 push    eax
.text:0040CA55                 lea     ecx, [ebp+String]
.text:0040CA55 ;   } // starts at 40CA2A
.text:0040CA58 ;   try {
.text:0040CA58                 mov     byte ptr [ebp+var_4], 9
.text:0040CA5C                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:0040CA62                 lea     ecx, [ebp+var_40]
.text:0040CA62 ;   } // starts at 40CA58
.text:0040CA65 ;   try {
.text:0040CA65                 mov     byte ptr [ebp+var_4], 3
.text:0040CA69                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040CA6F                 mov     eax, [ebp+String]
.text:0040CA72                 mov     ecx, [eax-8]
.text:0040CA75                 test    ecx, ecx
.text:0040CA77                 jz      short loc_40CACA
.text:0040CA79                 jle     short loc_40CA80
.text:0040CA7B                 movzx   eax, word ptr [eax]
.text:0040CA7E                 jmp     short loc_40CA82
.text:0040CA80 ; ---------------------------------------------------------------------------
.text:0040CA80
.text:0040CA80 loc_40CA80:                             ; CODE XREF: sub_40C7B0+2C9↑j
.text:0040CA80                 mov     eax, ebx
.text:0040CA82
.text:0040CA82 loc_40CA82:                             ; CODE XREF: sub_40C7B0+2CE↑j
.text:0040CA82                 push    eax             ; C
.text:0040CA83                 call    ds:iswdigit
.text:0040CA89                 pop     ecx
.text:0040CA8A                 test    eax, eax
.text:0040CA8C                 jz      short loc_40CACA
.text:0040CA8E                 push    [ebp+String]    ; String
.text:0040CA91                 call    ds:_wtoi
.text:0040CA97                 mov     edi, eax
.text:0040CA99                 jmp     short loc_40CAC9
.text:0040CA9B ; ---------------------------------------------------------------------------
.text:0040CA9B
.text:0040CA9B loc_40CA9B:                             ; CODE XREF: sub_40C7B0+251↑j
.text:0040CA9B                 mov     eax, [ebp+String]
.text:0040CA9E                 cmp     dword ptr [eax-8], 1
.text:0040CAA2                 jnz     short loc_40CACA
.text:0040CAA4                 cmp     dword ptr [eax-8], 0
.text:0040CAA8                 jle     short loc_40CAAF
.text:0040CAAA                 movzx   eax, word ptr [eax]
.text:0040CAAD                 jmp     short loc_40CAB1
.text:0040CAAF ; ---------------------------------------------------------------------------
.text:0040CAAF
.text:0040CAAF loc_40CAAF:                             ; CODE XREF: sub_40C7B0+2F8↑j
.text:0040CAAF                 mov     eax, ebx
.text:0040CAB1
.text:0040CAB1 loc_40CAB1:                             ; CODE XREF: sub_40C7B0+2FD↑j
.text:0040CAB1                 push    eax             ; C
.text:0040CAB2                 call    ds:iswdigit
.text:0040CAB8                 pop     ecx
.text:0040CAB9                 test    eax, eax
.text:0040CABB                 jz      short loc_40CACA
.text:0040CABD                 push    [ebp+String]    ; String
.text:0040CAC0                 call    ds:_wtoi
.text:0040CAC6                 mov     [ebp+lpCaption], eax
.text:0040CAC9
.text:0040CAC9 loc_40CAC9:                             ; CODE XREF: sub_40C7B0+2E9↑j
.text:0040CAC9                 pop     ecx
.text:0040CACA
.text:0040CACA loc_40CACA:                             ; CODE XREF: sub_40C7B0+1C0↑j
.text:0040CACA                                         ; sub_40C7B0+206↑j ...
.text:0040CACA                 mov     ecx, [ebp+var_20]
.text:0040CACD                 cmp     [ecx-8], ebx
.text:0040CAD0                 jnz     loc_40C8AA
.text:0040CAD6
.text:0040CAD6 loc_40CAD6:                             ; CODE XREF: sub_40C7B0+10D↑j
.text:0040CAD6                 mov     eax, [ebp+lpText]
.text:0040CAD9                 test    eax, eax
.text:0040CADB                 jz      short loc_40CB3D
.text:0040CADD                 push    ebx
.text:0040CADE                 push    0D1h ; 'Ñ'
.text:0040CAE3                 lea     ecx, [ebp+var_CC]
.text:0040CAE9                 call    ds:??0CDialog@@QAE@IPAVCWnd@@@Z ; CDialog::CDialog(uint,CWnd *)
.text:0040CAEF                 mov     [ebp+var_CC], offset ??_7CAutoStartDlg@@6B@ ; const CAutoStartDlg::`vftable'
.text:0040CAF9                 mov     [ebp+var_6C], ebx
.text:0040CAFC                 lea     ecx, [ebp+var_CC]
.text:0040CAFC ;   } // starts at 40CA65
.text:0040CB02 ;   try {
.text:0040CB02                 mov     byte ptr [ebp+var_4], 0Ah
.text:0040CB06                 call    ds:__imp_?DoModal@CDialog@@UAEHXZ ; CDialog::DoModal(void)
.text:0040CB0C                 cmp     [ebp+var_6C], 0
.text:0040CB10                 jz      short loc_40CB2D
.text:0040CB12                 push    ebx
.text:0040CB13                 call    sub_40D0ED
.text:0040CB18                 lea     ecx, [ebp+var_CC]
.text:0040CB18 ;   } // starts at 40CB02
.text:0040CB1E ;   try {
.text:0040CB1E                 mov     byte ptr [ebp+var_4], 3
.text:0040CB22                 call    ds:??1CDialog@@UAE@XZ ; CDialog::~CDialog(void)
.text:0040CB28                 jmp     loc_40CD4D
.text:0040CB2D ; ---------------------------------------------------------------------------
.text:0040CB2D
.text:0040CB2D loc_40CB2D:                             ; CODE XREF: sub_40C7B0+360↑j
.text:0040CB2D                 lea     ecx, [ebp+var_CC]
.text:0040CB2D ;   } // starts at 40CB1E
.text:0040CB33 ;   try {
.text:0040CB33                 mov     byte ptr [ebp+var_4], 3
.text:0040CB37                 call    ds:??1CDialog@@UAE@XZ ; CDialog::~CDialog(void)
.text:0040CB3D
.text:0040CB3D loc_40CB3D:                             ; CODE XREF: sub_40C7B0+F4↑j
.text:0040CB3D                                         ; sub_40C7B0+32B↑j
.text:0040CB3D                 push    0F003Fh         ; dwDesiredAccess
.text:0040CB42                 push    ebx             ; lpDatabaseName
.text:0040CB43                 push    ebx             ; lpMachineName
.text:0040CB44                 mov     [ebp+lpText], ebx
.text:0040CB47                 mov     esi, ebx
.text:0040CB49                 call    ds:OpenSCManagerW
.text:0040CB4F                 test    eax, eax
.text:0040CB51                 jz      short loc_40CB61
.text:0040CB53                 push    eax             ; hSCObject
.text:0040CB54                 mov     [ebp+lpText], 1
.text:0040CB5B                 call    ds:CloseServiceHandle
.text:0040CB61
.text:0040CB61 loc_40CB61:                             ; CODE XREF: sub_40C7B0+3A1↑j
.text:0040CB61                 lea     eax, [ebp+phkResult]
.text:0040CB64                 push    eax             ; phkResult
.text:0040CB65                 push    20006h          ; samDesired
.text:0040CB6A                 push    ebx             ; ulOptions
.text:0040CB6B                 push    offset aSoftwareMicros_0 ; "SOFTWARE\\Microsoft\\Shared Tools"
.text:0040CB70                 push    80000002h       ; hKey
.text:0040CB75                 call    ds:RegOpenKeyExW
.text:0040CB7B                 test    eax, eax
.text:0040CB7D                 jnz     short loc_40CB8B
.text:0040CB7F                 push    [ebp+phkResult] ; hKey
.text:0040CB82                 xor     esi, esi
.text:0040CB84                 inc     esi
.text:0040CB85                 call    ds:RegCloseKey
.text:0040CB8B
.text:0040CB8B loc_40CB8B:                             ; CODE XREF: sub_40C7B0+3CD↑j
.text:0040CB8B                 cmp     [ebp+lpText], 0
.text:0040CB8F                 jz      loc_40CCE9
.text:0040CB95                 test    esi, esi
.text:0040CB97                 jz      loc_40CCE9
.text:0040CB9D                 mov     esi, ebx
.text:0040CB9F                 call    sub_40CD8D
.text:0040CBA4                 push    ebx             ; dwFlags
.text:0040CBA5                 push    offset pwzCommandline ; "%windir%\\system32\\msconfig"
.text:0040CBAA                 call    ds:RegisterApplicationRestart
.text:0040CBB0                 cmp     edi, 1
.text:0040CBB3                 jle     loc_40CCCF
.text:0040CBB9                 lea     ecx, [ebp+var_24]
.text:0040CBBC                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040CBBC ;   } // starts at 40CB33
.text:0040CBC2 ;   try {
.text:0040CBC2                 mov     byte ptr [ebp+var_4], 0Dh
.text:0040CBC6                 mov     eax, dword_413A68
.text:0040CBCB                 test    eax, eax
.text:0040CBCD                 jnz     short loc_40CBD0
.text:0040CBCF                 inc     edi
.text:0040CBD0
.text:0040CBD0 loc_40CBD0:                             ; CODE XREF: sub_40C7B0+41D↑j
.text:0040CBD0                 dec     edi
.text:0040CBD1                 sub     edi, 1
.text:0040CBD4                 jz      short loc_40CC14
.text:0040CBD6                 sub     edi, 1
.text:0040CBD9                 jz      short loc_40CBFC
.text:0040CBDB                 sub     edi, 1
.text:0040CBDE                 jnz     loc_40CCC0
.text:0040CBE4                 mov     edi, dword_413A60
.text:0040CBEA                 test    edi, edi
.text:0040CBEC                 jz      loc_40CCC0
.text:0040CBF2                 add     edi, 90h
.text:0040CBF8                 push    69h ; 'i'
.text:0040CBFA                 jmp     short loc_40CC24
.text:0040CBFC ; ---------------------------------------------------------------------------
.text:0040CBFC
.text:0040CBFC loc_40CBFC:                             ; CODE XREF: sub_40C7B0+429↑j
.text:0040CBFC                 mov     edi, dword_413A64
.text:0040CC02                 test    edi, edi
.text:0040CC04                 jz      loc_40CCC0
.text:0040CC0A                 add     edi, 90h
.text:0040CC10                 push    6Ah ; 'j'
.text:0040CC12                 jmp     short loc_40CC24
.text:0040CC14 ; ---------------------------------------------------------------------------
.text:0040CC14
.text:0040CC14 loc_40CC14:                             ; CODE XREF: sub_40C7B0+424↑j
.text:0040CC14                 test    eax, eax
.text:0040CC16                 jz      loc_40CCC0
.text:0040CC1C                 lea     edi, [eax+90h]
.text:0040CC22                 push    66h ; 'f'
.text:0040CC24
.text:0040CC24 loc_40CC24:                             ; CODE XREF: sub_40C7B0+44A↑j
.text:0040CC24                                         ; sub_40C7B0+462↑j
.text:0040CC24                 lea     ecx, [ebp+var_24]
.text:0040CC27                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:0040CC2D                 test    eax, eax
.text:0040CC2F                 jg      short loc_40CC33
.text:0040CC31                 mov     edi, ebx
.text:0040CC33
.text:0040CC33 loc_40CC33:                             ; CODE XREF: sub_40C7B0+47F↑j
.text:0040CC33                 test    edi, edi
.text:0040CC35                 jz      loc_40CCC0
.text:0040CC3B                 lea     ecx, [ebp+lpText]
.text:0040CC3E                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040CC44                 lea     ecx, [ebp+lpCaption]
.text:0040CC44 ;   } // starts at 40CBC2
.text:0040CC47 ;   try {
.text:0040CC47                 mov     byte ptr [ebp+var_4], 0Eh
.text:0040CC4B                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040CC51                 push    7Eh ; '~'
.text:0040CC53                 lea     ecx, [ebp+lpCaption]
.text:0040CC53 ;   } // starts at 40CC47
.text:0040CC56 ;   try {
.text:0040CC56                 mov     byte ptr [ebp+var_4], 0Fh
.text:0040CC5A                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:0040CC60                 test    eax, eax
.text:0040CC62                 jle     short loc_40CCA6
.text:0040CC64                 push    [ebp+var_24]
.text:0040CC67                 lea     eax, [ebp+lpText]
.text:0040CC6A                 push    100h
.text:0040CC6F                 push    eax
.text:0040CC70                 call    ds:?Format@CString@@QAAXIZZ ; CString::Format(uint,...)
.text:0040CC76                 mov     eax, [ebp+lpText]
.text:0040CC79                 add     esp, 0Ch
.text:0040CC7C                 cmp     [eax-8], ebx
.text:0040CC7F                 jz      short loc_40CCA6
.text:0040CC81                 push    4               ; uType
.text:0040CC83                 push    [ebp+lpCaption] ; lpCaption
.text:0040CC86                 push    eax             ; lpText
.text:0040CC87                 push    ebx             ; hWnd
.text:0040CC88                 call    ds:MessageBoxW
.text:0040CC8E                 cmp     eax, 6
.text:0040CC91                 jnz     short loc_40CCA6
.text:0040CC93                 mov     eax, [edi]
.text:0040CC95                 mov     esi, [eax+0Ch]
.text:0040CC98                 mov     ecx, esi
.text:0040CC9A                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040CCA0                 mov     ecx, edi
.text:0040CCA2                 call    esi
.text:0040CCA4                 mov     esi, ebx
.text:0040CCA6
.text:0040CCA6 loc_40CCA6:                             ; CODE XREF: sub_40C7B0+4B2↑j
.text:0040CCA6                                         ; sub_40C7B0+4CF↑j ...
.text:0040CCA6                 lea     ecx, [ebp+lpCaption]
.text:0040CCA6 ;   } // starts at 40CC56
.text:0040CCA9 ;   try {
.text:0040CCA9                 mov     byte ptr [ebp+var_4], 0Eh
.text:0040CCAD                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040CCB3                 lea     ecx, [ebp+lpText]
.text:0040CCB3 ;   } // starts at 40CCA9
.text:0040CCB6 ;   try {
.text:0040CCB6                 mov     byte ptr [ebp+var_4], 0Dh
.text:0040CCBA                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040CCC0
.text:0040CCC0 loc_40CCC0:                             ; CODE XREF: sub_40C7B0+42E↑j
.text:0040CCC0                                         ; sub_40C7B0+43C↑j ...
.text:0040CCC0                 lea     ecx, [ebp+var_24]
.text:0040CCC0 ;   } // starts at 40CCB6
.text:0040CCC3 ;   try {
.text:0040CCC3                 mov     byte ptr [ebp+var_4], 3
.text:0040CCC7                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040CCCD                 jmp     short loc_40CCD9
.text:0040CCCF ; ---------------------------------------------------------------------------
.text:0040CCCF
.text:0040CCCF loc_40CCCF:                             ; CODE XREF: sub_40C7B0+403↑j
.text:0040CCCF                 push    [ebp+lpCaption]
.text:0040CCD2                 call    sub_40CE7B
.text:0040CCD7                 mov     esi, eax
.text:0040CCD9
.text:0040CCD9 loc_40CCD9:                             ; CODE XREF: sub_40C7B0+51D↑j
.text:0040CCD9                 call    sub_40D03A
.text:0040CCDE                 test    esi, esi
.text:0040CCE0                 jz      short loc_40CD4D
.text:0040CCE2                 call    sub_40D13E
.text:0040CCE7                 jmp     short loc_40CD4D
.text:0040CCE9 ; ---------------------------------------------------------------------------
.text:0040CCE9
.text:0040CCE9 loc_40CCE9:                             ; CODE XREF: sub_40C7B0+3DF↑j
.text:0040CCE9                                         ; sub_40C7B0+3E7↑j
.text:0040CCE9                 lea     ecx, [ebp+lpCaption]
.text:0040CCEC                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040CCF2                 lea     ecx, [ebp+lpText]
.text:0040CCF2 ;   } // starts at 40CCC3
.text:0040CCF5 ;   try {
.text:0040CCF5                 mov     byte ptr [ebp+var_4], 0Bh
.text:0040CCF9                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040CCFF                 push    7Eh ; '~'
.text:0040CD01                 lea     ecx, [ebp+lpText]
.text:0040CD01 ;   } // starts at 40CCF5
.text:0040CD04 ;   try {
.text:0040CD04                 mov     byte ptr [ebp+var_4], 0Ch
.text:0040CD08                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:0040CD0E                 test    eax, eax
.text:0040CD10                 jle     short loc_40CD33
.text:0040CD12                 push    3F5h
.text:0040CD17                 lea     ecx, [ebp+lpCaption]
.text:0040CD1A                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:0040CD20                 test    eax, eax
.text:0040CD22                 jle     short loc_40CD33
.text:0040CD24                 push    10h             ; uType
.text:0040CD26                 push    [ebp+lpText]    ; lpCaption
.text:0040CD29                 push    [ebp+lpCaption] ; lpText
.text:0040CD2C                 push    ebx             ; hWnd
.text:0040CD2D                 call    ds:MessageBoxW
.text:0040CD33
.text:0040CD33 loc_40CD33:                             ; CODE XREF: sub_40C7B0+560↑j
.text:0040CD33                                         ; sub_40C7B0+572↑j
.text:0040CD33                 lea     ecx, [ebp+lpText]
.text:0040CD33 ;   } // starts at 40CD04
.text:0040CD36 ;   try {
.text:0040CD36                 mov     byte ptr [ebp+var_4], 0Bh
.text:0040CD3A                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040CD40                 lea     ecx, [ebp+lpCaption]
.text:0040CD40 ;   } // starts at 40CD36
.text:0040CD43 ;   try {
.text:0040CD43                 mov     byte ptr [ebp+var_4], 3
.text:0040CD47                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040CD4D
.text:0040CD4D loc_40CD4D:                             ; CODE XREF: sub_40C7B0+378↑j
.text:0040CD4D                                         ; sub_40C7B0+530↑j ...
.text:0040CD4D                 lea     ecx, [ebp+var_28]
.text:0040CD4D ;   } // starts at 40CD43
.text:0040CD50 ;   try {
.text:0040CD50                 mov     byte ptr [ebp+var_4], 2
.text:0040CD54                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040CD5A                 lea     ecx, [ebp+String]
.text:0040CD5A ;   } // starts at 40CD50
.text:0040CD5D ;   try {
.text:0040CD5D                 mov     byte ptr [ebp+var_4], 1
.text:0040CD61                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040CD67                 lea     ecx, [ebp+var_20]
.text:0040CD67 ;   } // starts at 40CD5D
.text:0040CD6A ;   try {
.text:0040CD6A                 mov     byte ptr [ebp+var_4], bl
.text:0040CD6D                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040CD73                 jmp     short loc_40CD78
.text:0040CD75 ; ---------------------------------------------------------------------------
.text:0040CD75
.text:0040CD75 loc_40CD75:                             ; CODE XREF: sub_40C7B0+51↑j
.text:0040CD75                                         ; sub_40C7B0+5B↑j
.text:0040CD75                 xor     ebx, ebx
.text:0040CD77                 inc     ebx
.text:0040CD77 ;   } // starts at 40CD6A
.text:0040CD78
.text:0040CD78 loc_40CD78:                             ; CODE XREF: sub_40C7B0+A5↑j
.text:0040CD78                                         ; sub_40C7B0+5C3↑j
.text:0040CD78                 or      [ebp+var_4], 0FFFFFFFFh
.text:0040CD7C                 lea     ecx, [ebp+var_68]
.text:0040CD7F                 call    ds:??1CCommandLineInfo@@UAE@XZ ; CCommandLineInfo::~CCommandLineInfo(void)
.text:0040CD85                 mov     eax, ebx
.text:0040CD87
.text:0040CD87 loc_40CD87:                             ; CODE XREF: sub_40C7B0+27↑j
.text:0040CD87                 call    __EH_epilog3_GS
.text:0040CD8C                 retn
.text:0040CD8C ; } // starts at 40C7B0
.text:0040CD8C sub_40C7B0      endp
.text:0040CD8C
.text:0040CD8D
.text:0040CD8D ; =============== S U B R O U T I N E =======================================
.text:0040CD8D
.text:0040CD8D ; Attributes: bp-based frame
.text:0040CD8D
.text:0040CD8D sub_40CD8D      proc near               ; CODE XREF: sub_40C7B0+3EF↑p
.text:0040CD8D
.text:0040CD8D var_10          = dword ptr -10h
.text:0040CD8D var_4           = dword ptr -4
.text:0040CD8D arg_4           = dword ptr  0Ch
.text:0040CD8D
.text:0040CD8D ; FUNCTION CHUNK AT .text:00403C81 SIZE 0000000B BYTES
.text:0040CD8D ; FUNCTION CHUNK AT .text:0041150A SIZE 00000043 BYTES
.text:0040CD8D
.text:0040CD8D ; __unwind { // loc_411532
.text:0040CD8D                 push    4
.text:0040CD8F                 mov     eax, offset loc_411532
.text:0040CD94                 call    __EH_prolog3
.text:0040CD99                 push    0C4h ; 'Ä'
.text:0040CD9E                 call    ds:__imp_??2@YAPAXI@Z ; operator new(uint)
.text:0040CDA4                 pop     ecx
.text:0040CDA5                 mov     [ebp+var_10], eax
.text:0040CDA8                 xor     esi, esi
.text:0040CDAA ;   try {
.text:0040CDAA                 mov     [ebp+var_4], esi
.text:0040CDAD                 test    eax, eax
.text:0040CDAF                 jz      short loc_40CDBA
.text:0040CDB1                 mov     ecx, eax
.text:0040CDB3                 call    sub_40A876
.text:0040CDB8                 jmp     short loc_40CDBC
.text:0040CDBA ; ---------------------------------------------------------------------------
.text:0040CDBA
.text:0040CDBA loc_40CDBA:                             ; CODE XREF: sub_40CD8D+22↑j
.text:0040CDBA                 mov     eax, esi
.text:0040CDBA ;   } // starts at 40CDAA
.text:0040CDBC
.text:0040CDBC loc_40CDBC:                             ; CODE XREF: sub_40CD8D+2B↑j
.text:0040CDBC                 or      [ebp+var_4], 0FFFFFFFFh
.text:0040CDC0                 push    0FCh ; 'ü'
.text:0040CDC5                 mov     dword_413A68, eax
.text:0040CDCA                 call    ds:__imp_??2@YAPAXI@Z ; operator new(uint)
.text:0040CDD0                 pop     ecx
.text:0040CDD1                 mov     [ebp+var_10], eax
.text:0040CDD4 ;   try {
.text:0040CDD4                 mov     [ebp+var_4], 1
.text:0040CDDB                 test    eax, eax
.text:0040CDDD                 jz      short loc_40CDE8
.text:0040CDDF                 mov     ecx, eax
.text:0040CDE1                 call    sub_403F0B
.text:0040CDE6                 jmp     short loc_40CDEA
.text:0040CDE8 ; ---------------------------------------------------------------------------
.text:0040CDE8
.text:0040CDE8 loc_40CDE8:                             ; CODE XREF: sub_40CD8D+50↑j
.text:0040CDE8                 mov     eax, esi
.text:0040CDE8 ;   } // starts at 40CDD4
.text:0040CDEA
.text:0040CDEA loc_40CDEA:                             ; CODE XREF: sub_40CD8D+59↑j
.text:0040CDEA                 or      [ebp+var_4], 0FFFFFFFFh
.text:0040CDEE                 mov     ebx, 0A0h ; ' '
.text:0040CDF3                 push    ebx
.text:0040CDF4                 mov     dword_413A64, eax
.text:0040CDF9                 call    ds:__imp_??2@YAPAXI@Z ; operator new(uint)
.text:0040CDFF                 pop     ecx
.text:0040CE00                 mov     [ebp+var_10], eax
.text:0040CE03 ;   try {
.text:0040CE03                 mov     [ebp+var_4], 2
.text:0040CE0A                 test    eax, eax
.text:0040CE0C                 jz      short loc_40CE17
.text:0040CE0E                 mov     ecx, eax
.text:0040CE10                 call    sub_406E96
.text:0040CE15                 jmp     short loc_40CE19
.text:0040CE17 ; ---------------------------------------------------------------------------
.text:0040CE17
.text:0040CE17 loc_40CE17:                             ; CODE XREF: sub_40CD8D+7F↑j
.text:0040CE17                 mov     eax, esi
.text:0040CE17 ;   } // starts at 40CE03
.text:0040CE19
.text:0040CE19 loc_40CE19:                             ; CODE XREF: sub_40CD8D+88↑j
.text:0040CE19                 or      [ebp+var_4], 0FFFFFFFFh
.text:0040CE1D                 push    ebx
.text:0040CE1E                 mov     dword_413A60, eax
.text:0040CE23                 call    ds:__imp_??2@YAPAXI@Z ; operator new(uint)
.text:0040CE29                 pop     ecx
.text:0040CE2A                 mov     [ebp+var_10], eax
.text:0040CE2D ;   try {
.text:0040CE2D                 mov     [ebp+var_4], 3
.text:0040CE34                 test    eax, eax
.text:0040CE36                 jz      short loc_40CE41
.text:0040CE38                 mov     ecx, eax
.text:0040CE3A                 call    sub_4071D6
.text:0040CE3F                 jmp     short loc_40CE43
.text:0040CE41 ; ---------------------------------------------------------------------------
.text:0040CE41
.text:0040CE41 loc_40CE41:                             ; CODE XREF: sub_40CD8D+A9↑j
.text:0040CE41                 mov     eax, esi
.text:0040CE41 ;   } // starts at 40CE2D
.text:0040CE43
.text:0040CE43 loc_40CE43:                             ; CODE XREF: sub_40CD8D+B2↑j
.text:0040CE43                 or      [ebp+var_4], 0FFFFFFFFh
.text:0040CE47                 push    0D4h ; 'Ô'
.text:0040CE4C                 mov     dword_413A6C, eax
.text:0040CE51                 call    ds:__imp_??2@YAPAXI@Z ; operator new(uint)
.text:0040CE57                 pop     ecx
.text:0040CE58                 mov     [ebp+var_10], eax
.text:0040CE5B ;   try {
.text:0040CE5B                 mov     [ebp+var_4], 4
.text:0040CE62                 test    eax, eax
.text:0040CE64                 jz      short loc_40CE6F
.text:0040CE66                 mov     ecx, eax
.text:0040CE68                 call    sub_407856
.text:0040CE6D                 mov     esi, eax
.text:0040CE6F
.text:0040CE6F loc_40CE6F:                             ; CODE XREF: sub_40CD8D+D7↑j
.text:0040CE6F                 mov     dword_413A98, esi
.text:0040CE75                 call    __EH_epilog3
.text:0040CE7A                 retn
.text:0040CE7A ;   } // starts at 40CE5B
.text:0040CE7A ; } // starts at 40CD8D
.text:0040CE7A sub_40CD8D      endp
.text:0040CE7A
.text:0040CE7B
.text:0040CE7B ; =============== S U B R O U T I N E =======================================
.text:0040CE7B
.text:0040CE7B ; Attributes: bp-based frame
.text:0040CE7B
.text:0040CE7B sub_40CE7B      proc near               ; CODE XREF: sub_40C7B0+522↑p
.text:0040CE7B
.text:0040CE7B var_B8          = dword ptr -0B8h
.text:0040CE7B var_74          = dword ptr -74h
.text:0040CE7B var_2C          = dword ptr -2Ch
.text:0040CE7B var_28          = dword ptr -28h
.text:0040CE7B var_24          = dword ptr -24h
.text:0040CE7B var_20          = dword ptr -20h
.text:0040CE7B var_1C          = dword ptr -1Ch
.text:0040CE7B var_18          = dword ptr -18h
.text:0040CE7B var_14          = dword ptr -14h
.text:0040CE7B var_4           = dword ptr -4
.text:0040CE7B arg_0           = dword ptr  8
.text:0040CE7B arg_4           = dword ptr  0Ch
.text:0040CE7B
.text:0040CE7B ; FUNCTION CHUNK AT .text:0041154D SIZE 00000033 BYTES
.text:0040CE7B
.text:0040CE7B ; __unwind { // loc_411558
.text:0040CE7B                 push    0ACh
.text:0040CE80                 mov     eax, offset loc_411558
.text:0040CE85                 call    __EH_prolog3_GS
.text:0040CE8A                 mov     esi, [ebp+arg_0]
.text:0040CE8D                 xor     ebx, ebx
.text:0040CE8F                 test    esi, esi
.text:0040CE91                 jle     short loc_40CE96
.text:0040CE93                 dec     esi
.text:0040CE94                 jmp     short loc_40CE98
.text:0040CE96 ; ---------------------------------------------------------------------------
.text:0040CE96
.text:0040CE96 loc_40CE96:                             ; CODE XREF: sub_40CE7B+16↑j
.text:0040CE96                 mov     esi, ebx
.text:0040CE98
.text:0040CE98 loc_40CE98:                             ; CODE XREF: sub_40CE7B+19↑j
.text:0040CE98                 push    esi
.text:0040CE99                 push    ebx
.text:0040CE9A                 push    7Eh ; '~'
.text:0040CE9C                 lea     ecx, [ebp+var_B8]
.text:0040CEA2                 call    ds:??0CPropertySheet@@QAE@IPAVCWnd@@I@Z ; CPropertySheet::CPropertySheet(uint,CWnd *,uint)
.text:0040CEA8                 or      [ebp+var_74], 200000h
.text:0040CEAF                 mov     [ebp+var_B8], offset ??_7CMSConfigSheet@@6B@ ; const CMSConfigSheet::`vftable'
.text:0040CEB9                 mov     [ebp+var_2C], esi
.text:0040CEBC                 push    ebx
.text:0040CEBD                 push    70000h
.text:0040CEC2                 push    ebx
.text:0040CEC3                 lea     ecx, [ebp+var_B8]
.text:0040CEC9 ;   try {
.text:0040CEC9                 mov     [ebp+var_4], ebx
.text:0040CECC                 call    ds:?ModifyStyle@CWnd@@QAEHKKI@Z ; CWnd::ModifyStyle(ulong,ulong,uint)
.text:0040CED2                 mov     eax, dword_413A6C
.text:0040CED7                 test    eax, eax
.text:0040CED9                 jz      short loc_40CEE8
.text:0040CEDB                 push    eax
.text:0040CEDC                 lea     ecx, [ebp+var_B8]
.text:0040CEE2                 call    ds:?AddPage@CPropertySheet@@QAEXPAVCPropertyPage@@@Z ; CPropertySheet::AddPage(CPropertyPage *)
.text:0040CEE8
.text:0040CEE8 loc_40CEE8:                             ; CODE XREF: sub_40CE7B+5E↑j
.text:0040CEE8                 mov     eax, dword_413A68
.text:0040CEED                 test    eax, eax
.text:0040CEEF                 jz      short loc_40CEFE
.text:0040CEF1                 push    eax
.text:0040CEF2                 lea     ecx, [ebp+var_B8]
.text:0040CEF8                 call    ds:?AddPage@CPropertySheet@@QAEXPAVCPropertyPage@@@Z ; CPropertySheet::AddPage(CPropertyPage *)
.text:0040CEFE
.text:0040CEFE loc_40CEFE:                             ; CODE XREF: sub_40CE7B+74↑j
.text:0040CEFE                 mov     eax, dword_413A64
.text:0040CF03                 test    eax, eax
.text:0040CF05                 jz      short loc_40CF14
.text:0040CF07                 push    eax
.text:0040CF08                 lea     ecx, [ebp+var_B8]
.text:0040CF0E                 call    ds:?AddPage@CPropertySheet@@QAEXPAVCPropertyPage@@@Z ; CPropertySheet::AddPage(CPropertyPage *)
.text:0040CF14
.text:0040CF14 loc_40CF14:                             ; CODE XREF: sub_40CE7B+8A↑j
.text:0040CF14                 mov     eax, dword_413A60
.text:0040CF19                 test    eax, eax
.text:0040CF1B                 jz      short loc_40CF2A
.text:0040CF1D                 push    eax
.text:0040CF1E                 lea     ecx, [ebp+var_B8]
.text:0040CF24                 call    ds:?AddPage@CPropertySheet@@QAEXPAVCPropertyPage@@@Z ; CPropertySheet::AddPage(CPropertyPage *)
.text:0040CF2A
.text:0040CF2A loc_40CF2A:                             ; CODE XREF: sub_40CE7B+A0↑j
.text:0040CF2A                 mov     eax, dword_413A98
.text:0040CF2F                 test    eax, eax
.text:0040CF31                 jz      short loc_40CF40
.text:0040CF33                 push    eax
.text:0040CF34                 lea     ecx, [ebp+var_B8]
.text:0040CF3A                 call    ds:?AddPage@CPropertySheet@@QAEXPAVCPropertyPage@@@Z ; CPropertySheet::AddPage(CPropertyPage *)
.text:0040CF40
.text:0040CF40 loc_40CF40:                             ; CODE XREF: sub_40CE7B+B6↑j
.text:0040CF40                 lea     eax, [ebp+var_B8]
.text:0040CF46                 mov     ecx, eax
.text:0040CF48                 mov     dword_4137C8, eax
.text:0040CF4D                 call    ds:__imp_?DoModal@CPropertySheet@@UAEHXZ ; CPropertySheet::DoModal(void)
.text:0040CF53                 mov     ecx, dword_413A68
.text:0040CF59                 mov     edx, ebx
.text:0040CF5B                 mov     [ebp+var_28], eax
.text:0040CF5E                 mov     edi, ebx
.text:0040CF60                 mov     dword_4137C8, ebx
.text:0040CF66                 mov     [ebp+var_24], edx
.text:0040CF69                 test    ecx, ecx
.text:0040CF6B                 jz      short loc_40CF78
.text:0040CF6D                 add     ecx, 90h
.text:0040CF73                 mov     [ebp+var_20], ecx
.text:0040CF76                 jmp     short loc_40CF7B
.text:0040CF78 ; ---------------------------------------------------------------------------
.text:0040CF78
.text:0040CF78 loc_40CF78:                             ; CODE XREF: sub_40CE7B+F0↑j
.text:0040CF78                 mov     [ebp+var_20], ebx
.text:0040CF7B
.text:0040CF7B loc_40CF7B:                             ; CODE XREF: sub_40CE7B+FB↑j
.text:0040CF7B                 mov     eax, dword_413A64
.text:0040CF80                 test    eax, eax
.text:0040CF82                 jz      short loc_40CF8E
.text:0040CF84                 add     eax, 90h
.text:0040CF89                 mov     [ebp+var_1C], eax
.text:0040CF8C                 jmp     short loc_40CF91
.text:0040CF8E ; ---------------------------------------------------------------------------
.text:0040CF8E
.text:0040CF8E loc_40CF8E:                             ; CODE XREF: sub_40CE7B+107↑j
.text:0040CF8E                 mov     [ebp+var_1C], ebx
.text:0040CF91
.text:0040CF91 loc_40CF91:                             ; CODE XREF: sub_40CE7B+111↑j
.text:0040CF91                 mov     eax, dword_413A60
.text:0040CF96                 test    eax, eax
.text:0040CF98                 jz      short loc_40CFA4
.text:0040CF9A                 add     eax, 90h
.text:0040CF9F                 mov     [ebp+var_18], eax
.text:0040CFA2                 jmp     short loc_40CFA7
.text:0040CFA4 ; ---------------------------------------------------------------------------
.text:0040CFA4
.text:0040CFA4 loc_40CFA4:                             ; CODE XREF: sub_40CE7B+11D↑j
.text:0040CFA4                 mov     [ebp+var_18], ebx
.text:0040CFA7
.text:0040CFA7 loc_40CFA7:                             ; CODE XREF: sub_40CE7B+127↑j
.text:0040CFA7                 mov     [ebp+var_14], ebx
.text:0040CFAA
.text:0040CFAA loc_40CFAA:                             ; CODE XREF: sub_40CE7B+17B↓j
.text:0040CFAA                 mov     eax, [ebp+ebx*4+var_20]
.text:0040CFAE                 test    eax, eax
.text:0040CFB0                 jz      short loc_40CFF2
.text:0040CFB2                 mov     eax, [eax]
.text:0040CFB4                 mov     esi, [eax+8]
.text:0040CFB7                 mov     ecx, esi
.text:0040CFB9                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040CFBF                 mov     ecx, [ebp+ebx*4+var_20]
.text:0040CFC3                 call    esi
.text:0040CFC5                 neg     eax
.text:0040CFC7                 sbb     eax, eax
.text:0040CFC9                 neg     eax
.text:0040CFCB                 or      [ebp+var_24], eax
.text:0040CFCE                 mov     eax, [ebp+ebx*4+var_20]
.text:0040CFD2                 mov     eax, [eax]
.text:0040CFD4                 mov     esi, [eax+10h]
.text:0040CFD7                 mov     ecx, esi
.text:0040CFD9                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040CFDF                 mov     ecx, [ebp+ebx*4+var_20]
.text:0040CFE3                 call    esi
.text:0040CFE5                 mov     edx, [ebp+var_24]
.text:0040CFE8                 or      edi, eax
.text:0040CFEA                 test    edx, edx
.text:0040CFEC                 jz      short loc_40CFF2
.text:0040CFEE                 test    edi, edi
.text:0040CFF0                 jnz     short loc_40D006
.text:0040CFF2
.text:0040CFF2 loc_40CFF2:                             ; CODE XREF: sub_40CE7B+135↑j
.text:0040CFF2                                         ; sub_40CE7B+171↑j
.text:0040CFF2                 inc     ebx
.text:0040CFF3                 cmp     ebx, 4
.text:0040CFF6                 jl      short loc_40CFAA
.text:0040CFF8                 mov     esi, [ebp+var_28]
.text:0040CFFB                 test    edi, edi
.text:0040CFFD                 jnz     short loc_40D009
.text:0040CFFF                 cmp     esi, 2
.text:0040D002                 jz      short loc_40D014
.text:0040D004                 jmp     short loc_40D009
.text:0040D006 ; ---------------------------------------------------------------------------
.text:0040D006
.text:0040D006 loc_40D006:                             ; CODE XREF: sub_40CE7B+175↑j
.text:0040D006                 mov     esi, [ebp+var_28]
.text:0040D009
.text:0040D009 loc_40D009:                             ; CODE XREF: sub_40CE7B+182↑j
.text:0040D009                                         ; sub_40CE7B+189↑j
.text:0040D009                 push    edx
.text:0040D00A                 call    sub_40D0ED
.text:0040D00F                 cmp     esi, 2
.text:0040D012                 jnz     short loc_40D016
.text:0040D014
.text:0040D014 loc_40D014:                             ; CODE XREF: sub_40CE7B+187↑j
.text:0040D014                 xor     edi, edi
.text:0040D014 ;   } // starts at 40CEC9
.text:0040D016
.text:0040D016 loc_40D016:                             ; CODE XREF: sub_40CE7B+197↑j
.text:0040D016                 or      [ebp+var_4], 0FFFFFFFFh
.text:0040D01A                 lea     ecx, [ebp+var_B8]
.text:0040D020                 mov     [ebp+var_B8], offset ??_7CMSConfigSheet@@6B@ ; const CMSConfigSheet::`vftable'
.text:0040D02A                 call    ds:??1CPropertySheet@@UAE@XZ ; CPropertySheet::~CPropertySheet(void)
.text:0040D030                 mov     eax, edi
.text:0040D032                 call    __EH_epilog3_GS
.text:0040D037                 retn    4
.text:0040D037 ; } // starts at 40CE7B
.text:0040D037 sub_40CE7B      endp
.text:0040D037
.text:0040D03A
.text:0040D03A ; =============== S U B R O U T I N E =======================================
.text:0040D03A
.text:0040D03A ; Attributes: bp-based frame
.text:0040D03A
.text:0040D03A sub_40D03A      proc near               ; CODE XREF: sub_40C7B0:loc_40CCD9↑p
.text:0040D03A
.text:0040D03A var_4           = dword ptr -4
.text:0040D03A
.text:0040D03A                 mov     edi, edi
.text:0040D03C                 push    ebp
.text:0040D03D                 mov     ebp, esp
.text:0040D03F                 push    ecx
.text:0040D040                 mov     eax, ___security_cookie
.text:0040D045                 xor     eax, ebp
.text:0040D047                 mov     [ebp+var_4], eax
.text:0040D04A                 push    ebx
.text:0040D04B                 push    esi
.text:0040D04C                 xor     ebx, ebx
.text:0040D04E                 push    edi
.text:0040D04F                 mov     edi, dword_413A6C
.text:0040D055                 inc     ebx
.text:0040D056                 test    edi, edi
.text:0040D058                 jz      short loc_40D06C
.text:0040D05A                 mov     eax, [edi]
.text:0040D05C                 push    ebx
.text:0040D05D                 mov     esi, [eax+4]
.text:0040D060                 mov     ecx, esi
.text:0040D062                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D068                 mov     ecx, edi
.text:0040D06A                 call    esi
.text:0040D06C
.text:0040D06C loc_40D06C:                             ; CODE XREF: sub_40D03A+1E↑j
.text:0040D06C                 mov     edi, dword_413A68
.text:0040D072                 test    edi, edi
.text:0040D074                 jz      short loc_40D088
.text:0040D076                 mov     eax, [edi]
.text:0040D078                 push    ebx
.text:0040D079                 mov     esi, [eax+4]
.text:0040D07C                 mov     ecx, esi
.text:0040D07E                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D084                 mov     ecx, edi
.text:0040D086                 call    esi
.text:0040D088
.text:0040D088 loc_40D088:                             ; CODE XREF: sub_40D03A+3A↑j
.text:0040D088                 mov     edi, dword_413A64
.text:0040D08E                 test    edi, edi
.text:0040D090                 jz      short loc_40D0A4
.text:0040D092                 mov     eax, [edi]
.text:0040D094                 push    ebx
.text:0040D095                 mov     esi, [eax+4]
.text:0040D098                 mov     ecx, esi
.text:0040D09A                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D0A0                 mov     ecx, edi
.text:0040D0A2                 call    esi
.text:0040D0A4
.text:0040D0A4 loc_40D0A4:                             ; CODE XREF: sub_40D03A+56↑j
.text:0040D0A4                 mov     edi, dword_413A60
.text:0040D0AA                 test    edi, edi
.text:0040D0AC                 jz      short loc_40D0C0
.text:0040D0AE                 mov     eax, [edi]
.text:0040D0B0                 push    ebx
.text:0040D0B1                 mov     esi, [eax+4]
.text:0040D0B4                 mov     ecx, esi
.text:0040D0B6                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D0BC                 mov     ecx, edi
.text:0040D0BE                 call    esi
.text:0040D0C0
.text:0040D0C0 loc_40D0C0:                             ; CODE XREF: sub_40D03A+72↑j
.text:0040D0C0                 mov     edi, dword_413A98
.text:0040D0C6                 test    edi, edi
.text:0040D0C8                 jz      short loc_40D0DC
.text:0040D0CA                 mov     eax, [edi]
.text:0040D0CC                 push    ebx
.text:0040D0CD                 mov     esi, [eax+4]
.text:0040D0D0                 mov     ecx, esi
.text:0040D0D2                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D0D8                 mov     ecx, edi
.text:0040D0DA                 call    esi
.text:0040D0DC
.text:0040D0DC loc_40D0DC:                             ; CODE XREF: sub_40D03A+8E↑j
.text:0040D0DC                 mov     ecx, [ebp+var_4]
.text:0040D0DF                 pop     edi
.text:0040D0E0                 pop     esi
.text:0040D0E1                 xor     ecx, ebp        ; StackCookie
.text:0040D0E3                 pop     ebx
.text:0040D0E4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040D0E9                 mov     esp, ebp
.text:0040D0EB                 pop     ebp
.text:0040D0EC                 retn
.text:0040D0EC sub_40D03A      endp
.text:0040D0EC
.text:0040D0ED
.text:0040D0ED ; =============== S U B R O U T I N E =======================================
.text:0040D0ED
.text:0040D0ED ; Attributes: bp-based frame
.text:0040D0ED
.text:0040D0ED sub_40D0ED      proc near               ; CODE XREF: sub_40C7B0+363↑p
.text:0040D0ED                                         ; sub_40CE7B+18F↑p
.text:0040D0ED
.text:0040D0ED phkResult       = dword ptr -4
.text:0040D0ED arg_0           = dword ptr  8
.text:0040D0ED
.text:0040D0ED                 mov     edi, edi
.text:0040D0EF                 push    ebp
.text:0040D0F0                 mov     ebp, esp
.text:0040D0F2                 push    ecx
.text:0040D0F3                 cmp     [ebp+arg_0], 0
.text:0040D0F7                 jnz     short loc_40D138
.text:0040D0F9                 and     [ebp+phkResult], 0
.text:0040D0FD                 lea     eax, [ebp+phkResult]
.text:0040D100                 push    eax             ; phkResult
.text:0040D101                 push    0F003Fh         ; samDesired
.text:0040D106                 push    0               ; ulOptions
.text:0040D108                 push    offset aSoftwareMicros_2 ; "SOFTWARE\\Microsoft\\Windows\\CurrentVe"...
.text:0040D10D                 push    80000002h       ; hKey
.text:0040D112                 call    ds:RegOpenKeyExW
.text:0040D118                 test    eax, eax
.text:0040D11A                 jnz     short loc_40D138
.text:0040D11C                 push    esi
.text:0040D11D                 mov     esi, [ebp+phkResult]
.text:0040D120                 push    offset aMsconfig ; "MSConfig"
.text:0040D125                 push    esi             ; hKey
.text:0040D126                 call    ds:RegDeleteValueW
.text:0040D12C                 test    esi, esi
.text:0040D12E                 jz      short loc_40D137
.text:0040D130                 push    esi             ; hKey
.text:0040D131                 call    ds:RegCloseKey
.text:0040D137
.text:0040D137 loc_40D137:                             ; CODE XREF: sub_40D0ED+41↑j
.text:0040D137                 pop     esi
.text:0040D138
.text:0040D138 loc_40D138:                             ; CODE XREF: sub_40D0ED+A↑j
.text:0040D138                                         ; sub_40D0ED+2D↑j
.text:0040D138                 mov     esp, ebp
.text:0040D13A                 pop     ebp
.text:0040D13B                 retn    4
.text:0040D13B sub_40D0ED      endp
.text:0040D13B
.text:0040D13E
.text:0040D13E ; =============== S U B R O U T I N E =======================================
.text:0040D13E
.text:0040D13E ; Attributes: bp-based frame
.text:0040D13E
.text:0040D13E sub_40D13E      proc near               ; CODE XREF: sub_40C7B0+532↑p
.text:0040D13E
.text:0040D13E var_1044        = dword ptr -1044h
.text:0040D13E var_1040        = dword ptr -1040h
.text:0040D13E var_103C        = byte ptr -103Ch
.text:0040D13E lpMem           = dword ptr -1030h
.text:0040D13E var_102C        = dword ptr -102Ch
.text:0040D13E TokenHandle     = dword ptr -1028h
.text:0040D13E var_1024        = dword ptr -1024h
.text:0040D13E NewState        = _TOKEN_PRIVILEGES ptr -1020h
.text:0040D13E Buffer          = word ptr -1010h
.text:0040D13E Caption         = word ptr -810h
.text:0040D13E var_10          = dword ptr -10h
.text:0040D13E var_C           = dword ptr -0Ch
.text:0040D13E var_4           = dword ptr -4
.text:0040D13E arg_4           = dword ptr  0Ch
.text:0040D13E
.text:0040D13E ; FUNCTION CHUNK AT .text:00411580 SIZE 00000034 BYTES
.text:0040D13E
.text:0040D13E ; __unwind { // SEH_40D13E
.text:0040D13E                 mov     edi, edi
.text:0040D140                 push    ebp
.text:0040D141                 mov     ebp, esp
.text:0040D143                 push    0FFFFFFFFh
.text:0040D145                 push    offset SEH_40D13E
.text:0040D14A                 mov     eax, large fs:0
.text:0040D150                 push    eax
.text:0040D151                 mov     eax, 1038h      ; a1
.text:0040D156                 call    __alloca_probe_0_0
.text:0040D15B                 mov     eax, ___security_cookie
.text:0040D160                 xor     eax, ebp
.text:0040D162                 mov     [ebp+var_10], eax
.text:0040D165                 push    ebx
.text:0040D166                 push    esi
.text:0040D167                 push    edi
.text:0040D168                 push    eax
.text:0040D169                 lea     eax, [ebp+var_C]
.text:0040D16C                 mov     large fs:0, eax
.text:0040D172                 call    ds:GetCurrentProcessId
.text:0040D178                 push    eax             ; dwProcessId
.text:0040D179                 xor     ebx, ebx
.text:0040D17B                 push    ebx             ; bInheritHandle
.text:0040D17C                 push    1FFFFFh         ; dwDesiredAccess
.text:0040D181                 call    ds:OpenProcess
.text:0040D187                 mov     edi, eax
.text:0040D189                 test    edi, edi
.text:0040D18B                 jz      loc_40D339
.text:0040D191                 lea     eax, [ebp+TokenHandle]
.text:0040D197                 push    eax             ; TokenHandle
.text:0040D198                 push    20h ; ' '       ; DesiredAccess
.text:0040D19A                 push    edi             ; ProcessHandle
.text:0040D19B                 call    ds:OpenProcessToken
.text:0040D1A1                 test    eax, eax
.text:0040D1A3                 jz      loc_40D332
.text:0040D1A9                 lea     eax, [ebp+NewState.Privileges]
.text:0040D1AF                 mov     [ebp+NewState.PrivilegeCount], 1
.text:0040D1B9                 push    eax             ; lpLuid
.text:0040D1BA                 push    offset aSeshutdownpriv ; "SeShutdownPrivilege"
.text:0040D1BF                 push    ebx             ; lpSystemName
.text:0040D1C0                 mov     [ebp+NewState.Privileges.Attributes], 2
.text:0040D1CA                 call    ds:LookupPrivilegeValueW
.text:0040D1D0                 test    eax, eax
.text:0040D1D2                 jz      loc_40D2F6
.text:0040D1D8                 push    ebx             ; ReturnLength
.text:0040D1D9                 push    ebx             ; PreviousState
.text:0040D1DA                 push    ebx             ; BufferLength
.text:0040D1DB                 lea     eax, [ebp+NewState]
.text:0040D1E1                 push    eax             ; NewState
.text:0040D1E2                 push    ebx             ; DisableAllPrivileges
.text:0040D1E3                 push    [ebp+TokenHandle] ; TokenHandle
.text:0040D1E9                 call    ds:AdjustTokenPrivileges
.text:0040D1EF                 test    eax, eax
.text:0040D1F1                 jz      loc_40D2F6
.text:0040D1F7                 call    ds:GetLastError
.text:0040D1FD                 test    eax, eax
.text:0040D1FF                 jnz     loc_40D2F6
.text:0040D205                 mov     [ebp+var_1040], ebx
.text:0040D20B                 mov     [ebp+lpMem], ebx
.text:0040D211                 mov     [ebp+var_102C], ebx
.text:0040D217                 mov     [ebp+var_1044], offset ??_7CRebootDlg@@6B@ ; const CRebootDlg::`vftable'
.text:0040D221                 call    ds:GetActiveWindow
.text:0040D227                 mov     esi, eax
.text:0040D229                 lea     eax, [ebp+var_1044]
.text:0040D22F                 push    eax
.text:0040D230                 lea     eax, [ebp+var_103C]
.text:0040D236                 push    eax
.text:0040D237                 push    offset dword_4137D0
.text:0040D23C                 call    ds:AtlModuleAddCreateWndData
.text:0040D242                 push    ebx
.text:0040D243                 push    offset sub_40A650
.text:0040D248                 push    esi
.text:0040D249                 push    71h ; 'q'
.text:0040D24B                 push    dword_4137D8
.text:0040D251                 call    ds:AtlAxDialogBoxW
.text:0040D257                 cmp     eax, 1
.text:0040D25A                 jnz     short loc_40D2D7
.text:0040D25C                 push    40000h          ; dwReason
.text:0040D261                 push    24h ; '$'       ; dwShutdownFlags
.text:0040D263                 push    ebx             ; dwGracePeriod
.text:0040D264                 push    ebx             ; lpMessage
.text:0040D265                 push    ebx             ; lpMachineName
.text:0040D266                 call    ds:InitiateShutdownW
.text:0040D26C                 test    eax, eax
.text:0040D26E                 jz      short loc_40D2D7
.text:0040D270                 mov     esi, 400h
.text:0040D275                 cmp     eax, 4A7h
.text:0040D27A                 push    esi             ; cchBufferMax
.text:0040D27B                 lea     eax, [ebp+Buffer]
.text:0040D281                 push    eax             ; lpBuffer
.text:0040D282                 jnz     short loc_40D28B
.text:0040D284                 push    7D2h
.text:0040D289                 jmp     short loc_40D290
.text:0040D28B ; ---------------------------------------------------------------------------
.text:0040D28B
.text:0040D28B loc_40D28B:                             ; CODE XREF: sub_40D13E+144↑j
.text:0040D28B                 push    7D3h            ; uID
.text:0040D290
.text:0040D290 loc_40D290:                             ; CODE XREF: sub_40D13E+14B↑j
.text:0040D290                 push    ebx             ; lpModuleName
.text:0040D291                 call    ds:GetModuleHandleW
.text:0040D297                 push    eax             ; hInstance
.text:0040D298                 call    ds:LoadStringW
.text:0040D29E                 test    eax, eax
.text:0040D2A0                 jle     short loc_40D2D7
.text:0040D2A2                 push    esi             ; cchBufferMax
.text:0040D2A3                 lea     eax, [ebp+Caption]
.text:0040D2A9                 push    eax             ; lpBuffer
.text:0040D2AA                 push    7D1h            ; uID
.text:0040D2AF                 push    ebx             ; lpModuleName
.text:0040D2B0                 call    ds:GetModuleHandleW
.text:0040D2B6                 push    eax             ; hInstance
.text:0040D2B7                 call    ds:LoadStringW
.text:0040D2BD                 test    eax, eax
.text:0040D2BF                 jle     short loc_40D2D7
.text:0040D2C1                 push    ebx             ; uType
.text:0040D2C2                 lea     eax, [ebp+Caption]
.text:0040D2C8                 push    eax             ; lpCaption
.text:0040D2C9                 lea     eax, [ebp+Buffer]
.text:0040D2CF                 push    eax             ; lpText
.text:0040D2D0                 push    ebx             ; hWnd
.text:0040D2D1                 call    ds:MessageBoxW
.text:0040D2D7
.text:0040D2D7 loc_40D2D7:                             ; CODE XREF: sub_40D13E+11C↑j
.text:0040D2D7                                         ; sub_40D13E+130↑j ...
.text:0040D2D7                 mov     [ebp+var_1044], offset ??_7CRebootDlg@@6B@ ; const CRebootDlg::`vftable'
.text:0040D2E1                 cmp     [ebp+lpMem], ebx
.text:0040D2E7                 jz      short loc_40D332
.text:0040D2E9                 push    [ebp+lpMem]     ; lpMem
.text:0040D2EF                 call    _AtlThunk_FreeData@4 ; AtlThunk_FreeData(x)
.text:0040D2F4                 jmp     short loc_40D332
.text:0040D2F6 ; ---------------------------------------------------------------------------
.text:0040D2F6
.text:0040D2F6 loc_40D2F6:                             ; CODE XREF: sub_40D13E+94↑j
.text:0040D2F6                                         ; sub_40D13E+B3↑j ...
.text:0040D2F6                 lea     ecx, [ebp+var_1024]
.text:0040D2FC                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040D302                 push    70h ; 'p'
.text:0040D304                 lea     ecx, [ebp+var_1024]
.text:0040D30A ;   try {
.text:0040D30A                 mov     [ebp+var_4], ebx
.text:0040D30D                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:0040D313                 test    eax, eax
.text:0040D315                 jz      short loc_40D322
.text:0040D317                 mov     ecx, [ebp+var_1024]
.text:0040D31D                 call    sub_40D672
.text:0040D31D ;   } // starts at 40D30A
.text:0040D322
.text:0040D322 loc_40D322:                             ; CODE XREF: sub_40D13E+1D7↑j
.text:0040D322                 or      [ebp+var_4], 0FFFFFFFFh
.text:0040D326                 lea     ecx, [ebp+var_1024]
.text:0040D32C                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040D332
.text:0040D332 loc_40D332:                             ; CODE XREF: sub_40D13E+65↑j
.text:0040D332                                         ; sub_40D13E+1A9↑j ...
.text:0040D332                 push    edi             ; hObject
.text:0040D333                 call    ds:CloseHandle
.text:0040D339
.text:0040D339 loc_40D339:                             ; CODE XREF: sub_40D13E+4D↑j
.text:0040D339                 mov     ecx, [ebp+var_C]
.text:0040D33C                 mov     large fs:0, ecx
.text:0040D343                 pop     ecx
.text:0040D344                 pop     edi
.text:0040D345                 pop     esi
.text:0040D346                 pop     ebx
.text:0040D347                 mov     ecx, [ebp+var_10]
.text:0040D34A                 xor     ecx, ebp        ; StackCookie
.text:0040D34C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040D351                 mov     esp, ebp
.text:0040D353                 pop     ebp
.text:0040D354                 retn
.text:0040D354 ; } // starts at 40D13E
.text:0040D354 sub_40D13E      endp
.text:0040D354
.text:0040D355
.text:0040D355 ; =============== S U B R O U T I N E =======================================
.text:0040D355
.text:0040D355 ; Attributes: bp-based frame
.text:0040D355
.text:0040D355 ; int __stdcall sub_40D355(LPCWSTR, LPCWSTR lpsz)
.text:0040D355 sub_40D355      proc near               ; CODE XREF: sub_40D3F3:loc_40D4D7↓p
.text:0040D355
.text:0040D355 arg_0           = dword ptr  8
.text:0040D355 lpsz            = dword ptr  0Ch
.text:0040D355
.text:0040D355                 mov     edi, edi
.text:0040D357                 push    ebp
.text:0040D358                 mov     ebp, esp
.text:0040D35A                 push    ebx
.text:0040D35B                 push    esi
.text:0040D35C                 mov     esi, [ebp+arg_0]
.text:0040D35F                 xor     ebx, ebx
.text:0040D361                 push    edi
.text:0040D362                 cmp     [esi], bx
.text:0040D365                 jz      short loc_40D38F
.text:0040D367                 mov     edi, [ebp+lpsz]
.text:0040D36A
.text:0040D36A loc_40D36A:                             ; CODE XREF: sub_40D355+38↓j
.text:0040D36A                 movzx   eax, word ptr [edi]
.text:0040D36D                 mov     ecx, edi
.text:0040D36F                 jmp     short loc_40D382
.text:0040D371 ; ---------------------------------------------------------------------------
.text:0040D371
.text:0040D371 loc_40D371:                             ; CODE XREF: sub_40D355+30↓j
.text:0040D371                 cmp     [esi], ax
.text:0040D374                 jz      short loc_40D398
.text:0040D376                 push    ecx             ; lpsz
.text:0040D377                 call    ds:CharNextW
.text:0040D37D                 mov     ecx, eax
.text:0040D37F                 movzx   eax, word ptr [ecx]
.text:0040D382
.text:0040D382 loc_40D382:                             ; CODE XREF: sub_40D355+1A↑j
.text:0040D382                 test    ax, ax
.text:0040D385                 jnz     short loc_40D371
.text:0040D387                 add     esi, 2
.text:0040D38A                 cmp     [esi], bx
.text:0040D38D                 jnz     short loc_40D36A
.text:0040D38F
.text:0040D38F loc_40D38F:                             ; CODE XREF: sub_40D355+10↑j
.text:0040D38F                 xor     eax, eax
.text:0040D391
.text:0040D391 loc_40D391:                             ; CODE XREF: sub_40D355+4A↓j
.text:0040D391                 pop     edi
.text:0040D392                 pop     esi
.text:0040D393                 pop     ebx
.text:0040D394                 pop     ebp
.text:0040D395                 retn    8
.text:0040D398 ; ---------------------------------------------------------------------------
.text:0040D398
.text:0040D398 loc_40D398:                             ; CODE XREF: sub_40D355+1F↑j
.text:0040D398                 push    esi             ; lpsz
.text:0040D399                 call    ds:CharNextW
.text:0040D39F                 jmp     short loc_40D391
.text:0040D39F sub_40D355      endp
.text:0040D39F
.text:0040D39F ; ---------------------------------------------------------------------------
.text:0040D3A1                 align 10h
.text:0040D3B0
.text:0040D3B0 ; =============== S U B R O U T I N E =======================================
.text:0040D3B0
.text:0040D3B0
.text:0040D3B0 sub_40D3B0      proc near               ; DATA XREF: .text:00401E04↑o
.text:0040D3B0                                         ; .text:00402AB8↑o
.text:0040D3B0                 mov     edi, edi
.text:0040D3B2                 push    esi
.text:0040D3B3                 mov     esi, ecx
.text:0040D3B5                 cmp     dword ptr [esi+0C4h], 0
.text:0040D3BC                 jz      short loc_40D3D9
.text:0040D3BE                 push    edi
.text:0040D3BF                 mov     edi, offset dword_4137D0
.text:0040D3C4                 push    edi
.text:0040D3C5                 call    ds:AtlModuleRevokeClassObjects
.text:0040D3CB                 push    edi
.text:0040D3CC                 call    ds:AtlModuleTerm
.text:0040D3D2                 call    ds:CoUninitialize
.text:0040D3D8                 pop     edi
.text:0040D3D9
.text:0040D3D9 loc_40D3D9:                             ; CODE XREF: sub_40D3B0+C↑j
.text:0040D3D9                 mov     eax, [esi+0C8h]
.text:0040D3DF                 test    eax, eax
.text:0040D3E1                 jz      short loc_40D3EA
.text:0040D3E3                 push    eax             ; hObject
.text:0040D3E4                 call    ds:CloseHandle
.text:0040D3EA
.text:0040D3EA loc_40D3EA:                             ; CODE XREF: sub_40D3B0+31↑j
.text:0040D3EA                 mov     ecx, esi
.text:0040D3EC                 pop     esi
.text:0040D3ED                 jmp     ds:?ExitInstance@CWinApp@@UAEHXZ ; CWinApp::ExitInstance(void)
.text:0040D3ED sub_40D3B0      endp
.text:0040D3ED
.text:0040D3F3
.text:0040D3F3 ; =============== S U B R O U T I N E =======================================
.text:0040D3F3
.text:0040D3F3 ; Attributes: bp-based frame
.text:0040D3F3
.text:0040D3F3 sub_40D3F3      proc near               ; CODE XREF: sub_40C7B0+20↑p
.text:0040D3F3
.text:0040D3F3 sz              = word ptr -10h
.text:0040D3F3 var_C           = word ptr -0Ch
.text:0040D3F3 var_A           = dword ptr -0Ah
.text:0040D3F3 var_4           = dword ptr -4
.text:0040D3F3
.text:0040D3F3                 mov     edi, edi
.text:0040D3F5                 push    ebp
.text:0040D3F6                 mov     ebp, esp
.text:0040D3F8                 sub     esp, 10h
.text:0040D3FB                 mov     eax, ___security_cookie
.text:0040D400                 xor     eax, ebp
.text:0040D402                 mov     [ebp+var_4], eax
.text:0040D405                 push    ebx
.text:0040D406                 push    esi
.text:0040D407                 push    edi
.text:0040D408                 xor     ebx, ebx
.text:0040D40A                 mov     esi, ecx
.text:0040D40C                 push    ebx             ; dwCoInit
.text:0040D40D                 push    ebx             ; pvReserved
.text:0040D40E                 call    ds:CoInitializeEx
.text:0040D414                 test    eax, eax
.text:0040D416                 js      loc_40D503
.text:0040D41C                 call    ds:__imp_?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ ; AfxGetModuleState(void)
.text:0040D422                 mov     ecx, offset dword_4137D0
.text:0040D427                 mov     eax, [eax+8]
.text:0040D42A                 push    eax
.text:0040D42B                 push    offset unk_413A74
.text:0040D430                 push    ecx
.text:0040D431                 mov     dword_413840, offset unk_41341C
.text:0040D43B                 mov     dword_4137BC, ecx
.text:0040D441                 mov     dword_4137D0, 84h ; '„'
.text:0040D44B                 mov     dword_413834, 300h
.text:0040D455                 call    ds:AtlModuleInit
.text:0040D45B                 test    eax, eax
.text:0040D45D                 js      loc_40D4FD
.text:0040D463                 mov     eax, ebx
.text:0040D465                 test    eax, eax
.text:0040D467                 js      loc_40D4FD
.text:0040D46D                 call    ds:GetCurrentThreadId
.text:0040D473                 mov     dword_413854, eax
.text:0040D478                 call    ds:GetCommandLineW
.text:0040D47E                 mov     ecx, ds:dword_403474
.text:0040D484                 mov     dword ptr [ebp+sz], ecx
.text:0040D487                 mov     cx, ds:word_403478
.text:0040D48E                 mov     [ebp+var_C], cx
.text:0040D492                 lea     ecx, [ebp+sz]
.text:0040D495                 push    ecx
.text:0040D496                 mov     [ebp+var_A], ebx
.text:0040D499                 push    eax
.text:0040D49A                 jmp     short loc_40D4D7
.text:0040D49C ; ---------------------------------------------------------------------------
.text:0040D49C
.text:0040D49C loc_40D49C:                             ; CODE XREF: sub_40D3F3+ED↓j
.text:0040D49C                 push    0FFFFFFFFh      ; cchCount2
.text:0040D49E                 push    offset String2  ; "UnregServer"
.text:0040D4A3                 push    0FFFFFFFFh      ; cchCount1
.text:0040D4A5                 push    edi             ; lpString1
.text:0040D4A6                 push    1               ; dwCmpFlags
.text:0040D4A8                 push    7Fh             ; Locale
.text:0040D4AA                 call    ds:CompareStringW
.text:0040D4B0                 cmp     eax, 2
.text:0040D4B3                 jz      loc_40D53E
.text:0040D4B9                 push    0FFFFFFFFh      ; cchCount2
.text:0040D4BB                 push    offset aRegserver ; "RegServer"
.text:0040D4C0                 push    0FFFFFFFFh      ; cchCount1
.text:0040D4C2                 push    edi             ; lpString1
.text:0040D4C3                 push    1               ; dwCmpFlags
.text:0040D4C5                 push    7Fh             ; Locale
.text:0040D4C7                 call    ds:CompareStringW
.text:0040D4CD                 cmp     eax, 2
.text:0040D4D0                 jz      short loc_40D520
.text:0040D4D2                 lea     eax, [ebp+sz]
.text:0040D4D5                 push    eax             ; lpsz
.text:0040D4D6                 push    edi             ; LPCWSTR
.text:0040D4D7
.text:0040D4D7 loc_40D4D7:                             ; CODE XREF: sub_40D3F3+A7↑j
.text:0040D4D7                 call    sub_40D355
.text:0040D4DC                 mov     edi, eax
.text:0040D4DE                 test    edi, edi
.text:0040D4E0                 jnz     short loc_40D49C
.text:0040D4E2                 push    1
.text:0040D4E4                 push    4
.text:0040D4E6                 mov     edi, offset dword_4137D0
.text:0040D4EB                 push    edi
.text:0040D4EC                 call    ds:AtlModuleRegisterClassObjects
.text:0040D4F2                 test    eax, eax
.text:0040D4F4                 jns     short loc_40D55B
.text:0040D4F6
.text:0040D4F6 loc_40D4F6:                             ; CODE XREF: sub_40D3F3+149↓j
.text:0040D4F6                                         ; sub_40D3F3+166↓j
.text:0040D4F6                 push    edi
.text:0040D4F7                 call    ds:AtlModuleTerm
.text:0040D4FD
.text:0040D4FD loc_40D4FD:                             ; CODE XREF: sub_40D3F3+6A↑j
.text:0040D4FD                                         ; sub_40D3F3+74↑j
.text:0040D4FD                 call    ds:CoUninitialize
.text:0040D503
.text:0040D503 loc_40D503:                             ; CODE XREF: sub_40D3F3+23↑j
.text:0040D503                 mov     [esi+0C4h], ebx
.text:0040D509
.text:0040D509 loc_40D509:                             ; CODE XREF: sub_40D3F3+172↓j
.text:0040D509                 mov     eax, [esi+0C4h]
.text:0040D50F                 mov     ecx, [ebp+var_4]
.text:0040D512                 pop     edi
.text:0040D513                 pop     esi
.text:0040D514                 xor     ecx, ebp        ; StackCookie
.text:0040D516                 pop     ebx
.text:0040D517                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040D51C                 mov     esp, ebp
.text:0040D51E                 pop     ebp
.text:0040D51F                 retn
.text:0040D520 ; ---------------------------------------------------------------------------
.text:0040D520
.text:0040D520 loc_40D520:                             ; CODE XREF: sub_40D3F3+DD↑j
.text:0040D520                 push    ebx
.text:0040D521                 push    ebx
.text:0040D522                 push    1
.text:0040D524                 push    73h ; 's'
.text:0040D526                 mov     edi, offset dword_4137D0
.text:0040D52B                 push    edi
.text:0040D52C                 call    ds:AtlModuleUpdateRegistryFromResourceD
.text:0040D532                 push    ebx
.text:0040D533                 push    1
.text:0040D535                 push    edi
.text:0040D536                 call    ds:AtlModuleRegisterServer
.text:0040D53C                 jmp     short loc_40D4F6
.text:0040D53E ; ---------------------------------------------------------------------------
.text:0040D53E
.text:0040D53E loc_40D53E:                             ; CODE XREF: sub_40D3F3+C0↑j
.text:0040D53E                 push    ebx
.text:0040D53F                 push    ebx
.text:0040D540                 push    ebx
.text:0040D541                 push    73h ; 's'
.text:0040D543                 mov     edi, offset dword_4137D0
.text:0040D548                 push    edi
.text:0040D549                 call    ds:AtlModuleUpdateRegistryFromResourceD
.text:0040D54F                 push    ebx
.text:0040D550                 push    1
.text:0040D552                 push    edi
.text:0040D553                 call    ds:AtlModuleUnregisterServerEx
.text:0040D559                 jmp     short loc_40D4F6
.text:0040D55B ; ---------------------------------------------------------------------------
.text:0040D55B
.text:0040D55B loc_40D55B:                             ; CODE XREF: sub_40D3F3+101↑j
.text:0040D55B                 mov     dword ptr [esi+0C4h], 1
.text:0040D565                 jmp     short loc_40D509
.text:0040D565 sub_40D3F3      endp
.text:0040D565
.text:0040D567
.text:0040D567 ; =============== S U B R O U T I N E =======================================
.text:0040D567
.text:0040D567 ; Attributes: bp-based frame
.text:0040D567
.text:0040D567 ; int __cdecl sub_40D567(DWORD dwMessageId, LPCWSTR lpLibFileName, LPWSTR lpBuffer, DWORD nSize, int, char)
.text:0040D567 sub_40D567      proc near               ; CODE XREF: sub_40D5E8+53↓p
.text:0040D567
.text:0040D567 var_4           = dword ptr -4
.text:0040D567 dwMessageId     = dword ptr  8
.text:0040D567 lpLibFileName   = dword ptr  0Ch
.text:0040D567 lpBuffer        = dword ptr  10h
.text:0040D567 nSize           = dword ptr  14h
.text:0040D567 arg_10          = dword ptr  18h
.text:0040D567 arg_14          = byte ptr  1Ch
.text:0040D567
.text:0040D567                 mov     edi, edi
.text:0040D569                 push    ebp
.text:0040D56A                 mov     ebp, esp
.text:0040D56C                 push    ecx
.text:0040D56D                 push    esi
.text:0040D56E                 xor     esi, esi
.text:0040D570                 lea     eax, [ebp+arg_14]
.text:0040D573                 push    edi
.text:0040D574                 mov     edi, esi
.text:0040D576                 mov     [ebp+var_4], eax
.text:0040D579                 cmp     [ebp+lpLibFileName], esi
.text:0040D57C                 jz      short loc_40D589
.text:0040D57E                 push    [ebp+lpLibFileName] ; lpLibFileName
.text:0040D581                 call    ds:LoadLibraryW
.text:0040D587                 mov     edi, eax
.text:0040D589
.text:0040D589 loc_40D589:                             ; CODE XREF: sub_40D567+15↑j
.text:0040D589                 mov     ecx, [ebp+arg_10]
.text:0040D58C                 lea     eax, [ebp+var_4]
.text:0040D58F                 neg     ecx
.text:0040D591                 sbb     ecx, ecx
.text:0040D593                 and     ecx, eax
.text:0040D595                 mov     eax, edi
.text:0040D597                 push    ecx             ; Arguments
.text:0040D598                 push    [ebp+nSize]     ; nSize
.text:0040D59B                 neg     eax
.text:0040D59D                 push    [ebp+lpBuffer]  ; lpBuffer
.text:0040D5A0                 sbb     eax, eax
.text:0040D5A2                 push    400h            ; dwLanguageId
.text:0040D5A7                 push    [ebp+dwMessageId] ; dwMessageId
.text:0040D5AA                 and     eax, 0FFFFF800h
.text:0040D5AF                 push    edi             ; lpSource
.text:0040D5B0                 add     eax, 1000h
.text:0040D5B5                 push    eax             ; dwFlags
.text:0040D5B6                 call    ds:FormatMessageW
.text:0040D5BC                 test    eax, eax
.text:0040D5BE                 jnz     short loc_40D5D5
.text:0040D5C0                 call    ds:GetLastError
.text:0040D5C6                 mov     esi, eax
.text:0040D5C8                 test    esi, esi
.text:0040D5CA                 jle     short loc_40D5D5
.text:0040D5CC                 movzx   esi, si
.text:0040D5CF                 or      esi, 80070000h
.text:0040D5D5
.text:0040D5D5 loc_40D5D5:                             ; CODE XREF: sub_40D567+57↑j
.text:0040D5D5                                         ; sub_40D567+63↑j
.text:0040D5D5                 test    edi, edi
.text:0040D5D7                 jz      short loc_40D5E0
.text:0040D5D9                 push    edi             ; hLibModule
.text:0040D5DA                 call    ds:FreeLibrary
.text:0040D5E0
.text:0040D5E0 loc_40D5E0:                             ; CODE XREF: sub_40D567+70↑j
.text:0040D5E0                 pop     edi
.text:0040D5E1                 mov     eax, esi
.text:0040D5E3                 pop     esi
.text:0040D5E4                 mov     esp, ebp
.text:0040D5E6                 pop     ebp
.text:0040D5E7                 retn
.text:0040D5E7 sub_40D567      endp
.text:0040D5E7
.text:0040D5E8
.text:0040D5E8 ; =============== S U B R O U T I N E =======================================
.text:0040D5E8
.text:0040D5E8 ; Attributes: bp-based frame
.text:0040D5E8
.text:0040D5E8 sub_40D5E8      proc near               ; CODE XREF: sub_404CA7+249↑p
.text:0040D5E8                                         ; sub_407D90+2E↑p
.text:0040D5E8
.text:0040D5E8 dwMessageId     = dword ptr -4
.text:0040D5E8
.text:0040D5E8                 mov     edi, edi
.text:0040D5EA                 push    ebp
.text:0040D5EB                 mov     ebp, esp
.text:0040D5ED                 push    ecx
.text:0040D5EE                 push    ebx
.text:0040D5EF                 push    edi
.text:0040D5F0                 push    800h            ; Size
.text:0040D5F5                 mov     [ebp+dwMessageId], edx
.text:0040D5F8                 xor     ebx, ebx
.text:0040D5FA                 call    ds:malloc
.text:0040D600                 mov     edi, eax
.text:0040D602                 pop     ecx
.text:0040D603                 test    edi, edi
.text:0040D605                 jz      short loc_40D66A
.text:0040D607                 push    esi             ; char
.text:0040D608                 push    208h            ; Size
.text:0040D60D                 call    ds:malloc
.text:0040D613                 mov     esi, eax
.text:0040D615                 pop     ecx
.text:0040D616                 test    esi, esi
.text:0040D618                 jz      short loc_40D655
.text:0040D61A                 push    104h            ; cchBufferMax
.text:0040D61F                 push    esi             ; lpBuffer
.text:0040D620                 push    7Dh ; '}'       ; uID
.text:0040D622                 push    ebx             ; lpModuleName
.text:0040D623                 call    ds:GetModuleHandleW
.text:0040D629                 push    eax             ; hInstance
.text:0040D62A                 call    ds:LoadStringW
.text:0040D630                 push    ebx             ; int
.text:0040D631                 push    400h            ; nSize
.text:0040D636                 push    edi             ; lpBuffer
.text:0040D637                 push    ebx             ; lpLibFileName
.text:0040D638                 push    [ebp+dwMessageId] ; dwMessageId
.text:0040D63B                 call    sub_40D567
.text:0040D640                 mov     ebx, eax
.text:0040D642                 add     esp, 14h
.text:0040D645                 test    ebx, ebx
.text:0040D647                 js      short loc_40D655
.text:0040D649                 push    30h ; '0'       ; uType
.text:0040D64B                 push    esi             ; lpCaption
.text:0040D64C                 push    edi             ; lpText
.text:0040D64D                 push    0               ; hWnd
.text:0040D64F                 call    ds:MessageBoxW
.text:0040D655
.text:0040D655 loc_40D655:                             ; CODE XREF: sub_40D5E8+30↑j
.text:0040D655                                         ; sub_40D5E8+5F↑j
.text:0040D655                 push    edi             ; Block
.text:0040D656                 call    ds:__imp_free
.text:0040D65C                 pop     ecx
.text:0040D65D                 test    esi, esi
.text:0040D65F                 jz      short loc_40D669
.text:0040D661                 push    esi             ; Block
.text:0040D662                 call    ds:__imp_free
.text:0040D668                 pop     ecx
.text:0040D669
.text:0040D669 loc_40D669:                             ; CODE XREF: sub_40D5E8+77↑j
.text:0040D669                 pop     esi
.text:0040D66A
.text:0040D66A loc_40D66A:                             ; CODE XREF: sub_40D5E8+1D↑j
.text:0040D66A                 pop     edi
.text:0040D66B                 mov     eax, ebx
.text:0040D66D                 pop     ebx
.text:0040D66E                 mov     esp, ebp
.text:0040D670                 pop     ebp
.text:0040D671                 retn
.text:0040D671 sub_40D5E8      endp
.text:0040D671
.text:0040D672
.text:0040D672 ; =============== S U B R O U T I N E =======================================
.text:0040D672
.text:0040D672 ; Attributes: bp-based frame
.text:0040D672
.text:0040D672 sub_40D672      proc near               ; CODE XREF: sub_40D13E+1DF↑p
.text:0040D672
.text:0040D672 lpCaption       = dword ptr -10h
.text:0040D672 var_4           = dword ptr -4
.text:0040D672
.text:0040D672 ; FUNCTION CHUNK AT .text:00411003 SIZE 00000024 BYTES
.text:0040D672
.text:0040D672 ; __unwind { // loc_41100C
.text:0040D672                 push    4
.text:0040D674                 mov     eax, offset loc_41100C
.text:0040D679                 call    __EH_prolog3
.text:0040D67E                 mov     esi, ecx
.text:0040D680                 lea     ecx, [ebp+lpCaption]
.text:0040D683                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040D689                 xor     edi, edi
.text:0040D68B                 lea     ecx, [ebp+lpCaption]
.text:0040D68E                 push    7Dh ; '}'
.text:0040D690 ;   try {
.text:0040D690                 mov     [ebp+var_4], edi
.text:0040D693                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:0040D699                 test    eax, eax
.text:0040D69B                 jle     short loc_40D6B7
.text:0040D69D                 mov     eax, dword_4137C8
.text:0040D6A2                 push    edi             ; uType
.text:0040D6A3                 push    [ebp+lpCaption] ; lpCaption
.text:0040D6A6                 push    esi             ; lpText
.text:0040D6A7                 test    eax, eax
.text:0040D6A9                 jz      short loc_40D6B0
.text:0040D6AB                 push    dword ptr [eax+20h]
.text:0040D6AE                 jmp     short loc_40D6B1
.text:0040D6B0 ; ---------------------------------------------------------------------------
.text:0040D6B0
.text:0040D6B0 loc_40D6B0:                             ; CODE XREF: sub_40D672+37↑j
.text:0040D6B0                 push    edi             ; hWnd
.text:0040D6B1
.text:0040D6B1 loc_40D6B1:                             ; CODE XREF: sub_40D672+3C↑j
.text:0040D6B1                 call    ds:MessageBoxW
.text:0040D6B1 ;   } // starts at 40D690
.text:0040D6B7
.text:0040D6B7 loc_40D6B7:                             ; CODE XREF: sub_40D672+29↑j
.text:0040D6B7                 or      [ebp+var_4], 0FFFFFFFFh
.text:0040D6BB                 lea     ecx, [ebp+lpCaption]
.text:0040D6BE                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040D6C4                 call    __EH_epilog3
.text:0040D6C9                 retn
.text:0040D6C9 ; } // starts at 40D672
.text:0040D6C9 sub_40D672      endp ; sp-analysis failed
.text:0040D6C9
.text:0040D6CA
.text:0040D6CA ; =============== S U B R O U T I N E =======================================
.text:0040D6CA
.text:0040D6CA ; Attributes: bp-based frame
.text:0040D6CA
.text:0040D6CA sub_40D6CA      proc near               ; CODE XREF: sub_403C90+29↑p
.text:0040D6CA                                         ; sub_403CFC+26↑p ...
.text:0040D6CA
.text:0040D6CA var_20          = byte ptr -20h
.text:0040D6CA var_1C          = byte ptr -1Ch
.text:0040D6CA hKey            = dword ptr -18h
.text:0040D6CA lpSubKey        = dword ptr -14h
.text:0040D6CA phkResult       = dword ptr -10h
.text:0040D6CA var_4           = dword ptr -4
.text:0040D6CA arg_4           = dword ptr  0Ch
.text:0040D6CA
.text:0040D6CA ; FUNCTION CHUNK AT .text:004115B4 SIZE 0000003F BYTES
.text:0040D6CA
.text:0040D6CA ; __unwind { // loc_4115D8
.text:0040D6CA                 push    14h
.text:0040D6CC                 mov     eax, offset loc_4115D8
.text:0040D6D1                 call    __EH_prolog3
.text:0040D6D6                 mov     ebx, edx
.text:0040D6D8                 mov     edi, ecx
.text:0040D6DA                 lea     ecx, [ebp+lpSubKey]
.text:0040D6DD                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040D6E3 ;   try {
.text:0040D6E3                 and     [ebp+var_4], 0
.text:0040D6E7                 lea     ecx, [ebp+lpSubKey]
.text:0040D6EA                 and     [ebp+phkResult], 0
.text:0040D6EE                 mov     esi, offset SubKey ; "SOFTWARE\\Microsoft\\Shared Tools\\MSCo"...
.text:0040D6F3                 push    esi
.text:0040D6F4                 call    ds:??4CString@@QAEABV0@PBG@Z ; CString::operator=(ushort const *)
.text:0040D6FA                 lea     eax, [ebp+phkResult]
.text:0040D6FD                 push    eax             ; phkResult
.text:0040D6FE                 push    ebx             ; samDesired
.text:0040D6FF                 push    0               ; ulOptions
.text:0040D701                 push    esi             ; lpSubKey
.text:0040D702                 mov     esi, 80000002h
.text:0040D707                 push    esi             ; hKey
.text:0040D708                 call    ds:RegOpenKeyExW
.text:0040D70E                 test    eax, eax
.text:0040D710                 jnz     short loc_40D71F
.text:0040D712                 test    edi, edi
.text:0040D714                 jz      loc_40D83E
.text:0040D71A                 push    [ebp+phkResult]
.text:0040D71D                 jmp     short loc_40D76C
.text:0040D71F ; ---------------------------------------------------------------------------
.text:0040D71F
.text:0040D71F loc_40D71F:                             ; CODE XREF: sub_40D6CA+46↑j
.text:0040D71F                 lea     eax, [ebp+hKey]
.text:0040D722                 push    eax             ; phkResult
.text:0040D723                 push    0F003Fh         ; samDesired
.text:0040D728                 push    0               ; ulOptions
.text:0040D72A                 push    offset aSoftwareMicros_0 ; "SOFTWARE\\Microsoft\\Shared Tools"
.text:0040D72F                 push    esi             ; hKey
.text:0040D730                 call    ds:RegOpenKeyExW
.text:0040D736                 test    eax, eax
.text:0040D738                 jnz     loc_40D83E
.text:0040D73E                 xor     ecx, ecx
.text:0040D740                 lea     eax, [ebp+phkResult]
.text:0040D743                 push    ecx             ; lpdwDisposition
.text:0040D744                 push    eax             ; phkResult
.text:0040D745                 push    ecx             ; lpSecurityAttributes
.text:0040D746                 push    0F003Fh         ; samDesired
.text:0040D74B                 push    ecx             ; dwOptions
.text:0040D74C                 push    ecx             ; lpClass
.text:0040D74D                 push    ecx             ; Reserved
.text:0040D74E                 push    offset aMsconfig ; "MSConfig"
.text:0040D753                 push    [ebp+hKey]      ; hKey
.text:0040D756                 call    ds:RegCreateKeyExW
.text:0040D75C                 test    eax, eax
.text:0040D75E                 jnz     short loc_40D769
.text:0040D760                 push    [ebp+phkResult] ; hKey
.text:0040D763                 call    ds:RegCloseKey
.text:0040D769
.text:0040D769 loc_40D769:                             ; CODE XREF: sub_40D6CA+94↑j
.text:0040D769                 push    [ebp+hKey]      ; hKey
.text:0040D76C
.text:0040D76C loc_40D76C:                             ; CODE XREF: sub_40D6CA+53↑j
.text:0040D76C                 call    ds:RegCloseKey
.text:0040D772                 test    edi, edi
.text:0040D774                 jz      short loc_40D7DE
.text:0040D776                 push    edi
.text:0040D777                 lea     ecx, [ebp+var_20]
.text:0040D77A                 call    ds:??0CString@@QAE@PBG@Z ; CString::CString(ushort const *)
.text:0040D780                 mov     esi, eax
.text:0040D782                 push    offset asc_402E5C ; "\\"
.text:0040D787                 lea     ecx, [ebp+var_1C]
.text:0040D787 ;   } // starts at 40D6E3
.text:0040D78A ;   try {
.text:0040D78A                 mov     byte ptr [ebp+var_4], 1
.text:0040D78E                 call    ds:??0CString@@QAE@PBG@Z ; CString::CString(ushort const *)
.text:0040D794                 push    esi
.text:0040D795                 push    eax
.text:0040D796                 lea     eax, [ebp+hKey]
.text:0040D796 ;   } // starts at 40D78A
.text:0040D799 ;   try {
.text:0040D799                 mov     byte ptr [ebp+var_4], 2
.text:0040D79D                 push    eax
.text:0040D79E                 call    ds:??H@YG?AVCString@@ABV0@0@Z ; operator+(CString const &,CString const &)
.text:0040D7A4                 push    eax
.text:0040D7A5                 lea     ecx, [ebp+lpSubKey]
.text:0040D7A5 ;   } // starts at 40D799
.text:0040D7A8 ;   try {
.text:0040D7A8                 mov     byte ptr [ebp+var_4], 3
.text:0040D7AC                 call    ds:??YCString@@QAEABV0@ABV0@@Z ; CString::operator+=(CString const &)
.text:0040D7B2                 lea     ecx, [ebp+hKey]
.text:0040D7B2 ;   } // starts at 40D7A8
.text:0040D7B5 ;   try {
.text:0040D7B5                 mov     byte ptr [ebp+var_4], 2
.text:0040D7B9                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040D7BF                 lea     ecx, [ebp+var_1C]
.text:0040D7BF ;   } // starts at 40D7B5
.text:0040D7C2 ;   try {
.text:0040D7C2                 mov     byte ptr [ebp+var_4], 1
.text:0040D7C6                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040D7CC                 lea     ecx, [ebp+var_20]
.text:0040D7CC ;   } // starts at 40D7C2
.text:0040D7CF ;   try {
.text:0040D7CF                 mov     byte ptr [ebp+var_4], 0
.text:0040D7D3                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040D7D9                 mov     esi, 80000002h
.text:0040D7DE
.text:0040D7DE loc_40D7DE:                             ; CODE XREF: sub_40D6CA+AA↑j
.text:0040D7DE                 lea     eax, [ebp+phkResult]
.text:0040D7E1                 push    eax             ; phkResult
.text:0040D7E2                 push    ebx             ; samDesired
.text:0040D7E3                 push    0               ; ulOptions
.text:0040D7E5                 push    [ebp+lpSubKey]  ; lpSubKey
.text:0040D7E8                 push    esi             ; hKey
.text:0040D7E9                 call    ds:RegOpenKeyExW
.text:0040D7EF                 test    eax, eax
.text:0040D7F1                 jz      short loc_40D83E
.text:0040D7F3                 and     [ebp+phkResult], 0
.text:0040D7F7                 test    edi, edi
.text:0040D7F9                 jz      short loc_40D83E
.text:0040D7FB                 lea     eax, [ebp+hKey]
.text:0040D7FE                 push    eax             ; phkResult
.text:0040D7FF                 push    0F003Fh         ; samDesired
.text:0040D804                 push    0               ; ulOptions
.text:0040D806                 push    offset SubKey   ; "SOFTWARE\\Microsoft\\Shared Tools\\MSCo"...
.text:0040D80B                 push    esi             ; hKey
.text:0040D80C                 call    ds:RegOpenKeyExW
.text:0040D812                 test    eax, eax
.text:0040D814                 jnz     short loc_40D83E
.text:0040D816                 xor     ecx, ecx
.text:0040D818                 lea     eax, [ebp+phkResult]
.text:0040D81B                 push    ecx             ; lpdwDisposition
.text:0040D81C                 push    eax             ; phkResult
.text:0040D81D                 push    ecx             ; lpSecurityAttributes
.text:0040D81E                 push    ebx             ; samDesired
.text:0040D81F                 push    ecx             ; dwOptions
.text:0040D820                 push    ecx             ; lpClass
.text:0040D821                 push    ecx             ; Reserved
.text:0040D822                 push    edi             ; lpSubKey
.text:0040D823                 push    [ebp+hKey]      ; hKey
.text:0040D826                 call    ds:RegCreateKeyExW
.text:0040D82C                 push    [ebp+hKey]      ; hKey
.text:0040D82F                 neg     eax
.text:0040D831                 sbb     eax, eax
.text:0040D833                 not     eax
.text:0040D835                 and     [ebp+phkResult], eax
.text:0040D838                 call    ds:RegCloseKey
.text:0040D83E
.text:0040D83E loc_40D83E:                             ; CODE XREF: sub_40D6CA+4A↑j
.text:0040D83E                                         ; sub_40D6CA+6E↑j ...
.text:0040D83E                 mov     esi, [ebp+phkResult]
.text:0040D841                 lea     ecx, [ebp+lpSubKey]
.text:0040D841 ;   } // starts at 40D7CF
.text:0040D844                 or      [ebp+var_4], 0FFFFFFFFh
.text:0040D848                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040D84E                 mov     eax, esi
.text:0040D850                 call    __EH_epilog3
.text:0040D855                 retn
.text:0040D855 ; } // starts at 40D6CA
.text:0040D855 sub_40D6CA      endp
.text:0040D855
.text:0040D856
.text:0040D856 ; =============== S U B R O U T I N E =======================================
.text:0040D856
.text:0040D856 ; Attributes: bp-based frame
.text:0040D856
.text:0040D856 sub_40D856      proc near               ; CODE XREF: CPageBootIni::OnApply(void)+13A↑p
.text:0040D856                                         ; sub_40BEDE+48↑p ...
.text:0040D856
.text:0040D856 var_23C         = dword ptr -23Ch
.text:0040D856 var_238         = byte ptr -238h
.text:0040D856 var_234         = dword ptr -234h
.text:0040D856 var_230         = dword ptr -230h
.text:0040D856 var_22C         = byte ptr -22Ch
.text:0040D856 var_228         = byte ptr -228h
.text:0040D856 var_224         = byte ptr -224h
.text:0040D856 var_220         = byte ptr -220h
.text:0040D856 var_21C         = dword ptr -21Ch
.text:0040D856 Dst             = word ptr -218h
.text:0040D856 var_4           = dword ptr -4
.text:0040D856 arg_0           = dword ptr  8
.text:0040D856 arg_4           = dword ptr  0Ch
.text:0040D856
.text:0040D856 ; FUNCTION CHUNK AT .text:004115F3 SIZE 000000AB BYTES
.text:0040D856
.text:0040D856 ; __unwind { // loc_411676
.text:0040D856                 push    230h
.text:0040D85B                 mov     eax, offset loc_411676
.text:0040D860                 call    __EH_prolog3_GS
.text:0040D865                 mov     esi, ecx
.text:0040D867                 mov     [ebp+var_234], esi
.text:0040D86D                 mov     edi, [ebp+arg_0]
.text:0040D870                 lea     ecx, [ebp+var_220]
.text:0040D876                 and     [ebp+var_230], 0
.text:0040D87D                 mov     [ebp+var_23C], esi
.text:0040D883                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040D889                 lea     ecx, [ebp+var_21C]
.text:0040D88F ;   try {
.text:0040D88F                 mov     [ebp+var_4], 1
.text:0040D896                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040D89C                 lea     ecx, [ebp+var_224]
.text:0040D89C ;   } // starts at 40D88F
.text:0040D8A2 ;   try {
.text:0040D8A2                 mov     byte ptr [ebp+var_4], 2
.text:0040D8A6                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040D8A6 ;   } // starts at 40D8A2
.text:0040D8AC ;   try {
.text:0040D8AC                 mov     byte ptr [ebp+var_4], 3
.text:0040D8B0                 mov     ebx, offset lpPathName
.text:0040D8B5                 mov     eax, lpPathName
.text:0040D8BA                 cmp     dword ptr [eax-8], 0
.text:0040D8BE                 jnz     short loc_40D918
.text:0040D8C0                 mov     ebx, 104h
.text:0040D8C5                 lea     eax, [ebp+Dst]
.text:0040D8CB                 push    ebx             ; nSize
.text:0040D8CC                 push    eax             ; lpDst
.text:0040D8CD                 push    offset aSystemrootPss ; "%systemroot%\\pss"
.text:0040D8D2                 call    ds:ExpandEnvironmentStringsW
.text:0040D8D8                 cmp     eax, ebx
.text:0040D8DA                 ja      loc_40D992
.text:0040D8E0                 test    eax, eax
.text:0040D8E2                 jz      loc_40D992
.text:0040D8E8                 lea     eax, [ebp+Dst]
.text:0040D8EE                 mov     ebx, offset lpPathName
.text:0040D8F3                 push    eax
.text:0040D8F4                 mov     ecx, ebx
.text:0040D8F6                 call    ds:??4CString@@QAEABV0@PBG@Z ; CString::operator=(ushort const *)
.text:0040D8FC                 mov     ecx, ebx
.text:0040D8FE                 call    sub_40C709
.text:0040D903                 test    eax, eax
.text:0040D905                 jnz     short loc_40D918
.text:0040D907                 push    eax             ; lpSecurityAttributes
.text:0040D908                 push    lpPathName      ; lpPathName
.text:0040D90E                 call    ds:CreateDirectoryW
.text:0040D914                 test    eax, eax
.text:0040D916                 jz      short loc_40D992
.text:0040D918
.text:0040D918 loc_40D918:                             ; CODE XREF: sub_40D856+68↑j
.text:0040D918                                         ; sub_40D856+AF↑j
.text:0040D918                 push    offset aBoot    ; "boot"
.text:0040D91D                 lea     ecx, [ebp+var_220]
.text:0040D923                 call    ds:??4CString@@QAEABV0@PBG@Z ; CString::operator=(ushort const *)
.text:0040D929                 push    5Ch ; '\'
.text:0040D92B                 lea     ecx, [ebp+var_220]
.text:0040D931                 call    ds:?ReverseFind@CString@@QBEHG@Z ; CString::ReverseFind(ushort)
.text:0040D937                 test    eax, eax
.text:0040D939                 js      short loc_40D973
.text:0040D93B                 inc     eax
.text:0040D93C                 lea     ecx, [ebp+var_220]
.text:0040D942                 push    eax
.text:0040D943                 lea     eax, [ebp+var_228]
.text:0040D949                 push    eax
.text:0040D94A                 call    ds:?Mid@CString@@QBE?AV1@H@Z ; CString::Mid(int)
.text:0040D950                 push    eax
.text:0040D951                 lea     ecx, [ebp+var_21C]
.text:0040D951 ;   } // starts at 40D8AC
.text:0040D957 ;   try {
.text:0040D957                 mov     byte ptr [ebp+var_4], 4
.text:0040D95B                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:0040D961                 lea     ecx, [ebp+var_228]
.text:0040D961 ;   } // starts at 40D957
.text:0040D967 ;   try {
.text:0040D967                 mov     byte ptr [ebp+var_4], 3
.text:0040D96B                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040D971                 jmp     short loc_40D986
.text:0040D973 ; ---------------------------------------------------------------------------
.text:0040D973
.text:0040D973 loc_40D973:                             ; CODE XREF: sub_40D856+E3↑j
.text:0040D973                 lea     eax, [ebp+var_220]
.text:0040D979                 push    eax
.text:0040D97A                 lea     ecx, [ebp+var_21C]
.text:0040D980                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:0040D986
.text:0040D986 loc_40D986:                             ; CODE XREF: sub_40D856+11B↑j
.text:0040D986                 mov     eax, [ebp+var_21C]
.text:0040D98C                 cmp     dword ptr [eax-8], 0
.text:0040D990                 jnz     short loc_40D9D0
.text:0040D992
.text:0040D992 loc_40D992:                             ; CODE XREF: sub_40D856+84↑j
.text:0040D992                                         ; sub_40D856+8C↑j ...
.text:0040D992                 lea     ecx, [ebp+var_22C]
.text:0040D998                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040D99E                 lea     eax, [ebp+var_22C]
.text:0040D99E ;   } // starts at 40D967
.text:0040D9A4 ;   try {
.text:0040D9A4                 mov     byte ptr [ebp+var_4], 8
.text:0040D9A8                 push    eax
.text:0040D9A9                 mov     ecx, esi
.text:0040D9AB                 call    ds:??0CString@@QAE@ABV0@@Z ; CString::CString(CString const &)
.text:0040D9B1                 lea     ecx, [ebp+var_22C]
.text:0040D9B7                 mov     [ebp+var_230], 1
.text:0040D9B7 ;   } // starts at 40D9A4
.text:0040D9C1 ;   try {
.text:0040D9C1                 mov     byte ptr [ebp+var_4], 3
.text:0040D9C5                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040D9CB                 jmp     loc_40DA69
.text:0040D9D0 ; ---------------------------------------------------------------------------
.text:0040D9D0
.text:0040D9D0 loc_40D9D0:                             ; CODE XREF: sub_40D856+13A↑j
.text:0040D9D0                 push    offset asc_402E5C ; "\\"
.text:0040D9D5                 push    ebx
.text:0040D9D6                 lea     eax, [ebp+var_234]
.text:0040D9DC                 push    eax
.text:0040D9DD                 call    ds:??H@YG?AVCString@@ABV0@PBG@Z ; operator+(CString const &,ushort const *)
.text:0040D9E3                 lea     ecx, [ebp+var_21C]
.text:0040D9E3 ;   } // starts at 40D9C1
.text:0040D9E9 ;   try {
.text:0040D9E9                 mov     byte ptr [ebp+var_4], 5
.text:0040D9ED                 push    ecx
.text:0040D9EE                 push    eax
.text:0040D9EF                 lea     eax, [ebp+var_238]
.text:0040D9F5                 push    eax
.text:0040D9F6                 call    ds:??H@YG?AVCString@@ABV0@0@Z ; operator+(CString const &,CString const &)
.text:0040D9FC                 push    edi
.text:0040D9FD                 push    eax
.text:0040D9FE                 lea     eax, [ebp+var_228]
.text:0040D9FE ;   } // starts at 40D9E9
.text:0040DA04 ;   try {
.text:0040DA04                 mov     byte ptr [ebp+var_4], 6
.text:0040DA08                 push    eax
.text:0040DA09                 call    ds:??H@YG?AVCString@@ABV0@0@Z ; operator+(CString const &,CString const &)
.text:0040DA0F                 push    eax
.text:0040DA10                 lea     ecx, [ebp+var_224]
.text:0040DA10 ;   } // starts at 40DA04
.text:0040DA16 ;   try {
.text:0040DA16                 mov     byte ptr [ebp+var_4], 7
.text:0040DA1A                 call    ds:??4CString@@QAEABV0@ABV0@@Z ; CString::operator=(CString const &)
.text:0040DA20                 lea     ecx, [ebp+var_228]
.text:0040DA20 ;   } // starts at 40DA16
.text:0040DA26 ;   try {
.text:0040DA26                 mov     byte ptr [ebp+var_4], 6
.text:0040DA2A                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040DA30                 lea     ecx, [ebp+var_238]
.text:0040DA30 ;   } // starts at 40DA26
.text:0040DA36 ;   try {
.text:0040DA36                 mov     byte ptr [ebp+var_4], 5
.text:0040DA3A                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040DA40                 lea     ecx, [ebp+var_234]
.text:0040DA40 ;   } // starts at 40DA36
.text:0040DA46 ;   try {
.text:0040DA46                 mov     byte ptr [ebp+var_4], 3
.text:0040DA4A                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040DA50                 lea     eax, [ebp+var_224]
.text:0040DA56                 mov     ecx, esi
.text:0040DA58                 push    eax
.text:0040DA59                 call    ds:??0CString@@QAE@ABV0@@Z ; CString::CString(CString const &)
.text:0040DA5F                 mov     [ebp+var_230], 1
.text:0040DA69
.text:0040DA69 loc_40DA69:                             ; CODE XREF: sub_40D856+175↑j
.text:0040DA69                 lea     ecx, [ebp+var_224]
.text:0040DA69 ;   } // starts at 40DA46
.text:0040DA6F ;   try {
.text:0040DA6F                 mov     byte ptr [ebp+var_4], 2
.text:0040DA73                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040DA79                 lea     ecx, [ebp+var_21C]
.text:0040DA79 ;   } // starts at 40DA6F
.text:0040DA7F ;   try {
.text:0040DA7F                 mov     byte ptr [ebp+var_4], 1
.text:0040DA83                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040DA89                 lea     ecx, [ebp+var_220]
.text:0040DA89 ;   } // starts at 40DA7F
.text:0040DA8F ;   try {
.text:0040DA8F                 mov     byte ptr [ebp+var_4], 0
.text:0040DA93                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040DA99                 mov     eax, esi
.text:0040DA9B                 call    __EH_epilog3_GS
.text:0040DAA0                 retn    4
.text:0040DAA0 ;   } // starts at 40DA8F
.text:0040DAA0 ; } // starts at 40D856
.text:0040DAA0 sub_40D856      endp
.text:0040DAA0
.text:0040DAA3
.text:0040DAA3 ; =============== S U B R O U T I N E =======================================
.text:0040DAA3
.text:0040DAA3
.text:0040DAA3 sub_40DAA3      proc near               ; CODE XREF: sub_405978+86↑p
.text:0040DAA3                                         ; sub_405978+C1↑p ...
.text:0040DAA3                 test    ecx, ecx
.text:0040DAA5                 jnz     short loc_40DAAA
.text:0040DAA7                 xor     eax, eax
.text:0040DAA9                 retn
.text:0040DAAA ; ---------------------------------------------------------------------------
.text:0040DAAA
.text:0040DAAA loc_40DAAA:                             ; CODE XREF: sub_40DAA3+2↑j
.text:0040DAAA                 push    esi
.text:0040DAAB                 push    edx
.text:0040DAAC                 xor     esi, esi
.text:0040DAAE                 call    ds:?GetDlgItem@CWnd@@QBEPAV1@H@Z ; CWnd::GetDlgItem(int)
.text:0040DAB4                 test    eax, eax
.text:0040DAB6                 jz      short loc_40DABB
.text:0040DAB8                 mov     esi, [eax+20h]
.text:0040DABB
.text:0040DABB loc_40DABB:                             ; CODE XREF: sub_40DAA3+13↑j
.text:0040DABB                 mov     eax, esi
.text:0040DABD                 pop     esi
.text:0040DABE                 retn
.text:0040DABE sub_40DAA3      endp
.text:0040DABE
.text:0040DABF
.text:0040DABF ; =============== S U B R O U T I N E =======================================
.text:0040DABF
.text:0040DABF ; Attributes: bp-based frame
.text:0040DABF
.text:0040DABF ; int __fastcall sub_40DABF(HWND hWnd, WPARAM wParam, int)
.text:0040DABF sub_40DABF      proc near               ; CODE XREF: sub_405680+36↑p
.text:0040DABF                                         ; sub_405680+7C↑p ...
.text:0040DABF
.text:0040DABF lParam          = dword ptr -34h
.text:0040DABF var_30          = byte ptr -30h
.text:0040DABF var_20          = dword ptr -20h
.text:0040DABF arg_0           = dword ptr  8
.text:0040DABF
.text:0040DABF                 mov     edi, edi
.text:0040DAC1                 push    ebp
.text:0040DAC2                 mov     ebp, esp
.text:0040DAC4                 sub     esp, 34h
.text:0040DAC7                 push    esi
.text:0040DAC8                 push    edi
.text:0040DAC9                 push    2Ch ; ','       ; Size
.text:0040DACB                 lea     eax, [ebp+var_30]
.text:0040DACE                 mov     [ebp+lParam], 4
.text:0040DAD5                 push    0               ; Val
.text:0040DAD7                 push    eax             ; void *
.text:0040DAD8                 mov     esi, edx
.text:0040DADA                 mov     edi, ecx
.text:0040DADC                 call    memset
.text:0040DAE1                 add     esp, 0Ch
.text:0040DAE4                 push    0               ; lParam
.text:0040DAE6                 push    0               ; wParam
.text:0040DAE8                 push    1200h           ; Msg
.text:0040DAED                 push    edi             ; hWnd
.text:0040DAEE                 call    ds:SendMessageW
.text:0040DAF4                 cmp     esi, eax
.text:0040DAF6                 jge     short loc_40DB28
.text:0040DAF8                 lea     eax, [ebp+lParam]
.text:0040DAFB                 push    eax             ; lParam
.text:0040DAFC                 push    esi             ; wParam
.text:0040DAFD                 push    120Bh           ; Msg
.text:0040DB02                 push    edi             ; hWnd
.text:0040DB03                 call    ds:SendMessageW
.text:0040DB09                 mov     eax, [ebp+var_20]
.text:0040DB0C                 and     eax, 0FFFFF9FFh
.text:0040DB11                 or      eax, [ebp+arg_0]
.text:0040DB14                 mov     [ebp+var_20], eax
.text:0040DB17                 lea     eax, [ebp+lParam]
.text:0040DB1A                 push    eax             ; lParam
.text:0040DB1B                 push    esi             ; wParam
.text:0040DB1C                 push    120Ch           ; Msg
.text:0040DB21                 push    edi             ; hWnd
.text:0040DB22                 call    ds:SendMessageW
.text:0040DB28
.text:0040DB28 loc_40DB28:                             ; CODE XREF: sub_40DABF+37↑j
.text:0040DB28                 pop     edi
.text:0040DB29                 pop     esi
.text:0040DB2A                 mov     esp, ebp
.text:0040DB2C                 pop     ebp
.text:0040DB2D                 retn    4
.text:0040DB2D sub_40DABF      endp
.text:0040DB2D
.text:0040DB30
.text:0040DB30 ; =============== S U B R O U T I N E =======================================
.text:0040DB30
.text:0040DB30 ; Attributes: bp-based frame
.text:0040DB30
.text:0040DB30 sub_40DB30      proc near               ; CODE XREF: sub_40C7B0+99↑p
.text:0040DB30
.text:0040DB30 lpWindowName    = dword ptr -10h
.text:0040DB30 var_4           = dword ptr -4
.text:0040DB30
.text:0040DB30 ; FUNCTION CHUNK AT .text:00411003 SIZE 00000024 BYTES
.text:0040DB30
.text:0040DB30 ; __unwind { // loc_41100C
.text:0040DB30                 push    4
.text:0040DB32                 mov     eax, offset loc_41100C
.text:0040DB37                 call    __EH_prolog3
.text:0040DB3C                 lea     ecx, [ebp+lpWindowName]
.text:0040DB3F                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040DB45 ;   try {
.text:0040DB45                 and     [ebp+var_4], 0
.text:0040DB49                 lea     ecx, [ebp+lpWindowName]
.text:0040DB4C                 push    7Eh ; '~'
.text:0040DB4E                 call    ds:?LoadStringW@CString@@QAEHI@Z ; CString::LoadStringW(uint)
.text:0040DB54                 test    eax, eax
.text:0040DB56                 jle     short loc_40DBB1
.text:0040DB58                 push    [ebp+lpWindowName] ; lpWindowName
.text:0040DB5B                 push    0               ; lpClassName
.text:0040DB5D                 call    ds:FindWindowW
.text:0040DB63                 push    eax
.text:0040DB64                 call    ds:?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z ; CWnd::FromHandle(HWND__ *)
.text:0040DB6A                 mov     esi, eax
.text:0040DB6C                 test    esi, esi
.text:0040DB6E                 jz      short loc_40DBB1
.text:0040DB70                 push    dword ptr [esi+20h] ; hWnd
.text:0040DB73                 call    ds:SetForegroundWindow
.text:0040DB79                 push    dword ptr [esi+20h] ; hWnd
.text:0040DB7C                 call    ds:IsIconic
.text:0040DB82                 test    eax, eax
.text:0040DB84                 jz      short loc_40DB90
.text:0040DB86                 push    9
.text:0040DB88                 mov     ecx, esi
.text:0040DB8A                 call    ds:?ShowWindow@CWnd@@QAEHH@Z ; CWnd::ShowWindow(int)
.text:0040DB90
.text:0040DB90 loc_40DB90:                             ; CODE XREF: sub_40DB30+54↑j
.text:0040DB90                 push    dword ptr [esi+20h] ; hWnd
.text:0040DB93                 call    ds:GetLastActivePopup
.text:0040DB99                 push    eax
.text:0040DB9A                 call    ds:?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z ; CWnd::FromHandle(HWND__ *)
.text:0040DBA0                 test    eax, eax
.text:0040DBA2                 jz      short loc_40DBB1
.text:0040DBA4                 cmp     esi, eax
.text:0040DBA6                 jz      short loc_40DBB1
.text:0040DBA8                 push    dword ptr [eax+20h] ; hWnd
.text:0040DBAB                 call    ds:SetForegroundWindow
.text:0040DBAB ;   } // starts at 40DB45
.text:0040DBB1
.text:0040DBB1 loc_40DBB1:                             ; CODE XREF: sub_40DB30+26↑j
.text:0040DBB1                                         ; sub_40DB30+3E↑j ...
.text:0040DBB1                 or      [ebp+var_4], 0FFFFFFFFh
.text:0040DBB5                 lea     ecx, [ebp+lpWindowName]
.text:0040DBB8                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040DBBE                 xor     eax, eax
.text:0040DBC0                 call    __EH_epilog3
.text:0040DBC5                 retn
.text:0040DBC5 ; } // starts at 40DB30
.text:0040DBC5 sub_40DB30      endp ; sp-analysis failed
.text:0040DBC5
.text:0040DBC5 ; ---------------------------------------------------------------------------
.text:0040DBC6                 align 10h
.text:0040DBD0
.text:0040DBD0 ; =============== S U B R O U T I N E =======================================
.text:0040DBD0
.text:0040DBD0 ; Attributes: bp-based frame
.text:0040DBD0
.text:0040DBD0 sub_40DBD0      proc near               ; DATA XREF: .text:const CRebootDlg::`vftable'↑o
.text:0040DBD0                                         ; .text:00402ABC↑o
.text:0040DBD0
.text:0040DBD0 arg_4           = dword ptr  0Ch
.text:0040DBD0 arg_8           = word ptr  10h
.text:0040DBD0 arg_10          = dword ptr  18h
.text:0040DBD0 arg_14          = dword ptr  1Ch
.text:0040DBD0
.text:0040DBD0                 mov     edi, edi
.text:0040DBD2                 push    ebp
.text:0040DBD3                 mov     ebp, esp
.text:0040DBD5                 cmp     [ebp+arg_14], 0
.text:0040DBD9                 push    ebx
.text:0040DBDA                 push    esi
.text:0040DBDB                 push    edi
.text:0040DBDC                 mov     esi, ecx
.text:0040DBDE                 jnz     short loc_40DC46
.text:0040DBE0                 cmp     [ebp+arg_4], 110h
.text:0040DBE7                 jnz     short loc_40DBFB
.text:0040DBE9                 sub     esp, 10h
.text:0040DBEC                 call    sub_407096
.text:0040DBF1                 mov     ecx, [ebp+arg_10]
.text:0040DBF4                 mov     [ecx], eax
.text:0040DBF6                 xor     eax, eax
.text:0040DBF8                 inc     eax
.text:0040DBF9                 jmp     short loc_40DC48
.text:0040DBFB ; ---------------------------------------------------------------------------
.text:0040DBFB
.text:0040DBFB loc_40DBFB:                             ; CODE XREF: sub_40DBD0+17↑j
.text:0040DBFB                 cmp     [ebp+arg_4], 111h
.text:0040DC02                 jnz     short loc_40DC46
.text:0040DC04                 xor     edi, edi
.text:0040DC06                 inc     edi
.text:0040DC07                 cmp     di, [ebp+arg_8]
.text:0040DC0B                 jnz     short loc_40DC26
.text:0040DC0D                 call    sub_407115
.text:0040DC12                 push    edi             ; nResult
.text:0040DC13                 push    dword ptr [esi+4] ; hDlg
.text:0040DC16                 call    ds:EndDialog
.text:0040DC1C                 mov     ecx, [ebp+arg_10]
.text:0040DC1F                 and     dword ptr [ecx], 0
.text:0040DC22
.text:0040DC22 loc_40DC22:                             ; CODE XREF: sub_40DBD0+74↓j
.text:0040DC22                 mov     eax, edi
.text:0040DC24                 jmp     short loc_40DC48
.text:0040DC26 ; ---------------------------------------------------------------------------
.text:0040DC26
.text:0040DC26 loc_40DC26:                             ; CODE XREF: sub_40DBD0+3B↑j
.text:0040DC26                 push    2
.text:0040DC28                 pop     ebx
.text:0040DC29                 cmp     bx, [ebp+arg_8]
.text:0040DC2D                 jnz     short loc_40DC46
.text:0040DC2F                 call    sub_407115
.text:0040DC34                 push    ebx             ; nResult
.text:0040DC35                 push    dword ptr [esi+4] ; hDlg
.text:0040DC38                 call    ds:EndDialog
.text:0040DC3E                 mov     eax, [ebp+arg_10]
.text:0040DC41                 and     dword ptr [eax], 0
.text:0040DC44                 jmp     short loc_40DC22
.text:0040DC46 ; ---------------------------------------------------------------------------
.text:0040DC46
.text:0040DC46 loc_40DC46:                             ; CODE XREF: sub_40DBD0+E↑j
.text:0040DC46                                         ; sub_40DBD0+32↑j ...
.text:0040DC46                 xor     eax, eax
.text:0040DC48
.text:0040DC48 loc_40DC48:                             ; CODE XREF: sub_40DBD0+29↑j
.text:0040DC48                                         ; sub_40DBD0+54↑j
.text:0040DC48                 pop     edi
.text:0040DC49                 pop     esi
.text:0040DC4A                 pop     ebx
.text:0040DC4B                 pop     ebp
.text:0040DC4C                 retn    18h
.text:0040DC4C sub_40DBD0      endp
.text:0040DC4C
.text:0040DC4F ; ---------------------------------------------------------------------------
.text:0040DC4F ; START OF FUNCTION CHUNK FOR sub_404FB1
.text:0040DC4F
.text:0040DC4F loc_40DC4F:                             ; CODE XREF: sub_404FB1+BCF2↓j
.text:0040DC4F ; __unwind { // loc_410CA8
.text:0040DC4F                 push    dword ptr [ecx]
.text:0040DC51                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:0040DC57                 pop     ecx
.text:0040DC58                 retn
.text:0040DC58 ; } // starts at 40DC4F
.text:0040DC58 ; END OF FUNCTION CHUNK FOR sub_404FB1
.text:0040DC59
.text:0040DC59 ; =============== S U B R O U T I N E =======================================
.text:0040DC59
.text:0040DC59 ; Attributes: bp-based frame
.text:0040DC59
.text:0040DC59 ; int __stdcall sub_40DC59(LPCCH lpMultiByteStr, int)
.text:0040DC59 sub_40DC59      proc near               ; CODE XREF: sub_40DDA3+4C↓p
.text:0040DC59
.text:0040DC59 var_C           = dword ptr -0Ch
.text:0040DC59 var_8           = dword ptr -8
.text:0040DC59 var_4           = dword ptr -4
.text:0040DC59 lpMultiByteStr  = dword ptr  8
.text:0040DC59
.text:0040DC59                 mov     edi, edi
.text:0040DC5B                 push    ebp
.text:0040DC5C                 mov     ebp, esp
.text:0040DC5E                 sub     esp, 0Ch
.text:0040DC61                 push    ebx
.text:0040DC62                 push    esi
.text:0040DC63                 mov     esi, ecx
.text:0040DC65                 xor     ebx, ebx
.text:0040DC67                 push    edi
.text:0040DC68                 mov     [ebp+var_C], esi
.text:0040DC6B                 mov     edi, offset unk_413464
.text:0040DC70                 cmp     [esi], ebx
.text:0040DC72                 jnz     short loc_40DC91
.text:0040DC74                 push    edi
.text:0040DC75                 push    658h
.text:0040DC7A                 call    ??2@YAPAXIABUnothrow_t@std@@@Z ; operator new(uint,std::nothrow_t const &)
.text:0040DC7F                 mov     [esi], eax
.text:0040DC81                 pop     ecx
.text:0040DC82                 pop     ecx
.text:0040DC83                 test    eax, eax
.text:0040DC85                 jnz     short loc_40DC91
.text:0040DC87
.text:0040DC87 loc_40DC87:                             ; CODE XREF: sub_40DC59+67↓j
.text:0040DC87                 mov     ebx, 8007000Eh
.text:0040DC8C                 jmp     loc_40DD98
.text:0040DC91 ; ---------------------------------------------------------------------------
.text:0040DC91
.text:0040DC91 loc_40DC91:                             ; CODE XREF: sub_40DC59+19↑j
.text:0040DC91                                         ; sub_40DC59+2C↑j
.text:0040DC91                 mov     esi, [ebp+lpMultiByteStr]
.text:0040DC94                 mov     ecx, esi
.text:0040DC96                 lea     edx, [ecx+1]
.text:0040DC99
.text:0040DC99 loc_40DC99:                             ; CODE XREF: sub_40DC59+45↓j
.text:0040DC99                 mov     al, [ecx]
.text:0040DC9B                 inc     ecx
.text:0040DC9C                 test    al, al
.text:0040DC9E                 jnz     short loc_40DC99
.text:0040DCA0                 sub     ecx, edx
.text:0040DCA2                 push    edi
.text:0040DCA3                 push    2
.text:0040DCA5                 pop     edx
.text:0040DCA6                 lea     eax, [ecx+1]
.text:0040DCA9                 xor     ecx, ecx
.text:0040DCAB                 mul     edx
.text:0040DCAD                 seto    cl
.text:0040DCB0                 neg     ecx
.text:0040DCB2                 or      ecx, eax
.text:0040DCB4                 push    ecx
.text:0040DCB5                 call    sub_410236
.text:0040DCBA                 mov     edi, eax
.text:0040DCBC                 pop     ecx
.text:0040DCBD                 pop     ecx
.text:0040DCBE                 test    edi, edi
.text:0040DCC0                 jz      short loc_40DC87
.text:0040DCC2                 mov     ecx, esi
.text:0040DCC4                 lea     edx, [ecx+1]
.text:0040DCC7
.text:0040DCC7 loc_40DCC7:                             ; CODE XREF: sub_40DC59+73↓j
.text:0040DCC7                 mov     al, [ecx]
.text:0040DCC9                 inc     ecx
.text:0040DCCA                 test    al, al
.text:0040DCCC                 jnz     short loc_40DCC7
.text:0040DCCE                 sub     ecx, edx
.text:0040DCD0                 lea     eax, [ecx+1]
.text:0040DCD3                 push    eax             ; cchWideChar
.text:0040DCD4                 push    edi             ; lpWideCharStr
.text:0040DCD5                 push    0FFFFFFFFh      ; cbMultiByte
.text:0040DCD7                 push    esi             ; lpMultiByteStr
.text:0040DCD8                 push    ebx             ; dwFlags
.text:0040DCD9                 push    ebx             ; CodePage
.text:0040DCDA                 call    ds:MultiByteToWideChar
.text:0040DCE0                 test    eax, eax
.text:0040DCE2                 jnz     short loc_40DCF4
.text:0040DCE4                 push    edi             ; Block
.text:0040DCE5                 call    free
.text:0040DCEA                 mov     ebx, 80004005h
.text:0040DCEF                 jmp     loc_40DD97
.text:0040DCF4 ; ---------------------------------------------------------------------------
.text:0040DCF4
.text:0040DCF4 loc_40DCF4:                             ; CODE XREF: sub_40DC59+89↑j
.text:0040DCF4                 lea     ecx, [esi+1]
.text:0040DCF7
.text:0040DCF7 loc_40DCF7:                             ; CODE XREF: sub_40DC59+A3↓j
.text:0040DCF7                 mov     al, [esi]
.text:0040DCF9                 inc     esi
.text:0040DCFA                 test    al, al
.text:0040DCFC                 jnz     short loc_40DCF7
.text:0040DCFE                 sub     esi, ecx
.text:0040DD00                 xor     ecx, ecx
.text:0040DD02                 push    offset unk_413464
.text:0040DD07                 push    2
.text:0040DD09                 pop     edx
.text:0040DD0A                 lea     eax, [esi+1]
.text:0040DD0D                 mov     [ebp+var_4], eax
.text:0040DD10                 mul     edx
.text:0040DD12                 seto    cl
.text:0040DD15                 neg     ecx
.text:0040DD17                 or      ecx, eax
.text:0040DD19                 push    ecx
.text:0040DD1A                 call    sub_410236
.text:0040DD1F                 mov     esi, eax
.text:0040DD21                 pop     ecx
.text:0040DD22                 pop     ecx
.text:0040DD23                 test    esi, esi
.text:0040DD25                 jnz     short loc_40DD2E
.text:0040DD27                 mov     ebx, 8007000Eh
.text:0040DD2C                 jmp     short loc_40DD86
.text:0040DD2E ; ---------------------------------------------------------------------------
.text:0040DD2E
.text:0040DD2E loc_40DD2E:                             ; CODE XREF: sub_40DC59+CC↑j
.text:0040DD2E                 mov     edx, [ebp+var_4]
.text:0040DD31                 mov     eax, esi
.text:0040DD33                 mov     ecx, edx
.text:0040DD35                 test    edx, edx
.text:0040DD37                 jz      short loc_40DD41
.text:0040DD39
.text:0040DD39 loc_40DD39:                             ; CODE XREF: sub_40DC59+E6↓j
.text:0040DD39                 mov     [eax], bl
.text:0040DD3B                 inc     eax
.text:0040DD3C                 sub     ecx, 1
.text:0040DD3F                 jnz     short loc_40DD39
.text:0040DD41
.text:0040DD41 loc_40DD41:                             ; CODE XREF: sub_40DC59+DE↑j
.text:0040DD41                 mov     ecx, ebx
.text:0040DD43                 mov     eax, ebx
.text:0040DD45                 cmp     [edi], bx
.text:0040DD48                 jz      short loc_40DD74
.text:0040DD4A                 dec     edx
.text:0040DD4B                 mov     [ebp+var_8], edx
.text:0040DD4E
.text:0040DD4E loc_40DD4E:                             ; CODE XREF: sub_40DC59+119↓j
.text:0040DD4E                 cmp     eax, edx
.text:0040DD50                 jnb     short loc_40DD74
.text:0040DD52                 lea     edx, [ecx+ecx]
.text:0040DD55                 mov     [ebp+var_4], edx
.text:0040DD58                 movzx   edx, word ptr [edx+edi]
.text:0040DD5C                 cmp     edx, 22h ; '"'
.text:0040DD5F                 jz      short loc_40DD66
.text:0040DD61                 mov     [esi+eax*2], dx
.text:0040DD65                 inc     eax
.text:0040DD66
.text:0040DD66 loc_40DD66:                             ; CODE XREF: sub_40DC59+106↑j
.text:0040DD66                 mov     edx, [ebp+var_4]
.text:0040DD69                 inc     ecx
.text:0040DD6A                 cmp     [edx+edi+2], bx
.text:0040DD6F                 mov     edx, [ebp+var_8]
.text:0040DD72                 jnz     short loc_40DD4E
.text:0040DD74
.text:0040DD74 loc_40DD74:                             ; CODE XREF: sub_40DC59+EF↑j
.text:0040DD74                                         ; sub_40DC59+F7↑j
.text:0040DD74                 mov     edx, [ebp+var_C]
.text:0040DD77                 xor     ecx, ecx
.text:0040DD79                 mov     [esi+eax*2], cx
.text:0040DD7D                 mov     ecx, esi        ; lptstrFilename
.text:0040DD7F                 mov     edx, [edx]      ; void *
.text:0040DD81                 call    sub_40DE06
.text:0040DD86
.text:0040DD86 loc_40DD86:                             ; CODE XREF: sub_40DC59+D3↑j
.text:0040DD86                 push    edi             ; Block
.text:0040DD87                 call    free
.text:0040DD8C                 pop     ecx
.text:0040DD8D                 test    esi, esi
.text:0040DD8F                 jz      short loc_40DD98
.text:0040DD91                 push    esi             ; Block
.text:0040DD92                 call    free
.text:0040DD97
.text:0040DD97 loc_40DD97:                             ; CODE XREF: sub_40DC59+96↑j
.text:0040DD97                 pop     ecx
.text:0040DD98
.text:0040DD98 loc_40DD98:                             ; CODE XREF: sub_40DC59+33↑j
.text:0040DD98                                         ; sub_40DC59+136↑j
.text:0040DD98                 pop     edi
.text:0040DD99                 pop     esi
.text:0040DD9A                 mov     eax, ebx
.text:0040DD9C                 pop     ebx
.text:0040DD9D                 mov     esp, ebp
.text:0040DD9F                 pop     ebp
.text:0040DDA0                 retn    8
.text:0040DDA0 sub_40DC59      endp
.text:0040DDA0
.text:0040DDA3
.text:0040DDA3 ; =============== S U B R O U T I N E =======================================
.text:0040DDA3
.text:0040DDA3 ; Attributes: bp-based frame
.text:0040DDA3
.text:0040DDA3 ; int __stdcall sub_40DDA3(LPCWCH lpWideCharStr, int)
.text:0040DDA3 sub_40DDA3      proc near               ; CODE XREF: sub_404FB1+90↑p
.text:0040DDA3
.text:0040DDA3 lpWideCharStr   = dword ptr  8
.text:0040DDA3
.text:0040DDA3                 mov     edi, edi
.text:0040DDA5                 push    ebp
.text:0040DDA6                 mov     ebp, esp
.text:0040DDA8                 push    ebx
.text:0040DDA9                 push    esi
.text:0040DDAA                 push    edi
.text:0040DDAB                 push    offset unk_413464
.text:0040DDB0                 push    400h
.text:0040DDB5                 mov     ebx, ecx
.text:0040DDB7                 mov     esi, 80004005h
.text:0040DDBC                 call    sub_410236
.text:0040DDC1                 mov     edi, eax
.text:0040DDC3                 pop     ecx
.text:0040DDC4                 pop     ecx
.text:0040DDC5                 test    edi, edi
.text:0040DDC7                 jnz     short loc_40DDD0
.text:0040DDC9                 mov     esi, 8007000Eh
.text:0040DDCE                 jmp     short loc_40DDFD
.text:0040DDD0 ; ---------------------------------------------------------------------------
.text:0040DDD0
.text:0040DDD0 loc_40DDD0:                             ; CODE XREF: sub_40DDA3+24↑j
.text:0040DDD0                 xor     eax, eax
.text:0040DDD2                 push    eax             ; lpUsedDefaultChar
.text:0040DDD3                 push    eax             ; lpDefaultChar
.text:0040DDD4                 push    400h            ; cbMultiByte
.text:0040DDD9                 push    edi             ; lpMultiByteStr
.text:0040DDDA                 push    0FFFFFFFFh      ; cchWideChar
.text:0040DDDC                 push    [ebp+lpWideCharStr] ; lpWideCharStr
.text:0040DDDF                 push    eax             ; dwFlags
.text:0040DDE0                 push    eax             ; CodePage
.text:0040DDE1                 call    ds:WideCharToMultiByte
.text:0040DDE7                 test    eax, eax
.text:0040DDE9                 jz      short loc_40DDF6
.text:0040DDEB                 push    ecx             ; int
.text:0040DDEC                 push    edi             ; lpMultiByteStr
.text:0040DDED                 mov     ecx, ebx
.text:0040DDEF                 call    sub_40DC59
.text:0040DDF4                 mov     esi, eax
.text:0040DDF6
.text:0040DDF6 loc_40DDF6:                             ; CODE XREF: sub_40DDA3+46↑j
.text:0040DDF6                 push    edi             ; Block
.text:0040DDF7                 call    free
.text:0040DDFC                 pop     ecx
.text:0040DDFD
.text:0040DDFD loc_40DDFD:                             ; CODE XREF: sub_40DDA3+2B↑j
.text:0040DDFD                 pop     edi
.text:0040DDFE                 mov     eax, esi
.text:0040DE00                 pop     esi
.text:0040DE01                 pop     ebx
.text:0040DE02                 pop     ebp
.text:0040DE03                 retn    8
.text:0040DE03 sub_40DDA3      endp
.text:0040DE03
.text:0040DE06
.text:0040DE06 ; =============== S U B R O U T I N E =======================================
.text:0040DE06
.text:0040DE06 ; Attributes: bp-based frame fuzzy-sp
.text:0040DE06
.text:0040DE06 ; int __fastcall sub_40DE06(LPCWSTR lptstrFilename, void *)
.text:0040DE06 sub_40DE06      proc near               ; CODE XREF: sub_40DC59+128↑p
.text:0040DE06
.text:0040DE06 lptstrFilename  = dword ptr -38h
.text:0040DE06 dwHandle        = dword ptr -34h
.text:0040DE06 lpBuffer        = dword ptr -30h
.text:0040DE06 pBlock          = dword ptr -2Ch
.text:0040DE06 Buffer          = word ptr -28h
.text:0040DE06 var_16          = word ptr -16h
.text:0040DE06 var_4           = dword ptr -4
.text:0040DE06
.text:0040DE06                 mov     edi, edi
.text:0040DE08                 push    ebp
.text:0040DE09                 mov     ebp, esp
.text:0040DE0B                 and     esp, 0FFFFFFF8h
.text:0040DE0E                 sub     esp, 3Ch
.text:0040DE11                 mov     eax, ___security_cookie
.text:0040DE16                 xor     eax, esp
.text:0040DE18                 mov     [esp+3Ch+var_4], eax
.text:0040DE1C                 push    ebx
.text:0040DE1D                 push    esi
.text:0040DE1E                 push    edi
.text:0040DE1F                 push    658h            ; Size
.text:0040DE24                 mov     esi, edx
.text:0040DE26                 mov     ebx, ecx
.text:0040DE28                 push    0               ; Val
.text:0040DE2A                 push    esi             ; void *
.text:0040DE2B                 mov     [esp+54h+lptstrFilename], ebx
.text:0040DE2F                 call    memset
.text:0040DE34                 add     esp, 0Ch
.text:0040DE37                 lea     eax, [esp+48h+dwHandle]
.text:0040DE3B                 push    eax             ; lpdwHandle
.text:0040DE3C                 push    ebx             ; lptstrFilename
.text:0040DE3D                 call    ds:GetFileVersionInfoSizeW
.text:0040DE43                 mov     ebx, eax
.text:0040DE45                 test    ebx, ebx
.text:0040DE47                 jz      loc_40E004
.text:0040DE4D                 push    0Ah
.text:0040DE4F                 pop     ecx
.text:0040DE50                 xor     eax, eax
.text:0040DE52                 lea     edi, [esp+48h+pBlock]
.text:0040DE56                 rep stosd
.text:0040DE58                 push    ebx             ; Size
.text:0040DE59                 call    ??2@YAPAXI@Z_0  ; operator new(uint)
.text:0040DE5E                 mov     [esp+4Ch+pBlock], eax
.text:0040DE62                 pop     ecx
.text:0040DE63                 test    eax, eax
.text:0040DE65                 jz      loc_40E004
.text:0040DE6B                 push    eax             ; lpData
.text:0040DE6C                 push    ebx             ; dwLen
.text:0040DE6D                 push    [esp+50h+dwHandle] ; dwHandle
.text:0040DE71                 push    [esp+54h+lptstrFilename] ; lptstrFilename
.text:0040DE75                 call    ds:GetFileVersionInfoW
.text:0040DE7B                 test    eax, eax
.text:0040DE7D                 jz      loc_40DFFA
.text:0040DE83                 lea     eax, [esp+48h+lptstrFilename]
.text:0040DE87                 push    eax             ; puLen
.text:0040DE88                 lea     eax, [esp+4Ch+lpBuffer]
.text:0040DE8C                 push    eax             ; lplpBuffer
.text:0040DE8D                 push    offset SubBlock ; "VarFileInfo\\Translation"
.text:0040DE92                 push    [esp+54h+pBlock] ; pBlock
.text:0040DE96                 call    ds:VerQueryValueW
.text:0040DE9C                 push    9
.text:0040DE9E                 pop     edi
.text:0040DE9F                 test    eax, eax
.text:0040DEA1                 jz      short loc_40DF18
.text:0040DEA3                 cmp     [esp+48h+lptstrFilename], 4
.text:0040DEA8                 jb      short loc_40DF18
.text:0040DEAA                 mov     ecx, [esp+48h+lpBuffer]
.text:0040DEAE                 movzx   eax, word ptr [ecx+2]
.text:0040DEB2                 push    eax
.text:0040DEB3                 movzx   eax, word ptr [ecx]
.text:0040DEB6                 push    eax             ; Args
.text:0040DEB7                 push    offset a04x04x  ; "%04x%04x"
.text:0040DEBC                 lea     eax, [esp+54h+Buffer]
.text:0040DEC0                 push    edi             ; int
.text:0040DEC1                 push    eax             ; Buffer
.text:0040DEC2                 call    ?StringCchPrintfW@@YAJPAGIPBGZZ_0 ; StringCchPrintfW(ushort *,uint,ushort const *,...)
.text:0040DEC7                 add     esp, 14h
.text:0040DECA                 test    eax, eax
.text:0040DECC                 js      loc_40DFFA
.text:0040DED2                 cmp     ebx, 70h ; 'p'
.text:0040DED5                 jbe     short loc_40DF11
.text:0040DED7                 mov     eax, [esp+48h+pBlock]
.text:0040DEDB                 cmp     byte ptr [eax+5Ah], 0
.text:0040DEDF                 jnz     short loc_40DF11
.text:0040DEE1                 add     eax, 4Ch ; 'L'
.text:0040DEE4                 push    eax             ; lpString2
.text:0040DEE5                 push    offset String1  ; "StringFileInfo"
.text:0040DEEA                 call    ds:lstrcmpiW
.text:0040DEF0                 test    eax, eax
.text:0040DEF2                 jnz     short loc_40DF11
.text:0040DEF4                 mov     eax, [esp+48h+pBlock]
.text:0040DEF8                 lea     ecx, [esp+48h+var_16]
.text:0040DEFC                 add     eax, 60h ; '`'
.text:0040DEFF                 mov     edx, edi
.text:0040DF01                 push    eax
.text:0040DF02                 call    ?StringCchCopyW@@YGJPAGIPBG@Z_0 ; StringCchCopyW(ushort *,uint,ushort const *)
.text:0040DF07                 test    eax, eax
.text:0040DF09                 js      loc_40DFFA
.text:0040DF0F                 jmp     short loc_40DF18
.text:0040DF11 ; ---------------------------------------------------------------------------
.text:0040DF11
.text:0040DF11 loc_40DF11:                             ; CODE XREF: sub_40DE06+CF↑j
.text:0040DF11                                         ; sub_40DE06+D9↑j ...
.text:0040DF11                 xor     eax, eax
.text:0040DF13                 mov     [esp+48h+var_16], ax
.text:0040DF18
.text:0040DF18 loc_40DF18:                             ; CODE XREF: sub_40DE06+9B↑j
.text:0040DF18                                         ; sub_40DE06+A2↑j ...
.text:0040DF18                 cmp     [esp+48h+Buffer], 0
.text:0040DF1E                 jnz     loc_40DFA5
.text:0040DF24                 push    offset a040904b0 ; "040904B0"
.text:0040DF29                 mov     edx, edi
.text:0040DF2B                 lea     ecx, [esp+4Ch+Buffer]
.text:0040DF2F                 call    ?StringCchCopyW@@YGJPAGIPBG@Z_0 ; StringCchCopyW(ushort *,uint,ushort const *)
.text:0040DF34                 test    eax, eax
.text:0040DF36                 js      loc_40DFFA
.text:0040DF3C                 push    20h ; ' '
.text:0040DF3E                 mov     ebx, offset aFileversion ; "FileVersion"
.text:0040DF43                 lea     ecx, [esp+4Ch+pBlock]
.text:0040DF47                 push    esi
.text:0040DF48                 mov     edx, ebx
.text:0040DF4A                 call    sub_40E016
.text:0040DF4F                 test    eax, eax
.text:0040DF51                 jnz     short loc_40DFB6
.text:0040DF53                 push    offset a040904e4 ; "040904E4"
.text:0040DF58                 mov     edx, edi
.text:0040DF5A                 lea     ecx, [esp+4Ch+Buffer]
.text:0040DF5E                 call    ?StringCchCopyW@@YGJPAGIPBG@Z_0 ; StringCchCopyW(ushort *,uint,ushort const *)
.text:0040DF63                 test    eax, eax
.text:0040DF65                 js      loc_40DFFA
.text:0040DF6B                 push    20h ; ' '
.text:0040DF6D                 push    esi
.text:0040DF6E                 mov     edx, ebx
.text:0040DF70                 lea     ecx, [esp+50h+pBlock]
.text:0040DF74                 call    sub_40E016
.text:0040DF79                 test    eax, eax
.text:0040DF7B                 jnz     short loc_40DFB6
.text:0040DF7D                 push    offset a04090000 ; "04090000"
.text:0040DF82                 mov     edx, edi
.text:0040DF84                 lea     ecx, [esp+4Ch+Buffer]
.text:0040DF88                 call    ?StringCchCopyW@@YGJPAGIPBG@Z_0 ; StringCchCopyW(ushort *,uint,ushort const *)
.text:0040DF8D                 test    eax, eax
.text:0040DF8F                 js      short loc_40DFFA
.text:0040DF91                 push    20h ; ' '
.text:0040DF93                 push    esi
.text:0040DF94                 mov     edx, ebx
.text:0040DF96                 lea     ecx, [esp+50h+pBlock]
.text:0040DF9A                 call    sub_40E016
.text:0040DF9F                 test    eax, eax
.text:0040DFA1                 jz      short loc_40DFFA
.text:0040DFA3                 jmp     short loc_40DFB6
.text:0040DFA5 ; ---------------------------------------------------------------------------
.text:0040DFA5
.text:0040DFA5 loc_40DFA5:                             ; CODE XREF: sub_40DE06+118↑j
.text:0040DFA5                 push    20h ; ' '
.text:0040DFA7                 push    esi
.text:0040DFA8                 mov     edx, offset aFileversion ; "FileVersion"
.text:0040DFAD                 lea     ecx, [esp+50h+pBlock]
.text:0040DFB1                 call    sub_40E016
.text:0040DFB6
.text:0040DFB6 loc_40DFB6:                             ; CODE XREF: sub_40DE06+14B↑j
.text:0040DFB6                                         ; sub_40DE06+175↑j ...
.text:0040DFB6                 mov     edi, 104h
.text:0040DFBB                 lea     eax, [esi+40h]
.text:0040DFBE                 push    edi
.text:0040DFBF                 push    eax
.text:0040DFC0                 mov     edx, offset aFiledescriptio ; "FileDescription"
.text:0040DFC5                 lea     ecx, [esp+50h+pBlock]
.text:0040DFC9                 call    sub_40E016
.text:0040DFCE                 push    edi
.text:0040DFCF                 lea     eax, [esi+248h]
.text:0040DFD5                 mov     edx, offset aCompanyname ; "CompanyName"
.text:0040DFDA                 push    eax
.text:0040DFDB                 lea     ecx, [esp+50h+pBlock]
.text:0040DFDF                 call    sub_40E016
.text:0040DFE4                 push    edi
.text:0040DFE5                 lea     eax, [esi+450h]
.text:0040DFEB                 mov     edx, offset aProductname ; "ProductName"
.text:0040DFF0                 push    eax
.text:0040DFF1                 lea     ecx, [esp+50h+pBlock]
.text:0040DFF5                 call    sub_40E016
.text:0040DFFA
.text:0040DFFA loc_40DFFA:                             ; CODE XREF: sub_40DE06+77↑j
.text:0040DFFA                                         ; sub_40DE06+C6↑j ...
.text:0040DFFA                 push    [esp+48h+pBlock] ; Block
.text:0040DFFE                 call    free
.text:0040E003                 pop     ecx
.text:0040E004
.text:0040E004 loc_40E004:                             ; CODE XREF: sub_40DE06+41↑j
.text:0040E004                                         ; sub_40DE06+5F↑j
.text:0040E004                 mov     ecx, [esp+48h+var_4]
.text:0040E008                 pop     edi
.text:0040E009                 pop     esi
.text:0040E00A                 pop     ebx
.text:0040E00B                 xor     ecx, esp        ; StackCookie
.text:0040E00D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040E012                 mov     esp, ebp
.text:0040E014                 pop     ebp
.text:0040E015                 retn
.text:0040E015 sub_40DE06      endp
.text:0040E015
.text:0040E016
.text:0040E016 ; =============== S U B R O U T I N E =======================================
.text:0040E016
.text:0040E016 ; Attributes: bp-based frame
.text:0040E016
.text:0040E016 sub_40E016      proc near               ; CODE XREF: sub_40DE06+144↑p
.text:0040E016                                         ; sub_40DE06+16E↑p ...
.text:0040E016
.text:0040E016 arg_0           = dword ptr  8
.text:0040E016 arg_4           = dword ptr  0Ch
.text:0040E016
.text:0040E016                 mov     edi, edi
.text:0040E018                 push    ebp
.text:0040E019                 mov     ebp, esp
.text:0040E01B                 push    esi
.text:0040E01C                 push    edi
.text:0040E01D                 push    [ebp+arg_4]
.text:0040E020                 mov     esi, ecx
.text:0040E022                 mov     edi, edx
.text:0040E024                 push    [ebp+arg_0]
.text:0040E027                 push    edi
.text:0040E028                 mov     ecx, [esi]
.text:0040E02A                 lea     edx, [esi+4]
.text:0040E02D                 call    sub_40E04D
.text:0040E032                 test    eax, eax
.text:0040E034                 jnz     short loc_40E047
.text:0040E036                 push    [ebp+arg_4]
.text:0040E039                 mov     ecx, [esi]
.text:0040E03B                 lea     edx, [esi+16h]
.text:0040E03E                 push    [ebp+arg_0]
.text:0040E041                 push    edi
.text:0040E042                 call    sub_40E04D
.text:0040E047
.text:0040E047 loc_40E047:                             ; CODE XREF: sub_40E016+1E↑j
.text:0040E047                 pop     edi
.text:0040E048                 pop     esi
.text:0040E049                 pop     ebp
.text:0040E04A                 retn    8
.text:0040E04A sub_40E016      endp
.text:0040E04A
.text:0040E04D
.text:0040E04D ; =============== S U B R O U T I N E =======================================
.text:0040E04D
.text:0040E04D ; Attributes: bp-based frame
.text:0040E04D
.text:0040E04D sub_40E04D      proc near               ; CODE XREF: sub_40E016+17↑p
.text:0040E04D                                         ; sub_40E016+2C↑p
.text:0040E04D
.text:0040E04D puLen           = dword ptr -124h
.text:0040E04D var_120         = dword ptr -120h
.text:0040E04D lpBuffer        = dword ptr -11Ch
.text:0040E04D pBlock          = dword ptr -118h
.text:0040E04D var_114         = dword ptr -114h
.text:0040E04D SubBlock        = word ptr -110h
.text:0040E04D var_4           = dword ptr -4
.text:0040E04D arg_0           = dword ptr  8
.text:0040E04D arg_4           = dword ptr  0Ch
.text:0040E04D arg_8           = dword ptr  10h
.text:0040E04D
.text:0040E04D ; FUNCTION CHUNK AT .text:0041169E SIZE 00000034 BYTES
.text:0040E04D
.text:0040E04D ; __unwind { // loc_4116AA
.text:0040E04D                 push    118h
.text:0040E052                 mov     eax, offset loc_4116AA
.text:0040E057                 call    __EH_prolog3_GS
.text:0040E05C                 mov     edi, edx
.text:0040E05E                 mov     [ebp+pBlock], ecx
.text:0040E064                 mov     eax, [ebp+arg_4]
.text:0040E067                 lea     ecx, [ebp+var_114]
.text:0040E06D                 mov     esi, [ebp+arg_0]
.text:0040E070                 xor     ebx, ebx
.text:0040E072                 mov     [ebp+var_120], eax
.text:0040E078                 call    ds:??0CString@@QAE@XZ ; CString::CString(void)
.text:0040E07E                 push    esi
.text:0040E07F                 push    edi
.text:0040E080                 push    offset String1  ; "StringFileInfo"
.text:0040E085                 lea     eax, [ebp+var_114]
.text:0040E08B ;   try {
.text:0040E08B                 mov     [ebp+var_4], ebx
.text:0040E08E                 push    offset aSSS     ; "\\%s\\%s\\%s"
.text:0040E093                 push    eax
.text:0040E094                 call    ds:?Format@CString@@QAAXPBGZZ ; CString::Format(ushort const *,...)
.text:0040E09A                 add     esp, 14h
.text:0040E09D                 lea     ecx, [ebp+SubBlock]
.text:0040E0A3                 mov     edx, 80h ; '€'
.text:0040E0A8                 push    [ebp+var_114]
.text:0040E0AE                 call    ?StringCchCopyW@@YGJPAGIPBG@Z_0 ; StringCchCopyW(ushort *,uint,ushort const *)
.text:0040E0B3                 test    eax, eax
.text:0040E0B5                 js      short loc_40E0F6
.text:0040E0B7                 lea     eax, [ebp+puLen]
.text:0040E0BD                 push    eax             ; puLen
.text:0040E0BE                 lea     eax, [ebp+lpBuffer]
.text:0040E0C4                 push    eax             ; lplpBuffer
.text:0040E0C5                 lea     eax, [ebp+SubBlock]
.text:0040E0CB                 push    eax             ; lpSubBlock
.text:0040E0CC                 push    [ebp+pBlock]    ; pBlock
.text:0040E0D2                 call    ds:VerQueryValueW
.text:0040E0D8                 test    eax, eax
.text:0040E0DA                 jz      short loc_40E0F6
.text:0040E0DC                 mov     edx, [ebp+arg_8]
.text:0040E0DF                 mov     ecx, [ebp+var_120]
.text:0040E0E5                 push    edx
.text:0040E0E6                 push    [ebp+lpBuffer]
.text:0040E0EC                 call    ?StringCchCopyNW@@YGJPAGIPBGI@Z ; StringCchCopyNW(ushort *,uint,ushort const *,uint)
.text:0040E0F1                 test    eax, eax
.text:0040E0F3                 setns   bl
.text:0040E0F3 ;   } // starts at 40E08B
.text:0040E0F6
.text:0040E0F6 loc_40E0F6:                             ; CODE XREF: sub_40E04D+68↑j
.text:0040E0F6                                         ; sub_40E04D+8D↑j
.text:0040E0F6                 or      [ebp+var_4], 0FFFFFFFFh
.text:0040E0FA                 lea     ecx, [ebp+var_114]
.text:0040E100                 call    ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0040E106                 mov     eax, ebx
.text:0040E108                 call    __EH_epilog3_GS
.text:0040E10D                 retn    0Ch
.text:0040E10D ; } // starts at 40E04D
.text:0040E10D sub_40E04D      endp
.text:0040E10D
.text:0040E110
.text:0040E110 ; =============== S U B R O U T I N E =======================================
.text:0040E110
.text:0040E110 ; Attributes: bp-based frame info_from_lumina
.text:0040E110
.text:0040E110 ; HRESULT __stdcall StringCchCopyNW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_PCNZWCH pszSrc, size_t cchToCopy)
.text:0040E110 ?StringCchCopyNW@@YGJPAGIPBGI@Z proc near
.text:0040E110                                         ; CODE XREF: sub_40E04D+9F↑p
.text:0040E110
.text:0040E110 arg_0           = dword ptr  8
.text:0040E110 arg_4           = dword ptr  0Ch
.text:0040E110 cchToCopy       = byte ptr  14h
.text:0040E110
.text:0040E110                 mov     edi, edi
.text:0040E112                 push    ebp
.text:0040E113                 mov     ebp, esp
.text:0040E115                 push    esi
.text:0040E116                 xor     esi, esi
.text:0040E118                 mov     eax, 80070057h
.text:0040E11D                 push    edi
.text:0040E11E                 test    edx, edx
.text:0040E120                 jz      short loc_40E12A
.text:0040E122                 cmp     edx, 7FFFFFFFh
.text:0040E128                 jbe     short loc_40E12C
.text:0040E12A
.text:0040E12A loc_40E12A:                             ; CODE XREF: StringCchCopyNW(ushort *,uint,ushort const *,uint)+10↑j
.text:0040E12A                 mov     esi, eax
.text:0040E12C
.text:0040E12C loc_40E12C:                             ; CODE XREF: StringCchCopyNW(ushort *,uint,ushort const *,uint)+18↑j
.text:0040E12C                 test    esi, esi
.text:0040E12E                 js      short loc_40E177
.text:0040E130                 mov     edi, [ebp+arg_4]
.text:0040E133                 cmp     edi, 7FFFFFFEh
.text:0040E139                 jbe     short loc_40E13F
.text:0040E13B                 mov     esi, eax
.text:0040E13D                 jmp     short loc_40E17B
.text:0040E13F ; ---------------------------------------------------------------------------
.text:0040E13F
.text:0040E13F loc_40E13F:                             ; CODE XREF: StringCchCopyNW(ushort *,uint,ushort const *,uint)+29↑j
.text:0040E13F                 xor     esi, esi
.text:0040E141                 test    edx, edx
.text:0040E143                 jz      short loc_40E16D
.text:0040E145                 push    ebx
.text:0040E146                 mov     ebx, [ebp+arg_0]
.text:0040E149                 sub     edi, edx
.text:0040E14B                 sub     ebx, ecx
.text:0040E14D
.text:0040E14D loc_40E14D:                             ; CODE XREF: StringCchCopyNW(ushort *,uint,ushort const *,uint)+56↓j
.text:0040E14D                 lea     eax, [edi+edx]
.text:0040E150                 test    eax, eax
.text:0040E152                 jz      short loc_40E168
.text:0040E154                 movzx   eax, word ptr [ebx+ecx]
.text:0040E158                 test    ax, ax
.text:0040E15B                 jz      short loc_40E168
.text:0040E15D                 mov     [ecx], ax
.text:0040E160                 add     ecx, 2
.text:0040E163                 sub     edx, 1
.text:0040E166                 jnz     short loc_40E14D
.text:0040E168
.text:0040E168 loc_40E168:                             ; CODE XREF: StringCchCopyNW(ushort *,uint,ushort const *,uint)+42↑j
.text:0040E168                                         ; StringCchCopyNW(ushort *,uint,ushort const *,uint)+4B↑j
.text:0040E168                 pop     ebx
.text:0040E169                 test    edx, edx
.text:0040E16B                 jnz     short loc_40E17B
.text:0040E16D
.text:0040E16D loc_40E16D:                             ; CODE XREF: StringCchCopyNW(ushort *,uint,ushort const *,uint)+33↑j
.text:0040E16D                 sub     ecx, 2
.text:0040E170                 mov     esi, 8007007Ah
.text:0040E175                 jmp     short loc_40E17B
.text:0040E177 ; ---------------------------------------------------------------------------
.text:0040E177
.text:0040E177 loc_40E177:                             ; CODE XREF: StringCchCopyNW(ushort *,uint,ushort const *,uint)+1E↑j
.text:0040E177                 test    edx, edx
.text:0040E179                 jz      short loc_40E180
.text:0040E17B
.text:0040E17B loc_40E17B:                             ; CODE XREF: StringCchCopyNW(ushort *,uint,ushort const *,uint)+2D↑j
.text:0040E17B                                         ; StringCchCopyNW(ushort *,uint,ushort const *,uint)+5B↑j ...
.text:0040E17B                 xor     eax, eax
.text:0040E17D                 mov     [ecx], ax
.text:0040E180
.text:0040E180 loc_40E180:                             ; CODE XREF: StringCchCopyNW(ushort *,uint,ushort const *,uint)+69↑j
.text:0040E180                 pop     edi
.text:0040E181                 mov     eax, esi
.text:0040E183                 pop     esi
.text:0040E184                 pop     ebp
.text:0040E185                 retn    8
.text:0040E185 ?StringCchCopyNW@@YGJPAGIPBGI@Z endp
.text:0040E185
.text:0040E188
.text:0040E188 ; =============== S U B R O U T I N E =======================================
.text:0040E188
.text:0040E188 ; Attributes: bp-based frame
.text:0040E188
.text:0040E188 sub_40E188      proc near               ; CODE XREF: sub_407CA0+B3↑p
.text:0040E188
.text:0040E188 var_4           = dword ptr -4
.text:0040E188
.text:0040E188                 mov     edi, edi
.text:0040E18A                 push    ebp
.text:0040E18B                 mov     ebp, esp
.text:0040E18D                 push    ecx
.text:0040E18E                 push    ebx
.text:0040E18F                 mov     [ebp+var_4], edx
.text:0040E192                 xor     ebx, ebx
.text:0040E194                 mov     edx, ecx
.text:0040E196                 push    esi
.text:0040E197                 mov     esi, ebx
.text:0040E199                 test    edx, edx
.text:0040E19B                 jz      short loc_40E201
.text:0040E19D                 push    edi
.text:0040E19E                 mov     edi, edx
.text:0040E1A0                 lea     ecx, [edi+2]
.text:0040E1A3
.text:0040E1A3 loc_40E1A3:                             ; CODE XREF: sub_40E188+24↓j
.text:0040E1A3                 mov     ax, [edi]
.text:0040E1A6                 add     edi, 2
.text:0040E1A9                 cmp     ax, bx
.text:0040E1AC                 jnz     short loc_40E1A3
.text:0040E1AE                 sub     edi, ecx
.text:0040E1B0                 sar     edi, 1
.text:0040E1B2                 cmp     edi, 2
.text:0040E1B5                 jnb     short loc_40E1BE
.text:0040E1B7                 mov     ebx, 80070057h
.text:0040E1BC                 jmp     short loc_40E200
.text:0040E1BE ; ---------------------------------------------------------------------------
.text:0040E1BE
.text:0040E1BE loc_40E1BE:                             ; CODE XREF: sub_40E188+2D↑j
.text:0040E1BE                 lea     eax, [edi-1]
.text:0040E1C1                 movzx   ecx, ax
.text:0040E1C4                 test    cx, cx
.text:0040E1C7                 jz      short loc_40E1E2
.text:0040E1C9                 lea     edx, [edx+ecx*2]
.text:0040E1CC
.text:0040E1CC loc_40E1CC:                             ; CODE XREF: sub_40E188+58↓j
.text:0040E1CC                 movzx   eax, word ptr [edx]
.text:0040E1CF                 add     ecx, 0FFFFh
.text:0040E1D5                 imul    esi, 25h ; '%'
.text:0040E1D8                 lea     edx, [edx-2]
.text:0040E1DB                 add     esi, eax
.text:0040E1DD                 test    cx, cx
.text:0040E1E0                 jnz     short loc_40E1CC
.text:0040E1E2
.text:0040E1E2 loc_40E1E2:                             ; CODE XREF: sub_40E188+3F↑j
.text:0040E1E2                 imul    edx, esi, 41C64E6Dh
.text:0040E1E8                 imul    esi, 10DCDh
.text:0040E1EE                 add     edx, 3039h
.text:0040E1F4                 shr     edx, 10h
.text:0040E1F7                 inc     esi
.text:0040E1F8                 and     esi, 0FFFF0000h
.text:0040E1FE                 or      esi, edx
.text:0040E200
.text:0040E200 loc_40E200:                             ; CODE XREF: sub_40E188+34↑j
.text:0040E200                 pop     edi
.text:0040E201
.text:0040E201 loc_40E201:                             ; CODE XREF: sub_40E188+13↑j
.text:0040E201                 mov     eax, [ebp+var_4]
.text:0040E204                 mov     [eax], esi
.text:0040E206                 mov     eax, ebx
.text:0040E208                 pop     esi
.text:0040E209                 pop     ebx
.text:0040E20A                 mov     esp, ebp
.text:0040E20C                 pop     ebp
.text:0040E20D                 retn
.text:0040E20D sub_40E188      endp
.text:0040E20D
.text:0040E20E
.text:0040E20E ; =============== S U B R O U T I N E =======================================
.text:0040E20E
.text:0040E20E ; Attributes: bp-based frame
.text:0040E20E
.text:0040E20E sub_40E20E      proc near               ; CODE XREF: sub_405800+28↑p
.text:0040E20E                                         ; sub_407510+21↑p ...
.text:0040E20E
.text:0040E20E var_8           = dword ptr -8
.text:0040E20E var_4           = dword ptr -4
.text:0040E20E
.text:0040E20E                 mov     edi, edi
.text:0040E210                 push    ebp
.text:0040E211                 mov     ebp, esp
.text:0040E213                 push    ecx
.text:0040E214                 push    ecx
.text:0040E215                 xor     edx, edx
.text:0040E217                 mov     [ebp+var_4], ecx
.text:0040E21A                 lea     eax, [ebp+var_8]
.text:0040E21D                 inc     edx
.text:0040E21E                 push    eax
.text:0040E21F                 push    edx
.text:0040E220                 push    7E0h
.text:0040E225                 push    0
.text:0040E227                 mov     [ebp+var_8], edx
.text:0040E22A                 call    ds:WinSqmAddToStream
.text:0040E230                 xor     eax, eax
.text:0040E232                 mov     esp, ebp
.text:0040E234                 pop     ebp
.text:0040E235                 retn
.text:0040E235 sub_40E20E      endp
.text:0040E235
.text:0040E236
.text:0040E236 ; =============== S U B R O U T I N E =======================================
.text:0040E236
.text:0040E236 ; Attributes: info_from_lumina
.text:0040E236
.text:0040E236 ; void *__stdcall __AllocStdCallThunk_cmn()
.text:0040E236 ?__AllocStdCallThunk_cmn@@YGPAXXZ proc near
.text:0040E236                                         ; CODE XREF: AtlThunk_AllocateData():loc_40E43C↓p
.text:0040E236                 mov     eax, ListHead
.text:0040E23B                 push    esi
.text:0040E23C                 push    edi
.text:0040E23D                 test    eax, eax
.text:0040E23F                 jnz     short loc_40E24F
.text:0040E241                 call    __InitializeThunkPool
.text:0040E246                 test    eax, eax
.text:0040E248                 jz      short loc_40E29B
.text:0040E24A                 mov     eax, ListHead
.text:0040E24F
.text:0040E24F loc_40E24F:                             ; CODE XREF: __AllocStdCallThunk_cmn(void)+9↑j
.text:0040E24F                 cmp     eax, 1
.text:0040E252                 jnz     short loc_40E26B
.text:0040E254                 push    0Dh             ; dwBytes
.text:0040E256                 push    8               ; dwFlags
.text:0040E258                 call    ds:GetProcessHeap
.text:0040E25E                 push    eax             ; hHeap
.text:0040E25F                 call    ds:HeapAlloc
.text:0040E265                 test    eax, eax
.text:0040E267                 jz      short loc_40E29B
.text:0040E269                 jmp     short loc_40E2E1
.text:0040E26B ; ---------------------------------------------------------------------------
.text:0040E26B
.text:0040E26B loc_40E26B:                             ; CODE XREF: __AllocStdCallThunk_cmn(void)+1C↑j
.text:0040E26B                 push    eax             ; ListHead
.text:0040E26C                 call    ds:InterlockedPopEntrySList
.text:0040E272                 mov     ecx, eax
.text:0040E274                 test    ecx, ecx
.text:0040E276                 jz      short loc_40E284
.text:0040E278                 xor     eax, eax
.text:0040E27A                 mov     edi, ecx
.text:0040E27C                 stosd
.text:0040E27D                 stosd
.text:0040E27E                 stosd
.text:0040E27F                 stosb
.text:0040E280                 mov     eax, ecx
.text:0040E282                 jmp     short loc_40E2E1
.text:0040E284 ; ---------------------------------------------------------------------------
.text:0040E284
.text:0040E284 loc_40E284:                             ; CODE XREF: __AllocStdCallThunk_cmn(void)+40↑j
.text:0040E284                 push    40h ; '@'       ; flProtect
.text:0040E286                 mov     eax, 1000h
.text:0040E28B                 push    eax             ; flAllocationType
.text:0040E28C                 push    eax             ; dwSize
.text:0040E28D                 push    0               ; lpAddress
.text:0040E28F                 call    ds:VirtualAlloc
.text:0040E295                 mov     esi, eax
.text:0040E297                 test    esi, esi
.text:0040E299                 jnz     short loc_40E29F
.text:0040E29B
.text:0040E29B loc_40E29B:                             ; CODE XREF: __AllocStdCallThunk_cmn(void)+12↑j
.text:0040E29B                                         ; __AllocStdCallThunk_cmn(void)+31↑j
.text:0040E29B                 xor     eax, eax
.text:0040E29D                 jmp     short loc_40E2E1
.text:0040E29F ; ---------------------------------------------------------------------------
.text:0040E29F
.text:0040E29F loc_40E29F:                             ; CODE XREF: __AllocStdCallThunk_cmn(void)+63↑j
.text:0040E29F                 mov     eax, [esi]
.text:0040E2A1                 push    ListHead        ; ListHead
.text:0040E2A7                 call    ds:InterlockedPopEntrySList
.text:0040E2AD                 mov     edi, eax
.text:0040E2AF                 test    edi, edi
.text:0040E2B1                 jz      short loc_40E2C5
.text:0040E2B3                 push    8000h           ; dwFreeType
.text:0040E2B8                 push    0               ; dwSize
.text:0040E2BA                 push    esi             ; lpAddress
.text:0040E2BB                 call    ds:VirtualFree
.text:0040E2C1                 mov     eax, edi
.text:0040E2C3                 jmp     short loc_40E2E1
.text:0040E2C5 ; ---------------------------------------------------------------------------
.text:0040E2C5
.text:0040E2C5 loc_40E2C5:                             ; CODE XREF: __AllocStdCallThunk_cmn(void)+7B↑j
.text:0040E2C5                 lea     edi, [esi+0FF0h]
.text:0040E2CB
.text:0040E2CB loc_40E2CB:                             ; CODE XREF: __AllocStdCallThunk_cmn(void)+A7↓j
.text:0040E2CB                 push    esi             ; ListEntry
.text:0040E2CC                 push    ListHead        ; ListHead
.text:0040E2D2                 call    ds:InterlockedPushEntrySList
.text:0040E2D8                 add     esi, 10h
.text:0040E2DB                 cmp     esi, edi
.text:0040E2DD                 jb      short loc_40E2CB
.text:0040E2DF                 mov     eax, esi
.text:0040E2E1
.text:0040E2E1 loc_40E2E1:                             ; CODE XREF: __AllocStdCallThunk_cmn(void)+33↑j
.text:0040E2E1                                         ; __AllocStdCallThunk_cmn(void)+4C↑j ...
.text:0040E2E1                 pop     edi
.text:0040E2E2                 pop     esi
.text:0040E2E3                 retn
.text:0040E2E3 ?__AllocStdCallThunk_cmn@@YGPAXXZ endp
.text:0040E2E3
.text:0040E2E4
.text:0040E2E4 ; =============== S U B R O U T I N E =======================================
.text:0040E2E4
.text:0040E2E4 ; Attributes: info_from_lumina
.text:0040E2E4
.text:0040E2E4 ; void __cdecl __FreeStdCallThunk_cmn(void *)
.text:0040E2E4 ?__FreeStdCallThunk_cmn@@YGXPAX@Z proc near
.text:0040E2E4                                         ; CODE XREF: AtlThunk_FreeData(x)+24↓p
.text:0040E2E4                 test    ecx, ecx
.text:0040E2E6                 jz      short locret_40E30A
.text:0040E2E8                 mov     eax, ListHead
.text:0040E2ED                 push    ecx             ; ListEntry
.text:0040E2EE                 cmp     eax, 1
.text:0040E2F1                 jnz     short loc_40E303
.text:0040E2F3                 push    0               ; dwFlags
.text:0040E2F5                 call    ds:GetProcessHeap
.text:0040E2FB                 push    eax             ; hHeap
.text:0040E2FC                 call    ds:HeapFree
.text:0040E302                 retn
.text:0040E303 ; ---------------------------------------------------------------------------
.text:0040E303
.text:0040E303 loc_40E303:                             ; CODE XREF: __FreeStdCallThunk_cmn(void *)+D↑j
.text:0040E303                 push    eax             ; ListHead
.text:0040E304                 call    ds:InterlockedPushEntrySList
.text:0040E30A
.text:0040E30A locret_40E30A:                          ; CODE XREF: __FreeStdCallThunk_cmn(void *)+2↑j
.text:0040E30A                 retn
.text:0040E30A ?__FreeStdCallThunk_cmn@@YGXPAX@Z endp
.text:0040E30A
.text:0040E30B
.text:0040E30B ; =============== S U B R O U T I N E =======================================
.text:0040E30B
.text:0040E30B ; Attributes: info_from_lumina
.text:0040E30B
.text:0040E30B __InitializeThunkPool proc near         ; CODE XREF: __AllocStdCallThunk_cmn(void)+B↑p
.text:0040E30B                 push    0Ch             ; ProcessorFeature
.text:0040E30D                 call    ds:IsProcessorFeaturePresent
.text:0040E313                 test    eax, eax
.text:0040E315                 jnz     short loc_40E31E
.text:0040E317                 inc     eax
.text:0040E318                 mov     ListHead, eax
.text:0040E31D                 retn
.text:0040E31E ; ---------------------------------------------------------------------------
.text:0040E31E
.text:0040E31E loc_40E31E:                             ; CODE XREF: __InitializeThunkPool+A↑j
.text:0040E31E                 push    esi
.text:0040E31F                 mov     esi, large fs:30h
.text:0040E326                 add     esi, 34h ; '4'
.text:0040E329                 mov     eax, [esi]
.text:0040E32B                 test    eax, eax
.text:0040E32D                 jnz     short loc_40E364
.text:0040E32F                 push    8               ; dwBytes
.text:0040E331                 push    8               ; dwFlags
.text:0040E333                 call    ds:GetProcessHeap
.text:0040E339                 push    eax             ; hHeap
.text:0040E33A                 call    ds:HeapAlloc
.text:0040E340                 mov     edx, eax
.text:0040E342                 xor     eax, eax
.text:0040E344                 test    edx, edx
.text:0040E346                 jz      short loc_40E36C
.text:0040E348                 mov     ecx, edx
.text:0040E34A                 lock cmpxchg [esi], ecx
.text:0040E34E                 test    eax, eax
.text:0040E350                 jz      short loc_40E362
.text:0040E352                 push    edx             ; lpMem
.text:0040E353                 push    0               ; dwFlags
.text:0040E355                 call    ds:GetProcessHeap
.text:0040E35B                 push    eax             ; hHeap
.text:0040E35C                 call    ds:HeapFree
.text:0040E362
.text:0040E362 loc_40E362:                             ; CODE XREF: __InitializeThunkPool+45↑j
.text:0040E362                 mov     eax, [esi]
.text:0040E364
.text:0040E364 loc_40E364:                             ; CODE XREF: __InitializeThunkPool+22↑j
.text:0040E364                 mov     ListHead, eax
.text:0040E369                 xor     eax, eax
.text:0040E36B                 inc     eax
.text:0040E36C
.text:0040E36C loc_40E36C:                             ; CODE XREF: __InitializeThunkPool+3B↑j
.text:0040E36C                 pop     esi
.text:0040E36D                 retn
.text:0040E36D __InitializeThunkPool endp
.text:0040E36D
.text:0040E36E
.text:0040E36E ; =============== S U B R O U T I N E =======================================
.text:0040E36E
.text:0040E36E ; Attributes: bp-based frame info_from_lumina
.text:0040E36E
.text:0040E36E ; int __fastcall GetProcAddressSingle(HMODULE hModule, LPCSTR lpProcName, int)
.text:0040E36E GetProcAddressSingle proc near          ; CODE XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long__+45↓p
.text:0040E36E                                         ; GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long__+5A↓p ...
.text:0040E36E
.text:0040E36E arg_0           = dword ptr  8
.text:0040E36E
.text:0040E36E                 mov     edi, edi
.text:0040E370                 push    ebp
.text:0040E371                 mov     ebp, esp
.text:0040E373                 push    edx             ; lpProcName
.text:0040E374                 push    ecx             ; hModule
.text:0040E375                 call    ds:GetProcAddress
.text:0040E37B                 test    eax, eax
.text:0040E37D                 jnz     short loc_40E383
.text:0040E37F                 xor     al, al
.text:0040E381                 jmp     short loc_40E391
.text:0040E383 ; ---------------------------------------------------------------------------
.text:0040E383
.text:0040E383 loc_40E383:                             ; CODE XREF: GetProcAddressSingle+F↑j
.text:0040E383                 push    eax             ; Ptr
.text:0040E384                 call    ds:EncodePointer
.text:0040E38A                 mov     ecx, [ebp+arg_0]
.text:0040E38D                 mov     [ecx], eax
.text:0040E38F                 mov     al, 1
.text:0040E391
.text:0040E391 loc_40E391:                             ; CODE XREF: GetProcAddressSingle+13↑j
.text:0040E391                 pop     ebp
.text:0040E392                 retn    4
.text:0040E392 GetProcAddressSingle endp
.text:0040E392
.text:0040E395
.text:0040E395 ; =============== S U B R O U T I N E =======================================
.text:0040E395
.text:0040E395 ; Attributes: bp-based frame info_from_lumina
.text:0040E395
.text:0040E395 ; WNDPROC __stdcall AtlThunk_DataToCode(AtlThunkData_t *)
.text:0040E395 _AtlThunk_DataToCode@4 proc near        ; CODE XREF: sub_40A650+58↑p
.text:0040E395
.text:0040E395 var_4           = dword ptr -4
.text:0040E395 arg_0           = dword ptr  8
.text:0040E395
.text:0040E395                 mov     edi, edi
.text:0040E397                 push    ebp
.text:0040E398                 mov     ebp, esp
.text:0040E39A                 push    ecx
.text:0040E39B                 mov     eax, ___security_cookie
.text:0040E3A0                 xor     eax, ebp
.text:0040E3A2                 mov     [ebp+var_4], eax
.text:0040E3A5                 push    esi
.text:0040E3A6                 mov     esi, [ebp+arg_0]
.text:0040E3A9                 push    edi
.text:0040E3AA                 test    esi, esi
.text:0040E3AC                 jz      short loc_40E3DB
.text:0040E3AE                 mov     eax, [esi+4]
.text:0040E3B1                 test    eax, eax
.text:0040E3B3                 jz      short loc_40E3DB
.text:0040E3B5                 xor     edi, edi
.text:0040E3B7                 cmp     [esi], edi
.text:0040E3B9                 jnz     short loc_40E3DD
.text:0040E3BB                 push    ebx
.text:0040E3BC                 call    GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long__
.text:0040E3C1                 mov     ebx, eax
.text:0040E3C3                 test    ebx, ebx
.text:0040E3C5                 jz      short loc_40E3D6
.text:0040E3C7                 push    dword ptr [esi+4]
.text:0040E3CA                 mov     ecx, ebx
.text:0040E3CC                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040E3D2                 call    ebx
.text:0040E3D4                 mov     edi, eax
.text:0040E3D6
.text:0040E3D6 loc_40E3D6:                             ; CODE XREF: AtlThunk_DataToCode(x)+30↑j
.text:0040E3D6                 mov     eax, edi
.text:0040E3D8                 pop     ebx
.text:0040E3D9                 jmp     short loc_40E3DD
.text:0040E3DB ; ---------------------------------------------------------------------------
.text:0040E3DB
.text:0040E3DB loc_40E3DB:                             ; CODE XREF: AtlThunk_DataToCode(x)+17↑j
.text:0040E3DB                                         ; AtlThunk_DataToCode(x)+1E↑j
.text:0040E3DB                 xor     eax, eax
.text:0040E3DD
.text:0040E3DD loc_40E3DD:                             ; CODE XREF: AtlThunk_DataToCode(x)+24↑j
.text:0040E3DD                                         ; AtlThunk_DataToCode(x)+44↑j
.text:0040E3DD                 mov     ecx, [ebp+var_4]
.text:0040E3E0                 pop     edi
.text:0040E3E1                 xor     ecx, ebp        ; StackCookie
.text:0040E3E3                 pop     esi
.text:0040E3E4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040E3E9                 mov     esp, ebp
.text:0040E3EB                 pop     ebp
.text:0040E3EC                 retn    4
.text:0040E3EC _AtlThunk_DataToCode@4 endp
.text:0040E3EC
.text:0040E3EF
.text:0040E3EF ; =============== S U B R O U T I N E =======================================
.text:0040E3EF
.text:0040E3EF ; Attributes: bp-based frame info_from_lumina
.text:0040E3EF
.text:0040E3EF ; AtlThunkData_t *__stdcall AtlThunk_AllocateData()
.text:0040E3EF _AtlThunk_AllocateData@0 proc near      ; CODE XREF: sub_40A650+3F↑p
.text:0040E3EF
.text:0040E3EF var_4           = dword ptr -4
.text:0040E3EF
.text:0040E3EF                 mov     edi, edi
.text:0040E3F1                 push    ebp
.text:0040E3F2                 mov     ebp, esp
.text:0040E3F4                 push    ecx
.text:0040E3F5                 mov     eax, ___security_cookie
.text:0040E3FA                 xor     eax, ebp
.text:0040E3FC                 mov     [ebp+var_4], eax
.text:0040E3FF                 push    esi
.text:0040E400                 push    8               ; dwBytes
.text:0040E402                 push    8               ; dwFlags
.text:0040E404                 call    ds:GetProcessHeap
.text:0040E40A                 push    eax             ; hHeap
.text:0040E40B                 call    ds:HeapAlloc
.text:0040E411                 mov     esi, eax
.text:0040E413                 test    esi, esi
.text:0040E415                 jnz     short loc_40E41B
.text:0040E417
.text:0040E417 loc_40E417:                             ; CODE XREF: AtlThunk_AllocateData()+69↓j
.text:0040E417                 xor     eax, eax
.text:0040E419                 jmp     short loc_40E45C
.text:0040E41B ; ---------------------------------------------------------------------------
.text:0040E41B
.text:0040E41B loc_40E41B:                             ; CODE XREF: AtlThunk_AllocateData()+26↑j
.text:0040E41B                 push    edi
.text:0040E41C                 call    GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___0
.text:0040E421                 xor     ecx, ecx
.text:0040E423                 mov     edi, eax
.text:0040E425                 test    edi, edi
.text:0040E427                 setz    cl
.text:0040E42A                 mov     [esi], ecx
.text:0040E42C                 test    edi, edi
.text:0040E42E                 jz      short loc_40E43C
.text:0040E430                 mov     ecx, edi
.text:0040E432                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040E438                 call    edi
.text:0040E43A                 jmp     short loc_40E441
.text:0040E43C ; ---------------------------------------------------------------------------
.text:0040E43C
.text:0040E43C loc_40E43C:                             ; CODE XREF: AtlThunk_AllocateData()+3F↑j
.text:0040E43C                 call    ?__AllocStdCallThunk_cmn@@YGPAXXZ ; __AllocStdCallThunk_cmn(void)
.text:0040E441
.text:0040E441 loc_40E441:                             ; CODE XREF: AtlThunk_AllocateData()+4B↑j
.text:0040E441                 mov     [esi+4], eax
.text:0040E444                 pop     edi
.text:0040E445                 test    eax, eax
.text:0040E447                 jnz     short loc_40E45A
.text:0040E449                 push    esi             ; lpMem
.text:0040E44A                 push    eax             ; dwFlags
.text:0040E44B                 call    ds:GetProcessHeap
.text:0040E451                 push    eax             ; hHeap
.text:0040E452                 call    ds:HeapFree
.text:0040E458                 jmp     short loc_40E417
.text:0040E45A ; ---------------------------------------------------------------------------
.text:0040E45A
.text:0040E45A loc_40E45A:                             ; CODE XREF: AtlThunk_AllocateData()+58↑j
.text:0040E45A                 mov     eax, esi
.text:0040E45C
.text:0040E45C loc_40E45C:                             ; CODE XREF: AtlThunk_AllocateData()+2A↑j
.text:0040E45C                 mov     ecx, [ebp+var_4]
.text:0040E45F                 xor     ecx, ebp        ; StackCookie
.text:0040E461                 pop     esi
.text:0040E462                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040E467                 mov     esp, ebp
.text:0040E469                 pop     ebp
.text:0040E46A                 retn
.text:0040E46A _AtlThunk_AllocateData@0 endp
.text:0040E46A
.text:0040E46B
.text:0040E46B ; =============== S U B R O U T I N E =======================================
.text:0040E46B
.text:0040E46B ; Attributes: bp-based frame info_from_lumina
.text:0040E46B
.text:0040E46B ; void __stdcall AtlThunk_InitData(AtlThunkData_t *Thunk, void *Proc, size_t FirstParameter)
.text:0040E46B _AtlThunk_InitData@12 proc near         ; CODE XREF: sub_40A650+50↑p
.text:0040E46B
.text:0040E46B var_4           = dword ptr -4
.text:0040E46B Thunk           = dword ptr  8
.text:0040E46B Proc            = dword ptr  0Ch
.text:0040E46B FirstParameter  = dword ptr  10h
.text:0040E46B
.text:0040E46B                 mov     edi, edi
.text:0040E46D                 push    ebp
.text:0040E46E                 mov     ebp, esp
.text:0040E470                 push    ecx
.text:0040E471                 mov     eax, ___security_cookie
.text:0040E476                 xor     eax, ebp
.text:0040E478                 mov     [ebp+var_4], eax
.text:0040E47B                 push    esi
.text:0040E47C                 mov     esi, [ebp+Thunk]
.text:0040E47F                 test    esi, esi
.text:0040E481                 jz      short loc_40E4DC
.text:0040E483                 mov     ecx, [esi+4]
.text:0040E486                 test    ecx, ecx
.text:0040E488                 jz      short loc_40E4DC
.text:0040E48A                 cmp     dword ptr [esi], 0
.text:0040E48D                 jz      short loc_40E4BC
.text:0040E48F                 mov     eax, [ebp+FirstParameter]
.text:0040E492                 mov     [ecx+4], eax
.text:0040E495                 mov     eax, [ebp+Proc]
.text:0040E498                 sub     eax, ecx
.text:0040E49A                 mov     dword ptr [ecx], 42444C7h
.text:0040E4A0                 push    0Dh             ; dwSize
.text:0040E4A2                 sub     eax, 0Dh
.text:0040E4A5                 mov     byte ptr [ecx+8], 0E9h ; 'é'
.text:0040E4A9                 push    ecx             ; lpBaseAddress
.text:0040E4AA                 mov     [ecx+9], eax
.text:0040E4AD                 call    ds:GetCurrentProcess
.text:0040E4B3                 push    eax             ; hProcess
.text:0040E4B4                 call    ds:FlushInstructionCache
.text:0040E4BA                 jmp     short loc_40E4DC
.text:0040E4BC ; ---------------------------------------------------------------------------
.text:0040E4BC
.text:0040E4BC loc_40E4BC:                             ; CODE XREF: AtlThunk_InitData(x,x,x)+22↑j
.text:0040E4BC                 push    edi
.text:0040E4BD                 call    GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___1
.text:0040E4C2                 mov     edi, eax
.text:0040E4C4                 test    edi, edi
.text:0040E4C6                 jz      short loc_40E4DB
.text:0040E4C8                 push    [ebp+FirstParameter]
.text:0040E4CB                 mov     ecx, edi
.text:0040E4CD                 push    [ebp+Proc]
.text:0040E4D0                 push    dword ptr [esi+4]
.text:0040E4D3                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040E4D9                 call    edi
.text:0040E4DB
.text:0040E4DB loc_40E4DB:                             ; CODE XREF: AtlThunk_InitData(x,x,x)+5B↑j
.text:0040E4DB                 pop     edi
.text:0040E4DC
.text:0040E4DC loc_40E4DC:                             ; CODE XREF: AtlThunk_InitData(x,x,x)+16↑j
.text:0040E4DC                                         ; AtlThunk_InitData(x,x,x)+1D↑j ...
.text:0040E4DC                 mov     ecx, [ebp+var_4]
.text:0040E4DF                 xor     ecx, ebp        ; StackCookie
.text:0040E4E1                 pop     esi
.text:0040E4E2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040E4E7                 mov     esp, ebp
.text:0040E4E9                 pop     ebp
.text:0040E4EA                 retn    0Ch
.text:0040E4EA _AtlThunk_InitData@12 endp
.text:0040E4EA
.text:0040E4ED
.text:0040E4ED ; =============== S U B R O U T I N E =======================================
.text:0040E4ED
.text:0040E4ED ; Attributes: bp-based frame info_from_lumina
.text:0040E4ED
.text:0040E4ED ; int __stdcall AtlThunk_FreeData(LPVOID lpMem)
.text:0040E4ED _AtlThunk_FreeData@4 proc near          ; CODE XREF: sub_40B6C0+98↑p
.text:0040E4ED                                         ; sub_40C2C6+18↑p ...
.text:0040E4ED
.text:0040E4ED var_4           = dword ptr -4
.text:0040E4ED lpMem           = dword ptr  8
.text:0040E4ED
.text:0040E4ED                 mov     edi, edi
.text:0040E4EF                 push    ebp
.text:0040E4F0                 mov     ebp, esp
.text:0040E4F2                 push    ecx
.text:0040E4F3                 mov     eax, ___security_cookie
.text:0040E4F8                 xor     eax, ebp
.text:0040E4FA                 mov     [ebp+var_4], eax
.text:0040E4FD                 push    esi
.text:0040E4FE                 mov     esi, [ebp+lpMem]
.text:0040E501                 test    esi, esi
.text:0040E503                 jz      short loc_40E542
.text:0040E505                 mov     ecx, [esi+4]    ; ListEntry
.text:0040E508                 test    ecx, ecx
.text:0040E50A                 jz      short loc_40E532
.text:0040E50C                 cmp     dword ptr [esi], 0
.text:0040E50F                 jz      short loc_40E518
.text:0040E511                 call    ?__FreeStdCallThunk_cmn@@YGXPAX@Z ; __FreeStdCallThunk_cmn(void *)
.text:0040E516                 jmp     short loc_40E532
.text:0040E518 ; ---------------------------------------------------------------------------
.text:0040E518
.text:0040E518 loc_40E518:                             ; CODE XREF: AtlThunk_FreeData(x)+22↑j
.text:0040E518                 push    edi
.text:0040E519                 call    GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___2
.text:0040E51E                 mov     edi, eax
.text:0040E520                 test    edi, edi
.text:0040E522                 jz      short loc_40E531
.text:0040E524                 push    dword ptr [esi+4]
.text:0040E527                 mov     ecx, edi
.text:0040E529                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040E52F                 call    edi
.text:0040E531
.text:0040E531 loc_40E531:                             ; CODE XREF: AtlThunk_FreeData(x)+35↑j
.text:0040E531                 pop     edi
.text:0040E532
.text:0040E532 loc_40E532:                             ; CODE XREF: AtlThunk_FreeData(x)+1D↑j
.text:0040E532                                         ; AtlThunk_FreeData(x)+29↑j
.text:0040E532                 push    esi             ; lpMem
.text:0040E533                 push    0               ; dwFlags
.text:0040E535                 call    ds:GetProcessHeap
.text:0040E53B                 push    eax             ; hHeap
.text:0040E53C                 call    ds:HeapFree
.text:0040E542
.text:0040E542 loc_40E542:                             ; CODE XREF: AtlThunk_FreeData(x)+16↑j
.text:0040E542                 mov     ecx, [ebp+var_4]
.text:0040E545                 xor     ecx, ebp        ; StackCookie
.text:0040E547                 pop     esi
.text:0040E548                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040E54D                 mov     esp, ebp
.text:0040E54F                 pop     ebp
.text:0040E550                 retn    4
.text:0040E550 _AtlThunk_FreeData@4 endp
.text:0040E550
.text:0040E553
.text:0040E553 ; =============== S U B R O U T I N E =======================================
.text:0040E553
.text:0040E553 ; Attributes: bp-based frame info_from_lumina
.text:0040E553
.text:0040E553 GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long__ proc near
.text:0040E553                                         ; CODE XREF: AtlThunk_DataToCode(x)+27↑p
.text:0040E553
.text:0040E553 var_4           = byte ptr -4
.text:0040E553
.text:0040E553                 mov     edi, edi
.text:0040E555                 push    ebp
.text:0040E556                 mov     ebp, esp
.text:0040E558                 push    ecx
.text:0040E559                 cmp     byte_413A58, 0
.text:0040E560                 jz      short loc_40E573
.text:0040E562                 push    Ptr             ; Ptr
.text:0040E568                 call    ds:DecodePointer
.text:0040E56E                 jmp     loc_40E600
.text:0040E573 ; ---------------------------------------------------------------------------
.text:0040E573
.text:0040E573 loc_40E573:                             ; CODE XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long__+D↑j
.text:0040E573                 push    esi
.text:0040E574                 push    800h            ; dwFlags
.text:0040E579                 push    0               ; hFile
.text:0040E57B                 push    offset aAtlthunkDll ; "atlthunk.dll"
.text:0040E580                 call    ds:LoadLibraryExA
.text:0040E586                 mov     esi, eax
.text:0040E588                 test    esi, esi
.text:0040E58A                 jz      short loc_40E5FD
.text:0040E58C                 push    offset dword_413A5C ; int
.text:0040E591                 mov     edx, offset aAtlthunkAlloca ; "AtlThunk_AllocateData"
.text:0040E596                 mov     ecx, esi        ; hModule
.text:0040E598                 call    GetProcAddressSingle
.text:0040E59D                 test    al, al
.text:0040E59F                 jz      short loc_40E5FD
.text:0040E5A1                 push    offset dword_413A54 ; int
.text:0040E5A6                 mov     edx, offset aAtlthunkInitda ; "AtlThunk_InitData"
.text:0040E5AB                 mov     ecx, esi        ; hModule
.text:0040E5AD                 call    GetProcAddressSingle
.text:0040E5B2                 test    al, al
.text:0040E5B4                 jz      short loc_40E5FD
.text:0040E5B6                 push    offset Ptr      ; int
.text:0040E5BB                 mov     edx, offset aAtlthunkDatato ; "AtlThunk_DataToCode"
.text:0040E5C0                 mov     ecx, esi        ; hModule
.text:0040E5C2                 call    GetProcAddressSingle
.text:0040E5C7                 test    al, al
.text:0040E5C9                 jz      short loc_40E5FD
.text:0040E5CB                 push    offset dword_413A4C ; int
.text:0040E5D0                 mov     edx, offset aAtlthunkFreeda ; "AtlThunk_FreeData"
.text:0040E5D5                 mov     ecx, esi        ; hModule
.text:0040E5D7                 call    GetProcAddressSingle
.text:0040E5DC                 test    al, al
.text:0040E5DE                 jz      short loc_40E5FD
.text:0040E5E0                 xor     ecx, ecx
.text:0040E5E2                 lea     eax, [ebp+var_4]
.text:0040E5E5                 lock or [eax], ecx
.text:0040E5E8                 push    Ptr             ; Ptr
.text:0040E5EE                 mov     byte_413A58, 1
.text:0040E5F5                 call    ds:DecodePointer
.text:0040E5FB                 jmp     short loc_40E5FF
.text:0040E5FD ; ---------------------------------------------------------------------------
.text:0040E5FD
.text:0040E5FD loc_40E5FD:                             ; CODE XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long__+37↑j
.text:0040E5FD                                         ; GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long__+4C↑j ...
.text:0040E5FD                 xor     eax, eax
.text:0040E5FF
.text:0040E5FF loc_40E5FF:                             ; CODE XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long__+A8↑j
.text:0040E5FF                 pop     esi
.text:0040E600
.text:0040E600 loc_40E600:                             ; CODE XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long__+1B↑j
.text:0040E600                 mov     esp, ebp
.text:0040E602                 pop     ebp
.text:0040E603                 retn
.text:0040E603 GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long__ endp
.text:0040E603
.text:0040E604
.text:0040E604 ; =============== S U B R O U T I N E =======================================
.text:0040E604
.text:0040E604 ; Attributes: bp-based frame info_from_lumina
.text:0040E604
.text:0040E604 GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___0 proc near
.text:0040E604                                         ; CODE XREF: AtlThunk_AllocateData()+2D↑p
.text:0040E604
.text:0040E604 var_4           = byte ptr -4
.text:0040E604
.text:0040E604                 mov     edi, edi
.text:0040E606                 push    ebp
.text:0040E607                 mov     ebp, esp
.text:0040E609                 push    ecx
.text:0040E60A                 cmp     byte_413A58, 0
.text:0040E611                 jz      short loc_40E624
.text:0040E613                 push    dword_413A5C    ; Ptr
.text:0040E619                 call    ds:DecodePointer
.text:0040E61F                 jmp     loc_40E6B1
.text:0040E624 ; ---------------------------------------------------------------------------
.text:0040E624
.text:0040E624 loc_40E624:                             ; CODE XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___0+D↑j
.text:0040E624                 push    esi
.text:0040E625                 push    800h            ; dwFlags
.text:0040E62A                 push    0               ; hFile
.text:0040E62C                 push    offset aAtlthunkDll ; "atlthunk.dll"
.text:0040E631                 call    ds:LoadLibraryExA
.text:0040E637                 mov     esi, eax
.text:0040E639                 test    esi, esi
.text:0040E63B                 jz      short loc_40E6AE
.text:0040E63D                 push    offset dword_413A5C ; int
.text:0040E642                 mov     edx, offset aAtlthunkAlloca ; "AtlThunk_AllocateData"
.text:0040E647                 mov     ecx, esi        ; hModule
.text:0040E649                 call    GetProcAddressSingle
.text:0040E64E                 test    al, al
.text:0040E650                 jz      short loc_40E6AE
.text:0040E652                 push    offset dword_413A54 ; int
.text:0040E657                 mov     edx, offset aAtlthunkInitda ; "AtlThunk_InitData"
.text:0040E65C                 mov     ecx, esi        ; hModule
.text:0040E65E                 call    GetProcAddressSingle
.text:0040E663                 test    al, al
.text:0040E665                 jz      short loc_40E6AE
.text:0040E667                 push    offset Ptr      ; int
.text:0040E66C                 mov     edx, offset aAtlthunkDatato ; "AtlThunk_DataToCode"
.text:0040E671                 mov     ecx, esi        ; hModule
.text:0040E673                 call    GetProcAddressSingle
.text:0040E678                 test    al, al
.text:0040E67A                 jz      short loc_40E6AE
.text:0040E67C                 push    offset dword_413A4C ; int
.text:0040E681                 mov     edx, offset aAtlthunkFreeda ; "AtlThunk_FreeData"
.text:0040E686                 mov     ecx, esi        ; hModule
.text:0040E688                 call    GetProcAddressSingle
.text:0040E68D                 test    al, al
.text:0040E68F                 jz      short loc_40E6AE
.text:0040E691                 xor     ecx, ecx
.text:0040E693                 lea     eax, [ebp+var_4]
.text:0040E696                 lock or [eax], ecx
.text:0040E699                 push    dword_413A5C    ; Ptr
.text:0040E69F                 mov     byte_413A58, 1
.text:0040E6A6                 call    ds:DecodePointer
.text:0040E6AC                 jmp     short loc_40E6B0
.text:0040E6AE ; ---------------------------------------------------------------------------
.text:0040E6AE
.text:0040E6AE loc_40E6AE:                             ; CODE XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___0+37↑j
.text:0040E6AE                                         ; GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___0+4C↑j ...
.text:0040E6AE                 xor     eax, eax
.text:0040E6B0
.text:0040E6B0 loc_40E6B0:                             ; CODE XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___0+A8↑j
.text:0040E6B0                 pop     esi
.text:0040E6B1
.text:0040E6B1 loc_40E6B1:                             ; CODE XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___0+1B↑j
.text:0040E6B1                 mov     esp, ebp
.text:0040E6B3                 pop     ebp
.text:0040E6B4                 retn
.text:0040E6B4 GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___0 endp
.text:0040E6B4
.text:0040E6B5
.text:0040E6B5 ; =============== S U B R O U T I N E =======================================
.text:0040E6B5
.text:0040E6B5 ; Attributes: bp-based frame info_from_lumina
.text:0040E6B5
.text:0040E6B5 GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___1 proc near
.text:0040E6B5                                         ; CODE XREF: AtlThunk_InitData(x,x,x)+52↑p
.text:0040E6B5
.text:0040E6B5 var_4           = byte ptr -4
.text:0040E6B5
.text:0040E6B5                 mov     edi, edi
.text:0040E6B7                 push    ebp
.text:0040E6B8                 mov     ebp, esp
.text:0040E6BA                 push    ecx
.text:0040E6BB                 cmp     byte_413A58, 0
.text:0040E6C2                 jz      short loc_40E6D5
.text:0040E6C4                 push    dword_413A54    ; Ptr
.text:0040E6CA                 call    ds:DecodePointer
.text:0040E6D0                 jmp     loc_40E762
.text:0040E6D5 ; ---------------------------------------------------------------------------
.text:0040E6D5
.text:0040E6D5 loc_40E6D5:                             ; CODE XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___1+D↑j
.text:0040E6D5                 push    esi
.text:0040E6D6                 push    800h            ; dwFlags
.text:0040E6DB                 push    0               ; hFile
.text:0040E6DD                 push    offset aAtlthunkDll ; "atlthunk.dll"
.text:0040E6E2                 call    ds:LoadLibraryExA
.text:0040E6E8                 mov     esi, eax
.text:0040E6EA                 test    esi, esi
.text:0040E6EC                 jz      short loc_40E75F
.text:0040E6EE                 push    offset dword_413A5C ; int
.text:0040E6F3                 mov     edx, offset aAtlthunkAlloca ; "AtlThunk_AllocateData"
.text:0040E6F8                 mov     ecx, esi        ; hModule
.text:0040E6FA                 call    GetProcAddressSingle
.text:0040E6FF                 test    al, al
.text:0040E701                 jz      short loc_40E75F
.text:0040E703                 push    offset dword_413A54 ; int
.text:0040E708                 mov     edx, offset aAtlthunkInitda ; "AtlThunk_InitData"
.text:0040E70D                 mov     ecx, esi        ; hModule
.text:0040E70F                 call    GetProcAddressSingle
.text:0040E714                 test    al, al
.text:0040E716                 jz      short loc_40E75F
.text:0040E718                 push    offset Ptr      ; int
.text:0040E71D                 mov     edx, offset aAtlthunkDatato ; "AtlThunk_DataToCode"
.text:0040E722                 mov     ecx, esi        ; hModule
.text:0040E724                 call    GetProcAddressSingle
.text:0040E729                 test    al, al
.text:0040E72B                 jz      short loc_40E75F
.text:0040E72D                 push    offset dword_413A4C ; int
.text:0040E732                 mov     edx, offset aAtlthunkFreeda ; "AtlThunk_FreeData"
.text:0040E737                 mov     ecx, esi        ; hModule
.text:0040E739                 call    GetProcAddressSingle
.text:0040E73E                 test    al, al
.text:0040E740                 jz      short loc_40E75F
.text:0040E742                 xor     ecx, ecx
.text:0040E744                 lea     eax, [ebp+var_4]
.text:0040E747                 lock or [eax], ecx
.text:0040E74A                 push    dword_413A54    ; Ptr
.text:0040E750                 mov     byte_413A58, 1
.text:0040E757                 call    ds:DecodePointer
.text:0040E75D                 jmp     short loc_40E761
.text:0040E75F ; ---------------------------------------------------------------------------
.text:0040E75F
.text:0040E75F loc_40E75F:                             ; CODE XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___1+37↑j
.text:0040E75F                                         ; GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___1+4C↑j ...
.text:0040E75F                 xor     eax, eax
.text:0040E761
.text:0040E761 loc_40E761:                             ; CODE XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___1+A8↑j
.text:0040E761                 pop     esi
.text:0040E762
.text:0040E762 loc_40E762:                             ; CODE XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___1+1B↑j
.text:0040E762                 mov     esp, ebp
.text:0040E764                 pop     ebp
.text:0040E765                 retn
.text:0040E765 GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___1 endp
.text:0040E765
.text:0040E766
.text:0040E766 ; =============== S U B R O U T I N E =======================================
.text:0040E766
.text:0040E766 ; Attributes: bp-based frame info_from_lumina
.text:0040E766
.text:0040E766 GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___2 proc near
.text:0040E766                                         ; CODE XREF: AtlThunk_FreeData(x)+2C↑p
.text:0040E766
.text:0040E766 var_4           = byte ptr -4
.text:0040E766
.text:0040E766                 mov     edi, edi
.text:0040E768                 push    ebp
.text:0040E769                 mov     ebp, esp
.text:0040E76B                 push    ecx
.text:0040E76C                 cmp     byte_413A58, 0
.text:0040E773                 jz      short loc_40E786
.text:0040E775                 push    dword_413A4C    ; Ptr
.text:0040E77B                 call    ds:DecodePointer
.text:0040E781                 jmp     loc_40E813
.text:0040E786 ; ---------------------------------------------------------------------------
.text:0040E786
.text:0040E786 loc_40E786:                             ; CODE XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___2+D↑j
.text:0040E786                 push    esi
.text:0040E787                 push    800h            ; dwFlags
.text:0040E78C                 push    0               ; hFile
.text:0040E78E                 push    offset aAtlthunkDll ; "atlthunk.dll"
.text:0040E793                 call    ds:LoadLibraryExA
.text:0040E799                 mov     esi, eax
.text:0040E79B                 test    esi, esi
.text:0040E79D                 jz      short loc_40E810
.text:0040E79F                 push    offset dword_413A5C ; int
.text:0040E7A4                 mov     edx, offset aAtlthunkAlloca ; "AtlThunk_AllocateData"
.text:0040E7A9                 mov     ecx, esi        ; hModule
.text:0040E7AB                 call    GetProcAddressSingle
.text:0040E7B0                 test    al, al
.text:0040E7B2                 jz      short loc_40E810
.text:0040E7B4                 push    offset dword_413A54 ; int
.text:0040E7B9                 mov     edx, offset aAtlthunkInitda ; "AtlThunk_InitData"
.text:0040E7BE                 mov     ecx, esi        ; hModule
.text:0040E7C0                 call    GetProcAddressSingle
.text:0040E7C5                 test    al, al
.text:0040E7C7                 jz      short loc_40E810
.text:0040E7C9                 push    offset Ptr      ; int
.text:0040E7CE                 mov     edx, offset aAtlthunkDatato ; "AtlThunk_DataToCode"
.text:0040E7D3                 mov     ecx, esi        ; hModule
.text:0040E7D5                 call    GetProcAddressSingle
.text:0040E7DA                 test    al, al
.text:0040E7DC                 jz      short loc_40E810
.text:0040E7DE                 push    offset dword_413A4C ; int
.text:0040E7E3                 mov     edx, offset aAtlthunkFreeda ; "AtlThunk_FreeData"
.text:0040E7E8                 mov     ecx, esi        ; hModule
.text:0040E7EA                 call    GetProcAddressSingle
.text:0040E7EF                 test    al, al
.text:0040E7F1                 jz      short loc_40E810
.text:0040E7F3                 xor     ecx, ecx
.text:0040E7F5                 lea     eax, [ebp+var_4]
.text:0040E7F8                 lock or [eax], ecx
.text:0040E7FB                 push    dword_413A4C    ; Ptr
.text:0040E801                 mov     byte_413A58, 1
.text:0040E808                 call    ds:DecodePointer
.text:0040E80E                 jmp     short loc_40E812
.text:0040E810 ; ---------------------------------------------------------------------------
.text:0040E810
.text:0040E810 loc_40E810:                             ; CODE XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___2+37↑j
.text:0040E810                                         ; GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___2+4C↑j ...
.text:0040E810                 xor     eax, eax
.text:0040E812
.text:0040E812 loc_40E812:                             ; CODE XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___2+A8↑j
.text:0040E812                 pop     esi
.text:0040E813
.text:0040E813 loc_40E813:                             ; CODE XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___2+1B↑j
.text:0040E813                 mov     esp, ebp
.text:0040E815                 pop     ebp
.text:0040E816                 retn
.text:0040E816 GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___2 endp
.text:0040E816
.text:0040E817
.text:0040E817 ; =============== S U B R O U T I N E =======================================
.text:0040E817
.text:0040E817
.text:0040E817 sub_40E817      proc near               ; CODE XREF: sub_40ED73+AF↓p
.text:0040E817                 xor     edx, edx
.text:0040E819                 mov     dword ptr [ecx+4], 25000080h
.text:0040E820                 xor     eax, eax
.text:0040E822                 mov     [ecx], edx
.text:0040E824                 inc     eax
.text:0040E825                 mov     [ecx+18h], edx
.text:0040E828                 mov     [ecx+20h], eax
.text:0040E82B                 mov     [ecx+44h], eax
.text:0040E82E                 mov     [ecx+68h], eax
.text:0040E831                 mov     [ecx+8Ch], eax
.text:0040E837                 mov     [ecx+0B0h], eax
.text:0040E83D                 mov     [ecx+0D4h], eax
.text:0040E843                 mov     [ecx+0F8h], eax
.text:0040E849                 mov     [ecx+11Ch], eax
.text:0040E84F                 mov     [ecx+140h], eax
.text:0040E855                 mov     [ecx+164h], eax
.text:0040E85B                 mov     [ecx+188h], eax
.text:0040E861                 mov     [ecx+1ACh], eax
.text:0040E867                 xor     eax, eax
.text:0040E869                 mov     [ecx+1Ch], edx
.text:0040E86C                 mov     [ecx+24h], edx
.text:0040E86F                 mov     dword ptr [ecx+28h], 26000081h
.text:0040E876                 mov     [ecx+3Ch], edx
.text:0040E879                 mov     [ecx+40h], edx
.text:0040E87C                 mov     [ecx+48h], edx
.text:0040E87F                 mov     dword ptr [ecx+4Ch], 26000041h
.text:0040E886                 mov     [ecx+60h], edx
.text:0040E889                 mov     [ecx+64h], edx
.text:0040E88C                 mov     [ecx+6Ch], edx
.text:0040E88F                 mov     dword ptr [ecx+70h], 26000090h
.text:0040E896                 mov     [ecx+84h], edx
.text:0040E89C                 mov     [ecx+88h], edx
.text:0040E8A2                 mov     [ecx+90h], edx
.text:0040E8A8                 mov     dword ptr [ecx+94h], 26000040h
.text:0040E8B2                 mov     [ecx+0A8h], edx
.text:0040E8B8                 mov     [ecx+0ACh], edx
.text:0040E8BE                 mov     [ecx+0B4h], edx
.text:0040E8C4                 mov     dword ptr [ecx+0B8h], 26000091h
.text:0040E8CE                 mov     [ecx+0CCh], edx
.text:0040E8D4                 mov     [ecx+0D0h], edx
.text:0040E8DA                 mov     [ecx+0D8h], edx
.text:0040E8E0                 mov     dword ptr [ecx+0DCh], 15000007h
.text:0040E8EA                 mov     [ecx+0F0h], edx
.text:0040E8F0                 mov     [ecx+0F4h], edx
.text:0040E8F6                 mov     [ecx+0FCh], edx
.text:0040E8FC                 mov     dword ptr [ecx+100h], 25000061h
.text:0040E906                 mov     [ecx+114h], edx
.text:0040E90C                 mov     [ecx+118h], edx
.text:0040E912                 mov     [ecx+120h], edx
.text:0040E918                 mov     dword ptr [ecx+124h], 26000070h
.text:0040E922                 mov     [ecx+138h], edx
.text:0040E928                 mov     [ecx+13Ch], edx
.text:0040E92E                 mov     [ecx+144h], edx
.text:0040E934                 mov     dword ptr [ecx+148h], 260000A0h
.text:0040E93E                 mov     [ecx+15Ch], edx
.text:0040E944                 mov     [ecx+160h], edx
.text:0040E94A                 mov     [ecx+168h], edx
.text:0040E950                 mov     dword ptr [ecx+16Ch], 26000010h
.text:0040E95A                 mov     [ecx+180h], edx
.text:0040E960                 mov     [ecx+184h], edx
.text:0040E966                 mov     [ecx+18Ch], edx
.text:0040E96C                 mov     dword ptr [ecx+190h], 12000004h
.text:0040E976                 mov     [ecx+1A4h], edx
.text:0040E97C                 mov     [ecx+1A8h], edx
.text:0040E982                 retn
.text:0040E982 sub_40E817      endp
.text:0040E982
.text:0040E983
.text:0040E983 ; =============== S U B R O U T I N E =======================================
.text:0040E983
.text:0040E983
.text:0040E983 sub_40E983      proc near               ; CODE XREF: sub_40F131+D↓p
.text:0040E983                 xor     ecx, ecx
.text:0040E985                 mov     dword_41385C, 15000011h
.text:0040E98F                 xor     eax, eax
.text:0040E991                 mov     dword_413858, ecx
.text:0040E997                 inc     eax
.text:0040E998                 mov     dword_413870, ecx
.text:0040E99E                 mov     dword_413878, eax
.text:0040E9A3                 mov     dword_41389C, eax
.text:0040E9A8                 mov     dword_4138C0, eax
.text:0040E9AD                 mov     dword_4138E4, eax
.text:0040E9B2                 mov     dword_413908, eax
.text:0040E9B7                 xor     eax, eax
.text:0040E9B9                 mov     dword_413874, ecx
.text:0040E9BF                 mov     dword_41387C, ecx
.text:0040E9C5                 mov     dword_413880, 15000013h
.text:0040E9CF                 mov     dword_413894, ecx
.text:0040E9D5                 mov     dword_413898, ecx
.text:0040E9DB                 mov     dword_4138A0, ecx
.text:0040E9E1                 mov     dword_4138A4, 15000014h
.text:0040E9EB                 mov     dword_4138B8, ecx
.text:0040E9F1                 mov     dword_4138BC, ecx
.text:0040E9F7                 mov     dword_4138C4, ecx
.text:0040E9FD                 mov     dword_4138C8, 15000015h
.text:0040EA07                 mov     dword_4138DC, ecx
.text:0040EA0D                 mov     dword_4138E0, ecx
.text:0040EA13                 mov     dword_4138E8, ecx
.text:0040EA19                 mov     dword_4138EC, 12000016h
.text:0040EA23                 mov     dword_413900, ecx
.text:0040EA29                 mov     dword_413904, ecx
.text:0040EA2F                 retn
.text:0040EA2F sub_40E983      endp
.text:0040EA2F
.text:0040EA30
.text:0040EA30 ; =============== S U B R O U T I N E =======================================
.text:0040EA30
.text:0040EA30 ; Attributes: bp-based frame
.text:0040EA30
.text:0040EA30 sub_40EA30      proc near               ; CODE XREF: sub_40EC1E+39↓p
.text:0040EA30                                         ; sub_40EC1E+64↓p
.text:0040EA30
.text:0040EA30 var_C           = dword ptr -0Ch
.text:0040EA30 var_8           = dword ptr -8
.text:0040EA30 uBytes          = dword ptr -4
.text:0040EA30 arg_0           = dword ptr  8
.text:0040EA30 arg_4           = dword ptr  0Ch
.text:0040EA30
.text:0040EA30                 mov     edi, edi
.text:0040EA32                 push    ebp
.text:0040EA33                 mov     ebp, esp
.text:0040EA35                 sub     esp, 0Ch
.text:0040EA38                 mov     eax, [ebp+arg_4]
.text:0040EA3B                 push    ebx
.text:0040EA3C                 mov     ebx, [ebp+arg_0]
.text:0040EA3F                 push    esi
.text:0040EA40                 xor     esi, esi
.text:0040EA42                 mov     [ebp+var_8], edx
.text:0040EA45                 push    edi
.text:0040EA46                 mov     [eax], esi
.text:0040EA48                 lea     eax, [ebp+uBytes]
.text:0040EA4B                 push    eax
.text:0040EA4C                 push    esi
.text:0040EA4D                 push    edx
.text:0040EA4E                 push    ecx
.text:0040EA4F                 mov     [ebp+var_C], ecx
.text:0040EA52                 mov     [ebx], esi
.text:0040EA54                 mov     [ebp+uBytes], esi
.text:0040EA57                 call    ds:BcdGetElementData
.text:0040EA5D                 mov     edi, eax
.text:0040EA5F                 cmp     edi, 0C0000023h
.text:0040EA65                 jnz     short loc_40EA90
.text:0040EA67                 push    [ebp+uBytes]    ; uBytes
.text:0040EA6A                 push    40h ; '@'       ; uFlags
.text:0040EA6C                 call    ds:LocalAlloc
.text:0040EA72                 mov     esi, eax
.text:0040EA74                 test    esi, esi
.text:0040EA76                 jnz     short loc_40EA7D
.text:0040EA78                 add     edi, 0FFFFFFF4h
.text:0040EA7B                 jmp     short loc_40EAAB
.text:0040EA7D ; ---------------------------------------------------------------------------
.text:0040EA7D
.text:0040EA7D loc_40EA7D:                             ; CODE XREF: sub_40EA30+46↑j
.text:0040EA7D                 lea     eax, [ebp+uBytes]
.text:0040EA80                 push    eax
.text:0040EA81                 push    esi
.text:0040EA82                 push    [ebp+var_8]
.text:0040EA85                 push    [ebp+var_C]
.text:0040EA88                 call    ds:BcdGetElementData
.text:0040EA8E                 mov     edi, eax
.text:0040EA90
.text:0040EA90 loc_40EA90:                             ; CODE XREF: sub_40EA30+35↑j
.text:0040EA90                 test    edi, edi
.text:0040EA92                 jns     short loc_40EAA1
.text:0040EA94                 test    esi, esi
.text:0040EA96                 jz      short loc_40EAAB
.text:0040EA98                 push    esi             ; hMem
.text:0040EA99                 call    ds:LocalFree
.text:0040EA9F                 jmp     short loc_40EAAB
.text:0040EAA1 ; ---------------------------------------------------------------------------
.text:0040EAA1
.text:0040EAA1 loc_40EAA1:                             ; CODE XREF: sub_40EA30+62↑j
.text:0040EAA1                 mov     ecx, [ebp+arg_4]
.text:0040EAA4                 mov     eax, [ebp+uBytes]
.text:0040EAA7                 mov     [ebx], esi
.text:0040EAA9                 mov     [ecx], eax
.text:0040EAAB
.text:0040EAAB loc_40EAAB:                             ; CODE XREF: sub_40EA30+4B↑j
.text:0040EAAB                                         ; sub_40EA30+66↑j ...
.text:0040EAAB                 mov     eax, edi
.text:0040EAAD                 pop     edi
.text:0040EAAE                 pop     esi
.text:0040EAAF                 pop     ebx
.text:0040EAB0                 mov     esp, ebp
.text:0040EAB2                 pop     ebp
.text:0040EAB3                 retn    8
.text:0040EAB3 sub_40EA30      endp
.text:0040EAB3
.text:0040EAB6
.text:0040EAB6 ; =============== S U B R O U T I N E =======================================
.text:0040EAB6
.text:0040EAB6 ; Attributes: bp-based frame
.text:0040EAB6
.text:0040EAB6 ; int __thiscall sub_40EAB6(wchar_t *Source)
.text:0040EAB6 sub_40EAB6      proc near               ; CODE XREF: sub_40EC1E+8D↓p
.text:0040EAB6
.text:0040EAB6 var_90          = dword ptr -90h
.text:0040EAB6 TargetPath      = word ptr -8Ch
.text:0040EAB6 DeviceName      = word ptr -0Ch
.text:0040EAB6 var_8           = word ptr -8
.text:0040EAB6 var_4           = dword ptr -4
.text:0040EAB6
.text:0040EAB6                 mov     edi, edi
.text:0040EAB8                 push    ebp
.text:0040EAB9                 mov     ebp, esp
.text:0040EABB                 sub     esp, 90h
.text:0040EAC1                 mov     eax, ___security_cookie
.text:0040EAC6                 xor     eax, ebp
.text:0040EAC8                 mov     [ebp+var_4], eax
.text:0040EACB                 mov     eax, ds:dword_40367C
.text:0040EAD0                 push    ebx
.text:0040EAD1                 push    esi
.text:0040EAD2                 push    edi
.text:0040EAD3                 mov     dword ptr [ebp+DeviceName], eax
.text:0040EAD6                 mov     ebx, edx
.text:0040EAD8                 mov     ax, ds:word_403680
.text:0040EADE                 mov     esi, ecx
.text:0040EAE0                 push    43h ; 'C'
.text:0040EAE2                 mov     [ebp+var_8], ax
.text:0040EAE6                 mov     edi, 0C000000Eh
.text:0040EAEB                 pop     eax
.text:0040EAEC                 mov     [ebp+DeviceName], ax
.text:0040EAF0
.text:0040EAF0 loc_40EAF0:                             ; CODE XREF: sub_40EAB6+73↓j
.text:0040EAF0                 push    40h ; '@'       ; ucchMax
.text:0040EAF2                 lea     eax, [ebp+TargetPath]
.text:0040EAF8                 push    eax             ; lpTargetPath
.text:0040EAF9                 lea     eax, [ebp+DeviceName]
.text:0040EAFC                 push    eax             ; lpDeviceName
.text:0040EAFD                 call    ds:QueryDosDeviceW
.text:0040EB03                 test    eax, eax
.text:0040EB05                 jz      short loc_40EB1B
.text:0040EB07                 lea     eax, [ebp+TargetPath]
.text:0040EB0D                 push    eax             ; String2
.text:0040EB0E                 push    esi             ; String1
.text:0040EB0F                 call    ds:_wcsicmp
.text:0040EB15                 pop     ecx
.text:0040EB16                 pop     ecx
.text:0040EB17                 test    eax, eax
.text:0040EB19                 jz      short loc_40EB2D
.text:0040EB1B
.text:0040EB1B loc_40EB1B:                             ; CODE XREF: sub_40EAB6+4F↑j
.text:0040EB1B                 mov     ax, [ebp+DeviceName]
.text:0040EB1F                 inc     ax
.text:0040EB21                 mov     [ebp+DeviceName], ax
.text:0040EB25                 cmp     ax, 5Ah ; 'Z'
.text:0040EB29                 jbe     short loc_40EAF0
.text:0040EB2B                 jmp     short loc_40EB30
.text:0040EB2D ; ---------------------------------------------------------------------------
.text:0040EB2D
.text:0040EB2D loc_40EB2D:                             ; CODE XREF: sub_40EAB6+63↑j
.text:0040EB2D                 lea     esi, [ebp+DeviceName]
.text:0040EB30
.text:0040EB30 loc_40EB30:                             ; CODE XREF: sub_40EAB6+75↑j
.text:0040EB30                 and     [ebp+var_90], 0
.text:0040EB37                 mov     ecx, esi
.text:0040EB39                 lea     edx, [ecx+2]
.text:0040EB3C
.text:0040EB3C loc_40EB3C:                             ; CODE XREF: sub_40EAB6+93↓j
.text:0040EB3C                 mov     ax, [ecx]
.text:0040EB3F                 add     ecx, 2
.text:0040EB42                 cmp     ax, word ptr [ebp+var_90]
.text:0040EB49                 jnz     short loc_40EB3C
.text:0040EB4B                 sub     ecx, edx
.text:0040EB4D                 sar     ecx, 1
.text:0040EB4F                 lea     eax, ds:2[ecx*2]
.text:0040EB56                 push    eax             ; uBytes
.text:0040EB57                 push    40h ; '@'       ; uFlags
.text:0040EB59                 call    ds:LocalAlloc
.text:0040EB5F                 mov     edx, eax
.text:0040EB61                 mov     [ebx], edx
.text:0040EB63                 test    edx, edx
.text:0040EB65                 jnz     short loc_40EB6E
.text:0040EB67                 mov     edi, 0C000009Ah
.text:0040EB6C                 jmp     short loc_40EB93
.text:0040EB6E ; ---------------------------------------------------------------------------
.text:0040EB6E
.text:0040EB6E loc_40EB6E:                             ; CODE XREF: sub_40EAB6+AF↑j
.text:0040EB6E                 mov     ecx, esi
.text:0040EB70                 lea     ebx, [ecx+2]
.text:0040EB73
.text:0040EB73 loc_40EB73:                             ; CODE XREF: sub_40EAB6+CA↓j
.text:0040EB73                 mov     ax, [ecx]
.text:0040EB76                 add     ecx, 2
.text:0040EB79                 cmp     ax, word ptr [ebp+var_90]
.text:0040EB80                 jnz     short loc_40EB73
.text:0040EB82                 sub     ecx, ebx
.text:0040EB84                 sar     ecx, 1
.text:0040EB86                 push    esi             ; Source
.text:0040EB87                 inc     ecx
.text:0040EB88                 push    ecx             ; SizeInWords
.text:0040EB89                 push    edx             ; Destination
.text:0040EB8A                 call    ds:wcscpy_s
.text:0040EB90                 add     esp, 0Ch
.text:0040EB93
.text:0040EB93 loc_40EB93:                             ; CODE XREF: sub_40EAB6+B6↑j
.text:0040EB93                 mov     ecx, [ebp+var_4]
.text:0040EB96                 mov     eax, edi
.text:0040EB98                 pop     edi
.text:0040EB99                 pop     esi
.text:0040EB9A                 xor     ecx, ebp        ; StackCookie
.text:0040EB9C                 pop     ebx
.text:0040EB9D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040EBA2                 mov     esp, ebp
.text:0040EBA4                 pop     ebp
.text:0040EBA5                 retn
.text:0040EBA5 sub_40EAB6      endp
.text:0040EBA5
.text:0040EBA6
.text:0040EBA6 ; =============== S U B R O U T I N E =======================================
.text:0040EBA6
.text:0040EBA6 ; Attributes: bp-based frame
.text:0040EBA6
.text:0040EBA6 ; int __fastcall sub_40EBA6(char Args)
.text:0040EBA6 sub_40EBA6      proc near               ; CODE XREF: CPageBootIni::OnApply(void)+1AA↑p
.text:0040EBA6                                         ; CPageBootIni::OnApply(void)+3E3↑p ...
.text:0040EBA6
.text:0040EBA6 var_8           = dword ptr -8
.text:0040EBA6 var_4           = dword ptr -4
.text:0040EBA6
.text:0040EBA6                 mov     edi, edi
.text:0040EBA8                 push    ebp
.text:0040EBA9                 mov     ebp, esp
.text:0040EBAB                 push    ecx
.text:0040EBAC                 push    ecx
.text:0040EBAD                 push    ebx
.text:0040EBAE                 push    esi
.text:0040EBAF                 mov     ebx, ecx
.text:0040EBB1                 mov     esi, edx
.text:0040EBB3                 push    edi
.text:0040EBB4                 mov     edi, 0C0000017h
.text:0040EBB9                 test    ebx, ebx
.text:0040EBBB                 jz      short loc_40EBCD
.text:0040EBBD                 lea     eax, [ebp+var_4]
.text:0040EBC0                 mov     edx, 104h
.text:0040EBC5                 push    eax
.text:0040EBC6                 call    sub_40938A
.text:0040EBCB                 jmp     short loc_40EBD2
.text:0040EBCD ; ---------------------------------------------------------------------------
.text:0040EBCD
.text:0040EBCD loc_40EBCD:                             ; CODE XREF: sub_40EBA6+15↑j
.text:0040EBCD                 mov     eax, 80070057h
.text:0040EBD2
.text:0040EBD2 loc_40EBD2:                             ; CODE XREF: sub_40EBA6+25↑j
.text:0040EBD2                 test    eax, eax
.text:0040EBD4                 js      short loc_40EC15
.text:0040EBD6                 mov     eax, [ebp+var_4]
.text:0040EBD9                 add     eax, 10h
.text:0040EBDC                 mov     [ebp+var_8], eax
.text:0040EBDF                 add     eax, eax
.text:0040EBE1                 push    eax             ; uBytes
.text:0040EBE2                 push    0               ; uFlags
.text:0040EBE4                 call    ds:LocalAlloc
.text:0040EBEA                 mov     [esi], eax
.text:0040EBEC                 test    eax, eax
.text:0040EBEE                 jz      short loc_40EC15
.text:0040EBF0                 push    ebx             ; Args
.text:0040EBF1                 push    offset aS       ; "\\??\\%s"
.text:0040EBF6                 push    [ebp+var_8]     ; int
.text:0040EBF9                 push    eax             ; Buffer
.text:0040EBFA                 call    ?StringCchPrintfW@@YAJPAGIPBGZZ_0 ; StringCchPrintfW(ushort *,uint,ushort const *,...)
.text:0040EBFF                 add     esp, 10h
.text:0040EC02                 test    eax, eax
.text:0040EC04                 js      short loc_40EC0A
.text:0040EC06                 xor     edi, edi
.text:0040EC08                 jmp     short loc_40EC15
.text:0040EC0A ; ---------------------------------------------------------------------------
.text:0040EC0A
.text:0040EC0A loc_40EC0A:                             ; CODE XREF: sub_40EBA6+5E↑j
.text:0040EC0A                 push    dword ptr [esi] ; hMem
.text:0040EC0C                 call    ds:LocalFree
.text:0040EC12                 and     dword ptr [esi], 0
.text:0040EC15
.text:0040EC15 loc_40EC15:                             ; CODE XREF: sub_40EBA6+2E↑j
.text:0040EC15                                         ; sub_40EBA6+48↑j ...
.text:0040EC15                 mov     eax, edi
.text:0040EC17                 pop     edi
.text:0040EC18                 pop     esi
.text:0040EC19                 pop     ebx
.text:0040EC1A                 mov     esp, ebp
.text:0040EC1C                 pop     ebp
.text:0040EC1D                 retn
.text:0040EC1D sub_40EBA6      endp
.text:0040EC1D
.text:0040EC1E
.text:0040EC1E ; =============== S U B R O U T I N E =======================================
.text:0040EC1E
.text:0040EC1E ; Attributes: bp-based frame
.text:0040EC1E
.text:0040EC1E sub_40EC1E      proc near               ; CODE XREF: sub_40EED6+46↓p
.text:0040EC1E
.text:0040EC1E var_1C          = dword ptr -1Ch
.text:0040EC1E var_18          = dword ptr -18h
.text:0040EC1E var_14          = dword ptr -14h
.text:0040EC1E var_10          = dword ptr -10h
.text:0040EC1E hMem            = dword ptr -0Ch
.text:0040EC1E var_8           = dword ptr -8
.text:0040EC1E Source          = dword ptr -4
.text:0040EC1E arg_0           = dword ptr  8
.text:0040EC1E
.text:0040EC1E                 mov     edi, edi
.text:0040EC20                 push    ebp
.text:0040EC21                 mov     ebp, esp
.text:0040EC23                 sub     esp, 1Ch
.text:0040EC26                 push    ebx
.text:0040EC27                 mov     eax, ecx
.text:0040EC29                 mov     [ebp+var_1C], edx
.text:0040EC2C                 xor     ecx, ecx
.text:0040EC2E                 mov     [ebp+var_18], eax
.text:0040EC31                 push    esi
.text:0040EC32                 push    edi
.text:0040EC33                 mov     esi, ecx
.text:0040EC35                 mov     [ebp+var_8], ecx
.text:0040EC38                 mov     edi, ecx
.text:0040EC3A                 mov     [ebp+var_14], ecx
.text:0040EC3D                 mov     [ebp+hMem], ecx
.text:0040EC40                 mov     ebx, ecx
.text:0040EC42                 lea     ecx, [ebp+var_8]
.text:0040EC45                 mov     [ebp+var_10], esi
.text:0040EC48                 push    ecx
.text:0040EC49                 lea     ecx, [ebp+hMem]
.text:0040EC4C                 mov     [ebp+Source], edi
.text:0040EC4F                 push    ecx
.text:0040EC50                 mov     edx, 21000001h
.text:0040EC55                 mov     ecx, eax
.text:0040EC57                 call    sub_40EA30
.text:0040EC5C                 mov     ecx, eax
.text:0040EC5E                 mov     [ebp+var_8], ecx
.text:0040EC61                 test    ecx, ecx
.text:0040EC63                 js      loc_40ED26
.text:0040EC69                 cmp     [ebp+hMem], ebx
.text:0040EC6C                 jz      loc_40ED4D
.text:0040EC72                 mov     ecx, [ebp+var_18]
.text:0040EC75                 lea     eax, [ebp+var_14]
.text:0040EC78                 push    eax
.text:0040EC79                 lea     eax, [ebp+Source]
.text:0040EC7C                 mov     edx, 22000002h
.text:0040EC81                 push    eax
.text:0040EC82                 call    sub_40EA30
.text:0040EC87                 mov     edi, [ebp+Source]
.text:0040EC8A                 mov     [ebp+var_8], eax
.text:0040EC8D                 test    eax, eax
.text:0040EC8F                 js      loc_40ED26
.text:0040EC95                 test    edi, edi
.text:0040EC97                 jz      loc_40ED26
.text:0040EC9D                 mov     eax, [ebp+hMem]
.text:0040ECA0                 cmp     dword ptr [eax], 2
.text:0040ECA3                 jnz     short loc_40ECB3
.text:0040ECA5                 lea     ecx, [eax+14h]  ; Source
.text:0040ECA8                 lea     edx, [ebp+var_10]
.text:0040ECAB                 call    sub_40EAB6
.text:0040ECB0                 mov     esi, [ebp+var_10]
.text:0040ECB3
.text:0040ECB3 loc_40ECB3:                             ; CODE XREF: sub_40EC1E+85↑j
.text:0040ECB3                 mov     edi, [ebp+var_14]
.text:0040ECB6                 shr     edi, 1
.text:0040ECB8                 inc     edi
.text:0040ECB9                 test    esi, esi
.text:0040ECBB                 jz      short loc_40ECD5
.text:0040ECBD                 mov     ecx, esi
.text:0040ECBF                 xor     ebx, ebx
.text:0040ECC1                 lea     edx, [ecx+2]
.text:0040ECC4
.text:0040ECC4 loc_40ECC4:                             ; CODE XREF: sub_40EC1E+AF↓j
.text:0040ECC4                 mov     ax, [ecx]
.text:0040ECC7                 add     ecx, 2
.text:0040ECCA                 cmp     ax, bx
.text:0040ECCD                 jnz     short loc_40ECC4
.text:0040ECCF                 sub     ecx, edx
.text:0040ECD1                 sar     ecx, 1
.text:0040ECD3                 add     edi, ecx
.text:0040ECD5
.text:0040ECD5 loc_40ECD5:                             ; CODE XREF: sub_40EC1E+9D↑j
.text:0040ECD5                 lea     eax, [edi+edi]
.text:0040ECD8                 push    eax             ; uBytes
.text:0040ECD9                 push    40h ; '@'       ; uFlags
.text:0040ECDB                 call    ds:LocalAlloc
.text:0040ECE1                 mov     ebx, eax
.text:0040ECE3                 test    ebx, ebx
.text:0040ECE5                 jnz     short loc_40ECF0
.text:0040ECE7                 mov     [ebp+var_8], 0C000009Ah
.text:0040ECEE                 jmp     short loc_40ED23
.text:0040ECF0 ; ---------------------------------------------------------------------------
.text:0040ECF0
.text:0040ECF0 loc_40ECF0:                             ; CODE XREF: sub_40EC1E+C7↑j
.text:0040ECF0                 test    esi, esi
.text:0040ECF2                 jz      short loc_40ECF7
.text:0040ECF4                 push    esi
.text:0040ECF5                 jmp     short loc_40ECFC
.text:0040ECF7 ; ---------------------------------------------------------------------------
.text:0040ECF7
.text:0040ECF7 loc_40ECF7:                             ; CODE XREF: sub_40EC1E+D4↑j
.text:0040ECF7                 push    offset Source   ; Source
.text:0040ECFC
.text:0040ECFC loc_40ECFC:                             ; CODE XREF: sub_40EC1E+D7↑j
.text:0040ECFC                 push    edi             ; SizeInWords
.text:0040ECFD                 push    ebx             ; Destination
.text:0040ECFE                 call    ds:wcscpy_s
.text:0040ED04                 add     esp, 0Ch
.text:0040ED07                 push    [ebp+Source]    ; Source
.text:0040ED0A                 push    edi             ; SizeInWords
.text:0040ED0B                 push    ebx             ; Destination
.text:0040ED0C                 call    ds:wcscat_s
.text:0040ED12                 mov     eax, [ebp+var_1C]
.text:0040ED15                 add     esp, 0Ch
.text:0040ED18                 mov     [eax], ebx
.text:0040ED1A                 mov     eax, [ebp+arg_0]
.text:0040ED1D                 mov     [eax], esi
.text:0040ED1F                 xor     eax, eax
.text:0040ED21                 mov     esi, eax
.text:0040ED23
.text:0040ED23 loc_40ED23:                             ; CODE XREF: sub_40EC1E+D0↑j
.text:0040ED23                 mov     edi, [ebp+Source]
.text:0040ED26
.text:0040ED26 loc_40ED26:                             ; CODE XREF: sub_40EC1E+45↑j
.text:0040ED26                                         ; sub_40EC1E+71↑j ...
.text:0040ED26                 mov     eax, [ebp+hMem]
.text:0040ED29                 test    eax, eax
.text:0040ED2B                 jz      short loc_40ED34
.text:0040ED2D                 push    eax             ; hMem
.text:0040ED2E                 call    ds:LocalFree
.text:0040ED34
.text:0040ED34 loc_40ED34:                             ; CODE XREF: sub_40EC1E+10D↑j
.text:0040ED34                 test    edi, edi
.text:0040ED36                 jz      short loc_40ED3F
.text:0040ED38                 push    edi             ; hMem
.text:0040ED39                 call    ds:LocalFree
.text:0040ED3F
.text:0040ED3F loc_40ED3F:                             ; CODE XREF: sub_40EC1E+118↑j
.text:0040ED3F                 test    esi, esi
.text:0040ED41                 jz      short loc_40ED4A
.text:0040ED43                 push    esi             ; hMem
.text:0040ED44                 call    ds:LocalFree
.text:0040ED4A
.text:0040ED4A loc_40ED4A:                             ; CODE XREF: sub_40EC1E+123↑j
.text:0040ED4A                 mov     ecx, [ebp+var_8]
.text:0040ED4D
.text:0040ED4D loc_40ED4D:                             ; CODE XREF: sub_40EC1E+4E↑j
.text:0040ED4D                 test    ecx, ecx
.text:0040ED4F                 jns     short loc_40ED67
.text:0040ED51                 test    ebx, ebx
.text:0040ED53                 jz      short loc_40ED5C
.text:0040ED55                 push    ebx             ; hMem
.text:0040ED56                 call    ds:LocalFree
.text:0040ED5C
.text:0040ED5C loc_40ED5C:                             ; CODE XREF: sub_40EC1E+135↑j
.text:0040ED5C                 test    esi, esi
.text:0040ED5E                 jz      short loc_40ED67
.text:0040ED60                 push    esi             ; hMem
.text:0040ED61                 call    ds:LocalFree
.text:0040ED67
.text:0040ED67 loc_40ED67:                             ; CODE XREF: sub_40EC1E+131↑j
.text:0040ED67                                         ; sub_40EC1E+140↑j
.text:0040ED67                 mov     eax, [ebp+var_8]
.text:0040ED6A                 pop     edi
.text:0040ED6B                 pop     esi
.text:0040ED6C                 pop     ebx
.text:0040ED6D                 mov     esp, ebp
.text:0040ED6F                 pop     ebp
.text:0040ED70                 retn    4
.text:0040ED70 sub_40EC1E      endp
.text:0040ED70
.text:0040ED73
.text:0040ED73 ; =============== S U B R O U T I N E =======================================
.text:0040ED73
.text:0040ED73 ; Attributes: bp-based frame
.text:0040ED73
.text:0040ED73 sub_40ED73      proc near               ; CODE XREF: sub_40F254+99↓p
.text:0040ED73
.text:0040ED73 var_28          = dword ptr -28h
.text:0040ED73 var_24          = dword ptr -24h
.text:0040ED73 var_20          = dword ptr -20h
.text:0040ED73 var_1C          = dword ptr -1Ch
.text:0040ED73 hMem            = dword ptr -14h
.text:0040ED73 var_10          = dword ptr -10h
.text:0040ED73 var_C           = dword ptr -0Ch
.text:0040ED73 uBytes          = dword ptr -8
.text:0040ED73 var_4           = dword ptr -4
.text:0040ED73
.text:0040ED73                 mov     edi, edi
.text:0040ED75                 push    ebp
.text:0040ED76                 mov     ebp, esp
.text:0040ED78                 sub     esp, 28h
.text:0040ED7B                 and     [ebp+var_4], 0
.text:0040ED7F                 lea     eax, [ebp+var_4]
.text:0040ED82                 push    ebx
.text:0040ED83                 push    esi
.text:0040ED84                 push    edi
.text:0040ED85                 push    eax
.text:0040ED86                 lea     eax, [ebp+uBytes]
.text:0040ED89                 mov     [ebp+var_28], 1
.text:0040ED90                 push    eax
.text:0040ED91                 xor     ebx, ebx
.text:0040ED93                 mov     [ebp+var_24], 10200003h
.text:0040ED9A                 and     [ebp+uBytes], ebx
.text:0040ED9D                 lea     eax, [ebp+var_28]
.text:0040EDA0                 push    ebx
.text:0040EDA1                 mov     esi, ecx
.text:0040EDA3                 push    eax
.text:0040EDA4                 push    esi
.text:0040EDA5                 mov     [ebp+var_1C], esi
.text:0040EDA8                 call    ds:BcdEnumerateObjects
.text:0040EDAE                 push    [ebp+uBytes]    ; uBytes
.text:0040EDB1                 push    40h ; '@'       ; uFlags
.text:0040EDB3                 call    ds:LocalAlloc
.text:0040EDB9                 mov     [ebp+hMem], eax
.text:0040EDBC                 test    eax, eax
.text:0040EDBE                 jnz     short loc_40EDCA
.text:0040EDC0                 mov     esi, 0C0000017h
.text:0040EDC5                 jmp     loc_40EEB6
.text:0040EDCA ; ---------------------------------------------------------------------------
.text:0040EDCA
.text:0040EDCA loc_40EDCA:                             ; CODE XREF: sub_40ED73+4B↑j
.text:0040EDCA                 lea     ecx, [ebp+var_4]
.text:0040EDCD                 push    ecx
.text:0040EDCE                 lea     ecx, [ebp+uBytes]
.text:0040EDD1                 push    ecx
.text:0040EDD2                 push    eax
.text:0040EDD3                 lea     eax, [ebp+var_28]
.text:0040EDD6                 push    eax
.text:0040EDD7                 push    esi
.text:0040EDD8                 call    ds:BcdEnumerateObjects
.text:0040EDDE                 mov     esi, eax
.text:0040EDE0                 test    esi, esi
.text:0040EDE2                 js      loc_40EE6B
.text:0040EDE8                 mov     eax, [ebp+var_4]
.text:0040EDEB                 mov     dword_413AA0, eax
.text:0040EDF0                 imul    eax, 1D0h
.text:0040EDF6                 push    eax             ; uBytes
.text:0040EDF7                 push    40h ; '@'       ; uFlags
.text:0040EDF9                 call    ds:LocalAlloc
.text:0040EDFF                 mov     ebx, eax
.text:0040EE01                 mov     [ebp+var_20], ebx
.text:0040EE04                 test    ebx, ebx
.text:0040EE06                 jnz     short loc_40EE0F
.text:0040EE08                 mov     esi, 0C0000017h
.text:0040EE0D                 jmp     short loc_40EE6B
.text:0040EE0F ; ---------------------------------------------------------------------------
.text:0040EE0F
.text:0040EE0F loc_40EE0F:                             ; CODE XREF: sub_40ED73+93↑j
.text:0040EE0F                 xor     edi, edi
.text:0040EE11                 and     [ebp+var_10], edi
.text:0040EE14                 cmp     [ebp+var_4], edi
.text:0040EE17                 jbe     short loc_40EE6B
.text:0040EE19                 mov     eax, [ebp+hMem]
.text:0040EE1C                 mov     [ebp+var_C], eax
.text:0040EE1F
.text:0040EE1F loc_40EE1F:                             ; CODE XREF: sub_40ED73+E1↓j
.text:0040EE1F                 lea     ecx, [ebx+20h]
.text:0040EE22                 call    sub_40E817
.text:0040EE27                 mov     esi, eax
.text:0040EE29                 test    esi, esi
.text:0040EE2B                 js      short loc_40EE46
.text:0040EE2D                 mov     edx, [ebp+var_C]
.text:0040EE30                 mov     ecx, [ebp+var_1C]
.text:0040EE33                 push    ebx
.text:0040EE34                 call    sub_40EED6
.text:0040EE39                 mov     esi, eax
.text:0040EE3B                 test    esi, esi
.text:0040EE3D                 js      short loc_40EE46
.text:0040EE3F                 inc     edi
.text:0040EE40                 add     ebx, 1D0h
.text:0040EE46
.text:0040EE46 loc_40EE46:                             ; CODE XREF: sub_40ED73+B8↑j
.text:0040EE46                                         ; sub_40ED73+CA↑j
.text:0040EE46                 mov     eax, [ebp+var_10]
.text:0040EE49                 add     [ebp+var_C], 14h
.text:0040EE4D                 inc     eax
.text:0040EE4E                 mov     [ebp+var_10], eax
.text:0040EE51                 cmp     eax, [ebp+var_4]
.text:0040EE54                 jb      short loc_40EE1F
.text:0040EE56                 mov     ebx, [ebp+var_20]
.text:0040EE59                 test    edi, edi
.text:0040EE5B                 jz      short loc_40EE6B
.text:0040EE5D                 xor     esi, esi
.text:0040EE5F                 mov     hMem, ebx
.text:0040EE65                 mov     dword_413AA0, edi
.text:0040EE6B
.text:0040EE6B loc_40EE6B:                             ; CODE XREF: sub_40ED73+6F↑j
.text:0040EE6B                                         ; sub_40ED73+9A↑j ...
.text:0040EE6B                 push    [ebp+hMem]      ; hMem
.text:0040EE6E                 call    ds:LocalFree
.text:0040EE74                 test    esi, esi
.text:0040EE76                 jns     short loc_40EECB
.text:0040EE78                 test    ebx, ebx
.text:0040EE7A                 jz      short loc_40EEB6
.text:0040EE7C                 xor     eax, eax
.text:0040EE7E                 mov     [ebp+var_C], eax
.text:0040EE81                 cmp     [ebp+var_4], eax
.text:0040EE84                 jbe     short loc_40EEB6
.text:0040EE86                 lea     edi, [ebx+10h]
.text:0040EE89
.text:0040EE89 loc_40EE89:                             ; CODE XREF: sub_40ED73+141↓j
.text:0040EE89                 cmp     dword ptr [edi], 0
.text:0040EE8C                 jz      short loc_40EEA7
.text:0040EE8E                 push    dword ptr [edi] ; hMem
.text:0040EE90                 call    ds:LocalFree
.text:0040EE96                 cmp     dword ptr [edi], 0
.text:0040EE99                 jz      short loc_40EEA4
.text:0040EE9B                 push    dword ptr [edi+4] ; hMem
.text:0040EE9E                 call    ds:LocalFree
.text:0040EEA4
.text:0040EEA4 loc_40EEA4:                             ; CODE XREF: sub_40ED73+126↑j
.text:0040EEA4                 mov     eax, [ebp+var_C]
.text:0040EEA7
.text:0040EEA7 loc_40EEA7:                             ; CODE XREF: sub_40ED73+119↑j
.text:0040EEA7                 inc     eax
.text:0040EEA8                 add     edi, 1D0h
.text:0040EEAE                 mov     [ebp+var_C], eax
.text:0040EEB1                 cmp     eax, [ebp+var_4]
.text:0040EEB4                 jb      short loc_40EE89
.text:0040EEB6
.text:0040EEB6 loc_40EEB6:                             ; CODE XREF: sub_40ED73+52↑j
.text:0040EEB6                                         ; sub_40ED73+107↑j ...
.text:0040EEB6                 push    ebx             ; hMem
.text:0040EEB7                 call    ds:LocalFree
.text:0040EEBD                 and     hMem, 0
.text:0040EEC4                 and     dword_413AA0, 0
.text:0040EECB
.text:0040EECB loc_40EECB:                             ; CODE XREF: sub_40ED73+103↑j
.text:0040EECB                 pop     edi
.text:0040EECC                 mov     eax, esi
.text:0040EECE                 pop     esi
.text:0040EECF                 pop     ebx
.text:0040EED0                 mov     esp, ebp
.text:0040EED2                 pop     ebp
.text:0040EED3                 retn    4
.text:0040EED3 sub_40ED73      endp
.text:0040EED3
.text:0040EED6
.text:0040EED6 ; =============== S U B R O U T I N E =======================================
.text:0040EED6
.text:0040EED6 ; Attributes: bp-based frame
.text:0040EED6
.text:0040EED6 sub_40EED6      proc near               ; CODE XREF: sub_40ED73+C1↑p
.text:0040EED6
.text:0040EED6 var_8           = dword ptr -8
.text:0040EED6 var_4           = dword ptr -4
.text:0040EED6 arg_0           = dword ptr  8
.text:0040EED6
.text:0040EED6                 mov     edi, edi
.text:0040EED8                 push    ebp
.text:0040EED9                 mov     ebp, esp
.text:0040EEDB                 push    ecx
.text:0040EEDC                 push    ecx
.text:0040EEDD                 push    ebx
.text:0040EEDE                 mov     ebx, [ebp+arg_0]
.text:0040EEE1                 mov     eax, edx
.text:0040EEE3                 push    esi
.text:0040EEE4                 push    edi
.text:0040EEE5                 lea     edx, [ebp+var_4]
.text:0040EEE8                 mov     [ebp+var_8], eax
.text:0040EEEB                 push    edx
.text:0040EEEC                 xor     esi, esi
.text:0040EEEE                 lea     edi, [ebx+10h]
.text:0040EEF1                 push    eax
.text:0040EEF2                 push    ecx
.text:0040EEF3                 mov     [ebp+var_4], esi
.text:0040EEF6                 mov     [edi], esi
.text:0040EEF8                 mov     [ebx+14h], esi
.text:0040EEFB                 call    ds:BcdOpenObject
.text:0040EF01                 mov     esi, eax
.text:0040EF03                 test    esi, esi
.text:0040EF05                 js      short loc_40EF54
.text:0040EF07                 mov     esi, [ebp+var_8]
.text:0040EF0A                 lea     eax, [ebx+14h]
.text:0040EF0D                 mov     ecx, [ebp+var_4]
.text:0040EF10                 mov     edi, ebx
.text:0040EF12                 push    eax
.text:0040EF13                 movsd
.text:0040EF14                 movsd
.text:0040EF15                 movsd
.text:0040EF16                 movsd
.text:0040EF17                 lea     edi, [ebx+10h]
.text:0040EF1A                 mov     edx, edi
.text:0040EF1C                 call    sub_40EC1E
.text:0040EF21                 mov     esi, eax
.text:0040EF23                 test    esi, esi
.text:0040EF25                 js      short loc_40EF54
.text:0040EF27                 mov     ecx, [ebp+var_4]
.text:0040EF2A                 lea     edx, [ebx+20h]
.text:0040EF2D                 and     dword ptr [ebx+18h], 0
.text:0040EF31                 and     dword ptr [ebx+1Ch], 0
.text:0040EF35                 push    0Ch
.text:0040EF37                 call    sub_40F00A
.text:0040EF3C                 mov     esi, eax
.text:0040EF3E                 test    esi, esi
.text:0040EF40                 js      short loc_40EF54
.text:0040EF42                 push    [ebp+var_4]
.text:0040EF45                 call    ds:BcdCloseObject
.text:0040EF4B                 xor     eax, eax
.text:0040EF4D                 xor     esi, esi
.text:0040EF4F                 mov     [ebp+var_4], eax
.text:0040EF52                 jmp     short loc_40EF57
.text:0040EF54 ; ---------------------------------------------------------------------------
.text:0040EF54
.text:0040EF54 loc_40EF54:                             ; CODE XREF: sub_40EED6+2F↑j
.text:0040EF54                                         ; sub_40EED6+4F↑j ...
.text:0040EF54                 mov     eax, [ebp+var_4]
.text:0040EF57
.text:0040EF57 loc_40EF57:                             ; CODE XREF: sub_40EED6+7C↑j
.text:0040EF57                 test    eax, eax
.text:0040EF59                 jz      short loc_40EF62
.text:0040EF5B                 push    eax
.text:0040EF5C                 call    ds:BcdCloseObject
.text:0040EF62
.text:0040EF62 loc_40EF62:                             ; CODE XREF: sub_40EED6+83↑j
.text:0040EF62                 test    esi, esi
.text:0040EF64                 jns     short loc_40EF76
.text:0040EF66                 cmp     dword ptr [edi], 0
.text:0040EF69                 jz      short loc_40EF76
.text:0040EF6B                 push    dword ptr [edi] ; hMem
.text:0040EF6D                 call    ds:LocalFree
.text:0040EF73                 and     dword ptr [edi], 0
.text:0040EF76
.text:0040EF76 loc_40EF76:                             ; CODE XREF: sub_40EED6+8E↑j
.text:0040EF76                                         ; sub_40EED6+93↑j
.text:0040EF76                 pop     edi
.text:0040EF77                 mov     eax, esi
.text:0040EF79                 pop     esi
.text:0040EF7A                 pop     ebx
.text:0040EF7B                 mov     esp, ebp
.text:0040EF7D                 pop     ebp
.text:0040EF7E                 retn    4
.text:0040EF7E sub_40EED6      endp
.text:0040EF7E
.text:0040EF81
.text:0040EF81 ; =============== S U B R O U T I N E =======================================
.text:0040EF81
.text:0040EF81 ; Attributes: bp-based frame
.text:0040EF81
.text:0040EF81 sub_40EF81      proc near               ; CODE XREF: sub_40F00A+6B↓p
.text:0040EF81
.text:0040EF81 var_4           = dword ptr -4
.text:0040EF81 arg_0           = dword ptr  8
.text:0040EF81
.text:0040EF81                 mov     edi, edi
.text:0040EF83                 push    ebp
.text:0040EF84                 mov     ebp, esp
.text:0040EF86                 push    ecx
.text:0040EF87                 push    ebx
.text:0040EF88                 push    esi
.text:0040EF89                 mov     esi, [ebp+arg_0]
.text:0040EF8C                 xor     ebx, ebx
.text:0040EF8E                 push    edi
.text:0040EF8F                 mov     edi, ecx
.text:0040EF91                 mov     [ebp+var_4], ebx
.text:0040EF94                 mov     [esi+18h], ebx
.text:0040EF97                 cmp     [esi+8], ebx
.text:0040EF9A                 jz      short loc_40EFA9
.text:0040EF9C                 push    dword ptr [esi+8] ; Block
.text:0040EF9F                 call    ds:__imp_free
.text:0040EFA5                 pop     ecx
.text:0040EFA6                 mov     [esi+8], ebx
.text:0040EFA9
.text:0040EFA9 loc_40EFA9:                             ; CODE XREF: sub_40EF81+19↑j
.text:0040EFA9                 lea     eax, [ebp+var_4]
.text:0040EFAC                 push    eax
.text:0040EFAD                 push    ebx
.text:0040EFAE                 push    dword ptr [esi+4]
.text:0040EFB1                 push    edi
.text:0040EFB2                 call    ds:BcdGetElementData
.text:0040EFB8                 mov     ecx, eax
.text:0040EFBA                 cmp     ecx, 0C0000023h
.text:0040EFC0                 jnz     short loc_40EFF2
.text:0040EFC2                 mov     eax, [ebp+var_4]
.text:0040EFC5                 shr     eax, 4
.text:0040EFC8                 push    10h             ; Size
.text:0040EFCA                 push    eax             ; Count
.text:0040EFCB                 call    ds:calloc
.text:0040EFD1                 mov     [esi+8], eax
.text:0040EFD4                 pop     ecx
.text:0040EFD5                 pop     ecx
.text:0040EFD6                 test    eax, eax
.text:0040EFD8                 jnz     short loc_40EFE1
.text:0040EFDA                 mov     ecx, 0C0000017h
.text:0040EFDF                 jmp     short loc_40EFFF
.text:0040EFE1 ; ---------------------------------------------------------------------------
.text:0040EFE1
.text:0040EFE1 loc_40EFE1:                             ; CODE XREF: sub_40EF81+57↑j
.text:0040EFE1                 lea     ecx, [ebp+var_4]
.text:0040EFE4                 push    ecx
.text:0040EFE5                 push    eax
.text:0040EFE6                 push    dword ptr [esi+4]
.text:0040EFE9                 push    edi
.text:0040EFEA                 call    ds:BcdGetElementData
.text:0040EFF0                 mov     ecx, eax
.text:0040EFF2
.text:0040EFF2 loc_40EFF2:                             ; CODE XREF: sub_40EF81+3F↑j
.text:0040EFF2                 test    ecx, ecx
.text:0040EFF4                 js      short loc_40EFFF
.text:0040EFF6                 mov     eax, [ebp+var_4]
.text:0040EFF9                 shr     eax, 4
.text:0040EFFC                 mov     [esi+18h], eax
.text:0040EFFF
.text:0040EFFF loc_40EFFF:                             ; CODE XREF: sub_40EF81+5E↑j
.text:0040EFFF                                         ; sub_40EF81+73↑j
.text:0040EFFF                 pop     edi
.text:0040F000                 pop     esi
.text:0040F001                 mov     eax, ecx
.text:0040F003                 pop     ebx
.text:0040F004                 mov     esp, ebp
.text:0040F006                 pop     ebp
.text:0040F007                 retn    4
.text:0040F007 sub_40EF81      endp
.text:0040F007
.text:0040F00A
.text:0040F00A ; =============== S U B R O U T I N E =======================================
.text:0040F00A
.text:0040F00A ; Attributes: bp-based frame
.text:0040F00A
.text:0040F00A sub_40F00A      proc near               ; CODE XREF: sub_40EED6+61↑p
.text:0040F00A                                         ; sub_40F131+57↓p ...
.text:0040F00A
.text:0040F00A var_8           = dword ptr -8
.text:0040F00A var_4           = dword ptr -4
.text:0040F00A arg_0           = dword ptr  8
.text:0040F00A
.text:0040F00A                 mov     edi, edi
.text:0040F00C                 push    ebp
.text:0040F00D                 mov     ebp, esp
.text:0040F00F                 push    ecx
.text:0040F010                 push    ecx
.text:0040F011                 and     [ebp+var_4], 0
.text:0040F015                 and     [ebp+var_8], 0
.text:0040F019                 cmp     [ebp+arg_0], 0
.text:0040F01D                 push    ebx
.text:0040F01E                 push    esi
.text:0040F01F                 push    edi
.text:0040F020                 mov     ebx, ecx
.text:0040F022                 jbe     loc_40F118
.text:0040F028                 lea     esi, [edx+8]
.text:0040F02B
.text:0040F02B loc_40F02B:                             ; CODE XREF: sub_40F00A+108↓j
.text:0040F02B                 mov     edi, [esi-4]
.text:0040F02E                 mov     eax, edi
.text:0040F030                 shr     eax, 18h
.text:0040F033                 and     eax, 0Fh
.text:0040F036                 dec     eax
.text:0040F037                 sub     eax, 1
.text:0040F03A                 jz      short loc_40F085
.text:0040F03C                 sub     eax, 1
.text:0040F03F                 jz      short loc_40F07C
.text:0040F041                 sub     eax, 1
.text:0040F044                 jz      short loc_40F06F
.text:0040F046                 sub     eax, 1
.text:0040F049                 jz      short loc_40F066
.text:0040F04B                 sub     eax, 1
.text:0040F04E                 jnz     loc_40F123
.text:0040F054                 mov     [ebp+var_4], 2
.text:0040F05B
.text:0040F05B loc_40F05B:                             ; CODE XREF: sub_40F00A+63↓j
.text:0040F05B                                         ; sub_40F00A+79↓j
.text:0040F05B                 lea     eax, [ebp+var_4]
.text:0040F05E                 push    eax
.text:0040F05F                 push    esi
.text:0040F060                 push    edi
.text:0040F061                 jmp     loc_40F0E8
.text:0040F066 ; ---------------------------------------------------------------------------
.text:0040F066
.text:0040F066 loc_40F066:                             ; CODE XREF: sub_40F00A+3F↑j
.text:0040F066                 mov     [ebp+var_4], 8
.text:0040F06D                 jmp     short loc_40F05B
.text:0040F06F ; ---------------------------------------------------------------------------
.text:0040F06F
.text:0040F06F loc_40F06F:                             ; CODE XREF: sub_40F00A+3A↑j
.text:0040F06F                 lea     eax, [esi-8]
.text:0040F072                 mov     ecx, ebx
.text:0040F074                 push    eax
.text:0040F075                 call    sub_40EF81
.text:0040F07A                 jmp     short loc_40F0EF
.text:0040F07C ; ---------------------------------------------------------------------------
.text:0040F07C
.text:0040F07C loc_40F07C:                             ; CODE XREF: sub_40F00A+35↑j
.text:0040F07C                 mov     [ebp+var_4], 10h
.text:0040F083                 jmp     short loc_40F05B
.text:0040F085 ; ---------------------------------------------------------------------------
.text:0040F085
.text:0040F085 loc_40F085:                             ; CODE XREF: sub_40F00A+30↑j
.text:0040F085                 push    2               ; Size
.text:0040F087                 push    105h            ; Count
.text:0040F08C                 call    ds:calloc
.text:0040F092                 mov     [esi], eax
.text:0040F094                 pop     ecx
.text:0040F095                 pop     ecx
.text:0040F096                 test    eax, eax
.text:0040F098                 jz      loc_40F12A
.text:0040F09E                 lea     ecx, [ebp+var_4]
.text:0040F0A1                 mov     [ebp+var_4], 208h
.text:0040F0A8                 push    ecx
.text:0040F0A9                 push    eax
.text:0040F0AA                 push    edi
.text:0040F0AB                 push    ebx
.text:0040F0AC                 call    ds:BcdGetElementData
.text:0040F0B2                 cmp     eax, 0C0000023h
.text:0040F0B7                 jnz     short loc_40F0EF
.text:0040F0B9                 cmp     dword ptr [esi], 0
.text:0040F0BC                 jz      short loc_40F0C7
.text:0040F0BE                 push    dword ptr [esi] ; Block
.text:0040F0C0                 call    ds:__imp_free
.text:0040F0C6                 pop     ecx
.text:0040F0C7
.text:0040F0C7 loc_40F0C7:                             ; CODE XREF: sub_40F00A+B2↑j
.text:0040F0C7                 mov     eax, [ebp+var_4]
.text:0040F0CA                 shr     eax, 1
.text:0040F0CC                 add     eax, 2
.text:0040F0CF                 push    2               ; Size
.text:0040F0D1                 push    eax             ; Count
.text:0040F0D2                 call    ds:calloc
.text:0040F0D8                 mov     [esi], eax
.text:0040F0DA                 pop     ecx
.text:0040F0DB                 pop     ecx
.text:0040F0DC                 test    eax, eax
.text:0040F0DE                 jz      short loc_40F12A
.text:0040F0E0                 lea     ecx, [ebp+var_4]
.text:0040F0E3                 push    ecx
.text:0040F0E4                 push    eax
.text:0040F0E5                 push    dword ptr [esi-4]
.text:0040F0E8
.text:0040F0E8 loc_40F0E8:                             ; CODE XREF: sub_40F00A+57↑j
.text:0040F0E8                 push    ebx
.text:0040F0E9                 call    ds:BcdGetElementData
.text:0040F0EF
.text:0040F0EF loc_40F0EF:                             ; CODE XREF: sub_40F00A+70↑j
.text:0040F0EF                                         ; sub_40F00A+AD↑j
.text:0040F0EF                 test    eax, eax
.text:0040F0F1                 jns     short loc_40F0FA
.text:0040F0F3                 cmp     eax, 0C0000225h
.text:0040F0F8                 jnz     short loc_40F11A
.text:0040F0FA
.text:0040F0FA loc_40F0FA:                             ; CODE XREF: sub_40F00A+E7↑j
.text:0040F0FA                 cmp     eax, 0C0000225h
.text:0040F0FF                 jnz     short loc_40F105
.text:0040F101                 and     dword ptr [esi+18h], 0
.text:0040F105
.text:0040F105 loc_40F105:                             ; CODE XREF: sub_40F00A+F5↑j
.text:0040F105                 mov     ecx, [ebp+var_8]
.text:0040F108                 add     esi, 24h ; '$'
.text:0040F10B                 inc     ecx
.text:0040F10C                 mov     [ebp+var_8], ecx
.text:0040F10F                 cmp     ecx, [ebp+arg_0]
.text:0040F112                 jb      loc_40F02B
.text:0040F118
.text:0040F118 loc_40F118:                             ; CODE XREF: sub_40F00A+18↑j
.text:0040F118                 xor     eax, eax
.text:0040F11A
.text:0040F11A loc_40F11A:                             ; CODE XREF: sub_40F00A+EE↑j
.text:0040F11A                                         ; sub_40F00A+11E↓j ...
.text:0040F11A                 pop     edi
.text:0040F11B                 pop     esi
.text:0040F11C                 pop     ebx
.text:0040F11D                 mov     esp, ebp
.text:0040F11F                 pop     ebp
.text:0040F120                 retn    4
.text:0040F123 ; ---------------------------------------------------------------------------
.text:0040F123
.text:0040F123 loc_40F123:                             ; CODE XREF: sub_40F00A+44↑j
.text:0040F123                 mov     eax, 0C0000002h
.text:0040F128                 jmp     short loc_40F11A
.text:0040F12A ; ---------------------------------------------------------------------------
.text:0040F12A
.text:0040F12A loc_40F12A:                             ; CODE XREF: sub_40F00A+8E↑j
.text:0040F12A                                         ; sub_40F00A+D4↑j
.text:0040F12A                 mov     eax, 0C0000017h
.text:0040F12F                 jmp     short loc_40F11A
.text:0040F12F sub_40F00A      endp
.text:0040F12F
.text:0040F131
.text:0040F131 ; =============== S U B R O U T I N E =======================================
.text:0040F131
.text:0040F131 ; Attributes: bp-based frame
.text:0040F131
.text:0040F131 sub_40F131      proc near               ; CODE XREF: sub_40F254+86↓p
.text:0040F131
.text:0040F131 var_4           = dword ptr -4
.text:0040F131
.text:0040F131                 mov     edi, edi
.text:0040F133                 push    ebp
.text:0040F134                 mov     ebp, esp
.text:0040F136                 push    ecx
.text:0040F137                 and     [ebp+var_4], 0
.text:0040F13B                 mov     edx, ecx
.text:0040F13D                 push    esi
.text:0040F13E                 call    sub_40E983
.text:0040F143                 mov     esi, eax
.text:0040F145                 test    esi, esi
.text:0040F147                 js      short loc_40F18F
.text:0040F149                 lea     eax, [ebp+var_4]
.text:0040F14C                 push    eax
.text:0040F14D                 push    offset dword_4036A4
.text:0040F152                 push    edx
.text:0040F153                 call    ds:BcdOpenObject
.text:0040F159                 mov     esi, eax
.text:0040F15B                 cmp     esi, 0C0000034h
.text:0040F161                 jnz     short loc_40F17A
.text:0040F163                 xor     eax, eax
.text:0040F165
.text:0040F165 loc_40F165:                             ; CODE XREF: sub_40F131+43↓j
.text:0040F165                 and     dword_413878[eax], 0
.text:0040F16C                 add     eax, 24h ; '$'
.text:0040F16F                 cmp     eax, 0B4h ; '´'
.text:0040F174                 jb      short loc_40F165
.text:0040F176                 xor     esi, esi
.text:0040F178                 jmp     short loc_40F18F
.text:0040F17A ; ---------------------------------------------------------------------------
.text:0040F17A
.text:0040F17A loc_40F17A:                             ; CODE XREF: sub_40F131+30↑j
.text:0040F17A                 test    esi, esi
.text:0040F17C                 js      short loc_40F18F
.text:0040F17E                 mov     ecx, [ebp+var_4]
.text:0040F181                 mov     edx, offset dword_413858
.text:0040F186                 push    5
.text:0040F188                 call    sub_40F00A
.text:0040F18D                 mov     esi, eax
.text:0040F18F
.text:0040F18F loc_40F18F:                             ; CODE XREF: sub_40F131+16↑j
.text:0040F18F                                         ; sub_40F131+47↑j ...
.text:0040F18F                 cmp     [ebp+var_4], 0
.text:0040F193                 jz      short loc_40F19E
.text:0040F195                 push    [ebp+var_4]
.text:0040F198                 call    ds:BcdCloseObject
.text:0040F19E
.text:0040F19E loc_40F19E:                             ; CODE XREF: sub_40F131+62↑j
.text:0040F19E                 mov     eax, esi
.text:0040F1A0                 pop     esi
.text:0040F1A1                 mov     esp, ebp
.text:0040F1A3                 pop     ebp
.text:0040F1A4                 retn
.text:0040F1A4 sub_40F131      endp
.text:0040F1A4
.text:0040F1A5
.text:0040F1A5 ; =============== S U B R O U T I N E =======================================
.text:0040F1A5
.text:0040F1A5 ; Attributes: bp-based frame
.text:0040F1A5
.text:0040F1A5 sub_40F1A5      proc near               ; CODE XREF: sub_40F254+74↓p
.text:0040F1A5
.text:0040F1A5 var_4           = dword ptr -4
.text:0040F1A5
.text:0040F1A5                 mov     edi, edi
.text:0040F1A7                 push    ebp
.text:0040F1A8                 mov     ebp, esp
.text:0040F1AA                 push    ecx
.text:0040F1AB                 xor     eax, eax
.text:0040F1AD                 mov     dword_413914, 25000004h
.text:0040F1B7                 inc     eax
.text:0040F1B8                 mov     dword_413938, 23000003h
.text:0040F1C2                 xor     edx, edx
.text:0040F1C4                 mov     dword_413930, eax
.text:0040F1C9                 push    esi
.text:0040F1CA                 mov     dword_413954, eax
.text:0040F1CF                 mov     dword_413978, eax
.text:0040F1D4                 lea     eax, [ebp+var_4]
.text:0040F1D7                 push    eax
.text:0040F1D8                 push    offset dword_403694
.text:0040F1DD                 push    ecx
.text:0040F1DE                 mov     [ebp+var_4], edx
.text:0040F1E1                 mov     dword_413910, edx
.text:0040F1E7                 mov     dword_413928, edx
.text:0040F1ED                 mov     dword_41392C, edx
.text:0040F1F3                 mov     dword_413934, edx
.text:0040F1F9                 mov     dword_41394C, edx
.text:0040F1FF                 mov     dword_413950, edx
.text:0040F205                 mov     dword_413958, edx
.text:0040F20B                 mov     dword_41395C, 24000001h
.text:0040F215                 mov     dword_413970, edx
.text:0040F21B                 mov     dword_413974, edx
.text:0040F221                 call    ds:BcdOpenObject
.text:0040F227                 mov     esi, eax
.text:0040F229                 test    esi, esi
.text:0040F22B                 js      short loc_40F23E
.text:0040F22D                 mov     ecx, [ebp+var_4]
.text:0040F230                 mov     edx, offset dword_413910
.text:0040F235                 push    3
.text:0040F237                 call    sub_40F00A
.text:0040F23C                 mov     esi, eax
.text:0040F23E
.text:0040F23E loc_40F23E:                             ; CODE XREF: sub_40F1A5+86↑j
.text:0040F23E                 cmp     [ebp+var_4], 0
.text:0040F242                 jz      short loc_40F24D
.text:0040F244                 push    [ebp+var_4]
.text:0040F247                 call    ds:BcdCloseObject
.text:0040F24D
.text:0040F24D loc_40F24D:                             ; CODE XREF: sub_40F1A5+9D↑j
.text:0040F24D                 mov     eax, esi
.text:0040F24F                 pop     esi
.text:0040F250                 mov     esp, ebp
.text:0040F252                 pop     ebp
.text:0040F253                 retn
.text:0040F253 sub_40F1A5      endp
.text:0040F253
.text:0040F254
.text:0040F254 ; =============== S U B R O U T I N E =======================================
.text:0040F254
.text:0040F254 ; Attributes: bp-based frame
.text:0040F254
.text:0040F254 sub_40F254      proc near               ; CODE XREF: sub_40A9B6+20↑p
.text:0040F254
.text:0040F254 DestinationString= _UNICODE_STRING ptr -28h
.text:0040F254 SourceString    = dword ptr -20h
.text:0040F254 var_1C          = dword ptr -1Ch
.text:0040F254 var_18          = dword ptr -18h
.text:0040F254 Source1         = byte ptr -14h
.text:0040F254 var_4           = dword ptr -4
.text:0040F254
.text:0040F254                 mov     edi, edi
.text:0040F256                 push    ebp
.text:0040F257                 mov     ebp, esp
.text:0040F259                 sub     esp, 28h
.text:0040F25C                 mov     eax, ___security_cookie
.text:0040F261                 xor     eax, ebp
.text:0040F263                 mov     [ebp+var_4], eax
.text:0040F266                 push    ebx
.text:0040F267                 push    esi
.text:0040F268                 push    edi
.text:0040F269                 xor     ebx, ebx
.text:0040F26B                 mov     edi, ecx
.text:0040F26D                 mov     [ebp+var_18], ebx
.text:0040F270                 mov     [ebp+var_1C], ebx
.text:0040F273                 test    edi, edi
.text:0040F275                 jz      short loc_40F2B1
.text:0040F277                 lea     edx, [ebp+SourceString]
.text:0040F27A                 call    sub_40EBA6
.text:0040F27F                 mov     esi, eax
.text:0040F281                 test    esi, esi
.text:0040F283                 js      loc_40F388
.text:0040F289                 push    [ebp+SourceString] ; SourceString
.text:0040F28C                 lea     eax, [ebp+DestinationString]
.text:0040F28F                 push    eax             ; DestinationString
.text:0040F290                 call    ds:RtlInitUnicodeString
.text:0040F296                 lea     eax, [ebp+var_18]
.text:0040F299                 push    eax
.text:0040F29A                 lea     eax, [ebp+DestinationString]
.text:0040F29D                 push    eax
.text:0040F29E                 call    ds:BcdOpenStoreFromFile
.text:0040F2A4                 push    [ebp+SourceString] ; hMem
.text:0040F2A7                 mov     esi, eax
.text:0040F2A9                 call    ds:LocalFree
.text:0040F2AF                 jmp     short loc_40F2BD
.text:0040F2B1 ; ---------------------------------------------------------------------------
.text:0040F2B1
.text:0040F2B1 loc_40F2B1:                             ; CODE XREF: sub_40F254+21↑j
.text:0040F2B1                 lea     eax, [ebp+var_18]
.text:0040F2B4                 push    eax
.text:0040F2B5                 call    ds:BcdOpenSystemStore
.text:0040F2BB                 mov     esi, eax
.text:0040F2BD
.text:0040F2BD loc_40F2BD:                             ; CODE XREF: sub_40F254+5B↑j
.text:0040F2BD                 test    esi, esi
.text:0040F2BF                 js      loc_40F388
.text:0040F2C5                 mov     ecx, [ebp+var_18]
.text:0040F2C8                 call    sub_40F1A5
.text:0040F2CD                 mov     esi, eax
.text:0040F2CF                 test    esi, esi
.text:0040F2D1                 js      loc_40F388
.text:0040F2D7                 mov     ecx, [ebp+var_18]
.text:0040F2DA                 call    sub_40F131
.text:0040F2DF                 mov     esi, eax
.text:0040F2E1                 test    esi, esi
.text:0040F2E3                 js      loc_40F388
.text:0040F2E9                 push    ecx
.text:0040F2EA                 mov     ecx, [ebp+var_18]
.text:0040F2ED                 call    sub_40ED73
.text:0040F2F2                 mov     esi, eax
.text:0040F2F4                 test    esi, esi
.text:0040F2F6                 js      loc_40F388
.text:0040F2FC                 test    edi, edi
.text:0040F2FE                 jz      short loc_40F318
.text:0040F300                 push    [ebp+var_18]
.text:0040F303                 call    ds:BcdCloseStore
.text:0040F309                 lea     eax, [ebp+var_18]
.text:0040F30C                 mov     [ebp+var_18], ebx
.text:0040F30F                 push    eax
.text:0040F310                 call    ds:BcdOpenSystemStore
.text:0040F316                 mov     esi, eax
.text:0040F318
.text:0040F318 loc_40F318:                             ; CODE XREF: sub_40F254+AA↑j
.text:0040F318                 test    esi, esi
.text:0040F31A                 js      short loc_40F386
.text:0040F31C                 lea     eax, [ebp+var_1C]
.text:0040F31F                 push    eax
.text:0040F320                 push    offset dword_4036B4
.text:0040F325                 push    [ebp+var_18]
.text:0040F328                 call    ds:BcdOpenObject
.text:0040F32E                 test    eax, eax
.text:0040F330                 js      short loc_40F386
.text:0040F332                 lea     eax, [ebp+Source1]
.text:0040F335                 push    eax
.text:0040F336                 push    ebx
.text:0040F337                 push    ebx
.text:0040F338                 push    [ebp+var_1C]
.text:0040F33B                 call    ds:BcdQueryObject
.text:0040F341                 test    eax, eax
.text:0040F343                 js      short loc_40F386
.text:0040F345                 mov     edi, ebx
.text:0040F347                 cmp     dword_413AA0, ebx
.text:0040F34D                 jbe     short loc_40F386
.text:0040F34F                 mov     esi, ebx
.text:0040F351
.text:0040F351 loc_40F351:                             ; CODE XREF: sub_40F254+130↓j
.text:0040F351                 mov     eax, hMem
.text:0040F356                 push    10h             ; Length
.text:0040F358                 add     eax, esi
.text:0040F35A                 push    eax             ; Source2
.text:0040F35B                 lea     eax, [ebp+Source1]
.text:0040F35E                 push    eax             ; Source1
.text:0040F35F                 call    ds:RtlCompareMemory
.text:0040F365                 cmp     eax, 10h
.text:0040F368                 jnz     short loc_40F377
.text:0040F36A                 mov     eax, hMem
.text:0040F36F                 mov     dword ptr [esi+eax+1Ch], 1
.text:0040F377
.text:0040F377 loc_40F377:                             ; CODE XREF: sub_40F254+114↑j
.text:0040F377                 inc     edi
.text:0040F378                 add     esi, 1D0h
.text:0040F37E                 cmp     edi, dword_413AA0
.text:0040F384                 jb      short loc_40F351
.text:0040F386
.text:0040F386 loc_40F386:                             ; CODE XREF: sub_40F254+C6↑j
.text:0040F386                                         ; sub_40F254+DC↑j ...
.text:0040F386                 mov     esi, ebx
.text:0040F388
.text:0040F388 loc_40F388:                             ; CODE XREF: sub_40F254+2F↑j
.text:0040F388                                         ; sub_40F254+6B↑j ...
.text:0040F388                 cmp     [ebp+var_1C], ebx
.text:0040F38B                 jz      short loc_40F396
.text:0040F38D                 push    [ebp+var_1C]
.text:0040F390                 call    ds:BcdCloseObject
.text:0040F396
.text:0040F396 loc_40F396:                             ; CODE XREF: sub_40F254+137↑j
.text:0040F396                 cmp     [ebp+var_18], ebx
.text:0040F399                 jz      short loc_40F3A4
.text:0040F39B                 push    [ebp+var_18]
.text:0040F39E                 call    ds:BcdCloseStore
.text:0040F3A4
.text:0040F3A4 loc_40F3A4:                             ; CODE XREF: sub_40F254+145↑j
.text:0040F3A4                 push    esi             ; Status
.text:0040F3A5                 call    ds:RtlNtStatusToDosError
.text:0040F3AB                 mov     ecx, [ebp+var_4]
.text:0040F3AE                 pop     edi
.text:0040F3AF                 pop     esi
.text:0040F3B0                 xor     ecx, ebp        ; StackCookie
.text:0040F3B2                 pop     ebx
.text:0040F3B3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040F3B8                 mov     esp, ebp
.text:0040F3BA                 pop     ebp
.text:0040F3BB                 retn
.text:0040F3BB sub_40F254      endp
.text:0040F3BB
.text:0040F3BC
.text:0040F3BC ; =============== S U B R O U T I N E =======================================
.text:0040F3BC
.text:0040F3BC ; Attributes: bp-based frame
.text:0040F3BC
.text:0040F3BC sub_40F3BC      proc near               ; CODE XREF: sub_40F498+5A↓p
.text:0040F3BC                                         ; sub_40F511+75↓p ...
.text:0040F3BC
.text:0040F3BC var_8           = dword ptr -8
.text:0040F3BC var_4           = dword ptr -4
.text:0040F3BC arg_0           = dword ptr  8
.text:0040F3BC
.text:0040F3BC                 mov     edi, edi
.text:0040F3BE                 push    ebp
.text:0040F3BF                 mov     ebp, esp
.text:0040F3C1                 push    ecx
.text:0040F3C2                 push    ecx
.text:0040F3C3                 push    ebx
.text:0040F3C4                 xor     eax, eax
.text:0040F3C6                 mov     ebx, eax
.text:0040F3C8                 mov     [ebp+var_4], eax
.text:0040F3CB                 push    esi
.text:0040F3CC                 push    edi
.text:0040F3CD                 mov     edi, ecx
.text:0040F3CF                 cmp     [ebp+arg_0], eax
.text:0040F3D2                 jbe     loc_40F484
.text:0040F3D8                 lea     esi, [edx+8]
.text:0040F3DB
.text:0040F3DB loc_40F3DB:                             ; CODE XREF: sub_40F3BC+C2↓j
.text:0040F3DB                 cmp     [esi+14h], eax
.text:0040F3DE                 jz      loc_40F477
.text:0040F3E4                 cmp     [esi+18h], eax
.text:0040F3E7                 jnz     short loc_40F407
.text:0040F3E9                 push    dword ptr [esi-4]
.text:0040F3EC                 push    edi
.text:0040F3ED                 call    ds:BcdDeleteElement
.text:0040F3F3                 lea     ecx, [eax+3FFFFDDBh]
.text:0040F3F9                 neg     ecx
.text:0040F3FB                 sbb     ecx, ecx
.text:0040F3FD                 and     ecx, eax
.text:0040F3FF                 jl      loc_40F486
.text:0040F405                 jmp     short loc_40F472
.text:0040F407 ; ---------------------------------------------------------------------------
.text:0040F407
.text:0040F407 loc_40F407:                             ; CODE XREF: sub_40F3BC+2B↑j
.text:0040F407                 mov     ecx, [esi-4]
.text:0040F40A                 mov     eax, ecx
.text:0040F40C                 shr     eax, 18h
.text:0040F40F                 and     eax, 0Fh
.text:0040F412                 dec     eax
.text:0040F413                 sub     eax, 1
.text:0040F416                 jz      short loc_40F441
.text:0040F418                 sub     eax, 1
.text:0040F41B                 jz      short loc_40F43D
.text:0040F41D                 sub     eax, 1
.text:0040F420                 jz      short loc_40F435
.text:0040F422                 sub     eax, 1
.text:0040F425                 jz      short loc_40F431
.text:0040F427                 sub     eax, 1
.text:0040F42A                 jnz     short loc_40F491
.text:0040F42C                 push    2
.text:0040F42E
.text:0040F42E loc_40F42E:                             ; CODE XREF: sub_40F3BC+77↓j
.text:0040F42E                                         ; sub_40F3BC+83↓j
.text:0040F42E                 push    esi
.text:0040F42F                 jmp     short loc_40F464
.text:0040F431 ; ---------------------------------------------------------------------------
.text:0040F431
.text:0040F431 loc_40F431:                             ; CODE XREF: sub_40F3BC+69↑j
.text:0040F431                 push    8
.text:0040F433                 jmp     short loc_40F42E
.text:0040F435 ; ---------------------------------------------------------------------------
.text:0040F435
.text:0040F435 loc_40F435:                             ; CODE XREF: sub_40F3BC+64↑j
.text:0040F435                 mov     eax, [esi+10h]
.text:0040F438                 shl     eax, 4
.text:0040F43B                 jmp     short loc_40F461
.text:0040F43D ; ---------------------------------------------------------------------------
.text:0040F43D
.text:0040F43D loc_40F43D:                             ; CODE XREF: sub_40F3BC+5F↑j
.text:0040F43D                 push    10h
.text:0040F43F                 jmp     short loc_40F42E
.text:0040F441 ; ---------------------------------------------------------------------------
.text:0040F441
.text:0040F441 loc_40F441:                             ; CODE XREF: sub_40F3BC+5A↑j
.text:0040F441                 mov     edx, [esi]
.text:0040F443                 lea     eax, [edx+2]
.text:0040F446                 mov     [ebp+var_8], eax
.text:0040F449
.text:0040F449 loc_40F449:                             ; CODE XREF: sub_40F3BC+97↓j
.text:0040F449                 mov     ax, [edx]
.text:0040F44C                 add     edx, 2
.text:0040F44F                 cmp     ax, word ptr [ebp+var_4]
.text:0040F453                 jnz     short loc_40F449
.text:0040F455                 sub     edx, [ebp+var_8]
.text:0040F458                 sar     edx, 1
.text:0040F45A                 lea     eax, ds:2[edx*2]
.text:0040F461
.text:0040F461 loc_40F461:                             ; CODE XREF: sub_40F3BC+7F↑j
.text:0040F461                 push    eax
.text:0040F462                 push    dword ptr [esi]
.text:0040F464
.text:0040F464 loc_40F464:                             ; CODE XREF: sub_40F3BC+73↑j
.text:0040F464                 push    ecx
.text:0040F465                 push    edi
.text:0040F466                 call    ds:BcdSetElementData
.text:0040F46C                 mov     ecx, eax
.text:0040F46E                 test    ecx, ecx
.text:0040F470                 js      short loc_40F486
.text:0040F472
.text:0040F472 loc_40F472:                             ; CODE XREF: sub_40F3BC+49↑j
.text:0040F472                 xor     eax, eax
.text:0040F474                 mov     [esi+14h], eax
.text:0040F477
.text:0040F477 loc_40F477:                             ; CODE XREF: sub_40F3BC+22↑j
.text:0040F477                 inc     ebx
.text:0040F478                 add     esi, 24h ; '$'
.text:0040F47B                 cmp     ebx, [ebp+arg_0]
.text:0040F47E                 jb      loc_40F3DB
.text:0040F484
.text:0040F484 loc_40F484:                             ; CODE XREF: sub_40F3BC+16↑j
.text:0040F484                 mov     ecx, eax
.text:0040F486
.text:0040F486 loc_40F486:                             ; CODE XREF: sub_40F3BC+43↑j
.text:0040F486                                         ; sub_40F3BC+B4↑j ...
.text:0040F486                 pop     edi
.text:0040F487                 pop     esi
.text:0040F488                 mov     eax, ecx
.text:0040F48A                 pop     ebx
.text:0040F48B                 mov     esp, ebp
.text:0040F48D                 pop     ebp
.text:0040F48E                 retn    4
.text:0040F491 ; ---------------------------------------------------------------------------
.text:0040F491
.text:0040F491 loc_40F491:                             ; CODE XREF: sub_40F3BC+6E↑j
.text:0040F491                 mov     ecx, 0C0000002h
.text:0040F496                 jmp     short loc_40F486
.text:0040F496 sub_40F3BC      endp
.text:0040F496
.text:0040F498
.text:0040F498 ; =============== S U B R O U T I N E =======================================
.text:0040F498
.text:0040F498 ; Attributes: bp-based frame
.text:0040F498
.text:0040F498 sub_40F498      proc near               ; CODE XREF: sub_40F610+5F↓p
.text:0040F498
.text:0040F498 var_C           = dword ptr -0Ch
.text:0040F498 var_8           = dword ptr -8
.text:0040F498 var_4           = dword ptr -4
.text:0040F498
.text:0040F498                 mov     edi, edi
.text:0040F49A                 push    ebp
.text:0040F49B                 mov     ebp, esp
.text:0040F49D                 sub     esp, 0Ch
.text:0040F4A0                 and     [ebp+var_4], 0
.text:0040F4A4                 lea     eax, [ebp+var_4]
.text:0040F4A7                 push    ebx
.text:0040F4A8                 push    esi
.text:0040F4A9                 push    edi
.text:0040F4AA                 push    eax
.text:0040F4AB                 mov     ebx, offset dword_4036A4
.text:0040F4B0                 mov     edi, ecx
.text:0040F4B2                 push    ebx
.text:0040F4B3                 push    edi
.text:0040F4B4                 call    ds:BcdOpenObject
.text:0040F4BA                 mov     esi, eax
.text:0040F4BC                 cmp     esi, 0C0000034h
.text:0040F4C2                 jnz     short loc_40F4E4
.text:0040F4C4                 lea     eax, [ebp+var_4]
.text:0040F4C7                 mov     [ebp+var_C], 1
.text:0040F4CE                 push    eax
.text:0040F4CF                 lea     eax, [ebp+var_C]
.text:0040F4D2                 mov     [ebp+var_8], 20100000h
.text:0040F4D9                 push    eax
.text:0040F4DA                 push    ebx
.text:0040F4DB                 push    edi
.text:0040F4DC                 call    ds:BcdCreateObject
.text:0040F4E2                 mov     esi, eax
.text:0040F4E4
.text:0040F4E4 loc_40F4E4:                             ; CODE XREF: sub_40F498+2A↑j
.text:0040F4E4                 test    esi, esi
.text:0040F4E6                 js      short loc_40F4F9
.text:0040F4E8                 mov     ecx, [ebp+var_4]
.text:0040F4EB                 mov     edx, offset dword_413858
.text:0040F4F0                 push    5
.text:0040F4F2                 call    sub_40F3BC
.text:0040F4F7                 mov     esi, eax
.text:0040F4F9
.text:0040F4F9 loc_40F4F9:                             ; CODE XREF: sub_40F498+4E↑j
.text:0040F4F9                 cmp     [ebp+var_4], 0
.text:0040F4FD                 jz      short loc_40F508
.text:0040F4FF                 push    [ebp+var_4]
.text:0040F502                 call    ds:BcdCloseObject
.text:0040F508
.text:0040F508 loc_40F508:                             ; CODE XREF: sub_40F498+65↑j
.text:0040F508                 pop     edi
.text:0040F509                 mov     eax, esi
.text:0040F50B                 pop     esi
.text:0040F50C                 pop     ebx
.text:0040F50D                 mov     esp, ebp
.text:0040F50F                 pop     ebp
.text:0040F510                 retn
.text:0040F510 sub_40F498      endp
.text:0040F510
.text:0040F511
.text:0040F511 ; =============== S U B R O U T I N E =======================================
.text:0040F511
.text:0040F511 ; Attributes: bp-based frame
.text:0040F511
.text:0040F511 sub_40F511      proc near               ; CODE XREF: sub_40F610+6E↓p
.text:0040F511
.text:0040F511 var_C           = dword ptr -0Ch
.text:0040F511 var_8           = dword ptr -8
.text:0040F511 var_4           = dword ptr -4
.text:0040F511
.text:0040F511                 mov     edi, edi
.text:0040F513                 push    ebp
.text:0040F514                 mov     ebp, esp
.text:0040F516                 sub     esp, 0Ch
.text:0040F519                 and     [ebp+var_4], 0
.text:0040F51D                 push    ebx
.text:0040F51E                 mov     ebx, dword_413AA0
.text:0040F524                 mov     [ebp+var_8], ebx
.text:0040F527                 xor     ebx, ebx
.text:0040F529                 mov     eax, [ebp+var_8]
.text:0040F52C                 mov     [ebp+var_C], ecx
.text:0040F52F                 push    esi
.text:0040F530                 push    edi
.text:0040F531                 mov     edi, hMem
.text:0040F537                 test    eax, eax
.text:0040F539                 jz      short loc_40F5A2
.text:0040F53B
.text:0040F53B loc_40F53B:                             ; CODE XREF: sub_40F511+8F↓j
.text:0040F53B                 test    edi, edi
.text:0040F53D                 jz      short loc_40F597
.text:0040F53F                 lea     eax, [ebp+var_4]
.text:0040F542                 push    eax
.text:0040F543                 push    edi
.text:0040F544                 push    ecx
.text:0040F545                 call    ds:BcdOpenObject
.text:0040F54B                 mov     esi, eax
.text:0040F54D                 test    esi, esi
.text:0040F54F                 jns     short loc_40F559
.text:0040F551                 cmp     dword ptr [edi+18h], 1
.text:0040F555                 jnz     short loc_40F5A4
.text:0040F557                 jmp     short loc_40F591
.text:0040F559 ; ---------------------------------------------------------------------------
.text:0040F559
.text:0040F559 loc_40F559:                             ; CODE XREF: sub_40F511+3E↑j
.text:0040F559                 cmp     dword ptr [edi+18h], 1
.text:0040F55D                 jnz     short loc_40F57E
.text:0040F55F                 push    [ebp+var_4]
.text:0040F562                 call    ds:BcdDeleteObject
.text:0040F568                 mov     esi, eax
.text:0040F56A                 test    esi, esi
.text:0040F56C                 js      short loc_40F5A4
.text:0040F56E                 and     [ebp+var_4], 0
.text:0040F572                 push    edi
.text:0040F573                 push    [ebp+var_C]
.text:0040F576                 call    ds:BcdDeleteObjectReferences
.text:0040F57C                 jmp     short loc_40F58B
.text:0040F57E ; ---------------------------------------------------------------------------
.text:0040F57E
.text:0040F57E loc_40F57E:                             ; CODE XREF: sub_40F511+4C↑j
.text:0040F57E                 mov     ecx, [ebp+var_4]
.text:0040F581                 lea     edx, [edi+20h]
.text:0040F584                 push    0Ch
.text:0040F586                 call    sub_40F3BC
.text:0040F58B
.text:0040F58B loc_40F58B:                             ; CODE XREF: sub_40F511+6B↑j
.text:0040F58B                 mov     esi, eax
.text:0040F58D                 test    esi, esi
.text:0040F58F                 js      short loc_40F5A4
.text:0040F591
.text:0040F591 loc_40F591:                             ; CODE XREF: sub_40F511+46↑j
.text:0040F591                 mov     eax, [ebp+var_8]
.text:0040F594                 mov     ecx, [ebp+var_C]
.text:0040F597
.text:0040F597 loc_40F597:                             ; CODE XREF: sub_40F511+2C↑j
.text:0040F597                 inc     ebx
.text:0040F598                 add     edi, 1D0h
.text:0040F59E                 cmp     ebx, eax
.text:0040F5A0                 jb      short loc_40F53B
.text:0040F5A2
.text:0040F5A2 loc_40F5A2:                             ; CODE XREF: sub_40F511+28↑j
.text:0040F5A2                 xor     esi, esi
.text:0040F5A4
.text:0040F5A4 loc_40F5A4:                             ; CODE XREF: sub_40F511+44↑j
.text:0040F5A4                                         ; sub_40F511+5B↑j ...
.text:0040F5A4                 cmp     [ebp+var_4], 0
.text:0040F5A8                 jz      short loc_40F5B3
.text:0040F5AA                 push    [ebp+var_4]
.text:0040F5AD                 call    ds:BcdCloseObject
.text:0040F5B3
.text:0040F5B3 loc_40F5B3:                             ; CODE XREF: sub_40F511+97↑j
.text:0040F5B3                 pop     edi
.text:0040F5B4                 mov     eax, esi
.text:0040F5B6                 pop     esi
.text:0040F5B7                 pop     ebx
.text:0040F5B8                 mov     esp, ebp
.text:0040F5BA                 pop     ebp
.text:0040F5BB                 retn    4
.text:0040F5BB sub_40F511      endp
.text:0040F5BB
.text:0040F5BE
.text:0040F5BE ; =============== S U B R O U T I N E =======================================
.text:0040F5BE
.text:0040F5BE
.text:0040F5BE sub_40F5BE      proc near               ; CODE XREF: sub_40F6A0+23↓p
.text:0040F5BE                                         ; sub_40F6A0+6A↓p ...
.text:0040F5BE                 mov     edi, edi
.text:0040F5C0                 push    edi
.text:0040F5C1                 mov     edi, edx
.text:0040F5C3                 test    edi, edi
.text:0040F5C5                 jz      short loc_40F60E
.text:0040F5C7                 push    esi
.text:0040F5C8                 lea     esi, [ecx+8]
.text:0040F5CB
.text:0040F5CB loc_40F5CB:                             ; CODE XREF: sub_40F5BE+4D↓j
.text:0040F5CB                 movzx   eax, byte ptr [esi-1]
.text:0040F5CF                 and     eax, 0Fh
.text:0040F5D2                 dec     eax
.text:0040F5D3                 sub     eax, 1
.text:0040F5D6                 jz      short loc_40F5F4
.text:0040F5D8                 dec     eax
.text:0040F5D9                 sub     eax, 1
.text:0040F5DC                 jnz     short loc_40F605
.text:0040F5DE                 cmp     [esi], eax
.text:0040F5E0                 jz      short loc_40F5EE
.text:0040F5E2                 push    dword ptr [esi] ; Block
.text:0040F5E4                 call    ds:__imp_free
.text:0040F5EA                 and     dword ptr [esi], 0
.text:0040F5ED                 pop     ecx
.text:0040F5EE
.text:0040F5EE loc_40F5EE:                             ; CODE XREF: sub_40F5BE+22↑j
.text:0040F5EE                 and     dword ptr [esi+10h], 0
.text:0040F5F2                 jmp     short loc_40F605
.text:0040F5F4 ; ---------------------------------------------------------------------------
.text:0040F5F4
.text:0040F5F4 loc_40F5F4:                             ; CODE XREF: sub_40F5BE+18↑j
.text:0040F5F4                 cmp     dword ptr [esi], 0
.text:0040F5F7                 jz      short loc_40F605
.text:0040F5F9                 push    dword ptr [esi] ; Block
.text:0040F5FB                 call    ds:__imp_free
.text:0040F601                 and     dword ptr [esi], 0
.text:0040F604                 pop     ecx
.text:0040F605
.text:0040F605 loc_40F605:                             ; CODE XREF: sub_40F5BE+1E↑j
.text:0040F605                                         ; sub_40F5BE+34↑j ...
.text:0040F605                 add     esi, 24h ; '$'
.text:0040F608                 sub     edi, 1
.text:0040F60B                 jnz     short loc_40F5CB
.text:0040F60D                 pop     esi
.text:0040F60E
.text:0040F60E loc_40F60E:                             ; CODE XREF: sub_40F5BE+7↑j
.text:0040F60E                 pop     edi
.text:0040F60F                 retn
.text:0040F60F sub_40F5BE      endp
.text:0040F60F
.text:0040F610
.text:0040F610 ; =============== S U B R O U T I N E =======================================
.text:0040F610
.text:0040F610 ; Attributes: bp-based frame
.text:0040F610
.text:0040F610 sub_40F610      proc near               ; CODE XREF: CPageBootIni::OnApply(void):loc_40BCA2↑p
.text:0040F610
.text:0040F610 var_8           = dword ptr -8
.text:0040F610 var_4           = dword ptr -4
.text:0040F610
.text:0040F610                 mov     edi, edi
.text:0040F612                 push    ebp
.text:0040F613                 mov     ebp, esp
.text:0040F615                 push    ecx
.text:0040F616                 push    ecx
.text:0040F617                 and     [ebp+var_4], 0
.text:0040F61B                 lea     eax, [ebp+var_4]
.text:0040F61E                 push    esi
.text:0040F61F                 push    eax
.text:0040F620                 call    ds:BcdOpenSystemStore
.text:0040F626                 mov     esi, eax
.text:0040F628                 test    esi, esi
.text:0040F62A                 js      short loc_40F685
.text:0040F62C                 and     [ebp+var_8], 0
.text:0040F630                 lea     eax, [ebp+var_8]
.text:0040F633                 push    eax
.text:0040F634                 push    offset dword_403694
.text:0040F639                 push    [ebp+var_4]
.text:0040F63C                 call    ds:BcdOpenObject
.text:0040F642                 mov     esi, eax
.text:0040F644                 test    esi, esi
.text:0040F646                 js      short loc_40F659
.text:0040F648                 mov     ecx, [ebp+var_8]
.text:0040F64B                 mov     edx, offset dword_413910
.text:0040F650                 push    3
.text:0040F652                 call    sub_40F3BC
.text:0040F657                 mov     esi, eax
.text:0040F659
.text:0040F659 loc_40F659:                             ; CODE XREF: sub_40F610+36↑j
.text:0040F659                 cmp     [ebp+var_8], 0
.text:0040F65D                 jz      short loc_40F668
.text:0040F65F                 push    [ebp+var_8]
.text:0040F662                 call    ds:BcdCloseObject
.text:0040F668
.text:0040F668 loc_40F668:                             ; CODE XREF: sub_40F610+4D↑j
.text:0040F668                 test    esi, esi
.text:0040F66A                 js      short loc_40F685
.text:0040F66C                 mov     ecx, [ebp+var_4]
.text:0040F66F                 call    sub_40F498
.text:0040F674                 mov     esi, eax
.text:0040F676                 test    esi, esi
.text:0040F678                 js      short loc_40F685
.text:0040F67A                 push    ecx
.text:0040F67B                 mov     ecx, [ebp+var_4]
.text:0040F67E                 call    sub_40F511
.text:0040F683                 mov     esi, eax
.text:0040F685
.text:0040F685 loc_40F685:                             ; CODE XREF: sub_40F610+1A↑j
.text:0040F685                                         ; sub_40F610+5A↑j ...
.text:0040F685                 cmp     [ebp+var_4], 0
.text:0040F689                 jz      short loc_40F694
.text:0040F68B                 push    [ebp+var_4]
.text:0040F68E                 call    ds:BcdCloseStore
.text:0040F694
.text:0040F694 loc_40F694:                             ; CODE XREF: sub_40F610+79↑j
.text:0040F694                 push    esi             ; Status
.text:0040F695                 call    ds:RtlNtStatusToDosError
.text:0040F69B                 pop     esi
.text:0040F69C                 mov     esp, ebp
.text:0040F69E                 pop     ebp
.text:0040F69F                 retn
.text:0040F69F sub_40F610      endp
.text:0040F69F
.text:0040F6A0
.text:0040F6A0 ; =============== S U B R O U T I N E =======================================
.text:0040F6A0
.text:0040F6A0
.text:0040F6A0 sub_40F6A0      proc near               ; CODE XREF: sub_40A900+18↑p
.text:0040F6A0                                         ; sub_40BF70+15↑p
.text:0040F6A0                 mov     edi, edi
.text:0040F6A2                 push    ebx
.text:0040F6A3                 xor     ebx, ebx
.text:0040F6A5                 push    esi
.text:0040F6A6                 mov     esi, ebx
.text:0040F6A8                 push    edi
.text:0040F6A9                 cmp     dword_413AA0, ebx
.text:0040F6AF                 jbe     short loc_40F6E8
.text:0040F6B1                 mov     edi, ebx
.text:0040F6B3
.text:0040F6B3 loc_40F6B3:                             ; CODE XREF: sub_40F6A0+44↓j
.text:0040F6B3                 mov     ebx, hMem
.text:0040F6B9                 add     ebx, edi
.text:0040F6BB                 jz      short loc_40F6D7
.text:0040F6BD                 push    0Ch
.text:0040F6BF                 lea     ecx, [ebx+20h]
.text:0040F6C2                 pop     edx
.text:0040F6C3                 call    sub_40F5BE
.text:0040F6C8                 cmp     dword ptr [ebx+10h], 0
.text:0040F6CC                 jz      short loc_40F6D7
.text:0040F6CE                 push    dword ptr [ebx+10h] ; hMem
.text:0040F6D1                 call    ds:LocalFree
.text:0040F6D7
.text:0040F6D7 loc_40F6D7:                             ; CODE XREF: sub_40F6A0+1B↑j
.text:0040F6D7                                         ; sub_40F6A0+2C↑j
.text:0040F6D7                 inc     esi
.text:0040F6D8                 add     edi, 1D0h
.text:0040F6DE                 cmp     esi, dword_413AA0
.text:0040F6E4                 jb      short loc_40F6B3
.text:0040F6E6                 xor     ebx, ebx
.text:0040F6E8
.text:0040F6E8 loc_40F6E8:                             ; CODE XREF: sub_40F6A0+F↑j
.text:0040F6E8                 push    hMem            ; hMem
.text:0040F6EE                 call    ds:LocalFree
.text:0040F6F4                 push    5
.text:0040F6F6                 mov     esi, offset dword_413858
.text:0040F6FB                 mov     hMem, ebx
.text:0040F701                 pop     edx
.text:0040F702                 mov     ecx, esi
.text:0040F704                 mov     dword_413AA0, ebx
.text:0040F70A                 call    sub_40F5BE
.text:0040F70F                 push    3
.text:0040F711                 mov     edi, offset dword_413910
.text:0040F716                 pop     edx
.text:0040F717                 mov     ecx, edi
.text:0040F719                 call    sub_40F5BE
.text:0040F71E                 push    0B4h ; '´'      ; Size
.text:0040F723                 push    ebx             ; Val
.text:0040F724                 push    esi             ; void *
.text:0040F725                 call    memset
.text:0040F72A                 push    6Ch ; 'l'       ; Size
.text:0040F72C                 push    ebx             ; Val
.text:0040F72D                 push    edi             ; void *
.text:0040F72E                 call    memset
.text:0040F733                 add     esp, 18h
.text:0040F736                 push    ebx             ; Status
.text:0040F737                 call    ds:RtlNtStatusToDosError
.text:0040F73D                 pop     edi
.text:0040F73E                 pop     esi
.text:0040F73F                 pop     ebx
.text:0040F740                 retn
.text:0040F740 sub_40F6A0      endp
.text:0040F740
.text:0040F740 ; ---------------------------------------------------------------------------
.text:0040F741                 align 2
.text:0040F742
.text:0040F742 ; =============== S U B R O U T I N E =======================================
.text:0040F742
.text:0040F742 ; Attributes: thunk
.text:0040F742
.text:0040F742 ; void __cdecl operator delete(void *)
.text:0040F742 ??3@YAXPAX@Z    proc near               ; CODE XREF: D3DXShader::C30Program::`scalar deleting destructor'(uint)+1A↓p
.text:0040F742                                         ; type_info::`scalar deleting destructor'(uint)+15↓p
.text:0040F742                 jmp     ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:0040F742 ??3@YAXPAX@Z    endp
.text:0040F742
.text:0040F742 ; ---------------------------------------------------------------------------
.text:0040F748                 align 10h
.text:0040F750
.text:0040F750 ; =============== S U B R O U T I N E =======================================
.text:0040F750
.text:0040F750 ; Attributes: thunk
.text:0040F750
.text:0040F750 ; int __thiscall CWnd::OnHelpInfo(CWnd *__hidden this, struct tagHELPINFO *)
.text:0040F750 ?OnHelpInfo@CWnd@@IAEHPAUtagHELPINFO@@@Z proc near
.text:0040F750                                         ; DATA XREF: .text:0040102C↑o
.text:0040F750                                         ; .text:00401C5C↑o ...
.text:0040F750                 jmp     ds:__imp_?OnHelpInfo@CWnd@@IAEHPAUtagHELPINFO@@@Z ; CWnd::OnHelpInfo(tagHELPINFO *)
.text:0040F750 ?OnHelpInfo@CWnd@@IAEHPAUtagHELPINFO@@@Z endp
.text:0040F750
.text:0040F750 ; ---------------------------------------------------------------------------
.text:0040F756                 align 10h
.text:0040F760
.text:0040F760 ; =============== S U B R O U T I N E =======================================
.text:0040F760
.text:0040F760 ; Attributes: thunk
.text:0040F760
.text:0040F760 ; struct CRuntimeClass *__thiscall CDialog::GetRuntimeClass(CDialog *__hidden this)
.text:0040F760 ?GetRuntimeClass@CDialog@@UBEPAUCRuntimeClass@@XZ proc near
.text:0040F760                                         ; DATA XREF: .text:const CAutoStartDlg::`vftable'↑o
.text:0040F760                                         ; .text:00402AC4↑o
.text:0040F760                 jmp     ds:__imp_?GetRuntimeClass@CDialog@@UBEPAUCRuntimeClass@@XZ ; CDialog::GetRuntimeClass(void)
.text:0040F760 ?GetRuntimeClass@CDialog@@UBEPAUCRuntimeClass@@XZ endp
.text:0040F760
.text:0040F760 ; ---------------------------------------------------------------------------
.text:0040F766                 align 10h
.text:0040F770
.text:0040F770 ; =============== S U B R O U T I N E =======================================
.text:0040F770
.text:0040F770 ; Attributes: thunk
.text:0040F770
.text:0040F770 ; int __thiscall CDialog::OnCmdMsg(CDialog *__hidden this, unsigned int, int, void *, struct AFX_CMDHANDLERINFO *)
.text:0040F770 ?OnCmdMsg@CDialog@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z proc near
.text:0040F770                                         ; DATA XREF: .text:00401080↑o
.text:0040F770                                         ; .text:0040127C↑o ...
.text:0040F770                 jmp     ds:__imp_?OnCmdMsg@CDialog@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z ; CDialog::OnCmdMsg(uint,int,void *,AFX_CMDHANDLERINFO *)
.text:0040F770 ?OnCmdMsg@CDialog@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z endp
.text:0040F770
.text:0040F770 ; ---------------------------------------------------------------------------
.text:0040F776                 align 10h
.text:0040F780
.text:0040F780 ; =============== S U B R O U T I N E =======================================
.text:0040F780
.text:0040F780 ; Attributes: thunk
.text:0040F780
.text:0040F780 ; void __thiscall CWnd::OnFinalRelease(CWnd *__hidden this)
.text:0040F780 ?OnFinalRelease@CWnd@@UAEXXZ proc near  ; DATA XREF: .text:00401084↑o
.text:0040F780                                         ; .text:00401280↑o ...
.text:0040F780                 jmp     ds:__imp_?OnFinalRelease@CWnd@@UAEXXZ ; CWnd::OnFinalRelease(void)
.text:0040F780 ?OnFinalRelease@CWnd@@UAEXXZ endp
.text:0040F780
.text:0040F780 ; ---------------------------------------------------------------------------
.text:0040F786                 align 10h
.text:0040F790
.text:0040F790 ; =============== S U B R O U T I N E =======================================
.text:0040F790
.text:0040F790 ; Attributes: thunk
.text:0040F790
.text:0040F790 ; int __thiscall CCmdTarget::IsInvokeAllowed(CCmdTarget *__hidden this, int)
.text:0040F790 ?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z proc near
.text:0040F790                                         ; DATA XREF: .text:00401088↑o
.text:0040F790                                         ; .text:00401284↑o ...
.text:0040F790                 jmp     ds:__imp_?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z ; CCmdTarget::IsInvokeAllowed(long)
.text:0040F790 ?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z endp
.text:0040F790
.text:0040F790 ; ---------------------------------------------------------------------------
.text:0040F796                 align 10h
.text:0040F7A0
.text:0040F7A0 ; =============== S U B R O U T I N E =======================================
.text:0040F7A0
.text:0040F7A0 ; Attributes: thunk
.text:0040F7A0
.text:0040F7A0 ; int __thiscall CCmdTarget::GetDispatchIID(CCmdTarget *__hidden this, struct _GUID *)
.text:0040F7A0 ?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z proc near
.text:0040F7A0                                         ; DATA XREF: .text:0040108C↑o
.text:0040F7A0                                         ; .text:00401288↑o ...
.text:0040F7A0                 jmp     ds:__imp_?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z ; CCmdTarget::GetDispatchIID(_GUID *)
.text:0040F7A0 ?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z endp
.text:0040F7A0
.text:0040F7A0 ; ---------------------------------------------------------------------------
.text:0040F7A6                 align 10h
.text:0040F7B0
.text:0040F7B0 ; =============== S U B R O U T I N E =======================================
.text:0040F7B0
.text:0040F7B0 ; Attributes: thunk
.text:0040F7B0
.text:0040F7B0 ; unsigned int __thiscall CCmdTarget::GetTypeInfoCount(CCmdTarget *__hidden this)
.text:0040F7B0 ?GetTypeInfoCount@CCmdTarget@@UAEIXZ proc near
.text:0040F7B0                                         ; DATA XREF: .text:00401090↑o
.text:0040F7B0                                         ; .text:0040128C↑o ...
.text:0040F7B0                 jmp     ds:__imp_?GetTypeInfoCount@CCmdTarget@@UAEIXZ ; CCmdTarget::GetTypeInfoCount(void)
.text:0040F7B0 ?GetTypeInfoCount@CCmdTarget@@UAEIXZ endp
.text:0040F7B0
.text:0040F7B0 ; ---------------------------------------------------------------------------
.text:0040F7B6                 align 10h
.text:0040F7C0
.text:0040F7C0 ; =============== S U B R O U T I N E =======================================
.text:0040F7C0
.text:0040F7C0 ; Attributes: thunk
.text:0040F7C0
.text:0040F7C0 ; struct CTypeLibCache *__thiscall CCmdTarget::GetTypeLibCache(CCmdTarget *__hidden this)
.text:0040F7C0 ?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ proc near
.text:0040F7C0                                         ; DATA XREF: .text:00401094↑o
.text:0040F7C0                                         ; .text:00401290↑o ...
.text:0040F7C0                 jmp     ds:__imp_?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ ; CCmdTarget::GetTypeLibCache(void)
.text:0040F7C0 ?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ endp
.text:0040F7C0
.text:0040F7C0 ; ---------------------------------------------------------------------------
.text:0040F7C6                 align 10h
.text:0040F7D0
.text:0040F7D0 ; =============== S U B R O U T I N E =======================================
.text:0040F7D0
.text:0040F7D0 ; Attributes: thunk
.text:0040F7D0
.text:0040F7D0 ; int __thiscall CCmdTarget::GetTypeLib(CCmdTarget *__hidden this, unsigned int, struct ITypeLib **)
.text:0040F7D0 ?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z proc near
.text:0040F7D0                                         ; DATA XREF: .text:00401098↑o
.text:0040F7D0                                         ; .text:00401294↑o ...
.text:0040F7D0                 jmp     ds:__imp_?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z ; CCmdTarget::GetTypeLib(ulong,ITypeLib * *)
.text:0040F7D0 ?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z endp
.text:0040F7D0
.text:0040F7D0 ; ---------------------------------------------------------------------------
.text:0040F7D6                 align 10h
.text:0040F7E0
.text:0040F7E0 ; =============== S U B R O U T I N E =======================================
.text:0040F7E0
.text:0040F7E0 ; Attributes: thunk
.text:0040F7E0
.text:0040F7E0 ; const struct AFX_OLECMDMAP *__thiscall CCmdTarget::GetCommandMap(CCmdTarget *__hidden this)
.text:0040F7E0 ?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ proc near
.text:0040F7E0                                         ; DATA XREF: .text:004010A0↑o
.text:0040F7E0                                         ; .text:0040129C↑o ...
.text:0040F7E0                 jmp     ds:__imp_?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ ; CCmdTarget::GetCommandMap(void)
.text:0040F7E0 ?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ endp
.text:0040F7E0
.text:0040F7E0 ; ---------------------------------------------------------------------------
.text:0040F7E6                 align 10h
.text:0040F7F0
.text:0040F7F0 ; =============== S U B R O U T I N E =======================================
.text:0040F7F0
.text:0040F7F0 ; Attributes: thunk
.text:0040F7F0
.text:0040F7F0 ; const struct AFX_DISPMAP *__thiscall CCmdTarget::GetDispatchMap(CCmdTarget *__hidden this)
.text:0040F7F0 ?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ proc near
.text:0040F7F0                                         ; DATA XREF: .text:004010A4↑o
.text:0040F7F0                                         ; .text:004012A0↑o ...
.text:0040F7F0                 jmp     ds:__imp_?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ ; CCmdTarget::GetDispatchMap(void)
.text:0040F7F0 ?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ endp
.text:0040F7F0
.text:0040F7F0 ; ---------------------------------------------------------------------------
.text:0040F7F6                 align 10h
.text:0040F800
.text:0040F800 ; =============== S U B R O U T I N E =======================================
.text:0040F800
.text:0040F800 ; Attributes: thunk
.text:0040F800
.text:0040F800 ; const struct AFX_CONNECTIONMAP *__thiscall CCmdTarget::GetConnectionMap(CCmdTarget *__hidden this)
.text:0040F800 ?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ proc near
.text:0040F800                                         ; DATA XREF: .text:004010A8↑o
.text:0040F800                                         ; .text:004012A4↑o ...
.text:0040F800                 jmp     ds:__imp_?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ ; CCmdTarget::GetConnectionMap(void)
.text:0040F800 ?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ endp
.text:0040F800
.text:0040F800 ; ---------------------------------------------------------------------------
.text:0040F806                 align 10h
.text:0040F810
.text:0040F810 ; =============== S U B R O U T I N E =======================================
.text:0040F810
.text:0040F810 ; Attributes: thunk
.text:0040F810
.text:0040F810 ; const struct AFX_INTERFACEMAP *__thiscall CCmdTarget::GetInterfaceMap(CCmdTarget *__hidden this)
.text:0040F810 ?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ proc near
.text:0040F810                                         ; DATA XREF: .text:004010AC↑o
.text:0040F810                                         ; .text:004012A8↑o ...
.text:0040F810                 jmp     ds:__imp_?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ ; CCmdTarget::GetInterfaceMap(void)
.text:0040F810 ?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ endp
.text:0040F810
.text:0040F810 ; ---------------------------------------------------------------------------
.text:0040F816                 align 10h
.text:0040F820
.text:0040F820 ; =============== S U B R O U T I N E =======================================
.text:0040F820
.text:0040F820 ; Attributes: thunk
.text:0040F820
.text:0040F820 ; const struct AFX_EVENTSINKMAP *__thiscall CCmdTarget::GetEventSinkMap(CCmdTarget *__hidden this)
.text:0040F820 ?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ proc near
.text:0040F820                                         ; DATA XREF: .text:004010B0↑o
.text:0040F820                                         ; .text:004012AC↑o ...
.text:0040F820                 jmp     ds:__imp_?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ ; CCmdTarget::GetEventSinkMap(void)
.text:0040F820 ?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ endp
.text:0040F820
.text:0040F820 ; ---------------------------------------------------------------------------
.text:0040F826                 align 10h
.text:0040F830
.text:0040F830 ; =============== S U B R O U T I N E =======================================
.text:0040F830
.text:0040F830 ; Attributes: thunk
.text:0040F830
.text:0040F830 ; int __thiscall CCmdTarget::OnCreateAggregates(CCmdTarget *__hidden this)
.text:0040F830 ?OnCreateAggregates@CCmdTarget@@UAEHXZ proc near
.text:0040F830                                         ; DATA XREF: .text:004010B4↑o
.text:0040F830                                         ; .text:004012B0↑o ...
.text:0040F830                 jmp     ds:__imp_?OnCreateAggregates@CCmdTarget@@UAEHXZ ; CCmdTarget::OnCreateAggregates(void)
.text:0040F830 ?OnCreateAggregates@CCmdTarget@@UAEHXZ endp
.text:0040F830
.text:0040F830 ; ---------------------------------------------------------------------------
.text:0040F836                 align 10h
.text:0040F840
.text:0040F840 ; =============== S U B R O U T I N E =======================================
.text:0040F840
.text:0040F840 ; Attributes: thunk
.text:0040F840
.text:0040F840 ; struct IUnknown *__thiscall CCmdTarget::GetInterfaceHook(CCmdTarget *__hidden this, const void *)
.text:0040F840 ?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z proc near
.text:0040F840                                         ; DATA XREF: .text:004010B8↑o
.text:0040F840                                         ; .text:004012B4↑o ...
.text:0040F840                 jmp     ds:__imp_?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z ; CCmdTarget::GetInterfaceHook(void const *)
.text:0040F840 ?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z endp
.text:0040F840
.text:0040F840 ; ---------------------------------------------------------------------------
.text:0040F846                 align 10h
.text:0040F850
.text:0040F850 ; =============== S U B R O U T I N E =======================================
.text:0040F850
.text:0040F850 ; Attributes: thunk
.text:0040F850
.text:0040F850 ; int __thiscall CCmdTarget::GetExtraConnectionPoints(CCmdTarget *__hidden this, struct CPtrArray *)
.text:0040F850 ?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z proc near
.text:0040F850                                         ; DATA XREF: .text:004010BC↑o
.text:0040F850                                         ; .text:004012B8↑o ...
.text:0040F850                 jmp     ds:__imp_?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z ; CCmdTarget::GetExtraConnectionPoints(CPtrArray *)
.text:0040F850 ?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z endp
.text:0040F850
.text:0040F850 ; ---------------------------------------------------------------------------
.text:0040F856                 align 10h
.text:0040F860
.text:0040F860 ; =============== S U B R O U T I N E =======================================
.text:0040F860
.text:0040F860 ; Attributes: thunk
.text:0040F860
.text:0040F860 ; struct IConnectionPoint *__thiscall CCmdTarget::GetConnectionHook(CCmdTarget *__hidden this, const struct _GUID *)
.text:0040F860 ?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z proc near
.text:0040F860                                         ; DATA XREF: .text:004010C0↑o
.text:0040F860                                         ; .text:004012BC↑o ...
.text:0040F860                 jmp     ds:__imp_?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z ; CCmdTarget::GetConnectionHook(_GUID const &)
.text:0040F860 ?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z endp
.text:0040F860
.text:0040F860 ; ---------------------------------------------------------------------------
.text:0040F866                 align 10h
.text:0040F870
.text:0040F870 ; =============== S U B R O U T I N E =======================================
.text:0040F870
.text:0040F870 ; Attributes: thunk
.text:0040F870
.text:0040F870 ; void __thiscall CWnd::PreSubclassWindow(CWnd *__hidden this)
.text:0040F870 ?PreSubclassWindow@CWnd@@UAEXXZ proc near
.text:0040F870                                         ; DATA XREF: .text:004010C4↑o
.text:0040F870                                         ; .text:004012C0↑o ...
.text:0040F870                 jmp     ds:__imp_?PreSubclassWindow@CWnd@@UAEXXZ ; CWnd::PreSubclassWindow(void)
.text:0040F870 ?PreSubclassWindow@CWnd@@UAEXXZ endp
.text:0040F870
.text:0040F870 ; ---------------------------------------------------------------------------
.text:0040F876                 align 10h
.text:0040F880
.text:0040F880 ; =============== S U B R O U T I N E =======================================
.text:0040F880
.text:0040F880 ; Attributes: thunk
.text:0040F880
.text:0040F880 ; int __thiscall CWnd::Create(CWnd *__hidden this, const unsigned __int16 *, const unsigned __int16 *, unsigned int, const struct tagRECT *, struct CWnd *, unsigned int, struct CCreateContext *)
.text:0040F880 ?Create@CWnd@@UAEHPBG0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z proc near
.text:0040F880                                         ; DATA XREF: .text:004010C8↑o
.text:0040F880                                         ; .text:004012C4↑o ...
.text:0040F880                 jmp     ds:__imp_?Create@CWnd@@UAEHPBG0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z ; CWnd::Create(ushort const *,ushort const *,ulong,tagRECT const &,CWnd *,uint,CCreateContext *)
.text:0040F880 ?Create@CWnd@@UAEHPBG0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z endp
.text:0040F880
.text:0040F880 ; ---------------------------------------------------------------------------
.text:0040F886                 align 10h
.text:0040F890
.text:0040F890 ; =============== S U B R O U T I N E =======================================
.text:0040F890
.text:0040F890 ; Attributes: thunk
.text:0040F890
.text:0040F890 ; int __thiscall CWnd::DestroyWindow(CWnd *__hidden this)
.text:0040F890 ?DestroyWindow@CWnd@@UAEHXZ proc near   ; DATA XREF: .text:004010CC↑o
.text:0040F890                                         ; .text:004012C8↑o ...
.text:0040F890                 jmp     ds:__imp_?DestroyWindow@CWnd@@UAEHXZ ; CWnd::DestroyWindow(void)
.text:0040F890 ?DestroyWindow@CWnd@@UAEHXZ endp
.text:0040F890
.text:0040F890 ; ---------------------------------------------------------------------------
.text:0040F896                 align 10h
.text:0040F8A0
.text:0040F8A0 ; =============== S U B R O U T I N E =======================================
.text:0040F8A0
.text:0040F8A0 ; Attributes: thunk
.text:0040F8A0
.text:0040F8A0 ; int __thiscall CWnd::PreCreateWindow(CWnd *__hidden this, struct tagCREATESTRUCTW *)
.text:0040F8A0 ?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTW@@@Z proc near
.text:0040F8A0                                         ; DATA XREF: .text:004010D0↑o
.text:0040F8A0                                         ; .text:004012CC↑o ...
.text:0040F8A0                 jmp     ds:__imp_?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTW@@@Z ; CWnd::PreCreateWindow(tagCREATESTRUCTW &)
.text:0040F8A0 ?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTW@@@Z endp
.text:0040F8A0
.text:0040F8A0 ; ---------------------------------------------------------------------------
.text:0040F8A6                 align 10h
.text:0040F8B0
.text:0040F8B0 ; =============== S U B R O U T I N E =======================================
.text:0040F8B0
.text:0040F8B0 ; Attributes: thunk
.text:0040F8B0
.text:0040F8B0 ; void __thiscall CWnd::CalcWindowRect(CWnd *__hidden this, struct tagRECT *, unsigned int)
.text:0040F8B0 ?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z proc near
.text:0040F8B0                                         ; DATA XREF: .text:004010D4↑o
.text:0040F8B0                                         ; .text:004012D0↑o ...
.text:0040F8B0                 jmp     ds:__imp_?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z ; CWnd::CalcWindowRect(tagRECT *,uint)
.text:0040F8B0 ?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z endp
.text:0040F8B0
.text:0040F8B0 ; ---------------------------------------------------------------------------
.text:0040F8B6                 align 10h
.text:0040F8C0
.text:0040F8C0 ; =============== S U B R O U T I N E =======================================
.text:0040F8C0
.text:0040F8C0 ; Attributes: thunk
.text:0040F8C0
.text:0040F8C0 ; public: virtual int __thiscall CWnd::OnToolHitTest(class CPoint, struct tagTOOLINFOW *)const
.text:0040F8C0 ?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOW@@@Z proc near
.text:0040F8C0                                         ; DATA XREF: .text:004010D8↑o
.text:0040F8C0                                         ; .text:004012D4↑o ...
.text:0040F8C0                 jmp     ds:__imp_?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOW@@@Z ; CWnd::OnToolHitTest(CPoint,tagTOOLINFOW *)
.text:0040F8C0 ?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOW@@@Z endp
.text:0040F8C0
.text:0040F8C0 ; ---------------------------------------------------------------------------
.text:0040F8C6                 align 10h
.text:0040F8D0
.text:0040F8D0 ; =============== S U B R O U T I N E =======================================
.text:0040F8D0
.text:0040F8D0 ; Attributes: thunk
.text:0040F8D0
.text:0040F8D0 ; struct CScrollBar *__thiscall CWnd::GetScrollBarCtrl(CWnd *__hidden this, int)
.text:0040F8D0 ?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z proc near
.text:0040F8D0                                         ; DATA XREF: .text:004010DC↑o
.text:0040F8D0                                         ; .text:004012D8↑o ...
.text:0040F8D0                 jmp     ds:__imp_?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z ; CWnd::GetScrollBarCtrl(int)
.text:0040F8D0 ?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z endp
.text:0040F8D0
.text:0040F8D0 ; ---------------------------------------------------------------------------
.text:0040F8D6                 align 10h
.text:0040F8E0
.text:0040F8E0 ; =============== S U B R O U T I N E =======================================
.text:0040F8E0
.text:0040F8E0 ; Attributes: thunk
.text:0040F8E0
.text:0040F8E0 ; void __thiscall CWnd::WinHelpW(CWnd *__hidden this, unsigned int, unsigned int)
.text:0040F8E0 ?WinHelpW@CWnd@@UAEXKI@Z proc near      ; DATA XREF: .text:004010E0↑o
.text:0040F8E0                                         ; .text:004012DC↑o ...
.text:0040F8E0                 jmp     ds:__imp_?WinHelpW@CWnd@@UAEXKI@Z ; CWnd::WinHelpW(ulong,uint)
.text:0040F8E0 ?WinHelpW@CWnd@@UAEXKI@Z endp
.text:0040F8E0
.text:0040F8E0 ; ---------------------------------------------------------------------------
.text:0040F8E6                 align 10h
.text:0040F8F0
.text:0040F8F0 ; =============== S U B R O U T I N E =======================================
.text:0040F8F0
.text:0040F8F0 ; Attributes: thunk
.text:0040F8F0
.text:0040F8F0 ; int __thiscall CWnd::ContinueModal(CWnd *__hidden this)
.text:0040F8F0 ?ContinueModal@CWnd@@UAEHXZ proc near   ; DATA XREF: .text:004010E4↑o
.text:0040F8F0                                         ; .text:004012E0↑o ...
.text:0040F8F0                 jmp     ds:__imp_?ContinueModal@CWnd@@UAEHXZ ; CWnd::ContinueModal(void)
.text:0040F8F0 ?ContinueModal@CWnd@@UAEHXZ endp
.text:0040F8F0
.text:0040F8F0 ; ---------------------------------------------------------------------------
.text:0040F8F6                 align 10h
.text:0040F900
.text:0040F900 ; =============== S U B R O U T I N E =======================================
.text:0040F900
.text:0040F900 ; Attributes: thunk
.text:0040F900
.text:0040F900 ; void __thiscall CWnd::EndModalLoop(CWnd *__hidden this, int)
.text:0040F900 ?EndModalLoop@CWnd@@UAEXH@Z proc near   ; DATA XREF: .text:004010E8↑o
.text:0040F900                                         ; .text:004012E4↑o ...
.text:0040F900                 jmp     ds:__imp_?EndModalLoop@CWnd@@UAEXH@Z ; CWnd::EndModalLoop(int)
.text:0040F900 ?EndModalLoop@CWnd@@UAEXH@Z endp
.text:0040F900
.text:0040F900 ; ---------------------------------------------------------------------------
.text:0040F906                 align 10h
.text:0040F910
.text:0040F910 ; =============== S U B R O U T I N E =======================================
.text:0040F910
.text:0040F910 ; Attributes: thunk
.text:0040F910
.text:0040F910 ; int __thiscall CWnd::OnCommand(CWnd *__hidden this, unsigned int, int)
.text:0040F910 ?OnCommand@CWnd@@MAEHIJ@Z proc near     ; DATA XREF: .text:004010EC↑o
.text:0040F910                                         ; .text:004012E8↑o ...
.text:0040F910                 jmp     ds:__imp_?OnCommand@CWnd@@MAEHIJ@Z ; CWnd::OnCommand(uint,long)
.text:0040F910 ?OnCommand@CWnd@@MAEHIJ@Z endp
.text:0040F910
.text:0040F910 ; ---------------------------------------------------------------------------
.text:0040F916                 align 10h
.text:0040F920
.text:0040F920 ; =============== S U B R O U T I N E =======================================
.text:0040F920
.text:0040F920 ; Attributes: thunk
.text:0040F920
.text:0040F920 ; int __thiscall CWnd::OnNotify(CWnd *__hidden this, unsigned int, int, int *)
.text:0040F920 ?OnNotify@CWnd@@MAEHIJPAJ@Z proc near   ; DATA XREF: .text:004010F0↑o
.text:0040F920                                         ; .text:00401D20↑o ...
.text:0040F920                 jmp     ds:__imp_?OnNotify@CWnd@@MAEHIJPAJ@Z ; CWnd::OnNotify(uint,long,long *)
.text:0040F920 ?OnNotify@CWnd@@MAEHIJPAJ@Z endp
.text:0040F920
.text:0040F920 ; ---------------------------------------------------------------------------
.text:0040F926                 align 10h
.text:0040F930
.text:0040F930 ; =============== S U B R O U T I N E =======================================
.text:0040F930
.text:0040F930 ; Attributes: thunk
.text:0040F930
.text:0040F930 ; int (__stdcall **__thiscall CWnd::GetSuperWndProcAddr(CWnd *__hidden this))(HWND, unsigned int, unsigned int, int)
.text:0040F930 ?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ proc near
.text:0040F930                                         ; DATA XREF: .text:004010F4↑o
.text:0040F930                                         ; .text:004012F0↑o ...
.text:0040F930                 jmp     ds:__imp_?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ ; CWnd::GetSuperWndProcAddr(void)
.text:0040F930 ?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ endp
.text:0040F930
.text:0040F930 ; ---------------------------------------------------------------------------
.text:0040F936                 align 10h
.text:0040F940
.text:0040F940 ; =============== S U B R O U T I N E =======================================
.text:0040F940
.text:0040F940 ; Attributes: thunk
.text:0040F940
.text:0040F940 ; int __thiscall CDialog::PreTranslateMessage(CDialog *__hidden this, struct tagMSG *)
.text:0040F940 ?PreTranslateMessage@CDialog@@UAEHPAUtagMSG@@@Z proc near
.text:0040F940                                         ; DATA XREF: .text:00401104↑o
.text:0040F940                                         ; .text:00402B3C↑o
.text:0040F940                 jmp     ds:__imp_?PreTranslateMessage@CDialog@@UAEHPAUtagMSG@@@Z ; CDialog::PreTranslateMessage(tagMSG *)
.text:0040F940 ?PreTranslateMessage@CDialog@@UAEHPAUtagMSG@@@Z endp
.text:0040F940
.text:0040F940 ; ---------------------------------------------------------------------------
.text:0040F946                 align 10h
.text:0040F950
.text:0040F950 ; =============== S U B R O U T I N E =======================================
.text:0040F950
.text:0040F950 ; Attributes: thunk
.text:0040F950
.text:0040F950 ; int __thiscall CWnd::OnAmbientProperty(CWnd *__hidden this, struct COleControlSite *, int, struct tagVARIANT *)
.text:0040F950 ?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z proc near
.text:0040F950                                         ; DATA XREF: .text:00401108↑o
.text:0040F950                                         ; .text:00401304↑o ...
.text:0040F950                 jmp     ds:__imp_?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z ; CWnd::OnAmbientProperty(COleControlSite *,long,tagVARIANT *)
.text:0040F950 ?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z endp
.text:0040F950
.text:0040F950 ; ---------------------------------------------------------------------------
.text:0040F956                 align 10h
.text:0040F960
.text:0040F960 ; =============== S U B R O U T I N E =======================================
.text:0040F960
.text:0040F960 ; Attributes: thunk
.text:0040F960
.text:0040F960 ; int __thiscall CWnd::WindowProc(CWnd *__hidden this, unsigned int, unsigned int, int)
.text:0040F960 ?WindowProc@CWnd@@MAEJIIJ@Z proc near   ; DATA XREF: .text:0040110C↑o
.text:0040F960                                         ; .text:00401308↑o ...
.text:0040F960                 jmp     ds:__imp_?WindowProc@CWnd@@MAEJIIJ@Z ; CWnd::WindowProc(uint,uint,long)
.text:0040F960 ?WindowProc@CWnd@@MAEJIIJ@Z endp
.text:0040F960
.text:0040F960 ; ---------------------------------------------------------------------------
.text:0040F966                 align 10h
.text:0040F970
.text:0040F970 ; =============== S U B R O U T I N E =======================================
.text:0040F970
.text:0040F970 ; Attributes: thunk
.text:0040F970
.text:0040F970 ; int __thiscall CWnd::OnWndMsg(CWnd *__hidden this, unsigned int, unsigned int, int, int *)
.text:0040F970 ?OnWndMsg@CWnd@@MAEHIIJPAJ@Z proc near  ; DATA XREF: .text:00401110↑o
.text:0040F970                                         ; .text:0040130C↑o ...
.text:0040F970                 jmp     ds:__imp_?OnWndMsg@CWnd@@MAEHIIJPAJ@Z ; CWnd::OnWndMsg(uint,uint,long,long *)
.text:0040F970 ?OnWndMsg@CWnd@@MAEHIIJPAJ@Z endp
.text:0040F970
.text:0040F970 ; ---------------------------------------------------------------------------
.text:0040F976                 align 10h
.text:0040F980
.text:0040F980 ; =============== S U B R O U T I N E =======================================
.text:0040F980
.text:0040F980 ; Attributes: thunk
.text:0040F980
.text:0040F980 ; int __thiscall CWnd::DefWindowProcW(CWnd *__hidden this, unsigned int, unsigned int, int)
.text:0040F980 ?DefWindowProcW@CWnd@@MAEJIIJ@Z proc near
.text:0040F980                                         ; DATA XREF: .text:00401114↑o
.text:0040F980                                         ; .text:00401310↑o ...
.text:0040F980                 jmp     ds:__imp_?DefWindowProcW@CWnd@@MAEJIIJ@Z ; CWnd::DefWindowProcW(uint,uint,long)
.text:0040F980 ?DefWindowProcW@CWnd@@MAEJIIJ@Z endp
.text:0040F980
.text:0040F980 ; ---------------------------------------------------------------------------
.text:0040F986                 align 10h
.text:0040F990
.text:0040F990 ; =============== S U B R O U T I N E =======================================
.text:0040F990
.text:0040F990 ; Attributes: thunk
.text:0040F990
.text:0040F990 ; void __thiscall CWnd::PostNcDestroy(CWnd *__hidden this)
.text:0040F990 ?PostNcDestroy@CWnd@@MAEXXZ proc near   ; DATA XREF: .text:00401118↑o
.text:0040F990                                         ; .text:00401314↑o ...
.text:0040F990                 jmp     ds:__imp_?PostNcDestroy@CWnd@@MAEXXZ ; CWnd::PostNcDestroy(void)
.text:0040F990 ?PostNcDestroy@CWnd@@MAEXXZ endp
.text:0040F990
.text:0040F990 ; ---------------------------------------------------------------------------
.text:0040F996                 align 10h
.text:0040F9A0
.text:0040F9A0 ; =============== S U B R O U T I N E =======================================
.text:0040F9A0
.text:0040F9A0 ; Attributes: thunk
.text:0040F9A0
.text:0040F9A0 ; int __thiscall CWnd::OnChildNotify(CWnd *__hidden this, unsigned int, unsigned int, int, int *)
.text:0040F9A0 ?OnChildNotify@CWnd@@MAEHIIJPAJ@Z proc near
.text:0040F9A0                                         ; DATA XREF: .text:0040111C↑o
.text:0040F9A0                                         ; .text:00401318↑o ...
.text:0040F9A0                 jmp     ds:__imp_?OnChildNotify@CWnd@@MAEHIIJPAJ@Z ; CWnd::OnChildNotify(uint,uint,long,long *)
.text:0040F9A0 ?OnChildNotify@CWnd@@MAEHIIJPAJ@Z endp
.text:0040F9A0
.text:0040F9A0 ; ---------------------------------------------------------------------------
.text:0040F9A6                 align 10h
.text:0040F9B0
.text:0040F9B0 ; =============== S U B R O U T I N E =======================================
.text:0040F9B0
.text:0040F9B0 ; Attributes: thunk
.text:0040F9B0
.text:0040F9B0 ; int __thiscall CDialog::CheckAutoCenter(CDialog *__hidden this)
.text:0040F9B0 ?CheckAutoCenter@CDialog@@UAEHXZ proc near
.text:0040F9B0                                         ; DATA XREF: .text:00401120↑o
.text:0040F9B0                                         ; .text:0040131C↑o ...
.text:0040F9B0                 jmp     ds:__imp_?CheckAutoCenter@CDialog@@UAEHXZ ; CDialog::CheckAutoCenter(void)
.text:0040F9B0 ?CheckAutoCenter@CDialog@@UAEHXZ endp
.text:0040F9B0
.text:0040F9B0 ; ---------------------------------------------------------------------------
.text:0040F9B6                 align 10h
.text:0040F9C0
.text:0040F9C0 ; =============== S U B R O U T I N E =======================================
.text:0040F9C0
.text:0040F9C0 ; Attributes: thunk
.text:0040F9C0
.text:0040F9C0 ; int __thiscall CWnd::IsFrameWnd(CWnd *__hidden this)
.text:0040F9C0 ?IsFrameWnd@CWnd@@UBEHXZ proc near      ; DATA XREF: .text:00401124↑o
.text:0040F9C0                                         ; .text:00401320↑o ...
.text:0040F9C0                 jmp     ds:__imp_?IsFrameWnd@CWnd@@UBEHXZ ; CWnd::IsFrameWnd(void)
.text:0040F9C0 ?IsFrameWnd@CWnd@@UBEHXZ endp
.text:0040F9C0
.text:0040F9C0 ; ---------------------------------------------------------------------------
.text:0040F9C6                 align 10h
.text:0040F9D0
.text:0040F9D0 ; =============== S U B R O U T I N E =======================================
.text:0040F9D0
.text:0040F9D0 ; Attributes: thunk
.text:0040F9D0
.text:0040F9D0 ; int __thiscall CDialog::SetOccDialogInfo(CDialog *__hidden this, struct _AFX_OCC_DIALOG_INFO *)
.text:0040F9D0 ?SetOccDialogInfo@CDialog@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z proc near
.text:0040F9D0                                         ; DATA XREF: .text:00401128↑o
.text:0040F9D0                                         ; .text:00401324↑o ...
.text:0040F9D0                 jmp     ds:__imp_?SetOccDialogInfo@CDialog@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z ; CDialog::SetOccDialogInfo(_AFX_OCC_DIALOG_INFO *)
.text:0040F9D0 ?SetOccDialogInfo@CDialog@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z endp
.text:0040F9D0
.text:0040F9D0 ; ---------------------------------------------------------------------------
.text:0040F9D6                 align 10h
.text:0040F9E0
.text:0040F9E0 ; =============== S U B R O U T I N E =======================================
.text:0040F9E0
.text:0040F9E0 ; Attributes: thunk
.text:0040F9E0
.text:0040F9E0 ; int __thiscall CDialog::DoModal(CDialog *__hidden this)
.text:0040F9E0 ?DoModal@CDialog@@UAEHXZ proc near      ; DATA XREF: .text:0040112C↑o
.text:0040F9E0                                         ; .text:00401328↑o ...
.text:0040F9E0                 jmp     ds:__imp_?DoModal@CDialog@@UAEHXZ ; CDialog::DoModal(void)
.text:0040F9E0 ?DoModal@CDialog@@UAEHXZ endp
.text:0040F9E0
.text:0040F9E0 ; ---------------------------------------------------------------------------
.text:0040F9E6                 align 10h
.text:0040F9F0
.text:0040F9F0 ; =============== S U B R O U T I N E =======================================
.text:0040F9F0
.text:0040F9F0 ; Attributes: thunk
.text:0040F9F0
.text:0040F9F0 ; int __thiscall CDialog::OnInitDialog(CDialog *__hidden this)
.text:0040F9F0 ?OnInitDialog@CDialog@@UAEHXZ proc near ; DATA XREF: .text:00401130↑o
.text:0040F9F0                                         ; .text:00402B68↑o
.text:0040F9F0                 jmp     ds:__imp_?OnInitDialog@CDialog@@UAEHXZ ; CDialog::OnInitDialog(void)
.text:0040F9F0 ?OnInitDialog@CDialog@@UAEHXZ endp
.text:0040F9F0
.text:0040F9F0 ; ---------------------------------------------------------------------------
.text:0040F9F6                 align 10h
.text:0040FA00
.text:0040FA00 ; =============== S U B R O U T I N E =======================================
.text:0040FA00
.text:0040FA00 ; Attributes: thunk
.text:0040FA00
.text:0040FA00 ; void __thiscall CDialog::OnSetFont(CDialog *__hidden this, struct CFont *)
.text:0040FA00 ?OnSetFont@CDialog@@UAEXPAVCFont@@@Z proc near
.text:0040FA00                                         ; DATA XREF: .text:00401134↑o
.text:0040FA00                                         ; .text:00401330↑o ...
.text:0040FA00                 jmp     ds:__imp_?OnSetFont@CDialog@@UAEXPAVCFont@@@Z ; CDialog::OnSetFont(CFont *)
.text:0040FA00 ?OnSetFont@CDialog@@UAEXPAVCFont@@@Z endp
.text:0040FA00
.text:0040FA00 ; ---------------------------------------------------------------------------
.text:0040FA06                 align 10h
.text:0040FA10
.text:0040FA10 ; =============== S U B R O U T I N E =======================================
.text:0040FA10
.text:0040FA10 ; Attributes: thunk
.text:0040FA10
.text:0040FA10 ; void __thiscall CDialog::OnOK(CDialog *__hidden this)
.text:0040FA10 ?OnOK@CDialog@@MAEXXZ proc near         ; DATA XREF: .text:00401138↑o
.text:0040FA10                                         ; .text:00402B70↑o
.text:0040FA10                 jmp     ds:__imp_?OnOK@CDialog@@MAEXXZ ; CDialog::OnOK(void)
.text:0040FA10 ?OnOK@CDialog@@MAEXXZ endp
.text:0040FA10
.text:0040FA10 ; ---------------------------------------------------------------------------
.text:0040FA16                 align 10h
.text:0040FA20
.text:0040FA20 ; =============== S U B R O U T I N E =======================================
.text:0040FA20
.text:0040FA20 ; Attributes: thunk
.text:0040FA20
.text:0040FA20 ; void __thiscall CDialog::OnCancel(CDialog *__hidden this)
.text:0040FA20 ?OnCancel@CDialog@@MAEXXZ proc near     ; DATA XREF: .text:0040113C↑o
.text:0040FA20                                         ; .text:00402B74↑o
.text:0040FA20                 jmp     ds:__imp_?OnCancel@CDialog@@MAEXXZ ; CDialog::OnCancel(void)
.text:0040FA20 ?OnCancel@CDialog@@MAEXXZ endp
.text:0040FA20
.text:0040FA20 ; ---------------------------------------------------------------------------
.text:0040FA26                 align 10h
.text:0040FA30
.text:0040FA30 ; =============== S U B R O U T I N E =======================================
.text:0040FA30
.text:0040FA30 ; Attributes: thunk
.text:0040FA30
.text:0040FA30 ; void __thiscall CDialog::PreInitDialog(CDialog *__hidden this)
.text:0040FA30 ?PreInitDialog@CDialog@@MAEXXZ proc near
.text:0040FA30                                         ; DATA XREF: .text:00401140↑o
.text:0040FA30                                         ; .text:0040133C↑o ...
.text:0040FA30                 jmp     ds:__imp_?PreInitDialog@CDialog@@MAEXXZ ; CDialog::PreInitDialog(void)
.text:0040FA30 ?PreInitDialog@CDialog@@MAEXXZ endp
.text:0040FA30
.text:0040FA36
.text:0040FA36 ; =============== S U B R O U T I N E =======================================
.text:0040FA36
.text:0040FA36 ; Attributes: thunk
.text:0040FA36
.text:0040FA36 ; void *__cdecl operator new(unsigned int)
.text:0040FA36 ??2@YAPAXI@Z    proc near               ; CODE XREF: operator new(uint,std::nothrow_t const &)+13↓p
.text:0040FA36                 jmp     ds:__imp_??2@YAPAXI@Z ; operator new(uint)
.text:0040FA36 ??2@YAPAXI@Z    endp
.text:0040FA36
.text:0040FA3C
.text:0040FA3C ; =============== S U B R O U T I N E =======================================
.text:0040FA3C
.text:0040FA3C ; Attributes: thunk
.text:0040FA3C
.text:0040FA3C ; struct AFX_MODULE_STATE *__stdcall AfxGetModuleState()
.text:0040FA3C ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ proc near
.text:0040FA3C                                         ; CODE XREF: AfxInitialize(int,ulong)+5↓p
.text:0040FA3C                 jmp     ds:__imp_?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ ; AfxGetModuleState(void)
.text:0040FA3C ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ endp
.text:0040FA3C
.text:0040FA3C ; ---------------------------------------------------------------------------
.text:0040FA42                 align 10h
.text:0040FA50
.text:0040FA50 ; =============== S U B R O U T I N E =======================================
.text:0040FA50
.text:0040FA50 ; Attributes: thunk
.text:0040FA50
.text:0040FA50 ; void __thiscall CWnd::OnDestroy(CWnd *__hidden this)
.text:0040FA50 ?OnDestroy@CWnd@@IAEXXZ_0 proc near     ; DATA XREF: .text:00401554↑o
.text:0040FA50                                         ; .text:00402B7C↑o
.text:0040FA50                 jmp     ds:__imp_?OnDestroy@CWnd@@IAEXXZ ; CWnd::OnDestroy(void)
.text:0040FA50 ?OnDestroy@CWnd@@IAEXXZ_0 endp
.text:0040FA50
.text:0040FA50 ; ---------------------------------------------------------------------------
.text:0040FA56                 align 10h
.text:0040FA60
.text:0040FA60 ; =============== S U B R O U T I N E =======================================
.text:0040FA60
.text:0040FA60 ; Attributes: thunk
.text:0040FA60
.text:0040FA60 ; int __thiscall CPropertyPage::OnNotify(CPropertyPage *__hidden this, unsigned int, int, int *)
.text:0040FA60 ?OnNotify@CPropertyPage@@MAEHIJPAJ@Z proc near
.text:0040FA60                                         ; DATA XREF: .text:004012EC↑o
.text:0040FA60                                         ; .text:004014B4↑o ...
.text:0040FA60                 jmp     ds:__imp_?OnNotify@CPropertyPage@@MAEHIJPAJ@Z ; CPropertyPage::OnNotify(uint,long,long *)
.text:0040FA60 ?OnNotify@CPropertyPage@@MAEHIJPAJ@Z endp
.text:0040FA60
.text:0040FA60 ; ---------------------------------------------------------------------------
.text:0040FA66                 align 10h
.text:0040FA70
.text:0040FA70 ; =============== S U B R O U T I N E =======================================
.text:0040FA70
.text:0040FA70 ; Attributes: thunk
.text:0040FA70
.text:0040FA70 ; int __thiscall CPropertyPage::PreTranslateMessage(CPropertyPage *__hidden this, struct tagMSG *)
.text:0040FA70 ?PreTranslateMessage@CPropertyPage@@MAEHPAUtagMSG@@@Z proc near
.text:0040FA70                                         ; DATA XREF: .text:00401300↑o
.text:0040FA70                                         ; .text:004014C8↑o ...
.text:0040FA70                 jmp     ds:__imp_?PreTranslateMessage@CPropertyPage@@MAEHPAUtagMSG@@@Z ; CPropertyPage::PreTranslateMessage(tagMSG *)
.text:0040FA70 ?PreTranslateMessage@CPropertyPage@@MAEHPAUtagMSG@@@Z endp
.text:0040FA70
.text:0040FA70 ; ---------------------------------------------------------------------------
.text:0040FA76                 align 10h
.text:0040FA80
.text:0040FA80 ; =============== S U B R O U T I N E =======================================
.text:0040FA80
.text:0040FA80 ; Attributes: thunk
.text:0040FA80
.text:0040FA80 ; void __thiscall CPropertyPage::OnOK(CPropertyPage *__hidden this)
.text:0040FA80 ?OnOK@CPropertyPage@@UAEXXZ proc near   ; DATA XREF: .text:00401334↑o
.text:0040FA80                                         ; .text:004014FC↑o ...
.text:0040FA80                 jmp     ds:__imp_?OnOK@CPropertyPage@@UAEXXZ ; CPropertyPage::OnOK(void)
.text:0040FA80 ?OnOK@CPropertyPage@@UAEXXZ endp
.text:0040FA80
.text:0040FA80 ; ---------------------------------------------------------------------------
.text:0040FA86                 align 10h
.text:0040FA90
.text:0040FA90 ; =============== S U B R O U T I N E =======================================
.text:0040FA90
.text:0040FA90 ; Attributes: thunk
.text:0040FA90
.text:0040FA90 ; void __thiscall CPropertyPage::OnCancel(CPropertyPage *__hidden this)
.text:0040FA90 ?OnCancel@CPropertyPage@@UAEXXZ proc near
.text:0040FA90                                         ; DATA XREF: .text:00401338↑o
.text:0040FA90                                         ; .text:00401500↑o ...
.text:0040FA90                 jmp     ds:__imp_?OnCancel@CPropertyPage@@UAEXXZ ; CPropertyPage::OnCancel(void)
.text:0040FA90 ?OnCancel@CPropertyPage@@UAEXXZ endp
.text:0040FA90
.text:0040FA90 ; ---------------------------------------------------------------------------
.text:0040FA96                 align 10h
.text:0040FAA0
.text:0040FAA0 ; =============== S U B R O U T I N E =======================================
.text:0040FAA0
.text:0040FAA0 ; Attributes: thunk
.text:0040FAA0
.text:0040FAA0 ; void __thiscall CPropertyPage::OnReset(CPropertyPage *__hidden this)
.text:0040FAA0 ?OnReset@CPropertyPage@@UAEXXZ proc near
.text:0040FAA0                                         ; DATA XREF: .text:00401344↑o
.text:0040FAA0                                         ; .text:0040150C↑o ...
.text:0040FAA0                 jmp     ds:__imp_?OnReset@CPropertyPage@@UAEXXZ ; CPropertyPage::OnReset(void)
.text:0040FAA0 ?OnReset@CPropertyPage@@UAEXXZ endp
.text:0040FAA0
.text:0040FAA0 ; ---------------------------------------------------------------------------
.text:0040FAA6                 align 10h
.text:0040FAB0
.text:0040FAB0 ; =============== S U B R O U T I N E =======================================
.text:0040FAB0
.text:0040FAB0 ; Attributes: thunk
.text:0040FAB0
.text:0040FAB0 ; int __thiscall CPropertyPage::OnSetActive(CPropertyPage *__hidden this)
.text:0040FAB0 ?OnSetActive@CPropertyPage@@UAEHXZ proc near
.text:0040FAB0                                         ; DATA XREF: .text:00401348↑o
.text:0040FAB0                                         ; .text:00401510↑o ...
.text:0040FAB0                 jmp     ds:__imp_?OnSetActive@CPropertyPage@@UAEHXZ ; CPropertyPage::OnSetActive(void)
.text:0040FAB0 ?OnSetActive@CPropertyPage@@UAEHXZ endp
.text:0040FAB0
.text:0040FAB0 ; ---------------------------------------------------------------------------
.text:0040FAB6                 align 10h
.text:0040FAC0
.text:0040FAC0 ; =============== S U B R O U T I N E =======================================
.text:0040FAC0
.text:0040FAC0 ; Attributes: thunk
.text:0040FAC0
.text:0040FAC0 ; int __thiscall CPropertyPage::OnKillActive(CPropertyPage *__hidden this)
.text:0040FAC0 ?OnKillActive@CPropertyPage@@UAEHXZ proc near
.text:0040FAC0                                         ; DATA XREF: .text:0040134C↑o
.text:0040FAC0                                         ; .text:00401514↑o ...
.text:0040FAC0                 jmp     ds:__imp_?OnKillActive@CPropertyPage@@UAEHXZ ; CPropertyPage::OnKillActive(void)
.text:0040FAC0 ?OnKillActive@CPropertyPage@@UAEHXZ endp
.text:0040FAC0
.text:0040FAC0 ; ---------------------------------------------------------------------------
.text:0040FAC6                 align 10h
.text:0040FAD0
.text:0040FAD0 ; =============== S U B R O U T I N E =======================================
.text:0040FAD0
.text:0040FAD0 ; Attributes: thunk
.text:0040FAD0
.text:0040FAD0 ; int __thiscall CPropertyPage::OnQueryCancel(CPropertyPage *__hidden this)
.text:0040FAD0 ?OnQueryCancel@CPropertyPage@@UAEHXZ proc near
.text:0040FAD0                                         ; DATA XREF: .text:00401350↑o
.text:0040FAD0                                         ; .text:00401518↑o ...
.text:0040FAD0                 jmp     ds:__imp_?OnQueryCancel@CPropertyPage@@UAEHXZ ; CPropertyPage::OnQueryCancel(void)
.text:0040FAD0 ?OnQueryCancel@CPropertyPage@@UAEHXZ endp
.text:0040FAD0
.text:0040FAD0 ; ---------------------------------------------------------------------------
.text:0040FAD6                 align 10h
.text:0040FAE0
.text:0040FAE0 ; =============== S U B R O U T I N E =======================================
.text:0040FAE0
.text:0040FAE0 ; Attributes: thunk
.text:0040FAE0
.text:0040FAE0 ; int __thiscall CPropertyPage::OnWizardBack(CPropertyPage *__hidden this)
.text:0040FAE0 ?OnWizardBack@CPropertyPage@@UAEJXZ proc near
.text:0040FAE0                                         ; DATA XREF: .text:00401354↑o
.text:0040FAE0                                         ; .text:0040151C↑o ...
.text:0040FAE0                 jmp     ds:__imp_?OnWizardBack@CPropertyPage@@UAEJXZ ; CPropertyPage::OnWizardBack(void)
.text:0040FAE0 ?OnWizardBack@CPropertyPage@@UAEJXZ endp
.text:0040FAE0
.text:0040FAE0 ; ---------------------------------------------------------------------------
.text:0040FAE6                 align 10h
.text:0040FAF0
.text:0040FAF0 ; =============== S U B R O U T I N E =======================================
.text:0040FAF0
.text:0040FAF0 ; Attributes: thunk
.text:0040FAF0
.text:0040FAF0 ; int __thiscall CPropertyPage::OnWizardNext(CPropertyPage *__hidden this)
.text:0040FAF0 ?OnWizardNext@CPropertyPage@@UAEJXZ proc near
.text:0040FAF0                                         ; DATA XREF: .text:00401358↑o
.text:0040FAF0                                         ; .text:00401520↑o ...
.text:0040FAF0                 jmp     ds:__imp_?OnWizardNext@CPropertyPage@@UAEJXZ ; CPropertyPage::OnWizardNext(void)
.text:0040FAF0 ?OnWizardNext@CPropertyPage@@UAEJXZ endp
.text:0040FAF0
.text:0040FAF0 ; ---------------------------------------------------------------------------
.text:0040FAF6                 align 10h
.text:0040FB00
.text:0040FB00 ; =============== S U B R O U T I N E =======================================
.text:0040FB00
.text:0040FB00 ; Attributes: thunk
.text:0040FB00
.text:0040FB00 ; int __thiscall CPropertyPage::OnWizardFinish(CPropertyPage *__hidden this)
.text:0040FB00 ?OnWizardFinish@CPropertyPage@@UAEHXZ proc near
.text:0040FB00                                         ; DATA XREF: .text:0040135C↑o
.text:0040FB00                                         ; .text:00401524↑o ...
.text:0040FB00                 jmp     ds:__imp_?OnWizardFinish@CPropertyPage@@UAEHXZ ; CPropertyPage::OnWizardFinish(void)
.text:0040FB00 ?OnWizardFinish@CPropertyPage@@UAEHXZ endp
.text:0040FB00
.text:0040FB00 ; ---------------------------------------------------------------------------
.text:0040FB06                 align 10h
.text:0040FB10
.text:0040FB10 ; =============== S U B R O U T I N E =======================================
.text:0040FB10
.text:0040FB10 ; Attributes: thunk
.text:0040FB10
.text:0040FB10 ; int __thiscall CPropertySheet::OnCmdMsg(CPropertySheet *__hidden this, unsigned int, int, void *, struct AFX_CMDHANDLERINFO *)
.text:0040FB10 ?OnCmdMsg@CPropertySheet@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z proc near
.text:0040FB10                                         ; DATA XREF: .text:00401CB0↑o
.text:0040FB10                                         ; .text:00402BAC↑o
.text:0040FB10                 jmp     ds:__imp_?OnCmdMsg@CPropertySheet@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z ; CPropertySheet::OnCmdMsg(uint,int,void *,AFX_CMDHANDLERINFO *)
.text:0040FB10 ?OnCmdMsg@CPropertySheet@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z endp
.text:0040FB10
.text:0040FB10 ; ---------------------------------------------------------------------------
.text:0040FB16                 align 10h
.text:0040FB20
.text:0040FB20 ; =============== S U B R O U T I N E =======================================
.text:0040FB20
.text:0040FB20 ; Attributes: thunk
.text:0040FB20
.text:0040FB20 ; int __thiscall CPropertySheet::ContinueModal(CPropertySheet *__hidden this)
.text:0040FB20 ?ContinueModal@CPropertySheet@@UAEHXZ proc near
.text:0040FB20                                         ; DATA XREF: .text:00401D14↑o
.text:0040FB20                                         ; .text:00402BB0↑o
.text:0040FB20                 jmp     ds:__imp_?ContinueModal@CPropertySheet@@UAEHXZ ; CPropertySheet::ContinueModal(void)
.text:0040FB20 ?ContinueModal@CPropertySheet@@UAEHXZ endp
.text:0040FB20
.text:0040FB20 ; ---------------------------------------------------------------------------
.text:0040FB26                 align 10h
.text:0040FB30
.text:0040FB30 ; =============== S U B R O U T I N E =======================================
.text:0040FB30
.text:0040FB30 ; Attributes: thunk
.text:0040FB30
.text:0040FB30 ; int __thiscall CPropertySheet::OnCommand(CPropertySheet *__hidden this, unsigned int, int)
.text:0040FB30 ?OnCommand@CPropertySheet@@UAEHIJ@Z proc near
.text:0040FB30                                         ; DATA XREF: .text:00401D1C↑o
.text:0040FB30                                         ; .text:00402BB4↑o
.text:0040FB30                 jmp     ds:__imp_?OnCommand@CPropertySheet@@UAEHIJ@Z ; CPropertySheet::OnCommand(uint,long)
.text:0040FB30 ?OnCommand@CPropertySheet@@UAEHIJ@Z endp
.text:0040FB30
.text:0040FB30 ; ---------------------------------------------------------------------------
.text:0040FB36                 align 10h
.text:0040FB40
.text:0040FB40 ; =============== S U B R O U T I N E =======================================
.text:0040FB40
.text:0040FB40 ; Attributes: thunk
.text:0040FB40
.text:0040FB40 ; int __thiscall CPropertySheet::PreTranslateMessage(CPropertySheet *__hidden this, struct tagMSG *)
.text:0040FB40 ?PreTranslateMessage@CPropertySheet@@UAEHPAUtagMSG@@@Z proc near
.text:0040FB40                                         ; DATA XREF: .text:00401D34↑o
.text:0040FB40                                         ; .text:00402BB8↑o
.text:0040FB40                 jmp     ds:__imp_?PreTranslateMessage@CPropertySheet@@UAEHPAUtagMSG@@@Z ; CPropertySheet::PreTranslateMessage(tagMSG *)
.text:0040FB40 ?PreTranslateMessage@CPropertySheet@@UAEHPAUtagMSG@@@Z endp
.text:0040FB40
.text:0040FB40 ; ---------------------------------------------------------------------------
.text:0040FB46                 align 10h
.text:0040FB50
.text:0040FB50 ; =============== S U B R O U T I N E =======================================
.text:0040FB50
.text:0040FB50 ; Attributes: thunk
.text:0040FB50
.text:0040FB50 ; int __thiscall CWnd::CheckAutoCenter(CWnd *__hidden this)
.text:0040FB50 ?CheckAutoCenter@CWnd@@UAEHXZ proc near ; DATA XREF: .text:00401D50↑o
.text:0040FB50                                         ; .text:00402BBC↑o
.text:0040FB50                 jmp     ds:__imp_?CheckAutoCenter@CWnd@@UAEHXZ ; CWnd::CheckAutoCenter(void)
.text:0040FB50 ?CheckAutoCenter@CWnd@@UAEHXZ endp
.text:0040FB50
.text:0040FB50 ; ---------------------------------------------------------------------------
.text:0040FB56                 align 10h
.text:0040FB60
.text:0040FB60 ; =============== S U B R O U T I N E =======================================
.text:0040FB60
.text:0040FB60 ; Attributes: thunk
.text:0040FB60
.text:0040FB60 ; int __thiscall CWnd::SetOccDialogInfo(CWnd *__hidden this, struct _AFX_OCC_DIALOG_INFO *)
.text:0040FB60 ?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z proc near
.text:0040FB60                                         ; DATA XREF: .text:00401D58↑o
.text:0040FB60                                         ; .text:00402BC0↑o
.text:0040FB60                 jmp     ds:__imp_?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z ; CWnd::SetOccDialogInfo(_AFX_OCC_DIALOG_INFO *)
.text:0040FB60 ?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z endp
.text:0040FB60
.text:0040FB60 ; ---------------------------------------------------------------------------
.text:0040FB66                 align 10h
.text:0040FB70
.text:0040FB70 ; =============== S U B R O U T I N E =======================================
.text:0040FB70
.text:0040FB70 ; Attributes: thunk
.text:0040FB70
.text:0040FB70 ; int __thiscall CPropertySheet::DoModal(CPropertySheet *__hidden this)
.text:0040FB70 ?DoModal@CPropertySheet@@UAEHXZ proc near
.text:0040FB70                                         ; DATA XREF: .text:00401D5C↑o
.text:0040FB70                                         ; .text:00402BC4↑o
.text:0040FB70                 jmp     ds:__imp_?DoModal@CPropertySheet@@UAEHXZ ; CPropertySheet::DoModal(void)
.text:0040FB70 ?DoModal@CPropertySheet@@UAEHXZ endp
.text:0040FB70
.text:0040FB70 ; ---------------------------------------------------------------------------
.text:0040FB76                 align 10h
.text:0040FB80
.text:0040FB80 ; =============== S U B R O U T I N E =======================================
.text:0040FB80
.text:0040FB80 ; Attributes: thunk
.text:0040FB80
.text:0040FB80 ; void __thiscall CPropertySheet::BuildPropPageArray(CPropertySheet *__hidden this)
.text:0040FB80 ?BuildPropPageArray@CPropertySheet@@UAEXXZ proc near
.text:0040FB80                                         ; DATA XREF: .text:00401D60↑o
.text:0040FB80                                         ; .text:00402BC8↑o
.text:0040FB80                 jmp     ds:__imp_?BuildPropPageArray@CPropertySheet@@UAEXXZ ; CPropertySheet::BuildPropPageArray(void)
.text:0040FB80 ?BuildPropPageArray@CPropertySheet@@UAEXXZ endp
.text:0040FB80
.text:0040FB80 ; ---------------------------------------------------------------------------
.text:0040FB86                 align 10h
.text:0040FB90
.text:0040FB90 ; =============== S U B R O U T I N E =======================================
.text:0040FB90
.text:0040FB90 ; Attributes: thunk
.text:0040FB90
.text:0040FB90 ; void __thiscall CWinApp::OnHelp(CWinApp *__hidden this)
.text:0040FB90 ?OnHelp@CWinApp@@IAEXXZ proc near       ; DATA XREF: .text:00401E4C↑o
.text:0040FB90                                         ; .text:00402BCC↑o
.text:0040FB90                 jmp     ds:__imp_?OnHelp@CWinApp@@IAEXXZ ; CWinApp::OnHelp(void)
.text:0040FB90 ?OnHelp@CWinApp@@IAEXXZ endp
.text:0040FB90
.text:0040FB90 ; ---------------------------------------------------------------------------
.text:0040FB96                 align 10h
.text:0040FBA0
.text:0040FBA0 ; =============== S U B R O U T I N E =======================================
.text:0040FBA0
.text:0040FBA0 ; Attributes: thunk
.text:0040FBA0
.text:0040FBA0 ; struct CRuntimeClass *__thiscall CWinApp::GetRuntimeClass(CWinApp *__hidden this)
.text:0040FBA0 ?GetRuntimeClass@CWinApp@@UBEPAUCRuntimeClass@@XZ proc near
.text:0040FBA0                                         ; DATA XREF: .text:const CMSConfigApp::`vftable'↑o
.text:0040FBA0                                         ; .text:00402BD0↑o
.text:0040FBA0                 jmp     ds:__imp_?GetRuntimeClass@CWinApp@@UBEPAUCRuntimeClass@@XZ ; CWinApp::GetRuntimeClass(void)
.text:0040FBA0 ?GetRuntimeClass@CWinApp@@UBEPAUCRuntimeClass@@XZ endp
.text:0040FBA0
.text:0040FBA0 ; ---------------------------------------------------------------------------
.text:0040FBA6                 align 10h
.text:0040FBB0
.text:0040FBB0 ; =============== S U B R O U T I N E =======================================
.text:0040FBB0
.text:0040FBB0 ; Attributes: thunk
.text:0040FBB0
.text:0040FBB0 ; int __thiscall CCmdTarget::OnCmdMsg(CCmdTarget *__hidden this, unsigned int, int, void *, struct AFX_CMDHANDLERINFO *)
.text:0040FBB0 ?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z proc near
.text:0040FBB0                                         ; DATA XREF: .text:00401DA8↑o
.text:0040FBB0                                         ; .text:00402BD4↑o
.text:0040FBB0                 jmp     ds:__imp_?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z ; CCmdTarget::OnCmdMsg(uint,int,void *,AFX_CMDHANDLERINFO *)
.text:0040FBB0 ?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z endp
.text:0040FBB0
.text:0040FBB0 ; ---------------------------------------------------------------------------
.text:0040FBB6                 align 10h
.text:0040FBC0
.text:0040FBC0 ; =============== S U B R O U T I N E =======================================
.text:0040FBC0
.text:0040FBC0 ; Attributes: thunk
.text:0040FBC0
.text:0040FBC0 ; void __thiscall CCmdTarget::OnFinalRelease(CCmdTarget *__hidden this)
.text:0040FBC0 ?OnFinalRelease@CCmdTarget@@UAEXXZ proc near
.text:0040FBC0                                         ; DATA XREF: .text:00401DAC↑o
.text:0040FBC0                                         ; .text:00402BD8↑o
.text:0040FBC0                 jmp     ds:__imp_?OnFinalRelease@CCmdTarget@@UAEXXZ ; CCmdTarget::OnFinalRelease(void)
.text:0040FBC0 ?OnFinalRelease@CCmdTarget@@UAEXXZ endp
.text:0040FBC0
.text:0040FBC0 ; ---------------------------------------------------------------------------
.text:0040FBC6                 align 10h
.text:0040FBD0
.text:0040FBD0 ; =============== S U B R O U T I N E =======================================
.text:0040FBD0
.text:0040FBD0 ; Attributes: thunk
.text:0040FBD0
.text:0040FBD0 ; int __thiscall CWinApp::Run(CWinApp *__hidden this)
.text:0040FBD0 ?Run@CWinApp@@UAEHXZ proc near          ; DATA XREF: .text:00401DF0↑o
.text:0040FBD0                                         ; .text:00402BDC↑o
.text:0040FBD0                 jmp     ds:__imp_?Run@CWinApp@@UAEHXZ ; CWinApp::Run(void)
.text:0040FBD0 ?Run@CWinApp@@UAEHXZ endp
.text:0040FBD0
.text:0040FBD0 ; ---------------------------------------------------------------------------
.text:0040FBD6                 align 10h
.text:0040FBE0
.text:0040FBE0 ; =============== S U B R O U T I N E =======================================
.text:0040FBE0
.text:0040FBE0 ; Attributes: thunk
.text:0040FBE0
.text:0040FBE0 ; int __thiscall CWinThread::PreTranslateMessage(CWinThread *__hidden this, struct tagMSG *)
.text:0040FBE0 ?PreTranslateMessage@CWinThread@@UAEHPAUtagMSG@@@Z proc near
.text:0040FBE0                                         ; DATA XREF: .text:00401DF4↑o
.text:0040FBE0                                         ; .text:00402BE0↑o
.text:0040FBE0                 jmp     ds:__imp_?PreTranslateMessage@CWinThread@@UAEHPAUtagMSG@@@Z ; CWinThread::PreTranslateMessage(tagMSG *)
.text:0040FBE0 ?PreTranslateMessage@CWinThread@@UAEHPAUtagMSG@@@Z endp
.text:0040FBE0
.text:0040FBE0 ; ---------------------------------------------------------------------------
.text:0040FBE6                 align 10h
.text:0040FBF0
.text:0040FBF0 ; =============== S U B R O U T I N E =======================================
.text:0040FBF0
.text:0040FBF0 ; Attributes: thunk
.text:0040FBF0
.text:0040FBF0 ; int __thiscall CWinThread::PumpMessage(CWinThread *__hidden this)
.text:0040FBF0 ?PumpMessage@CWinThread@@UAEHXZ proc near
.text:0040FBF0                                         ; DATA XREF: .text:00401DF8↑o
.text:0040FBF0                                         ; .text:00402BE4↑o
.text:0040FBF0                 jmp     ds:__imp_?PumpMessage@CWinThread@@UAEHXZ ; CWinThread::PumpMessage(void)
.text:0040FBF0 ?PumpMessage@CWinThread@@UAEHXZ endp
.text:0040FBF0
.text:0040FBF0 ; ---------------------------------------------------------------------------
.text:0040FBF6                 align 10h
.text:0040FC00
.text:0040FC00 ; =============== S U B R O U T I N E =======================================
.text:0040FC00
.text:0040FC00 ; Attributes: thunk
.text:0040FC00
.text:0040FC00 ; int __thiscall CWinApp::OnIdle(CWinApp *__hidden this, int)
.text:0040FC00 ?OnIdle@CWinApp@@UAEHJ@Z proc near      ; DATA XREF: .text:00401DFC↑o
.text:0040FC00                                         ; .text:00402BE8↑o
.text:0040FC00                 jmp     ds:__imp_?OnIdle@CWinApp@@UAEHJ@Z ; CWinApp::OnIdle(long)
.text:0040FC00 ?OnIdle@CWinApp@@UAEHJ@Z endp
.text:0040FC00
.text:0040FC00 ; ---------------------------------------------------------------------------
.text:0040FC06                 align 10h
.text:0040FC10
.text:0040FC10 ; =============== S U B R O U T I N E =======================================
.text:0040FC10
.text:0040FC10 ; Attributes: thunk
.text:0040FC10
.text:0040FC10 ; int __thiscall CWinThread::IsIdleMessage(CWinThread *__hidden this, struct tagMSG *)
.text:0040FC10 ?IsIdleMessage@CWinThread@@UAEHPAUtagMSG@@@Z proc near
.text:0040FC10                                         ; DATA XREF: .text:00401E00↑o
.text:0040FC10                                         ; .text:00402BEC↑o
.text:0040FC10                 jmp     ds:__imp_?IsIdleMessage@CWinThread@@UAEHPAUtagMSG@@@Z ; CWinThread::IsIdleMessage(tagMSG *)
.text:0040FC10 ?IsIdleMessage@CWinThread@@UAEHPAUtagMSG@@@Z endp
.text:0040FC10
.text:0040FC10 ; ---------------------------------------------------------------------------
.text:0040FC16                 align 10h
.text:0040FC20
.text:0040FC20 ; =============== S U B R O U T I N E =======================================
.text:0040FC20
.text:0040FC20 ; Attributes: thunk
.text:0040FC20
.text:0040FC20 ; int __thiscall CWinApp::ProcessWndProcException(CWinApp *__hidden this, struct CException *, const struct tagMSG *)
.text:0040FC20 ?ProcessWndProcException@CWinApp@@UAEJPAVCException@@PBUtagMSG@@@Z proc near
.text:0040FC20                                         ; DATA XREF: .text:00401E08↑o
.text:0040FC20                                         ; .text:00402BF0↑o
.text:0040FC20                 jmp     ds:__imp_?ProcessWndProcException@CWinApp@@UAEJPAVCException@@PBUtagMSG@@@Z ; CWinApp::ProcessWndProcException(CException *,tagMSG const *)
.text:0040FC20 ?ProcessWndProcException@CWinApp@@UAEJPAVCException@@PBUtagMSG@@@Z endp
.text:0040FC20
.text:0040FC20 ; ---------------------------------------------------------------------------
.text:0040FC26                 align 10h
.text:0040FC30
.text:0040FC30 ; =============== S U B R O U T I N E =======================================
.text:0040FC30
.text:0040FC30 ; Attributes: thunk
.text:0040FC30
.text:0040FC30 ; int __thiscall CWinThread::ProcessMessageFilter(CWinThread *__hidden this, int, struct tagMSG *)
.text:0040FC30 ?ProcessMessageFilter@CWinThread@@UAEHHPAUtagMSG@@@Z proc near
.text:0040FC30                                         ; DATA XREF: .text:00401E0C↑o
.text:0040FC30                                         ; .text:00402BF4↑o
.text:0040FC30                 jmp     ds:__imp_?ProcessMessageFilter@CWinThread@@UAEHHPAUtagMSG@@@Z ; CWinThread::ProcessMessageFilter(int,tagMSG *)
.text:0040FC30 ?ProcessMessageFilter@CWinThread@@UAEHHPAUtagMSG@@@Z endp
.text:0040FC30
.text:0040FC30 ; ---------------------------------------------------------------------------
.text:0040FC36                 align 10h
.text:0040FC40
.text:0040FC40 ; =============== S U B R O U T I N E =======================================
.text:0040FC40
.text:0040FC40 ; Attributes: thunk
.text:0040FC40
.text:0040FC40 ; struct CWnd *__thiscall CWinThread::GetMainWnd(CWinThread *__hidden this)
.text:0040FC40 ?GetMainWnd@CWinThread@@UAEPAVCWnd@@XZ proc near
.text:0040FC40                                         ; DATA XREF: .text:00401E10↑o
.text:0040FC40                                         ; .text:00402BF8↑o
.text:0040FC40                 jmp     ds:__imp_?GetMainWnd@CWinThread@@UAEPAVCWnd@@XZ ; CWinThread::GetMainWnd(void)
.text:0040FC40 ?GetMainWnd@CWinThread@@UAEPAVCWnd@@XZ endp
.text:0040FC40
.text:0040FC40 ; ---------------------------------------------------------------------------
.text:0040FC46                 align 10h
.text:0040FC50
.text:0040FC50 ; =============== S U B R O U T I N E =======================================
.text:0040FC50
.text:0040FC50 ; Attributes: thunk
.text:0040FC50
.text:0040FC50 ; void __thiscall CWinThread::Delete(CWinThread *__hidden this)
.text:0040FC50 ?Delete@CWinThread@@UAEXXZ proc near    ; DATA XREF: .text:00401E14↑o
.text:0040FC50                                         ; .text:00402BFC↑o
.text:0040FC50                 jmp     ds:__imp_?Delete@CWinThread@@UAEXXZ ; CWinThread::Delete(void)
.text:0040FC50 ?Delete@CWinThread@@UAEXXZ endp
.text:0040FC50
.text:0040FC50 ; ---------------------------------------------------------------------------
.text:0040FC56                 align 10h
.text:0040FC60
.text:0040FC60 ; =============== S U B R O U T I N E =======================================
.text:0040FC60
.text:0040FC60 ; Attributes: thunk
.text:0040FC60
.text:0040FC60 ; struct CDocument *__thiscall CWinApp::OpenDocumentFile(CWinApp *__hidden this, const unsigned __int16 *)
.text:0040FC60 ?OpenDocumentFile@CWinApp@@UAEPAVCDocument@@PBG@Z proc near
.text:0040FC60                                         ; DATA XREF: .text:00401E18↑o
.text:0040FC60                                         ; .text:00402C00↑o
.text:0040FC60                 jmp     ds:__imp_?OpenDocumentFile@CWinApp@@UAEPAVCDocument@@PBG@Z ; CWinApp::OpenDocumentFile(ushort const *)
.text:0040FC60 ?OpenDocumentFile@CWinApp@@UAEPAVCDocument@@PBG@Z endp
.text:0040FC60
.text:0040FC60 ; ---------------------------------------------------------------------------
.text:0040FC66                 align 10h
.text:0040FC70
.text:0040FC70 ; =============== S U B R O U T I N E =======================================
.text:0040FC70
.text:0040FC70 ; Attributes: thunk
.text:0040FC70
.text:0040FC70 ; void __thiscall CWinApp::AddToRecentFileList(CWinApp *__hidden this, const unsigned __int16 *)
.text:0040FC70 ?AddToRecentFileList@CWinApp@@UAEXPBG@Z proc near
.text:0040FC70                                         ; DATA XREF: .text:00401E1C↑o
.text:0040FC70                                         ; .text:00402C04↑o
.text:0040FC70                 jmp     ds:__imp_?AddToRecentFileList@CWinApp@@UAEXPBG@Z ; CWinApp::AddToRecentFileList(ushort const *)
.text:0040FC70 ?AddToRecentFileList@CWinApp@@UAEXPBG@Z endp
.text:0040FC70
.text:0040FC70 ; ---------------------------------------------------------------------------
.text:0040FC76                 align 10h
.text:0040FC80
.text:0040FC80 ; =============== S U B R O U T I N E =======================================
.text:0040FC80
.text:0040FC80 ; Attributes: thunk
.text:0040FC80
.text:0040FC80 ; int __thiscall CWinApp::InitApplication(CWinApp *__hidden this)
.text:0040FC80 ?InitApplication@CWinApp@@UAEHXZ proc near
.text:0040FC80                                         ; DATA XREF: .text:00401E20↑o
.text:0040FC80                                         ; .text:00402C08↑o
.text:0040FC80                 jmp     ds:__imp_?InitApplication@CWinApp@@UAEHXZ ; CWinApp::InitApplication(void)
.text:0040FC80 ?InitApplication@CWinApp@@UAEHXZ endp
.text:0040FC80
.text:0040FC80 ; ---------------------------------------------------------------------------
.text:0040FC86                 align 10h
.text:0040FC90
.text:0040FC90 ; =============== S U B R O U T I N E =======================================
.text:0040FC90
.text:0040FC90 ; Attributes: thunk
.text:0040FC90
.text:0040FC90 ; int __thiscall CWinApp::SaveAllModified(CWinApp *__hidden this)
.text:0040FC90 ?SaveAllModified@CWinApp@@UAEHXZ proc near
.text:0040FC90                                         ; DATA XREF: .text:00401E24↑o
.text:0040FC90                                         ; .text:00402C0C↑o
.text:0040FC90                 jmp     ds:__imp_?SaveAllModified@CWinApp@@UAEHXZ ; CWinApp::SaveAllModified(void)
.text:0040FC90 ?SaveAllModified@CWinApp@@UAEHXZ endp
.text:0040FC90
.text:0040FC90 ; ---------------------------------------------------------------------------
.text:0040FC96                 align 10h
.text:0040FCA0
.text:0040FCA0 ; =============== S U B R O U T I N E =======================================
.text:0040FCA0
.text:0040FCA0 ; Attributes: thunk
.text:0040FCA0
.text:0040FCA0 ; int __thiscall CWinApp::DoMessageBox(CWinApp *__hidden this, const unsigned __int16 *, unsigned int, unsigned int)
.text:0040FCA0 ?DoMessageBox@CWinApp@@UAEHPBGII@Z proc near
.text:0040FCA0                                         ; DATA XREF: .text:00401E28↑o
.text:0040FCA0                                         ; .text:00402C10↑o
.text:0040FCA0                 jmp     ds:__imp_?DoMessageBox@CWinApp@@UAEHPBGII@Z ; CWinApp::DoMessageBox(ushort const *,uint,uint)
.text:0040FCA0 ?DoMessageBox@CWinApp@@UAEHPBGII@Z endp
.text:0040FCA0
.text:0040FCA0 ; ---------------------------------------------------------------------------
.text:0040FCA6                 align 10h
.text:0040FCB0
.text:0040FCB0 ; =============== S U B R O U T I N E =======================================
.text:0040FCB0
.text:0040FCB0 ; Attributes: thunk
.text:0040FCB0
.text:0040FCB0 ; void __thiscall CWinApp::DoWaitCursor(CWinApp *__hidden this, int)
.text:0040FCB0 ?DoWaitCursor@CWinApp@@UAEXH@Z proc near
.text:0040FCB0                                         ; DATA XREF: .text:00401E2C↑o
.text:0040FCB0                                         ; .text:00402C14↑o
.text:0040FCB0                 jmp     ds:__imp_?DoWaitCursor@CWinApp@@UAEXH@Z ; CWinApp::DoWaitCursor(int)
.text:0040FCB0 ?DoWaitCursor@CWinApp@@UAEXH@Z endp
.text:0040FCB0
.text:0040FCB0 ; ---------------------------------------------------------------------------
.text:0040FCB6                 align 10h
.text:0040FCC0
.text:0040FCC0 ; =============== S U B R O U T I N E =======================================
.text:0040FCC0
.text:0040FCC0 ; Attributes: thunk
.text:0040FCC0
.text:0040FCC0 ; int __thiscall CWinApp::OnDDECommand(CWinApp *__hidden this, unsigned __int16 *)
.text:0040FCC0 ?OnDDECommand@CWinApp@@UAEHPAG@Z proc near
.text:0040FCC0                                         ; DATA XREF: .text:00401E30↑o
.text:0040FCC0                                         ; .text:00402C18↑o
.text:0040FCC0                 jmp     ds:__imp_?OnDDECommand@CWinApp@@UAEHPAG@Z ; CWinApp::OnDDECommand(ushort *)
.text:0040FCC0 ?OnDDECommand@CWinApp@@UAEHPAG@Z endp
.text:0040FCC0
.text:0040FCC0 ; ---------------------------------------------------------------------------
.text:0040FCC6                 align 10h
.text:0040FCD0
.text:0040FCD0 ; =============== S U B R O U T I N E =======================================
.text:0040FCD0
.text:0040FCD0 ; Attributes: thunk
.text:0040FCD0
.text:0040FCD0 ; void __thiscall CWinApp::WinHelpW(CWinApp *__hidden this, unsigned int, unsigned int)
.text:0040FCD0 ?WinHelpW@CWinApp@@UAEXKI@Z proc near   ; DATA XREF: .text:00401E34↑o
.text:0040FCD0                                         ; .text:00402C1C↑o
.text:0040FCD0                 jmp     ds:__imp_?WinHelpW@CWinApp@@UAEXKI@Z ; CWinApp::WinHelpW(ulong,uint)
.text:0040FCD0 ?WinHelpW@CWinApp@@UAEXKI@Z endp
.text:0040FCD0
.text:0040FCD6
.text:0040FCD6 ; =============== S U B R O U T I N E =======================================
.text:0040FCD6
.text:0040FCD6 ; Attributes: info_from_lumina
.text:0040FCD6
.text:0040FCD6 ; _DWORD __thiscall std::bad_alloc::bad_alloc(std::bad_alloc *__hidden this)
.text:0040FCD6 ??0bad_alloc@std@@QAE@XZ proc near      ; CODE XREF: operator new(uint)+43↓p
.text:0040FCD6                 mov     edi, edi
.text:0040FCD8                 push    esi
.text:0040FCD9                 mov     esi, ecx
.text:0040FCDB                 call    ??0exception@@QAE@XZ ; exception::exception(void)
.text:0040FCE0                 cmp     dword ptr [esi+4], 0
.text:0040FCE4                 mov     dword ptr [esi], offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:0040FCEA                 jnz     short loc_40FCFA
.text:0040FCEC                 cmp     dword ptr [esi+8], 0
.text:0040FCF0                 jnz     short loc_40FCFA
.text:0040FCF2                 mov     eax, off_413000 ; "bad allocation"
.text:0040FCF7                 mov     [esi+4], eax
.text:0040FCFA
.text:0040FCFA loc_40FCFA:                             ; CODE XREF: std::bad_alloc::bad_alloc(void)+14↑j
.text:0040FCFA                                         ; std::bad_alloc::bad_alloc(void)+1A↑j
.text:0040FCFA                 mov     eax, esi
.text:0040FCFC                 pop     esi
.text:0040FCFD                 retn
.text:0040FCFD ??0bad_alloc@std@@QAE@XZ endp
.text:0040FCFD
.text:0040FCFE
.text:0040FCFE ; =============== S U B R O U T I N E =======================================
.text:0040FCFE
.text:0040FCFE ; Attributes: bp-based frame info_from_lumina
.text:0040FCFE
.text:0040FCFE ; void *__cdecl operator new(size_t Size)
.text:0040FCFE ??2@YAPAXI@Z_0  proc near               ; CODE XREF: sub_40DE06+53↑p
.text:0040FCFE
.text:0040FCFE pExceptionObject= byte ptr -0Ch
.text:0040FCFE Size            = dword ptr  8
.text:0040FCFE
.text:0040FCFE                 mov     edi, edi
.text:0040FD00                 push    ebp
.text:0040FD01                 mov     ebp, esp
.text:0040FD03                 sub     esp, 0Ch
.text:0040FD06                 push    esi
.text:0040FD07                 jmp     short loc_40FD16
.text:0040FD09 ; ---------------------------------------------------------------------------
.text:0040FD09
.text:0040FD09 loc_40FD09:                             ; CODE XREF: operator new(uint)+24↓j
.text:0040FD09                 push    [ebp+Size]      ; Size
.text:0040FD0C                 call    _callnewh
.text:0040FD11                 pop     ecx
.text:0040FD12                 test    eax, eax
.text:0040FD14                 jz      short loc_40FD29
.text:0040FD16
.text:0040FD16 loc_40FD16:                             ; CODE XREF: operator new(uint)+9↑j
.text:0040FD16                 push    [ebp+Size]      ; Size
.text:0040FD19                 call    ds:malloc
.text:0040FD1F                 pop     ecx
.text:0040FD20                 test    eax, eax
.text:0040FD22                 jz      short loc_40FD09
.text:0040FD24                 pop     esi
.text:0040FD25                 mov     esp, ebp
.text:0040FD27                 pop     ebp
.text:0040FD28                 retn
.text:0040FD29 ; ---------------------------------------------------------------------------
.text:0040FD29
.text:0040FD29 loc_40FD29:                             ; CODE XREF: operator new(uint)+16↑j
.text:0040FD29                 mov     eax, dword_413460
.text:0040FD2E                 mov     esi, offset dword_413454
.text:0040FD33                 test    al, 1
.text:0040FD35                 jnz     short loc_40FD51
.text:0040FD37                 or      eax, 1
.text:0040FD3A                 mov     ecx, esi
.text:0040FD3C                 mov     dword_413460, eax
.text:0040FD41                 call    ??0bad_alloc@std@@QAE@XZ ; std::bad_alloc::bad_alloc(void)
.text:0040FD46                 push    offset sub_411740 ; Func
.text:0040FD4B                 call    sub_410445
.text:0040FD50                 pop     ecx
.text:0040FD51
.text:0040FD51 loc_40FD51:                             ; CODE XREF: operator new(uint)+37↑j
.text:0040FD51                 push    esi
.text:0040FD52                 lea     ecx, [ebp+pExceptionObject]
.text:0040FD55                 call    ??0range_error@std@@QAE@ABV01@@Z ; std::range_error::range_error(std::range_error const &)
.text:0040FD5A                 push    offset __TI2?AVbad_alloc@std@@ ; pThrowInfo
.text:0040FD5F                 lea     eax, [ebp+pExceptionObject]
.text:0040FD62                 push    eax             ; pExceptionObject
.text:0040FD63                 call    _CxxThrowException
.text:0040FD63 ??2@YAPAXI@Z_0  endp
.text:0040FD63
.text:0040FD63 ; ---------------------------------------------------------------------------
.text:0040FD68                 db 0CCh
.text:0040FD69
.text:0040FD69 ; =============== S U B R O U T I N E =======================================
.text:0040FD69
.text:0040FD69 ; Attributes: thunk
.text:0040FD69
.text:0040FD69 ; void __cdecl free(void *Block)
.text:0040FD69 free            proc near               ; CODE XREF: sub_404002+33↑p
.text:0040FD69                                         ; sub_404316+4C2↑p ...
.text:0040FD69
.text:0040FD69 Block           = dword ptr  4
.text:0040FD69
.text:0040FD69                 jmp     ds:__imp_free
.text:0040FD69 free            endp
.text:0040FD69
.text:0040FD69 ; ---------------------------------------------------------------------------
.text:0040FD6F                 align 10h
.text:0040FD70
.text:0040FD70 ; =============== S U B R O U T I N E =======================================
.text:0040FD70
.text:0040FD70 ; Attributes: bp-based frame info_from_lumina
.text:0040FD70
.text:0040FD70 ; void __thiscall std::bad_alloc::bad_alloc(std::bad_alloc *this, const std::bad_alloc *__that)
.text:0040FD70 ??0bad_alloc@std@@QAE@ABV01@@Z_1 proc near
.text:0040FD70                                         ; CODE XREF: std::logic_error::_Doraise(void)+16↓p
.text:0040FD70                                         ; DATA XREF: .text:00402C20↑o ...
.text:0040FD70
.text:0040FD70 var_4           = dword ptr -4
.text:0040FD70 arg_0           = dword ptr  8
.text:0040FD70
.text:0040FD70                 mov     edi, edi
.text:0040FD72                 push    ebp
.text:0040FD73                 mov     ebp, esp
.text:0040FD75                 push    ecx
.text:0040FD76                 push    esi
.text:0040FD77                 push    [ebp+arg_0]
.text:0040FD7A                 mov     esi, ecx
.text:0040FD7C                 mov     [ebp+var_4], esi
.text:0040FD7F                 call    ??0logic_error@std@@QAE@ABV01@@Z ; std::logic_error::logic_error(std::logic_error const &)
.text:0040FD84                 mov     dword ptr [esi], offset off_401000
.text:0040FD8A                 mov     eax, esi
.text:0040FD8C                 pop     esi
.text:0040FD8D                 mov     esp, ebp
.text:0040FD8F                 pop     ebp
.text:0040FD90                 retn    4
.text:0040FD90 ??0bad_alloc@std@@QAE@ABV01@@Z_1 endp
.text:0040FD90
.text:0040FD93
.text:0040FD93 ; =============== S U B R O U T I N E =======================================
.text:0040FD93
.text:0040FD93 ; Attributes: bp-based frame info_from_lumina
.text:0040FD93
.text:0040FD93 ; public: __thiscall std::out_of_range::out_of_range(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>, class _STL70> const &, class _STL70 *)
.text:0040FD93 ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@1@PAV_STL70@@@Z proc near
.text:0040FD93                                         ; CODE XREF: std::_String_base::_Xran(void)+26↓p
.text:0040FD93
.text:0040FD93 var_4           = dword ptr -4
.text:0040FD93 arg_0           = dword ptr  8
.text:0040FD93
.text:0040FD93                 mov     edi, edi
.text:0040FD95                 push    ebp
.text:0040FD96                 mov     ebp, esp
.text:0040FD98                 push    ecx
.text:0040FD99                 push    esi
.text:0040FD9A                 push    [ebp+arg_0]
.text:0040FD9D                 mov     esi, ecx
.text:0040FD9F                 mov     [ebp+var_4], esi
.text:0040FDA2                 call    ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@1@@Z ; std::logic_error::logic_error(std::string const &)
.text:0040FDA7                 mov     dword ptr [esi], offset off_401000
.text:0040FDAD                 mov     eax, esi
.text:0040FDAF                 pop     esi
.text:0040FDB0                 mov     esp, ebp
.text:0040FDB2                 pop     ebp
.text:0040FDB3                 retn    8
.text:0040FDB3 ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@1@PAV_STL70@@@Z endp
.text:0040FDB3
.text:0040FDB3 ; ---------------------------------------------------------------------------
.text:0040FDB6                 align 10h
.text:0040FDC0
.text:0040FDC0 ; =============== S U B R O U T I N E =======================================
.text:0040FDC0
.text:0040FDC0
.text:0040FDC0 sub_40FDC0      proc near               ; DATA XREF: .text:00402C24↑o
.text:0040FDC0                                         ; .text:__TI3?AVout_of_range@std@@↓o
.text:0040FDC0                 mov     dword ptr [ecx], offset off_401000
.text:0040FDC6                 jmp     ??1logic_error@std@@UAE@XZ ; std::logic_error::~logic_error(void)
.text:0040FDC6 sub_40FDC0      endp
.text:0040FDC6
.text:0040FDC6 ; ---------------------------------------------------------------------------
.text:0040FDCB                 align 10h
.text:0040FDD0
.text:0040FDD0 ; =============== S U B R O U T I N E =======================================
.text:0040FDD0
.text:0040FDD0 ; Attributes: bp-based frame info_from_lumina
.text:0040FDD0
.text:0040FDD0 ; void *__thiscall D3DXShader::C30Program::`scalar deleting destructor'(D3DXShader::C30Program *__hidden this, char)
.text:0040FDD0 ??_GC30Program@D3DXShader@@UAEPAXI@Z proc near
.text:0040FDD0                                         ; DATA XREF: .text:off_401000↑o
.text:0040FDD0                                         ; .text:00402C28↑o
.text:0040FDD0
.text:0040FDD0 arg_0           = byte ptr  8
.text:0040FDD0
.text:0040FDD0                 mov     edi, edi
.text:0040FDD2                 push    ebp
.text:0040FDD3                 mov     ebp, esp
.text:0040FDD5                 push    esi
.text:0040FDD6                 mov     esi, ecx
.text:0040FDD8                 mov     dword ptr [esi], offset off_401000
.text:0040FDDE                 call    ??1logic_error@std@@UAE@XZ ; std::logic_error::~logic_error(void)
.text:0040FDE3                 test    [ebp+arg_0], 1
.text:0040FDE7                 jz      short loc_40FDF0
.text:0040FDE9                 push    esi             ; void *
.text:0040FDEA                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0040FDEF                 pop     ecx
.text:0040FDF0
.text:0040FDF0 loc_40FDF0:                             ; CODE XREF: D3DXShader::C30Program::`scalar deleting destructor'(uint)+17↑j
.text:0040FDF0                 mov     eax, esi
.text:0040FDF2                 pop     esi
.text:0040FDF3                 pop     ebp
.text:0040FDF4                 retn    4
.text:0040FDF4 ??_GC30Program@D3DXShader@@UAEPAXI@Z endp
.text:0040FDF4
.text:0040FDF4 ; ---------------------------------------------------------------------------
.text:0040FDF7                 align 10h
.text:0040FE00
.text:0040FE00 ; =============== S U B R O U T I N E =======================================
.text:0040FE00
.text:0040FE00 ; Attributes: noreturn bp-based frame info_from_lumina
.text:0040FE00
.text:0040FE00 ; void __thiscall __noreturn std::logic_error::_Doraise(std::logic_error *__hidden this)
.text:0040FE00 ?_Doraise@logic_error@std@@MBEXXZ_1 proc near
.text:0040FE00                                         ; DATA XREF: .text:00401008↑o
.text:0040FE00                                         ; .text:00402C2C↑o
.text:0040FE00
.text:0040FE00 pExceptionObject= byte ptr -2Ch
.text:0040FE00 var_4           = dword ptr -4
.text:0040FE00
.text:0040FE00                 mov     edi, edi
.text:0040FE02                 push    ebp
.text:0040FE03                 mov     ebp, esp
.text:0040FE05                 sub     esp, 2Ch
.text:0040FE08                 mov     eax, ___security_cookie
.text:0040FE0D                 xor     eax, ebp
.text:0040FE0F                 mov     [ebp+var_4], eax
.text:0040FE12                 push    ecx
.text:0040FE13                 lea     ecx, [ebp+pExceptionObject]
.text:0040FE16                 call    ??0bad_alloc@std@@QAE@ABV01@@Z_1 ; std::bad_alloc::bad_alloc(std::bad_alloc const &)
.text:0040FE1B                 push    offset __TI3?AVout_of_range@std@@ ; pThrowInfo
.text:0040FE20                 lea     eax, [ebp+pExceptionObject]
.text:0040FE23                 push    eax             ; pExceptionObject
.text:0040FE24                 call    _CxxThrowException
.text:0040FE24 ?_Doraise@logic_error@std@@MBEXXZ_1 endp
.text:0040FE24
.text:0040FE24 ; ---------------------------------------------------------------------------
.text:0040FE29                 align 2
.text:0040FE2A
.text:0040FE2A ; =============== S U B R O U T I N E =======================================
.text:0040FE2A
.text:0040FE2A ; Attributes: noreturn bp-based frame
.text:0040FE2A
.text:0040FE2A sub_40FE2A      proc near               ; CODE XREF: std::string::_Grow(uint,bool)+11↑p
.text:0040FE2A
.text:0040FE2A pExceptionObject= byte ptr -54h
.text:0040FE2A var_2C          = byte ptr -2Ch
.text:0040FE2A var_4           = dword ptr -4
.text:0040FE2A arg_4           = dword ptr  0Ch
.text:0040FE2A
.text:0040FE2A ; FUNCTION CHUNK AT .text:00406A2D SIZE 0000000A BYTES
.text:0040FE2A ; FUNCTION CHUNK AT .text:004116D2 SIZE 0000002D BYTES
.text:0040FE2A
.text:0040FE2A ; __unwind { // loc_4116DA
.text:0040FE2A                 push    48h
.text:0040FE2C                 mov     eax, offset loc_4116DA
.text:0040FE31                 call    __EH_prolog3_GS
.text:0040FE36                 push    offset aStringTooLong ; "string too long"
.text:0040FE3B                 lea     ecx, [ebp+var_2C]
.text:0040FE3E                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::string::string(char const *)
.text:0040FE43 ;   try {
.text:0040FE43                 and     [ebp+var_4], 0
.text:0040FE47                 lea     eax, [ebp+var_2C]
.text:0040FE4A                 push    eax
.text:0040FE4B                 lea     ecx, [ebp+pExceptionObject]
.text:0040FE4E                 call    ??0bad_alloc@std@@QAE@ABV01@@Z_0 ; std::bad_alloc::bad_alloc(std::bad_alloc const &)
.text:0040FE53                 push    offset __TI3?AVlength_error@std@@ ; pThrowInfo
.text:0040FE58                 lea     eax, [ebp+pExceptionObject]
.text:0040FE5B                 push    eax             ; pExceptionObject
.text:0040FE5C                 call    _CxxThrowException
.text:0040FE5C ;   } // starts at 40FE43
.text:0040FE5C ; } // starts at 40FE2A
.text:0040FE5C sub_40FE2A      endp
.text:0040FE5C
.text:0040FE5C ; ---------------------------------------------------------------------------
.text:0040FE61                 align 2
.text:0040FE62
.text:0040FE62 ; =============== S U B R O U T I N E =======================================
.text:0040FE62
.text:0040FE62 ; Attributes: bp-based frame info_from_lumina
.text:0040FE62
.text:0040FE62 ; void __cdecl std::_String_base::_Xran()
.text:0040FE62 ?_Xran@_String_base@std@@SAXXZ proc near
.text:0040FE62                                         ; CODE XREF: std::string::erase(uint,uint)+13↑p
.text:0040FE62                                         ; std::string::assign(std::string const &,uint,uint)+15↑p
.text:0040FE62
.text:0040FE62 pExceptionObject= byte ptr -54h
.text:0040FE62 var_2C          = byte ptr -2Ch
.text:0040FE62 var_4           = dword ptr -4
.text:0040FE62
.text:0040FE62 ; FUNCTION CHUNK AT .text:004116D2 SIZE 0000002D BYTES
.text:0040FE62
.text:0040FE62 ; __unwind { // loc_4116DA
.text:0040FE62                 push    48h
.text:0040FE64                 mov     eax, offset loc_4116DA
.text:0040FE69                 call    __EH_prolog3_GS
.text:0040FE6E                 push    offset aInvalidStringP ; "invalid string position"
.text:0040FE73                 lea     ecx, [ebp+var_2C]
.text:0040FE76                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::string::string(char const *)
.text:0040FE7B ;   try {
.text:0040FE7B                 and     [ebp+var_4], 0
.text:0040FE7F                 lea     eax, [ebp+var_2C]
.text:0040FE82                 push    0
.text:0040FE84                 push    eax
.text:0040FE85                 lea     ecx, [ebp+pExceptionObject]
.text:0040FE88                 call    ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@V_STL70@@@1@PAV_STL70@@@Z ; std::out_of_range::out_of_range(std::string const &,_STL70 *)
.text:0040FE8D                 push    offset __TI3?AVout_of_range@std@@ ; pThrowInfo
.text:0040FE92                 lea     eax, [ebp+pExceptionObject]
.text:0040FE95                 push    eax             ; pExceptionObject
.text:0040FE96                 call    _CxxThrowException
.text:0040FE96 ;   } // starts at 40FE7B
.text:0040FE96 ; } // starts at 40FE62
.text:0040FE96 ?_Xran@_String_base@std@@SAXXZ endp
.text:0040FE96
.text:0040FE96 ; ---------------------------------------------------------------------------
.text:0040FE9B                 align 10h
.text:0040FEA0
.text:0040FEA0 ; =============== S U B R O U T I N E =======================================
.text:0040FEA0
.text:0040FEA0 ; Attributes: info_from_lumina
.text:0040FEA0
.text:0040FEA0 pre_c_init      proc near               ; DATA XREF: .text:00402880↑o
.text:0040FEA0                                         ; .text:00402C30↑o
.text:0040FEA0                 mov     eax, 5A4Dh
.text:0040FEA5                 cmp     ds:400000h, ax
.text:0040FEAC                 jz      short loc_40FEB2
.text:0040FEAE
.text:0040FEAE loc_40FEAE:                             ; CODE XREF: pre_c_init+22↓j
.text:0040FEAE                                         ; pre_c_init+37↓j
.text:0040FEAE                 xor     eax, eax
.text:0040FEB0                 jmp     short loc_40FF00
.text:0040FEB2 ; ---------------------------------------------------------------------------
.text:0040FEB2
.text:0040FEB2 loc_40FEB2:                             ; CODE XREF: pre_c_init+C↑j
.text:0040FEB2                 mov     ecx, ds:40003Ch
.text:0040FEB8                 cmp     dword ptr [ecx+400000h], 4550h
.text:0040FEC2                 jnz     short loc_40FEAE
.text:0040FEC4                 movzx   eax, word ptr [ecx+400018h]
.text:0040FECB                 cmp     eax, 10Bh
.text:0040FED0                 jz      short loc_40FEEC
.text:0040FED2                 cmp     eax, 20Bh
.text:0040FED7                 jnz     short loc_40FEAE
.text:0040FED9                 xor     eax, eax
.text:0040FEDB                 cmp     dword ptr [ecx+400084h], 0Eh
.text:0040FEE2                 jbe     short loc_40FF00
.text:0040FEE4                 cmp     [ecx+4000F8h], eax
.text:0040FEEA                 jmp     short loc_40FEFD
.text:0040FEEC ; ---------------------------------------------------------------------------
.text:0040FEEC
.text:0040FEEC loc_40FEEC:                             ; CODE XREF: pre_c_init+30↑j
.text:0040FEEC                 xor     eax, eax
.text:0040FEEE                 cmp     dword ptr [ecx+400074h], 0Eh
.text:0040FEF5                 jbe     short loc_40FF00
.text:0040FEF7                 cmp     [ecx+4000E8h], eax
.text:0040FEFD
.text:0040FEFD loc_40FEFD:                             ; CODE XREF: pre_c_init+4A↑j
.text:0040FEFD                 setnz   al
.text:0040FF00
.text:0040FF00 loc_40FF00:                             ; CODE XREF: pre_c_init+10↑j
.text:0040FF00                                         ; pre_c_init+42↑j ...
.text:0040FF00                 push    2
.text:0040FF02                 mov     dword_413480, eax
.text:0040FF07                 call    __get_image_app_type
.text:0040FF0C                 push    eax             ; Type
.text:0040FF0D                 call    ds:__set_app_type
.text:0040FF13                 or      dword_413AAC, 0FFFFFFFFh
.text:0040FF1A                 or      dword_413AB0, 0FFFFFFFFh
.text:0040FF21                 pop     ecx
.text:0040FF22                 pop     ecx
.text:0040FF23                 call    ds:__p__fmode
.text:0040FF29                 mov     ecx, dword_4137B0
.text:0040FF2F                 mov     [eax], ecx
.text:0040FF31                 call    ds:__p__commode
.text:0040FF37                 mov     ecx, dword_4137A4
.text:0040FF3D                 mov     [eax], ecx
.text:0040FF3F                 call    UserMathErrorFunction
.text:0040FF44                 cmp     dword_413418, 0
.text:0040FF4B                 jnz     short loc_40FF59
.text:0040FF4D                 push    offset UserMathErrorFunction ; UserMathErrorFunction
.text:0040FF52                 call    ds:__setusermatherr
.text:0040FF58                 pop     ecx
.text:0040FF59
.text:0040FF59 loc_40FF59:                             ; CODE XREF: pre_c_init+AB↑j
.text:0040FF59                 call    sub_410895
.text:0040FF5E                 xor     eax, eax
.text:0040FF60                 retn
.text:0040FF60 pre_c_init      endp
.text:0040FF60
.text:0040FF60 ; ---------------------------------------------------------------------------
.text:0040FF61                 align 10h
.text:0040FF70
.text:0040FF70 ; =============== S U B R O U T I N E =======================================
.text:0040FF70
.text:0040FF70 ; Attributes: info_from_lumina
.text:0040FF70
.text:0040FF70 ; int pre_cpp_init()
.text:0040FF70 pre_cpp_init    proc near               ; DATA XREF: .text:00402868↑o
.text:0040FF70                                         ; .text:00402C34↑o
.text:0040FF70                 mov     eax, dword_4137AC
.text:0040FF75                 push    offset dword_413484
.text:0040FF7A                 push    dword_4137A8
.text:0040FF80                 mov     dword_413484, eax
.text:0040FF85                 push    offset unk_413478
.text:0040FF8A                 push    offset unk_413474
.text:0040FF8F                 push    offset unk_413470
.text:0040FF94                 call    ds:__wgetmainargs
.text:0040FF9A                 add     esp, 14h
.text:0040FF9D                 mov     dword_41347C, eax
.text:0040FFA2                 retn
.text:0040FFA2 pre_cpp_init    endp
.text:0040FFA2
.text:0040FFA3 ; ---------------------------------------------------------------------------
.text:0040FFA3 ; START OF FUNCTION CHUNK FOR start
.text:0040FFA3
.text:0040FFA3 loc_40FFA3:                             ; CODE XREF: start+5↓j
.text:0040FFA3 ; __unwind { // __SEH_prolog4_GS
.text:0040FFA3                 push    5Ch ; '\'
.text:0040FFA5                 push    offset stru_4124B0
.text:0040FFAA                 call    __SEH_prolog4_GS
.text:0040FFAF                 and     dword ptr [ebp-20h], 0
.text:0040FFB3 ;   __try { // __except at loc_410175
.text:0040FFB3                 and     dword ptr [ebp-4], 0
.text:0040FFB7                 lea     eax, [ebp-6Ch]
.text:0040FFBA                 push    eax             ; lpStartupInfo
.text:0040FFBB                 call    ds:GetStartupInfoW
.text:0040FFBB ;   } // starts at 40FFB3
.text:0040FFC1                 mov     dword ptr [ebp-4], 0FFFFFFFEh
.text:0040FFC8                 xor     ebx, ebx
.text:0040FFCA                 inc     ebx
.text:0040FFCB                 mov     [ebp-4], ebx
.text:0040FFCE                 mov     eax, large fs:18h
.text:0040FFD4                 mov     edi, [eax+4]
.text:0040FFD7                 xor     esi, esi
.text:0040FFD9
.text:0040FFD9 loc_40FFD9:                             ; CODE XREF: start-1D3↓j
.text:0040FFD9                 mov     edx, offset unk_413AA4
.text:0040FFDE                 mov     ecx, edi
.text:0040FFE0                 xor     eax, eax
.text:0040FFE2                 lock cmpxchg [edx], ecx
.text:0040FFE6                 test    eax, eax
.text:0040FFE8                 jz      short loc_40FFF0
.text:0040FFEA                 cmp     eax, edi
.text:0040FFEC                 jnz     short loc_410002
.text:0040FFEE                 mov     esi, ebx
.text:0040FFF0
.text:0040FFF0 loc_40FFF0:                             ; CODE XREF: start-1F8↑j
.text:0040FFF0                 cmp     dword_413AA8, ebx
.text:0040FFF6                 jnz     short loc_41000F
.text:0040FFF8                 push    1Fh
.text:0040FFFA                 call    _amsg_exit
.text:0040FFFF                 pop     ecx
.text:00410000                 jmp     short loc_41003E
.text:00410002 ; ---------------------------------------------------------------------------
.text:00410002
.text:00410002 loc_410002:                             ; CODE XREF: start-1F4↑j
.text:00410002                 push    3E8h            ; dwMilliseconds
.text:00410007                 call    ds:Sleep
.text:0041000D                 jmp     short loc_40FFD9
.text:0041000F ; ---------------------------------------------------------------------------
.text:0041000F
.text:0041000F loc_41000F:                             ; CODE XREF: start-1EA↑j
.text:0041000F                 cmp     dword_413AA8, 0
.text:00410016                 jnz     short loc_410038
.text:00410018                 mov     dword_413AA8, ebx
.text:0041001E                 push    offset dword_402888 ; Last
.text:00410023                 push    offset dword_40287C ; First
.text:00410028                 call    __initterm_e
.text:0041002D                 pop     ecx
.text:0041002E                 pop     ecx
.text:0041002F                 test    eax, eax
.text:00410031                 jz      short loc_41003E
.text:00410033                 jmp     loc_410178
.text:00410038 ; ---------------------------------------------------------------------------
.text:00410038
.text:00410038 loc_410038:                             ; CODE XREF: start-1CA↑j
.text:00410038                 mov     dword_41346C, ebx
.text:0041003E
.text:0041003E loc_41003E:                             ; CODE XREF: start-1E0↑j
.text:0041003E                                         ; start-1AF↑j
.text:0041003E                 cmp     dword_413AA8, ebx
.text:00410044
.text:00410044 loc_410044:                             ; DATA XREF: .text:off_402E28↑o
.text:00410044                 jnz     short loc_410061
.text:00410046                 push    offset Last     ; Last
.text:0041004B
.text:0041004B loc_41004B:                             ; DATA XREF: .text:off_403154↑o
.text:0041004B                 push    offset First    ; First
.text:00410050
.text:00410050 loc_410050:                             ; DATA XREF: .text:off_403160↑o
.text:00410050                 call    _initterm
.text:00410055                 pop     ecx
.text:00410056                 pop     ecx
.text:00410057                 mov     dword_413AA8, 2
.text:00410061
.text:00410061 loc_410061:                             ; CODE XREF: start:loc_410044↑j
.text:00410061                 test    esi, esi
.text:00410063                 jnz     short loc_41006E
.text:00410065                 xor     eax, eax
.text:00410067                 mov     ecx, offset unk_413AA4
.text:0041006C                 xchg    eax, [ecx]
.text:0041006E
.text:0041006E loc_41006E:                             ; CODE XREF: start-17D↑j
.text:0041006E                 cmp     pTarget, 0
.text:00410075                 jz      short loc_41009C
.text:00410077                 push    offset pTarget  ; pTarget
.text:0041007C                 call    __IsNonwritableInCurrentImage
.text:00410081                 pop     ecx
.text:00410082                 test    eax, eax
.text:00410084                 jz      short loc_41009C
.text:00410086                 push    0
.text:00410088                 push    2
.text:0041008A                 push    0
.text:0041008C                 mov     esi, pTarget
.text:00410092                 mov     ecx, esi
.text:00410094                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0041009A                 call    esi ; pTarget
.text:0041009C
.text:0041009C loc_41009C:                             ; CODE XREF: start-16B↑j
.text:0041009C                                         ; start-15C↑j
.text:0041009C                 mov     eax, ds:_wcmdln
.text:004100A1                 mov     ecx, [eax]
.text:004100A3                 test    ecx, ecx
.text:004100A5                 jz      loc_410178
.text:004100AB                 mov     [ebp-24h], ecx
.text:004100AE                 push    20h ; ' '
.text:004100B0                 pop     esi
.text:004100B1                 mov     edx, [ebp-20h]
.text:004100B4
.text:004100B4 loc_4100B4:                             ; CODE XREF: start-BD↓j
.text:004100B4                 movzx   eax, word ptr [ecx]
.text:004100B7                 cmp     ax, si
.text:004100BA                 ja      short loc_41010C
.text:004100BC                 test    ax, ax
.text:004100BF                 jz      short loc_4100C5
.text:004100C1                 test    edx, edx
.text:004100C3                 jnz     short loc_41010C
.text:004100C5
.text:004100C5 loc_4100C5:                             ; CODE XREF: start-121↑j
.text:004100C5                                         ; start-108↓j
.text:004100C5                 movzx   eax, word ptr [ecx]
.text:004100C8                 test    ax, ax
.text:004100CB                 jz      short loc_4100DA
.text:004100CD                 cmp     ax, si
.text:004100D0                 ja      short loc_4100DA
.text:004100D2                 add     ecx, 2
.text:004100D5                 mov     [ebp-24h], ecx
.text:004100D8                 jmp     short loc_4100C5
.text:004100DA ; ---------------------------------------------------------------------------
.text:004100DA
.text:004100DA loc_4100DA:                             ; CODE XREF: start-115↑j
.text:004100DA                                         ; start-110↑j
.text:004100DA                 test    byte ptr [ebp-40h], 1
.text:004100DE                 jz      short loc_4100E6
.text:004100E0                 movzx   eax, word ptr [ebp-3Ch]
.text:004100E4                 jmp     short loc_4100E9
.text:004100E6 ; ---------------------------------------------------------------------------
.text:004100E6
.text:004100E6 loc_4100E6:                             ; CODE XREF: start-102↑j
.text:004100E6                 push    0Ah
.text:004100E8                 pop     eax
.text:004100E9
.text:004100E9 loc_4100E9:                             ; CODE XREF: start-FC↑j
.text:004100E9                 push    eax
.text:004100EA                 push    ecx
.text:004100EB                 push    0
.text:004100ED                 push    400000h
.text:004100F2                 call    sub_4109C8
.text:004100F7                 mov     dword_413468, eax
.text:004100FC                 cmp     dword_413480, 0
.text:00410103                 jnz     short loc_410154
.text:00410105                 push    eax             ; Code
.text:00410106                 call    ds:exit
.text:0041010C ; ---------------------------------------------------------------------------
.text:0041010C
.text:0041010C loc_41010C:                             ; CODE XREF: start-126↑j
.text:0041010C                                         ; start-11D↑j
.text:0041010C                 cmp     eax, 22h ; '"'
.text:0041010F                 jnz     short loc_41011D
.text:00410111                 xor     eax, eax
.text:00410113                 test    edx, edx
.text:00410115                 setz    al
.text:00410118                 mov     edx, eax
.text:0041011A                 mov     [ebp-20h], edx
.text:0041011D
.text:0041011D loc_41011D:                             ; CODE XREF: start-D1↑j
.text:0041011D                 add     ecx, 2
.text:00410120                 mov     [ebp-24h], ecx
.text:00410123                 jmp     short loc_4100B4
.text:00410123 ; } // starts at 40FFA3
.text:00410123 ; END OF FUNCTION CHUNK FOR start
.text:00410125
.text:00410125 ; =============== S U B R O U T I N E =======================================
.text:00410125
.text:00410125
.text:00410125 sub_410125      proc near               ; DATA XREF: .text:004124D0↓o
.text:00410125                 mov     ecx, [ebp-14h]
.text:00410128                 mov     eax, [ecx]
.text:0041012A                 mov     eax, [eax]
.text:0041012C                 mov     [ebp-28h], eax
.text:0041012F                 push    ecx
.text:00410130                 push    eax
.text:00410131                 call    _XcptFilter
.text:00410136                 pop     ecx
.text:00410137                 pop     ecx
.text:00410138                 retn
.text:00410138 sub_410125      endp
.text:00410138
.text:00410139
.text:00410139 ; =============== S U B R O U T I N E =======================================
.text:00410139
.text:00410139
.text:00410139 sub_410139      proc near               ; DATA XREF: .text:004124D4↓o
.text:00410139
.text:00410139 ; FUNCTION CHUNK AT .text:00410154 SIZE 00000036 BYTES
.text:00410139
.text:00410139                 mov     esp, [ebp-18h]
.text:0041013C                 mov     eax, [ebp-28h]
.text:0041013F                 mov     dword_413468, eax
.text:00410144                 cmp     dword_413480, 0
.text:0041014B                 jnz     short loc_410154
.text:0041014D                 push    eax             ; Code
.text:0041014E                 call    ds:_exit
.text:0041014E sub_410139      endp
.text:0041014E
.text:00410154 ; ---------------------------------------------------------------------------
.text:00410154 ; START OF FUNCTION CHUNK FOR start
.text:00410154 ;   ADDITIONAL PARENT FUNCTION sub_410139
.text:00410154
.text:00410154 loc_410154:                             ; CODE XREF: start-DD↑j
.text:00410154                                         ; sub_410139+12↑j
.text:00410154 ; __unwind { // __SEH_prolog4_GS
.text:00410154                 cmp     dword_41346C, 0
.text:0041015B                 jnz     short loc_410168
.text:0041015D                 call    ds:_cexit
.text:00410163                 mov     eax, dword_413468
.text:00410168
.text:00410168 loc_410168:                             ; CODE XREF: start-85↑j
.text:00410168                 mov     dword ptr [ebp-4], 0FFFFFFFEh
.text:0041016F                 jmp     short loc_410184
.text:00410171 ; ---------------------------------------------------------------------------
.text:00410171
.text:00410171 loc_410171:                             ; DATA XREF: .text:stru_4124B0↓o
.text:00410171 ;   __except filter // owned by 40FFB3
.text:00410171                 xor     eax, eax
.text:00410173                 inc     eax
.text:00410174                 retn
.text:00410175 ; ---------------------------------------------------------------------------
.text:00410175
.text:00410175 loc_410175:                             ; DATA XREF: .text:stru_4124B0↓o
.text:00410175 ;   __except(loc_410171) // owned by 40FFB3
.text:00410175                 mov     esp, [ebp-18h]
.text:00410178
.text:00410178 loc_410178:                             ; CODE XREF: start-1AD↑j
.text:00410178                                         ; start-13B↑j
.text:00410178                 mov     dword ptr [ebp-4], 0FFFFFFFEh
.text:0041017F                 mov     eax, 0FFh
.text:00410184
.text:00410184 loc_410184:                             ; CODE XREF: start-71↑j
.text:00410184                 call    __SEH_epilog4_GS
.text:00410189                 retn
.text:00410189 ; } // starts at 410154
.text:00410189 ; END OF FUNCTION CHUNK FOR start
.text:0041018A
.text:0041018A ; =============== S U B R O U T I N E =======================================
.text:0041018A
.text:0041018A ; Attributes: bp-based frame info_from_lumina
.text:0041018A
.text:0041018A ; int __cdecl _initterm_e(_PIFV *First, _PIFV *Last)
.text:0041018A __initterm_e    proc near               ; CODE XREF: start-1B8↑p
.text:0041018A
.text:0041018A var_4           = dword ptr -4
.text:0041018A First           = dword ptr  8
.text:0041018A Last            = dword ptr  0Ch
.text:0041018A
.text:0041018A                 mov     edi, edi
.text:0041018C                 push    ebp
.text:0041018D                 mov     ebp, esp
.text:0041018F                 push    ecx
.text:00410190                 mov     eax, ___security_cookie
.text:00410195                 xor     eax, ebp
.text:00410197                 mov     [ebp+var_4], eax
.text:0041019A                 push    esi
.text:0041019B                 mov     esi, [ebp+First]
.text:0041019E                 xor     eax, eax
.text:004101A0                 cmp     esi, [ebp+Last]
.text:004101A3                 jnb     short loc_4101C3
.text:004101A5                 push    edi
.text:004101A6
.text:004101A6 loc_4101A6:                             ; CODE XREF: __initterm_e+36↓j
.text:004101A6                 test    eax, eax
.text:004101A8                 jnz     short loc_4101C2
.text:004101AA                 mov     edi, [esi]
.text:004101AC                 test    edi, edi
.text:004101AE                 jz      short loc_4101BA
.text:004101B0                 mov     ecx, edi
.text:004101B2                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:004101B8                 call    edi
.text:004101BA
.text:004101BA loc_4101BA:                             ; CODE XREF: __initterm_e+24↑j
.text:004101BA                 add     esi, 4
.text:004101BD                 cmp     esi, [ebp+Last]
.text:004101C0                 jb      short loc_4101A6
.text:004101C2
.text:004101C2 loc_4101C2:                             ; CODE XREF: __initterm_e+1E↑j
.text:004101C2                 pop     edi
.text:004101C3
.text:004101C3 loc_4101C3:                             ; CODE XREF: __initterm_e+19↑j
.text:004101C3                 mov     ecx, [ebp+var_4]
.text:004101C6                 xor     ecx, ebp        ; StackCookie
.text:004101C8                 pop     esi
.text:004101C9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004101CE                 mov     esp, ebp
.text:004101D0                 pop     ebp
.text:004101D1                 retn
.text:004101D1 __initterm_e    endp
.text:004101D1
.text:004101D1 ; ---------------------------------------------------------------------------
.text:004101D2                 align 10h
.text:004101E0
.text:004101E0 ; =============== S U B R O U T I N E =======================================
.text:004101E0
.text:004101E0 ; Attributes: library function
.text:004101E0
.text:004101E0                 public start
.text:004101E0 start           proc near               ; DATA XREF: .text:00402C38↑o
.text:004101E0
.text:004101E0 ; FUNCTION CHUNK AT .text:0040FFA3 SIZE 00000182 BYTES
.text:004101E0 ; FUNCTION CHUNK AT .text:00410154 SIZE 00000036 BYTES
.text:004101E0
.text:004101E0 ; __unwind { // __SEH_prolog4_GS
.text:004101E0                 call    ___security_init_cookie
.text:004101E5                 jmp     loc_40FFA3
.text:004101E5 ; } // starts at 4101E0
.text:004101E5 start           endp
.text:004101E5
.text:004101EA
.text:004101EA ; =============== S U B R O U T I N E =======================================
.text:004101EA
.text:004101EA ; Attributes: thunk
.text:004101EA
.text:004101EA __CxxFrameHandler3 proc near            ; CODE XREF: sub_403C90+CDB8↓j
.text:004101EA                                         ; sub_403DC0+CCAB↓j ...
.text:004101EA                 jmp     ds:__imp___CxxFrameHandler3
.text:004101EA __CxxFrameHandler3 endp
.text:004101EA
.text:004101F0
.text:004101F0 ; =============== S U B R O U T I N E =======================================
.text:004101F0
.text:004101F0 ; Attributes: library function
.text:004101F0
.text:004101F0 ; void __fastcall __security_check_cookie(uintptr_t StackCookie)
.text:004101F0 @__security_check_cookie@4 proc near    ; CODE XREF: sub_403B8B+8A↑p
.text:004101F0                                         ; sub_403E16+EA↑p ...
.text:004101F0                 cmp     ecx, ___security_cookie
.text:004101F6                 jnz     short loc_4101FB
.text:004101F8                 retn    0
.text:004101FB ; ---------------------------------------------------------------------------
.text:004101FB
.text:004101FB loc_4101FB:                             ; CODE XREF: __security_check_cookie(x)+6↑j
.text:004101FB                 jmp     ___report_gsfailure
.text:004101FB @__security_check_cookie@4 endp
.text:004101FB
.text:00410200
.text:00410200 ; =============== S U B R O U T I N E =======================================
.text:00410200
.text:00410200 ; Attributes: bp-based frame info_from_lumina
.text:00410200
.text:00410200 ; void *__thiscall type_info::`scalar deleting destructor'(type_info *__hidden this, char)
.text:00410200 ??_Gtype_info@@UAEPAXI@Z proc near      ; DATA XREF: .text:off_40100C↑o
.text:00410200                                         ; .text:00402C40↑o
.text:00410200
.text:00410200 arg_0           = byte ptr  8
.text:00410200
.text:00410200                 mov     edi, edi
.text:00410202                 push    ebp
.text:00410203                 mov     ebp, esp
.text:00410205                 push    esi
.text:00410206                 mov     esi, ecx
.text:00410208                 call    ds:??1type_info@@UAE@XZ ; type_info::~type_info(void)
.text:0041020E                 test    [ebp+arg_0], 1
.text:00410212                 jz      short loc_41021B
.text:00410214                 push    esi             ; void *
.text:00410215                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0041021A                 pop     ecx
.text:0041021B
.text:0041021B loc_41021B:                             ; CODE XREF: type_info::`scalar deleting destructor'(uint)+12↑j
.text:0041021B                 mov     eax, esi
.text:0041021D                 pop     esi
.text:0041021E                 pop     ebp
.text:0041021F                 retn    4
.text:0041021F ??_Gtype_info@@UAEPAXI@Z endp
.text:0041021F
.text:0041021F ; ---------------------------------------------------------------------------
.text:00410222                 align 10h
.text:00410230
.text:00410230 ; =============== S U B R O U T I N E =======================================
.text:00410230
.text:00410230 ; Attributes: thunk
.text:00410230
.text:00410230 _purecall       proc near               ; DATA XREF: .text:00401368↑o
.text:00410230                                         ; .text:00401378↑o ...
.text:00410230                 jmp     ds:__imp__purecall
.text:00410230 _purecall       endp
.text:00410230
.text:00410236
.text:00410236 ; =============== S U B R O U T I N E =======================================
.text:00410236
.text:00410236 ; Attributes: bp-based frame
.text:00410236
.text:00410236 sub_410236      proc near               ; CODE XREF: sub_404316+6C↑p
.text:00410236                                         ; sub_404EFD+54↑p ...
.text:00410236                 mov     edi, edi
.text:00410238                 push    ebp
.text:00410239                 mov     ebp, esp
.text:0041023B                 pop     ebp
.text:0041023C                 jmp     ??2@YAPAXIABUnothrow_t@std@@@Z ; operator new(uint,std::nothrow_t const &)
.text:0041023C sub_410236      endp
.text:0041023C
.text:0041023C ; ---------------------------------------------------------------------------
.text:00410241                 align 10h
.text:00410250
.text:00410250 ; =============== S U B R O U T I N E =======================================
.text:00410250
.text:00410250 ; Attributes: thunk
.text:00410250
.text:00410250 ; exception *__thiscall exception::exception(exception *__hidden this, const struct exception *)
.text:00410250 ??0exception@@QAE@ABV0@@Z proc near     ; DATA XREF: .text:00402C48↑o
.text:00410250                                         ; .text:00412618↓o
.text:00410250                 jmp     ds:__imp_??0exception@@QAE@ABV0@@Z ; exception::exception(exception const &)
.text:00410250 ??0exception@@QAE@ABV0@@Z endp
.text:00410250
.text:00410250 ; ---------------------------------------------------------------------------
.text:00410256                 align 10h
.text:00410260
.text:00410260 ; =============== S U B R O U T I N E =======================================
.text:00410260
.text:00410260 ; Attributes: thunk
.text:00410260
.text:00410260 ; const char *__thiscall exception::what(exception *__hidden this)
.text:00410260 ?what@exception@@UBEPBDXZ proc near     ; DATA XREF: .text:0040115C↑o
.text:00410260                                         ; .text:00402C4C↑o
.text:00410260                 jmp     ds:__imp_?what@exception@@UBEPBDXZ ; exception::what(void)
.text:00410260 ?what@exception@@UBEPBDXZ endp
.text:00410260
.text:00410266
.text:00410266 ; =============== S U B R O U T I N E =======================================
.text:00410266
.text:00410266 ; Attributes: thunk
.text:00410266
.text:00410266 ; void __thiscall exception::~exception(exception *__hidden this)
.text:00410266 ??1exception@@UAE@XZ proc near          ; CODE XREF: sub_411740+F↓j
.text:00410266                 jmp     ds:__imp_??1exception@@UAE@XZ ; exception::~exception(void)
.text:00410266 ??1exception@@UAE@XZ endp
.text:00410266
.text:0041026C
.text:0041026C ; =============== S U B R O U T I N E =======================================
.text:0041026C
.text:0041026C ; Attributes: thunk
.text:0041026C
.text:0041026C ; exception *__thiscall exception::exception(exception *__hidden this)
.text:0041026C ??0exception@@QAE@XZ proc near          ; CODE XREF: std::bad_alloc::bad_alloc(void)+5↑p
.text:0041026C                 jmp     ds:__imp_??0exception@@QAE@XZ ; exception::exception(void)
.text:0041026C ??0exception@@QAE@XZ endp
.text:0041026C
.text:00410272
.text:00410272 ; =============== S U B R O U T I N E =======================================
.text:00410272
.text:00410272 ; Attributes: bp-based frame info_from_lumina
.text:00410272
.text:00410272 ; void __cdecl __raise_securityfailure(_EXCEPTION_POINTERS *ExceptionPointers)
.text:00410272 ___raise_securityfailure proc near      ; CODE XREF: ___report_gsfailure+107↓p
.text:00410272
.text:00410272 ExceptionInfo   = dword ptr  8
.text:00410272
.text:00410272                 mov     edi, edi
.text:00410274                 push    ebp
.text:00410275                 mov     ebp, esp
.text:00410277                 push    0               ; lpTopLevelExceptionFilter
.text:00410279                 call    ds:SetUnhandledExceptionFilter
.text:0041027F                 push    [ebp+ExceptionInfo] ; ExceptionInfo
.text:00410282                 call    ds:UnhandledExceptionFilter
.text:00410288                 push    0C0000409h      ; uExitCode
.text:0041028D                 call    ds:GetCurrentProcess
.text:00410293                 push    eax             ; hProcess
.text:00410294                 call    ds:TerminateProcess
.text:0041029A                 pop     ebp
.text:0041029B                 retn
.text:0041029B ___raise_securityfailure endp
.text:0041029B
.text:0041029C
.text:0041029C ; =============== S U B R O U T I N E =======================================
.text:0041029C
.text:0041029C ; Attributes: noreturn bp-based frame info_from_lumina
.text:0041029C
.text:0041029C ; void __cdecl __noreturn __report_gsfailure()
.text:0041029C ___report_gsfailure proc near           ; CODE XREF: __security_check_cookie(x):loc_4101FB↑j
.text:0041029C
.text:0041029C var_324         = dword ptr -324h
.text:0041029C var_8           = dword ptr -8
.text:0041029C var_s0          = dword ptr  0
.text:0041029C arg_0           = byte ptr  8
.text:0041029C
.text:0041029C                 mov     edi, edi
.text:0041029E                 push    ebp
.text:0041029F                 mov     ebp, esp
.text:004102A1                 sub     esp, 324h
.text:004102A7                 mov     dword_413588, eax
.text:004102AC                 mov     dword_413584, ecx
.text:004102B2                 mov     dword_413580, edx
.text:004102B8                 mov     dword_41357C, ebx
.text:004102BE                 mov     dword_413578, esi
.text:004102C4                 mov     dword_413574, edi
.text:004102CA                 mov     word_4135A0, ss
.text:004102D1                 mov     word_413594, cs
.text:004102D8                 mov     word_413570, ds
.text:004102DF                 mov     word_41356C, es
.text:004102E6                 mov     word_413568, fs
.text:004102ED                 mov     word_413564, gs
.text:004102F4                 pushf
.text:004102F5                 pop     dword_413598
.text:004102FB                 mov     eax, [ebp+var_s0]
.text:004102FE                 mov     dword_41358C, eax
.text:00410303                 mov     eax, [ebp+4]
.text:00410306                 mov     dword_413590, eax
.text:0041030B                 lea     eax, [ebp+arg_0]
.text:0041030E                 mov     dword_41359C, eax
.text:00410313                 mov     eax, [ebp+var_324]
.text:00410319                 mov     dword_4134D8, 10001h
.text:00410323                 mov     eax, dword_413590
.text:00410328                 mov     dword_413494, eax
.text:0041032D                 mov     dword_413488, 0C0000409h
.text:00410337                 mov     dword_41348C, 1
.text:00410341                 mov     dword_413498, 3
.text:0041034B                 push    4
.text:0041034D                 pop     eax
.text:0041034E                 imul    eax, 0
.text:00410351                 mov     dword_41349C[eax], 2
.text:0041035B                 push    4
.text:0041035D                 pop     eax
.text:0041035E                 shl     eax, 0
.text:00410361                 mov     ecx, ___security_cookie
.text:00410367                 mov     dword_41349C[eax], ecx
.text:0041036D                 push    4
.text:0041036F                 pop     eax
.text:00410370                 shl     eax, 1
.text:00410372                 mov     ecx, dword_413414
.text:00410378                 mov     dword_41349C[eax], ecx
.text:0041037E                 push    4
.text:00410380                 pop     eax
.text:00410381                 imul    eax, 0
.text:00410384                 mov     ecx, ___security_cookie
.text:0041038A                 mov     [ebp+eax+var_8], ecx
.text:0041038E                 push    4
.text:00410390                 pop     eax
.text:00410391                 shl     eax, 0
.text:00410394                 mov     ecx, dword_413414
.text:0041039A                 mov     [ebp+eax+var_8], ecx
.text:0041039E                 push    offset ExceptionInfo ; ExceptionInfo
.text:004103A3                 call    ___raise_securityfailure
.text:004103A8                 mov     esp, ebp
.text:004103AA                 pop     ebp
.text:004103AB                 retn
.text:004103AB ___report_gsfailure endp
.text:004103AB
.text:004103AC
.text:004103AC ; =============== S U B R O U T I N E =======================================
.text:004103AC
.text:004103AC ; Attributes: bp-based frame info_from_lumina
.text:004103AC
.text:004103AC ; _onexit_t __cdecl _onexit(_onexit_t Func)
.text:004103AC __onexit        proc near               ; CODE XREF: sub_410445+8↓p
.text:004103AC
.text:004103AC var_28          = dword ptr -28h
.text:004103AC var_24          = dword ptr -24h
.text:004103AC var_20          = dword ptr -20h
.text:004103AC ms_exc          = CPPEH_RECORD ptr -18h
.text:004103AC Func            = dword ptr  8
.text:004103AC
.text:004103AC ; __unwind { // __SEH_prolog4_GS
.text:004103AC                 push    18h
.text:004103AE                 push    offset stru_4124D8
.text:004103B3                 call    __SEH_prolog4_GS
.text:004103B8                 and     [ebp+var_28], 0
.text:004103BC                 mov     eax, dword_413AB0
.text:004103C1                 mov     [ebp+var_20], eax
.text:004103C4                 cmp     eax, 0FFFFFFFFh
.text:004103C7                 jnz     short loc_4103DF
.text:004103C9                 push    [ebp+Func]      ; Func
.text:004103CC                 mov     esi, ds:_onexit
.text:004103D2                 mov     ecx, esi
.text:004103D4                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:004103DA                 call    esi ; _onexit
.text:004103DC                 pop     ecx
.text:004103DD                 jmp     short loc_410433
.text:004103DF ; ---------------------------------------------------------------------------
.text:004103DF
.text:004103DF loc_4103DF:                             ; CODE XREF: __onexit+1B↑j
.text:004103DF                 push    8
.text:004103E1                 call    _lock
.text:004103E6                 pop     ecx
.text:004103E7 ;   __try { // __finally(loc_410439)
.text:004103E7                 and     [ebp+ms_exc.registration.TryLevel], 0
.text:004103EB                 mov     eax, dword_413AB0
.text:004103F0                 mov     [ebp+var_20], eax
.text:004103F3                 mov     eax, dword_413AAC
.text:004103F8                 mov     [ebp+var_24], eax
.text:004103FB                 lea     eax, [ebp+var_24]
.text:004103FE                 push    eax
.text:004103FF                 lea     eax, [ebp+var_20]
.text:00410402                 push    eax
.text:00410403                 push    [ebp+Func]
.text:00410406                 call    __dllonexit
.text:0041040B                 add     esp, 0Ch
.text:0041040E                 mov     esi, eax
.text:00410410                 mov     [ebp+var_28], esi
.text:00410413                 mov     ecx, [ebp+var_20]
.text:00410416                 mov     dword_413AB0, ecx
.text:0041041C                 mov     ecx, [ebp+var_24]
.text:0041041F                 mov     dword_413AAC, ecx
.text:0041041F ;   } // starts at 4103E7
.text:00410425                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
.text:0041042C                 call    loc_41043C
.text:00410431 ; ---------------------------------------------------------------------------
.text:00410431
.text:00410431 loc_410431:                             ; CODE XREF: __onexit+98↓j
.text:00410431                 mov     eax, esi
.text:00410433
.text:00410433 loc_410433:                             ; CODE XREF: __onexit+31↑j
.text:00410433                 call    __SEH_epilog4_GS
.text:00410438                 retn
.text:00410439 ; ---------------------------------------------------------------------------
.text:00410439
.text:00410439 loc_410439:                             ; DATA XREF: .text:stru_4124D8↓o
.text:00410439 ;   __finally // owned by 4103E7
.text:00410439                 mov     esi, [ebp+var_28]
.text:0041043C
.text:0041043C loc_41043C:                             ; CODE XREF: __onexit+80↑j
.text:0041043C                 push    8
.text:0041043E                 call    _unlock
.text:00410443                 pop     ecx
.text:00410444                 retn
.text:00410444 ; } // starts at 4103AC
.text:00410444 __onexit        endp
.text:00410444
.text:00410445
.text:00410445 ; =============== S U B R O U T I N E =======================================
.text:00410445
.text:00410445 ; Attributes: bp-based frame
.text:00410445
.text:00410445 ; int __cdecl sub_410445(_onexit_t Func)
.text:00410445 sub_410445      proc near               ; CODE XREF: sub_403AC0+1C↑p
.text:00410445                                         ; sub_403AF0+10↑p ...
.text:00410445
.text:00410445 Func            = dword ptr  8
.text:00410445
.text:00410445                 mov     edi, edi
.text:00410447                 push    ebp
.text:00410448                 mov     ebp, esp
.text:0041044A                 push    [ebp+Func]      ; Func
.text:0041044D                 call    __onexit
.text:00410452                 neg     eax
.text:00410454                 pop     ecx
.text:00410455                 sbb     eax, eax
.text:00410457                 neg     eax
.text:00410459                 dec     eax
.text:0041045A                 pop     ebp
.text:0041045B                 retn
.text:0041045B sub_410445      endp
.text:0041045B
.text:0041045C
.text:0041045C ; =============== S U B R O U T I N E =======================================
.text:0041045C
.text:0041045C ; Attributes: bp-based frame info_from_lumina
.text:0041045C
.text:0041045C ; void *__cdecl operator new(unsigned int count, const std::nothrow_t *__formal)
.text:0041045C ??2@YAPAXIABUnothrow_t@std@@@Z proc near
.text:0041045C                                         ; CODE XREF: sub_40DC59+21↑p
.text:0041045C                                         ; sub_410236+6↑j
.text:0041045C
.text:0041045C var_14          = dword ptr -14h
.text:0041045C var_4           = dword ptr -4
.text:0041045C arg_0           = dword ptr  8
.text:0041045C arg_4           = dword ptr  0Ch
.text:0041045C
.text:0041045C ; FUNCTION CHUNK AT .text:004116FF SIZE 0000001B BYTES
.text:0041045C
.text:0041045C ; __unwind { // loc_4116FF
.text:0041045C                 push    8
.text:0041045E                 mov     eax, offset loc_4116FF
.text:00410463                 call    __EH_prolog3_catch
.text:00410468                 push    [ebp+arg_0]     ; unsigned int
.text:0041046B ;   try {
.text:0041046B                 and     [ebp+var_4], 0
.text:0041046F                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00410474                 pop     ecx
.text:00410475                 jmp     short loc_410484
.text:00410477 ; ---------------------------------------------------------------------------
.text:00410477
.text:00410477 loc_410477:                             ; DATA XREF: .text:stru_4124F4↓o
.text:00410477 ;   catch(...) // owned by 41046B
.text:00410477                 and     [ebp+var_14], 0
.text:0041047B                 mov     eax, offset loc_410481
.text:00410480                 retn
.text:00410481 ; ---------------------------------------------------------------------------
.text:00410481
.text:00410481 loc_410481:                             ; CODE XREF: operator new(uint,std::nothrow_t const &)+24↑j
.text:00410481                                         ; DATA XREF: operator new(uint,std::nothrow_t const &)+1F↑o
.text:00410481                 mov     eax, [ebp+var_14]
.text:00410484
.text:00410484 loc_410484:                             ; CODE XREF: operator new(uint,std::nothrow_t const &)+19↑j
.text:00410484                 call    __EH_epilog3
.text:00410489                 retn
.text:00410489 ;   } // starts at 41046B
.text:00410489 ; } // starts at 41045C
.text:00410489 ??2@YAPAXIABUnothrow_t@std@@@Z endp
.text:00410489
.text:0041048A
.text:0041048A ; =============== S U B R O U T I N E =======================================
.text:0041048A
.text:0041048A ; Attributes: thunk
.text:0041048A
.text:0041048A ; int __cdecl callnewh(size_t Size)
.text:0041048A _callnewh       proc near               ; CODE XREF: operator new(uint)+E↑p
.text:0041048A
.text:0041048A Size            = dword ptr  4
.text:0041048A
.text:0041048A                 jmp     ds:__imp__callnewh
.text:0041048A _callnewh       endp
.text:0041048A
.text:00410490
.text:00410490 ; =============== S U B R O U T I N E =======================================
.text:00410490
.text:00410490 ; Attributes: noreturn thunk
.text:00410490
.text:00410490 ; void __stdcall __noreturn CxxThrowException(void *pExceptionObject, _ThrowInfo *pThrowInfo)
.text:00410490 _CxxThrowException proc near            ; CODE XREF: sub_406166+32↑p
.text:00410490                                         ; sub_4063BA+41↑p ...
.text:00410490
.text:00410490 pExceptionObject= dword ptr  4
.text:00410490 pThrowInfo      = dword ptr  8
.text:00410490
.text:00410490                 jmp     ds:__imp__CxxThrowException
.text:00410490 _CxxThrowException endp
.text:00410490
.text:00410496
.text:00410496 ; =============== S U B R O U T I N E =======================================
.text:00410496
.text:00410496 ; Attributes: library function
.text:00410496
.text:00410496 __EH_epilog3    proc near               ; CODE XREF: sub_403DC0:loc_403DEB↑p
.text:00410496                                         ; sub_403F0B+C1↑p ...
.text:00410496                 mov     ecx, [ebp-0Ch]
.text:00410499                 mov     large fs:0, ecx
.text:004104A0                 pop     ecx
.text:004104A1                 pop     edi
.text:004104A2                 pop     edi
.text:004104A3                 pop     esi
.text:004104A4                 pop     ebx
.text:004104A5                 mov     esp, ebp
.text:004104A7                 pop     ebp
.text:004104A8                 push    ecx
.text:004104A9                 retn
.text:004104A9 __EH_epilog3    endp ; sp-analysis failed
.text:004104A9
.text:004104AA
.text:004104AA ; =============== S U B R O U T I N E =======================================
.text:004104AA
.text:004104AA ; Attributes: library function
.text:004104AA
.text:004104AA __EH_epilog3_GS proc near               ; CODE XREF: sub_403C90+66↑p
.text:004104AA                                         ; sub_403CFC:loc_403D60↑p ...
.text:004104AA                 mov     ecx, [ebp-10h]
.text:004104AD                 xor     ecx, ebp        ; StackCookie
.text:004104AF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004104B4                 jmp     __EH_epilog3
.text:004104B4 __EH_epilog3_GS endp
.text:004104B4
.text:004104B9
.text:004104B9 ; =============== S U B R O U T I N E =======================================
.text:004104B9
.text:004104B9 ; Attributes: library function
.text:004104B9
.text:004104B9 __EH_epilog3_catch_GS proc near         ; CODE XREF: sub_4050D7:loc_4052B6↑p
.text:004104B9                 mov     ecx, [ebp-14h]
.text:004104BC                 xor     ecx, ebp        ; StackCookie
.text:004104BE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004104C3                 jmp     __EH_epilog3
.text:004104C3 __EH_epilog3_catch_GS endp
.text:004104C3
.text:004104C8
.text:004104C8 ; =============== S U B R O U T I N E =======================================
.text:004104C8
.text:004104C8 ; Attributes: library function
.text:004104C8
.text:004104C8 __EH_prolog3    proc near               ; CODE XREF: sub_403DC0+7↑p
.text:004104C8                                         ; sub_403F0B+7↑p ...
.text:004104C8
.text:004104C8 arg_0           = byte ptr  4
.text:004104C8
.text:004104C8                 push    eax
.text:004104C9                 push    large dword ptr fs:0
.text:004104D0                 lea     eax, [esp+8+arg_0]
.text:004104D4                 sub     esp, [esp+0Ch]
.text:004104D8                 push    ebx
.text:004104D9                 push    esi
.text:004104DA                 push    edi
.text:004104DB                 mov     [eax], ebp
.text:004104DD                 mov     ebp, eax
.text:004104DF                 mov     eax, ___security_cookie
.text:004104E4                 xor     eax, ebp
.text:004104E6                 push    eax
.text:004104E7                 push    dword ptr [ebp-4]
.text:004104EA                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:004104F1                 lea     eax, [ebp-0Ch]
.text:004104F4                 mov     large fs:0, eax
.text:004104FA                 retn
.text:004104FA __EH_prolog3    endp ; sp-analysis failed
.text:004104FA
.text:004104FB
.text:004104FB ; =============== S U B R O U T I N E =======================================
.text:004104FB
.text:004104FB ; Attributes: library function
.text:004104FB
.text:004104FB __EH_prolog3_GS proc near               ; CODE XREF: sub_403C90+7↑p
.text:004104FB                                         ; sub_403CFC+7↑p ...
.text:004104FB
.text:004104FB arg_0           = byte ptr  4
.text:004104FB
.text:004104FB                 push    eax
.text:004104FC                 push    large dword ptr fs:0
.text:00410503                 lea     eax, [esp+8+arg_0]
.text:00410507                 sub     esp, [esp+0Ch]
.text:0041050B                 push    ebx
.text:0041050C                 push    esi
.text:0041050D                 push    edi
.text:0041050E                 mov     [eax], ebp
.text:00410510                 mov     ebp, eax
.text:00410512                 mov     eax, ___security_cookie
.text:00410517                 xor     eax, ebp
.text:00410519                 push    eax
.text:0041051A                 mov     [ebp-10h], eax
.text:0041051D                 push    dword ptr [ebp-4]
.text:00410520                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00410527                 lea     eax, [ebp-0Ch]
.text:0041052A                 mov     large fs:0, eax
.text:00410530                 retn
.text:00410530 __EH_prolog3_GS endp ; sp-analysis failed
.text:00410530
.text:00410531
.text:00410531 ; =============== S U B R O U T I N E =======================================
.text:00410531
.text:00410531 ; Attributes: library function
.text:00410531
.text:00410531 __EH_prolog3_catch proc near            ; CODE XREF: std::string::_Copy(uint,uint)+7↑p
.text:00410531                                         ; operator new(uint,std::nothrow_t const &)+7↑p
.text:00410531
.text:00410531 arg_0           = byte ptr  4
.text:00410531
.text:00410531                 push    eax
.text:00410532                 push    large dword ptr fs:0
.text:00410539                 lea     eax, [esp+8+arg_0]
.text:0041053D                 sub     esp, [esp+0Ch]
.text:00410541                 push    ebx
.text:00410542                 push    esi
.text:00410543                 push    edi
.text:00410544                 mov     [eax], ebp
.text:00410546                 mov     ebp, eax
.text:00410548                 mov     eax, ___security_cookie
.text:0041054D                 xor     eax, ebp
.text:0041054F                 push    eax
.text:00410550                 mov     [ebp-10h], esp
.text:00410553                 push    dword ptr [ebp-4]
.text:00410556                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:0041055D                 lea     eax, [ebp-0Ch]
.text:00410560                 mov     large fs:0, eax
.text:00410566                 retn
.text:00410566 __EH_prolog3_catch endp ; sp-analysis failed
.text:00410566
.text:00410567
.text:00410567 ; =============== S U B R O U T I N E =======================================
.text:00410567
.text:00410567 ; Attributes: library function
.text:00410567
.text:00410567 __EH_prolog3_catch_GS proc near         ; CODE XREF: sub_4050D7+7↑p
.text:00410567
.text:00410567 arg_0           = byte ptr  4
.text:00410567
.text:00410567                 push    eax
.text:00410568                 push    large dword ptr fs:0
.text:0041056F                 lea     eax, [esp+8+arg_0]
.text:00410573                 sub     esp, [esp+0Ch]
.text:00410577                 push    ebx
.text:00410578                 push    esi
.text:00410579                 push    edi
.text:0041057A                 mov     [eax], ebp
.text:0041057C                 mov     ebp, eax
.text:0041057E                 mov     eax, ___security_cookie
.text:00410583                 xor     eax, ebp
.text:00410585                 push    eax
.text:00410586                 mov     [ebp-14h], eax
.text:00410589                 mov     [ebp-10h], esp
.text:0041058C                 push    dword ptr [ebp-4]
.text:0041058F                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text:00410596                 lea     eax, [ebp-0Ch]
.text:00410599                 mov     large fs:0, eax
.text:0041059F                 retn
.text:0041059F __EH_prolog3_catch_GS endp ; sp-analysis failed
.text:0041059F
.text:004105A0
.text:004105A0 ; =============== S U B R O U T I N E =======================================
.text:004105A0
.text:004105A0 ; Attributes: bp-based frame info_from_lumina
.text:004105A0
.text:004105A0 ; LONG __stdcall __CxxUnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:004105A0 ?__CxxUnhandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z proc near
.text:004105A0                                         ; DATA XREF: .text:00402C50↑o
.text:004105A0                                         ; sub_4105F0↓o
.text:004105A0
.text:004105A0 ExceptionInfo   = dword ptr  8
.text:004105A0
.text:004105A0                 mov     edi, edi
.text:004105A2                 push    ebp
.text:004105A3                 mov     ebp, esp
.text:004105A5                 mov     eax, [ebp+ExceptionInfo]
.text:004105A8                 mov     eax, [eax]
.text:004105AA                 cmp     dword ptr [eax], 0E06D7363h
.text:004105B0                 jnz     short loc_4105DD
.text:004105B2                 cmp     dword ptr [eax+10h], 3
.text:004105B6                 jnz     short loc_4105DD
.text:004105B8                 mov     eax, [eax+14h]
.text:004105BB                 cmp     eax, 19930520h
.text:004105C0                 jz      short loc_4105D7
.text:004105C2                 cmp     eax, 19930521h
.text:004105C7                 jz      short loc_4105D7
.text:004105C9                 cmp     eax, 19930522h
.text:004105CE                 jz      short loc_4105D7
.text:004105D0                 cmp     eax, 1994000h
.text:004105D5                 jnz     short loc_4105DD
.text:004105D7
.text:004105D7 loc_4105D7:                             ; CODE XREF: __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *)+20↑j
.text:004105D7                                         ; __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *)+27↑j ...
.text:004105D7                 call    ds:?terminate@@YAXXZ ; terminate(void)
.text:004105DD ; ---------------------------------------------------------------------------
.text:004105DD
.text:004105DD loc_4105DD:                             ; CODE XREF: __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *)+10↑j
.text:004105DD                                         ; __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *)+16↑j ...
.text:004105DD                 xor     eax, eax
.text:004105DF                 pop     ebp
.text:004105E0                 retn    4
.text:004105E0 ?__CxxUnhandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z endp
.text:004105E0
.text:004105E0 ; ---------------------------------------------------------------------------
.text:004105E3                 align 10h
.text:004105F0
.text:004105F0 ; =============== S U B R O U T I N E =======================================
.text:004105F0
.text:004105F0
.text:004105F0 sub_4105F0      proc near               ; DATA XREF: .text:00402884↑o
.text:004105F0                                         ; .text:00402C54↑o
.text:004105F0                 push    offset ?__CxxUnhandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ; lpTopLevelExceptionFilter
.text:004105F5                 call    ds:SetUnhandledExceptionFilter
.text:004105FB                 xor     eax, eax
.text:004105FD                 retn
.text:004105FD sub_4105F0      endp
.text:004105FD
.text:004105FE
.text:004105FE ; =============== S U B R O U T I N E =======================================
.text:004105FE
.text:004105FE ; Attributes: thunk
.text:004105FE
.text:004105FE _XcptFilter     proc near               ; CODE XREF: sub_410125+C↑p
.text:004105FE                 jmp     ds:__imp__XcptFilter
.text:004105FE _XcptFilter     endp
.text:004105FE
.text:00410604
.text:00410604 ; =============== S U B R O U T I N E =======================================
.text:00410604
.text:00410604 ; Attributes: bp-based frame info_from_lumina
.text:00410604
.text:00410604 ; __stdcall RtlpImageNtHeader(x)
.text:00410604 _RtlpImageNtHeader@4 proc near          ; CODE XREF: __get_image_app_type+12↓p
.text:00410604
.text:00410604 var_1C          = dword ptr -1Ch
.text:00410604 ms_exc          = CPPEH_RECORD ptr -18h
.text:00410604 arg_0           = dword ptr  8
.text:00410604
.text:00410604 ; __unwind { // __SEH_prolog4
.text:00410604                 push    0Ch
.text:00410606                 push    offset stru_412550
.text:0041060B                 call    __SEH_prolog4
.text:00410610                 xor     ecx, ecx
.text:00410612                 mov     eax, [ebp+arg_0]
.text:00410615                 test    eax, eax
.text:00410617                 jz      short loc_410664
.text:00410619                 cmp     eax, 0FFFFFFFFh
.text:0041061C                 jz      short loc_410664
.text:0041061E ;   __try { // __except at loc_410655
.text:0041061E                 mov     [ebp+ms_exc.registration.TryLevel], ecx
.text:00410621                 mov     edx, 5A4Dh
.text:00410626                 cmp     [eax], dx
.text:00410629                 jnz     short loc_41065D
.text:0041062B                 mov     edx, [eax+3Ch]
.text:0041062E                 test    edx, edx
.text:00410630                 js      short loc_41065D
.text:00410632                 cmp     edx, 10000000h
.text:00410638                 jnb     short loc_41065D
.text:0041063A                 add     eax, edx
.text:0041063C                 mov     [ebp+var_1C], eax
.text:0041063F                 mov     ecx, [eax]
.text:00410641                 sub     ecx, 4550h
.text:00410647                 neg     ecx
.text:00410649                 sbb     ecx, ecx
.text:0041064B                 not     ecx
.text:0041064D                 and     ecx, eax
.text:0041064F                 jmp     short loc_41065A
.text:00410651 ; ---------------------------------------------------------------------------
.text:00410651
.text:00410651 loc_410651:                             ; DATA XREF: .text:stru_412550↓o
.text:00410651 ;   __except filter // owned by 41061E
.text:00410651                 xor     eax, eax
.text:00410653                 inc     eax
.text:00410654                 retn
.text:00410655 ; ---------------------------------------------------------------------------
.text:00410655
.text:00410655 loc_410655:                             ; DATA XREF: .text:stru_412550↓o
.text:00410655 ;   __except(loc_410651) // owned by 41061E
.text:00410655                 mov     esp, [ebp+ms_exc.old_esp]
.text:00410658                 xor     ecx, ecx
.text:0041065A
.text:0041065A loc_41065A:                             ; CODE XREF: RtlpImageNtHeader(x)+4B↑j
.text:0041065A                 mov     [ebp+var_1C], ecx
.text:0041065A ;   } // starts at 41061E
.text:0041065D
.text:0041065D loc_41065D:                             ; CODE XREF: RtlpImageNtHeader(x)+25↑j
.text:0041065D                                         ; RtlpImageNtHeader(x)+2C↑j ...
.text:0041065D                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
.text:00410664
.text:00410664 loc_410664:                             ; CODE XREF: RtlpImageNtHeader(x)+13↑j
.text:00410664                                         ; RtlpImageNtHeader(x)+18↑j
.text:00410664                 mov     eax, ecx
.text:00410666                 call    __SEH_epilog4
.text:0041066B                 retn    4
.text:0041066B ; } // starts at 410604
.text:0041066B _RtlpImageNtHeader@4 endp
.text:0041066B
.text:0041066E
.text:0041066E ; =============== S U B R O U T I N E =======================================
.text:0041066E
.text:0041066E ; Attributes: bp-based frame info_from_lumina
.text:0041066E
.text:0041066E ; int __cdecl _get_image_app_type(int)
.text:0041066E __get_image_app_type proc near          ; CODE XREF: pre_c_init+67↑p
.text:0041066E
.text:0041066E arg_0           = dword ptr  8
.text:0041066E
.text:0041066E                 mov     edi, edi
.text:00410670                 push    ebp
.text:00410671                 mov     ebp, esp
.text:00410673                 push    0               ; lpModuleName
.text:00410675                 call    ds:GetModuleHandleA
.text:0041067B                 test    eax, eax
.text:0041067D                 jz      short loc_41069F
.text:0041067F                 push    eax
.text:00410680                 call    _RtlpImageNtHeader@4 ; RtlpImageNtHeader(x)
.text:00410685                 test    eax, eax
.text:00410687                 jz      short loc_41069F
.text:00410689                 movzx   ecx, word ptr [eax+5Ch]
.text:0041068D                 push    2
.text:0041068F                 pop     eax
.text:00410690                 cmp     cx, ax
.text:00410693                 jz      short loc_4106A2
.text:00410695                 cmp     ecx, 3
.text:00410698                 jnz     short loc_41069F
.text:0041069A                 xor     eax, eax
.text:0041069C                 inc     eax
.text:0041069D                 pop     ebp
.text:0041069E                 retn
.text:0041069F ; ---------------------------------------------------------------------------
.text:0041069F
.text:0041069F loc_41069F:                             ; CODE XREF: __get_image_app_type+F↑j
.text:0041069F                                         ; __get_image_app_type+19↑j ...
.text:0041069F                 mov     eax, [ebp+arg_0]
.text:004106A2
.text:004106A2 loc_4106A2:                             ; CODE XREF: __get_image_app_type+25↑j
.text:004106A2                 pop     ebp
.text:004106A3                 retn
.text:004106A3 __get_image_app_type endp
.text:004106A3
.text:004106A4
.text:004106A4 ; =============== S U B R O U T I N E =======================================
.text:004106A4
.text:004106A4 ; Attributes: thunk
.text:004106A4
.text:004106A4 _amsg_exit      proc near               ; CODE XREF: start-1E6↑p
.text:004106A4                 jmp     ds:__imp__amsg_exit
.text:004106A4 _amsg_exit      endp
.text:004106A4
.text:004106A4 ; ---------------------------------------------------------------------------
.text:004106AA                 align 10h
.text:004106B0
.text:004106B0 ; =============== S U B R O U T I N E =======================================
.text:004106B0
.text:004106B0 ; Attributes: bp-based frame info_from_lumina
.text:004106B0
.text:004106B0 ; _IMAGE_SECTION_HEADER *__cdecl _FindPESection(char *pImageBase, unsigned int rva)
.text:004106B0 __FindPESection proc near               ; CODE XREF: __IsNonwritableInCurrentImage+5B↓p
.text:004106B0
.text:004106B0 arg_0           = dword ptr  8
.text:004106B0 arg_4           = dword ptr  0Ch
.text:004106B0
.text:004106B0                 mov     edi, edi
.text:004106B2                 push    ebp
.text:004106B3                 mov     ebp, esp
.text:004106B5                 mov     eax, [ebp+arg_0]
.text:004106B8                 xor     edx, edx
.text:004106BA                 push    ebx
.text:004106BB                 push    esi
.text:004106BC                 push    edi
.text:004106BD                 mov     ecx, [eax+3Ch]
.text:004106C0                 add     ecx, eax
.text:004106C2                 movzx   eax, word ptr [ecx+14h]
.text:004106C6                 movzx   ebx, word ptr [ecx+6]
.text:004106CA                 add     eax, 18h
.text:004106CD                 add     eax, ecx
.text:004106CF                 test    ebx, ebx
.text:004106D1                 jz      short loc_4106EE
.text:004106D3                 mov     edi, [ebp+arg_4]
.text:004106D6
.text:004106D6 loc_4106D6:                             ; CODE XREF: __FindPESection+3C↓j
.text:004106D6                 mov     esi, [eax+0Ch]
.text:004106D9                 cmp     edi, esi
.text:004106DB                 jb      short loc_4106E6
.text:004106DD                 mov     ecx, [eax+8]
.text:004106E0                 add     ecx, esi
.text:004106E2                 cmp     edi, ecx
.text:004106E4                 jb      short loc_4106F0
.text:004106E6
.text:004106E6 loc_4106E6:                             ; CODE XREF: __FindPESection+2B↑j
.text:004106E6                 inc     edx
.text:004106E7                 add     eax, 28h ; '('
.text:004106EA                 cmp     edx, ebx
.text:004106EC                 jb      short loc_4106D6
.text:004106EE
.text:004106EE loc_4106EE:                             ; CODE XREF: __FindPESection+21↑j
.text:004106EE                 xor     eax, eax
.text:004106F0
.text:004106F0 loc_4106F0:                             ; CODE XREF: __FindPESection+34↑j
.text:004106F0                 pop     edi
.text:004106F1                 pop     esi
.text:004106F2                 pop     ebx
.text:004106F3                 pop     ebp
.text:004106F4                 retn
.text:004106F4 __FindPESection endp
.text:004106F4
.text:004106F4 ; ---------------------------------------------------------------------------
.text:004106F5                 align 10h
.text:00410700
.text:00410700 ; =============== S U B R O U T I N E =======================================
.text:00410700
.text:00410700 ; Attributes: bp-based frame info_from_lumina
.text:00410700
.text:00410700 ; int __cdecl _IsNonwritableInCurrentImage(char *pTarget)
.text:00410700 __IsNonwritableInCurrentImage proc near ; CODE XREF: start-164↑p
.text:00410700
.text:00410700 ms_exc          = CPPEH_RECORD ptr -18h
.text:00410700 arg_0           = dword ptr  8
.text:00410700
.text:00410700                 mov     edi, edi
.text:00410702                 push    ebp
.text:00410703                 mov     ebp, esp
.text:00410705                 push    0FFFFFFFEh
.text:00410707                 push    offset stru_412570
.text:0041070C                 push    offset __except_handler4
.text:00410711                 mov     eax, large fs:0
.text:00410717                 push    eax
.text:00410718                 sub     esp, 8
.text:0041071B                 push    ebx
.text:0041071C                 push    esi
.text:0041071D                 push    edi
.text:0041071E                 mov     eax, ___security_cookie
.text:00410723                 xor     [ebp+ms_exc.registration.ScopeTable], eax
.text:00410726                 xor     eax, ebp
.text:00410728                 push    eax
.text:00410729                 lea     eax, [ebp+ms_exc.registration]
.text:0041072C                 mov     large fs:0, eax
.text:00410732                 mov     [ebp+ms_exc.old_esp], esp
.text:00410735                 mov     [ebp+ms_exc.registration.TryLevel], 0
.text:0041073C                 push    400000h
.text:00410741                 call    __ValidateImageBase
.text:00410746                 add     esp, 4
.text:00410749                 test    eax, eax
.text:0041074B                 jz      short loc_4107A1
.text:0041074D                 mov     eax, [ebp+arg_0]
.text:00410750                 sub     eax, 400000h
.text:00410755                 push    eax
.text:00410756                 push    400000h
.text:0041075B                 call    __FindPESection
.text:00410760                 add     esp, 8
.text:00410763                 test    eax, eax
.text:00410765                 jz      short loc_4107A1
.text:00410767                 mov     eax, [eax+24h]
.text:0041076A                 shr     eax, 1Fh
.text:0041076D                 not     eax
.text:0041076F                 and     eax, 1
.text:00410772                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
.text:00410779                 mov     ecx, [ebp+ms_exc.registration.Next]
.text:0041077C                 mov     large fs:0, ecx
.text:00410783                 pop     ecx
.text:00410784                 pop     edi
.text:00410785                 pop     esi
.text:00410786                 pop     ebx
.text:00410787                 mov     esp, ebp
.text:00410789                 pop     ebp
.text:0041078A                 retn
.text:0041078B ; ---------------------------------------------------------------------------
.text:0041078B
.text:0041078B loc_41078B:                             ; DATA XREF: .text:stru_412570↓o
.text:0041078B                 mov     eax, [ebp+ms_exc.exc_ptr]
.text:0041078E                 mov     eax, [eax]
.text:00410790                 xor     ecx, ecx
.text:00410792                 cmp     dword ptr [eax], 0C0000005h
.text:00410798                 setz    cl
.text:0041079B                 mov     eax, ecx
.text:0041079D                 retn
.text:0041079E ; ---------------------------------------------------------------------------
.text:0041079E
.text:0041079E loc_41079E:                             ; DATA XREF: .text:stru_412570↓o
.text:0041079E                 mov     esp, [ebp+ms_exc.old_esp]
.text:004107A1
.text:004107A1 loc_4107A1:                             ; CODE XREF: __IsNonwritableInCurrentImage+4B↑j
.text:004107A1                                         ; __IsNonwritableInCurrentImage+65↑j
.text:004107A1                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
.text:004107A8                 xor     eax, eax
.text:004107AA                 mov     ecx, [ebp+ms_exc.registration.Next]
.text:004107AD                 mov     large fs:0, ecx
.text:004107B4                 pop     ecx
.text:004107B5                 pop     edi
.text:004107B6                 pop     esi
.text:004107B7                 pop     ebx
.text:004107B8                 mov     esp, ebp
.text:004107BA                 pop     ebp
.text:004107BB                 retn
.text:004107BB __IsNonwritableInCurrentImage endp
.text:004107BB
.text:004107BB ; ---------------------------------------------------------------------------
.text:004107BC                 align 10h
.text:004107C0
.text:004107C0 ; =============== S U B R O U T I N E =======================================
.text:004107C0
.text:004107C0 ; Attributes: bp-based frame info_from_lumina
.text:004107C0
.text:004107C0 ; int __cdecl _ValidateImageBase(char *pImageBase)
.text:004107C0 __ValidateImageBase proc near           ; CODE XREF: __IsNonwritableInCurrentImage+41↑p
.text:004107C0
.text:004107C0 arg_0           = dword ptr  8
.text:004107C0
.text:004107C0                 mov     edi, edi
.text:004107C2                 push    ebp
.text:004107C3                 mov     ebp, esp
.text:004107C5                 mov     eax, [ebp+arg_0]
.text:004107C8                 mov     ecx, 5A4Dh
.text:004107CD                 cmp     [eax], cx
.text:004107D0                 jz      short loc_4107D6
.text:004107D2                 xor     eax, eax
.text:004107D4                 pop     ebp
.text:004107D5                 retn
.text:004107D6 ; ---------------------------------------------------------------------------
.text:004107D6
.text:004107D6 loc_4107D6:                             ; CODE XREF: __ValidateImageBase+10↑j
.text:004107D6                 mov     ecx, [eax+3Ch]
.text:004107D9                 add     ecx, eax
.text:004107DB                 xor     eax, eax
.text:004107DD                 cmp     dword ptr [ecx], 4550h
.text:004107E3                 jnz     short loc_4107F1
.text:004107E5                 mov     edx, 10Bh
.text:004107EA                 cmp     [ecx+18h], dx
.text:004107EE                 setz    al
.text:004107F1
.text:004107F1 loc_4107F1:                             ; CODE XREF: __ValidateImageBase+23↑j
.text:004107F1                 pop     ebp
.text:004107F2                 retn
.text:004107F2 __ValidateImageBase endp
.text:004107F2
.text:004107F3
.text:004107F3 ; =============== S U B R O U T I N E =======================================
.text:004107F3
.text:004107F3 ; Attributes: bp-based frame info_from_lumina
.text:004107F3
.text:004107F3 ; void __cdecl __security_init_cookie()
.text:004107F3 ___security_init_cookie proc near       ; CODE XREF: start↑p
.text:004107F3
.text:004107F3 PerformanceCount= LARGE_INTEGER ptr -14h
.text:004107F3 SystemTimeAsFileTime= _FILETIME ptr -0Ch
.text:004107F3 var_4           = dword ptr -4
.text:004107F3
.text:004107F3                 mov     edi, edi
.text:004107F5                 push    ebp
.text:004107F6                 mov     ebp, esp
.text:004107F8                 sub     esp, 14h
.text:004107FB                 and     [ebp+SystemTimeAsFileTime.dwLowDateTime], 0
.text:004107FF                 and     [ebp+SystemTimeAsFileTime.dwHighDateTime], 0
.text:00410803                 mov     eax, ___security_cookie
.text:00410808                 push    esi
.text:00410809                 push    edi
.text:0041080A                 mov     edi, 0BB40E64Eh
.text:0041080F                 mov     esi, 0FFFF0000h
.text:00410814                 cmp     eax, edi
.text:00410816                 jz      short loc_410825
.text:00410818                 test    esi, eax
.text:0041081A                 jz      short loc_410825
.text:0041081C                 not     eax
.text:0041081E                 mov     dword_413414, eax
.text:00410823                 jmp     short loc_41088F
.text:00410825 ; ---------------------------------------------------------------------------
.text:00410825
.text:00410825 loc_410825:                             ; CODE XREF: ___security_init_cookie+23↑j
.text:00410825                                         ; ___security_init_cookie+27↑j
.text:00410825                 lea     eax, [ebp+SystemTimeAsFileTime]
.text:00410828                 push    eax             ; lpSystemTimeAsFileTime
.text:00410829                 call    ds:GetSystemTimeAsFileTime
.text:0041082F                 mov     eax, [ebp+SystemTimeAsFileTime.dwHighDateTime]
.text:00410832                 xor     eax, [ebp+SystemTimeAsFileTime.dwLowDateTime]
.text:00410835                 mov     [ebp+var_4], eax
.text:00410838                 call    ds:GetCurrentProcessId
.text:0041083E                 xor     [ebp+var_4], eax
.text:00410841                 call    ds:GetCurrentThreadId
.text:00410847                 xor     [ebp+var_4], eax
.text:0041084A                 call    ds:GetTickCount
.text:00410850                 xor     eax, [ebp+var_4]
.text:00410853                 lea     ecx, [ebp+var_4]
.text:00410856                 xor     eax, ecx
.text:00410858                 mov     [ebp+var_4], eax
.text:0041085B                 lea     eax, [ebp+PerformanceCount]
.text:0041085E                 push    eax             ; lpPerformanceCount
.text:0041085F                 call    ds:QueryPerformanceCounter
.text:00410865                 mov     eax, dword ptr [ebp+PerformanceCount+4]
.text:00410868                 xor     eax, dword ptr [ebp+PerformanceCount]
.text:0041086B                 mov     ecx, [ebp+var_4]
.text:0041086E                 xor     ecx, eax
.text:00410870                 cmp     ecx, edi
.text:00410872                 jz      short loc_41087C
.text:00410874                 test    ___security_cookie, esi
.text:0041087A                 jnz     short loc_410881
.text:0041087C
.text:0041087C loc_41087C:                             ; CODE XREF: ___security_init_cookie+7F↑j
.text:0041087C                 mov     ecx, 0BB40E64Fh
.text:00410881
.text:00410881 loc_410881:                             ; CODE XREF: ___security_init_cookie+87↑j
.text:00410881                 mov     ___security_cookie, ecx
.text:00410887                 not     ecx
.text:00410889                 mov     dword_413414, ecx
.text:0041088F
.text:0041088F loc_41088F:                             ; CODE XREF: ___security_init_cookie+30↑j
.text:0041088F                 pop     edi
.text:00410890                 pop     esi
.text:00410891                 mov     esp, ebp
.text:00410893                 pop     ebp
.text:00410894                 retn
.text:00410894 ___security_init_cookie endp
.text:00410894
.text:00410895
.text:00410895 ; =============== S U B R O U T I N E =======================================
.text:00410895
.text:00410895
.text:00410895 sub_410895      proc near               ; CODE XREF: pre_c_init:loc_40FF59↑p
.text:00410895                 push    30000h          ; Mask
.text:0041089A                 push    10000h          ; NewValue
.text:0041089F                 call    ds:_controlfp
.text:004108A5                 pop     ecx
.text:004108A6                 pop     ecx
.text:004108A7                 retn
.text:004108A7 sub_410895      endp
.text:004108A7
.text:004108A8
.text:004108A8 ; =============== S U B R O U T I N E =======================================
.text:004108A8
.text:004108A8 ; Attributes: thunk
.text:004108A8
.text:004108A8 ; void __cdecl initterm(_PVFV *First, _PVFV *Last)
.text:004108A8 _initterm       proc near               ; CODE XREF: start:loc_410050↑p
.text:004108A8
.text:004108A8 First           = dword ptr  4
.text:004108A8 Last            = dword ptr  8
.text:004108A8
.text:004108A8                 jmp     ds:__imp__initterm
.text:004108A8 _initterm       endp
.text:004108A8
.text:004108A8 ; ---------------------------------------------------------------------------
.text:004108AE                 align 10h
.text:004108B0
.text:004108B0 ; =============== S U B R O U T I N E =======================================
.text:004108B0
.text:004108B0 ; Attributes: library function
.text:004108B0
.text:004108B0 __SEH_prolog4_GS proc near              ; CODE XREF: start-236↑p
.text:004108B0                                         ; __onexit+7↑p
.text:004108B0
.text:004108B0 arg_4           = dword ptr  8
.text:004108B0
.text:004108B0                 push    offset __except_handler4
.text:004108B5                 push    large dword ptr fs:0
.text:004108BC                 mov     eax, [esp+8+arg_4]
.text:004108C0                 mov     [esp+8+arg_4], ebp
.text:004108C4                 lea     ebp, [esp+8+arg_4]
.text:004108C8                 sub     esp, eax
.text:004108CA                 push    ebx
.text:004108CB                 push    esi
.text:004108CC                 push    edi
.text:004108CD                 mov     eax, ___security_cookie
.text:004108D2                 xor     [ebp-4], eax
.text:004108D5                 xor     eax, ebp
.text:004108D7                 mov     [ebp-1Ch], eax
.text:004108DA                 push    eax
.text:004108DB                 mov     [ebp-18h], esp
.text:004108DE                 push    dword ptr [ebp-8]
.text:004108E1                 mov     eax, [ebp-4]
.text:004108E4                 mov     dword ptr [ebp-4], 0FFFFFFFEh
.text:004108EB                 mov     [ebp-8], eax
.text:004108EE                 lea     eax, [ebp-10h]
.text:004108F1                 mov     large fs:0, eax
.text:004108F7                 retn
.text:004108F7 __SEH_prolog4_GS endp ; sp-analysis failed
.text:004108F7
.text:004108F8
.text:004108F8 ; =============== S U B R O U T I N E =======================================
.text:004108F8
.text:004108F8 ; Attributes: library function
.text:004108F8
.text:004108F8 __SEH_epilog4_GS proc near              ; CODE XREF: start:loc_410184↑p
.text:004108F8                                         ; __onexit:loc_410433↑p
.text:004108F8                 mov     ecx, [ebp-1Ch]
.text:004108FB                 xor     ecx, ebp        ; StackCookie
.text:004108FD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410902                 jmp     __SEH_epilog4
.text:00410902 __SEH_epilog4_GS endp
.text:00410902
.text:00410902 ; ---------------------------------------------------------------------------
.text:00410907                 align 10h
.text:00410910
.text:00410910 ; =============== S U B R O U T I N E =======================================
.text:00410910
.text:00410910 ; Attributes: bp-based frame info_from_lumina
.text:00410910
.text:00410910 ; _EXCEPTION_DISPOSITION __cdecl _except_handler4(_EXCEPTION_RECORD *ExceptionRecord, _EXCEPTION_REGISTRATION_RECORD *EstablisherFrame, _CONTEXT *ContextRecord, void *DispatcherContext)
.text:00410910 __except_handler4 proc near             ; DATA XREF: .text:00402C58↑o
.text:00410910                                         ; .text:___safe_se_handler_table↑o ...
.text:00410910
.text:00410910 arg_0           = dword ptr  8
.text:00410910 arg_4           = dword ptr  0Ch
.text:00410910 arg_8           = dword ptr  10h
.text:00410910 arg_C           = dword ptr  14h
.text:00410910
.text:00410910                 mov     edi, edi
.text:00410912                 push    ebp
.text:00410913                 mov     ebp, esp
.text:00410915                 push    [ebp+arg_C]
.text:00410918                 push    [ebp+arg_8]
.text:0041091B                 push    [ebp+arg_4]
.text:0041091E                 push    [ebp+arg_0]
.text:00410921                 push    offset @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410926                 push    offset ___security_cookie
.text:0041092B                 call    _except_handler4_common
.text:00410930                 add     esp, 18h
.text:00410933                 pop     ebp
.text:00410934                 retn
.text:00410934 __except_handler4 endp
.text:00410934
.text:00410934 ; ---------------------------------------------------------------------------
.text:00410935                 align 2
.text:00410936
.text:00410936 ; =============== S U B R O U T I N E =======================================
.text:00410936
.text:00410936 ; Attributes: thunk
.text:00410936
.text:00410936 _lock           proc near               ; CODE XREF: __onexit+35↑p
.text:00410936                 jmp     ds:__imp__lock
.text:00410936 _lock           endp
.text:00410936
.text:0041093C
.text:0041093C ; =============== S U B R O U T I N E =======================================
.text:0041093C
.text:0041093C ; Attributes: thunk
.text:0041093C
.text:0041093C _unlock         proc near               ; CODE XREF: __onexit+92↑p
.text:0041093C                 jmp     ds:__imp__unlock
.text:0041093C _unlock         endp
.text:0041093C
.text:00410942
.text:00410942 ; =============== S U B R O U T I N E =======================================
.text:00410942
.text:00410942 ; Attributes: thunk
.text:00410942
.text:00410942 __dllonexit     proc near               ; CODE XREF: __onexit+5A↑p
.text:00410942                 jmp     ds:__imp___dllonexit
.text:00410942 __dllonexit     endp
.text:00410942
.text:00410948
.text:00410948 ; =============== S U B R O U T I N E =======================================
.text:00410948
.text:00410948 ; Attributes: library function
.text:00410948
.text:00410948 __SEH_prolog4   proc near               ; CODE XREF: RtlpImageNtHeader(x)+7↑p
.text:00410948
.text:00410948 arg_4           = dword ptr  8
.text:00410948
.text:00410948                 push    offset __except_handler4
.text:0041094D                 push    large dword ptr fs:0
.text:00410954                 mov     eax, [esp+8+arg_4]
.text:00410958                 mov     [esp+8+arg_4], ebp
.text:0041095C                 lea     ebp, [esp+8+arg_4]
.text:00410960                 sub     esp, eax
.text:00410962                 push    ebx
.text:00410963                 push    esi
.text:00410964                 push    edi
.text:00410965                 mov     eax, ___security_cookie
.text:0041096A                 xor     [ebp-4], eax
.text:0041096D                 xor     eax, ebp
.text:0041096F                 push    eax
.text:00410970                 mov     [ebp-18h], esp
.text:00410973                 push    dword ptr [ebp-8]
.text:00410976                 mov     eax, [ebp-4]
.text:00410979                 mov     dword ptr [ebp-4], 0FFFFFFFEh
.text:00410980                 mov     [ebp-8], eax
.text:00410983                 lea     eax, [ebp-10h]
.text:00410986                 mov     large fs:0, eax
.text:0041098C                 retn
.text:0041098C __SEH_prolog4   endp ; sp-analysis failed
.text:0041098C
.text:0041098D
.text:0041098D ; =============== S U B R O U T I N E =======================================
.text:0041098D
.text:0041098D ; Attributes: library function
.text:0041098D
.text:0041098D __SEH_epilog4   proc near               ; CODE XREF: RtlpImageNtHeader(x)+62↑p
.text:0041098D                                         ; __SEH_epilog4_GS+A↑j
.text:0041098D                 mov     ecx, [ebp-10h]
.text:00410990                 mov     large fs:0, ecx
.text:00410997                 pop     ecx
.text:00410998                 pop     edi
.text:00410999                 pop     edi
.text:0041099A                 pop     esi
.text:0041099B                 pop     ebx
.text:0041099C                 mov     esp, ebp
.text:0041099E                 pop     ebp
.text:0041099F                 push    ecx
.text:004109A0                 retn
.text:004109A0 __SEH_epilog4   endp ; sp-analysis failed
.text:004109A0
.text:004109A0 ; ---------------------------------------------------------------------------
.text:004109A1                 align 2
.text:004109A2
.text:004109A2 ; =============== S U B R O U T I N E =======================================
.text:004109A2
.text:004109A2 ; Attributes: thunk
.text:004109A2
.text:004109A2 _except_handler4_common proc near       ; CODE XREF: __except_handler4+1B↑p
.text:004109A2                 jmp     ds:__imp__except_handler4_common
.text:004109A2 _except_handler4_common endp
.text:004109A2
.text:004109A8
.text:004109A8 ; =============== S U B R O U T I N E =======================================
.text:004109A8
.text:004109A8 ; Attributes: bp-based frame info_from_lumina
.text:004109A8
.text:004109A8 ; int __stdcall AfxInitialize(char, unsigned int)
.text:004109A8 ?AfxInitialize@@YGHHK@Z proc near       ; CODE XREF: sub_403B10+7↑p
.text:004109A8
.text:004109A8 arg_0           = byte ptr  8
.text:004109A8 arg_4           = dword ptr  0Ch
.text:004109A8
.text:004109A8                 mov     edi, edi
.text:004109AA                 push    ebp
.text:004109AB                 mov     ebp, esp
.text:004109AD                 call    ?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ ; AfxGetModuleState(void)
.text:004109B2                 mov     cl, [ebp+arg_0]
.text:004109B5                 mov     [eax+14h], cl
.text:004109B8                 mov     ecx, [ebp+arg_4]
.text:004109BB                 mov     [eax+2040h], ecx
.text:004109C1                 xor     eax, eax
.text:004109C3                 inc     eax
.text:004109C4                 pop     ebp
.text:004109C5                 retn    8
.text:004109C5 ?AfxInitialize@@YGHHK@Z endp
.text:004109C5
.text:004109C8
.text:004109C8 ; =============== S U B R O U T I N E =======================================
.text:004109C8
.text:004109C8 ; Attributes: bp-based frame
.text:004109C8
.text:004109C8 sub_4109C8      proc near               ; CODE XREF: start-EE↑p
.text:004109C8                 mov     edi, edi
.text:004109CA                 push    ebp
.text:004109CB                 mov     ebp, esp
.text:004109CD                 pop     ebp
.text:004109CE                 jmp     loc_4109D4
.text:004109CE ; ---------------------------------------------------------------------------
.text:004109D3                 align 4
.text:004109D4
.text:004109D4 loc_4109D4:                             ; CODE XREF: sub_4109C8+6↑j
.text:004109D4                 jmp     ds:?AfxWinMain@@YGHPAUHINSTANCE__@@0PAGH@Z ; AfxWinMain(HINSTANCE__ *,HINSTANCE__ *,ushort *,int)
.text:004109D4 sub_4109C8      endp
.text:004109D4
.text:004109D4 ; ---------------------------------------------------------------------------
.text:004109DA                 align 10h
.text:004109E0
.text:004109E0 ; =============== S U B R O U T I N E =======================================
.text:004109E0
.text:004109E0 ; Attributes: info_from_lumina
.text:004109E0
.text:004109E0 ; void *__usercall _alloca_probe_0_0@<eax>(unsigned int a1@<eax>, int a2@<ecx>)
.text:004109E0 __alloca_probe_0_0 proc near            ; CODE XREF: sub_408373+A↑p
.text:004109E0                                         ; sub_40D13E+18↑p
.text:004109E0                 push    ecx
.text:004109E1                 lea     ecx, [esp+4]
.text:004109E5                 sub     ecx, eax
.text:004109E7                 sbb     eax, eax
.text:004109E9                 not     eax
.text:004109EB                 and     ecx, eax
.text:004109ED                 mov     eax, esp
.text:004109EF                 and     eax, 0FFFFF000h
.text:004109F4
.text:004109F4 loc_4109F4:                             ; CODE XREF: __alloca_probe_0_0+29↓j
.text:004109F4                 cmp     ecx, eax
.text:004109F6                 jb      short loc_410A02
.text:004109F8                 mov     eax, ecx
.text:004109FA                 pop     ecx
.text:004109FB                 xchg    eax, esp
.text:004109FC                 mov     eax, [eax]
.text:004109FE                 mov     [esp+0], eax
.text:00410A01                 retn
.text:00410A02 ; ---------------------------------------------------------------------------
.text:00410A02
.text:00410A02 loc_410A02:                             ; CODE XREF: __alloca_probe_0_0+16↑j
.text:00410A02                 sub     eax, 1000h
.text:00410A07                 test    [eax], eax
.text:00410A09                 jmp     short loc_4109F4
.text:00410A09 __alloca_probe_0_0 endp
.text:00410A09
.text:00410A09 ; ---------------------------------------------------------------------------
.text:00410A0B                 align 4
.text:00410A0C
.text:00410A0C ; =============== S U B R O U T I N E =======================================
.text:00410A0C
.text:00410A0C ; Attributes: thunk
.text:00410A0C
.text:00410A0C _ftol2_sse      proc near               ; CODE XREF: sub_4093CA+1DC↑p
.text:00410A0C                 jmp     ds:__imp__ftol2_sse
.text:00410A0C _ftol2_sse      endp
.text:00410A0C
.text:00410A12
.text:00410A12 ; =============== S U B R O U T I N E =======================================
.text:00410A12
.text:00410A12 ; Attributes: thunk
.text:00410A12
.text:00410A12 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00410A12 memcpy          proc near               ; CODE XREF: sub_408D34+BB↑p
.text:00410A12
.text:00410A12 Src             = dword ptr  8
.text:00410A12 Size            = dword ptr  0Ch
.text:00410A12
.text:00410A12                 jmp     ds:__imp_memcpy
.text:00410A12 memcpy          endp
.text:00410A12
.text:00410A18
.text:00410A18 ; =============== S U B R O U T I N E =======================================
.text:00410A18
.text:00410A18 ; Attributes: thunk
.text:00410A18
.text:00410A18 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00410A18 memset          proc near               ; CODE XREF: sub_407A9E+23↑p
.text:00410A18                                         ; sub_408373+3B↑p ...
.text:00410A18
.text:00410A18 Val             = dword ptr  8
.text:00410A18 Size            = dword ptr  0Ch
.text:00410A18
.text:00410A18                 jmp     ds:__imp_memset
.text:00410A18 memset          endp
.text:00410A18
.text:00410A18 ; ---------------------------------------------------------------------------
.text:00410A1E                 align 10h
.text:00410A20 ; START OF FUNCTION CHUNK FOR sub_403C90
.text:00410A20 ;   ADDITIONAL PARENT FUNCTION sub_403CFC
.text:00410A20
.text:00410A20 loc_410A20:                             ; DATA XREF: .text:stru_41177C↓o
.text:00410A20 ; __unwind { // loc_410A28
.text:00410A20 ;   cleanup() // owned by 403CB1
.text:00410A20 ;   cleanup() // owned by 403D1A
.text:00410A20                 lea     ecx, [ebp+var_20]
.text:00410A23                 jmp     loc_403DA1
.text:00410A28 ; ---------------------------------------------------------------------------
.text:00410A28
.text:00410A28 loc_410A28:                             ; DATA XREF: .text:00403734↑o
.text:00410A28                                         ; sub_403C90+2↑o ...
.text:00410A28                 mov     edx, [esp-4+arg_4]
.text:00410A2C                 lea     eax, [edx+0Ch]
.text:00410A2F                 mov     ecx, [edx-24h]
.text:00410A32                 xor     ecx, eax        ; StackCookie
.text:00410A34                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410A39                 mov     ecx, [edx-4]
.text:00410A3C                 xor     ecx, eax        ; StackCookie
.text:00410A3E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410A43                 mov     eax, offset stru_411758
.text:00410A48                 jmp     __CxxFrameHandler3
.text:00410A48 ; } // starts at 410A20
.text:00410A48 ; END OF FUNCTION CHUNK FOR sub_403C90
.text:00410A4D ; ---------------------------------------------------------------------------
.text:00410A4D ; START OF FUNCTION CHUNK FOR sub_403DC0
.text:00410A4D ;   ADDITIONAL PARENT FUNCTION sub_406E50
.text:00410A4D ;   ADDITIONAL PARENT FUNCTION sub_407190
.text:00410A4D ;   ADDITIONAL PARENT FUNCTION sub_407810
.text:00410A4D ;   ADDITIONAL PARENT FUNCTION sub_40A830
.text:00410A4D
.text:00410A4D loc_410A4D:                             ; DATA XREF: .text:stru_4117A8↓o
.text:00410A4D ; __unwind { // loc_410A55
.text:00410A4D ;   cleanup() // owned by 403DDF
.text:00410A4D ;   cleanup() // owned by 406E6F
.text:00410A4D ;   cleanup() // owned by 4071AF
.text:00410A4D ;   cleanup() // owned by 40782F
.text:00410A4D ;   cleanup() // owned by 40A84F
.text:00410A4D                 mov     ecx, [ebp+var_10]
.text:00410A50                 jmp     loc_403C81
.text:00410A55 ; ---------------------------------------------------------------------------
.text:00410A55
.text:00410A55 loc_410A55:                             ; DATA XREF: .text:00403738↑o
.text:00410A55                                         ; sub_403DC0+2↑o ...
.text:00410A55                 mov     edx, [esp-4+arg_4]
.text:00410A59                 lea     eax, [edx+0Ch]
.text:00410A5C                 mov     ecx, [edx-14h]
.text:00410A5F                 xor     ecx, eax        ; StackCookie
.text:00410A61                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410A66                 mov     eax, offset stru_411784
.text:00410A6B                 jmp     __CxxFrameHandler3
.text:00410A6B ; } // starts at 410A4D
.text:00410A6B ; END OF FUNCTION CHUNK FOR sub_403DC0
.text:00410A70 ; ---------------------------------------------------------------------------
.text:00410A70 ; START OF FUNCTION CHUNK FOR sub_403F0B
.text:00410A70
.text:00410A70 loc_410A70:                             ; DATA XREF: .text:stru_4117D4↓o
.text:00410A70 ; __unwind { // loc_410AA4
.text:00410A70 ;   cleanup() // owned by 403F2A
.text:00410A70                 mov     ecx, [ebp+var_10]
.text:00410A73                 jmp     ds:??1CPropertyPage@@UAE@XZ ; CPropertyPage::~CPropertyPage(void)
.text:00410A79 ; ---------------------------------------------------------------------------
.text:00410A79
.text:00410A79 loc_410A79:                             ; DATA XREF: .text:004117DC↓o
.text:00410A79 ;   cleanup() // owned by 403F43
.text:00410A79                 mov     ecx, [ebp+var_10]
.text:00410A7C                 add     ecx, 90h
.text:00410A82                 jmp     loc_406DF6
.text:00410A87 ; ---------------------------------------------------------------------------
.text:00410A87
.text:00410A87 loc_410A87:                             ; DATA XREF: .text:004117E4↓o
.text:00410A87                 mov     ecx, [ebp+var_10]
.text:00410A8A                 add     ecx, 0B8h ; '¸'
.text:00410A90                 jmp     ds:??1CStringList@@UAE@XZ ; CStringList::~CStringList(void)
.text:00410A96 ; ---------------------------------------------------------------------------
.text:00410A96
.text:00410A96 loc_410A96:                             ; DATA XREF: .text:004117EC↓o
.text:00410A96                 mov     ecx, [ebp+var_10]
.text:00410A99                 add     ecx, 0D4h ; 'Ô'
.text:00410A9F                 jmp     loc_406144
.text:00410AA4 ; ---------------------------------------------------------------------------
.text:00410AA4
.text:00410AA4 loc_410AA4:                             ; DATA XREF: .text:0040373C↑o
.text:00410AA4                                         ; sub_403F0B+2↑o
.text:00410AA4                 mov     edx, [esp-4+arg_4]
.text:00410AA8                 lea     eax, [edx+0Ch]
.text:00410AAB                 mov     ecx, [edx-14h]
.text:00410AAE                 xor     ecx, eax        ; StackCookie
.text:00410AB0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410AB5                 mov     eax, offset stru_4117B0
.text:00410ABA                 jmp     __CxxFrameHandler3
.text:00410ABA ; } // starts at 410A70
.text:00410ABA ; END OF FUNCTION CHUNK FOR sub_403F0B
.text:00410ABF ; ---------------------------------------------------------------------------
.text:00410ABF ; START OF FUNCTION CHUNK FOR sub_404002
.text:00410ABF
.text:00410ABF loc_410ABF:                             ; DATA XREF: .text:stru_411818↓o
.text:00410ABF ; __unwind { // loc_410B01
.text:00410ABF                 mov     ecx, [ebp+var_10]
.text:00410AC2                 jmp     ds:??1CPropertyPage@@UAE@XZ ; CPropertyPage::~CPropertyPage(void)
.text:00410AC8 ; ---------------------------------------------------------------------------
.text:00410AC8
.text:00410AC8 loc_410AC8:                             ; DATA XREF: .text:00411820↓o
.text:00410AC8 ;   cleanup() // owned by 40408B
.text:00410AC8                 mov     ecx, [ebp+var_10]
.text:00410ACB                 add     ecx, 90h
.text:00410AD1                 jmp     loc_406DF6
.text:00410AD6 ; ---------------------------------------------------------------------------
.text:00410AD6
.text:00410AD6 loc_410AD6:                             ; DATA XREF: .text:00411828↓o
.text:00410AD6                 mov     ecx, [ebp+var_10]
.text:00410AD9                 add     ecx, 0B8h ; '¸'
.text:00410ADF                 jmp     ds:??1CStringList@@UAE@XZ ; CStringList::~CStringList(void)
.text:00410AE5 ; ---------------------------------------------------------------------------
.text:00410AE5
.text:00410AE5 loc_410AE5:                             ; DATA XREF: .text:00411830↓o
.text:00410AE5                 mov     ecx, [ebp+var_10]
.text:00410AE8                 add     ecx, 0D4h ; 'Ô'
.text:00410AEE                 jmp     loc_406144
.text:00410AF3 ; ---------------------------------------------------------------------------
.text:00410AF3
.text:00410AF3 loc_410AF3:                             ; DATA XREF: .text:00411838↓o
.text:00410AF3 ;   cleanup() // owned by 404023
.text:00410AF3                 mov     ecx, [ebp+var_10]
.text:00410AF6                 add     ecx, 0ECh ; 'ì'
.text:00410AFC                 jmp     loc_406144
.text:00410B01 ; ---------------------------------------------------------------------------
.text:00410B01
.text:00410B01 loc_410B01:                             ; DATA XREF: .text:00403740↑o
.text:00410B01                                         ; sub_404002+2↑o
.text:00410B01                 mov     edx, [esp-4+arg_4]
.text:00410B05                 lea     eax, [edx+0Ch]
.text:00410B08                 mov     ecx, [edx-14h]
.text:00410B0B                 xor     ecx, eax        ; StackCookie
.text:00410B0D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410B12                 mov     eax, offset stru_4117F4
.text:00410B17                 jmp     __CxxFrameHandler3
.text:00410B17 ; } // starts at 410ABF
.text:00410B17 ; END OF FUNCTION CHUNK FOR sub_404002
.text:00410B1C ; ---------------------------------------------------------------------------
.text:00410B1C ; START OF FUNCTION CHUNK FOR sub_4040E0
.text:00410B1C
.text:00410B1C loc_410B1C:                             ; DATA XREF: .text:stru_411864↓o
.text:00410B1C ; __unwind { // loc_410B2D
.text:00410B1C ;   cleanup() // owned by 404105
.text:00410B1C ;   cleanup() // owned by 4042E5
.text:00410B1C                 lea     ecx, [ebp+var_60]
.text:00410B1F                 jmp     loc_403DA1
.text:00410B24 ; ---------------------------------------------------------------------------
.text:00410B24
.text:00410B24 loc_410B24:                             ; DATA XREF: .text:0041186C↓o
.text:00410B24 ;   cleanup() // owned by 404115
.text:00410B24                 lea     ecx, [ebp+var_50]
.text:00410B27                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410B2D ; ---------------------------------------------------------------------------
.text:00410B2D
.text:00410B2D loc_410B2D:                             ; DATA XREF: .text:00403744↑o
.text:00410B2D                                         ; sub_4040E0+5↑o
.text:00410B2D                 mov     edx, [esp-4+arg_4]
.text:00410B31                 lea     eax, [edx+0Ch]
.text:00410B34                 mov     ecx, [edx-94h]
.text:00410B3A                 xor     ecx, eax        ; StackCookie
.text:00410B3C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410B41                 mov     ecx, [edx-4]
.text:00410B44                 xor     ecx, eax        ; StackCookie
.text:00410B46                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410B4B                 mov     eax, offset stru_411840
.text:00410B50                 jmp     __CxxFrameHandler3
.text:00410B50 ; } // starts at 410B1C
.text:00410B50 ; END OF FUNCTION CHUNK FOR sub_4040E0
.text:00410B55 ; ---------------------------------------------------------------------------
.text:00410B55 ; START OF FUNCTION CHUNK FOR sub_404316
.text:00410B55
.text:00410B55 loc_410B55:                             ; DATA XREF: .text:stru_4118A0↓o
.text:00410B55 ; __unwind { // loc_410BC6
.text:00410B55 ;   cleanup() // owned by 4043D1
.text:00410B55 ;   cleanup() // owned by 4047BE
.text:00410B55                 lea     ecx, [ebp+var_2C]
.text:00410B58                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410B5E ; ---------------------------------------------------------------------------
.text:00410B5E
.text:00410B5E loc_410B5E:                             ; DATA XREF: .text:004118A8↓o
.text:00410B5E ;   cleanup() // owned by 4043E1
.text:00410B5E ;   cleanup() // owned by 4047B1
.text:00410B5E                 lea     ecx, [ebp+var_28]
.text:00410B61                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410B67 ; ---------------------------------------------------------------------------
.text:00410B67
.text:00410B67 loc_410B67:                             ; DATA XREF: .text:004118B0↓o
.text:00410B67 ;   cleanup() // owned by 4043EE
.text:00410B67 ;   cleanup() // owned by 4047A4
.text:00410B67                 lea     ecx, [ebp+var_24]
.text:00410B6A                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410B70 ; ---------------------------------------------------------------------------
.text:00410B70
.text:00410B70 loc_410B70:                             ; DATA XREF: .text:004118B8↓o
.text:00410B70 ;   cleanup() // owned by 4043FB
.text:00410B70 ;   cleanup() // owned by 404797
.text:00410B70                 lea     ecx, [ebp+var_20]
.text:00410B73                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410B79 ; ---------------------------------------------------------------------------
.text:00410B79
.text:00410B79 loc_410B79:                             ; DATA XREF: .text:004118C0↓o
.text:00410B79 ;   cleanup() // owned by 404408
.text:00410B79 ;   cleanup() // owned by 40478A
.text:00410B79                 lea     ecx, [ebp+var_1C]
.text:00410B7C                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410B82 ; ---------------------------------------------------------------------------
.text:00410B82
.text:00410B82 loc_410B82:                             ; DATA XREF: .text:004118C8↓o
.text:00410B82 ;   cleanup() // owned by 404415
.text:00410B82 ;   cleanup() // owned by 40477D
.text:00410B82                 lea     ecx, [ebp+var_18]
.text:00410B85                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410B8B ; ---------------------------------------------------------------------------
.text:00410B8B
.text:00410B8B loc_410B8B:                             ; DATA XREF: .text:004118D0↓o
.text:00410B8B ;   cleanup() // owned by 404422
.text:00410B8B ;   cleanup() // owned by 404770
.text:00410B8B                 lea     ecx, [ebp+var_14]
.text:00410B8E                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410B94 ; ---------------------------------------------------------------------------
.text:00410B94
.text:00410B94 loc_410B94:                             ; DATA XREF: .text:004118D8↓o
.text:00410B94 ;   cleanup() // owned by 404431
.text:00410B94 ;   cleanup() // owned by 404732
.text:00410B94 ;   cleanup() // owned by 404763
.text:00410B94                 lea     ecx, [ebp+var_30]
.text:00410B97                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410B9D ; ---------------------------------------------------------------------------
.text:00410B9D
.text:00410B9D loc_410B9D:                             ; DATA XREF: .text:004118E0↓o
.text:00410B9D ;   cleanup() // owned by 4044FB
.text:00410B9D ;   cleanup() // owned by 404725
.text:00410B9D ;   cleanup() // owned by 404756
.text:00410B9D                 lea     ecx, [ebp+var_34]
.text:00410BA0                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410BA6 ; ---------------------------------------------------------------------------
.text:00410BA6
.text:00410BA6 loc_410BA6:                             ; DATA XREF: .text:004118E8↓o
.text:00410BA6 ;   cleanup() // owned by 404581
.text:00410BA6 ;   cleanup() // owned by 4045CD
.text:00410BA6 ;   cleanup() // owned by 40461A
.text:00410BA6                 lea     ecx, [ebp+var_38]
.text:00410BA9                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410BAF ; ---------------------------------------------------------------------------
.text:00410BAF
.text:00410BAF loc_410BAF:                             ; DATA XREF: .text:004118F0↓o
.text:00410BAF                 lea     ecx, [ebp+var_40]
.text:00410BB2                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410BB8 ; ---------------------------------------------------------------------------
.text:00410BB8
.text:00410BB8 loc_410BB8:                             ; DATA XREF: .text:004118F8↓o
.text:00410BB8 ;   cleanup() // owned by 4045B5
.text:00410BB8 ;   cleanup() // owned by 4045F9
.text:00410BB8                 push    [ebp+var_A0]
.text:00410BBE                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00410BC4                 pop     ecx
.text:00410BC5                 retn
.text:00410BC6 ; ---------------------------------------------------------------------------
.text:00410BC6
.text:00410BC6 loc_410BC6:                             ; DATA XREF: .text:00403748↑o
.text:00410BC6                                         ; sub_404316+5↑o
.text:00410BC6                 mov     edx, [esp-4+arg_4]
.text:00410BCA                 lea     eax, [edx+0Ch]
.text:00410BCD                 mov     ecx, [edx-0A4h]
.text:00410BD3                 xor     ecx, eax        ; StackCookie
.text:00410BD5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410BDA                 mov     ecx, [edx-4]
.text:00410BDD                 xor     ecx, eax        ; StackCookie
.text:00410BDF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410BE4                 mov     eax, offset stru_411878
.text:00410BE9                 jmp     __CxxFrameHandler3
.text:00410BE9 ; } // starts at 410B55
.text:00410BE9 ; END OF FUNCTION CHUNK FOR sub_404316
.text:00410BEE ; ---------------------------------------------------------------------------
.text:00410BEE ; START OF FUNCTION CHUNK FOR sub_40486C
.text:00410BEE
.text:00410BEE loc_410BEE:                             ; DATA XREF: .text:stru_411924↓o
.text:00410BEE ; __unwind { // loc_410C27
.text:00410BEE ;   cleanup() // owned by 4048B7
.text:00410BEE                 mov     ecx, [ebp+var_10]
.text:00410BF1                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410BF7 ; ---------------------------------------------------------------------------
.text:00410BF7
.text:00410BF7 loc_410BF7:                             ; DATA XREF: .text:0041192C↓o
.text:00410BF7 ;   cleanup() // owned by 4048AA
.text:00410BF7                 mov     ecx, [ebp+var_10]
.text:00410BFA                 add     ecx, 4
.text:00410BFD                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410C03 ; ---------------------------------------------------------------------------
.text:00410C03
.text:00410C03 loc_410C03:                             ; DATA XREF: .text:00411934↓o
.text:00410C03 ;   cleanup() // owned by 40489D
.text:00410C03                 mov     ecx, [ebp+var_10]
.text:00410C06                 add     ecx, 8
.text:00410C09                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410C0F ; ---------------------------------------------------------------------------
.text:00410C0F
.text:00410C0F loc_410C0F:                             ; DATA XREF: .text:0041193C↓o
.text:00410C0F ;   cleanup() // owned by 404890
.text:00410C0F                 mov     ecx, [ebp+var_10]
.text:00410C12                 add     ecx, 0Ch
.text:00410C15                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410C1B ; ---------------------------------------------------------------------------
.text:00410C1B
.text:00410C1B loc_410C1B:                             ; DATA XREF: .text:00411944↓o
.text:00410C1B ;   cleanup() // owned by 404880
.text:00410C1B                 mov     ecx, [ebp+var_10]
.text:00410C1E                 add     ecx, 18h
.text:00410C21                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410C27 ; ---------------------------------------------------------------------------
.text:00410C27
.text:00410C27 loc_410C27:                             ; DATA XREF: .text:0040374C↑o
.text:00410C27                                         ; sub_40486C+2↑o
.text:00410C27                 mov     edx, [esp-4+arg_4]
.text:00410C2B                 lea     eax, [edx+0Ch]
.text:00410C2E                 mov     ecx, [edx-14h]
.text:00410C31                 xor     ecx, eax        ; StackCookie
.text:00410C33                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410C38                 mov     eax, offset stru_411900
.text:00410C3D                 jmp     __CxxFrameHandler3
.text:00410C3D ; } // starts at 410BEE
.text:00410C3D ; END OF FUNCTION CHUNK FOR sub_40486C
.text:00410C42 ; ---------------------------------------------------------------------------
.text:00410C42 ; START OF FUNCTION CHUNK FOR sub_4048DF
.text:00410C42
.text:00410C42 loc_410C42:                             ; DATA XREF: .text:stru_411970↓o
.text:00410C42 ; __unwind { // loc_410C4A
.text:00410C42 ;   cleanup() // owned by 4048FE
.text:00410C42                 lea     ecx, [ebp+var_20]
.text:00410C45                 jmp     loc_403DA1
.text:00410C4A ; ---------------------------------------------------------------------------
.text:00410C4A
.text:00410C4A loc_410C4A:                             ; DATA XREF: .text:00403750↑o
.text:00410C4A                                         ; sub_4048DF+5↑o
.text:00410C4A                 mov     edx, [esp-4+arg_4]
.text:00410C4E                 lea     eax, [edx+0Ch]
.text:00410C51                 mov     ecx, [edx-0CCh]
.text:00410C57                 xor     ecx, eax        ; StackCookie
.text:00410C59                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410C5E                 mov     ecx, [edx-4]
.text:00410C61                 xor     ecx, eax        ; StackCookie
.text:00410C63                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410C68                 mov     eax, offset stru_41194C
.text:00410C6D                 jmp     __CxxFrameHandler3
.text:00410C6D ; } // starts at 410C42
.text:00410C6D ; END OF FUNCTION CHUNK FOR sub_4048DF
.text:00410C72
.text:00410C72 ; =============== S U B R O U T I N E =======================================
.text:00410C72
.text:00410C72
.text:00410C72 sub_410C72      proc near               ; DATA XREF: .text:stru_41199C↓o
.text:00410C72                 lea     ecx, [ebp-20h]
.text:00410C75                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410C75 sub_410C72      endp
.text:00410C75
.text:00410C7B ; ---------------------------------------------------------------------------
.text:00410C7B ; START OF FUNCTION CHUNK FOR sub_404CA7
.text:00410C7B
.text:00410C7B loc_410C7B:                             ; DATA XREF: .text:00403754↑o
.text:00410C7B                                         ; sub_404CA7+2↑o
.text:00410C7B ; __unwind { // loc_410C7B
.text:00410C7B                 mov     edx, [esp-4+arg_4]
.text:00410C7F                 lea     eax, [edx+0Ch]
.text:00410C82                 mov     ecx, [edx-74h]
.text:00410C85                 xor     ecx, eax        ; StackCookie
.text:00410C87                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410C8C                 mov     ecx, [edx-4]
.text:00410C8F                 xor     ecx, eax        ; StackCookie
.text:00410C91                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410C96                 mov     eax, offset stru_411978
.text:00410C9B                 jmp     __CxxFrameHandler3
.text:00410C9B ; } // starts at 410C7B
.text:00410C9B ; END OF FUNCTION CHUNK FOR sub_404CA7
.text:00410CA0 ; ---------------------------------------------------------------------------
.text:00410CA0 ; START OF FUNCTION CHUNK FOR sub_404FB1
.text:00410CA0
.text:00410CA0 loc_410CA0:                             ; DATA XREF: .text:stru_4119C8↓o
.text:00410CA0 ; __unwind { // loc_410CA8
.text:00410CA0 ;   cleanup() // owned by 404FD4
.text:00410CA0                 lea     ecx, [ebp+var_18]
.text:00410CA3                 jmp     loc_40DC4F
.text:00410CA8 ; ---------------------------------------------------------------------------
.text:00410CA8
.text:00410CA8 loc_410CA8:                             ; DATA XREF: .text:00403758↑o
.text:00410CA8                                         ; sub_404FB1+2↑o
.text:00410CA8                 mov     edx, [esp-4+arg_4]
.text:00410CAC                 lea     eax, [edx+0Ch]
.text:00410CAF                 mov     ecx, [edx-24h]
.text:00410CB2                 xor     ecx, eax        ; StackCookie
.text:00410CB4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410CB9                 mov     eax, offset stru_4119A4
.text:00410CBE                 jmp     __CxxFrameHandler3
.text:00410CBE ; } // starts at 410CA0
.text:00410CBE ; END OF FUNCTION CHUNK FOR sub_404FB1
.text:00410CC3 ; ---------------------------------------------------------------------------
.text:00410CC3 ; START OF FUNCTION CHUNK FOR sub_4050D7
.text:00410CC3
.text:00410CC3 loc_410CC3:                             ; DATA XREF: .text:004119FC↓o
.text:00410CC3 ; __unwind { // loc_410CCE
.text:00410CC3 ;   cleanup() // owned by 4051F3
.text:00410CC3                 push    [ebp+var_34]
.text:00410CC6                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00410CCC                 pop     ecx
.text:00410CCD                 retn
.text:00410CCE ; ---------------------------------------------------------------------------
.text:00410CCE
.text:00410CCE loc_410CCE:                             ; DATA XREF: .text:0040375C↑o
.text:00410CCE                                         ; sub_4050D7+2↑o
.text:00410CCE                 mov     edx, [esp-4+arg_4]
.text:00410CD2                 lea     eax, [edx+0Ch]
.text:00410CD5                 mov     ecx, [edx-78h]
.text:00410CD8                 xor     ecx, eax        ; StackCookie
.text:00410CDA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410CDF                 mov     ecx, [edx-8]
.text:00410CE2                 xor     ecx, eax        ; StackCookie
.text:00410CE4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410CE9                 mov     eax, offset stru_4119D0
.text:00410CEE                 jmp     __CxxFrameHandler3
.text:00410CEE ; } // starts at 410CC3
.text:00410CEE ; END OF FUNCTION CHUNK FOR sub_4050D7
.text:00410CF3 ; ---------------------------------------------------------------------------
.text:00410CF3 ; START OF FUNCTION CHUNK FOR sub_4052C3
.text:00410CF3
.text:00410CF3 loc_410CF3:                             ; DATA XREF: .text:stru_411A54↓o
.text:00410CF3 ; __unwind { // loc_410CFC
.text:00410CF3                 lea     ecx, [ebp+arg_0]
.text:00410CF6                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410CFC ; ---------------------------------------------------------------------------
.text:00410CFC
.text:00410CFC loc_410CFC:                             ; DATA XREF: .text:00403760↑o
.text:00410CFC                                         ; sub_4052C3+2↑o
.text:00410CFC                 mov     edx, [esp-4+arg_4]
.text:00410D00                 lea     eax, [edx+0Ch]
.text:00410D03                 mov     ecx, [edx-10h]
.text:00410D06                 xor     ecx, eax        ; StackCookie
.text:00410D08                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410D0D                 mov     eax, offset stru_411A30
.text:00410D12                 jmp     __CxxFrameHandler3
.text:00410D12 ; } // starts at 410CF3
.text:00410D12 ; END OF FUNCTION CHUNK FOR sub_4052C3
.text:00410D17 ; ---------------------------------------------------------------------------
.text:00410D17 ; START OF FUNCTION CHUNK FOR sub_405410
.text:00410D17 ;   ADDITIONAL PARENT FUNCTION sub_4081F0
.text:00410D17
.text:00410D17 loc_410D17:                             ; DATA XREF: .text:stru_411A80↓o
.text:00410D17 ; __unwind { // loc_410D29
.text:00410D17 ;   cleanup() // owned by 405435
.text:00410D17 ;   cleanup() // owned by 4054D6
.text:00410D17 ;   cleanup() // owned by 408225
.text:00410D17 ;   cleanup() // owned by 408289
.text:00410D17                 lea     ecx, [ebp+String1]
.text:00410D1A                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410D20 ; ---------------------------------------------------------------------------
.text:00410D20
.text:00410D20 loc_410D20:                             ; DATA XREF: .text:00411A88↓o
.text:00410D20 ;   cleanup() // owned by 405444
.text:00410D20 ;   cleanup() // owned by 408231
.text:00410D20                 lea     ecx, [ebp+String2]
.text:00410D23                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410D29 ; ---------------------------------------------------------------------------
.text:00410D29
.text:00410D29 loc_410D29:                             ; DATA XREF: .text:00403764↑o
.text:00410D29                                         ; sub_405410+2↑o ...
.text:00410D29                 mov     edx, [esp-4+arg_4]
.text:00410D2D                 lea     eax, [edx+0Ch]
.text:00410D30                 mov     ecx, [edx-18h]
.text:00410D33                 xor     ecx, eax        ; StackCookie
.text:00410D35                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410D3A                 mov     eax, offset stru_411A5C
.text:00410D3F                 jmp     __CxxFrameHandler3
.text:00410D3F ; } // starts at 410D17
.text:00410D3F ; END OF FUNCTION CHUNK FOR sub_405410
.text:00410D44 ; ---------------------------------------------------------------------------
.text:00410D44 ; START OF FUNCTION CHUNK FOR sub_405870
.text:00410D44 ;   ADDITIONAL PARENT FUNCTION sub_405D0B
.text:00410D44
.text:00410D44 loc_410D44:                             ; DATA XREF: .text:stru_411AB4↓o
.text:00410D44 ; __unwind { // loc_410D4C
.text:00410D44 ;   cleanup() // owned by 405890
.text:00410D44 ;   cleanup() // owned by 405D46
.text:00410D44                 lea     ecx, [ebp+hKey]
.text:00410D47                 jmp     loc_403DA1
.text:00410D4C ; ---------------------------------------------------------------------------
.text:00410D4C
.text:00410D4C loc_410D4C:                             ; DATA XREF: .text:00403768↑o
.text:00410D4C                                         ; sub_405870+2↑o ...
.text:00410D4C                 mov     edx, [esp-4+arg_4]
.text:00410D50                 lea     eax, [edx+0Ch]
.text:00410D53                 mov     ecx, [edx-20h]
.text:00410D56                 xor     ecx, eax        ; StackCookie
.text:00410D58                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410D5D                 mov     ecx, [edx-4]
.text:00410D60                 xor     ecx, eax        ; StackCookie
.text:00410D62                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410D67                 mov     eax, offset stru_411A90
.text:00410D6C                 jmp     __CxxFrameHandler3
.text:00410D6C ; } // starts at 410D44
.text:00410D6C ; END OF FUNCTION CHUNK FOR sub_405870
.text:00410D71 ; ---------------------------------------------------------------------------
.text:00410D71 ; START OF FUNCTION CHUNK FOR sub_405AC6
.text:00410D71
.text:00410D71 loc_410D71:                             ; DATA XREF: .text:stru_411AE0↓o
.text:00410D71 ; __unwind { // loc_410D9D
.text:00410D71 ;   cleanup() // owned by 405AF9
.text:00410D71 ;   cleanup() // owned by 405B56
.text:00410D71                 lea     ecx, [ebp+var_28]
.text:00410D74                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410D7A ; ---------------------------------------------------------------------------
.text:00410D7A
.text:00410D7A loc_410D7A:                             ; DATA XREF: .text:00411AE8↓o
.text:00410D7A                 lea     ecx, [ebp+var_20]
.text:00410D7D                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410D83 ; ---------------------------------------------------------------------------
.text:00410D83
.text:00410D83 loc_410D83:                             ; DATA XREF: .text:00411AF0↓o
.text:00410D83                 lea     ecx, [ebp+var_24]
.text:00410D86                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410D8C ; ---------------------------------------------------------------------------
.text:00410D8C
.text:00410D8C loc_410D8C:                             ; DATA XREF: .text:00411AF8↓o
.text:00410D8C                 lea     ecx, [ebp+Data]
.text:00410D8F                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410D95 ; ---------------------------------------------------------------------------
.text:00410D95
.text:00410D95 loc_410D95:                             ; DATA XREF: .text:00411B00↓o
.text:00410D95 ;   cleanup() // owned by 405B11
.text:00410D95 ;   cleanup() // owned by 405B1F
.text:00410D95 ;   cleanup() // owned by 405B2E
.text:00410D95 ;   cleanup() // owned by 405B3B
.text:00410D95 ;   cleanup() // owned by 405B48
.text:00410D95 ;   cleanup() // owned by 405B68
.text:00410D95                 lea     ecx, [ebp+var_38]
.text:00410D98                 jmp     loc_403DA1
.text:00410D9D ; ---------------------------------------------------------------------------
.text:00410D9D
.text:00410D9D loc_410D9D:                             ; DATA XREF: .text:0040376C↑o
.text:00410D9D                                         ; sub_405AC6+2↑o
.text:00410D9D                 mov     edx, [esp-4+arg_4]
.text:00410DA1                 lea     eax, [edx+0Ch]
.text:00410DA4                 mov     ecx, [edx-3Ch]
.text:00410DA7                 xor     ecx, eax        ; StackCookie
.text:00410DA9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410DAE                 mov     ecx, [edx-4]
.text:00410DB1                 xor     ecx, eax        ; StackCookie
.text:00410DB3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410DB8                 mov     eax, offset stru_411ABC
.text:00410DBD                 jmp     __CxxFrameHandler3
.text:00410DBD ; } // starts at 410D71
.text:00410DBD ; END OF FUNCTION CHUNK FOR sub_405AC6
.text:00410DC2 ; ---------------------------------------------------------------------------
.text:00410DC2 ; START OF FUNCTION CHUNK FOR OpenRegKey(ushort const *,ushort const *,ulong)
.text:00410DC2
.text:00410DC2 loc_410DC2:                             ; DATA XREF: .text:stru_411B2C↓o
.text:00410DC2 ; __unwind { // loc_410E01
.text:00410DC2 ;   cleanup() // owned by 405DB4
.text:00410DC2 ;   cleanup() // owned by 405E85
.text:00410DC2 ;   cleanup() // owned by 405EEB
.text:00410DC2                 lea     ecx, [ebp+lpSubKey]
.text:00410DC5                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410DCB ; ---------------------------------------------------------------------------
.text:00410DCB
.text:00410DCB loc_410DCB:                             ; DATA XREF: .text:00411B34↓o
.text:00410DCB                 lea     ecx, [ebp+var_20]
.text:00410DCE                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410DD4 ; ---------------------------------------------------------------------------
.text:00410DD4
.text:00410DD4 loc_410DD4:                             ; DATA XREF: .text:00411B3C↓o
.text:00410DD4                 lea     ecx, [ebp+var_1C]
.text:00410DD7                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410DDD ; ---------------------------------------------------------------------------
.text:00410DDD
.text:00410DDD loc_410DDD:                             ; DATA XREF: .text:00411B44↓o
.text:00410DDD                 lea     ecx, [ebp+hKey]
.text:00410DE0                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410DE6 ; ---------------------------------------------------------------------------
.text:00410DE6
.text:00410DE6 loc_410DE6:                             ; DATA XREF: .text:00411B4C↓o
.text:00410DE6 ;   cleanup() // owned by 405E40
.text:00410DE6 ;   cleanup() // owned by 405E4F
.text:00410DE6 ;   cleanup() // owned by 405E5E
.text:00410DE6 ;   cleanup() // owned by 405E6B
.text:00410DE6 ;   cleanup() // owned by 405E78
.text:00410DE6 ;   cleanup() // owned by 405EA6
.text:00410DE6 ;   cleanup() // owned by 405EDE
.text:00410DE6                 lea     ecx, [ebp+hKey]
.text:00410DE9                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410DEF ; ---------------------------------------------------------------------------
.text:00410DEF
.text:00410DEF loc_410DEF:                             ; DATA XREF: .text:00411B54↓o
.text:00410DEF ;   cleanup() // owned by 405EB5
.text:00410DEF ;   cleanup() // owned by 405ED1
.text:00410DEF                 lea     ecx, [ebp+var_1C]
.text:00410DF2                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410DF8 ; ---------------------------------------------------------------------------
.text:00410DF8
.text:00410DF8 loc_410DF8:                             ; DATA XREF: .text:00411B5C↓o
.text:00410DF8 ;   cleanup() // owned by 405EC4
.text:00410DF8                 lea     ecx, [ebp+var_20]
.text:00410DFB                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410E01 ; ---------------------------------------------------------------------------
.text:00410E01
.text:00410E01 loc_410E01:                             ; DATA XREF: .text:00403770↑o
.text:00410E01                                         ; OpenRegKey(ushort const *,ushort const *,ulong)+2↑o
.text:00410E01                 mov     edx, [esp-4+arg_4]
.text:00410E05                 lea     eax, [edx+0Ch]
.text:00410E08                 mov     ecx, [edx-24h]
.text:00410E0B                 xor     ecx, eax        ; StackCookie
.text:00410E0D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410E12                 mov     eax, offset stru_411B08
.text:00410E17                 jmp     __CxxFrameHandler3
.text:00410E17 ; } // starts at 410DC2
.text:00410E17 ; END OF FUNCTION CHUNK FOR OpenRegKey(ushort const *,ushort const *,ulong)
.text:00410E1C ; ---------------------------------------------------------------------------
.text:00410E1C ; START OF FUNCTION CHUNK FOR sub_405FEB
.text:00410E1C
.text:00410E1C loc_410E1C:                             ; DATA XREF: .text:stru_411B88↓o
.text:00410E1C ; __unwind { // loc_410E25
.text:00410E1C ;   cleanup() // owned by 40602D
.text:00410E1C                 lea     ecx, [ebp+var_10]
.text:00410E1F                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410E25 ; ---------------------------------------------------------------------------
.text:00410E25
.text:00410E25 loc_410E25:                             ; DATA XREF: .text:00403774↑o
.text:00410E25                                         ; sub_405FEB+2↑o
.text:00410E25                 mov     edx, [esp-4+arg_4]
.text:00410E29                 lea     eax, [edx+0Ch]
.text:00410E2C                 mov     ecx, [edx-18h]
.text:00410E2F                 xor     ecx, eax        ; StackCookie
.text:00410E31                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410E36                 mov     eax, offset stru_411B64
.text:00410E3B                 jmp     __CxxFrameHandler3
.text:00410E3B ; } // starts at 410E1C
.text:00410E3B ; END OF FUNCTION CHUNK FOR sub_405FEB
.text:00410E40 ; ---------------------------------------------------------------------------
.text:00410E40 ; START OF FUNCTION CHUNK FOR sub_406092
.text:00410E40
.text:00410E40 loc_410E40:                             ; DATA XREF: .text:stru_411BB4↓o
.text:00410E40 ; __unwind { // loc_410E4B
.text:00410E40 ;   cleanup() // owned by 4060C2
.text:00410E40                 push    [ebp+var_18]
.text:00410E43                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:00410E49                 pop     ecx
.text:00410E4A                 retn
.text:00410E4B ; ---------------------------------------------------------------------------
.text:00410E4B
.text:00410E4B loc_410E4B:                             ; DATA XREF: .text:00403778↑o
.text:00410E4B                                         ; sub_406092+2↑o
.text:00410E4B                 mov     edx, [esp-4+arg_4]
.text:00410E4F                 lea     eax, [edx+0Ch]
.text:00410E52                 mov     ecx, [edx-1Ch]
.text:00410E55                 xor     ecx, eax        ; StackCookie
.text:00410E57                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410E5C                 mov     eax, offset stru_411B90
.text:00410E61                 jmp     __CxxFrameHandler3
.text:00410E61 ; } // starts at 410E40
.text:00410E61 ; END OF FUNCTION CHUNK FOR sub_406092
.text:00410E66 ; ---------------------------------------------------------------------------
.text:00410E66 ; START OF FUNCTION CHUNK FOR sub_406166
.text:00410E66
.text:00410E66 loc_410E66:                             ; DATA XREF: .text:stru_411BE0↓o
.text:00410E66 ; __unwind { // loc_410E6E
.text:00410E66 ;   cleanup() // owned by 40617F
.text:00410E66                 lea     ecx, [ebp+var_2C]
.text:00410E69                 jmp     loc_406A2D
.text:00410E6E ; ---------------------------------------------------------------------------
.text:00410E6E
.text:00410E6E loc_410E6E:                             ; DATA XREF: .text:0040377C↑o
.text:00410E6E                                         ; sub_406166+2↑o
.text:00410E6E                 mov     edx, [esp-4+arg_4]
.text:00410E72                 lea     eax, [edx+0Ch]
.text:00410E75                 mov     ecx, [edx-58h]
.text:00410E78                 xor     ecx, eax        ; StackCookie
.text:00410E7A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410E7F                 mov     ecx, [edx-4]
.text:00410E82                 xor     ecx, eax        ; StackCookie
.text:00410E84                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410E89                 mov     eax, offset stru_411BBC
.text:00410E8E                 jmp     __CxxFrameHandler3
.text:00410E8E ; } // starts at 410E66
.text:00410E8E ; END OF FUNCTION CHUNK FOR sub_406166
.text:00410E93 ; ---------------------------------------------------------------------------
.text:00410E93 ; START OF FUNCTION CHUNK FOR std::logic_error::logic_error(std::string const &)
.text:00410E93 ;   ADDITIONAL PARENT FUNCTION std::logic_error::logic_error(std::logic_error const &)
.text:00410E93
.text:00410E93 loc_410E93:                             ; DATA XREF: .text:stru_411C0C↓o
.text:00410E93 ; __unwind { // loc_410E9C
.text:00410E93 ;   cleanup() // owned by 406522
.text:00410E93 ;   cleanup() // owned by 406A5B
.text:00410E93                 mov     ecx, [ebp+var_10]
.text:00410E96                 jmp     ds:__imp_??1exception@@UAE@XZ ; exception::~exception(void)
.text:00410E9C ; ---------------------------------------------------------------------------
.text:00410E9C
.text:00410E9C loc_410E9C:                             ; DATA XREF: .text:00403780↑o
.text:00410E9C                                         ; std::logic_error::logic_error(std::string const &)+2↑o ...
.text:00410E9C                 mov     edx, [esp-4+arg_4]
.text:00410EA0                 lea     eax, [edx+0Ch]
.text:00410EA3                 mov     ecx, [edx-14h]
.text:00410EA6                 xor     ecx, eax        ; StackCookie
.text:00410EA8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410EAD                 mov     eax, offset stru_411BE8
.text:00410EB2                 jmp     __CxxFrameHandler3
.text:00410EB2 ; } // starts at 410E93
.text:00410EB2 ; END OF FUNCTION CHUNK FOR std::logic_error::logic_error(std::string const &)
.text:00410EB7 ; ---------------------------------------------------------------------------
.text:00410EB7 ; START OF FUNCTION CHUNK FOR std::string::_Copy(uint,uint)
.text:00410EB7
.text:00410EB7 loc_410EB7:                             ; DATA XREF: .text:00403784↑o
.text:00410EB7                                         ; std::string::_Copy(uint,uint)+2↑o
.text:00410EB7 ; __unwind { // loc_410EB7
.text:00410EB7                 mov     edx, [esp-4+SourceSize]
.text:00410EBB                 lea     eax, [edx+0Ch]
.text:00410EBE                 mov     ecx, [edx-20h]
.text:00410EC1                 xor     ecx, eax        ; StackCookie
.text:00410EC3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410EC8                 mov     eax, offset stru_411C14
.text:00410ECD                 jmp     __CxxFrameHandler3
.text:00410ECD ; } // starts at 410EB7
.text:00410ECD ; END OF FUNCTION CHUNK FOR std::string::_Copy(uint,uint)
.text:00410ED2 ; ---------------------------------------------------------------------------
.text:00410ED2 ; START OF FUNCTION CHUNK FOR sub_406B79
.text:00410ED2
.text:00410ED2 loc_410ED2:                             ; DATA XREF: .text:stru_411CC4↓o
.text:00410ED2 ; __unwind { // loc_410EDD
.text:00410ED2 ;   cleanup() // owned by 406BA7
.text:00410ED2                 lea     ecx, [ebp+hKey]
.text:00410ED8                 jmp     loc_403DA1
.text:00410EDD ; ---------------------------------------------------------------------------
.text:00410EDD
.text:00410EDD loc_410EDD:                             ; DATA XREF: .text:00403788↑o
.text:00410EDD                                         ; sub_406B79+5↑o
.text:00410EDD                 mov     edx, [esp-4+arg_4]
.text:00410EE1                 lea     eax, [edx+0Ch]
.text:00410EE4                 mov     ecx, [edx-230h]
.text:00410EEA                 xor     ecx, eax        ; StackCookie
.text:00410EEC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410EF1                 mov     ecx, [edx-4]
.text:00410EF4                 xor     ecx, eax        ; StackCookie
.text:00410EF6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410EFB                 mov     eax, offset stru_411CA0
.text:00410F00                 jmp     __CxxFrameHandler3
.text:00410F00 ; } // starts at 410ED2
.text:00410F00 ; END OF FUNCTION CHUNK FOR sub_406B79
.text:00410F05 ; ---------------------------------------------------------------------------
.text:00410F05 ; START OF FUNCTION CHUNK FOR sub_406D44
.text:00410F05
.text:00410F05 loc_410F05:                             ; DATA XREF: .text:stru_411CF0↓o
.text:00410F05 ; __unwind { // loc_410F4A
.text:00410F05 ;   cleanup() // owned by 406D5E
.text:00410F05                 mov     ecx, [ebp+var_10]
.text:00410F08                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410F0E ; ---------------------------------------------------------------------------
.text:00410F0E
.text:00410F0E loc_410F0E:                             ; DATA XREF: .text:00411CF8↓o
.text:00410F0E ;   cleanup() // owned by 406D6E
.text:00410F0E                 mov     ecx, [ebp+var_10]
.text:00410F11                 add     ecx, 4
.text:00410F14                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410F1A ; ---------------------------------------------------------------------------
.text:00410F1A
.text:00410F1A loc_410F1A:                             ; DATA XREF: .text:00411D00↓o
.text:00410F1A ;   cleanup() // owned by 406D7B
.text:00410F1A                 mov     ecx, [ebp+var_10]
.text:00410F1D                 add     ecx, 8
.text:00410F20                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410F26 ; ---------------------------------------------------------------------------
.text:00410F26
.text:00410F26 loc_410F26:                             ; DATA XREF: .text:00411D08↓o
.text:00410F26 ;   cleanup() // owned by 406D8B
.text:00410F26                 mov     ecx, [ebp+var_10]
.text:00410F29                 add     ecx, 0Ch
.text:00410F2C                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410F32 ; ---------------------------------------------------------------------------
.text:00410F32
.text:00410F32 loc_410F32:                             ; DATA XREF: .text:00411D10↓o
.text:00410F32 ;   cleanup() // owned by 406D9F
.text:00410F32                 mov     ecx, [ebp+var_10]
.text:00410F35                 add     ecx, 18h
.text:00410F38                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410F3E ; ---------------------------------------------------------------------------
.text:00410F3E
.text:00410F3E loc_410F3E:                             ; DATA XREF: .text:00411D18↓o
.text:00410F3E ;   cleanup() // owned by 406DAD
.text:00410F3E                 mov     ecx, [ebp+var_10]
.text:00410F41                 add     ecx, 1Ch
.text:00410F44                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410F4A ; ---------------------------------------------------------------------------
.text:00410F4A
.text:00410F4A loc_410F4A:                             ; DATA XREF: .text:0040378C↑o
.text:00410F4A                                         ; sub_406D44+2↑o
.text:00410F4A                 mov     edx, [esp-4+arg_4]
.text:00410F4E                 lea     eax, [edx+0Ch]
.text:00410F51                 mov     ecx, [edx-14h]
.text:00410F54                 xor     ecx, eax        ; StackCookie
.text:00410F56                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410F5B                 mov     eax, offset stru_411CCC
.text:00410F60                 jmp     __CxxFrameHandler3
.text:00410F60 ; } // starts at 410F05
.text:00410F60 ; END OF FUNCTION CHUNK FOR sub_406D44
.text:00410F65 ; ---------------------------------------------------------------------------
.text:00410F65 ; START OF FUNCTION CHUNK FOR sub_407856
.text:00410F65 ;   ADDITIONAL PARENT FUNCTION sub_407910
.text:00410F65
.text:00410F65 loc_410F65:                             ; DATA XREF: .text:stru_411D44↓o
.text:00410F65 ; __unwind { // loc_410F8B
.text:00410F65 ;   cleanup() // owned by 407875
.text:00410F65                 mov     ecx, [ebp+var_10]
.text:00410F68                 jmp     ds:??1CPropertyPage@@UAE@XZ ; CPropertyPage::~CPropertyPage(void)
.text:00410F6E ; ---------------------------------------------------------------------------
.text:00410F6E
.text:00410F6E loc_410F6E:                             ; DATA XREF: .text:00411D4C↓o
.text:00410F6E ;   cleanup() // owned by 40788E
.text:00410F6E ;   cleanup() // owned by 40794A
.text:00410F6E                 mov     ecx, [ebp+var_10]
.text:00410F71                 add     ecx, 90h
.text:00410F77                 jmp     loc_406DF6
.text:00410F7C ; ---------------------------------------------------------------------------
.text:00410F7C
.text:00410F7C loc_410F7C:                             ; DATA XREF: .text:00411D54↓o
.text:00410F7C ;   cleanup() // owned by 4078BA
.text:00410F7C ;   cleanup() // owned by 407937
.text:00410F7C                 mov     ecx, [ebp+var_10]
.text:00410F7F                 add     ecx, 0ACh ; '¬'
.text:00410F85                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410F8B ; ---------------------------------------------------------------------------
.text:00410F8B
.text:00410F8B loc_410F8B:                             ; DATA XREF: .text:00403790↑o
.text:00410F8B                                         ; sub_407856+2↑o ...
.text:00410F8B                 mov     edx, [esp-4+arg_4]
.text:00410F8F                 lea     eax, [edx+0Ch]
.text:00410F92                 mov     ecx, [edx-14h]
.text:00410F95                 xor     ecx, eax        ; StackCookie
.text:00410F97                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410F9C                 mov     eax, offset stru_411D20
.text:00410FA1                 jmp     __CxxFrameHandler3
.text:00410FA1 ; } // starts at 410F65
.text:00410FA1 ; END OF FUNCTION CHUNK FOR sub_407856
.text:00410FA6 ; ---------------------------------------------------------------------------
.text:00410FA6 ; START OF FUNCTION CHUNK FOR sub_407996
.text:00410FA6
.text:00410FA6 loc_410FA6:                             ; DATA XREF: .text:stru_411D80↓o
.text:00410FA6 ; __unwind { // loc_410FB8
.text:00410FA6 ;   cleanup() // owned by 4079CC
.text:00410FA6 ;   cleanup() // owned by 407A77
.text:00410FA6                 lea     ecx, [ebp+var_14]
.text:00410FA9                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410FAF ; ---------------------------------------------------------------------------
.text:00410FAF
.text:00410FAF loc_410FAF:                             ; DATA XREF: .text:00411D88↓o
.text:00410FAF ;   cleanup() // owned by 4079D8
.text:00410FAF                 lea     ecx, [ebp+var_10]
.text:00410FB2                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410FB8 ; ---------------------------------------------------------------------------
.text:00410FB8
.text:00410FB8 loc_410FB8:                             ; DATA XREF: .text:00403794↑o
.text:00410FB8                                         ; sub_407996+5↑o
.text:00410FB8                 mov     edx, [esp-4+arg_4]
.text:00410FBC                 lea     eax, [edx+0Ch]
.text:00410FBF                 mov     ecx, [edx-90h]
.text:00410FC5                 xor     ecx, eax        ; StackCookie
.text:00410FC7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410FCC                 mov     eax, offset stru_411D5C
.text:00410FD1                 jmp     __CxxFrameHandler3
.text:00410FD1 ; } // starts at 410FA6
.text:00410FD1 ; END OF FUNCTION CHUNK FOR sub_407996
.text:00410FD6 ; ---------------------------------------------------------------------------
.text:00410FD6 ; START OF FUNCTION CHUNK FOR sub_407CA0
.text:00410FD6
.text:00410FD6 loc_410FD6:                             ; DATA XREF: .text:stru_411DB4↓o
.text:00410FD6 ; __unwind { // loc_410FE8
.text:00410FD6 ;   cleanup() // owned by 407CBF
.text:00410FD6 ;   cleanup() // owned by 407D3A
.text:00410FD6                 lea     ecx, [ebp+var_10]
.text:00410FD9                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410FDF ; ---------------------------------------------------------------------------
.text:00410FDF
.text:00410FDF loc_410FDF:                             ; DATA XREF: .text:00411DBC↓o
.text:00410FDF ;   cleanup() // owned by 407D2D
.text:00410FDF                 lea     ecx, [ebp+var_14]
.text:00410FE2                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00410FE8 ; ---------------------------------------------------------------------------
.text:00410FE8
.text:00410FE8 loc_410FE8:                             ; DATA XREF: .text:00403798↑o
.text:00410FE8                                         ; sub_407CA0+2↑o
.text:00410FE8                 mov     edx, [esp-4+arg_4]
.text:00410FEC                 lea     eax, [edx+0Ch]
.text:00410FEF                 mov     ecx, [edx-20h]
.text:00410FF2                 xor     ecx, eax        ; StackCookie
.text:00410FF4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410FF9                 mov     eax, offset stru_411D90
.text:00410FFE                 jmp     __CxxFrameHandler3
.text:00410FFE ; } // starts at 410FD6
.text:00410FFE ; END OF FUNCTION CHUNK FOR sub_407CA0
.text:00411003 ; ---------------------------------------------------------------------------
.text:00411003 ; START OF FUNCTION CHUNK FOR sub_407E55
.text:00411003 ;   ADDITIONAL PARENT FUNCTION CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)
.text:00411003 ;   ADDITIONAL PARENT FUNCTION sub_40D672
.text:00411003 ;   ADDITIONAL PARENT FUNCTION sub_40DB30
.text:00411003
.text:00411003 loc_411003:                             ; DATA XREF: .text:stru_411DE8↓o
.text:00411003 ; __unwind { // loc_41100C
.text:00411003 ;   cleanup() // owned by 407E6E
.text:00411003 ;   cleanup() // owned by 409BD0
.text:00411003 ;   cleanup() // owned by 40D690
.text:00411003 ;   cleanup() // owned by 40DB45
.text:00411003                 lea     ecx, [ebp+lpString]
.text:00411006                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0041100C ; ---------------------------------------------------------------------------
.text:0041100C
.text:0041100C loc_41100C:                             ; DATA XREF: .text:0040379C↑o
.text:0041100C                                         ; sub_407E55+2↑o ...
.text:0041100C                 mov     edx, [esp-4+arg_4]
.text:00411010                 lea     eax, [edx+0Ch]
.text:00411013                 mov     ecx, [edx-14h]
.text:00411016                 xor     ecx, eax        ; StackCookie
.text:00411018                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0041101D                 mov     eax, offset stru_411DC4
.text:00411022                 jmp     __CxxFrameHandler3
.text:00411022 ; } // starts at 411003
.text:00411022 ; END OF FUNCTION CHUNK FOR sub_407E55
.text:00411027 ; ---------------------------------------------------------------------------
.text:00411027 ; START OF FUNCTION CHUNK FOR sub_407EE3
.text:00411027
.text:00411027 loc_411027:                             ; DATA XREF: .text:stru_411E14↓o
.text:00411027 ; __unwind { // loc_41104B
.text:00411027 ;   cleanup() // owned by 407EFA
.text:00411027 ;   cleanup() // owned by 408062
.text:00411027                 lea     ecx, [ebp+var_14]
.text:0041102A                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411030 ; ---------------------------------------------------------------------------
.text:00411030
.text:00411030 loc_411030:                             ; DATA XREF: .text:00411E1C↓o
.text:00411030 ;   cleanup() // owned by 407F0A
.text:00411030 ;   cleanup() // owned by 408055
.text:00411030                 lea     ecx, [ebp+var_10]
.text:00411033                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411039 ; ---------------------------------------------------------------------------
.text:00411039
.text:00411039 loc_411039:                             ; DATA XREF: .text:00411E24↓o
.text:00411039 ;   cleanup() // owned by 407F17
.text:00411039 ;   cleanup() // owned by 408048
.text:00411039                 lea     ecx, [ebp+var_20]
.text:0041103C                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411042 ; ---------------------------------------------------------------------------
.text:00411042
.text:00411042 loc_411042:                             ; DATA XREF: .text:00411E2C↓o
.text:00411042 ;   cleanup() // owned by 407F26
.text:00411042                 lea     ecx, [ebp+var_18]
.text:00411045                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0041104B ; ---------------------------------------------------------------------------
.text:0041104B
.text:0041104B loc_41104B:                             ; DATA XREF: .text:004037A0↑o
.text:0041104B                                         ; sub_407EE3+2↑o
.text:0041104B                 mov     edx, [esp-4+arg_4]
.text:0041104F                 lea     eax, [edx+0Ch]
.text:00411052                 mov     ecx, [edx-60h]
.text:00411055                 xor     ecx, eax        ; StackCookie
.text:00411057                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0041105C                 mov     eax, offset stru_411DF0
.text:00411061                 jmp     __CxxFrameHandler3
.text:00411061 ; } // starts at 411027
.text:00411061 ; END OF FUNCTION CHUNK FOR sub_407EE3
.text:00411066 ; ---------------------------------------------------------------------------
.text:00411066 ; START OF FUNCTION CHUNK FOR sub_4080F8
.text:00411066
.text:00411066 loc_411066:                             ; DATA XREF: .text:stru_411E60↓o
.text:00411066 ; __unwind { // loc_4110CF
.text:00411066 ;   cleanup() // owned by 4081CE
.text:00411066                 lea     ecx, [ebp+arg_10]
.text:00411069                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0041106F ; ---------------------------------------------------------------------------
.text:0041106F
.text:0041106F loc_41106F:                             ; DATA XREF: .text:00411E68↓o
.text:0041106F ;   cleanup() // owned by 4081C1
.text:0041106F                 lea     ecx, [ebp+arg_C]
.text:00411072                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411078 ; ---------------------------------------------------------------------------
.text:00411078
.text:00411078 loc_411078:                             ; DATA XREF: .text:00411E70↓o
.text:00411078 ;   cleanup() // owned by 4081B4
.text:00411078                 lea     ecx, [ebp+arg_8]
.text:0041107B                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411081 ; ---------------------------------------------------------------------------
.text:00411081
.text:00411081 loc_411081:                             ; DATA XREF: .text:00411E78↓o
.text:00411081 ;   cleanup() // owned by 4081A4
.text:00411081                 lea     ecx, [ebp+arg_4]
.text:00411084                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0041108A ; ---------------------------------------------------------------------------
.text:0041108A
.text:0041108A loc_41108A:                             ; DATA XREF: .text:00411E80↓o
.text:0041108A ;   cleanup() // owned by 408109
.text:0041108A                 lea     ecx, [ebp+arg_0]
.text:0041108D                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411093 ; ---------------------------------------------------------------------------
.text:00411093
.text:00411093 loc_411093:                             ; DATA XREF: .text:00411E88↓o
.text:00411093 ;   cleanup() // owned by 408122
.text:00411093                 mov     ecx, [ebp+var_10]
.text:00411096                 add     ecx, 4
.text:00411099                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0041109F ; ---------------------------------------------------------------------------
.text:0041109F
.text:0041109F loc_41109F:                             ; DATA XREF: .text:00411E90↓o
.text:0041109F ;   cleanup() // owned by 40812F
.text:0041109F                 mov     ecx, [ebp+var_10]
.text:004110A2                 add     ecx, 8
.text:004110A5                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004110AB ; ---------------------------------------------------------------------------
.text:004110AB
.text:004110AB loc_4110AB:                             ; DATA XREF: .text:00411E98↓o
.text:004110AB ;   cleanup() // owned by 40813C
.text:004110AB                 mov     ecx, [ebp+var_10]
.text:004110AE                 add     ecx, 0Ch
.text:004110B1                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004110B7 ; ---------------------------------------------------------------------------
.text:004110B7
.text:004110B7 loc_4110B7:                             ; DATA XREF: .text:00411EA0↓o
.text:004110B7 ;   cleanup() // owned by 408149
.text:004110B7                 mov     ecx, [ebp+var_10]
.text:004110BA                 add     ecx, 10h
.text:004110BD                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004110C3 ; ---------------------------------------------------------------------------
.text:004110C3
.text:004110C3 loc_4110C3:                             ; DATA XREF: .text:00411EA8↓o
.text:004110C3 ;   cleanup() // owned by 408155
.text:004110C3                 mov     ecx, [ebp+var_10]
.text:004110C6                 add     ecx, 14h
.text:004110C9                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004110CF ; ---------------------------------------------------------------------------
.text:004110CF
.text:004110CF loc_4110CF:                             ; DATA XREF: .text:004037A4↑o
.text:004110CF                                         ; sub_4080F8+2↑o
.text:004110CF                 mov     edx, [esp-4+arg_4]
.text:004110D3                 lea     eax, [edx+0Ch]
.text:004110D6                 mov     ecx, [edx-14h]
.text:004110D9                 xor     ecx, eax        ; StackCookie
.text:004110DB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004110E0                 mov     eax, offset stru_411E38
.text:004110E5                 jmp     __CxxFrameHandler3
.text:004110E5 ; } // starts at 411066
.text:004110E5 ; END OF FUNCTION CHUNK FOR sub_4080F8
.text:004110EA ; ---------------------------------------------------------------------------
.text:004110EA ; START OF FUNCTION CHUNK FOR sub_408632
.text:004110EA
.text:004110EA loc_4110EA:                             ; DATA XREF: .text:stru_411ED4↓o
.text:004110EA ; __unwind { // loc_41111A
.text:004110EA ;   cleanup() // owned by 408676
.text:004110EA                 mov     ecx, [ebp+var_10]
.text:004110ED                 add     ecx, 4
.text:004110F0                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004110F6 ; ---------------------------------------------------------------------------
.text:004110F6
.text:004110F6 loc_4110F6:                             ; DATA XREF: .text:00411EDC↓o
.text:004110F6 ;   cleanup() // owned by 408669
.text:004110F6                 mov     ecx, [ebp+var_10]
.text:004110F9                 add     ecx, 8
.text:004110FC                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411102 ; ---------------------------------------------------------------------------
.text:00411102
.text:00411102 loc_411102:                             ; DATA XREF: .text:00411EE4↓o
.text:00411102 ;   cleanup() // owned by 40865C
.text:00411102                 mov     ecx, [ebp+var_10]
.text:00411105                 add     ecx, 0Ch
.text:00411108                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0041110E ; ---------------------------------------------------------------------------
.text:0041110E
.text:0041110E loc_41110E:                             ; DATA XREF: .text:00411EEC↓o
.text:0041110E ;   cleanup() // owned by 40864C
.text:0041110E                 mov     ecx, [ebp+var_10]
.text:00411111                 add     ecx, 10h
.text:00411114                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0041111A ; ---------------------------------------------------------------------------
.text:0041111A
.text:0041111A loc_41111A:                             ; DATA XREF: .text:004037A8↑o
.text:0041111A                                         ; sub_408632+2↑o
.text:0041111A                 mov     edx, [esp-4+arg_4]
.text:0041111E                 lea     eax, [edx+0Ch]
.text:00411121                 mov     ecx, [edx-14h]
.text:00411124                 xor     ecx, eax        ; StackCookie
.text:00411126                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0041112B                 mov     eax, offset stru_411EB0
.text:00411130                 jmp     __CxxFrameHandler3
.text:00411130 ; } // starts at 4110EA
.text:00411130 ; END OF FUNCTION CHUNK FOR sub_408632
.text:00411135 ; ---------------------------------------------------------------------------
.text:00411135 ; START OF FUNCTION CHUNK FOR sub_408913
.text:00411135
.text:00411135 loc_411135:                             ; DATA XREF: .text:stru_411F20↓o
.text:00411135 ; __unwind { // loc_411191
.text:00411135 ;   cleanup() // owned by 408940
.text:00411135 ;   cleanup() // owned by 408D13
.text:00411135                 lea     ecx, [ebp+var_40]
.text:00411138                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0041113E ; ---------------------------------------------------------------------------
.text:0041113E
.text:0041113E loc_41113E:                             ; DATA XREF: .text:00411F28↓o
.text:0041113E ;   cleanup() // owned by 40894C
.text:0041113E ;   cleanup() // owned by 408D06
.text:0041113E                 lea     ecx, [ebp+var_2C]
.text:00411141                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411147 ; ---------------------------------------------------------------------------
.text:00411147
.text:00411147 loc_411147:                             ; DATA XREF: .text:00411F30↓o
.text:00411147 ;   cleanup() // owned by 408959
.text:00411147 ;   cleanup() // owned by 408CF9
.text:00411147                 lea     ecx, [ebp+var_3C]
.text:0041114A                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411150 ; ---------------------------------------------------------------------------
.text:00411150
.text:00411150 loc_411150:                             ; DATA XREF: .text:00411F38↓o
.text:00411150 ;   cleanup() // owned by 408966
.text:00411150 ;   cleanup() // owned by 408CEC
.text:00411150                 lea     ecx, [ebp+var_38]
.text:00411153                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411159 ; ---------------------------------------------------------------------------
.text:00411159
.text:00411159 loc_411159:                             ; DATA XREF: .text:00411F40↓o
.text:00411159 ;   cleanup() // owned by 408973
.text:00411159 ;   cleanup() // owned by 408C1A
.text:00411159                 lea     ecx, [ebp+var_34]
.text:0041115C                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411162 ; ---------------------------------------------------------------------------
.text:00411162
.text:00411162 loc_411162:                             ; DATA XREF: .text:00411F48↓o
.text:00411162 ;   cleanup() // owned by 408B9C
.text:00411162 ;   cleanup() // owned by 408C0B
.text:00411162                 push    [ebp+var_60]
.text:00411165                 call    ds:__imp_??3@YAXPAX@Z ; operator delete(void *)
.text:0041116B                 pop     ecx
.text:0041116C                 retn
.text:0041116D ; ---------------------------------------------------------------------------
.text:0041116D
.text:0041116D loc_41116D:                             ; DATA XREF: .text:00411F50↓o
.text:0041116D ;   cleanup() // owned by 408BBD
.text:0041116D                 mov     ecx, [ebp+var_48]
.text:00411170                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411176 ; ---------------------------------------------------------------------------
.text:00411176
.text:00411176 loc_411176:                             ; DATA XREF: .text:00411F58↓o
.text:00411176 ;   cleanup() // owned by 408BD1
.text:00411176                 mov     ecx, [ebp+var_64]
.text:00411179                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0041117F ; ---------------------------------------------------------------------------
.text:0041117F
.text:0041117F loc_41117F:                             ; DATA XREF: .text:00411F60↓o
.text:0041117F ;   cleanup() // owned by 408BE5
.text:0041117F                 mov     ecx, [ebp+var_68]
.text:00411182                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411188 ; ---------------------------------------------------------------------------
.text:00411188
.text:00411188 loc_411188:                             ; DATA XREF: .text:00411F68↓o
.text:00411188 ;   cleanup() // owned by 408BFC
.text:00411188                 mov     ecx, [ebp+var_6C]
.text:0041118B                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411191 ; ---------------------------------------------------------------------------
.text:00411191
.text:00411191 loc_411191:                             ; DATA XREF: .text:004037AC↑o
.text:00411191                                         ; sub_408913+2↑o
.text:00411191                 mov     edx, [esp-4+arg_4]
.text:00411195                 lea     eax, [edx+0Ch]
.text:00411198                 mov     ecx, [edx-74h]
.text:0041119B                 xor     ecx, eax        ; StackCookie
.text:0041119D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004111A2                 mov     ecx, [edx-4]
.text:004111A5                 xor     ecx, eax        ; StackCookie
.text:004111A7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004111AC                 mov     eax, offset stru_411EF8
.text:004111B1                 jmp     __CxxFrameHandler3
.text:004111B1 ; } // starts at 411135
.text:004111B1 ; END OF FUNCTION CHUNK FOR sub_408913
.text:004111B6 ; ---------------------------------------------------------------------------
.text:004111B6 ; START OF FUNCTION CHUNK FOR CPageTool::SetToolItem(_MSCONFIG_TOOL_TAG *,_MSCONFIG_VALID_PATH *,IXMLDOMNamedNodeMap *,CString *,CString *,CString *,CString *,CString *)
.text:004111B6
.text:004111B6 loc_4111B6:                             ; DATA XREF: .text:stru_411F94↓o
.text:004111B6 ; __unwind { // loc_4111BF
.text:004111B6 ;   cleanup() // owned by 4090B1
.text:004111B6                 lea     ecx, [ebp+var_18]
.text:004111B9                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004111BF ; ---------------------------------------------------------------------------
.text:004111BF
.text:004111BF loc_4111BF:                             ; DATA XREF: .text:004037B0↑o
.text:004111BF                                         ; CPageTool::SetToolItem(_MSCONFIG_TOOL_TAG *,_MSCONFIG_VALID_PATH *,IXMLDOMNamedNodeMap *,CString *,CString *,CString *,CString *,CString *)+2↑o
.text:004111BF                 mov     edx, [esp-4+arg_4]
.text:004111C3                 lea     eax, [edx+0Ch]
.text:004111C6                 mov     ecx, [edx-24h]
.text:004111C9                 xor     ecx, eax        ; StackCookie
.text:004111CB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004111D0                 mov     eax, offset stru_411F70
.text:004111D5                 jmp     __CxxFrameHandler3
.text:004111D5 ; } // starts at 4111B6
.text:004111D5 ; END OF FUNCTION CHUNK FOR CPageTool::SetToolItem(_MSCONFIG_TOOL_TAG *,_MSCONFIG_VALID_PATH *,IXMLDOMNamedNodeMap *,CString *,CString *,CString *,CString *,CString *)
.text:004111DA ; ---------------------------------------------------------------------------
.text:004111DA ; START OF FUNCTION CHUNK FOR sub_4091C4
.text:004111DA
.text:004111DA loc_4111DA:                             ; DATA XREF: .text:stru_411FC0↓o
.text:004111DA ; __unwind { // loc_4111E3
.text:004111DA ;   cleanup() // owned by 409241
.text:004111DA                 lea     ecx, [ebp+var_1C]
.text:004111DD                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004111E3 ; ---------------------------------------------------------------------------
.text:004111E3
.text:004111E3 loc_4111E3:                             ; DATA XREF: .text:004037B4↑o
.text:004111E3                                         ; sub_4091C4+2↑o
.text:004111E3                 mov     edx, [esp-4+arg_4]
.text:004111E7                 lea     eax, [edx+0Ch]
.text:004111EA                 mov     ecx, [edx-30h]
.text:004111ED                 xor     ecx, eax        ; StackCookie
.text:004111EF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004111F4                 mov     ecx, [edx-4]
.text:004111F7                 xor     ecx, eax        ; StackCookie
.text:004111F9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004111FE                 mov     eax, offset stru_411F9C
.text:00411203                 jmp     __CxxFrameHandler3
.text:00411203 ; } // starts at 4111DA
.text:00411203 ; END OF FUNCTION CHUNK FOR sub_4091C4
.text:00411208 ; ---------------------------------------------------------------------------
.text:00411208 ; START OF FUNCTION CHUNK FOR sub_4092C4
.text:00411208
.text:00411208 loc_411208:                             ; DATA XREF: .text:stru_411FEC↓o
.text:00411208 ; __unwind { // loc_41121A
.text:00411208 ;   cleanup() // owned by 4092D0
.text:00411208 ;   cleanup() // owned by 409369
.text:00411208                 lea     ecx, [ebp+arg_0]
.text:0041120B                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411211 ; ---------------------------------------------------------------------------
.text:00411211
.text:00411211 loc_411211:                             ; DATA XREF: .text:00411FF4↓o
.text:00411211 ;   cleanup() // owned by 4092E2
.text:00411211                 lea     ecx, [ebp+var_10]
.text:00411214                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0041121A ; ---------------------------------------------------------------------------
.text:0041121A
.text:0041121A loc_41121A:                             ; DATA XREF: .text:004037B8↑o
.text:0041121A                                         ; sub_4092C4+2↑o
.text:0041121A                 mov     edx, [esp-4+arg_4]
.text:0041121E                 lea     eax, [edx+0Ch]
.text:00411221                 mov     ecx, [edx-14h]
.text:00411224                 xor     ecx, eax        ; StackCookie
.text:00411226                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0041122B                 mov     eax, offset stru_411FC8
.text:00411230                 jmp     __CxxFrameHandler3
.text:00411230 ; } // starts at 411208
.text:00411230 ; END OF FUNCTION CHUNK FOR sub_4092C4
.text:00411235 ; ---------------------------------------------------------------------------
.text:00411235 ; START OF FUNCTION CHUNK FOR sub_4093CA
.text:00411235
.text:00411235 loc_411235:                             ; DATA XREF: .text:stru_412020↓o
.text:00411235 ; __unwind { // loc_41123E
.text:00411235 ;   cleanup() // owned by 409400
.text:00411235                 lea     ecx, [ebp+lParam]
.text:00411238                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0041123E ; ---------------------------------------------------------------------------
.text:0041123E
.text:0041123E loc_41123E:                             ; DATA XREF: .text:004037BC↑o
.text:0041123E                                         ; sub_4093CA+2↑o
.text:0041123E                 mov     edx, [esp-4+arg_4]
.text:00411242                 lea     eax, [edx+0Ch]
.text:00411245                 mov     ecx, [edx-8Ch]
.text:0041124B                 xor     ecx, eax        ; StackCookie
.text:0041124D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00411252                 mov     ecx, [edx-4]
.text:00411255                 xor     ecx, eax        ; StackCookie
.text:00411257                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0041125C                 mov     eax, offset stru_411FFC
.text:00411261                 jmp     __CxxFrameHandler3
.text:00411261 ; } // starts at 411235
.text:00411261 ; END OF FUNCTION CHUNK FOR sub_4093CA
.text:00411266 ; ---------------------------------------------------------------------------
.text:00411266 ; START OF FUNCTION CHUNK FOR sub_40A388
.text:00411266
.text:00411266 loc_411266:                             ; DATA XREF: .text:stru_41204C↓o
.text:00411266 ; __unwind { // loc_411272
.text:00411266 ;   cleanup() // owned by 40A3E1
.text:00411266                 lea     ecx, [ebp+lpString]
.text:0041126C                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411272 ; ---------------------------------------------------------------------------
.text:00411272
.text:00411272 loc_411272:                             ; DATA XREF: .text:004037C0↑o
.text:00411272                                         ; sub_40A388+5↑o
.text:00411272                 mov     edx, [esp-4+arg_4]
.text:00411276                 lea     eax, [edx+0Ch]
.text:00411279                 mov     ecx, [edx-220h]
.text:0041127F                 xor     ecx, eax        ; StackCookie
.text:00411281                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00411286                 mov     ecx, [edx-4]
.text:00411289                 xor     ecx, eax        ; StackCookie
.text:0041128B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00411290                 mov     eax, offset stru_412028
.text:00411295                 jmp     __CxxFrameHandler3
.text:00411295 ; } // starts at 411266
.text:00411295 ; END OF FUNCTION CHUNK FOR sub_40A388
.text:0041129A ; ---------------------------------------------------------------------------
.text:0041129A ; START OF FUNCTION CHUNK FOR sub_40B530
.text:0041129A
.text:0041129A loc_41129A:                             ; DATA XREF: .text:stru_412078↓o
.text:0041129A ; __unwind { // loc_4112BE
.text:0041129A ;   cleanup() // owned by 40B588
.text:0041129A ;   cleanup() // owned by 40B64F
.text:0041129A                 lea     ecx, [ebp+var_224]
.text:004112A0                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004112A6 ; ---------------------------------------------------------------------------
.text:004112A6
.text:004112A6 loc_4112A6:                             ; DATA XREF: .text:00412080↓o
.text:004112A6 ;   cleanup() // owned by 40B5D1
.text:004112A6 ;   cleanup() // owned by 40B63F
.text:004112A6                 lea     ecx, [ebp+var_220]
.text:004112AC                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004112B2 ; ---------------------------------------------------------------------------
.text:004112B2
.text:004112B2 loc_4112B2:                             ; DATA XREF: .text:00412088↓o
.text:004112B2 ;   cleanup() // owned by 40B5E3
.text:004112B2                 lea     ecx, [ebp+var_21C]
.text:004112B8                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004112BE ; ---------------------------------------------------------------------------
.text:004112BE
.text:004112BE loc_4112BE:                             ; DATA XREF: .text:004037C4↑o
.text:004112BE                                         ; sub_40B530+5↑o
.text:004112BE                 mov     edx, [esp-4+arg_4]
.text:004112C2                 lea     eax, [edx+0Ch]
.text:004112C5                 mov     ecx, [edx-228h]
.text:004112CB                 xor     ecx, eax        ; StackCookie
.text:004112CD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004112D2                 mov     ecx, [edx-4]
.text:004112D5                 xor     ecx, eax        ; StackCookie
.text:004112D7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004112DC                 mov     eax, offset stru_412054
.text:004112E1                 jmp     __CxxFrameHandler3
.text:004112E1 ; } // starts at 41129A
.text:004112E1 ; END OF FUNCTION CHUNK FOR sub_40B530
.text:004112E6 ; ---------------------------------------------------------------------------
.text:004112E6 ; START OF FUNCTION CHUNK FOR sub_40B6C0
.text:004112E6
.text:004112E6 loc_4112E6:                             ; DATA XREF: .text:stru_4120B4↓o
.text:004112E6 ; __unwind { // loc_4112EE
.text:004112E6 ;   cleanup() // owned by 40B6F6
.text:004112E6                 lea     ecx, [ebp+var_38]
.text:004112E9                 jmp     sub_40C2C6
.text:004112EE ; ---------------------------------------------------------------------------
.text:004112EE
.text:004112EE loc_4112EE:                             ; DATA XREF: .text:004037C8↑o
.text:004112EE                                         ; sub_40B6C0+2↑o
.text:004112EE                 mov     edx, [esp-4+arg_4]
.text:004112F2                 lea     eax, [edx+0Ch]
.text:004112F5                 mov     ecx, [edx-3Ch]
.text:004112F8                 xor     ecx, eax        ; StackCookie
.text:004112FA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004112FF                 mov     eax, offset stru_412090
.text:00411304                 jmp     __CxxFrameHandler3
.text:00411304 ; } // starts at 4112E6
.text:00411304 ; END OF FUNCTION CHUNK FOR sub_40B6C0
.text:00411309 ; ---------------------------------------------------------------------------
.text:00411309 ; START OF FUNCTION CHUNK FOR sub_40B860
.text:00411309
.text:00411309 loc_411309:                             ; DATA XREF: .text:stru_4120E0↓o
.text:00411309 ; __unwind { // loc_41131B
.text:00411309 ;   cleanup() // owned by 40B9E9
.text:00411309 ;   cleanup() // owned by 40BA27
.text:00411309                 lea     ecx, [ebp+lpText]
.text:0041130C                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411312 ; ---------------------------------------------------------------------------
.text:00411312
.text:00411312 loc_411312:                             ; DATA XREF: .text:004120E8↓o
.text:00411312 ;   cleanup() // owned by 40B9FE
.text:00411312                 lea     ecx, [ebp+lpCaption]
.text:00411315                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0041131B ; ---------------------------------------------------------------------------
.text:0041131B
.text:0041131B loc_41131B:                             ; DATA XREF: .text:004037CC↑o
.text:0041131B                                         ; sub_40B860+2↑o
.text:0041131B                 mov     edx, [esp-4+arg_4]
.text:0041131F                 lea     eax, [edx+0Ch]
.text:00411322                 mov     ecx, [edx-80h]
.text:00411325                 xor     ecx, eax        ; StackCookie
.text:00411327                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0041132C                 mov     ecx, [edx-4]
.text:0041132F                 xor     ecx, eax        ; StackCookie
.text:00411331                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00411336                 mov     eax, offset stru_4120BC
.text:0041133B                 jmp     __CxxFrameHandler3
.text:0041133B ; } // starts at 411309
.text:0041133B ; END OF FUNCTION CHUNK FOR sub_40B860
.text:00411340 ; ---------------------------------------------------------------------------
.text:00411340 ; START OF FUNCTION CHUNK FOR CPageBootIni::OnApply(void)
.text:00411340
.text:00411340 loc_411340:                             ; DATA XREF: .text:stru_412118↓o
.text:00411340 ; __unwind { // loc_411391
.text:00411340 ;   cleanup() // owned by 40BABC
.text:00411340 ;   cleanup() // owned by 40BBB8
.text:00411340 ;   cleanup() // owned by 40BBFD
.text:00411340 ;   cleanup() // owned by 40BDE9
.text:00411340                 lea     ecx, [ebp+lpFileName]
.text:00411343                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411349 ; ---------------------------------------------------------------------------
.text:00411349
.text:00411349 loc_411349:                             ; DATA XREF: .text:00412120↓o
.text:00411349                 lea     ecx, [ebp+lpText]
.text:0041134C                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411352 ; ---------------------------------------------------------------------------
.text:00411352
.text:00411352 loc_411352:                             ; DATA XREF: .text:00412128↓o
.text:00411352                 lea     ecx, [ebp+DestinationString.Buffer]
.text:00411355                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0041135B ; ---------------------------------------------------------------------------
.text:0041135B
.text:0041135B loc_41135B:                             ; DATA XREF: .text:00412130↓o
.text:0041135B                 lea     ecx, [ebp+var_20]
.text:0041135E                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411364 ; ---------------------------------------------------------------------------
.text:00411364
.text:00411364 loc_411364:                             ; DATA XREF: .text:00412138↓o
.text:00411364                 lea     ecx, [ebp+lpText]
.text:00411367                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0041136D ; ---------------------------------------------------------------------------
.text:0041136D
.text:0041136D loc_41136D:                             ; DATA XREF: .text:00412140↓o
.text:0041136D                 lea     ecx, [ebp+DestinationString.Buffer]
.text:00411370                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411376 ; ---------------------------------------------------------------------------
.text:00411376
.text:00411376 loc_411376:                             ; DATA XREF: .text:00412148↓o
.text:00411376 ;   cleanup() // owned by 40BB1B
.text:00411376 ;   cleanup() // owned by 40BB28
.text:00411376 ;   cleanup() // owned by 40BB97
.text:00411376 ;   cleanup() // owned by 40BBAB
.text:00411376 ;   cleanup() // owned by 40BBD2
.text:00411376 ;   cleanup() // owned by 40BBE3
.text:00411376 ;   cleanup() // owned by 40BBF0
.text:00411376 ;   cleanup() // owned by 40BD1C
.text:00411376 ;   cleanup() // owned by 40BDDC
.text:00411376 ;   cleanup() // owned by 40BE1B
.text:00411376 ;   cleanup() // owned by 40BE28
.text:00411376 ;   cleanup() // owned by 40BE35
.text:00411376                 lea     ecx, [ebp+var_20]
.text:00411379                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0041137F ; ---------------------------------------------------------------------------
.text:0041137F
.text:0041137F loc_41137F:                             ; DATA XREF: .text:00412150↓o
.text:0041137F ;   cleanup() // owned by 40BD29
.text:0041137F ;   cleanup() // owned by 40BDCF
.text:0041137F                 lea     ecx, [ebp+DestinationString.Buffer]
.text:00411382                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411388 ; ---------------------------------------------------------------------------
.text:00411388
.text:00411388 loc_411388:                             ; DATA XREF: .text:00412158↓o
.text:00411388 ;   cleanup() // owned by 40BB3A
.text:00411388 ;   cleanup() // owned by 40BD38
.text:00411388                 lea     ecx, [ebp+lpText]
.text:0041138B                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411391 ; ---------------------------------------------------------------------------
.text:00411391
.text:00411391 loc_411391:                             ; DATA XREF: .text:004037D0↑o
.text:00411391                                         ; CPageBootIni::OnApply(void)+2↑o
.text:00411391                 mov     edx, [esp-4+arg_4]
.text:00411395                 lea     eax, [edx+0Ch]
.text:00411398                 mov     ecx, [edx-34h]
.text:0041139B                 xor     ecx, eax        ; StackCookie
.text:0041139D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004113A2                 mov     ecx, [edx-4]
.text:004113A5                 xor     ecx, eax        ; StackCookie
.text:004113A7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004113AC                 mov     eax, offset stru_4120F0
.text:004113B1                 jmp     __CxxFrameHandler3
.text:004113B1 ; } // starts at 411340
.text:004113B1 ; END OF FUNCTION CHUNK FOR CPageBootIni::OnApply(void)
.text:004113B6 ; ---------------------------------------------------------------------------
.text:004113B6 ; START OF FUNCTION CHUNK FOR sub_40BEDE
.text:004113B6
.text:004113B6 loc_4113B6:                             ; DATA XREF: .text:stru_412184↓o
.text:004113B6 ; __unwind { // loc_4113C8
.text:004113B6                 lea     ecx, [ebp+var_14]
.text:004113B9                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004113BF ; ---------------------------------------------------------------------------
.text:004113BF
.text:004113BF loc_4113BF:                             ; DATA XREF: .text:0041218C↓o
.text:004113BF                                         ; .text:00412194↓o
.text:004113BF ;   cleanup() // owned by 40BF1F
.text:004113BF ;   cleanup() // owned by 40BF2E
.text:004113BF                 lea     ecx, [ebp+lpFileName]
.text:004113C2                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004113C8 ; ---------------------------------------------------------------------------
.text:004113C8
.text:004113C8 loc_4113C8:                             ; DATA XREF: .text:004037D4↑o
.text:004113C8                                         ; sub_40BEDE+2↑o
.text:004113C8                 mov     edx, [esp-4+arg_4]
.text:004113CC                 lea     eax, [edx+0Ch]
.text:004113CF                 mov     ecx, [edx-1Ch]
.text:004113D2                 xor     ecx, eax        ; StackCookie
.text:004113D4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004113D9                 mov     ecx, [edx-4]
.text:004113DC                 xor     ecx, eax        ; StackCookie
.text:004113DE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004113E3                 mov     eax, offset stru_412160
.text:004113E8                 jmp     __CxxFrameHandler3
.text:004113E8 ; } // starts at 4113B6
.text:004113E8 ; END OF FUNCTION CHUNK FOR sub_40BEDE
.text:004113ED ; ---------------------------------------------------------------------------
.text:004113ED ; START OF FUNCTION CHUNK FOR sub_40BF70
.text:004113ED
.text:004113ED loc_4113ED:                             ; DATA XREF: .text:stru_4121C0↓o
.text:004113ED ; __unwind { // loc_4113FF
.text:004113ED                 lea     ecx, [ebp+var_14]
.text:004113F0                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004113F6 ; ---------------------------------------------------------------------------
.text:004113F6
.text:004113F6 loc_4113F6:                             ; DATA XREF: .text:004121C8↓o
.text:004113F6                                         ; .text:004121D0↓o
.text:004113F6 ;   cleanup() // owned by 40BF9B
.text:004113F6 ;   cleanup() // owned by 40BFAA
.text:004113F6                 lea     ecx, [ebp+var_10]
.text:004113F9                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004113FF ; ---------------------------------------------------------------------------
.text:004113FF
.text:004113FF loc_4113FF:                             ; DATA XREF: .text:004037D8↑o
.text:004113FF                                         ; sub_40BF70+2↑o
.text:004113FF                 mov     edx, [esp-4+arg_4]
.text:00411403                 lea     eax, [edx+0Ch]
.text:00411406                 mov     ecx, [edx-18h]
.text:00411409                 xor     ecx, eax        ; StackCookie
.text:0041140B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00411410                 mov     eax, offset stru_41219C
.text:00411415                 jmp     __CxxFrameHandler3
.text:00411415 ; } // starts at 4113ED
.text:00411415 ; END OF FUNCTION CHUNK FOR sub_40BF70
.text:0041141A ; ---------------------------------------------------------------------------
.text:0041141A ; START OF FUNCTION CHUNK FOR CPageBootIni::ReDrawOSListBox(void)
.text:0041141A
.text:0041141A loc_41141A:                             ; DATA XREF: .text:stru_4121FC↓o
.text:0041141A ; __unwind { // loc_411435
.text:0041141A ;   cleanup() // owned by 40C051
.text:0041141A ;   cleanup() // owned by 40C286
.text:0041141A                 lea     ecx, [ebp+lParam]
.text:0041141D                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411423 ; ---------------------------------------------------------------------------
.text:00411423
.text:00411423 loc_411423:                             ; DATA XREF: .text:00412204↓o
.text:00411423 ;   cleanup() // owned by 40C060
.text:00411423 ;   cleanup() // owned by 40C279
.text:00411423                 lea     ecx, [ebp+var_20]
.text:00411426                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0041142C ; ---------------------------------------------------------------------------
.text:0041142C
.text:0041142C loc_41142C:                             ; DATA XREF: .text:0041220C↓o
.text:0041142C ;   cleanup() // owned by 40C06F
.text:0041142C                 lea     ecx, [ebp+var_1C]
.text:0041142F                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411435 ; ---------------------------------------------------------------------------
.text:00411435
.text:00411435 loc_411435:                             ; DATA XREF: .text:004037DC↑o
.text:00411435                                         ; CPageBootIni::ReDrawOSListBox(void)+2↑o
.text:00411435                 mov     edx, [esp-4+arg_4]
.text:00411439                 lea     eax, [edx+0Ch]
.text:0041143C                 mov     ecx, [edx-3Ch]
.text:0041143F                 xor     ecx, eax        ; StackCookie
.text:00411441                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00411446                 mov     eax, offset stru_4121D8
.text:0041144B                 jmp     __CxxFrameHandler3
.text:0041144B ; } // starts at 41141A
.text:0041144B ; END OF FUNCTION CHUNK FOR CPageBootIni::ReDrawOSListBox(void)
.text:00411450 ; ---------------------------------------------------------------------------
.text:00411450 ; START OF FUNCTION CHUNK FOR sub_40C7B0
.text:00411450
.text:00411450 loc_411450:                             ; DATA XREF: .text:stru_412240↓o
.text:00411450 ; __unwind { // loc_4114E2
.text:00411450 ;   cleanup() // owned by 40C7F1
.text:00411450 ;   cleanup() // owned by 40CD6A
.text:00411450                 lea     ecx, [ebp+var_68]
.text:00411453                 jmp     ds:??1CCommandLineInfo@@UAE@XZ ; CCommandLineInfo::~CCommandLineInfo(void)
.text:00411459 ; ---------------------------------------------------------------------------
.text:00411459
.text:00411459 loc_411459:                             ; DATA XREF: .text:00412248↓o
.text:00411459 ;   cleanup() // owned by 40C87A
.text:00411459 ;   cleanup() // owned by 40CD5D
.text:00411459                 lea     ecx, [ebp+var_20]
.text:0041145C                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411462 ; ---------------------------------------------------------------------------
.text:00411462
.text:00411462 loc_411462:                             ; DATA XREF: .text:00412250↓o
.text:00411462 ;   cleanup() // owned by 40C887
.text:00411462 ;   cleanup() // owned by 40CD50
.text:00411462                 lea     ecx, [ebp+String]
.text:00411465                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0041146B ; ---------------------------------------------------------------------------
.text:0041146B
.text:0041146B loc_41146B:                             ; DATA XREF: .text:00412258↓o
.text:0041146B ;   cleanup() // owned by 40C894
.text:0041146B ;   cleanup() // owned by 40C8E5
.text:0041146B ;   cleanup() // owned by 40C912
.text:0041146B ;   cleanup() // owned by 40C944
.text:0041146B ;   cleanup() // owned by 40C9F5
.text:0041146B ;   cleanup() // owned by 40CA2A
.text:0041146B ;   cleanup() // owned by 40CA65
.text:0041146B ;   cleanup() // owned by 40CB1E
.text:0041146B ;   cleanup() // owned by 40CB33
.text:0041146B ;   cleanup() // owned by 40CCC3
.text:0041146B ;   cleanup() // owned by 40CD43
.text:0041146B                 lea     ecx, [ebp+var_28]
.text:0041146E                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411474 ; ---------------------------------------------------------------------------
.text:00411474
.text:00411474 loc_411474:                             ; DATA XREF: .text:00412260↓o
.text:00411474                 lea     ecx, [ebp+var_24]
.text:00411477                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0041147D ; ---------------------------------------------------------------------------
.text:0041147D
.text:0041147D loc_41147D:                             ; DATA XREF: .text:00412268↓o
.text:0041147D                 lea     ecx, [ebp+var_2C]
.text:00411480                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411486 ; ---------------------------------------------------------------------------
.text:00411486
.text:00411486 loc_411486:                             ; DATA XREF: .text:00412270↓o
.text:00411486                 lea     ecx, [ebp+var_30]
.text:00411489                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0041148F ; ---------------------------------------------------------------------------
.text:0041148F
.text:0041148F loc_41148F:                             ; DATA XREF: .text:00412278↓o
.text:0041148F                 lea     ecx, [ebp+var_38]
.text:00411492                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411498 ; ---------------------------------------------------------------------------
.text:00411498
.text:00411498 loc_411498:                             ; DATA XREF: .text:00412280↓o
.text:00411498                 lea     ecx, [ebp+var_3C]
.text:0041149B                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004114A1 ; ---------------------------------------------------------------------------
.text:004114A1
.text:004114A1 loc_4114A1:                             ; DATA XREF: .text:00412288↓o
.text:004114A1                 lea     ecx, [ebp+var_40]
.text:004114A4                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004114AA ; ---------------------------------------------------------------------------
.text:004114AA
.text:004114AA loc_4114AA:                             ; DATA XREF: .text:00412290↓o
.text:004114AA                 lea     ecx, [ebp+var_CC]
.text:004114B0                 jmp     sub_403B53
.text:004114B5 ; ---------------------------------------------------------------------------
.text:004114B5
.text:004114B5 loc_4114B5:                             ; DATA XREF: .text:004122A8↓o
.text:004114B5 ;   cleanup() // owned by 40C8D8
.text:004114B5 ;   cleanup() // owned by 40C905
.text:004114B5 ;   cleanup() // owned by 40C937
.text:004114B5 ;   cleanup() // owned by 40C9D0
.text:004114B5 ;   cleanup() // owned by 40CA1D
.text:004114B5 ;   cleanup() // owned by 40CA58
.text:004114B5 ;   cleanup() // owned by 40CB02
.text:004114B5 ;   cleanup() // owned by 40CBC2
.text:004114B5 ;   cleanup() // owned by 40CCB6
.text:004114B5 ;   cleanup() // owned by 40CCF5
.text:004114B5 ;   cleanup() // owned by 40CD04
.text:004114B5 ;   cleanup() // owned by 40CD36
.text:004114B5                 lea     ecx, [ebp+var_24]
.text:004114B8                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004114BE ; ---------------------------------------------------------------------------
.text:004114BE
.text:004114BE loc_4114BE:                             ; DATA XREF: .text:004122B0↓o
.text:004114BE ;   cleanup() // owned by 40CC47
.text:004114BE ;   cleanup() // owned by 40CCA9
.text:004114BE                 lea     ecx, [ebp+lpText]
.text:004114C1                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004114C7 ; ---------------------------------------------------------------------------
.text:004114C7
.text:004114C7 loc_4114C7:                             ; DATA XREF: .text:004122B8↓o
.text:004114C7 ;   cleanup() // owned by 40CC56
.text:004114C7                 lea     ecx, [ebp+lpCaption]
.text:004114CA                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004114D0 ; ---------------------------------------------------------------------------
.text:004114D0
.text:004114D0 loc_4114D0:                             ; DATA XREF: .text:00412298↓o
.text:004114D0                 lea     ecx, [ebp+lpCaption]
.text:004114D3                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004114D9 ; ---------------------------------------------------------------------------
.text:004114D9
.text:004114D9 loc_4114D9:                             ; DATA XREF: .text:004122A0↓o
.text:004114D9                 lea     ecx, [ebp+lpText]
.text:004114DC                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004114E2 ; ---------------------------------------------------------------------------
.text:004114E2
.text:004114E2 loc_4114E2:                             ; DATA XREF: .text:004037E0↑o
.text:004114E2                                         ; sub_40C7B0+5↑o
.text:004114E2                 mov     edx, [esp-4+arg_4]
.text:004114E6                 lea     eax, [edx+0Ch]
.text:004114E9                 mov     ecx, [edx-0D0h]
.text:004114EF                 xor     ecx, eax        ; StackCookie
.text:004114F1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004114F6                 mov     ecx, [edx-4]
.text:004114F9                 xor     ecx, eax        ; StackCookie
.text:004114FB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00411500                 mov     eax, offset stru_412218
.text:00411505                 jmp     __CxxFrameHandler3
.text:00411505 ; } // starts at 411450
.text:00411505 ; END OF FUNCTION CHUNK FOR sub_40C7B0
.text:0041150A ; ---------------------------------------------------------------------------
.text:0041150A ; START OF FUNCTION CHUNK FOR sub_40CD8D
.text:0041150A
.text:0041150A loc_41150A:                             ; DATA XREF: .text:stru_4122E4↓o
.text:0041150A ; __unwind { // loc_411532
.text:0041150A                 mov     ecx, [ebp+var_10]
.text:0041150D                 jmp     loc_403C81
.text:00411512 ; ---------------------------------------------------------------------------
.text:00411512
.text:00411512 loc_411512:                             ; DATA XREF: .text:004122EC↓o
.text:00411512                 mov     ecx, [ebp+var_10]
.text:00411515                 jmp     loc_403C81
.text:0041151A ; ---------------------------------------------------------------------------
.text:0041151A
.text:0041151A loc_41151A:                             ; DATA XREF: .text:004122F4↓o
.text:0041151A                 mov     ecx, [ebp+var_10]
.text:0041151D                 jmp     loc_403C81
.text:00411522 ; ---------------------------------------------------------------------------
.text:00411522
.text:00411522 loc_411522:                             ; DATA XREF: .text:004122FC↓o
.text:00411522                 mov     ecx, [ebp+var_10]
.text:00411525                 jmp     loc_403C81
.text:0041152A ; ---------------------------------------------------------------------------
.text:0041152A
.text:0041152A loc_41152A:                             ; DATA XREF: .text:00412304↓o
.text:0041152A ;   cleanup() // owned by 40CDAA
.text:0041152A ;   cleanup() // owned by 40CDD4
.text:0041152A ;   cleanup() // owned by 40CE03
.text:0041152A ;   cleanup() // owned by 40CE2D
.text:0041152A ;   cleanup() // owned by 40CE5B
.text:0041152A                 mov     ecx, [ebp+var_10]
.text:0041152D                 jmp     loc_403C81
.text:00411532 ; ---------------------------------------------------------------------------
.text:00411532
.text:00411532 loc_411532:                             ; DATA XREF: .text:004037E4↑o
.text:00411532                                         ; sub_40CD8D+2↑o
.text:00411532                 mov     edx, [esp-4+arg_4]
.text:00411536                 lea     eax, [edx+0Ch]
.text:00411539                 mov     ecx, [edx-14h]
.text:0041153C                 xor     ecx, eax        ; StackCookie
.text:0041153E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00411543                 mov     eax, offset stru_4122C0
.text:00411548                 jmp     __CxxFrameHandler3
.text:00411548 ; } // starts at 41150A
.text:00411548 ; END OF FUNCTION CHUNK FOR sub_40CD8D
.text:0041154D ; ---------------------------------------------------------------------------
.text:0041154D ; START OF FUNCTION CHUNK FOR sub_40CE7B
.text:0041154D
.text:0041154D loc_41154D:                             ; DATA XREF: .text:stru_412330↓o
.text:0041154D ; __unwind { // loc_411558
.text:0041154D ;   cleanup() // owned by 40CEC9
.text:0041154D                 lea     ecx, [ebp+var_B8]
.text:00411553                 jmp     sub_40C642
.text:00411558 ; ---------------------------------------------------------------------------
.text:00411558
.text:00411558 loc_411558:                             ; DATA XREF: .text:004037E8↑o
.text:00411558                                         ; sub_40CE7B+5↑o
.text:00411558                 mov     edx, [esp-4+arg_4]
.text:0041155C                 lea     eax, [edx+0Ch]
.text:0041155F                 mov     ecx, [edx-0BCh]
.text:00411565                 xor     ecx, eax        ; StackCookie
.text:00411567                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0041156C                 mov     ecx, [edx-4]
.text:0041156F                 xor     ecx, eax        ; StackCookie
.text:00411571                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00411576                 mov     eax, offset stru_41230C
.text:0041157B                 jmp     __CxxFrameHandler3
.text:0041157B ; } // starts at 41154D
.text:0041157B ; END OF FUNCTION CHUNK FOR sub_40CE7B
.text:00411580 ; ---------------------------------------------------------------------------
.text:00411580 ; START OF FUNCTION CHUNK FOR sub_40D13E
.text:00411580
.text:00411580 loc_411580:                             ; DATA XREF: .text:stru_41235C↓o
.text:00411580 ; __unwind { // SEH_40D13E
.text:00411580 ;   cleanup() // owned by 40D30A
.text:00411580                 lea     ecx, [ebp+var_1024]
.text:00411586                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0041158C ; ---------------------------------------------------------------------------
.text:0041158C
.text:0041158C SEH_40D13E:                             ; DATA XREF: .text:004037EC↑o
.text:0041158C                                         ; sub_40D13E+7↑o
.text:0041158C                 mov     edx, [esp-4+arg_4]
.text:00411590                 lea     eax, [edx+0Ch]
.text:00411593                 mov     ecx, [edx-1048h]
.text:00411599                 xor     ecx, eax        ; StackCookie
.text:0041159B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004115A0                 mov     ecx, [edx-4]
.text:004115A3                 xor     ecx, eax        ; StackCookie
.text:004115A5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004115AA                 mov     eax, offset stru_412338
.text:004115AF                 jmp     __CxxFrameHandler3
.text:004115AF ; } // starts at 411580
.text:004115AF ; END OF FUNCTION CHUNK FOR sub_40D13E
.text:004115B4 ; ---------------------------------------------------------------------------
.text:004115B4 ; START OF FUNCTION CHUNK FOR sub_40D6CA
.text:004115B4
.text:004115B4 loc_4115B4:                             ; DATA XREF: .text:stru_412388↓o
.text:004115B4 ; __unwind { // loc_4115D8
.text:004115B4 ;   cleanup() // owned by 40D6E3
.text:004115B4 ;   cleanup() // owned by 40D7CF
.text:004115B4                 lea     ecx, [ebp+lpSubKey]
.text:004115B7                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004115BD ; ---------------------------------------------------------------------------
.text:004115BD
.text:004115BD loc_4115BD:                             ; DATA XREF: .text:00412390↓o
.text:004115BD ;   cleanup() // owned by 40D78A
.text:004115BD ;   cleanup() // owned by 40D7C2
.text:004115BD                 lea     ecx, [ebp+var_20]
.text:004115C0                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004115C6 ; ---------------------------------------------------------------------------
.text:004115C6
.text:004115C6 loc_4115C6:                             ; DATA XREF: .text:00412398↓o
.text:004115C6 ;   cleanup() // owned by 40D799
.text:004115C6 ;   cleanup() // owned by 40D7B5
.text:004115C6                 lea     ecx, [ebp+var_1C]
.text:004115C9                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004115CF ; ---------------------------------------------------------------------------
.text:004115CF
.text:004115CF loc_4115CF:                             ; DATA XREF: .text:004123A0↓o
.text:004115CF ;   cleanup() // owned by 40D7A8
.text:004115CF                 lea     ecx, [ebp+hKey]
.text:004115D2                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004115D8 ; ---------------------------------------------------------------------------
.text:004115D8
.text:004115D8 loc_4115D8:                             ; DATA XREF: .text:004037F0↑o
.text:004115D8                                         ; sub_40D6CA+2↑o
.text:004115D8                 mov     edx, [esp-4+arg_4]
.text:004115DC                 lea     eax, [edx+0Ch]
.text:004115DF                 mov     ecx, [edx-24h]
.text:004115E2                 xor     ecx, eax        ; StackCookie
.text:004115E4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004115E9                 mov     eax, offset stru_412364
.text:004115EE                 jmp     __CxxFrameHandler3
.text:004115EE ; } // starts at 4115B4
.text:004115EE ; END OF FUNCTION CHUNK FOR sub_40D6CA
.text:004115F3 ; ---------------------------------------------------------------------------
.text:004115F3 ; START OF FUNCTION CHUNK FOR sub_40D856
.text:004115F3
.text:004115F3 loc_4115F3:                             ; DATA XREF: .text:004123D8↓o
.text:004115F3 ; __unwind { // loc_411676
.text:004115F3 ;   cleanup() // owned by 40D88F
.text:004115F3 ;   cleanup() // owned by 40DA7F
.text:004115F3                 lea     ecx, [ebp+var_220]
.text:004115F9                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004115FF ; ---------------------------------------------------------------------------
.text:004115FF
.text:004115FF loc_4115FF:                             ; DATA XREF: .text:004123E0↓o
.text:004115FF ;   cleanup() // owned by 40D8A2
.text:004115FF ;   cleanup() // owned by 40DA6F
.text:004115FF                 lea     ecx, [ebp+var_21C]
.text:00411605                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0041160B ; ---------------------------------------------------------------------------
.text:0041160B
.text:0041160B loc_41160B:                             ; DATA XREF: .text:004123E8↓o
.text:0041160B ;   cleanup() // owned by 40D8AC
.text:0041160B ;   cleanup() // owned by 40D967
.text:0041160B ;   cleanup() // owned by 40D9C1
.text:0041160B ;   cleanup() // owned by 40DA46
.text:0041160B                 lea     ecx, [ebp+var_224]
.text:00411611                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411617 ; ---------------------------------------------------------------------------
.text:00411617
.text:00411617 loc_411617:                             ; DATA XREF: .text:004123F0↓o
.text:00411617                 lea     ecx, [ebp+var_228]
.text:0041161D                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411623 ; ---------------------------------------------------------------------------
.text:00411623
.text:00411623 loc_411623:                             ; DATA XREF: .text:00412410↓o
.text:00411623 ;   cleanup() // owned by 40D957
.text:00411623 ;   cleanup() // owned by 40D9A4
.text:00411623 ;   cleanup() // owned by 40D9E9
.text:00411623 ;   cleanup() // owned by 40DA04
.text:00411623 ;   cleanup() // owned by 40DA16
.text:00411623 ;   cleanup() // owned by 40DA26
.text:00411623 ;   cleanup() // owned by 40DA36
.text:00411623                 lea     ecx, [ebp+var_22C]
.text:00411629                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0041162F ; ---------------------------------------------------------------------------
.text:0041162F
.text:0041162F loc_41162F:                             ; DATA XREF: .text:004123F8↓o
.text:0041162F                 lea     ecx, [ebp+var_234]
.text:00411635                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:0041163B ; ---------------------------------------------------------------------------
.text:0041163B
.text:0041163B loc_41163B:                             ; DATA XREF: .text:00412400↓o
.text:0041163B                 lea     ecx, [ebp+var_238]
.text:00411641                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411647 ; ---------------------------------------------------------------------------
.text:00411647
.text:00411647 loc_411647:                             ; DATA XREF: .text:00412408↓o
.text:00411647                 lea     ecx, [ebp+var_228]
.text:0041164D                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411653 ; ---------------------------------------------------------------------------
.text:00411653
.text:00411653 loc_411653:                             ; DATA XREF: .text:stru_4123D0↓o
.text:00411653 ;   cleanup() // owned by 40DA8F
.text:00411653                 mov     eax, [ebp+var_230]
.text:00411659                 and     eax, 1
.text:0041165C                 jz      locret_411675
.text:00411662                 and     [ebp+var_230], 0FFFFFFFEh
.text:00411669                 mov     ecx, [ebp+var_23C]
.text:0041166F                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411675 ; ---------------------------------------------------------------------------
.text:00411675
.text:00411675 locret_411675:                          ; CODE XREF: sub_40D856+3E06↑j
.text:00411675                 retn
.text:00411676 ; ---------------------------------------------------------------------------
.text:00411676
.text:00411676 loc_411676:                             ; DATA XREF: .text:004037F4↑o
.text:00411676                                         ; sub_40D856+5↑o
.text:00411676                 mov     edx, [esp-4+arg_4]
.text:0041167A                 lea     eax, [edx+0Ch]
.text:0041167D                 mov     ecx, [edx-240h]
.text:00411683                 xor     ecx, eax        ; StackCookie
.text:00411685                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0041168A                 mov     ecx, [edx-4]
.text:0041168D                 xor     ecx, eax        ; StackCookie
.text:0041168F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00411694                 mov     eax, offset stru_4123A8
.text:00411699                 jmp     __CxxFrameHandler3
.text:00411699 ; } // starts at 4115F3
.text:00411699 ; END OF FUNCTION CHUNK FOR sub_40D856
.text:0041169E ; ---------------------------------------------------------------------------
.text:0041169E ; START OF FUNCTION CHUNK FOR sub_40E04D
.text:0041169E
.text:0041169E loc_41169E:                             ; DATA XREF: .text:stru_41243C↓o
.text:0041169E ; __unwind { // loc_4116AA
.text:0041169E ;   cleanup() // owned by 40E08B
.text:0041169E                 lea     ecx, [ebp+var_114]
.text:004116A4                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:004116AA ; ---------------------------------------------------------------------------
.text:004116AA
.text:004116AA loc_4116AA:                             ; DATA XREF: .text:004037F8↑o
.text:004116AA                                         ; sub_40E04D+5↑o
.text:004116AA                 mov     edx, [esp-4+arg_4]
.text:004116AE                 lea     eax, [edx+0Ch]
.text:004116B1                 mov     ecx, [edx-128h]
.text:004116B7                 xor     ecx, eax        ; StackCookie
.text:004116B9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004116BE                 mov     ecx, [edx-4]
.text:004116C1                 xor     ecx, eax        ; StackCookie
.text:004116C3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004116C8                 mov     eax, offset stru_412418
.text:004116CD                 jmp     __CxxFrameHandler3
.text:004116CD ; } // starts at 41169E
.text:004116CD ; END OF FUNCTION CHUNK FOR sub_40E04D
.text:004116D2 ; ---------------------------------------------------------------------------
.text:004116D2 ; START OF FUNCTION CHUNK FOR sub_40FE2A
.text:004116D2 ;   ADDITIONAL PARENT FUNCTION std::_String_base::_Xran(void)
.text:004116D2
.text:004116D2 loc_4116D2:                             ; DATA XREF: .text:stru_412444↓o
.text:004116D2 ; __unwind { // loc_4116DA
.text:004116D2 ;   cleanup() // owned by 40FE43
.text:004116D2 ;   cleanup() // owned by 40FE7B
.text:004116D2                 lea     ecx, [ebp+var_2C]
.text:004116D5                 jmp     loc_406A2D
.text:004116DA ; ---------------------------------------------------------------------------
.text:004116DA
.text:004116DA loc_4116DA:                             ; DATA XREF: .text:004037FC↑o
.text:004116DA                                         ; sub_40FE2A+2↑o ...
.text:004116DA                 mov     edx, [esp-4+arg_4]
.text:004116DE                 lea     eax, [edx+0Ch]
.text:004116E1                 mov     ecx, [edx-58h]
.text:004116E4                 xor     ecx, eax        ; StackCookie
.text:004116E6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004116EB                 mov     ecx, [edx-4]
.text:004116EE                 xor     ecx, eax        ; StackCookie
.text:004116F0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004116F5                 mov     eax, offset stru_41244C
.text:004116FA                 jmp     __CxxFrameHandler3
.text:004116FA ; } // starts at 4116D2
.text:004116FA ; END OF FUNCTION CHUNK FOR sub_40FE2A
.text:004116FF ; ---------------------------------------------------------------------------
.text:004116FF ; START OF FUNCTION CHUNK FOR operator new(uint,std::nothrow_t const &)
.text:004116FF
.text:004116FF loc_4116FF:                             ; DATA XREF: .text:00403800↑o
.text:004116FF                                         ; operator new(uint,std::nothrow_t const &)+2↑o
.text:004116FF ; __unwind { // loc_4116FF
.text:004116FF                 mov     edx, [esp-4+arg_4]
.text:00411703                 lea     eax, [edx+0Ch]
.text:00411706                 mov     ecx, [edx-18h]
.text:00411709                 xor     ecx, eax        ; StackCookie
.text:0041170B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00411710                 mov     eax, offset stru_412528
.text:00411715                 jmp     __CxxFrameHandler3
.text:00411715 ; } // starts at 4116FF
.text:00411715 ; END OF FUNCTION CHUNK FOR operator new(uint,std::nothrow_t const &)
.text:00411715 ; ---------------------------------------------------------------------------
.text:0041171A                 align 10h
.text:00411720
.text:00411720 ; =============== S U B R O U T I N E =======================================
.text:00411720
.text:00411720
.text:00411720 ; int __cdecl Func()
.text:00411720 Func            proc near               ; DATA XREF: .text:00402C5C↑o
.text:00411720                                         ; sub_403AC0+D↑o
.text:00411720                 mov     ecx, offset dword_413980
.text:00411725                 jmp     ds:??1CWinApp@@UAE@XZ ; CWinApp::~CWinApp(void)
.text:00411725 Func            endp
.text:00411725
.text:00411725 ; ---------------------------------------------------------------------------
.text:0041172B                 align 10h
.text:00411730
.text:00411730 ; =============== S U B R O U T I N E =======================================
.text:00411730
.text:00411730
.text:00411730 ; int __cdecl sub_411730()
.text:00411730 sub_411730      proc near               ; DATA XREF: .text:00402C60↑o
.text:00411730                                         ; sub_403AF0+B↑o
.text:00411730                 mov     ecx, offset lpPathName
.text:00411735                 jmp     ds:??1CString@@QAE@XZ ; CString::~CString(void)
.text:00411735 sub_411730      endp
.text:00411735
.text:00411735 ; ---------------------------------------------------------------------------
.text:0041173B                 align 10h
.text:00411740
.text:00411740 ; =============== S U B R O U T I N E =======================================
.text:00411740
.text:00411740
.text:00411740 ; int __cdecl sub_411740()
.text:00411740 sub_411740      proc near               ; DATA XREF: .text:00402C64↑o
.text:00411740                                         ; operator new(uint)+48↑o
.text:00411740                 mov     dword_413454, offset ??_7bad_alloc@std@@6B@ ; const std::bad_alloc::`vftable'
.text:0041174A                 mov     ecx, offset dword_413454 ; this
.text:0041174F                 jmp     ??1exception@@UAE@XZ ; exception::~exception(void)
.text:0041174F sub_411740      endp
.text:0041174F
.text:0041174F ; ---------------------------------------------------------------------------
.text:00411754                 align 8
.text:00411758 stru_411758     FuncInfo <19930522h, 1, offset stru_41177C, 0, 0, 0, 0, 0, 1>
.text:00411758                                         ; DATA XREF: sub_403C90+CDB3↑o
.text:0041177C stru_41177C     UnwindMapEntry <-1, offset loc_410A20>
.text:0041177C                                         ; DATA XREF: .text:stru_411758↑o
.text:00411784 stru_411784     FuncInfo <19930522h, 1, offset stru_4117A8, 0, 0, 0, 0, 0, 1>
.text:00411784                                         ; DATA XREF: sub_403DC0+CCA6↑o
.text:004117A8 stru_4117A8     UnwindMapEntry <-1, offset loc_410A4D>
.text:004117A8                                         ; DATA XREF: .text:stru_411784↑o
.text:004117B0 stru_4117B0     FuncInfo <19930522h, 4, offset stru_4117D4, 0, 0, 0, 0, 0, 1>
.text:004117B0                                         ; DATA XREF: sub_403F0B+CBAA↑o
.text:004117D4 stru_4117D4     UnwindMapEntry <-1, offset loc_410A70>
.text:004117D4                                         ; DATA XREF: .text:stru_4117B0↑o
.text:004117DC                 UnwindMapEntry <0, offset loc_410A79>
.text:004117E4                 UnwindMapEntry <1, offset loc_410A87>
.text:004117EC                 UnwindMapEntry <2, offset loc_410A96>
.text:004117F4 stru_4117F4     FuncInfo <19930522h, 5, offset stru_411818, 0, 0, 0, 0, 0, 1>
.text:004117F4                                         ; DATA XREF: sub_404002+CB10↑o
.text:00411818 stru_411818     UnwindMapEntry <-1, offset loc_410ABF>
.text:00411818                                         ; DATA XREF: .text:stru_4117F4↑o
.text:00411820                 UnwindMapEntry <0, offset loc_410AC8>
.text:00411828                 UnwindMapEntry <1, offset loc_410AD6>
.text:00411830                 UnwindMapEntry <2, offset loc_410AE5>
.text:00411838                 UnwindMapEntry <3, offset loc_410AF3>
.text:00411840 stru_411840     FuncInfo <19930522h, 2, offset stru_411864, 0, 0, 0, 0, 0, 1>
.text:00411840                                         ; DATA XREF: sub_4040E0+CA6B↑o
.text:00411864 stru_411864     UnwindMapEntry <-1, offset loc_410B1C>
.text:00411864                                         ; DATA XREF: .text:stru_411840↑o
.text:0041186C                 UnwindMapEntry <0, offset loc_410B24>
.text:00411874                 align 8
.text:00411878 stru_411878     FuncInfo <19930522h, 12, offset stru_4118A0, 0, 0, 0, 0, 0, 1>
.text:00411878                                         ; DATA XREF: sub_404316+C8CE↑o
.text:0041189C                 align 10h
.text:004118A0 stru_4118A0     UnwindMapEntry <-1, offset loc_410B55>
.text:004118A0                                         ; DATA XREF: .text:stru_411878↑o
.text:004118A8                 UnwindMapEntry <0, offset loc_410B5E>
.text:004118B0                 UnwindMapEntry <1, offset loc_410B67>
.text:004118B8                 UnwindMapEntry <2, offset loc_410B70>
.text:004118C0                 UnwindMapEntry <3, offset loc_410B79>
.text:004118C8                 UnwindMapEntry <4, offset loc_410B82>
.text:004118D0                 UnwindMapEntry <5, offset loc_410B8B>
.text:004118D8                 UnwindMapEntry <6, offset loc_410B94>
.text:004118E0                 UnwindMapEntry <7, offset loc_410B9D>
.text:004118E8                 UnwindMapEntry <8, offset loc_410BA6>
.text:004118F0                 UnwindMapEntry <9, offset loc_410BAF>
.text:004118F8                 UnwindMapEntry <9, offset loc_410BB8>
.text:00411900 stru_411900     FuncInfo <19930522h, 5, offset stru_411924, 0, 0, 0, 0, 0, 1>
.text:00411900                                         ; DATA XREF: sub_40486C+C3CC↑o
.text:00411924 stru_411924     UnwindMapEntry <-1, offset loc_410BEE>
.text:00411924                                         ; DATA XREF: .text:stru_411900↑o
.text:0041192C                 UnwindMapEntry <0, offset loc_410BF7>
.text:00411934                 UnwindMapEntry <1, offset loc_410C03>
.text:0041193C                 UnwindMapEntry <2, offset loc_410C0F>
.text:00411944                 UnwindMapEntry <3, offset loc_410C1B>
.text:0041194C stru_41194C     FuncInfo <19930522h, 1, offset stru_411970, 0, 0, 0, 0, 0, 1>
.text:0041194C                                         ; DATA XREF: sub_4048DF+C389↑o
.text:00411970 stru_411970     UnwindMapEntry <-1, offset loc_410C42>
.text:00411970                                         ; DATA XREF: .text:stru_41194C↑o
.text:00411978 stru_411978     FuncInfo <19930522h, 1, offset stru_41199C, 0, 0, 0, 0, 0, 1>
.text:00411978                                         ; DATA XREF: sub_404CA7+BFEF↑o
.text:0041199C stru_41199C     UnwindMapEntry <-1, offset sub_410C72>
.text:0041199C                                         ; DATA XREF: .text:stru_411978↑o
.text:004119A4 stru_4119A4     FuncInfo <19930522h, 1, offset stru_4119C8, 0, 0, 0, 0, 0, 1>
.text:004119A4                                         ; DATA XREF: sub_404FB1+BD08↑o
.text:004119C8 stru_4119C8     UnwindMapEntry <-1, offset loc_410CA0>
.text:004119C8                                         ; DATA XREF: .text:stru_4119A4↑o
.text:004119D0 stru_4119D0     FuncInfo <19930522h, 3, offset stru_4119F4, 1, offset stru_411A0C, 0, \
.text:004119D0                                         ; DATA XREF: sub_4050D7+BC12↑o
.text:004119D0                           0, 0, 1>
.text:004119F4 stru_4119F4     UnwindMapEntry <-1, 0>  ; DATA XREF: .text:stru_4119D0↑o
.text:004119FC                 UnwindMapEntry <0, offset loc_410CC3>
.text:00411A04                 UnwindMapEntry <-1, 0>
.text:00411A0C stru_411A0C     TryBlockMapEntry <0, 1, 2, 1, offset stru_411A20>
.text:00411A0C                                         ; DATA XREF: .text:stru_4119D0↑o
.text:00411A20 stru_411A20     HandlerType <0, offset ??_R0PAVCMemoryException@@@8, -56, \
.text:00411A20                                         ; DATA XREF: .text:stru_411A0C↑o
.text:00411A20                              offset loc_405279> ; CMemoryException * `RTTI Type Descriptor'
.text:00411A30 stru_411A30     FuncInfo <19930522h, 1, offset stru_411A54, 0, 0, 0, 0, 0, 1>
.text:00411A30                                         ; DATA XREF: sub_4052C3+BA4A↑o
.text:00411A54 stru_411A54     UnwindMapEntry <-1, offset loc_410CF3>
.text:00411A54                                         ; DATA XREF: .text:stru_411A30↑o
.text:00411A5C stru_411A5C     FuncInfo <19930522h, 2, offset stru_411A80, 0, 0, 0, 0, 0, 1>
.text:00411A5C                                         ; DATA XREF: sub_405410+B92A↑o
.text:00411A80 stru_411A80     UnwindMapEntry <-1, offset loc_410D17>
.text:00411A80                                         ; DATA XREF: .text:stru_411A5C↑o
.text:00411A88                 UnwindMapEntry <0, offset loc_410D20>
.text:00411A90 stru_411A90     FuncInfo <19930522h, 1, offset stru_411AB4, 0, 0, 0, 0, 0, 1>
.text:00411A90                                         ; DATA XREF: sub_405870+B4F7↑o
.text:00411AB4 stru_411AB4     UnwindMapEntry <-1, offset loc_410D44>
.text:00411AB4                                         ; DATA XREF: .text:stru_411A90↑o
.text:00411ABC stru_411ABC     FuncInfo <19930522h, 5, offset stru_411AE0, 0, 0, 0, 0, 0, 1>
.text:00411ABC                                         ; DATA XREF: sub_405AC6+B2F2↑o
.text:00411AE0 stru_411AE0     UnwindMapEntry <-1, offset loc_410D71>
.text:00411AE0                                         ; DATA XREF: .text:stru_411ABC↑o
.text:00411AE8                 UnwindMapEntry <0, offset loc_410D7A>
.text:00411AF0                 UnwindMapEntry <1, offset loc_410D83>
.text:00411AF8                 UnwindMapEntry <2, offset loc_410D8C>
.text:00411B00                 UnwindMapEntry <0, offset loc_410D95>
.text:00411B08 stru_411B08     FuncInfo <19930522h, 7, offset stru_411B2C, 0, 0, 0, 0, 0, 1>
.text:00411B08                                         ; DATA XREF: OpenRegKey(ushort const *,ushort const *,ulong)+B099↑o
.text:00411B2C stru_411B2C     UnwindMapEntry <-1, offset loc_410DC2>
.text:00411B2C                                         ; DATA XREF: .text:stru_411B08↑o
.text:00411B34                 UnwindMapEntry <0, offset loc_410DCB>
.text:00411B3C                 UnwindMapEntry <1, offset loc_410DD4>
.text:00411B44                 UnwindMapEntry <2, offset loc_410DDD>
.text:00411B4C                 UnwindMapEntry <0, offset loc_410DE6>
.text:00411B54                 UnwindMapEntry <4, offset loc_410DEF>
.text:00411B5C                 UnwindMapEntry <5, offset loc_410DF8>
.text:00411B64 stru_411B64     FuncInfo <19930522h, 1, offset stru_411B88, 0, 0, 0, 0, 0, 1>
.text:00411B64                                         ; DATA XREF: sub_405FEB+AE4B↑o
.text:00411B88 stru_411B88     UnwindMapEntry <-1, offset loc_410E1C>
.text:00411B88                                         ; DATA XREF: .text:stru_411B64↑o
.text:00411B90 stru_411B90     FuncInfo <19930522h, 1, offset stru_411BB4, 0, 0, 0, 0, 0, 1>
.text:00411B90                                         ; DATA XREF: sub_406092+ADCA↑o
.text:00411BB4 stru_411BB4     UnwindMapEntry <-1, offset loc_410E40>
.text:00411BB4                                         ; DATA XREF: .text:stru_411B90↑o
.text:00411BBC stru_411BBC     FuncInfo <19930522h, 1, offset stru_411BE0, 0, 0, 0, 0, 0, 1>
.text:00411BBC                                         ; DATA XREF: sub_406166+AD23↑o
.text:00411BE0 stru_411BE0     UnwindMapEntry <-1, offset loc_410E66>
.text:00411BE0                                         ; DATA XREF: .text:stru_411BBC↑o
.text:00411BE8 stru_411BE8     FuncInfo <19930522h, 1, offset stru_411C0C, 0, 0, 0, 0, 0, 1>
.text:00411BE8                                         ; DATA XREF: std::logic_error::logic_error(std::string const &)+A9A2↑o
.text:00411C0C stru_411C0C     UnwindMapEntry <-1, offset loc_410E93>
.text:00411C0C                                         ; DATA XREF: .text:stru_411BE8↑o
.text:00411C14 stru_411C14     FuncInfo <19930522h, 4, offset stru_411C38, 2, offset stru_411C58, 0, \
.text:00411C14                                         ; DATA XREF: std::string::_Copy(uint,uint)+A712↑o
.text:00411C14                           0, 0, 1>
.text:00411C38 stru_411C38     UnwindMapEntry <-1, 0>  ; DATA XREF: .text:stru_411C14↑o
.text:00411C40                 UnwindMapEntry <-1, 0>
.text:00411C48                 UnwindMapEntry <1, 0>
.text:00411C50                 UnwindMapEntry <1, 0>
.text:00411C58 stru_411C58     TryBlockMapEntry <2, 2, 3, 1, offset stru_411C80>
.text:00411C58                                         ; DATA XREF: .text:stru_411C14↑o
.text:00411C6C                 TryBlockMapEntry <0, 0, 3, 1, offset stru_411C90>
.text:00411C80 stru_411C80     HandlerType <40h, 0, 0, offset loc_406887>
.text:00411C80                                         ; DATA XREF: .text:stru_411C58↑o
.text:00411C90 stru_411C90     HandlerType <40h, 0, 0, offset loc_406812>
.text:00411C90                                         ; DATA XREF: .text:00411C6C↑o
.text:00411CA0 stru_411CA0     FuncInfo <19930522h, 1, offset stru_411CC4, 0, 0, 0, 0, 0, 1>
.text:00411CA0                                         ; DATA XREF: sub_406B79+A382↑o
.text:00411CC4 stru_411CC4     UnwindMapEntry <-1, offset loc_410ED2>
.text:00411CC4                                         ; DATA XREF: .text:stru_411CA0↑o
.text:00411CCC stru_411CCC     FuncInfo <19930522h, 6, offset stru_411CF0, 0, 0, 0, 0, 0, 1>
.text:00411CCC                                         ; DATA XREF: sub_406D44+A217↑o
.text:00411CF0 stru_411CF0     UnwindMapEntry <-1, offset loc_410F05>
.text:00411CF0                                         ; DATA XREF: .text:stru_411CCC↑o
.text:00411CF8                 UnwindMapEntry <0, offset loc_410F0E>
.text:00411D00                 UnwindMapEntry <1, offset loc_410F1A>
.text:00411D08                 UnwindMapEntry <2, offset loc_410F26>
.text:00411D10                 UnwindMapEntry <3, offset loc_410F32>
.text:00411D18                 UnwindMapEntry <4, offset loc_410F3E>
.text:00411D20 stru_411D20     FuncInfo <19930522h, 3, offset stru_411D44, 0, 0, 0, 0, 0, 1>
.text:00411D20                                         ; DATA XREF: sub_407856+9746↑o
.text:00411D44 stru_411D44     UnwindMapEntry <-1, offset loc_410F65>
.text:00411D44                                         ; DATA XREF: .text:stru_411D20↑o
.text:00411D4C                 UnwindMapEntry <0, offset loc_410F6E>
.text:00411D54                 UnwindMapEntry <1, offset loc_410F7C>
.text:00411D5C stru_411D5C     FuncInfo <19930522h, 2, offset stru_411D80, 0, 0, 0, 0, 0, 1>
.text:00411D5C                                         ; DATA XREF: sub_407996+9636↑o
.text:00411D80 stru_411D80     UnwindMapEntry <-1, offset loc_410FA6>
.text:00411D80                                         ; DATA XREF: .text:stru_411D5C↑o
.text:00411D88                 UnwindMapEntry <0, offset loc_410FAF>
.text:00411D90 stru_411D90     FuncInfo <19930522h, 2, offset stru_411DB4, 0, 0, 0, 0, 0, 1>
.text:00411D90                                         ; DATA XREF: sub_407CA0+9359↑o
.text:00411DB4 stru_411DB4     UnwindMapEntry <-1, offset loc_410FD6>
.text:00411DB4                                         ; DATA XREF: .text:stru_411D90↑o
.text:00411DBC                 UnwindMapEntry <0, offset loc_410FDF>
.text:00411DC4 stru_411DC4     FuncInfo <19930522h, 1, offset stru_411DE8, 0, 0, 0, 0, 0, 1>
.text:00411DC4                                         ; DATA XREF: sub_407E55+91C8↑o
.text:00411DE8 stru_411DE8     UnwindMapEntry <-1, offset loc_411003>
.text:00411DE8                                         ; DATA XREF: .text:stru_411DC4↑o
.text:00411DF0 stru_411DF0     FuncInfo <19930522h, 4, offset stru_411E14, 0, 0, 0, 0, 0, 1>
.text:00411DF0                                         ; DATA XREF: sub_407EE3+9179↑o
.text:00411E14 stru_411E14     UnwindMapEntry <-1, offset loc_411027>
.text:00411E14                                         ; DATA XREF: .text:stru_411DF0↑o
.text:00411E1C                 UnwindMapEntry <0, offset loc_411030>
.text:00411E24                 UnwindMapEntry <1, offset loc_411039>
.text:00411E2C                 UnwindMapEntry <2, offset loc_411042>
.text:00411E34                 align 8
.text:00411E38 stru_411E38     FuncInfo <19930522h, 10, offset stru_411E60, 0, 0, 0, 0, 0, 1>
.text:00411E38                                         ; DATA XREF: sub_4080F8+8FE8↑o
.text:00411E5C                 align 10h
.text:00411E60 stru_411E60     UnwindMapEntry <-1, offset loc_411066>
.text:00411E60                                         ; DATA XREF: .text:stru_411E38↑o
.text:00411E68                 UnwindMapEntry <0, offset loc_41106F>
.text:00411E70                 UnwindMapEntry <1, offset loc_411078>
.text:00411E78                 UnwindMapEntry <2, offset loc_411081>
.text:00411E80                 UnwindMapEntry <3, offset loc_41108A>
.text:00411E88                 UnwindMapEntry <4, offset loc_411093>
.text:00411E90                 UnwindMapEntry <5, offset loc_41109F>
.text:00411E98                 UnwindMapEntry <6, offset loc_4110AB>
.text:00411EA0                 UnwindMapEntry <7, offset loc_4110B7>
.text:00411EA8                 UnwindMapEntry <8, offset loc_4110C3>
.text:00411EB0 stru_411EB0     FuncInfo <19930522h, 4, offset stru_411ED4, 0, 0, 0, 0, 0, 1>
.text:00411EB0                                         ; DATA XREF: sub_408632+8AF9↑o
.text:00411ED4 stru_411ED4     UnwindMapEntry <-1, offset loc_4110EA>
.text:00411ED4                                         ; DATA XREF: .text:stru_411EB0↑o
.text:00411EDC                 UnwindMapEntry <0, offset loc_4110F6>
.text:00411EE4                 UnwindMapEntry <1, offset loc_411102>
.text:00411EEC                 UnwindMapEntry <2, offset loc_41110E>
.text:00411EF4                 align 8
.text:00411EF8 stru_411EF8     FuncInfo <19930522h, 10, offset stru_411F20, 0, 0, 0, 0, 0, 1>
.text:00411EF8                                         ; DATA XREF: sub_408913+8899↑o
.text:00411F1C                 align 10h
.text:00411F20 stru_411F20     UnwindMapEntry <-1, offset loc_411135>
.text:00411F20                                         ; DATA XREF: .text:stru_411EF8↑o
.text:00411F28                 UnwindMapEntry <0, offset loc_41113E>
.text:00411F30                 UnwindMapEntry <1, offset loc_411147>
.text:00411F38                 UnwindMapEntry <2, offset loc_411150>
.text:00411F40                 UnwindMapEntry <3, offset loc_411159>
.text:00411F48                 UnwindMapEntry <4, offset loc_411162>
.text:00411F50                 UnwindMapEntry <5, offset loc_41116D>
.text:00411F58                 UnwindMapEntry <6, offset loc_411176>
.text:00411F60                 UnwindMapEntry <7, offset loc_41117F>
.text:00411F68                 UnwindMapEntry <8, offset loc_411188>
.text:00411F70 stru_411F70     FuncInfo <19930522h, 1, offset stru_411F94, 0, 0, 0, 0, 0, 1>
.text:00411F70                                         ; DATA XREF: CPageTool::SetToolItem(_MSCONFIG_TOOL_TAG *,_MSCONFIG_VALID_PATH *,IXMLDOMNamedNodeMap *,CString *,CString *,CString *,CString *,CString *)+8210↑o
.text:00411F94 stru_411F94     UnwindMapEntry <-1, offset loc_4111B6>
.text:00411F94                                         ; DATA XREF: .text:stru_411F70↑o
.text:00411F9C stru_411F9C     FuncInfo <19930522h, 1, offset stru_411FC0, 0, 0, 0, 0, 0, 1>
.text:00411F9C                                         ; DATA XREF: sub_4091C4+803A↑o
.text:00411FC0 stru_411FC0     UnwindMapEntry <-1, offset loc_4111DA>
.text:00411FC0                                         ; DATA XREF: .text:stru_411F9C↑o
.text:00411FC8 stru_411FC8     FuncInfo <19930522h, 2, offset stru_411FEC, 0, 0, 0, 0, 0, 1>
.text:00411FC8                                         ; DATA XREF: sub_4092C4+7F67↑o
.text:00411FEC stru_411FEC     UnwindMapEntry <-1, offset loc_411208>
.text:00411FEC                                         ; DATA XREF: .text:stru_411FC8↑o
.text:00411FF4                 UnwindMapEntry <0, offset loc_411211>
.text:00411FFC stru_411FFC     FuncInfo <19930522h, 1, offset stru_412020, 0, 0, 0, 0, 0, 1>
.text:00411FFC                                         ; DATA XREF: sub_4093CA+7E92↑o
.text:00412020 stru_412020     UnwindMapEntry <-1, offset loc_411235>
.text:00412020                                         ; DATA XREF: .text:stru_411FFC↑o
.text:00412028 stru_412028     FuncInfo <19930522h, 1, offset stru_41204C, 0, 0, 0, 0, 0, 1>
.text:00412028                                         ; DATA XREF: sub_40A388+6F08↑o
.text:0041204C stru_41204C     UnwindMapEntry <-1, offset loc_411266>
.text:0041204C                                         ; DATA XREF: .text:stru_412028↑o
.text:00412054 stru_412054     FuncInfo <19930522h, 3, offset stru_412078, 0, 0, 0, 0, 0, 1>
.text:00412054                                         ; DATA XREF: sub_40B530+5DAC↑o
.text:00412078 stru_412078     UnwindMapEntry <-1, offset loc_41129A>
.text:00412078                                         ; DATA XREF: .text:stru_412054↑o
.text:00412080                 UnwindMapEntry <0, offset loc_4112A6>
.text:00412088                 UnwindMapEntry <1, offset loc_4112B2>
.text:00412090 stru_412090     FuncInfo <19930522h, 1, offset stru_4120B4, 0, 0, 0, 0, 0, 1>
.text:00412090                                         ; DATA XREF: sub_40B6C0+5C3F↑o
.text:004120B4 stru_4120B4     UnwindMapEntry <-1, offset loc_4112E6>
.text:004120B4                                         ; DATA XREF: .text:stru_412090↑o
.text:004120BC stru_4120BC     FuncInfo <19930522h, 2, offset stru_4120E0, 0, 0, 0, 0, 0, 1>
.text:004120BC                                         ; DATA XREF: sub_40B860+5AD6↑o
.text:004120E0 stru_4120E0     UnwindMapEntry <-1, offset loc_411309>
.text:004120E0                                         ; DATA XREF: .text:stru_4120BC↑o
.text:004120E8                 UnwindMapEntry <0, offset loc_411312>
.text:004120F0 stru_4120F0     FuncInfo <19930522h, 9, offset stru_412118, 0, 0, 0, 0, 0, 1>
.text:004120F0                                         ; DATA XREF: CPageBootIni::OnApply(void)+590C↑o
.text:00412114                 align 8
.text:00412118 stru_412118     UnwindMapEntry <-1, offset loc_411340>
.text:00412118                                         ; DATA XREF: .text:stru_4120F0↑o
.text:00412120                 UnwindMapEntry <0, offset loc_411349>
.text:00412128                 UnwindMapEntry <1, offset loc_411352>
.text:00412130                 UnwindMapEntry <2, offset loc_41135B>
.text:00412138                 UnwindMapEntry <0, offset loc_411364>
.text:00412140                 UnwindMapEntry <4, offset loc_41136D>
.text:00412148                 UnwindMapEntry <0, offset loc_411376>
.text:00412150                 UnwindMapEntry <6, offset loc_41137F>
.text:00412158                 UnwindMapEntry <7, offset loc_411388>
.text:00412160 stru_412160     FuncInfo <19930522h, 3, offset stru_412184, 0, 0, 0, 0, 0, 1>
.text:00412160                                         ; DATA XREF: sub_40BEDE+5505↑o
.text:00412184 stru_412184     UnwindMapEntry <-1, offset loc_4113B6>
.text:00412184                                         ; DATA XREF: .text:stru_412160↑o
.text:0041218C                 UnwindMapEntry <0, offset loc_4113BF>
.text:00412194                 UnwindMapEntry <-1, offset loc_4113BF>
.text:0041219C stru_41219C     FuncInfo <19930522h, 3, offset stru_4121C0, 0, 0, 0, 0, 0, 1>
.text:0041219C                                         ; DATA XREF: sub_40BF70+54A0↑o
.text:004121C0 stru_4121C0     UnwindMapEntry <-1, offset loc_4113ED>
.text:004121C0                                         ; DATA XREF: .text:stru_41219C↑o
.text:004121C8                 UnwindMapEntry <0, offset loc_4113F6>
.text:004121D0                 UnwindMapEntry <-1, offset loc_4113F6>
.text:004121D8 stru_4121D8     FuncInfo <19930522h, 3, offset stru_4121FC, 0, 0, 0, 0, 0, 1>
.text:004121D8                                         ; DATA XREF: CPageBootIni::ReDrawOSListBox(void)+5411↑o
.text:004121FC stru_4121FC     UnwindMapEntry <-1, offset loc_41141A>
.text:004121FC                                         ; DATA XREF: .text:stru_4121D8↑o
.text:00412204                 UnwindMapEntry <0, offset loc_411423>
.text:0041220C                 UnwindMapEntry <1, offset loc_41142C>
.text:00412214                 align 8
.text:00412218 stru_412218     FuncInfo <19930522h, 16, offset stru_412240, 0, 0, 0, 0, 0, 1>
.text:00412218                                         ; DATA XREF: sub_40C7B0+4D50↑o
.text:0041223C                 align 10h
.text:00412240 stru_412240     UnwindMapEntry <-1, offset loc_411450>
.text:00412240                                         ; DATA XREF: .text:stru_412218↑o
.text:00412248                 UnwindMapEntry <0, offset loc_411459>
.text:00412250                 UnwindMapEntry <1, offset loc_411462>
.text:00412258                 UnwindMapEntry <2, offset loc_41146B>
.text:00412260                 UnwindMapEntry <3, offset loc_411474>
.text:00412268                 UnwindMapEntry <3, offset loc_41147D>
.text:00412270                 UnwindMapEntry <3, offset loc_411486>
.text:00412278                 UnwindMapEntry <3, offset loc_41148F>
.text:00412280                 UnwindMapEntry <3, offset loc_411498>
.text:00412288                 UnwindMapEntry <3, offset loc_4114A1>
.text:00412290                 UnwindMapEntry <3, offset loc_4114AA>
.text:00412298                 UnwindMapEntry <3, offset loc_4114D0>
.text:004122A0                 UnwindMapEntry <11, offset loc_4114D9>
.text:004122A8                 UnwindMapEntry <3, offset loc_4114B5>
.text:004122B0                 UnwindMapEntry <13, offset loc_4114BE>
.text:004122B8                 UnwindMapEntry <14, offset loc_4114C7>
.text:004122C0 stru_4122C0     FuncInfo <19930522h, 5, offset stru_4122E4, 0, 0, 0, 0, 0, 1>
.text:004122C0                                         ; DATA XREF: sub_40CD8D+47B6↑o
.text:004122E4 stru_4122E4     UnwindMapEntry <-1, offset loc_41150A>
.text:004122E4                                         ; DATA XREF: .text:stru_4122C0↑o
.text:004122EC                 UnwindMapEntry <-1, offset loc_411512>
.text:004122F4                 UnwindMapEntry <-1, offset loc_41151A>
.text:004122FC                 UnwindMapEntry <-1, offset loc_411522>
.text:00412304                 UnwindMapEntry <-1, offset loc_41152A>
.text:0041230C stru_41230C     FuncInfo <19930522h, 1, offset stru_412330, 0, 0, 0, 0, 0, 1>
.text:0041230C                                         ; DATA XREF: sub_40CE7B+46FB↑o
.text:00412330 stru_412330     UnwindMapEntry <-1, offset loc_41154D>
.text:00412330                                         ; DATA XREF: .text:stru_41230C↑o
.text:00412338 stru_412338     FuncInfo <19930522h, 1, offset stru_41235C, 0, 0, 0, 0, 0, 1>
.text:00412338                                         ; DATA XREF: sub_40D13E+446C↑o
.text:0041235C stru_41235C     UnwindMapEntry <-1, offset loc_411580>
.text:0041235C                                         ; DATA XREF: .text:stru_412338↑o
.text:00412364 stru_412364     FuncInfo <19930522h, 4, offset stru_412388, 0, 0, 0, 0, 0, 1>
.text:00412364                                         ; DATA XREF: sub_40D6CA+3F1F↑o
.text:00412388 stru_412388     UnwindMapEntry <-1, offset loc_4115B4>
.text:00412388                                         ; DATA XREF: .text:stru_412364↑o
.text:00412390                 UnwindMapEntry <0, offset loc_4115BD>
.text:00412398                 UnwindMapEntry <1, offset loc_4115C6>
.text:004123A0                 UnwindMapEntry <2, offset loc_4115CF>
.text:004123A8 stru_4123A8     FuncInfo <19930522h, 9, offset stru_4123D0, 0, 0, 0, 0, 0, 1>
.text:004123A8                                         ; DATA XREF: sub_40D856+3E3E↑o
.text:004123CC                 align 10h
.text:004123D0 stru_4123D0     UnwindMapEntry <-1, offset loc_411653>
.text:004123D0                                         ; DATA XREF: .text:stru_4123A8↑o
.text:004123D8                 UnwindMapEntry <0, offset loc_4115F3>
.text:004123E0                 UnwindMapEntry <1, offset loc_4115FF>
.text:004123E8                 UnwindMapEntry <2, offset loc_41160B>
.text:004123F0                 UnwindMapEntry <3, offset loc_411617>
.text:004123F8                 UnwindMapEntry <3, offset loc_41162F>
.text:00412400                 UnwindMapEntry <5, offset loc_41163B>
.text:00412408                 UnwindMapEntry <6, offset loc_411647>
.text:00412410                 UnwindMapEntry <3, offset loc_411623>
.text:00412418 stru_412418     FuncInfo <19930522h, 1, offset stru_41243C, 0, 0, 0, 0, 0, 1>
.text:00412418                                         ; DATA XREF: sub_40E04D+367B↑o
.text:0041243C stru_41243C     UnwindMapEntry <-1, offset loc_41169E>
.text:0041243C                                         ; DATA XREF: .text:stru_412418↑o
.text:00412444 stru_412444     UnwindMapEntry <-1, offset loc_4116D2>
.text:00412444                                         ; DATA XREF: .text:stru_41244C↓o
.text:0041244C stru_41244C     FuncInfo <19930522h, 1, offset stru_412444, 0, 0, 0, 0, 0, 1>
.text:0041244C                                         ; DATA XREF: sub_40FE2A+18CB↑o
.text:00412470 ; const _ThrowInfo _TI3_AVout_of_range_std__
.text:00412470 __TI3?AVout_of_range@std@@ _ThrowInfo <0, offset sub_40FDC0, 0, \
.text:00412470                                         ; DATA XREF: std::logic_error::_Doraise(void)+1B↑o
.text:00412470                                         ; std::_String_base::_Xran(void)+2B↑o
.text:00412470                             offset __CTA3?AVout_of_range@std@@> ; attributes
.text:00412480 __CTA3?AVout_of_range@std@@ dd 3        ; DATA XREF: .text:__TI3?AVout_of_range@std@@↑o
.text:00412480                                         ; count of catchable type addresses following
.text:00412484                 dd offset __CT??_R0?AVout_of_range@std@@@8_40FD70 ; catchable type 'class std::out_of_range'
.text:00412488                 dd offset __CT??_R0?AVlogic_error@std@@@8_406A40 ; catchable type 'class std::logic_error'
.text:0041248C                 dd offset __CT??_R0?AVexception@@@8_410250 ; catchable type 'class exception'
.text:00412490 __CT??_R0?AVout_of_range@std@@@8_40FD70 dd 0
.text:00412490                                         ; DATA XREF: .text:00412484↑o
.text:00412490                                         ; attributes
.text:00412494                 dd offset ??_R0?AVout_of_range@std@@@8 ; std::out_of_range `RTTI Type Descriptor'
.text:00412498                 dd 0                    ; mdisp
.text:0041249C                 dd -1                   ; pdisp
.text:004124A0                 dd 0                    ; vdisp
.text:004124A4                 dd 40                   ; size of thrown object
.text:004124A8                 dd offset ??0bad_alloc@std@@QAE@ABV01@@Z_1 ; reference to optional copy constructor
.text:004124AC                 align 10h
.text:004124B0 stru_4124B0     dd 0FFFFFFE4h           ; GSCookieOffset
.text:004124B0                                         ; DATA XREF: start-23B↑o
.text:004124B0                 dd 0                    ; GSCookieXOROffset
.text:004124B0                 dd 0FFFFFF84h           ; EHCookieOffset
.text:004124B0                 dd 0                    ; EHCookieXOROffset
.text:004124B0                 dd 0FFFFFFFEh           ; ScopeRecord.EnclosingLevel
.text:004124B0                 dd offset loc_410171    ; ScopeRecord.FilterFunc
.text:004124B0                 dd offset loc_410175    ; ScopeRecord.HandlerFunc
.text:004124CC                 dd 0FFFFFFFEh
.text:004124D0                 dd offset sub_410125
.text:004124D4                 dd offset sub_410139
.text:004124D8 stru_4124D8     dd 0FFFFFFE4h           ; GSCookieOffset
.text:004124D8                                         ; DATA XREF: __onexit+2↑o
.text:004124D8                 dd 0                    ; GSCookieXOROffset
.text:004124D8                 dd 0FFFFFFC8h           ; EHCookieOffset
.text:004124D8                 dd 0                    ; EHCookieXOROffset
.text:004124D8                 dd 0FFFFFFFEh           ; ScopeRecord.EnclosingLevel
.text:004124D8                 dd 0                    ; ScopeRecord.FilterFunc
.text:004124D8                 dd offset loc_410439    ; ScopeRecord.HandlerFunc
.text:004124F4 stru_4124F4     HandlerType <40h, 0, 0, offset loc_410477>
.text:004124F4                                         ; DATA XREF: .text:stru_412514↓o
.text:00412504 stru_412504     UnwindMapEntry <-1, 0>  ; DATA XREF: .text:stru_412528↓o
.text:0041250C                 UnwindMapEntry <-1, 0>
.text:00412514 stru_412514     TryBlockMapEntry <0, 0, 1, 1, offset stru_4124F4>
.text:00412514                                         ; DATA XREF: .text:stru_412528↓o
.text:00412528 stru_412528     FuncInfo <19930522h, 2, offset stru_412504, 1, offset stru_412514, 0, \
.text:00412528                                         ; DATA XREF: operator new(uint,std::nothrow_t const &)+12B4↑o
.text:00412528                           0, 0, 1>
.text:0041254C                 align 10h
.text:00412550 stru_412550     dd 0FFFFFFFEh           ; GSCookieOffset
.text:00412550                                         ; DATA XREF: RtlpImageNtHeader(x)+2↑o
.text:00412550                 dd 0                    ; GSCookieXOROffset
.text:00412550                 dd 0FFFFFFD4h           ; EHCookieOffset
.text:00412550                 dd 0                    ; EHCookieXOROffset
.text:00412550                 dd 0FFFFFFFEh           ; ScopeRecord.EnclosingLevel
.text:00412550                 dd offset loc_410651    ; ScopeRecord.FilterFunc
.text:00412550                 dd offset loc_410655    ; ScopeRecord.HandlerFunc
.text:0041256C                 align 10h
.text:00412570 stru_412570     dd 0FFFFFFFEh           ; GSCookieOffset
.text:00412570                                         ; DATA XREF: __IsNonwritableInCurrentImage+7↑o
.text:00412570                 dd 0                    ; GSCookieXOROffset
.text:00412570                 dd 0FFFFFFD8h           ; EHCookieOffset
.text:00412570                 dd 0                    ; EHCookieXOROffset
.text:00412570                 dd 0FFFFFFFEh           ; ScopeRecord.EnclosingLevel
.text:00412570                 dd offset loc_41078B    ; ScopeRecord.FilterFunc
.text:00412570                 dd offset loc_41079E    ; ScopeRecord.HandlerFunc
.text:0041258C __CT??_R0?AVlength_error@std@@@8_406590 dd 0
.text:0041258C                                         ; DATA XREF: .text:00412648↓o
.text:0041258C                                         ; attributes
.text:00412590                 dd offset ??_R0?AVlength_error@std@@@8 ; std::length_error `RTTI Type Descriptor'
.text:00412594                 dd 0                    ; mdisp
.text:00412598                 dd -1                   ; pdisp
.text:0041259C                 dd 0                    ; vdisp
.text:004125A0                 dd 40                   ; size of thrown object
.text:004125A4                 dd offset ??0bad_alloc@std@@QAE@ABV01@@Z ; reference to optional copy constructor
.text:004125A8 ; const _ThrowInfo _TI2_AVlogic_error_std__
.text:004125A8 __TI2?AVlogic_error@std@@ _ThrowInfo <0, offset ??1logic_error@std@@UAE@XZ, 0, \
.text:004125A8                                         ; DATA XREF: std::logic_error::_Doraise(void)+1B↑o
.text:004125A8                             offset __CTA2?AVlogic_error@std@@> ; attributes
.text:004125B8 __CT??_R0?AVbad_alloc@std@@@8_406750 dd CT_IsStdBadAlloc
.text:004125B8                                         ; DATA XREF: .text:0041263C↓o
.text:004125B8                                         ; attributes
.text:004125BC                 dd offset ??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc `RTTI Type Descriptor'
.text:004125C0                 dd 0                    ; mdisp
.text:004125C4                 dd -1                   ; pdisp
.text:004125C8                 dd 0                    ; vdisp
.text:004125CC                 dd 12                   ; size of thrown object
.text:004125D0                 dd offset ??0range_error@std@@QAE@ABV01@@Z ; reference to optional copy constructor
.text:004125D4 ; const _ThrowInfo _TI2_AVbad_alloc_std__
.text:004125D4 __TI2?AVbad_alloc@std@@ _ThrowInfo <0, offset sub_4066F0, 0, offset __CTA2?AVbad_alloc@std@@>
.text:004125D4                                         ; DATA XREF: sub_4063BA+38↑o
.text:004125D4                                         ; sub_406730+11↑o ...
.text:004125D4                                         ; attributes
.text:004125E4 __CT??_R0?AVlogic_error@std@@@8_406A40 dd 0
.text:004125E4                                         ; DATA XREF: .text:00412488↑o
.text:004125E4                                         ; .text:00412630↓o ...
.text:004125E4                                         ; attributes
.text:004125E8                 dd offset ??_R0?AVlogic_error@std@@@8 ; std::logic_error `RTTI Type Descriptor'
.text:004125EC                 dd 0                    ; mdisp
.text:004125F0                 dd -1                   ; pdisp
.text:004125F4                 dd 0                    ; vdisp
.text:004125F8                 dd 40                   ; size of thrown object
.text:004125FC                 dd offset ??0logic_error@std@@QAE@ABV01@@Z ; reference to optional copy constructor
.text:00412600 __CT??_R0?AVexception@@@8_410250 dd 0   ; DATA XREF: .text:0041248C↑o
.text:00412600                                         ; .text:00412634↓o ...
.text:00412600                                         ; attributes
.text:00412604                 dd offset ??_R0?AVexception@@@8 ; exception `RTTI Type Descriptor'
.text:00412608                 dd 0                    ; mdisp
.text:0041260C                 dd -1                   ; pdisp
.text:00412610                 dd 0                    ; vdisp
.text:00412614                 dd 12                   ; size of thrown object
.text:00412618                 dd offset ??0exception@@QAE@ABV0@@Z ; reference to optional copy constructor
.text:0041261C ; const _ThrowInfo _TI3_AVlength_error_std__
.text:0041261C __TI3?AVlength_error@std@@ _ThrowInfo <0, offset sub_406580, 0, \
.text:0041261C                                         ; DATA XREF: sub_406166+29↑o
.text:0041261C                                         ; std::logic_error::_Doraise(void)+1B↑o ...
.text:0041261C                             offset __CTA3?AVlength_error@std@@> ; attributes
.text:0041262C __CTA2?AVlogic_error@std@@ dd 2         ; DATA XREF: .text:__TI2?AVlogic_error@std@@↑o
.text:0041262C                                         ; count of catchable type addresses following
.text:00412630                 dd offset __CT??_R0?AVlogic_error@std@@@8_406A40 ; catchable type 'class std::logic_error'
.text:00412634                 dd offset __CT??_R0?AVexception@@@8_410250 ; catchable type 'class exception'
.text:00412638 __CTA2?AVbad_alloc@std@@ dd 2           ; DATA XREF: .text:__TI2?AVbad_alloc@std@@↑o
.text:00412638                                         ; count of catchable type addresses following
.text:0041263C                 dd offset __CT??_R0?AVbad_alloc@std@@@8_406750 ; catchable type 'class std::bad_alloc'
.text:00412640                 dd offset __CT??_R0?AVexception@@@8_410250 ; catchable type 'class exception'
.text:00412644 __CTA3?AVlength_error@std@@ dd 3        ; DATA XREF: .text:__TI3?AVlength_error@std@@↑o
.text:00412644                                         ; count of catchable type addresses following
.text:00412648                 dd offset __CT??_R0?AVlength_error@std@@@8_406590 ; catchable type 'class std::length_error'
.text:0041264C                 dd offset __CT??_R0?AVlogic_error@std@@@8_406A40 ; catchable type 'class std::logic_error'
.text:00412650                 dd offset __CT??_R0?AVexception@@@8_410250 ; catchable type 'class exception'
.text:00412654                 align 200h
.text:00412800                 dd 200h dup(?)
.text:00412800 _text           ends
.text:00412800
.data:00413000 ; Section 2. (virtual address 00013000)
.data:00413000 ; Virtual size                  : 00000AB8 (   2744.)
.data:00413000 ; Section size in file          : 00000600 (   1536.)
.data:00413000 ; Offset to raw data for section: 00011C00
.data:00413000 ; Flags C0000040: Data Readable Writable
.data:00413000 ; Alignment     : default
.data:00413000 ; ===========================================================================
.data:00413000
.data:00413000 ; Segment type: Pure data
.data:00413000 ; Segment permissions: Read/Write
.data:00413000 _data           segment para public 'DATA' use32
.data:00413000                 assume cs:_data
.data:00413000                 ;org 413000h
.data:00413000 off_413000      dd offset aBadAllocation
.data:00413000                                         ; DATA XREF: std::bad_alloc::bad_alloc(void)+1C↑r
.data:00413000                                         ; "bad allocation"
.data:00413004                 align 8
.data:00413008 ; class std::out_of_range `RTTI Type Descriptor'
.data:00413008 ??_R0?AVout_of_range@std@@@8 dd offset off_40100C
.data:00413008                                         ; DATA XREF: .text:00412494↑o
.data:00413008                                         ; reference to RTTI's vftable
.data:0041300C                 dd 0                    ; internal runtime reference
.data:00413010 aAvoutOfRangeSt db '.?AVout_of_range@std@@',0 ; type descriptor name
.data:00413027                 align 4
.data:00413028 ; public class CDialog /* mdisp:0 */ :
.data:00413028 ;   public class CWnd /* mdisp:0 */ :
.data:00413028 ;     public class CCmdTarget /* mdisp:0 */ :
.data:00413028 ;       public class CObject /* mdisp:0 */
.data:00413028 ; class CDialog `RTTI Type Descriptor'
.data:00413028 ??_R0?AVCDialog@@@8 dd offset off_40100C
.data:00413028                                         ; DATA XREF: .text:CDialog::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:00413028                                         ; reference to RTTI's vftable
.data:0041302C                 dd 0                    ; internal runtime reference
.data:00413030 aAvcdialog      db '.?AVCDialog@@',0    ; type descriptor name
.data:0041303E                 align 10h
.data:00413040 ; public class CWnd /* mdisp:0 */ :
.data:00413040 ;   public class CCmdTarget /* mdisp:0 */ :
.data:00413040 ;     public class CObject /* mdisp:0 */
.data:00413040 ; class CWnd `RTTI Type Descriptor'
.data:00413040 ??_R0?AVCWnd@@@8 dd offset off_40100C   ; DATA XREF: .text:CWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:00413040                                         ; reference to RTTI's vftable
.data:00413044                 dd 0                    ; internal runtime reference
.data:00413048 aAvcwnd         db '.?AVCWnd@@',0       ; type descriptor name
.data:00413053                 align 4
.data:00413054 ; public class CCmdTarget /* mdisp:0 */ :
.data:00413054 ;   public class CObject /* mdisp:0 */
.data:00413054 ; class CCmdTarget `RTTI Type Descriptor'
.data:00413054 ??_R0?AVCCmdTarget@@@8 dd offset off_40100C
.data:00413054                                         ; DATA XREF: .text:CCmdTarget::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:00413054                                         ; reference to RTTI's vftable
.data:00413058                 dd 0                    ; internal runtime reference
.data:0041305C aAvccmdtarget   db '.?AVCCmdTarget@@',0 ; type descriptor name
.data:0041306D                 align 10h
.data:00413070 ; public class CObject /* mdisp:0 */
.data:00413070 ; class CObject `RTTI Type Descriptor'
.data:00413070 ??_R0?AVCObject@@@8 dd offset off_40100C
.data:00413070                                         ; DATA XREF: .text:CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:00413070                                         ; reference to RTTI's vftable
.data:00413074                 dd 0                    ; internal runtime reference
.data:00413078 aAvcobject      db '.?AVCObject@@',0    ; type descriptor name
.data:00413086                 align 4
.data:00413088 ; public class CAutoStartDlg /* mdisp:0 */ :
.data:00413088 ;   public class CDialog /* mdisp:0 */ :
.data:00413088 ;     public class CWnd /* mdisp:0 */ :
.data:00413088 ;       public class CCmdTarget /* mdisp:0 */ :
.data:00413088 ;         public class CObject /* mdisp:0 */
.data:00413088 ; class CAutoStartDlg `RTTI Type Descriptor'
.data:00413088 ??_R0?AVCAutoStartDlg@@@8 dd offset off_40100C
.data:00413088                                         ; DATA XREF: .text:CAutoStartDlg::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:00413088                                         ; .text:00402060↑o
.data:00413088                                         ; reference to RTTI's vftable
.data:0041308C                 dd 0                    ; internal runtime reference
.data:00413090 aAvcautostartdl db '.?AVCAutoStartDlg@@',0 ; type descriptor name
.data:004130A4 ; public class CPropertyPage /* mdisp:0 */ :
.data:004130A4 ;   public class CDialog /* mdisp:0 */ :
.data:004130A4 ;     public class CWnd /* mdisp:0 */ :
.data:004130A4 ;       public class CCmdTarget /* mdisp:0 */ :
.data:004130A4 ;         public class CObject /* mdisp:0 */
.data:004130A4 ; class CPropertyPage `RTTI Type Descriptor'
.data:004130A4 ??_R0?AVCPropertyPage@@@8 dd offset off_40100C
.data:004130A4                                         ; DATA XREF: .text:CPropertyPage::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:004130A4                                         ; reference to RTTI's vftable
.data:004130A8                 dd 0                    ; internal runtime reference
.data:004130AC aAvcpropertypag db '.?AVCPropertyPage@@',0 ; type descriptor name
.data:004130C0 ; public class CPageServices /* mdisp:0 */ :
.data:004130C0 ;   public class CPropertyPage /* mdisp:0 */ :
.data:004130C0 ;     public class CDialog /* mdisp:0 */ :
.data:004130C0 ;       public class CWnd /* mdisp:0 */ :
.data:004130C0 ;         public class CCmdTarget /* mdisp:0 */ :
.data:004130C0 ;           public class CObject /* mdisp:0 */,
.data:004130C0 ;   public class CPageBase /* mdisp:144 */
.data:004130C0 ; class CPageServices `RTTI Type Descriptor'
.data:004130C0 ??_R0?AVCPageServices@@@8 dd offset off_40100C
.data:004130C0                                         ; DATA XREF: .text:CPageServices::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:004130C0                                         ; .text:00402120↑o ...
.data:004130C0                                         ; reference to RTTI's vftable
.data:004130C4                 dd 0                    ; internal runtime reference
.data:004130C8 aAvcpageservice db '.?AVCPageServices@@',0 ; type descriptor name
.data:004130DC ; public class std::length_error /* mdisp:0 */ :
.data:004130DC ;   public class std::logic_error /* mdisp:0 */ :
.data:004130DC ;     public class exception /* mdisp:0 */
.data:004130DC ; class std::length_error `RTTI Type Descriptor'
.data:004130DC ??_R0?AVlength_error@std@@@8 dd offset off_40100C
.data:004130DC                                         ; DATA XREF: .text:std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:004130DC                                         ; .text:00402184↑o ...
.data:004130DC                                         ; reference to RTTI's vftable
.data:004130E0                 dd 0                    ; internal runtime reference
.data:004130E4 aAvlengthErrorS db '.?AVlength_error@std@@',0 ; type descriptor name
.data:004130FB                 align 4
.data:004130FC ; public class std::logic_error /* mdisp:0 */ :
.data:004130FC ;   public class exception /* mdisp:0 */
.data:004130FC ; class std::logic_error `RTTI Type Descriptor'
.data:004130FC ??_R0?AVlogic_error@std@@@8 dd offset off_40100C
.data:004130FC                                         ; DATA XREF: .text:std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:004130FC                                         ; .text:004021D0↑o ...
.data:004130FC                                         ; reference to RTTI's vftable
.data:00413100                 dd 0                    ; internal runtime reference
.data:00413104 aAvlogicErrorSt db '.?AVlogic_error@std@@',0 ; type descriptor name
.data:0041311A                 align 4
.data:0041311C ; public class std::bad_alloc /* mdisp:0 */ :
.data:0041311C ;   public class exception /* mdisp:0 */
.data:0041311C ; class std::bad_alloc `RTTI Type Descriptor'
.data:0041311C ??_R0?AVbad_alloc@std@@@8 dd offset off_40100C
.data:0041311C                                         ; DATA XREF: .text:std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:0041311C                                         ; .text:00402250↑o ...
.data:0041311C                                         ; reference to RTTI's vftable
.data:00413120                 dd 0                    ; internal runtime reference
.data:00413124 aAvbadAllocStd  db '.?AVbad_alloc@std@@',0 ; type descriptor name
.data:00413138 ; public class exception /* mdisp:0 */
.data:00413138 ; class exception `RTTI Type Descriptor'
.data:00413138 ??_R0?AVexception@@@8 dd offset off_40100C
.data:00413138                                         ; DATA XREF: .text:exception::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:00413138                                         ; .text:00412604↑o
.data:00413138                                         ; reference to RTTI's vftable
.data:0041313C                 dd 0                    ; internal runtime reference
.data:00413140 aAvexception    db '.?AVexception@@',0  ; type descriptor name
.data:00413150 ; class CMemoryException * `RTTI Type Descriptor'
.data:00413150 ??_R0PAVCMemoryException@@@8 dd offset off_40100C
.data:00413150                                         ; DATA XREF: .text:stru_411A20↑o
.data:00413150                                         ; reference to RTTI's vftable
.data:00413154                 dd 0                    ; internal runtime reference
.data:00413158 aPavcmemoryexce db '.PAVCMemoryException@@',0 ; type descriptor name
.data:0041316F                 align 10h
.data:00413170 ; public class CPageBase /* mdisp:0 */
.data:00413170 ; class CPageBase `RTTI Type Descriptor'
.data:00413170 ??_R0?AVCPageBase@@@8 dd offset off_40100C
.data:00413170                                         ; DATA XREF: .text:CPageBase::`RTTI Base Class Descriptor at (144,-1,0,64)'↑o
.data:00413170                                         ; .text:CPageBase::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o ...
.data:00413170                                         ; reference to RTTI's vftable
.data:00413174                 dd 0                    ; internal runtime reference
.data:00413178 aAvcpagebase    db '.?AVCPageBase@@',0  ; type descriptor name
.data:00413188 ; public class CPageStartup /* mdisp:0 */ :
.data:00413188 ;   public class CPropertyPage /* mdisp:0 */ :
.data:00413188 ;     public class CDialog /* mdisp:0 */ :
.data:00413188 ;       public class CWnd /* mdisp:0 */ :
.data:00413188 ;         public class CCmdTarget /* mdisp:0 */ :
.data:00413188 ;           public class CObject /* mdisp:0 */,
.data:00413188 ;   public class CPageBase /* mdisp:144 */
.data:00413188 ; class CPageStartup `RTTI Type Descriptor'
.data:00413188 ??_R0?AVCPageStartup@@@8 dd offset off_40100C
.data:00413188                                         ; DATA XREF: .text:CPageStartup::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:00413188                                         ; .text:004022F8↑o ...
.data:00413188                                         ; reference to RTTI's vftable
.data:0041318C                 dd 0                    ; internal runtime reference
.data:00413190 aAvcpagestartup db '.?AVCPageStartup@@',0 ; type descriptor name
.data:004131A3                 align 4
.data:004131A4 ; public class CPageGeneral /* mdisp:0 */ :
.data:004131A4 ;   public class CPropertyPage /* mdisp:0 */ :
.data:004131A4 ;     public class CDialog /* mdisp:0 */ :
.data:004131A4 ;       public class CWnd /* mdisp:0 */ :
.data:004131A4 ;         public class CCmdTarget /* mdisp:0 */ :
.data:004131A4 ;           public class CObject /* mdisp:0 */,
.data:004131A4 ;   public class CPageBase /* mdisp:144 */
.data:004131A4 ; class CPageGeneral `RTTI Type Descriptor'
.data:004131A4 ??_R0?AVCPageGeneral@@@8 dd offset off_40100C
.data:004131A4                                         ; DATA XREF: .text:CPageGeneral::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:004131A4                                         ; .text:0040236C↑o ...
.data:004131A4                                         ; reference to RTTI's vftable
.data:004131A8                 dd 0                    ; internal runtime reference
.data:004131AC aAvcpagegeneral db '.?AVCPageGeneral@@',0 ; type descriptor name
.data:004131BF                 align 10h
.data:004131C0 ; public class CPageTool /* mdisp:0 */ :
.data:004131C0 ;   public class CPropertyPage /* mdisp:0 */ :
.data:004131C0 ;     public class CDialog /* mdisp:0 */ :
.data:004131C0 ;       public class CWnd /* mdisp:0 */ :
.data:004131C0 ;         public class CCmdTarget /* mdisp:0 */ :
.data:004131C0 ;           public class CObject /* mdisp:0 */,
.data:004131C0 ;   public class CPageBase /* mdisp:144 */
.data:004131C0 ; class CPageTool `RTTI Type Descriptor'
.data:004131C0 ??_R0?AVCPageTool@@@8 dd offset off_40100C
.data:004131C0                                         ; DATA XREF: .text:CPageTool::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:004131C0                                         ; .text:004023E0↑o ...
.data:004131C0                                         ; reference to RTTI's vftable
.data:004131C4                 dd 0                    ; internal runtime reference
.data:004131C8 aAvcpagetool    db '.?AVCPageTool@@',0  ; type descriptor name
.data:004131D8 ; public class CToolItem /* mdisp:0 */
.data:004131D8 ; class CToolItem `RTTI Type Descriptor'
.data:004131D8 ??_R0?AVCToolItem@@@8 dd offset off_40100C
.data:004131D8                                         ; DATA XREF: .text:CToolItem::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:004131D8                                         ; .text:0040243C↑o
.data:004131D8                                         ; reference to RTTI's vftable
.data:004131DC                 dd 0                    ; internal runtime reference
.data:004131E0 aAvctoolitem    db '.?AVCToolItem@@',0  ; type descriptor name
.data:004131F0 ; public class CPageBootIni /* mdisp:0 */ :
.data:004131F0 ;   public class CPropertyPage /* mdisp:0 */ :
.data:004131F0 ;     public class CDialog /* mdisp:0 */ :
.data:004131F0 ;       public class CWnd /* mdisp:0 */ :
.data:004131F0 ;         public class CCmdTarget /* mdisp:0 */ :
.data:004131F0 ;           public class CObject /* mdisp:0 */,
.data:004131F0 ;   public class CPageBase /* mdisp:144 */
.data:004131F0 ; class CPageBootIni `RTTI Type Descriptor'
.data:004131F0 ??_R0?AVCPageBootIni@@@8 dd offset off_40100C
.data:004131F0                                         ; DATA XREF: .text:CPageBootIni::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:004131F0                                         ; .text:0040249C↑o ...
.data:004131F0                                         ; reference to RTTI's vftable
.data:004131F4                 dd 0                    ; internal runtime reference
.data:004131F8 aAvcpagebootini db '.?AVCPageBootIni@@',0 ; type descriptor name
.data:0041320B                 align 4
.data:0041320C ; public class CBootIniAdvancedDlg /* mdisp:0 */ :
.data:0041320C ;   public class ATL::CAxDialogImpl<class CBootIniAdvancedDlg,class ATL::CWindow> /* mdisp:0 */ :
.data:0041320C ;     public class ATL::CDialogImplBaseT<class ATL::CWindow> /* mdisp:0 */ :
.data:0041320C ;       public class ATL::CWindowImplRoot<class ATL::CWindow> /* mdisp:0 */ :
.data:0041320C ;         public class ATL::CWindow /* mdisp:4 */,
.data:0041320C ;         public class ATL::CMessageMap /* mdisp:0 */
.data:0041320C ; class CBootIniAdvancedDlg `RTTI Type Descriptor'
.data:0041320C ??_R0?AVCBootIniAdvancedDlg@@@8 dd offset off_40100C
.data:0041320C                                         ; DATA XREF: .text:CBootIniAdvancedDlg::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:0041320C                                         ; .text:00402650↑o
.data:0041320C                                         ; reference to RTTI's vftable
.data:00413210                 dd 0                    ; internal runtime reference
.data:00413214 aAvcbootiniadva db '.?AVCBootIniAdvancedDlg@@',0 ; type descriptor name
.data:0041322E                 align 10h
.data:00413230 ; public class ATL::CAxDialogImpl<class CBootIniAdvancedDlg,class ATL::CWindow> /* mdisp:0 */ :
.data:00413230 ;   public class ATL::CDialogImplBaseT<class ATL::CWindow> /* mdisp:0 */ :
.data:00413230 ;     public class ATL::CWindowImplRoot<class ATL::CWindow> /* mdisp:0 */ :
.data:00413230 ;       public class ATL::CWindow /* mdisp:4 */,
.data:00413230 ;       public class ATL::CMessageMap /* mdisp:0 */
.data:00413230 ; class ATL::CAxDialogImpl<class CBootIniAdvancedDlg, class ATL::CWindow> `RTTI Type Descriptor'
.data:00413230 ??_R0?AV?$CAxDialogImpl@VCBootIniAdvancedDlg@@VCWindow@ATL@@@ATL@@@8 dd offset off_40100C
.data:00413230                                         ; DATA XREF: .text:ATL::CAxDialogImpl<CBootIniAdvancedDlg,ATL::CWindow>::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:00413230                                         ; reference to RTTI's vftable
.data:00413234                 dd 0                    ; internal runtime reference
.data:00413238 aAvCaxdialogimp db '.?AV?$CAxDialogImpl@VCBootIniAdvancedDlg@@VCWindow@ATL@@@ATL@@',0 ; type descriptor name
.data:00413277                 align 4
.data:00413278 ; public class ATL::CDialogImplBaseT<class ATL::CWindow> /* mdisp:0 */ :
.data:00413278 ;   public class ATL::CWindowImplRoot<class ATL::CWindow> /* mdisp:0 */ :
.data:00413278 ;     public class ATL::CWindow /* mdisp:4 */,
.data:00413278 ;     public class ATL::CMessageMap /* mdisp:0 */
.data:00413278 ; class ATL::CDialogImplBaseT<class ATL::CWindow> `RTTI Type Descriptor'
.data:00413278 ??_R0?AV?$CDialogImplBaseT@VCWindow@ATL@@@ATL@@@8 dd offset off_40100C
.data:00413278                                         ; DATA XREF: .text:ATL::CDialogImplBaseT<ATL::CWindow>::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:00413278                                         ; reference to RTTI's vftable
.data:0041327C                 dd 0                    ; internal runtime reference
.data:00413280 aAvCdialogimplb db '.?AV?$CDialogImplBaseT@VCWindow@ATL@@@ATL@@',0 ; type descriptor name
.data:004132AC ; public class ATL::CWindowImplRoot<class ATL::CWindow> /* mdisp:0 */ :
.data:004132AC ;   public class ATL::CWindow /* mdisp:4 */,
.data:004132AC ;   public class ATL::CMessageMap /* mdisp:0 */
.data:004132AC ; class ATL::CWindowImplRoot<class ATL::CWindow> `RTTI Type Descriptor'
.data:004132AC ??_R0?AV?$CWindowImplRoot@VCWindow@ATL@@@ATL@@@8 dd offset off_40100C
.data:004132AC                                         ; DATA XREF: .text:ATL::CWindowImplRoot<ATL::CWindow>::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:004132AC                                         ; reference to RTTI's vftable
.data:004132B0                 dd 0                    ; internal runtime reference
.data:004132B4 aAvCwindowimplr db '.?AV?$CWindowImplRoot@VCWindow@ATL@@@ATL@@',0 ; type descriptor name
.data:004132DF                 align 10h
.data:004132E0 ; public class ATL::CWindow /* mdisp:0 */
.data:004132E0 ; class ATL::CWindow `RTTI Type Descriptor'
.data:004132E0 ??_R0?AVCWindow@ATL@@@8 dd offset off_40100C
.data:004132E0                                         ; DATA XREF: .text:ATL::CWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:004132E0                                         ; .text:ATL::CWindow::`RTTI Base Class Descriptor at (4,-1,0,64)'↑o
.data:004132E0                                         ; reference to RTTI's vftable
.data:004132E4                 dd 0                    ; internal runtime reference
.data:004132E8 aAvcwindowAtl   db '.?AVCWindow@ATL@@',0 ; type descriptor name
.data:004132FA                 align 4
.data:004132FC ; public class ATL::CMessageMap /* mdisp:0 */
.data:004132FC ; class ATL::CMessageMap `RTTI Type Descriptor'
.data:004132FC ??_R0?AVCMessageMap@ATL@@@8 dd offset off_40100C
.data:004132FC                                         ; DATA XREF: .text:ATL::CMessageMap::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:004132FC                                         ; reference to RTTI's vftable
.data:00413300                 dd 0                    ; internal runtime reference
.data:00413304 aAvcmessagemapA db '.?AVCMessageMap@ATL@@',0 ; type descriptor name
.data:0041331A                 align 4
.data:0041331C ; public class CPropertySheet /* mdisp:0 */ :
.data:0041331C ;   public class CWnd /* mdisp:0 */ :
.data:0041331C ;     public class CCmdTarget /* mdisp:0 */ :
.data:0041331C ;       public class CObject /* mdisp:0 */
.data:0041331C ; class CPropertySheet `RTTI Type Descriptor'
.data:0041331C ??_R0?AVCPropertySheet@@@8 dd offset off_40100C
.data:0041331C                                         ; DATA XREF: .text:CPropertySheet::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:0041331C                                         ; reference to RTTI's vftable
.data:00413320                 dd 0                    ; internal runtime reference
.data:00413324 aAvcpropertyshe db '.?AVCPropertySheet@@',0 ; type descriptor name
.data:00413339                 align 4
.data:0041333C ; public class CMSConfigSheet /* mdisp:0 */ :
.data:0041333C ;   public class CPropertySheet /* mdisp:0 */ :
.data:0041333C ;     public class CWnd /* mdisp:0 */ :
.data:0041333C ;       public class CCmdTarget /* mdisp:0 */ :
.data:0041333C ;         public class CObject /* mdisp:0 */
.data:0041333C ; class CMSConfigSheet `RTTI Type Descriptor'
.data:0041333C ??_R0?AVCMSConfigSheet@@@8 dd offset off_40100C
.data:0041333C                                         ; DATA XREF: .text:CMSConfigSheet::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:0041333C                                         ; .text:004026E8↑o
.data:0041333C                                         ; reference to RTTI's vftable
.data:00413340                 dd 0                    ; internal runtime reference
.data:00413344 aAvcmsconfigshe db '.?AVCMSConfigSheet@@',0 ; type descriptor name
.data:00413359                 align 4
.data:0041335C ; public class CWinApp /* mdisp:0 */ :
.data:0041335C ;   public class CWinThread /* mdisp:0 */ :
.data:0041335C ;     public class CCmdTarget /* mdisp:0 */ :
.data:0041335C ;       public class CObject /* mdisp:0 */
.data:0041335C ; class CWinApp `RTTI Type Descriptor'
.data:0041335C ??_R0?AVCWinApp@@@8 dd offset off_40100C
.data:0041335C                                         ; DATA XREF: .text:CWinApp::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:0041335C                                         ; reference to RTTI's vftable
.data:00413360                 dd 0                    ; internal runtime reference
.data:00413364 aAvcwinapp      db '.?AVCWinApp@@',0    ; type descriptor name
.data:00413372                 align 4
.data:00413374 ; public class CWinThread /* mdisp:0 */ :
.data:00413374 ;   public class CCmdTarget /* mdisp:0 */ :
.data:00413374 ;     public class CObject /* mdisp:0 */
.data:00413374 ; class CWinThread `RTTI Type Descriptor'
.data:00413374 ??_R0?AVCWinThread@@@8 dd offset off_40100C
.data:00413374                                         ; DATA XREF: .text:CWinThread::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:00413374                                         ; reference to RTTI's vftable
.data:00413378                 dd 0                    ; internal runtime reference
.data:0041337C aAvcwinthread   db '.?AVCWinThread@@',0 ; type descriptor name
.data:0041338D                 align 10h
.data:00413390 ; public class CMSConfigApp /* mdisp:0 */ :
.data:00413390 ;   public class CWinApp /* mdisp:0 */ :
.data:00413390 ;     public class CWinThread /* mdisp:0 */ :
.data:00413390 ;       public class CCmdTarget /* mdisp:0 */ :
.data:00413390 ;         public class CObject /* mdisp:0 */
.data:00413390 ; class CMSConfigApp `RTTI Type Descriptor'
.data:00413390 ??_R0?AVCMSConfigApp@@@8 dd offset off_40100C
.data:00413390                                         ; DATA XREF: .text:CMSConfigApp::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:00413390                                         ; .text:004027BC↑o
.data:00413390                                         ; reference to RTTI's vftable
.data:00413394                 dd 0                    ; internal runtime reference
.data:00413398 aAvcmsconfigapp db '.?AVCMSConfigApp@@',0 ; type descriptor name
.data:004133AB                 align 4
.data:004133AC ; public class CRebootDlg /* mdisp:0 */ :
.data:004133AC ;   public class ATL::CAxDialogImpl<class CRebootDlg,class ATL::CWindow> /* mdisp:0 */ :
.data:004133AC ;     public class ATL::CDialogImplBaseT<class ATL::CWindow> /* mdisp:0 */ :
.data:004133AC ;       public class ATL::CWindowImplRoot<class ATL::CWindow> /* mdisp:0 */ :
.data:004133AC ;         public class ATL::CWindow /* mdisp:4 */,
.data:004133AC ;         public class ATL::CMessageMap /* mdisp:0 */
.data:004133AC ; class CRebootDlg `RTTI Type Descriptor'
.data:004133AC ??_R0?AVCRebootDlg@@@8 dd offset off_40100C
.data:004133AC                                         ; DATA XREF: .text:CRebootDlg::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:004133AC                                         ; .text:0040285C↑o
.data:004133AC                                         ; reference to RTTI's vftable
.data:004133B0                 dd 0                    ; internal runtime reference
.data:004133B4 aAvcrebootdlg   db '.?AVCRebootDlg@@',0 ; type descriptor name
.data:004133C5                 align 4
.data:004133C8 ; public class ATL::CAxDialogImpl<class CRebootDlg,class ATL::CWindow> /* mdisp:0 */ :
.data:004133C8 ;   public class ATL::CDialogImplBaseT<class ATL::CWindow> /* mdisp:0 */ :
.data:004133C8 ;     public class ATL::CWindowImplRoot<class ATL::CWindow> /* mdisp:0 */ :
.data:004133C8 ;       public class ATL::CWindow /* mdisp:4 */,
.data:004133C8 ;       public class ATL::CMessageMap /* mdisp:0 */
.data:004133C8 ; class ATL::CAxDialogImpl<class CRebootDlg, class ATL::CWindow> `RTTI Type Descriptor'
.data:004133C8 ??_R0?AV?$CAxDialogImpl@VCRebootDlg@@VCWindow@ATL@@@ATL@@@8 dd offset off_40100C
.data:004133C8                                         ; DATA XREF: .text:ATL::CAxDialogImpl<CRebootDlg,ATL::CWindow>::`RTTI Base Class Descriptor at (0,-1,0,64)'↑o
.data:004133C8                                         ; reference to RTTI's vftable
.data:004133CC                 dd 0                    ; internal runtime reference
.data:004133D0 aAvCaxdialogimp_0 db '.?AV?$CAxDialogImpl@VCRebootDlg@@VCWindow@ATL@@@ATL@@',0 ; type descriptor name
.data:00413406                 align 10h
.data:00413410 ; uintptr_t __security_cookie
.data:00413410 ___security_cookie dd 0BB40E64Eh        ; DATA XREF: .text:00401ECC↑o
.data:00413410                                         ; sub_403B8B+7↑r ...
.data:00413414 dword_413414    dd 44BF19B1h            ; DATA XREF: ___report_gsfailure+D6↑r
.data:00413414                                         ; ___report_gsfailure+F8↑r ...
.data:00413418 dword_413418    dd 1                    ; DATA XREF: pre_c_init+A4↑r
.data:0041341C unk_41341C      db  10h                 ; DATA XREF: sub_40D3F3+3E↑o
.data:0041341D                 db  59h ; Y
.data:0041341E                 db  2Fh ; /
.data:0041341F                 db 0B6h ; ¶
.data:00413420                 db  28h ; (
.data:00413421                 db  65h ; e
.data:00413422                 db 0D1h ; Ñ
.data:00413423                 db  11h
.data:00413424                 db  96h ; –
.data:00413425                 db  11h
.data:00413426                 db    0
.data:00413427                 db    0
.data:00413428                 db 0F8h ; ø
.data:00413429                 db  1Eh
.data:0041342A                 db  0Dh
.data:0041342B                 db  0Dh
.data:0041342C ; WCHAR String1
.data:0041342C String1:                                ; DATA XREF: sub_40DE06+DF↑o
.data:0041342C                                         ; sub_40E04D+33↑o
.data:0041342C                 text "UTF-16LE", 'StringFileInfo',0
.data:0041344A                 db    0
.data:0041344B                 db    0
.data:0041344C                 db    0
.data:0041344D                 db    0
.data:0041344E                 db    0
.data:0041344F                 db    0
.data:00413450                 db    0
.data:00413451                 db    0
.data:00413452                 db    0
.data:00413453                 db    0
.data:00413454 ; exception dword_413454
.data:00413454 dword_413454    dd 0                    ; DATA XREF: operator new(uint)+30↑o
.data:00413454                                         ; sub_411740↑w ...
.data:00413458                 align 10h
.data:00413460 dword_413460    dd 0                    ; DATA XREF: operator new(uint):loc_40FD29↑r
.data:00413460                                         ; operator new(uint)+3E↑w
.data:00413464 unk_413464      db    0                 ; DATA XREF: sub_404316+63↑o
.data:00413464                                         ; sub_404EFD:loc_404F49↑o ...
.data:00413465                 db    0
.data:00413466                 db    0
.data:00413467                 db    0
.data:00413468 dword_413468    dd 0                    ; DATA XREF: start-E9↑w
.data:00413468                                         ; sub_410139+6↑w ...
.data:0041346C dword_41346C    dd 0                    ; DATA XREF: start:loc_410038↑w
.data:0041346C                                         ; start:loc_410154↑r
.data:00413470 unk_413470      db    0                 ; DATA XREF: pre_cpp_init+1F↑o
.data:00413471                 db    0
.data:00413472                 db    0
.data:00413473                 db    0
.data:00413474 unk_413474      db    0                 ; DATA XREF: pre_cpp_init+1A↑o
.data:00413475                 db    0
.data:00413476                 db    0
.data:00413477                 db    0
.data:00413478 unk_413478      db    0                 ; DATA XREF: pre_cpp_init+15↑o
.data:00413479                 db    0
.data:0041347A                 db    0
.data:0041347B                 db    0
.data:0041347C dword_41347C    dd 0                    ; DATA XREF: pre_cpp_init+2D↑w
.data:00413480 dword_413480    dd 0                    ; DATA XREF: pre_c_init+62↑w
.data:00413480                                         ; start-E4↑r ...
.data:00413484 dword_413484    dd 0                    ; DATA XREF: pre_cpp_init+5↑o
.data:00413484                                         ; pre_cpp_init+10↑w
.data:00413488 dword_413488    dd 0                    ; DATA XREF: .text:ExceptionInfo↑o
.data:00413488                                         ; ___report_gsfailure+91↑w
.data:0041348C dword_41348C    dd 0                    ; DATA XREF: ___report_gsfailure+9B↑w
.data:00413490                 db    0
.data:00413491                 db    0
.data:00413492                 db    0
.data:00413493                 db    0
.data:00413494 dword_413494    dd 0                    ; DATA XREF: ___report_gsfailure+8C↑w
.data:00413498 dword_413498    dd 0                    ; DATA XREF: ___report_gsfailure+A5↑w
.data:0041349C dword_41349C    dd 0                    ; DATA XREF: ___report_gsfailure+B5↑w
.data:0041349C                                         ; ___report_gsfailure+CB↑w ...
.data:004134A0                 db    0
.data:004134A1                 db    0
.data:004134A2                 db    0
.data:004134A3                 db    0
.data:004134A4                 db    0
.data:004134A5                 db    0
.data:004134A6                 db    0
.data:004134A7                 db    0
.data:004134A8                 db    0
.data:004134A9                 db    0
.data:004134AA                 db    0
.data:004134AB                 db    0
.data:004134AC                 db    0
.data:004134AD                 db    0
.data:004134AE                 db    0
.data:004134AF                 db    0
.data:004134B0                 db    0
.data:004134B1                 db    0
.data:004134B2                 db    0
.data:004134B3                 db    0
.data:004134B4                 db    0
.data:004134B5                 db    0
.data:004134B6                 db    0
.data:004134B7                 db    0
.data:004134B8                 db    0
.data:004134B9                 db    0
.data:004134BA                 db    0
.data:004134BB                 db    0
.data:004134BC                 db    0
.data:004134BD                 db    0
.data:004134BE                 db    0
.data:004134BF                 db    0
.data:004134C0                 db    0
.data:004134C1                 db    0
.data:004134C2                 db    0
.data:004134C3                 db    0
.data:004134C4                 db    0
.data:004134C5                 db    0
.data:004134C6                 db    0
.data:004134C7                 db    0
.data:004134C8                 db    0
.data:004134C9                 db    0
.data:004134CA                 db    0
.data:004134CB                 db    0
.data:004134CC                 db    0
.data:004134CD                 db    0
.data:004134CE                 db    0
.data:004134CF                 db    0
.data:004134D0                 db    0
.data:004134D1                 db    0
.data:004134D2                 db    0
.data:004134D3                 db    0
.data:004134D4                 db    0
.data:004134D5                 db    0
.data:004134D6                 db    0
.data:004134D7                 db    0
.data:004134D8 dword_4134D8    dd 0                    ; DATA XREF: .text:ExceptionInfo↑o
.data:004134D8                                         ; ___report_gsfailure+7D↑w
.data:004134DC                 db    0
.data:004134DD                 db    0
.data:004134DE                 db    0
.data:004134DF                 db    0
.data:004134E0                 db    0
.data:004134E1                 db    0
.data:004134E2                 db    0
.data:004134E3                 db    0
.data:004134E4                 db    0
.data:004134E5                 db    0
.data:004134E6                 db    0
.data:004134E7                 db    0
.data:004134E8                 db    0
.data:004134E9                 db    0
.data:004134EA                 db    0
.data:004134EB                 db    0
.data:004134EC                 db    0
.data:004134ED                 db    0
.data:004134EE                 db    0
.data:004134EF                 db    0
.data:004134F0                 db    0
.data:004134F1                 db    0
.data:004134F2                 db    0
.data:004134F3                 db    0
.data:004134F4                 db    0
.data:004134F5                 db    0
.data:004134F6                 db    0
.data:004134F7                 db    0
.data:004134F8                 db    0
.data:004134F9                 db    0
.data:004134FA                 db    0
.data:004134FB                 db    0
.data:004134FC                 db    0
.data:004134FD                 db    0
.data:004134FE                 db    0
.data:004134FF                 db    0
.data:00413500                 db    0
.data:00413501                 db    0
.data:00413502                 db    0
.data:00413503                 db    0
.data:00413504                 db    0
.data:00413505                 db    0
.data:00413506                 db    0
.data:00413507                 db    0
.data:00413508                 db    0
.data:00413509                 db    0
.data:0041350A                 db    0
.data:0041350B                 db    0
.data:0041350C                 db    0
.data:0041350D                 db    0
.data:0041350E                 db    0
.data:0041350F                 db    0
.data:00413510                 db    0
.data:00413511                 db    0
.data:00413512                 db    0
.data:00413513                 db    0
.data:00413514                 db    0
.data:00413515                 db    0
.data:00413516                 db    0
.data:00413517                 db    0
.data:00413518                 db    0
.data:00413519                 db    0
.data:0041351A                 db    0
.data:0041351B                 db    0
.data:0041351C                 db    0
.data:0041351D                 db    0
.data:0041351E                 db    0
.data:0041351F                 db    0
.data:00413520                 db    0
.data:00413521                 db    0
.data:00413522                 db    0
.data:00413523                 db    0
.data:00413524                 db    0
.data:00413525                 db    0
.data:00413526                 db    0
.data:00413527                 db    0
.data:00413528                 db    0
.data:00413529                 db    0
.data:0041352A                 db    0
.data:0041352B                 db    0
.data:0041352C                 db    0
.data:0041352D                 db    0
.data:0041352E                 db    0
.data:0041352F                 db    0
.data:00413530                 db    0
.data:00413531                 db    0
.data:00413532                 db    0
.data:00413533                 db    0
.data:00413534                 db    0
.data:00413535                 db    0
.data:00413536                 db    0
.data:00413537                 db    0
.data:00413538                 db    0
.data:00413539                 db    0
.data:0041353A                 db    0
.data:0041353B                 db    0
.data:0041353C                 db    0
.data:0041353D                 db    0
.data:0041353E                 db    0
.data:0041353F                 db    0
.data:00413540                 db    0
.data:00413541                 db    0
.data:00413542                 db    0
.data:00413543                 db    0
.data:00413544                 db    0
.data:00413545                 db    0
.data:00413546                 db    0
.data:00413547                 db    0
.data:00413548                 db    0
.data:00413549                 db    0
.data:0041354A                 db    0
.data:0041354B                 db    0
.data:0041354C                 db    0
.data:0041354D                 db    0
.data:0041354E                 db    0
.data:0041354F                 db    0
.data:00413550                 db    0
.data:00413551                 db    0
.data:00413552                 db    0
.data:00413553                 db    0
.data:00413554                 db    0
.data:00413555                 db    0
.data:00413556                 db    0
.data:00413557                 db    0
.data:00413558                 db    0
.data:00413559                 db    0
.data:0041355A                 db    0
.data:0041355B                 db    0
.data:0041355C                 db    0
.data:0041355D                 db    0
.data:0041355E                 db    0
.data:0041355F                 db    0
.data:00413560                 db    0
.data:00413561                 db    0
.data:00413562                 db    0
.data:00413563                 db    0
.data:00413564 word_413564     dw 0                    ; DATA XREF: ___report_gsfailure+51↑w
.data:00413566                 align 4
.data:00413568 word_413568     dw 0                    ; DATA XREF: ___report_gsfailure+4A↑w
.data:0041356A                 align 4
.data:0041356C word_41356C     dw 0                    ; DATA XREF: ___report_gsfailure+43↑w
.data:0041356E                 align 10h
.data:00413570 word_413570     dw 0                    ; DATA XREF: ___report_gsfailure+3C↑w
.data:00413572                 align 4
.data:00413574 dword_413574    dd 0                    ; DATA XREF: ___report_gsfailure+28↑w
.data:00413578 dword_413578    dd 0                    ; DATA XREF: ___report_gsfailure+22↑w
.data:0041357C dword_41357C    dd 0                    ; DATA XREF: ___report_gsfailure+1C↑w
.data:00413580 dword_413580    dd 0                    ; DATA XREF: ___report_gsfailure+16↑w
.data:00413584 dword_413584    dd 0                    ; DATA XREF: ___report_gsfailure+10↑w
.data:00413588 dword_413588    dd 0                    ; DATA XREF: ___report_gsfailure+B↑w
.data:0041358C dword_41358C    dd 0                    ; DATA XREF: ___report_gsfailure+62↑w
.data:00413590 dword_413590    dd 0                    ; DATA XREF: ___report_gsfailure+6A↑w
.data:00413590                                         ; ___report_gsfailure+87↑r
.data:00413594 word_413594     dw 0                    ; DATA XREF: ___report_gsfailure+35↑w
.data:00413596                 align 4
.data:00413598 dword_413598    dd 0                    ; DATA XREF: ___report_gsfailure+59↑w
.data:0041359C dword_41359C    dd 0                    ; DATA XREF: ___report_gsfailure+72↑w
.data:004135A0 word_4135A0     dw 0                    ; DATA XREF: ___report_gsfailure+2E↑w
.data:004135A2                 db    0
.data:004135A3                 db    0
.data:004135A4                 db    0
.data:004135A5                 db    0
.data:004135A6                 db    0
.data:004135A7                 db    0
.data:004135A8                 db    0
.data:004135A9                 db    0
.data:004135AA                 db    0
.data:004135AB                 db    0
.data:004135AC                 db    0
.data:004135AD                 db    0
.data:004135AE                 db    0
.data:004135AF                 db    0
.data:004135B0                 db    0
.data:004135B1                 db    0
.data:004135B2                 db    0
.data:004135B3                 db    0
.data:004135B4                 db    0
.data:004135B5                 db    0
.data:004135B6                 db    0
.data:004135B7                 db    0
.data:004135B8                 db    0
.data:004135B9                 db    0
.data:004135BA                 db    0
.data:004135BB                 db    0
.data:004135BC                 db    0
.data:004135BD                 db    0
.data:004135BE                 db    0
.data:004135BF                 db    0
.data:004135C0                 db    0
.data:004135C1                 db    0
.data:004135C2                 db    0
.data:004135C3                 db    0
.data:004135C4                 db    0
.data:004135C5                 db    0
.data:004135C6                 db    0
.data:004135C7                 db    0
.data:004135C8                 db    0
.data:004135C9                 db    0
.data:004135CA                 db    0
.data:004135CB                 db    0
.data:004135CC                 db    0
.data:004135CD                 db    0
.data:004135CE                 db    0
.data:004135CF                 db    0
.data:004135D0                 db    0
.data:004135D1                 db    0
.data:004135D2                 db    0
.data:004135D3                 db    0
.data:004135D4                 db    0
.data:004135D5                 db    0
.data:004135D6                 db    0
.data:004135D7                 db    0
.data:004135D8                 db    0
.data:004135D9                 db    0
.data:004135DA                 db    0
.data:004135DB                 db    0
.data:004135DC                 db    0
.data:004135DD                 db    0
.data:004135DE                 db    0
.data:004135DF                 db    0
.data:004135E0                 db    0
.data:004135E1                 db    0
.data:004135E2                 db    0
.data:004135E3                 db    0
.data:004135E4                 db    0
.data:004135E5                 db    0
.data:004135E6                 db    0
.data:004135E7                 db    0
.data:004135E8                 db    0
.data:004135E9                 db    0
.data:004135EA                 db    0
.data:004135EB                 db    0
.data:004135EC                 db    0
.data:004135ED                 db    0
.data:004135EE                 db    0
.data:004135EF                 db    0
.data:004135F0                 db    0
.data:004135F1                 db    0
.data:004135F2                 db    0
.data:004135F3                 db    0
.data:004135F4                 db    0
.data:004135F5                 db    0
.data:004135F6                 db    0
.data:004135F7                 db    0
.data:004135F8                 db    0
.data:004135F9                 db    0
.data:004135FA                 db    0
.data:004135FB                 db    0
.data:004135FC                 db    0
.data:004135FD                 db    0
.data:004135FE                 db    0
.data:004135FF                 db    0
.data:00413600                 db    ? ;
.data:00413601                 db    ? ;
.data:00413602                 db    ? ;
.data:00413603                 db    ? ;
.data:00413604                 db    ? ;
.data:00413605                 db    ? ;
.data:00413606                 db    ? ;
.data:00413607                 db    ? ;
.data:00413608                 db    ? ;
.data:00413609                 db    ? ;
.data:0041360A                 db    ? ;
.data:0041360B                 db    ? ;
.data:0041360C                 db    ? ;
.data:0041360D                 db    ? ;
.data:0041360E                 db    ? ;
.data:0041360F                 db    ? ;
.data:00413610                 db    ? ;
.data:00413611                 db    ? ;
.data:00413612                 db    ? ;
.data:00413613                 db    ? ;
.data:00413614                 db    ? ;
.data:00413615                 db    ? ;
.data:00413616                 db    ? ;
.data:00413617                 db    ? ;
.data:00413618                 db    ? ;
.data:00413619                 db    ? ;
.data:0041361A                 db    ? ;
.data:0041361B                 db    ? ;
.data:0041361C                 db    ? ;
.data:0041361D                 db    ? ;
.data:0041361E                 db    ? ;
.data:0041361F                 db    ? ;
.data:00413620                 db    ? ;
.data:00413621                 db    ? ;
.data:00413622                 db    ? ;
.data:00413623                 db    ? ;
.data:00413624                 db    ? ;
.data:00413625                 db    ? ;
.data:00413626                 db    ? ;
.data:00413627                 db    ? ;
.data:00413628                 db    ? ;
.data:00413629                 db    ? ;
.data:0041362A                 db    ? ;
.data:0041362B                 db    ? ;
.data:0041362C                 db    ? ;
.data:0041362D                 db    ? ;
.data:0041362E                 db    ? ;
.data:0041362F                 db    ? ;
.data:00413630                 db    ? ;
.data:00413631                 db    ? ;
.data:00413632                 db    ? ;
.data:00413633                 db    ? ;
.data:00413634                 db    ? ;
.data:00413635                 db    ? ;
.data:00413636                 db    ? ;
.data:00413637                 db    ? ;
.data:00413638                 db    ? ;
.data:00413639                 db    ? ;
.data:0041363A                 db    ? ;
.data:0041363B                 db    ? ;
.data:0041363C                 db    ? ;
.data:0041363D                 db    ? ;
.data:0041363E                 db    ? ;
.data:0041363F                 db    ? ;
.data:00413640                 db    ? ;
.data:00413641                 db    ? ;
.data:00413642                 db    ? ;
.data:00413643                 db    ? ;
.data:00413644                 db    ? ;
.data:00413645                 db    ? ;
.data:00413646                 db    ? ;
.data:00413647                 db    ? ;
.data:00413648                 db    ? ;
.data:00413649                 db    ? ;
.data:0041364A                 db    ? ;
.data:0041364B                 db    ? ;
.data:0041364C                 db    ? ;
.data:0041364D                 db    ? ;
.data:0041364E                 db    ? ;
.data:0041364F                 db    ? ;
.data:00413650                 db    ? ;
.data:00413651                 db    ? ;
.data:00413652                 db    ? ;
.data:00413653                 db    ? ;
.data:00413654                 db    ? ;
.data:00413655                 db    ? ;
.data:00413656                 db    ? ;
.data:00413657                 db    ? ;
.data:00413658                 db    ? ;
.data:00413659                 db    ? ;
.data:0041365A                 db    ? ;
.data:0041365B                 db    ? ;
.data:0041365C                 db    ? ;
.data:0041365D                 db    ? ;
.data:0041365E                 db    ? ;
.data:0041365F                 db    ? ;
.data:00413660                 db    ? ;
.data:00413661                 db    ? ;
.data:00413662                 db    ? ;
.data:00413663                 db    ? ;
.data:00413664                 db    ? ;
.data:00413665                 db    ? ;
.data:00413666                 db    ? ;
.data:00413667                 db    ? ;
.data:00413668                 db    ? ;
.data:00413669                 db    ? ;
.data:0041366A                 db    ? ;
.data:0041366B                 db    ? ;
.data:0041366C                 db    ? ;
.data:0041366D                 db    ? ;
.data:0041366E                 db    ? ;
.data:0041366F                 db    ? ;
.data:00413670                 db    ? ;
.data:00413671                 db    ? ;
.data:00413672                 db    ? ;
.data:00413673                 db    ? ;
.data:00413674                 db    ? ;
.data:00413675                 db    ? ;
.data:00413676                 db    ? ;
.data:00413677                 db    ? ;
.data:00413678                 db    ? ;
.data:00413679                 db    ? ;
.data:0041367A                 db    ? ;
.data:0041367B                 db    ? ;
.data:0041367C                 db    ? ;
.data:0041367D                 db    ? ;
.data:0041367E                 db    ? ;
.data:0041367F                 db    ? ;
.data:00413680                 db    ? ;
.data:00413681                 db    ? ;
.data:00413682                 db    ? ;
.data:00413683                 db    ? ;
.data:00413684                 db    ? ;
.data:00413685                 db    ? ;
.data:00413686                 db    ? ;
.data:00413687                 db    ? ;
.data:00413688                 db    ? ;
.data:00413689                 db    ? ;
.data:0041368A                 db    ? ;
.data:0041368B                 db    ? ;
.data:0041368C                 db    ? ;
.data:0041368D                 db    ? ;
.data:0041368E                 db    ? ;
.data:0041368F                 db    ? ;
.data:00413690                 db    ? ;
.data:00413691                 db    ? ;
.data:00413692                 db    ? ;
.data:00413693                 db    ? ;
.data:00413694                 db    ? ;
.data:00413695                 db    ? ;
.data:00413696                 db    ? ;
.data:00413697                 db    ? ;
.data:00413698                 db    ? ;
.data:00413699                 db    ? ;
.data:0041369A                 db    ? ;
.data:0041369B                 db    ? ;
.data:0041369C                 db    ? ;
.data:0041369D                 db    ? ;
.data:0041369E                 db    ? ;
.data:0041369F                 db    ? ;
.data:004136A0                 db    ? ;
.data:004136A1                 db    ? ;
.data:004136A2                 db    ? ;
.data:004136A3                 db    ? ;
.data:004136A4                 db    ? ;
.data:004136A5                 db    ? ;
.data:004136A6                 db    ? ;
.data:004136A7                 db    ? ;
.data:004136A8                 db    ? ;
.data:004136A9                 db    ? ;
.data:004136AA                 db    ? ;
.data:004136AB                 db    ? ;
.data:004136AC                 db    ? ;
.data:004136AD                 db    ? ;
.data:004136AE                 db    ? ;
.data:004136AF                 db    ? ;
.data:004136B0                 db    ? ;
.data:004136B1                 db    ? ;
.data:004136B2                 db    ? ;
.data:004136B3                 db    ? ;
.data:004136B4                 db    ? ;
.data:004136B5                 db    ? ;
.data:004136B6                 db    ? ;
.data:004136B7                 db    ? ;
.data:004136B8                 db    ? ;
.data:004136B9                 db    ? ;
.data:004136BA                 db    ? ;
.data:004136BB                 db    ? ;
.data:004136BC                 db    ? ;
.data:004136BD                 db    ? ;
.data:004136BE                 db    ? ;
.data:004136BF                 db    ? ;
.data:004136C0                 db    ? ;
.data:004136C1                 db    ? ;
.data:004136C2                 db    ? ;
.data:004136C3                 db    ? ;
.data:004136C4                 db    ? ;
.data:004136C5                 db    ? ;
.data:004136C6                 db    ? ;
.data:004136C7                 db    ? ;
.data:004136C8                 db    ? ;
.data:004136C9                 db    ? ;
.data:004136CA                 db    ? ;
.data:004136CB                 db    ? ;
.data:004136CC                 db    ? ;
.data:004136CD                 db    ? ;
.data:004136CE                 db    ? ;
.data:004136CF                 db    ? ;
.data:004136D0                 db    ? ;
.data:004136D1                 db    ? ;
.data:004136D2                 db    ? ;
.data:004136D3                 db    ? ;
.data:004136D4                 db    ? ;
.data:004136D5                 db    ? ;
.data:004136D6                 db    ? ;
.data:004136D7                 db    ? ;
.data:004136D8                 db    ? ;
.data:004136D9                 db    ? ;
.data:004136DA                 db    ? ;
.data:004136DB                 db    ? ;
.data:004136DC                 db    ? ;
.data:004136DD                 db    ? ;
.data:004136DE                 db    ? ;
.data:004136DF                 db    ? ;
.data:004136E0                 db    ? ;
.data:004136E1                 db    ? ;
.data:004136E2                 db    ? ;
.data:004136E3                 db    ? ;
.data:004136E4                 db    ? ;
.data:004136E5                 db    ? ;
.data:004136E6                 db    ? ;
.data:004136E7                 db    ? ;
.data:004136E8                 db    ? ;
.data:004136E9                 db    ? ;
.data:004136EA                 db    ? ;
.data:004136EB                 db    ? ;
.data:004136EC                 db    ? ;
.data:004136ED                 db    ? ;
.data:004136EE                 db    ? ;
.data:004136EF                 db    ? ;
.data:004136F0                 db    ? ;
.data:004136F1                 db    ? ;
.data:004136F2                 db    ? ;
.data:004136F3                 db    ? ;
.data:004136F4                 db    ? ;
.data:004136F5                 db    ? ;
.data:004136F6                 db    ? ;
.data:004136F7                 db    ? ;
.data:004136F8                 db    ? ;
.data:004136F9                 db    ? ;
.data:004136FA                 db    ? ;
.data:004136FB                 db    ? ;
.data:004136FC                 db    ? ;
.data:004136FD                 db    ? ;
.data:004136FE                 db    ? ;
.data:004136FF                 db    ? ;
.data:00413700                 db    ? ;
.data:00413701                 db    ? ;
.data:00413702                 db    ? ;
.data:00413703                 db    ? ;
.data:00413704                 db    ? ;
.data:00413705                 db    ? ;
.data:00413706                 db    ? ;
.data:00413707                 db    ? ;
.data:00413708                 db    ? ;
.data:00413709                 db    ? ;
.data:0041370A                 db    ? ;
.data:0041370B                 db    ? ;
.data:0041370C                 db    ? ;
.data:0041370D                 db    ? ;
.data:0041370E                 db    ? ;
.data:0041370F                 db    ? ;
.data:00413710                 db    ? ;
.data:00413711                 db    ? ;
.data:00413712                 db    ? ;
.data:00413713                 db    ? ;
.data:00413714                 db    ? ;
.data:00413715                 db    ? ;
.data:00413716                 db    ? ;
.data:00413717                 db    ? ;
.data:00413718                 db    ? ;
.data:00413719                 db    ? ;
.data:0041371A                 db    ? ;
.data:0041371B                 db    ? ;
.data:0041371C                 db    ? ;
.data:0041371D                 db    ? ;
.data:0041371E                 db    ? ;
.data:0041371F                 db    ? ;
.data:00413720                 db    ? ;
.data:00413721                 db    ? ;
.data:00413722                 db    ? ;
.data:00413723                 db    ? ;
.data:00413724                 db    ? ;
.data:00413725                 db    ? ;
.data:00413726                 db    ? ;
.data:00413727                 db    ? ;
.data:00413728                 db    ? ;
.data:00413729                 db    ? ;
.data:0041372A                 db    ? ;
.data:0041372B                 db    ? ;
.data:0041372C                 db    ? ;
.data:0041372D                 db    ? ;
.data:0041372E                 db    ? ;
.data:0041372F                 db    ? ;
.data:00413730                 db    ? ;
.data:00413731                 db    ? ;
.data:00413732                 db    ? ;
.data:00413733                 db    ? ;
.data:00413734                 db    ? ;
.data:00413735                 db    ? ;
.data:00413736                 db    ? ;
.data:00413737                 db    ? ;
.data:00413738                 db    ? ;
.data:00413739                 db    ? ;
.data:0041373A                 db    ? ;
.data:0041373B                 db    ? ;
.data:0041373C                 db    ? ;
.data:0041373D                 db    ? ;
.data:0041373E                 db    ? ;
.data:0041373F                 db    ? ;
.data:00413740                 db    ? ;
.data:00413741                 db    ? ;
.data:00413742                 db    ? ;
.data:00413743                 db    ? ;
.data:00413744                 db    ? ;
.data:00413745                 db    ? ;
.data:00413746                 db    ? ;
.data:00413747                 db    ? ;
.data:00413748                 db    ? ;
.data:00413749                 db    ? ;
.data:0041374A                 db    ? ;
.data:0041374B                 db    ? ;
.data:0041374C                 db    ? ;
.data:0041374D                 db    ? ;
.data:0041374E                 db    ? ;
.data:0041374F                 db    ? ;
.data:00413750                 db    ? ;
.data:00413751                 db    ? ;
.data:00413752                 db    ? ;
.data:00413753                 db    ? ;
.data:00413754                 db    ? ;
.data:00413755                 db    ? ;
.data:00413756                 db    ? ;
.data:00413757                 db    ? ;
.data:00413758                 db    ? ;
.data:00413759                 db    ? ;
.data:0041375A                 db    ? ;
.data:0041375B                 db    ? ;
.data:0041375C                 db    ? ;
.data:0041375D                 db    ? ;
.data:0041375E                 db    ? ;
.data:0041375F                 db    ? ;
.data:00413760                 db    ? ;
.data:00413761                 db    ? ;
.data:00413762                 db    ? ;
.data:00413763                 db    ? ;
.data:00413764                 db    ? ;
.data:00413765                 db    ? ;
.data:00413766                 db    ? ;
.data:00413767                 db    ? ;
.data:00413768                 db    ? ;
.data:00413769                 db    ? ;
.data:0041376A                 db    ? ;
.data:0041376B                 db    ? ;
.data:0041376C                 db    ? ;
.data:0041376D                 db    ? ;
.data:0041376E                 db    ? ;
.data:0041376F                 db    ? ;
.data:00413770                 db    ? ;
.data:00413771                 db    ? ;
.data:00413772                 db    ? ;
.data:00413773                 db    ? ;
.data:00413774                 db    ? ;
.data:00413775                 db    ? ;
.data:00413776                 db    ? ;
.data:00413777                 db    ? ;
.data:00413778                 db    ? ;
.data:00413779                 db    ? ;
.data:0041377A                 db    ? ;
.data:0041377B                 db    ? ;
.data:0041377C                 db    ? ;
.data:0041377D                 db    ? ;
.data:0041377E                 db    ? ;
.data:0041377F                 db    ? ;
.data:00413780                 db    ? ;
.data:00413781                 db    ? ;
.data:00413782                 db    ? ;
.data:00413783                 db    ? ;
.data:00413784                 db    ? ;
.data:00413785                 db    ? ;
.data:00413786                 db    ? ;
.data:00413787                 db    ? ;
.data:00413788                 db    ? ;
.data:00413789                 db    ? ;
.data:0041378A                 db    ? ;
.data:0041378B                 db    ? ;
.data:0041378C                 db    ? ;
.data:0041378D                 db    ? ;
.data:0041378E                 db    ? ;
.data:0041378F                 db    ? ;
.data:00413790                 db    ? ;
.data:00413791                 db    ? ;
.data:00413792                 db    ? ;
.data:00413793                 db    ? ;
.data:00413794                 db    ? ;
.data:00413795                 db    ? ;
.data:00413796                 db    ? ;
.data:00413797                 db    ? ;
.data:00413798                 db    ? ;
.data:00413799                 db    ? ;
.data:0041379A                 db    ? ;
.data:0041379B                 db    ? ;
.data:0041379C                 db    ? ;
.data:0041379D                 db    ? ;
.data:0041379E                 db    ? ;
.data:0041379F                 db    ? ;
.data:004137A0                 db    ? ;
.data:004137A1                 db    ? ;
.data:004137A2                 db    ? ;
.data:004137A3                 db    ? ;
.data:004137A4 dword_4137A4    dd ?                    ; DATA XREF: pre_c_init+97↑r
.data:004137A8 dword_4137A8    dd ?                    ; DATA XREF: pre_cpp_init+A↑r
.data:004137AC dword_4137AC    dd ?                    ; DATA XREF: pre_cpp_init↑r
.data:004137B0 dword_4137B0    dd ?                    ; DATA XREF: pre_c_init+89↑r
.data:004137B4 byte_4137B4     db ?                    ; DATA XREF: sub_403B10+C↑w
.data:004137B5                 db    ? ;
.data:004137B6                 db    ? ;
.data:004137B7                 db    ? ;
.data:004137B8                 db    ? ;
.data:004137B9                 db    ? ;
.data:004137BA                 db    ? ;
.data:004137BB                 db    ? ;
.data:004137BC dword_4137BC    dd ?                    ; DATA XREF: sub_40D3F3+48↑w
.data:004137C0 ; WNDPROC dwNewLong
.data:004137C0 dwNewLong       dd ?                    ; DATA XREF: sub_40ADD0:loc_40AE3D↑r
.data:004137C0                                         ; sub_40AE70+76↑w ...
.data:004137C4 dword_4137C4    dd ?                    ; DATA XREF: sub_40ADD0+26↑r
.data:004137C4                                         ; sub_40ADD0+3A↑r ...
.data:004137C8 dword_4137C8    dd ?                    ; DATA XREF: sub_4040E0:loc_4042D4↑r
.data:004137C8                                         ; sub_407B60:loc_407C48↑r ...
.data:004137CC                 align 10h
.data:004137D0 dword_4137D0    dd ?                    ; DATA XREF: sub_40A650+13↑o
.data:004137D0                                         ; sub_40B6C0+54↑o ...
.data:004137D4                 align 8
.data:004137D8 dword_4137D8    dd ?                    ; DATA XREF: sub_4040E0+DC↑r
.data:004137D8                                         ; sub_407B60+84↑r ...
.data:004137DC                 db    ? ;
.data:004137DD                 db    ? ;
.data:004137DE                 db    ? ;
.data:004137DF                 db    ? ;
.data:004137E0                 db    ? ;
.data:004137E1                 db    ? ;
.data:004137E2                 db    ? ;
.data:004137E3                 db    ? ;
.data:004137E4                 db    ? ;
.data:004137E5                 db    ? ;
.data:004137E6                 db    ? ;
.data:004137E7                 db    ? ;
.data:004137E8                 db    ? ;
.data:004137E9                 db    ? ;
.data:004137EA                 db    ? ;
.data:004137EB                 db    ? ;
.data:004137EC                 db    ? ;
.data:004137ED                 db    ? ;
.data:004137EE                 db    ? ;
.data:004137EF                 db    ? ;
.data:004137F0                 db    ? ;
.data:004137F1                 db    ? ;
.data:004137F2                 db    ? ;
.data:004137F3                 db    ? ;
.data:004137F4                 db    ? ;
.data:004137F5                 db    ? ;
.data:004137F6                 db    ? ;
.data:004137F7                 db    ? ;
.data:004137F8                 db    ? ;
.data:004137F9                 db    ? ;
.data:004137FA                 db    ? ;
.data:004137FB                 db    ? ;
.data:004137FC                 db    ? ;
.data:004137FD                 db    ? ;
.data:004137FE                 db    ? ;
.data:004137FF                 db    ? ;
.data:00413800                 db    ? ;
.data:00413801                 db    ? ;
.data:00413802                 db    ? ;
.data:00413803                 db    ? ;
.data:00413804                 db    ? ;
.data:00413805                 db    ? ;
.data:00413806                 db    ? ;
.data:00413807                 db    ? ;
.data:00413808                 db    ? ;
.data:00413809                 db    ? ;
.data:0041380A                 db    ? ;
.data:0041380B                 db    ? ;
.data:0041380C                 db    ? ;
.data:0041380D                 db    ? ;
.data:0041380E                 db    ? ;
.data:0041380F                 db    ? ;
.data:00413810                 db    ? ;
.data:00413811                 db    ? ;
.data:00413812                 db    ? ;
.data:00413813                 db    ? ;
.data:00413814                 db    ? ;
.data:00413815                 db    ? ;
.data:00413816                 db    ? ;
.data:00413817                 db    ? ;
.data:00413818                 db    ? ;
.data:00413819                 db    ? ;
.data:0041381A                 db    ? ;
.data:0041381B                 db    ? ;
.data:0041381C                 db    ? ;
.data:0041381D                 db    ? ;
.data:0041381E                 db    ? ;
.data:0041381F                 db    ? ;
.data:00413820                 db    ? ;
.data:00413821                 db    ? ;
.data:00413822                 db    ? ;
.data:00413823                 db    ? ;
.data:00413824                 db    ? ;
.data:00413825                 db    ? ;
.data:00413826                 db    ? ;
.data:00413827                 db    ? ;
.data:00413828                 db    ? ;
.data:00413829                 db    ? ;
.data:0041382A                 db    ? ;
.data:0041382B                 db    ? ;
.data:0041382C                 db    ? ;
.data:0041382D                 db    ? ;
.data:0041382E                 db    ? ;
.data:0041382F                 db    ? ;
.data:00413830                 db    ? ;
.data:00413831                 db    ? ;
.data:00413832                 db    ? ;
.data:00413833                 db    ? ;
.data:00413834 dword_413834    dd ?                    ; DATA XREF: sub_40D3F3+58↑w
.data:00413838                 align 10h
.data:00413840 dword_413840    dd ?                    ; DATA XREF: sub_40D3F3+3E↑w
.data:00413844                 db    ? ;
.data:00413845                 db    ? ;
.data:00413846                 db    ? ;
.data:00413847                 db    ? ;
.data:00413848                 db    ? ;
.data:00413849                 db    ? ;
.data:0041384A                 db    ? ;
.data:0041384B                 db    ? ;
.data:0041384C                 db    ? ;
.data:0041384D                 db    ? ;
.data:0041384E                 db    ? ;
.data:0041384F                 db    ? ;
.data:00413850                 db    ? ;
.data:00413851                 db    ? ;
.data:00413852                 db    ? ;
.data:00413853                 db    ? ;
.data:00413854 dword_413854    dd ?                    ; DATA XREF: sub_40D3F3+80↑w
.data:00413858 dword_413858    dd ?                    ; DATA XREF: sub_40E983+E↑w
.data:00413858                                         ; sub_40F131+50↑o ...
.data:0041385C dword_41385C    dd ?                    ; DATA XREF: sub_40E983+2↑w
.data:00413860 dword_413860    dd ?                    ; DATA XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+17B↑r
.data:00413860                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+278↑w ...
.data:00413864 ; int dword_413864
.data:00413864 dword_413864    dd ?                    ; DATA XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+183↑r
.data:00413864                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+272↑w ...
.data:00413868                 align 10h
.data:00413870 dword_413870    dd ?                    ; DATA XREF: sub_40E983+15↑w
.data:00413874 dword_413874    dd ?                    ; DATA XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+27E↑w
.data:00413874                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+2FE↑w ...
.data:00413878 dword_413878    dd ?                    ; DATA XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+8E↑r
.data:00413878                                         ; CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+160↑r ...
.data:0041387C dword_41387C    dd ?                    ; DATA XREF: sub_40E983+3C↑w
.data:00413880 dword_413880    dd ?                    ; DATA XREF: sub_40E983+42↑w
.data:00413884 dword_413884    dd ?                    ; DATA XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+1FC↑r
.data:00413884                                         ; CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+209↑w ...
.data:00413888 dword_413888    dd ?                    ; DATA XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+1F0↑r
.data:00413888                                         ; CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+20E↑w ...
.data:0041388C                 db    ? ;
.data:0041388D                 db    ? ;
.data:0041388E                 db    ? ;
.data:0041388F                 db    ? ;
.data:00413890                 db    ? ;
.data:00413891                 db    ? ;
.data:00413892                 db    ? ;
.data:00413893                 db    ? ;
.data:00413894 dword_413894    dd ?                    ; DATA XREF: sub_40E983+4C↑w
.data:00413898 dword_413898    dd ?                    ; DATA XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+312↑w
.data:00413898                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void):loc_40A145↑w ...
.data:0041389C dword_41389C    dd ?                    ; DATA XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void):loc_409C5A↑r
.data:0041389C                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+28A↑r ...
.data:004138A0 dword_4138A0    dd ?                    ; DATA XREF: sub_40E983+58↑w
.data:004138A4 dword_4138A4    dd ?                    ; DATA XREF: sub_40E983+5E↑w
.data:004138A8 ; int Value
.data:004138A8 Value           dd ?                    ; DATA XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+261↑r
.data:004138A8                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+3FA↑w
.data:004138AC dword_4138AC    dd ?                    ; DATA XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+3FF↑w
.data:004138B0                 db    ? ;
.data:004138B1                 db    ? ;
.data:004138B2                 db    ? ;
.data:004138B3                 db    ? ;
.data:004138B4                 db    ? ;
.data:004138B5                 db    ? ;
.data:004138B6                 db    ? ;
.data:004138B7                 db    ? ;
.data:004138B8 dword_4138B8    dd ?                    ; DATA XREF: sub_40E983+68↑w
.data:004138BC dword_4138BC    dd ?                    ; DATA XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void):loc_40A1B4↑w
.data:004138BC                                         ; sub_40E983+6E↑w
.data:004138C0 dword_4138C0    dd ?                    ; DATA XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+A8↑r
.data:004138C0                                         ; CBootIniAdvancedDlg::SetDlgControlsFromBootState(void):loc_409CC6↑r ...
.data:004138C4 dword_4138C4    dd ?                    ; DATA XREF: sub_40E983+74↑w
.data:004138C8 dword_4138C8    dd ?                    ; DATA XREF: sub_40E983+7A↑w
.data:004138CC ; UINT uValue
.data:004138CC uValue          dd ?                    ; DATA XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+107↑r
.data:004138CC                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+57A↑w
.data:004138D0 dword_4138D0    dd ?                    ; DATA XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+57F↑w
.data:004138D4                 db    ? ;
.data:004138D5                 db    ? ;
.data:004138D6                 db    ? ;
.data:004138D7                 db    ? ;
.data:004138D8                 db    ? ;
.data:004138D9                 db    ? ;
.data:004138DA                 db    ? ;
.data:004138DB                 db    ? ;
.data:004138DC dword_4138DC    dd ?                    ; DATA XREF: sub_40E983+84↑w
.data:004138E0 dword_4138E0    dd ?                    ; DATA XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+573↑w
.data:004138E0                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+59D↑w ...
.data:004138E4 dword_4138E4    dd ?                    ; DATA XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+C2↑r
.data:004138E4                                         ; CBootIniAdvancedDlg::SetDlgControlsFromBootState(void):loc_409B71↑r ...
.data:004138E8 dword_4138E8    dd ?                    ; DATA XREF: sub_40E983+90↑w
.data:004138EC dword_4138EC    dd ?                    ; DATA XREF: sub_40E983+96↑w
.data:004138F0 ; LPCWSTR Block
.data:004138F0 Block           dd ?                    ; DATA XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+1B9↑r
.data:004138F0                                         ; CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+1D8↑r ...
.data:004138F4                 align 10h
.data:00413900 dword_413900    dd ?                    ; DATA XREF: sub_40E983+A0↑w
.data:00413904 dword_413904    dd ?                    ; DATA XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+372↑w
.data:00413904                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void):loc_40A074↑w ...
.data:00413908 dword_413908    dd ?                    ; DATA XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+1AC↑r
.data:00413908                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+378↑w ...
.data:0041390C ; HLOCAL hMem
.data:0041390C hMem            dd ?                    ; DATA XREF: CPageBootIni::SelectLine(int)+90↑r
.data:0041390C                                         ; sub_40AF10+4C↑r ...
.data:00413910 dword_413910    dd ?                    ; DATA XREF: sub_40F1A5+3C↑w
.data:00413910                                         ; sub_40F1A5+8B↑o ...
.data:00413914 dword_413914    dd ?                    ; DATA XREF: sub_40F1A5+8↑w
.data:00413918 dword_413918    dd ?                    ; DATA XREF: sub_40A9B6+54↑r
.data:00413918                                         ; sub_40B4E0+36↑w ...
.data:0041391C dword_41391C    dd ?                    ; DATA XREF: sub_40B4E0+20↑w
.data:0041391C                                         ; sub_40B530+6D↑w ...
.data:00413920                 db    ? ;
.data:00413921                 db    ? ;
.data:00413922                 db    ? ;
.data:00413923                 db    ? ;
.data:00413924                 db    ? ;
.data:00413925                 db    ? ;
.data:00413926                 db    ? ;
.data:00413927                 db    ? ;
.data:00413928 dword_413928    dd ?                    ; DATA XREF: sub_40F1A5+42↑w
.data:0041392C dword_41392C    dd ?                    ; DATA XREF: sub_40B4E0+29↑w
.data:0041392C                                         ; sub_40B530+73↑w ...
.data:00413930 dword_413930    dd ?                    ; DATA XREF: sub_40A9B6+43↑r
.data:00413930                                         ; sub_40B4E0+2F↑w ...
.data:00413934 dword_413934    dd ?                    ; DATA XREF: sub_40F1A5+4E↑w
.data:00413938 dword_413938    dd ?                    ; DATA XREF: sub_40F1A5+13↑w
.data:0041393C unk_41393C      db    ? ;               ; DATA XREF: CPageBootIni::SelectLine(int)+2EC↑o
.data:0041393C                                         ; sub_40AF10+68↑o ...
.data:0041393D                 db    ? ;
.data:0041393E                 db    ? ;
.data:0041393F                 db    ? ;
.data:00413940                 db    ? ;
.data:00413941                 db    ? ;
.data:00413942                 db    ? ;
.data:00413943                 db    ? ;
.data:00413944                 db    ? ;
.data:00413945                 db    ? ;
.data:00413946                 db    ? ;
.data:00413947                 db    ? ;
.data:00413948                 db    ? ;
.data:00413949                 db    ? ;
.data:0041394A                 db    ? ;
.data:0041394B                 db    ? ;
.data:0041394C dword_41394C    dd ?                    ; DATA XREF: sub_40F1A5+54↑w
.data:00413950 dword_413950    dd ?                    ; DATA XREF: sub_40AF10+AC↑w
.data:00413950                                         ; sub_40B770+60↑w ...
.data:00413954 dword_413954    dd ?                    ; DATA XREF: sub_40AF10+B2↑w
.data:00413954                                         ; sub_40B770+65↑w ...
.data:00413958 dword_413958    dd ?                    ; DATA XREF: sub_40F1A5+60↑w
.data:0041395C dword_41395C    dd ?                    ; DATA XREF: sub_40F1A5+66↑w
.data:00413960 dword_413960    dd ?                    ; DATA XREF: sub_40AF10:loc_40AFE4↑r
.data:00413960                                         ; sub_40AF10+FB↑r ...
.data:00413964                 align 10h
.data:00413970 dword_413970    dd ?                    ; DATA XREF: sub_40AF10+C6↑r
.data:00413970                                         ; sub_40AF10+E5↑r ...
.data:00413974 dword_413974    dd ?                    ; DATA XREF: sub_40AF10:loc_40B02D↑w
.data:00413974                                         ; sub_40F1A5+76↑w
.data:00413978 dword_413978    dd ?                    ; DATA XREF: sub_40F1A5+2A↑w
.data:0041397C ; LPCWSTR lpPathName
.data:0041397C lpPathName      dd ?                    ; DATA XREF: sub_403AF0↑o
.data:0041397C                                         ; sub_40D856+5A↑o ...
.data:00413980 dword_413980    dd ?                    ; DATA XREF: sub_403AC0+2↑o
.data:00413980                                         ; sub_403AC0+12↑w ...
.data:00413984                 db    ? ;
.data:00413985                 db    ? ;
.data:00413986                 db    ? ;
.data:00413987                 db    ? ;
.data:00413988                 db    ? ;
.data:00413989                 db    ? ;
.data:0041398A                 db    ? ;
.data:0041398B                 db    ? ;
.data:0041398C                 db    ? ;
.data:0041398D                 db    ? ;
.data:0041398E                 db    ? ;
.data:0041398F                 db    ? ;
.data:00413990                 db    ? ;
.data:00413991                 db    ? ;
.data:00413992                 db    ? ;
.data:00413993                 db    ? ;
.data:00413994                 db    ? ;
.data:00413995                 db    ? ;
.data:00413996                 db    ? ;
.data:00413997                 db    ? ;
.data:00413998                 db    ? ;
.data:00413999                 db    ? ;
.data:0041399A                 db    ? ;
.data:0041399B                 db    ? ;
.data:0041399C                 db    ? ;
.data:0041399D                 db    ? ;
.data:0041399E                 db    ? ;
.data:0041399F                 db    ? ;
.data:004139A0                 db    ? ;
.data:004139A1                 db    ? ;
.data:004139A2                 db    ? ;
.data:004139A3                 db    ? ;
.data:004139A4                 db    ? ;
.data:004139A5                 db    ? ;
.data:004139A6                 db    ? ;
.data:004139A7                 db    ? ;
.data:004139A8                 db    ? ;
.data:004139A9                 db    ? ;
.data:004139AA                 db    ? ;
.data:004139AB                 db    ? ;
.data:004139AC                 db    ? ;
.data:004139AD                 db    ? ;
.data:004139AE                 db    ? ;
.data:004139AF                 db    ? ;
.data:004139B0                 db    ? ;
.data:004139B1                 db    ? ;
.data:004139B2                 db    ? ;
.data:004139B3                 db    ? ;
.data:004139B4                 db    ? ;
.data:004139B5                 db    ? ;
.data:004139B6                 db    ? ;
.data:004139B7                 db    ? ;
.data:004139B8                 db    ? ;
.data:004139B9                 db    ? ;
.data:004139BA                 db    ? ;
.data:004139BB                 db    ? ;
.data:004139BC                 db    ? ;
.data:004139BD                 db    ? ;
.data:004139BE                 db    ? ;
.data:004139BF                 db    ? ;
.data:004139C0                 db    ? ;
.data:004139C1                 db    ? ;
.data:004139C2                 db    ? ;
.data:004139C3                 db    ? ;
.data:004139C4                 db    ? ;
.data:004139C5                 db    ? ;
.data:004139C6                 db    ? ;
.data:004139C7                 db    ? ;
.data:004139C8                 db    ? ;
.data:004139C9                 db    ? ;
.data:004139CA                 db    ? ;
.data:004139CB                 db    ? ;
.data:004139CC                 db    ? ;
.data:004139CD                 db    ? ;
.data:004139CE                 db    ? ;
.data:004139CF                 db    ? ;
.data:004139D0                 db    ? ;
.data:004139D1                 db    ? ;
.data:004139D2                 db    ? ;
.data:004139D3                 db    ? ;
.data:004139D4                 db    ? ;
.data:004139D5                 db    ? ;
.data:004139D6                 db    ? ;
.data:004139D7                 db    ? ;
.data:004139D8                 db    ? ;
.data:004139D9                 db    ? ;
.data:004139DA                 db    ? ;
.data:004139DB                 db    ? ;
.data:004139DC                 db    ? ;
.data:004139DD                 db    ? ;
.data:004139DE                 db    ? ;
.data:004139DF                 db    ? ;
.data:004139E0                 db    ? ;
.data:004139E1                 db    ? ;
.data:004139E2                 db    ? ;
.data:004139E3                 db    ? ;
.data:004139E4                 db    ? ;
.data:004139E5                 db    ? ;
.data:004139E6                 db    ? ;
.data:004139E7                 db    ? ;
.data:004139E8                 db    ? ;
.data:004139E9                 db    ? ;
.data:004139EA                 db    ? ;
.data:004139EB                 db    ? ;
.data:004139EC                 db    ? ;
.data:004139ED                 db    ? ;
.data:004139EE                 db    ? ;
.data:004139EF                 db    ? ;
.data:004139F0                 db    ? ;
.data:004139F1                 db    ? ;
.data:004139F2                 db    ? ;
.data:004139F3                 db    ? ;
.data:004139F4                 db    ? ;
.data:004139F5                 db    ? ;
.data:004139F6                 db    ? ;
.data:004139F7                 db    ? ;
.data:004139F8                 db    ? ;
.data:004139F9                 db    ? ;
.data:004139FA                 db    ? ;
.data:004139FB                 db    ? ;
.data:004139FC                 db    ? ;
.data:004139FD                 db    ? ;
.data:004139FE                 db    ? ;
.data:004139FF                 db    ? ;
.data:00413A00                 db    ? ;
.data:00413A01                 db    ? ;
.data:00413A02                 db    ? ;
.data:00413A03                 db    ? ;
.data:00413A04                 db    ? ;
.data:00413A05                 db    ? ;
.data:00413A06                 db    ? ;
.data:00413A07                 db    ? ;
.data:00413A08                 db    ? ;
.data:00413A09                 db    ? ;
.data:00413A0A                 db    ? ;
.data:00413A0B                 db    ? ;
.data:00413A0C                 db    ? ;
.data:00413A0D                 db    ? ;
.data:00413A0E                 db    ? ;
.data:00413A0F                 db    ? ;
.data:00413A10                 db    ? ;
.data:00413A11                 db    ? ;
.data:00413A12                 db    ? ;
.data:00413A13                 db    ? ;
.data:00413A14                 db    ? ;
.data:00413A15                 db    ? ;
.data:00413A16                 db    ? ;
.data:00413A17                 db    ? ;
.data:00413A18                 db    ? ;
.data:00413A19                 db    ? ;
.data:00413A1A                 db    ? ;
.data:00413A1B                 db    ? ;
.data:00413A1C                 db    ? ;
.data:00413A1D                 db    ? ;
.data:00413A1E                 db    ? ;
.data:00413A1F                 db    ? ;
.data:00413A20                 db    ? ;
.data:00413A21                 db    ? ;
.data:00413A22                 db    ? ;
.data:00413A23                 db    ? ;
.data:00413A24                 db    ? ;
.data:00413A25                 db    ? ;
.data:00413A26                 db    ? ;
.data:00413A27                 db    ? ;
.data:00413A28                 db    ? ;
.data:00413A29                 db    ? ;
.data:00413A2A                 db    ? ;
.data:00413A2B                 db    ? ;
.data:00413A2C                 db    ? ;
.data:00413A2D                 db    ? ;
.data:00413A2E                 db    ? ;
.data:00413A2F                 db    ? ;
.data:00413A30                 db    ? ;
.data:00413A31                 db    ? ;
.data:00413A32                 db    ? ;
.data:00413A33                 db    ? ;
.data:00413A34                 db    ? ;
.data:00413A35                 db    ? ;
.data:00413A36                 db    ? ;
.data:00413A37                 db    ? ;
.data:00413A38                 db    ? ;
.data:00413A39                 db    ? ;
.data:00413A3A                 db    ? ;
.data:00413A3B                 db    ? ;
.data:00413A3C                 db    ? ;
.data:00413A3D                 db    ? ;
.data:00413A3E                 db    ? ;
.data:00413A3F                 db    ? ;
.data:00413A40                 db    ? ;
.data:00413A41                 db    ? ;
.data:00413A42                 db    ? ;
.data:00413A43                 db    ? ;
.data:00413A44                 db    ? ;
.data:00413A45                 db    ? ;
.data:00413A46                 db    ? ;
.data:00413A47                 db    ? ;
.data:00413A48                 db    ? ;
.data:00413A49                 db    ? ;
.data:00413A4A                 db    ? ;
.data:00413A4B                 db    ? ;
.data:00413A4C ; PVOID dword_413A4C
.data:00413A4C dword_413A4C    dd ?                    ; DATA XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long__+78↑o
.data:00413A4C                                         ; GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___0+78↑o ...
.data:00413A50 ; PVOID Ptr
.data:00413A50 Ptr             dd ?                    ; DATA XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long__+F↑r
.data:00413A50                                         ; GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long__+63↑o ...
.data:00413A54 ; PVOID dword_413A54
.data:00413A54 dword_413A54    dd ?                    ; DATA XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long__+4E↑o
.data:00413A54                                         ; GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___0+4E↑o ...
.data:00413A58 byte_413A58     db ?                    ; DATA XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long__+6↑r
.data:00413A58                                         ; GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long__+9B↑w ...
.data:00413A59                 align 4
.data:00413A5C ; PVOID dword_413A5C
.data:00413A5C dword_413A5C    dd ?                    ; DATA XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long__+39↑o
.data:00413A5C                                         ; GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___0+F↑r ...
.data:00413A60 dword_413A60    dd ?                    ; DATA XREF: sub_4072C9:loc_407311↑r
.data:00413A60                                         ; sub_407510:loc_40757D↑r ...
.data:00413A64 dword_413A64    dd ?                    ; DATA XREF: sub_4072C9+1B↑r
.data:00413A64                                         ; sub_407510:loc_407559↑r ...
.data:00413A68 dword_413A68    dd ?                    ; DATA XREF: sub_407280+B↑r
.data:00413A68                                         ; sub_4072C9:loc_407337↑r ...
.data:00413A6C dword_413A6C    dd ?                    ; DATA XREF: CPageBootIni::OnApply(void)+248↑r
.data:00413A6C                                         ; CPageBootIni::OnApply(void)+31D↑r ...
.data:00413A70 dword_413A70    dd ?                    ; DATA XREF: sub_40AE70+20↑r
.data:00413A70                                         ; sub_40C7B0+1FC↑w
.data:00413A74 unk_413A74      db    ? ;               ; DATA XREF: sub_40D3F3+38↑o
.data:00413A75                 db    ? ;
.data:00413A76                 db    ? ;
.data:00413A77                 db    ? ;
.data:00413A78                 db    ? ;
.data:00413A79                 db    ? ;
.data:00413A7A                 db    ? ;
.data:00413A7B                 db    ? ;
.data:00413A7C                 db    ? ;
.data:00413A7D                 db    ? ;
.data:00413A7E                 db    ? ;
.data:00413A7F                 db    ? ;
.data:00413A80                 db    ? ;
.data:00413A81                 db    ? ;
.data:00413A82                 db    ? ;
.data:00413A83                 db    ? ;
.data:00413A84                 db    ? ;
.data:00413A85                 db    ? ;
.data:00413A86                 db    ? ;
.data:00413A87                 db    ? ;
.data:00413A88                 db    ? ;
.data:00413A89                 db    ? ;
.data:00413A8A                 db    ? ;
.data:00413A8B                 db    ? ;
.data:00413A8C                 db    ? ;
.data:00413A8D                 db    ? ;
.data:00413A8E                 db    ? ;
.data:00413A8F                 db    ? ;
.data:00413A90                 db    ? ;
.data:00413A91                 db    ? ;
.data:00413A92                 db    ? ;
.data:00413A93                 db    ? ;
.data:00413A94                 db    ? ;
.data:00413A95                 db    ? ;
.data:00413A96                 db    ? ;
.data:00413A97                 db    ? ;
.data:00413A98 dword_413A98    dd ?                    ; DATA XREF: sub_40CD8D:loc_40CE6F↑w
.data:00413A98                                         ; sub_40CE7B:loc_40CF2A↑r ...
.data:00413A9C ; PSLIST_HEADER ListHead
.data:00413A9C ListHead        dd ?                    ; DATA XREF: __AllocStdCallThunk_cmn(void)↑r
.data:00413A9C                                         ; __AllocStdCallThunk_cmn(void)+14↑r ...
.data:00413AA0 dword_413AA0    dd ?                    ; DATA XREF: sub_40A956+4F↑r
.data:00413AA0                                         ; sub_40AF10+78↑r ...
.data:00413AA4 unk_413AA4      db    ? ;               ; DATA XREF: start:loc_40FFD9↑o
.data:00413AA4                                         ; start-179↑o
.data:00413AA5                 db    ? ;
.data:00413AA6                 db    ? ;
.data:00413AA7                 db    ? ;
.data:00413AA8 dword_413AA8    dd ?                    ; DATA XREF: start:loc_40FFF0↑r
.data:00413AA8                                         ; start:loc_41000F↑r ...
.data:00413AAC dword_413AAC    dd ?                    ; DATA XREF: pre_c_init+73↑w
.data:00413AAC                                         ; __onexit+47↑r ...
.data:00413AB0 dword_413AB0    dd ?                    ; DATA XREF: pre_c_init+7A↑w
.data:00413AB0                                         ; __onexit+10↑r ...
.data:00413AB4 ; char pTarget[]
.data:00413AB4 pTarget         dd ?                    ; DATA XREF: start:loc_41006E↑r
.data:00413AB4                                         ; start-169↑o ...
.data:00413AB8                 align 800h
.data:00413AB8 _data           ends
.data:00413AB8
.idata:00414000 ; Section 3. (virtual address 00014000)
.idata:00414000 ; Virtual size                  : 00001BA6 (   7078.)
.idata:00414000 ; Section size in file          : 00001C00 (   7168.)
.idata:00414000 ; Offset to raw data for section: 00012200
.idata:00414000 ; Flags 40000040: Data Readable
.idata:00414000 ; Alignment     : default
.idata:00414000 ;
.idata:00414000 ; Imports from ADVAPI32.dll
.idata:00414000 ;
.idata:00414000 ; ===========================================================================
.idata:00414000
.idata:00414000 ; Segment type: Externs
.idata:00414000 ; _idata
.idata:00414000 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:00414000                 extrn RegCloseKey:dword ; CODE XREF: sub_403C90+5E↑p
.idata:00414000                                         ; sub_403CFC+5E↑p ...
.idata:00414004 ; LSTATUS (__stdcall *RegQueryValueExW)(HKEY hKey, LPCWSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:00414004                 extrn RegQueryValueExW:dword
.idata:00414004                                         ; CODE XREF: sub_403D68+24↑p
.idata:00414004                                         ; sub_407096+52↑p
.idata:00414004                                         ; DATA XREF: ...
.idata:00414008 ; LSTATUS (__stdcall *RegSetValueExW)(HKEY hKey, LPCWSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE *lpData, DWORD cbData)
.idata:00414008                 extrn RegSetValueExW:dword
.idata:00414008                                         ; CODE XREF: sub_403CFC+57↑p
.idata:00414008                                         ; sub_405AC6+CE↑p ...
.idata:0041400C ; SC_HANDLE (__stdcall *OpenSCManagerW)(LPCWSTR lpMachineName, LPCWSTR lpDatabaseName, DWORD dwDesiredAccess)
.idata:0041400C                 extrn OpenSCManagerW:dword
.idata:0041400C                                         ; CODE XREF: sub_404316+18↑p
.idata:0041400C                                         ; sub_404CA7+35↑p ...
.idata:00414010 ; BOOL (__stdcall *EnumServicesStatusW)(SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle)
.idata:00414010                 extrn EnumServicesStatusW:dword
.idata:00414010                                         ; CODE XREF: sub_404316+41↑p
.idata:00414010                                         ; sub_404316+A1↑p
.idata:00414010                                         ; DATA XREF: ...
.idata:00414014 ; SC_HANDLE (__stdcall *OpenServiceW)(SC_HANDLE hSCManager, LPCWSTR lpServiceName, DWORD dwDesiredAccess)
.idata:00414014                 extrn OpenServiceW:dword
.idata:00414014                                         ; CODE XREF: sub_404316+1EC↑p
.idata:00414014                                         ; sub_404CA7+AC↑p
.idata:00414014                                         ; DATA XREF: ...
.idata:00414018 ; BOOL (__stdcall *CloseServiceHandle)(SC_HANDLE hSCObject)
.idata:00414018                 extrn CloseServiceHandle:dword
.idata:00414018                                         ; CODE XREF: sub_404316+212↑p
.idata:00414018                                         ; sub_404316:loc_404533↑p ...
.idata:0041401C ; BOOL (__stdcall *ChangeServiceConfigW)(SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword, LPCWSTR lpDisplayName)
.idata:0041401C                 extrn ChangeServiceConfigW:dword
.idata:0041401C                                         ; CODE XREF: sub_404CA7+122↑p
.idata:0041401C                                         ; sub_404CA7+15B↑p
.idata:0041401C                                         ; DATA XREF: ...
.idata:00414020 ; BOOL (__stdcall *QueryServiceConfigW)(SC_HANDLE hService, LPQUERY_SERVICE_CONFIGW lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
.idata:00414020                 extrn QueryServiceConfigW:dword
.idata:00414020                                         ; CODE XREF: sub_404EFD+1F↑p
.idata:00414020                                         ; sub_404EFD+80↑p
.idata:00414020                                         ; DATA XREF: ...
.idata:00414024 ; LSTATUS (__stdcall *RegEnumKeyExW)(HKEY hKey, DWORD dwIndex, LPWSTR lpName, LPDWORD lpcchName, LPDWORD lpReserved, LPWSTR lpClass, LPDWORD lpcchClass, PFILETIME lpftLastWriteTime)
.idata:00414024                 extrn RegEnumKeyExW:dword
.idata:00414024                                         ; CODE XREF: sub_406B79+D8↑p
.idata:00414024                                         ; DATA XREF: sub_406B79+D8↑r
.idata:00414028 ; LSTATUS (__stdcall *RegOpenKeyExW)(HKEY hKey, LPCWSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:00414028                 extrn RegOpenKeyExW:dword
.idata:00414028                                         ; CODE XREF: OpenRegKey(ushort const *,ushort const *,ulong)+46↑p
.idata:00414028                                         ; OpenRegKey(ushort const *,ushort const *,ulong)+73↑p ...
.idata:0041402C ; LSTATUS (__stdcall *RegCreateKeyExW)(HKEY hKey, LPCWSTR lpSubKey, DWORD Reserved, LPWSTR lpClass, DWORD dwOptions, REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition)
.idata:0041402C                 extrn RegCreateKeyExW:dword
.idata:0041402C                                         ; CODE XREF: OpenRegKey(ushort const *,ushort const *,ulong)+93↑p
.idata:0041402C                                         ; sub_407115+2F↑p ...
.idata:00414030 ; LSTATUS (__stdcall *RegDeleteValueW)(HKEY hKey, LPCWSTR lpValueName)
.idata:00414030                 extrn RegDeleteValueW:dword
.idata:00414030                                         ; CODE XREF: sub_40D0ED+39↑p
.idata:00414030                                         ; DATA XREF: sub_40D0ED+39↑r
.idata:00414034 ; BOOL (__stdcall *OpenProcessToken)(HANDLE ProcessHandle, DWORD DesiredAccess, PHANDLE TokenHandle)
.idata:00414034                 extrn OpenProcessToken:dword
.idata:00414034                                         ; CODE XREF: sub_40D13E+5D↑p
.idata:00414034                                         ; DATA XREF: sub_40D13E+5D↑r
.idata:00414038 ; BOOL (__stdcall *LookupPrivilegeValueW)(LPCWSTR lpSystemName, LPCWSTR lpName, PLUID lpLuid)
.idata:00414038                 extrn LookupPrivilegeValueW:dword
.idata:00414038                                         ; CODE XREF: sub_40D13E+8C↑p
.idata:00414038                                         ; DATA XREF: sub_40D13E+8C↑r
.idata:0041403C ; BOOL (__stdcall *AdjustTokenPrivileges)(HANDLE TokenHandle, BOOL DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, DWORD BufferLength, PTOKEN_PRIVILEGES PreviousState, PDWORD ReturnLength)
.idata:0041403C                 extrn AdjustTokenPrivileges:dword
.idata:0041403C                                         ; CODE XREF: sub_40D13E+AB↑p
.idata:0041403C                                         ; DATA XREF: sub_40D13E+AB↑r
.idata:00414040 ; DWORD (__stdcall *InitiateShutdownW)(LPWSTR lpMachineName, LPWSTR lpMessage, DWORD dwGracePeriod, DWORD dwShutdownFlags, DWORD dwReason)
.idata:00414040                 extrn InitiateShutdownW:dword
.idata:00414040                                         ; CODE XREF: sub_40D13E+128↑p
.idata:00414040                                         ; DATA XREF: sub_40D13E+128↑r
.idata:00414044
.idata:00414048 ;
.idata:00414048 ; Imports from ATL.DLL
.idata:00414048 ;
.idata:00414048                 extrn AtlAxDialogBoxW:dword
.idata:00414048                                         ; CODE XREF: sub_40B6C0+6E↑p
.idata:00414048                                         ; sub_40D13E+113↑p
.idata:00414048                                         ; DATA XREF: ...
.idata:00414048                                         ; Import by ordinal 35
.idata:0041404C                 extrn AtlModuleExtractCreateWndData:dword
.idata:0041404C                                         ; CODE XREF: sub_40A650+18↑p
.idata:0041404C                                         ; DATA XREF: sub_40A650+18↑r
.idata:0041404C                                         ; Import by ordinal 44
.idata:00414050                 extrn AtlModuleRevokeClassObjects:dword
.idata:00414050                                         ; CODE XREF: sub_40D3B0+15↑p
.idata:00414050                                         ; DATA XREF: sub_40D3B0+15↑r
.idata:00414050                                         ; Import by ordinal 20
.idata:00414054                 extrn AtlModuleTerm:dword
.idata:00414054                                         ; CODE XREF: sub_40D3B0+1C↑p
.idata:00414054                                         ; sub_40D3F3+104↑p
.idata:00414054                                         ; DATA XREF: ...
.idata:00414054                                         ; Import by ordinal 21
.idata:00414058                 extrn AtlModuleInit:dword
.idata:00414058                                         ; CODE XREF: sub_40D3F3+62↑p
.idata:00414058                                         ; DATA XREF: sub_40D3F3+62↑r
.idata:00414058                                         ; Import by ordinal 16
.idata:0041405C                 extrn AtlModuleUpdateRegistryFromResourceD:dword
.idata:0041405C                                         ; CODE XREF: sub_40D3F3+139↑p
.idata:0041405C                                         ; sub_40D3F3+156↑p
.idata:0041405C                                         ; DATA XREF: ...
.idata:0041405C                                         ; Import by ordinal 23
.idata:00414060                 extrn AtlModuleUnregisterServerEx:dword
.idata:00414060                                         ; CODE XREF: sub_40D3F3+160↑p
.idata:00414060                                         ; DATA XREF: sub_40D3F3+160↑r
.idata:00414060                                         ; Import by ordinal 57
.idata:00414064                 extrn AtlModuleRegisterServer:dword
.idata:00414064                                         ; CODE XREF: sub_40D3F3+143↑p
.idata:00414064                                         ; DATA XREF: sub_40D3F3+143↑r
.idata:00414064                                         ; Import by ordinal 18
.idata:00414068                 extrn AtlModuleRegisterClassObjects:dword
.idata:00414068                                         ; CODE XREF: sub_40D3F3+F9↑p
.idata:00414068                                         ; DATA XREF: sub_40D3F3+F9↑r
.idata:00414068                                         ; Import by ordinal 17
.idata:0041406C                 extrn AtlModuleAddCreateWndData:dword
.idata:0041406C                                         ; CODE XREF: sub_40B6C0+59↑p
.idata:0041406C                                         ; sub_40D13E+FE↑p
.idata:0041406C                                         ; DATA XREF: ...
.idata:0041406C                                         ; Import by ordinal 43
.idata:00414070
.idata:00414074 ;
.idata:00414074 ; Imports from GDI32.dll
.idata:00414074 ;
.idata:00414074 ; BOOL (__stdcall *GetTextMetricsW)(HDC hdc, LPTEXTMETRICW lptm)
.idata:00414074                 extrn GetTextMetricsW:dword
.idata:00414074                                         ; CODE XREF: sub_40A747+63↑p
.idata:00414074                                         ; DATA XREF: sub_40A747+63↑r ...
.idata:00414078 ; HGDIOBJ (__stdcall *SelectObject)(HDC hdc, HGDIOBJ h)
.idata:00414078                 extrn SelectObject:dword
.idata:00414078                                         ; CODE XREF: sub_40A747+51↑p
.idata:00414078                                         ; sub_40A747+BB↑p
.idata:00414078                                         ; DATA XREF: ...
.idata:0041407C ; BOOL (__stdcall *GetTextExtentPoint32W)(HDC hdc, LPCWSTR lpString, int c, LPSIZE psizl)
.idata:0041407C                 extrn GetTextExtentPoint32W:dword
.idata:0041407C                                         ; CODE XREF: sub_40A747+8B↑p
.idata:0041407C                                         ; DATA XREF: sub_40A747+8B↑r
.idata:00414080
.idata:00414084 ;
.idata:00414084 ; Imports from KERNEL32.dll
.idata:00414084 ;
.idata:00414084 ; BOOL (__stdcall *GlobalUnlock)(HGLOBAL hMem)
.idata:00414084                 extrn GlobalUnlock:dword
.idata:00414084                                         ; CODE XREF: sub_408D34+104↑p
.idata:00414084                                         ; DATA XREF: sub_408D34+104↑r ...
.idata:00414088 ; HGLOBAL (__stdcall *GlobalFree)(HGLOBAL hMem)
.idata:00414088                 extrn GlobalFree:dword  ; CODE XREF: sub_408D34+113↑p
.idata:00414088                                         ; DATA XREF: sub_408D34+113↑r
.idata:0041408C ; HANDLE (__stdcall *FindFirstFileW)(LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData)
.idata:0041408C                 extrn FindFirstFileW:dword
.idata:0041408C                                         ; CODE XREF: sub_408E79+8B↑p
.idata:0041408C                                         ; sub_40C709+22↑p
.idata:0041408C                                         ; DATA XREF: ...
.idata:00414090 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:00414090                 extrn FindClose:dword   ; CODE XREF: sub_408E79+B2↑p
.idata:00414090                                         ; sub_40C709+2E↑p
.idata:00414090                                         ; DATA XREF: ...
.idata:00414094 ; void (__stdcall *GetSystemInfo)(LPSYSTEM_INFO lpSystemInfo)
.idata:00414094                 extrn GetSystemInfo:dword
.idata:00414094                                         ; CODE XREF: sub_4093CA+22↑p
.idata:00414094                                         ; DATA XREF: sub_4093CA+22↑r
.idata:00414098 ; BOOL (__stdcall *GetPhysicallyInstalledSystemMemory)(PULONGLONG TotalMemoryInKilobytes)
.idata:00414098                 extrn GetPhysicallyInstalledSystemMemory:dword
.idata:00414098                                         ; CODE XREF: sub_4093CA+180↑p
.idata:00414098                                         ; DATA XREF: sub_4093CA+180↑r
.idata:0041409C ; BOOL (__stdcall *GlobalMemoryStatusEx)(LPMEMORYSTATUSEX lpBuffer)
.idata:0041409C                 extrn GlobalMemoryStatusEx:dword
.idata:0041409C                                         ; CODE XREF: sub_4093CA+19D↑p
.idata:0041409C                                         ; DATA XREF: sub_4093CA+19D↑r
.idata:004140A0 ; HMODULE (__stdcall *LoadLibraryW)(LPCWSTR lpLibFileName)
.idata:004140A0                 extrn LoadLibraryW:dword
.idata:004140A0                                         ; CODE XREF: sub_40B860+50↑p
.idata:004140A0                                         ; sub_40D567+1A↑p
.idata:004140A0                                         ; DATA XREF: ...
.idata:004140A4 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:004140A4                 extrn FreeLibrary:dword ; CODE XREF: sub_40B860+223↑p
.idata:004140A4                                         ; sub_40D567+73↑p
.idata:004140A4                                         ; DATA XREF: ...
.idata:004140A8 ; BOOL (__stdcall *DeleteFileW)(LPCWSTR lpFileName)
.idata:004140A8                 extrn DeleteFileW:dword ; CODE XREF: CPageBootIni::OnApply(void)+1FC↑p
.idata:004140A8                                         ; CPageBootIni::OnApply(void)+3CD↑p ...
.idata:004140AC ; DWORD (__stdcall *FormatMessageW)(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPWSTR lpBuffer, DWORD nSize, va_list *Arguments)
.idata:004140AC                 extrn FormatMessageW:dword
.idata:004140AC                                         ; CODE XREF: CPageBootIni::OnApply(void)+2CC↑p
.idata:004140AC                                         ; sub_40D567+4F↑p
.idata:004140AC                                         ; DATA XREF: ...
.idata:004140B0 ; HLOCAL (__stdcall *LocalFree)(HLOCAL hMem)
.idata:004140B0                 extrn LocalFree:dword   ; CODE XREF: CPageBootIni::OnApply(void)+1D3↑p
.idata:004140B0                                         ; CPageBootIni::OnApply(void)+300↑p ...
.idata:004140B4 ; BOOL (__stdcall *HeapSetInformation)(HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength)
.idata:004140B4                 extrn HeapSetInformation:dword
.idata:004140B4                                         ; CODE XREF: sub_40C7B0+18↑p
.idata:004140B4                                         ; DATA XREF: sub_40C7B0+18↑r
.idata:004140B8 ; HANDLE (__stdcall *OpenProcess)(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId)
.idata:004140B8                 extrn OpenProcess:dword ; CODE XREF: sub_40D13E+43↑p
.idata:004140B8                                         ; DATA XREF: sub_40D13E+43↑r
.idata:004140BC ; DWORD (__stdcall *GetCurrentProcessId)()
.idata:004140BC                 extrn GetCurrentProcessId:dword
.idata:004140BC                                         ; CODE XREF: sub_40D13E+34↑p
.idata:004140BC                                         ; ___security_init_cookie+45↑p
.idata:004140BC                                         ; DATA XREF: ...
.idata:004140C0 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:004140C0                 extrn CloseHandle:dword ; CODE XREF: sub_40C7B0+8D↑p
.idata:004140C0                                         ; sub_40D13E+1F5↑p ...
.idata:004140C4 ; LPVOID (__stdcall *LockResource)(HGLOBAL hResData)
.idata:004140C4                 extrn LockResource:dword
.idata:004140C4                                         ; CODE XREF: sub_408D34+66↑p
.idata:004140C4                                         ; DATA XREF: sub_408D34+66↑r
.idata:004140C8 ; LPWSTR (__stdcall *GetCommandLineW)()
.idata:004140C8                 extrn GetCommandLineW:dword
.idata:004140C8                                         ; CODE XREF: sub_40D3F3+85↑p
.idata:004140C8                                         ; DATA XREF: sub_40D3F3+85↑r
.idata:004140CC ; int (__stdcall *CompareStringW)(LCID Locale, DWORD dwCmpFlags, PCNZWCH lpString1, int cchCount1, PCNZWCH lpString2, int cchCount2)
.idata:004140CC                 extrn CompareStringW:dword
.idata:004140CC                                         ; CODE XREF: sub_40D3F3+B7↑p
.idata:004140CC                                         ; sub_40D3F3+D4↑p
.idata:004140CC                                         ; DATA XREF: ...
.idata:004140D0 ; BOOL (__stdcall *CreateDirectoryW)(LPCWSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:004140D0                 extrn CreateDirectoryW:dword
.idata:004140D0                                         ; CODE XREF: sub_40D856+B8↑p
.idata:004140D0                                         ; DATA XREF: sub_40D856+B8↑r
.idata:004140D4 ; HANDLE (__stdcall *CreateSemaphoreW)(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCWSTR lpName)
.idata:004140D4                 extrn CreateSemaphoreW:dword
.idata:004140D4                                         ; CODE XREF: sub_40C7B0+6A↑p
.idata:004140D4                                         ; DATA XREF: sub_40C7B0+6A↑r
.idata:004140D8 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:004140D8                 extrn MultiByteToWideChar:dword
.idata:004140D8                                         ; CODE XREF: sub_40DC59+81↑p
.idata:004140D8                                         ; DATA XREF: sub_40DC59+81↑r
.idata:004140DC ; int (__stdcall *WideCharToMultiByte)(UINT CodePage, DWORD dwFlags, LPCWCH lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCCH lpDefaultChar, LPBOOL lpUsedDefaultChar)
.idata:004140DC                 extrn WideCharToMultiByte:dword
.idata:004140DC                                         ; CODE XREF: sub_40DDA3+3E↑p
.idata:004140DC                                         ; DATA XREF: sub_40DDA3+3E↑r
.idata:004140E0 ; int (__stdcall *lstrcmpiW)(LPCWSTR lpString1, LPCWSTR lpString2)
.idata:004140E0                 extrn lstrcmpiW:dword   ; CODE XREF: sub_40DE06+E4↑p
.idata:004140E0                                         ; DATA XREF: sub_40DE06+E4↑r
.idata:004140E4 ; LPVOID (__stdcall *GlobalLock)(HGLOBAL hMem)
.idata:004140E4                 extrn GlobalLock:dword  ; CODE XREF: sub_408D34+A2↑p
.idata:004140E4                                         ; DATA XREF: sub_408D34+A2↑r
.idata:004140E8 ; HGLOBAL (__stdcall *GlobalAlloc)(UINT uFlags, SIZE_T dwBytes)
.idata:004140E8                 extrn GlobalAlloc:dword ; CODE XREF: sub_408D34+8E↑p
.idata:004140E8                                         ; DATA XREF: sub_408D34+8E↑r
.idata:004140EC ; HRESULT (__stdcall *RegisterApplicationRestart)(PCWSTR pwzCommandline, DWORD dwFlags)
.idata:004140EC                 extrn RegisterApplicationRestart:dword
.idata:004140EC                                         ; CODE XREF: sub_40C7B0+3FA↑p
.idata:004140EC                                         ; DATA XREF: sub_40C7B0+3FA↑r
.idata:004140F0 ; DWORD (__stdcall *SizeofResource)(HMODULE hModule, HRSRC hResInfo)
.idata:004140F0                 extrn SizeofResource:dword
.idata:004140F0                                         ; CODE XREF: sub_408D34+7F↑p
.idata:004140F0                                         ; DATA XREF: sub_408D34+7F↑r
.idata:004140F4 ; DWORD (__stdcall *GetCurrentThreadId)()
.idata:004140F4                 extrn GetCurrentThreadId:dword
.idata:004140F4                                         ; CODE XREF: sub_40D3F3+7A↑p
.idata:004140F4                                         ; ___security_init_cookie+4E↑p
.idata:004140F4                                         ; DATA XREF: ...
.idata:004140F8 ; HLOCAL (__stdcall *LocalAlloc)(UINT uFlags, SIZE_T uBytes)
.idata:004140F8                 extrn LocalAlloc:dword  ; CODE XREF: sub_40EA30+3C↑p
.idata:004140F8                                         ; sub_40EAB6+A3↑p ...
.idata:004140FC ; DWORD (__stdcall *QueryDosDeviceW)(LPCWSTR lpDeviceName, LPWSTR lpTargetPath, DWORD ucchMax)
.idata:004140FC                 extrn QueryDosDeviceW:dword
.idata:004140FC                                         ; CODE XREF: sub_40EAB6+47↑p
.idata:004140FC                                         ; DATA XREF: sub_40EAB6+47↑r
.idata:00414100 ; DWORD (__stdcall *GetTickCount)()
.idata:00414100                 extrn GetTickCount:dword
.idata:00414100                                         ; CODE XREF: ___security_init_cookie+57↑p
.idata:00414100                                         ; DATA XREF: ___security_init_cookie+57↑r
.idata:00414104 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:00414104                 extrn GetSystemTimeAsFileTime:dword
.idata:00414104                                         ; CODE XREF: ___security_init_cookie+36↑p
.idata:00414104                                         ; DATA XREF: ___security_init_cookie+36↑r
.idata:00414108 ; BOOL (__stdcall *QueryPerformanceCounter)(LARGE_INTEGER *lpPerformanceCount)
.idata:00414108                 extrn QueryPerformanceCounter:dword
.idata:00414108                                         ; CODE XREF: ___security_init_cookie+6C↑p
.idata:00414108                                         ; DATA XREF: ___security_init_cookie+6C↑r
.idata:0041410C ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:0041410C                 extrn GetModuleHandleA:dword
.idata:0041410C                                         ; CODE XREF: __get_image_app_type+7↑p
.idata:0041410C                                         ; DATA XREF: __get_image_app_type+7↑r
.idata:00414110 ; BOOL (__stdcall *TerminateProcess)(HANDLE hProcess, UINT uExitCode)
.idata:00414110                 extrn TerminateProcess:dword
.idata:00414110                                         ; CODE XREF: ___raise_securityfailure+22↑p
.idata:00414110                                         ; DATA XREF: ___raise_securityfailure+22↑r
.idata:00414114 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00414114                 extrn SetUnhandledExceptionFilter:dword
.idata:00414114                                         ; CODE XREF: ___raise_securityfailure+7↑p
.idata:00414114                                         ; sub_4105F0+5↑p
.idata:00414114                                         ; DATA XREF: ...
.idata:00414118 ; LONG (__stdcall *UnhandledExceptionFilter)(struct _EXCEPTION_POINTERS *ExceptionInfo)
.idata:00414118                 extrn UnhandledExceptionFilter:dword
.idata:00414118                                         ; CODE XREF: ___raise_securityfailure+10↑p
.idata:00414118                                         ; DATA XREF: ___raise_securityfailure+10↑r
.idata:0041411C ; void (__stdcall *GetStartupInfoW)(LPSTARTUPINFOW lpStartupInfo)
.idata:0041411C                 extrn GetStartupInfoW:dword
.idata:0041411C                                         ; CODE XREF: start-225↑p
.idata:0041411C                                         ; DATA XREF: start-225↑r
.idata:00414120 ; void (__stdcall *Sleep)(DWORD dwMilliseconds)
.idata:00414120                 extrn Sleep:dword       ; CODE XREF: start-1D9↑p
.idata:00414120                                         ; DATA XREF: start-1D9↑r
.idata:00414124 ; PSLIST_ENTRY (__stdcall *InterlockedPopEntrySList)(PSLIST_HEADER ListHead)
.idata:00414124                 extrn InterlockedPopEntrySList:dword
.idata:00414124                                         ; CODE XREF: __AllocStdCallThunk_cmn(void)+36↑p
.idata:00414124                                         ; __AllocStdCallThunk_cmn(void)+71↑p
.idata:00414124                                         ; DATA XREF: ...
.idata:00414128 ; PSLIST_ENTRY (__stdcall *InterlockedPushEntrySList)(PSLIST_HEADER ListHead, PSLIST_ENTRY ListEntry)
.idata:00414128                 extrn InterlockedPushEntrySList:dword
.idata:00414128                                         ; CODE XREF: __AllocStdCallThunk_cmn(void)+9C↑p
.idata:00414128                                         ; __FreeStdCallThunk_cmn(void *)+20↑p
.idata:00414128                                         ; DATA XREF: ...
.idata:0041412C ; BOOL (__stdcall *FlushInstructionCache)(HANDLE hProcess, LPCVOID lpBaseAddress, SIZE_T dwSize)
.idata:0041412C                 extrn FlushInstructionCache:dword
.idata:0041412C                                         ; CODE XREF: AtlThunk_InitData(x,x,x)+49↑p
.idata:0041412C                                         ; DATA XREF: AtlThunk_InitData(x,x,x)+49↑r
.idata:00414130 ; HANDLE (__stdcall *GetProcessHeap)()
.idata:00414130                 extrn GetProcessHeap:dword
.idata:00414130                                         ; CODE XREF: __AllocStdCallThunk_cmn(void)+22↑p
.idata:00414130                                         ; __FreeStdCallThunk_cmn(void *)+11↑p ...
.idata:00414134 ; BOOL (__stdcall *IsProcessorFeaturePresent)(DWORD ProcessorFeature)
.idata:00414134                 extrn IsProcessorFeaturePresent:dword
.idata:00414134                                         ; CODE XREF: __InitializeThunkPool+2↑p
.idata:00414134                                         ; DATA XREF: __InitializeThunkPool+2↑r
.idata:00414138 ; PVOID (__stdcall *DecodePointer)(PVOID Ptr)
.idata:00414138                 extrn DecodePointer:dword
.idata:00414138                                         ; CODE XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long__+15↑p
.idata:00414138                                         ; GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long__+A2↑p ...
.idata:0041413C ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:0041413C                 extrn HeapAlloc:dword   ; CODE XREF: __AllocStdCallThunk_cmn(void)+29↑p
.idata:0041413C                                         ; __InitializeThunkPool+2F↑p ...
.idata:00414140 ; PVOID (__stdcall *EncodePointer)(PVOID Ptr)
.idata:00414140                 extrn EncodePointer:dword
.idata:00414140                                         ; CODE XREF: GetProcAddressSingle+16↑p
.idata:00414140                                         ; DATA XREF: GetProcAddressSingle+16↑r
.idata:00414144 ; HMODULE (__stdcall *LoadLibraryExA)(LPCSTR lpLibFileName, HANDLE hFile, DWORD dwFlags)
.idata:00414144                 extrn LoadLibraryExA:dword
.idata:00414144                                         ; CODE XREF: GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long__+2D↑p
.idata:00414144                                         ; GetProcAddressAll_long____stdcall____stdcall___AtlThunkData_t_____HWND_____unsigned_int_unsigned_int_long___0+2D↑p ...
.idata:00414148 ; LPVOID (__stdcall *VirtualAlloc)(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect)
.idata:00414148                 extrn VirtualAlloc:dword
.idata:00414148                                         ; CODE XREF: __AllocStdCallThunk_cmn(void)+59↑p
.idata:00414148                                         ; DATA XREF: __AllocStdCallThunk_cmn(void)+59↑r
.idata:0041414C ; HANDLE (__stdcall *GetCurrentProcess)()
.idata:0041414C                 extrn GetCurrentProcess:dword
.idata:0041414C                                         ; CODE XREF: AtlThunk_InitData(x,x,x)+42↑p
.idata:0041414C                                         ; ___raise_securityfailure+1B↑p
.idata:0041414C                                         ; DATA XREF: ...
.idata:00414150 ; BOOL (__stdcall *VirtualFree)(LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType)
.idata:00414150                 extrn VirtualFree:dword ; CODE XREF: __AllocStdCallThunk_cmn(void)+85↑p
.idata:00414150                                         ; DATA XREF: __AllocStdCallThunk_cmn(void)+85↑r
.idata:00414154 ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:00414154                 extrn HeapFree:dword    ; CODE XREF: __FreeStdCallThunk_cmn(void *)+18↑p
.idata:00414154                                         ; __InitializeThunkPool+51↑p ...
.idata:00414158 ; HGLOBAL (__stdcall *LoadResource)(HMODULE hModule, HRSRC hResInfo)
.idata:00414158                 extrn LoadResource:dword
.idata:00414158                                         ; CODE XREF: sub_408D34+5B↑p
.idata:00414158                                         ; DATA XREF: sub_408D34+5B↑r
.idata:0041415C ; HRSRC (__stdcall *FindResourceW)(HMODULE hModule, LPCWSTR lpName, LPCWSTR lpType)
.idata:0041415C                 extrn FindResourceW:dword
.idata:0041415C                                         ; CODE XREF: sub_408D34+4D↑p
.idata:0041415C                                         ; DATA XREF: sub_408D34+4D↑r
.idata:00414160 ; HMODULE (__stdcall *GetModuleHandleW)(LPCWSTR lpModuleName)
.idata:00414160                 extrn GetModuleHandleW:dword
.idata:00414160                                         ; CODE XREF: ATL::CRegKey::DeleteSubKey(ushort const *)+26↑p
.idata:00414160                                         ; sub_408373+7D↑p ...
.idata:00414164 ; HMODULE (__stdcall *LoadLibraryExW)(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags)
.idata:00414164                 extrn LoadLibraryExW:dword
.idata:00414164                                         ; CODE XREF: ATL::CRegKey::DeleteSubKey(ushort const *)+48↑p
.idata:00414164                                         ; DATA XREF: ATL::CRegKey::DeleteSubKey(ushort const *)+48↑r
.idata:00414168 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:00414168                 extrn GetProcAddress:dword
.idata:00414168                                         ; CODE XREF: ATL::CRegKey::DeleteSubKey(ushort const *)+36↑p
.idata:00414168                                         ; ATL::CRegKey::DeleteSubKey(ushort const *)+58↑p ...
.idata:0041416C ; DWORD (__stdcall *ExpandEnvironmentStringsW)(LPCWSTR lpSrc, LPWSTR lpDst, DWORD nSize)
.idata:0041416C                 extrn ExpandEnvironmentStringsW:dword
.idata:0041416C                                         ; CODE XREF: sub_404FB1+64↑p
.idata:0041416C                                         ; sub_406F30+2C↑p ...
.idata:00414170 ; int (__stdcall *GetTimeFormatW)(LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpTime, LPCWSTR lpFormat, LPWSTR lpTimeStr, int cchTime)
.idata:00414170                 extrn GetTimeFormatW:dword
.idata:00414170                                         ; CODE XREF: sub_403E16+C5↑p
.idata:00414170                                         ; DATA XREF: sub_403E16+C5↑r
.idata:00414174 ; DWORD (__stdcall *GetLastError)()
.idata:00414174                 extrn GetLastError:dword
.idata:00414174                                         ; CODE XREF: sub_403E16:loc_403E9B↑p
.idata:00414174                                         ; sub_404316+4F↑p ...
.idata:00414178 ; int (__stdcall *GetDateFormatW)(LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, int cchDate)
.idata:00414178                 extrn GetDateFormatW:dword
.idata:00414178                                         ; CODE XREF: sub_403E16+7B↑p
.idata:00414178                                         ; DATA XREF: sub_403E16+7B↑r
.idata:0041417C
.idata:00414180 ;
.idata:00414180 ; Imports from MFC42u.dll
.idata:00414180 ;
.idata:00414180 ; int __stdcall AfxWinMain(struct HINSTANCE__ *, struct HINSTANCE__ *, unsigned short *, int)
.idata:00414180                 extrn ?AfxWinMain@@YGHPAUHINSTANCE__@@0PAGH@Z:dword
.idata:00414180                                         ; DATA XREF: sub_4109C8:loc_4109D4↑r
.idata:00414180                                         ; .idata:0041468C↓o
.idata:00414180                                         ; Import by ordinal 1569
.idata:00414184 ; __declspec(dllimport) void __cdecl operator delete(void *)
.idata:00414184                 extrn __imp_??3@YAXPAX@Z:dword
.idata:00414184                                         ; CODE XREF: Base::GdiException::`scalar deleting destructor'(uint)+15↑p
.idata:00414184                                         ; sub_403DC0-13C↑p ...
.idata:00414184                                         ; Import by ordinal 825
.idata:00414188 ; public: __thiscall CDialog::CDialog(unsigned int, class CWnd *)
.idata:00414188                 extrn ??0CDialog@@QAE@IPAVCWnd@@@Z:dword
.idata:00414188                                         ; CODE XREF: sub_40C7B0+339↑p
.idata:00414188                                         ; DATA XREF: sub_40C7B0+339↑r
.idata:00414188                                         ; Import by ordinal 324
.idata:0041418C ; public: virtual __thiscall CDialog::~CDialog(void)
.idata:0041418C                 extrn ??1CDialog@@UAE@XZ:dword
.idata:0041418C                                         ; CODE XREF: Base::GdiException::`scalar deleting destructor'(uint)+8↑p
.idata:0041418C                                         ; sub_403B53+9↑p ...
.idata:0041418C                                         ; Import by ordinal 641
.idata:00414190 ; void __stdcall DDX_Check(class CDataExchange *, int, int &)
.idata:00414190                 extrn ?DDX_Check@@YGXPAVCDataExchange@@HAAH@Z:dword
.idata:00414190                                         ; CODE XREF: sub_403B70+11↑p
.idata:00414190                                         ; DATA XREF: sub_403B70+11↑r
.idata:00414190                                         ; Import by ordinal 2293
.idata:00414194 ; protected: static struct AFX_MSGMAP const CDialog::messageMap
.idata:00414194                 extrn ?messageMap@CDialog@@1UAFX_MSGMAP@@B:dword
.idata:00414194                                         ; DATA XREF: sub_403C30↑r
.idata:00414194                                         ; Import by ordinal 4229
.idata:00414198 ; __declspec(dllimport) protected: int __thiscall CWnd::OnHelpInfo(struct tagHELPINFO *)
.idata:00414198                 extrn __imp_?OnHelpInfo@CWnd@@IAEHPAUtagHELPINFO@@@Z:dword
.idata:00414198                                         ; DATA XREF: CWnd::OnHelpInfo(tagHELPINFO *)↑r
.idata:00414198                                         ; Import by ordinal 4677
.idata:0041419C ; __declspec(dllimport) public: virtual struct CRuntimeClass * __thiscall CDialog::GetRuntimeClass(void)const
.idata:0041419C                 extrn __imp_?GetRuntimeClass@CDialog@@UBEPAUCRuntimeClass@@XZ:dword
.idata:0041419C                                         ; DATA XREF: CDialog::GetRuntimeClass(void)↑r
.idata:0041419C                                         ; Import by ordinal 3592
.idata:004141A0 ; __declspec(dllimport) public: virtual int __thiscall CDialog::OnCmdMsg(unsigned int, int, void *, struct AFX_CMDHANDLERINFO *)
.idata:004141A0                 extrn __imp_?OnCmdMsg@CDialog@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z:dword
.idata:004141A0                                         ; DATA XREF: CDialog::OnCmdMsg(uint,int,void *,AFX_CMDHANDLERINFO *)↑r
.idata:004141A0                                         ; Import by ordinal 4419
.idata:004141A4 ; __declspec(dllimport) public: virtual void __thiscall CWnd::OnFinalRelease(void)
.idata:004141A4                 extrn __imp_?OnFinalRelease@CWnd@@UAEXXZ:dword
.idata:004141A4                                         ; DATA XREF: CWnd::OnFinalRelease(void)↑r
.idata:004141A4                                         ; Import by ordinal 4621
.idata:004141A8 ; __declspec(dllimport) public: virtual int __thiscall CCmdTarget::IsInvokeAllowed(long)
.idata:004141A8                 extrn __imp_?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z:dword
.idata:004141A8                                         ; DATA XREF: CCmdTarget::IsInvokeAllowed(long)↑r
.idata:004141A8                                         ; Import by ordinal 4075
.idata:004141AC ; __declspec(dllimport) public: virtual int __thiscall CCmdTarget::GetDispatchIID(struct _GUID *)
.idata:004141AC                 extrn __imp_?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z:dword
.idata:004141AC                                         ; DATA XREF: CCmdTarget::GetDispatchIID(_GUID *)↑r
.idata:004141AC                                         ; Import by ordinal 3074
.idata:004141B0 ; __declspec(dllimport) public: virtual unsigned int __thiscall CCmdTarget::GetTypeInfoCount(void)
.idata:004141B0                 extrn __imp_?GetTypeInfoCount@CCmdTarget@@UAEIXZ:dword
.idata:004141B0                                         ; DATA XREF: CCmdTarget::GetTypeInfoCount(void)↑r
.idata:004141B0                                         ; Import by ordinal 3820
.idata:004141B4 ; __declspec(dllimport) public: virtual class CTypeLibCache * __thiscall CCmdTarget::GetTypeLibCache(void)
.idata:004141B4                 extrn __imp_?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ:dword
.idata:004141B4                                         ; DATA XREF: CCmdTarget::GetTypeLibCache(void)↑r
.idata:004141B4                                         ; Import by ordinal 3826
.idata:004141B8 ; __declspec(dllimport) public: virtual long __thiscall CCmdTarget::GetTypeLib(unsigned long, struct ITypeLib * *)
.idata:004141B8                 extrn __imp_?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z:dword
.idata:004141B8                                         ; DATA XREF: CCmdTarget::GetTypeLib(ulong,ITypeLib * *)↑r
.idata:004141B8                                         ; Import by ordinal 3825
.idata:004141BC ; __declspec(dllimport) protected: virtual struct AFX_OLECMDMAP const * __thiscall CCmdTarget::GetCommandMap(void)const
.idata:004141BC                 extrn __imp_?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ:dword
.idata:004141BC                                         ; DATA XREF: CCmdTarget::GetCommandMap(void)↑r
.idata:004141BC                                         ; Import by ordinal 2971
.idata:004141C0 ; __declspec(dllimport) protected: virtual struct AFX_DISPMAP const * __thiscall CCmdTarget::GetDispatchMap(void)const
.idata:004141C0                 extrn __imp_?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ:dword
.idata:004141C0                                         ; DATA XREF: CCmdTarget::GetDispatchMap(void)↑r
.idata:004141C0                                         ; Import by ordinal 3076
.idata:004141C4 ; __declspec(dllimport) protected: virtual struct AFX_CONNECTIONMAP const * __thiscall CCmdTarget::GetConnectionMap(void)const
.idata:004141C4                 extrn __imp_?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ:dword
.idata:004141C4                                         ; DATA XREF: CCmdTarget::GetConnectionMap(void)↑r
.idata:004141C4                                         ; Import by ordinal 2980
.idata:004141C8 ; __declspec(dllimport) protected: virtual struct AFX_INTERFACEMAP const * __thiscall CCmdTarget::GetInterfaceMap(void)const
.idata:004141C8                 extrn __imp_?GetInterfaceMap@CCmdTarget@@MBEPBUAFX_INTERFACEMAP@@XZ:dword
.idata:004141C8                                         ; DATA XREF: CCmdTarget::GetInterfaceMap(void)↑r
.idata:004141C8                                         ; Import by ordinal 3257
.idata:004141CC ; __declspec(dllimport) protected: virtual struct AFX_EVENTSINKMAP const * __thiscall CCmdTarget::GetEventSinkMap(void)const
.idata:004141CC                 extrn __imp_?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ:dword
.idata:004141CC                                         ; DATA XREF: CCmdTarget::GetEventSinkMap(void)↑r
.idata:004141CC                                         ; Import by ordinal 3131
.idata:004141D0 ; __declspec(dllimport) public: virtual int __thiscall CCmdTarget::OnCreateAggregates(void)
.idata:004141D0                 extrn __imp_?OnCreateAggregates@CCmdTarget@@UAEHXZ:dword
.idata:004141D0                                         ; DATA XREF: CCmdTarget::OnCreateAggregates(void)↑r
.idata:004141D0                                         ; Import by ordinal 4459
.idata:004141D4 ; __declspec(dllimport) public: virtual struct IUnknown * __thiscall CCmdTarget::GetInterfaceHook(void const *)
.idata:004141D4                 extrn __imp_?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z:dword
.idata:004141D4                                         ; DATA XREF: CCmdTarget::GetInterfaceHook(void const *)↑r
.idata:004141D4                                         ; Import by ordinal 3254
.idata:004141D8 ; __declspec(dllimport) protected: virtual int __thiscall CCmdTarget::GetExtraConnectionPoints(class CPtrArray *)
.idata:004141D8                 extrn __imp_?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z:dword
.idata:004141D8                                         ; DATA XREF: CCmdTarget::GetExtraConnectionPoints(CPtrArray *)↑r
.idata:004141D8                                         ; Import by ordinal 3142
.idata:004141DC ; __declspec(dllimport) protected: virtual struct IConnectionPoint * __thiscall CCmdTarget::GetConnectionHook(struct _GUID const &)
.idata:004141DC                 extrn __imp_?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z:dword
.idata:004141DC                                         ; DATA XREF: CCmdTarget::GetConnectionHook(_GUID const &)↑r
.idata:004141DC                                         ; Import by ordinal 2977
.idata:004141E0 ; __declspec(dllimport) public: virtual void __thiscall CWnd::PreSubclassWindow(void)
.idata:004141E0                 extrn __imp_?PreSubclassWindow@CWnd@@UAEXXZ:dword
.idata:004141E0                                         ; DATA XREF: CWnd::PreSubclassWindow(void)↑r
.idata:004141E0                                         ; Import by ordinal 5273
.idata:004141E4 ; __declspec(dllimport) public: virtual int __thiscall CWnd::Create(unsigned short const *, unsigned short const *, unsigned long, struct tagRECT const &, class CWnd *, unsigned int, struct CCreateContext *)
.idata:004141E4                 extrn __imp_?Create@CWnd@@UAEHPBG0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z:dword
.idata:004141E4                                         ; DATA XREF: CWnd::Create(ushort const *,ushort const *,ulong,tagRECT const &,CWnd *,uint,CCreateContext *)↑r
.idata:004141E4                                         ; Import by ordinal 2116
.idata:004141E8 ; __declspec(dllimport) public: virtual int __thiscall CWnd::DestroyWindow(void)
.idata:004141E8                 extrn __imp_?DestroyWindow@CWnd@@UAEHXZ:dword
.idata:004141E8                                         ; DATA XREF: CWnd::DestroyWindow(void)↑r
.idata:004141E8                                         ; Import by ordinal 2438
.idata:004141EC ; __declspec(dllimport) public: virtual int __thiscall CWnd::PreCreateWindow(struct tagCREATESTRUCTW &)
.idata:004141EC                 extrn __imp_?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTW@@@Z:dword
.idata:004141EC                                         ; DATA XREF: CWnd::PreCreateWindow(tagCREATESTRUCTW &)↑r
.idata:004141EC                                         ; Import by ordinal 5257
.idata:004141F0 ; __declspec(dllimport) public: virtual void __thiscall CWnd::CalcWindowRect(struct tagRECT *, unsigned int)
.idata:004141F0                 extrn __imp_?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z:dword
.idata:004141F0                                         ; DATA XREF: CWnd::CalcWindowRect(tagRECT *,uint)↑r
.idata:004141F0                                         ; Import by ordinal 1720
.idata:004141F4 ; __declspec(dllimport) public: virtual int __thiscall CWnd::OnToolHitTest(class CPoint, struct tagTOOLINFOW *)const
.idata:004141F4                 extrn __imp_?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOW@@@Z:dword
.idata:004141F4                                         ; DATA XREF: CWnd::OnToolHitTest(CPoint,tagTOOLINFOW *)↑r
.idata:004141F4                                         ; Import by ordinal 5059
.idata:004141F8 ; __declspec(dllimport) public: virtual class CScrollBar * __thiscall CWnd::GetScrollBarCtrl(int)const
.idata:004141F8                 extrn __imp_?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z:dword
.idata:004141F8                                         ; DATA XREF: CWnd::GetScrollBarCtrl(int)↑r
.idata:004141F8                                         ; Import by ordinal 3744
.idata:004141FC ; __declspec(dllimport) public: virtual void __thiscall CWnd::WinHelpW(unsigned long, unsigned int)
.idata:004141FC                 extrn __imp_?WinHelpW@CWnd@@UAEXKI@Z:dword
.idata:004141FC                                         ; DATA XREF: CWnd::WinHelpW(ulong,uint)↑r
.idata:004141FC                                         ; Import by ordinal 6372
.idata:00414200 ; __declspec(dllimport) public: virtual int __thiscall CWnd::ContinueModal(void)
.idata:00414200                 extrn __imp_?ContinueModal@CWnd@@UAEHXZ:dword
.idata:00414200                                         ; DATA XREF: CWnd::ContinueModal(void)↑r
.idata:00414200                                         ; Import by ordinal 2047
.idata:00414204 ; __declspec(dllimport) public: virtual void __thiscall CWnd::EndModalLoop(int)
.idata:00414204                 extrn __imp_?EndModalLoop@CWnd@@UAEXH@Z:dword
.idata:00414204                                         ; DATA XREF: CWnd::EndModalLoop(int)↑r
.idata:00414204                                         ; Import by ordinal 2640
.idata:00414208 ; __declspec(dllimport) protected: virtual int __thiscall CWnd::OnCommand(unsigned int, long)
.idata:00414208                 extrn __imp_?OnCommand@CWnd@@MAEHIJ@Z:dword
.idata:00414208                                         ; DATA XREF: CWnd::OnCommand(uint,long)↑r
.idata:00414208                                         ; Import by ordinal 4435
.idata:0041420C ; __declspec(dllimport) protected: virtual int __thiscall CWnd::OnNotify(unsigned int, long, long *)
.idata:0041420C                 extrn __imp_?OnNotify@CWnd@@MAEHIJPAJ@Z:dword
.idata:0041420C                                         ; DATA XREF: CWnd::OnNotify(uint,long,long *)↑r
.idata:0041420C                                         ; Import by ordinal 4831
.idata:00414210 ; __declspec(dllimport) protected: virtual long (__stdcall ** __thiscall CWnd::GetSuperWndProcAddr(void))(struct HWND__ *, unsigned int, unsigned int, long)
.idata:00414210                 extrn __imp_?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ:dword
.idata:00414210                                         ; DATA XREF: CWnd::GetSuperWndProcAddr(void)↑r
.idata:00414210                                         ; Import by ordinal 3793
.idata:00414214 ; __declspec(dllimport) public: virtual int __thiscall CDialog::PreTranslateMessage(struct tagMSG *)
.idata:00414214                 extrn __imp_?PreTranslateMessage@CDialog@@UAEHPAUtagMSG@@@Z:dword
.idata:00414214                                         ; DATA XREF: CDialog::PreTranslateMessage(tagMSG *)↑r
.idata:00414214                                         ; Import by ordinal 5276
.idata:00414218 ; __declspec(dllimport) public: virtual int __thiscall CWnd::OnAmbientProperty(class COleControlSite *, long, struct tagVARIANT *)
.idata:00414218                 extrn __imp_?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z:dword
.idata:00414218                                         ; DATA XREF: CWnd::OnAmbientProperty(COleControlSite *,long,tagVARIANT *)↑r
.idata:00414218                                         ; Import by ordinal 4347
.idata:0041421C ; __declspec(dllimport) protected: virtual long __thiscall CWnd::WindowProc(unsigned int, unsigned int, long)
.idata:0041421C                 extrn __imp_?WindowProc@CWnd@@MAEJIIJ@Z:dword
.idata:0041421C                                         ; DATA XREF: CWnd::WindowProc(uint,uint,long)↑r
.idata:0041421C                                         ; Import by ordinal 6370
.idata:00414220 ; __declspec(dllimport) protected: virtual int __thiscall CWnd::OnWndMsg(unsigned int, unsigned int, long, long *)
.idata:00414220                 extrn __imp_?OnWndMsg@CWnd@@MAEHIIJPAJ@Z:dword
.idata:00414220                                         ; DATA XREF: CWnd::OnWndMsg(uint,uint,long,long *)↑r
.idata:00414220                                         ; Import by ordinal 5157
.idata:00414224 ; __declspec(dllimport) protected: virtual long __thiscall CWnd::DefWindowProcW(unsigned int, unsigned int, long)
.idata:00414224                 extrn __imp_?DefWindowProcW@CWnd@@MAEJIIJ@Z:dword
.idata:00414224                                         ; DATA XREF: CWnd::DefWindowProcW(uint,uint,long)↑r
.idata:00414224                                         ; Import by ordinal 2377
.idata:00414228 ; __declspec(dllimport) protected: virtual void __thiscall CWnd::PostNcDestroy(void)
.idata:00414228                 extrn __imp_?PostNcDestroy@CWnd@@MAEXXZ:dword
.idata:00414228                                         ; DATA XREF: CWnd::PostNcDestroy(void)↑r
.idata:00414228                                         ; Import by ordinal 5237
.idata:0041422C ; __declspec(dllimport) protected: virtual int __thiscall CWnd::OnChildNotify(unsigned int, unsigned int, long, long *)
.idata:0041422C                 extrn __imp_?OnChildNotify@CWnd@@MAEHIIJPAJ@Z:dword
.idata:0041422C                                         ; DATA XREF: CWnd::OnChildNotify(uint,uint,long,long *)↑r
.idata:0041422C                                         ; Import by ordinal 4401
.idata:00414230 ; __declspec(dllimport) public: virtual int __thiscall CDialog::CheckAutoCenter(void)
.idata:00414230                 extrn __imp_?CheckAutoCenter@CDialog@@UAEHXZ:dword
.idata:00414230                                         ; DATA XREF: CDialog::CheckAutoCenter(void)↑r
.idata:00414230                                         ; Import by ordinal 1767
.idata:00414234 ; __declspec(dllimport) public: virtual int __thiscall CWnd::IsFrameWnd(void)const
.idata:00414234                 extrn __imp_?IsFrameWnd@CWnd@@UBEHXZ:dword
.idata:00414234                                         ; DATA XREF: CWnd::IsFrameWnd(void)↑r
.idata:00414234                                         ; Import by ordinal 4073
.idata:00414238 ; __declspec(dllimport) protected: virtual int __thiscall CDialog::SetOccDialogInfo(struct _AFX_OCC_DIALOG_INFO *)
.idata:00414238                 extrn __imp_?SetOccDialogInfo@CDialog@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z:dword
.idata:00414238                                         ; DATA XREF: CDialog::SetOccDialogInfo(_AFX_OCC_DIALOG_INFO *)↑r
.idata:00414238                                         ; Import by ordinal 6048
.idata:0041423C ; __declspec(dllimport) public: virtual int __thiscall CDialog::DoModal(void)
.idata:0041423C                 extrn __imp_?DoModal@CDialog@@UAEHXZ:dword
.idata:0041423C                                         ; CODE XREF: sub_40C7B0+356↑p
.idata:0041423C                                         ; DATA XREF: sub_40C7B0+356↑r ...
.idata:0041423C                                         ; Import by ordinal 2506
.idata:00414240 ; __declspec(dllimport) public: virtual int __thiscall CDialog::OnInitDialog(void)
.idata:00414240                 extrn __imp_?OnInitDialog@CDialog@@UAEHXZ:dword
.idata:00414240                                         ; CODE XREF: sub_4040E0+11↑p
.idata:00414240                                         ; sub_407280+5↑p ...
.idata:00414240                                         ; Import by ordinal 4704
.idata:00414244 ; __declspec(dllimport) public: virtual void __thiscall CDialog::OnSetFont(class CFont *)
.idata:00414244                 extrn __imp_?OnSetFont@CDialog@@UAEXPAVCFont@@@Z:dword
.idata:00414244                                         ; DATA XREF: CDialog::OnSetFont(CFont *)↑r
.idata:00414244                                         ; Import by ordinal 4992
.idata:00414248 ; __declspec(dllimport) protected: virtual void __thiscall CDialog::OnOK(void)
.idata:00414248                 extrn __imp_?OnOK@CDialog@@MAEXXZ:dword
.idata:00414248                                         ; DATA XREF: CDialog::OnOK(void)↑r
.idata:00414248                                         ; Import by ordinal 4847
.idata:0041424C ; __declspec(dllimport) protected: virtual void __thiscall CDialog::OnCancel(void)
.idata:0041424C                 extrn __imp_?OnCancel@CDialog@@MAEXXZ:dword
.idata:0041424C                                         ; DATA XREF: CDialog::OnCancel(void)↑r
.idata:0041424C                                         ; Import by ordinal 4370
.idata:00414250 ; __declspec(dllimport) protected: virtual void __thiscall CDialog::PreInitDialog(void)
.idata:00414250                 extrn __imp_?PreInitDialog@CDialog@@MAEXXZ:dword
.idata:00414250                                         ; DATA XREF: CDialog::PreInitDialog(void)↑r
.idata:00414250                                         ; Import by ordinal 5261
.idata:00414254 ; __declspec(dllimport) void * __cdecl operator new(unsigned int)
.idata:00414254                 extrn __imp_??2@YAPAXI@Z:dword
.idata:00414254                                         ; CODE XREF: sub_403DC0+11↑p
.idata:00414254                                         ; sub_404316+2D6↑p ...
.idata:00414254                                         ; Import by ordinal 823
.idata:00414258 ; public: static struct CRuntimeClass const CPropertyPage::classCPropertyPage
.idata:00414258                 extrn ?classCPropertyPage@CPropertyPage@@2UCRuntimeClass@@B:dword
.idata:00414258                                         ; DATA XREF: sub_403E00↑r
.idata:00414258                                         ; Import by ordinal 1899
.idata:0041425C ; public: class CString const & __thiscall CString::operator=(unsigned short const *)
.idata:0041425C                 extrn ??4CString@@QAEABV0@PBG@Z:dword
.idata:0041425C                                         ; CODE XREF: sub_403E16+1C↑p
.idata:0041425C                                         ; sub_403E16+9F↑p ...
.idata:0041425C                                         ; Import by ordinal 861
.idata:00414260 ; public: int __thiscall CTime::GetAsSystemTime(struct _SYSTEMTIME &)const
.idata:00414260                 extrn ?GetAsSystemTime@CTime@@QBEHAAU_SYSTEMTIME@@@Z:dword
.idata:00414260                                         ; CODE XREF: sub_403E16+4E↑p
.idata:00414260                                         ; DATA XREF: sub_403E16+4E↑r
.idata:00414260                                         ; Import by ordinal 6665
.idata:00414264 ; public: class CString const & __thiscall CString::operator+=(unsigned short const *)
.idata:00414264                 extrn ??YCString@@QAEABV0@PBG@Z:dword
.idata:00414264                                         ; CODE XREF: sub_403E16+AC↑p
.idata:00414264                                         ; sub_403E16+D2↑p ...
.idata:00414264                                         ; Import by ordinal 942
.idata:00414268 ; public: __thiscall CPropertyPage::CPropertyPage(unsigned int, unsigned int)
.idata:00414268                 extrn ??0CPropertyPage@@QAE@II@Z:dword
.idata:00414268                                         ; CODE XREF: sub_403F0B+19↑p
.idata:00414268                                         ; sub_406E96+13↑p ...
.idata:00414268                                         ; Import by ordinal 489
.idata:0041426C ; public: virtual __thiscall CPropertyPage::~CPropertyPage(void)
.idata:0041426C                 extrn ??1CPropertyPage@@UAE@XZ:dword
.idata:0041426C                                         ; CODE XREF: sub_404002+A3↑p
.idata:0041426C                                         ; sub_406EE0+18↑p ...
.idata:0041426C                                         ; Import by ordinal 768
.idata:00414270 ; public: __thiscall CStringList::CStringList(int)
.idata:00414270                 extrn ??0CStringList@@QAE@H@Z:dword
.idata:00414270                                         ; CODE XREF: sub_403F0B+5A↑p
.idata:00414270                                         ; DATA XREF: sub_403F0B+5A↑r
.idata:00414270                                         ; Import by ordinal 542
.idata:00414274 ; public: virtual __thiscall CStringList::~CStringList(void)
.idata:00414274                 extrn ??1CStringList@@UAE@XZ:dword
.idata:00414274                                         ; CODE XREF: sub_404002+8D↑p
.idata:00414274                                         ; DATA XREF: sub_404002+8D↑r ...
.idata:00414274                                         ; Import by ordinal 802
.idata:00414278 ; protected: static struct AFX_MSGMAP const CPropertyPage::messageMap
.idata:00414278                 extrn ?messageMap@CPropertyPage@@1UAFX_MSGMAP@@B:dword
.idata:00414278                                         ; DATA XREF: sub_4040C0↑r
.idata:00414278                                         ; Import by ordinal 4253
.idata:0041427C ; public: __thiscall CString::CString(void)
.idata:0041427C                 extrn ??0CString@@QAE@XZ:dword
.idata:0041427C                                         ; CODE XREF: sub_403AF0+5↑p
.idata:0041427C                                         ; sub_4040E0+28↑p ...
.idata:0041427C                                         ; Import by ordinal 540
.idata:00414280 ; public: __thiscall CString::~CString(void)
.idata:00414280                 extrn ??1CString@@QAE@XZ:dword
.idata:00414280                                         ; CODE XREF: sub_4040E0+208↑p
.idata:00414280                                         ; sub_404316+2C3↑p ...
.idata:00414280                                         ; Import by ordinal 800
.idata:00414284 ; public: class CWnd * __thiscall CWnd::GetDlgItem(int)const
.idata:00414284                 extrn ?GetDlgItem@CWnd@@QBEPAV1@H@Z:dword
.idata:00414284                                         ; CODE XREF: sub_4040E0+39↑p
.idata:00414284                                         ; sub_40DAA3+B↑p
.idata:00414284                                         ; DATA XREF: ...
.idata:00414284                                         ; Import by ordinal 3087
.idata:00414288 ; public: void __thiscall CRect::NormalizeRect(void)
.idata:00414288                 extrn ?NormalizeRect@CRect@@QAEXXZ:dword
.idata:00414288                                         ; CODE XREF: sub_4040E0+BC↑p
.idata:00414288                                         ; sub_407B60+70↑p
.idata:00414288                                         ; DATA XREF: ...
.idata:00414288                                         ; Import by ordinal 4312
.idata:0041428C ; __declspec(dllimport) class AFX_MODULE_STATE * __stdcall AfxGetModuleState(void)
.idata:0041428C                 extrn __imp_?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ:dword
.idata:0041428C                                         ; CODE XREF: sub_4040E0+F6↑p
.idata:0041428C                                         ; sub_407B60+8E↑p ...
.idata:0041428C                                         ; Import by ordinal 1165
.idata:00414290 ; public: int __thiscall CString::LoadStringW(unsigned int)
.idata:00414290                 extrn ?LoadStringW@CString@@QAEHI@Z:dword
.idata:00414290                                         ; CODE XREF: sub_4040E0+10E↑p
.idata:00414290                                         ; sub_404316+11F↑p ...
.idata:00414290                                         ; Import by ordinal 4155
.idata:00414294 ; public: void __thiscall CWnd::CheckDlgButton(int, unsigned int)
.idata:00414294                 extrn ?CheckDlgButton@CWnd@@QAEXHI@Z:dword
.idata:00414294                                         ; CODE XREF: sub_4040E0+196↑p
.idata:00414294                                         ; sub_4072C9+A5↑p ...
.idata:00414294                                         ; Import by ordinal 1771
.idata:00414298 ; public: void __thiscall CPropertySheet::RemovePage(int)
.idata:00414298                 extrn ?RemovePage@CPropertySheet@@QAEXH@Z:dword
.idata:00414298                                         ; CODE XREF: sub_4040E0+1FC↑p
.idata:00414298                                         ; sub_407B60+F0↑p
.idata:00414298                                         ; DATA XREF: ...
.idata:00414298                                         ; Import by ordinal 5633
.idata:0041429C ; __declspec(dllimport) protected: void __thiscall CWnd::OnDestroy(void)
.idata:0041429C                 extrn __imp_?OnDestroy@CWnd@@IAEXXZ:dword
.idata:0041429C                                         ; CODE XREF: sub_404300+5↑p
.idata:0041429C                                         ; DATA XREF: sub_404300+5↑r ...
.idata:0041429C                                         ; Import by ordinal 6451
.idata:004142A0 ; public: __thiscall CString::CString(class CString const &)
.idata:004142A0                 extrn ??0CString@@QAE@ABV0@@Z:dword
.idata:004142A0                                         ; CODE XREF: sub_404316+296↑p
.idata:004142A0                                         ; sub_4050D7+89↑p ...
.idata:004142A0                                         ; Import by ordinal 535
.idata:004142A4 ; public: void __thiscall CString::MakeLower(void)
.idata:004142A4                 extrn ?MakeLower@CString@@QAEXXZ:dword
.idata:004142A4                                         ; CODE XREF: sub_404316+2A3↑p
.idata:004142A4                                         ; sub_405FEB+45↑p ...
.idata:004142A4                                         ; Import by ordinal 4197
.idata:004142A8 ; public: int __thiscall CString::Find(unsigned short const *)const
.idata:004142A8                 extrn ?Find@CString@@QBEHPBG@Z:dword
.idata:004142A8                                         ; CODE XREF: sub_404316+2B1↑p
.idata:004142A8                                         ; sub_40C7B0+1AF↑p
.idata:004142A8                                         ; DATA XREF: ...
.idata:004142A8                                         ; Import by ordinal 2756
.idata:004142AC ; public: __thiscall CString::CString(unsigned short const *)
.idata:004142AC                 extrn ??0CString@@QAE@PBG@Z:dword
.idata:004142AC                                         ; CODE XREF: sub_405AC6+27↑p
.idata:004142AC                                         ; sub_405AC6+4E↑p ...
.idata:004142AC                                         ; Import by ordinal 538
.idata:004142B0 ; public: void __thiscall CString::Empty(void)
.idata:004142B0                 extrn ?Empty@CString@@QAEXXZ:dword
.idata:004142B0                                         ; CODE XREF: sub_4048DF+22F↑p
.idata:004142B0                                         ; sub_404FB1+36↑p ...
.idata:004142B0                                         ; Import by ordinal 2606
.idata:004142B4 ; public: __thiscall CTime::CTime(int, int, int, int, int, int, int)
.idata:004142B4                 extrn ??0CTime@@QAE@HHHHHHH@Z:dword
.idata:004142B4                                         ; CODE XREF: sub_4048DF+1FF↑p
.idata:004142B4                                         ; DATA XREF: sub_4048DF+1FF↑r
.idata:004142B4                                         ; Import by ordinal 551
.idata:004142B8 ; public: void __thiscall CPropertyPage::SetModified(int)
.idata:004142B8                 extrn ?SetModified@CPropertyPage@@QAEXH@Z:dword
.idata:004142B8                                         ; CODE XREF: sub_404B9F+FA↑p
.idata:004142B8                                         ; sub_405500+B1↑p ...
.idata:004142B8                                         ; Import by ordinal 6024
.idata:004142BC ; public: void __thiscall CString::TrimLeft(void)
.idata:004142BC                 extrn ?TrimLeft@CString@@QAEXXZ:dword
.idata:004142BC                                         ; CODE XREF: sub_404FB1+BF↑p
.idata:004142BC                                         ; DATA XREF: sub_404FB1+BF↑r
.idata:004142BC                                         ; Import by ordinal 6278
.idata:004142C0 ; public: struct __POSITION * __thiscall CStringList::Find(unsigned short const *, struct __POSITION *)const
.idata:004142C0                 extrn ?Find@CStringList@@QBEPAU__POSITION@@PBGPAU2@@Z:dword
.idata:004142C0                                         ; CODE XREF: sub_4050D7+7C↑p
.idata:004142C0                                         ; sub_40530F+6E↑p
.idata:004142C0                                         ; DATA XREF: ...
.idata:004142C0                                         ; Import by ordinal 2757
.idata:004142C4 ; public: void __thiscall CStringList::RemoveAt(struct __POSITION *)
.idata:004142C4                 extrn ?RemoveAt@CStringList@@QAEXPAU__POSITION@@@Z:dword
.idata:004142C4                                         ; CODE XREF: sub_4050D7+B1↑p
.idata:004142C4                                         ; DATA XREF: sub_4050D7+B1↑r
.idata:004142C4                                         ; Import by ordinal 5605
.idata:004142C8 ; public: class CString const & __thiscall CString::operator=(class CString const &)
.idata:004142C8                 extrn ??4CString@@QAEABV0@ABV0@@Z:dword
.idata:004142C8                                         ; CODE XREF: sub_4050D7+13F↑p
.idata:004142C8                                         ; sub_405410+74↑p ...
.idata:004142C8                                         ; Import by ordinal 858
.idata:004142CC ; public: void __thiscall CException::Delete(void)
.idata:004142CC                 extrn ?Delete@CException@@QAEXXZ:dword
.idata:004142CC                                         ; CODE XREF: sub_4050D7+1BC↑p
.idata:004142CC                                         ; DATA XREF: sub_4050D7+1BC↑r
.idata:004142CC                                         ; Import by ordinal 2385
.idata:004142D0 ; public: struct __POSITION * __thiscall CStringList::AddHead(class CString const &)
.idata:004142D0                 extrn ?AddHead@CStringList@@QAEPAU__POSITION@@ABVCString@@@Z:dword
.idata:004142D0                                         ; CODE XREF: sub_4050D7+197↑p
.idata:004142D0                                         ; DATA XREF: sub_4050D7+197↑r
.idata:004142D0                                         ; Import by ordinal 6563
.idata:004142D4 ; public: unsigned int __thiscall CWnd::IsDlgButtonChecked(int)const
.idata:004142D4                 extrn ?IsDlgButtonChecked@CWnd@@QBEIH@Z:dword
.idata:004142D4                                         ; CODE XREF: sub_405620+A↑p
.idata:004142D4                                         ; sub_4072C9+196↑p ...
.idata:004142D4                                         ; Import by ordinal 4050
.idata:004142D8 ; public: class CString const & __thiscall CString::operator+=(class CString const &)
.idata:004142D8                 extrn ??YCString@@QAEABV0@ABV0@@Z:dword
.idata:004142D8                                         ; CODE XREF: sub_405AC6+6C↑p
.idata:004142D8                                         ; OpenRegKey(ushort const *,ushort const *,ulong)+E9↑p ...
.idata:004142D8                                         ; Import by ordinal 940
.idata:004142DC ; class CString __stdcall operator+(class CString const &, class CString const &)
.idata:004142DC                 extrn ??H@YG?AVCString@@ABV0@0@Z:dword
.idata:004142DC                                         ; CODE XREF: sub_405AC6+5E↑p
.idata:004142DC                                         ; OpenRegKey(ushort const *,ushort const *,ulong)+DB↑p ...
.idata:004142DC                                         ; Import by ordinal 922
.idata:004142E0 ; public: static class CTime __stdcall CTime::GetTickCount(void)
.idata:004142E0                 extrn ?GetTickCount@CTime@@SG?AV1@XZ:dword
.idata:004142E0                                         ; CODE XREF: sub_405AC6+FC↑p
.idata:004142E0                                         ; sub_405F2F+25↑p
.idata:004142E0                                         ; DATA XREF: ...
.idata:004142E0                                         ; Import by ordinal 3806
.idata:004142E4 ; public: struct tm * __thiscall CTime::GetLocalTm(struct tm *)const
.idata:004142E4                 extrn ?GetLocalTm@CTime@@QBEPAUtm@@PAU2@@Z:dword
.idata:004142E4                                         ; CODE XREF: sub_405AC6+10B↑p
.idata:004142E4                                         ; sub_405AC6+126↑p ...
.idata:004142E4                                         ; Import by ordinal 3332
.idata:004142E8 ; __declspec(dllimport) protected: virtual int __thiscall CPropertyPage::OnNotify(unsigned int, long, long *)
.idata:004142E8                 extrn __imp_?OnNotify@CPropertyPage@@MAEHIJPAJ@Z:dword
.idata:004142E8                                         ; DATA XREF: CPropertyPage::OnNotify(uint,long,long *)↑r
.idata:004142E8                                         ; Import by ordinal 4829
.idata:004142EC ; __declspec(dllimport) protected: virtual int __thiscall CPropertyPage::PreTranslateMessage(struct tagMSG *)
.idata:004142EC                 extrn __imp_?PreTranslateMessage@CPropertyPage@@MAEHPAUtagMSG@@@Z:dword
.idata:004142EC                                         ; DATA XREF: CPropertyPage::PreTranslateMessage(tagMSG *)↑r
.idata:004142EC                                         ; Import by ordinal 5283
.idata:004142F0 ; __declspec(dllimport) public: virtual void __thiscall CPropertyPage::OnOK(void)
.idata:004142F0                 extrn __imp_?OnOK@CPropertyPage@@UAEXXZ:dword
.idata:004142F0                                         ; DATA XREF: CPropertyPage::OnOK(void)↑r
.idata:004142F0                                         ; Import by ordinal 4848
.idata:004142F4 ; __declspec(dllimport) public: virtual void __thiscall CPropertyPage::OnCancel(void)
.idata:004142F4                 extrn __imp_?OnCancel@CPropertyPage@@UAEXXZ:dword
.idata:004142F4                                         ; DATA XREF: CPropertyPage::OnCancel(void)↑r
.idata:004142F4                                         ; Import by ordinal 4371
.idata:004142F8 ; __declspec(dllimport) public: virtual void __thiscall CPropertyPage::OnReset(void)
.idata:004142F8                 extrn __imp_?OnReset@CPropertyPage@@UAEXXZ:dword
.idata:004142F8                                         ; DATA XREF: CPropertyPage::OnReset(void)↑r
.idata:004142F8                                         ; Import by ordinal 4942
.idata:004142FC ; __declspec(dllimport) public: virtual int __thiscall CPropertyPage::OnSetActive(void)
.idata:004142FC                 extrn __imp_?OnSetActive@CPropertyPage@@UAEHXZ:dword
.idata:004142FC                                         ; DATA XREF: CPropertyPage::OnSetActive(void)↑r
.idata:004142FC                                         ; Import by ordinal 4970
.idata:00414300 ; __declspec(dllimport) public: virtual int __thiscall CPropertyPage::OnKillActive(void)
.idata:00414300                 extrn __imp_?OnKillActive@CPropertyPage@@UAEHXZ:dword
.idata:00414300                                         ; DATA XREF: CPropertyPage::OnKillActive(void)↑r
.idata:00414300                                         ; Import by ordinal 4736
.idata:00414304 ; __declspec(dllimport) public: virtual int __thiscall CPropertyPage::OnQueryCancel(void)
.idata:00414304                 extrn __imp_?OnQueryCancel@CPropertyPage@@UAEHXZ:dword
.idata:00414304                                         ; DATA XREF: CPropertyPage::OnQueryCancel(void)↑r
.idata:00414304                                         ; Import by ordinal 4899
.idata:00414308 ; __declspec(dllimport) public: virtual long __thiscall CPropertyPage::OnWizardBack(void)
.idata:00414308                 extrn __imp_?OnWizardBack@CPropertyPage@@UAEJXZ:dword
.idata:00414308                                         ; DATA XREF: CPropertyPage::OnWizardBack(void)↑r
.idata:00414308                                         ; Import by ordinal 5154
.idata:0041430C ; __declspec(dllimport) public: virtual long __thiscall CPropertyPage::OnWizardNext(void)
.idata:0041430C                 extrn __imp_?OnWizardNext@CPropertyPage@@UAEJXZ:dword
.idata:0041430C                                         ; DATA XREF: CPropertyPage::OnWizardNext(void)↑r
.idata:0041430C                                         ; Import by ordinal 5156
.idata:00414310 ; __declspec(dllimport) public: virtual int __thiscall CPropertyPage::OnWizardFinish(void)
.idata:00414310                 extrn __imp_?OnWizardFinish@CPropertyPage@@UAEHXZ:dword
.idata:00414310                                         ; DATA XREF: CPropertyPage::OnWizardFinish(void)↑r
.idata:00414310                                         ; Import by ordinal 5155
.idata:00414314 ; public: void __thiscall CWnd::CheckRadioButton(int, int, int)
.idata:00414314                 extrn ?CheckRadioButton@CWnd@@QAEXHHH@Z:dword
.idata:00414314                                         ; CODE XREF: sub_4072C9+C6↑p
.idata:00414314                                         ; sub_4072C9+FB↑p
.idata:00414314                                         ; DATA XREF: ...
.idata:00414314                                         ; Import by ordinal 1775
.idata:00414318 ; public: void __thiscall CPropertyPage::CancelToClose(void)
.idata:00414318                 extrn ?CancelToClose@CPropertyPage@@QAEXXZ:dword
.idata:00414318                                         ; CODE XREF: sub_407690↑p
.idata:00414318                                         ; DATA XREF: sub_407690↑r
.idata:00414318                                         ; Import by ordinal 1735
.idata:0041431C ; class CString __stdcall operator+(unsigned short const *, class CString const &)
.idata:0041431C                 extrn ??H@YG?AVCString@@PBGABV0@@Z:dword
.idata:0041431C                                         ; CODE XREF: sub_407CA0+83↑p
.idata:0041431C                                         ; DATA XREF: sub_407CA0+83↑r
.idata:0041431C                                         ; Import by ordinal 927
.idata:00414320 ; public: int __thiscall CString::Find(unsigned short const *, int)const
.idata:00414320                 extrn ?Find@CString@@QBEHPBGH@Z:dword
.idata:00414320                                         ; CODE XREF: sub_4092C4+48↑p
.idata:00414320                                         ; sub_4092C4+6F↑p ...
.idata:00414320                                         ; Import by ordinal 6655
.idata:00414324 ; public: void __cdecl CString::Format(unsigned short const *, ...)
.idata:00414324                 extrn ?Format@CString@@QAAXPBGZZ:dword
.idata:00414324                                         ; CODE XREF: sub_4093CA+48↑p
.idata:00414324                                         ; CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+23F↑p ...
.idata:00414324                                         ; Import by ordinal 2810
.idata:00414328 ; public: int __thiscall CWnd::EnableWindow(int)
.idata:00414328                 extrn ?EnableWindow@CWnd@@QAEHH@Z:dword
.idata:00414328                                         ; CODE XREF: sub_40A9B6+B3↑p
.idata:00414328                                         ; DATA XREF: sub_40A9B6+B3↑r
.idata:00414328                                         ; Import by ordinal 2634
.idata:0041432C ; public: void __thiscall CWnd::SetDlgItemInt(int, unsigned int, int)
.idata:0041432C                 extrn ?SetDlgItemInt@CWnd@@QAEXHIH@Z:dword
.idata:0041432C                                         ; CODE XREF: sub_40A9B6+5F↑p
.idata:0041432C                                         ; sub_40B530+140↑p
.idata:0041432C                                         ; DATA XREF: ...
.idata:0041432C                                         ; Import by ordinal 5947
.idata:00414330 ; public: unsigned int __thiscall CWnd::GetDlgItemInt(int, int *, int)const
.idata:00414330                 extrn ?GetDlgItemInt@CWnd@@QBEIHPAHH@Z:dword
.idata:00414330                                         ; CODE XREF: sub_40B4E0+1A↑p
.idata:00414330                                         ; DATA XREF: sub_40B4E0+1A↑r
.idata:00414330                                         ; Import by ordinal 3090
.idata:00414334 ; public: int __thiscall CWnd::GetDlgItemTextW(int, unsigned short *, int)const
.idata:00414334                 extrn ?GetDlgItemTextW@CWnd@@QBEHHPAGH@Z:dword
.idata:00414334                                         ; CODE XREF: sub_40B530+3B↑p
.idata:00414334                                         ; DATA XREF: sub_40B530+3B↑r
.idata:00414334                                         ; Import by ordinal 3093
.idata:00414338 ; public: int __thiscall CWnd::MessageBoxW(unsigned short const *, unsigned short const *, unsigned int)
.idata:00414338                 extrn ?MessageBoxW@CWnd@@QAEHPBG0I@Z:dword
.idata:00414338                                         ; CODE XREF: sub_40B530+E8↑p
.idata:00414338                                         ; CPageBootIni::OnApply(void)+2F7↑p
.idata:00414338                                         ; DATA XREF: ...
.idata:00414338                                         ; Import by ordinal 4219
.idata:0041433C ; public: void __cdecl CString::Format(unsigned int, ...)
.idata:0041433C                 extrn ?Format@CString@@QAAXIZZ:dword
.idata:0041433C                                         ; CODE XREF: CPageBootIni::OnApply(void)+CA↑p
.idata:0041433C                                         ; sub_40C7B0+4C0↑p
.idata:0041433C                                         ; DATA XREF: ...
.idata:0041433C                                         ; Import by ordinal 2809
.idata:00414340 ; public: static struct CRuntimeClass const CPropertySheet::classCPropertySheet
.idata:00414340                 extrn ?classCPropertySheet@CPropertySheet@@2UCRuntimeClass@@B:dword
.idata:00414340                                         ; DATA XREF: sub_40C600↑r
.idata:00414340                                         ; Import by ordinal 1900
.idata:00414344 ; public: __thiscall CPropertySheet::CPropertySheet(unsigned int, class CWnd *, unsigned int)
.idata:00414344                 extrn ??0CPropertySheet@@QAE@IPAVCWnd@@I@Z:dword
.idata:00414344                                         ; CODE XREF: sub_40CE7B+27↑p
.idata:00414344                                         ; DATA XREF: sub_40CE7B+27↑r
.idata:00414344                                         ; Import by ordinal 496
.idata:00414348 ; public: virtual __thiscall CPropertySheet::~CPropertySheet(void)
.idata:00414348                 extrn ??1CPropertySheet@@UAE@XZ:dword
.idata:00414348                                         ; CODE XREF: sub_40C642+F↑p
.idata:00414348                                         ; sub_40CE7B+1AF↑p
.idata:00414348                                         ; DATA XREF: ...
.idata:00414348                                         ; Import by ordinal 771
.idata:0041434C ; protected: static struct AFX_MSGMAP const CPropertySheet::messageMap
.idata:0041434C                 extrn ?messageMap@CPropertySheet@@1UAFX_MSGMAP@@B:dword
.idata:0041434C                                         ; DATA XREF: sub_40C660↑r
.idata:0041434C                                         ; Import by ordinal 4254
.idata:00414350 ; public: virtual int __thiscall CPropertySheet::OnInitDialog(void)
.idata:00414350                 extrn ?OnInitDialog@CPropertySheet@@UAEHXZ:dword
.idata:00414350                                         ; CODE XREF: sub_40C680+7↑p
.idata:00414350                                         ; DATA XREF: sub_40C680+7↑r
.idata:00414350                                         ; Import by ordinal 4709
.idata:00414354 ; struct HINSTANCE__ * __stdcall AfxFindResourceHandle(unsigned short const *, unsigned short const *)
.idata:00414354                 extrn ?AfxFindResourceHandle@@YGPAUHINSTANCE__@@PBG0@Z:dword
.idata:00414354                                         ; CODE XREF: sub_40C680+1C↑p
.idata:00414354                                         ; DATA XREF: sub_40C680+1C↑r
.idata:00414354                                         ; Import by ordinal 1143
.idata:00414358 ; public: int __thiscall CPropertySheet::GetPageCount(void)const
.idata:00414358                 extrn ?GetPageCount@CPropertySheet@@QBEHXZ:dword
.idata:00414358                                         ; CODE XREF: sub_40C680+54↑p
.idata:00414358                                         ; sub_40C680+6A↑p
.idata:00414358                                         ; DATA XREF: ...
.idata:00414358                                         ; Import by ordinal 3470
.idata:0041435C ; public: int __thiscall CPropertySheet::SetActivePage(int)
.idata:0041435C                 extrn ?SetActivePage@CPropertySheet@@QAEHH@Z:dword
.idata:0041435C                                         ; CODE XREF: sub_40C680+61↑p
.idata:0041435C                                         ; sub_40C680+7C↑p
.idata:0041435C                                         ; DATA XREF: ...
.idata:0041435C                                         ; Import by ordinal 5845
.idata:00414360 ; __declspec(dllimport) public: virtual int __thiscall CPropertySheet::OnCmdMsg(unsigned int, int, void *, struct AFX_CMDHANDLERINFO *)
.idata:00414360                 extrn __imp_?OnCmdMsg@CPropertySheet@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z:dword
.idata:00414360                                         ; DATA XREF: CPropertySheet::OnCmdMsg(uint,int,void *,AFX_CMDHANDLERINFO *)↑r
.idata:00414360                                         ; Import by ordinal 4425
.idata:00414364 ; __declspec(dllimport) public: virtual int __thiscall CPropertySheet::ContinueModal(void)
.idata:00414364                 extrn __imp_?ContinueModal@CPropertySheet@@UAEHXZ:dword
.idata:00414364                                         ; DATA XREF: CPropertySheet::ContinueModal(void)↑r
.idata:00414364                                         ; Import by ordinal 2046
.idata:00414368 ; __declspec(dllimport) public: virtual int __thiscall CPropertySheet::OnCommand(unsigned int, long)
.idata:00414368                 extrn __imp_?OnCommand@CPropertySheet@@UAEHIJ@Z:dword
.idata:00414368                                         ; DATA XREF: CPropertySheet::OnCommand(uint,long)↑r
.idata:00414368                                         ; Import by ordinal 4433
.idata:0041436C ; __declspec(dllimport) public: virtual int __thiscall CPropertySheet::PreTranslateMessage(struct tagMSG *)
.idata:0041436C                 extrn __imp_?PreTranslateMessage@CPropertySheet@@UAEHPAUtagMSG@@@Z:dword
.idata:0041436C                                         ; DATA XREF: CPropertySheet::PreTranslateMessage(tagMSG *)↑r
.idata:0041436C                                         ; Import by ordinal 5284
.idata:00414370 ; __declspec(dllimport) public: virtual int __thiscall CWnd::CheckAutoCenter(void)
.idata:00414370                 extrn __imp_?CheckAutoCenter@CWnd@@UAEHXZ:dword
.idata:00414370                                         ; DATA XREF: CWnd::CheckAutoCenter(void)↑r
.idata:00414370                                         ; Import by ordinal 1768
.idata:00414374 ; __declspec(dllimport) protected: virtual int __thiscall CWnd::SetOccDialogInfo(struct _AFX_OCC_DIALOG_INFO *)
.idata:00414374                 extrn __imp_?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z:dword
.idata:00414374                                         ; DATA XREF: CWnd::SetOccDialogInfo(_AFX_OCC_DIALOG_INFO *)↑r
.idata:00414374                                         ; Import by ordinal 6051
.idata:00414378 ; __declspec(dllimport) public: virtual int __thiscall CPropertySheet::DoModal(void)
.idata:00414378                 extrn __imp_?DoModal@CPropertySheet@@UAEHXZ:dword
.idata:00414378                                         ; CODE XREF: sub_40CE7B+D2↑p
.idata:00414378                                         ; DATA XREF: sub_40CE7B+D2↑r ...
.idata:00414378                                         ; Import by ordinal 2520
.idata:0041437C ; __declspec(dllimport) public: virtual void __thiscall CPropertySheet::BuildPropPageArray(void)
.idata:0041437C                 extrn __imp_?BuildPropPageArray@CPropertySheet@@UAEXXZ:dword
.idata:0041437C                                         ; DATA XREF: CPropertySheet::BuildPropPageArray(void)↑r
.idata:0041437C                                         ; Import by ordinal 1683
.idata:00414380 ; protected: static struct AFX_MSGMAP const CWinApp::messageMap
.idata:00414380                 extrn ?messageMap@CWinApp@@1UAFX_MSGMAP@@B:dword
.idata:00414380                                         ; DATA XREF: sub_40C760↑r
.idata:00414380                                         ; Import by ordinal 4269
.idata:00414384 ; __declspec(dllimport) protected: void __thiscall CWinApp::OnHelp(void)
.idata:00414384                 extrn __imp_?OnHelp@CWinApp@@IAEXXZ:dword
.idata:00414384                                         ; DATA XREF: CWinApp::OnHelp(void)↑r
.idata:00414384                                         ; Import by ordinal 4667
.idata:00414388 ; public: __thiscall CWinApp::CWinApp(unsigned short const *)
.idata:00414388                 extrn ??0CWinApp@@QAE@PBG@Z:dword
.idata:00414388                                         ; CODE XREF: sub_403AC0+7↑p
.idata:00414388                                         ; DATA XREF: sub_403AC0+7↑r
.idata:00414388                                         ; Import by ordinal 561
.idata:0041438C ; public: virtual __thiscall CWinApp::~CWinApp(void)
.idata:0041438C                 extrn ??1CWinApp@@UAE@XZ:dword
.idata:0041438C                                         ; CODE XREF: Base::GdiException::`scalar deleting destructor'(uint)+8↑p
.idata:0041438C                                         ; DATA XREF: Base::GdiException::`scalar deleting destructor'(uint)+8↑r ...
.idata:0041438C                                         ; Import by ordinal 815
.idata:00414390 ; void __cdecl AfxEnableControlContainer(class COccManager *)
.idata:00414390                 extrn ?AfxEnableControlContainer@@YAXPAVCOccManager@@@Z:dword
.idata:00414390                                         ; CODE XREF: sub_40C7B0+2E↑p
.idata:00414390                                         ; DATA XREF: sub_40C7B0+2E↑r
.idata:00414390                                         ; Import by ordinal 1131
.idata:00414394 ; public: __thiscall CCommandLineInfo::CCommandLineInfo(void)
.idata:00414394                 extrn ??0CCommandLineInfo@@QAE@XZ:dword
.idata:00414394                                         ; CODE XREF: sub_40C7B0+38↑p
.idata:00414394                                         ; DATA XREF: sub_40C7B0+38↑r
.idata:00414394                                         ; Import by ordinal 296
.idata:00414398 ; public: virtual __thiscall CCommandLineInfo::~CCommandLineInfo(void)
.idata:00414398                 extrn ??1CCommandLineInfo@@UAE@XZ:dword
.idata:00414398                                         ; CODE XREF: sub_40C7B0+5CF↑p
.idata:00414398                                         ; DATA XREF: sub_40C7B0+5CF↑r ...
.idata:00414398                                         ; Import by ordinal 617
.idata:0041439C ; public: void __thiscall CWinApp::ParseCommandLine(class CCommandLineInfo &)
.idata:0041439C                 extrn ?ParseCommandLine@CWinApp@@QAEXAAVCCommandLineInfo@@@Z:dword
.idata:0041439C                                         ; CODE XREF: sub_40C7B0+47↑p
.idata:0041439C                                         ; DATA XREF: sub_40C7B0+47↑r
.idata:0041439C                                         ; Import by ordinal 5208
.idata:004143A0 ; protected: int __thiscall CWinApp::Enable3dControls(void)
.idata:004143A0                 extrn ?Enable3dControls@CWinApp@@IAEHXZ:dword
.idata:004143A0                                         ; CODE XREF: sub_40C7B0+AD↑p
.idata:004143A0                                         ; DATA XREF: sub_40C7B0+AD↑r
.idata:004143A0                                         ; Import by ordinal 2613
.idata:004143A4 ; public: int __thiscall CString::FindOneOf(unsigned short const *)const
.idata:004143A4                 extrn ?FindOneOf@CString@@QBEHPBG@Z:dword
.idata:004143A4                                         ; CODE XREF: sub_40C7B0+102↑p
.idata:004143A4                                         ; DATA XREF: sub_40C7B0+102↑r
.idata:004143A4                                         ; Import by ordinal 2776
.idata:004143A8 ; public: class CString __thiscall CString::Mid(int)const
.idata:004143A8                 extrn ?Mid@CString@@QBE?AV1@H@Z:dword
.idata:004143A8                                         ; CODE XREF: sub_40C7B0+11E↑p
.idata:004143A8                                         ; sub_40C7B0+17D↑p ...
.idata:004143A8                                         ; Import by ordinal 4272
.idata:004143AC ; public: class CString __thiscall CString::SpanExcluding(unsigned short const *)const
.idata:004143AC                 extrn ?SpanExcluding@CString@@QBE?AV1@PBG@Z:dword
.idata:004143AC                                         ; CODE XREF: sub_40C7B0+14B↑p
.idata:004143AC                                         ; sub_40C7B0+263↑p
.idata:004143AC                                         ; DATA XREF: ...
.idata:004143AC                                         ; Import by ordinal 6218
.idata:004143B0 ; public: void __thiscall CString::TrimRight(void)
.idata:004143B0                 extrn ?TrimRight@CString@@QAEXXZ:dword
.idata:004143B0                                         ; CODE XREF: sub_40C7B0+1A1↑p
.idata:004143B0                                         ; DATA XREF: sub_40C7B0+1A1↑r
.idata:004143B0                                         ; Import by ordinal 6279
.idata:004143B4 ; public: class CString __thiscall CString::Left(int)const
.idata:004143B4                 extrn ?Left@CString@@QBE?AV1@H@Z:dword
.idata:004143B4                                         ; CODE XREF: sub_40C7B0+228↑p
.idata:004143B4                                         ; DATA XREF: sub_40C7B0+228↑r
.idata:004143B4                                         ; Import by ordinal 4124
.idata:004143B8 ; public: int __thiscall CWnd::ModifyStyle(unsigned long, unsigned long, unsigned int)
.idata:004143B8                 extrn ?ModifyStyle@CWnd@@QAEHKKI@Z:dword
.idata:004143B8                                         ; CODE XREF: sub_40CE7B+51↑p
.idata:004143B8                                         ; DATA XREF: sub_40CE7B+51↑r
.idata:004143B8                                         ; Import by ordinal 4279
.idata:004143BC ; public: void __thiscall CPropertySheet::AddPage(class CPropertyPage *)
.idata:004143BC                 extrn ?AddPage@CPropertySheet@@QAEXPAVCPropertyPage@@@Z:dword
.idata:004143BC                                         ; CODE XREF: sub_40CE7B+67↑p
.idata:004143BC                                         ; sub_40CE7B+7D↑p ...
.idata:004143BC                                         ; Import by ordinal 1008
.idata:004143C0 ; public: virtual int __thiscall CWinApp::ExitInstance(void)
.idata:004143C0                 extrn ?ExitInstance@CWinApp@@UAEHXZ:dword
.idata:004143C0                                         ; DATA XREF: sub_40D3B0+3D↑r
.idata:004143C0                                         ; Import by ordinal 2717
.idata:004143C4 ; public: int __thiscall CString::ReverseFind(unsigned short)const
.idata:004143C4                 extrn ?ReverseFind@CString@@QBEHG@Z:dword
.idata:004143C4                                         ; CODE XREF: sub_40D856+DB↑p
.idata:004143C4                                         ; DATA XREF: sub_40D856+DB↑r
.idata:004143C4                                         ; Import by ordinal 5679
.idata:004143C8 ; class CString __stdcall operator+(class CString const &, unsigned short const *)
.idata:004143C8                 extrn ??H@YG?AVCString@@ABV0@PBG@Z:dword
.idata:004143C8                                         ; CODE XREF: sub_40D856+187↑p
.idata:004143C8                                         ; DATA XREF: sub_40D856+187↑r
.idata:004143C8                                         ; Import by ordinal 925
.idata:004143CC ; public: static class CWnd * __stdcall CWnd::FromHandle(struct HWND__ *)
.idata:004143CC                 extrn ?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z:dword
.idata:004143CC                                         ; CODE XREF: sub_40DB30+34↑p
.idata:004143CC                                         ; sub_40DB30+6A↑p
.idata:004143CC                                         ; DATA XREF: ...
.idata:004143CC                                         ; Import by ordinal 2859
.idata:004143D0 ; public: int __thiscall CWnd::ShowWindow(int)
.idata:004143D0                 extrn ?ShowWindow@CWnd@@QAEHH@Z:dword
.idata:004143D0                                         ; CODE XREF: sub_40DB30+5A↑p
.idata:004143D0                                         ; DATA XREF: sub_40DB30+5A↑r
.idata:004143D0                                         ; Import by ordinal 6211
.idata:004143D4 ; __declspec(dllimport) public: virtual struct CRuntimeClass * __thiscall CWinApp::GetRuntimeClass(void)const
.idata:004143D4                 extrn __imp_?GetRuntimeClass@CWinApp@@UBEPAUCRuntimeClass@@XZ:dword
.idata:004143D4                                         ; DATA XREF: CWinApp::GetRuntimeClass(void)↑r
.idata:004143D4                                         ; Import by ordinal 3733
.idata:004143D8 ; __declspec(dllimport) public: virtual int __thiscall CCmdTarget::OnCmdMsg(unsigned int, int, void *, struct AFX_CMDHANDLERINFO *)
.idata:004143D8                 extrn __imp_?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z:dword
.idata:004143D8                                         ; DATA XREF: CCmdTarget::OnCmdMsg(uint,int,void *,AFX_CMDHANDLERINFO *)↑r
.idata:004143D8                                         ; Import by ordinal 4418
.idata:004143DC ; __declspec(dllimport) public: virtual void __thiscall CCmdTarget::OnFinalRelease(void)
.idata:004143DC                 extrn __imp_?OnFinalRelease@CCmdTarget@@UAEXXZ:dword
.idata:004143DC                                         ; DATA XREF: CCmdTarget::OnFinalRelease(void)↑r
.idata:004143DC                                         ; Import by ordinal 4616
.idata:004143E0 ; __declspec(dllimport) public: virtual int __thiscall CWinApp::Run(void)
.idata:004143E0                 extrn __imp_?Run@CWinApp@@UAEHXZ:dword
.idata:004143E0                                         ; DATA XREF: CWinApp::Run(void)↑r
.idata:004143E0                                         ; Import by ordinal 5710
.idata:004143E4 ; __declspec(dllimport) public: virtual int __thiscall CWinThread::PreTranslateMessage(struct tagMSG *)
.idata:004143E4                 extrn __imp_?PreTranslateMessage@CWinThread@@UAEHPAUtagMSG@@@Z:dword
.idata:004143E4                                         ; DATA XREF: CWinThread::PreTranslateMessage(tagMSG *)↑r
.idata:004143E4                                         ; Import by ordinal 5285
.idata:004143E8 ; __declspec(dllimport) public: virtual int __thiscall CWinThread::PumpMessage(void)
.idata:004143E8                 extrn __imp_?PumpMessage@CWinThread@@UAEHXZ:dword
.idata:004143E8                                         ; DATA XREF: CWinThread::PumpMessage(void)↑r
.idata:004143E8                                         ; Import by ordinal 5303
.idata:004143EC ; __declspec(dllimport) public: virtual int __thiscall CWinApp::OnIdle(long)
.idata:004143EC                 extrn __imp_?OnIdle@CWinApp@@UAEHJ@Z:dword
.idata:004143EC                                         ; DATA XREF: CWinApp::OnIdle(long)↑r
.idata:004143EC                                         ; Import by ordinal 4692
.idata:004143F0 ; __declspec(dllimport) public: virtual int __thiscall CWinThread::IsIdleMessage(struct tagMSG *)
.idata:004143F0                 extrn __imp_?IsIdleMessage@CWinThread@@UAEHPAUtagMSG@@@Z:dword
.idata:004143F0                                         ; DATA XREF: CWinThread::IsIdleMessage(tagMSG *)↑r
.idata:004143F0                                         ; Import by ordinal 4074
.idata:004143F4 ; __declspec(dllimport) public: virtual long __thiscall CWinApp::ProcessWndProcException(class CException *, struct tagMSG const *)
.idata:004143F4                 extrn __imp_?ProcessWndProcException@CWinApp@@UAEJPAVCException@@PBUtagMSG@@@Z:dword
.idata:004143F4                                         ; DATA XREF: CWinApp::ProcessWndProcException(CException *,tagMSG const *)↑r
.idata:004143F4                                         ; Import by ordinal 5298
.idata:004143F8 ; __declspec(dllimport) public: virtual int __thiscall CWinThread::ProcessMessageFilter(int, struct tagMSG *)
.idata:004143F8                 extrn __imp_?ProcessMessageFilter@CWinThread@@UAEHHPAUtagMSG@@@Z:dword
.idata:004143F8                                         ; DATA XREF: CWinThread::ProcessMessageFilter(int,tagMSG *)↑r
.idata:004143F8                                         ; Import by ordinal 5296
.idata:004143FC ; __declspec(dllimport) public: virtual class CWnd * __thiscall CWinThread::GetMainWnd(void)
.idata:004143FC                 extrn __imp_?GetMainWnd@CWinThread@@UAEPAVCWnd@@XZ:dword
.idata:004143FC                                         ; DATA XREF: CWinThread::GetMainWnd(void)↑r
.idata:004143FC                                         ; Import by ordinal 3341
.idata:00414400 ; __declspec(dllimport) public: virtual void __thiscall CWinThread::Delete(void)
.idata:00414400                 extrn __imp_?Delete@CWinThread@@UAEXXZ:dword
.idata:00414400                                         ; DATA XREF: CWinThread::Delete(void)↑r
.idata:00414400                                         ; Import by ordinal 2388
.idata:00414404 ; __declspec(dllimport) public: virtual class CDocument * __thiscall CWinApp::OpenDocumentFile(unsigned short const *)
.idata:00414404                 extrn __imp_?OpenDocumentFile@CWinApp@@UAEPAVCDocument@@PBG@Z:dword
.idata:00414404                                         ; DATA XREF: CWinApp::OpenDocumentFile(ushort const *)↑r
.idata:00414404                                         ; Import by ordinal 5193
.idata:00414408 ; __declspec(dllimport) public: virtual void __thiscall CWinApp::AddToRecentFileList(unsigned short const *)
.idata:00414408                 extrn __imp_?AddToRecentFileList@CWinApp@@UAEXPBG@Z:dword
.idata:00414408                                         ; DATA XREF: CWinApp::AddToRecentFileList(ushort const *)↑r
.idata:00414408                                         ; Import by ordinal 1089
.idata:0041440C ; __declspec(dllimport) public: virtual int __thiscall CWinApp::InitApplication(void)
.idata:0041440C                 extrn __imp_?InitApplication@CWinApp@@UAEHXZ:dword
.idata:0041440C                                         ; DATA XREF: CWinApp::InitApplication(void)↑r
.idata:0041440C                                         ; Import by ordinal 3917
.idata:00414410 ; __declspec(dllimport) public: virtual int __thiscall CWinApp::SaveAllModified(void)
.idata:00414410                 extrn __imp_?SaveAllModified@CWinApp@@UAEHXZ:dword
.idata:00414410                                         ; DATA XREF: CWinApp::SaveAllModified(void)↑r
.idata:00414410                                         ; Import by ordinal 5727
.idata:00414414 ; __declspec(dllimport) public: virtual int __thiscall CWinApp::DoMessageBox(unsigned short const *, unsigned int, unsigned int)
.idata:00414414                 extrn __imp_?DoMessageBox@CWinApp@@UAEHPBGII@Z:dword
.idata:00414414                                         ; DATA XREF: CWinApp::DoMessageBox(ushort const *,uint,uint)↑r
.idata:00414414                                         ; Import by ordinal 2504
.idata:00414418 ; __declspec(dllimport) public: virtual void __thiscall CWinApp::DoWaitCursor(int)
.idata:00414418                 extrn __imp_?DoWaitCursor@CWinApp@@UAEXH@Z:dword
.idata:00414418                                         ; DATA XREF: CWinApp::DoWaitCursor(int)↑r
.idata:00414418                                         ; Import by ordinal 2546
.idata:0041441C ; __declspec(dllimport) public: virtual int __thiscall CWinApp::OnDDECommand(unsigned short *)
.idata:0041441C                 extrn __imp_?OnDDECommand@CWinApp@@UAEHPAG@Z:dword
.idata:0041441C                                         ; DATA XREF: CWinApp::OnDDECommand(ushort *)↑r
.idata:0041441C                                         ; Import by ordinal 4480
.idata:00414420 ; __declspec(dllimport) public: virtual void __thiscall CWinApp::WinHelpW(unsigned long, unsigned int)
.idata:00414420                 extrn __imp_?WinHelpW@CWinApp@@UAEXKI@Z:dword
.idata:00414420                                         ; DATA XREF: CWinApp::WinHelpW(ulong,uint)↑r
.idata:00414420                                         ; Import by ordinal 6371
.idata:00414424
.idata:00414428 ;
.idata:00414428 ; Imports from OLEAUT32.dll
.idata:00414428 ;
.idata:00414428 ; HRESULT (__stdcall *VariantChangeType)(VARIANTARG *pvargDest, const VARIANTARG *pvarSrc, USHORT wFlags, VARTYPE vt)
.idata:00414428                 extrn VariantChangeType:dword
.idata:00414428                                         ; CODE XREF: sub_408E79+3C↑p
.idata:00414428                                         ; DATA XREF: sub_408E79+3C↑r ...
.idata:00414428                                         ; Import by ordinal 12
.idata:0041442C ; HRESULT (__stdcall *VariantClear)(VARIANTARG *pvarg)
.idata:0041442C                 extrn VariantClear:dword
.idata:0041442C                                         ; CODE XREF: sub_408913+374↑p
.idata:0041442C                                         ; sub_4091C4+98↑p
.idata:0041442C                                         ; DATA XREF: ...
.idata:0041442C                                         ; Import by ordinal 9
.idata:00414430 ; void (__stdcall *VariantInit)(VARIANTARG *pvarg)
.idata:00414430                 extrn VariantInit:dword ; CODE XREF: sub_408913+65↑p
.idata:00414430                                         ; sub_4091C4+14↑p
.idata:00414430                                         ; DATA XREF: ...
.idata:00414430                                         ; Import by ordinal 8
.idata:00414434 ; BSTR (__stdcall *SysAllocString)(const OLECHAR *psz)
.idata:00414434                 extrn SysAllocString:dword
.idata:00414434                                         ; CODE XREF: sub_403B8B+3B↑p
.idata:00414434                                         ; sub_4086C1+27↑p ...
.idata:00414434                                         ; Import by ordinal 2
.idata:00414438 ; void (__stdcall *SysFreeString)(BSTR bstrString)
.idata:00414438                 extrn SysFreeString:dword
.idata:00414438                                         ; CODE XREF: sub_403B8B+5E↑p
.idata:00414438                                         ; sub_4086C1+F9↑p ...
.idata:00414438                                         ; Import by ordinal 6
.idata:0041443C
.idata:00414440 ;
.idata:00414440 ; Imports from SHELL32.dll
.idata:00414440 ;
.idata:00414440 ; HRESULT (__stdcall *SHEvaluateSystemCommandTemplate)(PCWSTR pszCmdTemplate, PWSTR *ppszApplication, PWSTR *ppszCommandLine, PWSTR *ppszParameters)
.idata:00414440                 extrn SHEvaluateSystemCommandTemplate:dword
.idata:00414440                                         ; CODE XREF: sub_404FB1+7D↑p
.idata:00414440                                         ; DATA XREF: sub_404FB1+7D↑r ...
.idata:00414444 ; HINSTANCE (__stdcall *ShellExecuteW)(HWND hwnd, LPCWSTR lpOperation, LPCWSTR lpFile, LPCWSTR lpParameters, LPCWSTR lpDirectory, INT nShowCmd)
.idata:00414444                 extrn ShellExecuteW:dword
.idata:00414444                                         ; CODE XREF: sub_407D90+C↑p
.idata:00414444                                         ; DATA XREF: sub_407D90+C↑r
.idata:00414448
.idata:0041444C ;
.idata:0041444C ; Imports from SHLWAPI.dll
.idata:0041444C ;
.idata:0041444C ; BOOL (__stdcall *IsOS)(DWORD dwOS)
.idata:0041444C                 extrn IsOS:dword        ; CODE XREF: sub_406FA0+7↑p
.idata:0041444C                                         ; DATA XREF: sub_406FA0+7↑r ...
.idata:0041444C                                         ; Import by ordinal 437
.idata:00414450
.idata:00414454 ;
.idata:00414454 ; Imports from USER32.dll
.idata:00414454 ;
.idata:00414454 ; BOOL (__stdcall *ShowWindow)(HWND hWnd, int nCmdShow)
.idata:00414454                 extrn ShowWindow:dword  ; CODE XREF: sub_406FA0+24↑p
.idata:00414454                                         ; sub_406FA0+44↑p ...
.idata:00414458 ; UINT (__stdcall *IsDlgButtonChecked)(HWND hDlg, int nIDButton)
.idata:00414458                 extrn IsDlgButtonChecked:dword
.idata:00414458                                         ; CODE XREF: sub_407115+44↑p
.idata:00414458                                         ; CBootIniAdvancedDlg::SetDlgControlState(void)+22↑p ...
.idata:0041445C ; BOOL (__stdcall *EndDialog)(HWND hDlg, INT_PTR nResult)
.idata:0041445C                 extrn EndDialog:dword   ; CODE XREF: sub_407096+63↑p
.idata:0041445C                                         ; sub_40C2F0+5C↑p ...
.idata:00414460 ; HWND (__stdcall *SetFocus)(HWND hWnd)
.idata:00414460                 extrn SetFocus:dword    ; CODE XREF: sub_407780+4C↑p
.idata:00414460                                         ; DATA XREF: sub_407780+4C↑r
.idata:00414464 ; BOOL (__stdcall *SetWindowTextW)(HWND hWnd, LPCWSTR lpString)
.idata:00414464                 extrn SetWindowTextW:dword
.idata:00414464                                         ; CODE XREF: sub_407DCC+55↑p
.idata:00414464                                         ; sub_407E55+73↑p ...
.idata:00414468 ; int (__stdcall *LoadStringW)(HINSTANCE hInstance, UINT uID, LPWSTR lpBuffer, int cchBufferMax)
.idata:00414468                 extrn LoadStringW:dword ; CODE XREF: sub_408373+84↑p
.idata:00414468                                         ; sub_408373+C7↑p ...
.idata:0041446C ; int (__stdcall *MessageBoxW)(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType)
.idata:0041446C                 extrn MessageBoxW:dword ; CODE XREF: sub_408373+11C↑p
.idata:0041446C                                         ; sub_40B860+1C1↑p ...
.idata:00414470 ; HWND (__stdcall *GetActiveWindow)()
.idata:00414470                 extrn GetActiveWindow:dword
.idata:00414470                                         ; CODE XREF: sub_40B6C0+44↑p
.idata:00414470                                         ; sub_40D13E+E3↑p
.idata:00414470                                         ; DATA XREF: ...
.idata:00414474 ; HWND (__stdcall *GetDlgItem)(HWND hDlg, int nIDDlgItem)
.idata:00414474                 extrn GetDlgItem:dword  ; CODE XREF: sub_4093CA+59↑p
.idata:00414474                                         ; sub_4093CA+89↑p ...
.idata:00414478 ; HWND (__stdcall *GetFocus)()
.idata:00414478                 extrn GetFocus:dword    ; CODE XREF: sub_405978+73↑p
.idata:00414478                                         ; DATA XREF: sub_405978+73↑r
.idata:0041447C ; BOOL (__stdcall *CheckDlgButton)(HWND hDlg, int nIDButton, UINT uCheck)
.idata:0041447C                 extrn CheckDlgButton:dword
.idata:0041447C                                         ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+2F↑p
.idata:0041447C                                         ; CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+4C↑p ...
.idata:00414480 ; BOOL (__stdcall *SetDlgItemInt)(HWND hDlg, int nIDDlgItem, UINT uValue, BOOL bSigned)
.idata:00414480                 extrn SetDlgItemInt:dword
.idata:00414480                                         ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+F8↑p
.idata:00414480                                         ; CBootIniAdvancedDlg::SetDlgControlsFromBootState(void)+115↑p
.idata:00414480                                         ; DATA XREF: ...
.idata:00414484 ; BOOL (__stdcall *SetDlgItemTextW)(HWND hDlg, int nIDDlgItem, LPCWSTR lpString)
.idata:00414484                 extrn SetDlgItemTextW:dword
.idata:00414484                                         ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+B4↑p
.idata:00414484                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+56B↑p ...
.idata:00414488 ; int (__stdcall *GetWindowTextLengthW)(HWND hWnd)
.idata:00414488                 extrn GetWindowTextLengthW:dword
.idata:00414488                                         ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+338↑p
.idata:00414488                                         ; DATA XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+338↑r
.idata:0041448C ; int (__stdcall *GetWindowTextW)(HWND hWnd, LPWSTR lpString, int nMaxCount)
.idata:0041448C                 extrn GetWindowTextW:dword
.idata:0041448C                                         ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+369↑p
.idata:0041448C                                         ; DATA XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+369↑r
.idata:00414490 ; BOOL (__stdcall *IsWindowEnabled)(HWND hWnd)
.idata:00414490                 extrn IsWindowEnabled:dword
.idata:00414490                                         ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+3A9↑p
.idata:00414490                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+4DE↑p ...
.idata:00414494 ; LONG (__stdcall *SetWindowLongW)(HWND hWnd, int nIndex, LONG dwNewLong)
.idata:00414494                 extrn SetWindowLongW:dword
.idata:00414494                                         ; CODE XREF: sub_40A650+63↑p
.idata:00414494                                         ; sub_40AE70+81↑p ...
.idata:00414498 ; HDC (__stdcall *GetDC)(HWND hWnd)
.idata:00414498                 extrn GetDC:dword       ; CODE XREF: sub_40A747+23↑p
.idata:00414498                                         ; DATA XREF: sub_40A747+23↑r
.idata:0041449C ; BOOL (__stdcall *EnableWindow)(HWND hWnd, BOOL bEnable)
.idata:0041449C                 extrn EnableWindow:dword
.idata:0041449C                                         ; CODE XREF: sub_403C50+5↑p
.idata:0041449C                                         ; sub_403C60+5↑p ...
.idata:004144A0 ; HCURSOR (__stdcall *SetCursor)(HCURSOR hCursor)
.idata:004144A0                 extrn SetCursor:dword   ; CODE XREF: sub_404CA7+25↑p
.idata:004144A0                                         ; sub_404CA7+22E↑p
.idata:004144A0                                         ; DATA XREF: ...
.idata:004144A4 ; HCURSOR (__stdcall *LoadCursorW)(HINSTANCE hInstance, LPCWSTR lpCursorName)
.idata:004144A4                 extrn LoadCursorW:dword ; CODE XREF: sub_404CA7+1E↑p
.idata:004144A4                                         ; DATA XREF: sub_404CA7+1E↑r
.idata:004144A8 ; BOOL (__stdcall *GetClientRect)(HWND hWnd, LPRECT lpRect)
.idata:004144A8                 extrn GetClientRect:dword
.idata:004144A8                                         ; CODE XREF: sub_4040E0+AB↑p
.idata:004144A8                                         ; sub_407B60+62↑p
.idata:004144A8                                         ; DATA XREF: ...
.idata:004144AC ; int (__stdcall *GetSystemMetrics)(int nIndex)
.idata:004144AC                 extrn GetSystemMetrics:dword
.idata:004144AC                                         ; CODE XREF: sub_4040E0+CA↑p
.idata:004144AC                                         ; DATA XREF: sub_4040E0+CA↑r
.idata:004144B0 ; UINT (__stdcall *GetDlgItemTextW)(HWND hDlg, int nIDDlgItem, LPWSTR lpString, int cchMax)
.idata:004144B0                 extrn GetDlgItemTextW:dword
.idata:004144B0                                         ; CODE XREF: CBootIniAdvancedDlg::SetDlgControlState(void)+136↑p
.idata:004144B0                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+52↑p ...
.idata:004144B4 ; LRESULT (__stdcall *SendMessageW)(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
.idata:004144B4                 extrn SendMessageW:dword
.idata:004144B4                                         ; CODE XREF: sub_4040E0+5C↑p
.idata:004144B4                                         ; sub_4040E0+14B↑p ...
.idata:004144B8 ; int (__stdcall *ReleaseDC)(HWND hWnd, HDC hDC)
.idata:004144B8                 extrn ReleaseDC:dword   ; CODE XREF: sub_40A747+C3↑p
.idata:004144B8                                         ; DATA XREF: sub_40A747+C3↑r
.idata:004144BC ; SHORT (__stdcall *GetKeyState)(int nVirtKey)
.idata:004144BC                 extrn GetKeyState:dword ; CODE XREF: sub_40ADD0+31↑p
.idata:004144BC                                         ; DATA XREF: sub_40ADD0+31↑r
.idata:004144C0 ; LRESULT (__stdcall *CallWindowProcW)(WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
.idata:004144C0                 extrn CallWindowProcW:dword
.idata:004144C0                                         ; CODE XREF: sub_40ADD0+82↑p
.idata:004144C0                                         ; DATA XREF: sub_40ADD0+82↑r
.idata:004144C4 ; LONG (__stdcall *GetWindowLongW)(HWND hWnd, int nIndex)
.idata:004144C4                 extrn GetWindowLongW:dword
.idata:004144C4                                         ; CODE XREF: sub_40AE70+68↑p
.idata:004144C4                                         ; DATA XREF: sub_40AE70+68↑r
.idata:004144C8 ; HICON (__stdcall *LoadIconW)(HINSTANCE hInstance, LPCWSTR lpIconName)
.idata:004144C8                 extrn LoadIconW:dword   ; CODE XREF: sub_40C680+23↑p
.idata:004144C8                                         ; DATA XREF: sub_40C680+23↑r
.idata:004144CC ; LPWSTR (__stdcall *CharNextW)(LPCWSTR lpsz)
.idata:004144CC                 extrn CharNextW:dword   ; CODE XREF: sub_40D355+22↑p
.idata:004144CC                                         ; sub_40D355+44↑p
.idata:004144CC                                         ; DATA XREF: ...
.idata:004144D0 ; HWND (__stdcall *FindWindowW)(LPCWSTR lpClassName, LPCWSTR lpWindowName)
.idata:004144D0                 extrn FindWindowW:dword ; CODE XREF: sub_40DB30+2D↑p
.idata:004144D0                                         ; DATA XREF: sub_40DB30+2D↑r
.idata:004144D4 ; BOOL (__stdcall *SetForegroundWindow)(HWND hWnd)
.idata:004144D4                 extrn SetForegroundWindow:dword
.idata:004144D4                                         ; CODE XREF: sub_40DB30+43↑p
.idata:004144D4                                         ; sub_40DB30+7B↑p
.idata:004144D4                                         ; DATA XREF: ...
.idata:004144D8 ; BOOL (__stdcall *IsIconic)(HWND hWnd)
.idata:004144D8                 extrn IsIconic:dword    ; CODE XREF: sub_40DB30+4C↑p
.idata:004144D8                                         ; DATA XREF: sub_40DB30+4C↑r
.idata:004144DC ; HWND (__stdcall *GetLastActivePopup)(HWND hWnd)
.idata:004144DC                 extrn GetLastActivePopup:dword
.idata:004144DC                                         ; CODE XREF: sub_40DB30+63↑p
.idata:004144DC                                         ; DATA XREF: sub_40DB30+63↑r
.idata:004144E0
.idata:004144E4 ;
.idata:004144E4 ; Imports from VERSION.dll
.idata:004144E4 ;
.idata:004144E4 ; BOOL (__stdcall *GetFileVersionInfoW)(LPCWSTR lptstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID lpData)
.idata:004144E4                 extrn GetFileVersionInfoW:dword
.idata:004144E4                                         ; CODE XREF: sub_40DE06+6F↑p
.idata:004144E4                                         ; DATA XREF: sub_40DE06+6F↑r ...
.idata:004144E8 ; BOOL (__stdcall *VerQueryValueW)(LPCVOID pBlock, LPCWSTR lpSubBlock, LPVOID *lplpBuffer, PUINT puLen)
.idata:004144E8                 extrn VerQueryValueW:dword
.idata:004144E8                                         ; CODE XREF: sub_40DE06+90↑p
.idata:004144E8                                         ; sub_40E04D+85↑p
.idata:004144E8                                         ; DATA XREF: ...
.idata:004144EC ; DWORD (__stdcall *GetFileVersionInfoSizeW)(LPCWSTR lptstrFilename, LPDWORD lpdwHandle)
.idata:004144EC                 extrn GetFileVersionInfoSizeW:dword
.idata:004144EC                                         ; CODE XREF: sub_40DE06+37↑p
.idata:004144EC                                         ; DATA XREF: sub_40DE06+37↑r
.idata:004144F0
.idata:004144F4 ;
.idata:004144F4 ; Imports from api-ms-win-core-com-l1-1-1.dll
.idata:004144F4 ;
.idata:004144F4 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:004144F4                 extrn CoCreateInstance:dword
.idata:004144F4                                         ; CODE XREF: sub_403B8B+29↑p
.idata:004144F4                                         ; sub_408913+9F↑p
.idata:004144F4                                         ; DATA XREF: ...
.idata:004144F8 ; void (__stdcall *CoUninitialize)()
.idata:004144F8                 extrn CoUninitialize:dword
.idata:004144F8                                         ; CODE XREF: sub_40D3B0+22↑p
.idata:004144F8                                         ; sub_40D3F3:loc_40D4FD↑p
.idata:004144F8                                         ; DATA XREF: ...
.idata:004144FC ; HRESULT (__stdcall *CoInitializeEx)(LPVOID pvReserved, DWORD dwCoInit)
.idata:004144FC                 extrn CoInitializeEx:dword
.idata:004144FC                                         ; CODE XREF: sub_40D3F3+1B↑p
.idata:004144FC                                         ; DATA XREF: sub_40D3F3+1B↑r
.idata:00414500 ; void (__stdcall *CoTaskMemFree)(LPVOID pv)
.idata:00414500                 extrn CoTaskMemFree:dword
.idata:00414500                                         ; CODE XREF: sub_404FB1+FF↑p
.idata:00414500                                         ; sub_404FB1+10E↑p
.idata:00414500                                         ; DATA XREF: ...
.idata:00414504 ; HRESULT (__stdcall *CreateStreamOnHGlobal)(HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPSTREAM *ppstm)
.idata:00414504                 extrn CreateStreamOnHGlobal:dword
.idata:00414504                                         ; CODE XREF: sub_408D34+CA↑p
.idata:00414504                                         ; DATA XREF: sub_408D34+CA↑r
.idata:00414508
.idata:0041450C ;
.idata:0041450C ; Imports from bcd.dll
.idata:0041450C ;
.idata:0041450C                 extrn BcdCreateObject:dword
.idata:0041450C                                         ; CODE XREF: sub_40F498+44↑p
.idata:0041450C                                         ; DATA XREF: sub_40F498+44↑r ...
.idata:00414510                 extrn BcdDeleteObjectReferences:dword
.idata:00414510                                         ; CODE XREF: sub_40F511+65↑p
.idata:00414510                                         ; DATA XREF: sub_40F511+65↑r
.idata:00414514                 extrn BcdSetElementData:dword
.idata:00414514                                         ; CODE XREF: sub_40F3BC+AA↑p
.idata:00414514                                         ; DATA XREF: sub_40F3BC+AA↑r
.idata:00414518                 extrn BcdDeleteObject:dword
.idata:00414518                                         ; CODE XREF: sub_40F511+51↑p
.idata:00414518                                         ; DATA XREF: sub_40F511+51↑r
.idata:0041451C                 extrn BcdOpenStoreFromFile:dword
.idata:0041451C                                         ; CODE XREF: sub_40F254+4A↑p
.idata:0041451C                                         ; DATA XREF: sub_40F254+4A↑r
.idata:00414520                 extrn BcdEnumerateObjects:dword
.idata:00414520                                         ; CODE XREF: sub_40ED73+35↑p
.idata:00414520                                         ; sub_40ED73+65↑p
.idata:00414520                                         ; DATA XREF: ...
.idata:00414524                 extrn BcdImportStoreWithFlags:dword
.idata:00414524                                         ; CODE XREF: CPageBootIni::OnApply(void)+1C8↑p
.idata:00414524                                         ; DATA XREF: CPageBootIni::OnApply(void)+1C8↑r
.idata:00414528                 extrn BcdDeleteElement:dword
.idata:00414528                                         ; CODE XREF: sub_40F3BC+31↑p
.idata:00414528                                         ; DATA XREF: sub_40F3BC+31↑r
.idata:0041452C                 extrn BcdGetElementData:dword
.idata:0041452C                                         ; CODE XREF: sub_40EA30+27↑p
.idata:0041452C                                         ; sub_40EA30+58↑p ...
.idata:00414530                 extrn BcdExportStore:dword
.idata:00414530                                         ; CODE XREF: CPageBootIni::OnApply(void)+3FF↑p
.idata:00414530                                         ; DATA XREF: CPageBootIni::OnApply(void)+3FF↑r
.idata:00414534                 extrn BcdCloseObject:dword
.idata:00414534                                         ; CODE XREF: sub_40EED6+6F↑p
.idata:00414534                                         ; sub_40EED6+86↑p ...
.idata:00414538                 extrn BcdOpenObject:dword
.idata:00414538                                         ; CODE XREF: sub_40EED6+25↑p
.idata:00414538                                         ; sub_40F131+22↑p ...
.idata:0041453C                 extrn BcdOpenSystemStore:dword
.idata:0041453C                                         ; CODE XREF: sub_40F254+61↑p
.idata:0041453C                                         ; sub_40F254+BC↑p ...
.idata:00414540                 extrn BcdQueryObject:dword
.idata:00414540                                         ; CODE XREF: sub_40F254+E7↑p
.idata:00414540                                         ; DATA XREF: sub_40F254+E7↑r
.idata:00414544                 extrn BcdCloseStore:dword
.idata:00414544                                         ; CODE XREF: sub_40F254+AF↑p
.idata:00414544                                         ; sub_40F254+14A↑p ...
.idata:00414548
.idata:0041454C ;
.idata:0041454C ; Imports from msvcrt.dll
.idata:0041454C ;
.idata:0041454C ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0041454C                 extrn __imp_memcpy:dword
.idata:0041454C                                         ; DATA XREF: memcpy↑r
.idata:0041454C                                         ; .idata:004146A0↓o
.idata:00414550 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:00414550                 extrn __set_app_type:dword
.idata:00414550                                         ; CODE XREF: pre_c_init+6D↑p
.idata:00414550                                         ; DATA XREF: pre_c_init+6D↑r
.idata:00414554 ; errno_t (__cdecl *wcscat_s)(wchar_t *Destination, rsize_t SizeInWords, const wchar_t *Source)
.idata:00414554                 extrn wcscat_s:dword    ; CODE XREF: sub_40EC1E+EE↑p
.idata:00414554                                         ; DATA XREF: sub_40EC1E+EE↑r
.idata:00414558 ; errno_t (__cdecl *wcscpy_s)(wchar_t *Destination, rsize_t SizeInWords, const wchar_t *Source)
.idata:00414558                 extrn wcscpy_s:dword    ; CODE XREF: sub_40EAB6+D4↑p
.idata:00414558                                         ; sub_40EC1E+E0↑p
.idata:00414558                                         ; DATA XREF: ...
.idata:0041455C ; int (__cdecl *wcsicmp)(const wchar_t *String1, const wchar_t *String2)
.idata:0041455C                 extrn _wcsicmp:dword    ; CODE XREF: sub_40EAB6+59↑p
.idata:0041455C                                         ; DATA XREF: sub_40EAB6+59↑r
.idata:00414560                 extrn __wgetmainargs:dword
.idata:00414560                                         ; CODE XREF: pre_cpp_init+24↑p
.idata:00414560                                         ; DATA XREF: pre_cpp_init+24↑r
.idata:00414564 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00414564                 extrn exit:dword        ; CODE XREF: start-DA↑p
.idata:00414564                                         ; DATA XREF: start-DA↑r
.idata:00414568                 extrn __imp___CxxFrameHandler3:dword
.idata:00414568                                         ; DATA XREF: __CxxFrameHandler3↑r
.idata:0041456C ; void (__cdecl __noreturn *exit)(int Code)
.idata:0041456C                 extrn _exit:dword       ; CODE XREF: sub_410139+15↑p
.idata:0041456C                                         ; DATA XREF: sub_410139+15↑r
.idata:00414570 ; void (__cdecl *free)(void *Block)
.idata:00414570                 extrn __imp_free:dword  ; CODE XREF: sub_403E16+D9↑p
.idata:00414570                                         ; sub_408839+C9↑p ...
.idata:00414574                 extrn __imp__purecall:dword
.idata:00414574                                         ; DATA XREF: _purecall↑r
.idata:00414578 ; void (__cdecl *cexit)()
.idata:00414578                 extrn _cexit:dword      ; CODE XREF: start-83↑p
.idata:00414578                                         ; DATA XREF: start-83↑r
.idata:0041457C ; int *(__cdecl *_p__fmode)()
.idata:0041457C                 extrn __p__fmode:dword  ; CODE XREF: pre_c_init+83↑p
.idata:0041457C                                         ; DATA XREF: pre_c_init+83↑r
.idata:00414580 ; void (__cdecl *_setusermatherr)(_UserMathErrorFunctionPointer UserMathErrorFunction)
.idata:00414580                 extrn __setusermatherr:dword
.idata:00414580                                         ; CODE XREF: pre_c_init+B2↑p
.idata:00414580                                         ; DATA XREF: pre_c_init+B2↑r
.idata:00414584 ; void (__cdecl *_initterm)(_PVFV *First, _PVFV *Last)
.idata:00414584                 extrn __imp__initterm:dword
.idata:00414584                                         ; DATA XREF: _initterm↑r
.idata:00414588 ; wchar_t *wcmdln
.idata:00414588                 extrn _wcmdln:dword     ; DATA XREF: start:loc_41009C↑r
.idata:0041458C ; void __cdecl terminate(void)
.idata:0041458C                 extrn ?terminate@@YAXXZ:dword
.idata:0041458C                                         ; CODE XREF: __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *):loc_4105D7↑p
.idata:0041458C                                         ; DATA XREF: __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *):loc_4105D7↑r
.idata:00414590 ; public: virtual __thiscall type_info::~type_info(void)
.idata:00414590                 extrn ??1type_info@@UAE@XZ:dword
.idata:00414590                                         ; CODE XREF: type_info::`scalar deleting destructor'(uint)+8↑p
.idata:00414590                                         ; DATA XREF: type_info::`scalar deleting destructor'(uint)+8↑r
.idata:00414594                 extrn __imp__lock:dword ; DATA XREF: _lock↑r
.idata:00414598                 extrn __imp__unlock:dword
.idata:00414598                                         ; DATA XREF: _unlock↑r
.idata:0041459C                 extrn __imp___dllonexit:dword
.idata:0041459C                                         ; DATA XREF: __dllonexit↑r
.idata:004145A0 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004145A0                 extrn _onexit:dword     ; CODE XREF: __onexit+2E↑p
.idata:004145A0                                         ; DATA XREF: __onexit+20↑r
.idata:004145A4 ; unsigned int (__cdecl *controlfp)(unsigned int NewValue, unsigned int Mask)
.idata:004145A4                 extrn _controlfp:dword  ; CODE XREF: sub_410895+A↑p
.idata:004145A4                                         ; DATA XREF: sub_410895+A↑r
.idata:004145A8                 extrn __imp__except_handler4_common:dword
.idata:004145A8                                         ; DATA XREF: _except_handler4_common↑r
.idata:004145AC                 extrn __imp__ftol2_sse:dword
.idata:004145AC                                         ; DATA XREF: _ftol2_sse↑r
.idata:004145B0                 extrn __imp__amsg_exit:dword
.idata:004145B0                                         ; DATA XREF: _amsg_exit↑r
.idata:004145B4 ; int *(__cdecl *_p__commode)()
.idata:004145B4                 extrn __p__commode:dword
.idata:004145B4                                         ; CODE XREF: pre_c_init+91↑p
.idata:004145B4                                         ; DATA XREF: pre_c_init+91↑r
.idata:004145B8                 extrn __imp__XcptFilter:dword
.idata:004145B8                                         ; DATA XREF: _XcptFilter↑r
.idata:004145BC ; void (__stdcall __noreturn *_CxxThrowException)(void *pExceptionObject, _ThrowInfo *pThrowInfo)
.idata:004145BC                 extrn __imp__CxxThrowException:dword
.idata:004145BC                                         ; DATA XREF: _CxxThrowException↑r
.idata:004145C0 ; int (__cdecl *_callnewh)(size_t Size)
.idata:004145C0                 extrn __imp__callnewh:dword
.idata:004145C0                                         ; DATA XREF: _callnewh↑r
.idata:004145C4 ; int (__cdecl *iswdigit)(wint_t C)
.idata:004145C4                 extrn iswdigit:dword    ; CODE XREF: sub_40C7B0+2D3↑p
.idata:004145C4                                         ; sub_40C7B0+302↑p
.idata:004145C4                                         ; DATA XREF: ...
.idata:004145C8 ; wchar_t *(__cdecl *wcsrchr)(const wchar_t *Str, wchar_t Ch)
.idata:004145C8                 extrn wcsrchr:dword     ; CODE XREF: sub_40B860+E7↑p
.idata:004145C8                                         ; DATA XREF: sub_40B860+E7↑r
.idata:004145CC ; int (__cdecl *wtoi)(const wchar_t *String)
.idata:004145CC                 extrn _wtoi:dword       ; CODE XREF: sub_40B530+5C↑p
.idata:004145CC                                         ; sub_40C7B0+2E1↑p ...
.idata:004145D0 ; void *(__cdecl *memmove)(void *, const void *Src, size_t Size)
.idata:004145D0                 extrn memmove:dword     ; CODE XREF: sub_40AF10+10E↑p
.idata:004145D0                                         ; DATA XREF: sub_40AF10+10E↑r
.idata:004145D4 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004145D4                 extrn calloc:dword      ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+355↑p
.idata:004145D4                                         ; sub_40EF81+4A↑p ...
.idata:004145D8 ; int (__cdecl *vsnwprintf)(wchar_t *Buffer, size_t BufferCount, const wchar_t *Format, va_list Args)
.idata:004145D8                 extrn _vsnwprintf:dword ; CODE XREF: StringCchPrintfW(ushort *,uint,ushort const *,...)+32↑p
.idata:004145D8                                         ; DATA XREF: StringCchPrintfW(ushort *,uint,ushort const *,...)+32↑r
.idata:004145DC ; int (__cdecl *wtol)(const wchar_t *String)
.idata:004145DC                 extrn _wtol:dword       ; CODE XREF: CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+67↑p
.idata:004145DC                                         ; CBootIniAdvancedDlg::SaveBootStateFromDlgControls(void)+13B↑p ...
.idata:004145E0 ; errno_t (__cdecl *itow_s)(int Value, wchar_t *Buffer, size_t BufferCount, int Radix)
.idata:004145E0                 extrn _itow_s:dword     ; CODE XREF: sub_40997E+2D↑p
.idata:004145E0                                         ; DATA XREF: sub_40997E+2D↑r
.idata:004145E4 ; __declspec(dllimport) public: __thiscall exception::exception(void)
.idata:004145E4                 extrn __imp_??0exception@@QAE@XZ:dword
.idata:004145E4                                         ; CODE XREF: std::logic_error::logic_error(std::string const &)+11↑p
.idata:004145E4                                         ; DATA XREF: std::logic_error::logic_error(std::string const &)+11↑r ...
.idata:004145E8 ; errno_t (__cdecl static *memmove_s)(void *const Destination, const rsize_t DestinationSize, const void *const Source, const rsize_t SourceSize)
.idata:004145E8                 extrn memmove_s:dword   ; CODE XREF: std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+CB↑p
.idata:004145E8                                         ; std::vector<_row *>::_Insert_n(std::_Vector_iterator<_row *>,uint,_row * const &)+F8↑p ...
.idata:004145EC ; public: __thiscall exception::exception(char const * const &)
.idata:004145EC                 extrn ??0exception@@QAE@ABQBD@Z:dword
.idata:004145EC                                         ; CODE XREF: sub_4066C6+C↑p
.idata:004145EC                                         ; DATA XREF: sub_4066C6+C↑r
.idata:004145F0 ; __declspec(dllimport) public: virtual __thiscall exception::~exception(void)
.idata:004145F0                 extrn __imp_??1exception@@UAE@XZ:dword
.idata:004145F0                                         ; CODE XREF: std::bad_alloc::`vector deleting destructor'(uint)+E↑p
.idata:004145F0                                         ; DATA XREF: std::logic_error::~logic_error(void)+1A↑r ...
.idata:004145F4 ; __declspec(dllimport) public: virtual char const * __thiscall exception::what(void)const
.idata:004145F4                 extrn __imp_?what@exception@@UBEPBDXZ:dword
.idata:004145F4                                         ; DATA XREF: exception::what(void)↑r
.idata:004145F8 ; errno_t (__cdecl static *memcpy_s)(void *const Destination, const rsize_t DestinationSize, const void *const Source, const rsize_t SourceSize)
.idata:004145F8                 extrn memcpy_s:dword    ; CODE XREF: std::string::assign(char const *,uint)+5A↑p
.idata:004145F8                                         ; std::string::_Copy(uint,uint)+A4↑p ...
.idata:004145FC ; __declspec(dllimport) public: __thiscall exception::exception(class exception const &)
.idata:004145FC                 extrn __imp_??0exception@@QAE@ABV0@@Z:dword
.idata:004145FC                                         ; CODE XREF: std::range_error::range_error(std::range_error const &)+F↑p
.idata:004145FC                                         ; std::logic_error::logic_error(std::logic_error const &)+15↑p
.idata:004145FC                                         ; DATA XREF: ...
.idata:00414600 ; int (__cdecl *wcsicoll)(const wchar_t *String1, const wchar_t *String2)
.idata:00414600                 extrn _wcsicoll:dword   ; CODE XREF: sub_405410+B1↑p
.idata:00414600                                         ; sub_4081F0+8E↑p
.idata:00414600                                         ; DATA XREF: ...
.idata:00414604 ; void *(__cdecl *malloc)(size_t Size)
.idata:00414604                 extrn malloc:dword      ; CODE XREF: sub_403E16+30↑p
.idata:00414604                                         ; sub_408839+11↑p ...
.idata:00414608 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00414608                 extrn __imp_memset:dword
.idata:00414608                                         ; DATA XREF: memset↑r
.idata:0041460C
.idata:00414610 ;
.idata:00414610 ; Imports from ntdll.dll
.idata:00414610 ;
.idata:00414610 ; void (__stdcall *RtlInitUnicodeString)(PUNICODE_STRING DestinationString, PCWSTR SourceString)
.idata:00414610                 extrn RtlInitUnicodeString:dword
.idata:00414610                                         ; CODE XREF: CPageBootIni::OnApply(void)+1BC↑p
.idata:00414610                                         ; CPageBootIni::OnApply(void)+3F5↑p ...
.idata:00414614                 extrn WinSqmAddToStream:dword
.idata:00414614                                         ; CODE XREF: sub_407CA0+CA↑p
.idata:00414614                                         ; sub_40E20E+1C↑p
.idata:00414614                                         ; DATA XREF: ...
.idata:00414618                 extrn WinSqmIncrementDWORD:dword
.idata:00414618                                         ; CODE XREF: sub_407CA0+5A↑p
.idata:00414618                                         ; DATA XREF: sub_407CA0+5A↑r
.idata:0041461C ; SIZE_T (__stdcall *RtlCompareMemory)(const void *Source1, const void *Source2, SIZE_T Length)
.idata:0041461C                 extrn RtlCompareMemory:dword
.idata:0041461C                                         ; CODE XREF: CPageBootIni::SelectLine(int)+2F1↑p
.idata:0041461C                                         ; sub_40AF10+6D↑p ...
.idata:00414620 ; ULONG (__stdcall *RtlNtStatusToDosError)(NTSTATUS Status)
.idata:00414620                 extrn RtlNtStatusToDosError:dword
.idata:00414620                                         ; CODE XREF: CPageBootIni::OnApply(void)+1DA↑p
.idata:00414620                                         ; CPageBootIni::OnApply(void)+411↑p ...
.idata:00414624
.idata:00414624
.idata:00414628 ; ===========================================================================
.idata:00414628
.idata:00414628 ; Segment type: Pure data
.idata:00414628 ; Segment permissions: Read
.idata:00414628 _idata          segment para public 'DATA' use32
.idata:00414628                 assume cs:_idata
.idata:00414628                 ;org 414628h
.idata:00414628 ___guard_check_icall_fptr dd offset @_guard_check_icall_nop@4
.idata:00414628                                         ; DATA XREF: .text:00401ED8↑o
.idata:00414628                                         ; sub_403B8B+53↑r ...
.idata:00414628                                         ; _guard_check_icall_nop(x)
.idata:0041462C __IMPORT_DESCRIPTOR_ADVAPI32 dd rva off_414758 ; Import Name Table
.idata:00414630                 dd 0                    ; Time stamp
.idata:00414634                 dd 0                    ; Forwarder Chain
.idata:00414638                 dd rva aAdvapi32Dll     ; DLL Name
.idata:0041463C                 dd rva RegCloseKey      ; Import Address Table
.idata:00414640 __IMPORT_DESCRIPTOR_KERNEL32 dd rva off_4147DC ; Import Name Table
.idata:00414644                 dd 0                    ; Time stamp
.idata:00414648                 dd 0                    ; Forwarder Chain
.idata:0041464C                 dd rva aKernel32Dll     ; DLL Name
.idata:00414650                 dd rva GlobalUnlock     ; Import Address Table
.idata:00414654 __IMPORT_DESCRIPTOR_GDI32 dd rva off_4147CC ; Import Name Table
.idata:00414658                 dd 0                    ; Time stamp
.idata:0041465C                 dd 0                    ; Forwarder Chain
.idata:00414660                 dd rva aGdi32Dll        ; DLL Name
.idata:00414664                 dd rva GetTextMetricsW  ; Import Address Table
.idata:00414668 __IMPORT_DESCRIPTOR_USER32 dd rva off_414BAC ; Import Name Table
.idata:0041466C                 dd 0                    ; Time stamp
.idata:00414670                 dd 0                    ; Forwarder Chain
.idata:00414674                 dd rva aUser32Dll       ; DLL Name
.idata:00414678                 dd rva ShowWindow       ; Import Address Table
.idata:0041467C __IMPORT_DESCRIPTOR_MFC42u dd rva dword_4148D8 ; Import Name Table
.idata:00414680                 dd 0                    ; Time stamp
.idata:00414684                 dd 0                    ; Forwarder Chain
.idata:00414688                 dd rva aMfc42uDll       ; DLL Name
.idata:0041468C                 dd rva ?AfxWinMain@@YGHPAUHINSTANCE__@@0PAGH@Z ; Import Address Table
.idata:00414690 __IMPORT_DESCRIPTOR_msvcrt dd rva off_414CA4 ; Import Name Table
.idata:00414694                 dd 0                    ; Time stamp
.idata:00414698                 dd 0                    ; Forwarder Chain
.idata:0041469C                 dd rva aMsvcrtDll       ; DLL Name
.idata:004146A0                 dd rva __imp_memcpy     ; Import Address Table
.idata:004146A4 __IMPORT_DESCRIPTOR_ATL dd rva dword_4147A0 ; Import Name Table
.idata:004146A8                 dd 0                    ; Time stamp
.idata:004146AC                 dd 0                    ; Forwarder Chain
.idata:004146B0                 dd rva aAtlDll          ; DLL Name
.idata:004146B4                 dd rva AtlAxDialogBoxW  ; Import Address Table
.idata:004146B8 __IMPORT_DESCRIPTOR_SHELL32 dd rva off_414B98 ; Import Name Table
.idata:004146BC                 dd 0                    ; Time stamp
.idata:004146C0                 dd 0                    ; Forwarder Chain
.idata:004146C4                 dd rva aShell32Dll      ; DLL Name
.idata:004146C8                 dd rva SHEvaluateSystemCommandTemplate ; Import Address Table
.idata:004146CC __IMPORT_DESCRIPTOR_OLEAUT32 dd rva dword_414B80 ; Import Name Table
.idata:004146D0                 dd 0                    ; Time stamp
.idata:004146D4                 dd 0                    ; Forwarder Chain
.idata:004146D8                 dd rva aOleaut32Dll     ; DLL Name
.idata:004146DC                 dd rva VariantChangeType ; Import Address Table
.idata:004146E0 __IMPORT_DESCRIPTOR_VERSION dd rva off_414C3C ; Import Name Table
.idata:004146E4                 dd 0                    ; Time stamp
.idata:004146E8                 dd 0                    ; Forwarder Chain
.idata:004146EC                 dd rva aVersionDll      ; DLL Name
.idata:004146F0                 dd rva GetFileVersionInfoW ; Import Address Table
.idata:004146F4 __IMPORT_DESCRIPTOR_SHLWAPI dd rva dword_414BA4 ; Import Name Table
.idata:004146F8                 dd 0                    ; Time stamp
.idata:004146FC                 dd 0                    ; Forwarder Chain
.idata:00414700                 dd rva aShlwapiDll      ; DLL Name
.idata:00414704                 dd rva IsOS             ; Import Address Table
.idata:00414708 __IMPORT_DESCRIPTOR_ntdll dd rva off_414D68 ; Import Name Table
.idata:0041470C                 dd 0                    ; Time stamp
.idata:00414710                 dd 0                    ; Forwarder Chain
.idata:00414714                 dd rva aNtdllDll        ; DLL Name
.idata:00414718                 dd rva RtlInitUnicodeString ; Import Address Table
.idata:0041471C __IMPORT_DESCRIPTOR_bcd dd rva off_414C64 ; Import Name Table
.idata:00414720                 dd 0                    ; Time stamp
.idata:00414724                 dd 0                    ; Forwarder Chain
.idata:00414728                 dd rva aBcdDll          ; DLL Name
.idata:0041472C                 dd rva BcdCreateObject  ; Import Address Table
.idata:00414730                 dd rva off_414C4C       ; Import Name Table
.idata:00414734                 dd 0                    ; Time stamp
.idata:00414738                 dd 0                    ; Forwarder Chain
.idata:0041473C                 dd rva aApiMsWinCoreCo  ; DLL Name
.idata:00414740                 dd rva CoCreateInstance ; Import Address Table
.idata:00414744                 db    0
.idata:00414745                 db    0
.idata:00414746                 db    0
.idata:00414747                 db    0
.idata:00414748                 db    0
.idata:00414749                 db    0
.idata:0041474A                 db    0
.idata:0041474B                 db    0
.idata:0041474C                 db    0
.idata:0041474D                 db    0
.idata:0041474E                 db    0
.idata:0041474F                 db    0
.idata:00414750                 db    0
.idata:00414751                 db    0
.idata:00414752                 db    0
.idata:00414753                 db    0
.idata:00414754                 db    0
.idata:00414755                 db    0
.idata:00414756                 db    0
.idata:00414757                 db    0
.idata:00414758 ;
.idata:00414758 ; Import names for ADVAPI32.dll
.idata:00414758 ;
.idata:00414758 off_414758      dd rva word_414D80      ; DATA XREF: .idata:__IMPORT_DESCRIPTOR_ADVAPI32↑o
.idata:0041475C                 dd rva word_414D8E
.idata:00414760                 dd rva word_414DA2
.idata:00414764                 dd rva word_414DB4
.idata:00414768                 dd rva word_414DC6
.idata:0041476C                 dd rva word_414DDC
.idata:00414770                 dd rva word_414DEC
.idata:00414774                 dd rva word_414E02
.idata:00414778                 dd rva word_414E1A
.idata:0041477C                 dd rva word_414E30
.idata:00414780                 dd rva word_414E40
.idata:00414784                 dd rva word_414E50
.idata:00414788                 dd rva word_414E62
.idata:0041478C                 dd rva word_414E74
.idata:00414790                 dd rva word_414E88
.idata:00414794                 dd rva word_414EA0
.idata:00414798                 dd rva word_414EB8
.idata:0041479C                 dd 0
.idata:004147A0 ;
.idata:004147A0 ; Import names for ATL.DLL
.idata:004147A0 ;
.idata:004147A0 dword_4147A0    dd 80000023h            ; DATA XREF: .idata:__IMPORT_DESCRIPTOR_ATL↑o
.idata:004147A4                 dd 8000002Ch
.idata:004147A8                 dd 80000014h
.idata:004147AC                 dd 80000015h
.idata:004147B0                 dd 80000010h
.idata:004147B4                 dd 80000017h
.idata:004147B8                 dd 80000039h
.idata:004147BC                 dd 80000012h
.idata:004147C0                 dd 80000011h
.idata:004147C4                 dd 8000002Bh
.idata:004147C8                 dd 0
.idata:004147CC ;
.idata:004147CC ; Import names for GDI32.dll
.idata:004147CC ;
.idata:004147CC off_4147CC      dd rva word_4151B2      ; DATA XREF: .idata:__IMPORT_DESCRIPTOR_GDI32↑o
.idata:004147D0                 dd rva word_4151A2
.idata:004147D4                 dd rva word_4151C4
.idata:004147D8                 dd 0
.idata:004147DC ;
.idata:004147DC ; Import names for KERNEL32.dll
.idata:004147DC ;
.idata:004147DC off_4147DC      dd rva word_414FC0      ; DATA XREF: .idata:__IMPORT_DESCRIPTOR_KERNEL32↑o
.idata:004147E0                 dd rva word_414FD0
.idata:004147E4                 dd rva word_414FDE
.idata:004147E8                 dd rva word_414FF0
.idata:004147EC                 dd rva word_414FFC
.idata:004147F0                 dd rva word_41500C
.idata:004147F4                 dd rva word_415032
.idata:004147F8                 dd rva word_41504A
.idata:004147FC                 dd rva word_41505A
.idata:00414800                 dd rva word_415068
.idata:00414804                 dd rva word_415076
.idata:00414808                 dd rva word_415088
.idata:0041480C                 dd rva word_415094
.idata:00414810                 dd rva word_4150C8
.idata:00414814                 dd rva word_4150D6
.idata:00414818                 dd rva word_4150EC
.idata:0041481C                 dd rva word_414F82
.idata:00414820                 dd rva word_415110
.idata:00414824                 dd rva word_415122
.idata:00414828                 dd rva word_415134
.idata:0041482C                 dd rva word_415148
.idata:00414830                 dd rva word_41515C
.idata:00414834                 dd rva word_415172
.idata:00414838                 dd rva word_415188
.idata:0041483C                 dd rva word_414FB2
.idata:00414840                 dd rva word_414FA4
.idata:00414844                 dd rva word_4150AA
.idata:00414848                 dd rva word_414F92
.idata:0041484C                 dd rva word_4150FA
.idata:00414850                 dd rva word_415B52
.idata:00414854                 dd rva word_415B40
.idata:00414858                 dd rva word_415B30
.idata:0041485C                 dd rva word_415B16
.idata:00414860                 dd rva word_415AFC
.idata:00414864                 dd rva word_415AE8
.idata:00414868                 dd rva word_415AD4
.idata:0041486C                 dd rva word_415AB6
.idata:00414870                 dd rva word_415A9A
.idata:00414874                 dd rva word_415A88
.idata:00414878                 dd rva word_415A80
.idata:0041487C                 dd rva word_415A64
.idata:00414880                 dd rva word_415A48
.idata:00414884                 dd rva word_415A30
.idata:00414888                 dd rva word_415A1E
.idata:0041488C                 dd rva word_415A02
.idata:00414890                 dd rva word_4159F2
.idata:00414894                 dd rva word_4159E6
.idata:00414898                 dd rva word_4159D6
.idata:0041489C                 dd rva word_4159C4
.idata:004148A0                 dd rva word_4159B4
.idata:004148A4                 dd rva word_4159A0
.idata:004148A8                 dd rva word_415992
.idata:004148AC                 dd rva word_415986
.idata:004148B0                 dd rva word_414F72
.idata:004148B4                 dd rva word_414F62
.idata:004148B8                 dd rva word_414F4E
.idata:004148BC                 dd rva word_414F3C
.idata:004148C0                 dd rva word_414F2A
.idata:004148C4                 dd rva word_414F0E
.idata:004148C8                 dd rva word_414EFC
.idata:004148CC                 dd rva word_414EEC
.idata:004148D0                 dd rva word_414EDA
.idata:004148D4                 dd 0
.idata:004148D8 ;
.idata:004148D8 ; Import names for MFC42u.dll
.idata:004148D8 ;
.idata:004148D8 dword_4148D8    dd 80000621h            ; DATA XREF: .idata:__IMPORT_DESCRIPTOR_MFC42u↑o
.idata:004148DC                 dd 80000339h
.idata:004148E0                 dd 80000144h
.idata:004148E4                 dd 80000281h
.idata:004148E8                 dd 800008F5h
.idata:004148EC                 dd 80001085h
.idata:004148F0                 dd 80001245h
.idata:004148F4                 dd 80000E08h
.idata:004148F8                 dd 80001143h
.idata:004148FC                 dd 8000120Dh
.idata:00414900                 dd 80000FEBh
.idata:00414904                 dd 80000C02h
.idata:00414908                 dd 80000EECh
.idata:0041490C                 dd 80000EF2h
.idata:00414910                 dd 80000EF1h
.idata:00414914                 dd 80000B9Bh
.idata:00414918                 dd 80000C04h
.idata:0041491C                 dd 80000BA4h
.idata:00414920                 dd 80000CB9h
.idata:00414924                 dd 80000C3Bh
.idata:00414928                 dd 8000116Bh
.idata:0041492C                 dd 80000CB6h
.idata:00414930                 dd 80000C46h
.idata:00414934                 dd 80000BA1h
.idata:00414938                 dd 80001499h
.idata:0041493C                 dd 80000844h
.idata:00414940                 dd 80000986h
.idata:00414944                 dd 80001489h
.idata:00414948                 dd 800006B8h
.idata:0041494C                 dd 800013C3h
.idata:00414950                 dd 80000EA0h
.idata:00414954                 dd 800018E4h
.idata:00414958                 dd 800007FFh
.idata:0041495C                 dd 80000A50h
.idata:00414960                 dd 80001153h
.idata:00414964                 dd 800012DFh
.idata:00414968                 dd 80000ED1h
.idata:0041496C                 dd 8000149Ch
.idata:00414970                 dd 800010FBh
.idata:00414974                 dd 800018E2h
.idata:00414978                 dd 80001425h
.idata:0041497C                 dd 80000949h
.idata:00414980                 dd 80001475h
.idata:00414984                 dd 80001131h
.idata:00414988                 dd 800006E7h
.idata:0041498C                 dd 80000FE9h
.idata:00414990                 dd 800017A0h
.idata:00414994                 dd 800009CAh
.idata:00414998                 dd 80001260h
.idata:0041499C                 dd 80001380h
.idata:004149A0                 dd 800012EFh
.idata:004149A4                 dd 80001112h
.idata:004149A8                 dd 8000148Dh
.idata:004149AC                 dd 80000337h
.idata:004149B0                 dd 8000076Bh
.idata:004149B4                 dd 8000035Dh
.idata:004149B8                 dd 80001A09h
.idata:004149BC                 dd 800003AEh
.idata:004149C0                 dd 800001E9h
.idata:004149C4                 dd 80000300h
.idata:004149C8                 dd 8000021Eh
.idata:004149CC                 dd 80000322h
.idata:004149D0                 dd 8000109Dh
.idata:004149D4                 dd 8000021Ch
.idata:004149D8                 dd 80000320h
.idata:004149DC                 dd 80000C0Fh
.idata:004149E0                 dd 800010D8h
.idata:004149E4                 dd 8000048Dh
.idata:004149E8                 dd 8000103Bh
.idata:004149EC                 dd 800006EBh
.idata:004149F0                 dd 80001601h
.idata:004149F4                 dd 80001933h
.idata:004149F8                 dd 80000217h
.idata:004149FC                 dd 80001065h
.idata:00414A00                 dd 80000AC4h
.idata:00414A04                 dd 8000021Ah
.idata:00414A08                 dd 80000A2Eh
.idata:00414A0C                 dd 80000227h
.idata:00414A10                 dd 80001788h
.idata:00414A14                 dd 80001886h
.idata:00414A18                 dd 80000AC5h
.idata:00414A1C                 dd 800015E5h
.idata:00414A20                 dd 8000035Ah
.idata:00414A24                 dd 80000951h
.idata:00414A28                 dd 800019A3h
.idata:00414A2C                 dd 80000FD2h
.idata:00414A30                 dd 800003ACh
.idata:00414A34                 dd 8000039Ah
.idata:00414A38                 dd 80000EDEh
.idata:00414A3C                 dd 80000D04h
.idata:00414A40                 dd 800012DDh
.idata:00414A44                 dd 800014A3h
.idata:00414A48                 dd 800012F0h
.idata:00414A4C                 dd 80001113h
.idata:00414A50                 dd 8000134Eh
.idata:00414A54                 dd 8000136Ah
.idata:00414A58                 dd 80001280h
.idata:00414A5C                 dd 80001323h
.idata:00414A60                 dd 80001422h
.idata:00414A64                 dd 80001424h
.idata:00414A68                 dd 80001423h
.idata:00414A6C                 dd 800006EFh
.idata:00414A70                 dd 800006C7h
.idata:00414A74                 dd 8000039Fh
.idata:00414A78                 dd 800019FFh
.idata:00414A7C                 dd 80000AFAh
.idata:00414A80                 dd 80000A4Ah
.idata:00414A84                 dd 8000173Bh
.idata:00414A88                 dd 80000C12h
.idata:00414A8C                 dd 80000C15h
.idata:00414A90                 dd 8000107Bh
.idata:00414A94                 dd 80000AF9h
.idata:00414A98                 dd 8000076Ch
.idata:00414A9C                 dd 800001F0h
.idata:00414AA0                 dd 80000303h
.idata:00414AA4                 dd 8000109Eh
.idata:00414AA8                 dd 80001265h
.idata:00414AAC                 dd 80000477h
.idata:00414AB0                 dd 80000D8Eh
.idata:00414AB4                 dd 800016D5h
.idata:00414AB8                 dd 80001149h
.idata:00414ABC                 dd 800007FEh
.idata:00414AC0                 dd 80001151h
.idata:00414AC4                 dd 800014A4h
.idata:00414AC8                 dd 800006E8h
.idata:00414ACC                 dd 800017A3h
.idata:00414AD0                 dd 800009D8h
.idata:00414AD4                 dd 80000693h
.idata:00414AD8                 dd 800010ADh
.idata:00414ADC                 dd 8000123Bh
.idata:00414AE0                 dd 80000231h
.idata:00414AE4                 dd 8000032Fh
.idata:00414AE8                 dd 8000046Bh
.idata:00414AEC                 dd 80000128h
.idata:00414AF0                 dd 80000269h
.idata:00414AF4                 dd 80001458h
.idata:00414AF8                 dd 80000A35h
.idata:00414AFC                 dd 80000AD8h
.idata:00414B00                 dd 800010B0h
.idata:00414B04                 dd 8000184Ah
.idata:00414B08                 dd 80001887h
.idata:00414B0C                 dd 8000101Ch
.idata:00414B10                 dd 800010B7h
.idata:00414B14                 dd 800003F0h
.idata:00414B18                 dd 80000A9Dh
.idata:00414B1C                 dd 8000162Fh
.idata:00414B20                 dd 8000039Dh
.idata:00414B24                 dd 80000B2Bh
.idata:00414B28                 dd 80001843h
.idata:00414B2C                 dd 80000E95h
.idata:00414B30                 dd 80001142h
.idata:00414B34                 dd 80001208h
.idata:00414B38                 dd 8000164Eh
.idata:00414B3C                 dd 800014A5h
.idata:00414B40                 dd 800014B7h
.idata:00414B44                 dd 80001254h
.idata:00414B48                 dd 80000FEAh
.idata:00414B4C                 dd 800014B2h
.idata:00414B50                 dd 800014B0h
.idata:00414B54                 dd 80000D0Dh
.idata:00414B58                 dd 80000954h
.idata:00414B5C                 dd 80001449h
.idata:00414B60                 dd 80000441h
.idata:00414B64                 dd 80000F4Dh
.idata:00414B68                 dd 8000165Fh
.idata:00414B6C                 dd 800009C8h
.idata:00414B70                 dd 800009F2h
.idata:00414B74                 dd 80001180h
.idata:00414B78                 dd 800018E3h
.idata:00414B7C                 dd 0
.idata:00414B80 ;
.idata:00414B80 ; Import names for OLEAUT32.dll
.idata:00414B80 ;
.idata:00414B80 dword_414B80    dd 8000000Ch            ; DATA XREF: .idata:__IMPORT_DESCRIPTOR_OLEAUT32↑o
.idata:00414B84                 dd 80000009h
.idata:00414B88                 dd 80000008h
.idata:00414B8C                 dd 80000002h
.idata:00414B90                 dd 80000006h
.idata:00414B94                 dd 0
.idata:00414B98 ;
.idata:00414B98 ; Import names for SHELL32.dll
.idata:00414B98 ;
.idata:00414B98 off_414B98      dd rva word_4156AE      ; DATA XREF: .idata:__IMPORT_DESCRIPTOR_SHELL32↑o
.idata:00414B9C                 dd rva word_4156D0
.idata:00414BA0                 dd 0
.idata:00414BA4 ;
.idata:00414BA4 ; Import names for SHLWAPI.dll
.idata:00414BA4 ;
.idata:00414BA4 dword_414BA4    dd 800001B5h            ; DATA XREF: .idata:__IMPORT_DESCRIPTOR_SHLWAPI↑o
.idata:00414BA8                 dd 0
.idata:00414BAC ;
.idata:00414BAC ; Import names for USER32.dll
.idata:00414BAC ;
.idata:00414BAC off_414BAC      dd rva word_415250      ; DATA XREF: .idata:__IMPORT_DESCRIPTOR_USER32↑o
.idata:00414BB0                 dd rva word_41525E
.idata:00414BB4                 dd rva word_415274
.idata:00414BB8                 dd rva word_415280
.idata:00414BBC                 dd rva word_41528C
.idata:00414BC0                 dd rva word_41529E
.idata:00414BC4                 dd rva word_4152AC
.idata:00414BC8                 dd rva word_4152BA
.idata:00414BCC                 dd rva word_4152CC
.idata:00414BD0                 dd rva word_415244
.idata:00414BD4                 dd rva word_4152EC
.idata:00414BD8                 dd rva word_4152FE
.idata:00414BDC                 dd rva word_41530E
.idata:00414BE0                 dd rva word_415320
.idata:00414BE4                 dd rva word_415338
.idata:00414BE8                 dd rva word_41534A
.idata:00414BEC                 dd rva word_41535C
.idata:00414BF0                 dd rva word_41536E
.idata:00414BF4                 dd rva word_4151E6
.idata:00414BF8                 dd rva word_41522A
.idata:00414BFC                 dd rva word_415236
.idata:00414C00                 dd rva word_415206
.idata:00414C04                 dd rva word_415216
.idata:00414C08                 dd rva word_4152DA
.idata:00414C0C                 dd rva word_4151F6
.idata:00414C10                 dd rva word_415376
.idata:00414C14                 dd rva word_415382
.idata:00414C18                 dd rva word_415390
.idata:00414C1C                 dd rva word_4153A2
.idata:00414C20                 dd rva word_4153B4
.idata:00414C24                 dd rva word_4153C0
.idata:00414C28                 dd rva word_4153CC
.idata:00414C2C                 dd rva word_4153DA
.idata:00414C30                 dd rva word_4153F0
.idata:00414C34                 dd rva word_4153FC
.idata:00414C38                 dd 0
.idata:00414C3C ;
.idata:00414C3C ; Import names for VERSION.dll
.idata:00414C3C ;
.idata:00414C3C off_414C3C      dd rva word_415714      ; DATA XREF: .idata:__IMPORT_DESCRIPTOR_VERSION↑o
.idata:00414C40                 dd rva word_41572A
.idata:00414C44                 dd rva word_4156FA
.idata:00414C48                 dd 0
.idata:00414C4C ;
.idata:00414C4C ; Import names for api-ms-win-core-com-l1-1-1.dll
.idata:00414C4C ;
.idata:00414C4C off_414C4C      dd rva word_415906      ; DATA XREF: .idata:00414730↑o
.idata:00414C50                 dd rva word_415942
.idata:00414C54                 dd rva word_415954
.idata:00414C58                 dd rva word_41591A
.idata:00414C5C                 dd rva word_41592A
.idata:00414C60                 dd 0
.idata:00414C64 ;
.idata:00414C64 ; Import names for bcd.dll
.idata:00414C64 ;
.idata:00414C64 off_414C64      dd rva word_4158B6      ; DATA XREF: .idata:__IMPORT_DESCRIPTOR_bcd↑o
.idata:00414C68                 dd rva word_41589A
.idata:00414C6C                 dd rva word_4158C8
.idata:00414C70                 dd rva word_415872
.idata:00414C74                 dd rva word_41585A
.idata:00414C78                 dd rva word_415834
.idata:00414C7C                 dd rva word_41581A
.idata:00414C80                 dd rva word_415806
.idata:00414C84                 dd rva word_4157F2
.idata:00414C88                 dd rva word_4157E0
.idata:00414C8C                 dd rva word_4158DC
.idata:00414C90                 dd rva word_4158EE
.idata:00414C94                 dd rva word_415884
.idata:00414C98                 dd rva word_4157CE
.idata:00414C9C                 dd rva word_41584A
.idata:00414CA0                 dd 0
.idata:00414CA4 ;
.idata:00414CA4 ; Import names for msvcrt.dll
.idata:00414CA4 ;
.idata:00414CA4 off_414CA4      dd rva word_415B92      ; DATA XREF: .idata:__IMPORT_DESCRIPTOR_msvcrt↑o
.idata:00414CA8                 dd rva word_4155B8
.idata:00414CAC                 dd rva word_415B78
.idata:00414CB0                 dd rva word_415B6C
.idata:00414CB4                 dd rva word_415B60
.idata:00414CB8                 dd rva word_4155A6
.idata:00414CBC                 dd rva word_4155CA
.idata:00414CC0                 dd rva word_41542A
.idata:00414CC4                 dd rva word_4155D2
.idata:00414CC8                 dd rva word_41544A
.idata:00414CCC                 dd rva word_415452
.idata:00414CD0                 dd rva word_4155DA
.idata:00414CD4                 dd rva word_4155E4
.idata:00414CD8                 dd rva word_4155F2
.idata:00414CDC                 dd rva word_415606
.idata:00414CE0                 dd rva word_415612
.idata:00414CE4                 dd rva word_415628
.idata:00414CE8                 dd rva word_41563C
.idata:00414CEC                 dd rva word_415654
.idata:00414CF0                 dd rva word_41565C
.idata:00414CF4                 dd rva word_415666
.idata:00414CF8                 dd rva word_415674
.idata:00414CFC                 dd rva word_41567E
.idata:00414D00                 dd rva word_41568C
.idata:00414D04                 dd rva word_415B84
.idata:00414D08                 dd rva word_415598
.idata:00414D0C                 dd rva word_415588
.idata:00414D10                 dd rva word_41557A
.idata:00414D14                 dd rva word_415564
.idata:00414D18                 dd rva word_415558
.idata:00414D1C                 dd rva word_41554C
.idata:00414D20                 dd rva word_415542
.idata:00414D24                 dd rva word_41553A
.idata:00414D28                 dd rva word_415530
.idata:00414D2C                 dd rva word_415526
.idata:00414D30                 dd rva word_415518
.idata:00414D34                 dd rva word_415510
.idata:00414D38                 dd rva word_415506
.idata:00414D3C                 dd rva word_4154EE
.idata:00414D40                 dd rva word_4154E2
.idata:00414D44                 dd rva word_4154C6
.idata:00414D48                 dd rva word_4154AE
.idata:00414D4C                 dd rva word_415492
.idata:00414D50                 dd rva word_415486
.idata:00414D54                 dd rva word_41546A
.idata:00414D58                 dd rva word_41545E
.idata:00414D5C                 dd rva word_415440
.idata:00414D60                 dd rva word_415B9C
.idata:00414D64                 dd 0
.idata:00414D68 ;
.idata:00414D68 ; Import names for ntdll.dll
.idata:00414D68 ;
.idata:00414D68 off_414D68      dd rva word_415794      ; DATA XREF: .idata:__IMPORT_DESCRIPTOR_ntdll↑o
.idata:00414D6C                 dd rva word_415780
.idata:00414D70                 dd rva word_415768
.idata:00414D74                 dd rva word_415754
.idata:00414D78                 dd rva word_4157AC
.idata:00414D7C                 dd 0
.idata:00414D80 word_414D80     dw 259h                 ; DATA XREF: .idata:off_414758↑o
.idata:00414D82                 db 'RegCloseKey',0
.idata:00414D8E word_414D8E     dw 297h                 ; DATA XREF: .idata:0041475C↑o
.idata:00414D90                 db 'RegQueryValueExW',0
.idata:00414DA1                 align 2
.idata:00414DA2 word_414DA2     dw 2A7h                 ; DATA XREF: .idata:00414760↑o
.idata:00414DA4                 db 'RegSetValueExW',0
.idata:00414DB3                 align 4
.idata:00414DB4 word_414DB4     dw 216h                 ; DATA XREF: .idata:00414764↑o
.idata:00414DB6                 db 'OpenSCManagerW',0
.idata:00414DC5                 align 2
.idata:00414DC6 word_414DC6     dw 114h                 ; DATA XREF: .idata:00414768↑o
.idata:00414DC8                 db 'EnumServicesStatusW',0
.idata:00414DDC word_414DDC     dw 218h                 ; DATA XREF: .idata:0041476C↑o
.idata:00414DDE                 db 'OpenServiceW',0
.idata:00414DEB                 align 4
.idata:00414DEC word_414DEC     dw 65h                  ; DATA XREF: .idata:00414770↑o
.idata:00414DEE                 db 'CloseServiceHandle',0
.idata:00414E01                 align 2
.idata:00414E02 word_414E02     dw 5Dh                  ; DATA XREF: .idata:00414774↑o
.idata:00414E04                 db 'ChangeServiceConfigW',0
.idata:00414E19                 align 2
.idata:00414E1A word_414E1A     dw 24Ah                 ; DATA XREF: .idata:00414778↑o
.idata:00414E1C                 db 'QueryServiceConfigW',0
.idata:00414E30 word_414E30     dw 278h                 ; DATA XREF: .idata:0041477C↑o
.idata:00414E32                 db 'RegEnumKeyExW',0
.idata:00414E40 word_414E40     dw 28Ah                 ; DATA XREF: .idata:00414780↑o
.idata:00414E42                 db 'RegOpenKeyExW',0
.idata:00414E50 word_414E50     dw 262h                 ; DATA XREF: .idata:00414784↑o
.idata:00414E52                 db 'RegCreateKeyExW',0
.idata:00414E62 word_414E62     dw 271h                 ; DATA XREF: .idata:00414788↑o
.idata:00414E64                 db 'RegDeleteValueW',0
.idata:00414E74 word_414E74     dw 214h                 ; DATA XREF: .idata:0041478C↑o
.idata:00414E76                 db 'OpenProcessToken',0
.idata:00414E87                 align 4
.idata:00414E88 word_414E88     dw 1AEh                 ; DATA XREF: .idata:00414790↑o
.idata:00414E8A                 db 'LookupPrivilegeValueW',0
.idata:00414EA0 word_414EA0     dw 1Fh                  ; DATA XREF: .idata:00414794↑o
.idata:00414EA2                 db 'AdjustTokenPrivileges',0
.idata:00414EB8 word_414EB8     dw 191h                 ; DATA XREF: .idata:00414798↑o
.idata:00414EBA                 db 'InitiateShutdownW',0
.idata:00414ECC aAdvapi32Dll    db 'ADVAPI32.dll',0     ; DATA XREF: .idata:00414638↑o
.idata:00414ED9                 align 2
.idata:00414EDA word_414EDA     dw 21Dh                 ; DATA XREF: .idata:004148D0↑o
.idata:00414EDC                 db 'GetDateFormatW',0
.idata:00414EEB                 align 4
.idata:00414EEC word_414EEC     dw 25Ah                 ; DATA XREF: .idata:004148CC↑o
.idata:00414EEE                 db 'GetLastError',0
.idata:00414EFB                 align 4
.idata:00414EFC word_414EFC     dw 305h                 ; DATA XREF: .idata:004148C8↑o
.idata:00414EFE                 db 'GetTimeFormatW',0
.idata:00414F0D                 align 2
.idata:00414F0E word_414F0E     dw 15Eh                 ; DATA XREF: .idata:004148C4↑o
.idata:00414F10                 db 'ExpandEnvironmentStringsW',0
.idata:00414F2A word_414F2A     dw 2A7h                 ; DATA XREF: .idata:004148C0↑o
.idata:00414F2C                 db 'GetProcAddress',0
.idata:00414F3B                 align 4
.idata:00414F3C word_414F3C     dw 3B8h                 ; DATA XREF: .idata:004148BC↑o
.idata:00414F3E                 db 'LoadLibraryExW',0
.idata:00414F4D                 align 2
.idata:00414F4E word_414F4E     dw 271h                 ; DATA XREF: .idata:004148B8↑o
.idata:00414F50                 db 'GetModuleHandleW',0
.idata:00414F61                 align 2
.idata:00414F62 word_414F62     dw 192h                 ; DATA XREF: .idata:004148B4↑o
.idata:00414F64                 db 'FindResourceW',0
.idata:00414F72 word_414F72     dw 3BCh                 ; DATA XREF: .idata:004148B0↑o
.idata:00414F74                 db 'LoadResource',0
.idata:00414F81                 align 2
.idata:00414F82 word_414F82     dw 3CEh                 ; DATA XREF: .idata:0041481C↑o
.idata:00414F84                 db 'LockResource',0
.idata:00414F91                 align 2
.idata:00414F92 word_414F92     dw 56Ch                 ; DATA XREF: .idata:00414848↑o
.idata:00414F94                 db 'SizeofResource',0
.idata:00414FA3                 align 4
.idata:00414FA4 word_414FA4     dw 325h                 ; DATA XREF: .idata:00414840↑o
.idata:00414FA6                 db 'GlobalAlloc',0
.idata:00414FB2 word_414FB2     dw 330h                 ; DATA XREF: .idata:0041483C↑o
.idata:00414FB4                 db 'GlobalLock',0
.idata:00414FBF                 align 10h
.idata:00414FC0 word_414FC0     dw 337h                 ; DATA XREF: .idata:off_4147DC↑o
.idata:00414FC2                 db 'GlobalUnlock',0
.idata:00414FCF                 align 10h
.idata:00414FD0 word_414FD0     dw 32Ch                 ; DATA XREF: .idata:004147E0↑o
.idata:00414FD2                 db 'GlobalFree',0
.idata:00414FDD                 align 2
.idata:00414FDE word_414FDE     dw 17Ch                 ; DATA XREF: .idata:004147E4↑o
.idata:00414FE0                 db 'FindFirstFileW',0
.idata:00414FEF                 align 10h
.idata:00414FF0 word_414FF0     dw 171h                 ; DATA XREF: .idata:004147E8↑o
.idata:00414FF2                 db 'FindClose',0
.idata:00414FFC word_414FFC     dw 2DCh                 ; DATA XREF: .idata:004147EC↑o
.idata:00414FFE                 db 'GetSystemInfo',0
.idata:0041500C word_41500C     dw 29Bh                 ; DATA XREF: .idata:004147F0↑o
.idata:0041500E                 db 'GetPhysicallyInstalledSystemMemory',0
.idata:00415031                 align 2
.idata:00415032 word_415032     dw 332h                 ; DATA XREF: .idata:004147F4↑o
.idata:00415034                 db 'GlobalMemoryStatusEx',0
.idata:00415049                 align 2
.idata:0041504A word_41504A     dw 3B9h                 ; DATA XREF: .idata:004147F8↑o
.idata:0041504C                 db 'LoadLibraryW',0
.idata:00415059                 align 2
.idata:0041505A word_41505A     dw 1A7h                 ; DATA XREF: .idata:004147FC↑o
.idata:0041505C                 db 'FreeLibrary',0
.idata:00415068 word_415068     dw 112h                 ; DATA XREF: .idata:00414800↑o
.idata:0041506A                 db 'DeleteFileW',0
.idata:00415076 word_415076     dw 1A3h                 ; DATA XREF: .idata:00414804↑o
.idata:00415078                 db 'FormatMessageW',0
.idata:00415087                 align 4
.idata:00415088 word_415088     dw 3C3h                 ; DATA XREF: .idata:00414808↑o
.idata:0041508A                 db 'LocalFree',0
.idata:00415094 word_415094     dw 345h                 ; DATA XREF: .idata:0041480C↑o
.idata:00415096                 db 'HeapSetInformation',0
.idata:004150A9                 align 2
.idata:004150AA word_4150AA     dw 495h                 ; DATA XREF: .idata:00414844↑o
.idata:004150AC                 db 'RegisterApplicationRestart',0
.idata:004150C7                 align 4
.idata:004150C8 word_4150C8     dw 400h                 ; DATA XREF: .idata:00414810↑o
.idata:004150CA                 db 'OpenProcess',0
.idata:004150D6 word_4150D6     dw 214h                 ; DATA XREF: .idata:00414814↑o
.idata:004150D8                 db 'GetCurrentProcessId',0
.idata:004150EC word_4150EC     dw 85h                  ; DATA XREF: .idata:00414818↑o
.idata:004150EE                 db 'CloseHandle',0
.idata:004150FA word_4150FA     dw 218h                 ; DATA XREF: .idata:0041484C↑o
.idata:004150FC                 db 'GetCurrentThreadId',0
.idata:0041510F                 align 10h
.idata:00415110 word_415110     dw 1D3h                 ; DATA XREF: .idata:00414820↑o
.idata:00415112                 db 'GetCommandLineW',0
.idata:00415122 word_415122     dw 99h                  ; DATA XREF: .idata:00414824↑o
.idata:00415124                 db 'CompareStringW',0
.idata:00415133                 align 4
.idata:00415134 word_415134     dw 0B8h                 ; DATA XREF: .idata:00414828↑o
.idata:00415136                 db 'CreateDirectoryW',0
.idata:00415147                 align 4
.idata:00415148 word_415148     dw 0E9h                 ; DATA XREF: .idata:0041482C↑o
.idata:0041514A                 db 'CreateSemaphoreW',0
.idata:0041515B                 align 4
.idata:0041515C word_41515C     dw 3E2h                 ; DATA XREF: .idata:00414830↑o
.idata:0041515E                 db 'MultiByteToWideChar',0
.idata:00415172 word_415172     dw 5F1h                 ; DATA XREF: .idata:00414834↑o
.idata:00415174                 db 'WideCharToMultiByte',0
.idata:00415188 word_415188     dw 626h                 ; DATA XREF: .idata:00414838↑o
.idata:0041518A                 db 'lstrcmpiW',0
.idata:00415194 aKernel32Dll    db 'KERNEL32.dll',0     ; DATA XREF: .idata:0041464C↑o
.idata:004151A1                 align 2
.idata:004151A2 word_4151A2     dw 336h                 ; DATA XREF: .idata:004147D0↑o
.idata:004151A4                 db 'SelectObject',0
.idata:004151B1                 align 2
.idata:004151B2 word_4151B2     dw 2ACh                 ; DATA XREF: .idata:off_4147CC↑o
.idata:004151B4                 db 'GetTextMetricsW',0
.idata:004151C4 word_4151C4     dw 2A4h                 ; DATA XREF: .idata:004147D4↑o
.idata:004151C6                 db 'GetTextExtentPoint32W',0
.idata:004151DC aGdi32Dll       db 'GDI32.dll',0        ; DATA XREF: .idata:00414660↑o
.idata:004151E6 word_4151E6     dw 0EAh                 ; DATA XREF: .idata:00414BF4↑o
.idata:004151E8                 db 'EnableWindow',0
.idata:004151F5                 align 2
.idata:004151F6 word_4151F6     dw 304h                 ; DATA XREF: .idata:00414C0C↑o
.idata:004151F8                 db 'SendMessageW',0
.idata:00415205                 align 2
.idata:00415206 word_415206     dw 12Ch                 ; DATA XREF: .idata:00414C00↑o
.idata:00415208                 db 'GetClientRect',0
.idata:00415216 word_415216     dw 1B7h                 ; DATA XREF: .idata:00414C04↑o
.idata:00415218                 db 'GetSystemMetrics',0
.idata:00415229                 align 2
.idata:0041522A word_41522A     dw 312h                 ; DATA XREF: .idata:00414BF8↑o
.idata:0041522C                 db 'SetCursor',0
.idata:00415236 word_415236     dw 23Fh                 ; DATA XREF: .idata:00414BFC↑o
.idata:00415238                 db 'LoadCursorW',0
.idata:00415244 word_415244     dw 14Dh                 ; DATA XREF: .idata:00414BD0↑o
.idata:00415246                 db 'GetFocus',0
.idata:0041524F                 align 10h
.idata:00415250 word_415250     dw 36Dh                 ; DATA XREF: .idata:off_414BAC↑o
.idata:00415252                 db 'ShowWindow',0
.idata:0041525D                 align 2
.idata:0041525E word_41525E     dw 21Bh                 ; DATA XREF: .idata:00414BB0↑o
.idata:00415260                 db 'IsDlgButtonChecked',0
.idata:00415273                 align 4
.idata:00415274 word_415274     dw 0EDh                 ; DATA XREF: .idata:00414BB4↑o
.idata:00415276                 db 'EndDialog',0
.idata:00415280 word_415280     dw 320h                 ; DATA XREF: .idata:00414BB8↑o
.idata:00415282                 db 'SetFocus',0
.idata:0041528B                 align 4
.idata:0041528C word_41528C     dw 361h                 ; DATA XREF: .idata:00414BBC↑o
.idata:0041528E                 db 'SetWindowTextW',0
.idata:0041529D                 align 2
.idata:0041529E word_41529E     dw 24Eh                 ; DATA XREF: .idata:00414BC0↑o
.idata:004152A0                 db 'LoadStringW',0
.idata:004152AC word_4152AC     dw 27Dh                 ; DATA XREF: .idata:00414BC4↑o
.idata:004152AE                 db 'MessageBoxW',0
.idata:004152BA word_4152BA     dw 115h                 ; DATA XREF: .idata:00414BC8↑o
.idata:004152BC                 db 'GetActiveWindow',0
.idata:004152CC word_4152CC     dw 145h                 ; DATA XREF: .idata:00414BCC↑o
.idata:004152CE                 db 'GetDlgItem',0
.idata:004152D9                 align 2
.idata:004152DA word_4152DA     dw 148h                 ; DATA XREF: .idata:00414C08↑o
.idata:004152DC                 db 'GetDlgItemTextW',0
.idata:004152EC word_4152EC     dw 40h                  ; DATA XREF: .idata:00414BD4↑o
.idata:004152EE                 db 'CheckDlgButton',0
.idata:004152FD                 align 2
.idata:004152FE word_4152FE     dw 31Bh                 ; DATA XREF: .idata:00414BD8↑o
.idata:00415300                 db 'SetDlgItemInt',0
.idata:0041530E word_41530E     dw 31Dh                 ; DATA XREF: .idata:00414BDC↑o
.idata:00415310                 db 'SetDlgItemTextW',0
.idata:00415320 word_415320     dw 1E1h                 ; DATA XREF: .idata:00414BE0↑o
.idata:00415322                 db 'GetWindowTextLengthW',0
.idata:00415337                 align 4
.idata:00415338 word_415338     dw 1E2h                 ; DATA XREF: .idata:00414BE4↑o
.idata:0041533A                 db 'GetWindowTextW',0
.idata:00415349                 align 2
.idata:0041534A word_41534A     dw 230h                 ; DATA XREF: .idata:00414BE8↑o
.idata:0041534C                 db 'IsWindowEnabled',0
.idata:0041535C word_41535C     dw 35Ah                 ; DATA XREF: .idata:00414BEC↑o
.idata:0041535E                 db 'SetWindowLongW',0
.idata:0041536D                 align 2
.idata:0041536E word_41536E     dw 13Bh                 ; DATA XREF: .idata:00414BF0↑o
.idata:00415370                 db 'GetDC',0
.idata:00415376 word_415376     dw 2EAh                 ; DATA XREF: .idata:00414C10↑o
.idata:00415378                 db 'ReleaseDC',0
.idata:00415382 word_415382     dw 15Eh                 ; DATA XREF: .idata:00414C14↑o
.idata:00415384                 db 'GetKeyState',0
.idata:00415390 word_415390     dw 20h                  ; DATA XREF: .idata:00414C18↑o
.idata:00415392                 db 'CallWindowProcW',0
.idata:004153A2 word_4153A2     dw 1D5h                 ; DATA XREF: .idata:00414C1C↑o
.idata:004153A4                 db 'GetWindowLongW',0
.idata:004153B3                 align 4
.idata:004153B4 word_4153B4     dw 241h                 ; DATA XREF: .idata:00414C20↑o
.idata:004153B6                 db 'LoadIconW',0
.idata:004153C0 word_4153C0     dw 33h                  ; DATA XREF: .idata:00414C24↑o
.idata:004153C2                 db 'CharNextW',0
.idata:004153CC word_4153CC     dw 10Fh                 ; DATA XREF: .idata:00414C28↑o
.idata:004153CE                 db 'FindWindowW',0
.idata:004153DA word_4153DA     dw 321h                 ; DATA XREF: .idata:00414C2C↑o
.idata:004153DC                 db 'SetForegroundWindow',0
.idata:004153F0 word_4153F0     dw 21Eh                 ; DATA XREF: .idata:00414C30↑o
.idata:004153F2                 db 'IsIconic',0
.idata:004153FB                 align 4
.idata:004153FC word_4153FC     dw 165h                 ; DATA XREF: .idata:00414C34↑o
.idata:004153FE                 db 'GetLastActivePopup',0
.idata:00415411                 align 2
.idata:00415412 aUser32Dll      db 'USER32.dll',0       ; DATA XREF: .idata:00414674↑o
.idata:0041541D                 align 2
.idata:0041541E aMfc42uDll      db 'MFC42u.dll',0       ; DATA XREF: .idata:00414688↑o
.idata:00415429                 align 2
.idata:0041542A word_41542A     dw 79h                  ; DATA XREF: .idata:00414CC0↑o
.idata:0041542C                 db '__CxxFrameHandler3',0
.idata:0041543F                 align 10h
.idata:00415440 word_415440     dw 4FDh                 ; DATA XREF: .idata:00414D5C↑o
.idata:00415442                 db 'malloc',0
.idata:00415449                 align 2
.idata:0041544A word_41544A     dw 4C5h                 ; DATA XREF: .idata:00414CC8↑o
.idata:0041544C                 db 'free',0
.idata:00415451                 align 2
.idata:00415452 word_415452     dw 31Ah                 ; DATA XREF: .idata:00414CCC↑o
.idata:00415454                 db '_purecall',0
.idata:0041545E word_41545E     dw 40Fh                 ; DATA XREF: .idata:00414D58↑o
.idata:00415460                 db '_wcsicoll',0
.idata:0041546A word_41546A     dw 0Bh                  ; DATA XREF: .idata:00414D54↑o
.idata:0041546C                 db '??0exception@@QAE@ABV0@@Z',0
.idata:00415486 word_415486     dw 50Ah                 ; DATA XREF: .idata:00414D50↑o
.idata:00415488                 db 'memcpy_s',0
.idata:00415491                 align 2
.idata:00415492 word_415492     dw 37h                  ; DATA XREF: .idata:00414D4C↑o
.idata:00415494                 db '?what@exception@@UBEPBDXZ',0
.idata:004154AE word_4154AE     dw 10h                  ; DATA XREF: .idata:00414D48↑o
.idata:004154B0                 db '??1exception@@UAE@XZ',0
.idata:004154C5                 align 2
.idata:004154C6 word_4154C6     dw 9                    ; DATA XREF: .idata:00414D44↑o
.idata:004154C8                 db '??0exception@@QAE@ABQBD@Z',0
.idata:004154E2 word_4154E2     dw 50Ch                 ; DATA XREF: .idata:00414D40↑o
.idata:004154E4                 db 'memmove_s',0
.idata:004154EE word_4154EE     dw 0Ch                  ; DATA XREF: .idata:00414D3C↑o
.idata:004154F0                 db '??0exception@@QAE@XZ',0
.idata:00415505                 align 2
.idata:00415506 word_415506     dw 247h                 ; DATA XREF: .idata:00414D38↑o
.idata:00415508                 db '_itow_s',0
.idata:00415510 word_415510     dw 48Ch                 ; DATA XREF: .idata:00414D34↑o
.idata:00415512                 db '_wtol',0
.idata:00415518 word_415518     dw 3ECh                 ; DATA XREF: .idata:00414D30↑o
.idata:0041551A                 db '_vsnwprintf',0
.idata:00415526 word_415526     dw 4A4h                 ; DATA XREF: .idata:00414D2C↑o
.idata:00415528                 db 'calloc',0
.idata:0041552F                 align 10h
.idata:00415530 word_415530     dw 50Bh                 ; DATA XREF: .idata:00414D28↑o
.idata:00415532                 db 'memmove',0
.idata:0041553A word_41553A     dw 488h                 ; DATA XREF: .idata:00414D24↑o
.idata:0041553C                 db '_wtoi',0
.idata:00415542 word_415542     dw 57Fh                 ; DATA XREF: .idata:00414D20↑o
.idata:00415544                 db 'wcsrchr',0
.idata:0041554C word_41554C     dw 4ECh                 ; DATA XREF: .idata:00414D1C↑o
.idata:0041554E                 db 'iswdigit',0
.idata:00415557                 align 4
.idata:00415558 word_415558     dw 122h                 ; DATA XREF: .idata:00414D18↑o
.idata:0041555A                 db '_callnewh',0
.idata:00415564 word_415564     dw 64h                  ; DATA XREF: .idata:00414D14↑o
.idata:00415566                 db '_CxxThrowException',0
.idata:00415579                 align 2
.idata:0041557A word_41557A     dw 6Fh                  ; DATA XREF: .idata:00414D10↑o
.idata:0041557C                 db '_XcptFilter',0
.idata:00415588 word_415588     dw 0C9h                 ; DATA XREF: .idata:00414D0C↑o
.idata:0041558A                 db '__p__commode',0
.idata:00415597                 align 4
.idata:00415598 word_415598     dw 111h                 ; DATA XREF: .idata:00414D08↑o
.idata:0041559A                 db '_amsg_exit',0
.idata:004155A5                 align 2
.idata:004155A6 word_4155A6     dw 0F1h                 ; DATA XREF: .idata:00414CB8↑o
.idata:004155A8                 db '__wgetmainargs',0
.idata:004155B7                 align 4
.idata:004155B8 word_4155B8     dw 0E2h                 ; DATA XREF: .idata:00414CA8↑o
.idata:004155BA                 db '__set_app_type',0
.idata:004155C9                 align 2
.idata:004155CA word_4155CA     dw 4AEh                 ; DATA XREF: .idata:00414CBC↑o
.idata:004155CC                 db 'exit',0
.idata:004155D1                 align 2
.idata:004155D2 word_4155D2     dw 173h                 ; DATA XREF: .idata:00414CC4↑o
.idata:004155D4                 db '_exit',0
.idata:004155DA word_4155DA     dw 124h                 ; DATA XREF: .idata:00414CD0↑o
.idata:004155DC                 db '_cexit',0
.idata:004155E3                 align 4
.idata:004155E4 word_4155E4     dw 0CEh                 ; DATA XREF: .idata:00414CD4↑o
.idata:004155E6                 db '__p__fmode',0
.idata:004155F1                 align 2
.idata:004155F2 word_4155F2     dw 0E4h                 ; DATA XREF: .idata:00414CD8↑o
.idata:004155F4                 db '__setusermatherr',0
.idata:00415605                 align 2
.idata:00415606 word_415606     dw 1E8h                 ; DATA XREF: .idata:00414CDC↑o
.idata:00415608                 db '_initterm',0
.idata:00415612 word_415612     dw 405h                 ; DATA XREF: .idata:00414CE0↑o
.idata:00415614                 db '_wcmdln',0
.idata:0041561C aMsvcrtDll      db 'msvcrt.dll',0       ; DATA XREF: .idata:0041469C↑o
.idata:00415627                 align 4
.idata:00415628 word_415628     dw 35h                  ; DATA XREF: .idata:00414CE4↑o
.idata:0041562A                 db '?terminate@@YAXXZ',0
.idata:0041563C word_41563C     dw 11h                  ; DATA XREF: .idata:00414CE8↑o
.idata:0041563E                 db '??1type_info@@UAE@XZ',0
.idata:00415653                 align 4
.idata:00415654 word_415654     dw 260h                 ; DATA XREF: .idata:00414CEC↑o
.idata:00415656                 db '_lock',0
.idata:0041565C word_41565C     dw 3C4h                 ; DATA XREF: .idata:00414CF0↑o
.idata:0041565E                 db '_unlock',0
.idata:00415666 word_415666     dw 9Dh                  ; DATA XREF: .idata:00414CF4↑o
.idata:00415668                 db '__dllonexit',0
.idata:00415674 word_415674     dw 309h                 ; DATA XREF: .idata:00414CF8↑o
.idata:00415676                 db '_onexit',0
.idata:0041567E word_41567E     dw 137h                 ; DATA XREF: .idata:00414CFC↑o
.idata:00415680                 db '_controlfp',0
.idata:0041568B                 align 4
.idata:0041568C word_41568C     dw 16Ah                 ; DATA XREF: .idata:00414D00↑o
.idata:0041568E                 db '_except_handler4_common',0
.idata:004156A6 aAtlDll         db 'ATL.DLL',0          ; DATA XREF: .idata:004146B0↑o
.idata:004156AE word_4156AE     dw 13Eh                 ; DATA XREF: .idata:off_414B98↑o
.idata:004156B0                 db 'SHEvaluateSystemCommandTemplate',0
.idata:004156D0 word_4156D0     dw 1B8h                 ; DATA XREF: .idata:00414B9C↑o
.idata:004156D2                 db 'ShellExecuteW',0
.idata:004156E0 aShell32Dll     db 'SHELL32.dll',0      ; DATA XREF: .idata:004146C4↑o
.idata:004156EC aOleaut32Dll    db 'OLEAUT32.dll',0     ; DATA XREF: .idata:004146D8↑o
.idata:004156F9                 align 2
.idata:004156FA word_4156FA     dw 7                    ; DATA XREF: .idata:00414C44↑o
.idata:004156FC                 db 'GetFileVersionInfoSizeW',0
.idata:00415714 word_415714     dw 8                    ; DATA XREF: .idata:off_414C3C↑o
.idata:00415716                 db 'GetFileVersionInfoW',0
.idata:0041572A word_41572A     dw 10h                  ; DATA XREF: .idata:00414C40↑o
.idata:0041572C                 db 'VerQueryValueW',0
.idata:0041573B                 align 4
.idata:0041573C aVersionDll     db 'VERSION.dll',0      ; DATA XREF: .idata:004146EC↑o
.idata:00415748 aShlwapiDll     db 'SHLWAPI.dll',0      ; DATA XREF: .idata:00414700↑o
.idata:00415754 word_415754     dw 2F5h                 ; DATA XREF: .idata:00414D74↑o
.idata:00415756                 db 'RtlCompareMemory',0
.idata:00415767                 align 4
.idata:00415768 word_415768     dw 652h                 ; DATA XREF: .idata:00414D70↑o
.idata:0041576A                 db 'WinSqmIncrementDWORD',0
.idata:0041577F                 align 10h
.idata:00415780 word_415780     dw 642h                 ; DATA XREF: .idata:00414D6C↑o
.idata:00415782                 db 'WinSqmAddToStream',0
.idata:00415794 word_415794     dw 42Bh                 ; DATA XREF: .idata:off_414D68↑o
.idata:00415796                 db 'RtlInitUnicodeString',0
.idata:004157AB                 align 4
.idata:004157AC word_4157AC     dw 4B4h                 ; DATA XREF: .idata:00414D78↑o
.idata:004157AE                 db 'RtlNtStatusToDosError',0
.idata:004157C4 aNtdllDll       db 'ntdll.dll',0        ; DATA XREF: .idata:00414714↑o
.idata:004157CE word_4157CE     dw 1Dh                  ; DATA XREF: .idata:00414C98↑o
.idata:004157D0                 db 'BcdQueryObject',0
.idata:004157DF                 align 10h
.idata:004157E0 word_4157E0     dw 10h                  ; DATA XREF: .idata:00414C88↑o
.idata:004157E2                 db 'BcdExportStore',0
.idata:004157F1                 align 2
.idata:004157F2 word_4157F2     dw 13h                  ; DATA XREF: .idata:00414C84↑o
.idata:004157F4                 db 'BcdGetElementData',0
.idata:00415806 word_415806     dw 7                    ; DATA XREF: .idata:00414C80↑o
.idata:00415808                 db 'BcdDeleteElement',0
.idata:00415819                 align 2
.idata:0041581A word_41581A     dw 16h                  ; DATA XREF: .idata:00414C7C↑o
.idata:0041581C                 db 'BcdImportStoreWithFlags',0
.idata:00415834 word_415834     dw 0Fh                  ; DATA XREF: .idata:00414C78↑o
.idata:00415836                 db 'BcdEnumerateObjects',0
.idata:0041584A word_41584A     dw 1                    ; DATA XREF: .idata:00414C9C↑o
.idata:0041584C                 db 'BcdCloseStore',0
.idata:0041585A word_41585A     dw 1Bh                  ; DATA XREF: .idata:00414C74↑o
.idata:0041585C                 db 'BcdOpenStoreFromFile',0
.idata:00415871                 align 2
.idata:00415872 word_415872     dw 8                    ; DATA XREF: .idata:00414C70↑o
.idata:00415874                 db 'BcdDeleteObject',0
.idata:00415884 word_415884     dw 1Ch                  ; DATA XREF: .idata:00414C94↑o
.idata:00415886                 db 'BcdOpenSystemStore',0
.idata:00415899                 align 2
.idata:0041589A word_41589A     dw 9                    ; DATA XREF: .idata:00414C68↑o
.idata:0041589C                 db 'BcdDeleteObjectReferences',0
.idata:004158B6 word_4158B6     dw 5                    ; DATA XREF: .idata:off_414C64↑o
.idata:004158B8                 db 'BcdCreateObject',0
.idata:004158C8 word_4158C8     dw 1Eh                  ; DATA XREF: .idata:00414C6C↑o
.idata:004158CA                 db 'BcdSetElementData',0
.idata:004158DC word_4158DC     dw 0                    ; DATA XREF: .idata:00414C8C↑o
.idata:004158DE                 db 'BcdCloseObject',0
.idata:004158ED                 align 2
.idata:004158EE word_4158EE     dw 19h                  ; DATA XREF: .idata:00414C90↑o
.idata:004158F0                 db 'BcdOpenObject',0
.idata:004158FE aBcdDll         db 'bcd.dll',0          ; DATA XREF: .idata:00414728↑o
.idata:00415906 word_415906     dw 9                    ; DATA XREF: .idata:off_414C4C↑o
.idata:00415908                 db 'CoCreateInstance',0
.idata:00415919                 align 2
.idata:0041591A word_41591A     dw 41h                  ; DATA XREF: .idata:00414C58↑o
.idata:0041591C                 db 'CoTaskMemFree',0
.idata:0041592A word_41592A     dw 49h                  ; DATA XREF: .idata:00414C5C↑o
.idata:0041592C                 db 'CreateStreamOnHGlobal',0
.idata:00415942 word_415942     dw 44h                  ; DATA XREF: .idata:00414C50↑o
.idata:00415944                 db 'CoUninitialize',0
.idata:00415953                 align 4
.idata:00415954 word_415954     dw 28h                  ; DATA XREF: .idata:00414C54↑o
.idata:00415956                 db 'CoInitializeEx',0
.idata:00415965                 align 2
.idata:00415966 aApiMsWinCoreCo db 'api-ms-win-core-com-l1-1-1.dll',0
.idata:00415966                                         ; DATA XREF: .idata:0041473C↑o
.idata:00415985                 align 2
.idata:00415986 word_415986     dw 341h                 ; DATA XREF: .idata:004148AC↑o
.idata:00415988                 db 'HeapFree',0
.idata:00415991                 align 2
.idata:00415992 word_415992     dw 5B9h                 ; DATA XREF: .idata:004148A8↑o
.idata:00415994                 db 'VirtualFree',0
.idata:004159A0 word_4159A0     dw 213h                 ; DATA XREF: .idata:004148A4↑o
.idata:004159A2                 db 'GetCurrentProcess',0
.idata:004159B4 word_4159B4     dw 5B6h                 ; DATA XREF: .idata:004148A0↑o
.idata:004159B6                 db 'VirtualAlloc',0
.idata:004159C3                 align 4
.idata:004159C4 word_4159C4     dw 3B7h                 ; DATA XREF: .idata:0041489C↑o
.idata:004159C6                 db 'LoadLibraryExA',0
.idata:004159D5                 align 2
.idata:004159D6 word_4159D6     dw 12Ah                 ; DATA XREF: .idata:00414898↑o
.idata:004159D8                 db 'EncodePointer',0
.idata:004159E6 word_4159E6     dw 33Dh                 ; DATA XREF: .idata:00414894↑o
.idata:004159E8                 db 'HeapAlloc',0
.idata:004159F2 word_4159F2     dw 106h                 ; DATA XREF: .idata:00414890↑o
.idata:004159F4                 db 'DecodePointer',0
.idata:00415A02 word_415A02     dw 37Dh                 ; DATA XREF: .idata:0041488C↑o
.idata:00415A04                 db 'IsProcessorFeaturePresent',0
.idata:00415A1E word_415A1E     dw 2ADh                 ; DATA XREF: .idata:00414888↑o
.idata:00415A20                 db 'GetProcessHeap',0
.idata:00415A2F                 align 10h
.idata:00415A30 word_415A30     dw 19Ch                 ; DATA XREF: .idata:00414884↑o
.idata:00415A32                 db 'FlushInstructionCache',0
.idata:00415A48 word_415A48     dw 366h                 ; DATA XREF: .idata:00414880↑o
.idata:00415A4A                 db 'InterlockedPushEntrySList',0
.idata:00415A64 word_415A64     dw 365h                 ; DATA XREF: .idata:0041487C↑o
.idata:00415A66                 db 'InterlockedPopEntrySList',0
.idata:00415A7F                 align 10h
.idata:00415A80 word_415A80     dw 56Dh                 ; DATA XREF: .idata:00414878↑o
.idata:00415A82                 db 'Sleep',0
.idata:00415A88 word_415A88     dw 2C9h                 ; DATA XREF: .idata:00414874↑o
.idata:00415A8A                 db 'GetStartupInfoW',0
.idata:00415A9A word_415A9A     dw 59Dh                 ; DATA XREF: .idata:00414870↑o
.idata:00415A9C                 db 'UnhandledExceptionFilter',0
.idata:00415AB5                 align 2
.idata:00415AB6 word_415AB6     dw 55Eh                 ; DATA XREF: .idata:0041486C↑o
.idata:00415AB8                 db 'SetUnhandledExceptionFilter',0
.idata:00415AD4 word_415AD4     dw 57Ch                 ; DATA XREF: .idata:00414868↑o
.idata:00415AD6                 db 'TerminateProcess',0
.idata:00415AE7                 align 4
.idata:00415AE8 word_415AE8     dw 26Eh                 ; DATA XREF: .idata:00414864↑o
.idata:00415AEA                 db 'GetModuleHandleA',0
.idata:00415AFB                 align 4
.idata:00415AFC word_415AFC     dw 440h                 ; DATA XREF: .idata:00414860↑o
.idata:00415AFE                 db 'QueryPerformanceCounter',0
.idata:00415B16 word_415B16     dw 2E2h                 ; DATA XREF: .idata:0041485C↑o
.idata:00415B18                 db 'GetSystemTimeAsFileTime',0
.idata:00415B30 word_415B30     dw 300h                 ; DATA XREF: .idata:00414858↑o
.idata:00415B32                 db 'GetTickCount',0
.idata:00415B3F                 align 10h
.idata:00415B40 word_415B40     dw 438h                 ; DATA XREF: .idata:00414854↑o
.idata:00415B42                 db 'QueryDosDeviceW',0
.idata:00415B52 word_415B52     dw 3BFh                 ; DATA XREF: .idata:00414850↑o
.idata:00415B54                 db 'LocalAlloc',0
.idata:00415B5F                 align 10h
.idata:00415B60 word_415B60     dw 40Dh                 ; DATA XREF: .idata:00414CB4↑o
.idata:00415B62                 db '_wcsicmp',0
.idata:00415B6B                 align 4
.idata:00415B6C word_415B6C     dw 574h                 ; DATA XREF: .idata:00414CB0↑o
.idata:00415B6E                 db 'wcscpy_s',0
.idata:00415B77                 align 4
.idata:00415B78 word_415B78     dw 56Fh                 ; DATA XREF: .idata:00414CAC↑o
.idata:00415B7A                 db 'wcscat_s',0
.idata:00415B83                 align 4
.idata:00415B84 word_415B84     dw 1A7h                 ; DATA XREF: .idata:00414D04↑o
.idata:00415B86                 db '_ftol2_sse',0
.idata:00415B91                 align 2
.idata:00415B92 word_415B92     dw 509h                 ; DATA XREF: .idata:off_414CA4↑o
.idata:00415B94                 db 'memcpy',0
.idata:00415B9B                 align 4
.idata:00415B9C word_415B9C     dw 50Dh                 ; DATA XREF: .idata:00414D60↑o
.idata:00415B9E                 db 'memset',0
.idata:00415BA5                 align 800h
.idata:00415BA5 _idata          ends
.idata:00415BA5
.idata:00415BA5
.idata:00415BA5                 end start
