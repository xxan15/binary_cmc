.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 0A24F147078D4D04AB1479ED4EBA8F62FFA4D62887204956A0D3F4B8111C61C7
.text:00401000 ; Input MD5    : 072D2D8E47D9FFDD44EE64BB7C9F34BF
.text:00401000 ; Input CRC32  : 31BF7EB6
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/pe_benchmarks/clip.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Hash        : 84E18824
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00003FFC (  16380.)
.text:00401000 ; Section size in file          : 00004000 (  16384.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000 ; PDB File Name : clip.pdb
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000 ; const struct _EXCEPTION_POINTERS ExceptionInfo
.text:00401000 ExceptionInfo   _EXCEPTION_POINTERS <offset dword_405040, offset dword_405090>
.text:00401000                                         ; DATA XREF: ___report_gsfailure+102↓o
.text:00401008 __load_config_used dd 98h               ; Size
.text:0040100C                 dd 0                    ; Time stamp
.text:00401010                 dw 2 dup(0)             ; Version: 0.0
.text:00401014                 dd 0                    ; GlobalFlagsClear
.text:00401018                 dd 0                    ; GlobalFlagsSet
.text:0040101C                 dd 0                    ; CriticalSectionDefaultTimeout
.text:00401020                 dd 0                    ; DeCommitFreeBlockThreshold
.text:00401024                 dd 0                    ; DeCommitTotalFreeThreshold
.text:00401028                 dd 0                    ; LockPrefixTable
.text:0040102C                 dd 0                    ; MaximumAllocationSize
.text:00401030                 dd 0                    ; VirtualMemoryThreshold
.text:00401034                 dd 0                    ; ProcessAffinityMask
.text:00401038                 dd 0                    ; ProcessHeapFlags
.text:0040103C                 dw 0                    ; CSDVersion
.text:0040103E                 dw 0                    ; Reserved1
.text:00401040                 dd 0                    ; EditList
.text:00401044                 dd offset ___security_cookie ; SecurityCookie
.text:00401048                 dd offset ___safe_se_handler_table ; SEHandlerTable
.text:0040104C                 dd 1                    ; SEHandlerCount
.text:00401050                 dd offset ___guard_check_icall_fptr ; GuardCFCheckFunctionPointer
.text:00401054                 dd 0                    ; GuardCFDispatchFunctionPointer
.text:00401058                 dd offset ___guard_fids_table ; GuardCFFunctionTable
.text:0040105C                 dd 9                    ; GuardCFFunctionCount
.text:00401060                 dd 17500h               ; GuardFlags
.text:00401064                 dd 0Fh dup(0)
.text:004010A0 ; const _PVFV First
.text:004010A0 First           dd 0                    ; DATA XREF: start-11C↓o
.text:004010A4                 dd offset pre_cpp_init
.text:004010A8 ; const _PVFV Last
.text:004010A8 Last            dd 0                    ; DATA XREF: start-121↓o
.text:004010AC ; const _PIFV dword_4010AC
.text:004010AC dword_4010AC    dd 0                    ; DATA XREF: start-150↓o
.text:004010B0                 dd offset pre_c_init
.text:004010B4                 dd offset sub_404A30
.text:004010B8 ; const _PIFV dword_4010B8
.text:004010B8 dword_4010B8    dd 0                    ; DATA XREF: start-155↓o
.text:004010BC ___guard_fids_table dd rva pre_c_init   ; DATA XREF: .text:00401058↑o
.text:004010C0                 dd rva pre_cpp_init
.text:004010C4                 dd rva start
.text:004010C8                 dd rva @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004010CC                 dd rva ?__CxxUnhandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ; __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *)
.text:004010D0                 dd rva sub_404A30
.text:004010D4                 dd rva UserMathErrorFunction
.text:004010D8                 dd rva __except_handler4
.text:004010DC                 dd rva @_guard_check_icall_nop@4 ; _guard_check_icall_nop(x)
.text:004010E0 aSS:                                    ; DATA XREF: sub_401577+49↓o
.text:004010E0                 text "UTF-16LE", 0Ah
.text:004010E0                 text "UTF-16LE", '%s %s',0
.text:004010EE                 align 10h
.text:004010F0 aParser2        db 'PARSER2',0          ; DATA XREF: sub_401440+3A↓o
.text:004010F8 asc_4010F8      db '?',0                ; DATA XREF: sub_401440+6D↓o
.text:004010FA                 align 4
.text:004010FC aS:                                     ; DATA XREF: sub_401CC0+59↓o
.text:004010FC                 text "UTF-16LE", '%s ',0
.text:00401104 ; const wchar_t aS_0
.text:00401104 aS_0:                                   ; DATA XREF: sub_402271+73↓o
.text:00401104                                         ; sub_402271+90↓o
.text:00401104                 text "UTF-16LE", '|%s|',0
.text:0040110E                 align 10h
.text:00401110 dword_401110    dd 90020h               ; DATA XREF: sub_4023BD+1A↓r
.text:00401110                                         ; ParseAndSaveOptionValue(x,x,x)+16B↓o
.text:00401114 word_401114     dw 0                    ; DATA XREF: sub_4023BD+25↓r
.text:00401116                 align 4
.text:00401118 ; const char Format[3]
.text:00401118 Format          db '%s',0               ; DATA XREF: ShowMessage(x,x)+1F2↓o
.text:0040111B                 align 4
.text:0040111C aBuffer         db 'BUFFER',0           ; DATA XREF: sub_401961+30↓o
.text:0040111C                                         ; sub_4019AD+77↓o ...
.text:00401123                 align 4
.text:00401124 dword_401124    dd 0                    ; DATA XREF: sub_4018B0+56↓o
.text:00401124                                         ; sub_401B05:loc_401B1F↓o ...
.text:00401128 ; const WCHAR SubBlock
.text:00401128 SubBlock:                               ; DATA XREF: PrepareUsageHelperText(x)+E7↓o
.text:00401128                 text "UTF-16LE", '\VarFileInfo\Translation',0
.text:0040115A                 align 10h
.text:00401160 ; const wchar_t aStringfileinfo
.text:00401160 aStringfileinfo:                        ; DATA XREF: PrepareUsageHelperText(x)+127↓o
.text:00401160                 text "UTF-16LE", '\StringFileInfo\%04x%04x\InternalName',0
.text:004011AC ; const WCHAR String
.text:004011AC String:                                 ; DATA XREF: PrepareUsageHelperText(x)+198↓o
.text:004011AC                 text "UTF-16LE", '.EXE',0
.text:004011B6                 align 4
.text:004011B8 ; const wchar_t aSS_0
.text:004011B8 aSS_0:                                  ; DATA XREF: PrepareUsageHelperText(x)+220↓o
.text:004011B8                 text "UTF-16LE", '%s %s',0
.text:004011C4 asc_4011C4:                             ; DATA XREF: sub_403157+5E↓o
.text:004011C4                 text "UTF-16LE", '/',0
.text:004011C8 ; const CHAR String2[]
.text:004011C8 String2         db 'PARSER2',0          ; DATA XREF: sub_4031EB+52↓o
.text:004011D0 ; const WCHAR pszStart
.text:004011D0 pszStart:                               ; DATA XREF: sub_402E6D+38↓o
.text:004011D0                 text "UTF-16LE", '-/',0
.text:004011D6                 align 10h
.text:004011E0 ; Debug Directory entries
.text:004011E0                 dd 0                    ; Characteristics
.text:004011E4                 dd 84E18824h            ; TimeDateStamp
.text:004011E8                 dw 0                    ; MajorVersion
.text:004011EA                 dw 0                    ; MinorVersion
.text:004011EC                 dd 2                    ; Type: IMAGE_DEBUG_TYPE_CODEVIEW
.text:004011F0                 dd 21h                  ; SizeOfData
.text:004011F4                 dd rva asc_401244       ; AddressOfRawData
.text:004011F8                 dd 644h                 ; PointerToRawData
.text:004011FC                 dd 0                    ; Characteristics
.text:00401200                 dd 84E18824h            ; TimeDateStamp
.text:00401204                 dw 0                    ; MajorVersion
.text:00401206                 dw 0                    ; MinorVersion
.text:00401208                 dd 0Dh                  ; Type: IMAGE_DEBUG_TYPE_POGO
.text:0040120C                 dd 1D8h                 ; SizeOfData
.text:00401210                 dd rva aGctl            ; AddressOfRawData
.text:00401214                 dd 668h                 ; PointerToRawData
.text:00401218                 dd 0                    ; Characteristics
.text:0040121C                 dd 84E18824h            ; TimeDateStamp
.text:00401220                 dw 0                    ; MajorVersion
.text:00401222                 dw 0                    ; MinorVersion
.text:00401224                 dd 10h                  ; Type: IMAGE_DEBUG_TYPE_REPRO
.text:00401228                 dd 0                    ; SizeOfData
.text:0040122C                 dd 0                    ; AddressOfRawData
.text:00401230                 dd 0                    ; PointerToRawData
.text:00401234                 align 10h
.text:00401240 ___safe_se_handler_table dd rva __except_handler4
.text:00401240                                         ; DATA XREF: .text:00401048↑o
.text:00401244 ; Debug information (IMAGE_DEBUG_TYPE_CODEVIEW)
.text:00401244 asc_401244      db 'RSDS'               ; DATA XREF: .text:004011F4↑o
.text:00401244                                         ; CV signature
.text:00401248                 dd 0F77C0AD3h           ; Data1 ; GUID
.text:00401248                 dw 476Fh                ; Data2
.text:00401248                 dw 21FCh                ; Data3
.text:00401248                 db 0, 40h, 52h, 8Eh, 0EFh, 0E0h, 3, 0B1h; Data4
.text:00401258                 dd 1                    ; Age
.text:0040125C                 text "UTF-8", 'clip.pdb',0 ; PdbFileName
.text:00401265                 align 4
.text:00401268 ; Debug information (IMAGE_DEBUG_TYPE_POGO)
.text:00401268 aGctl           db 'GCTL',0             ; DATA XREF: .text:00401210↑o
.text:0040126D                 db 10h, 2 dup(0)
.text:00401270                 dd 0A0h, 6164722Eh, 62246174h, 6372h, 10A0h, 4, 5452432Eh
.text:00401270                 dd 41435824h, 0
.text:00401294                 dd 10A4h, 4, 5452432Eh, 41435824h, 41h, 10A8h, 4, 5452432Eh
.text:00401294                 dd 5A435824h, 0
.text:004012BC                 dd 10ACh, 4, 5452432Eh, 41495824h, 0
.text:004012D0                 dd 10B0h, 4, 5452432Eh, 41495824h, 41h, 10B4h, 4, 5452432Eh
.text:004012D0                 dd 59495824h, 0
.text:004012F8                 dd 10B8h, 4, 5452432Eh, 5A495824h, 0
.text:0040130C                 dd 10BCh, 24h, 6966672Eh, 7364h, 10E0h, 160h, 6164722Eh
.text:0040130C                 dd 6174h, 1240h, 4, 6164722Eh, 73246174h, 74616478h, 61h
.text:0040130C                 dd 1244h, 1FCh, 6164722Eh, 7A246174h, 62647A7Ah, 67h, 1440h
.text:0040130C                 dd 3B20h, 7865742Eh, 6E6D2474h, 0
.text:00401370                 dd 4F60h, 9Ch, 6164782Eh, 78246174h, 0
.text:00401384                 dd 5000h, 10h, 7461642Eh, 61h, 5010h, 47Ch, 7373622Eh
.text:00401384                 dd 0
.text:004013A4                 dd 6000h, 174h, 6164692Eh, 35246174h, 0
.text:004013B8                 dd 6174h, 4, 6330302Eh, 6766h, 6178h, 0A0h, 6164692Eh
.text:004013B8                 dd 32246174h, 0
.text:004013DC                 dd 6218h, 14h, 6164692Eh, 33246174h, 0
.text:004013F0                 dd 622Ch, 174h, 6164692Eh, 34246174h, 0
.text:00401404                 dd 63A0h, 5B8h, 6164692Eh, 36246174h, 0
.text:00401418                 dd 7000h, 0F0h, 7273722Eh, 31302463h, 0
.text:0040142C                 dd 70F0h, 730h, 7273722Eh, 32302463h, 0
.text:00401440
.text:00401440 ; =============== S U B R O U T I N E =======================================
.text:00401440
.text:00401440 ; Attributes: bp-based frame
.text:00401440
.text:00401440 sub_401440      proc near               ; CODE XREF: start-BB↓p
.text:00401440
.text:00401440 var_58          = dword ptr -58h
.text:00401440 var_54          = byte ptr -54h
.text:00401440 var_4C          = dword ptr -4Ch
.text:00401440 var_44          = dword ptr -44h
.text:00401440 var_40          = dword ptr -40h
.text:00401440 var_3C          = dword ptr -3Ch
.text:00401440 var_34          = dword ptr -34h
.text:00401440 var_28          = dword ptr -28h
.text:00401440 var_4           = dword ptr -4
.text:00401440 arg_0           = dword ptr  8
.text:00401440 arg_4           = dword ptr  0Ch
.text:00401440
.text:00401440                 mov     edi, edi
.text:00401442                 push    ebp
.text:00401443                 mov     ebp, esp
.text:00401445                 sub     esp, 58h
.text:00401448                 mov     eax, ___security_cookie
.text:0040144D                 xor     eax, ebp
.text:0040144F                 mov     [ebp+var_4], eax
.text:00401452                 push    ebx
.text:00401453                 push    esi
.text:00401454                 mov     esi, [ebp+arg_4]
.text:00401457                 xor     ebx, ebx
.text:00401459                 push    edi
.text:0040145A                 push    ebx             ; HeapInformationLength
.text:0040145B                 xor     edi, edi
.text:0040145D                 mov     [ebp+var_58], ebx
.text:00401460                 push    ebx             ; HeapInformation
.text:00401461                 inc     edi
.text:00401462                 push    edi             ; HeapInformationClass
.text:00401463                 push    ebx             ; HeapHandle
.text:00401464                 call    ds:HeapSetInformation
.text:0040146A                 push    50h ; 'P'
.text:0040146C                 pop     ecx
.text:0040146D                 lea     eax, [ebp+var_54]
.text:00401470
.text:00401470 loc_401470:                             ; CODE XREF: sub_401440+36↓j
.text:00401470                 mov     [eax], bl
.text:00401472                 inc     eax
.text:00401473                 sub     ecx, 1
.text:00401476                 jnz     short loc_401470
.text:00401478                 push    8
.text:0040147A                 mov     edx, offset aParser2 ; "PARSER2"
.text:0040147F                 lea     ecx, [ebp+var_54]
.text:00401482                 call    sub_40258C
.text:00401487                 lea     eax, [ebp+var_58]
.text:0040148A                 mov     [ebp+var_3C], edi
.text:0040148D                 push    ecx
.text:0040148E                 mov     [ebp+var_28], eax
.text:00401491                 mov     edx, esi
.text:00401493                 lea     eax, [ebp+var_54]
.text:00401496                 mov     [ebp+var_44], 20000h
.text:0040149D                 push    eax
.text:0040149E                 push    ecx
.text:0040149F                 push    ecx
.text:004014A0                 mov     ecx, [ebp+arg_0]
.text:004014A3                 mov     [ebp+var_40], ebx
.text:004014A6                 mov     [ebp+var_4C], 0Ah
.text:004014AD                 mov     [ebp+var_34], offset asc_4010F8 ; "?"
.text:004014B4                 call    sub_403C94
.text:004014B9                 test    eax, eax
.text:004014BB                 jnz     short loc_4014D8
.text:004014BD                 push    2
.text:004014BF                 mov     ebx, edi
.text:004014C1                 call    sub_404F2C
.text:004014C6                 pop     ecx
.text:004014C7                 mov     edx, 20001h
.text:004014CC                 mov     ecx, eax
.text:004014CE                 call    sub_401CC0
.text:004014D3                 jmp     loc_40155F
.text:004014D8 ; ---------------------------------------------------------------------------
.text:004014D8
.text:004014D8 loc_4014D8:                             ; CODE XREF: sub_401440+7B↑j
.text:004014D8                 push    ebx             ; dwErrCode
.text:004014D9                 call    ds:SetLastError
.text:004014DF                 cmp     [ebp+var_58], edi
.text:004014E2                 jnz     short loc_401558
.text:004014E4                 cmp     [ebp+arg_0], 2
.text:004014E8                 jbe     short loc_40152B
.text:004014EA                 push    800401E4h       ; dwErrCode
.text:004014EF                 call    ds:SetLastError
.text:004014F5                 push    2
.text:004014F7                 call    sub_404F2C
.text:004014FC                 pop     ecx
.text:004014FD                 mov     edx, 20001h
.text:00401502                 mov     ecx, eax
.text:00401504                 call    sub_401CC0
.text:00401509                 push    ebx
.text:0040150A                 mov     edx, 0CEh ; 'Î'
.text:0040150F                 call    sub_401EB3
.text:00401514                 push    2
.text:00401516                 mov     esi, eax
.text:00401518                 call    sub_404F2C
.text:0040151D                 pop     ecx
.text:0040151E                 mov     edx, esi        ; lpString
.text:00401520                 mov     ecx, eax        ; Stream
.text:00401522                 call    _ShowMessage@8  ; ShowMessage(x,x)
.text:00401527                 mov     ebx, edi
.text:00401529                 jmp     short loc_40155F
.text:0040152B ; ---------------------------------------------------------------------------
.text:0040152B
.text:0040152B loc_40152B:                             ; CODE XREF: sub_401440+A8↑j
.text:0040152B                 push    65h ; 'e'
.text:0040152D                 pop     edi
.text:0040152E
.text:0040152E loc_40152E:                             ; CODE XREF: sub_401440+10D↓j
.text:0040152E                 push    ebx
.text:0040152F                 mov     edx, edi
.text:00401531                 call    sub_401EB3
.text:00401536                 push    1
.text:00401538                 mov     esi, eax
.text:0040153A                 call    sub_404F2C
.text:0040153F                 pop     ecx
.text:00401540                 mov     edx, esi        ; lpString
.text:00401542                 mov     ecx, eax        ; Stream
.text:00401544                 call    _ShowMessage@8  ; ShowMessage(x,x)
.text:00401549                 inc     edi
.text:0040154A                 cmp     edi, 73h ; 's'
.text:0040154D                 jbe     short loc_40152E
.text:0040154F                 push    ebx             ; dwErrCode
.text:00401550                 call    ds:SetLastError
.text:00401556                 jmp     short loc_40155F
.text:00401558 ; ---------------------------------------------------------------------------
.text:00401558
.text:00401558 loc_401558:                             ; CODE XREF: sub_401440+A2↑j
.text:00401558                 call    sub_401577
.text:0040155D                 mov     ebx, eax
.text:0040155F
.text:0040155F loc_40155F:                             ; CODE XREF: sub_401440+93↑j
.text:0040155F                                         ; sub_401440+E9↑j ...
.text:0040155F                 call    sub_401D53
.text:00401564                 mov     ecx, [ebp+var_4]
.text:00401567                 mov     eax, ebx
.text:00401569                 pop     edi
.text:0040156A                 pop     esi
.text:0040156B                 xor     ecx, ebp        ; StackCookie
.text:0040156D                 pop     ebx
.text:0040156E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00401573                 mov     esp, ebp
.text:00401575                 pop     ebp
.text:00401576                 retn
.text:00401576 sub_401440      endp
.text:00401576
.text:00401577
.text:00401577 ; =============== S U B R O U T I N E =======================================
.text:00401577
.text:00401577 ; Attributes: bp-based frame
.text:00401577
.text:00401577 sub_401577      proc near               ; CODE XREF: sub_401440:loc_401558↑p
.text:00401577
.text:00401577 var_C           = dword ptr -0Ch
.text:00401577 iSize           = dword ptr -8
.text:00401577 var_4           = dword ptr -4
.text:00401577
.text:00401577                 mov     edi, edi
.text:00401579                 push    ebp
.text:0040157A                 mov     ebp, esp
.text:0040157C                 sub     esp, 0Ch
.text:0040157F                 push    ebx
.text:00401580                 push    esi
.text:00401581                 xor     ebx, ebx
.text:00401583                 push    0FFFFFFF6h      ; nStdHandle
.text:00401585                 mov     [ebp+iSize], ebx
.text:00401588                 call    ds:GetStdHandle
.text:0040158E                 mov     esi, eax
.text:00401590                 cmp     esi, 0FFFFFFFFh
.text:00401593                 jnz     short loc_40159D
.text:00401595
.text:00401595 loc_401595:                             ; CODE XREF: sub_401577+91↓j
.text:00401595                 xor     eax, eax
.text:00401597                 inc     eax
.text:00401598                 jmp     loc_4016F6
.text:0040159D ; ---------------------------------------------------------------------------
.text:0040159D
.text:0040159D loc_40159D:                             ; CODE XREF: sub_401577+1C↑j
.text:0040159D                 push    esi             ; hFile
.text:0040159E                 call    ds:GetFileType
.text:004015A4                 cmp     eax, 2
.text:004015A7                 jnz     short loc_4015E1
.text:004015A9                 push    ebx
.text:004015AA                 mov     edx, 0CEh ; 'Î'
.text:004015AF                 call    sub_401EB3
.text:004015B4                 push    eax
.text:004015B5                 mov     ecx, 138Ch
.text:004015BA                 call    sub_401E93
.text:004015BF                 push    eax             ; char
.text:004015C0                 push    offset aSS      ; "\n%s %s"
.text:004015C5                 push    1               ; int
.text:004015C7                 push    2               ; int
.text:004015C9                 push    1
.text:004015CB                 call    sub_404F2C
.text:004015D0                 pop     ecx
.text:004015D1                 push    eax             ; Stream
.text:004015D2                 call    sub_402929
.text:004015D7                 add     esp, 18h
.text:004015DA                 xor     eax, eax
.text:004015DC                 jmp     loc_4016F6
.text:004015E1 ; ---------------------------------------------------------------------------
.text:004015E1
.text:004015E1 loc_4015E1:                             ; CODE XREF: sub_401577+30↑j
.text:004015E1                 lea     edx, [ebp+iSize]
.text:004015E4                 mov     ecx, esi        ; hFile
.text:004015E6                 call    sub_4017E2
.text:004015EB                 mov     esi, eax
.text:004015ED                 mov     [ebp+var_4], esi
.text:004015F0                 test    esi, esi
.text:004015F2                 jnz     short loc_40160A
.text:004015F4                 push    2
.text:004015F6                 call    sub_404F2C
.text:004015FB                 pop     ecx
.text:004015FC                 mov     edx, 10001h
.text:00401601                 mov     ecx, eax
.text:00401603                 call    sub_401CC0
.text:00401608                 jmp     short loc_401595
.text:0040160A ; ---------------------------------------------------------------------------
.text:0040160A
.text:0040160A loc_40160A:                             ; CODE XREF: sub_401577+7B↑j
.text:0040160A                 push    edi
.text:0040160B                 mov     edi, [ebp+iSize]
.text:0040160E                 push    ebx             ; lpiResult
.text:0040160F                 push    edi             ; iSize
.text:00401610                 push    esi             ; lpv
.text:00401611                 call    ds:IsTextUnicode
.text:00401617                 test    eax, eax
.text:00401619                 jnz     loc_4016BE
.text:0040161F                 push    ebx             ; cchWideChar
.text:00401620                 push    ebx             ; lpWideCharStr
.text:00401621                 push    0FFFFFFFFh      ; cbMultiByte
.text:00401623                 push    esi             ; lpMultiByteStr
.text:00401624                 push    ebx             ; dwFlags
.text:00401625                 call    ds:GetConsoleOutputCP
.text:0040162B                 push    eax             ; CodePage
.text:0040162C                 call    ds:MultiByteToWideChar
.text:00401632                 mov     [ebp+iSize], eax
.text:00401635                 test    eax, eax
.text:00401637                 jle     loc_4016FC
.text:0040163D                 lea     ecx, ds:0Ah[eax*2]
.text:00401644                 call    sub_402B01
.text:00401649                 mov     ebx, eax
.text:0040164B                 mov     [ebp+var_C], ebx
.text:0040164E                 test    ebx, ebx
.text:00401650                 jnz     short loc_40166B
.text:00401652                 push    2
.text:00401654                 call    sub_404F2C
.text:00401659                 pop     ecx
.text:0040165A                 mov     edx, 10001h
.text:0040165F                 mov     ecx, eax
.text:00401661                 call    sub_401CC0
.text:00401666                 lea     ecx, [ebp+var_4]
.text:00401669                 jmp     short loc_4016A4
.text:0040166B ; ---------------------------------------------------------------------------
.text:0040166B
.text:0040166B loc_40166B:                             ; CODE XREF: sub_401577+D9↑j
.text:0040166B                 push    [ebp+iSize]     ; cchWideChar
.text:0040166E                 push    ebx             ; lpWideCharStr
.text:0040166F                 push    0FFFFFFFFh      ; cbMultiByte
.text:00401671                 push    esi             ; lpMultiByteStr
.text:00401672                 push    0               ; dwFlags
.text:00401674                 call    ds:GetConsoleOutputCP
.text:0040167A                 push    eax             ; CodePage
.text:0040167B                 call    ds:MultiByteToWideChar
.text:00401681                 test    eax, eax
.text:00401683                 jg      short loc_4016AE
.text:00401685                 push    2
.text:00401687                 call    sub_404F2C
.text:0040168C                 pop     ecx
.text:0040168D                 mov     edx, 10001h
.text:00401692                 mov     ecx, eax
.text:00401694                 call    sub_401CC0
.text:00401699                 lea     ecx, [ebp+var_4]
.text:0040169C                 call    sub_402A57
.text:004016A1                 lea     ecx, [ebp+var_C]
.text:004016A4
.text:004016A4 loc_4016A4:                             ; CODE XREF: sub_401577+F2↑j
.text:004016A4                 call    sub_402A57
.text:004016A9                 xor     eax, eax
.text:004016AB                 inc     eax
.text:004016AC                 jmp     short loc_4016F5
.text:004016AE ; ---------------------------------------------------------------------------
.text:004016AE
.text:004016AE loc_4016AE:                             ; CODE XREF: sub_401577+10C↑j
.text:004016AE                 lea     ecx, [ebp+var_4]
.text:004016B1                 lea     edi, [eax+eax]
.text:004016B4                 call    sub_402A57
.text:004016B9                 mov     esi, ebx
.text:004016BB                 mov     [ebp+var_4], esi
.text:004016BE
.text:004016BE loc_4016BE:                             ; CODE XREF: sub_401577+A2↑j
.text:004016BE                 push    0Dh
.text:004016C0                 pop     eax
.text:004016C1
.text:004016C1 loc_4016C1:                             ; CODE XREF: sub_401577+188↓j
.text:004016C1                 push    eax
.text:004016C2                 mov     edx, edi
.text:004016C4                 mov     ecx, esi
.text:004016C6                 call    sub_401701
.text:004016CB                 mov     esi, eax
.text:004016CD                 test    esi, esi
.text:004016CF                 jnz     short loc_4016E5
.text:004016D1                 push    2
.text:004016D3                 call    sub_404F2C
.text:004016D8                 pop     ecx
.text:004016D9                 mov     edx, 20001h
.text:004016DE                 mov     ecx, eax
.text:004016E0                 call    sub_401CC0
.text:004016E5
.text:004016E5 loc_4016E5:                             ; CODE XREF: sub_401577+158↑j
.text:004016E5                 lea     ecx, [ebp+var_4]
.text:004016E8                 call    sub_402A57
.text:004016ED                 xor     eax, eax
.text:004016EF                 cmp     esi, 1
.text:004016F2                 setnz   al
.text:004016F5
.text:004016F5 loc_4016F5:                             ; CODE XREF: sub_401577+135↑j
.text:004016F5                 pop     edi
.text:004016F6
.text:004016F6 loc_4016F6:                             ; CODE XREF: sub_401577+21↑j
.text:004016F6                                         ; sub_401577+65↑j
.text:004016F6                 pop     esi
.text:004016F7                 pop     ebx
.text:004016F8                 mov     esp, ebp
.text:004016FA                 pop     ebp
.text:004016FB                 retn
.text:004016FC ; ---------------------------------------------------------------------------
.text:004016FC
.text:004016FC loc_4016FC:                             ; CODE XREF: sub_401577+C0↑j
.text:004016FC                 xor     eax, eax
.text:004016FE                 inc     eax
.text:004016FF                 jmp     short loc_4016C1
.text:004016FF sub_401577      endp
.text:004016FF
.text:00401701
.text:00401701 ; =============== S U B R O U T I N E =======================================
.text:00401701
.text:00401701 ; Attributes: bp-based frame
.text:00401701
.text:00401701 sub_401701      proc near               ; CODE XREF: sub_401577+14F↑p
.text:00401701
.text:00401701 Src             = dword ptr -4
.text:00401701 uFormat         = dword ptr  8
.text:00401701
.text:00401701                 mov     edi, edi
.text:00401703                 push    ebp
.text:00401704                 mov     ebp, esp
.text:00401706                 push    ecx
.text:00401707                 push    ebx
.text:00401708                 mov     eax, ecx
.text:0040170A                 mov     [ebp+Src], eax
.text:0040170D                 push    esi
.text:0040170E                 push    edi
.text:0040170F                 mov     edi, edx
.text:00401711                 test    eax, eax
.text:00401713                 jz      loc_4017CA
.text:00401719                 test    edi, edi
.text:0040171B                 jz      loc_4017CA
.text:00401721                 push    0               ; hWndNewOwner
.text:00401723                 call    ds:OpenClipboard
.text:00401729                 test    eax, eax
.text:0040172B                 jz      loc_4017D2
.text:00401731                 call    ds:EmptyClipboard
.text:00401737                 test    eax, eax
.text:00401739                 jnz     short loc_40174B
.text:0040173B
.text:0040173B loc_40173B:                             ; CODE XREF: sub_401701+5D↓j
.text:0040173B                 call    sub_401C13
.text:00401740
.text:00401740 loc_401740:                             ; CODE XREF: sub_401701+76↓j
.text:00401740                 call    ds:CloseClipboard
.text:00401746                 jmp     loc_4017D7
.text:0040174B ; ---------------------------------------------------------------------------
.text:0040174B
.text:0040174B loc_40174B:                             ; CODE XREF: sub_401701+38↑j
.text:0040174B                 lea     ebx, [edi+0Ah]
.text:0040174E                 push    ebx             ; dwBytes
.text:0040174F                 push    2002h           ; uFlags
.text:00401754                 call    ds:GlobalAlloc
.text:0040175A                 mov     esi, eax
.text:0040175C                 test    esi, esi
.text:0040175E                 jz      short loc_40173B
.text:00401760                 push    esi             ; hMem
.text:00401761                 call    ds:GlobalLock
.text:00401767                 test    eax, eax
.text:00401769                 jnz     short loc_401779
.text:0040176B
.text:0040176B loc_40176B:                             ; CODE XREF: sub_401701+A7↓j
.text:0040176B                                         ; sub_401701+B5↓j
.text:0040176B                 call    sub_401C13
.text:00401770                 push    esi             ; hMem
.text:00401771                 call    ds:GlobalFree
.text:00401777                 jmp     short loc_401740
.text:00401779 ; ---------------------------------------------------------------------------
.text:00401779
.text:00401779 loc_401779:                             ; CODE XREF: sub_401701+68↑j
.text:00401779                 mov     ecx, eax
.text:0040177B                 test    ebx, ebx
.text:0040177D                 jz      short loc_401788
.text:0040177F
.text:0040177F loc_40177F:                             ; CODE XREF: sub_401701+85↓j
.text:0040177F                 mov     byte ptr [ecx], 0
.text:00401782                 inc     ecx
.text:00401783                 sub     ebx, 1
.text:00401786                 jnz     short loc_40177F
.text:00401788
.text:00401788 loc_401788:                             ; CODE XREF: sub_401701+7C↑j
.text:00401788                 push    edi             ; Size
.text:00401789                 push    [ebp+Src]       ; Src
.text:0040178C                 push    eax             ; void *
.text:0040178D                 call    memcpy
.text:00401792                 add     esp, 0Ch
.text:00401795                 push    esi             ; hMem
.text:00401796                 call    ds:GlobalUnlock
.text:0040179C                 test    eax, eax
.text:0040179E                 jnz     short loc_4017AA
.text:004017A0                 call    ds:GetLastError
.text:004017A6                 test    eax, eax
.text:004017A8                 jnz     short loc_40176B
.text:004017AA
.text:004017AA loc_4017AA:                             ; CODE XREF: sub_401701+9D↑j
.text:004017AA                 push    esi             ; hMem
.text:004017AB                 push    [ebp+uFormat]   ; uFormat
.text:004017AE                 call    ds:SetClipboardData
.text:004017B4                 test    eax, eax
.text:004017B6                 jz      short loc_40176B
.text:004017B8                 call    ds:CloseClipboard
.text:004017BE                 push    esi             ; hMem
.text:004017BF                 call    ds:GlobalFree
.text:004017C5                 xor     eax, eax
.text:004017C7                 inc     eax
.text:004017C8                 jmp     short loc_4017D9
.text:004017CA ; ---------------------------------------------------------------------------
.text:004017CA
.text:004017CA loc_4017CA:                             ; CODE XREF: sub_401701+12↑j
.text:004017CA                                         ; sub_401701+1A↑j
.text:004017CA                 push    57h ; 'W'       ; dwErrCode
.text:004017CC                 call    ds:SetLastError
.text:004017D2
.text:004017D2 loc_4017D2:                             ; CODE XREF: sub_401701+2A↑j
.text:004017D2                 call    sub_401C13
.text:004017D7
.text:004017D7 loc_4017D7:                             ; CODE XREF: sub_401701+45↑j
.text:004017D7                 xor     eax, eax
.text:004017D9
.text:004017D9 loc_4017D9:                             ; CODE XREF: sub_401701+C7↑j
.text:004017D9                 pop     edi
.text:004017DA                 pop     esi
.text:004017DB                 pop     ebx
.text:004017DC                 mov     esp, ebp
.text:004017DE                 pop     ebp
.text:004017DF                 retn    4
.text:004017DF sub_401701      endp
.text:004017DF
.text:004017E2
.text:004017E2 ; =============== S U B R O U T I N E =======================================
.text:004017E2
.text:004017E2 ; Attributes: bp-based frame
.text:004017E2
.text:004017E2 ; int __thiscall sub_4017E2(HANDLE hFile)
.text:004017E2 sub_4017E2      proc near               ; CODE XREF: sub_401577+6F↑p
.text:004017E2
.text:004017E2 var_10          = dword ptr -10h
.text:004017E2 var_C           = dword ptr -0Ch
.text:004017E2 NumberOfBytesRead= dword ptr -8
.text:004017E2 var_4           = dword ptr -4
.text:004017E2
.text:004017E2                 mov     edi, edi
.text:004017E4                 push    ebp
.text:004017E5                 mov     ebp, esp
.text:004017E7                 sub     esp, 10h
.text:004017EA                 push    ebx
.text:004017EB                 push    esi
.text:004017EC                 push    edi
.text:004017ED                 xor     edi, edi
.text:004017EF                 mov     [ebp+var_C], ecx
.text:004017F2                 and     [ebp+NumberOfBytesRead], edi
.text:004017F5                 mov     eax, edx
.text:004017F7                 xor     ebx, ebx
.text:004017F9                 mov     [ebp+var_10], eax
.text:004017FC                 xor     esi, esi
.text:004017FE                 mov     [ebp+var_4], edi
.text:00401801                 test    ecx, ecx
.text:00401803                 jz      loc_40189F
.text:00401809                 test    eax, eax
.text:0040180B                 jz      loc_40189F
.text:00401811
.text:00401811 loc_401811:                             ; CODE XREF: sub_4017E2+8E↓j
.text:00401811                 mov     eax, esi
.text:00401813                 sub     eax, ebx
.text:00401815                 cmp     eax, 400h
.text:0040181A                 jnb     short loc_40184A
.text:0040181C                 add     esi, 400h
.text:00401822                 test    edi, edi
.text:00401824                 jnz     short loc_401835
.text:00401826                 lea     ecx, [esi+0Ah]
.text:00401829                 call    sub_402B01
.text:0040182E                 mov     edi, eax
.text:00401830                 mov     [ebp+var_4], edi
.text:00401833                 jmp     short loc_401847
.text:00401835 ; ---------------------------------------------------------------------------
.text:00401835
.text:00401835 loc_401835:                             ; CODE XREF: sub_4017E2+42↑j
.text:00401835                 lea     edx, [esi+0Ah]
.text:00401838                 lea     ecx, [ebp+var_4]
.text:0040183B                 call    sub_402BA1
.text:00401840                 test    eax, eax
.text:00401842                 jz      short loc_401872
.text:00401844                 mov     edi, [ebp+var_4]
.text:00401847
.text:00401847 loc_401847:                             ; CODE XREF: sub_4017E2+51↑j
.text:00401847                 mov     ecx, [ebp+var_C]
.text:0040184A
.text:0040184A loc_40184A:                             ; CODE XREF: sub_4017E2+38↑j
.text:0040184A                 push    0               ; lpOverlapped
.text:0040184C                 lea     eax, [ebp+NumberOfBytesRead]
.text:0040184F                 push    eax             ; lpNumberOfBytesRead
.text:00401850                 mov     eax, esi
.text:00401852                 sub     eax, ebx
.text:00401854                 push    eax             ; nNumberOfBytesToRead
.text:00401855                 lea     eax, [ebx+edi]
.text:00401858                 push    eax             ; lpBuffer
.text:00401859                 push    ecx             ; hFile
.text:0040185A                 call    ds:ReadFile
.text:00401860                 test    eax, eax
.text:00401862                 jz      short loc_40187E
.text:00401864                 add     ebx, [ebp+NumberOfBytesRead]
.text:00401867                 cmp     [ebp+NumberOfBytesRead], 0
.text:0040186B                 jz      short loc_40187E
.text:0040186D                 mov     ecx, [ebp+var_C]
.text:00401870                 jmp     short loc_401811
.text:00401872 ; ---------------------------------------------------------------------------
.text:00401872
.text:00401872 loc_401872:                             ; CODE XREF: sub_4017E2+60↑j
.text:00401872                 lea     ecx, [ebp+var_4]
.text:00401875                 call    sub_402A57
.text:0040187A                 push    0Eh
.text:0040187C                 jmp     short loc_4018A1
.text:0040187E ; ---------------------------------------------------------------------------
.text:0040187E
.text:0040187E loc_40187E:                             ; CODE XREF: sub_4017E2+80↑j
.text:0040187E                                         ; sub_4017E2+89↑j
.text:0040187E                 mov     eax, [ebp+var_10]
.text:00401881                 mov     [eax], ebx
.text:00401883                 lea     eax, [ebx+edi]
.text:00401886                 sub     esi, ebx
.text:00401888                 jz      short loc_401893
.text:0040188A
.text:0040188A loc_40188A:                             ; CODE XREF: sub_4017E2+AF↓j
.text:0040188A                 mov     byte ptr [eax], 0
.text:0040188D                 inc     eax
.text:0040188E                 sub     esi, 1
.text:00401891                 jnz     short loc_40188A
.text:00401893
.text:00401893 loc_401893:                             ; CODE XREF: sub_4017E2+A6↑j
.text:00401893                 push    0               ; dwErrCode
.text:00401895                 call    ds:SetLastError
.text:0040189B                 mov     eax, edi
.text:0040189D                 jmp     short loc_4018A9
.text:0040189F ; ---------------------------------------------------------------------------
.text:0040189F
.text:0040189F loc_40189F:                             ; CODE XREF: sub_4017E2+21↑j
.text:0040189F                                         ; sub_4017E2+29↑j
.text:0040189F                 push    57h ; 'W'       ; dwErrCode
.text:004018A1
.text:004018A1 loc_4018A1:                             ; CODE XREF: sub_4017E2+9A↑j
.text:004018A1                 call    ds:SetLastError
.text:004018A7                 xor     eax, eax
.text:004018A9
.text:004018A9 loc_4018A9:                             ; CODE XREF: sub_4017E2+BB↑j
.text:004018A9                 pop     edi
.text:004018AA                 pop     esi
.text:004018AB                 pop     ebx
.text:004018AC                 mov     esp, ebp
.text:004018AE                 pop     ebp
.text:004018AF                 retn
.text:004018AF sub_4017E2      endp
.text:004018AF
.text:004018B0
.text:004018B0 ; =============== S U B R O U T I N E =======================================
.text:004018B0
.text:004018B0
.text:004018B0 sub_4018B0      proc near               ; CODE XREF: sub_4019AD:loc_4019D0↓p
.text:004018B0                                         ; sub_401B25:loc_401B4D↓p ...
.text:004018B0                 mov     edi, edi
.text:004018B2                 push    esi
.text:004018B3                 xor     esi, esi
.text:004018B5                 inc     esi
.text:004018B6                 cmp     dword_405470, esi
.text:004018BC                 jnz     short loc_4018E6
.text:004018BE                 mov     ecx, dword_405468
.text:004018C4                 call    sub_4041E0
.text:004018C9                 test    eax, eax
.text:004018CB                 jnz     short loc_4018E2
.text:004018CD
.text:004018CD loc_4018CD:                             ; CODE XREF: sub_4018B0+3D↓j
.text:004018CD                 call    ds:GetLastError
.text:004018D3                 test    eax, eax
.text:004018D5                 jnz     loc_40195D
.text:004018DB                 push    42Bh
.text:004018E0                 jmp     short loc_401957
.text:004018E2 ; ---------------------------------------------------------------------------
.text:004018E2
.text:004018E2 loc_4018E2:                             ; CODE XREF: sub_4018B0+1B↑j
.text:004018E2                 mov     eax, esi
.text:004018E4                 pop     esi
.text:004018E5                 retn
.text:004018E6 ; ---------------------------------------------------------------------------
.text:004018E6
.text:004018E6 loc_4018E6:                             ; CODE XREF: sub_4018B0+C↑j
.text:004018E6                 cmp     dword_405468, 0
.text:004018ED                 jnz     short loc_4018CD
.text:004018EF                 call    sub_4041F0
.text:004018F4                 mov     ecx, eax
.text:004018F6                 mov     dword_405468, ecx
.text:004018FC                 call    sub_4041E0
.text:00401901                 test    eax, eax
.text:00401903                 jz      short loc_40194B
.text:00401905                 push    ecx
.text:00401906                 mov     edx, offset dword_401124
.text:0040190B                 call    sub_404277
.text:00401910                 test    eax, eax
.text:00401912                 jnz     short loc_40194B
.text:00401914                 call    sub_404412
.text:00401919                 cmp     eax, esi
.text:0040191B                 jnz     short loc_40194B
.text:0040191D                 call    sub_404412
.text:00401922                 cmp     eax, 2
.text:00401925                 jnz     short loc_40194B
.text:00401927                 call    sub_404412
.text:0040192C                 cmp     eax, 3
.text:0040192F                 jnz     short loc_40194B
.text:00401931                 push    0               ; LangId
.text:00401933                 mov     dword_405470, esi
.text:00401939                 call    ds:SetThreadUILanguage
.text:0040193F                 xor     ecx, ecx
.text:00401941                 test    ax, ax
.text:00401944                 pop     esi
.text:00401945                 setnz   cl
.text:00401948                 mov     eax, ecx
.text:0040194A                 retn
.text:0040194B ; ---------------------------------------------------------------------------
.text:0040194B
.text:0040194B loc_40194B:                             ; CODE XREF: sub_4018B0+53↑j
.text:0040194B                                         ; sub_4018B0+62↑j ...
.text:0040194B                 call    ds:GetLastError
.text:00401951                 test    eax, eax
.text:00401953                 jnz     short loc_40195D
.text:00401955                 push    8               ; dwErrCode
.text:00401957
.text:00401957 loc_401957:                             ; CODE XREF: sub_4018B0+30↑j
.text:00401957                 call    ds:SetLastError
.text:0040195D
.text:0040195D loc_40195D:                             ; CODE XREF: sub_4018B0+25↑j
.text:0040195D                                         ; sub_4018B0+A3↑j
.text:0040195D                 xor     eax, eax
.text:0040195F                 pop     esi
.text:00401960                 retn
.text:00401960 sub_4018B0      endp
.text:00401960
.text:00401961
.text:00401961 ; =============== S U B R O U T I N E =======================================
.text:00401961
.text:00401961
.text:00401961 sub_401961      proc near               ; CODE XREF: PrepareUsageHelperText(x)+23D↓p
.text:00401961                                         ; sub_403C26+1F↓p
.text:00401961                 cmp     dword_405470, 0
.text:00401968                 push    esi
.text:00401969                 mov     esi, ecx
.text:0040196B                 jz      short loc_4019A9
.text:0040196D                 push    3
.text:0040196F                 pop     edx
.text:00401970                 call    sub_404517
.text:00401975                 cmp     eax, esi
.text:00401977                 jbe     short loc_4019A9
.text:00401979                 push    esi
.text:0040197A                 call    sub_4046BD
.text:0040197F                 test    eax, eax
.text:00401981                 jz      short loc_4019A9
.text:00401983                 push    esi
.text:00401984                 call    sub_404589
.text:00401989                 mov     esi, eax
.text:0040198B                 test    esi, esi
.text:0040198D                 jz      short loc_4019A9
.text:0040198F                 push    7               ; Size
.text:00401991                 push    offset aBuffer  ; "BUFFER"
.text:00401996                 push    esi             ; Buf1
.text:00401997                 call    ds:_memicmp
.text:0040199D                 add     esp, 0Ch
.text:004019A0                 test    eax, eax
.text:004019A2                 jnz     short loc_4019A9
.text:004019A4                 mov     eax, [esi+0Ch]
.text:004019A7                 pop     esi
.text:004019A8                 retn
.text:004019A9 ; ---------------------------------------------------------------------------
.text:004019A9
.text:004019A9 loc_4019A9:                             ; CODE XREF: sub_401961+A↑j
.text:004019A9                                         ; sub_401961+16↑j ...
.text:004019A9                 xor     eax, eax
.text:004019AB                 pop     esi
.text:004019AC                 retn
.text:004019AC sub_401961      endp
.text:004019AC
.text:004019AD
.text:004019AD ; =============== S U B R O U T I N E =======================================
.text:004019AD
.text:004019AD ; Attributes: bp-based frame
.text:004019AD
.text:004019AD sub_4019AD      proc near               ; CODE XREF: sub_401B84+41↓p
.text:004019AD                                         ; sub_401EB3+84↓p ...
.text:004019AD
.text:004019AD var_8           = dword ptr -8
.text:004019AD var_4           = dword ptr -4
.text:004019AD arg_0           = dword ptr  8
.text:004019AD arg_4           = dword ptr  0Ch
.text:004019AD
.text:004019AD                 mov     edi, edi
.text:004019AF                 push    ebp
.text:004019B0                 mov     ebp, esp
.text:004019B2                 push    ecx
.text:004019B3                 push    ecx
.text:004019B4                 push    ebx
.text:004019B5                 push    esi
.text:004019B6                 mov     ebx, edx
.text:004019B8                 mov     esi, ecx
.text:004019BA                 mov     [ebp+var_8], esi
.text:004019BD                 push    edi
.text:004019BE                 mov     edi, [ebp+arg_0]
.text:004019C1                 test    ebx, ebx
.text:004019C3                 jnz     short loc_4019D0
.text:004019C5                 test    edi, edi
.text:004019C7                 jnz     short loc_4019D0
.text:004019C9
.text:004019C9 loc_4019C9:                             ; CODE XREF: sub_4019AD+2A↓j
.text:004019C9                                         ; sub_4019AD+4B↓j ...
.text:004019C9                 xor     eax, eax
.text:004019CB                 jmp     loc_401AFC
.text:004019D0 ; ---------------------------------------------------------------------------
.text:004019D0
.text:004019D0 loc_4019D0:                             ; CODE XREF: sub_4019AD+16↑j
.text:004019D0                                         ; sub_4019AD+1A↑j
.text:004019D0                 call    sub_4018B0
.text:004019D5                 test    eax, eax
.text:004019D7                 jz      short loc_4019C9
.text:004019D9                 push    3
.text:004019DB                 pop     edx
.text:004019DC                 call    sub_404517
.text:004019E1                 mov     [ebp+var_4], eax
.text:004019E4                 cmp     eax, esi
.text:004019E6                 ja      short loc_401A0C
.text:004019E8                 mov     ecx, dword_405468
.text:004019EE                 push    3
.text:004019F0                 pop     edx
.text:004019F1                 call    sub_40454A
.text:004019F6                 test    eax, eax
.text:004019F8                 jz      short loc_4019C9
.text:004019FA                 mov     edx, esi
.text:004019FC                 mov     ecx, eax
.text:004019FE                 sub     edx, [ebp+var_4]
.text:00401A01                 inc     edx
.text:00401A02                 call    sub_40448B
.text:00401A07                 cmp     eax, 0FFFFFFFFh
.text:00401A0A                 jz      short loc_4019C9
.text:00401A0C
.text:00401A0C loc_401A0C:                             ; CODE XREF: sub_4019AD+39↑j
.text:00401A0C                 push    esi
.text:00401A0D                 call    sub_4046BD
.text:00401A12                 test    eax, eax
.text:00401A14                 jz      short loc_401A8E
.text:00401A16                 push    esi
.text:00401A17                 call    sub_404589
.text:00401A1C                 mov     esi, eax
.text:00401A1E                 test    esi, esi
.text:00401A20                 jz      short loc_4019C9
.text:00401A22
.text:00401A22 loc_401A22:                             ; CODE XREF: sub_4019AD+117↓j
.text:00401A22                 push    7               ; Size
.text:00401A24                 push    offset aBuffer  ; "BUFFER"
.text:00401A29                 push    esi             ; Buf1
.text:00401A2A                 call    ds:_memicmp
.text:00401A30                 add     esp, 0Ch
.text:00401A33                 test    eax, eax
.text:00401A35                 jnz     short loc_4019C9
.text:00401A37                 test    ebx, ebx
.text:00401A39                 jz      short loc_401A45
.text:00401A3B                 mov     ecx, ebx        ; lpString
.text:00401A3D                 call    sub_40267F
.text:00401A42                 lea     edi, [eax+1]
.text:00401A45
.text:00401A45 loc_401A45:                             ; CODE XREF: sub_4019AD+8C↑j
.text:00401A45                 mov     ecx, [esi+8]
.text:00401A48                 cmp     edi, ecx
.text:00401A4A                 ja      short loc_401A5B
.text:00401A4C                 cmp     edi, 100h
.text:00401A52                 jbe     short loc_401A75
.text:00401A54                 lea     eax, [edi+edi]
.text:00401A57                 cmp     eax, ecx
.text:00401A59                 jnb     short loc_401A75
.text:00401A5B
.text:00401A5B loc_401A5B:                             ; CODE XREF: sub_4019AD+9D↑j
.text:00401A5B                 test    ecx, ecx
.text:00401A5D                 jnz     short loc_401AD7
.text:00401A5F                 lea     ecx, [edi+edi]
.text:00401A62                 call    sub_402B01
.text:00401A67                 mov     [esi+0Ch], eax
.text:00401A6A
.text:00401A6A loc_401A6A:                             ; CODE XREF: sub_4019AD+135↓j
.text:00401A6A                 test    eax, eax
.text:00401A6C                 jz      loc_4019C9
.text:00401A72                 mov     [esi+8], edi
.text:00401A75
.text:00401A75 loc_401A75:                             ; CODE XREF: sub_4019AD+A5↑j
.text:00401A75                                         ; sub_4019AD+AC↑j
.text:00401A75                 mov     ecx, [esi+0Ch]
.text:00401A78                 test    ecx, ecx
.text:00401A7A                 jz      loc_4019C9
.text:00401A80                 test    ebx, ebx
.text:00401A82                 jz      short loc_401AE4
.text:00401A84                 push    edi
.text:00401A85                 mov     edx, ebx
.text:00401A87                 call    sub_4025EA
.text:00401A8C                 jmp     short loc_401AF9
.text:00401A8E ; ---------------------------------------------------------------------------
.text:00401A8E
.text:00401A8E loc_401A8E:                             ; CODE XREF: sub_4019AD+67↑j
.text:00401A8E                 push    10h
.text:00401A90                 pop     ecx
.text:00401A91                 call    sub_402B01
.text:00401A96                 mov     esi, eax
.text:00401A98                 mov     [ebp+var_4], esi
.text:00401A9B                 test    esi, esi
.text:00401A9D                 jz      loc_4019C9
.text:00401AA3                 and     dword ptr [esi+8], 0
.text:00401AA7                 mov     edx, offset aBuffer ; "BUFFER"
.text:00401AAC                 and     dword ptr [esi+0Ch], 0
.text:00401AB0                 mov     ecx, esi
.text:00401AB2                 push    7
.text:00401AB4                 call    sub_40258C
.text:00401AB9                 push    esi
.text:00401ABA                 push    [ebp+var_8]
.text:00401ABD                 call    sub_404658
.text:00401AC2                 test    eax, eax
.text:00401AC4                 jnz     loc_401A22
.text:00401ACA                 lea     ecx, [ebp+var_4]
.text:00401ACD                 call    sub_402A57
.text:00401AD2                 jmp     loc_4019C9
.text:00401AD7 ; ---------------------------------------------------------------------------
.text:00401AD7
.text:00401AD7 loc_401AD7:                             ; CODE XREF: sub_4019AD+B0↑j
.text:00401AD7                 lea     edx, [edi+edi]
.text:00401ADA                 lea     ecx, [esi+0Ch]
.text:00401ADD                 call    sub_402BA1
.text:00401AE2                 jmp     short loc_401A6A
.text:00401AE4 ; ---------------------------------------------------------------------------
.text:00401AE4
.text:00401AE4 loc_401AE4:                             ; CODE XREF: sub_4019AD+D5↑j
.text:00401AE4                 cmp     [ebp+arg_4], 1
.text:00401AE8                 jnz     short loc_401AF9
.text:00401AEA                 lea     eax, [edi+edi]
.text:00401AED                 push    eax             ; Size
.text:00401AEE                 push    0               ; Val
.text:00401AF0                 push    ecx             ; void *
.text:00401AF1                 call    memset
.text:00401AF6                 add     esp, 0Ch
.text:00401AF9
.text:00401AF9 loc_401AF9:                             ; CODE XREF: sub_4019AD+DF↑j
.text:00401AF9                                         ; sub_4019AD+13B↑j
.text:00401AF9                 mov     eax, [esi+0Ch]
.text:00401AFC
.text:00401AFC loc_401AFC:                             ; CODE XREF: sub_4019AD+1E↑j
.text:00401AFC                 pop     edi
.text:00401AFD                 pop     esi
.text:00401AFE                 pop     ebx
.text:00401AFF                 mov     esp, ebp
.text:00401B01                 pop     ebp
.text:00401B02                 retn    8
.text:00401B02 sub_4019AD      endp
.text:00401B02
.text:00401B05
.text:00401B05 ; =============== S U B R O U T I N E =======================================
.text:00401B05
.text:00401B05
.text:00401B05 sub_401B05      proc near               ; CODE XREF: sub_401C9A:loc_401CAA↓p
.text:00401B05                                         ; sub_401CC0:loc_401D29↓p ...
.text:00401B05                 mov     ecx, dword_405468
.text:00401B0B                 test    ecx, ecx
.text:00401B0D                 jz      short loc_401B1F
.text:00401B0F                 call    sub_4041E0
.text:00401B14                 test    eax, eax
.text:00401B16                 jz      short loc_401B1F
.text:00401B18                 xor     edx, edx
.text:00401B1A                 jmp     sub_40456E
.text:00401B1F ; ---------------------------------------------------------------------------
.text:00401B1F
.text:00401B1F loc_401B1F:                             ; CODE XREF: sub_401B05+8↑j
.text:00401B1F                                         ; sub_401B05+11↑j
.text:00401B1F                 mov     eax, offset dword_401124
.text:00401B24                 retn
.text:00401B24 sub_401B05      endp
.text:00401B24
.text:00401B25
.text:00401B25 ; =============== S U B R O U T I N E =======================================
.text:00401B25
.text:00401B25
.text:00401B25 sub_401B25      proc near               ; CODE XREF: sub_401B84+28↓p
.text:00401B25                                         ; sub_401B84+72↓j ...
.text:00401B25                 mov     edi, edi
.text:00401B27                 push    esi
.text:00401B28                 push    edi
.text:00401B29                 mov     esi, ecx
.text:00401B2B                 call    ds:GetLastError
.text:00401B31                 mov     edi, eax
.text:00401B33                 test    esi, esi
.text:00401B35                 jnz     short loc_401B4D
.text:00401B37                 call    ds:GetLastError
.text:00401B3D                 test    eax, eax
.text:00401B3F                 jnz     short loc_401B49
.text:00401B41                 push    57h ; 'W'       ; dwErrCode
.text:00401B43
.text:00401B43 loc_401B43:                             ; CODE XREF: sub_401B25+50↓j
.text:00401B43                 call    ds:SetLastError
.text:00401B49
.text:00401B49 loc_401B49:                             ; CODE XREF: sub_401B25+1A↑j
.text:00401B49                                         ; sub_401B25+2F↓j ...
.text:00401B49                 xor     eax, eax
.text:00401B4B                 jmp     short loc_401B81
.text:00401B4D ; ---------------------------------------------------------------------------
.text:00401B4D
.text:00401B4D loc_401B4D:                             ; CODE XREF: sub_401B25+10↑j
.text:00401B4D                 call    sub_4018B0
.text:00401B52                 test    eax, eax
.text:00401B54                 jz      short loc_401B49
.text:00401B56                 push    ecx             ; int
.text:00401B57                 mov     ecx, dword_405468
.text:00401B5D                 xor     edx, edx
.text:00401B5F                 push    esi             ; lpString
.text:00401B60                 call    sub_4045BE
.text:00401B65                 test    eax, eax
.text:00401B67                 jnz     short loc_401B77
.text:00401B69                 call    ds:GetLastError
.text:00401B6F                 test    eax, eax
.text:00401B71                 jnz     short loc_401B49
.text:00401B73                 push    8
.text:00401B75                 jmp     short loc_401B43
.text:00401B77 ; ---------------------------------------------------------------------------
.text:00401B77
.text:00401B77 loc_401B77:                             ; CODE XREF: sub_401B25+42↑j
.text:00401B77                 push    edi             ; dwErrCode
.text:00401B78                 call    ds:SetLastError
.text:00401B7E                 xor     eax, eax
.text:00401B80                 inc     eax
.text:00401B81
.text:00401B81 loc_401B81:                             ; CODE XREF: sub_401B25+26↑j
.text:00401B81                 pop     edi
.text:00401B82                 pop     esi
.text:00401B83                 retn
.text:00401B83 sub_401B25      endp
.text:00401B83
.text:00401B84
.text:00401B84 ; =============== S U B R O U T I N E =======================================
.text:00401B84
.text:00401B84 ; Attributes: bp-based frame
.text:00401B84
.text:00401B84 ; int __cdecl sub_401B84(int, wchar_t *Format, char Args)
.text:00401B84 sub_401B84      proc near               ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+AD↓p
.text:00401B84                                         ; ParseAndSaveOptionValue(x,x,x)+1CE↓p ...
.text:00401B84
.text:00401B84 arg_0           = dword ptr  8
.text:00401B84 Format          = dword ptr  0Ch
.text:00401B84 Args            = byte ptr  10h
.text:00401B84
.text:00401B84                 mov     edi, edi
.text:00401B86                 push    ebp
.text:00401B87                 mov     ebp, esp
.text:00401B89                 mov     ecx, [ebp+Format]
.text:00401B8C                 push    esi
.text:00401B8D                 xor     esi, esi
.text:00401B8F                 test    ecx, ecx
.text:00401B91                 jnz     short loc_401BA7
.text:00401B93                 call    ds:GetLastError
.text:00401B99                 test    eax, eax
.text:00401B9B                 jnz     short loc_401C0E
.text:00401B9D                 push    57h ; 'W'       ; dwErrCode
.text:00401B9F                 call    ds:SetLastError
.text:00401BA5                 jmp     short loc_401C0E
.text:00401BA7 ; ---------------------------------------------------------------------------
.text:00401BA7
.text:00401BA7 loc_401BA7:                             ; CODE XREF: sub_401B84+D↑j
.text:00401BA7                 cmp     [ebp+arg_0], esi
.text:00401BAA                 jnz     short loc_401BB6
.text:00401BAC                 call    sub_401B25
.text:00401BB1                 xor     eax, eax
.text:00401BB3                 inc     eax
.text:00401BB4                 jmp     short loc_401C10
.text:00401BB6 ; ---------------------------------------------------------------------------
.text:00401BB6
.text:00401BB6 loc_401BB6:                             ; CODE XREF: sub_401B84+26↑j
.text:00401BB6                 push    edi
.text:00401BB7
.text:00401BB7 loc_401BB7:                             ; CODE XREF: sub_401B84+61↓j
.text:00401BB7                 push    1
.text:00401BB9                 add     esi, 100h
.text:00401BBF                 xor     edx, edx
.text:00401BC1                 push    esi
.text:00401BC2                 push    5
.text:00401BC4                 pop     ecx
.text:00401BC5                 call    sub_4019AD
.text:00401BCA                 mov     edi, eax
.text:00401BCC                 test    edi, edi
.text:00401BCE                 jz      short loc_401BFB
.text:00401BD0                 lea     eax, [ebp+Args]
.text:00401BD3                 mov     edx, esi
.text:00401BD5                 push    eax             ; Args
.text:00401BD6                 push    [ebp+Format]    ; Format
.text:00401BD9                 mov     ecx, edi        ; int
.text:00401BDB                 call    ?StringCchVPrintfW@@YGJPAGIPBGPAD@Z ; StringCchVPrintfW(ushort *,uint,ushort const *,char *)
.text:00401BE0                 cmp     eax, 8007007Ah
.text:00401BE5                 jz      short loc_401BB7
.text:00401BE7                 test    eax, eax
.text:00401BE9                 jns     short loc_401BF1
.text:00401BEB                 movzx   eax, ax
.text:00401BEE                 push    eax
.text:00401BEF                 jmp     short loc_401C07
.text:00401BF1 ; ---------------------------------------------------------------------------
.text:00401BF1
.text:00401BF1 loc_401BF1:                             ; CODE XREF: sub_401B84+65↑j
.text:00401BF1                 mov     ecx, edi
.text:00401BF3                 pop     edi
.text:00401BF4                 pop     esi
.text:00401BF5                 pop     ebp
.text:00401BF6                 jmp     sub_401B25
.text:00401BFB ; ---------------------------------------------------------------------------
.text:00401BFB
.text:00401BFB loc_401BFB:                             ; CODE XREF: sub_401B84+4A↑j
.text:00401BFB                 call    ds:GetLastError
.text:00401C01                 test    eax, eax
.text:00401C03                 jnz     short loc_401C0D
.text:00401C05                 push    8               ; dwErrCode
.text:00401C07
.text:00401C07 loc_401C07:                             ; CODE XREF: sub_401B84+6B↑j
.text:00401C07                 call    ds:SetLastError
.text:00401C0D
.text:00401C0D loc_401C0D:                             ; CODE XREF: sub_401B84+7F↑j
.text:00401C0D                 pop     edi
.text:00401C0E
.text:00401C0E loc_401C0E:                             ; CODE XREF: sub_401B84+17↑j
.text:00401C0E                                         ; sub_401B84+21↑j
.text:00401C0E                 xor     eax, eax
.text:00401C10
.text:00401C10 loc_401C10:                             ; CODE XREF: sub_401B84+30↑j
.text:00401C10                 pop     esi
.text:00401C11                 pop     ebp
.text:00401C12                 retn
.text:00401C12 sub_401B84      endp
.text:00401C12
.text:00401C13
.text:00401C13 ; =============== S U B R O U T I N E =======================================
.text:00401C13
.text:00401C13 ; Attributes: bp-based frame
.text:00401C13
.text:00401C13 sub_401C13      proc near               ; CODE XREF: sub_401701:loc_40173B↑p
.text:00401C13                                         ; sub_401701:loc_40176B↑p ...
.text:00401C13
.text:00401C13 Buffer          = word ptr -4
.text:00401C13
.text:00401C13                 mov     edi, edi
.text:00401C15                 push    ebp
.text:00401C16                 mov     ebp, esp
.text:00401C18                 push    ecx
.text:00401C19                 push    esi
.text:00401C1A                 xor     esi, esi
.text:00401C1C                 mov     dword ptr [ebp+Buffer], esi
.text:00401C1F                 call    sub_4018B0
.text:00401C24                 test    eax, eax
.text:00401C26                 jz      short loc_401C93
.text:00401C28                 push    esi             ; Arguments
.text:00401C29                 push    esi             ; nSize
.text:00401C2A                 lea     eax, [ebp+Buffer]
.text:00401C2D                 push    eax             ; lpBuffer
.text:00401C2E                 push    esi             ; dwLanguageId
.text:00401C2F                 call    ds:GetLastError
.text:00401C35                 push    eax             ; dwMessageId
.text:00401C36                 push    esi             ; lpSource
.text:00401C37                 push    1300h           ; dwFlags
.text:00401C3C                 call    ds:FormatMessageW
.text:00401C42                 test    eax, eax
.text:00401C44                 jz      short loc_401C61
.text:00401C46                 mov     ecx, dword ptr [ebp+Buffer]
.text:00401C49                 test    ecx, ecx
.text:00401C4B                 jz      short loc_401C81
.text:00401C4D                 call    sub_401B25
.text:00401C52                 push    dword ptr [ebp+Buffer] ; hMem
.text:00401C55                 mov     esi, eax
.text:00401C57                 call    ds:LocalFree
.text:00401C5D                 mov     eax, esi
.text:00401C5F                 jmp     short loc_401C95
.text:00401C61 ; ---------------------------------------------------------------------------
.text:00401C61
.text:00401C61 loc_401C61:                             ; CODE XREF: sub_401C13+31↑j
.text:00401C61                 cmp     dword ptr [ebp+Buffer], esi
.text:00401C64                 jz      short loc_401C81
.text:00401C66                 push    dword ptr [ebp+Buffer] ; hMem
.text:00401C69                 call    ds:LocalFree
.text:00401C6F                 call    ds:GetLastError
.text:00401C75                 test    eax, eax
.text:00401C77                 jnz     short loc_401C81
.text:00401C79                 push    8               ; dwErrCode
.text:00401C7B                 call    ds:SetLastError
.text:00401C81
.text:00401C81 loc_401C81:                             ; CODE XREF: sub_401C13+38↑j
.text:00401C81                                         ; sub_401C13+51↑j ...
.text:00401C81                 call    ds:GetLastError
.text:00401C87                 test    eax, eax
.text:00401C89                 jnz     short loc_401C93
.text:00401C8B                 push    8               ; dwErrCode
.text:00401C8D                 call    ds:SetLastError
.text:00401C93
.text:00401C93 loc_401C93:                             ; CODE XREF: sub_401C13+13↑j
.text:00401C93                                         ; sub_401C13+76↑j
.text:00401C93                 xor     eax, eax
.text:00401C95
.text:00401C95 loc_401C95:                             ; CODE XREF: sub_401C13+4C↑j
.text:00401C95                 pop     esi
.text:00401C96                 mov     esp, ebp
.text:00401C98                 pop     ebp
.text:00401C99                 retn
.text:00401C99 sub_401C13      endp
.text:00401C99
.text:00401C9A
.text:00401C9A ; =============== S U B R O U T I N E =======================================
.text:00401C9A
.text:00401C9A
.text:00401C9A sub_401C9A      proc near               ; CODE XREF: ShowMessage(x,x)+F7↓p
.text:00401C9A                 mov     edi, edi
.text:00401C9C                 push    esi
.text:00401C9D                 mov     esi, ecx
.text:00401C9F                 call    sub_401C13
.text:00401CA4                 test    eax, eax
.text:00401CA6                 jnz     short loc_401CAA
.text:00401CA8                 pop     esi
.text:00401CA9                 retn
.text:00401CAA ; ---------------------------------------------------------------------------
.text:00401CAA
.text:00401CAA loc_401CAA:                             ; CODE XREF: sub_401C9A+C↑j
.text:00401CAA                 call    sub_401B05
.text:00401CAF                 mov     edx, eax        ; lpString
.text:00401CB1                 mov     ecx, esi        ; Stream
.text:00401CB3                 call    _ShowMessage@8  ; ShowMessage(x,x)
.text:00401CB8                 neg     eax
.text:00401CBA                 pop     esi
.text:00401CBB                 sbb     eax, eax
.text:00401CBD                 neg     eax
.text:00401CBF                 retn
.text:00401CBF sub_401C9A      endp
.text:00401CBF
.text:00401CC0
.text:00401CC0 ; =============== S U B R O U T I N E =======================================
.text:00401CC0
.text:00401CC0
.text:00401CC0 sub_401CC0      proc near               ; CODE XREF: sub_401440+8E↑p
.text:00401CC0                                         ; sub_401440+C4↑p ...
.text:00401CC0                 mov     edi, edi
.text:00401CC2                 push    ebx
.text:00401CC3                 push    esi
.text:00401CC4                 mov     esi, ecx
.text:00401CC6                 mov     ebx, edx
.text:00401CC8                 test    esi, esi
.text:00401CCA                 jz      short loc_401D3C
.text:00401CCC                 test    ebx, 0F0000h
.text:00401CD2                 jz      short loc_401D3C
.text:00401CD4                 test    ebx, 10000h
.text:00401CDA                 jz      short loc_401CE1
.text:00401CDC                 call    sub_401C13
.text:00401CE1
.text:00401CE1 loc_401CE1:                             ; CODE XREF: sub_401CC0+1A↑j
.text:00401CE1                 push    edi
.text:00401CE2                 xor     edi, edi
.text:00401CE4                 inc     edi
.text:00401CE5                 test    bl, 1
.text:00401CE8                 jz      short loc_401CF1
.text:00401CEA                 mov     ecx, 1389h
.text:00401CEF                 jmp     short loc_401D13
.text:00401CF1 ; ---------------------------------------------------------------------------
.text:00401CF1
.text:00401CF1 loc_401CF1:                             ; CODE XREF: sub_401CC0+28↑j
.text:00401CF1                 test    bl, 4
.text:00401CF4                 jz      short loc_401CFD
.text:00401CF6                 mov     ecx, 138Ah
.text:00401CFB                 jmp     short loc_401D13
.text:00401CFD ; ---------------------------------------------------------------------------
.text:00401CFD
.text:00401CFD loc_401CFD:                             ; CODE XREF: sub_401CC0+34↑j
.text:00401CFD                 test    bl, 2
.text:00401D00                 jz      short loc_401D09
.text:00401D02                 mov     ecx, 138Ch
.text:00401D07                 jmp     short loc_401D13
.text:00401D09 ; ---------------------------------------------------------------------------
.text:00401D09
.text:00401D09 loc_401D09:                             ; CODE XREF: sub_401CC0+40↑j
.text:00401D09                 test    bl, 8
.text:00401D0C                 jz      short loc_401D29
.text:00401D0E                 mov     ecx, 138Bh
.text:00401D13
.text:00401D13 loc_401D13:                             ; CODE XREF: sub_401CC0+2F↑j
.text:00401D13                                         ; sub_401CC0+3B↑j ...
.text:00401D13                 call    sub_401E93
.text:00401D18                 push    eax             ; char
.text:00401D19                 push    offset aS       ; "%s "
.text:00401D1E                 push    edi             ; int
.text:00401D1F                 push    edi             ; int
.text:00401D20                 push    esi             ; Stream
.text:00401D21                 call    sub_402929
.text:00401D26                 add     esp, 14h
.text:00401D29
.text:00401D29 loc_401D29:                             ; CODE XREF: sub_401CC0+4C↑j
.text:00401D29                 call    sub_401B05
.text:00401D2E                 mov     edx, eax        ; lpString
.text:00401D30                 mov     ecx, esi        ; Stream
.text:00401D32                 call    _ShowMessage@8  ; ShowMessage(x,x)
.text:00401D37                 mov     eax, edi
.text:00401D39                 pop     edi
.text:00401D3A                 jmp     short loc_401D50
.text:00401D3C ; ---------------------------------------------------------------------------
.text:00401D3C
.text:00401D3C loc_401D3C:                             ; CODE XREF: sub_401CC0+A↑j
.text:00401D3C                                         ; sub_401CC0+12↑j
.text:00401D3C                 call    ds:GetLastError
.text:00401D42                 test    eax, eax
.text:00401D44                 jnz     short loc_401D4E
.text:00401D46                 push    57h ; 'W'       ; dwErrCode
.text:00401D48                 call    ds:SetLastError
.text:00401D4E
.text:00401D4E loc_401D4E:                             ; CODE XREF: sub_401CC0+84↑j
.text:00401D4E                 xor     eax, eax
.text:00401D50
.text:00401D50 loc_401D50:                             ; CODE XREF: sub_401CC0+7A↑j
.text:00401D50                 pop     esi
.text:00401D51                 pop     ebx
.text:00401D52                 retn
.text:00401D52 sub_401CC0      endp
.text:00401D52
.text:00401D53
.text:00401D53 ; =============== S U B R O U T I N E =======================================
.text:00401D53
.text:00401D53 ; Attributes: bp-based frame
.text:00401D53
.text:00401D53 sub_401D53      proc near               ; CODE XREF: sub_401440:loc_40155F↑p
.text:00401D53                                         ; ShowMessage(x,x)+FC↓p
.text:00401D53
.text:00401D53 var_4           = dword ptr -4
.text:00401D53
.text:00401D53                 mov     edi, edi
.text:00401D55                 push    ebp
.text:00401D56                 mov     ebp, esp
.text:00401D58                 push    ecx
.text:00401D59                 mov     ecx, dword_405468
.text:00401D5F                 call    sub_4041E0
.text:00401D64                 cmp     eax, 1
.text:00401D67                 jnz     short loc_401DDF
.text:00401D69                 push    edi
.text:00401D6A                 push    3
.text:00401D6C                 pop     edx
.text:00401D6D                 call    sub_404517
.text:00401D72                 mov     edi, eax
.text:00401D74                 test    edi, edi
.text:00401D76                 jz      short loc_401DD4
.text:00401D78                 push    esi
.text:00401D79                 lea     esi, [edi-1]
.text:00401D7C
.text:00401D7C loc_401D7C:                             ; CODE XREF: sub_401D53+7E↓j
.text:00401D7C                 push    esi
.text:00401D7D                 call    sub_4046BD
.text:00401D82                 cmp     eax, 10000h
.text:00401D87                 jnz     short loc_401DCD
.text:00401D89                 push    esi
.text:00401D8A                 call    sub_404589
.text:00401D8F                 mov     [ebp+var_4], eax
.text:00401D92                 test    eax, eax
.text:00401D94                 jz      short loc_401DCD
.text:00401D96                 lea     ecx, [eax+0Ch]
.text:00401D99                 call    sub_402A57
.text:00401D9E                 lea     ecx, [ebp+var_4]
.text:00401DA1                 call    sub_402A57
.text:00401DA6                 mov     ecx, dword_405468
.text:00401DAC                 push    0
.text:00401DAE                 push    3
.text:00401DB0                 pop     edx
.text:00401DB1                 call    sub_404012
.text:00401DB6                 test    eax, eax
.text:00401DB8                 jz      short loc_401DCD
.text:00401DBA                 cmp     dword ptr [eax+4], 80000h
.text:00401DC1                 jnz     short loc_401DCD
.text:00401DC3                 mov     ecx, [eax+0Ch]
.text:00401DC6                 mov     edx, esi
.text:00401DC8                 call    sub_4044C5
.text:00401DCD
.text:00401DCD loc_401DCD:                             ; CODE XREF: sub_401D53+34↑j
.text:00401DCD                                         ; sub_401D53+41↑j ...
.text:00401DCD                 dec     esi
.text:00401DCE                 sub     edi, 1
.text:00401DD1                 jnz     short loc_401D7C
.text:00401DD3                 pop     esi
.text:00401DD4
.text:00401DD4 loc_401DD4:                             ; CODE XREF: sub_401D53+23↑j
.text:00401DD4                 mov     ecx, offset dword_405468
.text:00401DD9                 call    sub_404258
.text:00401DDE                 pop     edi
.text:00401DDF
.text:00401DDF loc_401DDF:                             ; CODE XREF: sub_401D53+14↑j
.text:00401DDF                 cmp     dword_40546C, 1
.text:00401DE6                 jnz     short loc_401DEE
.text:00401DE8                 call    ds:WSACleanup
.text:00401DEE
.text:00401DEE loc_401DEE:                             ; CODE XREF: sub_401D53+93↑j
.text:00401DEE                 xor     eax, eax
.text:00401DF0                 inc     eax
.text:00401DF1                 mov     esp, ebp
.text:00401DF3                 pop     ebp
.text:00401DF4                 retn
.text:00401DF4 sub_401D53      endp
.text:00401DF4
.text:00401DF5
.text:00401DF5 ; =============== S U B R O U T I N E =======================================
.text:00401DF5
.text:00401DF5 ; Attributes: bp-based frame
.text:00401DF5
.text:00401DF5 sub_401DF5      proc near               ; CODE XREF: sub_403C94+42↓p
.text:00401DF5
.text:00401DF5 VersionInfo     = _OSVERSIONINFOEXW ptr -128h
.text:00401DF5 var_4           = dword ptr -4
.text:00401DF5
.text:00401DF5                 mov     edi, edi
.text:00401DF7                 push    ebp
.text:00401DF8                 mov     ebp, esp
.text:00401DFA                 sub     esp, 128h
.text:00401E00                 mov     eax, ___security_cookie
.text:00401E05                 xor     eax, ebp
.text:00401E07                 mov     [ebp+var_4], eax
.text:00401E0A                 push    esi
.text:00401E0B                 mov     esi, 11Ch
.text:00401E10                 lea     eax, [ebp+VersionInfo]
.text:00401E16                 push    esi             ; Size
.text:00401E17                 push    0               ; Val
.text:00401E19                 push    eax             ; void *
.text:00401E1A                 call    memset
.text:00401E1F                 mov     ax, word_405464
.text:00401E25                 add     esp, 0Ch
.text:00401E28                 mov     [ebp+VersionInfo.dwOSVersionInfoSize], esi
.text:00401E2E                 xor     esi, esi
.text:00401E30                 inc     esi
.text:00401E31                 mov     [ebp+VersionInfo.dwMajorVersion], 5
.text:00401E3B                 mov     [ebp+VersionInfo.dwMinorVersion], esi
.text:00401E41                 push    3               ; Condition
.text:00401E43                 push    2               ; TypeMask
.text:00401E45                 push    0
.text:00401E47                 push    0               ; ConditionMask
.text:00401E49                 mov     [ebp+VersionInfo.wServicePackMajor], ax
.text:00401E4D                 call    ds:VerSetConditionMask
.text:00401E53                 push    3               ; Condition
.text:00401E55                 push    esi             ; TypeMask
.text:00401E56                 push    edx
.text:00401E57                 push    eax             ; ConditionMask
.text:00401E58                 call    ds:VerSetConditionMask
.text:00401E5E                 push    3               ; Condition
.text:00401E60                 push    20h ; ' '       ; TypeMask
.text:00401E62                 push    edx
.text:00401E63                 push    eax             ; ConditionMask
.text:00401E64                 call    ds:VerSetConditionMask
.text:00401E6A                 push    edx
.text:00401E6B                 push    eax             ; ConditionMask
.text:00401E6C                 push    3               ; TypeMask
.text:00401E6E                 lea     eax, [ebp+VersionInfo]
.text:00401E74                 push    eax             ; VersionInfo
.text:00401E75                 call    ds:RtlVerifyVersionInfo
.text:00401E7B                 xor     ecx, ecx
.text:00401E7D                 test    eax, eax
.text:00401E7F                 pop     esi
.text:00401E80                 setns   cl
.text:00401E83                 mov     eax, ecx
.text:00401E85                 mov     ecx, [ebp+var_4]
.text:00401E88                 xor     ecx, ebp        ; StackCookie
.text:00401E8A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00401E8F                 mov     esp, ebp
.text:00401E91                 pop     ebp
.text:00401E92                 retn
.text:00401E92 sub_401DF5      endp
.text:00401E92
.text:00401E93
.text:00401E93 ; =============== S U B R O U T I N E =======================================
.text:00401E93
.text:00401E93
.text:00401E93 sub_401E93      proc near               ; CODE XREF: sub_401577+43↑p
.text:00401E93                                         ; sub_401CC0:loc_401D13↑p ...
.text:00401E93                 mov     eax, dword_405460
.text:00401E98                 xor     edx, edx
.text:00401E9A                 push    esi
.text:00401E9B                 push    0Ah
.text:00401E9D                 inc     eax
.text:00401E9E                 pop     esi
.text:00401E9F                 mov     dword_405460, eax
.text:00401EA4                 div     esi
.text:00401EA6                 add     edx, 4
.text:00401EA9                 push    edx
.text:00401EAA                 mov     edx, ecx
.text:00401EAC                 call    sub_401EB3
.text:00401EB1                 pop     esi
.text:00401EB2                 retn
.text:00401EB2 sub_401E93      endp
.text:00401EB2
.text:00401EB3
.text:00401EB3 ; =============== S U B R O U T I N E =======================================
.text:00401EB3
.text:00401EB3 ; Attributes: bp-based frame
.text:00401EB3
.text:00401EB3 sub_401EB3      proc near               ; CODE XREF: sub_401440+CF↑p
.text:00401EB3                                         ; sub_401440+F1↑p ...
.text:00401EB3
.text:00401EB3 lpString        = dword ptr -8
.text:00401EB3 Buffer          = word ptr -4
.text:00401EB3 arg_0           = dword ptr  8
.text:00401EB3
.text:00401EB3                 mov     edi, edi
.text:00401EB5                 push    ebp
.text:00401EB6                 mov     ebp, esp
.text:00401EB8                 push    ecx
.text:00401EB9                 push    ecx
.text:00401EBA                 push    ebx
.text:00401EBB                 push    esi
.text:00401EBC                 mov     ebx, edx
.text:00401EBE                 xor     esi, esi
.text:00401EC0                 mov     dword ptr [ebp+Buffer], esi
.text:00401EC3                 test    ebx, ebx
.text:00401EC5                 jnz     short loc_401EE3
.text:00401EC7                 call    ds:GetLastError
.text:00401ECD                 test    eax, eax
.text:00401ECF                 jnz     short loc_401ED9
.text:00401ED1                 push    57h ; 'W'       ; dwErrCode
.text:00401ED3                 call    ds:SetLastError
.text:00401ED9
.text:00401ED9 loc_401ED9:                             ; CODE XREF: sub_401EB3+1C↑j
.text:00401ED9                                         ; sub_401EB3+37↓j
.text:00401ED9                 mov     eax, offset dword_401124
.text:00401EDE                 jmp     loc_402019
.text:00401EE3 ; ---------------------------------------------------------------------------
.text:00401EE3
.text:00401EE3 loc_401EE3:                             ; CODE XREF: sub_401EB3+12↑j
.text:00401EE3                 call    sub_4018B0
.text:00401EE8                 test    eax, eax
.text:00401EEA                 jz      short loc_401ED9
.text:00401EEC                 xor     edx, edx
.text:00401EEE                 push    edi
.text:00401EEF                 inc     edx
.text:00401EF0                 call    sub_404517
.text:00401EF5                 mov     edi, eax
.text:00401EF7                 cmp     edi, [ebp+arg_0]
.text:00401EFA                 ja      short loc_401F28
.text:00401EFC                 mov     ecx, dword_405468
.text:00401F02                 xor     edx, edx
.text:00401F04                 inc     edx
.text:00401F05                 call    sub_40454A
.text:00401F0A                 test    eax, eax
.text:00401F0C                 jz      loc_402001
.text:00401F12                 mov     edx, [ebp+arg_0]
.text:00401F15                 mov     ecx, eax
.text:00401F17                 sub     edx, edi
.text:00401F19                 inc     edx
.text:00401F1A                 call    sub_40448B
.text:00401F1F                 cmp     eax, 0FFFFFFFFh
.text:00401F22                 jz      loc_402001
.text:00401F28
.text:00401F28 loc_401F28:                             ; CODE XREF: sub_401EB3+47↑j
.text:00401F28                 mov     edi, 80h ; '€'
.text:00401F2D
.text:00401F2D loc_401F2D:                             ; CODE XREF: sub_401EB3+DE↓j
.text:00401F2D                 push    1
.text:00401F2F                 add     edi, edi
.text:00401F31                 xor     edx, edx
.text:00401F33                 push    edi
.text:00401F34                 push    4
.text:00401F36                 pop     ecx
.text:00401F37                 call    sub_4019AD
.text:00401F3C                 mov     [ebp+lpString], eax
.text:00401F3F                 test    eax, eax
.text:00401F41                 jz      loc_402001
.text:00401F47                 push    edi             ; cchBufferMax
.text:00401F48                 push    eax             ; lpBuffer
.text:00401F49                 push    ebx             ; uID
.text:00401F4A                 push    esi             ; hInstance
.text:00401F4B                 call    ds:LoadStringW
.text:00401F51                 mov     ecx, eax
.text:00401F53                 test    ecx, ecx
.text:00401F55                 jnz     short loc_401F8C
.text:00401F57                 call    ds:GetLastError
.text:00401F5D                 cmp     eax, 716h
.text:00401F62                 jnz     loc_402013
.text:00401F68                 push    esi             ; Arguments
.text:00401F69                 push    esi             ; nSize
.text:00401F6A                 lea     eax, [ebp+Buffer]
.text:00401F6D                 push    eax             ; lpBuffer
.text:00401F6E                 push    esi             ; dwLanguageId
.text:00401F6F                 push    ebx             ; dwMessageId
.text:00401F70                 push    esi             ; lpSource
.text:00401F71                 push    0B00h           ; dwFlags
.text:00401F76                 call    ds:FormatMessageW
.text:00401F7C                 mov     ecx, eax
.text:00401F7E                 test    ecx, ecx
.text:00401F80                 jz      loc_402013
.text:00401F86                 mov     eax, dword ptr [ebp+Buffer]
.text:00401F89                 mov     [ebp+lpString], eax
.text:00401F8C
.text:00401F8C loc_401F8C:                             ; CODE XREF: sub_401EB3+A2↑j
.text:00401F8C                 lea     eax, [edi-1]
.text:00401F8F                 cmp     ecx, eax
.text:00401F91                 jnb     short loc_401F2D
.text:00401F93                 mov     ecx, dword_405468
.text:00401F99                 xor     edx, edx
.text:00401F9B                 push    esi
.text:00401F9C                 inc     edx
.text:00401F9D                 call    sub_404012
.text:00401FA2                 mov     edi, 80000h
.text:00401FA7                 test    eax, eax
.text:00401FA9                 jz      short loc_401FC1
.text:00401FAB                 cmp     [eax+4], edi
.text:00401FAE                 jnz     short loc_401FC1
.text:00401FB0                 mov     edx, [ebp+arg_0]
.text:00401FB3                 push    ecx             ; int
.text:00401FB4                 push    [ebp+lpString]  ; lpString
.text:00401FB7                 mov     ecx, [eax+0Ch]
.text:00401FBA                 call    sub_4045BE
.text:00401FBF                 jmp     short loc_401FC3
.text:00401FC1 ; ---------------------------------------------------------------------------
.text:00401FC1
.text:00401FC1 loc_401FC1:                             ; CODE XREF: sub_401EB3+F6↑j
.text:00401FC1                                         ; sub_401EB3+FB↑j
.text:00401FC1                 mov     eax, esi
.text:00401FC3
.text:00401FC3 loc_401FC3:                             ; CODE XREF: sub_401EB3+10C↑j
.text:00401FC3                 test    eax, eax
.text:00401FC5                 jz      short loc_402001
.text:00401FC7                 cmp     dword ptr [ebp+Buffer], esi
.text:00401FCA                 jz      short loc_401FD8
.text:00401FCC                 push    dword ptr [ebp+Buffer] ; hMem
.text:00401FCF                 call    ds:LocalFree
.text:00401FD5                 mov     dword ptr [ebp+Buffer], esi
.text:00401FD8
.text:00401FD8 loc_401FD8:                             ; CODE XREF: sub_401EB3+117↑j
.text:00401FD8                 mov     ecx, dword_405468
.text:00401FDE                 xor     edx, edx
.text:00401FE0                 push    esi
.text:00401FE1                 inc     edx
.text:00401FE2                 call    sub_404012
.text:00401FE7                 test    eax, eax
.text:00401FE9                 jz      short loc_401FFD
.text:00401FEB                 cmp     [eax+4], edi
.text:00401FEE                 jnz     short loc_401FFD
.text:00401FF0                 mov     edx, [ebp+arg_0]
.text:00401FF3                 mov     ecx, [eax+0Ch]
.text:00401FF6                 call    sub_40456E
.text:00401FFB                 mov     esi, eax
.text:00401FFD
.text:00401FFD loc_401FFD:                             ; CODE XREF: sub_401EB3+136↑j
.text:00401FFD                                         ; sub_401EB3+13B↑j
.text:00401FFD                 mov     eax, esi
.text:00401FFF                 jmp     short loc_402018
.text:00402001 ; ---------------------------------------------------------------------------
.text:00402001
.text:00402001 loc_402001:                             ; CODE XREF: sub_401EB3+59↑j
.text:00402001                                         ; sub_401EB3+6F↑j ...
.text:00402001                 call    ds:GetLastError
.text:00402007                 test    eax, eax
.text:00402009                 jnz     short loc_402013
.text:0040200B                 push    8               ; dwErrCode
.text:0040200D                 call    ds:SetLastError
.text:00402013
.text:00402013 loc_402013:                             ; CODE XREF: sub_401EB3+AF↑j
.text:00402013                                         ; sub_401EB3+CD↑j ...
.text:00402013                 mov     eax, offset dword_401124
.text:00402018
.text:00402018 loc_402018:                             ; CODE XREF: sub_401EB3+14C↑j
.text:00402018                 pop     edi
.text:00402019
.text:00402019 loc_402019:                             ; CODE XREF: sub_401EB3+2B↑j
.text:00402019                 pop     esi
.text:0040201A                 pop     ebx
.text:0040201B                 mov     esp, ebp
.text:0040201D                 pop     ebp
.text:0040201E                 retn    4
.text:0040201E sub_401EB3      endp
.text:0040201E
.text:00402021
.text:00402021 ; =============== S U B R O U T I N E =======================================
.text:00402021
.text:00402021 ; Attributes: bp-based frame
.text:00402021
.text:00402021 sub_402021      proc near               ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+42A↓p
.text:00402021                                         ; ParseAndSaveOptionValue(x,x,x)+47A↓p ...
.text:00402021
.text:00402021 var_10          = qword ptr -10h
.text:00402021 EndPtr          = dword ptr -4
.text:00402021
.text:00402021                 mov     edi, edi
.text:00402023                 push    ebp
.text:00402024                 mov     ebp, esp
.text:00402026                 sub     esp, 10h
.text:00402029                 push    esi
.text:0040202A                 push    edi
.text:0040202B                 mov     esi, ecx
.text:0040202D                 xor     edi, edi
.text:0040202F                 mov     [ebp+EndPtr], edi
.text:00402032                 test    esi, esi
.text:00402034                 jz      short loc_4020A0
.text:00402036                 call    sub_40267F
.text:0040203B                 test    eax, eax
.text:0040203D                 jz      short loc_4020A0
.text:0040203F                 call    sub_4018B0
.text:00402044                 test    eax, eax
.text:00402046                 jz      short loc_4020B2
.text:00402048                 push    edi
.text:00402049                 push    edi
.text:0040204A                 mov     edx, esi
.text:0040204C                 xor     ecx, ecx
.text:0040204E                 call    sub_4019AD
.text:00402053                 mov     esi, eax
.text:00402055                 test    esi, esi
.text:00402057                 jnz     short loc_402067
.text:00402059                 call    ds:GetLastError
.text:0040205F                 test    eax, eax
.text:00402061                 jnz     short loc_4020B2
.text:00402063                 push    8
.text:00402065                 jmp     short loc_4020AC
.text:00402067 ; ---------------------------------------------------------------------------
.text:00402067
.text:00402067 loc_402067:                             ; CODE XREF: sub_402021+36↑j
.text:00402067                 call    ds:_errno
.text:0040206D                 mov     [eax], edi
.text:0040206F                 lea     eax, [ebp+EndPtr]
.text:00402072                 push    eax             ; EndPtr
.text:00402073                 push    esi             ; String
.text:00402074                 call    ds:wcstod
.text:0040207A                 add     esp, 8
.text:0040207D                 fstp    [ebp+var_10]
.text:00402080                 call    ds:_errno
.text:00402086                 cmp     dword ptr [eax], 22h ; '"'
.text:00402089                 jz      short loc_4020A0
.text:0040208B                 mov     ecx, [ebp+EndPtr] ; lpString
.text:0040208E                 test    ecx, ecx
.text:00402090                 jz      short loc_40209B
.text:00402092                 call    sub_40267F
.text:00402097                 test    eax, eax
.text:00402099                 jnz     short loc_4020A0
.text:0040209B
.text:0040209B loc_40209B:                             ; CODE XREF: sub_402021+6F↑j
.text:0040209B                 fld     [ebp+var_10]
.text:0040209E                 jmp     short loc_4020B4
.text:004020A0 ; ---------------------------------------------------------------------------
.text:004020A0
.text:004020A0 loc_4020A0:                             ; CODE XREF: sub_402021+13↑j
.text:004020A0                                         ; sub_402021+1C↑j ...
.text:004020A0                 call    ds:GetLastError
.text:004020A6                 test    eax, eax
.text:004020A8                 jnz     short loc_4020B2
.text:004020AA                 push    57h ; 'W'       ; dwErrCode
.text:004020AC
.text:004020AC loc_4020AC:                             ; CODE XREF: sub_402021+44↑j
.text:004020AC                 call    ds:SetLastError
.text:004020B2
.text:004020B2 loc_4020B2:                             ; CODE XREF: sub_402021+25↑j
.text:004020B2                                         ; sub_402021+40↑j ...
.text:004020B2                 fldz
.text:004020B4
.text:004020B4 loc_4020B4:                             ; CODE XREF: sub_402021+7D↑j
.text:004020B4                 pop     edi
.text:004020B5                 pop     esi
.text:004020B6                 mov     esp, ebp
.text:004020B8                 pop     ebp
.text:004020B9                 retn
.text:004020B9 sub_402021      endp
.text:004020B9
.text:004020BA
.text:004020BA ; =============== S U B R O U T I N E =======================================
.text:004020BA
.text:004020BA ; Attributes: bp-based frame
.text:004020BA
.text:004020BA sub_4020BA      proc near               ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+344↓p
.text:004020BA
.text:004020BA EndPtr          = dword ptr -4
.text:004020BA
.text:004020BA                 mov     edi, edi
.text:004020BC                 push    ebp
.text:004020BD                 mov     ebp, esp
.text:004020BF                 push    ecx
.text:004020C0                 push    esi
.text:004020C1                 push    edi
.text:004020C2                 mov     esi, ecx
.text:004020C4                 xor     edi, edi
.text:004020C6                 mov     [ebp+EndPtr], edi
.text:004020C9                 test    esi, esi
.text:004020CB                 jz      loc_402159
.text:004020D1                 call    sub_4018B0
.text:004020D6                 test    eax, eax
.text:004020D8                 jz      loc_40216B
.text:004020DE                 push    edi
.text:004020DF                 push    edi
.text:004020E0                 mov     edx, esi
.text:004020E2                 xor     ecx, ecx
.text:004020E4                 call    sub_4019AD
.text:004020E9                 mov     esi, eax
.text:004020EB                 test    esi, esi
.text:004020ED                 jnz     short loc_4020FD
.text:004020EF                 call    ds:GetLastError
.text:004020F5                 test    eax, eax
.text:004020F7                 jnz     short loc_40216B
.text:004020F9                 push    8
.text:004020FB                 jmp     short loc_402165
.text:004020FD ; ---------------------------------------------------------------------------
.text:004020FD
.text:004020FD loc_4020FD:                             ; CODE XREF: sub_4020BA+33↑j
.text:004020FD                 push    ecx
.text:004020FE                 xor     edx, edx
.text:00402100                 mov     ecx, esi
.text:00402102                 call    sub_4023BD
.text:00402107                 mov     ecx, esi        ; lpString
.text:00402109                 call    sub_40267F
.text:0040210E                 test    eax, eax
.text:00402110                 jz      short loc_402159
.text:00402112                 call    ds:_errno
.text:00402118                 push    0Ah             ; Radix
.text:0040211A                 mov     [eax], edi
.text:0040211C                 lea     eax, [ebp+EndPtr]
.text:0040211F                 cmp     word ptr [esi], 2Dh ; '-'
.text:00402123                 push    eax             ; EndPtr
.text:00402124                 push    esi             ; String
.text:00402125                 jnz     short loc_40212F
.text:00402127                 call    ds:wcstol
.text:0040212D                 jmp     short loc_402135
.text:0040212F ; ---------------------------------------------------------------------------
.text:0040212F
.text:0040212F loc_40212F:                             ; CODE XREF: sub_4020BA+6B↑j
.text:0040212F                 call    ds:wcstoul
.text:00402135
.text:00402135 loc_402135:                             ; CODE XREF: sub_4020BA+73↑j
.text:00402135                 add     esp, 0Ch
.text:00402138                 mov     esi, eax
.text:0040213A                 call    ds:_errno
.text:00402140                 cmp     dword ptr [eax], 22h ; '"'
.text:00402143                 jz      short loc_402159
.text:00402145                 mov     ecx, [ebp+EndPtr] ; lpString
.text:00402148                 test    ecx, ecx
.text:0040214A                 jz      short loc_402155
.text:0040214C                 call    sub_40267F
.text:00402151                 test    eax, eax
.text:00402153                 jnz     short loc_402159
.text:00402155
.text:00402155 loc_402155:                             ; CODE XREF: sub_4020BA+90↑j
.text:00402155                 mov     eax, esi
.text:00402157                 jmp     short loc_40216D
.text:00402159 ; ---------------------------------------------------------------------------
.text:00402159
.text:00402159 loc_402159:                             ; CODE XREF: sub_4020BA+11↑j
.text:00402159                                         ; sub_4020BA+56↑j ...
.text:00402159                 call    ds:GetLastError
.text:0040215F                 test    eax, eax
.text:00402161                 jnz     short loc_40216B
.text:00402163                 push    57h ; 'W'       ; dwErrCode
.text:00402165
.text:00402165 loc_402165:                             ; CODE XREF: sub_4020BA+41↑j
.text:00402165                 call    ds:SetLastError
.text:0040216B
.text:0040216B loc_40216B:                             ; CODE XREF: sub_4020BA+1E↑j
.text:0040216B                                         ; sub_4020BA+3D↑j ...
.text:0040216B                 xor     eax, eax
.text:0040216D
.text:0040216D loc_40216D:                             ; CODE XREF: sub_4020BA+9D↑j
.text:0040216D                 pop     edi
.text:0040216E                 pop     esi
.text:0040216F                 mov     esp, ebp
.text:00402171                 pop     ebp
.text:00402172                 retn
.text:00402172 sub_4020BA      endp
.text:00402172
.text:00402173
.text:00402173 ; =============== S U B R O U T I N E =======================================
.text:00402173
.text:00402173 ; Attributes: bp-based frame
.text:00402173
.text:00402173 sub_402173      proc near               ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+332↓p
.text:00402173
.text:00402173 EndPtr          = dword ptr -4
.text:00402173 arg_0           = dword ptr  8
.text:00402173
.text:00402173                 mov     edi, edi
.text:00402175                 push    ebp
.text:00402176                 mov     ebp, esp
.text:00402178                 push    ecx
.text:00402179                 push    esi
.text:0040217A                 push    edi
.text:0040217B                 xor     edi, edi
.text:0040217D                 mov     [ebp+EndPtr], edi
.text:00402180                 test    ecx, ecx
.text:00402182                 jz      loc_40220D
.text:00402188                 push    edi
.text:00402189                 mov     edx, ecx
.text:0040218B                 xor     ecx, ecx
.text:0040218D                 push    edi
.text:0040218E                 call    sub_4019AD
.text:00402193                 mov     esi, eax
.text:00402195                 test    esi, esi
.text:00402197                 jnz     short loc_4021A7
.text:00402199                 call    ds:GetLastError
.text:0040219F                 test    eax, eax
.text:004021A1                 jnz     short loc_40221F
.text:004021A3                 push    8
.text:004021A5                 jmp     short loc_402219
.text:004021A7 ; ---------------------------------------------------------------------------
.text:004021A7
.text:004021A7 loc_4021A7:                             ; CODE XREF: sub_402173+24↑j
.text:004021A7                 push    ecx
.text:004021A8                 xor     edx, edx
.text:004021AA                 mov     ecx, esi
.text:004021AC                 call    sub_4023BD
.text:004021B1                 mov     ecx, esi        ; lpString
.text:004021B3                 call    sub_40267F
.text:004021B8                 test    eax, eax
.text:004021BA                 jz      short loc_40221F
.text:004021BC                 cmp     [ebp+arg_0], edi
.text:004021BF                 jnz     short loc_4021C7
.text:004021C1                 cmp     word ptr [esi], 2Dh ; '-'
.text:004021C5                 jz      short loc_40221F
.text:004021C7
.text:004021C7 loc_4021C7:                             ; CODE XREF: sub_402173+4C↑j
.text:004021C7                 call    ds:_errno
.text:004021CD                 cmp     [ebp+arg_0], 1
.text:004021D1                 push    0Ah             ; Radix
.text:004021D3                 mov     [eax], edi
.text:004021D5                 lea     eax, [ebp+EndPtr]
.text:004021D8                 push    eax             ; EndPtr
.text:004021D9                 push    esi             ; String
.text:004021DA                 jnz     short loc_4021E4
.text:004021DC                 call    ds:wcstol
.text:004021E2                 jmp     short loc_4021EA
.text:004021E4 ; ---------------------------------------------------------------------------
.text:004021E4
.text:004021E4 loc_4021E4:                             ; CODE XREF: sub_402173+67↑j
.text:004021E4                 call    ds:wcstoul
.text:004021EA
.text:004021EA loc_4021EA:                             ; CODE XREF: sub_402173+6F↑j
.text:004021EA                 add     esp, 0Ch
.text:004021ED                 call    ds:_errno
.text:004021F3                 cmp     dword ptr [eax], 22h ; '"'
.text:004021F6                 jz      short loc_40221F
.text:004021F8                 mov     ecx, [ebp+EndPtr] ; lpString
.text:004021FB                 test    ecx, ecx
.text:004021FD                 jz      short loc_402208
.text:004021FF                 call    sub_40267F
.text:00402204                 test    eax, eax
.text:00402206                 jnz     short loc_40221F
.text:00402208
.text:00402208 loc_402208:                             ; CODE XREF: sub_402173+8A↑j
.text:00402208                 xor     eax, eax
.text:0040220A                 inc     eax
.text:0040220B                 jmp     short loc_402221
.text:0040220D ; ---------------------------------------------------------------------------
.text:0040220D
.text:0040220D loc_40220D:                             ; CODE XREF: sub_402173+F↑j
.text:0040220D                 call    ds:GetLastError
.text:00402213                 test    eax, eax
.text:00402215                 jnz     short loc_40221F
.text:00402217                 push    57h ; 'W'       ; dwErrCode
.text:00402219
.text:00402219 loc_402219:                             ; CODE XREF: sub_402173+32↑j
.text:00402219                 call    ds:SetLastError
.text:0040221F
.text:0040221F loc_40221F:                             ; CODE XREF: sub_402173+2E↑j
.text:0040221F                                         ; sub_402173+47↑j ...
.text:0040221F                 xor     eax, eax
.text:00402221
.text:00402221 loc_402221:                             ; CODE XREF: sub_402173+98↑j
.text:00402221                 pop     edi
.text:00402222                 pop     esi
.text:00402223                 mov     esp, ebp
.text:00402225                 pop     ebp
.text:00402226                 retn    4
.text:00402226 sub_402173      endp
.text:00402226
.text:00402229
.text:00402229 ; =============== S U B R O U T I N E =======================================
.text:00402229
.text:00402229
.text:00402229 ; int __fastcall sub_402229(PCWSTR pszStart, WCHAR wMatch, int, int)
.text:00402229 sub_402229      proc near               ; CODE XREF: sub_402E6D+3D↓p
.text:00402229                                         ; sub_403157+1A↓p ...
.text:00402229                 mov     edi, edi
.text:0040222B                 push    esi
.text:0040222C                 mov     esi, ecx
.text:0040222E                 push    edi
.text:0040222F                 mov     edi, edx
.text:00402231                 test    esi, esi
.text:00402233                 jnz     short loc_402243
.text:00402235                 call    ds:GetLastError
.text:0040223B                 test    eax, eax
.text:0040223D                 jnz     short loc_402269
.text:0040223F                 push    57h ; 'W'
.text:00402241                 jmp     short loc_402263
.text:00402243 ; ---------------------------------------------------------------------------
.text:00402243
.text:00402243 loc_402243:                             ; CODE XREF: sub_402229+A↑j
.text:00402243                 call    sub_40267F
.text:00402248                 test    eax, eax
.text:0040224A                 jz      short loc_40225E
.text:0040224C                 push    edi             ; wMatch
.text:0040224D                 push    esi             ; pszStart
.text:0040224E                 call    ds:StrChrIW
.text:00402254                 test    eax, eax
.text:00402256                 jz      short loc_40225E
.text:00402258                 sub     eax, esi
.text:0040225A                 sar     eax, 1
.text:0040225C                 jmp     short loc_40226C
.text:0040225E ; ---------------------------------------------------------------------------
.text:0040225E
.text:0040225E loc_40225E:                             ; CODE XREF: sub_402229+21↑j
.text:0040225E                                         ; sub_402229+2D↑j
.text:0040225E                 push    490h            ; dwErrCode
.text:00402263
.text:00402263 loc_402263:                             ; CODE XREF: sub_402229+18↑j
.text:00402263                 call    ds:SetLastError
.text:00402269
.text:00402269 loc_402269:                             ; CODE XREF: sub_402229+14↑j
.text:00402269                 or      eax, 0FFFFFFFFh
.text:0040226C
.text:0040226C loc_40226C:                             ; CODE XREF: sub_402229+33↑j
.text:0040226C                 pop     edi
.text:0040226D                 pop     esi
.text:0040226E                 retn    8
.text:0040226E sub_402229      endp
.text:0040226E
.text:00402271
.text:00402271 ; =============== S U B R O U T I N E =======================================
.text:00402271
.text:00402271 ; Attributes: bp-based frame
.text:00402271
.text:00402271 ; int __fastcall sub_402271(char Args, char, int)
.text:00402271 sub_402271      proc near               ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+1A4↓p
.text:00402271                                         ; sub_403A67+7A↓p
.text:00402271
.text:00402271 lpString        = dword ptr -0Ch
.text:00402271 var_8           = dword ptr -8
.text:00402271 pszFirst        = dword ptr -4
.text:00402271 arg_0           = dword ptr  8
.text:00402271
.text:00402271                 mov     edi, edi
.text:00402273                 push    ebp
.text:00402274                 mov     ebp, esp
.text:00402276                 sub     esp, 0Ch
.text:00402279                 push    ebx
.text:0040227A                 push    esi
.text:0040227B                 push    edi
.text:0040227C                 mov     edi, ecx
.text:0040227E                 mov     esi, edx
.text:00402280                 test    edi, edi
.text:00402282                 jz      loc_40232F
.text:00402288                 test    esi, esi
.text:0040228A                 jz      loc_40232F
.text:00402290                 mov     ecx, esi        ; lpString
.text:00402292                 call    sub_40267F
.text:00402297                 push    1
.text:00402299                 xor     edx, edx
.text:0040229B                 xor     ecx, ecx
.text:0040229D                 lea     ebx, [eax+4]
.text:004022A0                 push    ebx
.text:004022A1                 call    sub_4019AD
.text:004022A6                 mov     [ebp+pszFirst], eax
.text:004022A9                 test    eax, eax
.text:004022AB                 jnz     short loc_4022BF
.text:004022AD
.text:004022AD loc_4022AD:                             ; CODE XREF: sub_402271+6D↓j
.text:004022AD                 call    ds:GetLastError
.text:004022B3                 test    eax, eax
.text:004022B5                 jnz     loc_402341
.text:004022BB                 push    8
.text:004022BD                 jmp     short loc_40233B
.text:004022BF ; ---------------------------------------------------------------------------
.text:004022BF
.text:004022BF loc_4022BF:                             ; CODE XREF: sub_402271+3A↑j
.text:004022BF                 mov     ecx, edi        ; lpString
.text:004022C1                 call    sub_40267F
.text:004022C6                 add     eax, 4
.text:004022C9                 xor     ecx, ecx
.text:004022CB                 push    1
.text:004022CD                 push    eax
.text:004022CE                 xor     edx, edx
.text:004022D0                 mov     [ebp+var_8], eax
.text:004022D3                 inc     ecx
.text:004022D4                 call    sub_4019AD
.text:004022D9                 mov     [ebp+lpString], eax
.text:004022DC                 test    eax, eax
.text:004022DE                 jz      short loc_4022AD
.text:004022E0                 push    esi             ; Args
.text:004022E1                 mov     esi, [ebp+pszFirst]
.text:004022E4                 push    offset aS_0     ; "|%s|"
.text:004022E9                 push    ebx             ; int
.text:004022EA                 push    esi             ; Buffer
.text:004022EB                 call    ?StringCchPrintfW@@YAJPAGIPBGZZ ; StringCchPrintfW(ushort *,uint,ushort const *,...)
.text:004022F0                 add     esp, 10h
.text:004022F3                 test    eax, eax
.text:004022F5                 jns     short loc_4022FD
.text:004022F7
.text:004022F7 loc_4022F7:                             ; CODE XREF: sub_402271+A3↓j
.text:004022F7                 movzx   eax, ax
.text:004022FA                 push    eax
.text:004022FB                 jmp     short loc_40233B
.text:004022FD ; ---------------------------------------------------------------------------
.text:004022FD
.text:004022FD loc_4022FD:                             ; CODE XREF: sub_402271+84↑j
.text:004022FD                 push    edi             ; Args
.text:004022FE                 mov     edi, [ebp+lpString]
.text:00402301                 push    offset aS_0     ; "|%s|"
.text:00402306                 push    [ebp+var_8]     ; int
.text:00402309                 push    edi             ; Buffer
.text:0040230A                 call    ?StringCchPrintfW@@YAJPAGIPBGZZ ; StringCchPrintfW(ushort *,uint,ushort const *,...)
.text:0040230F                 add     esp, 10h
.text:00402312                 test    eax, eax
.text:00402314                 js      short loc_4022F7
.text:00402316                 push    ecx             ; int
.text:00402317                 push    [ebp+arg_0]     ; int
.text:0040231A                 mov     edx, edi        ; lpString
.text:0040231C                 mov     ecx, esi        ; pszFirst
.text:0040231E                 call    sub_40234C
.text:00402323                 xor     ecx, ecx
.text:00402325                 cmp     eax, 0FFFFFFFFh
.text:00402328                 setnz   cl
.text:0040232B                 mov     eax, ecx
.text:0040232D                 jmp     short loc_402343
.text:0040232F ; ---------------------------------------------------------------------------
.text:0040232F
.text:0040232F loc_40232F:                             ; CODE XREF: sub_402271+11↑j
.text:0040232F                                         ; sub_402271+19↑j
.text:0040232F                 call    ds:GetLastError
.text:00402335                 test    eax, eax
.text:00402337                 jnz     short loc_402341
.text:00402339                 push    57h ; 'W'       ; dwErrCode
.text:0040233B
.text:0040233B loc_40233B:                             ; CODE XREF: sub_402271+4C↑j
.text:0040233B                                         ; sub_402271+8A↑j
.text:0040233B                 call    ds:SetLastError
.text:00402341
.text:00402341 loc_402341:                             ; CODE XREF: sub_402271+44↑j
.text:00402341                                         ; sub_402271+C6↑j
.text:00402341                 xor     eax, eax
.text:00402343
.text:00402343 loc_402343:                             ; CODE XREF: sub_402271+BC↑j
.text:00402343                 pop     edi
.text:00402344                 pop     esi
.text:00402345                 pop     ebx
.text:00402346                 mov     esp, ebp
.text:00402348                 pop     ebp
.text:00402349                 retn    4
.text:00402349 sub_402271      endp
.text:00402349
.text:0040234C
.text:0040234C ; =============== S U B R O U T I N E =======================================
.text:0040234C
.text:0040234C ; Attributes: bp-based frame
.text:0040234C
.text:0040234C ; int __fastcall sub_40234C(PCWSTR pszFirst, LPCWSTR lpString, int, int)
.text:0040234C sub_40234C      proc near               ; CODE XREF: sub_402271+AD↑p
.text:0040234C                                         ; PrepareUsageHelperText(x)+1A1↓p
.text:0040234C
.text:0040234C arg_0           = dword ptr  8
.text:0040234C
.text:0040234C                 mov     edi, edi
.text:0040234E                 push    ebp
.text:0040234F                 mov     ebp, esp
.text:00402351                 push    ebx
.text:00402352                 push    esi
.text:00402353                 mov     esi, ecx
.text:00402355                 push    edi
.text:00402356                 mov     edi, edx
.text:00402358                 test    esi, esi
.text:0040235A                 jz      short loc_4023A1
.text:0040235C                 test    edi, edi
.text:0040235E                 jz      short loc_4023A1
.text:00402360                 call    sub_40267F
.text:00402365                 mov     ecx, edi        ; lpString
.text:00402367                 mov     ebx, eax
.text:00402369                 call    sub_40267F
.text:0040236E                 test    eax, eax
.text:00402370                 jz      short loc_402394
.text:00402372                 test    ebx, ebx
.text:00402374                 jz      short loc_402394
.text:00402376                 cmp     ebx, eax
.text:00402378                 jb      short loc_402394
.text:0040237A                 cmp     [ebp+arg_0], 1
.text:0040237E                 push    edi             ; pszSrch
.text:0040237F                 push    esi             ; pszFirst
.text:00402380                 jnz     short loc_40238A
.text:00402382                 call    ds:StrStrIW
.text:00402388                 jmp     short loc_402390
.text:0040238A ; ---------------------------------------------------------------------------
.text:0040238A
.text:0040238A loc_40238A:                             ; CODE XREF: sub_40234C+34↑j
.text:0040238A                 call    ds:StrStrW
.text:00402390
.text:00402390 loc_402390:                             ; CODE XREF: sub_40234C+3C↑j
.text:00402390                 test    eax, eax
.text:00402392                 jnz     short loc_40239B
.text:00402394
.text:00402394 loc_402394:                             ; CODE XREF: sub_40234C+24↑j
.text:00402394                                         ; sub_40234C+28↑j ...
.text:00402394                 push    490h
.text:00402399                 jmp     short loc_4023AD
.text:0040239B ; ---------------------------------------------------------------------------
.text:0040239B
.text:0040239B loc_40239B:                             ; CODE XREF: sub_40234C+46↑j
.text:0040239B                 sub     eax, esi
.text:0040239D                 sar     eax, 1
.text:0040239F                 jmp     short loc_4023B6
.text:004023A1 ; ---------------------------------------------------------------------------
.text:004023A1
.text:004023A1 loc_4023A1:                             ; CODE XREF: sub_40234C+E↑j
.text:004023A1                                         ; sub_40234C+12↑j
.text:004023A1                 call    ds:GetLastError
.text:004023A7                 test    eax, eax
.text:004023A9                 jnz     short loc_4023B3
.text:004023AB                 push    57h ; 'W'       ; dwErrCode
.text:004023AD
.text:004023AD loc_4023AD:                             ; CODE XREF: sub_40234C+4D↑j
.text:004023AD                 call    ds:SetLastError
.text:004023B3
.text:004023B3 loc_4023B3:                             ; CODE XREF: sub_40234C+5D↑j
.text:004023B3                 or      eax, 0FFFFFFFFh
.text:004023B6
.text:004023B6 loc_4023B6:                             ; CODE XREF: sub_40234C+53↑j
.text:004023B6                 pop     edi
.text:004023B7                 pop     esi
.text:004023B8                 pop     ebx
.text:004023B9                 pop     ebp
.text:004023BA                 retn    8
.text:004023BA sub_40234C      endp
.text:004023BA
.text:004023BD
.text:004023BD ; =============== S U B R O U T I N E =======================================
.text:004023BD
.text:004023BD ; Attributes: bp-based frame
.text:004023BD
.text:004023BD sub_4023BD      proc near               ; CODE XREF: sub_4020BA+48↑p
.text:004023BD                                         ; sub_402173+39↑p ...
.text:004023BD
.text:004023BD var_18          = dword ptr -18h
.text:004023BD lpString        = dword ptr -14h
.text:004023BD pszStart        = dword ptr -10h
.text:004023BD var_C           = dword ptr -0Ch
.text:004023BD var_8           = word ptr -8
.text:004023BD var_4           = dword ptr -4
.text:004023BD
.text:004023BD                 mov     edi, edi
.text:004023BF                 push    ebp
.text:004023C0                 mov     ebp, esp
.text:004023C2                 sub     esp, 18h
.text:004023C5                 mov     eax, ___security_cookie
.text:004023CA                 xor     eax, ebp
.text:004023CC                 mov     [ebp+var_4], eax
.text:004023CF                 push    ebx
.text:004023D0                 xor     eax, eax
.text:004023D2                 push    esi
.text:004023D3                 mov     ebx, eax
.text:004023D5                 mov     esi, edx
.text:004023D7                 mov     eax, ds:dword_401110
.text:004023DC                 push    edi
.text:004023DD                 mov     edi, ecx
.text:004023DF                 mov     [ebp+var_C], eax
.text:004023E2                 mov     ax, ds:word_401114
.text:004023E8                 mov     [ebp+pszStart], esi
.text:004023EB                 mov     [ebp+var_18], edi
.text:004023EE                 mov     [ebp+lpString], ebx
.text:004023F1                 mov     [ebp+var_8], ax
.text:004023F5                 test    edi, edi
.text:004023F7                 jz      loc_4024A4
.text:004023FD                 call    sub_40267F
.text:00402402                 test    eax, eax
.text:00402404                 jz      loc_4024A4
.text:0040240A                 test    esi, esi
.text:0040240C                 jz      short loc_402419
.text:0040240E                 mov     ecx, esi        ; lpString
.text:00402410                 call    sub_40267F
.text:00402415                 test    eax, eax
.text:00402417                 jnz     short loc_40241F
.text:00402419
.text:00402419 loc_402419:                             ; CODE XREF: sub_4023BD+4F↑j
.text:00402419                 lea     eax, [ebp+var_C]
.text:0040241C                 mov     [ebp+pszStart], eax
.text:0040241F
.text:0040241F loc_40241F:                             ; CODE XREF: sub_4023BD+5A↑j
.text:0040241F                 xor     eax, eax
.text:00402421                 mov     esi, edi
.text:00402423                 cmp     [edi], ax
.text:00402426                 jz      short loc_40244A
.text:00402428                 mov     ebx, [ebp+pszStart]
.text:0040242B                 xor     edi, edi
.text:0040242D
.text:0040242D loc_40242D:                             ; CODE XREF: sub_4023BD+85↓j
.text:0040242D                 movzx   eax, word ptr [esi]
.text:00402430                 push    eax             ; wMatch
.text:00402431                 push    ebx             ; pszStart
.text:00402432                 call    ds:StrChrW
.text:00402438                 test    eax, eax
.text:0040243A                 jz      short loc_402444
.text:0040243C                 add     esi, 2
.text:0040243F                 cmp     [esi], di
.text:00402442                 jnz     short loc_40242D
.text:00402444
.text:00402444 loc_402444:                             ; CODE XREF: sub_4023BD+7D↑j
.text:00402444                 mov     edi, [ebp+var_18]
.text:00402447                 mov     ebx, [ebp+lpString]
.text:0040244A
.text:0040244A loc_40244A:                             ; CODE XREF: sub_4023BD+69↑j
.text:0040244A                 movzx   eax, word ptr [esi]
.text:0040244D                 mov     [ebp+lpString], esi
.text:00402450                 test    ax, ax
.text:00402453                 jz      short loc_402487
.text:00402455                 mov     edi, [ebp+pszStart]
.text:00402458
.text:00402458 loc_402458:                             ; CODE XREF: sub_4023BD+BC↓j
.text:00402458                 push    eax             ; wMatch
.text:00402459                 push    edi             ; pszStart
.text:0040245A                 call    ds:StrChrW
.text:00402460                 test    eax, eax
.text:00402462                 jz      short loc_40246C
.text:00402464                 test    ebx, ebx
.text:00402466                 jnz     short loc_402470
.text:00402468                 mov     ebx, esi
.text:0040246A                 jmp     short loc_402470
.text:0040246C ; ---------------------------------------------------------------------------
.text:0040246C
.text:0040246C loc_40246C:                             ; CODE XREF: sub_4023BD+A5↑j
.text:0040246C                 xor     eax, eax
.text:0040246E                 mov     ebx, eax
.text:00402470
.text:00402470 loc_402470:                             ; CODE XREF: sub_4023BD+A9↑j
.text:00402470                                         ; sub_4023BD+AD↑j
.text:00402470                 add     esi, 2
.text:00402473                 movzx   eax, word ptr [esi]
.text:00402476                 test    ax, ax
.text:00402479                 jnz     short loc_402458
.text:0040247B                 mov     edi, [ebp+var_18]
.text:0040247E                 test    ebx, ebx
.text:00402480                 jz      short loc_402487
.text:00402482                 xor     eax, eax
.text:00402484                 mov     [ebx], ax
.text:00402487
.text:00402487 loc_402487:                             ; CODE XREF: sub_4023BD+96↑j
.text:00402487                                         ; sub_4023BD+C3↑j
.text:00402487                 mov     ebx, [ebp+lpString]
.text:0040248A                 cmp     ebx, edi
.text:0040248C                 jbe     short loc_4024A0
.text:0040248E                 mov     ecx, ebx        ; lpString
.text:00402490                 call    sub_40267F
.text:00402495                 inc     eax
.text:00402496                 mov     edx, ebx
.text:00402498                 push    eax
.text:00402499                 mov     ecx, edi
.text:0040249B                 call    sub_4025EA
.text:004024A0
.text:004024A0 loc_4024A0:                             ; CODE XREF: sub_4023BD+CF↑j
.text:004024A0                 mov     eax, edi
.text:004024A2                 jmp     short loc_4024A9
.text:004024A4 ; ---------------------------------------------------------------------------
.text:004024A4
.text:004024A4 loc_4024A4:                             ; CODE XREF: sub_4023BD+3A↑j
.text:004024A4                                         ; sub_4023BD+47↑j
.text:004024A4                 mov     eax, offset dword_401124
.text:004024A9
.text:004024A9 loc_4024A9:                             ; CODE XREF: sub_4023BD+E5↑j
.text:004024A9                 mov     ecx, [ebp+var_4]
.text:004024AC                 pop     edi
.text:004024AD                 pop     esi
.text:004024AE                 xor     ecx, ebp        ; StackCookie
.text:004024B0                 pop     ebx
.text:004024B1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004024B6                 mov     esp, ebp
.text:004024B8                 pop     ebp
.text:004024B9                 retn    4
.text:004024B9 sub_4023BD      endp
.text:004024B9
.text:004024BC
.text:004024BC ; =============== S U B R O U T I N E =======================================
.text:004024BC
.text:004024BC
.text:004024BC ; int __fastcall sub_4024BC(HANDLE hConsoleHandle, LPDWORD lpMode)
.text:004024BC sub_4024BC      proc near               ; CODE XREF: sub_4024EF+85↓p
.text:004024BC                 mov     edi, edi
.text:004024BE                 push    esi
.text:004024BF                 mov     esi, ecx
.text:004024C1                 push    edi
.text:004024C2                 mov     edi, edx
.text:004024C4                 test    esi, esi
.text:004024C6                 jz      short loc_4024EA
.text:004024C8                 cmp     esi, 0FFFFFFFFh
.text:004024CB                 jz      short loc_4024EA
.text:004024CD                 push    esi             ; hFile
.text:004024CE                 call    ds:GetFileType
.text:004024D4                 cmp     eax, 2
.text:004024D7                 jnz     short loc_4024EA
.text:004024D9                 push    edi             ; lpMode
.text:004024DA                 push    esi             ; hConsoleHandle
.text:004024DB                 call    ds:GetConsoleMode
.text:004024E1                 test    eax, eax
.text:004024E3                 jz      short loc_4024EA
.text:004024E5                 xor     eax, eax
.text:004024E7                 inc     eax
.text:004024E8                 jmp     short loc_4024EC
.text:004024EA ; ---------------------------------------------------------------------------
.text:004024EA
.text:004024EA loc_4024EA:                             ; CODE XREF: sub_4024BC+A↑j
.text:004024EA                                         ; sub_4024BC+F↑j ...
.text:004024EA                 xor     eax, eax
.text:004024EC
.text:004024EC loc_4024EC:                             ; CODE XREF: sub_4024BC+2C↑j
.text:004024EC                 pop     edi
.text:004024ED                 pop     esi
.text:004024EE                 retn
.text:004024EE sub_4024BC      endp
.text:004024EE
.text:004024EF
.text:004024EF ; =============== S U B R O U T I N E =======================================
.text:004024EF
.text:004024EF ; Attributes: bp-based frame
.text:004024EF
.text:004024EF ; int __thiscall sub_4024EF(FILE *Stream)
.text:004024EF sub_4024EF      proc near               ; CODE XREF: ShowMessage(x,x)+23↓p
.text:004024EF
.text:004024EF Mode            = dword ptr -4
.text:004024EF
.text:004024EF                 mov     edi, edi
.text:004024F1                 push    ebp
.text:004024F2                 mov     ebp, esp
.text:004024F4                 push    ecx
.text:004024F5                 push    edi
.text:004024F6                 xor     edi, edi
.text:004024F8                 mov     [ebp+Mode], edi
.text:004024FB                 test    ecx, ecx
.text:004024FD                 jnz     short loc_402515
.text:004024FF                 call    ds:GetLastError
.text:00402505                 test    eax, eax
.text:00402507                 jnz     short loc_402511
.text:00402509                 push    57h ; 'W'       ; dwErrCode
.text:0040250B                 call    ds:SetLastError
.text:00402511
.text:00402511 loc_402511:                             ; CODE XREF: sub_4024EF+18↑j
.text:00402511                 xor     eax, eax
.text:00402513                 jmp     short loc_402587
.text:00402515 ; ---------------------------------------------------------------------------
.text:00402515
.text:00402515 loc_402515:                             ; CODE XREF: sub_4024EF+E↑j
.text:00402515                 push    ebx
.text:00402516                 push    esi
.text:00402517                 push    ecx             ; Stream
.text:00402518                 call    ds:_fileno
.text:0040251E                 mov     esi, eax
.text:00402520                 call    ds:_errno
.text:00402526                 push    esi             ; FileHandle
.text:00402527                 mov     [eax], edi
.text:00402529                 call    ds:_get_osfhandle
.text:0040252F                 mov     ebx, eax
.text:00402531                 pop     ecx
.text:00402532                 pop     ecx
.text:00402533                 cmp     ebx, 0FFFFFFFFh
.text:00402536                 jz      short loc_40257B
.text:00402538                 call    ds:_errno
.text:0040253E                 cmp     dword ptr [eax], 9
.text:00402541                 jz      short loc_40257B
.text:00402543                 push    ebx             ; hFile
.text:00402544                 call    ds:GetFileType
.text:0040254A                 cmp     eax, 2
.text:0040254D                 jnz     short loc_402583
.text:0040254F                 sub     esi, edi
.text:00402551                 jz      short loc_402565
.text:00402553                 sub     esi, 1
.text:00402556                 jz      short loc_402561
.text:00402558                 sub     esi, 1
.text:0040255B                 jnz     short loc_40256F
.text:0040255D                 push    0FFFFFFF4h
.text:0040255F                 jmp     short loc_402567
.text:00402561 ; ---------------------------------------------------------------------------
.text:00402561
.text:00402561 loc_402561:                             ; CODE XREF: sub_4024EF+67↑j
.text:00402561                 push    0FFFFFFF5h
.text:00402563                 jmp     short loc_402567
.text:00402565 ; ---------------------------------------------------------------------------
.text:00402565
.text:00402565 loc_402565:                             ; CODE XREF: sub_4024EF+62↑j
.text:00402565                 push    0FFFFFFF6h      ; nStdHandle
.text:00402567
.text:00402567 loc_402567:                             ; CODE XREF: sub_4024EF+70↑j
.text:00402567                                         ; sub_4024EF+74↑j
.text:00402567                 call    ds:GetStdHandle
.text:0040256D                 mov     edi, eax
.text:0040256F
.text:0040256F loc_40256F:                             ; CODE XREF: sub_4024EF+6C↑j
.text:0040256F                 lea     edx, [ebp+Mode] ; lpMode
.text:00402572                 mov     ecx, edi        ; hConsoleHandle
.text:00402574                 call    sub_4024BC
.text:00402579                 jmp     short loc_402585
.text:0040257B ; ---------------------------------------------------------------------------
.text:0040257B
.text:0040257B loc_40257B:                             ; CODE XREF: sub_4024EF+47↑j
.text:0040257B                                         ; sub_4024EF+52↑j
.text:0040257B                 push    6               ; dwErrCode
.text:0040257D                 call    ds:SetLastError
.text:00402583
.text:00402583 loc_402583:                             ; CODE XREF: sub_4024EF+5E↑j
.text:00402583                 xor     eax, eax
.text:00402585
.text:00402585 loc_402585:                             ; CODE XREF: sub_4024EF+8A↑j
.text:00402585                 pop     esi
.text:00402586                 pop     ebx
.text:00402587
.text:00402587 loc_402587:                             ; CODE XREF: sub_4024EF+24↑j
.text:00402587                 pop     edi
.text:00402588                 mov     esp, ebp
.text:0040258A                 pop     ebp
.text:0040258B                 retn
.text:0040258B sub_4024EF      endp
.text:0040258B
.text:0040258C
.text:0040258C ; =============== S U B R O U T I N E =======================================
.text:0040258C
.text:0040258C ; Attributes: bp-based frame
.text:0040258C
.text:0040258C sub_40258C      proc near               ; CODE XREF: sub_401440+42↑p
.text:0040258C                                         ; sub_4019AD+107↑p
.text:0040258C
.text:0040258C arg_0           = dword ptr  8
.text:0040258C
.text:0040258C                 mov     edi, edi
.text:0040258E                 push    ebp             ; cchToCopy
.text:0040258F                 mov     ebp, esp
.text:00402591                 push    esi             ; pszSrc
.text:00402592                 mov     esi, ecx
.text:00402594                 test    esi, esi
.text:00402596                 jz      short loc_4025DE
.text:00402598                 test    edx, edx
.text:0040259A                 jz      short loc_4025DE
.text:0040259C                 mov     eax, [ebp+arg_0]
.text:0040259F                 test    eax, eax
.text:004025A1                 jle     short loc_4025DE
.text:004025A3                 xor     ecx, ecx
.text:004025A5                 test    eax, eax
.text:004025A7                 jz      short loc_4025B0
.text:004025A9                 cmp     eax, 7FFFFFFFh
.text:004025AE                 jbe     short loc_4025B5
.text:004025B0
.text:004025B0 loc_4025B0:                             ; CODE XREF: sub_40258C+1B↑j
.text:004025B0                 mov     ecx, 80070057h
.text:004025B5
.text:004025B5 loc_4025B5:                             ; CODE XREF: sub_40258C+22↑j
.text:004025B5                 test    ecx, ecx
.text:004025B7                 js      short loc_4025C9
.text:004025B9                 push    ecx             ; pcchNewDestLength
.text:004025BA                 push    edx             ; cchDest
.text:004025BB                 push    ecx             ; pszDest
.text:004025BC                 mov     edx, eax
.text:004025BE                 mov     ecx, esi
.text:004025C0                 call    StringCopyWorkerA
.text:004025C5                 mov     ecx, eax
.text:004025C7                 jmp     short loc_4025D0
.text:004025C9 ; ---------------------------------------------------------------------------
.text:004025C9
.text:004025C9 loc_4025C9:                             ; CODE XREF: sub_40258C+2B↑j
.text:004025C9                 test    eax, eax
.text:004025CB                 jz      short loc_4025D0
.text:004025CD                 mov     byte ptr [esi], 0
.text:004025D0
.text:004025D0 loc_4025D0:                             ; CODE XREF: sub_40258C+3B↑j
.text:004025D0                                         ; sub_40258C+3F↑j
.text:004025D0                 test    ecx, ecx
.text:004025D2                 jns     short loc_4025E5
.text:004025D4                 movzx   eax, cx
.text:004025D7                 push    eax             ; dwErrCode
.text:004025D8                 call    ds:SetLastError
.text:004025DE
.text:004025DE loc_4025DE:                             ; CODE XREF: sub_40258C+A↑j
.text:004025DE                                         ; sub_40258C+E↑j ...
.text:004025DE                 xor     eax, eax
.text:004025E0
.text:004025E0 loc_4025E0:                             ; CODE XREF: sub_40258C+5C↓j
.text:004025E0                 pop     esi
.text:004025E1                 pop     ebp
.text:004025E2                 retn    4
.text:004025E5 ; ---------------------------------------------------------------------------
.text:004025E5
.text:004025E5 loc_4025E5:                             ; CODE XREF: sub_40258C+46↑j
.text:004025E5                 xor     eax, eax
.text:004025E7                 inc     eax
.text:004025E8                 jmp     short loc_4025E0
.text:004025E8 sub_40258C      endp ; sp-analysis failed
.text:004025E8
.text:004025EA
.text:004025EA ; =============== S U B R O U T I N E =======================================
.text:004025EA
.text:004025EA ; Attributes: bp-based frame
.text:004025EA
.text:004025EA sub_4025EA      proc near               ; CODE XREF: sub_4019AD+DA↑p
.text:004025EA                                         ; sub_4023BD+DE↑p ...
.text:004025EA
.text:004025EA arg_0           = dword ptr  8
.text:004025EA
.text:004025EA                 mov     edi, edi
.text:004025EC                 push    ebp             ; cchToCopy
.text:004025ED                 mov     ebp, esp
.text:004025EF                 push    esi             ; pszSrc
.text:004025F0                 mov     esi, ecx
.text:004025F2                 test    esi, esi
.text:004025F4                 jz      short loc_40263E
.text:004025F6                 test    edx, edx
.text:004025F8                 jz      short loc_40263E
.text:004025FA                 mov     eax, [ebp+arg_0]
.text:004025FD                 test    eax, eax
.text:004025FF                 jle     short loc_40263E
.text:00402601                 xor     ecx, ecx
.text:00402603                 test    eax, eax
.text:00402605                 jz      short loc_40260E
.text:00402607                 cmp     eax, 7FFFFFFFh
.text:0040260C                 jbe     short loc_402613
.text:0040260E
.text:0040260E loc_40260E:                             ; CODE XREF: sub_4025EA+1B↑j
.text:0040260E                 mov     ecx, 80070057h
.text:00402613
.text:00402613 loc_402613:                             ; CODE XREF: sub_4025EA+22↑j
.text:00402613                 test    ecx, ecx
.text:00402615                 js      short loc_402627
.text:00402617                 push    ecx             ; pcchNewDestLength
.text:00402618                 push    edx             ; cchDest
.text:00402619                 push    ecx             ; pszDest
.text:0040261A                 mov     edx, eax
.text:0040261C                 mov     ecx, esi
.text:0040261E                 call    StringCopyWorkerW
.text:00402623                 mov     ecx, eax
.text:00402625                 jmp     short loc_402630
.text:00402627 ; ---------------------------------------------------------------------------
.text:00402627
.text:00402627 loc_402627:                             ; CODE XREF: sub_4025EA+2B↑j
.text:00402627                 test    eax, eax
.text:00402629                 jz      short loc_402630
.text:0040262B                 xor     eax, eax
.text:0040262D                 mov     [esi], ax
.text:00402630
.text:00402630 loc_402630:                             ; CODE XREF: sub_4025EA+3B↑j
.text:00402630                                         ; sub_4025EA+3F↑j
.text:00402630                 test    ecx, ecx
.text:00402632                 jns     short loc_402645
.text:00402634                 movzx   eax, cx
.text:00402637                 push    eax             ; dwErrCode
.text:00402638                 call    ds:SetLastError
.text:0040263E
.text:0040263E loc_40263E:                             ; CODE XREF: sub_4025EA+A↑j
.text:0040263E                                         ; sub_4025EA+E↑j ...
.text:0040263E                 xor     eax, eax
.text:00402640
.text:00402640 loc_402640:                             ; CODE XREF: sub_4025EA+5E↓j
.text:00402640                 pop     esi
.text:00402641                 pop     ebp
.text:00402642                 retn    4
.text:00402645 ; ---------------------------------------------------------------------------
.text:00402645
.text:00402645 loc_402645:                             ; CODE XREF: sub_4025EA+48↑j
.text:00402645                 xor     eax, eax
.text:00402647                 inc     eax
.text:00402648                 jmp     short loc_402640
.text:00402648 sub_4025EA      endp ; sp-analysis failed
.text:00402648
.text:0040264A
.text:0040264A ; =============== S U B R O U T I N E =======================================
.text:0040264A
.text:0040264A ; Attributes: bp-based frame
.text:0040264A
.text:0040264A sub_40264A      proc near               ; CODE XREF: sub_403157+73↓p
.text:0040264A
.text:0040264A arg_0           = dword ptr  8
.text:0040264A
.text:0040264A                 mov     edi, edi
.text:0040264C                 push    ebp
.text:0040264D                 mov     ebp, esp
.text:0040264F                 mov     eax, edx
.text:00402651                 test    ecx, ecx
.text:00402653                 jz      short loc_402674
.text:00402655                 test    eax, eax
.text:00402657                 jz      short loc_402674
.text:00402659                 mov     edx, [ebp+arg_0]
.text:0040265C                 test    edx, edx
.text:0040265E                 jle     short loc_402674
.text:00402660                 push    eax
.text:00402661                 call    sub_402CBC
.text:00402666                 test    eax, eax
.text:00402668                 jns     short loc_40267A
.text:0040266A                 movzx   eax, ax
.text:0040266D                 push    eax             ; dwErrCode
.text:0040266E                 call    ds:SetLastError
.text:00402674
.text:00402674 loc_402674:                             ; CODE XREF: sub_40264A+9↑j
.text:00402674                                         ; sub_40264A+D↑j ...
.text:00402674                 xor     eax, eax
.text:00402676
.text:00402676 loc_402676:                             ; CODE XREF: sub_40264A+33↓j
.text:00402676                 pop     ebp
.text:00402677                 retn    4
.text:0040267A ; ---------------------------------------------------------------------------
.text:0040267A
.text:0040267A loc_40267A:                             ; CODE XREF: sub_40264A+1E↑j
.text:0040267A                 xor     eax, eax
.text:0040267C                 inc     eax
.text:0040267D                 jmp     short loc_402676
.text:0040267D sub_40264A      endp
.text:0040267D
.text:0040267F
.text:0040267F ; =============== S U B R O U T I N E =======================================
.text:0040267F
.text:0040267F
.text:0040267F ; int __thiscall sub_40267F(LPCWSTR lpString)
.text:0040267F sub_40267F      proc near               ; CODE XREF: sub_4019AD+90↑p
.text:0040267F                                         ; sub_402021+15↑p ...
.text:0040267F                 test    ecx, ecx
.text:00402681                 jnz     short loc_402686
.text:00402683                 xor     eax, eax
.text:00402685                 retn
.text:00402686 ; ---------------------------------------------------------------------------
.text:00402686
.text:00402686 loc_402686:                             ; CODE XREF: sub_40267F+2↑j
.text:00402686                 push    ecx             ; lpString
.text:00402687                 call    ds:lstrlenW
.text:0040268D                 retn
.text:0040268D sub_40267F      endp
.text:0040268D
.text:0040268E
.text:0040268E ; =============== S U B R O U T I N E =======================================
.text:0040268E
.text:0040268E ; Attributes: bp-based frame
.text:0040268E
.text:0040268E ; int __fastcall sub_40268E(PCNZWCH lpString1, PCNZWCH lpString2, int, int)
.text:0040268E sub_40268E      proc near               ; CODE XREF: sub_40411D+86↓p
.text:0040268E
.text:0040268E arg_0           = dword ptr  8
.text:0040268E
.text:0040268E                 mov     edi, edi
.text:00402690                 push    ebp
.text:00402691                 mov     ebp, esp
.text:00402693                 test    ecx, ecx
.text:00402695                 jz      short loc_4026BD
.text:00402697                 test    edx, edx
.text:00402699                 jz      short loc_4026BD
.text:0040269B                 push    0FFFFFFFFh      ; cchCount2
.text:0040269D                 xor     eax, eax
.text:0040269F                 cmp     [ebp+arg_0], 1
.text:004026A3                 push    edx             ; lpString2
.text:004026A4                 push    0FFFFFFFFh      ; cchCount1
.text:004026A6                 setz    al
.text:004026A9                 push    ecx             ; lpString1
.text:004026AA                 push    eax             ; dwCmpFlags
.text:004026AB                 call    ds:GetThreadLocale
.text:004026B1                 push    eax             ; Locale
.text:004026B2                 call    ds:CompareStringW
.text:004026B8                 sub     eax, 2
.text:004026BB                 jmp     short loc_4026D1
.text:004026BD ; ---------------------------------------------------------------------------
.text:004026BD
.text:004026BD loc_4026BD:                             ; CODE XREF: sub_40268E+7↑j
.text:004026BD                                         ; sub_40268E+B↑j
.text:004026BD                 call    ds:GetLastError
.text:004026C3                 test    eax, eax
.text:004026C5                 jnz     short loc_4026CF
.text:004026C7                 push    57h ; 'W'       ; dwErrCode
.text:004026C9                 call    ds:SetLastError
.text:004026CF
.text:004026CF loc_4026CF:                             ; CODE XREF: sub_40268E+37↑j
.text:004026CF                 xor     eax, eax
.text:004026D1
.text:004026D1 loc_4026D1:                             ; CODE XREF: sub_40268E+2D↑j
.text:004026D1                 pop     ebp
.text:004026D2                 retn    8
.text:004026D2 sub_40268E      endp
.text:004026D2
.text:004026D5
.text:004026D5 ; =============== S U B R O U T I N E =======================================
.text:004026D5
.text:004026D5 ; Attributes: bp-based frame info_from_lumina
.text:004026D5
.text:004026D5 ; int __fastcall ShowMessage(FILE *File, LPCWSTR lpString)
.text:004026D5 _ShowMessage@8  proc near               ; CODE XREF: sub_401440+E2↑p
.text:004026D5                                         ; sub_401440+104↑p ...
.text:004026D5
.text:004026D5 var_10          = dword ptr -10h
.text:004026D5 lpWideCharStr   = dword ptr -0Ch
.text:004026D5 hConsoleOutput  = dword ptr -8
.text:004026D5 NumberOfCharsWritten= dword ptr -4
.text:004026D5
.text:004026D5                 mov     edi, edi
.text:004026D7                 push    ebp
.text:004026D8                 mov     ebp, esp
.text:004026DA                 sub     esp, 10h
.text:004026DD                 and     [ebp+NumberOfCharsWritten], 0
.text:004026E1                 push    ebx
.text:004026E2                 push    esi
.text:004026E3                 mov     ebx, ecx
.text:004026E5                 push    edi
.text:004026E6                 mov     edi, edx
.text:004026E8                 test    ebx, ebx
.text:004026EA                 jz      loc_40290E
.text:004026F0                 test    edi, edi
.text:004026F2                 jz      loc_40290E
.text:004026F8                 call    sub_4024EF
.text:004026FD                 cmp     eax, 1
.text:00402700                 jnz     loc_4027F6
.text:00402706                 push    eax
.text:00402707                 call    sub_404F2C
.text:0040270C                 pop     ecx
.text:0040270D                 cmp     ebx, eax
.text:0040270F                 jnz     short loc_402720
.text:00402711                 push    0FFFFFFF5h      ; nStdHandle
.text:00402713                 call    ds:GetStdHandle
.text:00402719                 mov     ebx, eax
.text:0040271B                 mov     [ebp+hConsoleOutput], ebx
.text:0040271E                 jmp     short loc_40273D
.text:00402720 ; ---------------------------------------------------------------------------
.text:00402720
.text:00402720 loc_402720:                             ; CODE XREF: ShowMessage(x,x)+3A↑j
.text:00402720                 push    2
.text:00402722                 call    sub_404F2C
.text:00402727                 pop     ecx
.text:00402728                 cmp     ebx, eax
.text:0040272A                 jnz     loc_4027DE
.text:00402730                 push    0FFFFFFF4h      ; nStdHandle
.text:00402732                 call    ds:GetStdHandle
.text:00402738                 mov     ebx, eax
.text:0040273A                 mov     [ebp+hConsoleOutput], eax
.text:0040273D
.text:0040273D loc_40273D:                             ; CODE XREF: ShowMessage(x,x)+49↑j
.text:0040273D                 and     [ebp+NumberOfCharsWritten], 0
.text:00402741                 mov     ecx, edi        ; lpString
.text:00402743                 call    sub_40267F
.text:00402748                 push    0               ; lpReserved
.text:0040274A                 mov     esi, eax
.text:0040274C                 lea     eax, [ebp+NumberOfCharsWritten]
.text:0040274F                 push    eax             ; lpNumberOfCharsWritten
.text:00402750                 push    esi             ; nNumberOfCharsToWrite
.text:00402751                 push    edi             ; lpBuffer
.text:00402752                 push    ebx             ; hConsoleOutput
.text:00402753                 call    ds:WriteConsoleW
.text:00402759                 test    eax, eax
.text:0040275B                 jz      short loc_402762
.text:0040275D                 cmp     esi, [ebp+NumberOfCharsWritten]
.text:00402760                 jz      short loc_4027BA
.text:00402762
.text:00402762 loc_402762:                             ; CODE XREF: ShowMessage(x,x)+86↑j
.text:00402762                 call    ds:GetLastError
.text:00402768                 cmp     eax, 8
.text:0040276B                 jnz     short loc_4027C2
.text:0040276D                 mov     ecx, edi        ; lpString
.text:0040276F                 call    sub_40267F
.text:00402774                 xor     ebx, ebx
.text:00402776                 mov     [ebp+lpWideCharStr], eax
.text:00402779                 test    eax, eax
.text:0040277B                 jz      short loc_4027BA
.text:0040277D                 mov     ecx, 400h
.text:00402782
.text:00402782 loc_402782:                             ; CODE XREF: ShowMessage(x,x)+E3↓j
.text:00402782                 mov     esi, eax
.text:00402784                 sub     esi, ebx
.text:00402786                 cmp     esi, ecx
.text:00402788                 jbe     short loc_40278C
.text:0040278A                 mov     esi, ecx
.text:0040278C
.text:0040278C loc_40278C:                             ; CODE XREF: ShowMessage(x,x)+B3↑j
.text:0040278C                 push    0               ; lpReserved
.text:0040278E                 lea     eax, [ebp+NumberOfCharsWritten]
.text:00402791                 push    eax             ; lpNumberOfCharsWritten
.text:00402792                 push    esi             ; nNumberOfCharsToWrite
.text:00402793                 push    edi             ; lpBuffer
.text:00402794                 push    [ebp+hConsoleOutput] ; hConsoleOutput
.text:00402797                 call    ds:WriteConsoleW
.text:0040279D                 test    eax, eax
.text:0040279F                 jz      short loc_4027C2
.text:004027A1                 cmp     esi, [ebp+NumberOfCharsWritten]
.text:004027A4                 jnz     short loc_4027C2
.text:004027A6                 mov     eax, [ebp+lpWideCharStr]
.text:004027A9                 mov     ecx, 400h
.text:004027AE                 add     ebx, ecx
.text:004027B0                 add     edi, 800h
.text:004027B6                 cmp     ebx, eax
.text:004027B8                 jb      short loc_402782
.text:004027BA
.text:004027BA loc_4027BA:                             ; CODE XREF: ShowMessage(x,x)+8B↑j
.text:004027BA                                         ; ShowMessage(x,x)+A6↑j ...
.text:004027BA                 xor     eax, eax
.text:004027BC                 inc     eax
.text:004027BD                 jmp     loc_402922
.text:004027C2 ; ---------------------------------------------------------------------------
.text:004027C2
.text:004027C2 loc_4027C2:                             ; CODE XREF: ShowMessage(x,x)+96↑j
.text:004027C2                                         ; ShowMessage(x,x)+CA↑j ...
.text:004027C2                 push    2
.text:004027C4
.text:004027C4 loc_4027C4:                             ; CODE XREF: ShowMessage(x,x)+234↓j
.text:004027C4                 call    sub_404F2C
.text:004027C9                 pop     ecx
.text:004027CA                 mov     ecx, eax
.text:004027CC                 call    sub_401C9A
.text:004027D1                 call    sub_401D53
.text:004027D6                 push    1               ; uExitCode
.text:004027D8                 call    ds:ExitProcess
.text:004027DE ; ---------------------------------------------------------------------------
.text:004027DE
.text:004027DE loc_4027DE:                             ; CODE XREF: ShowMessage(x,x)+55↑j
.text:004027DE                 call    ds:GetLastError
.text:004027E4                 test    eax, eax
.text:004027E6                 jnz     loc_402920
.text:004027EC                 push    42Bh
.text:004027F1                 jmp     loc_40291A
.text:004027F6 ; ---------------------------------------------------------------------------
.text:004027F6
.text:004027F6 loc_4027F6:                             ; CODE XREF: ShowMessage(x,x)+2B↑j
.text:004027F6                 mov     ecx, edi        ; lpString
.text:004027F8                 call    sub_40267F
.text:004027FD                 push    100h            ; Size
.text:00402802                 mov     esi, eax
.text:00402804                 push    0               ; Val
.text:00402806                 push    offset MultiByteStr ; void *
.text:0040280B                 mov     [ebp+var_10], esi
.text:0040280E                 call    memset
.text:00402813                 xor     ecx, ecx
.text:00402815                 add     esp, 0Ch
.text:00402818                 mov     eax, ecx
.text:0040281A                 mov     [ebp+hConsoleOutput], eax
.text:0040281D                 test    esi, esi
.text:0040281F                 jz      short loc_4027BA
.text:00402821
.text:00402821 loc_402821:                             ; CODE XREF: ShowMessage(x,x)+218↓j
.text:00402821                 sub     esi, eax
.text:00402823                 mov     [ebp+NumberOfCharsWritten], ecx
.text:00402826                 cmp     esi, 0FFh
.text:0040282C                 jbe     short loc_402833
.text:0040282E                 mov     esi, 0FFh
.text:00402833
.text:00402833 loc_402833:                             ; CODE XREF: ShowMessage(x,x)+157↑j
.text:00402833                 lea     eax, [edi+eax*2]
.text:00402836                 mov     [ebp+lpWideCharStr], eax
.text:00402839
.text:00402839 loc_402839:                             ; CODE XREF: ShowMessage(x,x)+1A7↓j
.text:00402839                 push    ecx             ; lpUsedDefaultChar
.text:0040283A                 push    ecx             ; lpDefaultChar
.text:0040283B                 push    ecx             ; cbMultiByte
.text:0040283C                 push    ecx             ; lpMultiByteStr
.text:0040283D                 push    esi             ; cchWideChar
.text:0040283E                 push    eax             ; lpWideCharStr
.text:0040283F                 push    ecx             ; dwFlags
.text:00402840                 call    ds:GetConsoleOutputCP
.text:00402846                 push    eax             ; CodePage
.text:00402847                 call    ds:WideCharToMultiByte
.text:0040284D                 mov     [ebp+NumberOfCharsWritten], eax
.text:00402850                 test    eax, eax
.text:00402852                 jz      loc_402907
.text:00402858                 cmp     eax, 0FFh
.text:0040285D                 jbe     short loc_40287E
.text:0040285F                 add     eax, 0FFFFFF01h
.text:00402864                 cmp     eax, 3
.text:00402867                 jbe     short loc_40286F
.text:00402869                 shr     eax, 1
.text:0040286B                 sub     esi, eax
.text:0040286D                 jmp     short loc_402870
.text:0040286F ; ---------------------------------------------------------------------------
.text:0040286F
.text:0040286F loc_40286F:                             ; CODE XREF: ShowMessage(x,x)+192↑j
.text:0040286F                 dec     esi
.text:00402870
.text:00402870 loc_402870:                             ; CODE XREF: ShowMessage(x,x)+198↑j
.text:00402870                 xor     ecx, ecx
.text:00402872                 mov     [ebp+NumberOfCharsWritten], ecx
.text:00402875                 test    esi, esi
.text:00402877                 jz      short loc_4028F2
.text:00402879                 mov     eax, [ebp+lpWideCharStr]
.text:0040287C                 jmp     short loc_402839
.text:0040287E ; ---------------------------------------------------------------------------
.text:0040287E
.text:0040287E loc_40287E:                             ; CODE XREF: ShowMessage(x,x)+188↑j
.text:0040287E                 cmp     eax, esi
.text:00402880                 jnb     short loc_402884
.text:00402882                 mov     esi, eax
.text:00402884
.text:00402884 loc_402884:                             ; CODE XREF: ShowMessage(x,x)+1AB↑j
.text:00402884                 push    100h            ; Size
.text:00402889                 push    0               ; Val
.text:0040288B                 push    offset MultiByteStr ; void *
.text:00402890                 call    memset
.text:00402895                 add     esp, 0Ch
.text:00402898                 xor     eax, eax
.text:0040289A                 push    eax             ; lpUsedDefaultChar
.text:0040289B                 push    eax             ; lpDefaultChar
.text:0040289C                 push    0FFh            ; cbMultiByte
.text:004028A1                 push    offset MultiByteStr ; lpMultiByteStr
.text:004028A6                 push    esi             ; cchWideChar
.text:004028A7                 push    [ebp+lpWideCharStr] ; lpWideCharStr
.text:004028AA                 push    eax             ; dwFlags
.text:004028AB                 call    ds:GetConsoleOutputCP
.text:004028B1                 push    eax             ; CodePage
.text:004028B2                 call    ds:WideCharToMultiByte
.text:004028B8                 mov     [ebp+NumberOfCharsWritten], eax
.text:004028BB                 test    eax, eax
.text:004028BD                 jz      short loc_402907
.text:004028BF                 add     [ebp+hConsoleOutput], esi
.text:004028C2                 push    offset MultiByteStr
.text:004028C7                 push    offset Format   ; "%s"
.text:004028CC                 push    ebx             ; Stream
.text:004028CD                 call    ds:fprintf
.text:004028D3                 push    ebx             ; Stream
.text:004028D4                 call    ds:fflush
.text:004028DA                 mov     eax, [ebp+hConsoleOutput]
.text:004028DD                 add     esp, 10h
.text:004028E0                 mov     esi, [ebp+var_10]
.text:004028E3                 cmp     esi, eax
.text:004028E5                 jbe     loc_4027BA
.text:004028EB                 xor     ecx, ecx
.text:004028ED                 jmp     loc_402821
.text:004028F2 ; ---------------------------------------------------------------------------
.text:004028F2
.text:004028F2 loc_4028F2:                             ; CODE XREF: ShowMessage(x,x)+1A2↑j
.text:004028F2                 call    ds:GetLastError
.text:004028F8                 test    eax, eax
.text:004028FA                 jnz     short loc_402907
.text:004028FC                 push    42Bh            ; dwErrCode
.text:00402901                 call    ds:SetLastError
.text:00402907
.text:00402907 loc_402907:                             ; CODE XREF: ShowMessage(x,x)+17D↑j
.text:00402907                                         ; ShowMessage(x,x)+1E8↑j ...
.text:00402907                 push    1
.text:00402909                 jmp     loc_4027C4
.text:0040290E ; ---------------------------------------------------------------------------
.text:0040290E
.text:0040290E loc_40290E:                             ; CODE XREF: ShowMessage(x,x)+15↑j
.text:0040290E                                         ; ShowMessage(x,x)+1D↑j
.text:0040290E                 call    ds:GetLastError
.text:00402914                 test    eax, eax
.text:00402916                 jnz     short loc_402920
.text:00402918                 push    57h ; 'W'       ; dwErrCode
.text:0040291A
.text:0040291A loc_40291A:                             ; CODE XREF: ShowMessage(x,x)+11C↑j
.text:0040291A                 call    ds:SetLastError
.text:00402920
.text:00402920 loc_402920:                             ; CODE XREF: ShowMessage(x,x)+111↑j
.text:00402920                                         ; ShowMessage(x,x)+241↑j
.text:00402920                 xor     eax, eax
.text:00402922
.text:00402922 loc_402922:                             ; CODE XREF: ShowMessage(x,x)+E8↑j
.text:00402922                 pop     edi
.text:00402923                 pop     esi
.text:00402924                 pop     ebx
.text:00402925                 mov     esp, ebp
.text:00402927                 pop     ebp
.text:00402928                 retn
.text:00402928 _ShowMessage@8  endp
.text:00402928
.text:00402929
.text:00402929 ; =============== S U B R O U T I N E =======================================
.text:00402929
.text:00402929 ; Attributes: bp-based frame
.text:00402929
.text:00402929 ; int __cdecl sub_402929(FILE *Stream, int, int, LPCVOID lpSource, char)
.text:00402929 sub_402929      proc near               ; CODE XREF: sub_401577+5B↑p
.text:00402929                                         ; sub_401CC0+61↑p
.text:00402929
.text:00402929 var_8           = dword ptr -8
.text:00402929 Arguments       = dword ptr -4
.text:00402929 Stream          = dword ptr  8
.text:00402929 arg_4           = dword ptr  0Ch
.text:00402929 arg_8           = dword ptr  10h
.text:00402929 lpSource        = dword ptr  14h
.text:00402929 arg_10          = byte ptr  18h
.text:00402929
.text:00402929                 mov     edi, edi
.text:0040292B                 push    ebp
.text:0040292C                 mov     ebp, esp
.text:0040292E                 push    ecx
.text:0040292F                 push    ecx
.text:00402930                 mov     edx, [ebp+lpSource] ; lpString
.text:00402933                 push    ebx
.text:00402934                 push    esi
.text:00402935                 test    edx, edx
.text:00402937                 jz      loc_402A3D
.text:0040293D                 cmp     [ebp+Stream], 0
.text:00402941                 jz      loc_402A3D
.text:00402947                 cmp     [ebp+arg_4], 0
.text:0040294B                 jnz     short loc_40295A
.text:0040294D
.text:0040294D loc_40294D:                             ; CODE XREF: sub_402929+10F↓j
.text:0040294D                 mov     ecx, [ebp+Stream] ; Stream
.text:00402950                 call    _ShowMessage@8  ; ShowMessage(x,x)
.text:00402955                 jmp     loc_402A51
.text:0040295A ; ---------------------------------------------------------------------------
.text:0040295A
.text:0040295A loc_40295A:                             ; CODE XREF: sub_402929+22↑j
.text:0040295A                 cmp     [ebp+arg_8], 0
.text:0040295E                 jnz     loc_4029F1
.text:00402964                 or      ebx, 0FFFFFFFFh
.text:00402967                 xor     ecx, ecx
.text:00402969
.text:00402969 loc_402969:                             ; CODE XREF: sub_402929+B3↓j
.text:00402969                 lea     eax, [ebp+arg_10]
.text:0040296C                 mov     [ebp+Arguments], eax
.text:0040296F                 xor     eax, eax
.text:00402971                 cmp     ebx, 0FFFFFFFFh
.text:00402974                 push    1
.text:00402976                 setnz   al
.text:00402979                 xor     edx, edx
.text:0040297B                 dec     eax
.text:0040297C                 and     eax, 800h
.text:00402981                 add     eax, 800h
.text:00402986                 add     ecx, eax
.text:00402988                 push    ecx
.text:00402989                 push    3
.text:0040298B                 mov     [ebp+var_8], ecx
.text:0040298E                 pop     ecx
.text:0040298F                 call    sub_4019AD
.text:00402994                 mov     esi, eax
.text:00402996                 test    esi, esi
.text:00402998                 jz      short loc_4029E3
.text:0040299A                 lea     eax, [ebp+Arguments]
.text:0040299D                 push    eax             ; Arguments
.text:0040299E                 mov     eax, [ebp+var_8]
.text:004029A1                 dec     eax
.text:004029A2                 push    eax             ; nSize
.text:004029A3                 push    esi             ; lpBuffer
.text:004029A4                 push    0               ; dwLanguageId
.text:004029A6                 push    0               ; dwMessageId
.text:004029A8                 push    [ebp+lpSource]  ; lpSource
.text:004029AB                 push    400h            ; dwFlags
.text:004029B0                 call    ds:FormatMessageW
.text:004029B6                 mov     ebx, eax
.text:004029B8                 test    ebx, ebx
.text:004029BA                 jnz     short loc_4029D1
.text:004029BC                 call    ds:GetLastError
.text:004029C2                 test    eax, eax
.text:004029C4                 jz      short loc_4029DE
.text:004029C6                 call    ds:GetLastError
.text:004029CC                 cmp     eax, 7Ah ; 'z'
.text:004029CF                 jnz     short loc_402A4F
.text:004029D1
.text:004029D1 loc_4029D1:                             ; CODE XREF: sub_402929+91↑j
.text:004029D1                 and     [ebp+Arguments], 0
.text:004029D5                 test    ebx, ebx
.text:004029D7                 jnz     short loc_402A36
.text:004029D9                 mov     ecx, [ebp+var_8]
.text:004029DC                 jmp     short loc_402969
.text:004029DE ; ---------------------------------------------------------------------------
.text:004029DE
.text:004029DE loc_4029DE:                             ; CODE XREF: sub_402929+9B↑j
.text:004029DE                 xor     eax, eax
.text:004029E0                 inc     eax
.text:004029E1                 jmp     short loc_402A51
.text:004029E3 ; ---------------------------------------------------------------------------
.text:004029E3
.text:004029E3 loc_4029E3:                             ; CODE XREF: sub_402929+6F↑j
.text:004029E3                                         ; sub_402929+E7↓j
.text:004029E3                 call    ds:GetLastError
.text:004029E9                 test    eax, eax
.text:004029EB                 jnz     short loc_402A4F
.text:004029ED                 push    8
.text:004029EF                 jmp     short loc_402A49
.text:004029F1 ; ---------------------------------------------------------------------------
.text:004029F1
.text:004029F1 loc_4029F1:                             ; CODE XREF: sub_402929+35↑j
.text:004029F1                 xor     ebx, ebx
.text:004029F3
.text:004029F3 loc_4029F3:                             ; CODE XREF: sub_402929+101↓j
.text:004029F3                 push    1
.text:004029F5                 add     ebx, 800h
.text:004029FB                 lea     eax, [ebp+arg_10]
.text:004029FE                 push    ebx
.text:004029FF                 push    3
.text:00402A01                 xor     edx, edx
.text:00402A03                 mov     [ebp+Arguments], eax
.text:00402A06                 pop     ecx
.text:00402A07                 call    sub_4019AD
.text:00402A0C                 mov     esi, eax
.text:00402A0E                 test    esi, esi
.text:00402A10                 jz      short loc_4029E3
.text:00402A12                 push    [ebp+Arguments] ; Args
.text:00402A15                 mov     edx, ebx
.text:00402A17                 mov     ecx, esi        ; int
.text:00402A19                 push    [ebp+lpSource]  ; Format
.text:00402A1C                 call    ?StringCchVPrintfW@@YGJPAGIPBGPAD@Z ; StringCchVPrintfW(ushort *,uint,ushort const *,char *)
.text:00402A21                 and     [ebp+Arguments], 0
.text:00402A25                 cmp     eax, 8007007Ah
.text:00402A2A                 jz      short loc_4029F3
.text:00402A2C                 test    eax, eax
.text:00402A2E                 jns     short loc_402A36
.text:00402A30                 movzx   eax, ax
.text:00402A33                 push    eax
.text:00402A34                 jmp     short loc_402A49
.text:00402A36 ; ---------------------------------------------------------------------------
.text:00402A36
.text:00402A36 loc_402A36:                             ; CODE XREF: sub_402929+AE↑j
.text:00402A36                                         ; sub_402929+105↑j
.text:00402A36                 mov     edx, esi
.text:00402A38                 jmp     loc_40294D
.text:00402A3D ; ---------------------------------------------------------------------------
.text:00402A3D
.text:00402A3D loc_402A3D:                             ; CODE XREF: sub_402929+E↑j
.text:00402A3D                                         ; sub_402929+18↑j
.text:00402A3D                 call    ds:GetLastError
.text:00402A43                 test    eax, eax
.text:00402A45                 jnz     short loc_402A4F
.text:00402A47                 push    57h ; 'W'       ; dwErrCode
.text:00402A49
.text:00402A49 loc_402A49:                             ; CODE XREF: sub_402929+C6↑j
.text:00402A49                                         ; sub_402929+10B↑j
.text:00402A49                 call    ds:SetLastError
.text:00402A4F
.text:00402A4F loc_402A4F:                             ; CODE XREF: sub_402929+A6↑j
.text:00402A4F                                         ; sub_402929+C2↑j ...
.text:00402A4F                 xor     eax, eax
.text:00402A51
.text:00402A51 loc_402A51:                             ; CODE XREF: sub_402929+2C↑j
.text:00402A51                                         ; sub_402929+B8↑j
.text:00402A51                 pop     esi
.text:00402A52                 pop     ebx
.text:00402A53                 mov     esp, ebp
.text:00402A55                 pop     ebp
.text:00402A56                 retn
.text:00402A56 sub_402929      endp
.text:00402A56
.text:00402A57
.text:00402A57 ; =============== S U B R O U T I N E =======================================
.text:00402A57
.text:00402A57
.text:00402A57 sub_402A57      proc near               ; CODE XREF: sub_401577+125↑p
.text:00402A57                                         ; sub_401577:loc_4016A4↑p ...
.text:00402A57                 mov     edi, edi
.text:00402A59                 push    esi
.text:00402A5A                 mov     esi, ecx
.text:00402A5C                 test    esi, esi
.text:00402A5E                 jnz     short loc_402A76
.text:00402A60                 call    ds:GetLastError
.text:00402A66                 test    eax, eax
.text:00402A68                 jnz     short loc_402A72
.text:00402A6A                 push    57h ; 'W'       ; dwErrCode
.text:00402A6C                 call    ds:SetLastError
.text:00402A72
.text:00402A72 loc_402A72:                             ; CODE XREF: sub_402A57+11↑j
.text:00402A72                 xor     eax, eax
.text:00402A74                 pop     esi
.text:00402A75                 retn
.text:00402A76 ; ---------------------------------------------------------------------------
.text:00402A76
.text:00402A76 loc_402A76:                             ; CODE XREF: sub_402A57+7↑j
.text:00402A76                 push    ebx
.text:00402A77                 xor     ebx, ebx
.text:00402A79                 cmp     [esi], ebx
.text:00402A7B                 jnz     short loc_402A82
.text:00402A7D                 xor     eax, eax
.text:00402A7F                 inc     eax
.text:00402A80                 jmp     short loc_402AC3
.text:00402A82 ; ---------------------------------------------------------------------------
.text:00402A82
.text:00402A82 loc_402A82:                             ; CODE XREF: sub_402A57+24↑j
.text:00402A82                 push    edi
.text:00402A83                 call    ds:GetProcessHeap
.text:00402A89                 mov     edi, eax
.text:00402A8B                 test    edi, edi
.text:00402A8D                 jz      short loc_402AA6
.text:00402A8F                 mov     ecx, [esi]      ; lpMem
.text:00402A91                 call    sub_402C7D
.text:00402A96                 cmp     eax, 0FFFFFFFFh
.text:00402A99                 jnz     short loc_402AAA
.text:00402A9B                 push    80004003h       ; dwErrCode
.text:00402AA0                 call    ds:SetLastError
.text:00402AA6
.text:00402AA6 loc_402AA6:                             ; CODE XREF: sub_402A57+36↑j
.text:00402AA6                 xor     eax, eax
.text:00402AA8                 jmp     short loc_402AC2
.text:00402AAA ; ---------------------------------------------------------------------------
.text:00402AAA
.text:00402AAA loc_402AAA:                             ; CODE XREF: sub_402A57+42↑j
.text:00402AAA                 push    eax             ; Size
.text:00402AAB                 push    ebx             ; Val
.text:00402AAC                 push    dword ptr [esi] ; void *
.text:00402AAE                 call    memset
.text:00402AB3                 add     esp, 0Ch
.text:00402AB6                 push    dword ptr [esi] ; lpMem
.text:00402AB8                 push    ebx             ; dwFlags
.text:00402AB9                 push    edi             ; hHeap
.text:00402ABA                 call    ds:HeapFree
.text:00402AC0                 mov     [esi], ebx
.text:00402AC2
.text:00402AC2 loc_402AC2:                             ; CODE XREF: sub_402A57+51↑j
.text:00402AC2                 pop     edi
.text:00402AC3
.text:00402AC3 loc_402AC3:                             ; CODE XREF: sub_402A57+29↑j
.text:00402AC3                 pop     ebx
.text:00402AC4                 pop     esi
.text:00402AC5                 retn
.text:00402AC5 sub_402A57      endp
.text:00402AC5
.text:00402AC6
.text:00402AC6 ; =============== S U B R O U T I N E =======================================
.text:00402AC6
.text:00402AC6
.text:00402AC6 ; int __thiscall sub_402AC6(LPCVOID lpMem)
.text:00402AC6 sub_402AC6      proc near               ; CODE XREF: sub_402BA1:loc_402BD3↓p
.text:00402AC6                                         ; sub_402C7D:loc_402C9D↓p
.text:00402AC6                 mov     edi, edi
.text:00402AC8                 push    esi
.text:00402AC9                 mov     esi, ecx
.text:00402ACB                 test    esi, esi
.text:00402ACD                 jnz     short loc_402ADD
.text:00402ACF                 call    ds:GetLastError
.text:00402AD5                 test    eax, eax
.text:00402AD7                 jnz     short loc_402AFD
.text:00402AD9                 push    57h ; 'W'
.text:00402ADB                 jmp     short loc_402AF7
.text:00402ADD ; ---------------------------------------------------------------------------
.text:00402ADD
.text:00402ADD loc_402ADD:                             ; CODE XREF: sub_402AC6+7↑j
.text:00402ADD                 call    ds:GetProcessHeap
.text:00402AE3                 test    eax, eax
.text:00402AE5                 jz      short loc_402AFD
.text:00402AE7                 push    esi             ; lpMem
.text:00402AE8                 push    0               ; dwFlags
.text:00402AEA                 push    eax             ; hHeap
.text:00402AEB                 call    ds:HeapValidate
.text:00402AF1                 test    eax, eax
.text:00402AF3                 jnz     short loc_402AFF
.text:00402AF5                 push    6               ; dwErrCode
.text:00402AF7
.text:00402AF7 loc_402AF7:                             ; CODE XREF: sub_402AC6+15↑j
.text:00402AF7                 call    ds:SetLastError
.text:00402AFD
.text:00402AFD loc_402AFD:                             ; CODE XREF: sub_402AC6+11↑j
.text:00402AFD                                         ; sub_402AC6+1F↑j
.text:00402AFD                 xor     eax, eax
.text:00402AFF
.text:00402AFF loc_402AFF:                             ; CODE XREF: sub_402AC6+2D↑j
.text:00402AFF                 pop     esi
.text:00402B00                 retn
.text:00402B00 sub_402AC6      endp
.text:00402B00
.text:00402B01
.text:00402B01 ; =============== S U B R O U T I N E =======================================
.text:00402B01
.text:00402B01 ; Attributes: bp-based frame
.text:00402B01
.text:00402B01 sub_402B01      proc near               ; CODE XREF: sub_401577+CD↑p
.text:00402B01                                         ; sub_4017E2+47↑p ...
.text:00402B01
.text:00402B01 var_20          = dword ptr -20h
.text:00402B01 var_1C          = dword ptr -1Ch
.text:00402B01 ms_exc          = CPPEH_RECORD ptr -18h
.text:00402B01
.text:00402B01 ; __unwind { // __SEH_prolog4
.text:00402B01                 push    10h
.text:00402B03                 push    offset stru_404F60
.text:00402B08                 call    __SEH_prolog4
.text:00402B0D                 mov     esi, ecx
.text:00402B0F                 test    esi, esi
.text:00402B11                 jnz     short loc_402B27
.text:00402B13                 call    ds:GetLastError
.text:00402B19                 test    eax, eax
.text:00402B1B                 jnz     short loc_402B99
.text:00402B1D                 push    57h ; 'W'       ; dwErrCode
.text:00402B1F                 call    ds:SetLastError
.text:00402B25                 jmp     short loc_402B99
.text:00402B27 ; ---------------------------------------------------------------------------
.text:00402B27
.text:00402B27 loc_402B27:                             ; CODE XREF: sub_402B01+10↑j
.text:00402B27                 call    ds:GetProcessHeap
.text:00402B2D                 test    eax, eax
.text:00402B2F                 jz      short loc_402B99
.text:00402B31 ;   __try { // __except at loc_402B59
.text:00402B31                 and     [ebp+ms_exc.registration.TryLevel], 0
.text:00402B35                 push    esi             ; dwBytes
.text:00402B36                 push    0Ch             ; dwFlags
.text:00402B38                 push    eax             ; hHeap
.text:00402B39                 call    ds:HeapAlloc
.text:00402B3F                 mov     [ebp+var_20], eax
.text:00402B3F ;   } // starts at 402B31
.text:00402B42                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
.text:00402B49                 jmp     short loc_402B9B
.text:00402B4B ; ---------------------------------------------------------------------------
.text:00402B4B
.text:00402B4B loc_402B4B:                             ; DATA XREF: .text:stru_404F60↓o
.text:00402B4B ;   __except filter // owned by 402B31
.text:00402B4B                 mov     eax, [ebp+ms_exc.exc_ptr]
.text:00402B4E                 mov     eax, [eax]
.text:00402B50                 mov     eax, [eax]
.text:00402B52                 mov     [ebp+var_1C], eax
.text:00402B55                 xor     eax, eax
.text:00402B57                 inc     eax
.text:00402B58                 retn
.text:00402B59 ; ---------------------------------------------------------------------------
.text:00402B59
.text:00402B59 loc_402B59:                             ; DATA XREF: .text:stru_404F60↓o
.text:00402B59 ;   __except(loc_402B4B) // owned by 402B31
.text:00402B59                 mov     esp, [ebp+ms_exc.old_esp]
.text:00402B5C                 cmp     [ebp+var_1C], 0C0000017h
.text:00402B63                 jz      short loc_402B80
.text:00402B65                 cmp     [ebp+var_1C], 0C0000005h
.text:00402B6C                 jnz     short loc_402B80
.text:00402B6E                 push    570h            ; dwErrCode
.text:00402B73                 call    ds:SetLastError
.text:00402B79                 call    sub_401C13
.text:00402B7E                 jmp     short loc_402B92
.text:00402B80 ; ---------------------------------------------------------------------------
.text:00402B80
.text:00402B80 loc_402B80:                             ; CODE XREF: sub_402B01+62↑j
.text:00402B80                                         ; sub_402B01+6B↑j
.text:00402B80                 call    ds:GetLastError
.text:00402B86                 test    eax, eax
.text:00402B88                 jnz     short loc_402B92
.text:00402B8A                 push    8               ; dwErrCode
.text:00402B8C                 call    ds:SetLastError
.text:00402B92
.text:00402B92 loc_402B92:                             ; CODE XREF: sub_402B01+7D↑j
.text:00402B92                                         ; sub_402B01+87↑j
.text:00402B92                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
.text:00402B99
.text:00402B99 loc_402B99:                             ; CODE XREF: sub_402B01+1A↑j
.text:00402B99                                         ; sub_402B01+24↑j ...
.text:00402B99                 xor     eax, eax
.text:00402B9B
.text:00402B9B loc_402B9B:                             ; CODE XREF: sub_402B01+48↑j
.text:00402B9B                 call    __SEH_epilog4
.text:00402BA0                 retn
.text:00402BA0 ; } // starts at 402B01
.text:00402BA0 sub_402B01      endp
.text:00402BA0
.text:00402BA1
.text:00402BA1 ; =============== S U B R O U T I N E =======================================
.text:00402BA1
.text:00402BA1 ; Attributes: bp-based frame
.text:00402BA1
.text:00402BA1 sub_402BA1      proc near               ; CODE XREF: sub_4017E2+59↑p
.text:00402BA1                                         ; sub_4019AD+130↑p
.text:00402BA1
.text:00402BA1 var_1C          = dword ptr -1Ch
.text:00402BA1 ms_exc          = CPPEH_RECORD ptr -18h
.text:00402BA1
.text:00402BA1 ; __unwind { // __SEH_prolog4
.text:00402BA1                 push    0Ch
.text:00402BA3                 push    offset stru_404F80
.text:00402BA8                 call    __SEH_prolog4
.text:00402BAD                 mov     edi, edx
.text:00402BAF                 mov     esi, ecx
.text:00402BB1                 test    esi, esi
.text:00402BB3                 jz      loc_402C63
.text:00402BB9                 mov     ecx, [esi]      ; lpMem
.text:00402BBB                 test    ecx, ecx
.text:00402BBD                 jz      loc_402C63
.text:00402BC3                 test    edi, edi
.text:00402BC5                 jnz     short loc_402BD3
.text:00402BC7                 mov     ecx, esi
.text:00402BC9                 call    sub_402A57
.text:00402BCE                 jmp     loc_402C77
.text:00402BD3 ; ---------------------------------------------------------------------------
.text:00402BD3
.text:00402BD3 loc_402BD3:                             ; CODE XREF: sub_402BA1+24↑j
.text:00402BD3                 call    sub_402AC6
.text:00402BD8                 test    eax, eax
.text:00402BDA                 jnz     short loc_402BE3
.text:00402BDC                 and     [esi], eax
.text:00402BDE                 jmp     loc_402C75
.text:00402BE3 ; ---------------------------------------------------------------------------
.text:00402BE3
.text:00402BE3 loc_402BE3:                             ; CODE XREF: sub_402BA1+39↑j
.text:00402BE3                 call    ds:GetProcessHeap
.text:00402BE9                 test    eax, eax
.text:00402BEB                 jz      loc_402C75
.text:00402BF1 ;   __try { // __except at loc_402C3C
.text:00402BF1                 and     [ebp+ms_exc.registration.TryLevel], 0
.text:00402BF5                 push    edi             ; dwBytes
.text:00402BF6                 push    dword ptr [esi] ; lpMem
.text:00402BF8                 push    0Ch             ; dwFlags
.text:00402BFA                 push    eax             ; hHeap
.text:00402BFB                 call    ds:HeapReAlloc
.text:00402C01                 test    eax, eax
.text:00402C03                 jnz     short loc_402C20
.text:00402C05
.text:00402C05 loc_402C05:                             ; CODE XREF: sub_402BA1+A5↓j
.text:00402C05                                         ; sub_402BA1+AE↓j
.text:00402C05                 call    ds:GetLastError
.text:00402C0B                 test    eax, eax
.text:00402C0D                 jnz     short loc_402C17
.text:00402C0F                 push    8               ; dwErrCode
.text:00402C11                 call    ds:SetLastError
.text:00402C11 ;   } // starts at 402BF1
.text:00402C17
.text:00402C17 loc_402C17:                             ; CODE XREF: sub_402BA1+6C↑j
.text:00402C17                                         ; sub_402BA1+C0↓j
.text:00402C17                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
.text:00402C1E                 jmp     short loc_402C75
.text:00402C20 ; ---------------------------------------------------------------------------
.text:00402C20
.text:00402C20 loc_402C20:                             ; CODE XREF: sub_402BA1+62↑j
.text:00402C20                 mov     [esi], eax
.text:00402C22                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
.text:00402C29                 xor     eax, eax
.text:00402C2B                 inc     eax
.text:00402C2C                 jmp     short loc_402C77
.text:00402C2E ; ---------------------------------------------------------------------------
.text:00402C2E
.text:00402C2E loc_402C2E:                             ; DATA XREF: .text:stru_404F80↓o
.text:00402C2E ;   __except filter // owned by 402BF1
.text:00402C2E                 mov     eax, [ebp+ms_exc.exc_ptr]
.text:00402C31                 mov     eax, [eax]
.text:00402C33                 mov     eax, [eax]
.text:00402C35                 mov     [ebp+var_1C], eax
.text:00402C38                 xor     eax, eax
.text:00402C3A                 inc     eax
.text:00402C3B                 retn
.text:00402C3C ; ---------------------------------------------------------------------------
.text:00402C3C
.text:00402C3C loc_402C3C:                             ; DATA XREF: .text:stru_404F80↓o
.text:00402C3C ;   __except(loc_402C2E) // owned by 402BF1
.text:00402C3C                 mov     esp, [ebp+ms_exc.old_esp]
.text:00402C3F                 cmp     [ebp+var_1C], 0C0000017h
.text:00402C46                 jz      short loc_402C05
.text:00402C48                 cmp     [ebp+var_1C], 0C0000005h
.text:00402C4F                 jnz     short loc_402C05
.text:00402C51                 push    570h            ; dwErrCode
.text:00402C56                 call    ds:SetLastError
.text:00402C5C                 call    sub_401C13
.text:00402C61                 jmp     short loc_402C17
.text:00402C63 ; ---------------------------------------------------------------------------
.text:00402C63
.text:00402C63 loc_402C63:                             ; CODE XREF: sub_402BA1+12↑j
.text:00402C63                                         ; sub_402BA1+1C↑j
.text:00402C63                 call    ds:GetLastError
.text:00402C69                 test    eax, eax
.text:00402C6B                 jnz     short loc_402C75
.text:00402C6D                 push    57h ; 'W'       ; dwErrCode
.text:00402C6F                 call    ds:SetLastError
.text:00402C75
.text:00402C75 loc_402C75:                             ; CODE XREF: sub_402BA1+3D↑j
.text:00402C75                                         ; sub_402BA1+4A↑j ...
.text:00402C75                 xor     eax, eax
.text:00402C77
.text:00402C77 loc_402C77:                             ; CODE XREF: sub_402BA1+2D↑j
.text:00402C77                                         ; sub_402BA1+8B↑j
.text:00402C77                 call    __SEH_epilog4
.text:00402C7C                 retn
.text:00402C7C ; } // starts at 402BA1
.text:00402C7C sub_402BA1      endp
.text:00402C7C
.text:00402C7D
.text:00402C7D ; =============== S U B R O U T I N E =======================================
.text:00402C7D
.text:00402C7D
.text:00402C7D ; int __thiscall sub_402C7D(LPCVOID lpMem)
.text:00402C7D sub_402C7D      proc near               ; CODE XREF: sub_402A57+3A↑p
.text:00402C7D                 mov     edi, edi
.text:00402C7F                 push    esi
.text:00402C80                 mov     esi, ecx
.text:00402C82                 test    esi, esi
.text:00402C84                 jnz     short loc_402C9D
.text:00402C86                 call    ds:GetLastError
.text:00402C8C                 test    eax, eax
.text:00402C8E                 jnz     short loc_402C98
.text:00402C90                 push    57h ; 'W'       ; dwErrCode
.text:00402C92                 call    ds:SetLastError
.text:00402C98
.text:00402C98 loc_402C98:                             ; CODE XREF: sub_402C7D+11↑j
.text:00402C98                                         ; sub_402C7D+27↓j ...
.text:00402C98                 or      eax, 0FFFFFFFFh
.text:00402C9B                 pop     esi
.text:00402C9C                 retn
.text:00402C9D ; ---------------------------------------------------------------------------
.text:00402C9D
.text:00402C9D loc_402C9D:                             ; CODE XREF: sub_402C7D+7↑j
.text:00402C9D                 call    sub_402AC6
.text:00402CA2                 test    eax, eax
.text:00402CA4                 jz      short loc_402C98
.text:00402CA6                 call    ds:GetProcessHeap
.text:00402CAC                 test    eax, eax
.text:00402CAE                 jz      short loc_402C98
.text:00402CB0                 push    esi             ; lpMem
.text:00402CB1                 push    0               ; dwFlags
.text:00402CB3                 push    eax             ; hHeap
.text:00402CB4                 call    ds:HeapSize
.text:00402CBA                 pop     esi
.text:00402CBB                 retn
.text:00402CBB sub_402C7D      endp
.text:00402CBB
.text:00402CBC
.text:00402CBC ; =============== S U B R O U T I N E =======================================
.text:00402CBC
.text:00402CBC ; Attributes: bp-based frame
.text:00402CBC
.text:00402CBC sub_402CBC      proc near               ; CODE XREF: sub_40264A+17↑p
.text:00402CBC
.text:00402CBC cchDest         = dword ptr  8
.text:00402CBC
.text:00402CBC                 mov     edi, edi
.text:00402CBE                 push    ebp
.text:00402CBF                 mov     ebp, esp
.text:00402CC1                 push    ebx
.text:00402CC2                 push    esi             ; cchToCopy
.text:00402CC3                 xor     esi, esi
.text:00402CC5                 mov     ebx, 80070057h
.text:00402CCA                 mov     eax, esi
.text:00402CCC                 push    edi             ; pszSrc
.text:00402CCD                 mov     edi, ecx
.text:00402CCF                 test    edx, edx
.text:00402CD1                 jz      short loc_402CDB
.text:00402CD3                 cmp     edx, 7FFFFFFFh
.text:00402CD9                 jbe     short loc_402CDD
.text:00402CDB
.text:00402CDB loc_402CDB:                             ; CODE XREF: sub_402CBC+15↑j
.text:00402CDB                 mov     eax, ebx
.text:00402CDD
.text:00402CDD loc_402CDD:                             ; CODE XREF: sub_402CBC+1D↑j
.text:00402CDD                 test    eax, eax
.text:00402CDF                 js      short loc_402D1E
.text:00402CE1                 mov     ecx, edx
.text:00402CE3                 mov     eax, edi
.text:00402CE5                 test    edx, edx
.text:00402CE7                 jz      short loc_402CF6
.text:00402CE9
.text:00402CE9 loc_402CE9:                             ; CODE XREF: sub_402CBC+38↓j
.text:00402CE9                 cmp     [eax], si
.text:00402CEC                 jz      short loc_402CF6
.text:00402CEE                 add     eax, 2
.text:00402CF1                 sub     ecx, 1
.text:00402CF4                 jnz     short loc_402CE9
.text:00402CF6
.text:00402CF6 loc_402CF6:                             ; CODE XREF: sub_402CBC+2B↑j
.text:00402CF6                                         ; sub_402CBC+30↑j
.text:00402CF6                 mov     eax, ecx
.text:00402CF8                 neg     eax
.text:00402CFA                 sbb     eax, eax
.text:00402CFC                 and     eax, 7FF8FFA9h
.text:00402D01                 add     eax, ebx
.text:00402D03                 test    ecx, ecx
.text:00402D05                 jz      short loc_402D0B
.text:00402D07                 mov     esi, edx
.text:00402D09                 sub     esi, ecx
.text:00402D0B
.text:00402D0B loc_402D0B:                             ; CODE XREF: sub_402CBC+49↑j
.text:00402D0B                 test    eax, eax
.text:00402D0D                 js      short loc_402D1E
.text:00402D0F                 push    ecx             ; pcchNewDestLength
.text:00402D10                 push    [ebp+cchDest]   ; cchDest
.text:00402D13                 sub     edx, esi
.text:00402D15                 push    ecx             ; pszDest
.text:00402D16                 lea     ecx, [edi+esi*2]
.text:00402D19                 call    StringCopyWorkerW
.text:00402D1E
.text:00402D1E loc_402D1E:                             ; CODE XREF: sub_402CBC+23↑j
.text:00402D1E                                         ; sub_402CBC+51↑j
.text:00402D1E                 pop     edi
.text:00402D1F                 pop     esi
.text:00402D20                 pop     ebx
.text:00402D21                 pop     ebp
.text:00402D22                 retn    4
.text:00402D22 sub_402CBC      endp ; sp-analysis failed
.text:00402D22
.text:00402D25
.text:00402D25 ; =============== S U B R O U T I N E =======================================
.text:00402D25
.text:00402D25 ; Attributes: bp-based frame info_from_lumina
.text:00402D25
.text:00402D25 ; HRESULT __stdcall static StringCopyWorkerW(STRSAFE_LPWSTR pszDest, size_t cchDest, size_t *pcchNewDestLength, STRSAFE_PCNZWCH pszSrc, size_t cchToCopy)
.text:00402D25 StringCopyWorkerW proc near             ; CODE XREF: sub_4025EA+34↑p
.text:00402D25                                         ; sub_402CBC+5D↑p
.text:00402D25
.text:00402D25 pszDest         = dword ptr  8
.text:00402D25 cchDest         = dword ptr  0Ch
.text:00402D25 pcchNewDestLength= dword ptr  10h
.text:00402D25 pszSrc          = dword ptr  14h
.text:00402D25 cchToCopy       = dword ptr  18h
.text:00402D25
.text:00402D25                 mov     edi, edi
.text:00402D27                 push    ebp
.text:00402D28                 mov     ebp, esp
.text:00402D2A                 push    edi
.text:00402D2B                 xor     edi, edi
.text:00402D2D                 test    edx, edx
.text:00402D2F                 jz      short loc_402D5C
.text:00402D31                 mov     eax, [ebp+cchDest]
.text:00402D34                 push    ebx
.text:00402D35                 push    esi
.text:00402D36                 mov     esi, 7FFFFFFEh
.text:00402D3B                 sub     eax, ecx
.text:00402D3D
.text:00402D3D loc_402D3D:                             ; CODE XREF: StringCopyWorkerW+2F↓j
.text:00402D3D                 test    esi, esi
.text:00402D3F                 jz      short loc_402D56
.text:00402D41                 movzx   ebx, word ptr [eax+ecx]
.text:00402D45                 test    bx, bx
.text:00402D48                 jz      short loc_402D56
.text:00402D4A                 mov     [ecx], bx
.text:00402D4D                 add     ecx, 2
.text:00402D50                 dec     esi
.text:00402D51                 sub     edx, 1
.text:00402D54                 jnz     short loc_402D3D
.text:00402D56
.text:00402D56 loc_402D56:                             ; CODE XREF: StringCopyWorkerW+1A↑j
.text:00402D56                                         ; StringCopyWorkerW+23↑j
.text:00402D56                 pop     esi
.text:00402D57                 pop     ebx
.text:00402D58                 test    edx, edx
.text:00402D5A                 jnz     short loc_402D64
.text:00402D5C
.text:00402D5C loc_402D5C:                             ; CODE XREF: StringCopyWorkerW+A↑j
.text:00402D5C                 sub     ecx, 2
.text:00402D5F                 mov     edi, 8007007Ah
.text:00402D64
.text:00402D64 loc_402D64:                             ; CODE XREF: StringCopyWorkerW+35↑j
.text:00402D64                 xor     eax, eax
.text:00402D66                 mov     [ecx], ax
.text:00402D69                 mov     eax, edi
.text:00402D6B                 pop     edi
.text:00402D6C                 pop     ebp
.text:00402D6D                 retn    0Ch
.text:00402D6D StringCopyWorkerW endp
.text:00402D6D
.text:00402D70
.text:00402D70 ; =============== S U B R O U T I N E =======================================
.text:00402D70
.text:00402D70 ; Attributes: bp-based frame info_from_lumina
.text:00402D70
.text:00402D70 ; HRESULT __stdcall static StringCopyWorkerA(STRSAFE_LPSTR pszDest, size_t cchDest, size_t *pcchNewDestLength, STRSAFE_PCNZCH pszSrc, size_t cchToCopy)
.text:00402D70 StringCopyWorkerA proc near             ; CODE XREF: sub_40258C+34↑p
.text:00402D70
.text:00402D70 pszDest         = dword ptr  8
.text:00402D70 cchDest         = dword ptr  0Ch
.text:00402D70 pcchNewDestLength= dword ptr  10h
.text:00402D70 pszSrc          = dword ptr  14h
.text:00402D70 cchToCopy       = dword ptr  18h
.text:00402D70
.text:00402D70                 mov     edi, edi
.text:00402D72                 push    ebp
.text:00402D73                 mov     ebp, esp
.text:00402D75                 push    edi
.text:00402D76                 xor     edi, edi
.text:00402D78                 test    edx, edx
.text:00402D7A                 jz      short loc_402DA2
.text:00402D7C                 mov     eax, [ebp+cchDest]
.text:00402D7F                 push    ebx
.text:00402D80                 push    esi
.text:00402D81                 mov     esi, 7FFFFFFEh
.text:00402D86                 sub     eax, ecx
.text:00402D88
.text:00402D88 loc_402D88:                             ; CODE XREF: StringCopyWorkerA+2A↓j
.text:00402D88                 test    esi, esi
.text:00402D8A                 jz      short loc_402D9C
.text:00402D8C                 mov     bl, [eax+ecx]
.text:00402D8F                 test    bl, bl
.text:00402D91                 jz      short loc_402D9C
.text:00402D93                 mov     [ecx], bl
.text:00402D95                 inc     ecx
.text:00402D96                 dec     esi
.text:00402D97                 sub     edx, 1
.text:00402D9A                 jnz     short loc_402D88
.text:00402D9C
.text:00402D9C loc_402D9C:                             ; CODE XREF: StringCopyWorkerA+1A↑j
.text:00402D9C                                         ; StringCopyWorkerA+21↑j
.text:00402D9C                 pop     esi
.text:00402D9D                 pop     ebx
.text:00402D9E                 test    edx, edx
.text:00402DA0                 jnz     short loc_402DA8
.text:00402DA2
.text:00402DA2 loc_402DA2:                             ; CODE XREF: StringCopyWorkerA+A↑j
.text:00402DA2                 dec     ecx
.text:00402DA3                 mov     edi, 8007007Ah
.text:00402DA8
.text:00402DA8 loc_402DA8:                             ; CODE XREF: StringCopyWorkerA+30↑j
.text:00402DA8                 mov     eax, edi
.text:00402DAA                 mov     byte ptr [ecx], 0
.text:00402DAD                 pop     edi
.text:00402DAE                 pop     ebp
.text:00402DAF                 retn    0Ch
.text:00402DAF StringCopyWorkerA endp
.text:00402DAF
.text:00402DB2
.text:00402DB2 ; =============== S U B R O U T I N E =======================================
.text:00402DB2
.text:00402DB2 ; Attributes: bp-based frame info_from_lumina
.text:00402DB2
.text:00402DB2 ; HRESULT StringCchPrintfW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_LPCWSTR pszFormat, ...)
.text:00402DB2 ?StringCchPrintfW@@YAJPAGIPBGZZ proc near
.text:00402DB2                                         ; CODE XREF: sub_402271+7A↑p
.text:00402DB2                                         ; sub_402271+99↑p ...
.text:00402DB2
.text:00402DB2 Buffer          = dword ptr  8
.text:00402DB2 arg_4           = dword ptr  0Ch
.text:00402DB2 Format          = dword ptr  10h
.text:00402DB2 Args            = byte ptr  14h
.text:00402DB2
.text:00402DB2                 mov     edi, edi
.text:00402DB4                 push    ebp
.text:00402DB5                 mov     ebp, esp
.text:00402DB7                 mov     eax, [ebp+arg_4]
.text:00402DBA                 xor     ecx, ecx
.text:00402DBC                 test    eax, eax
.text:00402DBE                 jz      short loc_402DC7
.text:00402DC0                 cmp     eax, 7FFFFFFFh
.text:00402DC5                 jbe     short loc_402DCC
.text:00402DC7
.text:00402DC7 loc_402DC7:                             ; CODE XREF: StringCchPrintfW(ushort *,uint,ushort const *,...)+C↑j
.text:00402DC7                 mov     ecx, 80070057h
.text:00402DCC
.text:00402DCC loc_402DCC:                             ; CODE XREF: StringCchPrintfW(ushort *,uint,ushort const *,...)+13↑j
.text:00402DCC                 test    ecx, ecx
.text:00402DCE                 js      short loc_402DE6
.text:00402DD0                 lea     ecx, [ebp+Args]
.text:00402DD3                 mov     edx, eax
.text:00402DD5                 push    ecx             ; Args
.text:00402DD6                 push    [ebp+Format]    ; Format
.text:00402DD9                 push    ecx             ; int
.text:00402DDA                 mov     ecx, [ebp+Buffer] ; Buffer
.text:00402DDD                 call    StringVPrintfWorkerW_4
.text:00402DE2                 mov     ecx, eax
.text:00402DE4                 jmp     short loc_402DF2
.text:00402DE6 ; ---------------------------------------------------------------------------
.text:00402DE6
.text:00402DE6 loc_402DE6:                             ; CODE XREF: StringCchPrintfW(ushort *,uint,ushort const *,...)+1C↑j
.text:00402DE6                 test    eax, eax
.text:00402DE8                 jz      short loc_402DF2
.text:00402DEA                 mov     eax, [ebp+Buffer]
.text:00402DED                 xor     edx, edx
.text:00402DEF                 mov     [eax], dx
.text:00402DF2
.text:00402DF2 loc_402DF2:                             ; CODE XREF: StringCchPrintfW(ushort *,uint,ushort const *,...)+32↑j
.text:00402DF2                                         ; StringCchPrintfW(ushort *,uint,ushort const *,...)+36↑j
.text:00402DF2                 mov     eax, ecx
.text:00402DF4                 pop     ebp
.text:00402DF5                 retn
.text:00402DF5 ?StringCchPrintfW@@YAJPAGIPBGZZ endp
.text:00402DF5
.text:00402DF6
.text:00402DF6 ; =============== S U B R O U T I N E =======================================
.text:00402DF6
.text:00402DF6 ; Attributes: bp-based frame info_from_lumina
.text:00402DF6
.text:00402DF6 ; HRESULT __stdcall static StringVPrintfWorkerW_4(STRSAFE_LPWSTR pszDest, size_t cchDest, size_t *pcchNewDestLength, STRSAFE_LPCWSTR pszFormat, va_list argList)
.text:00402DF6 StringVPrintfWorkerW_4 proc near        ; CODE XREF: StringCchPrintfW(ushort *,uint,ushort const *,...)+2B↑p
.text:00402DF6                                         ; StringCchVPrintfW(ushort *,uint,ushort const *,char *)+23↓p
.text:00402DF6
.text:00402DF6 Format          = dword ptr  0Ch
.text:00402DF6 Args            = dword ptr  10h
.text:00402DF6
.text:00402DF6                 mov     edi, edi
.text:00402DF8                 push    ebp
.text:00402DF9                 mov     ebp, esp
.text:00402DFB                 push    ebx
.text:00402DFC                 push    esi
.text:00402DFD                 push    edi
.text:00402DFE                 push    [ebp+Args]      ; Args
.text:00402E01                 lea     esi, [edx-1]
.text:00402E04                 mov     edi, ecx
.text:00402E06                 push    [ebp+Format]    ; Format
.text:00402E09                 xor     ebx, ebx
.text:00402E0B                 push    esi             ; BufferCount
.text:00402E0C                 push    edi             ; Buffer
.text:00402E0D                 call    ds:_vsnwprintf
.text:00402E13                 add     esp, 10h
.text:00402E16                 test    eax, eax
.text:00402E18                 js      short loc_402E22
.text:00402E1A                 cmp     eax, esi
.text:00402E1C                 ja      short loc_402E22
.text:00402E1E                 jnz     short loc_402E2D
.text:00402E20                 jmp     short loc_402E27
.text:00402E22 ; ---------------------------------------------------------------------------
.text:00402E22
.text:00402E22 loc_402E22:                             ; CODE XREF: StringVPrintfWorkerW_4+22↑j
.text:00402E22                                         ; StringVPrintfWorkerW_4+26↑j
.text:00402E22                 mov     ebx, 8007007Ah
.text:00402E27
.text:00402E27 loc_402E27:                             ; CODE XREF: StringVPrintfWorkerW_4+2A↑j
.text:00402E27                 xor     eax, eax
.text:00402E29                 mov     [edi+esi*2], ax
.text:00402E2D
.text:00402E2D loc_402E2D:                             ; CODE XREF: StringVPrintfWorkerW_4+28↑j
.text:00402E2D                 pop     edi
.text:00402E2E                 pop     esi
.text:00402E2F                 mov     eax, ebx
.text:00402E31                 pop     ebx
.text:00402E32                 pop     ebp
.text:00402E33                 retn    0Ch
.text:00402E33 StringVPrintfWorkerW_4 endp
.text:00402E33
.text:00402E36
.text:00402E36 ; =============== S U B R O U T I N E =======================================
.text:00402E36
.text:00402E36 ; Attributes: bp-based frame info_from_lumina
.text:00402E36
.text:00402E36 ; HRESULT __stdcall StringCchVPrintfW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_LPCWSTR pszFormat, va_list argList)
.text:00402E36 ?StringCchVPrintfW@@YGJPAGIPBGPAD@Z proc near
.text:00402E36                                         ; CODE XREF: sub_401B84+57↑p
.text:00402E36                                         ; sub_402929+F3↑p
.text:00402E36
.text:00402E36 Format          = dword ptr  8
.text:00402E36 Args            = dword ptr  0Ch
.text:00402E36
.text:00402E36                 mov     edi, edi
.text:00402E38                 push    ebp
.text:00402E39                 mov     ebp, esp
.text:00402E3B                 xor     eax, eax
.text:00402E3D                 test    edx, edx
.text:00402E3F                 jz      short loc_402E49
.text:00402E41                 cmp     edx, 7FFFFFFFh
.text:00402E47                 jbe     short loc_402E4E
.text:00402E49
.text:00402E49 loc_402E49:                             ; CODE XREF: StringCchVPrintfW(ushort *,uint,ushort const *,char *)+9↑j
.text:00402E49                 mov     eax, 80070057h
.text:00402E4E
.text:00402E4E loc_402E4E:                             ; CODE XREF: StringCchVPrintfW(ushort *,uint,ushort const *,char *)+11↑j
.text:00402E4E                 test    eax, eax
.text:00402E50                 js      short loc_402E60
.text:00402E52                 push    [ebp+Args]      ; Args
.text:00402E55                 push    [ebp+Format]    ; Format
.text:00402E58                 push    ecx             ; int
.text:00402E59                 call    StringVPrintfWorkerW_4
.text:00402E5E                 jmp     short loc_402E69
.text:00402E60 ; ---------------------------------------------------------------------------
.text:00402E60
.text:00402E60 loc_402E60:                             ; CODE XREF: StringCchVPrintfW(ushort *,uint,ushort const *,char *)+1A↑j
.text:00402E60                 test    edx, edx
.text:00402E62                 jz      short loc_402E69
.text:00402E64                 xor     edx, edx
.text:00402E66                 mov     [ecx], dx
.text:00402E69
.text:00402E69 loc_402E69:                             ; CODE XREF: StringCchVPrintfW(ushort *,uint,ushort const *,char *)+28↑j
.text:00402E69                                         ; StringCchVPrintfW(ushort *,uint,ushort const *,char *)+2C↑j
.text:00402E69                 pop     ebp
.text:00402E6A                 retn    8
.text:00402E6A ?StringCchVPrintfW@@YGJPAGIPBGPAD@Z endp
.text:00402E6A
.text:00402E6D
.text:00402E6D ; =============== S U B R O U T I N E =======================================
.text:00402E6D
.text:00402E6D
.text:00402E6D ; int __thiscall sub_402E6D(LPCWSTR lpString)
.text:00402E6D sub_402E6D      proc near               ; CODE XREF: sub_403A67+28↓p
.text:00402E6D                 mov     edi, edi
.text:00402E6F                 push    esi
.text:00402E70                 push    0               ; dwErrCode
.text:00402E72                 mov     esi, ecx
.text:00402E74                 call    ds:SetLastError
.text:00402E7A                 test    esi, esi
.text:00402E7C                 jnz     short loc_402E94
.text:00402E7E                 call    ds:GetLastError
.text:00402E84                 test    eax, eax
.text:00402E86                 jnz     short loc_402E90
.text:00402E88                 push    57h ; 'W'       ; dwErrCode
.text:00402E8A                 call    ds:SetLastError
.text:00402E90
.text:00402E90 loc_402E90:                             ; CODE XREF: sub_402E6D+19↑j
.text:00402E90                                         ; sub_402E6D+31↓j ...
.text:00402E90                 xor     eax, eax
.text:00402E92                 pop     esi
.text:00402E93                 retn
.text:00402E94 ; ---------------------------------------------------------------------------
.text:00402E94
.text:00402E94 loc_402E94:                             ; CODE XREF: sub_402E6D+F↑j
.text:00402E94                 push    esi             ; lpString
.text:00402E95                 call    ds:lstrlenW
.text:00402E9B                 cmp     eax, 1
.text:00402E9E                 jle     short loc_402E90
.text:00402EA0                 mov     dx, [esi]       ; wMatch
.text:00402EA3                 push    ecx             ; int
.text:00402EA4                 push    ecx             ; int
.text:00402EA5                 mov     ecx, offset pszStart ; "-/"
.text:00402EAA                 call    sub_402229
.text:00402EAF                 cmp     eax, 0FFFFFFFFh
.text:00402EB2                 jz      short loc_402E90
.text:00402EB4                 xor     eax, eax
.text:00402EB6                 inc     eax
.text:00402EB7                 pop     esi
.text:00402EB8                 retn
.text:00402EB8 sub_402E6D      endp
.text:00402EB8
.text:00402EB8 ; ---------------------------------------------------------------------------
.text:00402EB9                 db 2 dup(0CCh)
.text:00402EBB
.text:00402EBB ; =============== S U B R O U T I N E =======================================
.text:00402EBB
.text:00402EBB ; Attributes: bp-based frame info_from_lumina
.text:00402EBB
.text:00402EBB ; int __thiscall PrepareUsageHelperText(LPCWSTR lpString)
.text:00402EBB _PrepareUsageHelperText@4 proc near     ; CODE XREF: sub_403C94+7B↓p
.text:00402EBB
.text:00402EBB dwHandle        = dword ptr -1Ch
.text:00402EBB lpSubBlock      = dword ptr -18h
.text:00402EBB lpBuffer        = dword ptr -14h
.text:00402EBB puLen           = dword ptr -10h
.text:00402EBB var_C           = dword ptr -0Ch
.text:00402EBB nSize           = dword ptr -8
.text:00402EBB lpString        = dword ptr -4
.text:00402EBB
.text:00402EBB                 mov     edi, edi
.text:00402EBD                 push    ebp
.text:00402EBE                 mov     ebp, esp
.text:00402EC0                 sub     esp, 1Ch
.text:00402EC3                 push    ebx
.text:00402EC4                 push    esi
.text:00402EC5                 xor     esi, esi
.text:00402EC7                 mov     ebx, ecx
.text:00402EC9                 push    edi
.text:00402ECA                 push    esi             ; dwErrCode
.text:00402ECB                 mov     [ebp+dwHandle], esi
.text:00402ECE                 mov     [ebp+nSize], esi
.text:00402ED1                 mov     [ebp+puLen], esi
.text:00402ED4                 mov     [ebp+lpString], esi
.text:00402ED7                 mov     [ebp+lpBuffer], esi
.text:00402EDA                 call    ds:SetLastError
.text:00402EE0                 mov     eax, esi
.text:00402EE2                 mov     edx, 104h
.text:00402EE7
.text:00402EE7 loc_402EE7:                             ; CODE XREF: PrepareUsageHelperText(x)+6C↓j
.text:00402EE7                 neg     eax
.text:00402EE9                 push    1
.text:00402EEB                 sbb     eax, eax
.text:00402EED                 and     eax, 104h
.text:00402EF2                 add     edx, eax
.text:00402EF4                 push    edx
.text:00402EF5                 push    7
.text:00402EF7                 mov     [ebp+nSize], edx
.text:00402EFA                 xor     edx, edx
.text:00402EFC                 pop     ecx
.text:00402EFD                 call    sub_4019AD
.text:00402F02                 mov     edi, eax
.text:00402F04                 test    edi, edi
.text:00402F06                 jz      loc_4030BC
.text:00402F0C                 push    [ebp+nSize]     ; nSize
.text:00402F0F                 push    edi             ; lpFilename
.text:00402F10                 push    esi             ; hModule
.text:00402F11                 call    ds:GetModuleFileNameW
.text:00402F17                 test    eax, eax
.text:00402F19                 jz      loc_4030CE
.text:00402F1F                 mov     edx, [ebp+nSize]
.text:00402F22                 lea     ecx, [edx-1]
.text:00402F25                 cmp     eax, ecx
.text:00402F27                 jnb     short loc_402EE7
.text:00402F29                 lea     eax, [ebp+dwHandle]
.text:00402F2C                 push    eax             ; lpdwHandle
.text:00402F2D                 push    edi             ; lpwstrFilename
.text:00402F2E                 push    1               ; dwFlags
.text:00402F30                 call    ds:GetFileVersionInfoSizeExW
.text:00402F36                 mov     [ebp+nSize], eax
.text:00402F39                 test    eax, eax
.text:00402F3B                 jnz     short loc_402F60
.text:00402F3D                 call    ds:GetLastError
.text:00402F43                 test    eax, eax
.text:00402F45                 jnz     loc_4030CE
.text:00402F4B                 call    ds:GetLastError
.text:00402F51                 test    eax, eax
.text:00402F53                 jnz     loc_4030CE
.text:00402F59                 push    57h ; 'W'
.text:00402F5B                 jmp     loc_4030C8
.text:00402F60 ; ---------------------------------------------------------------------------
.text:00402F60
.text:00402F60 loc_402F60:                             ; CODE XREF: PrepareUsageHelperText(x)+80↑j
.text:00402F60                 add     eax, 0Ah
.text:00402F63                 mov     ecx, eax
.text:00402F65                 mov     [ebp+nSize], eax
.text:00402F68                 call    sub_402B01
.text:00402F6D                 mov     esi, eax
.text:00402F6F                 mov     [ebp+var_C], esi
.text:00402F72                 test    esi, esi
.text:00402F74                 jz      loc_4030CE
.text:00402F7A                 push    esi             ; lpData
.text:00402F7B                 push    [ebp+nSize]     ; dwLen
.text:00402F7E                 push    0               ; dwHandle
.text:00402F80                 push    edi             ; lpwstrFilename
.text:00402F81                 push    3               ; dwFlags
.text:00402F83                 call    ds:GetFileVersionInfoExW
.text:00402F89                 test    eax, eax
.text:00402F8B                 jnz     short loc_402F9A
.text:00402F8D
.text:00402F8D loc_402F8D:                             ; CODE XREF: PrepareUsageHelperText(x)+F5↓j
.text:00402F8D                                         ; PrepareUsageHelperText(x)+117↓j ...
.text:00402F8D                 lea     ecx, [ebp+var_C]
.text:00402F90                 call    sub_402A57
.text:00402F95                 jmp     loc_4030CE
.text:00402F9A ; ---------------------------------------------------------------------------
.text:00402F9A
.text:00402F9A loc_402F9A:                             ; CODE XREF: PrepareUsageHelperText(x)+D0↑j
.text:00402F9A                 lea     eax, [ebp+puLen]
.text:00402F9D                 push    eax             ; puLen
.text:00402F9E                 lea     eax, [ebp+lpBuffer]
.text:00402FA1                 push    eax             ; lplpBuffer
.text:00402FA2                 push    offset SubBlock ; "\\VarFileInfo\\Translation"
.text:00402FA7                 push    esi             ; pBlock
.text:00402FA8                 call    ds:VerQueryValueW
.text:00402FAE                 test    eax, eax
.text:00402FB0                 jz      short loc_402F8D
.text:00402FB2                 push    1
.text:00402FB4                 push    40h ; '@'
.text:00402FB6                 push    7
.text:00402FB8                 xor     edx, edx
.text:00402FBA                 pop     ecx
.text:00402FBB                 call    sub_4019AD
.text:00402FC0                 and     [ebp+lpString], 0
.text:00402FC4                 mov     edx, eax
.text:00402FC6                 xor     edi, edi
.text:00402FC8                 mov     [ebp+lpSubBlock], edx
.text:00402FCB                 test    [ebp+puLen], 0FFFFFFFCh
.text:00402FD2                 jbe     short loc_402F8D
.text:00402FD4
.text:00402FD4 loc_402FD4:                             ; CODE XREF: PrepareUsageHelperText(x)+15E↓j
.text:00402FD4                 mov     ecx, [ebp+lpBuffer]
.text:00402FD7                 movzx   eax, word ptr [ecx+edi*4+2]
.text:00402FDC                 push    eax
.text:00402FDD                 movzx   eax, word ptr [ecx+edi*4]
.text:00402FE1                 push    eax             ; Args
.text:00402FE2                 push    offset aStringfileinfo ; "\\StringFileInfo\\%04x%04x\\InternalNam"...
.text:00402FE7                 push    40h ; '@'       ; int
.text:00402FE9                 push    edx             ; Buffer
.text:00402FEA                 call    ?StringCchPrintfW@@YAJPAGIPBGZZ ; StringCchPrintfW(ushort *,uint,ushort const *,...)
.text:00402FEF                 add     esp, 14h
.text:00402FF2                 lea     eax, [ebp+nSize]
.text:00402FF5                 push    eax             ; puLen
.text:00402FF6                 lea     eax, [ebp+lpString]
.text:00402FF9                 push    eax             ; lplpBuffer
.text:00402FFA                 push    [ebp+lpSubBlock] ; lpSubBlock
.text:00402FFD                 push    esi             ; pBlock
.text:00402FFE                 call    ds:VerQueryValueW
.text:00403004                 test    eax, eax
.text:00403006                 jnz     short loc_40301D
.text:00403008                 mov     eax, [ebp+puLen]
.text:0040300B                 xor     ecx, ecx
.text:0040300D                 mov     edx, [ebp+lpSubBlock]
.text:00403010                 inc     edi
.text:00403011                 shr     eax, 2
.text:00403014                 mov     [ebp+lpString], ecx
.text:00403017                 cmp     edi, eax
.text:00403019                 jb      short loc_402FD4
.text:0040301B                 jmp     short loc_403020
.text:0040301D ; ---------------------------------------------------------------------------
.text:0040301D
.text:0040301D loc_40301D:                             ; CODE XREF: PrepareUsageHelperText(x)+14B↑j
.text:0040301D                 mov     ecx, [ebp+lpString] ; lpString
.text:00403020
.text:00403020 loc_403020:                             ; CODE XREF: PrepareUsageHelperText(x)+160↑j
.text:00403020                 test    ecx, ecx
.text:00403022                 jz      loc_402F8D
.text:00403028                 call    sub_40267F
.text:0040302D                 cmp     eax, 4
.text:00403030                 ja      short loc_40304F
.text:00403032                 lea     ecx, [ebp+var_C]
.text:00403035                 call    sub_402A57
.text:0040303A                 call    ds:GetLastError
.text:00403040                 test    eax, eax
.text:00403042                 jnz     loc_4030CE
.text:00403048                 push    42Bh
.text:0040304D                 jmp     short loc_4030C8
.text:0040304F ; ---------------------------------------------------------------------------
.text:0040304F
.text:0040304F loc_40304F:                             ; CODE XREF: PrepareUsageHelperText(x)+175↑j
.text:0040304F                 push    ecx             ; int
.text:00403050                 mov     ecx, [ebp+lpString] ; pszFirst
.text:00403053                 mov     edi, offset String ; ".EXE"
.text:00403058                 push    1               ; int
.text:0040305A                 mov     edx, edi        ; lpString
.text:0040305C                 call    sub_40234C
.text:00403061                 cmp     eax, 0FFFFFFFFh
.text:00403064                 jz      short loc_403083
.text:00403066                 push    [ebp+lpString]  ; lpString
.text:00403069                 call    ds:lstrlenW
.text:0040306F                 push    edi             ; lpString
.text:00403070                 mov     esi, eax
.text:00403072                 call    ds:lstrlenW
.text:00403078                 mov     ecx, [ebp+lpString]
.text:0040307B                 sub     esi, eax
.text:0040307D                 xor     eax, eax
.text:0040307F                 mov     [ecx+esi*2], ax
.text:00403083
.text:00403083 loc_403083:                             ; CODE XREF: PrepareUsageHelperText(x)+1A9↑j
.text:00403083                 test    ebx, ebx
.text:00403085                 jz      short loc_4030EE
.text:00403087                 push    [ebp+lpString]  ; lpString
.text:0040308A                 call    ds:lstrlenW
.text:00403090                 push    ebx             ; lpString
.text:00403091                 mov     esi, eax
.text:00403093                 call    ds:lstrlenW
.text:00403099                 push    1
.text:0040309B                 add     esi, 0Bh
.text:0040309E                 xor     edx, edx
.text:004030A0                 add     eax, esi
.text:004030A2                 push    eax
.text:004030A3                 push    7
.text:004030A5                 pop     ecx
.text:004030A6                 mov     [ebp+nSize], eax
.text:004030A9                 call    sub_4019AD
.text:004030AE                 mov     esi, eax
.text:004030B0                 test    esi, esi
.text:004030B2                 jnz     short loc_4030D7
.text:004030B4
.text:004030B4 loc_4030B4:                             ; CODE XREF: PrepareUsageHelperText(x)+254↓j
.text:004030B4                                         ; PrepareUsageHelperText(x)+272↓j
.text:004030B4                 lea     ecx, [ebp+var_C]
.text:004030B7                 call    sub_402A57
.text:004030BC
.text:004030BC loc_4030BC:                             ; CODE XREF: PrepareUsageHelperText(x)+4B↑j
.text:004030BC                 call    ds:GetLastError
.text:004030C2                 test    eax, eax
.text:004030C4                 jnz     short loc_4030CE
.text:004030C6                 push    8               ; dwErrCode
.text:004030C8
.text:004030C8 loc_4030C8:                             ; CODE XREF: PrepareUsageHelperText(x)+A0↑j
.text:004030C8                                         ; PrepareUsageHelperText(x)+192↑j
.text:004030C8                 call    ds:SetLastError
.text:004030CE
.text:004030CE loc_4030CE:                             ; CODE XREF: PrepareUsageHelperText(x)+5E↑j
.text:004030CE                                         ; PrepareUsageHelperText(x)+8A↑j ...
.text:004030CE                 xor     eax, eax
.text:004030D0
.text:004030D0 loc_4030D0:                             ; CODE XREF: PrepareUsageHelperText(x)+297↓j
.text:004030D0                 pop     edi
.text:004030D1                 pop     esi
.text:004030D2                 pop     ebx
.text:004030D3                 mov     esp, ebp
.text:004030D5                 pop     ebp
.text:004030D6                 retn
.text:004030D7 ; ---------------------------------------------------------------------------
.text:004030D7
.text:004030D7 loc_4030D7:                             ; CODE XREF: PrepareUsageHelperText(x)+1F7↑j
.text:004030D7                 push    ebx
.text:004030D8                 push    [ebp+lpString]  ; Args
.text:004030DB                 push    offset aSS_0    ; "%s %s"
.text:004030E0                 push    [ebp+nSize]     ; int
.text:004030E3                 push    esi             ; Buffer
.text:004030E4                 call    ?StringCchPrintfW@@YAJPAGIPBGZZ ; StringCchPrintfW(ushort *,uint,ushort const *,...)
.text:004030E9                 add     esp, 14h
.text:004030EC                 jmp     short loc_403111
.text:004030EE ; ---------------------------------------------------------------------------
.text:004030EE
.text:004030EE loc_4030EE:                             ; CODE XREF: PrepareUsageHelperText(x)+1CA↑j
.text:004030EE                 mov     edx, [ebp+lpString]
.text:004030F1                 test    edx, edx
.text:004030F3                 jnz     short loc_4030FF
.text:004030F5                 push    7
.text:004030F7                 pop     ecx
.text:004030F8                 call    sub_401961
.text:004030FD                 jmp     short loc_40310B
.text:004030FF ; ---------------------------------------------------------------------------
.text:004030FF
.text:004030FF loc_4030FF:                             ; CODE XREF: PrepareUsageHelperText(x)+238↑j
.text:004030FF                 push    0
.text:00403101                 push    0
.text:00403103                 push    7
.text:00403105                 pop     ecx
.text:00403106                 call    sub_4019AD
.text:0040310B
.text:0040310B loc_40310B:                             ; CODE XREF: PrepareUsageHelperText(x)+242↑j
.text:0040310B                 mov     esi, eax
.text:0040310D                 test    esi, esi
.text:0040310F                 jz      short loc_4030B4
.text:00403111
.text:00403111 loc_403111:                             ; CODE XREF: PrepareUsageHelperText(x)+231↑j
.text:00403111                 push    esi             ; lpsz
.text:00403112                 mov     [ebp+lpString], esi
.text:00403115                 call    ds:CharUpperW
.text:0040311B                 push    1
.text:0040311D                 push    50h ; 'P'
.text:0040311F                 push    0Bh
.text:00403121                 xor     edx, edx
.text:00403123                 pop     ecx
.text:00403124                 call    sub_4019AD
.text:00403129                 mov     esi, eax
.text:0040312B                 test    esi, esi
.text:0040312D                 jz      short loc_4030B4
.text:0040312F                 push    [ebp+lpString]  ; Args
.text:00403132                 mov     ecx, 15EDh
.text:00403137                 call    sub_401E93
.text:0040313C                 push    eax             ; Format
.text:0040313D                 push    50h ; 'P'       ; int
.text:0040313F                 push    esi             ; Buffer
.text:00403140                 call    ?StringCchPrintfW@@YAJPAGIPBGZZ ; StringCchPrintfW(ushort *,uint,ushort const *,...)
.text:00403145                 add     esp, 10h
.text:00403148                 lea     ecx, [ebp+var_C]
.text:0040314B                 call    sub_402A57
.text:00403150                 mov     eax, esi
.text:00403152                 jmp     loc_4030D0
.text:00403152 _PrepareUsageHelperText@4 endp
.text:00403152
.text:00403157
.text:00403157 ; =============== S U B R O U T I N E =======================================
.text:00403157
.text:00403157
.text:00403157 ; int __thiscall sub_403157(PCWSTR pszStart)
.text:00403157 sub_403157      proc near               ; CODE XREF: sub_403C94+32A↓p
.text:00403157                 mov     edi, edi
.text:00403159                 push    ebx
.text:0040315A                 push    esi
.text:0040315B                 push    edi
.text:0040315C                 push    0               ; dwErrCode
.text:0040315E                 mov     esi, ecx
.text:00403160                 call    ds:SetLastError
.text:00403166                 test    esi, esi
.text:00403168                 jz      short loc_4031D3
.text:0040316A                 push    ecx             ; int
.text:0040316B                 push    ecx             ; int
.text:0040316C                 push    7Ch ; '|'
.text:0040316E                 pop     edx             ; wMatch
.text:0040316F                 mov     ecx, esi        ; pszStart
.text:00403171                 call    sub_402229
.text:00403176                 mov     edi, eax
.text:00403178                 cmp     edi, 0FFFFFFFFh
.text:0040317B                 jnz     short loc_40318E
.text:0040317D                 push    0               ; dwErrCode
.text:0040317F                 call    ds:SetLastError
.text:00403185                 mov     ecx, esi        ; lpString
.text:00403187                 call    sub_40267F
.text:0040318C                 mov     edi, eax
.text:0040318E
.text:0040318E loc_40318E:                             ; CODE XREF: sub_403157+24↑j
.text:0040318E                 push    1
.text:00403190                 lea     eax, [edi+5]
.text:00403193                 xor     edx, edx
.text:00403195                 push    eax
.text:00403196                 push    0Ch
.text:00403198                 pop     ecx
.text:00403199                 call    sub_4019AD
.text:0040319E                 mov     ebx, eax
.text:004031A0                 test    ebx, ebx
.text:004031A2                 jnz     short loc_4031B2
.text:004031A4                 call    ds:GetLastError
.text:004031AA                 test    eax, eax
.text:004031AC                 jnz     short loc_4031E5
.text:004031AE                 push    8
.text:004031B0                 jmp     short loc_4031DF
.text:004031B2 ; ---------------------------------------------------------------------------
.text:004031B2
.text:004031B2 loc_4031B2:                             ; CODE XREF: sub_403157+4B↑j
.text:004031B2                 lea     eax, [edi+1]
.text:004031B5                 mov     edx, offset asc_4011C4 ; "/"
.text:004031BA                 push    eax
.text:004031BB                 mov     ecx, ebx
.text:004031BD                 call    sub_4025EA
.text:004031C2                 lea     eax, [edi+2]
.text:004031C5                 mov     edx, esi
.text:004031C7                 push    eax
.text:004031C8                 mov     ecx, ebx
.text:004031CA                 call    sub_40264A
.text:004031CF                 mov     eax, ebx
.text:004031D1                 jmp     short loc_4031E7
.text:004031D3 ; ---------------------------------------------------------------------------
.text:004031D3
.text:004031D3 loc_4031D3:                             ; CODE XREF: sub_403157+11↑j
.text:004031D3                 call    ds:GetLastError
.text:004031D9                 test    eax, eax
.text:004031DB                 jnz     short loc_4031E5
.text:004031DD                 push    57h ; 'W'       ; dwErrCode
.text:004031DF
.text:004031DF loc_4031DF:                             ; CODE XREF: sub_403157+59↑j
.text:004031DF                 call    ds:SetLastError
.text:004031E5
.text:004031E5 loc_4031E5:                             ; CODE XREF: sub_403157+55↑j
.text:004031E5                                         ; sub_403157+84↑j
.text:004031E5                 xor     eax, eax
.text:004031E7
.text:004031E7 loc_4031E7:                             ; CODE XREF: sub_403157+7A↑j
.text:004031E7                 pop     edi
.text:004031E8                 pop     esi
.text:004031E9                 pop     ebx
.text:004031EA                 retn
.text:004031EA sub_403157      endp
.text:004031EA
.text:004031EB
.text:004031EB ; =============== S U B R O U T I N E =======================================
.text:004031EB
.text:004031EB ; Attributes: bp-based frame
.text:004031EB
.text:004031EB sub_4031EB      proc near               ; CODE XREF: sub_403C94+93↓p
.text:004031EB
.text:004031EB var_10          = dword ptr -10h
.text:004031EB var_C           = dword ptr -0Ch
.text:004031EB var_8           = dword ptr -8
.text:004031EB var_4           = dword ptr -4
.text:004031EB arg_0           = dword ptr  8
.text:004031EB
.text:004031EB                 mov     edi, edi
.text:004031ED                 push    ebp
.text:004031EE                 mov     ebp, esp
.text:004031F0                 sub     esp, 10h
.text:004031F3                 push    ebx
.text:004031F4                 push    esi
.text:004031F5                 push    edi
.text:004031F6                 xor     edi, edi
.text:004031F8                 mov     ebx, ecx
.text:004031FA                 push    edi             ; dwErrCode
.text:004031FB                 mov     [ebp+var_10], ebx
.text:004031FE                 mov     [ebp+var_C], edi
.text:00403201                 call    ds:SetLastError
.text:00403207                 mov     esi, [ebp+arg_0]
.text:0040320A                 test    esi, esi
.text:0040320C                 jnz     short loc_403223
.text:0040320E
.text:0040320E def_4032FC:                             ; CODE XREF: sub_4031EB+3A↓j
.text:0040320E                                         ; sub_4031EB+6F↓j ...
.text:0040320E                 call    ds:GetLastError ; jumptable 004032FC default case
.text:00403214                 test    eax, eax
.text:00403216                 jnz     loc_40348A
.text:0040321C                 push    57h ; 'W'
.text:0040321E                 jmp     loc_403484
.text:00403223 ; ---------------------------------------------------------------------------
.text:00403223
.text:00403223 loc_403223:                             ; CODE XREF: sub_4031EB+21↑j
.text:00403223                 test    ebx, ebx
.text:00403225                 jz      short def_4032FC ; jumptable 004032FC default case
.text:00403227                 or      dword ptr [ebx], 0FFFFFFFFh
.text:0040322A                 add     esi, 3Ch ; '<'
.text:0040322D                 mov     [ebp+var_8], edi
.text:00403230
.text:00403230 loc_403230:                             ; CODE XREF: sub_4031EB+27B↓j
.text:00403230                 lea     eax, [esi-3Ch]
.text:00403233                 test    eax, eax
.text:00403235                 jz      loc_403475
.text:0040323B                 push    0FFFFFFFFh      ; cchCount2
.text:0040323D                 push    offset String2  ; "PARSER2"
.text:00403242                 push    0FFFFFFFFh      ; cchCount1
.text:00403244                 lea     eax, [esi-3Ch]
.text:00403247                 push    eax             ; lpString1
.text:00403248                 push    1               ; dwCmpFlags
.text:0040324A                 call    ds:GetThreadLocale
.text:00403250                 push    eax             ; Locale
.text:00403251                 call    ds:CompareStringA
.text:00403257                 add     eax, 0FFFFFFFEh
.text:0040325A                 jnz     short def_4032FC ; jumptable 004032FC default case
.text:0040325C                 mov     ecx, [esi-28h]
.text:0040325F                 xor     edx, edx
.text:00403261                 mov     edi, [esi-2Ch]
.text:00403264                 mov     [ebp+var_4], ecx
.text:00403267                 cmp     [esi], edx
.text:00403269                 jnz     short def_4032FC ; jumptable 004032FC default case
.text:0040326B                 cmp     [esi+4], edx
.text:0040326E                 jnz     short def_4032FC ; jumptable 004032FC default case
.text:00403270                 cmp     [esi+8], edx
.text:00403273                 jnz     short def_4032FC ; jumptable 004032FC default case
.text:00403275                 cmp     [esi+0Ch], edx
.text:00403278                 jnz     short def_4032FC ; jumptable 004032FC default case
.text:0040327A                 mov     ebx, edi
.text:0040327C                 and     ebx, 40000h
.text:00403282                 mov     eax, ebx
.text:00403284                 or      eax, edx
.text:00403286                 jnz     short loc_4032A3
.text:00403288                 cmp     [esi-1Ch], edx
.text:0040328B                 jz      short def_4032FC ; jumptable 004032FC default case
.text:0040328D                 push    dword ptr [esi-1Ch] ; lpString
.text:00403290                 call    ds:lstrlenW
.text:00403296                 test    eax, eax
.text:00403298                 jz      def_4032FC      ; jumptable 004032FC default case
.text:0040329E                 mov     ecx, [ebp+var_4]
.text:004032A1                 xor     edx, edx
.text:004032A3
.text:004032A3 loc_4032A3:                             ; CODE XREF: sub_4031EB+9B↑j
.text:004032A3                 mov     eax, edi
.text:004032A5                 and     eax, 20000h
.text:004032AA                 or      eax, edx
.text:004032AC                 jz      short loc_4032C7
.text:004032AE                 cmp     dword ptr [esi-34h], 0Ah
.text:004032B2                 jnz     def_4032FC      ; jumptable 004032FC default case
.text:004032B8                 xor     eax, eax
.text:004032BA                 inc     eax
.text:004032BB                 cmp     [ebp+var_C], eax
.text:004032BE                 jz      def_4032FC      ; jumptable 004032FC default case
.text:004032C4                 mov     [ebp+var_C], eax
.text:004032C7
.text:004032C7 loc_4032C7:                             ; CODE XREF: sub_4031EB+C1↑j
.text:004032C7                 or      ebx, edx
.text:004032C9                 jz      short loc_4032DE
.text:004032CB                 mov     eax, [ebp+var_10]
.text:004032CE                 cmp     dword ptr [eax], 0FFFFFFFFh
.text:004032D1                 jnz     def_4032FC      ; jumptable 004032FC default case
.text:004032D7                 mov     edx, [ebp+var_8]
.text:004032DA                 mov     [eax], edx
.text:004032DC                 xor     edx, edx
.text:004032DE
.text:004032DE loc_4032DE:                             ; CODE XREF: sub_4031EB+DE↑j
.text:004032DE                 mov     ebx, 60000h
.text:004032E3                 mov     eax, edi
.text:004032E5                 and     eax, ebx
.text:004032E7                 cmp     eax, ebx
.text:004032E9                 jz      def_4032FC      ; jumptable 004032FC default case
.text:004032EF                 mov     eax, [esi-34h]
.text:004032F2                 dec     eax             ; switch 10 cases
.text:004032F3                 cmp     eax, 9
.text:004032F6                 ja      def_4032FC      ; jumptable 004032FC default case
.text:004032FC                 jmp     ds:jpt_4032FC[eax*4] ; switch jump
.text:00403303 ; ---------------------------------------------------------------------------
.text:00403303
.text:00403303 loc_403303:                             ; CODE XREF: sub_4031EB+111↑j
.text:00403303                                         ; DATA XREF: .text:jpt_4032FC↓o
.text:00403303                 mov     ebx, edi        ; jumptable 004032FC case 1
.text:00403305                 and     ebx, 10000h
.text:0040330B                 mov     eax, ebx
.text:0040330D                 or      eax, edx
.text:0040330F                 jz      short loc_40333C
.text:00403311                 mov     edx, edi
.text:00403313                 xor     ecx, ecx
.text:00403315                 and     edx, 1
.text:00403318                 mov     eax, edx
.text:0040331A                 or      eax, ecx
.text:0040331C                 jnz     def_4032FC      ; jumptable 004032FC default case
.text:00403322                 cmp     [esi-10h], ecx
.text:00403325                 jnz     def_4032FC      ; jumptable 004032FC default case
.text:0040332B                 cmp     [esi-0Ch], ecx
.text:0040332E                 jz      short loc_403369
.text:00403330                 cmp     dword ptr [esi-0Ch], 2
.text:00403334                 jb      def_4032FC      ; jumptable 004032FC default case
.text:0040333A                 jmp     short loc_403369
.text:0040333C ; ---------------------------------------------------------------------------
.text:0040333C
.text:0040333C loc_40333C:                             ; CODE XREF: sub_4031EB+124↑j
.text:0040333C                 mov     ecx, [esi-10h]
.text:0040333F                 test    ecx, ecx
.text:00403341                 jz      def_4032FC      ; jumptable 004032FC default case
.text:00403347                 and     [ebp+var_4], 0
.text:0040334B                 mov     edx, edi
.text:0040334D                 and     edx, 1
.text:00403350                 mov     eax, edx
.text:00403352                 or      eax, [ebp+var_4]
.text:00403355                 jz      short loc_403366
.text:00403357                 mov     ecx, [ecx]
.text:00403359                 call    sub_4041E0
.text:0040335E                 test    eax, eax
.text:00403360                 jz      def_4032FC      ; jumptable 004032FC default case
.text:00403366
.text:00403366 loc_403366:                             ; CODE XREF: sub_4031EB+16A↑j
.text:00403366                 mov     ecx, [ebp+var_4]
.text:00403369
.text:00403369 loc_403369:                             ; CODE XREF: sub_4031EB+143↑j
.text:00403369                                         ; sub_4031EB+14F↑j
.text:00403369                 mov     eax, edi
.text:0040336B                 and     eax, 2
.text:0040336E                 or      eax, 0
.text:00403371                 jz      short loc_40337D
.text:00403373                 cmp     dword ptr [esi-14h], 0
.text:00403377                 jz      def_4032FC      ; jumptable 004032FC default case
.text:0040337D
.text:0040337D loc_40337D:                             ; CODE XREF: sub_4031EB+186↑j
.text:0040337D                 or      edx, ecx
.text:0040337F                 jnz     loc_403454
.text:00403385                 cmp     dword ptr [esi-24h], 1
.text:00403389                 jnz     def_4032FC      ; jumptable 004032FC default case
.text:0040338F                 and     edi, 20h
.text:00403392                 or      edi, edx
.text:00403394                 jnz     def_4032FC      ; jumptable 004032FC default case
.text:0040339A                 or      ebx, edx
.text:0040339C                 jnz     loc_403456
.text:004033A2                 cmp     dword ptr [esi-0Ch], 2
.text:004033A6                 jb      def_4032FC      ; jumptable 004032FC default case
.text:004033AC                 jmp     loc_403456
.text:004033B1 ; ---------------------------------------------------------------------------
.text:004033B1
.text:004033B1 loc_4033B1:                             ; CODE XREF: sub_4031EB+111↑j
.text:004033B1                                         ; DATA XREF: .text:jpt_4032FC↓o
.text:004033B1                 mov     eax, edi        ; jumptable 004032FC cases 2,3,7,8
.text:004033B3                 and     eax, 2
.text:004033B6                 or      eax, edx
.text:004033B8                 jnz     loc_403471      ; jumptable 004032FC cases 4-6
.text:004033BE                 mov     eax, edi
.text:004033C0                 and     eax, 10040h
.text:004033C5                 or      eax, edx
.text:004033C7                 jnz     def_4032FC      ; jumptable 004032FC default case
.text:004033CD                 mov     eax, edi
.text:004033CF                 and     eax, 80h
.text:004033D4                 or      eax, edx
.text:004033D6                 jnz     def_4032FC      ; jumptable 004032FC default case
.text:004033DC                 mov     ecx, [esi-10h]
.text:004033DF                 test    ecx, ecx
.text:004033E1                 jz      def_4032FC      ; jumptable 004032FC default case
.text:004033E7                 mov     eax, edi
.text:004033E9                 and     eax, 1
.text:004033EC                 or      eax, edx
.text:004033EE                 jz      short loc_403401
.text:004033F0                 mov     ecx, [ecx]
.text:004033F2                 call    sub_4041E0
.text:004033F7                 test    eax, eax
.text:004033F9                 jz      def_4032FC      ; jumptable 004032FC default case
.text:004033FF                 jmp     short loc_403456
.text:00403401 ; ---------------------------------------------------------------------------
.text:00403401
.text:00403401 loc_403401:                             ; CODE XREF: sub_4031EB+203↑j
.text:00403401                 cmp     dword ptr [esi-24h], 1
.text:00403405                 ja      def_4032FC      ; jumptable 004032FC default case
.text:0040340B                 and     edi, 20h
.text:0040340E                 or      edi, edx
.text:00403410
.text:00403410 loc_403410:                             ; CODE XREF: sub_4031EB+267↓j
.text:00403410                 jnz     def_4032FC      ; jumptable 004032FC default case
.text:00403416                 jmp     short loc_403456
.text:00403418 ; ---------------------------------------------------------------------------
.text:00403418
.text:00403418 loc_403418:                             ; CODE XREF: sub_4031EB+111↑j
.text:00403418                                         ; DATA XREF: .text:jpt_4032FC↓o
.text:00403418                 cmp     [esi-8], edx    ; jumptable 004032FC case 9
.text:0040341B                 jz      def_4032FC      ; jumptable 004032FC default case
.text:00403421                 cmp     [esi-4], edx
.text:00403424                 jnz     short loc_403456
.text:00403426                 lea     eax, [esi-3Ch]
.text:00403429                 mov     [esi-4], eax
.text:0040342C                 jmp     short loc_403456
.text:0040342E ; ---------------------------------------------------------------------------
.text:0040342E
.text:0040342E loc_40342E:                             ; CODE XREF: sub_4031EB+111↑j
.text:0040342E                                         ; DATA XREF: .text:jpt_4032FC↓o
.text:0040342E                 mov     eax, edi        ; jumptable 004032FC case 10
.text:00403430                 and     eax, 0Fh
.text:00403433                 or      eax, edx
.text:00403435                 jnz     def_4032FC      ; jumptable 004032FC default case
.text:0040343B                 mov     eax, edi
.text:0040343D                 and     eax, 0FFF0h
.text:00403442                 or      eax, edx
.text:00403444                 jnz     def_4032FC      ; jumptable 004032FC default case
.text:0040344A                 and     edi, 0FFEDFFFFh
.text:00403450                 or      edi, ecx
.text:00403452                 jmp     short loc_403410
.text:00403454 ; ---------------------------------------------------------------------------
.text:00403454
.text:00403454 loc_403454:                             ; CODE XREF: sub_4031EB+194↑j
.text:00403454                 xor     edx, edx
.text:00403456
.text:00403456 loc_403456:                             ; CODE XREF: sub_4031EB+1B1↑j
.text:00403456                                         ; sub_4031EB+1C1↑j ...
.text:00403456                 mov     ecx, [ebp+var_8]
.text:00403459                 inc     ecx
.text:0040345A                 mov     [esi-20h], edx
.text:0040345D                 add     esi, 50h ; 'P'
.text:00403460                 mov     [ebp+var_8], ecx
.text:00403463                 cmp     ecx, 1
.text:00403466                 jb      loc_403230
.text:0040346C                 xor     eax, eax
.text:0040346E                 inc     eax
.text:0040346F                 jmp     short loc_40348C
.text:00403471 ; ---------------------------------------------------------------------------
.text:00403471
.text:00403471 loc_403471:                             ; CODE XREF: sub_4031EB+111↑j
.text:00403471                                         ; sub_4031EB+1CD↑j
.text:00403471                                         ; DATA XREF: ...
.text:00403471                 push    78h ; 'x'       ; jumptable 004032FC cases 4-6
.text:00403473                 jmp     short loc_403484
.text:00403475 ; ---------------------------------------------------------------------------
.text:00403475
.text:00403475 loc_403475:                             ; CODE XREF: sub_4031EB+4A↑j
.text:00403475                 call    ds:GetLastError
.text:0040347B                 test    eax, eax
.text:0040347D                 jnz     short loc_40348A
.text:0040347F                 push    42Bh            ; dwErrCode
.text:00403484
.text:00403484 loc_403484:                             ; CODE XREF: sub_4031EB+33↑j
.text:00403484                                         ; sub_4031EB+288↑j
.text:00403484                 call    ds:SetLastError
.text:0040348A
.text:0040348A loc_40348A:                             ; CODE XREF: sub_4031EB+2B↑j
.text:0040348A                                         ; sub_4031EB+292↑j
.text:0040348A                 xor     eax, eax
.text:0040348C
.text:0040348C loc_40348C:                             ; CODE XREF: sub_4031EB+284↑j
.text:0040348C                 pop     edi
.text:0040348D                 pop     esi
.text:0040348E                 pop     ebx
.text:0040348F                 mov     esp, ebp
.text:00403491                 pop     ebp
.text:00403492                 retn    4
.text:00403492 sub_4031EB      endp
.text:00403492
.text:00403492 ; ---------------------------------------------------------------------------
.text:00403495                 db 8Bh, 0FFh
.text:00403497 jpt_4032FC      dd offset loc_403303    ; DATA XREF: sub_4031EB+111↑r
.text:00403497                 dd offset loc_4033B1    ; jump table for switch statement
.text:00403497                 dd offset loc_4033B1
.text:00403497                 dd offset loc_403471
.text:00403497                 dd offset loc_403471
.text:00403497                 dd offset loc_403471
.text:00403497                 dd offset loc_4033B1
.text:00403497                 dd offset loc_4033B1
.text:00403497                 dd offset loc_403418
.text:00403497                 dd offset loc_40342E
.text:004034BF
.text:004034BF ; =============== S U B R O U T I N E =======================================
.text:004034BF
.text:004034BF ; Attributes: bp-based frame info_from_lumina
.text:004034BF
.text:004034BF ; int __fastcall ParseAndSaveOptionValue(LPCWSTR lpString, LPCWSTR lpString, int)
.text:004034BF _ParseAndSaveOptionValue@12 proc near   ; CODE XREF: sub_403C94+1BC↓p
.text:004034BF
.text:004034BF var_58          = dword ptr -58h
.text:004034BF var_44          = qword ptr -44h
.text:004034BF var_38          = byte ptr -38h
.text:004034BF var_30          = dword ptr -30h
.text:004034BF String2         = word ptr -2Ch
.text:004034BF var_20          = dword ptr -20h
.text:004034BF var_1C          = dword ptr -1Ch
.text:004034BF var_18          = dword ptr -18h
.text:004034BF var_14          = dword ptr -14h
.text:004034BF Args            = byte ptr -10h
.text:004034BF var_C           = dword ptr -0Ch
.text:004034BF var_8           = dword ptr -8
.text:004034BF arg_0           = dword ptr  8
.text:004034BF
.text:004034BF                 mov     edi, edi
.text:004034C1                 push    ebp
.text:004034C2                 mov     ebp, esp
.text:004034C4                 sub     esp, 48h
.text:004034C7                 mov     eax, ___security_cookie
.text:004034CC                 xor     eax, ebp
.text:004034CE                 mov     [ebp+var_8], eax
.text:004034D1                 fldz
.text:004034D3                 and     dword ptr [ebp+String2+4], 0
.text:004034D7                 push    ebx
.text:004034D8                 push    esi
.text:004034D9                 fstp    [ebp+var_20]
.text:004034DC                 fldz
.text:004034DE                 mov     ebx, edx
.text:004034E0                 xor     edx, edx
.text:004034E2                 mov     esi, ecx
.text:004034E4                 push    edi
.text:004034E5                 push    edx             ; dwErrCode
.text:004034E6                 fstp    [ebp+var_44]
.text:004034E9                 mov     [ebp+var_30], edx
.text:004034EC                 call    ds:SetLastError
.text:004034F2                 mov     eax, [ebp+arg_0]
.text:004034F5                 test    eax, eax
.text:004034F7                 jz      def_4035F4      ; jumptable 00403A3E default case
.text:004034F7                                         ; jumptable 004035F4 default case
.text:004034FD                 mov     edx, [eax+0Ch]
.text:00403500                 mov     eax, [eax+8]
.text:00403503                 mov     [ebp+var_1C], edx
.text:00403506                 mov     dword ptr [ebp+Args], eax
.text:00403509                 test    edx, edx
.text:0040350B                 jz      def_4035F4      ; jumptable 00403A3E default case
.text:0040350B                                         ; jumptable 004035F4 default case
.text:00403511                 test    eax, eax
.text:00403513                 jz      def_4035F4      ; jumptable 00403A3E default case
.text:00403513                                         ; jumptable 004035F4 default case
.text:00403519                 mov     eax, [edx+14h]
.text:0040351C                 mov     ecx, [edx+2Ch]
.text:0040351F                 mov     edi, [edx+10h]
.text:00403522                 mov     dword ptr [ebp+var_38], eax
.text:00403525                 mov     eax, [edx+30h]
.text:00403528                 mov     [ebp+var_14], eax
.text:0040352B                 mov     eax, [edx+28h]
.text:0040352E                 mov     dword ptr [ebp+var_38], eax
.text:00403531                 mov     eax, [edx+8]
.text:00403534                 mov     [ebp+var_C], ecx
.text:00403537                 mov     [ebp+var_18], eax
.text:0040353A                 cmp     eax, 0Ah
.text:0040353D                 jz      short loc_4035A0
.text:0040353F                 test    ebx, ebx
.text:00403541                 jnz     short loc_4035A0
.text:00403543                 mov     eax, edi
.text:00403545                 and     eax, 10h
.text:00403548                 or      eax, ebx
.text:0040354A                 jnz     short loc_40359D
.text:0040354C                 test    esi, esi
.text:0040354E                 jz      short loc_403576
.text:00403550                 push    esi             ; lpString
.text:00403551                 call    ds:lstrlenW
.text:00403557                 test    eax, eax
.text:00403559                 jz      short loc_403576
.text:0040355B                 mov     ecx, 15EBh
.text:00403560
.text:00403560 loc_403560:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+218↓j
.text:00403560                                         ; ParseAndSaveOptionValue(x,x,x)+411↓j ...
.text:00403560                 push    dword ptr [ebp+Args]
.text:00403563
.text:00403563 loc_403563:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+2B5↓j
.text:00403563                 push    esi             ; Args
.text:00403564
.text:00403564 loc_403564:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+1E4↓j
.text:00403564                 call    sub_401E93
.text:00403569                 push    eax             ; Format
.text:0040356A                 push    2               ; int
.text:0040356C                 call    sub_401B84
.text:00403571                 add     esp, 10h
.text:00403574                 jmp     short loc_403590
.text:00403576 ; ---------------------------------------------------------------------------
.text:00403576
.text:00403576 loc_403576:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+8F↑j
.text:00403576                                         ; ParseAndSaveOptionValue(x,x,x)+9A↑j ...
.text:00403576                 call    ds:GetLastError
.text:0040357C                 test    eax, eax
.text:0040357E                 jnz     short loc_40358B
.text:00403580                 push    42Bh            ; dwErrCode
.text:00403585                 call    ds:SetLastError
.text:0040358B
.text:0040358B loc_40358B:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+BF↑j
.text:0040358B                 call    sub_401C13
.text:00403590
.text:00403590 loc_403590:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+B5↑j
.text:00403590                                         ; ParseAndSaveOptionValue(x,x,x)+1D6↓j ...
.text:00403590                 push    800401E4h       ; dwErrCode
.text:00403595                 call    ds:SetLastError
.text:0040359B                 jmp     short loc_4035C6
.text:0040359D ; ---------------------------------------------------------------------------
.text:0040359D
.text:0040359D loc_40359D:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+8B↑j
.text:0040359D                 mov     eax, [ebp+var_18]
.text:004035A0
.text:004035A0 loc_4035A0:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+7E↑j
.text:004035A0                                         ; ParseAndSaveOptionValue(x,x,x)+82↑j
.text:004035A0                 test    esi, esi
.text:004035A2                 jnz     short loc_4035DB
.text:004035A4                 mov     eax, edi
.text:004035A6                 and     eax, 40000h
.text:004035AB                 or      eax, esi
.text:004035AD                 jnz     short loc_4035E8
.text:004035AF
.text:004035AF def_4035F4:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+38↑j
.text:004035AF                                         ; ParseAndSaveOptionValue(x,x,x)+4C↑j ...
.text:004035AF                 call    ds:GetLastError ; jumptable 00403A3E default case
.text:004035AF                                         ; jumptable 004035F4 default case
.text:004035B5                 test    eax, eax
.text:004035B7                 jnz     short loc_4035C1
.text:004035B9                 push    57h ; 'W'       ; dwErrCode
.text:004035BB
.text:004035BB loc_4035BB:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+168↓j
.text:004035BB                 call    ds:SetLastError
.text:004035C1
.text:004035C1 loc_4035C1:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+F8↑j
.text:004035C1                                         ; ParseAndSaveOptionValue(x,x,x)+164↓j ...
.text:004035C1                 call    sub_401C13
.text:004035C6
.text:004035C6 loc_4035C6:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+DC↑j
.text:004035C6                 xor     eax, eax
.text:004035C8
.text:004035C8 loc_4035C8:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+198↓j
.text:004035C8                                         ; ParseAndSaveOptionValue(x,x,x)+3F8↓j ...
.text:004035C8                 mov     ecx, [ebp+var_8]
.text:004035CB                 pop     edi
.text:004035CC                 pop     esi
.text:004035CD                 xor     ecx, ebp        ; StackCookie
.text:004035CF                 pop     ebx
.text:004035D0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004035D5                 mov     esp, ebp
.text:004035D7                 pop     ebp
.text:004035D8                 retn    4
.text:004035DB ; ---------------------------------------------------------------------------
.text:004035DB
.text:004035DB loc_4035DB:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+E3↑j
.text:004035DB                 cmp     dword ptr [edx+24h], 0
.text:004035DF                 jz      short loc_4035EE
.text:004035E1                 cmp     eax, 9
.text:004035E4                 jz      short loc_4035EE
.text:004035E6                 jmp     short loc_4035EB
.text:004035E8 ; ---------------------------------------------------------------------------
.text:004035E8
.text:004035E8 loc_4035E8:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+EE↑j
.text:004035E8                 mov     eax, [ebp+var_18]
.text:004035EB
.text:004035EB loc_4035EB:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+127↑j
.text:004035EB                 mov     esi, [edx+24h]
.text:004035EE
.text:004035EE loc_4035EE:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+120↑j
.text:004035EE                                         ; ParseAndSaveOptionValue(x,x,x)+125↑j
.text:004035EE                 dec     eax             ; switch 10 cases
.text:004035EF                 cmp     eax, 9
.text:004035F2                 ja      short def_4035F4 ; jumptable 00403A3E default case
.text:004035F2                                         ; jumptable 004035F4 default case
.text:004035F4                 jmp     ds:jpt_4035F4[eax*4] ; switch jump
.text:004035FB ; ---------------------------------------------------------------------------
.text:004035FB
.text:004035FB loc_4035FB:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+135↑j
.text:004035FB                                         ; DATA XREF: .text:jpt_4035F4↓o
.text:004035FB                 test    ebx, ebx        ; jumptable 00403A3E case 1
.text:004035FB                                         ; jumptable 004035F4 case 1
.text:004035FD                 jz      short loc_403646
.text:004035FF                 mov     eax, edi
.text:00403601                 and     eax, 42h
.text:00403604                 or      eax, 0
.text:00403607                 jz      short loc_403646
.text:00403609                 push    0
.text:0040360B                 push    0
.text:0040360D                 push    0Ah
.text:0040360F                 mov     edx, ebx
.text:00403611                 pop     ecx
.text:00403612                 call    sub_4019AD
.text:00403617                 test    eax, eax
.text:00403619                 jnz     short loc_403629
.text:0040361B
.text:0040361B loc_40361B:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+283↓j
.text:0040361B                                         ; ParseAndSaveOptionValue(x,x,x)+2EC↓j
.text:0040361B                 call    ds:GetLastError
.text:00403621                 test    eax, eax
.text:00403623                 jnz     short loc_4035C1
.text:00403625                 push    8
.text:00403627                 jmp     short loc_4035BB
.text:00403629 ; ---------------------------------------------------------------------------
.text:00403629
.text:00403629 loc_403629:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+15A↑j
.text:00403629                 push    ecx
.text:0040362A                 mov     edx, offset dword_401110
.text:0040362F                 mov     ecx, eax
.text:00403631                 call    sub_4023BD
.text:00403636                 mov     ebx, eax
.text:00403638                 call    ds:GetLastError
.text:0040363E                 test    eax, eax
.text:00403640                 jnz     loc_4035C1
.text:00403646
.text:00403646 loc_403646:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+13E↑j
.text:00403646                                         ; ParseAndSaveOptionValue(x,x,x)+148↑j
.text:00403646                 mov     eax, edi
.text:00403648                 and     eax, 2
.text:0040364B                 or      eax, 0
.text:0040364E                 jz      short loc_4036A8
.text:00403650                 test    ebx, ebx
.text:00403652                 jnz     short loc_40365C
.text:00403654
.text:00403654 loc_403654:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+135↑j
.text:00403654                                         ; ParseAndSaveOptionValue(x,x,x)+1EB↓j ...
.text:00403654                 xor     eax, eax        ; jumptable 00403A3E cases 4-6
.text:00403654                                         ; jumptable 004035F4 cases 4-6
.text:00403656                 inc     eax
.text:00403657                 jmp     loc_4035C8
.text:0040365C ; ---------------------------------------------------------------------------
.text:0040365C
.text:0040365C loc_40365C:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+193↑j
.text:0040365C                 mov     edx, dword ptr [ebp+var_38] ; char
.text:0040365F                 mov     ecx, ebx        ; Args
.text:00403661                 push    1               ; int
.text:00403663                 call    sub_402271
.text:00403668                 test    eax, eax
.text:0040366A                 jnz     short loc_4036A8
.text:0040366C                 test    esi, esi
.text:0040366E                 jz      short loc_40369A
.text:00403670                 push    esi             ; lpString
.text:00403671                 call    ds:lstrlenW
.text:00403677                 test    eax, eax
.text:00403679                 jz      short loc_40369A
.text:0040367B                 push    dword ptr [ebp+Args]
.text:0040367E                 mov     ecx, 15E1h
.text:00403683                 push    esi
.text:00403684                 push    ebx             ; Args
.text:00403685                 call    sub_401E93
.text:0040368A                 push    eax             ; Format
.text:0040368B                 push    3               ; int
.text:0040368D                 call    sub_401B84
.text:00403692                 add     esp, 14h
.text:00403695                 jmp     loc_403590
.text:0040369A ; ---------------------------------------------------------------------------
.text:0040369A
.text:0040369A loc_40369A:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+1AF↑j
.text:0040369A                                         ; ParseAndSaveOptionValue(x,x,x)+1BA↑j
.text:0040369A                 push    dword ptr [ebp+Args]
.text:0040369D                 mov     ecx, 15ECh
.text:004036A2                 push    ebx
.text:004036A3                 jmp     loc_403564
.text:004036A8 ; ---------------------------------------------------------------------------
.text:004036A8
.text:004036A8 loc_4036A8:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+18F↑j
.text:004036A8                                         ; ParseAndSaveOptionValue(x,x,x)+1AB↑j
.text:004036A8                 test    ebx, ebx
.text:004036AA                 jz      short loc_403654 ; jumptable 00403A3E cases 4-6
.text:004036AA                                         ; jumptable 004035F4 cases 4-6
.text:004036AC                 mov     eax, edi
.text:004036AE                 and     eax, 80h
.text:004036B3                 or      eax, 0
.text:004036B6                 jz      short loc_4036F9
.text:004036B8                 push    ebx             ; lpString
.text:004036B9                 call    ds:lstrlenW
.text:004036BF                 test    eax, eax
.text:004036C1                 jnz     short loc_4036F9
.text:004036C3                 test    esi, esi
.text:004036C5                 jz      short loc_4036DC
.text:004036C7                 push    esi             ; lpString
.text:004036C8                 call    ds:lstrlenW
.text:004036CE                 test    eax, eax
.text:004036D0                 jz      short loc_4036DC
.text:004036D2                 mov     ecx, 15EEh
.text:004036D7                 jmp     loc_403560
.text:004036DC ; ---------------------------------------------------------------------------
.text:004036DC
.text:004036DC loc_4036DC:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+206↑j
.text:004036DC                                         ; ParseAndSaveOptionValue(x,x,x)+211↑j
.text:004036DC                 mov     ecx, 15EFh
.text:004036E1
.text:004036E1 loc_4036E1:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+41B↓j
.text:004036E1                                         ; ParseAndSaveOptionValue(x,x,x)+46A↓j
.text:004036E1                 push    dword ptr [ebp+Args] ; Args
.text:004036E4
.text:004036E4 loc_4036E4:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+2C4↓j
.text:004036E4                 call    sub_401E93
.text:004036E9                 push    eax             ; Format
.text:004036EA                 push    1               ; int
.text:004036EC                 call    sub_401B84
.text:004036F1                 add     esp, 0Ch
.text:004036F4                 jmp     loc_403590
.text:004036F9 ; ---------------------------------------------------------------------------
.text:004036F9
.text:004036F9 loc_4036F9:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+1F7↑j
.text:004036F9                                         ; ParseAndSaveOptionValue(x,x,x)+202↑j
.text:004036F9                 mov     eax, edi
.text:004036FB                 and     eax, 1
.text:004036FE                 or      eax, 0
.text:00403701                 jz      short loc_403747
.text:00403703                 mov     ecx, [ebp+var_1C]
.text:00403706                 mov     esi, [ebp+var_C]
.text:00403709                 mov     eax, [ecx+10h]
.text:0040370C                 and     eax, 4000h
.text:00403711                 or      eax, 0
.text:00403714                 jz      short loc_40372F
.text:00403716                 push    ecx             ; int
.text:00403717                 mov     ecx, [esi]
.text:00403719                 mov     edx, 20000h
.text:0040371E                 push    1               ; int
.text:00403720                 push    ebx             ; lpString2
.text:00403721                 call    sub_40411D
.text:00403726                 cmp     eax, 0FFFFFFFFh
.text:00403729                 jnz     loc_403654      ; jumptable 00403A3E cases 4-6
.text:00403729                                         ; jumptable 004035F4 cases 4-6
.text:0040372F
.text:0040372F loc_40372F:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+255↑j
.text:0040372F                 push    ecx
.text:00403730                 mov     ecx, [esi]
.text:00403732                 mov     edx, ebx
.text:00403734                 call    sub_404277
.text:00403739
.text:00403739 loc_403739:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+3BA↓j
.text:00403739                                         ; ParseAndSaveOptionValue(x,x,x)+3C7↓j ...
.text:00403739                 cmp     eax, 0FFFFFFFFh
.text:0040373C                 jnz     loc_403654      ; jumptable 00403A3E cases 4-6
.text:0040373C                                         ; jumptable 004035F4 cases 4-6
.text:00403742                 jmp     loc_40361B
.text:00403747 ; ---------------------------------------------------------------------------
.text:00403747
.text:00403747 loc_403747:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+242↑j
.text:00403747                 cmp     [ebp+var_14], 0
.text:0040374B                 jz      short loc_403788
.text:0040374D                 push    ebx             ; lpString
.text:0040374E                 call    ds:lstrlenW
.text:00403754                 mov     ecx, [ebp+var_14]
.text:00403757                 cmp     eax, ecx
.text:00403759                 jl      short loc_40378B
.text:0040375B                 test    esi, esi
.text:0040375D                 jz      short loc_403779
.text:0040375F                 push    esi             ; lpString
.text:00403760                 call    ds:lstrlenW
.text:00403766                 test    eax, eax
.text:00403768                 jz      short loc_403779
.text:0040376A                 mov     eax, [ebp+var_14]
.text:0040376D                 mov     ecx, 15F4h
.text:00403772                 dec     eax
.text:00403773                 push    eax
.text:00403774                 jmp     loc_403563
.text:00403779 ; ---------------------------------------------------------------------------
.text:00403779
.text:00403779 loc_403779:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+29E↑j
.text:00403779                                         ; ParseAndSaveOptionValue(x,x,x)+2A9↑j
.text:00403779                 mov     eax, [ebp+var_14]
.text:0040377C                 mov     ecx, 15F2h
.text:00403781                 dec     eax
.text:00403782                 push    eax
.text:00403783                 jmp     loc_4036E4
.text:00403788 ; ---------------------------------------------------------------------------
.text:00403788
.text:00403788 loc_403788:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+28C↑j
.text:00403788                 mov     ecx, [ebp+var_14]
.text:0040378B
.text:0040378B loc_40378B:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+29A↑j
.text:0040378B                 and     edi, 10000h
.text:00403791                 or      edi, 0
.text:00403794                 jz      short loc_4037BC
.text:00403796                 push    ebx             ; lpString
.text:00403797                 call    ds:lstrlenW
.text:0040379D                 inc     eax
.text:0040379E                 mov     [ebp+var_14], eax
.text:004037A1                 lea     ecx, [eax+eax]
.text:004037A4                 call    sub_402B01
.text:004037A9                 test    eax, eax
.text:004037AB                 jz      loc_40361B
.text:004037B1                 mov     ecx, [ebp+var_1C]
.text:004037B4                 mov     [ecx+2Ch], eax
.text:004037B7                 mov     ecx, [ebp+var_14]
.text:004037BA                 jmp     short loc_4037BF
.text:004037BC ; ---------------------------------------------------------------------------
.text:004037BC
.text:004037BC loc_4037BC:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+2D5↑j
.text:004037BC                 mov     eax, [ebp+var_C]
.text:004037BF
.text:004037BF loc_4037BF:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+2FB↑j
.text:004037BF                 push    ecx
.text:004037C0                 mov     edx, ebx
.text:004037C2                 mov     ecx, eax
.text:004037C4                 call    sub_4025EA
.text:004037C9                 jmp     loc_403654      ; jumptable 00403A3E cases 4-6
.text:004037C9                                         ; jumptable 004035F4 cases 4-6
.text:004037CE ; ---------------------------------------------------------------------------
.text:004037CE
.text:004037CE loc_4037CE:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+135↑j
.text:004037CE                                         ; DATA XREF: .text:jpt_4035F4↓o
.text:004037CE                 test    ebx, ebx        ; jumptable 00403A3E cases 2,3
.text:004037CE                                         ; jumptable 004035F4 cases 2,3
.text:004037D0                 jz      loc_403654      ; jumptable 00403A3E cases 4-6
.text:004037D0                                         ; jumptable 004035F4 cases 4-6
.text:004037D6                 mov     ecx, ebx        ; lpString
.text:004037D8                 call    sub_40267F
.text:004037DD                 test    eax, eax
.text:004037DF                 jz      loc_4038A1
.text:004037E5                 xor     eax, eax
.text:004037E7                 mov     ecx, ebx
.text:004037E9                 cmp     [ebp+var_18], 2
.text:004037ED                 setz    al
.text:004037F0                 push    eax
.text:004037F1                 call    sub_402173
.text:004037F6                 test    eax, eax
.text:004037F8                 jz      loc_4038A1
.text:004037FE                 mov     esi, [ebp+var_18]
.text:00403801                 mov     ecx, ebx
.text:00403803                 call    sub_4020BA
.text:00403808                 cmp     esi, 2
.text:0040380B                 jnz     short loc_403814
.text:0040380D                 mov     edx, [ebp+var_30]
.text:00403810                 mov     ebx, eax
.text:00403812                 jmp     short loc_40381C
.text:00403814 ; ---------------------------------------------------------------------------
.text:00403814
.text:00403814 loc_403814:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+34C↑j
.text:00403814                 mov     ebx, dword ptr [ebp+String2+4]
.text:00403817                 mov     edx, eax
.text:00403819                 mov     [ebp+var_30], edx
.text:0040381C
.text:0040381C loc_40381C:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+353↑j
.text:0040381C                 and     edi, 1
.text:0040381F                 or      edi, 0
.text:00403822                 jz      short loc_40388B
.text:00403824                 mov     ecx, [ebp+var_1C]
.text:00403827                 mov     eax, [ecx+10h]
.text:0040382A                 xor     ecx, ecx
.text:0040382C                 and     eax, 4000h
.text:00403831                 or      eax, ecx
.text:00403833                 jz      short loc_403867
.text:00403835                 push    ecx             ; int
.text:00403836                 cmp     esi, 2
.text:00403839                 lea     eax, [ebp+String2+4]
.text:0040383C                 mov     esi, [ebp+var_C]
.text:0040383F                 push    ecx             ; int
.text:00403840                 push    eax             ; lpString2
.text:00403841                 mov     ecx, [esi]
.text:00403843                 jnz     short loc_40384F
.text:00403845                 mov     dword ptr [ebp+String2+4], ebx
.text:00403848                 mov     edx, 30000h
.text:0040384D                 jmp     short loc_403857
.text:0040384F ; ---------------------------------------------------------------------------
.text:0040384F
.text:0040384F loc_40384F:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+384↑j
.text:0040384F                 mov     dword ptr [ebp+String2+4], edx
.text:00403852                 mov     edx, 40000h
.text:00403857
.text:00403857 loc_403857:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+38E↑j
.text:00403857                 call    sub_40411D
.text:0040385C                 cmp     eax, 0FFFFFFFFh
.text:0040385F                 jnz     loc_403654      ; jumptable 00403A3E cases 4-6
.text:0040385F                                         ; jumptable 004035F4 cases 4-6
.text:00403865                 jmp     short loc_40386A
.text:00403867 ; ---------------------------------------------------------------------------
.text:00403867
.text:00403867 loc_403867:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+374↑j
.text:00403867                 mov     esi, [ebp+var_C]
.text:0040386A
.text:0040386A loc_40386A:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+3A6↑j
.text:0040386A                 cmp     [ebp+var_18], 2
.text:0040386E                 mov     ecx, [esi]
.text:00403870                 jnz     short loc_40387E
.text:00403872                 mov     edx, ebx
.text:00403874                 call    sub_4042E4
.text:00403879                 jmp     loc_403739
.text:0040387E ; ---------------------------------------------------------------------------
.text:0040387E
.text:0040387E loc_40387E:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+3B1↑j
.text:0040387E                 mov     edx, [ebp+var_30]
.text:00403881                 call    sub_40432F
.text:00403886                 jmp     loc_403739
.text:0040388B ; ---------------------------------------------------------------------------
.text:0040388B
.text:0040388B loc_40388B:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+363↑j
.text:0040388B                 cmp     esi, 2
.text:0040388E                 mov     esi, [ebp+var_C]
.text:00403891                 jnz     short loc_40389A
.text:00403893                 mov     [esi], ebx
.text:00403895                 jmp     loc_403654      ; jumptable 00403A3E cases 4-6
.text:00403895                                         ; jumptable 004035F4 cases 4-6
.text:0040389A ; ---------------------------------------------------------------------------
.text:0040389A
.text:0040389A loc_40389A:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+3D2↑j
.text:0040389A                 mov     [esi], edx
.text:0040389C                 jmp     loc_403654      ; jumptable 00403A3E cases 4-6
.text:0040389C                                         ; jumptable 004035F4 cases 4-6
.text:004038A1 ; ---------------------------------------------------------------------------
.text:004038A1
.text:004038A1 loc_4038A1:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+320↑j
.text:004038A1                                         ; ParseAndSaveOptionValue(x,x,x)+339↑j
.text:004038A1                 and     edi, 10h
.text:004038A4                 or      edi, 0
.text:004038A7                 jz      short loc_4038BC
.text:004038A9                 mov     ecx, [ebp+arg_0]
.text:004038AC                 cmp     dword ptr [ecx+4], 0FFFFFFFFh
.text:004038B0                 jz      short loc_4038BC
.text:004038B2
.text:004038B2 loc_4038B2:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+44A↓j
.text:004038B2                 xor     eax, eax
.text:004038B4                 inc     eax
.text:004038B5                 mov     [ecx], eax
.text:004038B7                 jmp     loc_4035C8
.text:004038BC ; ---------------------------------------------------------------------------
.text:004038BC
.text:004038BC loc_4038BC:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+3E8↑j
.text:004038BC                                         ; ParseAndSaveOptionValue(x,x,x)+3F1↑j
.text:004038BC                 test    esi, esi
.text:004038BE                 jz      short loc_4038D5
.text:004038C0                 push    esi             ; lpString
.text:004038C1                 call    ds:lstrlenW
.text:004038C7                 test    eax, eax
.text:004038C9                 jz      short loc_4038D5
.text:004038CB                 mov     ecx, 15E2h
.text:004038D0                 jmp     loc_403560
.text:004038D5 ; ---------------------------------------------------------------------------
.text:004038D5
.text:004038D5 loc_4038D5:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+3FF↑j
.text:004038D5                                         ; ParseAndSaveOptionValue(x,x,x)+40A↑j
.text:004038D5                 mov     ecx, 15F0h
.text:004038DA                 jmp     loc_4036E1
.text:004038DF ; ---------------------------------------------------------------------------
.text:004038DF
.text:004038DF loc_4038DF:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+135↑j
.text:004038DF                                         ; DATA XREF: .text:jpt_4035F4↓o
.text:004038DF                 test    ebx, ebx        ; jumptable 00403A3E cases 7,8
.text:004038DF                                         ; jumptable 004035F4 cases 7,8
.text:004038E1                 jz      loc_403654      ; jumptable 00403A3E cases 4-6
.text:004038E1                                         ; jumptable 004035F4 cases 4-6
.text:004038E7                 mov     ecx, ebx
.text:004038E9                 call    sub_402021
.text:004038EE                 fstp    st
.text:004038F0                 call    ds:GetLastError
.text:004038F6                 test    eax, eax
.text:004038F8                 jz      short loc_40392E
.text:004038FA                 and     edi, 10h
.text:004038FD                 or      edi, 0
.text:00403900                 jz      short loc_40390B
.text:00403902                 mov     ecx, [ebp+arg_0]
.text:00403905                 cmp     dword ptr [ecx+4], 0FFFFFFFFh
.text:00403909                 jnz     short loc_4038B2
.text:0040390B
.text:0040390B loc_40390B:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+441↑j
.text:0040390B                 test    esi, esi
.text:0040390D                 jz      short loc_403924
.text:0040390F                 push    esi             ; lpString
.text:00403910                 call    ds:lstrlenW
.text:00403916                 test    eax, eax
.text:00403918                 jz      short loc_403924
.text:0040391A                 mov     ecx, 15E3h
.text:0040391F                 jmp     loc_403560
.text:00403924 ; ---------------------------------------------------------------------------
.text:00403924
.text:00403924 loc_403924:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+44E↑j
.text:00403924                                         ; ParseAndSaveOptionValue(x,x,x)+459↑j
.text:00403924                 mov     ecx, 15F1h
.text:00403929                 jmp     loc_4036E1
.text:0040392E ; ---------------------------------------------------------------------------
.text:0040392E
.text:0040392E loc_40392E:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+439↑j
.text:0040392E                 mov     esi, [ebp+var_1C]
.text:00403931                 mov     ecx, ebx
.text:00403933                 cmp     dword ptr [esi+8], 7
.text:00403937                 jnz     short loc_403945
.text:00403939                 call    sub_402021
.text:0040393E                 fstp    [ebp+var_20]
.text:00403941                 fldz
.text:00403943                 jmp     short loc_40394D
.text:00403945 ; ---------------------------------------------------------------------------
.text:00403945
.text:00403945 loc_403945:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+478↑j
.text:00403945                 call    sub_402021
.text:0040394A                 fst     [ebp+var_44]
.text:0040394D
.text:0040394D loc_40394D:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+484↑j
.text:0040394D                 and     edi, 1
.text:00403950                 xor     ecx, ecx
.text:00403952                 or      edi, ecx
.text:00403954                 jz      short loc_4039D5
.text:00403956                 mov     eax, [esi+10h]
.text:00403959                 fld     [ebp+var_20]
.text:0040395C                 and     eax, 4000h
.text:00403961                 or      eax, ecx
.text:00403963                 jz      short loc_4039A2
.text:00403965                 cmp     dword ptr [esi+8], 7
.text:00403969                 mov     esi, [ebp+var_C]
.text:0040396C                 push    ecx             ; int
.text:0040396D                 push    ecx             ; int
.text:0040396E                 mov     ecx, [esi]
.text:00403970                 jnz     short loc_403981
.text:00403972                 fstp    st(1)
.text:00403974                 lea     eax, [ebp+String2+4]
.text:00403977                 fstp    dword ptr [ebp+String2+4]
.text:0040397A                 mov     edx, 60000h
.text:0040397F                 jmp     short loc_40398E
.text:00403981 ; ---------------------------------------------------------------------------
.text:00403981
.text:00403981 loc_403981:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+4B1↑j
.text:00403981                 fstp    st
.text:00403983                 lea     eax, [ebp+String2]
.text:00403986                 fstp    qword ptr [ebp+String2]
.text:00403989                 mov     edx, 70000h
.text:0040398E
.text:0040398E loc_40398E:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+4C0↑j
.text:0040398E                 push    eax             ; lpString2
.text:0040398F                 call    sub_40411D
.text:00403994                 cmp     eax, 0FFFFFFFFh
.text:00403997                 jnz     loc_403654      ; jumptable 00403A3E cases 4-6
.text:00403997                                         ; jumptable 004035F4 cases 4-6
.text:0040399D                 fld     [ebp+var_20]
.text:004039A0                 jmp     short loc_4039A7
.text:004039A2 ; ---------------------------------------------------------------------------
.text:004039A2
.text:004039A2 loc_4039A2:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+4A4↑j
.text:004039A2                 mov     esi, [ebp+var_C]
.text:004039A5                 fstp    st(1)
.text:004039A7
.text:004039A7 loc_4039A7:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+4E1↑j
.text:004039A7                 mov     ecx, [ebp+var_1C]
.text:004039AA                 push    ecx
.text:004039AB                 cmp     dword ptr [ecx+8], 7
.text:004039AF                 jnz     short loc_4039C0
.text:004039B1                 mov     ecx, [esi]
.text:004039B3                 fstp    [esp+58h+var_58] ; float
.text:004039B6                 call    sub_40437A
.text:004039BB                 jmp     loc_403739
.text:004039C0 ; ---------------------------------------------------------------------------
.text:004039C0
.text:004039C0 loc_4039C0:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+4F0↑j
.text:004039C0                 fstp    st
.text:004039C2                 fld     [ebp+var_44]
.text:004039C5                 push    ecx
.text:004039C6                 mov     ecx, [esi]
.text:004039C8                 fstp    qword ptr [esp] ; double
.text:004039CB                 call    sub_4043C6
.text:004039D0                 jmp     loc_403739
.text:004039D5 ; ---------------------------------------------------------------------------
.text:004039D5
.text:004039D5 loc_4039D5:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+495↑j
.text:004039D5                 cmp     dword ptr [esi+8], 7
.text:004039D9                 mov     esi, [ebp+var_C]
.text:004039DC                 jnz     short loc_4039EA
.text:004039DE                 fstp    st
.text:004039E0                 fld     [ebp+var_20]
.text:004039E3                 fstp    dword ptr [esi]
.text:004039E5                 jmp     loc_403654      ; jumptable 00403A3E cases 4-6
.text:004039E5                                         ; jumptable 004035F4 cases 4-6
.text:004039EA ; ---------------------------------------------------------------------------
.text:004039EA
.text:004039EA loc_4039EA:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+51D↑j
.text:004039EA                 fstp    qword ptr [esi]
.text:004039EC                 jmp     loc_403654      ; jumptable 00403A3E cases 4-6
.text:004039EC                                         ; jumptable 004035F4 cases 4-6
.text:004039F1 ; ---------------------------------------------------------------------------
.text:004039F1
.text:004039F1 loc_4039F1:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+135↑j
.text:004039F1                                         ; DATA XREF: .text:jpt_4035F4↓o
.text:004039F1                 mov     ecx, [ebp+arg_0] ; jumptable 00403A3E case 9
.text:004039F1                                         ; jumptable 004035F4 case 9
.text:004039F4                 push    ecx
.text:004039F5                 push    dword ptr [edx+38h]
.text:004039F8                 push    ebx
.text:004039F9                 push    esi
.text:004039FA                 mov     esi, [edx+34h]
.text:004039FD                 mov     ecx, esi
.text:004039FF                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00403A05                 call    esi
.text:00403A07                 jmp     loc_4035C8
.text:00403A0C ; ---------------------------------------------------------------------------
.text:00403A0C
.text:00403A0C loc_403A0C:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+135↑j
.text:00403A0C                                         ; DATA XREF: .text:jpt_4035F4↓o
.text:00403A0C                 test    ebx, ebx        ; jumptable 00403A3E case 10
.text:00403A0C                                         ; jumptable 004035F4 case 10
.text:00403A0E                 jz      short loc_403A31
.text:00403A10                 test    esi, esi
.text:00403A12                 jz      loc_403576
.text:00403A18                 push    esi             ; lpString
.text:00403A19                 call    ds:lstrlenW
.text:00403A1F                 test    eax, eax
.text:00403A21                 jz      loc_403576
.text:00403A27                 mov     ecx, 15F3h
.text:00403A2C                 jmp     loc_403560
.text:00403A31 ; ---------------------------------------------------------------------------
.text:00403A31
.text:00403A31 loc_403A31:                             ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+54F↑j
.text:00403A31                 mov     dword ptr [ecx], 1
.text:00403A37                 jmp     loc_403654      ; jumptable 00403A3E cases 4-6
.text:00403A37 _ParseAndSaveOptionValue@12 endp        ; jumptable 004035F4 cases 4-6
.text:00403A37
.text:00403A37 ; ---------------------------------------------------------------------------
.text:00403A3C                 db 8Dh, 49h, 0
.text:00403A3F jpt_4035F4      dd offset loc_4035FB    ; DATA XREF: ParseAndSaveOptionValue(x,x,x)+135↑r
.text:00403A3F                 dd offset loc_4037CE    ; jump table for switch statement
.text:00403A3F                 dd offset loc_4037CE
.text:00403A3F                 dd offset loc_403654
.text:00403A3F                 dd offset loc_403654
.text:00403A3F                 dd offset loc_403654
.text:00403A3F                 dd offset loc_4038DF
.text:00403A3F                 dd offset loc_4038DF
.text:00403A3F                 dd offset loc_4039F1
.text:00403A3F                 dd offset loc_403A0C
.text:00403A67
.text:00403A67 ; =============== S U B R O U T I N E =======================================
.text:00403A67
.text:00403A67 ; Attributes: bp-based frame
.text:00403A67
.text:00403A67 ; int __stdcall sub_403A67(LPCWSTR lpString)
.text:00403A67 sub_403A67      proc near               ; CODE XREF: sub_403B36+CB↓p
.text:00403A67                                         ; sub_403C94+DE↓p ...
.text:00403A67
.text:00403A67 var_4           = dword ptr -4
.text:00403A67 lpString        = dword ptr  8
.text:00403A67
.text:00403A67                 mov     edi, edi
.text:00403A69                 push    ebp
.text:00403A6A                 mov     ebp, esp
.text:00403A6C                 push    ecx
.text:00403A6D                 push    ebx
.text:00403A6E                 push    esi
.text:00403A6F                 push    edi
.text:00403A70                 push    0               ; dwErrCode
.text:00403A72                 mov     esi, edx
.text:00403A74                 call    ds:SetLastError
.text:00403A7A                 test    esi, esi
.text:00403A7C                 jz      loc_403B18
.text:00403A82                 mov     ebx, [ebp+lpString]
.text:00403A85                 test    ebx, ebx
.text:00403A87                 jz      loc_403B18
.text:00403A8D                 mov     ecx, ebx        ; lpString
.text:00403A8F                 call    sub_402E6D
.text:00403A94                 test    eax, eax
.text:00403A96                 jnz     short loc_403AA2
.text:00403A98
.text:00403A98 loc_403A98:                             ; CODE XREF: sub_403A67+8D↓j
.text:00403A98                 push    490h
.text:00403A9D                 jmp     loc_403B24
.text:00403AA2 ; ---------------------------------------------------------------------------
.text:00403AA2
.text:00403AA2 loc_403AA2:                             ; CODE XREF: sub_403A67+2F↑j
.text:00403AA2                 xor     edi, edi
.text:00403AA4                 add     esi, 20h ; ' '
.text:00403AA7
.text:00403AA7 loc_403AA7:                             ; CODE XREF: sub_403A67+8B↓j
.text:00403AA7                 lea     eax, [esi-20h]
.text:00403AAA                 test    eax, eax
.text:00403AAC                 jz      short loc_403AFA
.text:00403AAE                 mov     eax, [esi-10h]
.text:00403AB1                 and     eax, 100000h
.text:00403AB6                 or      eax, 0
.text:00403AB9                 jz      short loc_403AC1
.text:00403ABB                 and     [ebp+var_4], 0
.text:00403ABF                 jmp     short loc_403AC8
.text:00403AC1 ; ---------------------------------------------------------------------------
.text:00403AC1
.text:00403AC1 loc_403AC1:                             ; CODE XREF: sub_403A67+52↑j
.text:00403AC1                 mov     [ebp+var_4], 1
.text:00403AC8
.text:00403AC8 loc_403AC8:                             ; CODE XREF: sub_403A67+58↑j
.text:00403AC8                 cmp     dword ptr [esi], 0
.text:00403ACB                 jz      short loc_403AEB
.text:00403ACD                 push    dword ptr [esi] ; lpString
.text:00403ACF                 call    ds:lstrlenW
.text:00403AD5                 test    eax, eax
.text:00403AD7                 jle     short loc_403AEB
.text:00403AD9                 push    [ebp+var_4]     ; int
.text:00403ADC                 mov     edx, [esi]      ; char
.text:00403ADE                 lea     ecx, [ebx+2]    ; Args
.text:00403AE1                 call    sub_402271
.text:00403AE6                 cmp     eax, 1
.text:00403AE9                 jz      short loc_403AF6
.text:00403AEB
.text:00403AEB loc_403AEB:                             ; CODE XREF: sub_403A67+64↑j
.text:00403AEB                                         ; sub_403A67+70↑j
.text:00403AEB                 inc     edi
.text:00403AEC                 add     esi, 50h ; 'P'
.text:00403AEF                 cmp     edi, 1
.text:00403AF2                 jb      short loc_403AA7
.text:00403AF4                 jmp     short loc_403A98
.text:00403AF6 ; ---------------------------------------------------------------------------
.text:00403AF6
.text:00403AF6 loc_403AF6:                             ; CODE XREF: sub_403A67+82↑j
.text:00403AF6                 mov     eax, edi
.text:00403AF8                 jmp     short loc_403B2D
.text:00403AFA ; ---------------------------------------------------------------------------
.text:00403AFA
.text:00403AFA loc_403AFA:                             ; CODE XREF: sub_403A67+45↑j
.text:00403AFA                 call    ds:GetLastError
.text:00403B00                 test    eax, eax
.text:00403B02                 jnz     short loc_403B0F
.text:00403B04                 push    42Bh            ; dwErrCode
.text:00403B09                 call    ds:SetLastError
.text:00403B0F
.text:00403B0F loc_403B0F:                             ; CODE XREF: sub_403A67+9B↑j
.text:00403B0F                 call    sub_401C13
.text:00403B14                 xor     eax, eax
.text:00403B16                 jmp     short loc_403B2D
.text:00403B18 ; ---------------------------------------------------------------------------
.text:00403B18
.text:00403B18 loc_403B18:                             ; CODE XREF: sub_403A67+15↑j
.text:00403B18                                         ; sub_403A67+20↑j
.text:00403B18                 call    ds:GetLastError
.text:00403B1E                 test    eax, eax
.text:00403B20                 jnz     short loc_403B2A
.text:00403B22                 push    57h ; 'W'       ; dwErrCode
.text:00403B24
.text:00403B24 loc_403B24:                             ; CODE XREF: sub_403A67+36↑j
.text:00403B24                 call    ds:SetLastError
.text:00403B2A
.text:00403B2A loc_403B2A:                             ; CODE XREF: sub_403A67+B9↑j
.text:00403B2A                 or      eax, 0FFFFFFFFh
.text:00403B2D
.text:00403B2D loc_403B2D:                             ; CODE XREF: sub_403A67+91↑j
.text:00403B2D                                         ; sub_403A67+AF↑j
.text:00403B2D                 pop     edi
.text:00403B2E                 pop     esi
.text:00403B2F                 pop     ebx
.text:00403B30                 mov     esp, ebp
.text:00403B32                 pop     ebp
.text:00403B33                 retn    4
.text:00403B33 sub_403A67      endp
.text:00403B33
.text:00403B36
.text:00403B36 ; =============== S U B R O U T I N E =======================================
.text:00403B36
.text:00403B36 ; Attributes: bp-based frame
.text:00403B36
.text:00403B36 ; int __stdcall sub_403B36(LPCWSTR lpString, int)
.text:00403B36 sub_403B36      proc near               ; CODE XREF: sub_403C94+F2↓p
.text:00403B36                                         ; sub_403C94+174↓p
.text:00403B36
.text:00403B36 var_C           = dword ptr -0Ch
.text:00403B36 var_8           = dword ptr -8
.text:00403B36 var_4           = dword ptr -4
.text:00403B36 lpString        = dword ptr  8
.text:00403B36 arg_4           = dword ptr  0Ch
.text:00403B36
.text:00403B36                 mov     edi, edi
.text:00403B38                 push    ebp
.text:00403B39                 mov     ebp, esp
.text:00403B3B                 sub     esp, 0Ch
.text:00403B3E                 push    ebx
.text:00403B3F                 push    esi
.text:00403B40                 push    edi
.text:00403B41                 mov     ebx, edx
.text:00403B43                 push    0               ; dwErrCode
.text:00403B45                 mov     [ebp+var_C], ebx
.text:00403B48                 call    ds:SetLastError
.text:00403B4E                 test    ebx, ebx
.text:00403B50                 jz      loc_403C08
.text:00403B56                 mov     edi, [ebp+lpString]
.text:00403B59                 test    edi, edi
.text:00403B5B                 jz      loc_403C08
.text:00403B61                 mov     esi, [ebp+arg_4]
.text:00403B64                 test    esi, esi
.text:00403B66                 jz      loc_403C08
.text:00403B6C                 and     dword ptr [esi], 0
.text:00403B6F                 and     dword ptr [esi+4], 0
.text:00403B73                 push    ecx             ; int
.text:00403B74                 push    ecx             ; int
.text:00403B75                 push    3Ah ; ':'
.text:00403B77                 pop     edx             ; wMatch
.text:00403B78                 mov     ecx, edi        ; pszStart
.text:00403B7A                 call    sub_402229
.text:00403B7F                 mov     ebx, eax
.text:00403B81                 cmp     ebx, 0FFFFFFFFh
.text:00403B84                 jz      loc_403C1A
.text:00403B8A                 push    edi             ; lpString
.text:00403B8B                 call    ds:lstrlenW
.text:00403B91                 push    1
.text:00403B93                 lea     ecx, [ebx+5]
.text:00403B96                 sub     eax, ebx
.text:00403B98                 push    ecx
.text:00403B99                 mov     [ebp+var_8], eax
.text:00403B9C                 xor     edx, edx
.text:00403B9E                 push    8
.text:00403BA0                 dec     eax
.text:00403BA1                 pop     ecx
.text:00403BA2                 mov     [ebp+var_4], eax
.text:00403BA5                 call    sub_4019AD
.text:00403BAA                 mov     [esi], eax
.text:00403BAC                 test    eax, eax
.text:00403BAE                 jnz     short loc_403BBE
.text:00403BB0
.text:00403BB0 loc_403BB0:                             ; CODE XREF: sub_403B36+A0↓j
.text:00403BB0                 call    ds:GetLastError
.text:00403BB6                 test    eax, eax
.text:00403BB8                 jnz     short loc_403C1A
.text:00403BBA                 push    8
.text:00403BBC                 jmp     short loc_403C14
.text:00403BBE ; ---------------------------------------------------------------------------
.text:00403BBE
.text:00403BBE loc_403BBE:                             ; CODE XREF: sub_403B36+78↑j
.text:00403BBE                 mov     eax, [ebp+var_4]
.text:00403BC1                 xor     edx, edx
.text:00403BC3                 push    1
.text:00403BC5                 add     eax, 5
.text:00403BC8                 push    eax
.text:00403BC9                 push    9
.text:00403BCB                 pop     ecx
.text:00403BCC                 call    sub_4019AD
.text:00403BD1                 mov     [esi+4], eax
.text:00403BD4                 test    eax, eax
.text:00403BD6                 jz      short loc_403BB0
.text:00403BD8                 mov     ecx, [esi]
.text:00403BDA                 lea     eax, [ebx+1]
.text:00403BDD                 push    eax
.text:00403BDE                 mov     edx, edi
.text:00403BE0                 call    sub_4025EA
.text:00403BE5                 cmp     [ebp+var_4], 0
.text:00403BE9                 jz      short loc_403BFC
.text:00403BEB                 push    [ebp+var_8]
.text:00403BEE                 mov     ecx, [esi+4]
.text:00403BF1                 lea     edx, [edi+2]
.text:00403BF4                 lea     edx, [edx+ebx*2]
.text:00403BF7                 call    sub_4025EA
.text:00403BFC
.text:00403BFC loc_403BFC:                             ; CODE XREF: sub_403B36+B3↑j
.text:00403BFC                 push    dword ptr [esi] ; lpString
.text:00403BFE                 mov     edx, [ebp+var_C]
.text:00403C01                 call    sub_403A67
.text:00403C06                 jmp     short loc_403C1D
.text:00403C08 ; ---------------------------------------------------------------------------
.text:00403C08
.text:00403C08 loc_403C08:                             ; CODE XREF: sub_403B36+1A↑j
.text:00403C08                                         ; sub_403B36+25↑j ...
.text:00403C08                 call    ds:GetLastError
.text:00403C0E                 test    eax, eax
.text:00403C10                 jnz     short loc_403C1A
.text:00403C12                 push    57h ; 'W'       ; dwErrCode
.text:00403C14
.text:00403C14 loc_403C14:                             ; CODE XREF: sub_403B36+86↑j
.text:00403C14                 call    ds:SetLastError
.text:00403C1A
.text:00403C1A loc_403C1A:                             ; CODE XREF: sub_403B36+4E↑j
.text:00403C1A                                         ; sub_403B36+82↑j ...
.text:00403C1A                 or      eax, 0FFFFFFFFh
.text:00403C1D
.text:00403C1D loc_403C1D:                             ; CODE XREF: sub_403B36+D0↑j
.text:00403C1D                 pop     edi
.text:00403C1E                 pop     esi
.text:00403C1F                 pop     ebx
.text:00403C20                 mov     esp, ebp
.text:00403C22                 pop     ebp
.text:00403C23                 retn    8
.text:00403C23 sub_403B36      endp
.text:00403C23
.text:00403C26
.text:00403C26 ; =============== S U B R O U T I N E =======================================
.text:00403C26
.text:00403C26
.text:00403C26 sub_403C26      proc near               ; CODE XREF: sub_403C94+238↓p
.text:00403C26                                         ; sub_403C94+2FC↓p
.text:00403C26                 mov     edi, edi
.text:00403C28                 push    ebx
.text:00403C29                 push    esi
.text:00403C2A                 mov     esi, edx
.text:00403C2C                 push    edi
.text:00403C2D                 test    esi, esi
.text:00403C2F                 jz      short loc_403C8D
.text:00403C31                 call    ds:GetLastError
.text:00403C37                 mov     ebx, eax
.text:00403C39                 call    sub_401B05
.text:00403C3E                 test    eax, eax
.text:00403C40                 jnz     short loc_403C4C
.text:00403C42                 push    7
.text:00403C44                 pop     ecx
.text:00403C45                 call    sub_401961
.text:00403C4A                 jmp     short loc_403C5A
.text:00403C4C ; ---------------------------------------------------------------------------
.text:00403C4C
.text:00403C4C loc_403C4C:                             ; CODE XREF: sub_403C26+1A↑j
.text:00403C4C                 push    0
.text:00403C4E                 push    0
.text:00403C50                 push    7
.text:00403C52                 mov     edx, eax
.text:00403C54                 pop     ecx
.text:00403C55                 call    sub_4019AD
.text:00403C5A
.text:00403C5A loc_403C5A:                             ; CODE XREF: sub_403C26+24↑j
.text:00403C5A                 mov     edi, eax
.text:00403C5C                 test    edi, edi
.text:00403C5E                 jz      short loc_403C8D
.text:00403C60                 lea     ecx, [esi+2Ch]
.text:00403C63                 cmp     dword ptr [ecx], 0
.text:00403C66                 jz      short loc_403C7A
.text:00403C68                 mov     eax, [esi+10h]
.text:00403C6B                 and     eax, 10000h
.text:00403C70                 or      eax, 0
.text:00403C73                 jz      short loc_403C7A
.text:00403C75                 call    sub_402A57
.text:00403C7A
.text:00403C7A loc_403C7A:                             ; CODE XREF: sub_403C26+40↑j
.text:00403C7A                                         ; sub_403C26+4D↑j
.text:00403C7A                 mov     ecx, edi
.text:00403C7C                 call    sub_401B25
.text:00403C81                 push    ebx             ; dwErrCode
.text:00403C82                 call    ds:SetLastError
.text:00403C88                 xor     eax, eax
.text:00403C8A                 inc     eax
.text:00403C8B                 jmp     short loc_403C8F
.text:00403C8D ; ---------------------------------------------------------------------------
.text:00403C8D
.text:00403C8D loc_403C8D:                             ; CODE XREF: sub_403C26+9↑j
.text:00403C8D                                         ; sub_403C26+38↑j
.text:00403C8D                 xor     eax, eax
.text:00403C8F
.text:00403C8F loc_403C8F:                             ; CODE XREF: sub_403C26+65↑j
.text:00403C8F                 pop     edi
.text:00403C90                 pop     esi
.text:00403C91                 pop     ebx
.text:00403C92                 retn
.text:00403C92 sub_403C26      endp
.text:00403C92
.text:00403C92 ; ---------------------------------------------------------------------------
.text:00403C93                 align 4
.text:00403C94
.text:00403C94 ; =============== S U B R O U T I N E =======================================
.text:00403C94
.text:00403C94 ; Attributes: bp-based frame fuzzy-sp
.text:00403C94
.text:00403C94 sub_403C94      proc near               ; CODE XREF: sub_401440+74↑p
.text:00403C94
.text:00403C94 lpString        = dword ptr -38h
.text:00403C94 Args            = byte ptr -34h
.text:00403C94 var_30          = dword ptr -30h
.text:00403C94 var_2C          = dword ptr -2Ch
.text:00403C94 var_28          = dword ptr -28h
.text:00403C94 var_24          = dword ptr -24h
.text:00403C94 var_20          = dword ptr -20h
.text:00403C94 var_1C          = dword ptr -1Ch
.text:00403C94 var_18          = dword ptr -18h
.text:00403C94 var_14          = dword ptr -14h
.text:00403C94 var_10          = dword ptr -10h
.text:00403C94 var_C           = dword ptr -0Ch
.text:00403C94 var_8           = dword ptr -8
.text:00403C94 var_4           = dword ptr -4
.text:00403C94 arg_8           = dword ptr  10h
.text:00403C94
.text:00403C94                 mov     edi, edi
.text:00403C96                 push    ebp
.text:00403C97                 mov     ebp, esp
.text:00403C99                 and     esp, 0FFFFFFF8h
.text:00403C9C                 sub     esp, 3Ch
.text:00403C9F                 and     [esp+3Ch+var_2C], 0
.text:00403CA4                 push    ebx
.text:00403CA5                 push    esi
.text:00403CA6                 push    edi
.text:00403CA7                 mov     ebx, edx
.text:00403CA9                 mov     edi, ecx
.text:00403CAB                 push    0               ; dwErrCode
.text:00403CAD                 mov     [esp+4Ch+var_1C], ebx
.text:00403CB1                 mov     [esp+4Ch+var_20], edi
.text:00403CB5                 call    ds:SetLastError
.text:00403CBB                 test    edi, edi
.text:00403CBD                 jz      loc_403FE6
.text:00403CC3                 test    ebx, ebx
.text:00403CC5                 jz      loc_403FE6
.text:00403CCB                 mov     esi, [ebp+arg_8]
.text:00403CCE                 test    esi, esi
.text:00403CD0                 jz      loc_403FE6
.text:00403CD6                 call    sub_401DF5
.text:00403CDB                 test    eax, eax
.text:00403CDD                 jnz     short loc_403D00
.text:00403CDF                 mov     ecx, 157Fh
.text:00403CE4                 call    sub_401E93
.text:00403CE9                 mov     ecx, eax
.text:00403CEB                 call    sub_401B25
.text:00403CF0                 push    47Eh            ; dwErrCode
.text:00403CF5
.text:00403CF5 loc_403CF5:                             ; CODE XREF: sub_403C94+242↓j
.text:00403CF5                 call    ds:SetLastError
.text:00403CFB                 jmp     loc_403FF3
.text:00403D00 ; ---------------------------------------------------------------------------
.text:00403D00
.text:00403D00 loc_403D00:                             ; CODE XREF: sub_403C94+49↑j
.text:00403D00                 call    sub_4018B0
.text:00403D05                 test    eax, eax
.text:00403D07                 jz      loc_403FEE
.text:00403D0D                 xor     ecx, ecx        ; lpString
.text:00403D0F                 call    _PrepareUsageHelperText@4 ; PrepareUsageHelperText(x)
.text:00403D14                 mov     ebx, eax
.text:00403D16                 mov     dword ptr [esp+48h+Args], ebx
.text:00403D1A                 test    ebx, ebx
.text:00403D1C                 jz      loc_403FEE
.text:00403D22                 push    esi
.text:00403D23                 lea     ecx, [esp+4Ch+var_2C]
.text:00403D27                 call    sub_4031EB
.text:00403D2C                 test    eax, eax
.text:00403D2E                 jz      loc_403FEE
.text:00403D34                 and     [esp+48h+var_28], 0
.text:00403D39                 xor     ecx, ecx
.text:00403D3B                 inc     ecx
.text:00403D3C                 mov     [esp+48h+var_24], ecx
.text:00403D40                 cmp     edi, ecx
.text:00403D42                 jbe     loc_403F2F
.text:00403D48
.text:00403D48 loc_403D48:                             ; CODE XREF: sub_403C94+205↓j
.text:00403D48                 mov     edx, [esp+48h+var_1C]
.text:00403D4C                 lea     eax, [ecx+1]
.text:00403D4F                 mov     [esp+48h+var_30], 2
.text:00403D57                 mov     edi, [edx+ecx*4]
.text:00403D5A                 cmp     eax, [esp+48h+var_20]
.text:00403D5E                 jnb     short loc_403D6A
.text:00403D60                 mov     eax, [edx+ecx*4+4]
.text:00403D64                 mov     [esp+48h+lpString], eax
.text:00403D68                 jmp     short loc_403D6F
.text:00403D6A ; ---------------------------------------------------------------------------
.text:00403D6A
.text:00403D6A loc_403D6A:                             ; CODE XREF: sub_403C94+CA↑j
.text:00403D6A                 and     [esp+48h+lpString], 0
.text:00403D6F
.text:00403D6F loc_403D6F:                             ; CODE XREF: sub_403C94+D4↑j
.text:00403D6F                 push    edi             ; lpString
.text:00403D70                 mov     edx, esi
.text:00403D72                 call    sub_403A67
.text:00403D77                 mov     ecx, eax
.text:00403D79                 cmp     ecx, 0FFFFFFFFh
.text:00403D7C                 jnz     short loc_403DBD
.text:00403D7E                 lea     eax, [esp+48h+var_18]
.text:00403D82                 mov     edx, esi
.text:00403D84                 push    eax             ; int
.text:00403D85                 push    edi             ; lpString
.text:00403D86                 call    sub_403B36
.text:00403D8B                 mov     ecx, eax
.text:00403D8D                 cmp     ecx, 0FFFFFFFFh
.text:00403D90                 jnz     short loc_403DA8
.text:00403D92                 mov     eax, [esp+48h+var_2C]
.text:00403D96                 cmp     eax, ecx
.text:00403D98                 jz      loc_403EB0
.text:00403D9E                 mov     [esp+48h+lpString], edi
.text:00403DA2                 mov     ecx, eax
.text:00403DA4                 xor     edi, edi
.text:00403DA6                 jmp     short loc_403DB4
.text:00403DA8 ; ---------------------------------------------------------------------------
.text:00403DA8
.text:00403DA8 loc_403DA8:                             ; CODE XREF: sub_403C94+FC↑j
.text:00403DA8                 mov     eax, [esp+48h+var_14]
.text:00403DAC                 mov     edi, [esp+48h+var_18]
.text:00403DB0                 mov     [esp+48h+lpString], eax
.text:00403DB4
.text:00403DB4 loc_403DB4:                             ; CODE XREF: sub_403C94+112↑j
.text:00403DB4                 xor     edx, edx
.text:00403DB6                 inc     edx
.text:00403DB7                 mov     [esp+48h+var_30], edx
.text:00403DBB                 jmp     short loc_403DC1
.text:00403DBD ; ---------------------------------------------------------------------------
.text:00403DBD
.text:00403DBD loc_403DBD:                             ; CODE XREF: sub_403C94+E8↑j
.text:00403DBD                 mov     edx, [esp+48h+var_30]
.text:00403DC1
.text:00403DC1 loc_403DC1:                             ; CODE XREF: sub_403C94+127↑j
.text:00403DC1                 imul    ebx, ecx, 50h ; 'P'
.text:00403DC4                 add     ebx, esi
.text:00403DC6                 jz      loc_403F17
.text:00403DCC                 mov     ecx, [esp+48h+lpString]
.text:00403DD0                 test    ecx, ecx
.text:00403DD2                 jz      short loc_403E2F
.text:00403DD4                 cmp     edx, 2
.text:00403DD7                 jnz     short loc_403E2F
.text:00403DD9                 mov     eax, [ebx+8]
.text:00403DDC                 dec     eax             ; switch 10 cases
.text:00403DDD                 cmp     eax, 9
.text:00403DE0                 ja      short def_403DE9 ; jumptable 00403DE9 default case, cases 4-6,10
.text:00403DE2                 movzx   eax, ds:byte_404008[eax]
.text:00403DE9                 jmp     ds:jpt_403DE9[eax*4] ; switch jump
.text:00403DF0 ; ---------------------------------------------------------------------------
.text:00403DF0
.text:00403DF0 loc_403DF0:                             ; CODE XREF: sub_403C94+155↑j
.text:00403DF0                                         ; DATA XREF: .text:jpt_403DE9↓o
.text:00403DF0                 push    ecx             ; jumptable 00403DE9 cases 1-3,7-9
.text:00403DF1                 mov     edx, esi
.text:00403DF3                 call    sub_403A67
.text:00403DF8                 cmp     eax, 0FFFFFFFFh
.text:00403DFB                 jnz     short loc_403E12
.text:00403DFD                 lea     eax, [esp+48h+var_18]
.text:00403E01                 mov     edx, esi
.text:00403E03                 push    eax             ; int
.text:00403E04                 push    [esp+4Ch+lpString] ; lpString
.text:00403E08                 call    sub_403B36
.text:00403E0D                 cmp     eax, 0FFFFFFFFh
.text:00403E10                 jz      short loc_403E17
.text:00403E12
.text:00403E12 loc_403E12:                             ; CODE XREF: sub_403C94+167↑j
.text:00403E12                 xor     edx, edx
.text:00403E14                 inc     edx
.text:00403E15                 jmp     short loc_403E1B
.text:00403E17 ; ---------------------------------------------------------------------------
.text:00403E17
.text:00403E17 loc_403E17:                             ; CODE XREF: sub_403C94+17C↑j
.text:00403E17                 mov     edx, [esp+48h+var_30]
.text:00403E1B
.text:00403E1B loc_403E1B:                             ; CODE XREF: sub_403C94+181↑j
.text:00403E1B                 inc     eax
.text:00403E1C                 neg     eax
.text:00403E1E                 sbb     eax, eax
.text:00403E20                 not     eax
.text:00403E22                 and     eax, [esp+48h+lpString]
.text:00403E26                 mov     ecx, eax
.text:00403E28                 jmp     short loc_403E2F
.text:00403E2A ; ---------------------------------------------------------------------------
.text:00403E2A
.text:00403E2A def_403DE9:                             ; CODE XREF: sub_403C94+14C↑j
.text:00403E2A                                         ; sub_403C94+155↑j
.text:00403E2A                                         ; DATA XREF: ...
.text:00403E2A                 xor     edx, edx        ; jumptable 00403DE9 default case, cases 4-6,10
.text:00403E2C                 xor     ecx, ecx
.text:00403E2E                 inc     edx
.text:00403E2F
.text:00403E2F loc_403E2F:                             ; CODE XREF: sub_403C94+13E↑j
.text:00403E2F                                         ; sub_403C94+143↑j ...
.text:00403E2F                 mov     eax, [esp+48h+var_2C]
.text:00403E33                 mov     [esp+48h+var_C], eax
.text:00403E37                 mov     eax, dword ptr [esp+48h+Args]
.text:00403E3B                 mov     [esp+48h+var_8], eax
.text:00403E3F                 lea     eax, [esp+48h+var_10]
.text:00403E43                 mov     [esp+48h+var_10], edx
.text:00403E47                 mov     edx, ecx        ; char
.text:00403E49                 push    eax             ; int
.text:00403E4A                 mov     ecx, edi        ; Args
.text:00403E4C                 mov     [esp+4Ch+var_4], ebx
.text:00403E50                 call    _ParseAndSaveOptionValue@12 ; ParseAndSaveOptionValue(x,x,x)
.text:00403E55                 mov     edx, [esp+48h+var_10]
.text:00403E59                 test    eax, eax
.text:00403E5B                 jz      loc_403F8E
.text:00403E61                 mov     eax, [ebx+18h]
.text:00403E64                 test    eax, eax
.text:00403E66                 jz      short loc_403E6D
.text:00403E68                 cmp     eax, [ebx+1Ch]
.text:00403E6B                 jz      short loc_403EDB
.text:00403E6D
.text:00403E6D loc_403E6D:                             ; CODE XREF: sub_403C94+1D2↑j
.text:00403E6D                 mov     eax, [ebx+10h]
.text:00403E70                 xor     edi, edi
.text:00403E72                 inc     dword ptr [ebx+1Ch]
.text:00403E75                 and     eax, 20000h
.text:00403E7A                 or      eax, edi
.text:00403E7C                 jz      short loc_403E87
.text:00403E7E                 xor     eax, eax
.text:00403E80                 inc     eax
.text:00403E81                 mov     [esp+48h+var_28], eax
.text:00403E85                 jmp     short loc_403E8B
.text:00403E87 ; ---------------------------------------------------------------------------
.text:00403E87
.text:00403E87 loc_403E87:                             ; CODE XREF: sub_403C94+1E8↑j
.text:00403E87                 mov     eax, [esp+48h+var_28]
.text:00403E8B
.text:00403E8B loc_403E8B:                             ; CODE XREF: sub_403C94+1F1↑j
.text:00403E8B                 mov     ecx, [esp+48h+var_24]
.text:00403E8F                 add     ecx, edx
.text:00403E91                 mov     [esp+48h+var_24], ecx
.text:00403E95                 cmp     ecx, [esp+48h+var_20]
.text:00403E99                 jb      loc_403D48
.text:00403E9F                 test    eax, eax
.text:00403EA1                 jnz     loc_403F53
.text:00403EA7                 mov     ebx, dword ptr [esp+48h+Args]
.text:00403EAB                 jmp     loc_403F31
.text:00403EB0 ; ---------------------------------------------------------------------------
.text:00403EB0
.text:00403EB0 loc_403EB0:                             ; CODE XREF: sub_403C94+104↑j
.text:00403EB0                 push    dword ptr [esp+48h+Args]
.text:00403EB4                 mov     ecx, 15E7h
.text:00403EB9
.text:00403EB9 loc_403EB9:                             ; CODE XREF: sub_403C94+31B↓j
.text:00403EB9                 push    edi             ; Args
.text:00403EBA
.text:00403EBA loc_403EBA:                             ; CODE XREF: sub_403C94+281↓j
.text:00403EBA                 call    sub_401E93
.text:00403EBF                 push    eax             ; Format
.text:00403EC0                 push    2               ; int
.text:00403EC2                 call    sub_401B84
.text:00403EC7                 add     esp, 10h
.text:00403ECA
.text:00403ECA loc_403ECA:                             ; CODE XREF: sub_403C94+273↓j
.text:00403ECA                                         ; sub_403C94+34D↓j
.text:00403ECA                 mov     edx, esi
.text:00403ECC                 call    sub_403C26
.text:00403ED1                 push    800401E4h
.text:00403ED6                 jmp     loc_403CF5
.text:00403EDB ; ---------------------------------------------------------------------------
.text:00403EDB
.text:00403EDB loc_403EDB:                             ; CODE XREF: sub_403C94+1D7↑j
.text:00403EDB                 test    edi, edi
.text:00403EDD                 jz      short loc_403F09
.text:00403EDF                 push    edi             ; lpString
.text:00403EE0                 call    ds:lstrlenW
.text:00403EE6                 test    eax, eax
.text:00403EE8                 jz      short loc_403F09
.text:00403EEA                 push    dword ptr [esp+48h+Args]
.text:00403EEE                 mov     ecx, 15E5h
.text:00403EF3                 push    dword ptr [ebx+18h]
.text:00403EF6                 push    edi             ; Args
.text:00403EF7                 call    sub_401E93
.text:00403EFC                 push    eax             ; Format
.text:00403EFD                 push    3               ; int
.text:00403EFF                 call    sub_401B84
.text:00403F04                 add     esp, 14h
.text:00403F07                 jmp     short loc_403ECA
.text:00403F09 ; ---------------------------------------------------------------------------
.text:00403F09
.text:00403F09 loc_403F09:                             ; CODE XREF: sub_403C94+249↑j
.text:00403F09                                         ; sub_403C94+254↑j
.text:00403F09                 push    dword ptr [esp+48h+Args]
.text:00403F0D                 mov     ecx, 15EAh
.text:00403F12                 push    dword ptr [ebx+18h]
.text:00403F15                 jmp     short loc_403EBA
.text:00403F17 ; ---------------------------------------------------------------------------
.text:00403F17
.text:00403F17 loc_403F17:                             ; CODE XREF: sub_403C94+132↑j
.text:00403F17                 call    ds:GetLastError
.text:00403F1D                 test    eax, eax
.text:00403F1F                 jnz     loc_403FEE
.text:00403F25                 push    42Bh
.text:00403F2A                 jmp     loc_403FE8
.text:00403F2F ; ---------------------------------------------------------------------------
.text:00403F2F
.text:00403F2F loc_403F2F:                             ; CODE XREF: sub_403C94+AE↑j
.text:00403F2F                 xor     edi, edi
.text:00403F31
.text:00403F31 loc_403F31:                             ; CODE XREF: sub_403C94+217↑j
.text:00403F31                 mov     edx, edi
.text:00403F33                 mov     ecx, esi
.text:00403F35
.text:00403F35 loc_403F35:                             ; CODE XREF: sub_403C94+2BD↓j
.text:00403F35                 test    ecx, ecx
.text:00403F37                 jz      short loc_403F74
.text:00403F39                 mov     eax, [ecx+10h]
.text:00403F3C                 and     eax, 80000h
.text:00403F41                 or      eax, edi
.text:00403F43                 jz      short loc_403F4A
.text:00403F45                 cmp     [ecx+1Ch], edi
.text:00403F48                 jz      short loc_403F62
.text:00403F4A
.text:00403F4A loc_403F4A:                             ; CODE XREF: sub_403C94+2AF↑j
.text:00403F4A                 inc     edx
.text:00403F4B                 add     ecx, 50h ; 'P'
.text:00403F4E                 cmp     edx, 1
.text:00403F51                 jb      short loc_403F35
.text:00403F53
.text:00403F53 loc_403F53:                             ; CODE XREF: sub_403C94+20D↑j
.text:00403F53                 push    edi             ; dwErrCode
.text:00403F54                 call    ds:SetLastError
.text:00403F5A                 xor     eax, eax
.text:00403F5C                 inc     eax
.text:00403F5D                 jmp     loc_403FF5
.text:00403F62 ; ---------------------------------------------------------------------------
.text:00403F62
.text:00403F62 loc_403F62:                             ; CODE XREF: sub_403C94+2B4↑j
.text:00403F62                 cmp     dword ptr [ecx+20h], 0
.text:00403F66                 jnz     short loc_403FB4
.text:00403F68                 mov     eax, [ecx+10h]
.text:00403F6B                 and     eax, 40000h
.text:00403F70                 or      eax, edi
.text:00403F72                 jnz     short loc_403F97
.text:00403F74
.text:00403F74 loc_403F74:                             ; CODE XREF: sub_403C94+2A3↑j
.text:00403F74                 call    ds:GetLastError
.text:00403F7A                 test    eax, eax
.text:00403F7C                 jnz     short loc_403F89
.text:00403F7E                 push    42Bh            ; dwErrCode
.text:00403F83                 call    ds:SetLastError
.text:00403F89
.text:00403F89 loc_403F89:                             ; CODE XREF: sub_403C94+2E8↑j
.text:00403F89                                         ; sub_403C94+335↓j
.text:00403F89                 call    sub_401C13
.text:00403F8E
.text:00403F8E loc_403F8E:                             ; CODE XREF: sub_403C94+1C7↑j
.text:00403F8E                 mov     edx, esi
.text:00403F90                 call    sub_403C26
.text:00403F95                 jmp     short loc_403FF3
.text:00403F97 ; ---------------------------------------------------------------------------
.text:00403F97
.text:00403F97 loc_403F97:                             ; CODE XREF: sub_403C94+2DE↑j
.text:00403F97                 mov     edi, [ecx+24h]
.text:00403F9A                 test    edi, edi
.text:00403F9C                 jz      short loc_403FCB
.text:00403F9E
.text:00403F9E loc_403F9E:                             ; CODE XREF: sub_403C94+325↓j
.text:00403F9E                                         ; sub_403C94+333↓j
.text:00403F9E                 push    edi             ; lpString
.text:00403F9F                 call    ds:lstrlenW
.text:00403FA5                 test    eax, eax
.text:00403FA7                 jz      short loc_403FCB
.text:00403FA9                 push    ebx
.text:00403FAA                 mov     ecx, 15E4h
.text:00403FAF                 jmp     loc_403EB9
.text:00403FB4 ; ---------------------------------------------------------------------------
.text:00403FB4
.text:00403FB4 loc_403FB4:                             ; CODE XREF: sub_403C94+2D2↑j
.text:00403FB4                 mov     edi, [ecx+24h]
.text:00403FB7                 test    edi, edi
.text:00403FB9                 jnz     short loc_403F9E
.text:00403FBB                 mov     ecx, [ecx+20h]  ; pszStart
.text:00403FBE                 call    sub_403157
.text:00403FC3                 mov     edi, eax
.text:00403FC5                 test    edi, edi
.text:00403FC7                 jnz     short loc_403F9E
.text:00403FC9                 jmp     short loc_403F89
.text:00403FCB ; ---------------------------------------------------------------------------
.text:00403FCB
.text:00403FCB loc_403FCB:                             ; CODE XREF: sub_403C94+308↑j
.text:00403FCB                                         ; sub_403C94+313↑j
.text:00403FCB                 push    ebx             ; Args
.text:00403FCC                 mov     ecx, 15E8h
.text:00403FD1                 call    sub_401E93
.text:00403FD6                 push    eax             ; Format
.text:00403FD7                 push    1               ; int
.text:00403FD9                 call    sub_401B84
.text:00403FDE                 add     esp, 0Ch
.text:00403FE1                 jmp     loc_403ECA
.text:00403FE6 ; ---------------------------------------------------------------------------
.text:00403FE6
.text:00403FE6 loc_403FE6:                             ; CODE XREF: sub_403C94+29↑j
.text:00403FE6                                         ; sub_403C94+31↑j ...
.text:00403FE6                 push    57h ; 'W'       ; dwErrCode
.text:00403FE8
.text:00403FE8 loc_403FE8:                             ; CODE XREF: sub_403C94+296↑j
.text:00403FE8                 call    ds:SetLastError
.text:00403FEE
.text:00403FEE loc_403FEE:                             ; CODE XREF: sub_403C94+73↑j
.text:00403FEE                                         ; sub_403C94+88↑j ...
.text:00403FEE                 call    sub_401C13
.text:00403FF3
.text:00403FF3 loc_403FF3:                             ; CODE XREF: sub_403C94+67↑j
.text:00403FF3                                         ; sub_403C94+301↑j
.text:00403FF3                 xor     eax, eax
.text:00403FF5
.text:00403FF5 loc_403FF5:                             ; CODE XREF: sub_403C94+2C9↑j
.text:00403FF5                 pop     edi
.text:00403FF6                 pop     esi
.text:00403FF7                 pop     ebx
.text:00403FF8                 mov     esp, ebp
.text:00403FFA                 pop     ebp
.text:00403FFB                 retn    10h
.text:00403FFB sub_403C94      endp
.text:00403FFB
.text:00403FFB ; ---------------------------------------------------------------------------
.text:00403FFE                 align 10h
.text:00404000 jpt_403DE9      dd offset loc_403DF0    ; DATA XREF: sub_403C94+155↑r
.text:00404000                 dd offset def_403DE9    ; jump table for switch statement
.text:00404008 byte_404008     db      0,     0,     0,     1
.text:00404008                                         ; DATA XREF: sub_403C94+14E↑r
.text:00404008                 db      1,     1,     0,     0 ; indirect table for switch statement
.text:00404008                 db      0,     1
.text:00404012
.text:00404012 ; =============== S U B R O U T I N E =======================================
.text:00404012
.text:00404012 ; Attributes: bp-based frame
.text:00404012
.text:00404012 sub_404012      proc near               ; CODE XREF: sub_401D53+5E↑p
.text:00404012                                         ; sub_401EB3+EA↑p ...
.text:00404012
.text:00404012 arg_0           = dword ptr  8
.text:00404012
.text:00404012                 mov     edi, edi
.text:00404014                 push    ebp
.text:00404015                 mov     ebp, esp
.text:00404017                 call    sub_4041E0
.text:0040401C                 test    eax, eax
.text:0040401E                 jnz     short loc_404024
.text:00404020
.text:00404020 loc_404020:                             ; CODE XREF: sub_404012+15↓j
.text:00404020                 xor     eax, eax
.text:00404022                 jmp     short loc_404048
.text:00404024 ; ---------------------------------------------------------------------------
.text:00404024
.text:00404024 loc_404024:                             ; CODE XREF: sub_404012+C↑j
.text:00404024                 cmp     [ecx+4], edx
.text:00404027                 jbe     short loc_404020
.text:00404029                 mov     eax, [ecx+8]
.text:0040402C                 push    esi
.text:0040402D                 xor     esi, esi
.text:0040402F                 cmp     edx, 1
.text:00404032                 jb      short loc_40403E
.text:00404034
.text:00404034 loc_404034:                             ; CODE XREF: sub_404012+2A↓j
.text:00404034                 mov     esi, eax
.text:00404036                 mov     eax, [eax+10h]
.text:00404039                 sub     edx, 1
.text:0040403C                 jnz     short loc_404034
.text:0040403E
.text:0040403E loc_40403E:                             ; CODE XREF: sub_404012+20↑j
.text:0040403E                 mov     ecx, [ebp+arg_0]
.text:00404041                 test    ecx, ecx
.text:00404043                 jz      short loc_404047
.text:00404045                 mov     [ecx], esi
.text:00404047
.text:00404047 loc_404047:                             ; CODE XREF: sub_404012+31↑j
.text:00404047                 pop     esi
.text:00404048
.text:00404048 loc_404048:                             ; CODE XREF: sub_404012+10↑j
.text:00404048                 pop     ebp
.text:00404049                 retn    4
.text:00404049 sub_404012      endp
.text:00404049
.text:0040404C
.text:0040404C ; =============== S U B R O U T I N E =======================================
.text:0040404C
.text:0040404C ; Attributes: bp-based frame
.text:0040404C
.text:0040404C sub_40404C      proc near               ; CODE XREF: sub_404277+4F↓p
.text:0040404C                                         ; sub_4042E4+30↓p ...
.text:0040404C
.text:0040404C arg_0           = dword ptr  8
.text:0040404C arg_4           = dword ptr  0Ch
.text:0040404C
.text:0040404C                 mov     edi, edi
.text:0040404E                 push    ebp
.text:0040404F                 mov     ebp, esp
.text:00404051                 push    esi
.text:00404052                 push    edi
.text:00404053                 mov     edi, edx
.text:00404055                 mov     esi, ecx
.text:00404057                 call    sub_4041E0
.text:0040405C                 test    eax, eax
.text:0040405E                 jnz     short loc_404065
.text:00404060
.text:00404060 loc_404060:                             ; CODE XREF: sub_40404C+1D↓j
.text:00404060                                         ; sub_40404C+2B↓j
.text:00404060                 or      eax, 0FFFFFFFFh
.text:00404063                 jmp     short loc_4040AD
.text:00404065 ; ---------------------------------------------------------------------------
.text:00404065
.text:00404065 loc_404065:                             ; CODE XREF: sub_40404C+12↑j
.text:00404065                 cmp     dword ptr [esi+4], 0FFFFFFFFh
.text:00404069                 jz      short loc_404060
.text:0040406B                 push    14h
.text:0040406D                 pop     ecx
.text:0040406E                 call    sub_402B01
.text:00404073                 mov     ecx, eax
.text:00404075                 test    ecx, ecx
.text:00404077                 jz      short loc_404060
.text:00404079                 mov     eax, [ebp+arg_0]
.text:0040407C                 and     dword ptr [ecx+10h], 0
.text:00404080                 mov     [ecx+8], eax
.text:00404083                 mov     eax, [ebp+arg_4]
.text:00404086                 mov     [ecx+4], edi
.text:00404089                 mov     [ecx+0Ch], eax
.text:0040408C                 mov     dword ptr [ecx], 63h ; 'c'
.text:00404092                 inc     dword ptr [esi+4]
.text:00404095                 cmp     dword ptr [esi+8], 0
.text:00404099                 jnz     short loc_4040A0
.text:0040409B                 mov     [esi+8], ecx
.text:0040409E                 jmp     short loc_4040A6
.text:004040A0 ; ---------------------------------------------------------------------------
.text:004040A0
.text:004040A0 loc_4040A0:                             ; CODE XREF: sub_40404C+4D↑j
.text:004040A0                 mov     eax, [esi+0Ch]
.text:004040A3                 mov     [eax+10h], ecx
.text:004040A6
.text:004040A6 loc_4040A6:                             ; CODE XREF: sub_40404C+52↑j
.text:004040A6                 mov     eax, [esi+4]
.text:004040A9                 mov     [esi+0Ch], ecx
.text:004040AC                 dec     eax
.text:004040AD
.text:004040AD loc_4040AD:                             ; CODE XREF: sub_40404C+17↑j
.text:004040AD                 pop     edi
.text:004040AE                 pop     esi
.text:004040AF                 pop     ebp
.text:004040B0                 retn    8
.text:004040B0 sub_40404C      endp
.text:004040B0
.text:004040B3
.text:004040B3 ; =============== S U B R O U T I N E =======================================
.text:004040B3
.text:004040B3
.text:004040B3 sub_4040B3      proc near               ; CODE XREF: sub_40420F+22↓p
.text:004040B3                                         ; sub_4044C5+3D↓p
.text:004040B3                 test    ecx, ecx
.text:004040B5                 jz      short locret_40411C
.text:004040B7                 mov     eax, [ecx+4]
.text:004040BA                 mov     edx, 70000h
.text:004040BF                 cmp     eax, edx
.text:004040C1                 ja      short loc_4040E9
.text:004040C3                 jz      short loc_404105
.text:004040C5                 cmp     eax, 20000h
.text:004040CA                 jz      short loc_404105
.text:004040CC                 cmp     eax, 30000h
.text:004040D1                 jz      short loc_404105
.text:004040D3                 cmp     eax, 40000h
.text:004040D8                 jz      short loc_404105
.text:004040DA                 cmp     eax, 50000h
.text:004040DF                 jz      short loc_404105
.text:004040E1                 cmp     eax, 60000h
.text:004040E6                 jz      short loc_404105
.text:004040E8                 retn
.text:004040E9 ; ---------------------------------------------------------------------------
.text:004040E9
.text:004040E9 loc_4040E9:                             ; CODE XREF: sub_4040B3+E↑j
.text:004040E9                 cmp     eax, 80000h
.text:004040EE                 jz      short loc_40410D
.text:004040F0                 cmp     eax, 90000h
.text:004040F5                 jz      short loc_404105
.text:004040F7                 cmp     eax, 0A0000h
.text:004040FC                 jz      short loc_404105
.text:004040FE                 cmp     eax, 0B0000h
.text:00404103                 jnz     short locret_40411C
.text:00404105
.text:00404105 loc_404105:                             ; CODE XREF: sub_4040B3+10↑j
.text:00404105                                         ; sub_4040B3+17↑j ...
.text:00404105                 add     ecx, 0Ch
.text:00404108                 jmp     sub_402A57
.text:0040410D ; ---------------------------------------------------------------------------
.text:0040410D
.text:0040410D loc_40410D:                             ; CODE XREF: sub_4040B3+3B↑j
.text:0040410D                 push    esi
.text:0040410E                 lea     esi, [ecx+0Ch]
.text:00404111                 mov     ecx, esi
.text:00404113                 call    sub_404258
.text:00404118                 and     dword ptr [esi], 0
.text:0040411B                 pop     esi
.text:0040411C
.text:0040411C locret_40411C:                          ; CODE XREF: sub_4040B3+2↑j
.text:0040411C                                         ; sub_4040B3+50↑j
.text:0040411C                 retn
.text:0040411C sub_4040B3      endp
.text:0040411C
.text:0040411D
.text:0040411D ; =============== S U B R O U T I N E =======================================
.text:0040411D
.text:0040411D ; Attributes: bp-based frame
.text:0040411D
.text:0040411D ; int __stdcall sub_40411D(PCNZWCH lpString2, int, int)
.text:0040411D sub_40411D      proc near               ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+262↑p
.text:0040411D                                         ; ParseAndSaveOptionValue(x,x,x):loc_403857↑p ...
.text:0040411D
.text:0040411D var_4           = dword ptr -4
.text:0040411D lpString2       = dword ptr  8
.text:0040411D arg_4           = dword ptr  0Ch
.text:0040411D
.text:0040411D                 mov     edi, edi
.text:0040411F                 push    ebp
.text:00404120                 mov     ebp, esp
.text:00404122                 push    ecx
.text:00404123                 push    ebx
.text:00404124                 mov     ebx, edx
.text:00404126                 mov     [ebp+var_4], ecx
.text:00404129                 call    sub_4041E0
.text:0040412E                 test    eax, eax
.text:00404130                 jnz     short loc_40413A
.text:00404132                 or      eax, 0FFFFFFFFh
.text:00404135                 jmp     loc_4041D9
.text:0040413A ; ---------------------------------------------------------------------------
.text:0040413A
.text:0040413A loc_40413A:                             ; CODE XREF: sub_40411D+13↑j
.text:0040413A                 push    esi
.text:0040413B                 xor     esi, esi
.text:0040413D                 push    edi
.text:0040413E                 mov     edi, [ecx+8]
.text:00404141                 cmp     [ecx+4], esi
.text:00404144                 jbe     loc_4041D4
.text:0040414A                 mov     edx, [ebp+lpString2]
.text:0040414D
.text:0040414D loc_40414D:                             ; CODE XREF: sub_40411D+B1↓j
.text:0040414D                 cmp     [edi+4], ebx
.text:00404150                 jnz     short loc_4041C7
.text:00404152                 cmp     ebx, 70000h
.text:00404158                 jz      short loc_4041B1
.text:0040415A                 cmp     ebx, 20000h
.text:00404160                 jz      short loc_404199
.text:00404162                 cmp     ebx, 30000h
.text:00404168                 jz      short loc_40418E
.text:0040416A                 cmp     ebx, 40000h
.text:00404170                 jz      short loc_40418E
.text:00404172                 cmp     ebx, 60000h
.text:00404178                 jnz     short loc_4041C7
.text:0040417A                 mov     eax, [edi+0Ch]
.text:0040417D                 fld     dword ptr [eax]
.text:0040417F                 fld     dword ptr [edx]
.text:00404181                 fucompp
.text:00404183                 fnstsw  ax
.text:00404185                 test    ah, 44h
.text:00404188                 jp      short loc_4041C7
.text:0040418A
.text:0040418A loc_40418A:                             ; CODE XREF: sub_40411D+78↓j
.text:0040418A                                         ; sub_40411D+8D↓j ...
.text:0040418A                 mov     eax, esi
.text:0040418C                 jmp     short loc_4041D7
.text:0040418E ; ---------------------------------------------------------------------------
.text:0040418E
.text:0040418E loc_40418E:                             ; CODE XREF: sub_40411D+4B↑j
.text:0040418E                                         ; sub_40411D+53↑j
.text:0040418E                 mov     eax, [edi+0Ch]
.text:00404191                 mov     eax, [eax]
.text:00404193                 cmp     eax, [edx]
.text:00404195                 jz      short loc_40418A
.text:00404197                 jmp     short loc_4041C7
.text:00404199 ; ---------------------------------------------------------------------------
.text:00404199
.text:00404199 loc_404199:                             ; CODE XREF: sub_40411D+43↑j
.text:00404199                 mov     edx, [ebp+lpString2] ; lpString2
.text:0040419C                 push    ecx             ; int
.text:0040419D                 push    [ebp+arg_4]     ; int
.text:004041A0                 mov     ecx, [edi+0Ch]  ; lpString1
.text:004041A3                 call    sub_40268E
.text:004041A8                 test    eax, eax
.text:004041AA                 jz      short loc_40418A
.text:004041AC                 mov     ecx, [ebp+var_4]
.text:004041AF                 jmp     short loc_4041C4
.text:004041B1 ; ---------------------------------------------------------------------------
.text:004041B1
.text:004041B1 loc_4041B1:                             ; CODE XREF: sub_40411D+3B↑j
.text:004041B1                 mov     eax, [edi+0Ch]
.text:004041B4                 fld     qword ptr [eax]
.text:004041B6                 mov     eax, [ebp+lpString2]
.text:004041B9                 fld     qword ptr [eax]
.text:004041BB                 fucompp
.text:004041BD                 fnstsw  ax
.text:004041BF                 test    ah, 44h
.text:004041C2                 jnp     short loc_40418A
.text:004041C4
.text:004041C4 loc_4041C4:                             ; CODE XREF: sub_40411D+92↑j
.text:004041C4                 mov     edx, [ebp+lpString2]
.text:004041C7
.text:004041C7 loc_4041C7:                             ; CODE XREF: sub_40411D+33↑j
.text:004041C7                                         ; sub_40411D+5B↑j ...
.text:004041C7                 mov     edi, [edi+10h]
.text:004041CA                 inc     esi
.text:004041CB                 cmp     esi, [ecx+4]
.text:004041CE                 jb      loc_40414D
.text:004041D4
.text:004041D4 loc_4041D4:                             ; CODE XREF: sub_40411D+27↑j
.text:004041D4                 or      eax, 0FFFFFFFFh
.text:004041D7
.text:004041D7 loc_4041D7:                             ; CODE XREF: sub_40411D+6F↑j
.text:004041D7                 pop     edi
.text:004041D8                 pop     esi
.text:004041D9
.text:004041D9 loc_4041D9:                             ; CODE XREF: sub_40411D+18↑j
.text:004041D9                 pop     ebx
.text:004041DA                 mov     esp, ebp
.text:004041DC                 pop     ebp
.text:004041DD                 retn    0Ch
.text:004041DD sub_40411D      endp
.text:004041DD
.text:004041E0
.text:004041E0 ; =============== S U B R O U T I N E =======================================
.text:004041E0
.text:004041E0
.text:004041E0 sub_4041E0      proc near               ; CODE XREF: sub_4018B0+14↑p
.text:004041E0                                         ; sub_4018B0+4C↑p ...
.text:004041E0                 test    ecx, ecx
.text:004041E2                 jz      short loc_4041ED
.text:004041E4                 cmp     dword ptr [ecx], 9
.text:004041E7                 jnz     short loc_4041ED
.text:004041E9                 xor     eax, eax
.text:004041EB                 inc     eax
.text:004041EC                 retn
.text:004041ED ; ---------------------------------------------------------------------------
.text:004041ED
.text:004041ED loc_4041ED:                             ; CODE XREF: sub_4041E0+2↑j
.text:004041ED                                         ; sub_4041E0+7↑j
.text:004041ED                 xor     eax, eax
.text:004041EF                 retn
.text:004041EF sub_4041E0      endp
.text:004041EF
.text:004041F0
.text:004041F0 ; =============== S U B R O U T I N E =======================================
.text:004041F0
.text:004041F0
.text:004041F0 sub_4041F0      proc near               ; CODE XREF: sub_4018B0+3F↑p
.text:004041F0                                         ; sub_404412+1E↓p
.text:004041F0                 push    10h
.text:004041F2                 pop     ecx
.text:004041F3                 call    sub_402B01
.text:004041F8                 test    eax, eax
.text:004041FA                 jnz     short loc_4041FD
.text:004041FC                 retn
.text:004041FD ; ---------------------------------------------------------------------------
.text:004041FD
.text:004041FD loc_4041FD:                             ; CODE XREF: sub_4041F0+A↑j
.text:004041FD                 xor     ecx, ecx
.text:004041FF                 mov     dword ptr [eax], 9
.text:00404205                 mov     [eax+4], ecx
.text:00404208                 mov     [eax+8], ecx
.text:0040420B                 mov     [eax+0Ch], ecx
.text:0040420E                 retn
.text:0040420E sub_4041F0      endp
.text:0040420E
.text:0040420F
.text:0040420F ; =============== S U B R O U T I N E =======================================
.text:0040420F
.text:0040420F ; Attributes: bp-based frame
.text:0040420F
.text:0040420F sub_40420F      proc near               ; CODE XREF: sub_404258+10↓p
.text:0040420F
.text:0040420F var_4           = dword ptr -4
.text:0040420F
.text:0040420F                 mov     edi, edi
.text:00404211                 push    ebp
.text:00404212                 mov     ebp, esp
.text:00404214                 push    ecx
.text:00404215                 push    edi
.text:00404216                 mov     edi, ecx
.text:00404218                 call    sub_4041E0
.text:0040421D                 test    eax, eax
.text:0040421F                 jz      short loc_404253
.text:00404221                 mov     eax, [edi+8]
.text:00404224                 mov     [ebp+var_4], eax
.text:00404227                 test    eax, eax
.text:00404229                 jz      short loc_404248
.text:0040422B                 push    esi
.text:0040422C
.text:0040422C loc_40422C:                             ; CODE XREF: sub_40420F+36↓j
.text:0040422C                 mov     esi, [eax+10h]
.text:0040422F                 mov     ecx, eax
.text:00404231                 call    sub_4040B3
.text:00404236                 lea     ecx, [ebp+var_4]
.text:00404239                 call    sub_402A57
.text:0040423E                 mov     eax, esi
.text:00404240                 mov     [ebp+var_4], eax
.text:00404243                 test    esi, esi
.text:00404245                 jnz     short loc_40422C
.text:00404247                 pop     esi
.text:00404248
.text:00404248 loc_404248:                             ; CODE XREF: sub_40420F+1A↑j
.text:00404248                 xor     eax, eax
.text:0040424A                 mov     [edi+4], eax
.text:0040424D                 mov     [edi+8], eax
.text:00404250                 mov     [edi+0Ch], eax
.text:00404253
.text:00404253 loc_404253:                             ; CODE XREF: sub_40420F+10↑j
.text:00404253                 pop     edi
.text:00404254                 mov     esp, ebp
.text:00404256                 pop     ebp
.text:00404257                 retn
.text:00404257 sub_40420F      endp
.text:00404257
.text:00404258
.text:00404258 ; =============== S U B R O U T I N E =======================================
.text:00404258
.text:00404258
.text:00404258 sub_404258      proc near               ; CODE XREF: sub_401D53+86↑p
.text:00404258                                         ; sub_4040B3+60↑p ...
.text:00404258                 mov     edi, edi
.text:0040425A                 push    esi
.text:0040425B                 mov     esi, ecx
.text:0040425D                 mov     ecx, [esi]
.text:0040425F                 call    sub_4041E0
.text:00404264                 test    eax, eax
.text:00404266                 jz      short loc_404275
.text:00404268                 call    sub_40420F
.text:0040426D                 mov     ecx, esi
.text:0040426F                 pop     esi
.text:00404270                 jmp     sub_402A57
.text:00404275 ; ---------------------------------------------------------------------------
.text:00404275
.text:00404275 loc_404275:                             ; CODE XREF: sub_404258+E↑j
.text:00404275                 pop     esi
.text:00404276                 retn
.text:00404276 sub_404258      endp
.text:00404276
.text:00404277
.text:00404277 ; =============== S U B R O U T I N E =======================================
.text:00404277
.text:00404277 ; Attributes: bp-based frame
.text:00404277
.text:00404277 sub_404277      proc near               ; CODE XREF: sub_4018B0+5B↑p
.text:00404277                                         ; ParseAndSaveOptionValue(x,x,x)+275↑p
.text:00404277
.text:00404277 var_8           = dword ptr -8
.text:00404277 var_4           = dword ptr -4
.text:00404277
.text:00404277                 mov     edi, edi
.text:00404279                 push    ebp
.text:0040427A                 mov     ebp, esp
.text:0040427C                 push    ecx
.text:0040427D                 push    ecx
.text:0040427E                 push    ebx
.text:0040427F                 mov     [ebp+var_4], edx
.text:00404282                 mov     ebx, ecx
.text:00404284                 call    sub_4041E0
.text:00404289                 test    eax, eax
.text:0040428B                 jnz     short loc_404292
.text:0040428D                 or      eax, 0FFFFFFFFh
.text:00404290                 jmp     short loc_4042DD
.text:00404292 ; ---------------------------------------------------------------------------
.text:00404292
.text:00404292 loc_404292:                             ; CODE XREF: sub_404277+14↑j
.text:00404292                 push    esi
.text:00404293                 push    edi
.text:00404294                 push    edx             ; lpString
.text:00404295                 call    ds:lstrlenW
.text:0040429B                 lea     esi, [eax+1]
.text:0040429E                 lea     ecx, [esi+esi]
.text:004042A1                 call    sub_402B01
.text:004042A6                 mov     edi, eax
.text:004042A8                 mov     [ebp+var_8], edi
.text:004042AB                 test    edi, edi
.text:004042AD                 jz      short loc_4042D8
.text:004042AF                 mov     edx, [ebp+var_4]
.text:004042B2                 mov     ecx, edi
.text:004042B4                 push    esi
.text:004042B5                 call    sub_4025EA
.text:004042BA                 push    edi
.text:004042BB                 lea     eax, [esi+esi]
.text:004042BE                 mov     edx, 20000h
.text:004042C3                 push    eax
.text:004042C4                 mov     ecx, ebx
.text:004042C6                 call    sub_40404C
.text:004042CB                 cmp     eax, 0FFFFFFFFh
.text:004042CE                 jnz     short loc_4042DB
.text:004042D0                 lea     ecx, [ebp+var_8]
.text:004042D3                 call    sub_402A57
.text:004042D8
.text:004042D8 loc_4042D8:                             ; CODE XREF: sub_404277+36↑j
.text:004042D8                 or      eax, 0FFFFFFFFh
.text:004042DB
.text:004042DB loc_4042DB:                             ; CODE XREF: sub_404277+57↑j
.text:004042DB                 pop     edi
.text:004042DC                 pop     esi
.text:004042DD
.text:004042DD loc_4042DD:                             ; CODE XREF: sub_404277+19↑j
.text:004042DD                 pop     ebx
.text:004042DE                 mov     esp, ebp
.text:004042E0                 pop     ebp
.text:004042E1                 retn    4
.text:004042E1 sub_404277      endp
.text:004042E1
.text:004042E4
.text:004042E4 ; =============== S U B R O U T I N E =======================================
.text:004042E4
.text:004042E4 ; Attributes: bp-based frame
.text:004042E4
.text:004042E4 sub_4042E4      proc near               ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+3B5↑p
.text:004042E4
.text:004042E4 var_4           = dword ptr -4
.text:004042E4
.text:004042E4                 mov     edi, edi
.text:004042E6                 push    ebp
.text:004042E7                 mov     ebp, esp
.text:004042E9                 push    ecx
.text:004042EA                 push    esi
.text:004042EB                 push    edi
.text:004042EC                 mov     edi, edx
.text:004042EE                 mov     esi, ecx
.text:004042F0                 call    sub_4041E0
.text:004042F5                 test    eax, eax
.text:004042F7                 jz      short loc_404326
.text:004042F9                 push    4
.text:004042FB                 pop     ecx
.text:004042FC                 call    sub_402B01
.text:00404301                 mov     [ebp+var_4], eax
.text:00404304                 test    eax, eax
.text:00404306                 jz      short loc_404326
.text:00404308                 push    eax
.text:00404309                 push    4
.text:0040430B                 mov     edx, 30000h
.text:00404310                 mov     [eax], edi
.text:00404312                 mov     ecx, esi
.text:00404314                 call    sub_40404C
.text:00404319                 cmp     eax, 0FFFFFFFFh
.text:0040431C                 jnz     short loc_404329
.text:0040431E                 lea     ecx, [ebp+var_4]
.text:00404321                 call    sub_402A57
.text:00404326
.text:00404326 loc_404326:                             ; CODE XREF: sub_4042E4+13↑j
.text:00404326                                         ; sub_4042E4+22↑j
.text:00404326                 or      eax, 0FFFFFFFFh
.text:00404329
.text:00404329 loc_404329:                             ; CODE XREF: sub_4042E4+38↑j
.text:00404329                 pop     edi
.text:0040432A                 pop     esi
.text:0040432B                 mov     esp, ebp
.text:0040432D                 pop     ebp
.text:0040432E                 retn
.text:0040432E sub_4042E4      endp
.text:0040432E
.text:0040432F
.text:0040432F ; =============== S U B R O U T I N E =======================================
.text:0040432F
.text:0040432F ; Attributes: bp-based frame
.text:0040432F
.text:0040432F sub_40432F      proc near               ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+3C2↑p
.text:0040432F
.text:0040432F var_4           = dword ptr -4
.text:0040432F
.text:0040432F                 mov     edi, edi
.text:00404331                 push    ebp
.text:00404332                 mov     ebp, esp
.text:00404334                 push    ecx
.text:00404335                 push    esi
.text:00404336                 push    edi
.text:00404337                 mov     edi, edx
.text:00404339                 mov     esi, ecx
.text:0040433B                 call    sub_4041E0
.text:00404340                 test    eax, eax
.text:00404342                 jz      short loc_404371
.text:00404344                 push    4
.text:00404346                 pop     ecx
.text:00404347                 call    sub_402B01
.text:0040434C                 mov     [ebp+var_4], eax
.text:0040434F                 test    eax, eax
.text:00404351                 jz      short loc_404371
.text:00404353                 push    eax
.text:00404354                 push    4
.text:00404356                 mov     edx, 40000h
.text:0040435B                 mov     [eax], edi
.text:0040435D                 mov     ecx, esi
.text:0040435F                 call    sub_40404C
.text:00404364                 cmp     eax, 0FFFFFFFFh
.text:00404367                 jnz     short loc_404374
.text:00404369                 lea     ecx, [ebp+var_4]
.text:0040436C                 call    sub_402A57
.text:00404371
.text:00404371 loc_404371:                             ; CODE XREF: sub_40432F+13↑j
.text:00404371                                         ; sub_40432F+22↑j
.text:00404371                 or      eax, 0FFFFFFFFh
.text:00404374
.text:00404374 loc_404374:                             ; CODE XREF: sub_40432F+38↑j
.text:00404374                 pop     edi
.text:00404375                 pop     esi
.text:00404376                 mov     esp, ebp
.text:00404378                 pop     ebp
.text:00404379                 retn
.text:00404379 sub_40432F      endp
.text:00404379
.text:0040437A
.text:0040437A ; =============== S U B R O U T I N E =======================================
.text:0040437A
.text:0040437A ; Attributes: bp-based frame
.text:0040437A
.text:0040437A ; int __stdcall sub_40437A(float)
.text:0040437A sub_40437A      proc near               ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+4F7↑p
.text:0040437A
.text:0040437A var_4           = dword ptr -4
.text:0040437A arg_0           = dword ptr  8
.text:0040437A
.text:0040437A                 mov     edi, edi
.text:0040437C                 push    ebp
.text:0040437D                 mov     ebp, esp
.text:0040437F                 push    ecx
.text:00404380                 push    esi
.text:00404381                 mov     esi, ecx
.text:00404383                 call    sub_4041E0
.text:00404388                 test    eax, eax
.text:0040438A                 jz      short loc_4043BC
.text:0040438C                 push    4
.text:0040438E                 pop     ecx
.text:0040438F                 call    sub_402B01
.text:00404394                 mov     [ebp+var_4], eax
.text:00404397                 test    eax, eax
.text:00404399                 jz      short loc_4043BC
.text:0040439B                 fld     [ebp+arg_0]
.text:0040439E                 mov     edx, 60000h
.text:004043A3                 push    eax
.text:004043A4                 push    4
.text:004043A6                 mov     ecx, esi
.text:004043A8                 fstp    dword ptr [eax]
.text:004043AA                 call    sub_40404C
.text:004043AF                 cmp     eax, 0FFFFFFFFh
.text:004043B2                 jnz     short loc_4043BF
.text:004043B4                 lea     ecx, [ebp+var_4]
.text:004043B7                 call    sub_402A57
.text:004043BC
.text:004043BC loc_4043BC:                             ; CODE XREF: sub_40437A+10↑j
.text:004043BC                                         ; sub_40437A+1F↑j
.text:004043BC                 or      eax, 0FFFFFFFFh
.text:004043BF
.text:004043BF loc_4043BF:                             ; CODE XREF: sub_40437A+38↑j
.text:004043BF                 pop     esi
.text:004043C0                 mov     esp, ebp
.text:004043C2                 pop     ebp
.text:004043C3                 retn    4
.text:004043C3 sub_40437A      endp
.text:004043C3
.text:004043C6
.text:004043C6 ; =============== S U B R O U T I N E =======================================
.text:004043C6
.text:004043C6 ; Attributes: bp-based frame
.text:004043C6
.text:004043C6 ; int __stdcall sub_4043C6(double)
.text:004043C6 sub_4043C6      proc near               ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+50C↑p
.text:004043C6
.text:004043C6 var_4           = dword ptr -4
.text:004043C6 arg_0           = qword ptr  8
.text:004043C6
.text:004043C6                 mov     edi, edi
.text:004043C8                 push    ebp
.text:004043C9                 mov     ebp, esp
.text:004043CB                 push    ecx
.text:004043CC                 push    esi
.text:004043CD                 mov     esi, ecx
.text:004043CF                 call    sub_4041E0
.text:004043D4                 test    eax, eax
.text:004043D6                 jz      short loc_404408
.text:004043D8                 push    8
.text:004043DA                 pop     ecx
.text:004043DB                 call    sub_402B01
.text:004043E0                 mov     [ebp+var_4], eax
.text:004043E3                 test    eax, eax
.text:004043E5                 jz      short loc_404408
.text:004043E7                 fld     [ebp+arg_0]
.text:004043EA                 mov     edx, 70000h
.text:004043EF                 push    eax
.text:004043F0                 push    8
.text:004043F2                 mov     ecx, esi
.text:004043F4                 fstp    qword ptr [eax]
.text:004043F6                 call    sub_40404C
.text:004043FB                 cmp     eax, 0FFFFFFFFh
.text:004043FE                 jnz     short loc_40440B
.text:00404400                 lea     ecx, [ebp+var_4]
.text:00404403                 call    sub_402A57
.text:00404408
.text:00404408 loc_404408:                             ; CODE XREF: sub_4043C6+10↑j
.text:00404408                                         ; sub_4043C6+1F↑j
.text:00404408                 or      eax, 0FFFFFFFFh
.text:0040440B
.text:0040440B loc_40440B:                             ; CODE XREF: sub_4043C6+38↑j
.text:0040440B                 pop     esi
.text:0040440C                 mov     esp, ebp
.text:0040440E                 pop     ebp
.text:0040440F                 retn    8
.text:0040440F sub_4043C6      endp
.text:0040440F
.text:00404412
.text:00404412 ; =============== S U B R O U T I N E =======================================
.text:00404412
.text:00404412 ; Attributes: bp-based frame
.text:00404412
.text:00404412 sub_404412      proc near               ; CODE XREF: sub_4018B0+64↑p
.text:00404412                                         ; sub_4018B0+6D↑p ...
.text:00404412
.text:00404412 var_4           = dword ptr -4
.text:00404412
.text:00404412                 mov     edi, edi
.text:00404414                 push    ebp
.text:00404415                 mov     ebp, esp
.text:00404417                 push    ecx
.text:00404418                 push    ebx
.text:00404419                 mov     ebx, dword_405468
.text:0040441F                 mov     ecx, ebx
.text:00404421                 call    sub_4041E0
.text:00404426                 test    eax, eax
.text:00404428                 jnz     short loc_40442F
.text:0040442A                 or      eax, 0FFFFFFFFh
.text:0040442D                 jmp     short loc_404486
.text:0040442F ; ---------------------------------------------------------------------------
.text:0040442F
.text:0040442F loc_40442F:                             ; CODE XREF: sub_404412+16↑j
.text:0040442F                 push    edi
.text:00404430                 call    sub_4041F0
.text:00404435                 mov     edi, eax
.text:00404437                 mov     ecx, edi
.text:00404439                 mov     [ebp+var_4], edi
.text:0040443C                 call    sub_4041E0
.text:00404441                 test    eax, eax
.text:00404443                 jz      short loc_404482
.text:00404445                 push    esi
.text:00404446                 xor     esi, esi
.text:00404448
.text:00404448 loc_404448:                             ; CODE XREF: sub_404412+4C↓j
.text:00404448                 push    0
.text:0040444A                 push    0
.text:0040444C                 xor     edx, edx
.text:0040444E                 mov     ecx, edi
.text:00404450                 call    sub_40404C
.text:00404455                 cmp     eax, 0FFFFFFFFh
.text:00404458                 jz      short loc_404460
.text:0040445A                 inc     esi
.text:0040445B                 cmp     esi, 3
.text:0040445E                 jb      short loc_404448
.text:00404460
.text:00404460 loc_404460:                             ; CODE XREF: sub_404412+46↑j
.text:00404460                 cmp     esi, 3
.text:00404463                 pop     esi
.text:00404464                 jnz     short loc_40447A
.text:00404466                 push    edi
.text:00404467                 push    4
.text:00404469                 mov     edx, 80000h
.text:0040446E                 mov     ecx, ebx
.text:00404470                 call    sub_40404C
.text:00404475                 cmp     eax, 0FFFFFFFFh
.text:00404478                 jnz     short loc_404485
.text:0040447A
.text:0040447A loc_40447A:                             ; CODE XREF: sub_404412+52↑j
.text:0040447A                 lea     ecx, [ebp+var_4]
.text:0040447D                 call    sub_404258
.text:00404482
.text:00404482 loc_404482:                             ; CODE XREF: sub_404412+31↑j
.text:00404482                 or      eax, 0FFFFFFFFh
.text:00404485
.text:00404485 loc_404485:                             ; CODE XREF: sub_404412+66↑j
.text:00404485                 pop     edi
.text:00404486
.text:00404486 loc_404486:                             ; CODE XREF: sub_404412+1B↑j
.text:00404486                 pop     ebx
.text:00404487                 mov     esp, ebp
.text:00404489                 pop     ebp
.text:0040448A                 retn
.text:0040448A sub_404412      endp
.text:0040448A
.text:0040448B
.text:0040448B ; =============== S U B R O U T I N E =======================================
.text:0040448B
.text:0040448B
.text:0040448B sub_40448B      proc near               ; CODE XREF: sub_4019AD+55↑p
.text:0040448B                                         ; sub_401EB3+67↑p
.text:0040448B                 mov     edi, edi
.text:0040448D                 push    ebx
.text:0040448E                 push    edi
.text:0040448F                 mov     edi, edx
.text:00404491                 mov     ebx, ecx
.text:00404493                 call    sub_4041E0
.text:00404498                 test    eax, eax
.text:0040449A                 jnz     short loc_4044A1
.text:0040449C                 or      eax, 0FFFFFFFFh
.text:0040449F                 jmp     short loc_4044C2
.text:004044A1 ; ---------------------------------------------------------------------------
.text:004044A1
.text:004044A1 loc_4044A1:                             ; CODE XREF: sub_40448B+F↑j
.text:004044A1                 push    esi
.text:004044A2                 xor     esi, esi
.text:004044A4                 test    edi, edi
.text:004044A6                 jz      short loc_4044BF
.text:004044A8
.text:004044A8 loc_4044A8:                             ; CODE XREF: sub_40448B+32↓j
.text:004044A8                 push    0
.text:004044AA                 push    0
.text:004044AC                 xor     edx, edx
.text:004044AE                 mov     ecx, ebx
.text:004044B0                 call    sub_40404C
.text:004044B5                 cmp     eax, 0FFFFFFFFh
.text:004044B8                 jz      short loc_4044BF
.text:004044BA                 inc     esi
.text:004044BB                 cmp     esi, edi
.text:004044BD                 jb      short loc_4044A8
.text:004044BF
.text:004044BF loc_4044BF:                             ; CODE XREF: sub_40448B+1B↑j
.text:004044BF                                         ; sub_40448B+2D↑j
.text:004044BF                 mov     eax, esi
.text:004044C1                 pop     esi
.text:004044C2
.text:004044C2 loc_4044C2:                             ; CODE XREF: sub_40448B+14↑j
.text:004044C2                 pop     edi
.text:004044C3                 pop     ebx
.text:004044C4                 retn
.text:004044C4 sub_40448B      endp
.text:004044C4
.text:004044C5
.text:004044C5 ; =============== S U B R O U T I N E =======================================
.text:004044C5
.text:004044C5 ; Attributes: bp-based frame
.text:004044C5
.text:004044C5 sub_4044C5      proc near               ; CODE XREF: sub_401D53+75↑p
.text:004044C5
.text:004044C5 var_8           = dword ptr -8
.text:004044C5 var_4           = dword ptr -4
.text:004044C5
.text:004044C5                 mov     edi, edi
.text:004044C7                 push    ebp
.text:004044C8                 mov     ebp, esp
.text:004044CA                 push    ecx
.text:004044CB                 push    ecx
.text:004044CC                 and     [ebp+var_4], 0
.text:004044D0                 lea     eax, [ebp+var_4]
.text:004044D3                 push    esi
.text:004044D4                 push    eax
.text:004044D5                 mov     esi, ecx
.text:004044D7                 call    sub_404012
.text:004044DC                 mov     ecx, eax
.text:004044DE                 mov     [ebp+var_8], ecx
.text:004044E1                 test    ecx, ecx
.text:004044E3                 jz      short loc_404512
.text:004044E5                 mov     edx, [ebp+var_4]
.text:004044E8                 mov     eax, [ecx+10h]
.text:004044EB                 test    edx, edx
.text:004044ED                 jz      short loc_4044F4
.text:004044EF                 mov     [edx+10h], eax
.text:004044F2                 jmp     short loc_4044F7
.text:004044F4 ; ---------------------------------------------------------------------------
.text:004044F4
.text:004044F4 loc_4044F4:                             ; CODE XREF: sub_4044C5+28↑j
.text:004044F4                 mov     [esi+8], eax
.text:004044F7
.text:004044F7 loc_4044F7:                             ; CODE XREF: sub_4044C5+2D↑j
.text:004044F7                 cmp     ecx, [esi+0Ch]
.text:004044FA                 jnz     short loc_4044FF
.text:004044FC                 mov     [esi+0Ch], edx
.text:004044FF
.text:004044FF loc_4044FF:                             ; CODE XREF: sub_4044C5+35↑j
.text:004044FF                 dec     dword ptr [esi+4]
.text:00404502                 call    sub_4040B3
.text:00404507                 lea     ecx, [ebp+var_8]
.text:0040450A                 call    sub_402A57
.text:0040450F                 xor     eax, eax
.text:00404511                 inc     eax
.text:00404512
.text:00404512 loc_404512:                             ; CODE XREF: sub_4044C5+1E↑j
.text:00404512                 pop     esi
.text:00404513                 mov     esp, ebp
.text:00404515                 pop     ebp
.text:00404516                 retn
.text:00404516 sub_4044C5      endp
.text:00404516
.text:00404517
.text:00404517 ; =============== S U B R O U T I N E =======================================
.text:00404517
.text:00404517
.text:00404517 sub_404517      proc near               ; CODE XREF: sub_401961+F↑p
.text:00404517                                         ; sub_4019AD+2F↑p ...
.text:00404517                 mov     ecx, dword_405468
.text:0040451D                 push    esi
.text:0040451E                 xor     esi, esi
.text:00404520                 push    esi
.text:00404521                 call    sub_404012
.text:00404526                 test    eax, eax
.text:00404528                 jz      short loc_404546
.text:0040452A                 cmp     dword ptr [eax+4], 80000h
.text:00404531                 jnz     short loc_404546
.text:00404533                 mov     ecx, [eax+0Ch]
.text:00404536                 call    sub_4041E0
.text:0040453B                 test    eax, eax
.text:0040453D                 jz      short loc_404542
.text:0040453F                 mov     esi, [ecx+4]
.text:00404542
.text:00404542 loc_404542:                             ; CODE XREF: sub_404517+26↑j
.text:00404542                 mov     eax, esi
.text:00404544                 pop     esi
.text:00404545                 retn
.text:00404546 ; ---------------------------------------------------------------------------
.text:00404546
.text:00404546 loc_404546:                             ; CODE XREF: sub_404517+11↑j
.text:00404546                                         ; sub_404517+1A↑j
.text:00404546                 xor     eax, eax
.text:00404548                 pop     esi
.text:00404549                 retn
.text:00404549 sub_404517      endp
.text:00404549
.text:0040454A
.text:0040454A ; =============== S U B R O U T I N E =======================================
.text:0040454A
.text:0040454A
.text:0040454A sub_40454A      proc near               ; CODE XREF: sub_4019AD+44↑p
.text:0040454A                                         ; sub_401EB3+52↑p ...
.text:0040454A                 push    0
.text:0040454C                 call    sub_404012
.text:00404551                 test    eax, eax
.text:00404553                 jnz     short loc_404558
.text:00404555
.text:00404555 loc_404555:                             ; CODE XREF: sub_40454A+1E↓j
.text:00404555                 xor     eax, eax
.text:00404557                 retn
.text:00404558 ; ---------------------------------------------------------------------------
.text:00404558
.text:00404558 loc_404558:                             ; CODE XREF: sub_40454A+9↑j
.text:00404558                 cmp     dword ptr [eax+4], 10000h
.text:0040455F                 jz      short loc_40456A
.text:00404561                 cmp     dword ptr [eax+4], 80000h
.text:00404568                 jnz     short loc_404555
.text:0040456A
.text:0040456A loc_40456A:                             ; CODE XREF: sub_40454A+15↑j
.text:0040456A                 mov     eax, [eax+0Ch]
.text:0040456D                 retn
.text:0040456D sub_40454A      endp
.text:0040456D
.text:0040456E
.text:0040456E ; =============== S U B R O U T I N E =======================================
.text:0040456E
.text:0040456E
.text:0040456E sub_40456E      proc near               ; CODE XREF: sub_401B05+15↑j
.text:0040456E                                         ; sub_401EB3+143↑p
.text:0040456E                 push    0
.text:00404570                 call    sub_404012
.text:00404575                 test    eax, eax
.text:00404577                 jnz     short loc_40457C
.text:00404579
.text:00404579 loc_404579:                             ; CODE XREF: sub_40456E+15↓j
.text:00404579                 xor     eax, eax
.text:0040457B                 retn
.text:0040457C ; ---------------------------------------------------------------------------
.text:0040457C
.text:0040457C loc_40457C:                             ; CODE XREF: sub_40456E+9↑j
.text:0040457C                 cmp     dword ptr [eax+4], 20000h
.text:00404583                 jnz     short loc_404579
.text:00404585                 mov     eax, [eax+0Ch]
.text:00404588                 retn
.text:00404588 sub_40456E      endp
.text:00404588
.text:00404589
.text:00404589 ; =============== S U B R O U T I N E =======================================
.text:00404589
.text:00404589 ; Attributes: bp-based frame
.text:00404589
.text:00404589 sub_404589      proc near               ; CODE XREF: sub_401961+23↑p
.text:00404589                                         ; sub_4019AD+6A↑p ...
.text:00404589
.text:00404589 arg_0           = dword ptr  8
.text:00404589
.text:00404589                 mov     edi, edi
.text:0040458B                 push    ebp
.text:0040458C                 mov     ebp, esp
.text:0040458E                 mov     ecx, dword_405468
.text:00404594                 push    0
.text:00404596                 push    3
.text:00404598                 pop     edx
.text:00404599                 call    sub_404012
.text:0040459E                 test    eax, eax
.text:004045A0                 jz      short loc_4045B8
.text:004045A2                 cmp     dword ptr [eax+4], 80000h
.text:004045A9                 jnz     short loc_4045B8
.text:004045AB                 mov     edx, [ebp+arg_0]
.text:004045AE                 mov     ecx, [eax+0Ch]
.text:004045B1                 call    sub_40454A
.text:004045B6                 jmp     short loc_4045BA
.text:004045B8 ; ---------------------------------------------------------------------------
.text:004045B8
.text:004045B8 loc_4045B8:                             ; CODE XREF: sub_404589+17↑j
.text:004045B8                                         ; sub_404589+20↑j
.text:004045B8                 xor     eax, eax
.text:004045BA
.text:004045BA loc_4045BA:                             ; CODE XREF: sub_404589+2D↑j
.text:004045BA                 pop     ebp
.text:004045BB                 retn    4
.text:004045BB sub_404589      endp
.text:004045BB
.text:004045BE
.text:004045BE ; =============== S U B R O U T I N E =======================================
.text:004045BE
.text:004045BE ; Attributes: bp-based frame
.text:004045BE
.text:004045BE ; int __stdcall sub_4045BE(LPCWSTR lpString, int)
.text:004045BE sub_4045BE      proc near               ; CODE XREF: sub_401B25+3B↑p
.text:004045BE                                         ; sub_401EB3+107↑p
.text:004045BE
.text:004045BE lpString        = dword ptr  8
.text:004045BE
.text:004045BE                 mov     edi, edi
.text:004045C0                 push    ebp
.text:004045C1                 mov     ebp, esp
.text:004045C3                 push    edi
.text:004045C4                 push    0
.text:004045C6                 call    sub_404012
.text:004045CB                 mov     edi, eax
.text:004045CD                 test    edi, edi
.text:004045CF                 jnz     short loc_4045D5
.text:004045D1
.text:004045D1 loc_4045D1:                             ; CODE XREF: sub_4045BE+24↓j
.text:004045D1                 xor     eax, eax
.text:004045D3                 jmp     short loc_404653
.text:004045D5 ; ---------------------------------------------------------------------------
.text:004045D5
.text:004045D5 loc_4045D5:                             ; CODE XREF: sub_4045BE+11↑j
.text:004045D5                 cmp     dword ptr [edi+4], 20000h
.text:004045DC                 jz      short loc_4045E4
.text:004045DE                 cmp     dword ptr [edi+4], 0
.text:004045E2                 jnz     short loc_4045D1
.text:004045E4
.text:004045E4 loc_4045E4:                             ; CODE XREF: sub_4045BE+1E↑j
.text:004045E4                 push    ebx
.text:004045E5                 push    esi
.text:004045E6                 push    [ebp+lpString]  ; lpString
.text:004045E9                 call    ds:lstrlenW
.text:004045EF                 cmp     dword ptr [edi+4], 0
.text:004045F3                 lea     ebx, [eax+1]
.text:004045F6                 jnz     short loc_404615
.text:004045F8                 lea     esi, [ebx+ebx]
.text:004045FB                 mov     ecx, esi
.text:004045FD                 call    sub_402B01
.text:00404602                 mov     [edi+0Ch], eax
.text:00404605                 test    eax, eax
.text:00404607                 jz      short loc_404638
.text:00404609                 mov     dword ptr [edi+4], 20000h
.text:00404610                 mov     [edi+8], esi
.text:00404613                 jmp     short loc_404642
.text:00404615 ; ---------------------------------------------------------------------------
.text:00404615
.text:00404615 loc_404615:                             ; CODE XREF: sub_4045BE+38↑j
.text:00404615                 lea     eax, [ebx+ebx]
.text:00404618                 cmp     [edi+8], eax
.text:0040461B                 jnb     short loc_404642
.text:0040461D                 lea     esi, [edi+0Ch]
.text:00404620                 mov     ecx, esi
.text:00404622                 call    sub_402A57
.text:00404627                 and     dword ptr [esi], 0
.text:0040462A                 lea     ecx, [ebx+ebx]
.text:0040462D                 call    sub_402B01
.text:00404632                 mov     [esi], eax
.text:00404634                 test    eax, eax
.text:00404636                 jnz     short loc_40463C
.text:00404638
.text:00404638 loc_404638:                             ; CODE XREF: sub_4045BE+49↑j
.text:00404638                 xor     eax, eax
.text:0040463A                 jmp     short loc_404651
.text:0040463C ; ---------------------------------------------------------------------------
.text:0040463C
.text:0040463C loc_40463C:                             ; CODE XREF: sub_4045BE+78↑j
.text:0040463C                 lea     eax, [ebx+ebx]
.text:0040463F                 mov     [edi+8], eax
.text:00404642
.text:00404642 loc_404642:                             ; CODE XREF: sub_4045BE+55↑j
.text:00404642                                         ; sub_4045BE+5D↑j
.text:00404642                 mov     edx, [ebp+lpString]
.text:00404645                 mov     ecx, [edi+0Ch]
.text:00404648                 push    ebx
.text:00404649                 call    sub_4025EA
.text:0040464E                 xor     eax, eax
.text:00404650                 inc     eax
.text:00404651
.text:00404651 loc_404651:                             ; CODE XREF: sub_4045BE+7C↑j
.text:00404651                 pop     esi
.text:00404652                 pop     ebx
.text:00404653
.text:00404653 loc_404653:                             ; CODE XREF: sub_4045BE+15↑j
.text:00404653                 pop     edi
.text:00404654                 pop     ebp
.text:00404655                 retn    8
.text:00404655 sub_4045BE      endp
.text:00404655
.text:00404658
.text:00404658 ; =============== S U B R O U T I N E =======================================
.text:00404658
.text:00404658 ; Attributes: bp-based frame
.text:00404658
.text:00404658 sub_404658      proc near               ; CODE XREF: sub_4019AD+110↑p
.text:00404658
.text:00404658 arg_0           = dword ptr  8
.text:00404658 arg_4           = dword ptr  0Ch
.text:00404658
.text:00404658                 mov     edi, edi
.text:0040465A                 push    ebp
.text:0040465B                 mov     ebp, esp
.text:0040465D                 mov     ecx, dword_405468
.text:00404663                 push    esi
.text:00404664                 xor     esi, esi
.text:00404666                 push    esi
.text:00404667                 push    3
.text:00404669                 pop     edx
.text:0040466A                 call    sub_404012
.text:0040466F                 test    eax, eax
.text:00404671                 jz      short loc_4046B6
.text:00404673                 cmp     dword ptr [eax+4], 80000h
.text:0040467A                 jnz     short loc_4046B6
.text:0040467C                 push    edi
.text:0040467D                 mov     edi, [ebp+arg_4]
.text:00404680                 test    edi, edi
.text:00404682                 jz      short loc_4046B1
.text:00404684                 mov     edx, [ebp+arg_0]
.text:00404687                 mov     ecx, [eax+0Ch]
.text:0040468A                 push    esi
.text:0040468B                 call    sub_404012
.text:00404690                 test    eax, eax
.text:00404692                 jz      short loc_4046B1
.text:00404694                 mov     ecx, [eax+4]
.text:00404697                 mov     edx, 10000h
.text:0040469C                 cmp     ecx, edx
.text:0040469E                 jz      short loc_4046A4
.text:004046A0                 test    ecx, ecx
.text:004046A2                 jnz     short loc_4046B1
.text:004046A4
.text:004046A4 loc_4046A4:                             ; CODE XREF: sub_404658+46↑j
.text:004046A4                 test    ecx, ecx
.text:004046A6                 jnz     short loc_4046AB
.text:004046A8                 mov     [eax+4], edx
.text:004046AB
.text:004046AB loc_4046AB:                             ; CODE XREF: sub_404658+4E↑j
.text:004046AB                 xor     esi, esi
.text:004046AD                 mov     [eax+0Ch], edi
.text:004046B0                 inc     esi
.text:004046B1
.text:004046B1 loc_4046B1:                             ; CODE XREF: sub_404658+2A↑j
.text:004046B1                                         ; sub_404658+3A↑j ...
.text:004046B1                 mov     eax, esi
.text:004046B3                 pop     edi
.text:004046B4                 jmp     short loc_4046B8
.text:004046B6 ; ---------------------------------------------------------------------------
.text:004046B6
.text:004046B6 loc_4046B6:                             ; CODE XREF: sub_404658+19↑j
.text:004046B6                                         ; sub_404658+22↑j
.text:004046B6                 xor     eax, eax
.text:004046B8
.text:004046B8 loc_4046B8:                             ; CODE XREF: sub_404658+5C↑j
.text:004046B8                 pop     esi
.text:004046B9                 pop     ebp
.text:004046BA                 retn    8
.text:004046BA sub_404658      endp
.text:004046BA
.text:004046BD
.text:004046BD ; =============== S U B R O U T I N E =======================================
.text:004046BD
.text:004046BD ; Attributes: bp-based frame
.text:004046BD
.text:004046BD sub_4046BD      proc near               ; CODE XREF: sub_401961+19↑p
.text:004046BD                                         ; sub_4019AD+60↑p ...
.text:004046BD
.text:004046BD arg_0           = dword ptr  8
.text:004046BD
.text:004046BD                 mov     edi, edi
.text:004046BF                 push    ebp
.text:004046C0                 mov     ebp, esp
.text:004046C2                 mov     ecx, dword_405468
.text:004046C8                 push    esi
.text:004046C9                 xor     esi, esi
.text:004046CB                 push    esi
.text:004046CC                 push    3
.text:004046CE                 pop     edx
.text:004046CF                 call    sub_404012
.text:004046D4                 test    eax, eax
.text:004046D6                 jz      short loc_4046F8
.text:004046D8                 cmp     dword ptr [eax+4], 80000h
.text:004046DF                 jnz     short loc_4046F8
.text:004046E1                 mov     edx, [ebp+arg_0]
.text:004046E4                 mov     ecx, [eax+0Ch]
.text:004046E7                 push    esi
.text:004046E8                 call    sub_404012
.text:004046ED                 test    eax, eax
.text:004046EF                 jz      short loc_4046F4
.text:004046F1                 mov     esi, [eax+4]
.text:004046F4
.text:004046F4 loc_4046F4:                             ; CODE XREF: sub_4046BD+32↑j
.text:004046F4                 mov     eax, esi
.text:004046F6                 jmp     short loc_4046FA
.text:004046F8 ; ---------------------------------------------------------------------------
.text:004046F8
.text:004046F8 loc_4046F8:                             ; CODE XREF: sub_4046BD+19↑j
.text:004046F8                                         ; sub_4046BD+22↑j
.text:004046F8                 xor     eax, eax
.text:004046FA
.text:004046FA loc_4046FA:                             ; CODE XREF: sub_4046BD+39↑j
.text:004046FA                 pop     esi
.text:004046FB                 pop     ebp
.text:004046FC                 retn    4
.text:004046FC sub_4046BD      endp
.text:004046FC
.text:004046FC ; ---------------------------------------------------------------------------
.text:004046FF                 align 10h
.text:00404700
.text:00404700 ; =============== S U B R O U T I N E =======================================
.text:00404700
.text:00404700 ; Attributes: info_from_lumina
.text:00404700
.text:00404700 pre_c_init      proc near               ; DATA XREF: .text:004010B0↑o
.text:00404700                                         ; .text:___guard_fids_table↑o
.text:00404700                 mov     eax, 5A4Dh
.text:00404705                 cmp     ds:400000h, ax
.text:0040470C                 jz      short loc_404712
.text:0040470E
.text:0040470E loc_40470E:                             ; CODE XREF: pre_c_init+22↓j
.text:0040470E                                         ; pre_c_init+37↓j
.text:0040470E                 xor     eax, eax
.text:00404710                 jmp     short loc_404760
.text:00404712 ; ---------------------------------------------------------------------------
.text:00404712
.text:00404712 loc_404712:                             ; CODE XREF: pre_c_init+C↑j
.text:00404712                 mov     ecx, ds:40003Ch
.text:00404718                 cmp     dword ptr [ecx+400000h], 4550h
.text:00404722                 jnz     short loc_40470E
.text:00404724                 movzx   eax, word ptr [ecx+400018h]
.text:0040472B                 cmp     eax, 10Bh
.text:00404730                 jz      short loc_40474C
.text:00404732                 cmp     eax, 20Bh
.text:00404737                 jnz     short loc_40470E
.text:00404739                 xor     eax, eax
.text:0040473B                 cmp     dword ptr [ecx+400084h], 0Eh
.text:00404742                 jbe     short loc_404760
.text:00404744                 cmp     [ecx+4000F8h], eax
.text:0040474A                 jmp     short loc_40475D
.text:0040474C ; ---------------------------------------------------------------------------
.text:0040474C
.text:0040474C loc_40474C:                             ; CODE XREF: pre_c_init+30↑j
.text:0040474C                 xor     eax, eax
.text:0040474E                 cmp     dword ptr [ecx+400074h], 0Eh
.text:00404755                 jbe     short loc_404760
.text:00404757                 cmp     [ecx+4000E8h], eax
.text:0040475D
.text:0040475D loc_40475D:                             ; CODE XREF: pre_c_init+4A↑j
.text:0040475D                 setnz   al
.text:00404760
.text:00404760 loc_404760:                             ; CODE XREF: pre_c_init+10↑j
.text:00404760                                         ; pre_c_init+42↑j ...
.text:00404760                 push    1
.text:00404762                 mov     dword_405028, eax
.text:00404767                 call    __get_image_app_type
.text:0040476C                 push    eax             ; Type
.text:0040476D                 call    ds:__set_app_type
.text:00404773                 or      dword_405474, 0FFFFFFFFh
.text:0040477A                 or      dword_405478, 0FFFFFFFFh
.text:00404781                 pop     ecx
.text:00404782                 pop     ecx
.text:00404783                 call    ds:__p__fmode
.text:00404789                 mov     ecx, dword_40503C
.text:0040478F                 mov     [eax], ecx
.text:00404791                 call    ds:__p__commode
.text:00404797                 mov     ecx, dword_405030
.text:0040479D                 mov     [eax], ecx
.text:0040479F                 call    UserMathErrorFunction
.text:004047A4                 cmp     dword_405000, 0
.text:004047AB                 jnz     short loc_4047B9
.text:004047AD                 push    offset UserMathErrorFunction ; UserMathErrorFunction
.text:004047B2                 call    ds:__setusermatherr
.text:004047B8                 pop     ecx
.text:004047B9
.text:004047B9 loc_4047B9:                             ; CODE XREF: pre_c_init+AB↑j
.text:004047B9                 call    sub_404CE3
.text:004047BE                 xor     eax, eax
.text:004047C0                 retn
.text:004047C0 pre_c_init      endp
.text:004047C0
.text:004047C0 ; ---------------------------------------------------------------------------
.text:004047C1                 align 10h
.text:004047D0
.text:004047D0 ; =============== S U B R O U T I N E =======================================
.text:004047D0
.text:004047D0 ; Attributes: info_from_lumina
.text:004047D0
.text:004047D0 pre_cpp_init    proc near               ; DATA XREF: .text:004010A4↑o
.text:004047D0                                         ; .text:004010C0↑o
.text:004047D0                 mov     eax, dword_405038
.text:004047D5                 push    offset dword_40502C
.text:004047DA                 push    dword_405034
.text:004047E0                 mov     dword_40502C, eax
.text:004047E5                 push    offset dword_405020
.text:004047EA                 push    offset dword_40501C
.text:004047EF                 push    offset dword_405018
.text:004047F4                 call    ds:__wgetmainargs
.text:004047FA                 add     esp, 14h
.text:004047FD                 mov     dword_405024, eax
.text:00404802                 retn
.text:00404802 pre_cpp_init    endp
.text:00404802
.text:00404803 ; ---------------------------------------------------------------------------
.text:00404803 ; START OF FUNCTION CHUNK FOR start
.text:00404803
.text:00404803 loc_404803:                             ; CODE XREF: start+5↓j
.text:00404803 ; __unwind { // __SEH_prolog4_GS
.text:00404803                 push    10h
.text:00404805                 push    offset stru_404FA0
.text:0040480A                 call    __SEH_prolog4_GS
.text:0040480F                 xor     ebx, ebx
.text:00404811                 mov     [ebp-4], ebx
.text:00404814                 mov     eax, large fs:18h
.text:0040481A                 mov     esi, [eax+4]
.text:0040481D                 mov     edi, ebx
.text:0040481F
.text:0040481F loc_40481F:                             ; CODE XREF: start-17A↓j
.text:0040481F                 mov     edx, offset unk_40547C
.text:00404824                 mov     ecx, esi
.text:00404826                 xor     eax, eax
.text:00404828                 lock cmpxchg [edx], ecx
.text:0040482C                 test    eax, eax
.text:0040482E                 jz      short loc_404848
.text:00404830                 cmp     eax, esi
.text:00404832                 jnz     short loc_40483B
.text:00404834                 xor     esi, esi
.text:00404836                 inc     esi
.text:00404837                 mov     edi, esi
.text:00404839                 jmp     short loc_40484B
.text:0040483B ; ---------------------------------------------------------------------------
.text:0040483B
.text:0040483B loc_40483B:                             ; CODE XREF: start-18E↑j
.text:0040483B                 push    3E8h            ; dwMilliseconds
.text:00404840                 call    ds:Sleep
.text:00404846                 jmp     short loc_40481F
.text:00404848 ; ---------------------------------------------------------------------------
.text:00404848
.text:00404848 loc_404848:                             ; CODE XREF: start-192↑j
.text:00404848                 xor     esi, esi
.text:0040484A                 inc     esi
.text:0040484B
.text:0040484B loc_40484B:                             ; CODE XREF: start-187↑j
.text:0040484B                 cmp     dword_405480, esi
.text:00404851                 jnz     short loc_40485D
.text:00404853                 push    1Fh
.text:00404855                 call    _amsg_exit
.text:0040485A                 pop     ecx
.text:0040485B                 jmp     short loc_404897
.text:0040485D ; ---------------------------------------------------------------------------
.text:0040485D
.text:0040485D loc_40485D:                             ; CODE XREF: start-16F↑j
.text:0040485D                 cmp     dword_405480, ebx
.text:00404863                 jnz     short loc_404891
.text:00404865                 mov     dword_405480, esi
.text:0040486B                 push    offset dword_4010B8 ; Last
.text:00404870                 push    offset dword_4010AC ; First
.text:00404875                 call    __initterm_e
.text:0040487A                 pop     ecx
.text:0040487B                 pop     ecx
.text:0040487C                 test    eax, eax
.text:0040487E                 jz      short loc_404897
.text:00404880                 mov     dword ptr [ebp-4], 0FFFFFFFEh
.text:00404887                 mov     eax, 0FFh
.text:0040488C                 jmp     loc_40496C
.text:00404891 ; ---------------------------------------------------------------------------
.text:00404891
.text:00404891 loc_404891:                             ; CODE XREF: start-15D↑j
.text:00404891                 mov     dword_405014, esi
.text:00404897
.text:00404897 loc_404897:                             ; CODE XREF: start-165↑j
.text:00404897                                         ; start-142↑j
.text:00404897                 cmp     dword_405480, esi
.text:0040489D                 jnz     short loc_4048BA
.text:0040489F                 push    offset Last     ; Last
.text:004048A4                 push    offset First    ; First
.text:004048A9                 call    _initterm
.text:004048AE                 pop     ecx
.text:004048AF                 pop     ecx
.text:004048B0                 mov     dword_405480, 2
.text:004048BA
.text:004048BA loc_4048BA:                             ; CODE XREF: start-123↑j
.text:004048BA                 test    edi, edi
.text:004048BC                 jnz     short loc_4048C7
.text:004048BE                 xor     eax, eax
.text:004048C0                 mov     ecx, offset unk_40547C
.text:004048C5                 xchg    eax, [ecx]
.text:004048C7
.text:004048C7 loc_4048C7:                             ; CODE XREF: start-104↑j
.text:004048C7                 cmp     pTarget, 0
.text:004048CE                 jz      short loc_4048F3
.text:004048D0                 push    offset pTarget  ; pTarget
.text:004048D5                 call    __IsNonwritableInCurrentImage
.text:004048DA                 pop     ecx
.text:004048DB                 test    eax, eax
.text:004048DD                 jz      short loc_4048F3
.text:004048DF                 push    ebx
.text:004048E0                 push    2
.text:004048E2                 push    ebx
.text:004048E3                 mov     esi, pTarget
.text:004048E9                 mov     ecx, esi
.text:004048EB                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:004048F1                 call    esi ; pTarget
.text:004048F3
.text:004048F3 loc_4048F3:                             ; CODE XREF: start-F2↑j
.text:004048F3                                         ; start-E3↑j
.text:004048F3                 push    dword_405020
.text:004048F9                 push    dword_40501C
.text:004048FF                 push    dword_405018
.text:00404905                 call    sub_401440
.text:0040490A                 add     esp, 0Ch
.text:0040490D                 mov     dword_405010, eax
.text:00404912                 cmp     dword_405028, 0
.text:00404919                 jnz     short loc_404951
.text:0040491B                 push    eax             ; Code
.text:0040491C                 call    ds:exit
.text:0040491C ; } // starts at 404803
.text:0040491C ; END OF FUNCTION CHUNK FOR start
.text:00404922
.text:00404922 ; =============== S U B R O U T I N E =======================================
.text:00404922
.text:00404922
.text:00404922 sub_404922      proc near               ; DATA XREF: .text:stru_404FA0↓o
.text:00404922                 mov     ecx, [ebp-14h]
.text:00404925                 mov     eax, [ecx]
.text:00404927                 mov     eax, [eax]
.text:00404929                 mov     [ebp-20h], eax
.text:0040492C                 push    ecx
.text:0040492D                 push    eax
.text:0040492E                 call    _XcptFilter
.text:00404933                 pop     ecx
.text:00404934                 pop     ecx
.text:00404935                 retn
.text:00404935 sub_404922      endp
.text:00404935
.text:00404936 ; ---------------------------------------------------------------------------
.text:00404936
.text:00404936 loc_404936:                             ; DATA XREF: .text:stru_404FA0↓o
.text:00404936                 mov     esp, [ebp-18h]
.text:00404939                 mov     eax, [ebp-20h]
.text:0040493C                 mov     dword_405010, eax
.text:00404941                 cmp     dword_405028, 0
.text:00404948                 jnz     short loc_404951
.text:0040494A                 push    eax
.text:0040494B                 call    ds:_exit
.text:00404951 ; ---------------------------------------------------------------------------
.text:00404951 ; START OF FUNCTION CHUNK FOR start
.text:00404951
.text:00404951 loc_404951:                             ; CODE XREF: start-A7↑j
.text:00404951                                         ; .text:00404948↑j
.text:00404951 ; __unwind { // __SEH_prolog4_GS
.text:00404951                 cmp     dword_405014, 0
.text:00404958                 jnz     short loc_404965
.text:0040495A                 call    ds:_cexit
.text:00404960                 mov     eax, dword_405010
.text:00404965
.text:00404965 loc_404965:                             ; CODE XREF: start-68↑j
.text:00404965                 mov     dword ptr [ebp-4], 0FFFFFFFEh
.text:0040496C
.text:0040496C loc_40496C:                             ; CODE XREF: start-134↑j
.text:0040496C                 call    __SEH_epilog4_GS
.text:00404971                 retn
.text:00404971 ; } // starts at 404951
.text:00404971 ; END OF FUNCTION CHUNK FOR start
.text:00404972
.text:00404972 ; =============== S U B R O U T I N E =======================================
.text:00404972
.text:00404972 ; Attributes: bp-based frame info_from_lumina
.text:00404972
.text:00404972 ; int __cdecl _initterm_e(_PIFV *First, _PIFV *Last)
.text:00404972 __initterm_e    proc near               ; CODE XREF: start-14B↑p
.text:00404972
.text:00404972 var_4           = dword ptr -4
.text:00404972 First           = dword ptr  8
.text:00404972 Last            = dword ptr  0Ch
.text:00404972
.text:00404972                 mov     edi, edi
.text:00404974                 push    ebp
.text:00404975                 mov     ebp, esp
.text:00404977                 push    ecx
.text:00404978                 mov     eax, ___security_cookie
.text:0040497D                 xor     eax, ebp
.text:0040497F                 mov     [ebp+var_4], eax
.text:00404982                 push    esi
.text:00404983                 mov     esi, [ebp+First]
.text:00404986                 xor     eax, eax
.text:00404988                 cmp     esi, [ebp+Last]
.text:0040498B                 jnb     short loc_4049AB
.text:0040498D                 push    edi
.text:0040498E
.text:0040498E loc_40498E:                             ; CODE XREF: __initterm_e+36↓j
.text:0040498E                 test    eax, eax
.text:00404990                 jnz     short loc_4049AA
.text:00404992                 mov     edi, [esi]
.text:00404994                 test    edi, edi
.text:00404996                 jz      short loc_4049A2
.text:00404998                 mov     ecx, edi
.text:0040499A                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:004049A0                 call    edi
.text:004049A2
.text:004049A2 loc_4049A2:                             ; CODE XREF: __initterm_e+24↑j
.text:004049A2                 add     esi, 4
.text:004049A5                 cmp     esi, [ebp+Last]
.text:004049A8                 jb      short loc_40498E
.text:004049AA
.text:004049AA loc_4049AA:                             ; CODE XREF: __initterm_e+1E↑j
.text:004049AA                 pop     edi
.text:004049AB
.text:004049AB loc_4049AB:                             ; CODE XREF: __initterm_e+19↑j
.text:004049AB                 mov     ecx, [ebp+var_4]
.text:004049AE                 xor     ecx, ebp        ; StackCookie
.text:004049B0                 pop     esi
.text:004049B1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004049B6                 mov     esp, ebp
.text:004049B8                 pop     ebp
.text:004049B9                 retn
.text:004049B9 __initterm_e    endp
.text:004049B9
.text:004049B9 ; ---------------------------------------------------------------------------
.text:004049BA                 align 10h
.text:004049C0
.text:004049C0 ; =============== S U B R O U T I N E =======================================
.text:004049C0
.text:004049C0 ; Attributes: library function
.text:004049C0
.text:004049C0                 public start
.text:004049C0 start           proc near               ; DATA XREF: .text:004010C4↑o
.text:004049C0
.text:004049C0 ; FUNCTION CHUNK AT .text:00404803 SIZE 0000011F BYTES
.text:004049C0 ; FUNCTION CHUNK AT .text:00404951 SIZE 00000021 BYTES
.text:004049C0
.text:004049C0 ; __unwind { // __SEH_prolog4_GS
.text:004049C0                 call    ___security_init_cookie
.text:004049C5                 jmp     loc_404803
.text:004049C5 ; } // starts at 4049C0
.text:004049C5 start           endp
.text:004049C5
.text:004049C5 ; ---------------------------------------------------------------------------
.text:004049CA                 align 10h
.text:004049D0
.text:004049D0 ; =============== S U B R O U T I N E =======================================
.text:004049D0
.text:004049D0 ; Attributes: library function
.text:004049D0
.text:004049D0 ; void __fastcall __security_check_cookie(uintptr_t StackCookie)
.text:004049D0 @__security_check_cookie@4 proc near    ; CODE XREF: sub_401440+12E↑p
.text:004049D0                                         ; sub_401DF5+95↑p ...
.text:004049D0                 cmp     ecx, ___security_cookie
.text:004049D6                 jnz     short loc_4049DB
.text:004049D8                 retn    0
.text:004049DB ; ---------------------------------------------------------------------------
.text:004049DB
.text:004049DB loc_4049DB:                             ; CODE XREF: __security_check_cookie(x)+6↑j
.text:004049DB                 jmp     ___report_gsfailure
.text:004049DB @__security_check_cookie@4 endp
.text:004049DB
.text:004049E0
.text:004049E0 ; =============== S U B R O U T I N E =======================================
.text:004049E0
.text:004049E0 ; Attributes: bp-based frame info_from_lumina
.text:004049E0
.text:004049E0 ; LONG __stdcall __CxxUnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:004049E0 ?__CxxUnhandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z proc near
.text:004049E0                                         ; DATA XREF: .text:004010CC↑o
.text:004049E0                                         ; sub_404A30↓o
.text:004049E0
.text:004049E0 ExceptionInfo   = dword ptr  8
.text:004049E0
.text:004049E0                 mov     edi, edi
.text:004049E2                 push    ebp
.text:004049E3                 mov     ebp, esp
.text:004049E5                 mov     eax, [ebp+ExceptionInfo]
.text:004049E8                 mov     eax, [eax]
.text:004049EA                 cmp     dword ptr [eax], 0E06D7363h
.text:004049F0                 jnz     short loc_404A1D
.text:004049F2                 cmp     dword ptr [eax+10h], 3
.text:004049F6                 jnz     short loc_404A1D
.text:004049F8                 mov     eax, [eax+14h]
.text:004049FB                 cmp     eax, 19930520h
.text:00404A00                 jz      short loc_404A17
.text:00404A02                 cmp     eax, 19930521h
.text:00404A07                 jz      short loc_404A17
.text:00404A09                 cmp     eax, 19930522h
.text:00404A0E                 jz      short loc_404A17
.text:00404A10                 cmp     eax, 1994000h
.text:00404A15                 jnz     short loc_404A1D
.text:00404A17
.text:00404A17 loc_404A17:                             ; CODE XREF: __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *)+20↑j
.text:00404A17                                         ; __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *)+27↑j ...
.text:00404A17                 call    ds:?terminate@@YAXXZ ; terminate(void)
.text:00404A1D ; ---------------------------------------------------------------------------
.text:00404A1D
.text:00404A1D loc_404A1D:                             ; CODE XREF: __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *)+10↑j
.text:00404A1D                                         ; __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *)+16↑j ...
.text:00404A1D                 xor     eax, eax
.text:00404A1F                 pop     ebp
.text:00404A20                 retn    4
.text:00404A20 ?__CxxUnhandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z endp
.text:00404A20
.text:00404A20 ; ---------------------------------------------------------------------------
.text:00404A23                 align 10h
.text:00404A30
.text:00404A30 ; =============== S U B R O U T I N E =======================================
.text:00404A30
.text:00404A30
.text:00404A30 sub_404A30      proc near               ; DATA XREF: .text:004010B4↑o
.text:00404A30                                         ; .text:004010D0↑o
.text:00404A30                 push    offset ?__CxxUnhandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ; lpTopLevelExceptionFilter
.text:00404A35                 call    ds:SetUnhandledExceptionFilter
.text:00404A3B                 xor     eax, eax
.text:00404A3D                 retn
.text:00404A3D sub_404A30      endp
.text:00404A3D
.text:00404A3E
.text:00404A3E ; =============== S U B R O U T I N E =======================================
.text:00404A3E
.text:00404A3E ; Attributes: thunk
.text:00404A3E
.text:00404A3E _XcptFilter     proc near               ; CODE XREF: sub_404922+C↑p
.text:00404A3E                 jmp     ds:__imp__XcptFilter
.text:00404A3E _XcptFilter     endp
.text:00404A3E
.text:00404A44
.text:00404A44 ; =============== S U B R O U T I N E =======================================
.text:00404A44
.text:00404A44 ; Attributes: bp-based frame info_from_lumina
.text:00404A44
.text:00404A44 ; __stdcall RtlpImageNtHeader(x)
.text:00404A44 _RtlpImageNtHeader@4 proc near          ; CODE XREF: __get_image_app_type+12↓p
.text:00404A44
.text:00404A44 var_1C          = dword ptr -1Ch
.text:00404A44 ms_exc          = CPPEH_RECORD ptr -18h
.text:00404A44 arg_0           = dword ptr  8
.text:00404A44
.text:00404A44 ; __unwind { // __SEH_prolog4
.text:00404A44                 push    0Ch
.text:00404A46                 push    offset stru_404FC0
.text:00404A4B                 call    __SEH_prolog4
.text:00404A50                 xor     ecx, ecx
.text:00404A52                 mov     eax, [ebp+arg_0]
.text:00404A55                 test    eax, eax
.text:00404A57                 jz      short loc_404AA4
.text:00404A59                 cmp     eax, 0FFFFFFFFh
.text:00404A5C                 jz      short loc_404AA4
.text:00404A5E ;   __try { // __except at loc_404A95
.text:00404A5E                 mov     [ebp+ms_exc.registration.TryLevel], ecx
.text:00404A61                 mov     edx, 5A4Dh
.text:00404A66                 cmp     [eax], dx
.text:00404A69                 jnz     short loc_404A9D
.text:00404A6B                 mov     edx, [eax+3Ch]
.text:00404A6E                 test    edx, edx
.text:00404A70                 js      short loc_404A9D
.text:00404A72                 cmp     edx, 10000000h
.text:00404A78                 jnb     short loc_404A9D
.text:00404A7A                 add     eax, edx
.text:00404A7C                 mov     [ebp+var_1C], eax
.text:00404A7F                 mov     ecx, [eax]
.text:00404A81                 sub     ecx, 4550h
.text:00404A87                 neg     ecx
.text:00404A89                 sbb     ecx, ecx
.text:00404A8B                 not     ecx
.text:00404A8D                 and     ecx, eax
.text:00404A8F                 jmp     short loc_404A9A
.text:00404A91 ; ---------------------------------------------------------------------------
.text:00404A91
.text:00404A91 loc_404A91:                             ; DATA XREF: .text:stru_404FC0↓o
.text:00404A91 ;   __except filter // owned by 404A5E
.text:00404A91                 xor     eax, eax
.text:00404A93                 inc     eax
.text:00404A94                 retn
.text:00404A95 ; ---------------------------------------------------------------------------
.text:00404A95
.text:00404A95 loc_404A95:                             ; DATA XREF: .text:stru_404FC0↓o
.text:00404A95 ;   __except(loc_404A91) // owned by 404A5E
.text:00404A95                 mov     esp, [ebp+ms_exc.old_esp]
.text:00404A98                 xor     ecx, ecx
.text:00404A9A
.text:00404A9A loc_404A9A:                             ; CODE XREF: RtlpImageNtHeader(x)+4B↑j
.text:00404A9A                 mov     [ebp+var_1C], ecx
.text:00404A9A ;   } // starts at 404A5E
.text:00404A9D
.text:00404A9D loc_404A9D:                             ; CODE XREF: RtlpImageNtHeader(x)+25↑j
.text:00404A9D                                         ; RtlpImageNtHeader(x)+2C↑j ...
.text:00404A9D                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
.text:00404AA4
.text:00404AA4 loc_404AA4:                             ; CODE XREF: RtlpImageNtHeader(x)+13↑j
.text:00404AA4                                         ; RtlpImageNtHeader(x)+18↑j
.text:00404AA4                 mov     eax, ecx
.text:00404AA6                 call    __SEH_epilog4
.text:00404AAB                 retn    4
.text:00404AAB ; } // starts at 404A44
.text:00404AAB _RtlpImageNtHeader@4 endp
.text:00404AAB
.text:00404AAE
.text:00404AAE ; =============== S U B R O U T I N E =======================================
.text:00404AAE
.text:00404AAE ; Attributes: bp-based frame info_from_lumina
.text:00404AAE
.text:00404AAE __get_image_app_type proc near          ; CODE XREF: pre_c_init+67↑p
.text:00404AAE
.text:00404AAE arg_0           = dword ptr  8
.text:00404AAE
.text:00404AAE                 mov     edi, edi
.text:00404AB0                 push    ebp
.text:00404AB1                 mov     ebp, esp
.text:00404AB3                 push    0               ; lpModuleName
.text:00404AB5                 call    ds:GetModuleHandleA
.text:00404ABB                 test    eax, eax
.text:00404ABD                 jz      short loc_404ADF
.text:00404ABF                 push    eax
.text:00404AC0                 call    _RtlpImageNtHeader@4 ; RtlpImageNtHeader(x)
.text:00404AC5                 test    eax, eax
.text:00404AC7                 jz      short loc_404ADF
.text:00404AC9                 movzx   ecx, word ptr [eax+5Ch]
.text:00404ACD                 push    2
.text:00404ACF                 pop     eax
.text:00404AD0                 cmp     cx, ax
.text:00404AD3                 jz      short loc_404AE2
.text:00404AD5                 cmp     ecx, 3
.text:00404AD8                 jnz     short loc_404ADF
.text:00404ADA                 xor     eax, eax
.text:00404ADC                 inc     eax
.text:00404ADD                 pop     ebp
.text:00404ADE                 retn
.text:00404ADF ; ---------------------------------------------------------------------------
.text:00404ADF
.text:00404ADF loc_404ADF:                             ; CODE XREF: __get_image_app_type+F↑j
.text:00404ADF                                         ; __get_image_app_type+19↑j ...
.text:00404ADF                 mov     eax, [ebp+arg_0]
.text:00404AE2
.text:00404AE2 loc_404AE2:                             ; CODE XREF: __get_image_app_type+25↑j
.text:00404AE2                 pop     ebp
.text:00404AE3                 retn
.text:00404AE3 __get_image_app_type endp
.text:00404AE3
.text:00404AE4
.text:00404AE4 ; =============== S U B R O U T I N E =======================================
.text:00404AE4
.text:00404AE4 ; Attributes: thunk
.text:00404AE4
.text:00404AE4 _amsg_exit      proc near               ; CODE XREF: start-16B↑p
.text:00404AE4                 jmp     ds:__imp__amsg_exit
.text:00404AE4 _amsg_exit      endp
.text:00404AE4
.text:00404AE4 ; ---------------------------------------------------------------------------
.text:00404AEA                 align 10h
.text:00404AF0
.text:00404AF0 ; =============== S U B R O U T I N E =======================================
.text:00404AF0
.text:00404AF0 ; Attributes: bp-based frame info_from_lumina
.text:00404AF0
.text:00404AF0 ; _IMAGE_SECTION_HEADER *__cdecl _FindPESection(char *pImageBase, unsigned int rva)
.text:00404AF0 __FindPESection proc near               ; CODE XREF: __IsNonwritableInCurrentImage+5B↓p
.text:00404AF0
.text:00404AF0 arg_0           = dword ptr  8
.text:00404AF0 arg_4           = dword ptr  0Ch
.text:00404AF0
.text:00404AF0                 mov     edi, edi
.text:00404AF2                 push    ebp
.text:00404AF3                 mov     ebp, esp
.text:00404AF5                 mov     eax, [ebp+arg_0]
.text:00404AF8                 xor     edx, edx
.text:00404AFA                 push    ebx
.text:00404AFB                 push    esi
.text:00404AFC                 push    edi
.text:00404AFD                 mov     ecx, [eax+3Ch]
.text:00404B00                 add     ecx, eax
.text:00404B02                 movzx   eax, word ptr [ecx+14h]
.text:00404B06                 movzx   ebx, word ptr [ecx+6]
.text:00404B0A                 add     eax, 18h
.text:00404B0D                 add     eax, ecx
.text:00404B0F                 test    ebx, ebx
.text:00404B11                 jz      short loc_404B2E
.text:00404B13                 mov     edi, [ebp+arg_4]
.text:00404B16
.text:00404B16 loc_404B16:                             ; CODE XREF: __FindPESection+3C↓j
.text:00404B16                 mov     esi, [eax+0Ch]
.text:00404B19                 cmp     edi, esi
.text:00404B1B                 jb      short loc_404B26
.text:00404B1D                 mov     ecx, [eax+8]
.text:00404B20                 add     ecx, esi
.text:00404B22                 cmp     edi, ecx
.text:00404B24                 jb      short loc_404B30
.text:00404B26
.text:00404B26 loc_404B26:                             ; CODE XREF: __FindPESection+2B↑j
.text:00404B26                 inc     edx
.text:00404B27                 add     eax, 28h ; '('
.text:00404B2A                 cmp     edx, ebx
.text:00404B2C                 jb      short loc_404B16
.text:00404B2E
.text:00404B2E loc_404B2E:                             ; CODE XREF: __FindPESection+21↑j
.text:00404B2E                 xor     eax, eax
.text:00404B30
.text:00404B30 loc_404B30:                             ; CODE XREF: __FindPESection+34↑j
.text:00404B30                 pop     edi
.text:00404B31                 pop     esi
.text:00404B32                 pop     ebx
.text:00404B33                 pop     ebp
.text:00404B34                 retn
.text:00404B34 __FindPESection endp
.text:00404B34
.text:00404B34 ; ---------------------------------------------------------------------------
.text:00404B35                 align 10h
.text:00404B40
.text:00404B40 ; =============== S U B R O U T I N E =======================================
.text:00404B40
.text:00404B40 ; Attributes: bp-based frame info_from_lumina
.text:00404B40
.text:00404B40 ; int __cdecl _IsNonwritableInCurrentImage(char *pTarget)
.text:00404B40 __IsNonwritableInCurrentImage proc near ; CODE XREF: start-EB↑p
.text:00404B40
.text:00404B40 ms_exc          = CPPEH_RECORD ptr -18h
.text:00404B40 arg_0           = dword ptr  8
.text:00404B40
.text:00404B40                 mov     edi, edi
.text:00404B42                 push    ebp
.text:00404B43                 mov     ebp, esp
.text:00404B45                 push    0FFFFFFFEh
.text:00404B47                 push    offset stru_404FE0
.text:00404B4C                 push    offset __except_handler4
.text:00404B51                 mov     eax, large fs:0
.text:00404B57                 push    eax
.text:00404B58                 sub     esp, 8
.text:00404B5B                 push    ebx
.text:00404B5C                 push    esi
.text:00404B5D                 push    edi
.text:00404B5E                 mov     eax, ___security_cookie
.text:00404B63                 xor     [ebp+ms_exc.registration.ScopeTable], eax
.text:00404B66                 xor     eax, ebp
.text:00404B68                 push    eax
.text:00404B69                 lea     eax, [ebp+ms_exc.registration]
.text:00404B6C                 mov     large fs:0, eax
.text:00404B72                 mov     [ebp+ms_exc.old_esp], esp
.text:00404B75                 mov     [ebp+ms_exc.registration.TryLevel], 0
.text:00404B7C                 push    400000h
.text:00404B81                 call    __ValidateImageBase
.text:00404B86                 add     esp, 4
.text:00404B89                 test    eax, eax
.text:00404B8B                 jz      short loc_404BE1
.text:00404B8D                 mov     eax, [ebp+arg_0]
.text:00404B90                 sub     eax, 400000h
.text:00404B95                 push    eax
.text:00404B96                 push    400000h
.text:00404B9B                 call    __FindPESection
.text:00404BA0                 add     esp, 8
.text:00404BA3                 test    eax, eax
.text:00404BA5                 jz      short loc_404BE1
.text:00404BA7                 mov     eax, [eax+24h]
.text:00404BAA                 shr     eax, 1Fh
.text:00404BAD                 not     eax
.text:00404BAF                 and     eax, 1
.text:00404BB2                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
.text:00404BB9                 mov     ecx, [ebp+ms_exc.registration.Next]
.text:00404BBC                 mov     large fs:0, ecx
.text:00404BC3                 pop     ecx
.text:00404BC4                 pop     edi
.text:00404BC5                 pop     esi
.text:00404BC6                 pop     ebx
.text:00404BC7                 mov     esp, ebp
.text:00404BC9                 pop     ebp
.text:00404BCA                 retn
.text:00404BCB ; ---------------------------------------------------------------------------
.text:00404BCB
.text:00404BCB loc_404BCB:                             ; DATA XREF: .text:stru_404FE0↓o
.text:00404BCB                 mov     eax, [ebp+ms_exc.exc_ptr]
.text:00404BCE                 mov     eax, [eax]
.text:00404BD0                 xor     ecx, ecx
.text:00404BD2                 cmp     dword ptr [eax], 0C0000005h
.text:00404BD8                 setz    cl
.text:00404BDB                 mov     eax, ecx
.text:00404BDD                 retn
.text:00404BDE ; ---------------------------------------------------------------------------
.text:00404BDE
.text:00404BDE loc_404BDE:                             ; DATA XREF: .text:stru_404FE0↓o
.text:00404BDE                 mov     esp, [ebp+ms_exc.old_esp]
.text:00404BE1
.text:00404BE1 loc_404BE1:                             ; CODE XREF: __IsNonwritableInCurrentImage+4B↑j
.text:00404BE1                                         ; __IsNonwritableInCurrentImage+65↑j
.text:00404BE1                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
.text:00404BE8                 xor     eax, eax
.text:00404BEA                 mov     ecx, [ebp+ms_exc.registration.Next]
.text:00404BED                 mov     large fs:0, ecx
.text:00404BF4                 pop     ecx
.text:00404BF5                 pop     edi
.text:00404BF6                 pop     esi
.text:00404BF7                 pop     ebx
.text:00404BF8                 mov     esp, ebp
.text:00404BFA                 pop     ebp
.text:00404BFB                 retn
.text:00404BFB __IsNonwritableInCurrentImage endp
.text:00404BFB
.text:00404BFB ; ---------------------------------------------------------------------------
.text:00404BFC                 align 10h
.text:00404C00
.text:00404C00 ; =============== S U B R O U T I N E =======================================
.text:00404C00
.text:00404C00 ; Attributes: bp-based frame info_from_lumina
.text:00404C00
.text:00404C00 ; int __cdecl _ValidateImageBase(char *pImageBase)
.text:00404C00 __ValidateImageBase proc near           ; CODE XREF: __IsNonwritableInCurrentImage+41↑p
.text:00404C00
.text:00404C00 arg_0           = dword ptr  8
.text:00404C00
.text:00404C00                 mov     edi, edi
.text:00404C02                 push    ebp
.text:00404C03                 mov     ebp, esp
.text:00404C05                 mov     eax, [ebp+arg_0]
.text:00404C08                 mov     ecx, 5A4Dh
.text:00404C0D                 cmp     [eax], cx
.text:00404C10                 jz      short loc_404C16
.text:00404C12                 xor     eax, eax
.text:00404C14                 pop     ebp
.text:00404C15                 retn
.text:00404C16 ; ---------------------------------------------------------------------------
.text:00404C16
.text:00404C16 loc_404C16:                             ; CODE XREF: __ValidateImageBase+10↑j
.text:00404C16                 mov     ecx, [eax+3Ch]
.text:00404C19                 add     ecx, eax
.text:00404C1B                 xor     eax, eax
.text:00404C1D                 cmp     dword ptr [ecx], 4550h
.text:00404C23                 jnz     short loc_404C31
.text:00404C25                 mov     edx, 10Bh
.text:00404C2A                 cmp     [ecx+18h], dx
.text:00404C2E                 setz    al
.text:00404C31
.text:00404C31 loc_404C31:                             ; CODE XREF: __ValidateImageBase+23↑j
.text:00404C31                 pop     ebp
.text:00404C32                 retn
.text:00404C32 __ValidateImageBase endp
.text:00404C32
.text:00404C33
.text:00404C33 ; =============== S U B R O U T I N E =======================================
.text:00404C33
.text:00404C33 ; Attributes: bp-based frame info_from_lumina
.text:00404C33
.text:00404C33 ; void __cdecl __security_init_cookie()
.text:00404C33 ___security_init_cookie proc near       ; CODE XREF: start↑p
.text:00404C33
.text:00404C33 PerformanceCount= LARGE_INTEGER ptr -14h
.text:00404C33 SystemTimeAsFileTime= _FILETIME ptr -0Ch
.text:00404C33 var_4           = dword ptr -4
.text:00404C33
.text:00404C33                 mov     edi, edi
.text:00404C35                 push    ebp
.text:00404C36                 mov     ebp, esp
.text:00404C38                 sub     esp, 14h
.text:00404C3B                 and     [ebp+SystemTimeAsFileTime.dwLowDateTime], 0
.text:00404C3F                 and     [ebp+SystemTimeAsFileTime.dwHighDateTime], 0
.text:00404C43                 mov     eax, ___security_cookie
.text:00404C48                 push    esi
.text:00404C49                 push    edi
.text:00404C4A                 mov     edi, 0BB40E64Eh
.text:00404C4F                 mov     esi, 0FFFF0000h
.text:00404C54                 cmp     eax, edi
.text:00404C56                 jz      short loc_404C65
.text:00404C58                 test    esi, eax
.text:00404C5A                 jz      short loc_404C65
.text:00404C5C                 not     eax
.text:00404C5E                 mov     dword_405008, eax
.text:00404C63                 jmp     short loc_404CCF
.text:00404C65 ; ---------------------------------------------------------------------------
.text:00404C65
.text:00404C65 loc_404C65:                             ; CODE XREF: ___security_init_cookie+23↑j
.text:00404C65                                         ; ___security_init_cookie+27↑j
.text:00404C65                 lea     eax, [ebp+SystemTimeAsFileTime]
.text:00404C68                 push    eax             ; lpSystemTimeAsFileTime
.text:00404C69                 call    ds:GetSystemTimeAsFileTime
.text:00404C6F                 mov     eax, [ebp+SystemTimeAsFileTime.dwHighDateTime]
.text:00404C72                 xor     eax, [ebp+SystemTimeAsFileTime.dwLowDateTime]
.text:00404C75                 mov     [ebp+var_4], eax
.text:00404C78                 call    ds:GetCurrentProcessId
.text:00404C7E                 xor     [ebp+var_4], eax
.text:00404C81                 call    ds:GetCurrentThreadId
.text:00404C87                 xor     [ebp+var_4], eax
.text:00404C8A                 call    ds:GetTickCount
.text:00404C90                 xor     eax, [ebp+var_4]
.text:00404C93                 lea     ecx, [ebp+var_4]
.text:00404C96                 xor     eax, ecx
.text:00404C98                 mov     [ebp+var_4], eax
.text:00404C9B                 lea     eax, [ebp+PerformanceCount]
.text:00404C9E                 push    eax             ; lpPerformanceCount
.text:00404C9F                 call    ds:QueryPerformanceCounter
.text:00404CA5                 mov     eax, dword ptr [ebp+PerformanceCount+4]
.text:00404CA8                 xor     eax, dword ptr [ebp+PerformanceCount]
.text:00404CAB                 mov     ecx, [ebp+var_4]
.text:00404CAE                 xor     ecx, eax
.text:00404CB0                 cmp     ecx, edi
.text:00404CB2                 jz      short loc_404CBC
.text:00404CB4                 test    ___security_cookie, esi
.text:00404CBA                 jnz     short loc_404CC1
.text:00404CBC
.text:00404CBC loc_404CBC:                             ; CODE XREF: ___security_init_cookie+7F↑j
.text:00404CBC                 mov     ecx, 0BB40E64Fh
.text:00404CC1
.text:00404CC1 loc_404CC1:                             ; CODE XREF: ___security_init_cookie+87↑j
.text:00404CC1                 mov     ___security_cookie, ecx
.text:00404CC7                 not     ecx
.text:00404CC9                 mov     dword_405008, ecx
.text:00404CCF
.text:00404CCF loc_404CCF:                             ; CODE XREF: ___security_init_cookie+30↑j
.text:00404CCF                 pop     edi
.text:00404CD0                 pop     esi
.text:00404CD1                 mov     esp, ebp
.text:00404CD3                 pop     ebp
.text:00404CD4                 retn
.text:00404CD4 ___security_init_cookie endp
.text:00404CD4
.text:00404CD4 ; ---------------------------------------------------------------------------
.text:00404CD5                 align 10h
.text:00404CE0
.text:00404CE0 ; =============== S U B R O U T I N E =======================================
.text:00404CE0
.text:00404CE0
.text:00404CE0 ; int __cdecl UserMathErrorFunction(struct _exception *)
.text:00404CE0 UserMathErrorFunction proc near         ; CODE XREF: pre_c_init+9F↑p
.text:00404CE0                                         ; DATA XREF: .text:004010D4↑o ...
.text:00404CE0                 xor     eax, eax
.text:00404CE2                 retn
.text:00404CE2 UserMathErrorFunction endp
.text:00404CE2
.text:00404CE3
.text:00404CE3 ; =============== S U B R O U T I N E =======================================
.text:00404CE3
.text:00404CE3
.text:00404CE3 sub_404CE3      proc near               ; CODE XREF: pre_c_init:loc_4047B9↑p
.text:00404CE3                 push    30000h          ; Mask
.text:00404CE8                 push    10000h          ; NewValue
.text:00404CED                 call    ds:_controlfp
.text:00404CF3                 pop     ecx
.text:00404CF4                 pop     ecx
.text:00404CF5                 retn
.text:00404CF5 sub_404CE3      endp
.text:00404CF5
.text:00404CF6
.text:00404CF6 ; =============== S U B R O U T I N E =======================================
.text:00404CF6
.text:00404CF6 ; Attributes: thunk
.text:00404CF6
.text:00404CF6 ; void __cdecl initterm(_PVFV *First, _PVFV *Last)
.text:00404CF6 _initterm       proc near               ; CODE XREF: start-117↑p
.text:00404CF6
.text:00404CF6 First           = dword ptr  4
.text:00404CF6 Last            = dword ptr  8
.text:00404CF6
.text:00404CF6                 jmp     ds:__imp__initterm
.text:00404CF6 _initterm       endp
.text:00404CF6
.text:00404CFC
.text:00404CFC ; =============== S U B R O U T I N E =======================================
.text:00404CFC
.text:00404CFC ; Attributes: library function
.text:00404CFC
.text:00404CFC __SEH_prolog4_GS proc near              ; CODE XREF: start-1B6↑p
.text:00404CFC
.text:00404CFC arg_4           = dword ptr  8
.text:00404CFC
.text:00404CFC                 push    offset __except_handler4
.text:00404D01                 push    large dword ptr fs:0
.text:00404D08                 mov     eax, [esp+8+arg_4]
.text:00404D0C                 mov     [esp+8+arg_4], ebp
.text:00404D10                 lea     ebp, [esp+8+arg_4]
.text:00404D14                 sub     esp, eax
.text:00404D16                 push    ebx
.text:00404D17                 push    esi
.text:00404D18                 push    edi
.text:00404D19                 mov     eax, ___security_cookie
.text:00404D1E                 xor     [ebp-4], eax
.text:00404D21                 xor     eax, ebp
.text:00404D23                 mov     [ebp-1Ch], eax
.text:00404D26                 push    eax
.text:00404D27                 mov     [ebp-18h], esp
.text:00404D2A                 push    dword ptr [ebp-8]
.text:00404D2D                 mov     eax, [ebp-4]
.text:00404D30                 mov     dword ptr [ebp-4], 0FFFFFFFEh
.text:00404D37                 mov     [ebp-8], eax
.text:00404D3A                 lea     eax, [ebp-10h]
.text:00404D3D                 mov     large fs:0, eax
.text:00404D43                 retn
.text:00404D43 __SEH_prolog4_GS endp ; sp-analysis failed
.text:00404D43
.text:00404D44
.text:00404D44 ; =============== S U B R O U T I N E =======================================
.text:00404D44
.text:00404D44 ; Attributes: library function
.text:00404D44
.text:00404D44 __SEH_epilog4_GS proc near              ; CODE XREF: start:loc_40496C↑p
.text:00404D44                 mov     ecx, [ebp-1Ch]
.text:00404D47                 xor     ecx, ebp        ; StackCookie
.text:00404D49                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00404D4E                 jmp     __SEH_epilog4
.text:00404D4E __SEH_epilog4_GS endp
.text:00404D4E
.text:00404D4E ; ---------------------------------------------------------------------------
.text:00404D53                 align 10h
.text:00404D60
.text:00404D60 ; =============== S U B R O U T I N E =======================================
.text:00404D60
.text:00404D60 ; Attributes: bp-based frame info_from_lumina
.text:00404D60
.text:00404D60 ; _EXCEPTION_DISPOSITION __cdecl _except_handler4(_EXCEPTION_RECORD *ExceptionRecord, _EXCEPTION_REGISTRATION_RECORD *EstablisherFrame, _CONTEXT *ContextRecord, void *DispatcherContext)
.text:00404D60 __except_handler4 proc near             ; DATA XREF: .text:004010D8↑o
.text:00404D60                                         ; .text:___safe_se_handler_table↑o ...
.text:00404D60
.text:00404D60 arg_0           = dword ptr  8
.text:00404D60 arg_4           = dword ptr  0Ch
.text:00404D60 arg_8           = dword ptr  10h
.text:00404D60 arg_C           = dword ptr  14h
.text:00404D60
.text:00404D60                 mov     edi, edi
.text:00404D62                 push    ebp
.text:00404D63                 mov     ebp, esp
.text:00404D65                 push    [ebp+arg_C]
.text:00404D68                 push    [ebp+arg_8]
.text:00404D6B                 push    [ebp+arg_4]
.text:00404D6E                 push    [ebp+arg_0]
.text:00404D71                 push    offset @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00404D76                 push    offset ___security_cookie
.text:00404D7B                 call    _except_handler4_common
.text:00404D80                 add     esp, 18h
.text:00404D83                 pop     ebp
.text:00404D84                 retn
.text:00404D84 __except_handler4 endp
.text:00404D84
.text:00404D84 ; ---------------------------------------------------------------------------
.text:00404D85                 align 10h
.text:00404D90
.text:00404D90 ; =============== S U B R O U T I N E =======================================
.text:00404D90
.text:00404D90
.text:00404D90 ; __fastcall _guard_check_icall_nop(x)
.text:00404D90 @_guard_check_icall_nop@4 proc near     ; CODE XREF: ParseAndSaveOptionValue(x,x,x)+540↑p
.text:00404D90                                         ; start-D5↑p ...
.text:00404D90                 retn
.text:00404D90 @_guard_check_icall_nop@4 endp
.text:00404D90
.text:00404D91
.text:00404D91 ; =============== S U B R O U T I N E =======================================
.text:00404D91
.text:00404D91 ; Attributes: bp-based frame info_from_lumina
.text:00404D91
.text:00404D91 ; void __cdecl __raise_securityfailure(_EXCEPTION_POINTERS *ExceptionPointers)
.text:00404D91 ___raise_securityfailure proc near      ; CODE XREF: ___report_gsfailure+107↓p
.text:00404D91
.text:00404D91 ExceptionInfo   = dword ptr  8
.text:00404D91
.text:00404D91                 mov     edi, edi
.text:00404D93                 push    ebp
.text:00404D94                 mov     ebp, esp
.text:00404D96                 push    0               ; lpTopLevelExceptionFilter
.text:00404D98                 call    ds:SetUnhandledExceptionFilter
.text:00404D9E                 push    [ebp+ExceptionInfo] ; ExceptionInfo
.text:00404DA1                 call    ds:UnhandledExceptionFilter
.text:00404DA7                 push    0C0000409h      ; uExitCode
.text:00404DAC                 call    ds:GetCurrentProcess
.text:00404DB2                 push    eax             ; hProcess
.text:00404DB3                 call    ds:TerminateProcess
.text:00404DB9                 pop     ebp
.text:00404DBA                 retn
.text:00404DBA ___raise_securityfailure endp
.text:00404DBA
.text:00404DBB
.text:00404DBB ; =============== S U B R O U T I N E =======================================
.text:00404DBB
.text:00404DBB ; Attributes: noreturn bp-based frame info_from_lumina
.text:00404DBB
.text:00404DBB ; void __cdecl __noreturn __report_gsfailure()
.text:00404DBB ___report_gsfailure proc near           ; CODE XREF: __security_check_cookie(x):loc_4049DB↑j
.text:00404DBB
.text:00404DBB var_324         = dword ptr -324h
.text:00404DBB var_8           = dword ptr -8
.text:00404DBB var_s0          = dword ptr  0
.text:00404DBB arg_0           = byte ptr  8
.text:00404DBB
.text:00404DBB                 mov     edi, edi
.text:00404DBD                 push    ebp
.text:00404DBE                 mov     ebp, esp
.text:00404DC0                 sub     esp, 324h
.text:00404DC6                 mov     dword_405140, eax
.text:00404DCB                 mov     dword_40513C, ecx
.text:00404DD1                 mov     dword_405138, edx
.text:00404DD7                 mov     dword_405134, ebx
.text:00404DDD                 mov     dword_405130, esi
.text:00404DE3                 mov     dword_40512C, edi
.text:00404DE9                 mov     word_405158, ss
.text:00404DF0                 mov     word_40514C, cs
.text:00404DF7                 mov     word_405128, ds
.text:00404DFE                 mov     word_405124, es
.text:00404E05                 mov     word_405120, fs
.text:00404E0C                 mov     word_40511C, gs
.text:00404E13                 pushf
.text:00404E14                 pop     dword_405150
.text:00404E1A                 mov     eax, [ebp+var_s0]
.text:00404E1D                 mov     dword_405144, eax
.text:00404E22                 mov     eax, [ebp+4]
.text:00404E25                 mov     dword_405148, eax
.text:00404E2A                 lea     eax, [ebp+arg_0]
.text:00404E2D                 mov     dword_405154, eax
.text:00404E32                 mov     eax, [ebp+var_324]
.text:00404E38                 mov     dword_405090, 10001h
.text:00404E42                 mov     eax, dword_405148
.text:00404E47                 mov     dword_40504C, eax
.text:00404E4C                 mov     dword_405040, 0C0000409h
.text:00404E56                 mov     dword_405044, 1
.text:00404E60                 mov     dword_405050, 3
.text:00404E6A                 push    4
.text:00404E6C                 pop     eax
.text:00404E6D                 imul    eax, 0
.text:00404E70                 mov     dword_405054[eax], 2
.text:00404E7A                 push    4
.text:00404E7C                 pop     eax
.text:00404E7D                 shl     eax, 0
.text:00404E80                 mov     ecx, ___security_cookie
.text:00404E86                 mov     dword_405054[eax], ecx
.text:00404E8C                 push    4
.text:00404E8E                 pop     eax
.text:00404E8F                 shl     eax, 1
.text:00404E91                 mov     ecx, dword_405008
.text:00404E97                 mov     dword_405054[eax], ecx
.text:00404E9D                 push    4
.text:00404E9F                 pop     eax
.text:00404EA0                 imul    eax, 0
.text:00404EA3                 mov     ecx, ___security_cookie
.text:00404EA9                 mov     [ebp+eax+var_8], ecx
.text:00404EAD                 push    4
.text:00404EAF                 pop     eax
.text:00404EB0                 shl     eax, 0
.text:00404EB3                 mov     ecx, dword_405008
.text:00404EB9                 mov     [ebp+eax+var_8], ecx
.text:00404EBD                 push    offset ExceptionInfo ; ExceptionInfo
.text:00404EC2                 call    ___raise_securityfailure
.text:00404EC7                 mov     esp, ebp
.text:00404EC9                 pop     ebp
.text:00404ECA                 retn
.text:00404ECA ___report_gsfailure endp
.text:00404ECA
.text:00404ECA ; ---------------------------------------------------------------------------
.text:00404ECB                 align 4
.text:00404ECC
.text:00404ECC ; =============== S U B R O U T I N E =======================================
.text:00404ECC
.text:00404ECC ; Attributes: library function
.text:00404ECC
.text:00404ECC __SEH_prolog4   proc near               ; CODE XREF: sub_402B01+7↑p
.text:00404ECC                                         ; sub_402BA1+7↑p ...
.text:00404ECC
.text:00404ECC arg_4           = dword ptr  8
.text:00404ECC
.text:00404ECC                 push    offset __except_handler4
.text:00404ED1                 push    large dword ptr fs:0
.text:00404ED8                 mov     eax, [esp+8+arg_4]
.text:00404EDC                 mov     [esp+8+arg_4], ebp
.text:00404EE0                 lea     ebp, [esp+8+arg_4]
.text:00404EE4                 sub     esp, eax
.text:00404EE6                 push    ebx
.text:00404EE7                 push    esi
.text:00404EE8                 push    edi
.text:00404EE9                 mov     eax, ___security_cookie
.text:00404EEE                 xor     [ebp-4], eax
.text:00404EF1                 xor     eax, ebp
.text:00404EF3                 push    eax
.text:00404EF4                 mov     [ebp-18h], esp
.text:00404EF7                 push    dword ptr [ebp-8]
.text:00404EFA                 mov     eax, [ebp-4]
.text:00404EFD                 mov     dword ptr [ebp-4], 0FFFFFFFEh
.text:00404F04                 mov     [ebp-8], eax
.text:00404F07                 lea     eax, [ebp-10h]
.text:00404F0A                 mov     large fs:0, eax
.text:00404F10                 retn
.text:00404F10 __SEH_prolog4   endp ; sp-analysis failed
.text:00404F10
.text:00404F11
.text:00404F11 ; =============== S U B R O U T I N E =======================================
.text:00404F11
.text:00404F11 ; Attributes: library function
.text:00404F11
.text:00404F11 __SEH_epilog4   proc near               ; CODE XREF: sub_402B01:loc_402B9B↑p
.text:00404F11                                         ; sub_402BA1:loc_402C77↑p ...
.text:00404F11                 mov     ecx, [ebp-10h]
.text:00404F14                 mov     large fs:0, ecx
.text:00404F1B                 pop     ecx
.text:00404F1C                 pop     edi
.text:00404F1D                 pop     edi
.text:00404F1E                 pop     esi
.text:00404F1F                 pop     ebx
.text:00404F20                 mov     esp, ebp
.text:00404F22                 pop     ebp
.text:00404F23                 push    ecx
.text:00404F24                 retn
.text:00404F24 __SEH_epilog4   endp ; sp-analysis failed
.text:00404F24
.text:00404F24 ; ---------------------------------------------------------------------------
.text:00404F25                 align 2
.text:00404F26
.text:00404F26 ; =============== S U B R O U T I N E =======================================
.text:00404F26
.text:00404F26 ; Attributes: thunk
.text:00404F26
.text:00404F26 _except_handler4_common proc near       ; CODE XREF: __except_handler4+1B↑p
.text:00404F26                 jmp     ds:__imp__except_handler4_common
.text:00404F26 _except_handler4_common endp
.text:00404F26
.text:00404F2C
.text:00404F2C ; =============== S U B R O U T I N E =======================================
.text:00404F2C
.text:00404F2C ; Attributes: bp-based frame
.text:00404F2C
.text:00404F2C sub_404F2C      proc near               ; CODE XREF: sub_401440+81↑p
.text:00404F2C                                         ; sub_401440+B7↑p ...
.text:00404F2C
.text:00404F2C arg_0           = dword ptr  8
.text:00404F2C
.text:00404F2C                 mov     edi, edi
.text:00404F2E                 push    ebp
.text:00404F2F                 mov     ebp, esp
.text:00404F31                 call    __iob_func
.text:00404F36                 mov     ecx, [ebp+arg_0]
.text:00404F39                 shl     ecx, 5
.text:00404F3C                 add     eax, ecx
.text:00404F3E                 pop     ebp
.text:00404F3F                 retn
.text:00404F3F sub_404F2C      endp
.text:00404F3F
.text:00404F40
.text:00404F40 ; =============== S U B R O U T I N E =======================================
.text:00404F40
.text:00404F40 ; Attributes: thunk
.text:00404F40
.text:00404F40 ; FILE *__cdecl _iob_func()
.text:00404F40 __iob_func      proc near               ; CODE XREF: sub_404F2C+5↑p
.text:00404F40                 jmp     ds:__imp___iob_func
.text:00404F40 __iob_func      endp
.text:00404F40
.text:00404F46
.text:00404F46 ; =============== S U B R O U T I N E =======================================
.text:00404F46
.text:00404F46 ; Attributes: thunk
.text:00404F46
.text:00404F46 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00404F46 memcpy          proc near               ; CODE XREF: sub_401701+8C↑p
.text:00404F46
.text:00404F46 Src             = dword ptr  8
.text:00404F46 Size            = dword ptr  0Ch
.text:00404F46
.text:00404F46                 jmp     ds:__imp_memcpy
.text:00404F46 memcpy          endp
.text:00404F46
.text:00404F4C
.text:00404F4C ; =============== S U B R O U T I N E =======================================
.text:00404F4C
.text:00404F4C ; Attributes: thunk
.text:00404F4C
.text:00404F4C ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00404F4C memset          proc near               ; CODE XREF: sub_4019AD+144↑p
.text:00404F4C                                         ; sub_401DF5+25↑p ...
.text:00404F4C
.text:00404F4C Val             = dword ptr  8
.text:00404F4C Size            = dword ptr  0Ch
.text:00404F4C
.text:00404F4C                 jmp     ds:__imp_memset
.text:00404F4C memset          endp
.text:00404F4C
.text:00404F4C ; ---------------------------------------------------------------------------
.text:00404F52                 align 10h
.text:00404F60 stru_404F60     dd 0FFFFFFFEh           ; GSCookieOffset
.text:00404F60                                         ; DATA XREF: sub_402B01+2↑o
.text:00404F60                 dd 0                    ; GSCookieXOROffset
.text:00404F60                 dd 0FFFFFFD0h           ; EHCookieOffset
.text:00404F60                 dd 0                    ; EHCookieXOROffset
.text:00404F60                 dd 0FFFFFFFEh           ; ScopeRecord.EnclosingLevel
.text:00404F60                 dd offset loc_402B4B    ; ScopeRecord.FilterFunc
.text:00404F60                 dd offset loc_402B59    ; ScopeRecord.HandlerFunc
.text:00404F7C                 align 10h
.text:00404F80 stru_404F80     dd 0FFFFFFFEh           ; GSCookieOffset
.text:00404F80                                         ; DATA XREF: sub_402BA1+2↑o
.text:00404F80                 dd 0                    ; GSCookieXOROffset
.text:00404F80                 dd 0FFFFFFD4h           ; EHCookieOffset
.text:00404F80                 dd 0                    ; EHCookieXOROffset
.text:00404F80                 dd 0FFFFFFFEh           ; ScopeRecord.EnclosingLevel
.text:00404F80                 dd offset loc_402C2E    ; ScopeRecord.FilterFunc
.text:00404F80                 dd offset loc_402C3C    ; ScopeRecord.HandlerFunc
.text:00404F9C                 align 10h
.text:00404FA0 stru_404FA0     dd 0FFFFFFE4h           ; GSCookieOffset
.text:00404FA0                                         ; DATA XREF: start-1BB↑o
.text:00404FA0                 dd 0                    ; GSCookieXOROffset
.text:00404FA0                 dd 0FFFFFFD0h           ; EHCookieOffset
.text:00404FA0                 dd 0                    ; EHCookieXOROffset
.text:00404FA0                 dd 0FFFFFFFEh           ; ScopeRecord.EnclosingLevel
.text:00404FA0                 dd offset sub_404922    ; ScopeRecord.FilterFunc
.text:00404FA0                 dd offset loc_404936    ; ScopeRecord.HandlerFunc
.text:00404FBC                 align 10h
.text:00404FC0 stru_404FC0     dd 0FFFFFFFEh           ; GSCookieOffset
.text:00404FC0                                         ; DATA XREF: RtlpImageNtHeader(x)+2↑o
.text:00404FC0                 dd 0                    ; GSCookieXOROffset
.text:00404FC0                 dd 0FFFFFFD4h           ; EHCookieOffset
.text:00404FC0                 dd 0                    ; EHCookieXOROffset
.text:00404FC0                 dd 0FFFFFFFEh           ; ScopeRecord.EnclosingLevel
.text:00404FC0                 dd offset loc_404A91    ; ScopeRecord.FilterFunc
.text:00404FC0                 dd offset loc_404A95    ; ScopeRecord.HandlerFunc
.text:00404FDC                 align 10h
.text:00404FE0 stru_404FE0     dd 0FFFFFFFEh           ; GSCookieOffset
.text:00404FE0                                         ; DATA XREF: __IsNonwritableInCurrentImage+7↑o
.text:00404FE0                 dd 0                    ; GSCookieXOROffset
.text:00404FE0                 dd 0FFFFFFD8h           ; EHCookieOffset
.text:00404FE0                 dd 0                    ; EHCookieXOROffset
.text:00404FE0                 dd 0FFFFFFFEh           ; ScopeRecord.EnclosingLevel
.text:00404FE0                 dd offset loc_404BCB    ; ScopeRecord.FilterFunc
.text:00404FE0                 dd offset loc_404BDE    ; ScopeRecord.HandlerFunc
.text:00404FFC                 align 10h
.text:00404FFC _text           ends
.text:00404FFC
.data:00405000 ; Section 2. (virtual address 00005000)
.data:00405000 ; Virtual size                  : 0000048C (   1164.)
.data:00405000 ; Section size in file          : 00000200 (    512.)
.data:00405000 ; Offset to raw data for section: 00004400
.data:00405000 ; Flags C0000040: Data Readable Writable
.data:00405000 ; Alignment     : default
.data:00405000 ; ===========================================================================
.data:00405000
.data:00405000 ; Segment type: Pure data
.data:00405000 ; Segment permissions: Read/Write
.data:00405000 _data           segment para public 'DATA' use32
.data:00405000                 assume cs:_data
.data:00405000                 ;org 405000h
.data:00405000 dword_405000    dd 1                    ; DATA XREF: pre_c_init+A4↑r
.data:00405004 ; uintptr_t __security_cookie
.data:00405004 ___security_cookie dd 0BB40E64Eh        ; DATA XREF: .text:00401044↑o
.data:00405004                                         ; sub_401440+8↑r ...
.data:00405008 dword_405008    dd 44BF19B1h            ; DATA XREF: ___security_init_cookie+2B↑w
.data:00405008                                         ; ___security_init_cookie+96↑w ...
.data:0040500C                 align 10h
.data:00405010 dword_405010    dd 0                    ; DATA XREF: start-B3↑w
.data:00405010                                         ; .text:0040493C↑w ...
.data:00405014 dword_405014    dd 0                    ; DATA XREF: start:loc_404891↑w
.data:00405014                                         ; start:loc_404951↑r
.data:00405018 dword_405018    dd 0                    ; DATA XREF: pre_cpp_init+1F↑o
.data:00405018                                         ; start-C1↑r
.data:0040501C dword_40501C    dd 0                    ; DATA XREF: pre_cpp_init+1A↑o
.data:0040501C                                         ; start-C7↑r
.data:00405020 dword_405020    dd 0                    ; DATA XREF: pre_cpp_init+15↑o
.data:00405020                                         ; start:loc_4048F3↑r
.data:00405024 dword_405024    dd 0                    ; DATA XREF: pre_cpp_init+2D↑w
.data:00405028 dword_405028    dd 0                    ; DATA XREF: pre_c_init+62↑w
.data:00405028                                         ; start-AE↑r ...
.data:0040502C dword_40502C    dd 0                    ; DATA XREF: pre_cpp_init+5↑o
.data:0040502C                                         ; pre_cpp_init+10↑w
.data:00405030 dword_405030    dd 0                    ; DATA XREF: pre_c_init+97↑r
.data:00405034 dword_405034    dd 0                    ; DATA XREF: pre_cpp_init+A↑r
.data:00405038 dword_405038    dd 0                    ; DATA XREF: pre_cpp_init↑r
.data:0040503C dword_40503C    dd 0                    ; DATA XREF: pre_c_init+89↑r
.data:00405040 dword_405040    dd 0                    ; DATA XREF: .text:ExceptionInfo↑o
.data:00405040                                         ; ___report_gsfailure+91↑w
.data:00405044 dword_405044    dd 0                    ; DATA XREF: ___report_gsfailure+9B↑w
.data:00405048                 db    0
.data:00405049                 db    0
.data:0040504A                 db    0
.data:0040504B                 db    0
.data:0040504C dword_40504C    dd 0                    ; DATA XREF: ___report_gsfailure+8C↑w
.data:00405050 dword_405050    dd 0                    ; DATA XREF: ___report_gsfailure+A5↑w
.data:00405054 dword_405054    dd 0                    ; DATA XREF: ___report_gsfailure+B5↑w
.data:00405054                                         ; ___report_gsfailure+CB↑w ...
.data:00405058                 db    0
.data:00405059                 db    0
.data:0040505A                 db    0
.data:0040505B                 db    0
.data:0040505C                 db    0
.data:0040505D                 db    0
.data:0040505E                 db    0
.data:0040505F                 db    0
.data:00405060                 db    0
.data:00405061                 db    0
.data:00405062                 db    0
.data:00405063                 db    0
.data:00405064                 db    0
.data:00405065                 db    0
.data:00405066                 db    0
.data:00405067                 db    0
.data:00405068                 db    0
.data:00405069                 db    0
.data:0040506A                 db    0
.data:0040506B                 db    0
.data:0040506C                 db    0
.data:0040506D                 db    0
.data:0040506E                 db    0
.data:0040506F                 db    0
.data:00405070                 db    0
.data:00405071                 db    0
.data:00405072                 db    0
.data:00405073                 db    0
.data:00405074                 db    0
.data:00405075                 db    0
.data:00405076                 db    0
.data:00405077                 db    0
.data:00405078                 db    0
.data:00405079                 db    0
.data:0040507A                 db    0
.data:0040507B                 db    0
.data:0040507C                 db    0
.data:0040507D                 db    0
.data:0040507E                 db    0
.data:0040507F                 db    0
.data:00405080                 db    0
.data:00405081                 db    0
.data:00405082                 db    0
.data:00405083                 db    0
.data:00405084                 db    0
.data:00405085                 db    0
.data:00405086                 db    0
.data:00405087                 db    0
.data:00405088                 db    0
.data:00405089                 db    0
.data:0040508A                 db    0
.data:0040508B                 db    0
.data:0040508C                 db    0
.data:0040508D                 db    0
.data:0040508E                 db    0
.data:0040508F                 db    0
.data:00405090 dword_405090    dd 0                    ; DATA XREF: .text:ExceptionInfo↑o
.data:00405090                                         ; ___report_gsfailure+7D↑w
.data:00405094                 db    0
.data:00405095                 db    0
.data:00405096                 db    0
.data:00405097                 db    0
.data:00405098                 db    0
.data:00405099                 db    0
.data:0040509A                 db    0
.data:0040509B                 db    0
.data:0040509C                 db    0
.data:0040509D                 db    0
.data:0040509E                 db    0
.data:0040509F                 db    0
.data:004050A0                 db    0
.data:004050A1                 db    0
.data:004050A2                 db    0
.data:004050A3                 db    0
.data:004050A4                 db    0
.data:004050A5                 db    0
.data:004050A6                 db    0
.data:004050A7                 db    0
.data:004050A8                 db    0
.data:004050A9                 db    0
.data:004050AA                 db    0
.data:004050AB                 db    0
.data:004050AC                 db    0
.data:004050AD                 db    0
.data:004050AE                 db    0
.data:004050AF                 db    0
.data:004050B0                 db    0
.data:004050B1                 db    0
.data:004050B2                 db    0
.data:004050B3                 db    0
.data:004050B4                 db    0
.data:004050B5                 db    0
.data:004050B6                 db    0
.data:004050B7                 db    0
.data:004050B8                 db    0
.data:004050B9                 db    0
.data:004050BA                 db    0
.data:004050BB                 db    0
.data:004050BC                 db    0
.data:004050BD                 db    0
.data:004050BE                 db    0
.data:004050BF                 db    0
.data:004050C0                 db    0
.data:004050C1                 db    0
.data:004050C2                 db    0
.data:004050C3                 db    0
.data:004050C4                 db    0
.data:004050C5                 db    0
.data:004050C6                 db    0
.data:004050C7                 db    0
.data:004050C8                 db    0
.data:004050C9                 db    0
.data:004050CA                 db    0
.data:004050CB                 db    0
.data:004050CC                 db    0
.data:004050CD                 db    0
.data:004050CE                 db    0
.data:004050CF                 db    0
.data:004050D0                 db    0
.data:004050D1                 db    0
.data:004050D2                 db    0
.data:004050D3                 db    0
.data:004050D4                 db    0
.data:004050D5                 db    0
.data:004050D6                 db    0
.data:004050D7                 db    0
.data:004050D8                 db    0
.data:004050D9                 db    0
.data:004050DA                 db    0
.data:004050DB                 db    0
.data:004050DC                 db    0
.data:004050DD                 db    0
.data:004050DE                 db    0
.data:004050DF                 db    0
.data:004050E0                 db    0
.data:004050E1                 db    0
.data:004050E2                 db    0
.data:004050E3                 db    0
.data:004050E4                 db    0
.data:004050E5                 db    0
.data:004050E6                 db    0
.data:004050E7                 db    0
.data:004050E8                 db    0
.data:004050E9                 db    0
.data:004050EA                 db    0
.data:004050EB                 db    0
.data:004050EC                 db    0
.data:004050ED                 db    0
.data:004050EE                 db    0
.data:004050EF                 db    0
.data:004050F0                 db    0
.data:004050F1                 db    0
.data:004050F2                 db    0
.data:004050F3                 db    0
.data:004050F4                 db    0
.data:004050F5                 db    0
.data:004050F6                 db    0
.data:004050F7                 db    0
.data:004050F8                 db    0
.data:004050F9                 db    0
.data:004050FA                 db    0
.data:004050FB                 db    0
.data:004050FC                 db    0
.data:004050FD                 db    0
.data:004050FE                 db    0
.data:004050FF                 db    0
.data:00405100                 db    0
.data:00405101                 db    0
.data:00405102                 db    0
.data:00405103                 db    0
.data:00405104                 db    0
.data:00405105                 db    0
.data:00405106                 db    0
.data:00405107                 db    0
.data:00405108                 db    0
.data:00405109                 db    0
.data:0040510A                 db    0
.data:0040510B                 db    0
.data:0040510C                 db    0
.data:0040510D                 db    0
.data:0040510E                 db    0
.data:0040510F                 db    0
.data:00405110                 db    0
.data:00405111                 db    0
.data:00405112                 db    0
.data:00405113                 db    0
.data:00405114                 db    0
.data:00405115                 db    0
.data:00405116                 db    0
.data:00405117                 db    0
.data:00405118                 db    0
.data:00405119                 db    0
.data:0040511A                 db    0
.data:0040511B                 db    0
.data:0040511C word_40511C     dw 0                    ; DATA XREF: ___report_gsfailure+51↑w
.data:0040511E                 align 10h
.data:00405120 word_405120     dw 0                    ; DATA XREF: ___report_gsfailure+4A↑w
.data:00405122                 align 4
.data:00405124 word_405124     dw 0                    ; DATA XREF: ___report_gsfailure+43↑w
.data:00405126                 align 4
.data:00405128 word_405128     dw 0                    ; DATA XREF: ___report_gsfailure+3C↑w
.data:0040512A                 align 4
.data:0040512C dword_40512C    dd 0                    ; DATA XREF: ___report_gsfailure+28↑w
.data:00405130 dword_405130    dd 0                    ; DATA XREF: ___report_gsfailure+22↑w
.data:00405134 dword_405134    dd 0                    ; DATA XREF: ___report_gsfailure+1C↑w
.data:00405138 dword_405138    dd 0                    ; DATA XREF: ___report_gsfailure+16↑w
.data:0040513C dword_40513C    dd 0                    ; DATA XREF: ___report_gsfailure+10↑w
.data:00405140 dword_405140    dd 0                    ; DATA XREF: ___report_gsfailure+B↑w
.data:00405144 dword_405144    dd 0                    ; DATA XREF: ___report_gsfailure+62↑w
.data:00405148 dword_405148    dd 0                    ; DATA XREF: ___report_gsfailure+6A↑w
.data:00405148                                         ; ___report_gsfailure+87↑r
.data:0040514C word_40514C     dw 0                    ; DATA XREF: ___report_gsfailure+35↑w
.data:0040514E                 align 10h
.data:00405150 dword_405150    dd 0                    ; DATA XREF: ___report_gsfailure+59↑w
.data:00405154 dword_405154    dd 0                    ; DATA XREF: ___report_gsfailure+72↑w
.data:00405158 word_405158     dw 0                    ; DATA XREF: ___report_gsfailure+2E↑w
.data:0040515A                 db    0
.data:0040515B                 db    0
.data:0040515C                 db    0
.data:0040515D                 db    0
.data:0040515E                 db    0
.data:0040515F                 db    0
.data:00405160                 db    0
.data:00405161                 db    0
.data:00405162                 db    0
.data:00405163                 db    0
.data:00405164                 db    0
.data:00405165                 db    0
.data:00405166                 db    0
.data:00405167                 db    0
.data:00405168                 db    0
.data:00405169                 db    0
.data:0040516A                 db    0
.data:0040516B                 db    0
.data:0040516C                 db    0
.data:0040516D                 db    0
.data:0040516E                 db    0
.data:0040516F                 db    0
.data:00405170                 db    0
.data:00405171                 db    0
.data:00405172                 db    0
.data:00405173                 db    0
.data:00405174                 db    0
.data:00405175                 db    0
.data:00405176                 db    0
.data:00405177                 db    0
.data:00405178                 db    0
.data:00405179                 db    0
.data:0040517A                 db    0
.data:0040517B                 db    0
.data:0040517C                 db    0
.data:0040517D                 db    0
.data:0040517E                 db    0
.data:0040517F                 db    0
.data:00405180                 db    0
.data:00405181                 db    0
.data:00405182                 db    0
.data:00405183                 db    0
.data:00405184                 db    0
.data:00405185                 db    0
.data:00405186                 db    0
.data:00405187                 db    0
.data:00405188                 db    0
.data:00405189                 db    0
.data:0040518A                 db    0
.data:0040518B                 db    0
.data:0040518C                 db    0
.data:0040518D                 db    0
.data:0040518E                 db    0
.data:0040518F                 db    0
.data:00405190                 db    0
.data:00405191                 db    0
.data:00405192                 db    0
.data:00405193                 db    0
.data:00405194                 db    0
.data:00405195                 db    0
.data:00405196                 db    0
.data:00405197                 db    0
.data:00405198                 db    0
.data:00405199                 db    0
.data:0040519A                 db    0
.data:0040519B                 db    0
.data:0040519C                 db    0
.data:0040519D                 db    0
.data:0040519E                 db    0
.data:0040519F                 db    0
.data:004051A0                 db    0
.data:004051A1                 db    0
.data:004051A2                 db    0
.data:004051A3                 db    0
.data:004051A4                 db    0
.data:004051A5                 db    0
.data:004051A6                 db    0
.data:004051A7                 db    0
.data:004051A8                 db    0
.data:004051A9                 db    0
.data:004051AA                 db    0
.data:004051AB                 db    0
.data:004051AC                 db    0
.data:004051AD                 db    0
.data:004051AE                 db    0
.data:004051AF                 db    0
.data:004051B0                 db    0
.data:004051B1                 db    0
.data:004051B2                 db    0
.data:004051B3                 db    0
.data:004051B4                 db    0
.data:004051B5                 db    0
.data:004051B6                 db    0
.data:004051B7                 db    0
.data:004051B8                 db    0
.data:004051B9                 db    0
.data:004051BA                 db    0
.data:004051BB                 db    0
.data:004051BC                 db    0
.data:004051BD                 db    0
.data:004051BE                 db    0
.data:004051BF                 db    0
.data:004051C0                 db    0
.data:004051C1                 db    0
.data:004051C2                 db    0
.data:004051C3                 db    0
.data:004051C4                 db    0
.data:004051C5                 db    0
.data:004051C6                 db    0
.data:004051C7                 db    0
.data:004051C8                 db    0
.data:004051C9                 db    0
.data:004051CA                 db    0
.data:004051CB                 db    0
.data:004051CC                 db    0
.data:004051CD                 db    0
.data:004051CE                 db    0
.data:004051CF                 db    0
.data:004051D0                 db    0
.data:004051D1                 db    0
.data:004051D2                 db    0
.data:004051D3                 db    0
.data:004051D4                 db    0
.data:004051D5                 db    0
.data:004051D6                 db    0
.data:004051D7                 db    0
.data:004051D8                 db    0
.data:004051D9                 db    0
.data:004051DA                 db    0
.data:004051DB                 db    0
.data:004051DC                 db    0
.data:004051DD                 db    0
.data:004051DE                 db    0
.data:004051DF                 db    0
.data:004051E0                 db    0
.data:004051E1                 db    0
.data:004051E2                 db    0
.data:004051E3                 db    0
.data:004051E4                 db    0
.data:004051E5                 db    0
.data:004051E6                 db    0
.data:004051E7                 db    0
.data:004051E8                 db    0
.data:004051E9                 db    0
.data:004051EA                 db    0
.data:004051EB                 db    0
.data:004051EC                 db    0
.data:004051ED                 db    0
.data:004051EE                 db    0
.data:004051EF                 db    0
.data:004051F0                 db    0
.data:004051F1                 db    0
.data:004051F2                 db    0
.data:004051F3                 db    0
.data:004051F4                 db    0
.data:004051F5                 db    0
.data:004051F6                 db    0
.data:004051F7                 db    0
.data:004051F8                 db    0
.data:004051F9                 db    0
.data:004051FA                 db    0
.data:004051FB                 db    0
.data:004051FC                 db    0
.data:004051FD                 db    0
.data:004051FE                 db    0
.data:004051FF                 db    0
.data:00405200                 db    ? ;
.data:00405201                 db    ? ;
.data:00405202                 db    ? ;
.data:00405203                 db    ? ;
.data:00405204                 db    ? ;
.data:00405205                 db    ? ;
.data:00405206                 db    ? ;
.data:00405207                 db    ? ;
.data:00405208                 db    ? ;
.data:00405209                 db    ? ;
.data:0040520A                 db    ? ;
.data:0040520B                 db    ? ;
.data:0040520C                 db    ? ;
.data:0040520D                 db    ? ;
.data:0040520E                 db    ? ;
.data:0040520F                 db    ? ;
.data:00405210                 db    ? ;
.data:00405211                 db    ? ;
.data:00405212                 db    ? ;
.data:00405213                 db    ? ;
.data:00405214                 db    ? ;
.data:00405215                 db    ? ;
.data:00405216                 db    ? ;
.data:00405217                 db    ? ;
.data:00405218                 db    ? ;
.data:00405219                 db    ? ;
.data:0040521A                 db    ? ;
.data:0040521B                 db    ? ;
.data:0040521C                 db    ? ;
.data:0040521D                 db    ? ;
.data:0040521E                 db    ? ;
.data:0040521F                 db    ? ;
.data:00405220                 db    ? ;
.data:00405221                 db    ? ;
.data:00405222                 db    ? ;
.data:00405223                 db    ? ;
.data:00405224                 db    ? ;
.data:00405225                 db    ? ;
.data:00405226                 db    ? ;
.data:00405227                 db    ? ;
.data:00405228                 db    ? ;
.data:00405229                 db    ? ;
.data:0040522A                 db    ? ;
.data:0040522B                 db    ? ;
.data:0040522C                 db    ? ;
.data:0040522D                 db    ? ;
.data:0040522E                 db    ? ;
.data:0040522F                 db    ? ;
.data:00405230                 db    ? ;
.data:00405231                 db    ? ;
.data:00405232                 db    ? ;
.data:00405233                 db    ? ;
.data:00405234                 db    ? ;
.data:00405235                 db    ? ;
.data:00405236                 db    ? ;
.data:00405237                 db    ? ;
.data:00405238                 db    ? ;
.data:00405239                 db    ? ;
.data:0040523A                 db    ? ;
.data:0040523B                 db    ? ;
.data:0040523C                 db    ? ;
.data:0040523D                 db    ? ;
.data:0040523E                 db    ? ;
.data:0040523F                 db    ? ;
.data:00405240                 db    ? ;
.data:00405241                 db    ? ;
.data:00405242                 db    ? ;
.data:00405243                 db    ? ;
.data:00405244                 db    ? ;
.data:00405245                 db    ? ;
.data:00405246                 db    ? ;
.data:00405247                 db    ? ;
.data:00405248                 db    ? ;
.data:00405249                 db    ? ;
.data:0040524A                 db    ? ;
.data:0040524B                 db    ? ;
.data:0040524C                 db    ? ;
.data:0040524D                 db    ? ;
.data:0040524E                 db    ? ;
.data:0040524F                 db    ? ;
.data:00405250                 db    ? ;
.data:00405251                 db    ? ;
.data:00405252                 db    ? ;
.data:00405253                 db    ? ;
.data:00405254                 db    ? ;
.data:00405255                 db    ? ;
.data:00405256                 db    ? ;
.data:00405257                 db    ? ;
.data:00405258                 db    ? ;
.data:00405259                 db    ? ;
.data:0040525A                 db    ? ;
.data:0040525B                 db    ? ;
.data:0040525C                 db    ? ;
.data:0040525D                 db    ? ;
.data:0040525E                 db    ? ;
.data:0040525F                 db    ? ;
.data:00405260                 db    ? ;
.data:00405261                 db    ? ;
.data:00405262                 db    ? ;
.data:00405263                 db    ? ;
.data:00405264                 db    ? ;
.data:00405265                 db    ? ;
.data:00405266                 db    ? ;
.data:00405267                 db    ? ;
.data:00405268                 db    ? ;
.data:00405269                 db    ? ;
.data:0040526A                 db    ? ;
.data:0040526B                 db    ? ;
.data:0040526C                 db    ? ;
.data:0040526D                 db    ? ;
.data:0040526E                 db    ? ;
.data:0040526F                 db    ? ;
.data:00405270                 db    ? ;
.data:00405271                 db    ? ;
.data:00405272                 db    ? ;
.data:00405273                 db    ? ;
.data:00405274                 db    ? ;
.data:00405275                 db    ? ;
.data:00405276                 db    ? ;
.data:00405277                 db    ? ;
.data:00405278                 db    ? ;
.data:00405279                 db    ? ;
.data:0040527A                 db    ? ;
.data:0040527B                 db    ? ;
.data:0040527C                 db    ? ;
.data:0040527D                 db    ? ;
.data:0040527E                 db    ? ;
.data:0040527F                 db    ? ;
.data:00405280                 db    ? ;
.data:00405281                 db    ? ;
.data:00405282                 db    ? ;
.data:00405283                 db    ? ;
.data:00405284                 db    ? ;
.data:00405285                 db    ? ;
.data:00405286                 db    ? ;
.data:00405287                 db    ? ;
.data:00405288                 db    ? ;
.data:00405289                 db    ? ;
.data:0040528A                 db    ? ;
.data:0040528B                 db    ? ;
.data:0040528C                 db    ? ;
.data:0040528D                 db    ? ;
.data:0040528E                 db    ? ;
.data:0040528F                 db    ? ;
.data:00405290                 db    ? ;
.data:00405291                 db    ? ;
.data:00405292                 db    ? ;
.data:00405293                 db    ? ;
.data:00405294                 db    ? ;
.data:00405295                 db    ? ;
.data:00405296                 db    ? ;
.data:00405297                 db    ? ;
.data:00405298                 db    ? ;
.data:00405299                 db    ? ;
.data:0040529A                 db    ? ;
.data:0040529B                 db    ? ;
.data:0040529C                 db    ? ;
.data:0040529D                 db    ? ;
.data:0040529E                 db    ? ;
.data:0040529F                 db    ? ;
.data:004052A0                 db    ? ;
.data:004052A1                 db    ? ;
.data:004052A2                 db    ? ;
.data:004052A3                 db    ? ;
.data:004052A4                 db    ? ;
.data:004052A5                 db    ? ;
.data:004052A6                 db    ? ;
.data:004052A7                 db    ? ;
.data:004052A8                 db    ? ;
.data:004052A9                 db    ? ;
.data:004052AA                 db    ? ;
.data:004052AB                 db    ? ;
.data:004052AC                 db    ? ;
.data:004052AD                 db    ? ;
.data:004052AE                 db    ? ;
.data:004052AF                 db    ? ;
.data:004052B0                 db    ? ;
.data:004052B1                 db    ? ;
.data:004052B2                 db    ? ;
.data:004052B3                 db    ? ;
.data:004052B4                 db    ? ;
.data:004052B5                 db    ? ;
.data:004052B6                 db    ? ;
.data:004052B7                 db    ? ;
.data:004052B8                 db    ? ;
.data:004052B9                 db    ? ;
.data:004052BA                 db    ? ;
.data:004052BB                 db    ? ;
.data:004052BC                 db    ? ;
.data:004052BD                 db    ? ;
.data:004052BE                 db    ? ;
.data:004052BF                 db    ? ;
.data:004052C0                 db    ? ;
.data:004052C1                 db    ? ;
.data:004052C2                 db    ? ;
.data:004052C3                 db    ? ;
.data:004052C4                 db    ? ;
.data:004052C5                 db    ? ;
.data:004052C6                 db    ? ;
.data:004052C7                 db    ? ;
.data:004052C8                 db    ? ;
.data:004052C9                 db    ? ;
.data:004052CA                 db    ? ;
.data:004052CB                 db    ? ;
.data:004052CC                 db    ? ;
.data:004052CD                 db    ? ;
.data:004052CE                 db    ? ;
.data:004052CF                 db    ? ;
.data:004052D0                 db    ? ;
.data:004052D1                 db    ? ;
.data:004052D2                 db    ? ;
.data:004052D3                 db    ? ;
.data:004052D4                 db    ? ;
.data:004052D5                 db    ? ;
.data:004052D6                 db    ? ;
.data:004052D7                 db    ? ;
.data:004052D8                 db    ? ;
.data:004052D9                 db    ? ;
.data:004052DA                 db    ? ;
.data:004052DB                 db    ? ;
.data:004052DC                 db    ? ;
.data:004052DD                 db    ? ;
.data:004052DE                 db    ? ;
.data:004052DF                 db    ? ;
.data:004052E0                 db    ? ;
.data:004052E1                 db    ? ;
.data:004052E2                 db    ? ;
.data:004052E3                 db    ? ;
.data:004052E4                 db    ? ;
.data:004052E5                 db    ? ;
.data:004052E6                 db    ? ;
.data:004052E7                 db    ? ;
.data:004052E8                 db    ? ;
.data:004052E9                 db    ? ;
.data:004052EA                 db    ? ;
.data:004052EB                 db    ? ;
.data:004052EC                 db    ? ;
.data:004052ED                 db    ? ;
.data:004052EE                 db    ? ;
.data:004052EF                 db    ? ;
.data:004052F0                 db    ? ;
.data:004052F1                 db    ? ;
.data:004052F2                 db    ? ;
.data:004052F3                 db    ? ;
.data:004052F4                 db    ? ;
.data:004052F5                 db    ? ;
.data:004052F6                 db    ? ;
.data:004052F7                 db    ? ;
.data:004052F8                 db    ? ;
.data:004052F9                 db    ? ;
.data:004052FA                 db    ? ;
.data:004052FB                 db    ? ;
.data:004052FC                 db    ? ;
.data:004052FD                 db    ? ;
.data:004052FE                 db    ? ;
.data:004052FF                 db    ? ;
.data:00405300                 db    ? ;
.data:00405301                 db    ? ;
.data:00405302                 db    ? ;
.data:00405303                 db    ? ;
.data:00405304                 db    ? ;
.data:00405305                 db    ? ;
.data:00405306                 db    ? ;
.data:00405307                 db    ? ;
.data:00405308                 db    ? ;
.data:00405309                 db    ? ;
.data:0040530A                 db    ? ;
.data:0040530B                 db    ? ;
.data:0040530C                 db    ? ;
.data:0040530D                 db    ? ;
.data:0040530E                 db    ? ;
.data:0040530F                 db    ? ;
.data:00405310                 db    ? ;
.data:00405311                 db    ? ;
.data:00405312                 db    ? ;
.data:00405313                 db    ? ;
.data:00405314                 db    ? ;
.data:00405315                 db    ? ;
.data:00405316                 db    ? ;
.data:00405317                 db    ? ;
.data:00405318                 db    ? ;
.data:00405319                 db    ? ;
.data:0040531A                 db    ? ;
.data:0040531B                 db    ? ;
.data:0040531C                 db    ? ;
.data:0040531D                 db    ? ;
.data:0040531E                 db    ? ;
.data:0040531F                 db    ? ;
.data:00405320                 db    ? ;
.data:00405321                 db    ? ;
.data:00405322                 db    ? ;
.data:00405323                 db    ? ;
.data:00405324                 db    ? ;
.data:00405325                 db    ? ;
.data:00405326                 db    ? ;
.data:00405327                 db    ? ;
.data:00405328                 db    ? ;
.data:00405329                 db    ? ;
.data:0040532A                 db    ? ;
.data:0040532B                 db    ? ;
.data:0040532C                 db    ? ;
.data:0040532D                 db    ? ;
.data:0040532E                 db    ? ;
.data:0040532F                 db    ? ;
.data:00405330                 db    ? ;
.data:00405331                 db    ? ;
.data:00405332                 db    ? ;
.data:00405333                 db    ? ;
.data:00405334                 db    ? ;
.data:00405335                 db    ? ;
.data:00405336                 db    ? ;
.data:00405337                 db    ? ;
.data:00405338                 db    ? ;
.data:00405339                 db    ? ;
.data:0040533A                 db    ? ;
.data:0040533B                 db    ? ;
.data:0040533C                 db    ? ;
.data:0040533D                 db    ? ;
.data:0040533E                 db    ? ;
.data:0040533F                 db    ? ;
.data:00405340                 db    ? ;
.data:00405341                 db    ? ;
.data:00405342                 db    ? ;
.data:00405343                 db    ? ;
.data:00405344                 db    ? ;
.data:00405345                 db    ? ;
.data:00405346                 db    ? ;
.data:00405347                 db    ? ;
.data:00405348                 db    ? ;
.data:00405349                 db    ? ;
.data:0040534A                 db    ? ;
.data:0040534B                 db    ? ;
.data:0040534C                 db    ? ;
.data:0040534D                 db    ? ;
.data:0040534E                 db    ? ;
.data:0040534F                 db    ? ;
.data:00405350                 db    ? ;
.data:00405351                 db    ? ;
.data:00405352                 db    ? ;
.data:00405353                 db    ? ;
.data:00405354                 db    ? ;
.data:00405355                 db    ? ;
.data:00405356                 db    ? ;
.data:00405357                 db    ? ;
.data:00405358                 db    ? ;
.data:00405359                 db    ? ;
.data:0040535A                 db    ? ;
.data:0040535B                 db    ? ;
.data:0040535C                 db    ? ;
.data:0040535D                 db    ? ;
.data:0040535E                 db    ? ;
.data:0040535F                 db    ? ;
.data:00405360 ; CHAR MultiByteStr[256]
.data:00405360 MultiByteStr    db 100h dup(?)          ; DATA XREF: ShowMessage(x,x)+131↑o
.data:00405360                                         ; ShowMessage(x,x)+1B6↑o ...
.data:00405460 dword_405460    dd ?                    ; DATA XREF: sub_401E93↑r
.data:00405460                                         ; sub_401E93+C↑w
.data:00405464 word_405464     dw ?                    ; DATA XREF: sub_401DF5+2A↑r
.data:00405466                 align 4
.data:00405468 dword_405468    dd ?                    ; DATA XREF: sub_4018B0+E↑r
.data:00405468                                         ; sub_4018B0:loc_4018E6↑r ...
.data:0040546C dword_40546C    dd ?                    ; DATA XREF: sub_401D53:loc_401DDF↑r
.data:00405470 dword_405470    dd ?                    ; DATA XREF: sub_4018B0+6↑r
.data:00405470                                         ; sub_4018B0+83↑w ...
.data:00405474 dword_405474    dd ?                    ; DATA XREF: pre_c_init+73↑w
.data:00405478 dword_405478    dd ?                    ; DATA XREF: pre_c_init+7A↑w
.data:0040547C unk_40547C      db    ? ;               ; DATA XREF: start:loc_40481F↑o
.data:0040547C                                         ; start-100↑o
.data:0040547D                 db    ? ;
.data:0040547E                 db    ? ;
.data:0040547F                 db    ? ;
.data:00405480 dword_405480    dd ?                    ; DATA XREF: start:loc_40484B↑r
.data:00405480                                         ; start:loc_40485D↑r ...
.data:00405484 ; char pTarget[]
.data:00405484 pTarget         dd ?                    ; DATA XREF: start:loc_4048C7↑r
.data:00405484                                         ; start-F0↑o ...
.data:00405488                 align 1000h
.data:00405488 _data           ends
.data:00405488
.idata:00406000 ; Section 3. (virtual address 00006000)
.idata:00406000 ; Virtual size                  : 00000958 (   2392.)
.idata:00406000 ; Section size in file          : 00000A00 (   2560.)
.idata:00406000 ; Offset to raw data for section: 00004600
.idata:00406000 ; Flags 40000040: Data Readable
.idata:00406000 ; Alignment     : default
.idata:00406000 ;
.idata:00406000 ; Imports from ADVAPI32.dll
.idata:00406000 ;
.idata:00406000 ; ===========================================================================
.idata:00406000
.idata:00406000 ; Segment type: Externs
.idata:00406000 ; _idata
.idata:00406000 ; BOOL (__stdcall *IsTextUnicode)(const void *lpv, int iSize, LPINT lpiResult)
.idata:00406000                 extrn IsTextUnicode:dword
.idata:00406000                                         ; CODE XREF: sub_401577+9A↑p
.idata:00406000                                         ; DATA XREF: sub_401577+9A↑r ...
.idata:00406004
.idata:00406008 ;
.idata:00406008 ; Imports from KERNEL32.dll
.idata:00406008 ;
.idata:00406008 ; BOOL (__stdcall *HeapSetInformation)(HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength)
.idata:00406008                 extrn HeapSetInformation:dword
.idata:00406008                                         ; CODE XREF: sub_401440+24↑p
.idata:00406008                                         ; DATA XREF: sub_401440+24↑r ...
.idata:0040600C ; void (__stdcall *SetLastError)(DWORD dwErrCode)
.idata:0040600C                 extrn SetLastError:dword
.idata:0040600C                                         ; CODE XREF: sub_401440+99↑p
.idata:0040600C                                         ; sub_401440+AF↑p ...
.idata:00406010 ; HANDLE (__stdcall *GetStdHandle)(DWORD nStdHandle)
.idata:00406010                 extrn GetStdHandle:dword
.idata:00406010                                         ; CODE XREF: sub_401577+11↑p
.idata:00406010                                         ; sub_4024EF:loc_402567↑p ...
.idata:00406014 ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:00406014                 extrn GetFileType:dword ; CODE XREF: sub_401577+27↑p
.idata:00406014                                         ; sub_4024BC+12↑p ...
.idata:00406018 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:00406018                 extrn MultiByteToWideChar:dword
.idata:00406018                                         ; CODE XREF: sub_401577+B5↑p
.idata:00406018                                         ; sub_401577+104↑p
.idata:00406018                                         ; DATA XREF: ...
.idata:0040601C ; UINT (__stdcall *GetConsoleOutputCP)()
.idata:0040601C                 extrn GetConsoleOutputCP:dword
.idata:0040601C                                         ; CODE XREF: sub_401577+AE↑p
.idata:0040601C                                         ; sub_401577+FD↑p ...
.idata:00406020 ; HGLOBAL (__stdcall *GlobalAlloc)(UINT uFlags, SIZE_T dwBytes)
.idata:00406020                 extrn GlobalAlloc:dword ; CODE XREF: sub_401701+53↑p
.idata:00406020                                         ; DATA XREF: sub_401701+53↑r
.idata:00406024 ; LPVOID (__stdcall *GlobalLock)(HGLOBAL hMem)
.idata:00406024                 extrn GlobalLock:dword  ; CODE XREF: sub_401701+60↑p
.idata:00406024                                         ; DATA XREF: sub_401701+60↑r
.idata:00406028 ; HGLOBAL (__stdcall *GlobalFree)(HGLOBAL hMem)
.idata:00406028                 extrn GlobalFree:dword  ; CODE XREF: sub_401701+70↑p
.idata:00406028                                         ; sub_401701+BE↑p
.idata:00406028                                         ; DATA XREF: ...
.idata:0040602C ; BOOL (__stdcall *GlobalUnlock)(HGLOBAL hMem)
.idata:0040602C                 extrn GlobalUnlock:dword
.idata:0040602C                                         ; CODE XREF: sub_401701+95↑p
.idata:0040602C                                         ; DATA XREF: sub_401701+95↑r
.idata:00406030 ; DWORD (__stdcall *GetLastError)()
.idata:00406030                 extrn GetLastError:dword
.idata:00406030                                         ; CODE XREF: sub_401701+9F↑p
.idata:00406030                                         ; sub_4018B0:loc_4018CD↑p ...
.idata:00406034 ; BOOL (__stdcall *ReadFile)(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped)
.idata:00406034                 extrn ReadFile:dword    ; CODE XREF: sub_4017E2+78↑p
.idata:00406034                                         ; DATA XREF: sub_4017E2+78↑r
.idata:00406038 ; DWORD (__stdcall *GetModuleFileNameW)(HMODULE hModule, LPWSTR lpFilename, DWORD nSize)
.idata:00406038                 extrn GetModuleFileNameW:dword
.idata:00406038                                         ; CODE XREF: PrepareUsageHelperText(x)+56↑p
.idata:00406038                                         ; DATA XREF: PrepareUsageHelperText(x)+56↑r
.idata:0040603C ; SIZE_T (__stdcall *HeapSize)(HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem)
.idata:0040603C                 extrn HeapSize:dword    ; CODE XREF: sub_402C7D+37↑p
.idata:0040603C                                         ; DATA XREF: sub_402C7D+37↑r
.idata:00406040 ; LPVOID (__stdcall *HeapReAlloc)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem, SIZE_T dwBytes)
.idata:00406040                 extrn HeapReAlloc:dword ; CODE XREF: sub_402BA1+5A↑p
.idata:00406040                                         ; DATA XREF: sub_402BA1+5A↑r
.idata:00406044 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:00406044                 extrn HeapAlloc:dword   ; CODE XREF: sub_402B01+38↑p
.idata:00406044                                         ; DATA XREF: sub_402B01+38↑r
.idata:00406048 ; BOOL (__stdcall *HeapValidate)(HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem)
.idata:00406048                 extrn HeapValidate:dword
.idata:00406048                                         ; CODE XREF: sub_402AC6+25↑p
.idata:00406048                                         ; DATA XREF: sub_402AC6+25↑r
.idata:0040604C ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:0040604C                 extrn HeapFree:dword    ; CODE XREF: sub_402A57+63↑p
.idata:0040604C                                         ; DATA XREF: sub_402A57+63↑r
.idata:00406050 ; HANDLE (__stdcall *GetProcessHeap)()
.idata:00406050                 extrn GetProcessHeap:dword
.idata:00406050                                         ; CODE XREF: sub_402A57+2C↑p
.idata:00406050                                         ; sub_402AC6:loc_402ADD↑p ...
.idata:00406054 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00406054                 extrn ExitProcess:dword ; CODE XREF: ShowMessage(x,x)+103↑p
.idata:00406054                                         ; DATA XREF: ShowMessage(x,x)+103↑r
.idata:00406058 ; BOOL (__stdcall *WriteConsoleW)(HANDLE hConsoleOutput, const void *lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID lpReserved)
.idata:00406058                 extrn WriteConsoleW:dword
.idata:00406058                                         ; CODE XREF: ShowMessage(x,x)+7E↑p
.idata:00406058                                         ; ShowMessage(x,x)+C2↑p
.idata:00406058                                         ; DATA XREF: ...
.idata:0040605C ; int (__stdcall *CompareStringA)(LCID Locale, DWORD dwCmpFlags, PCNZCH lpString1, int cchCount1, PCNZCH lpString2, int cchCount2)
.idata:0040605C                 extrn CompareStringA:dword
.idata:0040605C                                         ; CODE XREF: sub_4031EB+66↑p
.idata:0040605C                                         ; DATA XREF: sub_4031EB+66↑r
.idata:00406060 ; LCID (__stdcall *GetThreadLocale)()
.idata:00406060                 extrn GetThreadLocale:dword
.idata:00406060                                         ; CODE XREF: sub_40268E+1D↑p
.idata:00406060                                         ; sub_4031EB+5F↑p
.idata:00406060                                         ; DATA XREF: ...
.idata:00406064 ; int (__stdcall *CompareStringW)(LCID Locale, DWORD dwCmpFlags, PCNZWCH lpString1, int cchCount1, PCNZWCH lpString2, int cchCount2)
.idata:00406064                 extrn CompareStringW:dword
.idata:00406064                                         ; CODE XREF: sub_40268E+24↑p
.idata:00406064                                         ; DATA XREF: sub_40268E+24↑r
.idata:00406068 ; int (__stdcall *lstrlenW)(LPCWSTR lpString)
.idata:00406068                 extrn lstrlenW:dword    ; CODE XREF: sub_40267F+8↑p
.idata:00406068                                         ; sub_402E6D+28↑p ...
.idata:0040606C ; BOOL (__stdcall *GetConsoleMode)(HANDLE hConsoleHandle, LPDWORD lpMode)
.idata:0040606C                 extrn GetConsoleMode:dword
.idata:0040606C                                         ; CODE XREF: sub_4024BC+1F↑p
.idata:0040606C                                         ; DATA XREF: sub_4024BC+1F↑r
.idata:00406070 ; int (__stdcall *WideCharToMultiByte)(UINT CodePage, DWORD dwFlags, LPCWCH lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCCH lpDefaultChar, LPBOOL lpUsedDefaultChar)
.idata:00406070                 extrn WideCharToMultiByte:dword
.idata:00406070                                         ; CODE XREF: ShowMessage(x,x)+172↑p
.idata:00406070                                         ; ShowMessage(x,x)+1DD↑p
.idata:00406070                                         ; DATA XREF: ...
.idata:00406074 ; HLOCAL (__stdcall *LocalFree)(HLOCAL hMem)
.idata:00406074                 extrn LocalFree:dword   ; CODE XREF: sub_401C13+44↑p
.idata:00406074                                         ; sub_401C13+56↑p ...
.idata:00406078 ; DWORD (__stdcall *FormatMessageW)(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPWSTR lpBuffer, DWORD nSize, va_list *Arguments)
.idata:00406078                 extrn FormatMessageW:dword
.idata:00406078                                         ; CODE XREF: sub_401C13+29↑p
.idata:00406078                                         ; sub_401EB3+C3↑p ...
.idata:0040607C ; LANGID (__stdcall *SetThreadUILanguage)(LANGID LangId)
.idata:0040607C                 extrn SetThreadUILanguage:dword
.idata:0040607C                                         ; CODE XREF: sub_4018B0+89↑p
.idata:0040607C                                         ; DATA XREF: sub_4018B0+89↑r
.idata:00406080 ; BOOL (__stdcall *TerminateProcess)(HANDLE hProcess, UINT uExitCode)
.idata:00406080                 extrn TerminateProcess:dword
.idata:00406080                                         ; CODE XREF: ___raise_securityfailure+22↑p
.idata:00406080                                         ; DATA XREF: ___raise_securityfailure+22↑r
.idata:00406084 ; HANDLE (__stdcall *GetCurrentProcess)()
.idata:00406084                 extrn GetCurrentProcess:dword
.idata:00406084                                         ; CODE XREF: ___raise_securityfailure+1B↑p
.idata:00406084                                         ; DATA XREF: ___raise_securityfailure+1B↑r
.idata:00406088 ; LONG (__stdcall *UnhandledExceptionFilter)(struct _EXCEPTION_POINTERS *ExceptionInfo)
.idata:00406088                 extrn UnhandledExceptionFilter:dword
.idata:00406088                                         ; CODE XREF: ___raise_securityfailure+10↑p
.idata:00406088                                         ; DATA XREF: ___raise_securityfailure+10↑r
.idata:0040608C ; DWORD (__stdcall *GetTickCount)()
.idata:0040608C                 extrn GetTickCount:dword
.idata:0040608C                                         ; CODE XREF: ___security_init_cookie+57↑p
.idata:0040608C                                         ; DATA XREF: ___security_init_cookie+57↑r
.idata:00406090 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:00406090                 extrn GetSystemTimeAsFileTime:dword
.idata:00406090                                         ; CODE XREF: ___security_init_cookie+36↑p
.idata:00406090                                         ; DATA XREF: ___security_init_cookie+36↑r
.idata:00406094 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00406094                 extrn SetUnhandledExceptionFilter:dword
.idata:00406094                                         ; CODE XREF: sub_404A30+5↑p
.idata:00406094                                         ; ___raise_securityfailure+7↑p
.idata:00406094                                         ; DATA XREF: ...
.idata:00406098 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:00406098                 extrn GetModuleHandleA:dword
.idata:00406098                                         ; CODE XREF: __get_image_app_type+7↑p
.idata:00406098                                         ; DATA XREF: __get_image_app_type+7↑r
.idata:0040609C ; DWORD (__stdcall *GetCurrentThreadId)()
.idata:0040609C                 extrn GetCurrentThreadId:dword
.idata:0040609C                                         ; CODE XREF: ___security_init_cookie+4E↑p
.idata:0040609C                                         ; DATA XREF: ___security_init_cookie+4E↑r
.idata:004060A0 ; DWORD (__stdcall *GetCurrentProcessId)()
.idata:004060A0                 extrn GetCurrentProcessId:dword
.idata:004060A0                                         ; CODE XREF: ___security_init_cookie+45↑p
.idata:004060A0                                         ; DATA XREF: ___security_init_cookie+45↑r
.idata:004060A4 ; BOOL (__stdcall *QueryPerformanceCounter)(LARGE_INTEGER *lpPerformanceCount)
.idata:004060A4                 extrn QueryPerformanceCounter:dword
.idata:004060A4                                         ; CODE XREF: ___security_init_cookie+6C↑p
.idata:004060A4                                         ; DATA XREF: ___security_init_cookie+6C↑r
.idata:004060A8 ; void (__stdcall *Sleep)(DWORD dwMilliseconds)
.idata:004060A8                 extrn Sleep:dword       ; CODE XREF: start-180↑p
.idata:004060A8                                         ; DATA XREF: start-180↑r
.idata:004060AC
.idata:004060B0 ;
.idata:004060B0 ; Imports from SHLWAPI.dll
.idata:004060B0 ;
.idata:004060B0 ; PWSTR (__stdcall *StrChrIW)(PCWSTR pszStart, WCHAR wMatch)
.idata:004060B0                 extrn StrChrIW:dword    ; CODE XREF: sub_402229+25↑p
.idata:004060B0                                         ; DATA XREF: sub_402229+25↑r ...
.idata:004060B4 ; PWSTR (__stdcall *StrChrW)(PCWSTR pszStart, WCHAR wMatch)
.idata:004060B4                 extrn StrChrW:dword     ; CODE XREF: sub_4023BD+75↑p
.idata:004060B4                                         ; sub_4023BD+9D↑p
.idata:004060B4                                         ; DATA XREF: ...
.idata:004060B8 ; PWSTR (__stdcall *StrStrIW)(PCWSTR pszFirst, PCWSTR pszSrch)
.idata:004060B8                 extrn StrStrIW:dword    ; CODE XREF: sub_40234C+36↑p
.idata:004060B8                                         ; DATA XREF: sub_40234C+36↑r
.idata:004060BC ; PWSTR (__stdcall *StrStrW)(PCWSTR pszFirst, PCWSTR pszSrch)
.idata:004060BC                 extrn StrStrW:dword     ; CODE XREF: sub_40234C:loc_40238A↑p
.idata:004060BC                                         ; DATA XREF: sub_40234C:loc_40238A↑r
.idata:004060C0
.idata:004060C4 ;
.idata:004060C4 ; Imports from USER32.dll
.idata:004060C4 ;
.idata:004060C4 ; BOOL (__stdcall *EmptyClipboard)()
.idata:004060C4                 extrn EmptyClipboard:dword
.idata:004060C4                                         ; CODE XREF: sub_401701+30↑p
.idata:004060C4                                         ; DATA XREF: sub_401701+30↑r ...
.idata:004060C8 ; BOOL (__stdcall *CloseClipboard)()
.idata:004060C8                 extrn CloseClipboard:dword
.idata:004060C8                                         ; CODE XREF: sub_401701:loc_401740↑p
.idata:004060C8                                         ; sub_401701+B7↑p
.idata:004060C8                                         ; DATA XREF: ...
.idata:004060CC ; HANDLE (__stdcall *SetClipboardData)(UINT uFormat, HANDLE hMem)
.idata:004060CC                 extrn SetClipboardData:dword
.idata:004060CC                                         ; CODE XREF: sub_401701+AD↑p
.idata:004060CC                                         ; DATA XREF: sub_401701+AD↑r
.idata:004060D0 ; int (__stdcall *LoadStringW)(HINSTANCE hInstance, UINT uID, LPWSTR lpBuffer, int cchBufferMax)
.idata:004060D0                 extrn LoadStringW:dword ; CODE XREF: sub_401EB3+98↑p
.idata:004060D0                                         ; DATA XREF: sub_401EB3+98↑r
.idata:004060D4 ; LPWSTR (__stdcall *CharUpperW)(LPWSTR lpsz)
.idata:004060D4                 extrn CharUpperW:dword  ; CODE XREF: PrepareUsageHelperText(x)+25A↑p
.idata:004060D4                                         ; DATA XREF: PrepareUsageHelperText(x)+25A↑r
.idata:004060D8 ; BOOL (__stdcall *OpenClipboard)(HWND hWndNewOwner)
.idata:004060D8                 extrn OpenClipboard:dword
.idata:004060D8                                         ; CODE XREF: sub_401701+22↑p
.idata:004060D8                                         ; DATA XREF: sub_401701+22↑r
.idata:004060DC
.idata:004060E0 ;
.idata:004060E0 ; Imports from VERSION.dll
.idata:004060E0 ;
.idata:004060E0 ; BOOL (__stdcall *VerQueryValueW)(LPCVOID pBlock, LPCWSTR lpSubBlock, LPVOID *lplpBuffer, PUINT puLen)
.idata:004060E0                 extrn VerQueryValueW:dword
.idata:004060E0                                         ; CODE XREF: PrepareUsageHelperText(x)+ED↑p
.idata:004060E0                                         ; PrepareUsageHelperText(x)+143↑p
.idata:004060E0                                         ; DATA XREF: ...
.idata:004060E4 ; DWORD (__stdcall *GetFileVersionInfoSizeExW)(DWORD dwFlags, LPCWSTR lpwstrFilename, LPDWORD lpdwHandle)
.idata:004060E4                 extrn GetFileVersionInfoSizeExW:dword
.idata:004060E4                                         ; CODE XREF: PrepareUsageHelperText(x)+75↑p
.idata:004060E4                                         ; DATA XREF: PrepareUsageHelperText(x)+75↑r
.idata:004060E8 ; BOOL (__stdcall *GetFileVersionInfoExW)(DWORD dwFlags, LPCWSTR lpwstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID lpData)
.idata:004060E8                 extrn GetFileVersionInfoExW:dword
.idata:004060E8                                         ; CODE XREF: PrepareUsageHelperText(x)+C8↑p
.idata:004060E8                                         ; DATA XREF: PrepareUsageHelperText(x)+C8↑r
.idata:004060EC
.idata:004060F0 ;
.idata:004060F0 ; Imports from WS2_32.dll
.idata:004060F0 ;
.idata:004060F0 ; int (__stdcall *WSACleanup)()
.idata:004060F0                 extrn WSACleanup:dword  ; CODE XREF: sub_401D53+95↑p
.idata:004060F0                                         ; DATA XREF: sub_401D53+95↑r ...
.idata:004060F0                                         ; Import by ordinal 116
.idata:004060F4
.idata:004060F8 ;
.idata:004060F8 ; Imports from msvcrt.dll
.idata:004060F8 ;
.idata:004060F8 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004060F8                 extrn __imp_memcpy:dword
.idata:004060F8                                         ; DATA XREF: memcpy↑r
.idata:004060F8                                         ; .idata:004061B0↓o
.idata:004060FC ; int (__cdecl *fflush)(FILE *Stream)
.idata:004060FC                 extrn fflush:dword      ; CODE XREF: ShowMessage(x,x)+1FF↑p
.idata:004060FC                                         ; DATA XREF: ShowMessage(x,x)+1FF↑r
.idata:00406100                 extrn __imp__except_handler4_common:dword
.idata:00406100                                         ; DATA XREF: _except_handler4_common↑r
.idata:00406104 ; unsigned int (__cdecl *controlfp)(unsigned int NewValue, unsigned int Mask)
.idata:00406104                 extrn _controlfp:dword  ; CODE XREF: sub_404CE3+A↑p
.idata:00406104                                         ; DATA XREF: sub_404CE3+A↑r
.idata:00406108 ; void __cdecl terminate(void)
.idata:00406108                 extrn ?terminate@@YAXXZ:dword
.idata:00406108                                         ; CODE XREF: __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *):loc_404A17↑p
.idata:00406108                                         ; DATA XREF: __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *):loc_404A17↑r
.idata:0040610C ; void (__cdecl *_initterm)(_PVFV *First, _PVFV *Last)
.idata:0040610C                 extrn __imp__initterm:dword
.idata:0040610C                                         ; DATA XREF: _initterm↑r
.idata:00406110 ; void (__cdecl *_setusermatherr)(_UserMathErrorFunctionPointer UserMathErrorFunction)
.idata:00406110                 extrn __setusermatherr:dword
.idata:00406110                                         ; CODE XREF: pre_c_init+B2↑p
.idata:00406110                                         ; DATA XREF: pre_c_init+B2↑r
.idata:00406114 ; int *(__cdecl *_p__fmode)()
.idata:00406114                 extrn __p__fmode:dword  ; CODE XREF: pre_c_init+83↑p
.idata:00406114                                         ; DATA XREF: pre_c_init+83↑r
.idata:00406118 ; void (__cdecl *cexit)()
.idata:00406118                 extrn _cexit:dword      ; CODE XREF: start-66↑p
.idata:00406118                                         ; DATA XREF: start-66↑r
.idata:0040611C ; void (__cdecl __noreturn *exit)(int Code)
.idata:0040611C                 extrn _exit:dword       ; CODE XREF: .text:0040494B↑p
.idata:0040611C                                         ; DATA XREF: .text:0040494B↑r
.idata:00406120 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00406120                 extrn exit:dword        ; CODE XREF: start-A4↑p
.idata:00406120                                         ; DATA XREF: start-A4↑r
.idata:00406124 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:00406124                 extrn __set_app_type:dword
.idata:00406124                                         ; CODE XREF: pre_c_init+6D↑p
.idata:00406124                                         ; DATA XREF: pre_c_init+6D↑r
.idata:00406128                 extrn __wgetmainargs:dword
.idata:00406128                                         ; CODE XREF: pre_cpp_init+24↑p
.idata:00406128                                         ; DATA XREF: pre_cpp_init+24↑r
.idata:0040612C                 extrn __imp__amsg_exit:dword
.idata:0040612C                                         ; DATA XREF: _amsg_exit↑r
.idata:00406130 ; int *(__cdecl *_p__commode)()
.idata:00406130                 extrn __p__commode:dword
.idata:00406130                                         ; CODE XREF: pre_c_init+91↑p
.idata:00406130                                         ; DATA XREF: pre_c_init+91↑r
.idata:00406134                 extrn __imp__XcptFilter:dword
.idata:00406134                                         ; DATA XREF: _XcptFilter↑r
.idata:00406138 ; FILE *(__cdecl *__iob_func)()
.idata:00406138                 extrn __imp___iob_func:dword
.idata:00406138                                         ; DATA XREF: __iob_func↑r
.idata:0040613C ; int (__cdecl *memicmp)(const void *Buf1, const void *Buf2, size_t Size)
.idata:0040613C                 extrn _memicmp:dword    ; CODE XREF: sub_401961+36↑p
.idata:0040613C                                         ; sub_4019AD+7D↑p
.idata:0040613C                                         ; DATA XREF: ...
.idata:00406140 ; int (__cdecl *vsnwprintf)(wchar_t *Buffer, size_t BufferCount, const wchar_t *Format, va_list Args)
.idata:00406140                 extrn _vsnwprintf:dword ; CODE XREF: StringVPrintfWorkerW_4+17↑p
.idata:00406140                                         ; DATA XREF: StringVPrintfWorkerW_4+17↑r
.idata:00406144 ; int *(__cdecl *errno)()
.idata:00406144                 extrn _errno:dword      ; CODE XREF: sub_402021:loc_402067↑p
.idata:00406144                                         ; sub_402021+5F↑p ...
.idata:00406148 ; double (__cdecl *wcstod)(const wchar_t *String, wchar_t **EndPtr)
.idata:00406148                 extrn wcstod:dword      ; CODE XREF: sub_402021+53↑p
.idata:00406148                                         ; DATA XREF: sub_402021+53↑r
.idata:0040614C ; int (__cdecl *wcstol)(const wchar_t *String, wchar_t **EndPtr, int Radix)
.idata:0040614C                 extrn wcstol:dword      ; CODE XREF: sub_4020BA+6D↑p
.idata:0040614C                                         ; sub_402173+69↑p
.idata:0040614C                                         ; DATA XREF: ...
.idata:00406150 ; unsigned int (__cdecl *wcstoul)(const wchar_t *String, wchar_t **EndPtr, int Radix)
.idata:00406150                 extrn wcstoul:dword     ; CODE XREF: sub_4020BA:loc_40212F↑p
.idata:00406150                                         ; sub_402173:loc_4021E4↑p
.idata:00406150                                         ; DATA XREF: ...
.idata:00406154 ; int (__cdecl *fileno)(FILE *Stream)
.idata:00406154                 extrn _fileno:dword     ; CODE XREF: sub_4024EF+29↑p
.idata:00406154                                         ; DATA XREF: sub_4024EF+29↑r
.idata:00406158 ; intptr_t (__cdecl *get_osfhandle)(int FileHandle)
.idata:00406158                 extrn _get_osfhandle:dword
.idata:00406158                                         ; CODE XREF: sub_4024EF+3A↑p
.idata:00406158                                         ; DATA XREF: sub_4024EF+3A↑r
.idata:0040615C ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:0040615C                 extrn fprintf:dword     ; CODE XREF: ShowMessage(x,x)+1F8↑p
.idata:0040615C                                         ; DATA XREF: ShowMessage(x,x)+1F8↑r
.idata:00406160 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00406160                 extrn __imp_memset:dword
.idata:00406160                                         ; DATA XREF: memset↑r
.idata:00406164
.idata:00406168 ;
.idata:00406168 ; Imports from ntdll.dll
.idata:00406168 ;
.idata:00406168 ; NTSTATUS (__stdcall *RtlVerifyVersionInfo)(PRTL_OSVERSIONINFOEXW VersionInfo, ULONG TypeMask, ULONGLONG ConditionMask)
.idata:00406168                 extrn RtlVerifyVersionInfo:dword
.idata:00406168                                         ; CODE XREF: sub_401DF5+80↑p
.idata:00406168                                         ; DATA XREF: sub_401DF5+80↑r ...
.idata:0040616C ; ULONGLONG (__stdcall *VerSetConditionMask)(ULONGLONG ConditionMask, DWORD TypeMask, BYTE Condition)
.idata:0040616C                 extrn VerSetConditionMask:dword
.idata:0040616C                                         ; CODE XREF: sub_401DF5+58↑p
.idata:0040616C                                         ; sub_401DF5+63↑p ...
.idata:00406170
.idata:00406170
.idata:00406174 ; ===========================================================================
.idata:00406174
.idata:00406174 ; Segment type: Pure data
.idata:00406174 ; Segment permissions: Read
.idata:00406174 _idata          segment para public 'DATA' use32
.idata:00406174                 assume cs:_idata
.idata:00406174                 ;org 406174h
.idata:00406174 ___guard_check_icall_fptr dd offset @_guard_check_icall_nop@4
.idata:00406174                                         ; DATA XREF: .text:00401050↑o
.idata:00406174                                         ; ParseAndSaveOptionValue(x,x,x)+540↑r ...
.idata:00406174                                         ; _guard_check_icall_nop(x)
.idata:00406178 __IMPORT_DESCRIPTOR_ADVAPI32 dd rva off_40622C ; Import Name Table
.idata:0040617C                 dd 0                    ; Time stamp
.idata:00406180                 dd 0                    ; Forwarder Chain
.idata:00406184                 dd rva aAdvapi32Dll     ; DLL Name
.idata:00406188                 dd rva IsTextUnicode    ; Import Address Table
.idata:0040618C __IMPORT_DESCRIPTOR_KERNEL32 dd rva off_406234 ; Import Name Table
.idata:00406190                 dd 0                    ; Time stamp
.idata:00406194                 dd 0                    ; Forwarder Chain
.idata:00406198                 dd rva aKernel32Dll     ; DLL Name
.idata:0040619C                 dd rva HeapSetInformation ; Import Address Table
.idata:004061A0 __IMPORT_DESCRIPTOR_msvcrt dd rva off_406324 ; Import Name Table
.idata:004061A4                 dd 0                    ; Time stamp
.idata:004061A8                 dd 0                    ; Forwarder Chain
.idata:004061AC                 dd rva aMsvcrtDll       ; DLL Name
.idata:004061B0                 dd rva __imp_memcpy     ; Import Address Table
.idata:004061B4 __IMPORT_DESCRIPTOR_ntdll dd rva off_406394 ; Import Name Table
.idata:004061B8                 dd 0                    ; Time stamp
.idata:004061BC                 dd 0                    ; Forwarder Chain
.idata:004061C0                 dd rva aNtdllDll        ; DLL Name
.idata:004061C4                 dd rva RtlVerifyVersionInfo ; Import Address Table
.idata:004061C8 __IMPORT_DESCRIPTOR_USER32 dd rva off_4062F0 ; Import Name Table
.idata:004061CC                 dd 0                    ; Time stamp
.idata:004061D0                 dd 0                    ; Forwarder Chain
.idata:004061D4                 dd rva aUser32Dll       ; DLL Name
.idata:004061D8                 dd rva EmptyClipboard   ; Import Address Table
.idata:004061DC __IMPORT_DESCRIPTOR_WS2_32 dd rva dword_40631C ; Import Name Table
.idata:004061E0                 dd 0                    ; Time stamp
.idata:004061E4                 dd 0                    ; Forwarder Chain
.idata:004061E8                 dd rva aWs232Dll        ; DLL Name
.idata:004061EC                 dd rva WSACleanup       ; Import Address Table
.idata:004061F0 __IMPORT_DESCRIPTOR_VERSION dd rva off_40630C ; Import Name Table
.idata:004061F4                 dd 0                    ; Time stamp
.idata:004061F8                 dd 0                    ; Forwarder Chain
.idata:004061FC                 dd rva aVersionDll      ; DLL Name
.idata:00406200                 dd rva VerQueryValueW   ; Import Address Table
.idata:00406204 __IMPORT_DESCRIPTOR_SHLWAPI dd rva off_4062DC ; Import Name Table
.idata:00406208                 dd 0                    ; Time stamp
.idata:0040620C                 dd 0                    ; Forwarder Chain
.idata:00406210                 dd rva aShlwapiDll      ; DLL Name
.idata:00406214                 dd rva StrChrIW         ; Import Address Table
.idata:00406218                 db    0
.idata:00406219                 db    0
.idata:0040621A                 db    0
.idata:0040621B                 db    0
.idata:0040621C                 db    0
.idata:0040621D                 db    0
.idata:0040621E                 db    0
.idata:0040621F                 db    0
.idata:00406220                 db    0
.idata:00406221                 db    0
.idata:00406222                 db    0
.idata:00406223                 db    0
.idata:00406224                 db    0
.idata:00406225                 db    0
.idata:00406226                 db    0
.idata:00406227                 db    0
.idata:00406228                 db    0
.idata:00406229                 db    0
.idata:0040622A                 db    0
.idata:0040622B                 db    0
.idata:0040622C ;
.idata:0040622C ; Import names for ADVAPI32.dll
.idata:0040622C ;
.idata:0040622C off_40622C      dd rva word_4063A0      ; DATA XREF: .idata:__IMPORT_DESCRIPTOR_ADVAPI32↑o
.idata:00406230                 dd 0
.idata:00406234 ;
.idata:00406234 ; Import names for KERNEL32.dll
.idata:00406234 ;
.idata:00406234 off_406234      dd rva word_4063BE      ; DATA XREF: .idata:__IMPORT_DESCRIPTOR_KERNEL32↑o
.idata:00406238                 dd rva word_4063D4
.idata:0040623C                 dd rva word_4063E4
.idata:00406240                 dd rva word_4063F4
.idata:00406244                 dd rva word_406402
.idata:00406248                 dd rva word_406418
.idata:0040624C                 dd rva word_40642E
.idata:00406250                 dd rva word_40643C
.idata:00406254                 dd rva word_40644A
.idata:00406258                 dd rva word_406458
.idata:0040625C                 dd rva word_406468
.idata:00406260                 dd rva word_406478
.idata:00406264                 dd rva word_4068AE
.idata:00406268                 dd rva word_4068A2
.idata:0040626C                 dd rva word_406894
.idata:00406270                 dd rva word_406888
.idata:00406274                 dd rva word_406878
.idata:00406278                 dd rva word_40686C
.idata:0040627C                 dd rva word_40685A
.idata:00406280                 dd rva word_40684C
.idata:00406284                 dd rva word_40683C
.idata:00406288                 dd rva word_40682A
.idata:0040628C                 dd rva word_406818
.idata:00406290                 dd rva word_406806
.idata:00406294                 dd rva word_4067FA
.idata:00406298                 dd rva word_4067E8
.idata:0040629C                 dd rva word_4067D2
.idata:004062A0                 dd rva word_4067C6
.idata:004062A4                 dd rva word_4067B4
.idata:004062A8                 dd rva word_40679E
.idata:004062AC                 dd rva word_40678A
.idata:004062B0                 dd rva word_406776
.idata:004062B4                 dd rva word_40675A
.idata:004062B8                 dd rva word_40674A
.idata:004062BC                 dd rva word_406730
.idata:004062C0                 dd rva word_4066B8
.idata:004062C4                 dd rva word_4066D6
.idata:004062C8                 dd rva word_40671A
.idata:004062CC                 dd rva word_406704
.idata:004062D0                 dd rva word_4066EA
.idata:004062D4                 dd rva word_4066B0
.idata:004062D8                 dd 0
.idata:004062DC ;
.idata:004062DC ; Import names for SHLWAPI.dll
.idata:004062DC ;
.idata:004062DC off_4062DC      dd rva word_406678      ; DATA XREF: .idata:__IMPORT_DESCRIPTOR_SHLWAPI↑o
.idata:004062E0                 dd rva word_406684
.idata:004062E4                 dd rva word_40668E
.idata:004062E8                 dd rva word_40669A
.idata:004062EC                 dd 0
.idata:004062F0 ;
.idata:004062F0 ; Import names for USER32.dll
.idata:004062F0 ;
.idata:004062F0 off_4062F0      dd rva word_4065BA      ; DATA XREF: .idata:__IMPORT_DESCRIPTOR_USER32↑o
.idata:004062F4                 dd rva word_4065CC
.idata:004062F8                 dd rva word_4065DE
.idata:004062FC                 dd rva word_4065F2
.idata:00406300                 dd rva word_406600
.idata:00406304                 dd rva word_4065AA
.idata:00406308                 dd 0
.idata:0040630C ;
.idata:0040630C ; Import names for VERSION.dll
.idata:0040630C ;
.idata:0040630C off_40630C      dd rva word_40665A      ; DATA XREF: .idata:__IMPORT_DESCRIPTOR_VERSION↑o
.idata:00406310                 dd rva word_406626
.idata:00406314                 dd rva word_406642
.idata:00406318                 dd 0
.idata:0040631C ;
.idata:0040631C ; Import names for WS2_32.dll
.idata:0040631C ;
.idata:0040631C dword_40631C    dd 80000074h            ; DATA XREF: .idata:__IMPORT_DESCRIPTOR_WS2_32↑o
.idata:00406320                 dd 0
.idata:00406324 ;
.idata:00406324 ; Import names for msvcrt.dll
.idata:00406324 ;
.idata:00406324 off_406324      dd rva word_406944      ; DATA XREF: .idata:__IMPORT_DESCRIPTOR_msvcrt↑o
.idata:00406328                 dd rva word_40693A
.idata:0040632C                 dd rva word_406558
.idata:00406330                 dd rva word_40654A
.idata:00406334                 dd rva word_40652A
.idata:00406338                 dd rva word_40651E
.idata:0040633C                 dd rva word_40650A
.idata:00406340                 dd rva word_4064FC
.idata:00406344                 dd rva word_4064F2
.idata:00406348                 dd rva word_4064EA
.idata:0040634C                 dd rva word_4064E2
.idata:00406350                 dd rva word_4064D0
.idata:00406354                 dd rva word_4064BE
.idata:00406358                 dd rva word_4064B0
.idata:0040635C                 dd rva word_4064A0
.idata:00406360                 dd rva word_406492
.idata:00406364                 dd rva word_4068C4
.idata:00406368                 dd rva word_4068D2
.idata:0040636C                 dd rva word_4068DE
.idata:00406370                 dd rva word_4068EC
.idata:00406374                 dd rva word_4068F6
.idata:00406378                 dd rva word_406900
.idata:0040637C                 dd rva word_40690A
.idata:00406380                 dd rva word_406914
.idata:00406384                 dd rva word_40691E
.idata:00406388                 dd rva word_406930
.idata:0040638C                 dd rva word_40694E
.idata:00406390                 dd 0
.idata:00406394 ;
.idata:00406394 ; Import names for ntdll.dll
.idata:00406394 ;
.idata:00406394 off_406394      dd rva word_406588      ; DATA XREF: .idata:__IMPORT_DESCRIPTOR_ntdll↑o
.idata:00406398                 dd rva word_406572
.idata:0040639C                 dd 0
.idata:004063A0 word_4063A0     dw 197h                 ; DATA XREF: .idata:off_40622C↑o
.idata:004063A2                 db 'IsTextUnicode',0
.idata:004063B0 aAdvapi32Dll    db 'ADVAPI32.dll',0     ; DATA XREF: .idata:00406184↑o
.idata:004063BD                 align 2
.idata:004063BE word_4063BE     dw 345h                 ; DATA XREF: .idata:off_406234↑o
.idata:004063C0                 db 'HeapSetInformation',0
.idata:004063D3                 align 4
.idata:004063D4 word_4063D4     dw 523h                 ; DATA XREF: .idata:00406238↑o
.idata:004063D6                 db 'SetLastError',0
.idata:004063E3                 align 4
.idata:004063E4 word_4063E4     dw 2CBh                 ; DATA XREF: .idata:0040623C↑o
.idata:004063E6                 db 'GetStdHandle',0
.idata:004063F3                 align 4
.idata:004063F4 word_4063F4     dw 248h                 ; DATA XREF: .idata:00406240↑o
.idata:004063F6                 db 'GetFileType',0
.idata:00406402 word_406402     dw 3E2h                 ; DATA XREF: .idata:00406244↑o
.idata:00406404                 db 'MultiByteToWideChar',0
.idata:00406418 word_406418     dw 1FCh                 ; DATA XREF: .idata:00406248↑o
.idata:0040641A                 db 'GetConsoleOutputCP',0
.idata:0040642D                 align 2
.idata:0040642E word_40642E     dw 325h                 ; DATA XREF: .idata:0040624C↑o
.idata:00406430                 db 'GlobalAlloc',0
.idata:0040643C word_40643C     dw 330h                 ; DATA XREF: .idata:00406250↑o
.idata:0040643E                 db 'GlobalLock',0
.idata:00406449                 align 2
.idata:0040644A word_40644A     dw 32Ch                 ; DATA XREF: .idata:00406254↑o
.idata:0040644C                 db 'GlobalFree',0
.idata:00406457                 align 4
.idata:00406458 word_406458     dw 337h                 ; DATA XREF: .idata:00406258↑o
.idata:0040645A                 db 'GlobalUnlock',0
.idata:00406467                 align 4
.idata:00406468 word_406468     dw 25Ah                 ; DATA XREF: .idata:0040625C↑o
.idata:0040646A                 db 'GetLastError',0
.idata:00406477                 align 4
.idata:00406478 word_406478     dw 465h                 ; DATA XREF: .idata:00406260↑o
.idata:0040647A                 db 'ReadFile',0
.idata:00406483                 align 4
.idata:00406484 aKernel32Dll    db 'KERNEL32.dll',0     ; DATA XREF: .idata:00406198↑o
.idata:00406491                 align 2
.idata:00406492 word_406492     dw 6Fh                  ; DATA XREF: .idata:00406360↑o
.idata:00406494                 db '_XcptFilter',0
.idata:004064A0 word_4064A0     dw 0C9h                 ; DATA XREF: .idata:0040635C↑o
.idata:004064A2                 db '__p__commode',0
.idata:004064AF                 align 10h
.idata:004064B0 word_4064B0     dw 111h                 ; DATA XREF: .idata:00406358↑o
.idata:004064B2                 db '_amsg_exit',0
.idata:004064BD                 align 2
.idata:004064BE word_4064BE     dw 0F1h                 ; DATA XREF: .idata:00406354↑o
.idata:004064C0                 db '__wgetmainargs',0
.idata:004064CF                 align 10h
.idata:004064D0 word_4064D0     dw 0E2h                 ; DATA XREF: .idata:00406350↑o
.idata:004064D2                 db '__set_app_type',0
.idata:004064E1                 align 2
.idata:004064E2 word_4064E2     dw 4AEh                 ; DATA XREF: .idata:0040634C↑o
.idata:004064E4                 db 'exit',0
.idata:004064E9                 align 2
.idata:004064EA word_4064EA     dw 173h                 ; DATA XREF: .idata:00406348↑o
.idata:004064EC                 db '_exit',0
.idata:004064F2 word_4064F2     dw 124h                 ; DATA XREF: .idata:00406344↑o
.idata:004064F4                 db '_cexit',0
.idata:004064FB                 align 4
.idata:004064FC word_4064FC     dw 0CEh                 ; DATA XREF: .idata:00406340↑o
.idata:004064FE                 db '__p__fmode',0
.idata:00406509                 align 2
.idata:0040650A word_40650A     dw 0E4h                 ; DATA XREF: .idata:0040633C↑o
.idata:0040650C                 db '__setusermatherr',0
.idata:0040651D                 align 2
.idata:0040651E word_40651E     dw 1E8h                 ; DATA XREF: .idata:00406338↑o
.idata:00406520                 db '_initterm',0
.idata:0040652A word_40652A     dw 35h                  ; DATA XREF: .idata:00406334↑o
.idata:0040652C                 db '?terminate@@YAXXZ',0
.idata:0040653E aMsvcrtDll      db 'msvcrt.dll',0       ; DATA XREF: .idata:004061AC↑o
.idata:00406549                 align 2
.idata:0040654A word_40654A     dw 137h                 ; DATA XREF: .idata:00406330↑o
.idata:0040654C                 db '_controlfp',0
.idata:00406557                 align 4
.idata:00406558 word_406558     dw 16Ah                 ; DATA XREF: .idata:0040632C↑o
.idata:0040655A                 db '_except_handler4_common',0
.idata:00406572 word_406572     dw 63Eh                 ; DATA XREF: .idata:00406398↑o
.idata:00406574                 db 'VerSetConditionMask',0
.idata:00406588 word_406588     dw 5B4h                 ; DATA XREF: .idata:off_406394↑o
.idata:0040658A                 db 'RtlVerifyVersionInfo',0
.idata:0040659F                 align 10h
.idata:004065A0 aNtdllDll       db 'ntdll.dll',0        ; DATA XREF: .idata:004061C0↑o
.idata:004065AA word_4065AA     dw 28Eh                 ; DATA XREF: .idata:00406304↑o
.idata:004065AC                 db 'OpenClipboard',0
.idata:004065BA word_4065BA     dw 0E4h                 ; DATA XREF: .idata:off_4062F0↑o
.idata:004065BC                 db 'EmptyClipboard',0
.idata:004065CB                 align 4
.idata:004065CC word_4065CC     dw 4Dh                  ; DATA XREF: .idata:004062F4↑o
.idata:004065CE                 db 'CloseClipboard',0
.idata:004065DD                 align 2
.idata:004065DE word_4065DE     dw 30Eh                 ; DATA XREF: .idata:004062F8↑o
.idata:004065E0                 db 'SetClipboardData',0
.idata:004065F1                 align 2
.idata:004065F2 word_4065F2     dw 24Eh                 ; DATA XREF: .idata:004062FC↑o
.idata:004065F4                 db 'LoadStringW',0
.idata:00406600 word_406600     dw 3Eh                  ; DATA XREF: .idata:00406300↑o
.idata:00406602                 db 'CharUpperW',0
.idata:0040660D                 align 2
.idata:0040660E aUser32Dll      db 'USER32.dll',0       ; DATA XREF: .idata:004061D4↑o
.idata:00406619                 align 2
.idata:0040661A aWs232Dll       db 'WS2_32.dll',0       ; DATA XREF: .idata:004061E8↑o
.idata:00406625                 align 2
.idata:00406626 word_406626     dw 6                    ; DATA XREF: .idata:00406310↑o
.idata:00406628                 db 'GetFileVersionInfoSizeExW',0
.idata:00406642 word_406642     dw 3                    ; DATA XREF: .idata:00406314↑o
.idata:00406644                 db 'GetFileVersionInfoExW',0
.idata:0040665A word_40665A     dw 10h                  ; DATA XREF: .idata:off_40630C↑o
.idata:0040665C                 db 'VerQueryValueW',0
.idata:0040666B                 align 4
.idata:0040666C aVersionDll     db 'VERSION.dll',0      ; DATA XREF: .idata:004061FC↑o
.idata:00406678 word_406678     dw 11Bh                 ; DATA XREF: .idata:off_4062DC↑o
.idata:0040667A                 db 'StrChrIW',0
.idata:00406683                 align 4
.idata:00406684 word_406684     dw 11Eh                 ; DATA XREF: .idata:004062E0↑o
.idata:00406686                 db 'StrChrW',0
.idata:0040668E word_40668E     dw 14Fh                 ; DATA XREF: .idata:004062E4↑o
.idata:00406690                 db 'StrStrIW',0
.idata:00406699                 align 2
.idata:0040669A word_40669A     dw 152h                 ; DATA XREF: .idata:004062E8↑o
.idata:0040669C                 db 'StrStrW',0
.idata:004066A4 aShlwapiDll     db 'SHLWAPI.dll',0      ; DATA XREF: .idata:00406210↑o
.idata:004066B0 word_4066B0     dw 56Dh                 ; DATA XREF: .idata:004062D4↑o
.idata:004066B2                 db 'Sleep',0
.idata:004066B8 word_4066B8     dw 55Eh                 ; DATA XREF: .idata:004062C0↑o
.idata:004066BA                 db 'SetUnhandledExceptionFilter',0
.idata:004066D6 word_4066D6     dw 26Eh                 ; DATA XREF: .idata:004062C4↑o
.idata:004066D8                 db 'GetModuleHandleA',0
.idata:004066E9                 align 2
.idata:004066EA word_4066EA     dw 440h                 ; DATA XREF: .idata:004062D0↑o
.idata:004066EC                 db 'QueryPerformanceCounter',0
.idata:00406704 word_406704     dw 214h                 ; DATA XREF: .idata:004062CC↑o
.idata:00406706                 db 'GetCurrentProcessId',0
.idata:0040671A word_40671A     dw 218h                 ; DATA XREF: .idata:004062C8↑o
.idata:0040671C                 db 'GetCurrentThreadId',0
.idata:0040672F                 align 10h
.idata:00406730 word_406730     dw 2E2h                 ; DATA XREF: .idata:004062BC↑o
.idata:00406732                 db 'GetSystemTimeAsFileTime',0
.idata:0040674A word_40674A     dw 300h                 ; DATA XREF: .idata:004062B8↑o
.idata:0040674C                 db 'GetTickCount',0
.idata:00406759                 align 2
.idata:0040675A word_40675A     dw 59Dh                 ; DATA XREF: .idata:004062B4↑o
.idata:0040675C                 db 'UnhandledExceptionFilter',0
.idata:00406775                 align 2
.idata:00406776 word_406776     dw 213h                 ; DATA XREF: .idata:004062B0↑o
.idata:00406778                 db 'GetCurrentProcess',0
.idata:0040678A word_40678A     dw 57Ch                 ; DATA XREF: .idata:004062AC↑o
.idata:0040678C                 db 'TerminateProcess',0
.idata:0040679D                 align 2
.idata:0040679E word_40679E     dw 554h                 ; DATA XREF: .idata:004062A8↑o
.idata:004067A0                 db 'SetThreadUILanguage',0
.idata:004067B4 word_4067B4     dw 1A3h                 ; DATA XREF: .idata:004062A4↑o
.idata:004067B6                 db 'FormatMessageW',0
.idata:004067C5                 align 2
.idata:004067C6 word_4067C6     dw 3C3h                 ; DATA XREF: .idata:004062A0↑o
.idata:004067C8                 db 'LocalFree',0
.idata:004067D2 word_4067D2     dw 5F1h                 ; DATA XREF: .idata:0040629C↑o
.idata:004067D4                 db 'WideCharToMultiByte',0
.idata:004067E8 word_4067E8     dw 1F8h                 ; DATA XREF: .idata:00406298↑o
.idata:004067EA                 db 'GetConsoleMode',0
.idata:004067F9                 align 2
.idata:004067FA word_4067FA     dw 62Fh                 ; DATA XREF: .idata:00406294↑o
.idata:004067FC                 db 'lstrlenW',0
.idata:00406805                 align 2
.idata:00406806 word_406806     dw 99h                  ; DATA XREF: .idata:00406290↑o
.idata:00406808                 db 'CompareStringW',0
.idata:00406817                 align 4
.idata:00406818 word_406818     dw 2F8h                 ; DATA XREF: .idata:0040628C↑o
.idata:0040681A                 db 'GetThreadLocale',0
.idata:0040682A word_40682A     dw 96h                  ; DATA XREF: .idata:00406288↑o
.idata:0040682C                 db 'CompareStringA',0
.idata:0040683B                 align 4
.idata:0040683C word_40683C     dw 604h                 ; DATA XREF: .idata:00406284↑o
.idata:0040683E                 db 'WriteConsoleW',0
.idata:0040684C word_40684C     dw 15Ah                 ; DATA XREF: .idata:00406280↑o
.idata:0040684E                 db 'ExitProcess',0
.idata:0040685A word_40685A     dw 2ADh                 ; DATA XREF: .idata:0040627C↑o
.idata:0040685C                 db 'GetProcessHeap',0
.idata:0040686B                 align 4
.idata:0040686C word_40686C     dw 341h                 ; DATA XREF: .idata:00406278↑o
.idata:0040686E                 db 'HeapFree',0
.idata:00406877                 align 4
.idata:00406878 word_406878     dw 349h                 ; DATA XREF: .idata:00406274↑o
.idata:0040687A                 db 'HeapValidate',0
.idata:00406887                 align 4
.idata:00406888 word_406888     dw 33Dh                 ; DATA XREF: .idata:00406270↑o
.idata:0040688A                 db 'HeapAlloc',0
.idata:00406894 word_406894     dw 344h                 ; DATA XREF: .idata:0040626C↑o
.idata:00406896                 db 'HeapReAlloc',0
.idata:004068A2 word_4068A2     dw 346h                 ; DATA XREF: .idata:00406268↑o
.idata:004068A4                 db 'HeapSize',0
.idata:004068AD                 align 2
.idata:004068AE word_4068AE     dw 26Dh                 ; DATA XREF: .idata:00406264↑o
.idata:004068B0                 db 'GetModuleFileNameW',0
.idata:004068C3                 align 4
.idata:004068C4 word_4068C4     dw 0A3h                 ; DATA XREF: .idata:00406364↑o
.idata:004068C6                 db '__iob_func',0
.idata:004068D1                 align 2
.idata:004068D2 word_4068D2     dw 2FCh                 ; DATA XREF: .idata:00406368↑o
.idata:004068D4                 db '_memicmp',0
.idata:004068DD                 align 2
.idata:004068DE word_4068DE     dw 3ECh                 ; DATA XREF: .idata:0040636C↑o
.idata:004068E0                 db '_vsnwprintf',0
.idata:004068EC word_4068EC     dw 167h                 ; DATA XREF: .idata:00406370↑o
.idata:004068EE                 db '_errno',0
.idata:004068F5                 align 2
.idata:004068F6 word_4068F6     dw 584h                 ; DATA XREF: .idata:00406374↑o
.idata:004068F8                 db 'wcstod',0
.idata:004068FF                 align 10h
.idata:00406900 word_406900     dw 587h                 ; DATA XREF: .idata:00406378↑o
.idata:00406902                 db 'wcstol',0
.idata:00406909                 align 2
.idata:0040690A word_40690A     dw 58Ah                 ; DATA XREF: .idata:0040637C↑o
.idata:0040690C                 db 'wcstoul',0
.idata:00406914 word_406914     dw 180h                 ; DATA XREF: .idata:00406380↑o
.idata:00406916                 db '_fileno',0
.idata:0040691E word_40691E     dw 1BDh                 ; DATA XREF: .idata:00406384↑o
.idata:00406920                 db '_get_osfhandle',0
.idata:0040692F                 align 10h
.idata:00406930 word_406930     dw 4BEh                 ; DATA XREF: .idata:00406388↑o
.idata:00406932                 db 'fprintf',0
.idata:0040693A word_40693A     dw 4B4h                 ; DATA XREF: .idata:00406328↑o
.idata:0040693C                 db 'fflush',0
.idata:00406943                 align 4
.idata:00406944 word_406944     dw 509h                 ; DATA XREF: .idata:off_406324↑o
.idata:00406946                 db 'memcpy',0
.idata:0040694D                 align 2
.idata:0040694E word_40694E     dw 50Dh                 ; DATA XREF: .idata:0040638C↑o
.idata:00406950                 db 'memset',0
.idata:00406957                 align 800h
.idata:00406957 _idata          ends
.idata:00406957
.idata:00406957
.idata:00406957                 end start
