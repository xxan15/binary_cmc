.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : A50EA0972A4E6B407E9CA0F8A3DC8930F7D68D983E6093D2D1CF6D3A7CB57504
.text:00401000 ; Input MD5    : 70E496CB31115BA2B117105596AB94B2
.text:00401000 ; Input CRC32  : 1E58F331
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/pe_benchmark/logman.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Hash        : 44B636F0
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00011C8C (  72844.)
.text:00401000 ; Section size in file          : 00011E00 (  73216.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000 ; PDB File Name : logman.pdb
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000 ; const struct _EXCEPTION_POINTERS ExceptionInfo
.text:00401000 ExceptionInfo   _EXCEPTION_POINTERS <offset dword_414BC0, offset dword_414C10>
.text:00401000                                         ; DATA XREF: ___report_gsfailure+102↓o
.text:00401000                                         ; ___report_rangecheckfailure+AE↓o
.text:00401008 off_401008      dd offset aBin          ; DATA XREF: SetCounterValues(IDataCollector *,int *)+D2↓r
.text:00401008                                         ; "bin"
.text:0040100C dword_40100C    dd 3                    ; DATA XREF: SetCounterValues(IDataCollector *,int *)+10B↓r
.text:0040100C                                         ; SetCounterValues(IDataCollector *,int *)+161↓r
.text:00401010 word_401010     dw 0                    ; DATA XREF: SetCounterValues(IDataCollector *,int *)+12C↓r
.text:00401012                 align 4
.text:00401014                 dd offset aBincirc      ; "bincirc"
.text:00401018                 dd 3, 0FFFFh
.text:00401020                 dd offset aCsv          ; "csv"
.text:00401024                 dd 2 dup(0)
.text:0040102C                 dd offset aTsv          ; "tsv"
.text:00401030                 dd 1, 0
.text:00401038                 dd offset aSql          ; "sql"
.text:0040103C                 dd 2, 0
.text:00401044 off_401044      dd offset aBsCyrlBa     ; DATA XREF: .text:0040107C↓o
.text:00401044                                         ; "bs-Cyrl-BA"
.text:00401048                 dd offset aBsBaCyrl     ; "bs-BA-Cyrl"
.text:0040104C                 dd offset aBsLatnBa     ; "bs-Latn-BA"
.text:00401050                 dd offset aBsBaLatn     ; "bs-BA-Latn"
.text:00401054                 dd offset dword_403A9C
.text:00401058                 dd offset dword_403A9C
.text:0040105C off_40105C      dd offset aZhHant       ; DATA XREF: .text:004010DC↓o
.text:0040105C                                         ; "zh-Hant"
.text:00401060                 dd offset aZhCht        ; "zh-CHT"
.text:00401064                 dd offset aZhHans       ; "zh-Hans"
.text:00401068                 dd offset aZhChs        ; "zh-CHS"
.text:0040106C                 dd offset dword_403A9C
.text:00401070                 dd offset dword_403A9C
.text:00401074                 align 8
.text:00401078 dword_401078    dd 0                    ; DATA XREF: sub_411A59+51↓r
.text:0040107C                 dd offset off_401044    ; "bs-Cyrl-BA"
.text:00401080                 dd 6 dup(0)
.text:00401098                 dd offset off_401108    ; "iu-Latn-CA"
.text:0040109C                 align 40h
.text:004010C0                 dd offset off_4010E0    ; "sr-Latn-CS"
.text:004010C4                 dd 6 dup(0)
.text:004010DC                 dd offset off_40105C    ; "zh-Hant"
.text:004010E0 off_4010E0      dd offset aSrLatnCs     ; DATA XREF: .text:004010C0↑o
.text:004010E0                                         ; "sr-Latn-CS"
.text:004010E4                 dd offset aSrSpLatn     ; "sr-SP-Latn"
.text:004010E8                 dd offset aSrCyrlCs     ; "sr-Cyrl-CS"
.text:004010EC                 dd offset aSrSpCyrl     ; "sr-SP-Cyrl"
.text:004010F0                 dd offset aSrLatnBa     ; "sr-Latn-BA"
.text:004010F4                 dd offset aSrBaLatn     ; "sr-BA-Latn"
.text:004010F8                 dd offset aSrCyrlBa     ; "sr-Cyrl-BA"
.text:004010FC                 dd offset aSrBaCyrl     ; "sr-BA-Cyrl"
.text:00401100                 dd offset dword_403A9C
.text:00401104                 dd offset dword_403A9C
.text:00401108 off_401108      dd offset aIuLatnCa     ; DATA XREF: .text:00401098↑o
.text:00401108                                         ; "iu-Latn-CA"
.text:0040110C                 dd offset aIuCaLatn     ; "iu-CA-Latn"
.text:00401110                 dd offset dword_403A9C
.text:00401114                 dd offset dword_403A9C
.text:00401118 ; wchar_t *const off_401118
.text:00401118 off_401118      dd offset aEn           ; DATA XREF: GetInstallLanguage+6D↓r
.text:00401118                                         ; "EN"
.text:0040111C word_40111C     dw 409h                 ; DATA XREF: GetInstallLanguage:loc_411A36↓r
.text:0040111E                 align 10h
.text:00401120                 dd offset aDe           ; "DE"
.text:00401124                 dd 407h
.text:00401128                 dd offset aJa           ; "JA"
.text:0040112C                 dd 411h
.text:00401130                 dd offset aKo           ; "KO"
.text:00401134                 dd 412h
.text:00401138                 dd offset aTw           ; "TW"
.text:0040113C                 dd 404h
.text:00401140                 dd offset aCn           ; "CN"
.text:00401144                 dd 804h
.text:00401148                 dd offset aFr           ; "FR"
.text:0040114C                 dd 40Ch
.text:00401150                 dd offset aEs           ; "ES"
.text:00401154                 dd 0C0Ah
.text:00401158                 dd offset aBr           ; "BR"
.text:0040115C                 dd 416h
.text:00401160                 dd offset aIt           ; "IT"
.text:00401164                 dd 410h
.text:00401168                 dd offset aNl           ; "NL"
.text:0040116C                 dd 413h
.text:00401170                 dd offset aSv_0         ; "SV"
.text:00401174                 dd 41Dh
.text:00401178                 dd offset aDa           ; "DA"
.text:0040117C                 dd 406h
.text:00401180                 dd offset aFi           ; "FI"
.text:00401184                 dd 40Bh
.text:00401188                 dd offset aHu           ; "HU"
.text:0040118C                 dd 40Eh
.text:00401190                 dd offset aNo           ; "NO"
.text:00401194                 dd 414h
.text:00401198                 dd offset aEl           ; "EL"
.text:0040119C                 dd 408h
.text:004011A0                 dd offset aPl           ; "PL"
.text:004011A4                 dd 415h
.text:004011A8                 dd offset aRu           ; "RU"
.text:004011AC                 dd 419h
.text:004011B0                 dd offset aCs           ; "CS"
.text:004011B4                 dd 405h
.text:004011B8                 dd offset aPt           ; "PT"
.text:004011BC                 dd 816h
.text:004011C0                 dd offset aTr           ; "TR"
.text:004011C4                 dd 41Fh
.text:004011C8                 dd offset aSk_0         ; "SK"
.text:004011CC                 dd 41Bh
.text:004011D0                 dd offset aSl_0         ; "SL"
.text:004011D4                 dd 424h
.text:004011D8                 dd offset aAr_0         ; "AR"
.text:004011DC                 dd 401h
.text:004011E0                 dd offset aHe           ; "HE"
.text:004011E4                 dd 40Dh
.text:004011E8                 dd offset aEu           ; "EU"
.text:004011EC                 dd 42Dh
.text:004011F0                 dd offset aIs           ; "IS"
.text:004011F4                 dd 40Fh
.text:004011F8 off_4011F8      dd offset aAr           ; DATA XREF: sub_412066+31↓o
.text:004011F8                                         ; sub_4120EB+30↓o
.text:004011F8                                         ; "ar"
.text:004011FC                 dd 1, 7Ch
.text:00401204                 dd offset aBg           ; "bg"
.text:00401208                 dd 2, 7Ch
.text:00401210                 dd offset aCa           ; "ca"
.text:00401214                 dd 3, 7Ch
.text:0040121C                 dd offset aZhHans       ; "zh-Hans"
.text:00401220                 dd 4, 199h
.text:00401228                 dd offset aCs_0         ; "cs"
.text:0040122C                 dd 5, 7Ch
.text:00401234                 dd offset aDa_0         ; "da"
.text:00401238                 dd 6, 7Ch
.text:00401240                 dd offset aDe_0         ; "de"
.text:00401244                 dd 7, 7Ch
.text:0040124C                 dd offset aEl_0         ; "el"
.text:00401250                 dd 8, 7Ch
.text:00401258                 dd offset aEn_0         ; "en"
.text:0040125C                 dd 9, 7Ch
.text:00401264                 dd offset aEs_0         ; "es"
.text:00401268                 dd 0Ah, 7Ch
.text:00401270                 dd offset aFi_0         ; "fi"
.text:00401274                 dd 0Bh, 7Ch
.text:0040127C                 dd offset aFr_0         ; "fr"
.text:00401280                 dd 0Ch, 7Ch
.text:00401288                 dd offset aHe_0         ; "he"
.text:0040128C                 dd 0Dh, 7Ch
.text:00401294                 dd offset aHu_0         ; "hu"
.text:00401298                 dd 0Eh, 7Ch
.text:004012A0                 dd offset aIs_0         ; "is"
.text:004012A4                 dd 0Fh, 7Ch
.text:004012AC                 dd offset aIt_0         ; "it"
.text:004012B0                 dd 10h, 7Ch
.text:004012B8                 dd offset aJa_0         ; "ja"
.text:004012BC                 dd 11h, 7Ch
.text:004012C4                 dd offset aKo_0         ; "ko"
.text:004012C8                 dd 12h, 7Ch
.text:004012D0                 dd offset aNl_0         ; "nl"
.text:004012D4                 dd 13h, 7Ch
.text:004012DC                 dd offset aNo_0         ; "no"
.text:004012E0                 dd 14h, 7Ch
.text:004012E8                 dd offset aPl_0         ; "pl"
.text:004012EC                 dd 15h, 7Ch
.text:004012F4                 dd offset aPt_0         ; "pt"
.text:004012F8                 dd 16h, 7Ch
.text:00401300                 dd offset aRm           ; "rm"
.text:00401304                 dd 17h, 7Ch
.text:0040130C                 dd offset aRo           ; "ro"
.text:00401310                 dd 18h, 7Ch
.text:00401318                 dd offset aRu_0         ; "ru"
.text:0040131C                 dd 19h, 7Ch
.text:00401324                 dd offset aHr           ; "hr"
.text:00401328                 dd 1Ah, 7Ch
.text:00401330                 dd offset aSk           ; "sk"
.text:00401334                 dd 1Bh, 7Ch
.text:0040133C                 dd offset aSq           ; "sq"
.text:00401340                 dd 1Ch, 7Ch
.text:00401348                 dd offset aSv           ; "sv"
.text:0040134C                 dd 1Dh, 7Ch
.text:00401354                 dd offset aTh           ; "th"
.text:00401358                 dd 1Eh, 7Ch
.text:00401360                 dd offset aTr_0         ; "tr"
.text:00401364                 dd 1Fh, 7Ch
.text:0040136C                 dd offset aUr           ; "ur"
.text:00401370                 dd 20h, 7Ch
.text:00401378                 dd offset aId           ; "id"
.text:0040137C                 dd 21h, 7Ch
.text:00401384                 dd offset aUk           ; "uk"
.text:00401388                 dd 22h, 7Ch
.text:00401390                 dd offset aBe           ; "be"
.text:00401394                 dd 23h, 7Ch
.text:0040139C                 dd offset aSl           ; "sl"
.text:004013A0                 dd 24h, 7Ch
.text:004013A8                 dd offset aEt           ; "et"
.text:004013AC                 dd 25h, 7Ch
.text:004013B4                 dd offset aLv           ; "lv"
.text:004013B8                 dd 26h, 7Ch
.text:004013C0                 dd offset aLt           ; "lt"
.text:004013C4                 dd 27h, 7Ch
.text:004013CC                 dd offset aTg           ; "tg"
.text:004013D0                 dd 28h, 7Ch
.text:004013D8                 dd offset aFa           ; "fa"
.text:004013DC                 dd 29h, 7Ch
.text:004013E4                 dd offset aVi           ; "vi"
.text:004013E8                 dd 2Ah, 7Ch
.text:004013F0                 dd offset aHy           ; "hy"
.text:004013F4                 dd 2Bh, 7Ch
.text:004013FC                 dd offset aAz           ; "az"
.text:00401400                 dd 2Ch, 7Ch
.text:00401408                 dd offset aEu_0         ; "eu"
.text:0040140C                 dd 2Dh, 7Ch
.text:00401414                 dd offset aHsb          ; "hsb"
.text:00401418                 dd 2Eh, 7Ch
.text:00401420                 dd offset aMk           ; "mk"
.text:00401424                 dd 2Fh, 7Ch
.text:0040142C                 dd offset aSt           ; "st"
.text:00401430                 dd 30h, 7Ch
.text:00401438                 dd offset aTs           ; "ts"
.text:0040143C                 dd 31h, 7Ch
.text:00401444                 dd offset aTn           ; "tn"
.text:00401448                 dd 32h, 7Ch
.text:00401450                 dd offset aVe           ; "ve"
.text:00401454                 dd 33h, 7Ch
.text:0040145C                 dd offset aXh           ; "xh"
.text:00401460                 dd 34h, 7Ch
.text:00401468                 dd offset aZu           ; "zu"
.text:0040146C                 dd 35h, 7Ch
.text:00401474                 dd offset aAf           ; "af"
.text:00401478                 dd 36h, 7Ch
.text:00401480                 dd offset aKa           ; "ka"
.text:00401484                 dd 37h, 7Ch
.text:0040148C                 dd offset aFo           ; "fo"
.text:00401490                 dd 38h, 7Ch
.text:00401498                 dd offset aHi           ; "hi"
.text:0040149C                 dd 39h, 7Ch
.text:004014A4                 dd offset aMt           ; "mt"
.text:004014A8                 dd 3Ah, 7Ch
.text:004014B0                 dd offset aSe           ; "se"
.text:004014B4                 dd 3Bh, 7Ch
.text:004014BC                 dd offset aGa           ; "ga"
.text:004014C0                 dd 3Ch, 7Ch
.text:004014C8                 dd offset aYi           ; "yi"
.text:004014CC                 dd 3Dh, 7Ch
.text:004014D4                 dd offset aMs           ; "ms"
.text:004014D8                 dd 3Eh, 7Ch
.text:004014E0                 dd offset aKk           ; "kk"
.text:004014E4                 dd 3Fh, 7Ch
.text:004014EC                 dd offset aKy           ; "ky"
.text:004014F0                 dd 40h, 7Ch
.text:004014F8                 dd offset aSw           ; "sw"
.text:004014FC                 dd 41h, 7Ch
.text:00401504                 dd offset aTk           ; "tk"
.text:00401508                 dd 42h, 7Ch
.text:00401510                 dd offset aUz           ; "uz"
.text:00401514                 dd 43h, 7Ch
.text:0040151C                 dd offset aTt           ; "tt"
.text:00401520                 dd 44h, 7Ch
.text:00401528                 dd offset aBn           ; "bn"
.text:0040152C                 dd 45h, 7Ch
.text:00401534                 dd offset aPa           ; "pa"
.text:00401538                 dd 46h, 7Ch
.text:00401540                 dd offset aGu           ; "gu"
.text:00401544                 dd 47h, 7Ch
.text:0040154C                 dd offset aOr           ; "or"
.text:00401550                 dd 48h, 7Ch
.text:00401558                 dd offset aTa           ; "ta"
.text:0040155C                 dd 49h, 7Ch
.text:00401564                 dd offset aTe           ; "te"
.text:00401568                 dd 4Ah, 7Ch
.text:00401570                 dd offset aKn           ; "kn"
.text:00401574                 dd 4Bh, 7Ch
.text:0040157C                 dd offset aMl           ; "ml"
.text:00401580                 dd 4Ch, 7Ch
.text:00401588                 dd offset aAs           ; "as"
.text:0040158C                 dd 4Dh, 7Ch
.text:00401594                 dd offset aMr           ; "mr"
.text:00401598                 dd 4Eh, 7Ch
.text:004015A0                 dd offset aSa           ; "sa"
.text:004015A4                 dd 4Fh, 7Ch
.text:004015AC                 dd offset aMn           ; "mn"
.text:004015B0                 dd 50h, 7Ch
.text:004015B8                 dd offset aBo           ; "bo"
.text:004015BC                 dd 51h, 7Ch
.text:004015C4                 dd offset aCy           ; "cy"
.text:004015C8                 dd 52h, 7Ch
.text:004015D0                 dd offset aKm           ; "km"
.text:004015D4                 dd 53h, 7Ch
.text:004015DC                 dd offset aLo           ; "lo"
.text:004015E0                 dd 54h, 7Ch
.text:004015E8                 dd offset aMy           ; "my"
.text:004015EC                 dd 55h, 7Ch
.text:004015F4                 dd offset aGl           ; "gl"
.text:004015F8                 dd 56h, 7Ch
.text:00401600                 dd offset aKok          ; "kok"
.text:00401604                 dd 57h, 7Ch
.text:0040160C                 dd offset aMni          ; "mni"
.text:00401610                 dd 58h, 7Ch
.text:00401618                 dd offset aSd           ; "sd"
.text:0040161C                 dd 59h, 7Ch
.text:00401624                 dd offset aSyr          ; "syr"
.text:00401628                 dd 5Ah, 7Ch
.text:00401630                 dd offset aSi           ; "si"
.text:00401634                 dd 5Bh, 7Ch
.text:0040163C                 dd offset aChr          ; "chr"
.text:00401640                 dd 5Ch, 7Ch
.text:00401648                 dd offset aIu           ; "iu"
.text:0040164C                 dd 5Dh, 7Ch
.text:00401654                 dd offset aAm           ; "am"
.text:00401658                 dd 5Eh, 7Ch
.text:00401660                 dd offset aTzm          ; "tzm"
.text:00401664                 dd 5Fh, 7Ch
.text:0040166C                 dd offset aKs           ; "ks"
.text:00401670                 dd 60h, 7Ch
.text:00401678                 dd offset aNe           ; "ne"
.text:0040167C                 dd 61h, 7Ch
.text:00401684                 dd offset aFy           ; "fy"
.text:00401688                 dd 62h, 7Ch
.text:00401690                 dd offset aPs           ; "ps"
.text:00401694                 dd 63h, 7Ch
.text:0040169C                 dd offset aFil          ; "fil"
.text:004016A0                 dd 64h, 7Ch
.text:004016A8                 dd offset aDv           ; "dv"
.text:004016AC                 dd 65h, 7Ch
.text:004016B4                 dd offset aBin          ; "bin"
.text:004016B8                 dd 66h, 7Ch
.text:004016C0                 dd offset aFf           ; "ff"
.text:004016C4                 dd 67h, 7Ch
.text:004016CC                 dd offset aHa           ; "ha"
.text:004016D0                 dd 68h, 7Ch
.text:004016D8                 dd offset aIbb          ; "ibb"
.text:004016DC                 dd 69h, 7Ch
.text:004016E4                 dd offset aYo           ; "yo"
.text:004016E8                 dd 6Ah, 7Ch
.text:004016F0                 dd offset aQuz          ; "quz"
.text:004016F4                 dd 6Bh, 7Ch
.text:004016FC                 dd offset aNso          ; "nso"
.text:00401700                 dd 6Ch, 7Ch
.text:00401708                 dd offset aBa           ; "ba"
.text:0040170C                 dd 6Dh, 7Ch
.text:00401714                 dd offset aLb           ; "lb"
.text:00401718                 dd 6Eh, 7Ch
.text:00401720                 dd offset aKl           ; "kl"
.text:00401724                 dd 6Fh, 7Ch
.text:0040172C                 dd offset aIg           ; "ig"
.text:00401730                 dd 70h, 7Ch
.text:00401738                 dd offset aKr           ; "kr"
.text:0040173C                 dd 71h, 7Ch
.text:00401744                 dd offset aOm           ; "om"
.text:00401748                 dd 72h, 7Ch
.text:00401750                 dd offset aTi           ; "ti"
.text:00401754                 dd 73h, 7Ch
.text:0040175C                 dd offset aGn           ; "gn"
.text:00401760                 dd 74h, 7Ch
.text:00401768                 dd offset aHaw          ; "haw"
.text:0040176C                 dd 75h, 7Ch
.text:00401774                 dd offset aLa           ; "la"
.text:00401778                 dd 76h, 7Ch
.text:00401780                 dd offset aSo           ; "so"
.text:00401784                 dd 77h, 7Ch
.text:0040178C                 dd offset aIi           ; "ii"
.text:00401790                 dd 78h, 7Ch
.text:00401798                 dd offset aPap          ; "pap"
.text:0040179C                 dd 79h, 7Ch
.text:004017A4                 dd offset aArn          ; "arn"
.text:004017A8                 dd 7Ah, 7Ch
.text:004017B0                 dd offset aMoh          ; "moh"
.text:004017B4                 dd 2 dup(7Ch)
.text:004017BC                 dd offset aBr_0         ; "br"
.text:004017C0                 dd 7Eh, 7Ch
.text:004017C8                 dd offset ppszDestEnd
.text:004017CC                 dd 7Fh, 7Ch
.text:004017D4                 dd offset aUg           ; "ug"
.text:004017D8                 dd 80h, 7Ch
.text:004017E0                 dd offset aMi           ; "mi"
.text:004017E4                 dd 81h, 7Ch
.text:004017EC                 dd offset aOc           ; "oc"
.text:004017F0                 dd 82h, 7Ch
.text:004017F8                 dd offset aCo           ; "co"
.text:004017FC                 dd 83h, 7Ch
.text:00401804                 dd offset aGsw          ; "gsw"
.text:00401808                 dd 84h, 7Ch
.text:00401810                 dd offset aSah          ; "sah"
.text:00401814                 dd 85h, 7Ch
.text:0040181C                 dd offset aQuc          ; "quc"
.text:00401820                 dd 86h, 7Ch
.text:00401828                 dd offset aRw           ; "rw"
.text:0040182C                 dd 87h, 7Ch
.text:00401834                 dd offset aWo           ; "wo"
.text:00401838                 dd 88h, 7Ch
.text:00401840                 dd offset aPrs          ; "prs"
.text:00401844                 dd 8Ch, 7Ch
.text:0040184C                 dd offset aGd           ; "gd"
.text:00401850                 dd 91h, 7Ch
.text:00401858                 dd offset aKu           ; "ku"
.text:0040185C                 dd 92h, 7Ch
.text:00401864                 dd offset aArSa         ; "ar-SA"
.text:00401868                 dd 401h, 0
.text:00401870                 dd offset aBgBg         ; "bg-BG"
.text:00401874                 dd 402h, 1
.text:0040187C                 dd offset aCaEs         ; "ca-ES"
.text:00401880                 dd 403h, 2
.text:00401888                 dd offset aZhTw         ; "zh-TW"
.text:0040188C                 dd 404h, 1A2h
.text:00401894                 dd offset aCsCz         ; "cs-CZ"
.text:00401898                 dd 405h, 4
.text:004018A0                 dd offset aDaDk         ; "da-DK"
.text:004018A4                 dd 406h, 5
.text:004018AC                 dd offset aDeDe         ; "de-DE"
.text:004018B0                 dd 407h, 6
.text:004018B8                 dd offset aElGr         ; "el-GR"
.text:004018BC                 dd 408h, 7
.text:004018C4                 dd offset aEnUs         ; "en-US"
.text:004018C8                 dd 409h, 8
.text:004018D0                 dd offset aEsEsTradnl   ; "es-ES_tradnl"
.text:004018D4                 dd 40Ah, 9
.text:004018DC                 dd offset aFiFi         ; "fi-FI"
.text:004018E0                 dd 40Bh, 0Ah
.text:004018E8                 dd offset aFrFr         ; "fr-FR"
.text:004018EC                 dd 40Ch, 0Bh
.text:004018F4                 dd offset aHeIl         ; "he-IL"
.text:004018F8                 dd 40Dh, 0Ch
.text:00401900                 dd offset aHuHu         ; "hu-HU"
.text:00401904                 dd 40Eh, 0Dh
.text:0040190C                 dd offset aIsIs         ; "is-IS"
.text:00401910                 dd 40Fh, 0Eh
.text:00401918                 dd offset aItIt         ; "it-IT"
.text:0040191C                 dd 410h, 0Fh
.text:00401924                 dd offset aJaJp         ; "ja-JP"
.text:00401928                 dd 411h, 10h
.text:00401930                 dd offset aKoKr         ; "ko-KR"
.text:00401934                 dd 412h, 11h
.text:0040193C                 dd offset aNlNl         ; "nl-NL"
.text:00401940                 dd 413h, 12h
.text:00401948                 dd offset aNbNo         ; "nb-NO"
.text:0040194C                 dd 414h, 1A3h
.text:00401954                 dd offset aPlPl         ; "pl-PL"
.text:00401958                 dd 415h, 14h
.text:00401960                 dd offset aPtBr         ; "pt-BR"
.text:00401964                 dd 416h, 15h
.text:0040196C                 dd offset aRmCh         ; "rm-CH"
.text:00401970                 dd 417h, 16h
.text:00401978                 dd offset aRoRo         ; "ro-RO"
.text:0040197C                 dd 418h, 17h
.text:00401984                 dd offset aRuRu         ; "ru-RU"
.text:00401988                 dd 419h, 18h
.text:00401990                 dd offset aHrHr         ; "hr-HR"
.text:00401994                 dd 41Ah, 19h
.text:0040199C                 dd offset aSkSk         ; "sk-SK"
.text:004019A0                 dd 41Bh, 1Ah
.text:004019A8                 dd offset aSqAl         ; "sq-AL"
.text:004019AC                 dd 41Ch, 1Bh
.text:004019B4                 dd offset aSvSe         ; "sv-SE"
.text:004019B8                 dd 41Dh, 1Ch
.text:004019C0                 dd offset aThTh         ; "th-TH"
.text:004019C4                 dd 41Eh, 1Dh
.text:004019CC                 dd offset aTrTr         ; "tr-TR"
.text:004019D0                 dd 41Fh, 1Eh
.text:004019D8                 dd offset aUrPk         ; "ur-PK"
.text:004019DC                 dd 420h, 1Fh
.text:004019E4                 dd offset aIdId         ; "id-ID"
.text:004019E8                 dd 421h, 20h
.text:004019F0                 dd offset aUkUa         ; "uk-UA"
.text:004019F4                 dd 422h, 21h
.text:004019FC                 dd offset aBeBy         ; "be-BY"
.text:00401A00                 dd 423h, 22h
.text:00401A08                 dd offset aSlSi         ; "sl-SI"
.text:00401A0C                 dd 424h, 23h
.text:00401A14                 dd offset aEtEe         ; "et-EE"
.text:00401A18                 dd 425h, 24h
.text:00401A20                 dd offset aLvLv         ; "lv-LV"
.text:00401A24                 dd 426h, 25h
.text:00401A2C                 dd offset aLtLt         ; "lt-LT"
.text:00401A30                 dd 427h, 26h
.text:00401A38                 dd offset aTgCyrlTj     ; "tg-Cyrl-TJ"
.text:00401A3C                 dd 428h, 1A5h
.text:00401A44                 dd offset aFaIr         ; "fa-IR"
.text:00401A48                 dd 429h, 28h
.text:00401A50                 dd offset aViVn         ; "vi-VN"
.text:00401A54                 dd 42Ah, 29h
.text:00401A5C                 dd offset aHyAm         ; "hy-AM"
.text:00401A60                 dd 42Bh, 2Ah
.text:00401A68                 dd offset aAzLatnAz     ; "az-Latn-AZ"
.text:00401A6C                 dd 42Ch, 19Ch
.text:00401A74                 dd offset aEuEs         ; "eu-ES"
.text:00401A78                 dd 42Dh, 2Ch
.text:00401A80                 dd offset aHsbDe        ; "hsb-DE"
.text:00401A84                 dd 42Eh, 2Dh
.text:00401A8C                 dd offset aMkMk         ; "mk-MK"
.text:00401A90                 dd 42Fh, 2Eh
.text:00401A98                 dd offset aStZa         ; "st-ZA"
.text:00401A9C                 dd 430h, 2Fh
.text:00401AA4                 dd offset aTsZa         ; "ts-ZA"
.text:00401AA8                 dd 431h, 30h
.text:00401AB0                 dd offset aTnZa         ; "tn-ZA"
.text:00401AB4                 dd 432h, 31h
.text:00401ABC                 dd offset aVeZa         ; "ve-ZA"
.text:00401AC0                 dd 433h, 32h
.text:00401AC8                 dd offset aXhZa         ; "xh-ZA"
.text:00401ACC                 dd 434h, 33h
.text:00401AD4                 dd offset aZuZa         ; "zu-ZA"
.text:00401AD8                 dd 435h, 34h
.text:00401AE0                 dd offset aAfZa         ; "af-ZA"
.text:00401AE4                 dd 436h, 35h
.text:00401AEC                 dd offset aKaGe         ; "ka-GE"
.text:00401AF0                 dd 437h, 36h
.text:00401AF8                 dd offset aFoFo         ; "fo-FO"
.text:00401AFC                 dd 438h, 37h
.text:00401B04                 dd offset aHiIn         ; "hi-IN"
.text:00401B08                 dd 439h, 38h
.text:00401B10                 dd offset aMtMt         ; "mt-MT"
.text:00401B14                 dd 43Ah, 39h
.text:00401B1C                 dd offset aSeNo         ; "se-NO"
.text:00401B20                 dd 43Bh, 3Ah
.text:00401B28                 dd offset aYi001        ; "yi-001"
.text:00401B2C                 dd 43Dh, 3Ch
.text:00401B34                 dd offset aMsMy         ; "ms-MY"
.text:00401B38                 dd 43Eh, 3Dh
.text:00401B40                 dd offset aKkKz         ; "kk-KZ"
.text:00401B44                 dd 43Fh, 3Eh
.text:00401B4C                 dd offset aKyKg         ; "ky-KG"
.text:00401B50                 dd 440h, 3Fh
.text:00401B58                 dd offset aSwKe         ; "sw-KE"
.text:00401B5C                 dd 441h, 40h
.text:00401B64                 dd offset aTkTm         ; "tk-TM"
.text:00401B68                 dd 442h, 41h
.text:00401B70                 dd offset aUzLatnUz     ; "uz-Latn-UZ"
.text:00401B74                 dd 443h, 1A8h
.text:00401B7C                 dd offset aTtRu         ; "tt-RU"
.text:00401B80                 dd 444h, 43h
.text:00401B88                 dd offset aBnIn         ; "bn-IN"
.text:00401B8C                 dd 445h, 44h
.text:00401B94                 dd offset aPaIn         ; "pa-IN"
.text:00401B98                 dd 446h, 45h
.text:00401BA0                 dd offset aGuIn         ; "gu-IN"
.text:00401BA4                 dd 447h, 46h
.text:00401BAC                 dd offset aOrIn         ; "or-IN"
.text:00401BB0                 dd 448h, 47h
.text:00401BB8                 dd offset aTaIn         ; "ta-IN"
.text:00401BBC                 dd 449h, 48h
.text:00401BC4                 dd offset aTeIn         ; "te-IN"
.text:00401BC8                 dd 44Ah, 49h
.text:00401BD0                 dd offset aKnIn         ; "kn-IN"
.text:00401BD4                 dd 44Bh, 4Ah
.text:00401BDC                 dd offset aMlIn         ; "ml-IN"
.text:00401BE0                 dd 44Ch, 4Bh
.text:00401BE8                 dd offset aAsIn         ; "as-IN"
.text:00401BEC                 dd 44Dh, 4Ch
.text:00401BF4                 dd offset aMrIn         ; "mr-IN"
.text:00401BF8                 dd 44Eh, 4Dh
.text:00401C00                 dd offset aSaIn         ; "sa-IN"
.text:00401C04                 dd 44Fh, 4Eh
.text:00401C0C                 dd offset aMnMn         ; "mn-MN"
.text:00401C10                 dd 450h, 19Fh
.text:00401C18                 dd offset aBoCn         ; "bo-CN"
.text:00401C1C                 dd 451h, 50h
.text:00401C24                 dd offset aCyGb         ; "cy-GB"
.text:00401C28                 dd 452h, 51h
.text:00401C30                 dd offset aKmKh         ; "km-KH"
.text:00401C34                 dd 453h, 52h
.text:00401C3C                 dd offset aLoLa         ; "lo-LA"
.text:00401C40                 dd 454h, 53h
.text:00401C48                 dd offset aMyMm         ; "my-MM"
.text:00401C4C                 dd 455h, 54h
.text:00401C54                 dd offset aGlEs         ; "gl-ES"
.text:00401C58                 dd 456h, 55h
.text:00401C60                 dd offset aKokIn        ; "kok-IN"
.text:00401C64                 dd 457h, 56h
.text:00401C6C                 dd offset aMniIn        ; "mni-IN"
.text:00401C70                 dd 458h, 57h
.text:00401C78                 dd offset aSdDevaIn     ; "sd-Deva-IN"
.text:00401C7C                 dd 459h, 0
.text:00401C84                 dd offset aSyrSy        ; "syr-SY"
.text:00401C88                 dd 45Ah, 59h
.text:00401C90                 dd offset aSiLk         ; "si-LK"
.text:00401C94                 dd 45Bh, 5Ah
.text:00401C9C                 dd offset aChrCherUs    ; "chr-Cher-US"
.text:00401CA0                 dd 45Ch, 1ACh
.text:00401CA8                 dd offset aIuCansCa     ; "iu-Cans-CA"
.text:00401CAC                 dd 45Dh, 1A0h
.text:00401CB4                 dd offset aAmEt         ; "am-ET"
.text:00401CB8                 dd 45Eh, 5Dh
.text:00401CC0                 dd offset aTzmArabMa    ; "tzm-Arab-MA"
.text:00401CC4                 dd 45Fh, 0
.text:00401CCC                 dd offset aKsArab       ; "ks-Arab"
.text:00401CD0                 dd 460h, 5Fh
.text:00401CD8                 dd offset aNeNp         ; "ne-NP"
.text:00401CDC                 dd 461h, 60h
.text:00401CE4                 dd offset aFyNl         ; "fy-NL"
.text:00401CE8                 dd 462h, 61h
.text:00401CF0                 dd offset aPsAf         ; "ps-AF"
.text:00401CF4                 dd 463h, 62h
.text:00401CFC                 dd offset aFilPh        ; "fil-PH"
.text:00401D00                 dd 464h, 63h
.text:00401D08                 dd offset aDvMv         ; "dv-MV"
.text:00401D0C                 dd 465h, 64h
.text:00401D14                 dd offset aBinNg        ; "bin-NG"
.text:00401D18                 dd 466h, 65h
.text:00401D20                 dd offset aFfNg         ; "ff-NG"
.text:00401D24                 dd 467h, 66h
.text:00401D2C                 dd offset aHaLatnNg     ; "ha-Latn-NG"
.text:00401D30                 dd 468h, 1B0h
.text:00401D38                 dd offset aIbbNg        ; "ibb-NG"
.text:00401D3C                 dd 469h, 68h
.text:00401D44                 dd offset aYoNg         ; "yo-NG"
.text:00401D48                 dd 46Ah, 69h
.text:00401D50                 dd offset aQuzBo        ; "quz-BO"
.text:00401D54                 dd 46Bh, 6Ah
.text:00401D5C                 dd offset aNsoZa        ; "nso-ZA"
.text:00401D60                 dd 46Ch, 6Bh
.text:00401D68                 dd offset aBaRu         ; "ba-RU"
.text:00401D6C                 dd 46Dh, 6Ch
.text:00401D74                 dd offset aLbLu         ; "lb-LU"
.text:00401D78                 dd 46Eh, 6Dh
.text:00401D80                 dd offset aKlGl         ; "kl-GL"
.text:00401D84                 dd 46Fh, 6Eh
.text:00401D8C                 dd offset aIgNg         ; "ig-NG"
.text:00401D90                 dd 470h, 6Fh
.text:00401D98                 dd offset aKrNg         ; "kr-NG"
.text:00401D9C                 dd 471h, 70h
.text:00401DA4                 dd offset aOmEt         ; "om-ET"
.text:00401DA8                 dd 472h, 71h
.text:00401DB0                 dd offset aTiEt         ; "ti-ET"
.text:00401DB4                 dd 473h, 72h
.text:00401DBC                 dd offset aGnPy         ; "gn-PY"
.text:00401DC0                 dd 474h, 73h
.text:00401DC8                 dd offset aHawUs        ; "haw-US"
.text:00401DCC                 dd 475h, 74h
.text:00401DD4                 dd offset aLa001        ; "la-001"
.text:00401DD8                 dd 476h, 75h
.text:00401DE0                 dd offset aSoSo         ; "so-SO"
.text:00401DE4                 dd 477h, 76h
.text:00401DEC                 dd offset aIiCn         ; "ii-CN"
.text:00401DF0                 dd 478h, 77h
.text:00401DF8                 dd offset aPap029       ; "pap-029"
.text:00401DFC                 dd 479h, 78h
.text:00401E04                 dd offset aArnCl        ; "arn-CL"
.text:00401E08                 dd 47Ah, 79h
.text:00401E10                 dd offset aMohCa        ; "moh-CA"
.text:00401E14                 dd 47Ch, 7Ah
.text:00401E1C                 dd offset aBrFr         ; "br-FR"
.text:00401E20                 dd 47Eh, 7Bh
.text:00401E28                 dd offset aUgCn         ; "ug-CN"
.text:00401E2C                 dd 480h, 7Dh
.text:00401E34                 dd offset aMiNz         ; "mi-NZ"
.text:00401E38                 dd 481h, 7Eh
.text:00401E40                 dd offset aOcFr         ; "oc-FR"
.text:00401E44                 dd 482h, 7Fh
.text:00401E4C                 dd offset aCoFr         ; "co-FR"
.text:00401E50                 dd 483h, 80h
.text:00401E58                 dd offset aGswFr        ; "gsw-FR"
.text:00401E5C                 dd 484h, 81h
.text:00401E64                 dd offset aSahRu        ; "sah-RU"
.text:00401E68                 dd 485h, 82h
.text:00401E70                 dd offset aQucLatnGt    ; "quc-Latn-GT"
.text:00401E74                 dd 486h, 1B1h
.text:00401E7C                 dd offset aRwRw         ; "rw-RW"
.text:00401E80                 dd 487h, 84h
.text:00401E88                 dd offset aWoSn         ; "wo-SN"
.text:00401E8C                 dd 488h, 85h
.text:00401E94                 dd offset aPrsAf        ; "prs-AF"
.text:00401E98                 dd 48Ch, 86h
.text:00401EA0                 dd offset aGdGb         ; "gd-GB"
.text:00401EA4                 dd 491h, 87h
.text:00401EAC                 dd offset aKuArabIq     ; "ku-Arab-IQ"
.text:00401EB0                 dd 492h, 1B2h
.text:00401EB8                 dd offset aQpsPloc      ; "qps-ploc"
.text:00401EBC                 dd 501h, 8
.text:00401EC4                 dd offset aQpsPloca     ; "qps-ploca"
.text:00401EC8                 dd 5FEh, 10h
.text:00401ED0                 dd offset aArIq         ; "ar-IQ"
.text:00401ED4                 dd 801h, 0
.text:00401EDC                 dd offset aCaEsValencia ; "ca-ES-valencia"
.text:00401EE0                 dd 803h, 8Bh
.text:00401EE8                 dd offset aZhCn         ; "zh-CN"
.text:00401EEC                 dd 804h, 3
.text:00401EF4                 dd offset aDeCh         ; "de-CH"
.text:00401EF8                 dd 807h, 6
.text:00401F00                 dd offset aEnGb         ; "en-GB"
.text:00401F04                 dd 809h, 8
.text:00401F0C                 dd offset aEsMx         ; "es-MX"
.text:00401F10                 dd 80Ah, 9
.text:00401F18                 dd offset aFrBe         ; "fr-BE"
.text:00401F1C                 dd 80Ch, 0Bh
.text:00401F24                 dd offset aItCh         ; "it-CH"
.text:00401F28                 dd 810h, 0Fh
.text:00401F30                 dd offset aNlBe         ; "nl-BE"
.text:00401F34                 dd 813h, 12h
.text:00401F3C                 dd offset aNnNo         ; "nn-NO"
.text:00401F40                 dd 814h, 19Ah
.text:00401F48                 dd offset aPtPt         ; "pt-PT"
.text:00401F4C                 dd 816h, 15h
.text:00401F54                 dd offset aRoMd         ; "ro-MD"
.text:00401F58                 dd 818h, 17h
.text:00401F60                 dd offset aRuMd         ; "ru-MD"
.text:00401F64                 dd 819h, 18h
.text:00401F6C                 dd offset aSrLatnCs     ; "sr-Latn-CS"
.text:00401F70                 dd 81Ah, 195h
.text:00401F78                 dd offset aSvFi         ; "sv-FI"
.text:00401F7C                 dd 81Dh, 1Ch
.text:00401F84                 dd offset aUrIn         ; "ur-IN"
.text:00401F88                 dd 820h, 1Fh
.text:00401F90                 dd offset aAzCyrlAz     ; "az-Cyrl-AZ"
.text:00401F94                 dd 82Ch, 197h
.text:00401F9C                 dd offset aDsbDe        ; "dsb-DE"
.text:00401FA0                 dd 82Eh, 1A6h
.text:00401FA8                 dd offset aTnBw         ; "tn-BW"
.text:00401FAC                 dd 832h, 31h
.text:00401FB4                 dd offset aSeSe         ; "se-SE"
.text:00401FB8                 dd 83Bh, 3Ah
.text:00401FC0                 dd offset aGaIe         ; "ga-IE"
.text:00401FC4                 dd 83Ch, 3Bh
.text:00401FCC                 dd offset aMsBn         ; "ms-BN"
.text:00401FD0                 dd 83Eh, 3Dh
.text:00401FD8                 dd offset aUzCyrlUz     ; "uz-Cyrl-UZ"
.text:00401FDC                 dd 843h, 19Eh
.text:00401FE4                 dd offset aBnBd         ; "bn-BD"
.text:00401FE8                 dd 845h, 44h
.text:00401FF0                 dd offset aPaArabPk     ; "pa-Arab-PK"
.text:00401FF4                 dd 846h, 1A9h
.text:00401FFC                 dd offset aTaLk         ; "ta-LK"
.text:00402000                 dd 849h, 48h
.text:00402008                 dd offset aMnMongCn     ; "mn-Mong-CN"
.text:0040200C                 dd 850h, 1AAh
.text:00402014                 dd offset aSdArabPk     ; "sd-Arab-PK"
.text:00402018                 dd 859h, 1ABh
.text:00402020                 dd offset aIuLatnCa     ; "iu-Latn-CA"
.text:00402024                 dd 85Dh, 1ADh
.text:0040202C                 dd offset aTzmLatnDz    ; "tzm-Latn-DZ"
.text:00402030                 dd 85Fh, 1AEh
.text:00402038                 dd offset aKsDevaIn     ; "ks-Deva-IN"
.text:0040203C                 dd 860h, 0
.text:00402044                 dd offset aNeIn         ; "ne-IN"
.text:00402048                 dd 861h, 60h
.text:00402050                 dd offset aFfLatnSn     ; "ff-Latn-SN"
.text:00402054                 dd 867h, 1AFh
.text:0040205C                 dd offset aQuzEc        ; "quz-EC"
.text:00402060                 dd 86Bh, 6Ah
.text:00402068                 dd offset aTiEr         ; "ti-ER"
.text:0040206C                 dd 873h, 72h
.text:00402074                 dd offset aQpsLatnXSh   ; "qps-Latn-x-sh"
.text:00402078                 dd 901h, 8
.text:00402080                 dd offset aQpsPlocm     ; "qps-plocm"
.text:00402084                 dd 9FFh, 0
.text:0040208C                 dd offset aArEg         ; "ar-EG"
.text:00402090                 dd 0C01h, 0
.text:00402098                 dd offset aZhHk         ; "zh-HK"
.text:0040209C                 dd 0C04h, 1A2h
.text:004020A4                 dd offset aDeAt         ; "de-AT"
.text:004020A8                 dd 0C07h, 6
.text:004020B0                 dd offset aEnAu         ; "en-AU"
.text:004020B4                 dd 0C09h, 8
.text:004020BC                 dd offset aEsEs         ; "es-ES"
.text:004020C0                 dd 0C0Ah, 9
.text:004020C8                 dd offset aFrCa         ; "fr-CA"
.text:004020CC                 dd 0C0Ch, 0Bh
.text:004020D4                 dd offset aSrCyrlCs     ; "sr-Cyrl-CS"
.text:004020D8                 dd 0C1Ah, 194h
.text:004020E0                 dd offset aSeFi         ; "se-FI"
.text:004020E4                 dd 0C3Bh, 3Ah
.text:004020EC                 dd offset aMnMongMn     ; "mn-Mong-MN"
.text:004020F0                 dd 0C50h, 1AAh
.text:004020F8                 dd offset aDzBt         ; "dz-BT"
.text:004020FC                 dd 0C51h, 0
.text:00402104                 dd offset aQuzPe        ; "quz-PE"
.text:00402108                 dd 0C6Bh, 6Ah
.text:00402110                 dd offset aArLy         ; "ar-LY"
.text:00402114                 dd 1001h, 0
.text:0040211C                 dd offset aZhSg         ; "zh-SG"
.text:00402120                 dd 1004h, 3
.text:00402128                 dd offset aDeLu         ; "de-LU"
.text:0040212C                 dd 1007h, 6
.text:00402134                 dd offset aEnCa         ; "en-CA"
.text:00402138                 dd 1009h, 8
.text:00402140                 dd offset aEsGt         ; "es-GT"
.text:00402144                 dd 100Ah, 9
.text:0040214C                 dd offset aFrCh         ; "fr-CH"
.text:00402150                 dd 100Ch, 0Bh
.text:00402158                 dd offset aHrBa         ; "hr-BA"
.text:0040215C                 dd 101Ah, 19h
.text:00402164                 dd offset aSmjNo        ; "smj-NO"
.text:00402168                 dd 103Bh, 1A7h
.text:00402170                 dd offset aTzmTfngMa    ; "tzm-Tfng-MA"
.text:00402174                 dd 105Fh, 1A1h
.text:0040217C                 dd offset aArDz         ; "ar-DZ"
.text:00402180                 dd 1401h, 0
.text:00402188                 dd offset aZhMo         ; "zh-MO"
.text:0040218C                 dd 1404h, 1A2h
.text:00402194                 dd offset aDeLi         ; "de-LI"
.text:00402198                 dd 1407h, 6
.text:004021A0                 dd offset aEnNz         ; "en-NZ"
.text:004021A4                 dd 1409h, 8
.text:004021AC                 dd offset aEsCr         ; "es-CR"
.text:004021B0                 dd 140Ah, 9
.text:004021B8                 dd offset aFrLu         ; "fr-LU"
.text:004021BC                 dd 140Ch, 0Bh
.text:004021C4                 dd offset aBsLatnBa     ; "bs-Latn-BA"
.text:004021C8                 dd 141Ah, 193h
.text:004021D0                 dd offset aSmjSe        ; "smj-SE"
.text:004021D4                 dd 143Bh, 1A7h
.text:004021DC                 dd offset aArMa         ; "ar-MA"
.text:004021E0                 dd 1801h, 0
.text:004021E8                 dd offset aEnIe         ; "en-IE"
.text:004021EC                 dd 1809h, 8
.text:004021F4                 dd offset aEsPa         ; "es-PA"
.text:004021F8                 dd 180Ah, 9
.text:00402200                 dd offset aFrMc         ; "fr-MC"
.text:00402204                 dd 180Ch, 0Bh
.text:0040220C                 dd offset aSrLatnBa     ; "sr-Latn-BA"
.text:00402210                 dd 181Ah, 195h
.text:00402218                 dd offset aSmaNo        ; "sma-NO"
.text:0040221C                 dd 183Bh, 19Dh
.text:00402224                 dd offset aArTn         ; "ar-TN"
.text:00402228                 dd 1C01h, 0
.text:00402230                 dd offset aEnZa         ; "en-ZA"
.text:00402234                 dd 1C09h, 8
.text:0040223C                 dd offset aEsDo         ; "es-DO"
.text:00402240                 dd 1C0Ah, 9
.text:00402248                 dd offset aFr029        ; "fr-029"
.text:0040224C                 dd 1C0Ch, 0Bh
.text:00402254                 dd offset aSrCyrlBa     ; "sr-Cyrl-BA"
.text:00402258                 dd 1C1Ah, 194h
.text:00402260                 dd offset aSmaSe        ; "sma-SE"
.text:00402264                 dd 1C3Bh, 19Dh
.text:0040226C                 dd offset aArOm         ; "ar-OM"
.text:00402270                 dd 2001h, 0
.text:00402278                 dd offset aEnJm         ; "en-JM"
.text:0040227C                 dd 2009h, 8
.text:00402284                 dd offset aEsVe         ; "es-VE"
.text:00402288                 dd 200Ah, 9
.text:00402290                 dd offset aFrRe         ; "fr-RE"
.text:00402294                 dd 200Ch, 0Bh
.text:0040229C                 dd offset aBsCyrlBa     ; "bs-Cyrl-BA"
.text:004022A0                 dd 201Ah, 192h
.text:004022A8                 dd offset aSmsFi        ; "sms-FI"
.text:004022AC                 dd 203Bh, 198h
.text:004022B4                 dd offset aArYe         ; "ar-YE"
.text:004022B8                 dd 2401h, 0
.text:004022C0                 dd offset aEn029        ; "en-029"
.text:004022C4                 dd 2409h, 8
.text:004022CC                 dd offset aEsCo         ; "es-CO"
.text:004022D0                 dd 240Ah, 9
.text:004022D8                 dd offset aFrCd         ; "fr-CD"
.text:004022DC                 dd 240Ch, 0Bh
.text:004022E4                 dd offset aSrLatnRs     ; "sr-Latn-RS"
.text:004022E8                 dd 241Ah, 195h
.text:004022F0                 dd offset aSmnFi        ; "smn-FI"
.text:004022F4                 dd 243Bh, 196h
.text:004022FC                 dd offset aArSy         ; "ar-SY"
.text:00402300                 dd 2801h, 0
.text:00402308                 dd offset aEnBz         ; "en-BZ"
.text:0040230C                 dd 2809h, 8
.text:00402314                 dd offset aEsPe         ; "es-PE"
.text:00402318                 dd 280Ah, 9
.text:00402320                 dd offset aFrSn         ; "fr-SN"
.text:00402324                 dd 280Ch, 0Bh
.text:0040232C                 dd offset aSrCyrlRs     ; "sr-Cyrl-RS"
.text:00402330                 dd 281Ah, 194h
.text:00402338                 dd offset aArJo         ; "ar-JO"
.text:0040233C                 dd 2C01h, 0
.text:00402344                 dd offset aEnTt         ; "en-TT"
.text:00402348                 dd 2C09h, 8
.text:00402350                 dd offset aEsAr         ; "es-AR"
.text:00402354                 dd 2C0Ah, 9
.text:0040235C                 dd offset aFrCm         ; "fr-CM"
.text:00402360                 dd 2C0Ch, 0Bh
.text:00402368                 dd offset aSrLatnMe     ; "sr-Latn-ME"
.text:0040236C                 dd 2C1Ah, 195h
.text:00402374                 dd offset aArLb         ; "ar-LB"
.text:00402378                 dd 3001h, 0
.text:00402380                 dd offset aEnZw         ; "en-ZW"
.text:00402384                 dd 3009h, 8
.text:0040238C                 dd offset aEsEc         ; "es-EC"
.text:00402390                 dd 300Ah, 9
.text:00402398                 dd offset aFrCi         ; "fr-CI"
.text:0040239C                 dd 300Ch, 0Bh
.text:004023A4                 dd offset aSrCyrlMe     ; "sr-Cyrl-ME"
.text:004023A8                 dd 301Ah, 194h
.text:004023B0                 dd offset aArKw         ; "ar-KW"
.text:004023B4                 dd 3401h, 0
.text:004023BC                 dd offset aEnPh         ; "en-PH"
.text:004023C0                 dd 3409h, 8
.text:004023C8                 dd offset aEsCl         ; "es-CL"
.text:004023CC                 dd 340Ah, 9
.text:004023D4                 dd offset aFrMl         ; "fr-ML"
.text:004023D8                 dd 340Ch, 0Bh
.text:004023E0                 dd offset aArAe         ; "ar-AE"
.text:004023E4                 dd 3801h, 0
.text:004023EC                 dd offset aEnId         ; "en-ID"
.text:004023F0                 dd 3809h, 8
.text:004023F8                 dd offset aEsUy         ; "es-UY"
.text:004023FC                 dd 380Ah, 9
.text:00402404                 dd offset aFrMa         ; "fr-MA"
.text:00402408                 dd 380Ch, 0Bh
.text:00402410                 dd offset aArBh         ; "ar-BH"
.text:00402414                 dd 3C01h, 0
.text:0040241C                 dd offset aEnHk         ; "en-HK"
.text:00402420                 dd 3C09h, 8
.text:00402428                 dd offset aEsPy         ; "es-PY"
.text:0040242C                 dd 3C0Ah, 9
.text:00402434                 dd offset aFrHt         ; "fr-HT"
.text:00402438                 dd 3C0Ch, 0Bh
.text:00402440                 dd offset aArQa         ; "ar-QA"
.text:00402444                 dd 4001h, 0
.text:0040244C                 dd offset aEnIn         ; "en-IN"
.text:00402450                 dd 4009h, 8
.text:00402458                 dd offset aEsBo         ; "es-BO"
.text:0040245C                 dd 400Ah, 9
.text:00402464                 dd offset aEnMy         ; "en-MY"
.text:00402468                 dd 4409h, 8
.text:00402470                 dd offset aEsSv         ; "es-SV"
.text:00402474                 dd 440Ah, 9
.text:0040247C                 dd offset aEnSg         ; "en-SG"
.text:00402480                 dd 4809h, 8
.text:00402488                 dd offset aEsHn         ; "es-HN"
.text:0040248C                 dd 480Ah, 9
.text:00402494                 dd offset aEsNi         ; "es-NI"
.text:00402498                 dd 4C0Ah, 9
.text:004024A0                 dd offset aEsPr         ; "es-PR"
.text:004024A4                 dd 500Ah, 9
.text:004024AC                 dd offset aEsUs         ; "es-US"
.text:004024B0                 dd 540Ah, 9
.text:004024B8                 dd offset aEs419        ; "es-419"
.text:004024BC                 dd 580Ah, 9
.text:004024C4                 dd offset aEsCu         ; "es-CU"
.text:004024C8                 dd 5C0Ah, 9
.text:004024D0                 dd offset aBsCyrl       ; "bs-Cyrl"
.text:004024D4                 dd 641Ah, 19Bh
.text:004024DC                 dd offset aBsLatn       ; "bs-Latn"
.text:004024E0                 dd 681Ah, 19Bh
.text:004024E8                 dd offset aSrCyrl       ; "sr-Cyrl"
.text:004024EC                 dd 6C1Ah, 1A4h
.text:004024F4                 dd offset aSrLatn       ; "sr-Latn"
.text:004024F8                 dd 701Ah, 1A4h
.text:00402500                 dd offset aSmn          ; "smn"
.text:00402504                 dd 703Bh, 3Ah
.text:0040250C                 dd offset aAzCyrl       ; "az-Cyrl"
.text:00402510                 dd 742Ch, 2Bh
.text:00402518                 dd offset aSms          ; "sms"
.text:0040251C                 dd 743Bh, 3Ah
.text:00402524                 dd offset aZh           ; "zh"
.text:00402528                 dd 7804h, 7Ch
.text:00402530                 dd offset aNn           ; "nn"
.text:00402534                 dd 7814h, 13h
.text:0040253C                 dd offset aBs           ; "bs"
.text:00402540                 dd 781Ah, 7Ch
.text:00402548                 dd offset aAzLatn       ; "az-Latn"
.text:0040254C                 dd 782Ch, 2Bh
.text:00402554                 dd offset aSma          ; "sma"
.text:00402558                 dd 783Bh, 3Ah
.text:00402560                 dd offset aUzCyrl       ; "uz-Cyrl"
.text:00402564                 dd 7843h, 42h
.text:0040256C                 dd offset aMnCyrl       ; "mn-Cyrl"
.text:00402570                 dd 7850h, 4Fh
.text:00402578                 dd offset aIuCans       ; "iu-Cans"
.text:0040257C                 dd 785Dh, 5Ch
.text:00402584                 dd offset aTzmTfng      ; "tzm-Tfng"
.text:00402588                 dd 785Fh, 5Eh
.text:00402590                 dd offset aZhHant       ; "zh-Hant"
.text:00402594                 dd 7C04h, 199h
.text:0040259C                 dd offset aNb           ; "nb"
.text:004025A0                 dd 7C14h, 13h
.text:004025A8                 dd offset aSr           ; "sr"
.text:004025AC                 dd 7C1Ah, 7Ch
.text:004025B4                 dd offset aTgCyrl       ; "tg-Cyrl"
.text:004025B8                 dd 7C28h, 27h
.text:004025C0                 dd offset aDsb          ; "dsb"
.text:004025C4                 dd 7C2Eh, 2Dh
.text:004025CC                 dd offset aSmj          ; "smj"
.text:004025D0                 dd 7C3Bh, 3Ah
.text:004025D8                 dd offset aUzLatn       ; "uz-Latn"
.text:004025DC                 dd 7C43h, 42h
.text:004025E4                 dd offset aPaArab       ; "pa-Arab"
.text:004025E8                 dd 7C46h, 45h
.text:004025F0                 dd offset aMnMong       ; "mn-Mong"
.text:004025F4                 dd 7C50h, 4Fh
.text:004025FC                 dd offset aSdArab       ; "sd-Arab"
.text:00402600                 dd 7C59h, 58h
.text:00402608                 dd offset aChrCher      ; "chr-Cher"
.text:0040260C                 dd 7C5Ch, 5Bh
.text:00402614                 dd offset aIuLatn       ; "iu-Latn"
.text:00402618                 dd 7C5Dh, 5Ch
.text:00402620                 dd offset aTzmLatn      ; "tzm-Latn"
.text:00402624                 dd 7C5Fh, 5Eh
.text:0040262C                 dd offset aFfLatn       ; "ff-Latn"
.text:00402630                 dd 7C67h, 66h
.text:00402638                 dd offset aHaLatn       ; "ha-Latn"
.text:0040263C                 dd 7C68h, 67h
.text:00402644                 dd offset aQucLatn      ; "quc-Latn"
.text:00402648                 dd 7C86h, 83h
.text:00402650                 dd offset aKuArab       ; "ku-Arab"
.text:00402654                 dd 7C92h, 88h, 0
.text:00402660 off_402660      dd offset ppszDestEnd   ; DATA XREF: sub_4120EB+1A↓o
.text:00402664                 dd offset aAf           ; "af"
.text:00402668                 dd offset aAfZa         ; "af-ZA"
.text:0040266C                 dd offset aAm           ; "am"
.text:00402670                 dd offset aAmEt         ; "am-ET"
.text:00402674                 dd offset aAr           ; "ar"
.text:00402678                 dd offset aArAe         ; "ar-AE"
.text:0040267C                 dd offset aArBh         ; "ar-BH"
.text:00402680                 dd offset aArDz         ; "ar-DZ"
.text:00402684                 dd offset aArEg         ; "ar-EG"
.text:00402688                 dd offset aArIq         ; "ar-IQ"
.text:0040268C                 dd offset aArJo         ; "ar-JO"
.text:00402690                 dd offset aArKw         ; "ar-KW"
.text:00402694                 dd offset aArLb         ; "ar-LB"
.text:00402698                 dd offset aArLy         ; "ar-LY"
.text:0040269C                 dd offset aArMa         ; "ar-MA"
.text:004026A0                 dd offset aArOm         ; "ar-OM"
.text:004026A4                 dd offset aArQa         ; "ar-QA"
.text:004026A8                 dd offset aArSa         ; "ar-SA"
.text:004026AC                 dd offset aArSy         ; "ar-SY"
.text:004026B0                 dd offset aArTn         ; "ar-TN"
.text:004026B4                 dd offset aArYe         ; "ar-YE"
.text:004026B8                 dd offset aArn          ; "arn"
.text:004026BC                 dd offset aArnCl        ; "arn-CL"
.text:004026C0                 dd offset aAs           ; "as"
.text:004026C4                 dd offset aAsIn         ; "as-IN"
.text:004026C8                 dd offset aAz           ; "az"
.text:004026CC                 dd offset aAzCyrl       ; "az-Cyrl"
.text:004026D0                 dd offset aAzCyrlAz     ; "az-Cyrl-AZ"
.text:004026D4                 dd offset aAzLatn       ; "az-Latn"
.text:004026D8                 dd offset aAzLatnAz     ; "az-Latn-AZ"
.text:004026DC                 dd offset aBa           ; "ba"
.text:004026E0                 dd offset aBaRu         ; "ba-RU"
.text:004026E4                 dd offset aBe           ; "be"
.text:004026E8                 dd offset aBeBy         ; "be-BY"
.text:004026EC                 dd offset aBg           ; "bg"
.text:004026F0                 dd offset aBgBg         ; "bg-BG"
.text:004026F4                 dd offset aBin          ; "bin"
.text:004026F8                 dd offset aBinNg        ; "bin-NG"
.text:004026FC                 dd offset aBn           ; "bn"
.text:00402700                 dd offset aBnBd         ; "bn-BD"
.text:00402704                 dd offset aBnIn         ; "bn-IN"
.text:00402708                 dd offset aBo           ; "bo"
.text:0040270C                 dd offset aBoCn         ; "bo-CN"
.text:00402710                 dd offset aBr_0         ; "br"
.text:00402714                 dd offset aBrFr         ; "br-FR"
.text:00402718                 dd offset aBs           ; "bs"
.text:0040271C                 dd offset aBsCyrl       ; "bs-Cyrl"
.text:00402720                 dd offset aBsCyrlBa     ; "bs-Cyrl-BA"
.text:00402724                 dd offset aBsLatn       ; "bs-Latn"
.text:00402728                 dd offset aBsLatnBa     ; "bs-Latn-BA"
.text:0040272C                 dd offset aCa           ; "ca"
.text:00402730                 dd offset aCaEs         ; "ca-ES"
.text:00402734                 dd offset aCaEsValencia ; "ca-ES-valencia"
.text:00402738                 dd offset aChr          ; "chr"
.text:0040273C                 dd offset aChrCher      ; "chr-Cher"
.text:00402740                 dd offset aChrCherUs    ; "chr-Cher-US"
.text:00402744                 dd offset aCo           ; "co"
.text:00402748                 dd offset aCoFr         ; "co-FR"
.text:0040274C                 dd offset aCs_0         ; "cs"
.text:00402750                 dd offset aCsCz         ; "cs-CZ"
.text:00402754                 dd offset aCy           ; "cy"
.text:00402758                 dd offset aCyGb         ; "cy-GB"
.text:0040275C                 dd offset aDa_0         ; "da"
.text:00402760                 dd offset aDaDk         ; "da-DK"
.text:00402764                 dd offset aDe_0         ; "de"
.text:00402768                 dd offset aDeAt         ; "de-AT"
.text:0040276C                 dd offset aDeCh         ; "de-CH"
.text:00402770                 dd offset aDeDe         ; "de-DE"
.text:00402774                 dd offset aDeLi         ; "de-LI"
.text:00402778                 dd offset aDeLu         ; "de-LU"
.text:0040277C                 dd offset aDsb          ; "dsb"
.text:00402780                 dd offset aDsbDe        ; "dsb-DE"
.text:00402784                 dd offset aDv           ; "dv"
.text:00402788                 dd offset aDvMv         ; "dv-MV"
.text:0040278C                 dd offset aDzBt         ; "dz-BT"
.text:00402790                 dd offset aEl_0         ; "el"
.text:00402794                 dd offset aElGr         ; "el-GR"
.text:00402798                 dd offset aEn_0         ; "en"
.text:0040279C                 dd offset aEn029        ; "en-029"
.text:004027A0                 dd offset aEnAu         ; "en-AU"
.text:004027A4                 dd offset aEnBz         ; "en-BZ"
.text:004027A8                 dd offset aEnCa         ; "en-CA"
.text:004027AC                 dd offset aEnGb         ; "en-GB"
.text:004027B0                 dd offset aEnHk         ; "en-HK"
.text:004027B4                 dd offset aEnId         ; "en-ID"
.text:004027B8                 dd offset aEnIe         ; "en-IE"
.text:004027BC                 dd offset aEnIn         ; "en-IN"
.text:004027C0                 dd offset aEnJm         ; "en-JM"
.text:004027C4                 dd offset aEnMy         ; "en-MY"
.text:004027C8                 dd offset aEnNz         ; "en-NZ"
.text:004027CC                 dd offset aEnPh         ; "en-PH"
.text:004027D0                 dd offset aEnSg         ; "en-SG"
.text:004027D4                 dd offset aEnTt         ; "en-TT"
.text:004027D8                 dd offset aEnUs         ; "en-US"
.text:004027DC                 dd offset aEnZa         ; "en-ZA"
.text:004027E0                 dd offset aEnZw         ; "en-ZW"
.text:004027E4                 dd offset aEs_0         ; "es"
.text:004027E8                 dd offset aEs419        ; "es-419"
.text:004027EC                 dd offset aEsAr         ; "es-AR"
.text:004027F0                 dd offset aEsBo         ; "es-BO"
.text:004027F4                 dd offset aEsCl         ; "es-CL"
.text:004027F8                 dd offset aEsCo         ; "es-CO"
.text:004027FC                 dd offset aEsCr         ; "es-CR"
.text:00402800                 dd offset aEsCu         ; "es-CU"
.text:00402804                 dd offset aEsDo         ; "es-DO"
.text:00402808                 dd offset aEsEc         ; "es-EC"
.text:0040280C                 dd offset aEsEs         ; "es-ES"
.text:00402810                 dd offset aEsEsTradnl   ; "es-ES_tradnl"
.text:00402814                 dd offset aEsGt         ; "es-GT"
.text:00402818                 dd offset aEsHn         ; "es-HN"
.text:0040281C                 dd offset aEsMx         ; "es-MX"
.text:00402820                 dd offset aEsNi         ; "es-NI"
.text:00402824                 dd offset aEsPa         ; "es-PA"
.text:00402828                 dd offset aEsPe         ; "es-PE"
.text:0040282C                 dd offset aEsPr         ; "es-PR"
.text:00402830                 dd offset aEsPy         ; "es-PY"
.text:00402834                 dd offset aEsSv         ; "es-SV"
.text:00402838                 dd offset aEsUs         ; "es-US"
.text:0040283C                 dd offset aEsUy         ; "es-UY"
.text:00402840                 dd offset aEsVe         ; "es-VE"
.text:00402844                 dd offset aEt           ; "et"
.text:00402848                 dd offset aEtEe         ; "et-EE"
.text:0040284C                 dd offset aEu_0         ; "eu"
.text:00402850                 dd offset aEuEs         ; "eu-ES"
.text:00402854                 dd offset aFa           ; "fa"
.text:00402858                 dd offset aFaIr         ; "fa-IR"
.text:0040285C                 dd offset aFf           ; "ff"
.text:00402860                 dd offset aFfLatn       ; "ff-Latn"
.text:00402864                 dd offset aFfLatnSn     ; "ff-Latn-SN"
.text:00402868                 dd offset aFfNg         ; "ff-NG"
.text:0040286C                 dd offset aFi_0         ; "fi"
.text:00402870                 dd offset aFiFi         ; "fi-FI"
.text:00402874                 dd offset aFil          ; "fil"
.text:00402878                 dd offset aFilPh        ; "fil-PH"
.text:0040287C                 dd offset aFo           ; "fo"
.text:00402880                 dd offset aFoFo         ; "fo-FO"
.text:00402884                 dd offset aFr_0         ; "fr"
.text:00402888                 dd offset aFr029        ; "fr-029"
.text:0040288C                 dd offset aFrBe         ; "fr-BE"
.text:00402890                 dd offset aFrCa         ; "fr-CA"
.text:00402894                 dd offset aFrCd         ; "fr-CD"
.text:00402898                 dd offset aFrCh         ; "fr-CH"
.text:0040289C                 dd offset aFrCi         ; "fr-CI"
.text:004028A0                 dd offset aFrCm         ; "fr-CM"
.text:004028A4                 dd offset aFrFr         ; "fr-FR"
.text:004028A8                 dd offset aFrHt         ; "fr-HT"
.text:004028AC                 dd offset aFrLu         ; "fr-LU"
.text:004028B0                 dd offset aFrMa         ; "fr-MA"
.text:004028B4                 dd offset aFrMc         ; "fr-MC"
.text:004028B8                 dd offset aFrMl         ; "fr-ML"
.text:004028BC                 dd offset aFrRe         ; "fr-RE"
.text:004028C0                 dd offset aFrSn         ; "fr-SN"
.text:004028C4                 dd offset aFy           ; "fy"
.text:004028C8                 dd offset aFyNl         ; "fy-NL"
.text:004028CC                 dd offset aGa           ; "ga"
.text:004028D0                 dd offset aGaIe         ; "ga-IE"
.text:004028D4                 dd offset aGd           ; "gd"
.text:004028D8                 dd offset aGdGb         ; "gd-GB"
.text:004028DC                 dd offset aGl           ; "gl"
.text:004028E0                 dd offset aGlEs         ; "gl-ES"
.text:004028E4                 dd offset aGn           ; "gn"
.text:004028E8                 dd offset aGnPy         ; "gn-PY"
.text:004028EC                 dd offset aGsw          ; "gsw"
.text:004028F0                 dd offset aGswFr        ; "gsw-FR"
.text:004028F4                 dd offset aGu           ; "gu"
.text:004028F8                 dd offset aGuIn         ; "gu-IN"
.text:004028FC                 dd offset aHa           ; "ha"
.text:00402900                 dd offset aHaLatn       ; "ha-Latn"
.text:00402904                 dd offset aHaLatnNg     ; "ha-Latn-NG"
.text:00402908                 dd offset aHaw          ; "haw"
.text:0040290C                 dd offset aHawUs        ; "haw-US"
.text:00402910                 dd offset aHe_0         ; "he"
.text:00402914                 dd offset aHeIl         ; "he-IL"
.text:00402918                 dd offset aHi           ; "hi"
.text:0040291C                 dd offset aHiIn         ; "hi-IN"
.text:00402920                 dd offset aHr           ; "hr"
.text:00402924                 dd offset aHrBa         ; "hr-BA"
.text:00402928                 dd offset aHrHr         ; "hr-HR"
.text:0040292C                 dd offset aHsb          ; "hsb"
.text:00402930                 dd offset aHsbDe        ; "hsb-DE"
.text:00402934                 dd offset aHu_0         ; "hu"
.text:00402938                 dd offset aHuHu         ; "hu-HU"
.text:0040293C                 dd offset aHy           ; "hy"
.text:00402940                 dd offset aHyAm         ; "hy-AM"
.text:00402944                 dd offset aIbb          ; "ibb"
.text:00402948                 dd offset aIbbNg        ; "ibb-NG"
.text:0040294C                 dd offset aId           ; "id"
.text:00402950                 dd offset aIdId         ; "id-ID"
.text:00402954                 dd offset aIg           ; "ig"
.text:00402958                 dd offset aIgNg         ; "ig-NG"
.text:0040295C                 dd offset aIi           ; "ii"
.text:00402960                 dd offset aIiCn         ; "ii-CN"
.text:00402964                 dd offset aIs_0         ; "is"
.text:00402968                 dd offset aIsIs         ; "is-IS"
.text:0040296C                 dd offset aIt_0         ; "it"
.text:00402970                 dd offset aItCh         ; "it-CH"
.text:00402974                 dd offset aItIt         ; "it-IT"
.text:00402978                 dd offset aIu           ; "iu"
.text:0040297C                 dd offset aIuCans       ; "iu-Cans"
.text:00402980                 dd offset aIuCansCa     ; "iu-Cans-CA"
.text:00402984                 dd offset aIuLatn       ; "iu-Latn"
.text:00402988                 dd offset aIuLatnCa     ; "iu-Latn-CA"
.text:0040298C                 dd offset aJa_0         ; "ja"
.text:00402990                 dd offset aJaJp         ; "ja-JP"
.text:00402994                 dd offset aKa           ; "ka"
.text:00402998                 dd offset aKaGe         ; "ka-GE"
.text:0040299C                 dd offset aKk           ; "kk"
.text:004029A0                 dd offset aKkKz         ; "kk-KZ"
.text:004029A4                 dd offset aKl           ; "kl"
.text:004029A8                 dd offset aKlGl         ; "kl-GL"
.text:004029AC                 dd offset aKm           ; "km"
.text:004029B0                 dd offset aKmKh         ; "km-KH"
.text:004029B4                 dd offset aKn           ; "kn"
.text:004029B8                 dd offset aKnIn         ; "kn-IN"
.text:004029BC                 dd offset aKo_0         ; "ko"
.text:004029C0                 dd offset aKoKr         ; "ko-KR"
.text:004029C4                 dd offset aKok          ; "kok"
.text:004029C8                 dd offset aKokIn        ; "kok-IN"
.text:004029CC                 dd offset aKr           ; "kr"
.text:004029D0                 dd offset aKrNg         ; "kr-NG"
.text:004029D4                 dd offset aKs           ; "ks"
.text:004029D8                 dd offset aKsArab       ; "ks-Arab"
.text:004029DC                 dd offset aKsDevaIn     ; "ks-Deva-IN"
.text:004029E0                 dd offset aKu           ; "ku"
.text:004029E4                 dd offset aKuArab       ; "ku-Arab"
.text:004029E8                 dd offset aKuArabIq     ; "ku-Arab-IQ"
.text:004029EC                 dd offset aKy           ; "ky"
.text:004029F0                 dd offset aKyKg         ; "ky-KG"
.text:004029F4                 dd offset aLa           ; "la"
.text:004029F8                 dd offset aLa001        ; "la-001"
.text:004029FC                 dd offset aLb           ; "lb"
.text:00402A00                 dd offset aLbLu         ; "lb-LU"
.text:00402A04                 dd offset aLo           ; "lo"
.text:00402A08                 dd offset aLoLa         ; "lo-LA"
.text:00402A0C                 dd offset aLt           ; "lt"
.text:00402A10                 dd offset aLtLt         ; "lt-LT"
.text:00402A14                 dd offset aLv           ; "lv"
.text:00402A18                 dd offset aLvLv         ; "lv-LV"
.text:00402A1C                 dd offset aMi           ; "mi"
.text:00402A20                 dd offset aMiNz         ; "mi-NZ"
.text:00402A24                 dd offset aMk           ; "mk"
.text:00402A28                 dd offset aMkMk         ; "mk-MK"
.text:00402A2C                 dd offset aMl           ; "ml"
.text:00402A30                 dd offset aMlIn         ; "ml-IN"
.text:00402A34                 dd offset aMn           ; "mn"
.text:00402A38                 dd offset aMnCyrl       ; "mn-Cyrl"
.text:00402A3C                 dd offset aMnMn         ; "mn-MN"
.text:00402A40                 dd offset aMnMong       ; "mn-Mong"
.text:00402A44                 dd offset aMnMongCn     ; "mn-Mong-CN"
.text:00402A48                 dd offset aMnMongMn     ; "mn-Mong-MN"
.text:00402A4C                 dd offset aMni          ; "mni"
.text:00402A50                 dd offset aMniIn        ; "mni-IN"
.text:00402A54                 dd offset aMoh          ; "moh"
.text:00402A58                 dd offset aMohCa        ; "moh-CA"
.text:00402A5C                 dd offset aMr           ; "mr"
.text:00402A60                 dd offset aMrIn         ; "mr-IN"
.text:00402A64                 dd offset aMs           ; "ms"
.text:00402A68                 dd offset aMsBn         ; "ms-BN"
.text:00402A6C                 dd offset aMsMy         ; "ms-MY"
.text:00402A70                 dd offset aMt           ; "mt"
.text:00402A74                 dd offset aMtMt         ; "mt-MT"
.text:00402A78                 dd offset aMy           ; "my"
.text:00402A7C                 dd offset aMyMm         ; "my-MM"
.text:00402A80                 dd offset aNb           ; "nb"
.text:00402A84                 dd offset aNbNo         ; "nb-NO"
.text:00402A88                 dd offset aNe           ; "ne"
.text:00402A8C                 dd offset aNeIn         ; "ne-IN"
.text:00402A90                 dd offset aNeNp         ; "ne-NP"
.text:00402A94                 dd offset aNl_0         ; "nl"
.text:00402A98                 dd offset aNlBe         ; "nl-BE"
.text:00402A9C                 dd offset aNlNl         ; "nl-NL"
.text:00402AA0                 dd offset aNn           ; "nn"
.text:00402AA4                 dd offset aNnNo         ; "nn-NO"
.text:00402AA8                 dd offset aNo_0         ; "no"
.text:00402AAC                 dd offset aNso          ; "nso"
.text:00402AB0                 dd offset aNsoZa        ; "nso-ZA"
.text:00402AB4                 dd offset aOc           ; "oc"
.text:00402AB8                 dd offset aOcFr         ; "oc-FR"
.text:00402ABC                 dd offset aOm           ; "om"
.text:00402AC0                 dd offset aOmEt         ; "om-ET"
.text:00402AC4                 dd offset aOr           ; "or"
.text:00402AC8                 dd offset aOrIn         ; "or-IN"
.text:00402ACC                 dd offset aPa           ; "pa"
.text:00402AD0                 dd offset aPaArab       ; "pa-Arab"
.text:00402AD4                 dd offset aPaArabPk     ; "pa-Arab-PK"
.text:00402AD8                 dd offset aPaIn         ; "pa-IN"
.text:00402ADC                 dd offset aPap          ; "pap"
.text:00402AE0                 dd offset aPap029       ; "pap-029"
.text:00402AE4                 dd offset aPl_0         ; "pl"
.text:00402AE8                 dd offset aPlPl         ; "pl-PL"
.text:00402AEC                 dd offset aPrs          ; "prs"
.text:00402AF0                 dd offset aPrsAf        ; "prs-AF"
.text:00402AF4                 dd offset aPs           ; "ps"
.text:00402AF8                 dd offset aPsAf         ; "ps-AF"
.text:00402AFC                 dd offset aPt_0         ; "pt"
.text:00402B00                 dd offset aPtBr         ; "pt-BR"
.text:00402B04                 dd offset aPtPt         ; "pt-PT"
.text:00402B08                 dd offset aQpsLatnXSh   ; "qps-Latn-x-sh"
.text:00402B0C                 dd offset aQpsPloc      ; "qps-ploc"
.text:00402B10                 dd offset aQpsPloca     ; "qps-ploca"
.text:00402B14                 dd offset aQpsPlocm     ; "qps-plocm"
.text:00402B18                 dd offset aQuc          ; "quc"
.text:00402B1C                 dd offset aQucLatn      ; "quc-Latn"
.text:00402B20                 dd offset aQucLatnGt    ; "quc-Latn-GT"
.text:00402B24                 dd offset aQuz          ; "quz"
.text:00402B28                 dd offset aQuzBo        ; "quz-BO"
.text:00402B2C                 dd offset aQuzEc        ; "quz-EC"
.text:00402B30                 dd offset aQuzPe        ; "quz-PE"
.text:00402B34                 dd offset aRm           ; "rm"
.text:00402B38                 dd offset aRmCh         ; "rm-CH"
.text:00402B3C                 dd offset aRo           ; "ro"
.text:00402B40                 dd offset aRoMd         ; "ro-MD"
.text:00402B44                 dd offset aRoRo         ; "ro-RO"
.text:00402B48                 dd offset aRu_0         ; "ru"
.text:00402B4C                 dd offset aRuMd         ; "ru-MD"
.text:00402B50                 dd offset aRuRu         ; "ru-RU"
.text:00402B54                 dd offset aRw           ; "rw"
.text:00402B58                 dd offset aRwRw         ; "rw-RW"
.text:00402B5C                 dd offset aSa           ; "sa"
.text:00402B60                 dd offset aSaIn         ; "sa-IN"
.text:00402B64                 dd offset aSah          ; "sah"
.text:00402B68                 dd offset aSahRu        ; "sah-RU"
.text:00402B6C                 dd offset aSd           ; "sd"
.text:00402B70                 dd offset aSdArab       ; "sd-Arab"
.text:00402B74                 dd offset aSdArabPk     ; "sd-Arab-PK"
.text:00402B78                 dd offset aSdDevaIn     ; "sd-Deva-IN"
.text:00402B7C                 dd offset aSe           ; "se"
.text:00402B80                 dd offset aSeFi         ; "se-FI"
.text:00402B84                 dd offset aSeNo         ; "se-NO"
.text:00402B88                 dd offset aSeSe         ; "se-SE"
.text:00402B8C                 dd offset aSi           ; "si"
.text:00402B90                 dd offset aSiLk         ; "si-LK"
.text:00402B94                 dd offset aSk           ; "sk"
.text:00402B98                 dd offset aSkSk         ; "sk-SK"
.text:00402B9C                 dd offset aSl           ; "sl"
.text:00402BA0                 dd offset aSlSi         ; "sl-SI"
.text:00402BA4                 dd offset aSma          ; "sma"
.text:00402BA8                 dd offset aSmaNo        ; "sma-NO"
.text:00402BAC                 dd offset aSmaSe        ; "sma-SE"
.text:00402BB0                 dd offset aSmj          ; "smj"
.text:00402BB4                 dd offset aSmjNo        ; "smj-NO"
.text:00402BB8                 dd offset aSmjSe        ; "smj-SE"
.text:00402BBC                 dd offset aSmn          ; "smn"
.text:00402BC0                 dd offset aSmnFi        ; "smn-FI"
.text:00402BC4                 dd offset aSms          ; "sms"
.text:00402BC8                 dd offset aSmsFi        ; "sms-FI"
.text:00402BCC                 dd offset aSo           ; "so"
.text:00402BD0                 dd offset aSoSo         ; "so-SO"
.text:00402BD4                 dd offset aSq           ; "sq"
.text:00402BD8                 dd offset aSqAl         ; "sq-AL"
.text:00402BDC                 dd offset aSr           ; "sr"
.text:00402BE0                 dd offset aSrCyrl       ; "sr-Cyrl"
.text:00402BE4                 dd offset aSrCyrlBa     ; "sr-Cyrl-BA"
.text:00402BE8                 dd offset aSrCyrlCs     ; "sr-Cyrl-CS"
.text:00402BEC                 dd offset aSrCyrlMe     ; "sr-Cyrl-ME"
.text:00402BF0                 dd offset aSrCyrlRs     ; "sr-Cyrl-RS"
.text:00402BF4                 dd offset aSrLatn       ; "sr-Latn"
.text:00402BF8                 dd offset aSrLatnBa     ; "sr-Latn-BA"
.text:00402BFC                 dd offset aSrLatnCs     ; "sr-Latn-CS"
.text:00402C00                 dd offset aSrLatnMe     ; "sr-Latn-ME"
.text:00402C04                 dd offset aSrLatnRs     ; "sr-Latn-RS"
.text:00402C08                 dd offset aSt           ; "st"
.text:00402C0C                 dd offset aStZa         ; "st-ZA"
.text:00402C10                 dd offset aSv           ; "sv"
.text:00402C14                 dd offset aSvFi         ; "sv-FI"
.text:00402C18                 dd offset aSvSe         ; "sv-SE"
.text:00402C1C                 dd offset aSw           ; "sw"
.text:00402C20                 dd offset aSwKe         ; "sw-KE"
.text:00402C24                 dd offset aSyr          ; "syr"
.text:00402C28                 dd offset aSyrSy        ; "syr-SY"
.text:00402C2C                 dd offset aTa           ; "ta"
.text:00402C30                 dd offset aTaIn         ; "ta-IN"
.text:00402C34                 dd offset aTaLk         ; "ta-LK"
.text:00402C38                 dd offset aTe           ; "te"
.text:00402C3C                 dd offset aTeIn         ; "te-IN"
.text:00402C40                 dd offset aTg           ; "tg"
.text:00402C44                 dd offset aTgCyrl       ; "tg-Cyrl"
.text:00402C48                 dd offset aTgCyrlTj     ; "tg-Cyrl-TJ"
.text:00402C4C                 dd offset aTh           ; "th"
.text:00402C50                 dd offset aThTh         ; "th-TH"
.text:00402C54                 dd offset aTi           ; "ti"
.text:00402C58                 dd offset aTiEr         ; "ti-ER"
.text:00402C5C                 dd offset aTiEt         ; "ti-ET"
.text:00402C60                 dd offset aTk           ; "tk"
.text:00402C64                 dd offset aTkTm         ; "tk-TM"
.text:00402C68                 dd offset aTn           ; "tn"
.text:00402C6C                 dd offset aTnBw         ; "tn-BW"
.text:00402C70                 dd offset aTnZa         ; "tn-ZA"
.text:00402C74                 dd offset aTr_0         ; "tr"
.text:00402C78                 dd offset aTrTr         ; "tr-TR"
.text:00402C7C                 dd offset aTs           ; "ts"
.text:00402C80                 dd offset aTsZa         ; "ts-ZA"
.text:00402C84                 dd offset aTt           ; "tt"
.text:00402C88                 dd offset aTtRu         ; "tt-RU"
.text:00402C8C                 dd offset aTzm          ; "tzm"
.text:00402C90                 dd offset aTzmArabMa    ; "tzm-Arab-MA"
.text:00402C94                 dd offset aTzmLatn      ; "tzm-Latn"
.text:00402C98                 dd offset aTzmLatnDz    ; "tzm-Latn-DZ"
.text:00402C9C                 dd offset aTzmTfng      ; "tzm-Tfng"
.text:00402CA0                 dd offset aTzmTfngMa    ; "tzm-Tfng-MA"
.text:00402CA4                 dd offset aUg           ; "ug"
.text:00402CA8                 dd offset aUgCn         ; "ug-CN"
.text:00402CAC                 dd offset aUk           ; "uk"
.text:00402CB0                 dd offset aUkUa         ; "uk-UA"
.text:00402CB4                 dd offset aUr           ; "ur"
.text:00402CB8                 dd offset aUrIn         ; "ur-IN"
.text:00402CBC                 dd offset aUrPk         ; "ur-PK"
.text:00402CC0                 dd offset aUz           ; "uz"
.text:00402CC4                 dd offset aUzCyrl       ; "uz-Cyrl"
.text:00402CC8                 dd offset aUzCyrlUz     ; "uz-Cyrl-UZ"
.text:00402CCC                 dd offset aUzLatn       ; "uz-Latn"
.text:00402CD0                 dd offset aUzLatnUz     ; "uz-Latn-UZ"
.text:00402CD4                 dd offset aVe           ; "ve"
.text:00402CD8                 dd offset aVeZa         ; "ve-ZA"
.text:00402CDC                 dd offset aVi           ; "vi"
.text:00402CE0                 dd offset aViVn         ; "vi-VN"
.text:00402CE4                 dd offset aWo           ; "wo"
.text:00402CE8                 dd offset aWoSn         ; "wo-SN"
.text:00402CEC                 dd offset aXh           ; "xh"
.text:00402CF0                 dd offset aXhZa         ; "xh-ZA"
.text:00402CF4                 dd offset aYi           ; "yi"
.text:00402CF8                 dd offset aYi001        ; "yi-001"
.text:00402CFC                 dd offset aYo           ; "yo"
.text:00402D00                 dd offset aYoNg         ; "yo-NG"
.text:00402D04                 dd offset aZh           ; "zh"
.text:00402D08                 dd offset aZhCn         ; "zh-CN"
.text:00402D0C                 dd offset aZhHans       ; "zh-Hans"
.text:00402D10                 dd offset aZhHant       ; "zh-Hant"
.text:00402D14                 dd offset aZhHk         ; "zh-HK"
.text:00402D18                 dd offset aZhMo         ; "zh-MO"
.text:00402D1C                 dd offset aZhSg         ; "zh-SG"
.text:00402D20                 dd offset aZhTw         ; "zh-TW"
.text:00402D24                 dd offset aZu           ; "zu"
.text:00402D28                 dd offset aZuZa         ; "zu-ZA"
.text:00402D2C                 align 10h
.text:00402D30 __load_config_used dd 98h               ; Size
.text:00402D34                 dd 0                    ; Time stamp
.text:00402D38                 dw 2 dup(0)             ; Version: 0.0
.text:00402D3C                 dd 0                    ; GlobalFlagsClear
.text:00402D40                 dd 0                    ; GlobalFlagsSet
.text:00402D44                 dd 0                    ; CriticalSectionDefaultTimeout
.text:00402D48                 dd 0                    ; DeCommitFreeBlockThreshold
.text:00402D4C                 dd 0                    ; DeCommitTotalFreeThreshold
.text:00402D50                 dd 0                    ; LockPrefixTable
.text:00402D54                 dd 0                    ; MaximumAllocationSize
.text:00402D58                 dd 0                    ; VirtualMemoryThreshold
.text:00402D5C                 dd 0                    ; ProcessAffinityMask
.text:00402D60                 dd 0                    ; ProcessHeapFlags
.text:00402D64                 dw 0                    ; CSDVersion
.text:00402D66                 dw 0                    ; Reserved1
.text:00402D68                 dd 0                    ; EditList
.text:00402D6C                 dd offset ___security_cookie ; SecurityCookie
.text:00402D70                 dd offset ___safe_se_handler_table ; SEHandlerTable
.text:00402D74                 dd 1                    ; SEHandlerCount
.text:00402D78                 dd offset ___guard_check_icall_fptr ; GuardCFCheckFunctionPointer
.text:00402D7C                 dd 0                    ; GuardCFDispatchFunctionPointer
.text:00402D80                 dd offset ___guard_fids_table ; GuardCFFunctionTable
.text:00402D84                 dd 57h                  ; GuardCFFunctionCount
.text:00402D88                 dd 17500h               ; GuardFlags
.text:00402D8C                 dd 0Fh dup(0)
.text:00402DC8 ; const _PVFV First
.text:00402DC8 First           dd 0                    ; DATA XREF: start-11C↓o
.text:00402DCC                 dd offset pre_cpp_init
.text:00402DD0                 dd offset sub_4056A0
.text:00402DD4                 dd offset sub_405720
.text:00402DD8                 dd offset sub_4057A0
.text:00402DDC                 dd offset sub_405820
.text:00402DE0                 dd offset sub_4058A0
.text:00402DE4                 dd offset sub_405920
.text:00402DE8                 dd offset sub_4059A0
.text:00402DEC                 dd offset sub_405A20
.text:00402DF0                 dd offset sub_405AA0
.text:00402DF4                 dd offset sub_405B20
.text:00402DF8                 dd offset sub_405BA0
.text:00402DFC                 dd offset sub_405C20
.text:00402E00                 dd offset sub_405CA0
.text:00402E04                 dd offset sub_405D20
.text:00402E08                 dd offset sub_405DA0
.text:00402E0C                 dd offset sub_405E20
.text:00402E10                 dd offset sub_405EA0
.text:00402E14                 dd offset sub_405F20
.text:00402E18                 dd offset sub_405FA0
.text:00402E1C                 dd offset sub_406020
.text:00402E20                 dd offset sub_4060A0
.text:00402E24                 dd offset sub_406120
.text:00402E28                 dd offset sub_4061A0
.text:00402E2C                 dd offset sub_406220
.text:00402E30                 dd offset sub_4062A0
.text:00402E34                 dd offset sub_406320
.text:00402E38                 dd offset sub_4063A0
.text:00402E3C                 dd offset sub_406420
.text:00402E40                 dd offset sub_4064A0
.text:00402E44                 dd offset sub_406520
.text:00402E48                 dd offset sub_4065A0
.text:00402E4C                 dd offset sub_406620
.text:00402E50                 dd offset sub_4066A0
.text:00402E54                 dd offset sub_406720
.text:00402E58                 dd offset sub_4067A0
.text:00402E5C                 dd offset sub_406820
.text:00402E60                 dd offset sub_4068A0
.text:00402E64                 dd offset sub_406920
.text:00402E68                 dd offset sub_4069A0
.text:00402E6C                 dd offset sub_406A20
.text:00402E70                 dd offset sub_406AA0
.text:00402E74                 dd offset sub_406B20
.text:00402E78                 dd offset sub_406BA0
.text:00402E7C                 dd offset sub_406C20
.text:00402E80                 dd offset sub_406CA0
.text:00402E84                 dd offset sub_406D20
.text:00402E88                 dd offset sub_406DA0
.text:00402E8C                 dd offset sub_406E20
.text:00402E90                 dd offset sub_406EA0
.text:00402E94                 dd offset sub_406F20
.text:00402E98                 dd offset sub_406FA0
.text:00402E9C                 dd offset sub_407020
.text:00402EA0                 dd offset sub_4070A0
.text:00402EA4                 dd offset sub_407120
.text:00402EA8                 dd offset sub_4071A0
.text:00402EAC                 dd offset sub_407220
.text:00402EB0                 dd offset sub_4072A0
.text:00402EB4                 dd offset sub_407320
.text:00402EB8                 dd offset sub_4073A0
.text:00402EBC                 dd offset sub_407420
.text:00402EC0                 dd offset sub_4074A0
.text:00402EC4                 dd offset sub_407520
.text:00402EC8                 dd offset sub_4075A0
.text:00402ECC                 dd offset sub_407620
.text:00402ED0                 dd offset sub_4076A0
.text:00402ED4                 dd offset sub_407720
.text:00402ED8                 dd offset sub_4077A0
.text:00402EDC                 dd offset sub_407820
.text:00402EE0                 dd offset sub_4078A0
.text:00402EE4 ; const _PVFV Last
.text:00402EE4 Last            dd 0                    ; DATA XREF: start-121↓o
.text:00402EE8 ; const _PIFV dword_402EE8
.text:00402EE8 dword_402EE8    dd 0                    ; DATA XREF: start-150↓o
.text:00402EEC                 dd offset pre_c_init
.text:00402EF0                 dd offset sub_4127E0
.text:00402EF4 ; const _PIFV dword_402EF4
.text:00402EF4 dword_402EF4    dd 0                    ; DATA XREF: start-155↓o
.text:00402EF8 ___guard_fids_table dd rva sub_4056A0   ; DATA XREF: .text:00402D80↑o
.text:00402EFC                 dd rva sub_405720
.text:00402F00                 dd rva sub_4057A0
.text:00402F04                 dd rva sub_405820
.text:00402F08                 dd rva sub_4058A0
.text:00402F0C                 dd rva sub_405920
.text:00402F10                 dd rva sub_4059A0
.text:00402F14                 dd rva sub_405A20
.text:00402F18                 dd rva sub_405AA0
.text:00402F1C                 dd rva sub_405B20
.text:00402F20                 dd rva sub_405BA0
.text:00402F24                 dd rva sub_405C20
.text:00402F28                 dd rva sub_405CA0
.text:00402F2C                 dd rva sub_405D20
.text:00402F30                 dd rva sub_405DA0
.text:00402F34                 dd rva sub_405E20
.text:00402F38                 dd rva sub_405EA0
.text:00402F3C                 dd rva sub_405F20
.text:00402F40                 dd rva sub_405FA0
.text:00402F44                 dd rva sub_406020
.text:00402F48                 dd rva sub_4060A0
.text:00402F4C                 dd rva sub_406120
.text:00402F50                 dd rva sub_4061A0
.text:00402F54                 dd rva sub_406220
.text:00402F58                 dd rva sub_4062A0
.text:00402F5C                 dd rva sub_406320
.text:00402F60                 dd rva sub_4063A0
.text:00402F64                 dd rva sub_406420
.text:00402F68                 dd rva sub_4064A0
.text:00402F6C                 dd rva sub_406520
.text:00402F70                 dd rva sub_4065A0
.text:00402F74                 dd rva sub_406620
.text:00402F78                 dd rva sub_4066A0
.text:00402F7C                 dd rva sub_406720
.text:00402F80                 dd rva sub_4067A0
.text:00402F84                 dd rva sub_406820
.text:00402F88                 dd rva sub_4068A0
.text:00402F8C                 dd rva sub_406920
.text:00402F90                 dd rva sub_4069A0
.text:00402F94                 dd rva sub_406A20
.text:00402F98                 dd rva sub_406AA0
.text:00402F9C                 dd rva sub_406B20
.text:00402FA0                 dd rva sub_406BA0
.text:00402FA4                 dd rva sub_406C20
.text:00402FA8                 dd rva sub_406CA0
.text:00402FAC                 dd rva sub_406D20
.text:00402FB0                 dd rva sub_406DA0
.text:00402FB4                 dd rva sub_406E20
.text:00402FB8                 dd rva sub_406EA0
.text:00402FBC                 dd rva sub_406F20
.text:00402FC0                 dd rva sub_406FA0
.text:00402FC4                 dd rva sub_407020
.text:00402FC8                 dd rva sub_4070A0
.text:00402FCC                 dd rva sub_407120
.text:00402FD0                 dd rva sub_4071A0
.text:00402FD4                 dd rva sub_407220
.text:00402FD8                 dd rva sub_4072A0
.text:00402FDC                 dd rva sub_407320
.text:00402FE0                 dd rva sub_4073A0
.text:00402FE4                 dd rva sub_407420
.text:00402FE8                 dd rva sub_4074A0
.text:00402FEC                 dd rva sub_407520
.text:00402FF0                 dd rva sub_4075A0
.text:00402FF4                 dd rva sub_407620
.text:00402FF8                 dd rva sub_4076A0
.text:00402FFC                 dd rva sub_407720
.text:00403000                 dd rva sub_4077A0
.text:00403004                 dd rva sub_407820
.text:00403008                 dd rva sub_4078A0
.text:0040300C                 dd rva CompareFunction
.text:00403010                 dd rva sub_4111B0
.text:00403014                 dd rva sub_411220
.text:00403018                 dd rva _MFHeapFree@4    ; MFHeapFree(x)
.text:0040301C                 dd rva sub_4113D0
.text:00403020                 dd rva sub_4114A0
.text:00403024                 dd rva sub_411520
.text:00403028                 dd rva ?CompareLangIDs@@YAHPBX0@Z ; CompareLangIDs(void const *,void const *)
.text:0040302C                 dd rva sub_412050
.text:00403030                 dd rva pre_c_init
.text:00403034                 dd rva pre_cpp_init
.text:00403038                 dd rva start
.text:0040303C                 dd rva @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00403040                 dd rva ?__CxxUnhandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ; __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *)
.text:00403044                 dd rva sub_4127E0
.text:00403048                 dd rva UserMathErrorFunction
.text:0040304C                 dd rva __except_handler4
.text:00403050                 dd rva @_guard_check_icall_nop@4 ; _guard_check_icall_nop(x)
.text:00403054                 align 10h
.text:00403060 ; const wchar_t ppszDestEnd
.text:00403060 ppszDestEnd     dw 0                    ; DATA XREF: .text:004017C8↑o
.text:00403060                                         ; .text:off_402660↑o ...
.text:00403062                 align 4
.text:00403064 aSequential:                            ; DATA XREF: .data:off_413064↓o
.text:00403064                 text "UTF-16LE", 'sequential',0
.text:0040307A                 align 4
.text:0040307C aCircular:                              ; DATA XREF: .data:0041306C↓o
.text:0040307C                 text "UTF-16LE", 'circular',0
.text:0040308E                 align 10h
.text:00403090 aAppend:                                ; DATA XREF: .data:00413074↓o
.text:00403090                 text "UTF-16LE", 'append',0
.text:0040309E                 align 10h
.text:004030A0 aNewfile:                               ; DATA XREF: .data:0041307C↓o
.text:004030A0                 text "UTF-16LE", 'newfile',0
.text:004030B0 aPrealloc:                              ; DATA XREF: .data:00413084↓o
.text:004030B0                 text "UTF-16LE", 'prealloc',0
.text:004030C2                 align 4
.text:004030C4 aRealtime:                              ; DATA XREF: .data:0041308C↓o
.text:004030C4                 text "UTF-16LE", 'realtime',0
.text:004030D6                 align 4
.text:004030D8 aDelayopen:                             ; DATA XREF: .data:00413094↓o
.text:004030D8                 text "UTF-16LE", 'delayopen',0
.text:004030EC aBufferonly:                            ; DATA XREF: .data:0041309C↓o
.text:004030EC                 text "UTF-16LE", 'bufferonly',0
.text:00403102                 align 4
.text:00403104 aPrivate:                               ; DATA XREF: .data:004130A4↓o
.text:00403104                 text "UTF-16LE", 'private',0
.text:00403114 aHeader:                                ; DATA XREF: .data:004130AC↓o
.text:00403114                 text "UTF-16LE", 'header',0
.text:00403122                 align 4
.text:00403124 aGlobalsequence:                        ; DATA XREF: .data:004130B4↓o
.text:00403124                 text "UTF-16LE", 'globalsequence',0
.text:00403142                 align 4
.text:00403144 aLocalsequence:                         ; DATA XREF: .data:004130BC↓o
.text:00403144                 text "UTF-16LE", 'localsequence',0
.text:00403160 aRelog:                                 ; DATA XREF: .data:004130C4↓o
.text:00403160                 text "UTF-16LE", 'relog',0
.text:0040316C aPagedmemory:                           ; DATA XREF: .data:004130CC↓o
.text:0040316C                 text "UTF-16LE", 'pagedmemory',0
.text:00403184 aBufferinterfac:                        ; DATA XREF: .data:004130D4↓o
.text:00403184                 text "UTF-16LE", 'bufferinterface',0
.text:004031A4 aAddtotriagedum:                        ; DATA XREF: .data:004130DC↓o
.text:004031A4                 text "UTF-16LE", 'addtotriagedump',0
.text:004031C4 ; const wchar_t String1
.text:004031C4 String1:                                ; DATA XREF: _wmain+FA↓o
.text:004031C4                                         ; GetNamespace(_LOGMAN_NS *)+149↓o ...
.text:004031C4                 text "UTF-16LE", 'session',0
.text:004031D4 ; const wchar_t aAutosession
.text:004031D4 aAutosession:                           ; DATA XREF: _wmain+10B↓o
.text:004031D4                                         ; GetNamespace(_LOGMAN_NS *)+165↓o
.text:004031D4                 text "UTF-16LE", 'autosession',0
.text:004031EC ; const wchar_t aSystem
.text:004031EC aSystem:                                ; DATA XREF: _wmain+2BA↓o
.text:004031EC                                         ; SetTraceValues(IDataCollector *)+31A↓o ...
.text:004031EC                 text "UTF-16LE", 'system',0
.text:004031FA                 align 4
.text:004031FC asc_4031FC:                             ; DATA XREF: _wmain+329↓o
.text:004031FC                 text "UTF-16LE", ' * ',0
.text:00403204 asc_403204:                             ; DATA XREF: _wmain+46A↓o
.text:00403204                                         ; DisplayDataSets(_LOGMAN_NS *)+C5↓o ...
.text:00403204                 text "UTF-16LE", 0Ah,0
.text:00403208 ; const wchar_t asc_403208
.text:00403208 asc_403208:                             ; DATA XREF: _wmain+48C↓o
.text:00403208                                         ; sub_4096BC+66↓o ...
.text:00403208                 text "UTF-16LE", '*',0
.text:0040320C ; const WCHAR LibFileName
.text:0040320C LibFileName:                            ; DATA XREF: sub_40E842+E↓o
.text:0040320C                 text "UTF-16LE", 'pdh.dll',0
.text:0040321C ; const wchar_t aOSgSdA0x7S
.text:0040321C aOSgSdA0x7S:                            ; DATA XREF: InitializeComSecurity(void)+51↓o
.text:0040321C                 text "UTF-16LE", 'O:%sG:%sD:(A;;0x7;;;%s)',0
.text:0040324C ; const wchar_t aStart
.text:0040324C aStart:                                 ; DATA XREF: SetSchedule(IDataCollectorSet *)+62↓o
.text:0040324C                 text "UTF-16LE", 'start',0
.text:00403258 ; const wchar_t aStop
.text:00403258 aStop:                                  ; DATA XREF: SetSchedule(IDataCollectorSet *)+81↓o
.text:00403258                 text "UTF-16LE", 'stop',0
.text:00403262                 align 4
.text:00403264 ; const wchar_t Mode
.text:00403264 Mode:                                   ; DATA XREF: sub_409E12+129↓o
.text:00403264                                         ; sub_40AAF8+165↓o ...
.text:00403264                 text "UTF-16LE", 'r',0
.text:00403268 ; const wchar_t Delimiter
.text:00403268 Delimiter:                              ; DATA XREF: sub_409E12:loc_40A138↓o
.text:00403268                                         ; sub_409E12:loc_40A421↓o
.text:00403268                 text "UTF-16LE", 0Dh,0Ah,0
.text:0040326E                 align 10h
.text:00403270 ; const wchar_t aBin
.text:00403270 aBin:                                   ; DATA XREF: .text:off_401008↑o
.text:00403270                                         ; .text:004016B4↑o ...
.text:00403270                 text "UTF-16LE", 'bin',0
.text:00403278 ; const wchar_t aBincirc
.text:00403278 aBincirc:                               ; DATA XREF: .text:00401014↑o
.text:00403278                                         ; sub_40B1DF+3D↓o
.text:00403278                 text "UTF-16LE", 'bincirc',0
.text:00403288 aCsv:                                   ; DATA XREF: .text:00401020↑o
.text:00403288                 text "UTF-16LE", 'csv',0
.text:00403290 aTsv:                                   ; DATA XREF: .text:0040102C↑o
.text:00403290                 text "UTF-16LE", 'tsv',0
.text:00403298 aSql:                                   ; DATA XREF: .text:00401038↑o
.text:00403298                 text "UTF-16LE", 'sql',0
.text:004032A0 ; const wchar_t asc_4032A0
.text:004032A0 asc_4032A0:                             ; DATA XREF: sub_40A742+29↓o
.text:004032A0                                         ; sub_40A742:loc_40A82F↓o
.text:004032A0                 text "UTF-16LE", '(),',0
.text:004032A8 ; const wchar_t SubStr
.text:004032A8 SubStr:                                 ; DATA XREF: sub_40AAF8+218↓o
.text:004032A8                                         ; sub_40AAF8+24B↓o
.text:004032A8                 text "UTF-16LE", '"',0
.text:004032AC ; const wchar_t asc_4032AC
.text:004032AC asc_4032AC:                             ; DATA XREF: sub_40AAF8+263↓o
.text:004032AC                                         ; sub_40AAF8:loc_40AD80↓o ...
.text:004032AC                 text "UTF-16LE", 0Ah
.text:004032AC                 text "UTF-16LE", 9,' ',0
.text:004032B4 ; const wchar_t aPerf
.text:004032B4 aPerf:                                  ; DATA XREF: SetTraceValues(IDataCollector *)+308↓o
.text:004032B4                 text "UTF-16LE", 'perf',0
.text:004032BE                 align 10h
.text:004032C0 ; const wchar_t aCycle
.text:004032C0 aCycle:                                 ; DATA XREF: SetTraceValues(IDataCollector *):loc_40B592↓o
.text:004032C0                 text "UTF-16LE", 'cycle',0
.text:004032CC ; const wchar_t aNnnnnn
.text:004032CC aNnnnnn:                                ; DATA XREF: sub_40BF14:loc_40BFAE↓o
.text:004032CC                 text "UTF-16LE", 'nnnnnn',0
.text:004032DA                 align 4
.text:004032DC ; const wchar_t aMmddhhmm
.text:004032DC aMmddhhmm:                              ; DATA XREF: sub_40BF14:loc_40BFCC↓o
.text:004032DC                 text "UTF-16LE", 'mmddhhmm',0
.text:004032EE                 align 10h
.text:004032F0 ; const wchar_t aService
.text:004032F0 aService:                               ; DATA XREF: GetNamespace(_LOGMAN_NS *)+12D↓o
.text:004032F0                                         ; GetNamespace(_LOGMAN_NS *)+249↓o
.text:004032F0                 text "UTF-16LE", 'service',0
.text:00403300 ; const wchar_t aLegacy
.text:00403300 aLegacy:                                ; DATA XREF: GetNamespace(_LOGMAN_NS *)+17D↓o
.text:00403300                 text "UTF-16LE", 'legacy',0
.text:0040330E                 align 10h
.text:00403310 ; const wchar_t pszFormat
.text:00403310 pszFormat:                              ; DATA XREF: GetNamespace(_LOGMAN_NS *)+25D↓o
.text:00403310                                         ; LoadMUILibraryW(x,x,x)+2D8↓o
.text:00403310                 text "UTF-16LE", '%s\%s',0
.text:0040331C aSession_0:                             ; DATA XREF: DisplayDataSets(_LOGMAN_NS *)+78↓o
.text:0040331C                 text "UTF-16LE", 'session\*',0
.text:00403330 ; const OLECHAR aService_0
.text:00403330 aService_0:                             ; DATA XREF: DisplayDataSets(_LOGMAN_NS *):loc_40CE55↓o
.text:00403330                 text "UTF-16LE", 'service\*',0
.text:00403344 asc_403344:                             ; DATA XREF: DisplayDataSets(_LOGMAN_NS *):loc_40CE81↓o
.text:00403344                                         ; sub_40D9B5:loc_40DB48↓o ...
.text:00403344                 text "UTF-16LE", '-',0
.text:00403348 ; const OLECHAR aLogmanXsl
.text:00403348 aLogmanXsl:                             ; DATA XREF: sub_40D6AA+3A↓o
.text:00403348                 text "UTF-16LE", 'logman.xsl',0
.text:0040335E                 align 10h
.text:00403360 a118s220s3S:                            ; DATA XREF: sub_40D9B5+183↓o
.text:00403360                 text "UTF-16LE", '%1!-18s!  %2!-20s! %3!s!',0Ah,0
.text:00403394                 align 8
.text:00403398 a0x102x220s3S:                          ; DATA XREF: sub_40D9B5+334↓o
.text:00403398                 text "UTF-16LE", '0x%1!02x!                %2!-20s! %3!s!',0Ah,0
.text:004033EA                 align 4
.text:004033EC a0x1016i64x220s:                        ; DATA XREF: sub_40D9B5+309↓o
.text:004033EC                 text "UTF-16LE", '0x%1!016I64x!  %2!-20s! %3!s!',0Ah,0
.text:0040342A                 align 10h
.text:00403430 a0x108x220s3S:                          ; DATA XREF: sub_40D9B5+2E5↓o
.text:00403430                 text "UTF-16LE", '0x%1!08x!          %2!-20s! %3!s!',0Ah,0
.text:00403476                 align 4
.text:00403478 a140s238s:                              ; DATA XREF: DisplayProvider(_PLAPROVIDER *,ushort const *,int,int *)+119↓o
.text:00403478                 text "UTF-16LE", '%1!-40s! %2!-38s!',0Ah,0
.text:0040349E                 align 10h
.text:004034A0 asc_4034A0:                             ; DATA XREF: sub_40E057+11↓o
.text:004034A0                                         ; sub_40E057:loc_40E0C5↓o ...
.text:004034A0                 text "UTF-16LE", ' ',0
.text:004034A4 ; const wchar_t aS
.text:004034A4 aS:                                     ; DATA XREF: sub_40E057+18↓o
.text:004034A4                 text "UTF-16LE", '%*s',0
.text:004034AC ; const wchar_t Format
.text:004034AC Format:                                 ; DATA XREF: sub_40E16F+121↓o
.text:004034AC                 text "UTF-16LE", '%c %c',0
.text:004034B8 dword_4034B8    dd 3AC66736h, 4CFFCC59h, 0F58D1581h, 6B81390Eh
.text:004034B8                                         ; DATA XREF: sub_40AAF8+4E1↓o
.text:004034C8 dword_4034C8    dd 54DEA73Ah, 42A4ED1Fh, 633E71AFh, 74F156D0h
.text:004034C8                                         ; DATA XREF: sub_40AAF8+4C7↓o
.text:004034D8 dword_4034D8    dd 222962ABh, 4B886180h, 6B3425A8h, 4AA2F275h
.text:004034D8                                         ; DATA XREF: sub_40AAF8+4FB↓o
.text:004034E8 dword_4034E8    dd 4 dup(0)             ; DATA XREF: sub_40AAF8+3CA↓o
.text:004034F8 dword_4034F8    dd 9E814AADh, 11D23204h, 6000829Ah, 3969A808h
.text:004034F8                                         ; DATA XREF: sub_40AAF8+4AD↓o
.text:00403508 ; const IID rclsid
.text:00403508 rclsid          dd 3837521h             ; Data1
.text:00403508                                         ; DATA XREF: _wmain+6B9↓o
.text:00403508                                         ; GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+40↓o
.text:00403508                 dw 98Bh                 ; Data2
.text:00403508                 dw 11D8h                ; Data3
.text:00403508                 db 94h, 14h, 2 dup(50h), 54h, 50h, 2 dup(30h); Data4
.text:00403518 dword_403518    dd 3837514h, 11D8098Bh, 50501494h, 30305054h
.text:00403518                                         ; DATA XREF: sub_40B845+21↓o
.text:00403528 ; const IID riid
.text:00403528 riid            dd 3837520h             ; Data1
.text:00403528                                         ; DATA XREF: _wmain+6B1↓o
.text:00403528                                         ; GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+38↓o ...
.text:00403528                 dw 98Bh                 ; Data2
.text:00403528                 dw 11D8h                ; Data3
.text:00403528                 db 94h, 14h, 2 dup(50h), 54h, 50h, 2 dup(30h); Data4
.text:00403538 ; const IID stru_403538
.text:00403538 stru_403538     dd 3837513h             ; Data1
.text:00403538                                         ; DATA XREF: sub_40CA6F+2A↓o
.text:00403538                 dw 98Bh                 ; Data2
.text:00403538                 dw 11D8h                ; Data3
.text:00403538                 db 94h, 14h, 2 dup(50h), 54h, 50h, 2 dup(30h); Data4
.text:00403548 ; const IID stru_403548
.text:00403548 stru_403548     dd 3837525h             ; Data1
.text:00403548                                         ; DATA XREF: DisplayDataSets(_LOGMAN_NS *)+E0↓o
.text:00403548                 dw 98Bh                 ; Data2
.text:00403548                 dw 11D8h                ; Data3
.text:00403548                 db 94h, 14h, 2 dup(50h), 54h, 50h, 2 dup(30h); Data4
.text:00403558 ; const IID stru_403558
.text:00403558 stru_403558     dd 3837524h             ; Data1
.text:00403558                                         ; DATA XREF: DisplayDataSets(_LOGMAN_NS *)+D8↓o
.text:00403558                 dw 98Bh                 ; Data2
.text:00403558                 dw 11D8h                ; Data3
.text:00403558                 db 94h, 14h, 2 dup(50h), 54h, 50h, 2 dup(30h); Data4
.text:00403568 dword_403568    dd 3837506h, 11D8098Bh, 50501494h, 30305054h
.text:00403568                                         ; DATA XREF: SetCounterValues(IDataCollector *,int *)+1B↓o
.text:00403578 dword_403578    dd 3837516h, 11D8098Bh, 50501494h, 30305054h
.text:00403578                                         ; DATA XREF: sub_40B60B+23↓o
.text:00403588 ; const IID stru_403588
.text:00403588 stru_403588     dd 3837511h             ; Data1
.text:00403588                                         ; DATA XREF: sub_40AAF8+68↓o
.text:00403588                                         ; sub_40CB46+25↓o
.text:00403588                 dw 98Bh                 ; Data2
.text:00403588                 dw 11D8h                ; Data3
.text:00403588                 db 94h, 14h, 2 dup(50h), 54h, 50h, 2 dup(30h); Data4
.text:00403598 ; const IID stru_403598
.text:00403598 stru_403598     dd 3837512h             ; Data1
.text:00403598                                         ; DATA XREF: sub_4091DF+BC↓o
.text:00403598                                         ; MergeProviders(ITraceDataProviderCollection *,ITraceDataProviderCollection *)+DA↓o ...
.text:00403598                 dw 98Bh                 ; Data2
.text:00403598                 dw 11D8h                ; Data3
.text:00403598                 db 94h, 14h, 2 dup(50h), 54h, 50h, 2 dup(30h); Data4
.text:004035A8 dword_4035A8    dd 383750Bh, 11D8098Bh, 50501494h, 30305054h
.text:004035A8                                         ; DATA XREF: SetTraceValues(IDataCollector *)+25↓o
.text:004035A8                                         ; ResolveProviders(IDataCollectorSet *)+159↓o
.text:004035B8 dword_4035B8    dd 383751Ah, 11D8098Bh, 50501494h, 30305054h
.text:004035B8                                         ; DATA XREF: SetApiTraceValues(IDataCollector *,int *)+32↓o
.text:004035C8 ; const IID stru_4035C8
.text:004035C8 stru_4035C8     dd 3837510h             ; Data1
.text:004035C8                                         ; DATA XREF: sub_40AAF8+60↓o
.text:004035C8                                         ; sub_40CB46+1C↓o
.text:004035C8                 dw 98Bh                 ; Data2
.text:004035C8                 dw 11D8h                ; Data3
.text:004035C8                 db 94h, 14h, 2 dup(50h), 54h, 50h, 2 dup(30h); Data4
.text:004035D8 dword_4035D8    dd 3837533h, 11D8098Bh, 50501494h, 30305054h
.text:004035D8                                         ; DATA XREF: sub_40D9B5+221↓o
.text:004035E8 dword_4035E8    dd 20404h, 0            ; DATA XREF: sub_4091DF+5F↓o
.text:004035E8                                         ; MergeProviders(ITraceDataProviderCollection *,ITraceDataProviderCollection *)+59↓o ...
.text:004035F0                 dd 0C0h, 46000000h
.text:004035F8 dword_4035F8    dd 20400h, 0            ; DATA XREF: _wmain+5FC↓o
.text:004035F8                                         ; sub_40AAF8+633↓o
.text:00403600                 dd 0C0h, 46000000h
.text:00403608 dword_403608    dd 2 dup(0)             ; DATA XREF: sub_4093C3+B0↓o
.text:00403610                 dd 0C0h, 46000000h
.text:00403618 ; const IID stru_403618
.text:00403618 stru_403618     dd 2933BF81h            ; Data1
.text:00403618                                         ; DATA XREF: sub_4093C3+37↓o
.text:00403618                 dw 7B36h                ; Data2
.text:00403618                 dw 11D2h                ; Data3
.text:00403618                 db 0B2h, 0Eh, 0, 0C0h, 4Fh, 98h, 3Eh, 60h; Data4
.text:00403628 ; const IID stru_403628
.text:00403628 stru_403628     dd 88D96A06h            ; Data1
.text:00403628                                         ; DATA XREF: sub_4093C3+3F↓o
.text:00403628                 dw 0F192h               ; Data2
.text:00403628                 dw 11D4h                ; Data3
.text:00403628                 db 0A6h, 5Fh, 0, 40h, 96h, 32h, 51h, 0E5h; Data4
.text:00403638 ; const CHAR DefaultChar[2]
.text:00403638 DefaultChar     db '_',0                ; DATA XREF: sub_40E5A2+EF↓o
.text:0040363A                 align 4
.text:0040363C a1S:                                    ; DATA XREF: sub_40E9E0+12F↓o
.text:0040363C                 text "UTF-16LE", '%1!s!',0Ah,0
.text:0040364A                 align 4
.text:0040364C ; const wchar_t asc_40364C
.text:0040364C asc_40364C:                             ; DATA XREF: ArgpLoadArguments(void)+94↓o
.text:0040364C                                         ; ArgpLoadArguments(void)+118↓o ...
.text:0040364C                 text "UTF-16LE", '`',0
.text:00403650 ; const wchar_t aSSSS
.text:00403650 aSSSS:                                  ; DATA XREF: ArgpLoadArguments(void)+2CC↓o
.text:00403650                 text "UTF-16LE", '%s %s[%s|%s]',0
.text:0040366A                 align 4
.text:0040366C ; const wchar_t aSS_0
.text:0040366C aSS_0:                                  ; DATA XREF: ArgpLoadArguments(void)+2F2↓o
.text:0040366C                 text "UTF-16LE", '%s %s',0
.text:00403678 asc_403678:                             ; DATA XREF: sub_40F3C0+F↓o
.text:00403678                 text "UTF-16LE", ']',0
.text:0040367C asc_40367C:                             ; DATA XREF: sub_40F3C0+3A↓o
.text:0040367C                 text "UTF-16LE", '[-]',0
.text:00403684 asc_403684:                             ; DATA XREF: sub_40F3C0+57↓o
.text:00403684                                         ; sub_40F7E5+AB↓o ...
.text:00403684                 text "UTF-16LE", '[',0
.text:00403688 a1S2S3S4S5S:                            ; DATA XREF: sub_40F3C0+68↓o
.text:00403688                 text "UTF-16LE", '%1!s!%2!s!%3!s!%4!s!%5!s!',0
.text:004036BC asc_4036BC:                             ; DATA XREF: sub_40F3C0+86↓o
.text:004036BC                 text "UTF-16LE", ' [',0
.text:004036C2                 align 4
.text:004036C4 asc_4036C4:                             ; DATA XREF: sub_40F3C0+8D↓o
.text:004036C4                 text "UTF-16LE", ' <',0
.text:004036CA                 align 4
.text:004036CC a1S1S:                                  ; DATA XREF: sub_40F3C0+AB↓o
.text:004036CC                 text "UTF-16LE", '%1!s! [%1!s! [...]]',0
.text:004036F4 asc_4036F4:                             ; DATA XREF: sub_40F3C0+CC↓o
.text:004036F4                 text "UTF-16LE", '>',0
.text:004036F8 ; const wchar_t word_4036F8
.text:004036F8 word_4036F8     dw 1                    ; DATA XREF: sub_40F4B2+3D↓o
.text:004036F8                                         ; sub_40F4B2+66↓o
.text:004036FA                 align 4
.text:004036FC asc_4036FC:                             ; DATA XREF: sub_40F4B2:loc_40F4F7↓o
.text:004036FC                                         ; sub_40F543:loc_40F62F↓o ...
.text:004036FC                 text "UTF-16LE", '  ',0
.text:00403702                 align 4
.text:00403704 asc_403704:                             ; DATA XREF: sub_40F7E5+A2↓o
.text:00403704                                         ; sub_40F7E5+FF↓o ...
.text:00403704                 text "UTF-16LE", '<',0
.text:00403708 ; const wchar_t asc_403708
.text:00403708 asc_403708:                             ; DATA XREF: sub_40F7E5:loc_40F897↓o
.text:00403708                                         ; sub_40F7E5:loc_40F8F4↓o ...
.text:00403708                 text "UTF-16LE", '|',0
.text:0040370C asc_40370C:                             ; DATA XREF: sub_40F7E5+135↓o
.text:0040370C                                         ; sub_40FCFE+69↓o
.text:0040370C                 text "UTF-16LE", '> ',0
.text:00403712                 align 4
.text:00403714 asc_403714:                             ; DATA XREF: sub_40F7E5+13E↓o
.text:00403714                 text "UTF-16LE", '] ',0
.text:0040371A                 align 4
.text:0040371C aMicrosoft:                             ; DATA XREF: ArgpPrintVersion(void)+88↓o
.text:0040371C                 text "UTF-16LE", 'Microsoft ®',0
.text:00403734 ; const WCHAR SubBlock
.text:00403734 SubBlock:                               ; DATA XREF: ArgpPrintVersion(void)+11D↓o
.text:00403734                 text "UTF-16LE", '\VarFileInfo\Translation',0
.text:00403766                 align 4
.text:00403768 aProductversion:                        ; DATA XREF: ArgpPrintVersion(void)+13E↓o
.text:00403768                 text "UTF-16LE", 'ProductVersion',0
.text:00403786                 align 4
.text:00403788 ; const wchar_t aStringfileinfo
.text:00403788 aStringfileinfo:                        ; DATA XREF: ArgpPrintVersion(void)+148↓o
.text:00403788                                         ; ArgpPrintVersion(void)+191↓o
.text:00403788                 text "UTF-16LE", '\StringFileInfo\%04x%04x\%s',0
.text:004037C0 aOriginalfilena:                        ; DATA XREF: ArgpPrintVersion(void)+183↓o
.text:004037C0                 text "UTF-16LE", 'OriginalFilename',0
.text:004037E2                 align 4
.text:004037E4 a1S2S3S:                                ; DATA XREF: ArgpPrintVersion(void)+1D4↓o
.text:004037E4                 text "UTF-16LE", 0Ah
.text:004037E4                 text "UTF-16LE", '%1!s! %2!s! (%3!s!)',0Ah
.text:004037E4                 text "UTF-16LE", 0Ah,0
.text:00403812                 align 4
.text:00403814 a116s26s:                               ; DATA XREF: sub_40FB64+40↓o
.text:00403814                 text "UTF-16LE", '%1!-16s! %2!-6s! = ',0
.text:0040383C aTrue:                                  ; DATA XREF: sub_40FB64+148↓o
.text:0040383C                 text "UTF-16LE", 'TRUE',0
.text:00403846                 align 4
.text:00403848 off_403848      dd offset loc_410040+6  ; DATA XREF: sub_40FB64:loc_40FCB6↓o
.text:0040384C aLse:
.text:0040384C                 text "UTF-16LE", 'LSE',0
.text:00403854 a1S_0:                                  ; DATA XREF: sub_40FB64:loc_40FCBC↓o
.text:00403854                 text "UTF-16LE", '%1!s!',0
.text:00403860 a120s:                                  ; DATA XREF: sub_40FB64+F1↓o
.text:00403860                 text "UTF-16LE", '%1!-20s!',0
.text:00403872                 align 4
.text:00403874 a126s220s:                              ; DATA XREF: sub_40FB64+104↓o
.text:00403874                 text "UTF-16LE", 0Ah
.text:00403874                 text "UTF-16LE", '%1!26s!%2!-20s!',0
.text:00403896                 align 4
.text:00403898 a102d202d302d:                          ; DATA XREF: sub_40FB64+CB↓o
.text:00403898                 text "UTF-16LE", '%1!02d!:%2!02d!:%3!02d!',0
.text:004038C8 a1D:                                    ; DATA XREF: sub_40FB64+7C↓o
.text:004038C8                 text "UTF-16LE", '%1!d!',0
.text:004038D4 a1S_1:                                  ; DATA XREF: sub_4104B3+67↓o
.text:004038D4                 text "UTF-16LE", '  %1!s!',0Ah,0
.text:004038E6                 align 4
.text:004038E8 asc_4038E8:                             ; DATA XREF: ArgExpandFiles(ushort * *,int):loc_410733↓o
.text:004038E8                 text "UTF-16LE", '.',0
.text:004038EC asc_4038EC:                             ; DATA XREF: ArgExpandFiles(ushort * *,int)+121↓o
.text:004038EC                 text "UTF-16LE", '..',0
.text:004038F2                 align 4
.text:004038F4 ; const wchar_t Str
.text:004038F4 Str:                                    ; DATA XREF: sub_4111B0+20↓o
.text:004038F4                                         ; sub_411220+1B↓o
.text:004038F4                 text "UTF-16LE", '-/',0
.text:004038FA                 align 4
.text:004038FC aEn:                                    ; DATA XREF: .text:off_401118↑o
.text:004038FC                 text "UTF-16LE", 'EN',0
.text:00403902                 align 4
.text:00403904 aDe:                                    ; DATA XREF: .text:00401120↑o
.text:00403904                 text "UTF-16LE", 'DE',0
.text:0040390A                 align 4
.text:0040390C aJa:                                    ; DATA XREF: .text:00401128↑o
.text:0040390C                 text "UTF-16LE", 'JA',0
.text:00403912                 align 4
.text:00403914 aKo:                                    ; DATA XREF: .text:00401130↑o
.text:00403914                 text "UTF-16LE", 'KO',0
.text:0040391A                 align 4
.text:0040391C aTw:                                    ; DATA XREF: .text:00401138↑o
.text:0040391C                 text "UTF-16LE", 'TW',0
.text:00403922                 align 4
.text:00403924 aCn:                                    ; DATA XREF: .text:00401140↑o
.text:00403924                 text "UTF-16LE", 'CN',0
.text:0040392A                 align 4
.text:0040392C aFr:                                    ; DATA XREF: .text:00401148↑o
.text:0040392C                 text "UTF-16LE", 'FR',0
.text:00403932                 align 4
.text:00403934 aEs:                                    ; DATA XREF: .text:00401150↑o
.text:00403934                 text "UTF-16LE", 'ES',0
.text:0040393A                 align 4
.text:0040393C aBr:                                    ; DATA XREF: .text:00401158↑o
.text:0040393C                 text "UTF-16LE", 'BR',0
.text:00403942                 align 4
.text:00403944 aIt:                                    ; DATA XREF: .text:00401160↑o
.text:00403944                 text "UTF-16LE", 'IT',0
.text:0040394A                 align 4
.text:0040394C aNl:                                    ; DATA XREF: .text:00401168↑o
.text:0040394C                 text "UTF-16LE", 'NL',0
.text:00403952                 align 4
.text:00403954 aSv_0:                                  ; DATA XREF: .text:00401170↑o
.text:00403954                 text "UTF-16LE", 'SV',0
.text:0040395A                 align 4
.text:0040395C aDa:                                    ; DATA XREF: .text:00401178↑o
.text:0040395C                 text "UTF-16LE", 'DA',0
.text:00403962                 align 4
.text:00403964 aFi:                                    ; DATA XREF: .text:00401180↑o
.text:00403964                 text "UTF-16LE", 'FI',0
.text:0040396A                 align 4
.text:0040396C aHu:                                    ; DATA XREF: .text:00401188↑o
.text:0040396C                 text "UTF-16LE", 'HU',0
.text:00403972                 align 4
.text:00403974 aNo:                                    ; DATA XREF: .text:00401190↑o
.text:00403974                 text "UTF-16LE", 'NO',0
.text:0040397A                 align 4
.text:0040397C aEl:                                    ; DATA XREF: .text:00401198↑o
.text:0040397C                 text "UTF-16LE", 'EL',0
.text:00403982                 align 4
.text:00403984 aPl:                                    ; DATA XREF: .text:004011A0↑o
.text:00403984                 text "UTF-16LE", 'PL',0
.text:0040398A                 align 4
.text:0040398C aRu:                                    ; DATA XREF: .text:004011A8↑o
.text:0040398C                 text "UTF-16LE", 'RU',0
.text:00403992                 align 4
.text:00403994 aCs:                                    ; DATA XREF: .text:004011B0↑o
.text:00403994                 text "UTF-16LE", 'CS',0
.text:0040399A                 align 4
.text:0040399C aPt:                                    ; DATA XREF: .text:004011B8↑o
.text:0040399C                 text "UTF-16LE", 'PT',0
.text:004039A2                 align 4
.text:004039A4 aTr:                                    ; DATA XREF: .text:004011C0↑o
.text:004039A4                 text "UTF-16LE", 'TR',0
.text:004039AA                 align 4
.text:004039AC aSk_0:                                  ; DATA XREF: .text:004011C8↑o
.text:004039AC                 text "UTF-16LE", 'SK',0
.text:004039B2                 align 4
.text:004039B4 aSl_0:                                  ; DATA XREF: .text:004011D0↑o
.text:004039B4                 text "UTF-16LE", 'SL',0
.text:004039BA                 align 4
.text:004039BC aAr_0:                                  ; DATA XREF: .text:004011D8↑o
.text:004039BC                 text "UTF-16LE", 'AR',0
.text:004039C2                 align 4
.text:004039C4 aHe:                                    ; DATA XREF: .text:004011E0↑o
.text:004039C4                 text "UTF-16LE", 'HE',0
.text:004039CA                 align 4
.text:004039CC aEu:                                    ; DATA XREF: .text:004011E8↑o
.text:004039CC                 text "UTF-16LE", 'EU',0
.text:004039D2                 align 4
.text:004039D4 aIs:                                    ; DATA XREF: .text:004011F0↑o
.text:004039D4                 text "UTF-16LE", 'IS',0
.text:004039DA                 align 4
.text:004039DC aSrLatnCs:                              ; DATA XREF: .text:off_4010E0↑o
.text:004039DC                                         ; .text:00401F6C↑o ...
.text:004039DC                 text "UTF-16LE", 'sr-Latn-CS',0
.text:004039F2                 align 4
.text:004039F4 aSrSpLatn:                              ; DATA XREF: .text:004010E4↑o
.text:004039F4                 text "UTF-16LE", 'sr-SP-Latn',0
.text:00403A0A                 align 4
.text:00403A0C aSrCyrlCs:                              ; DATA XREF: .text:004010E8↑o
.text:00403A0C                                         ; .text:004020D4↑o ...
.text:00403A0C                 text "UTF-16LE", 'sr-Cyrl-CS',0
.text:00403A22                 align 4
.text:00403A24 aSrSpCyrl:                              ; DATA XREF: .text:004010EC↑o
.text:00403A24                 text "UTF-16LE", 'sr-SP-Cyrl',0
.text:00403A3A                 align 4
.text:00403A3C aSrLatnBa:                              ; DATA XREF: .text:004010F0↑o
.text:00403A3C                                         ; .text:0040220C↑o ...
.text:00403A3C                 text "UTF-16LE", 'sr-Latn-BA',0
.text:00403A52                 align 4
.text:00403A54 aSrBaLatn:                              ; DATA XREF: .text:004010F4↑o
.text:00403A54                 text "UTF-16LE", 'sr-BA-Latn',0
.text:00403A6A                 align 4
.text:00403A6C aSrCyrlBa:                              ; DATA XREF: .text:004010F8↑o
.text:00403A6C                                         ; .text:00402254↑o ...
.text:00403A6C                 text "UTF-16LE", 'sr-Cyrl-BA',0
.text:00403A82                 align 4
.text:00403A84 aSrBaCyrl:                              ; DATA XREF: .text:004010FC↑o
.text:00403A84                 text "UTF-16LE", 'sr-BA-Cyrl',0
.text:00403A9A                 align 4
.text:00403A9C dword_403A9C    dd 0                    ; DATA XREF: .text:00401054↑o
.text:00403A9C                                         ; .text:00401058↑o ...
.text:00403AA0 aIuLatnCa:                              ; DATA XREF: .text:off_401108↑o
.text:00403AA0                                         ; .text:00402020↑o ...
.text:00403AA0                 text "UTF-16LE", 'iu-Latn-CA',0
.text:00403AB6                 align 4
.text:00403AB8 aIuCaLatn:                              ; DATA XREF: .text:0040110C↑o
.text:00403AB8                 text "UTF-16LE", 'iu-CA-Latn',0
.text:00403ACE                 align 10h
.text:00403AD0 aBsCyrlBa:                              ; DATA XREF: .text:off_401044↑o
.text:00403AD0                                         ; .text:0040229C↑o ...
.text:00403AD0                 text "UTF-16LE", 'bs-Cyrl-BA',0
.text:00403AE6                 align 4
.text:00403AE8 aBsBaCyrl:                              ; DATA XREF: .text:00401048↑o
.text:00403AE8                 text "UTF-16LE", 'bs-BA-Cyrl',0
.text:00403AFE                 align 10h
.text:00403B00 aBsLatnBa:                              ; DATA XREF: .text:0040104C↑o
.text:00403B00                                         ; .text:004021C4↑o ...
.text:00403B00                 text "UTF-16LE", 'bs-Latn-BA',0
.text:00403B16                 align 4
.text:00403B18 aBsBaLatn:                              ; DATA XREF: .text:00401050↑o
.text:00403B18                 text "UTF-16LE", 'bs-BA-Latn',0
.text:00403B2E                 align 10h
.text:00403B30 aZhHant:                                ; DATA XREF: .text:off_40105C↑o
.text:00403B30                                         ; .text:00402590↑o ...
.text:00403B30                 text "UTF-16LE", 'zh-Hant',0
.text:00403B40 aZhCht:                                 ; DATA XREF: .text:00401060↑o
.text:00403B40                 text "UTF-16LE", 'zh-CHT',0
.text:00403B4E                 align 10h
.text:00403B50 aZhHans:                                ; DATA XREF: .text:00401064↑o
.text:00403B50                                         ; .text:0040121C↑o ...
.text:00403B50                 text "UTF-16LE", 'zh-Hans',0
.text:00403B60 aZhChs:                                 ; DATA XREF: .text:00401068↑o
.text:00403B60                 text "UTF-16LE", 'zh-CHS',0
.text:00403B6E                 align 10h
.text:00403B70 ; const WCHAR Type
.text:00403B70 Type:                                   ; DATA XREF: RcConfig_Load+9↓o
.text:00403B70                                         ; LoadMUILibraryW(x,x,x)+B2↓o
.text:00403B70                 text "UTF-16LE", 'MUI',0
.text:00403B78 ; const wchar_t aSSSMui
.text:00403B78 aSSSMui:                                ; DATA XREF: LoadMUIFile+1F↓o
.text:00403B78                 text "UTF-16LE", '%s\%s\%s.mui',0
.text:00403B92                 align 4
.text:00403B94 ; const wchar_t aSSMui
.text:00403B94 aSSMui:                                 ; DATA XREF: LoadMUIFile+30↓o
.text:00403B94                 text "UTF-16LE", '%s\%s.mui',0
.text:00403BA8 aSSMui_0:                               ; DATA XREF: LoadMUIFile+49↓o
.text:00403BA8                 text "UTF-16LE", '.\%s\%s.mui',0
.text:00403BC0 ; const wchar_t aSMui
.text:00403BC0 aSMui:                                  ; DATA XREF: LoadMUIFile:loc_411933↓o
.text:00403BC0                 text "UTF-16LE", '.\%s.mui',0
.text:00403BD2                 align 4
.text:00403BD4 ; const wchar_t word_403BD4
.text:00403BD4 word_403BD4     dw 53F0h                ; DATA XREF: GetCHTLangauge+34↓o
.text:00403BD6                 dw 7063h
.text:00403BD8                 align 10h
.text:00403BE0 ; const WCHAR SubKey
.text:00403BE0 SubKey:                                 ; DATA XREF: GetInstallLanguage+2E↓o
.text:00403BE0                 text "UTF-16LE", 'Software\Microsoft\Active Setup\Installed Component'
.text:00403BE0                 text "UTF-16LE", 's\{89820200-ECBD-11CF-8B85-00AA005B4383}',0
.text:00403C98 ; const WCHAR ValueName
.text:00403C98 ValueName:                              ; DATA XREF: GetInstallLanguage+4D↓o
.text:00403C98                 text "UTF-16LE", 'Locale',0
.text:00403CA6                 align 4
.text:00403CA8 aAr:                                    ; DATA XREF: .text:off_4011F8↑o
.text:00403CA8                                         ; .text:00402674↑o
.text:00403CA8                 text "UTF-16LE", 'ar',0
.text:00403CAE                 align 10h
.text:00403CB0 aBg:                                    ; DATA XREF: .text:00401204↑o
.text:00403CB0                                         ; .text:004026EC↑o
.text:00403CB0                 text "UTF-16LE", 'bg',0
.text:00403CB6                 align 4
.text:00403CB8 aCa:                                    ; DATA XREF: .text:00401210↑o
.text:00403CB8                                         ; .text:0040272C↑o
.text:00403CB8                 text "UTF-16LE", 'ca',0
.text:00403CBE                 align 10h
.text:00403CC0 aCs_0:                                  ; DATA XREF: .text:00401228↑o
.text:00403CC0                                         ; .text:0040274C↑o
.text:00403CC0                 text "UTF-16LE", 'cs',0
.text:00403CC6                 align 4
.text:00403CC8 aDa_0:                                  ; DATA XREF: .text:00401234↑o
.text:00403CC8                                         ; .text:0040275C↑o
.text:00403CC8                 text "UTF-16LE", 'da',0
.text:00403CCE                 align 10h
.text:00403CD0 aDe_0:                                  ; DATA XREF: .text:00401240↑o
.text:00403CD0                                         ; .text:00402764↑o
.text:00403CD0                 text "UTF-16LE", 'de',0
.text:00403CD6                 align 4
.text:00403CD8 aEl_0:                                  ; DATA XREF: .text:0040124C↑o
.text:00403CD8                                         ; .text:00402790↑o
.text:00403CD8                 text "UTF-16LE", 'el',0
.text:00403CDE                 align 10h
.text:00403CE0 aEn_0:                                  ; DATA XREF: .text:00401258↑o
.text:00403CE0                                         ; .text:00402798↑o
.text:00403CE0                 text "UTF-16LE", 'en',0
.text:00403CE6                 align 4
.text:00403CE8 aEs_0:                                  ; DATA XREF: .text:00401264↑o
.text:00403CE8                                         ; .text:004027E4↑o
.text:00403CE8                 text "UTF-16LE", 'es',0
.text:00403CEE                 align 10h
.text:00403CF0 aFi_0:                                  ; DATA XREF: .text:00401270↑o
.text:00403CF0                                         ; .text:0040286C↑o
.text:00403CF0                 text "UTF-16LE", 'fi',0
.text:00403CF6                 align 4
.text:00403CF8 aFr_0:                                  ; DATA XREF: .text:0040127C↑o
.text:00403CF8                                         ; .text:00402884↑o
.text:00403CF8                 text "UTF-16LE", 'fr',0
.text:00403CFE                 align 10h
.text:00403D00 aHe_0:                                  ; DATA XREF: .text:00401288↑o
.text:00403D00                                         ; .text:00402910↑o
.text:00403D00                 text "UTF-16LE", 'he',0
.text:00403D06                 align 4
.text:00403D08 aHu_0:                                  ; DATA XREF: .text:00401294↑o
.text:00403D08                                         ; .text:00402934↑o
.text:00403D08                 text "UTF-16LE", 'hu',0
.text:00403D0E                 align 10h
.text:00403D10 aIs_0:                                  ; DATA XREF: .text:004012A0↑o
.text:00403D10                                         ; .text:00402964↑o
.text:00403D10                 text "UTF-16LE", 'is',0
.text:00403D16                 align 4
.text:00403D18 aIt_0:                                  ; DATA XREF: .text:004012AC↑o
.text:00403D18                                         ; .text:0040296C↑o
.text:00403D18                 text "UTF-16LE", 'it',0
.text:00403D1E                 align 10h
.text:00403D20 aJa_0:                                  ; DATA XREF: .text:004012B8↑o
.text:00403D20                                         ; .text:0040298C↑o
.text:00403D20                 text "UTF-16LE", 'ja',0
.text:00403D26                 align 4
.text:00403D28 aKo_0:                                  ; DATA XREF: .text:004012C4↑o
.text:00403D28                                         ; .text:004029BC↑o
.text:00403D28                 text "UTF-16LE", 'ko',0
.text:00403D2E                 align 10h
.text:00403D30 aNl_0:                                  ; DATA XREF: .text:004012D0↑o
.text:00403D30                                         ; .text:00402A94↑o
.text:00403D30                 text "UTF-16LE", 'nl',0
.text:00403D36                 align 4
.text:00403D38 aNo_0:                                  ; DATA XREF: .text:004012DC↑o
.text:00403D38                                         ; .text:00402AA8↑o
.text:00403D38                 text "UTF-16LE", 'no',0
.text:00403D3E                 align 10h
.text:00403D40 aPl_0:                                  ; DATA XREF: .text:004012E8↑o
.text:00403D40                                         ; .text:00402AE4↑o
.text:00403D40                 text "UTF-16LE", 'pl',0
.text:00403D46                 align 4
.text:00403D48 aPt_0:                                  ; DATA XREF: .text:004012F4↑o
.text:00403D48                                         ; .text:00402AFC↑o
.text:00403D48                 text "UTF-16LE", 'pt',0
.text:00403D4E                 align 10h
.text:00403D50 aRm:                                    ; DATA XREF: .text:00401300↑o
.text:00403D50                                         ; .text:00402B34↑o
.text:00403D50                 text "UTF-16LE", 'rm',0
.text:00403D56                 align 4
.text:00403D58 aRo:                                    ; DATA XREF: .text:0040130C↑o
.text:00403D58                                         ; .text:00402B3C↑o
.text:00403D58                 text "UTF-16LE", 'ro',0
.text:00403D5E                 align 10h
.text:00403D60 aRu_0:                                  ; DATA XREF: .text:00401318↑o
.text:00403D60                                         ; .text:00402B48↑o
.text:00403D60                 text "UTF-16LE", 'ru',0
.text:00403D66                 align 4
.text:00403D68 aHr:                                    ; DATA XREF: .text:00401324↑o
.text:00403D68                                         ; .text:00402920↑o
.text:00403D68                 text "UTF-16LE", 'hr',0
.text:00403D6E                 align 10h
.text:00403D70 aSk:                                    ; DATA XREF: .text:00401330↑o
.text:00403D70                                         ; .text:00402B94↑o
.text:00403D70                 text "UTF-16LE", 'sk',0
.text:00403D76                 align 4
.text:00403D78 aSq:                                    ; DATA XREF: .text:0040133C↑o
.text:00403D78                                         ; .text:00402BD4↑o
.text:00403D78                 text "UTF-16LE", 'sq',0
.text:00403D7E                 align 10h
.text:00403D80 aSv:                                    ; DATA XREF: .text:00401348↑o
.text:00403D80                                         ; .text:00402C10↑o
.text:00403D80                 text "UTF-16LE", 'sv',0
.text:00403D86                 align 4
.text:00403D88 aTh:                                    ; DATA XREF: .text:00401354↑o
.text:00403D88                                         ; .text:00402C4C↑o
.text:00403D88                 text "UTF-16LE", 'th',0
.text:00403D8E                 align 10h
.text:00403D90 aTr_0:                                  ; DATA XREF: .text:00401360↑o
.text:00403D90                                         ; .text:00402C74↑o
.text:00403D90                 text "UTF-16LE", 'tr',0
.text:00403D96                 align 4
.text:00403D98 aUr:                                    ; DATA XREF: .text:0040136C↑o
.text:00403D98                                         ; .text:00402CB4↑o
.text:00403D98                 text "UTF-16LE", 'ur',0
.text:00403D9E                 align 10h
.text:00403DA0 aId:                                    ; DATA XREF: .text:00401378↑o
.text:00403DA0                                         ; .text:0040294C↑o
.text:00403DA0                 text "UTF-16LE", 'id',0
.text:00403DA6                 align 4
.text:00403DA8 aUk:                                    ; DATA XREF: .text:00401384↑o
.text:00403DA8                                         ; .text:00402CAC↑o
.text:00403DA8                 text "UTF-16LE", 'uk',0
.text:00403DAE                 align 10h
.text:00403DB0 aBe:                                    ; DATA XREF: .text:00401390↑o
.text:00403DB0                                         ; .text:004026E4↑o
.text:00403DB0                 text "UTF-16LE", 'be',0
.text:00403DB6                 align 4
.text:00403DB8 aSl:                                    ; DATA XREF: .text:0040139C↑o
.text:00403DB8                                         ; .text:00402B9C↑o
.text:00403DB8                 text "UTF-16LE", 'sl',0
.text:00403DBE                 align 10h
.text:00403DC0 aEt:                                    ; DATA XREF: .text:004013A8↑o
.text:00403DC0                                         ; .text:00402844↑o
.text:00403DC0                 text "UTF-16LE", 'et',0
.text:00403DC6                 align 4
.text:00403DC8 aLv:                                    ; DATA XREF: .text:004013B4↑o
.text:00403DC8                                         ; .text:00402A14↑o
.text:00403DC8                 text "UTF-16LE", 'lv',0
.text:00403DCE                 align 10h
.text:00403DD0 aLt:                                    ; DATA XREF: .text:004013C0↑o
.text:00403DD0                                         ; .text:00402A0C↑o
.text:00403DD0                 text "UTF-16LE", 'lt',0
.text:00403DD6                 align 4
.text:00403DD8 aTg:                                    ; DATA XREF: .text:004013CC↑o
.text:00403DD8                                         ; .text:00402C40↑o
.text:00403DD8                 text "UTF-16LE", 'tg',0
.text:00403DDE                 align 10h
.text:00403DE0 aFa:                                    ; DATA XREF: .text:004013D8↑o
.text:00403DE0                                         ; .text:00402854↑o
.text:00403DE0                 text "UTF-16LE", 'fa',0
.text:00403DE6                 align 4
.text:00403DE8 aVi:                                    ; DATA XREF: .text:004013E4↑o
.text:00403DE8                                         ; .text:00402CDC↑o
.text:00403DE8                 text "UTF-16LE", 'vi',0
.text:00403DEE                 align 10h
.text:00403DF0 aHy:                                    ; DATA XREF: .text:004013F0↑o
.text:00403DF0                                         ; .text:0040293C↑o
.text:00403DF0                 text "UTF-16LE", 'hy',0
.text:00403DF6                 align 4
.text:00403DF8 aAz:                                    ; DATA XREF: .text:004013FC↑o
.text:00403DF8                                         ; .text:004026C8↑o
.text:00403DF8                 text "UTF-16LE", 'az',0
.text:00403DFE                 align 10h
.text:00403E00 aEu_0:                                  ; DATA XREF: .text:00401408↑o
.text:00403E00                                         ; .text:0040284C↑o
.text:00403E00                 text "UTF-16LE", 'eu',0
.text:00403E06                 align 4
.text:00403E08 aHsb:                                   ; DATA XREF: .text:00401414↑o
.text:00403E08                                         ; .text:0040292C↑o
.text:00403E08                 text "UTF-16LE", 'hsb',0
.text:00403E10 aMk:                                    ; DATA XREF: .text:00401420↑o
.text:00403E10                                         ; .text:00402A24↑o
.text:00403E10                 text "UTF-16LE", 'mk',0
.text:00403E16                 align 4
.text:00403E18 aSt:                                    ; DATA XREF: .text:0040142C↑o
.text:00403E18                                         ; .text:00402C08↑o
.text:00403E18                 text "UTF-16LE", 'st',0
.text:00403E1E                 align 10h
.text:00403E20 aTs:                                    ; DATA XREF: .text:00401438↑o
.text:00403E20                                         ; .text:00402C7C↑o
.text:00403E20                 text "UTF-16LE", 'ts',0
.text:00403E26                 align 4
.text:00403E28 aTn:                                    ; DATA XREF: .text:00401444↑o
.text:00403E28                                         ; .text:00402C68↑o
.text:00403E28                 text "UTF-16LE", 'tn',0
.text:00403E2E                 align 10h
.text:00403E30 aVe:                                    ; DATA XREF: .text:00401450↑o
.text:00403E30                                         ; .text:00402CD4↑o
.text:00403E30                 text "UTF-16LE", 've',0
.text:00403E36                 align 4
.text:00403E38 aXh:                                    ; DATA XREF: .text:0040145C↑o
.text:00403E38                                         ; .text:00402CEC↑o
.text:00403E38                 text "UTF-16LE", 'xh',0
.text:00403E3E                 align 10h
.text:00403E40 aZu:                                    ; DATA XREF: .text:00401468↑o
.text:00403E40                                         ; .text:00402D24↑o
.text:00403E40                 text "UTF-16LE", 'zu',0
.text:00403E46                 align 4
.text:00403E48 aAf:                                    ; DATA XREF: .text:00401474↑o
.text:00403E48                                         ; .text:00402664↑o
.text:00403E48                 text "UTF-16LE", 'af',0
.text:00403E4E                 align 10h
.text:00403E50 aKa:                                    ; DATA XREF: .text:00401480↑o
.text:00403E50                                         ; .text:00402994↑o
.text:00403E50                 text "UTF-16LE", 'ka',0
.text:00403E56                 align 4
.text:00403E58 aFo:                                    ; DATA XREF: .text:0040148C↑o
.text:00403E58                                         ; .text:0040287C↑o
.text:00403E58                 text "UTF-16LE", 'fo',0
.text:00403E5E                 align 10h
.text:00403E60 aHi:                                    ; DATA XREF: .text:00401498↑o
.text:00403E60                                         ; .text:00402918↑o
.text:00403E60                 text "UTF-16LE", 'hi',0
.text:00403E66                 align 4
.text:00403E68 aMt:                                    ; DATA XREF: .text:004014A4↑o
.text:00403E68                                         ; .text:00402A70↑o
.text:00403E68                 text "UTF-16LE", 'mt',0
.text:00403E6E                 align 10h
.text:00403E70 aSe:                                    ; DATA XREF: .text:004014B0↑o
.text:00403E70                                         ; .text:00402B7C↑o
.text:00403E70                 text "UTF-16LE", 'se',0
.text:00403E76                 align 4
.text:00403E78 aGa:                                    ; DATA XREF: .text:004014BC↑o
.text:00403E78                                         ; .text:004028CC↑o
.text:00403E78                 text "UTF-16LE", 'ga',0
.text:00403E7E                 align 10h
.text:00403E80 aYi:                                    ; DATA XREF: .text:004014C8↑o
.text:00403E80                                         ; .text:00402CF4↑o
.text:00403E80                 text "UTF-16LE", 'yi',0
.text:00403E86                 align 4
.text:00403E88 aMs:                                    ; DATA XREF: .text:004014D4↑o
.text:00403E88                                         ; .text:00402A64↑o
.text:00403E88                 text "UTF-16LE", 'ms',0
.text:00403E8E                 align 10h
.text:00403E90 aKk:                                    ; DATA XREF: .text:004014E0↑o
.text:00403E90                                         ; .text:0040299C↑o
.text:00403E90                 text "UTF-16LE", 'kk',0
.text:00403E96                 align 4
.text:00403E98 aKy:                                    ; DATA XREF: .text:004014EC↑o
.text:00403E98                                         ; .text:004029EC↑o
.text:00403E98                 text "UTF-16LE", 'ky',0
.text:00403E9E                 align 10h
.text:00403EA0 aSw:                                    ; DATA XREF: .text:004014F8↑o
.text:00403EA0                                         ; .text:00402C1C↑o
.text:00403EA0                 text "UTF-16LE", 'sw',0
.text:00403EA6                 align 4
.text:00403EA8 aTk:                                    ; DATA XREF: .text:00401504↑o
.text:00403EA8                                         ; .text:00402C60↑o
.text:00403EA8                 text "UTF-16LE", 'tk',0
.text:00403EAE                 align 10h
.text:00403EB0 aUz:                                    ; DATA XREF: .text:00401510↑o
.text:00403EB0                                         ; .text:00402CC0↑o
.text:00403EB0                 text "UTF-16LE", 'uz',0
.text:00403EB6                 align 4
.text:00403EB8 aTt:                                    ; DATA XREF: .text:0040151C↑o
.text:00403EB8                                         ; .text:00402C84↑o
.text:00403EB8                 text "UTF-16LE", 'tt',0
.text:00403EBE                 align 10h
.text:00403EC0 aBn:                                    ; DATA XREF: .text:00401528↑o
.text:00403EC0                                         ; .text:004026FC↑o
.text:00403EC0                 text "UTF-16LE", 'bn',0
.text:00403EC6                 align 4
.text:00403EC8 aPa:                                    ; DATA XREF: .text:00401534↑o
.text:00403EC8                                         ; .text:00402ACC↑o
.text:00403EC8                 text "UTF-16LE", 'pa',0
.text:00403ECE                 align 10h
.text:00403ED0 aGu:                                    ; DATA XREF: .text:00401540↑o
.text:00403ED0                                         ; .text:004028F4↑o
.text:00403ED0                 text "UTF-16LE", 'gu',0
.text:00403ED6                 align 4
.text:00403ED8 aOr:                                    ; DATA XREF: .text:0040154C↑o
.text:00403ED8                                         ; .text:00402AC4↑o
.text:00403ED8                 text "UTF-16LE", 'or',0
.text:00403EDE                 align 10h
.text:00403EE0 aTa:                                    ; DATA XREF: .text:00401558↑o
.text:00403EE0                                         ; .text:00402C2C↑o
.text:00403EE0                 text "UTF-16LE", 'ta',0
.text:00403EE6                 align 4
.text:00403EE8 aTe:                                    ; DATA XREF: .text:00401564↑o
.text:00403EE8                                         ; .text:00402C38↑o
.text:00403EE8                 text "UTF-16LE", 'te',0
.text:00403EEE                 align 10h
.text:00403EF0 aKn:                                    ; DATA XREF: .text:00401570↑o
.text:00403EF0                                         ; .text:004029B4↑o
.text:00403EF0                 text "UTF-16LE", 'kn',0
.text:00403EF6                 align 4
.text:00403EF8 aMl:                                    ; DATA XREF: .text:0040157C↑o
.text:00403EF8                                         ; .text:00402A2C↑o
.text:00403EF8                 text "UTF-16LE", 'ml',0
.text:00403EFE                 align 10h
.text:00403F00 aAs:                                    ; DATA XREF: .text:00401588↑o
.text:00403F00                                         ; .text:004026C0↑o
.text:00403F00                 text "UTF-16LE", 'as',0
.text:00403F06                 align 4
.text:00403F08 aMr:                                    ; DATA XREF: .text:00401594↑o
.text:00403F08                                         ; .text:00402A5C↑o
.text:00403F08                 text "UTF-16LE", 'mr',0
.text:00403F0E                 align 10h
.text:00403F10 aSa:                                    ; DATA XREF: .text:004015A0↑o
.text:00403F10                                         ; .text:00402B5C↑o
.text:00403F10                 text "UTF-16LE", 'sa',0
.text:00403F16                 align 4
.text:00403F18 aMn:                                    ; DATA XREF: .text:004015AC↑o
.text:00403F18                                         ; .text:00402A34↑o
.text:00403F18                 text "UTF-16LE", 'mn',0
.text:00403F1E                 align 10h
.text:00403F20 aBo:                                    ; DATA XREF: .text:004015B8↑o
.text:00403F20                                         ; .text:00402708↑o
.text:00403F20                 text "UTF-16LE", 'bo',0
.text:00403F26                 align 4
.text:00403F28 aCy:                                    ; DATA XREF: .text:004015C4↑o
.text:00403F28                                         ; .text:00402754↑o
.text:00403F28                 text "UTF-16LE", 'cy',0
.text:00403F2E                 align 10h
.text:00403F30 aKm:                                    ; DATA XREF: .text:004015D0↑o
.text:00403F30                                         ; .text:004029AC↑o
.text:00403F30                 text "UTF-16LE", 'km',0
.text:00403F36                 align 4
.text:00403F38 aLo:                                    ; DATA XREF: .text:004015DC↑o
.text:00403F38                                         ; .text:00402A04↑o
.text:00403F38                 text "UTF-16LE", 'lo',0
.text:00403F3E                 align 10h
.text:00403F40 aMy:                                    ; DATA XREF: .text:004015E8↑o
.text:00403F40                                         ; .text:00402A78↑o
.text:00403F40                 text "UTF-16LE", 'my',0
.text:00403F46                 align 4
.text:00403F48 aGl:                                    ; DATA XREF: .text:004015F4↑o
.text:00403F48                                         ; .text:004028DC↑o
.text:00403F48                 text "UTF-16LE", 'gl',0
.text:00403F4E                 align 10h
.text:00403F50 aKok:                                   ; DATA XREF: .text:00401600↑o
.text:00403F50                                         ; .text:004029C4↑o
.text:00403F50                 text "UTF-16LE", 'kok',0
.text:00403F58 aMni:                                   ; DATA XREF: .text:0040160C↑o
.text:00403F58                                         ; .text:00402A4C↑o
.text:00403F58                 text "UTF-16LE", 'mni',0
.text:00403F60 aSd:                                    ; DATA XREF: .text:00401618↑o
.text:00403F60                                         ; .text:00402B6C↑o
.text:00403F60                 text "UTF-16LE", 'sd',0
.text:00403F66                 align 4
.text:00403F68 aSyr:                                   ; DATA XREF: .text:00401624↑o
.text:00403F68                                         ; .text:00402C24↑o
.text:00403F68                 text "UTF-16LE", 'syr',0
.text:00403F70 aSi:                                    ; DATA XREF: .text:00401630↑o
.text:00403F70                                         ; .text:00402B8C↑o
.text:00403F70                 text "UTF-16LE", 'si',0
.text:00403F76                 align 4
.text:00403F78 aChr:                                   ; DATA XREF: .text:0040163C↑o
.text:00403F78                                         ; .text:00402738↑o
.text:00403F78                 text "UTF-16LE", 'chr',0
.text:00403F80 aIu:                                    ; DATA XREF: .text:00401648↑o
.text:00403F80                                         ; .text:00402978↑o
.text:00403F80                 text "UTF-16LE", 'iu',0
.text:00403F86                 align 4
.text:00403F88 aAm:                                    ; DATA XREF: .text:00401654↑o
.text:00403F88                                         ; .text:0040266C↑o
.text:00403F88                 text "UTF-16LE", 'am',0
.text:00403F8E                 align 10h
.text:00403F90 aTzm:                                   ; DATA XREF: .text:00401660↑o
.text:00403F90                                         ; .text:00402C8C↑o
.text:00403F90                 text "UTF-16LE", 'tzm',0
.text:00403F98 aKs:                                    ; DATA XREF: .text:0040166C↑o
.text:00403F98                                         ; .text:004029D4↑o
.text:00403F98                 text "UTF-16LE", 'ks',0
.text:00403F9E                 align 10h
.text:00403FA0 aNe:                                    ; DATA XREF: .text:00401678↑o
.text:00403FA0                                         ; .text:00402A88↑o
.text:00403FA0                 text "UTF-16LE", 'ne',0
.text:00403FA6                 align 4
.text:00403FA8 aFy:                                    ; DATA XREF: .text:00401684↑o
.text:00403FA8                                         ; .text:004028C4↑o
.text:00403FA8                 text "UTF-16LE", 'fy',0
.text:00403FAE                 align 10h
.text:00403FB0 aPs:                                    ; DATA XREF: .text:00401690↑o
.text:00403FB0                                         ; .text:00402AF4↑o
.text:00403FB0                 text "UTF-16LE", 'ps',0
.text:00403FB6                 align 4
.text:00403FB8 aFil:                                   ; DATA XREF: .text:0040169C↑o
.text:00403FB8                                         ; .text:00402874↑o
.text:00403FB8                 text "UTF-16LE", 'fil',0
.text:00403FC0 aDv:                                    ; DATA XREF: .text:004016A8↑o
.text:00403FC0                                         ; .text:00402784↑o
.text:00403FC0                 text "UTF-16LE", 'dv',0
.text:00403FC6                 align 4
.text:00403FC8 aFf:                                    ; DATA XREF: .text:004016C0↑o
.text:00403FC8                                         ; .text:0040285C↑o
.text:00403FC8                 text "UTF-16LE", 'ff',0
.text:00403FCE                 align 10h
.text:00403FD0 aHa:                                    ; DATA XREF: .text:004016CC↑o
.text:00403FD0                                         ; .text:004028FC↑o
.text:00403FD0                 text "UTF-16LE", 'ha',0
.text:00403FD6                 align 4
.text:00403FD8 aIbb:                                   ; DATA XREF: .text:004016D8↑o
.text:00403FD8                                         ; .text:00402944↑o
.text:00403FD8                 text "UTF-16LE", 'ibb',0
.text:00403FE0 aYo:                                    ; DATA XREF: .text:004016E4↑o
.text:00403FE0                                         ; .text:00402CFC↑o
.text:00403FE0                 text "UTF-16LE", 'yo',0
.text:00403FE6                 align 4
.text:00403FE8 aQuz:                                   ; DATA XREF: .text:004016F0↑o
.text:00403FE8                                         ; .text:00402B24↑o
.text:00403FE8                 text "UTF-16LE", 'quz',0
.text:00403FF0 aNso:                                   ; DATA XREF: .text:004016FC↑o
.text:00403FF0                                         ; .text:00402AAC↑o
.text:00403FF0                 text "UTF-16LE", 'nso',0
.text:00403FF8 aBa:                                    ; DATA XREF: .text:00401708↑o
.text:00403FF8                                         ; .text:004026DC↑o
.text:00403FF8                 text "UTF-16LE", 'ba',0
.text:00403FFE                 align 10h
.text:00404000 aLb:                                    ; DATA XREF: .text:00401714↑o
.text:00404000                                         ; .text:004029FC↑o
.text:00404000                 text "UTF-16LE", 'lb',0
.text:00404006                 align 4
.text:00404008 aKl:                                    ; DATA XREF: .text:00401720↑o
.text:00404008                                         ; .text:004029A4↑o
.text:00404008                 text "UTF-16LE", 'kl',0
.text:0040400E                 align 10h
.text:00404010 aIg:                                    ; DATA XREF: .text:0040172C↑o
.text:00404010                                         ; .text:00402954↑o
.text:00404010                 text "UTF-16LE", 'ig',0
.text:00404016                 align 4
.text:00404018 aKr:                                    ; DATA XREF: .text:00401738↑o
.text:00404018                                         ; .text:004029CC↑o
.text:00404018                 text "UTF-16LE", 'kr',0
.text:0040401E                 align 10h
.text:00404020 aOm:                                    ; DATA XREF: .text:00401744↑o
.text:00404020                                         ; .text:00402ABC↑o
.text:00404020                 text "UTF-16LE", 'om',0
.text:00404026                 align 4
.text:00404028 aTi:                                    ; DATA XREF: .text:00401750↑o
.text:00404028                                         ; .text:00402C54↑o
.text:00404028                 text "UTF-16LE", 'ti',0
.text:0040402E                 align 10h
.text:00404030 aGn:                                    ; DATA XREF: .text:0040175C↑o
.text:00404030                                         ; .text:004028E4↑o
.text:00404030                 text "UTF-16LE", 'gn',0
.text:00404036                 align 4
.text:00404038 aHaw:                                   ; DATA XREF: .text:00401768↑o
.text:00404038                                         ; .text:00402908↑o
.text:00404038                 text "UTF-16LE", 'haw',0
.text:00404040 aLa:                                    ; DATA XREF: .text:00401774↑o
.text:00404040                                         ; .text:004029F4↑o
.text:00404040                 text "UTF-16LE", 'la',0
.text:00404046                 align 4
.text:00404048 aSo:                                    ; DATA XREF: .text:00401780↑o
.text:00404048                                         ; .text:00402BCC↑o
.text:00404048                 text "UTF-16LE", 'so',0
.text:0040404E                 align 10h
.text:00404050 aIi:                                    ; DATA XREF: .text:0040178C↑o
.text:00404050                                         ; .text:0040295C↑o
.text:00404050                 text "UTF-16LE", 'ii',0
.text:00404056                 align 4
.text:00404058 aPap:                                   ; DATA XREF: .text:00401798↑o
.text:00404058                                         ; .text:00402ADC↑o
.text:00404058                 text "UTF-16LE", 'pap',0
.text:00404060 aArn:                                   ; DATA XREF: .text:004017A4↑o
.text:00404060                                         ; .text:004026B8↑o
.text:00404060                 text "UTF-16LE", 'arn',0
.text:00404068 aMoh:                                   ; DATA XREF: .text:004017B0↑o
.text:00404068                                         ; .text:00402A54↑o
.text:00404068                 text "UTF-16LE", 'moh',0
.text:00404070 aBr_0:                                  ; DATA XREF: .text:004017BC↑o
.text:00404070                                         ; .text:00402710↑o
.text:00404070                 text "UTF-16LE", 'br',0
.text:00404076                 align 4
.text:00404078 aUg:                                    ; DATA XREF: .text:004017D4↑o
.text:00404078                                         ; .text:00402CA4↑o
.text:00404078                 text "UTF-16LE", 'ug',0
.text:0040407E                 align 10h
.text:00404080 aMi:                                    ; DATA XREF: .text:004017E0↑o
.text:00404080                                         ; .text:00402A1C↑o
.text:00404080                 text "UTF-16LE", 'mi',0
.text:00404086                 align 4
.text:00404088 aOc:                                    ; DATA XREF: .text:004017EC↑o
.text:00404088                                         ; .text:00402AB4↑o
.text:00404088                 text "UTF-16LE", 'oc',0
.text:0040408E                 align 10h
.text:00404090 aCo:                                    ; DATA XREF: .text:004017F8↑o
.text:00404090                                         ; .text:00402744↑o
.text:00404090                 text "UTF-16LE", 'co',0
.text:00404096                 align 4
.text:00404098 aGsw:                                   ; DATA XREF: .text:00401804↑o
.text:00404098                                         ; .text:004028EC↑o
.text:00404098                 text "UTF-16LE", 'gsw',0
.text:004040A0 aSah:                                   ; DATA XREF: .text:00401810↑o
.text:004040A0                                         ; .text:00402B64↑o
.text:004040A0                 text "UTF-16LE", 'sah',0
.text:004040A8 aQuc:                                   ; DATA XREF: .text:0040181C↑o
.text:004040A8                                         ; .text:00402B18↑o
.text:004040A8                 text "UTF-16LE", 'quc',0
.text:004040B0 aRw:                                    ; DATA XREF: .text:00401828↑o
.text:004040B0                                         ; .text:00402B54↑o
.text:004040B0                 text "UTF-16LE", 'rw',0
.text:004040B6                 align 4
.text:004040B8 aWo:                                    ; DATA XREF: .text:00401834↑o
.text:004040B8                                         ; .text:00402CE4↑o
.text:004040B8                 text "UTF-16LE", 'wo',0
.text:004040BE                 align 10h
.text:004040C0 aPrs:                                   ; DATA XREF: .text:00401840↑o
.text:004040C0                                         ; .text:00402AEC↑o
.text:004040C0                 text "UTF-16LE", 'prs',0
.text:004040C8 aGd:                                    ; DATA XREF: .text:0040184C↑o
.text:004040C8                                         ; .text:004028D4↑o
.text:004040C8                 text "UTF-16LE", 'gd',0
.text:004040CE                 align 10h
.text:004040D0 aKu:                                    ; DATA XREF: .text:00401858↑o
.text:004040D0                                         ; .text:004029E0↑o
.text:004040D0                 text "UTF-16LE", 'ku',0
.text:004040D6                 align 4
.text:004040D8 aArSa:                                  ; DATA XREF: .text:00401864↑o
.text:004040D8                                         ; .text:004026A8↑o
.text:004040D8                 text "UTF-16LE", 'ar-SA',0
.text:004040E4 aBgBg:                                  ; DATA XREF: .text:00401870↑o
.text:004040E4                                         ; .text:004026F0↑o
.text:004040E4                 text "UTF-16LE", 'bg-BG',0
.text:004040F0 aCaEs:                                  ; DATA XREF: .text:0040187C↑o
.text:004040F0                                         ; .text:00402730↑o
.text:004040F0                 text "UTF-16LE", 'ca-ES',0
.text:004040FC aZhTw:                                  ; DATA XREF: .text:00401888↑o
.text:004040FC                                         ; .text:00402D20↑o
.text:004040FC                 text "UTF-16LE", 'zh-TW',0
.text:00404108 aCsCz:                                  ; DATA XREF: .text:00401894↑o
.text:00404108                                         ; .text:00402750↑o
.text:00404108                 text "UTF-16LE", 'cs-CZ',0
.text:00404114 aDaDk:                                  ; DATA XREF: .text:004018A0↑o
.text:00404114                                         ; .text:00402760↑o
.text:00404114                 text "UTF-16LE", 'da-DK',0
.text:00404120 aDeDe:                                  ; DATA XREF: .text:004018AC↑o
.text:00404120                                         ; .text:00402770↑o
.text:00404120                 text "UTF-16LE", 'de-DE',0
.text:0040412C aElGr:                                  ; DATA XREF: .text:004018B8↑o
.text:0040412C                                         ; .text:00402794↑o
.text:0040412C                 text "UTF-16LE", 'el-GR',0
.text:00404138 aEnUs:                                  ; DATA XREF: .text:004018C4↑o
.text:00404138                                         ; .text:004027D8↑o
.text:00404138                 text "UTF-16LE", 'en-US',0
.text:00404144 aEsEsTradnl:                            ; DATA XREF: .text:004018D0↑o
.text:00404144                                         ; .text:00402810↑o
.text:00404144                 text "UTF-16LE", 'es-ES_tradnl',0
.text:0040415E                 align 10h
.text:00404160 aFiFi:                                  ; DATA XREF: .text:004018DC↑o
.text:00404160                                         ; .text:00402870↑o
.text:00404160                 text "UTF-16LE", 'fi-FI',0
.text:0040416C aFrFr:                                  ; DATA XREF: .text:004018E8↑o
.text:0040416C                                         ; .text:004028A4↑o
.text:0040416C                 text "UTF-16LE", 'fr-FR',0
.text:00404178 aHeIl:                                  ; DATA XREF: .text:004018F4↑o
.text:00404178                                         ; .text:00402914↑o
.text:00404178                 text "UTF-16LE", 'he-IL',0
.text:00404184 aHuHu:                                  ; DATA XREF: .text:00401900↑o
.text:00404184                                         ; .text:00402938↑o
.text:00404184                 text "UTF-16LE", 'hu-HU',0
.text:00404190 aIsIs:                                  ; DATA XREF: .text:0040190C↑o
.text:00404190                                         ; .text:00402968↑o
.text:00404190                 text "UTF-16LE", 'is-IS',0
.text:0040419C aItIt:                                  ; DATA XREF: .text:00401918↑o
.text:0040419C                                         ; .text:00402974↑o
.text:0040419C                 text "UTF-16LE", 'it-IT',0
.text:004041A8 aJaJp:                                  ; DATA XREF: .text:00401924↑o
.text:004041A8                                         ; .text:00402990↑o
.text:004041A8                 text "UTF-16LE", 'ja-JP',0
.text:004041B4 aKoKr:                                  ; DATA XREF: .text:00401930↑o
.text:004041B4                                         ; .text:004029C0↑o
.text:004041B4                 text "UTF-16LE", 'ko-KR',0
.text:004041C0 aNlNl:                                  ; DATA XREF: .text:0040193C↑o
.text:004041C0                                         ; .text:00402A9C↑o
.text:004041C0                 text "UTF-16LE", 'nl-NL',0
.text:004041CC aNbNo:                                  ; DATA XREF: .text:00401948↑o
.text:004041CC                                         ; .text:00402A84↑o
.text:004041CC                 text "UTF-16LE", 'nb-NO',0
.text:004041D8 aPlPl:                                  ; DATA XREF: .text:00401954↑o
.text:004041D8                                         ; .text:00402AE8↑o
.text:004041D8                 text "UTF-16LE", 'pl-PL',0
.text:004041E4 aPtBr:                                  ; DATA XREF: .text:00401960↑o
.text:004041E4                                         ; .text:00402B00↑o
.text:004041E4                 text "UTF-16LE", 'pt-BR',0
.text:004041F0 aRmCh:                                  ; DATA XREF: .text:0040196C↑o
.text:004041F0                                         ; .text:00402B38↑o
.text:004041F0                 text "UTF-16LE", 'rm-CH',0
.text:004041FC aRoRo:                                  ; DATA XREF: .text:00401978↑o
.text:004041FC                                         ; .text:00402B44↑o
.text:004041FC                 text "UTF-16LE", 'ro-RO',0
.text:00404208 aRuRu:                                  ; DATA XREF: .text:00401984↑o
.text:00404208                                         ; .text:00402B50↑o
.text:00404208                 text "UTF-16LE", 'ru-RU',0
.text:00404214 aHrHr:                                  ; DATA XREF: .text:00401990↑o
.text:00404214                                         ; .text:00402928↑o
.text:00404214                 text "UTF-16LE", 'hr-HR',0
.text:00404220 aSkSk:                                  ; DATA XREF: .text:0040199C↑o
.text:00404220                                         ; .text:00402B98↑o
.text:00404220                 text "UTF-16LE", 'sk-SK',0
.text:0040422C aSqAl:                                  ; DATA XREF: .text:004019A8↑o
.text:0040422C                                         ; .text:00402BD8↑o
.text:0040422C                 text "UTF-16LE", 'sq-AL',0
.text:00404238 aSvSe:                                  ; DATA XREF: .text:004019B4↑o
.text:00404238                                         ; .text:00402C18↑o
.text:00404238                 text "UTF-16LE", 'sv-SE',0
.text:00404244 aThTh:                                  ; DATA XREF: .text:004019C0↑o
.text:00404244                                         ; .text:00402C50↑o
.text:00404244                 text "UTF-16LE", 'th-TH',0
.text:00404250 aTrTr:                                  ; DATA XREF: .text:004019CC↑o
.text:00404250                                         ; .text:00402C78↑o
.text:00404250                 text "UTF-16LE", 'tr-TR',0
.text:0040425C aUrPk:                                  ; DATA XREF: .text:004019D8↑o
.text:0040425C                                         ; .text:00402CBC↑o
.text:0040425C                 text "UTF-16LE", 'ur-PK',0
.text:00404268 aIdId:                                  ; DATA XREF: .text:004019E4↑o
.text:00404268                                         ; .text:00402950↑o
.text:00404268                 text "UTF-16LE", 'id-ID',0
.text:00404274 aUkUa:                                  ; DATA XREF: .text:004019F0↑o
.text:00404274                                         ; .text:00402CB0↑o
.text:00404274                 text "UTF-16LE", 'uk-UA',0
.text:00404280 aBeBy:                                  ; DATA XREF: .text:004019FC↑o
.text:00404280                                         ; .text:004026E8↑o
.text:00404280                 text "UTF-16LE", 'be-BY',0
.text:0040428C aSlSi:                                  ; DATA XREF: .text:00401A08↑o
.text:0040428C                                         ; .text:00402BA0↑o
.text:0040428C                 text "UTF-16LE", 'sl-SI',0
.text:00404298 aEtEe:                                  ; DATA XREF: .text:00401A14↑o
.text:00404298                                         ; .text:00402848↑o
.text:00404298                 text "UTF-16LE", 'et-EE',0
.text:004042A4 aLvLv:                                  ; DATA XREF: .text:00401A20↑o
.text:004042A4                                         ; .text:00402A18↑o
.text:004042A4                 text "UTF-16LE", 'lv-LV',0
.text:004042B0 aLtLt:                                  ; DATA XREF: .text:00401A2C↑o
.text:004042B0                                         ; .text:00402A10↑o
.text:004042B0                 text "UTF-16LE", 'lt-LT',0
.text:004042BC aTgCyrlTj:                              ; DATA XREF: .text:00401A38↑o
.text:004042BC                                         ; .text:00402C48↑o
.text:004042BC                 text "UTF-16LE", 'tg-Cyrl-TJ',0
.text:004042D2                 align 4
.text:004042D4 aFaIr:                                  ; DATA XREF: .text:00401A44↑o
.text:004042D4                                         ; .text:00402858↑o
.text:004042D4                 text "UTF-16LE", 'fa-IR',0
.text:004042E0 aViVn:                                  ; DATA XREF: .text:00401A50↑o
.text:004042E0                                         ; .text:00402CE0↑o
.text:004042E0                 text "UTF-16LE", 'vi-VN',0
.text:004042EC aHyAm:                                  ; DATA XREF: .text:00401A5C↑o
.text:004042EC                                         ; .text:00402940↑o
.text:004042EC                 text "UTF-16LE", 'hy-AM',0
.text:004042F8 aAzLatnAz:                              ; DATA XREF: .text:00401A68↑o
.text:004042F8                                         ; .text:004026D8↑o
.text:004042F8                 text "UTF-16LE", 'az-Latn-AZ',0
.text:0040430E                 align 10h
.text:00404310 aEuEs:                                  ; DATA XREF: .text:00401A74↑o
.text:00404310                                         ; .text:00402850↑o
.text:00404310                 text "UTF-16LE", 'eu-ES',0
.text:0040431C aHsbDe:                                 ; DATA XREF: .text:00401A80↑o
.text:0040431C                                         ; .text:00402930↑o
.text:0040431C                 text "UTF-16LE", 'hsb-DE',0
.text:0040432A                 align 4
.text:0040432C aMkMk:                                  ; DATA XREF: .text:00401A8C↑o
.text:0040432C                                         ; .text:00402A28↑o
.text:0040432C                 text "UTF-16LE", 'mk-MK',0
.text:00404338 aStZa:                                  ; DATA XREF: .text:00401A98↑o
.text:00404338                                         ; .text:00402C0C↑o
.text:00404338                 text "UTF-16LE", 'st-ZA',0
.text:00404344 aTsZa:                                  ; DATA XREF: .text:00401AA4↑o
.text:00404344                                         ; .text:00402C80↑o
.text:00404344                 text "UTF-16LE", 'ts-ZA',0
.text:00404350 aTnZa:                                  ; DATA XREF: .text:00401AB0↑o
.text:00404350                                         ; .text:00402C70↑o
.text:00404350                 text "UTF-16LE", 'tn-ZA',0
.text:0040435C aVeZa:                                  ; DATA XREF: .text:00401ABC↑o
.text:0040435C                                         ; .text:00402CD8↑o
.text:0040435C                 text "UTF-16LE", 've-ZA',0
.text:00404368 aXhZa:                                  ; DATA XREF: .text:00401AC8↑o
.text:00404368                                         ; .text:00402CF0↑o
.text:00404368                 text "UTF-16LE", 'xh-ZA',0
.text:00404374 aZuZa:                                  ; DATA XREF: .text:00401AD4↑o
.text:00404374                                         ; .text:00402D28↑o
.text:00404374                 text "UTF-16LE", 'zu-ZA',0
.text:00404380 aAfZa:                                  ; DATA XREF: .text:00401AE0↑o
.text:00404380                                         ; .text:00402668↑o
.text:00404380                 text "UTF-16LE", 'af-ZA',0
.text:0040438C aKaGe:                                  ; DATA XREF: .text:00401AEC↑o
.text:0040438C                                         ; .text:00402998↑o
.text:0040438C                 text "UTF-16LE", 'ka-GE',0
.text:00404398 aFoFo:                                  ; DATA XREF: .text:00401AF8↑o
.text:00404398                                         ; .text:00402880↑o
.text:00404398                 text "UTF-16LE", 'fo-FO',0
.text:004043A4 aHiIn:                                  ; DATA XREF: .text:00401B04↑o
.text:004043A4                                         ; .text:0040291C↑o
.text:004043A4                 text "UTF-16LE", 'hi-IN',0
.text:004043B0 aMtMt:                                  ; DATA XREF: .text:00401B10↑o
.text:004043B0                                         ; .text:00402A74↑o
.text:004043B0                 text "UTF-16LE", 'mt-MT',0
.text:004043BC aSeNo:                                  ; DATA XREF: .text:00401B1C↑o
.text:004043BC                                         ; .text:00402B84↑o
.text:004043BC                 text "UTF-16LE", 'se-NO',0
.text:004043C8 aYi001:                                 ; DATA XREF: .text:00401B28↑o
.text:004043C8                                         ; .text:00402CF8↑o
.text:004043C8                 text "UTF-16LE", 'yi-001',0
.text:004043D6                 align 4
.text:004043D8 aMsMy:                                  ; DATA XREF: .text:00401B34↑o
.text:004043D8                                         ; .text:00402A6C↑o
.text:004043D8                 text "UTF-16LE", 'ms-MY',0
.text:004043E4 aKkKz:                                  ; DATA XREF: .text:00401B40↑o
.text:004043E4                                         ; .text:004029A0↑o
.text:004043E4                 text "UTF-16LE", 'kk-KZ',0
.text:004043F0 aKyKg:                                  ; DATA XREF: .text:00401B4C↑o
.text:004043F0                                         ; .text:004029F0↑o
.text:004043F0                 text "UTF-16LE", 'ky-KG',0
.text:004043FC aSwKe:                                  ; DATA XREF: .text:00401B58↑o
.text:004043FC                                         ; .text:00402C20↑o
.text:004043FC                 text "UTF-16LE", 'sw-KE',0
.text:00404408 aTkTm:                                  ; DATA XREF: .text:00401B64↑o
.text:00404408                                         ; .text:00402C64↑o
.text:00404408                 text "UTF-16LE", 'tk-TM',0
.text:00404414 aUzLatnUz:                              ; DATA XREF: .text:00401B70↑o
.text:00404414                                         ; .text:00402CD0↑o
.text:00404414                 text "UTF-16LE", 'uz-Latn-UZ',0
.text:0040442A                 align 4
.text:0040442C aTtRu:                                  ; DATA XREF: .text:00401B7C↑o
.text:0040442C                                         ; .text:00402C88↑o
.text:0040442C                 text "UTF-16LE", 'tt-RU',0
.text:00404438 aBnIn:                                  ; DATA XREF: .text:00401B88↑o
.text:00404438                                         ; .text:00402704↑o
.text:00404438                 text "UTF-16LE", 'bn-IN',0
.text:00404444 aPaIn:                                  ; DATA XREF: .text:00401B94↑o
.text:00404444                                         ; .text:00402AD8↑o
.text:00404444                 text "UTF-16LE", 'pa-IN',0
.text:00404450 aGuIn:                                  ; DATA XREF: .text:00401BA0↑o
.text:00404450                                         ; .text:004028F8↑o
.text:00404450                 text "UTF-16LE", 'gu-IN',0
.text:0040445C aOrIn:                                  ; DATA XREF: .text:00401BAC↑o
.text:0040445C                                         ; .text:00402AC8↑o
.text:0040445C                 text "UTF-16LE", 'or-IN',0
.text:00404468 aTaIn:                                  ; DATA XREF: .text:00401BB8↑o
.text:00404468                                         ; .text:00402C30↑o
.text:00404468                 text "UTF-16LE", 'ta-IN',0
.text:00404474 aTeIn:                                  ; DATA XREF: .text:00401BC4↑o
.text:00404474                                         ; .text:00402C3C↑o
.text:00404474                 text "UTF-16LE", 'te-IN',0
.text:00404480 aKnIn:                                  ; DATA XREF: .text:00401BD0↑o
.text:00404480                                         ; .text:004029B8↑o
.text:00404480                 text "UTF-16LE", 'kn-IN',0
.text:0040448C aMlIn:                                  ; DATA XREF: .text:00401BDC↑o
.text:0040448C                                         ; .text:00402A30↑o
.text:0040448C                 text "UTF-16LE", 'ml-IN',0
.text:00404498 aAsIn:                                  ; DATA XREF: .text:00401BE8↑o
.text:00404498                                         ; .text:004026C4↑o
.text:00404498                 text "UTF-16LE", 'as-IN',0
.text:004044A4 aMrIn:                                  ; DATA XREF: .text:00401BF4↑o
.text:004044A4                                         ; .text:00402A60↑o
.text:004044A4                 text "UTF-16LE", 'mr-IN',0
.text:004044B0 aSaIn:                                  ; DATA XREF: .text:00401C00↑o
.text:004044B0                                         ; .text:00402B60↑o
.text:004044B0                 text "UTF-16LE", 'sa-IN',0
.text:004044BC aMnMn:                                  ; DATA XREF: .text:00401C0C↑o
.text:004044BC                                         ; .text:00402A3C↑o
.text:004044BC                 text "UTF-16LE", 'mn-MN',0
.text:004044C8 aBoCn:                                  ; DATA XREF: .text:00401C18↑o
.text:004044C8                                         ; .text:0040270C↑o
.text:004044C8                 text "UTF-16LE", 'bo-CN',0
.text:004044D4 aCyGb:                                  ; DATA XREF: .text:00401C24↑o
.text:004044D4                                         ; .text:00402758↑o
.text:004044D4                 text "UTF-16LE", 'cy-GB',0
.text:004044E0 aKmKh:                                  ; DATA XREF: .text:00401C30↑o
.text:004044E0                                         ; .text:004029B0↑o
.text:004044E0                 text "UTF-16LE", 'km-KH',0
.text:004044EC aLoLa:                                  ; DATA XREF: .text:00401C3C↑o
.text:004044EC                                         ; .text:00402A08↑o
.text:004044EC                 text "UTF-16LE", 'lo-LA',0
.text:004044F8 aMyMm:                                  ; DATA XREF: .text:00401C48↑o
.text:004044F8                                         ; .text:00402A7C↑o
.text:004044F8                 text "UTF-16LE", 'my-MM',0
.text:00404504 aGlEs:                                  ; DATA XREF: .text:00401C54↑o
.text:00404504                                         ; .text:004028E0↑o
.text:00404504                 text "UTF-16LE", 'gl-ES',0
.text:00404510 aKokIn:                                 ; DATA XREF: .text:00401C60↑o
.text:00404510                                         ; .text:004029C8↑o
.text:00404510                 text "UTF-16LE", 'kok-IN',0
.text:0040451E                 align 10h
.text:00404520 aMniIn:                                 ; DATA XREF: .text:00401C6C↑o
.text:00404520                                         ; .text:00402A50↑o
.text:00404520                 text "UTF-16LE", 'mni-IN',0
.text:0040452E                 align 10h
.text:00404530 aSdDevaIn:                              ; DATA XREF: .text:00401C78↑o
.text:00404530                                         ; .text:00402B78↑o
.text:00404530                 text "UTF-16LE", 'sd-Deva-IN',0
.text:00404546                 align 4
.text:00404548 aSyrSy:                                 ; DATA XREF: .text:00401C84↑o
.text:00404548                                         ; .text:00402C28↑o
.text:00404548                 text "UTF-16LE", 'syr-SY',0
.text:00404556                 align 4
.text:00404558 aSiLk:                                  ; DATA XREF: .text:00401C90↑o
.text:00404558                                         ; .text:00402B90↑o
.text:00404558                 text "UTF-16LE", 'si-LK',0
.text:00404564 aChrCherUs:                             ; DATA XREF: .text:00401C9C↑o
.text:00404564                                         ; .text:00402740↑o
.text:00404564                 text "UTF-16LE", 'chr-Cher-US',0
.text:0040457C aIuCansCa:                              ; DATA XREF: .text:00401CA8↑o
.text:0040457C                                         ; .text:00402980↑o
.text:0040457C                 text "UTF-16LE", 'iu-Cans-CA',0
.text:00404592                 align 4
.text:00404594 aAmEt:                                  ; DATA XREF: .text:00401CB4↑o
.text:00404594                                         ; .text:00402670↑o
.text:00404594                 text "UTF-16LE", 'am-ET',0
.text:004045A0 aTzmArabMa:                             ; DATA XREF: .text:00401CC0↑o
.text:004045A0                                         ; .text:00402C90↑o
.text:004045A0                 text "UTF-16LE", 'tzm-Arab-MA',0
.text:004045B8 aKsArab:                                ; DATA XREF: .text:00401CCC↑o
.text:004045B8                                         ; .text:004029D8↑o
.text:004045B8                 text "UTF-16LE", 'ks-Arab',0
.text:004045C8 aNeNp:                                  ; DATA XREF: .text:00401CD8↑o
.text:004045C8                                         ; .text:00402A90↑o
.text:004045C8                 text "UTF-16LE", 'ne-NP',0
.text:004045D4 aFyNl:                                  ; DATA XREF: .text:00401CE4↑o
.text:004045D4                                         ; .text:004028C8↑o
.text:004045D4                 text "UTF-16LE", 'fy-NL',0
.text:004045E0 aPsAf:                                  ; DATA XREF: .text:00401CF0↑o
.text:004045E0                                         ; .text:00402AF8↑o
.text:004045E0                 text "UTF-16LE", 'ps-AF',0
.text:004045EC aFilPh:                                 ; DATA XREF: .text:00401CFC↑o
.text:004045EC                                         ; .text:00402878↑o
.text:004045EC                 text "UTF-16LE", 'fil-PH',0
.text:004045FA                 align 4
.text:004045FC aDvMv:                                  ; DATA XREF: .text:00401D08↑o
.text:004045FC                                         ; .text:00402788↑o
.text:004045FC                 text "UTF-16LE", 'dv-MV',0
.text:00404608 aBinNg:                                 ; DATA XREF: .text:00401D14↑o
.text:00404608                                         ; .text:004026F8↑o
.text:00404608                 text "UTF-16LE", 'bin-NG',0
.text:00404616                 align 4
.text:00404618 aFfNg:                                  ; DATA XREF: .text:00401D20↑o
.text:00404618                                         ; .text:00402868↑o
.text:00404618                 text "UTF-16LE", 'ff-NG',0
.text:00404624 aHaLatnNg:                              ; DATA XREF: .text:00401D2C↑o
.text:00404624                                         ; .text:00402904↑o
.text:00404624                 text "UTF-16LE", 'ha-Latn-NG',0
.text:0040463A                 align 4
.text:0040463C aIbbNg:                                 ; DATA XREF: .text:00401D38↑o
.text:0040463C                                         ; .text:00402948↑o
.text:0040463C                 text "UTF-16LE", 'ibb-NG',0
.text:0040464A                 align 4
.text:0040464C aYoNg:                                  ; DATA XREF: .text:00401D44↑o
.text:0040464C                                         ; .text:00402D00↑o
.text:0040464C                 text "UTF-16LE", 'yo-NG',0
.text:00404658 aQuzBo:                                 ; DATA XREF: .text:00401D50↑o
.text:00404658                                         ; .text:00402B28↑o
.text:00404658                 text "UTF-16LE", 'quz-BO',0
.text:00404666                 align 4
.text:00404668 aNsoZa:                                 ; DATA XREF: .text:00401D5C↑o
.text:00404668                                         ; .text:00402AB0↑o
.text:00404668                 text "UTF-16LE", 'nso-ZA',0
.text:00404676                 align 4
.text:00404678 aBaRu:                                  ; DATA XREF: .text:00401D68↑o
.text:00404678                                         ; .text:004026E0↑o
.text:00404678                 text "UTF-16LE", 'ba-RU',0
.text:00404684 aLbLu:                                  ; DATA XREF: .text:00401D74↑o
.text:00404684                                         ; .text:00402A00↑o
.text:00404684                 text "UTF-16LE", 'lb-LU',0
.text:00404690 aKlGl:                                  ; DATA XREF: .text:00401D80↑o
.text:00404690                                         ; .text:004029A8↑o
.text:00404690                 text "UTF-16LE", 'kl-GL',0
.text:0040469C aIgNg:                                  ; DATA XREF: .text:00401D8C↑o
.text:0040469C                                         ; .text:00402958↑o
.text:0040469C                 text "UTF-16LE", 'ig-NG',0
.text:004046A8 aKrNg:                                  ; DATA XREF: .text:00401D98↑o
.text:004046A8                                         ; .text:004029D0↑o
.text:004046A8                 text "UTF-16LE", 'kr-NG',0
.text:004046B4 aOmEt:                                  ; DATA XREF: .text:00401DA4↑o
.text:004046B4                                         ; .text:00402AC0↑o
.text:004046B4                 text "UTF-16LE", 'om-ET',0
.text:004046C0 aTiEt:                                  ; DATA XREF: .text:00401DB0↑o
.text:004046C0                                         ; .text:00402C5C↑o
.text:004046C0                 text "UTF-16LE", 'ti-ET',0
.text:004046CC aGnPy:                                  ; DATA XREF: .text:00401DBC↑o
.text:004046CC                                         ; .text:004028E8↑o
.text:004046CC                 text "UTF-16LE", 'gn-PY',0
.text:004046D8 aHawUs:                                 ; DATA XREF: .text:00401DC8↑o
.text:004046D8                                         ; .text:0040290C↑o
.text:004046D8                 text "UTF-16LE", 'haw-US',0
.text:004046E6                 align 4
.text:004046E8 aLa001:                                 ; DATA XREF: .text:00401DD4↑o
.text:004046E8                                         ; .text:004029F8↑o
.text:004046E8                 text "UTF-16LE", 'la-001',0
.text:004046F6                 align 4
.text:004046F8 aSoSo:                                  ; DATA XREF: .text:00401DE0↑o
.text:004046F8                                         ; .text:00402BD0↑o
.text:004046F8                 text "UTF-16LE", 'so-SO',0
.text:00404704 aIiCn:                                  ; DATA XREF: .text:00401DEC↑o
.text:00404704                                         ; .text:00402960↑o
.text:00404704                 text "UTF-16LE", 'ii-CN',0
.text:00404710 aPap029:                                ; DATA XREF: .text:00401DF8↑o
.text:00404710                                         ; .text:00402AE0↑o
.text:00404710                 text "UTF-16LE", 'pap-029',0
.text:00404720 aArnCl:                                 ; DATA XREF: .text:00401E04↑o
.text:00404720                                         ; .text:004026BC↑o
.text:00404720                 text "UTF-16LE", 'arn-CL',0
.text:0040472E                 align 10h
.text:00404730 aMohCa:                                 ; DATA XREF: .text:00401E10↑o
.text:00404730                                         ; .text:00402A58↑o
.text:00404730                 text "UTF-16LE", 'moh-CA',0
.text:0040473E                 align 10h
.text:00404740 aBrFr:                                  ; DATA XREF: .text:00401E1C↑o
.text:00404740                                         ; .text:00402714↑o
.text:00404740                 text "UTF-16LE", 'br-FR',0
.text:0040474C aUgCn:                                  ; DATA XREF: .text:00401E28↑o
.text:0040474C                                         ; .text:00402CA8↑o
.text:0040474C                 text "UTF-16LE", 'ug-CN',0
.text:00404758 aMiNz:                                  ; DATA XREF: .text:00401E34↑o
.text:00404758                                         ; .text:00402A20↑o
.text:00404758                 text "UTF-16LE", 'mi-NZ',0
.text:00404764 aOcFr:                                  ; DATA XREF: .text:00401E40↑o
.text:00404764                                         ; .text:00402AB8↑o
.text:00404764                 text "UTF-16LE", 'oc-FR',0
.text:00404770 aCoFr:                                  ; DATA XREF: .text:00401E4C↑o
.text:00404770                                         ; .text:00402748↑o
.text:00404770                 text "UTF-16LE", 'co-FR',0
.text:0040477C aGswFr:                                 ; DATA XREF: .text:00401E58↑o
.text:0040477C                                         ; .text:004028F0↑o
.text:0040477C                 text "UTF-16LE", 'gsw-FR',0
.text:0040478A                 align 4
.text:0040478C aSahRu:                                 ; DATA XREF: .text:00401E64↑o
.text:0040478C                                         ; .text:00402B68↑o
.text:0040478C                 text "UTF-16LE", 'sah-RU',0
.text:0040479A                 align 4
.text:0040479C aQucLatnGt:                             ; DATA XREF: .text:00401E70↑o
.text:0040479C                                         ; .text:00402B20↑o
.text:0040479C                 text "UTF-16LE", 'quc-Latn-GT',0
.text:004047B4 aRwRw:                                  ; DATA XREF: .text:00401E7C↑o
.text:004047B4                                         ; .text:00402B58↑o
.text:004047B4                 text "UTF-16LE", 'rw-RW',0
.text:004047C0 aWoSn:                                  ; DATA XREF: .text:00401E88↑o
.text:004047C0                                         ; .text:00402CE8↑o
.text:004047C0                 text "UTF-16LE", 'wo-SN',0
.text:004047CC aPrsAf:                                 ; DATA XREF: .text:00401E94↑o
.text:004047CC                                         ; .text:00402AF0↑o
.text:004047CC                 text "UTF-16LE", 'prs-AF',0
.text:004047DA                 align 4
.text:004047DC aGdGb:                                  ; DATA XREF: .text:00401EA0↑o
.text:004047DC                                         ; .text:004028D8↑o
.text:004047DC                 text "UTF-16LE", 'gd-GB',0
.text:004047E8 aKuArabIq:                              ; DATA XREF: .text:00401EAC↑o
.text:004047E8                                         ; .text:004029E8↑o
.text:004047E8                 text "UTF-16LE", 'ku-Arab-IQ',0
.text:004047FE                 align 10h
.text:00404800 aQpsPloc:                               ; DATA XREF: .text:00401EB8↑o
.text:00404800                                         ; .text:00402B0C↑o
.text:00404800                 text "UTF-16LE", 'qps-ploc',0
.text:00404812                 align 4
.text:00404814 aQpsPloca:                              ; DATA XREF: .text:00401EC4↑o
.text:00404814                                         ; .text:00402B10↑o
.text:00404814                 text "UTF-16LE", 'qps-ploca',0
.text:00404828 aArIq:                                  ; DATA XREF: .text:00401ED0↑o
.text:00404828                                         ; .text:00402688↑o
.text:00404828                 text "UTF-16LE", 'ar-IQ',0
.text:00404834 aCaEsValencia:                          ; DATA XREF: .text:00401EDC↑o
.text:00404834                                         ; .text:00402734↑o
.text:00404834                 text "UTF-16LE", 'ca-ES-valencia',0
.text:00404852                 align 4
.text:00404854 aZhCn:                                  ; DATA XREF: .text:00401EE8↑o
.text:00404854                                         ; .text:00402D08↑o
.text:00404854                 text "UTF-16LE", 'zh-CN',0
.text:00404860 aDeCh:                                  ; DATA XREF: .text:00401EF4↑o
.text:00404860                                         ; .text:0040276C↑o
.text:00404860                 text "UTF-16LE", 'de-CH',0
.text:0040486C aEnGb:                                  ; DATA XREF: .text:00401F00↑o
.text:0040486C                                         ; .text:004027AC↑o
.text:0040486C                 text "UTF-16LE", 'en-GB',0
.text:00404878 aEsMx:                                  ; DATA XREF: .text:00401F0C↑o
.text:00404878                                         ; .text:0040281C↑o
.text:00404878                 text "UTF-16LE", 'es-MX',0
.text:00404884 aFrBe:                                  ; DATA XREF: .text:00401F18↑o
.text:00404884                                         ; .text:0040288C↑o
.text:00404884                 text "UTF-16LE", 'fr-BE',0
.text:00404890 aItCh:                                  ; DATA XREF: .text:00401F24↑o
.text:00404890                                         ; .text:00402970↑o
.text:00404890                 text "UTF-16LE", 'it-CH',0
.text:0040489C aNlBe:                                  ; DATA XREF: .text:00401F30↑o
.text:0040489C                                         ; .text:00402A98↑o
.text:0040489C                 text "UTF-16LE", 'nl-BE',0
.text:004048A8 aNnNo:                                  ; DATA XREF: .text:00401F3C↑o
.text:004048A8                                         ; .text:00402AA4↑o
.text:004048A8                 text "UTF-16LE", 'nn-NO',0
.text:004048B4 aPtPt:                                  ; DATA XREF: .text:00401F48↑o
.text:004048B4                                         ; .text:00402B04↑o
.text:004048B4                 text "UTF-16LE", 'pt-PT',0
.text:004048C0 aRoMd:                                  ; DATA XREF: .text:00401F54↑o
.text:004048C0                                         ; .text:00402B40↑o
.text:004048C0                 text "UTF-16LE", 'ro-MD',0
.text:004048CC aRuMd:                                  ; DATA XREF: .text:00401F60↑o
.text:004048CC                                         ; .text:00402B4C↑o
.text:004048CC                 text "UTF-16LE", 'ru-MD',0
.text:004048D8 aSvFi:                                  ; DATA XREF: .text:00401F78↑o
.text:004048D8                                         ; .text:00402C14↑o
.text:004048D8                 text "UTF-16LE", 'sv-FI',0
.text:004048E4 aUrIn:                                  ; DATA XREF: .text:00401F84↑o
.text:004048E4                                         ; .text:00402CB8↑o
.text:004048E4                 text "UTF-16LE", 'ur-IN',0
.text:004048F0 aAzCyrlAz:                              ; DATA XREF: .text:00401F90↑o
.text:004048F0                                         ; .text:004026D0↑o
.text:004048F0                 text "UTF-16LE", 'az-Cyrl-AZ',0
.text:00404906                 align 4
.text:00404908 aDsbDe:                                 ; DATA XREF: .text:00401F9C↑o
.text:00404908                                         ; .text:00402780↑o
.text:00404908                 text "UTF-16LE", 'dsb-DE',0
.text:00404916                 align 4
.text:00404918 aTnBw:                                  ; DATA XREF: .text:00401FA8↑o
.text:00404918                                         ; .text:00402C6C↑o
.text:00404918                 text "UTF-16LE", 'tn-BW',0
.text:00404924 aSeSe:                                  ; DATA XREF: .text:00401FB4↑o
.text:00404924                                         ; .text:00402B88↑o
.text:00404924                 text "UTF-16LE", 'se-SE',0
.text:00404930 aGaIe:                                  ; DATA XREF: .text:00401FC0↑o
.text:00404930                                         ; .text:004028D0↑o
.text:00404930                 text "UTF-16LE", 'ga-IE',0
.text:0040493C aMsBn:                                  ; DATA XREF: .text:00401FCC↑o
.text:0040493C                                         ; .text:00402A68↑o
.text:0040493C                 text "UTF-16LE", 'ms-BN',0
.text:00404948 aUzCyrlUz:                              ; DATA XREF: .text:00401FD8↑o
.text:00404948                                         ; .text:00402CC8↑o
.text:00404948                 text "UTF-16LE", 'uz-Cyrl-UZ',0
.text:0040495E                 align 10h
.text:00404960 aBnBd:                                  ; DATA XREF: .text:00401FE4↑o
.text:00404960                                         ; .text:00402700↑o
.text:00404960                 text "UTF-16LE", 'bn-BD',0
.text:0040496C aPaArabPk:                              ; DATA XREF: .text:00401FF0↑o
.text:0040496C                                         ; .text:00402AD4↑o
.text:0040496C                 text "UTF-16LE", 'pa-Arab-PK',0
.text:00404982                 align 4
.text:00404984 aTaLk:                                  ; DATA XREF: .text:00401FFC↑o
.text:00404984                                         ; .text:00402C34↑o
.text:00404984                 text "UTF-16LE", 'ta-LK',0
.text:00404990 aMnMongCn:                              ; DATA XREF: .text:00402008↑o
.text:00404990                                         ; .text:00402A44↑o
.text:00404990                 text "UTF-16LE", 'mn-Mong-CN',0
.text:004049A6                 align 4
.text:004049A8 aSdArabPk:                              ; DATA XREF: .text:00402014↑o
.text:004049A8                                         ; .text:00402B74↑o
.text:004049A8                 text "UTF-16LE", 'sd-Arab-PK',0
.text:004049BE                 align 10h
.text:004049C0 aTzmLatnDz:                             ; DATA XREF: .text:0040202C↑o
.text:004049C0                                         ; .text:00402C98↑o
.text:004049C0                 text "UTF-16LE", 'tzm-Latn-DZ',0
.text:004049D8 aKsDevaIn:                              ; DATA XREF: .text:00402038↑o
.text:004049D8                                         ; .text:004029DC↑o
.text:004049D8                 text "UTF-16LE", 'ks-Deva-IN',0
.text:004049EE                 align 10h
.text:004049F0 aNeIn:                                  ; DATA XREF: .text:00402044↑o
.text:004049F0                                         ; .text:00402A8C↑o
.text:004049F0                 text "UTF-16LE", 'ne-IN',0
.text:004049FC aFfLatnSn:                              ; DATA XREF: .text:00402050↑o
.text:004049FC                                         ; .text:00402864↑o
.text:004049FC                 text "UTF-16LE", 'ff-Latn-SN',0
.text:00404A12                 align 4
.text:00404A14 aQuzEc:                                 ; DATA XREF: .text:0040205C↑o
.text:00404A14                                         ; .text:00402B2C↑o
.text:00404A14                 text "UTF-16LE", 'quz-EC',0
.text:00404A22                 align 4
.text:00404A24 aTiEr:                                  ; DATA XREF: .text:00402068↑o
.text:00404A24                                         ; .text:00402C58↑o
.text:00404A24                 text "UTF-16LE", 'ti-ER',0
.text:00404A30 aQpsLatnXSh:                            ; DATA XREF: .text:00402074↑o
.text:00404A30                                         ; .text:00402B08↑o
.text:00404A30                 text "UTF-16LE", 'qps-Latn-x-sh',0
.text:00404A4C aQpsPlocm:                              ; DATA XREF: .text:00402080↑o
.text:00404A4C                                         ; .text:00402B14↑o
.text:00404A4C                 text "UTF-16LE", 'qps-plocm',0
.text:00404A60 aArEg:                                  ; DATA XREF: .text:0040208C↑o
.text:00404A60                                         ; .text:00402684↑o
.text:00404A60                 text "UTF-16LE", 'ar-EG',0
.text:00404A6C aZhHk:                                  ; DATA XREF: .text:00402098↑o
.text:00404A6C                                         ; .text:00402D14↑o
.text:00404A6C                 text "UTF-16LE", 'zh-HK',0
.text:00404A78 aDeAt:                                  ; DATA XREF: .text:004020A4↑o
.text:00404A78                                         ; .text:00402768↑o
.text:00404A78                 text "UTF-16LE", 'de-AT',0
.text:00404A84 aEnAu:                                  ; DATA XREF: .text:004020B0↑o
.text:00404A84                                         ; .text:004027A0↑o
.text:00404A84                 text "UTF-16LE", 'en-AU',0
.text:00404A90 aEsEs:                                  ; DATA XREF: .text:004020BC↑o
.text:00404A90                                         ; .text:0040280C↑o
.text:00404A90                 text "UTF-16LE", 'es-ES',0
.text:00404A9C aFrCa:                                  ; DATA XREF: .text:004020C8↑o
.text:00404A9C                                         ; .text:00402890↑o
.text:00404A9C                 text "UTF-16LE", 'fr-CA',0
.text:00404AA8 aSeFi:                                  ; DATA XREF: .text:004020E0↑o
.text:00404AA8                                         ; .text:00402B80↑o
.text:00404AA8                 text "UTF-16LE", 'se-FI',0
.text:00404AB4 aMnMongMn:                              ; DATA XREF: .text:004020EC↑o
.text:00404AB4                                         ; .text:00402A48↑o
.text:00404AB4                 text "UTF-16LE", 'mn-Mong-MN',0
.text:00404ACA                 align 4
.text:00404ACC aDzBt:                                  ; DATA XREF: .text:004020F8↑o
.text:00404ACC                                         ; .text:0040278C↑o
.text:00404ACC                 text "UTF-16LE", 'dz-BT',0
.text:00404AD8 aQuzPe:                                 ; DATA XREF: .text:00402104↑o
.text:00404AD8                                         ; .text:00402B30↑o
.text:00404AD8                 text "UTF-16LE", 'quz-PE',0
.text:00404AE6                 align 4
.text:00404AE8 aArLy:                                  ; DATA XREF: .text:00402110↑o
.text:00404AE8                                         ; .text:00402698↑o
.text:00404AE8                 text "UTF-16LE", 'ar-LY',0
.text:00404AF4 aZhSg:                                  ; DATA XREF: .text:0040211C↑o
.text:00404AF4                                         ; .text:00402D1C↑o
.text:00404AF4                 text "UTF-16LE", 'zh-SG',0
.text:00404B00 aDeLu:                                  ; DATA XREF: .text:00402128↑o
.text:00404B00                                         ; .text:00402778↑o
.text:00404B00                 text "UTF-16LE", 'de-LU',0
.text:00404B0C aEnCa:                                  ; DATA XREF: .text:00402134↑o
.text:00404B0C                                         ; .text:004027A8↑o
.text:00404B0C                 text "UTF-16LE", 'en-CA',0
.text:00404B18 aEsGt:                                  ; DATA XREF: .text:00402140↑o
.text:00404B18                                         ; .text:00402814↑o
.text:00404B18                 text "UTF-16LE", 'es-GT',0
.text:00404B24 aFrCh:                                  ; DATA XREF: .text:0040214C↑o
.text:00404B24                                         ; .text:00402898↑o
.text:00404B24                 text "UTF-16LE", 'fr-CH',0
.text:00404B30 aHrBa:                                  ; DATA XREF: .text:00402158↑o
.text:00404B30                                         ; .text:00402924↑o
.text:00404B30                 text "UTF-16LE", 'hr-BA',0
.text:00404B3C aSmjNo:                                 ; DATA XREF: .text:00402164↑o
.text:00404B3C                                         ; .text:00402BB4↑o
.text:00404B3C                 text "UTF-16LE", 'smj-NO',0
.text:00404B4A                 align 4
.text:00404B4C aTzmTfngMa:                             ; DATA XREF: .text:00402170↑o
.text:00404B4C                                         ; .text:00402CA0↑o
.text:00404B4C                 text "UTF-16LE", 'tzm-Tfng-MA',0
.text:00404B64 aArDz:                                  ; DATA XREF: .text:0040217C↑o
.text:00404B64                                         ; .text:00402680↑o
.text:00404B64                 text "UTF-16LE", 'ar-DZ',0
.text:00404B70 aZhMo:                                  ; DATA XREF: .text:00402188↑o
.text:00404B70                                         ; .text:00402D18↑o
.text:00404B70                 text "UTF-16LE", 'zh-MO',0
.text:00404B7C aDeLi:                                  ; DATA XREF: .text:00402194↑o
.text:00404B7C                                         ; .text:00402774↑o
.text:00404B7C                 text "UTF-16LE", 'de-LI',0
.text:00404B88 aEnNz:                                  ; DATA XREF: .text:004021A0↑o
.text:00404B88                                         ; .text:004027C8↑o
.text:00404B88                 text "UTF-16LE", 'en-NZ',0
.text:00404B94 aEsCr:                                  ; DATA XREF: .text:004021AC↑o
.text:00404B94                                         ; .text:004027FC↑o
.text:00404B94                 text "UTF-16LE", 'es-CR',0
.text:00404BA0 aFrLu:                                  ; DATA XREF: .text:004021B8↑o
.text:00404BA0                                         ; .text:004028AC↑o
.text:00404BA0                 text "UTF-16LE", 'fr-LU',0
.text:00404BAC aSmjSe:                                 ; DATA XREF: .text:004021D0↑o
.text:00404BAC                                         ; .text:00402BB8↑o
.text:00404BAC                 text "UTF-16LE", 'smj-SE',0
.text:00404BBA                 align 4
.text:00404BBC aArMa:                                  ; DATA XREF: .text:004021DC↑o
.text:00404BBC                                         ; .text:0040269C↑o
.text:00404BBC                 text "UTF-16LE", 'ar-MA',0
.text:00404BC8 aEnIe:                                  ; DATA XREF: .text:004021E8↑o
.text:00404BC8                                         ; .text:004027B8↑o
.text:00404BC8                 text "UTF-16LE", 'en-IE',0
.text:00404BD4 aEsPa:                                  ; DATA XREF: .text:004021F4↑o
.text:00404BD4                                         ; .text:00402824↑o
.text:00404BD4                 text "UTF-16LE", 'es-PA',0
.text:00404BE0 aFrMc:                                  ; DATA XREF: .text:00402200↑o
.text:00404BE0                                         ; .text:004028B4↑o
.text:00404BE0                 text "UTF-16LE", 'fr-MC',0
.text:00404BEC aSmaNo:                                 ; DATA XREF: .text:00402218↑o
.text:00404BEC                                         ; .text:00402BA8↑o
.text:00404BEC                 text "UTF-16LE", 'sma-NO',0
.text:00404BFA                 align 4
.text:00404BFC aArTn:                                  ; DATA XREF: .text:00402224↑o
.text:00404BFC                                         ; .text:004026B0↑o
.text:00404BFC                 text "UTF-16LE", 'ar-TN',0
.text:00404C08 aEnZa:                                  ; DATA XREF: .text:00402230↑o
.text:00404C08                                         ; .text:004027DC↑o
.text:00404C08                 text "UTF-16LE", 'en-ZA',0
.text:00404C14 aEsDo:                                  ; DATA XREF: .text:0040223C↑o
.text:00404C14                                         ; .text:00402804↑o
.text:00404C14                 text "UTF-16LE", 'es-DO',0
.text:00404C20 aFr029:                                 ; DATA XREF: .text:00402248↑o
.text:00404C20                                         ; .text:00402888↑o
.text:00404C20                 text "UTF-16LE", 'fr-029',0
.text:00404C2E                 align 10h
.text:00404C30 aSmaSe:                                 ; DATA XREF: .text:00402260↑o
.text:00404C30                                         ; .text:00402BAC↑o
.text:00404C30                 text "UTF-16LE", 'sma-SE',0
.text:00404C3E                 align 10h
.text:00404C40 aArOm:                                  ; DATA XREF: .text:0040226C↑o
.text:00404C40                                         ; .text:004026A0↑o
.text:00404C40                 text "UTF-16LE", 'ar-OM',0
.text:00404C4C aEnJm:                                  ; DATA XREF: .text:00402278↑o
.text:00404C4C                                         ; .text:004027C0↑o
.text:00404C4C                 text "UTF-16LE", 'en-JM',0
.text:00404C58 aEsVe:                                  ; DATA XREF: .text:00402284↑o
.text:00404C58                                         ; .text:00402840↑o
.text:00404C58                 text "UTF-16LE", 'es-VE',0
.text:00404C64 aFrRe:                                  ; DATA XREF: .text:00402290↑o
.text:00404C64                                         ; .text:004028BC↑o
.text:00404C64                 text "UTF-16LE", 'fr-RE',0
.text:00404C70 aSmsFi:                                 ; DATA XREF: .text:004022A8↑o
.text:00404C70                                         ; .text:00402BC8↑o
.text:00404C70                 text "UTF-16LE", 'sms-FI',0
.text:00404C7E                 align 10h
.text:00404C80 aArYe:                                  ; DATA XREF: .text:004022B4↑o
.text:00404C80                                         ; .text:004026B4↑o
.text:00404C80                 text "UTF-16LE", 'ar-YE',0
.text:00404C8C aEn029:                                 ; DATA XREF: .text:004022C0↑o
.text:00404C8C                                         ; .text:0040279C↑o
.text:00404C8C                 text "UTF-16LE", 'en-029',0
.text:00404C9A                 align 4
.text:00404C9C aEsCo:                                  ; DATA XREF: .text:004022CC↑o
.text:00404C9C                                         ; .text:004027F8↑o
.text:00404C9C                 text "UTF-16LE", 'es-CO',0
.text:00404CA8 aFrCd:                                  ; DATA XREF: .text:004022D8↑o
.text:00404CA8                                         ; .text:00402894↑o
.text:00404CA8                 text "UTF-16LE", 'fr-CD',0
.text:00404CB4 aSrLatnRs:                              ; DATA XREF: .text:004022E4↑o
.text:00404CB4                                         ; .text:00402C04↑o
.text:00404CB4                 text "UTF-16LE", 'sr-Latn-RS',0
.text:00404CCA                 align 4
.text:00404CCC aSmnFi:                                 ; DATA XREF: .text:004022F0↑o
.text:00404CCC                                         ; .text:00402BC0↑o
.text:00404CCC                 text "UTF-16LE", 'smn-FI',0
.text:00404CDA                 align 4
.text:00404CDC aArSy:                                  ; DATA XREF: .text:004022FC↑o
.text:00404CDC                                         ; .text:004026AC↑o
.text:00404CDC                 text "UTF-16LE", 'ar-SY',0
.text:00404CE8 aEnBz:                                  ; DATA XREF: .text:00402308↑o
.text:00404CE8                                         ; .text:004027A4↑o
.text:00404CE8                 text "UTF-16LE", 'en-BZ',0
.text:00404CF4 aEsPe:                                  ; DATA XREF: .text:00402314↑o
.text:00404CF4                                         ; .text:00402828↑o
.text:00404CF4                 text "UTF-16LE", 'es-PE',0
.text:00404D00 aFrSn:                                  ; DATA XREF: .text:00402320↑o
.text:00404D00                                         ; .text:004028C0↑o
.text:00404D00                 text "UTF-16LE", 'fr-SN',0
.text:00404D0C aSrCyrlRs:                              ; DATA XREF: .text:0040232C↑o
.text:00404D0C                                         ; .text:00402BF0↑o
.text:00404D0C                 text "UTF-16LE", 'sr-Cyrl-RS',0
.text:00404D22                 align 4
.text:00404D24 aArJo:                                  ; DATA XREF: .text:00402338↑o
.text:00404D24                                         ; .text:0040268C↑o
.text:00404D24                 text "UTF-16LE", 'ar-JO',0
.text:00404D30 aEnTt:                                  ; DATA XREF: .text:00402344↑o
.text:00404D30                                         ; .text:004027D4↑o
.text:00404D30                 text "UTF-16LE", 'en-TT',0
.text:00404D3C aEsAr:                                  ; DATA XREF: .text:00402350↑o
.text:00404D3C                                         ; .text:004027EC↑o
.text:00404D3C                 text "UTF-16LE", 'es-AR',0
.text:00404D48 aFrCm:                                  ; DATA XREF: .text:0040235C↑o
.text:00404D48                                         ; .text:004028A0↑o
.text:00404D48                 text "UTF-16LE", 'fr-CM',0
.text:00404D54 aSrLatnMe:                              ; DATA XREF: .text:00402368↑o
.text:00404D54                                         ; .text:00402C00↑o
.text:00404D54                 text "UTF-16LE", 'sr-Latn-ME',0
.text:00404D6A                 align 4
.text:00404D6C aArLb:                                  ; DATA XREF: .text:00402374↑o
.text:00404D6C                                         ; .text:00402694↑o
.text:00404D6C                 text "UTF-16LE", 'ar-LB',0
.text:00404D78 aEnZw:                                  ; DATA XREF: .text:00402380↑o
.text:00404D78                                         ; .text:004027E0↑o
.text:00404D78                 text "UTF-16LE", 'en-ZW',0
.text:00404D84 aEsEc:                                  ; DATA XREF: .text:0040238C↑o
.text:00404D84                                         ; .text:00402808↑o
.text:00404D84                 text "UTF-16LE", 'es-EC',0
.text:00404D90 aFrCi:                                  ; DATA XREF: .text:00402398↑o
.text:00404D90                                         ; .text:0040289C↑o
.text:00404D90                 text "UTF-16LE", 'fr-CI',0
.text:00404D9C aSrCyrlMe:                              ; DATA XREF: .text:004023A4↑o
.text:00404D9C                                         ; .text:00402BEC↑o
.text:00404D9C                 text "UTF-16LE", 'sr-Cyrl-ME',0
.text:00404DB2                 align 4
.text:00404DB4 aArKw:                                  ; DATA XREF: .text:004023B0↑o
.text:00404DB4                                         ; .text:00402690↑o
.text:00404DB4                 text "UTF-16LE", 'ar-KW',0
.text:00404DC0 aEnPh:                                  ; DATA XREF: .text:004023BC↑o
.text:00404DC0                                         ; .text:004027CC↑o
.text:00404DC0                 text "UTF-16LE", 'en-PH',0
.text:00404DCC aEsCl:                                  ; DATA XREF: .text:004023C8↑o
.text:00404DCC                                         ; .text:004027F4↑o
.text:00404DCC                 text "UTF-16LE", 'es-CL',0
.text:00404DD8 aFrMl:                                  ; DATA XREF: .text:004023D4↑o
.text:00404DD8                                         ; .text:004028B8↑o
.text:00404DD8                 text "UTF-16LE", 'fr-ML',0
.text:00404DE4 aArAe:                                  ; DATA XREF: .text:004023E0↑o
.text:00404DE4                                         ; .text:00402678↑o
.text:00404DE4                 text "UTF-16LE", 'ar-AE',0
.text:00404DF0 aEnId:                                  ; DATA XREF: .text:004023EC↑o
.text:00404DF0                                         ; .text:004027B4↑o
.text:00404DF0                 text "UTF-16LE", 'en-ID',0
.text:00404DFC aEsUy:                                  ; DATA XREF: .text:004023F8↑o
.text:00404DFC                                         ; .text:0040283C↑o
.text:00404DFC                 text "UTF-16LE", 'es-UY',0
.text:00404E08 aFrMa:                                  ; DATA XREF: .text:00402404↑o
.text:00404E08                                         ; .text:004028B0↑o
.text:00404E08                 text "UTF-16LE", 'fr-MA',0
.text:00404E14 aArBh:                                  ; DATA XREF: .text:00402410↑o
.text:00404E14                                         ; .text:0040267C↑o
.text:00404E14                 text "UTF-16LE", 'ar-BH',0
.text:00404E20 aEnHk:                                  ; DATA XREF: .text:0040241C↑o
.text:00404E20                                         ; .text:004027B0↑o
.text:00404E20                 text "UTF-16LE", 'en-HK',0
.text:00404E2C aEsPy:                                  ; DATA XREF: .text:00402428↑o
.text:00404E2C                                         ; .text:00402830↑o
.text:00404E2C                 text "UTF-16LE", 'es-PY',0
.text:00404E38 aFrHt:                                  ; DATA XREF: .text:00402434↑o
.text:00404E38                                         ; .text:004028A8↑o
.text:00404E38                 text "UTF-16LE", 'fr-HT',0
.text:00404E44 aArQa:                                  ; DATA XREF: .text:00402440↑o
.text:00404E44                                         ; .text:004026A4↑o
.text:00404E44                 text "UTF-16LE", 'ar-QA',0
.text:00404E50 aEnIn:                                  ; DATA XREF: .text:0040244C↑o
.text:00404E50                                         ; .text:004027BC↑o
.text:00404E50                 text "UTF-16LE", 'en-IN',0
.text:00404E5C aEsBo:                                  ; DATA XREF: .text:00402458↑o
.text:00404E5C                                         ; .text:004027F0↑o
.text:00404E5C                 text "UTF-16LE", 'es-BO',0
.text:00404E68 aEnMy:                                  ; DATA XREF: .text:00402464↑o
.text:00404E68                                         ; .text:004027C4↑o
.text:00404E68                 text "UTF-16LE", 'en-MY',0
.text:00404E74 aEsSv:                                  ; DATA XREF: .text:00402470↑o
.text:00404E74                                         ; .text:00402834↑o
.text:00404E74                 text "UTF-16LE", 'es-SV',0
.text:00404E80 aEnSg:                                  ; DATA XREF: .text:0040247C↑o
.text:00404E80                                         ; .text:004027D0↑o
.text:00404E80                 text "UTF-16LE", 'en-SG',0
.text:00404E8C aEsHn:                                  ; DATA XREF: .text:00402488↑o
.text:00404E8C                                         ; .text:00402818↑o
.text:00404E8C                 text "UTF-16LE", 'es-HN',0
.text:00404E98 aEsNi:                                  ; DATA XREF: .text:00402494↑o
.text:00404E98                                         ; .text:00402820↑o
.text:00404E98                 text "UTF-16LE", 'es-NI',0
.text:00404EA4 aEsPr:                                  ; DATA XREF: .text:004024A0↑o
.text:00404EA4                                         ; .text:0040282C↑o
.text:00404EA4                 text "UTF-16LE", 'es-PR',0
.text:00404EB0 aEsUs:                                  ; DATA XREF: .text:004024AC↑o
.text:00404EB0                                         ; .text:00402838↑o
.text:00404EB0                 text "UTF-16LE", 'es-US',0
.text:00404EBC aEs419:                                 ; DATA XREF: .text:004024B8↑o
.text:00404EBC                                         ; .text:004027E8↑o
.text:00404EBC                 text "UTF-16LE", 'es-419',0
.text:00404ECA                 align 4
.text:00404ECC aEsCu:                                  ; DATA XREF: .text:004024C4↑o
.text:00404ECC                                         ; .text:00402800↑o
.text:00404ECC                 text "UTF-16LE", 'es-CU',0
.text:00404ED8 aBsCyrl:                                ; DATA XREF: .text:004024D0↑o
.text:00404ED8                                         ; .text:0040271C↑o
.text:00404ED8                 text "UTF-16LE", 'bs-Cyrl',0
.text:00404EE8 aBsLatn:                                ; DATA XREF: .text:004024DC↑o
.text:00404EE8                                         ; .text:00402724↑o
.text:00404EE8                 text "UTF-16LE", 'bs-Latn',0
.text:00404EF8 aSrCyrl:                                ; DATA XREF: .text:004024E8↑o
.text:00404EF8                                         ; .text:00402BE0↑o
.text:00404EF8                 text "UTF-16LE", 'sr-Cyrl',0
.text:00404F08 aSrLatn:                                ; DATA XREF: .text:004024F4↑o
.text:00404F08                                         ; .text:00402BF4↑o
.text:00404F08                 text "UTF-16LE", 'sr-Latn',0
.text:00404F18 aSmn:                                   ; DATA XREF: .text:00402500↑o
.text:00404F18                                         ; .text:00402BBC↑o
.text:00404F18                 text "UTF-16LE", 'smn',0
.text:00404F20 aAzCyrl:                                ; DATA XREF: .text:0040250C↑o
.text:00404F20                                         ; .text:004026CC↑o
.text:00404F20                 text "UTF-16LE", 'az-Cyrl',0
.text:00404F30 aSms:                                   ; DATA XREF: .text:00402518↑o
.text:00404F30                                         ; .text:00402BC4↑o
.text:00404F30                 text "UTF-16LE", 'sms',0
.text:00404F38 aZh:                                    ; DATA XREF: .text:00402524↑o
.text:00404F38                                         ; .text:00402D04↑o
.text:00404F38                 text "UTF-16LE", 'zh',0
.text:00404F3E                 align 10h
.text:00404F40 aNn:                                    ; DATA XREF: .text:00402530↑o
.text:00404F40                                         ; .text:00402AA0↑o
.text:00404F40                 text "UTF-16LE", 'nn',0
.text:00404F46                 align 4
.text:00404F48 aBs:                                    ; DATA XREF: .text:0040253C↑o
.text:00404F48                                         ; .text:00402718↑o
.text:00404F48                 text "UTF-16LE", 'bs',0
.text:00404F4E                 align 10h
.text:00404F50 aAzLatn:                                ; DATA XREF: .text:00402548↑o
.text:00404F50                                         ; .text:004026D4↑o
.text:00404F50                 text "UTF-16LE", 'az-Latn',0
.text:00404F60 aSma:                                   ; DATA XREF: .text:00402554↑o
.text:00404F60                                         ; .text:00402BA4↑o
.text:00404F60                 text "UTF-16LE", 'sma',0
.text:00404F68 aUzCyrl:                                ; DATA XREF: .text:00402560↑o
.text:00404F68                                         ; .text:00402CC4↑o
.text:00404F68                 text "UTF-16LE", 'uz-Cyrl',0
.text:00404F78 aMnCyrl:                                ; DATA XREF: .text:0040256C↑o
.text:00404F78                                         ; .text:00402A38↑o
.text:00404F78                 text "UTF-16LE", 'mn-Cyrl',0
.text:00404F88 aIuCans:                                ; DATA XREF: .text:00402578↑o
.text:00404F88                                         ; .text:0040297C↑o
.text:00404F88                 text "UTF-16LE", 'iu-Cans',0
.text:00404F98 aTzmTfng:                               ; DATA XREF: .text:00402584↑o
.text:00404F98                                         ; .text:00402C9C↑o
.text:00404F98                 text "UTF-16LE", 'tzm-Tfng',0
.text:00404FAA                 align 4
.text:00404FAC aNb:                                    ; DATA XREF: .text:0040259C↑o
.text:00404FAC                                         ; .text:00402A80↑o
.text:00404FAC                 text "UTF-16LE", 'nb',0
.text:00404FB2                 align 4
.text:00404FB4 aSr:                                    ; DATA XREF: .text:004025A8↑o
.text:00404FB4                                         ; .text:00402BDC↑o
.text:00404FB4                 text "UTF-16LE", 'sr',0
.text:00404FBA                 align 4
.text:00404FBC aTgCyrl:                                ; DATA XREF: .text:004025B4↑o
.text:00404FBC                                         ; .text:00402C44↑o
.text:00404FBC                 text "UTF-16LE", 'tg-Cyrl',0
.text:00404FCC aDsb:                                   ; DATA XREF: .text:004025C0↑o
.text:00404FCC                                         ; .text:0040277C↑o
.text:00404FCC                 text "UTF-16LE", 'dsb',0
.text:00404FD4 aSmj:                                   ; DATA XREF: .text:004025CC↑o
.text:00404FD4                                         ; .text:00402BB0↑o
.text:00404FD4                 text "UTF-16LE", 'smj',0
.text:00404FDC aUzLatn:                                ; DATA XREF: .text:004025D8↑o
.text:00404FDC                                         ; .text:00402CCC↑o
.text:00404FDC                 text "UTF-16LE", 'uz-Latn',0
.text:00404FEC aPaArab:                                ; DATA XREF: .text:004025E4↑o
.text:00404FEC                                         ; .text:00402AD0↑o
.text:00404FEC                 text "UTF-16LE", 'pa-Arab',0
.text:00404FFC aMnMong:                                ; DATA XREF: .text:004025F0↑o
.text:00404FFC                                         ; .text:00402A40↑o
.text:00404FFC                 text "UTF-16LE", 'mn-Mong',0
.text:0040500C aSdArab:                                ; DATA XREF: .text:004025FC↑o
.text:0040500C                                         ; .text:00402B70↑o
.text:0040500C                 text "UTF-16LE", 'sd-Arab',0
.text:0040501C aChrCher:                               ; DATA XREF: .text:00402608↑o
.text:0040501C                                         ; .text:0040273C↑o
.text:0040501C                 text "UTF-16LE", 'chr-Cher',0
.text:0040502E                 align 10h
.text:00405030 aIuLatn:                                ; DATA XREF: .text:00402614↑o
.text:00405030                                         ; .text:00402984↑o
.text:00405030                 text "UTF-16LE", 'iu-Latn',0
.text:00405040 aTzmLatn:                               ; DATA XREF: .text:00402620↑o
.text:00405040                                         ; .text:00402C94↑o
.text:00405040                 text "UTF-16LE", 'tzm-Latn',0
.text:00405052                 align 4
.text:00405054 aFfLatn:                                ; DATA XREF: .text:0040262C↑o
.text:00405054                                         ; .text:00402860↑o
.text:00405054                 text "UTF-16LE", 'ff-Latn',0
.text:00405064 aHaLatn:                                ; DATA XREF: .text:00402638↑o
.text:00405064                                         ; .text:00402900↑o
.text:00405064                 text "UTF-16LE", 'ha-Latn',0
.text:00405074 aQucLatn:                               ; DATA XREF: .text:00402644↑o
.text:00405074                                         ; .text:00402B1C↑o
.text:00405074                 text "UTF-16LE", 'quc-Latn',0
.text:00405086                 align 4
.text:00405088 aKuArab:                                ; DATA XREF: .text:00402650↑o
.text:00405088                                         ; .text:004029E4↑o
.text:00405088                 text "UTF-16LE", 'ku-Arab',0
.text:00405098 word_405098     dw 7Ch                  ; DATA XREF: sub_4120EB+38↓r
.text:0040509A                 dw 35h
.text:0040509C                 dd 5D00BEh, 0E5h, 182017Eh, 137014Bh, 1700112h, 175017Ah
.text:0040509C                 dd 1530142h, 186015Fh, 16B0089h, 1650159h, 1010079h, 0D4004Ch
.text:0040509C                 dd 197002Bh, 19C0122h, 6C00B4h, 2200F4h, 100ABh, 65008Ah
.text:0040509C                 dd 4400EDh, 0CC0129h, 0D80050h, 103007Bh, 192019Bh, 1930163h
.text:0040509C                 dd 20151h, 113008Bh, 1AC005Bh, 8000E3h, 40107h, 51008Dh
.text:0040509C                 dd 500D9h, 6008Eh, 1150139h, 14D008Fh, 1A60144h, 640123h
.text:0040509C                 dd 14000ECh, 900007h, 1660008h, 16C013Ah, 1160145h, 17F0183h
.text:0040509C                 dd 1870154h, 1890160h, 17B014Eh, 171018Bh, 15A0091h, 90176h
.text:0040509C                 dd 1720190h, 17C0188h, 14F0167h, 15B0191h, 13B0177h, 1460092h
.text:0040509C                 dd 117018Ch, 155018Dh, 18E016Dh, 18A0184h, 180018Fh, 240161h
.text:0040509C                 dd 2C00ADh, 2800B5h, 6600B1h, 13201AFh, 0A00EEh, 630093h
.text:0040509C                 dd 3700EBh, 0B00C0h, 118015Ch, 168013Ch, 1780147h, 940173h
.text:0040509C                 dd 1500185h, 1560181h, 162017Dh, 61016Eh, 3B00E9h, 870126h
.text:0040509C                 dd 55010Eh, 7300DDh, 8100FBh, 460108h, 6700CEh, 0EF01B0h
.text:0040509C                 dd 0FC0074h, 95000Ch, 0C10038h, 1480019h, 2D00A2h, 0D00B6h
.text:0040509C                 dd 2A0096h, 6800B3h, 2000F0h, 6F00A9h, 7700F7h, 0E00FFh
.text:0040509C                 dd 0F0097h, 980119h, 1A0005Ch, 1AD00E4h, 10012Eh, 360099h
.text:0040509C                 dd 3E00BFh, 6E00C6h, 5200F6h, 4A00DAh, 1100D2h, 56009Ah
.text:0040509C                 dd 7000DEh, 5F00F8h, 13000E7h, 1B20088h, 3F010Fh, 7500C7h
.text:0040509C                 dd 6D00FDh, 5300F5h, 2600DBh, 2500AFh, 7E00AEh, 2E0105h
.text:0040509C                 dd 4B00B7h, 4F00D3h, 0D7019Fh, 12C01AAh, 57013Fh, 7A00DFh
.text:0040509C                 dd 4D0102h, 3D00D5h, 0C50127h, 0C20039h, 0DC0054h, 9C01A3h
.text:0040509C                 dd 1310060h, 1200E8h, 9B011Ah, 11B019Ah, 6B0013h, 7F00F3h
.text:0040509C                 dd 710106h, 4700F9h, 4500CFh, 12A01A9h, 7800CDh, 140100h
.text:0040509C                 dd 86009Dh, 62010Dh, 1500EAh, 11C009Eh, 1100135h, 1360111h
.text:0040509C                 dd 1B10083h, 6A010Ah, 13300F2h, 160141h, 17009Fh, 0A0011Dh
.text:0040509C                 dd 11E0018h, 8400A1h, 4E010Bh, 8200D6h, 580109h, 12D01ABh
.text:0040509C                 dd 3A00E0h, 0C3013Eh, 5A0125h, 1A00E2h, 2300A3h, 19D00ACh
.text:0040509C                 dd 15E0158h, 14901A7h, 1960152h, 198016Ah, 760164h, 1B00FEh
.text:0040509C                 dd 1A400A4h, 15D0194h, 179013Dh, 195016Fh, 11F0157h, 1690174h
.text:0040509C                 dd 0B8002Fh, 120001Ch, 4000A5h, 5900C8h, 4800E1h, 12B00D0h
.text:0040509C                 dd 0D10049h, 1A50027h, 1D00B0h, 7200A6h, 0FA0134h, 0C90041h
.text:0040509C                 dd 1240031h, 1E00BAh, 3000A7h, 4300B9h, 5E00CBh, 1AE00E6h
.text:0040509C                 dd 1A1012Fh, 7D014Ah, 210104h, 1F00AAh, 0A80121h, 19E0042h
.text:0040509C                 dd 1A80128h, 3200CAh, 2900BBh, 8500B2h, 33010Ch, 3C00BCh
.text:0040509C                 dd 6900C4h, 19900F1h, 30114h, 13801A2h, 143014Ch, 34008Ch
.text:0040509C                 dd 0BDh
.text:00405400 ; Debug Directory entries
.text:00405400                 dd 0                    ; Characteristics
.text:00405404                 dd 44B636F0h            ; TimeDateStamp: Thu Jul 13 12:05:04 2006
.text:00405408                 dw 0                    ; MajorVersion
.text:0040540A                 dw 0                    ; MinorVersion
.text:0040540C                 dd 2                    ; Type: IMAGE_DEBUG_TYPE_CODEVIEW
.text:00405410                 dd 23h                  ; SizeOfData
.text:00405414                 dd rva asc_405464       ; AddressOfRawData
.text:00405418                 dd 4864h                ; PointerToRawData
.text:0040541C                 dd 0                    ; Characteristics
.text:00405420                 dd 44B636F0h            ; TimeDateStamp: Thu Jul 13 12:05:04 2006
.text:00405424                 dw 0                    ; MajorVersion
.text:00405426                 dw 0                    ; MinorVersion
.text:00405428                 dd 0Dh                  ; Type: IMAGE_DEBUG_TYPE_POGO
.text:0040542C                 dd 214h                 ; SizeOfData
.text:00405430                 dd rva aGctl            ; AddressOfRawData
.text:00405434                 dd 4888h                ; PointerToRawData
.text:00405438                 dd 0                    ; Characteristics
.text:0040543C                 dd 44B636F0h            ; TimeDateStamp: Thu Jul 13 12:05:04 2006
.text:00405440                 dw 0                    ; MajorVersion
.text:00405442                 dw 0                    ; MinorVersion
.text:00405444                 dd 10h                  ; Type: IMAGE_DEBUG_TYPE_REPRO
.text:00405448                 dd 0                    ; SizeOfData
.text:0040544C                 dd 0                    ; AddressOfRawData
.text:00405450                 dd 0                    ; PointerToRawData
.text:00405454                 align 10h
.text:00405460 ___safe_se_handler_table dd rva __except_handler4
.text:00405460                                         ; DATA XREF: .text:00402D70↑o
.text:00405464 ; Debug information (IMAGE_DEBUG_TYPE_CODEVIEW)
.text:00405464 asc_405464      db 'RSDS'               ; DATA XREF: .text:00405414↑o
.text:00405464                                         ; CV signature
.text:00405468                 dd 0EEFFBD5Ah           ; Data1 ; GUID
.text:00405468                 dw 94CBh                ; Data2
.text:00405468                 dw 0BA41h               ; Data3
.text:00405468                 db 6Dh, 7Ah, 0Eh, 49h, 0F3h, 8Fh, 0E2h, 0B3h; Data4
.text:00405478                 dd 1                    ; Age
.text:0040547C                 text "UTF-8", 'logman.pdb',0 ; PdbFileName
.text:00405487                 align 4
.text:00405488 ; Debug information (IMAGE_DEBUG_TYPE_POGO)
.text:00405488 aGctl           db 'GCTL',0             ; DATA XREF: .text:00405430↑o
.text:0040548D                 db 10h, 2 dup(0)
.text:00405490                 dd 1DC8h, 6164722Eh, 62246174h, 6372h, 2DC8h, 4, 5452432Eh
.text:00405490                 dd 41435824h, 0
.text:004054B4                 db 0CCh
.text:004054B5                 db 2Dh, 2 dup(0)
.text:004054B8                 dd 4, 5452432Eh, 41435824h, 41h, 2DD0h, 114h, 5452432Eh
.text:004054B8                 dd 55435824h, 0
.text:004054DC                 dd 2EE4h, 4, 5452432Eh, 5A435824h, 0
.text:004054F0                 dd 2EE8h, 4, 5452432Eh, 41495824h, 0
.text:00405504                 dd 2EECh, 4, 5452432Eh, 41495824h, 41h, 2EF0h, 4, 5452432Eh
.text:00405504                 dd 59495824h, 0
.text:0040552C                 dd 2EF4h, 4, 5452432Eh, 5A495824h, 0
.text:00405540                 dd 2EF8h, 168h, 6966672Eh, 7364h, 3060h, 2400h, 6164722Eh
.text:00405540                 dd 6174h, 5460h, 4, 6164722Eh, 73246174h, 74616478h, 61h
.text:00405540                 dd 5464h, 238h, 6164722Eh, 7A246174h, 62647A7Ah, 67h, 569Ch
.text:00405540                 dd 2284h, 7865742Eh, 69642474h, 0
.text:004055A4                 dd 7920h, 0B310h, 7865742Eh, 6E6D2474h, 0
.text:004055B8                 dd 12C30h, 5Ch, 6164782Eh, 78246174h, 0
.text:004055CC                 dd 13000h, 140h, 7461642Eh, 72622461h, 63h, 13140h, 1A60h
.text:004055CC                 dd 7461642Eh, 61h, 14BA0h, 498h, 7373622Eh, 0
.text:00405600                 dd 16000h, 2C8h, 6164692Eh, 35246174h, 0
.text:00405614                 dd 162C8h, 4, 6330302Eh, 6766h, 162CCh, 258h, 6164692Eh
.text:00405614                 dd 32246174h, 0
.text:00405638                 dd 16524h, 14h, 6164692Eh, 33246174h, 0
.text:0040564C                 dd 16538h, 2C8h, 6164692Eh, 34246174h, 0
.text:00405660                 dd 16800h, 0D44h, 6164692Eh, 36246174h, 0
.text:00405674                 dd 18000h, 0F0h, 7273722Eh, 31302463h, 0
.text:00405688                 dd 180F0h, 718h, 7273722Eh, 32302463h, 2 dup(0)
.text:004056A0
.text:004056A0 ; =============== S U B R O U T I N E =======================================
.text:004056A0
.text:004056A0
.text:004056A0 sub_4056A0      proc near               ; DATA XREF: .text:00402DD0↑o
.text:004056A0                                         ; .text:___guard_fids_table↑o
.text:004056A0                 cmp     dword_413150, 0
.text:004056A7                 push    esi
.text:004056A8                 push    edi
.text:004056A9                 mov     edi, offset dword_414F14
.text:004056AE                 jz      short loc_4056C7
.text:004056B0                 and     dword_413150, 0
.text:004056B7                 mov     esi, edi
.text:004056B9                 mov     dword_414F18, esi
.text:004056BF                 mov     dword_414F14, edi
.text:004056C5                 jmp     short loc_4056CD
.text:004056C7 ; ---------------------------------------------------------------------------
.text:004056C7
.text:004056C7 loc_4056C7:                             ; CODE XREF: sub_4056A0+E↑j
.text:004056C7                 mov     esi, dword_414F18
.text:004056CD
.text:004056CD loc_4056CD:                             ; CODE XREF: sub_4056A0+25↑j
.text:004056CD                 push    38h ; '8'       ; Size
.text:004056CF                 push    0               ; Val
.text:004056D1                 push    offset unk_4133CC ; void *
.text:004056D6                 call    memset
.text:004056DB                 add     esp, 0Ch
.text:004056DE                 cmp     [esi], edi
.text:004056E0                 jz      short loc_4056E7
.text:004056E2                 push    3
.text:004056E4                 pop     ecx
.text:004056E5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:004056E7 ; ---------------------------------------------------------------------------
.text:004056E7
.text:004056E7 loc_4056E7:                             ; CODE XREF: sub_4056A0+40↑j
.text:004056E7                 mov     eax, offset dword_4133A8
.text:004056EC                 mov     dword_4133A8, edi
.text:004056F2                 mov     dword_4133AC, esi
.text:004056F8                 mov     [esi], eax
.text:004056FA                 mov     dword_414F18, eax
.text:004056FF                 mov     eax, dword_414FFC
.text:00405704                 mov     dword_4133FC, eax
.text:00405709                 inc     eax
.text:0040570A                 pop     edi
.text:0040570B                 mov     dword_414FFC, eax
.text:00405710                 pop     esi
.text:00405711                 retn
.text:00405711 sub_4056A0      endp
.text:00405711
.text:00405711 ; ---------------------------------------------------------------------------
.text:00405712                 align 10h
.text:00405720
.text:00405720 ; =============== S U B R O U T I N E =======================================
.text:00405720
.text:00405720
.text:00405720 sub_405720      proc near               ; DATA XREF: .text:00402DD4↑o
.text:00405720                                         ; .text:00402EFC↑o
.text:00405720                 cmp     dword_413150, 0
.text:00405727                 push    esi
.text:00405728                 push    edi
.text:00405729                 mov     edi, offset dword_414F14
.text:0040572E                 jz      short loc_405747
.text:00405730                 and     dword_413150, 0
.text:00405737                 mov     esi, edi
.text:00405739                 mov     dword_414F18, esi
.text:0040573F                 mov     dword_414F14, edi
.text:00405745                 jmp     short loc_40574D
.text:00405747 ; ---------------------------------------------------------------------------
.text:00405747
.text:00405747 loc_405747:                             ; CODE XREF: sub_405720+E↑j
.text:00405747                 mov     esi, dword_414F18
.text:0040574D
.text:0040574D loc_40574D:                             ; CODE XREF: sub_405720+25↑j
.text:0040574D                 push    38h ; '8'       ; Size
.text:0040574F                 push    0               ; Val
.text:00405751                 push    offset unk_413E6C ; void *
.text:00405756                 call    memset
.text:0040575B                 add     esp, 0Ch
.text:0040575E                 cmp     [esi], edi
.text:00405760                 jz      short loc_405767
.text:00405762                 push    3
.text:00405764                 pop     ecx
.text:00405765                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00405767 ; ---------------------------------------------------------------------------
.text:00405767
.text:00405767 loc_405767:                             ; CODE XREF: sub_405720+40↑j
.text:00405767                 mov     eax, offset dword_413E48
.text:0040576C                 mov     dword_413E48, edi
.text:00405772                 mov     dword_413E4C, esi
.text:00405778                 mov     [esi], eax
.text:0040577A                 mov     dword_414F18, eax
.text:0040577F                 mov     eax, dword_414FFC
.text:00405784                 mov     dword_413E9C, eax
.text:00405789                 inc     eax
.text:0040578A                 pop     edi
.text:0040578B                 mov     dword_414FFC, eax
.text:00405790                 pop     esi
.text:00405791                 retn
.text:00405791 sub_405720      endp
.text:00405791
.text:00405791 ; ---------------------------------------------------------------------------
.text:00405792                 align 10h
.text:004057A0
.text:004057A0 ; =============== S U B R O U T I N E =======================================
.text:004057A0
.text:004057A0
.text:004057A0 sub_4057A0      proc near               ; DATA XREF: .text:00402DD8↑o
.text:004057A0                                         ; .text:00402F00↑o
.text:004057A0                 cmp     dword_413150, 0
.text:004057A7                 push    esi
.text:004057A8                 push    edi
.text:004057A9                 mov     edi, offset dword_414F14
.text:004057AE                 jz      short loc_4057C7
.text:004057B0                 and     dword_413150, 0
.text:004057B7                 mov     esi, edi
.text:004057B9                 mov     dword_414F18, esi
.text:004057BF                 mov     dword_414F14, edi
.text:004057C5                 jmp     short loc_4057CD
.text:004057C7 ; ---------------------------------------------------------------------------
.text:004057C7
.text:004057C7 loc_4057C7:                             ; CODE XREF: sub_4057A0+E↑j
.text:004057C7                 mov     esi, dword_414F18
.text:004057CD
.text:004057CD loc_4057CD:                             ; CODE XREF: sub_4057A0+25↑j
.text:004057CD                 push    38h ; '8'       ; Size
.text:004057CF                 push    0               ; Val
.text:004057D1                 push    offset unk_41428C ; void *
.text:004057D6                 call    memset
.text:004057DB                 add     esp, 0Ch
.text:004057DE                 cmp     [esi], edi
.text:004057E0                 jz      short loc_4057E7
.text:004057E2                 push    3
.text:004057E4                 pop     ecx
.text:004057E5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:004057E7 ; ---------------------------------------------------------------------------
.text:004057E7
.text:004057E7 loc_4057E7:                             ; CODE XREF: sub_4057A0+40↑j
.text:004057E7                 mov     eax, offset dword_414268
.text:004057EC                 mov     dword_414268, edi
.text:004057F2                 mov     dword_41426C, esi
.text:004057F8                 mov     [esi], eax
.text:004057FA                 mov     dword_414F18, eax
.text:004057FF                 mov     eax, dword_414FFC
.text:00405804                 mov     dword_4142BC, eax
.text:00405809                 inc     eax
.text:0040580A                 pop     edi
.text:0040580B                 mov     dword_414FFC, eax
.text:00405810                 pop     esi
.text:00405811                 retn
.text:00405811 sub_4057A0      endp
.text:00405811
.text:00405811 ; ---------------------------------------------------------------------------
.text:00405812                 align 10h
.text:00405820
.text:00405820 ; =============== S U B R O U T I N E =======================================
.text:00405820
.text:00405820
.text:00405820 sub_405820      proc near               ; DATA XREF: .text:00402DDC↑o
.text:00405820                                         ; .text:00402F04↑o
.text:00405820                 cmp     dword_413150, 0
.text:00405827                 push    esi
.text:00405828                 push    edi
.text:00405829                 mov     edi, offset dword_414F14
.text:0040582E                 jz      short loc_405847
.text:00405830                 and     dword_413150, 0
.text:00405837                 mov     esi, edi
.text:00405839                 mov     dword_414F18, esi
.text:0040583F                 mov     dword_414F14, edi
.text:00405845                 jmp     short loc_40584D
.text:00405847 ; ---------------------------------------------------------------------------
.text:00405847
.text:00405847 loc_405847:                             ; CODE XREF: sub_405820+E↑j
.text:00405847                 mov     esi, dword_414F18
.text:0040584D
.text:0040584D loc_40584D:                             ; CODE XREF: sub_405820+25↑j
.text:0040584D                 push    38h ; '8'       ; Size
.text:0040584F                 push    0               ; Val
.text:00405851                 push    offset unk_413C2C ; void *
.text:00405856                 call    memset
.text:0040585B                 add     esp, 0Ch
.text:0040585E                 cmp     [esi], edi
.text:00405860                 jz      short loc_405867
.text:00405862                 push    3
.text:00405864                 pop     ecx
.text:00405865                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00405867 ; ---------------------------------------------------------------------------
.text:00405867
.text:00405867 loc_405867:                             ; CODE XREF: sub_405820+40↑j
.text:00405867                 mov     eax, offset dword_413C08
.text:0040586C                 mov     dword_413C08, edi
.text:00405872                 mov     dword_413C0C, esi
.text:00405878                 mov     [esi], eax
.text:0040587A                 mov     dword_414F18, eax
.text:0040587F                 mov     eax, dword_414FFC
.text:00405884                 mov     dword_413C5C, eax
.text:00405889                 inc     eax
.text:0040588A                 pop     edi
.text:0040588B                 mov     dword_414FFC, eax
.text:00405890                 pop     esi
.text:00405891                 retn
.text:00405891 sub_405820      endp
.text:00405891
.text:00405891 ; ---------------------------------------------------------------------------
.text:00405892                 align 10h
.text:004058A0
.text:004058A0 ; =============== S U B R O U T I N E =======================================
.text:004058A0
.text:004058A0
.text:004058A0 sub_4058A0      proc near               ; DATA XREF: .text:00402DE0↑o
.text:004058A0                                         ; .text:00402F08↑o
.text:004058A0                 cmp     dword_413150, 0
.text:004058A7                 push    esi
.text:004058A8                 push    edi
.text:004058A9                 mov     edi, offset dword_414F14
.text:004058AE                 jz      short loc_4058C7
.text:004058B0                 and     dword_413150, 0
.text:004058B7                 mov     esi, edi
.text:004058B9                 mov     dword_414F18, esi
.text:004058BF                 mov     dword_414F14, edi
.text:004058C5                 jmp     short loc_4058CD
.text:004058C7 ; ---------------------------------------------------------------------------
.text:004058C7
.text:004058C7 loc_4058C7:                             ; CODE XREF: sub_4058A0+E↑j
.text:004058C7                 mov     esi, dword_414F18
.text:004058CD
.text:004058CD loc_4058CD:                             ; CODE XREF: sub_4058A0+25↑j
.text:004058CD                 push    38h ; '8'       ; Size
.text:004058CF                 push    0               ; Val
.text:004058D1                 push    offset unk_413CEC ; void *
.text:004058D6                 call    memset
.text:004058DB                 add     esp, 0Ch
.text:004058DE                 cmp     [esi], edi
.text:004058E0                 jz      short loc_4058E7
.text:004058E2                 push    3
.text:004058E4                 pop     ecx
.text:004058E5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:004058E7 ; ---------------------------------------------------------------------------
.text:004058E7
.text:004058E7 loc_4058E7:                             ; CODE XREF: sub_4058A0+40↑j
.text:004058E7                 mov     eax, offset dword_413CC8
.text:004058EC                 mov     dword_413CC8, edi
.text:004058F2                 mov     dword_413CCC, esi
.text:004058F8                 mov     [esi], eax
.text:004058FA                 mov     dword_414F18, eax
.text:004058FF                 mov     eax, dword_414FFC
.text:00405904                 mov     dword_413D1C, eax
.text:00405909                 inc     eax
.text:0040590A                 pop     edi
.text:0040590B                 mov     dword_414FFC, eax
.text:00405910                 pop     esi
.text:00405911                 retn
.text:00405911 sub_4058A0      endp
.text:00405911
.text:00405911 ; ---------------------------------------------------------------------------
.text:00405912                 align 10h
.text:00405920
.text:00405920 ; =============== S U B R O U T I N E =======================================
.text:00405920
.text:00405920
.text:00405920 sub_405920      proc near               ; DATA XREF: .text:00402DE4↑o
.text:00405920                                         ; .text:00402F0C↑o
.text:00405920                 cmp     dword_413150, 0
.text:00405927                 push    esi
.text:00405928                 push    edi
.text:00405929                 mov     edi, offset dword_414F14
.text:0040592E                 jz      short loc_405947
.text:00405930                 and     dword_413150, 0
.text:00405937                 mov     esi, edi
.text:00405939                 mov     dword_414F18, esi
.text:0040593F                 mov     dword_414F14, edi
.text:00405945                 jmp     short loc_40594D
.text:00405947 ; ---------------------------------------------------------------------------
.text:00405947
.text:00405947 loc_405947:                             ; CODE XREF: sub_405920+E↑j
.text:00405947                 mov     esi, dword_414F18
.text:0040594D
.text:0040594D loc_40594D:                             ; CODE XREF: sub_405920+25↑j
.text:0040594D                 push    38h ; '8'       ; Size
.text:0040594F                 push    0               ; Val
.text:00405951                 push    offset unk_41497C ; void *
.text:00405956                 call    memset
.text:0040595B                 add     esp, 0Ch
.text:0040595E                 cmp     [esi], edi
.text:00405960                 jz      short loc_405967
.text:00405962                 push    3
.text:00405964                 pop     ecx
.text:00405965                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00405967 ; ---------------------------------------------------------------------------
.text:00405967
.text:00405967 loc_405967:                             ; CODE XREF: sub_405920+40↑j
.text:00405967                 mov     eax, offset dword_414958
.text:0040596C                 mov     dword_414958, edi
.text:00405972                 mov     dword_41495C, esi
.text:00405978                 mov     [esi], eax
.text:0040597A                 mov     dword_414F18, eax
.text:0040597F                 mov     eax, dword_414FFC
.text:00405984                 mov     dword_4149AC, eax
.text:00405989                 inc     eax
.text:0040598A                 pop     edi
.text:0040598B                 mov     dword_414FFC, eax
.text:00405990                 pop     esi
.text:00405991                 retn
.text:00405991 sub_405920      endp
.text:00405991
.text:00405991 ; ---------------------------------------------------------------------------
.text:00405992                 align 10h
.text:004059A0
.text:004059A0 ; =============== S U B R O U T I N E =======================================
.text:004059A0
.text:004059A0
.text:004059A0 sub_4059A0      proc near               ; DATA XREF: .text:00402DE8↑o
.text:004059A0                                         ; .text:00402F10↑o
.text:004059A0                 cmp     dword_413150, 0
.text:004059A7                 push    esi
.text:004059A8                 push    edi
.text:004059A9                 mov     edi, offset dword_414F14
.text:004059AE                 jz      short loc_4059C7
.text:004059B0                 and     dword_413150, 0
.text:004059B7                 mov     esi, edi
.text:004059B9                 mov     dword_414F18, esi
.text:004059BF                 mov     dword_414F14, edi
.text:004059C5                 jmp     short loc_4059CD
.text:004059C7 ; ---------------------------------------------------------------------------
.text:004059C7
.text:004059C7 loc_4059C7:                             ; CODE XREF: sub_4059A0+E↑j
.text:004059C7                 mov     esi, dword_414F18
.text:004059CD
.text:004059CD loc_4059CD:                             ; CODE XREF: sub_4059A0+25↑j
.text:004059CD                 push    38h ; '8'       ; Size
.text:004059CF                 push    0               ; Val
.text:004059D1                 push    offset unk_41317C ; void *
.text:004059D6                 call    memset
.text:004059DB                 add     esp, 0Ch
.text:004059DE                 cmp     [esi], edi
.text:004059E0                 jz      short loc_4059E7
.text:004059E2                 push    3
.text:004059E4                 pop     ecx
.text:004059E5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:004059E7 ; ---------------------------------------------------------------------------
.text:004059E7
.text:004059E7 loc_4059E7:                             ; CODE XREF: sub_4059A0+40↑j
.text:004059E7                 mov     eax, offset dword_413158
.text:004059EC                 mov     dword_413158, edi
.text:004059F2                 mov     dword_41315C, esi
.text:004059F8                 mov     [esi], eax
.text:004059FA                 mov     dword_414F18, eax
.text:004059FF                 mov     eax, dword_414FFC
.text:00405A04                 mov     dword_4131AC, eax
.text:00405A09                 inc     eax
.text:00405A0A                 pop     edi
.text:00405A0B                 mov     dword_414FFC, eax
.text:00405A10                 pop     esi
.text:00405A11                 retn
.text:00405A11 sub_4059A0      endp
.text:00405A11
.text:00405A11 ; ---------------------------------------------------------------------------
.text:00405A12                 align 10h
.text:00405A20
.text:00405A20 ; =============== S U B R O U T I N E =======================================
.text:00405A20
.text:00405A20
.text:00405A20 sub_405A20      proc near               ; DATA XREF: .text:00402DEC↑o
.text:00405A20                                         ; .text:00402F14↑o
.text:00405A20                 cmp     dword_413150, 0
.text:00405A27                 push    esi
.text:00405A28                 push    edi
.text:00405A29                 mov     edi, offset dword_414F14
.text:00405A2E                 jz      short loc_405A47
.text:00405A30                 and     dword_413150, 0
.text:00405A37                 mov     esi, edi
.text:00405A39                 mov     dword_414F18, esi
.text:00405A3F                 mov     dword_414F14, edi
.text:00405A45                 jmp     short loc_405A4D
.text:00405A47 ; ---------------------------------------------------------------------------
.text:00405A47
.text:00405A47 loc_405A47:                             ; CODE XREF: sub_405A20+E↑j
.text:00405A47                 mov     esi, dword_414F18
.text:00405A4D
.text:00405A4D loc_405A4D:                             ; CODE XREF: sub_405A20+25↑j
.text:00405A4D                 push    38h ; '8'       ; Size
.text:00405A4F                 push    0               ; Val
.text:00405A51                 push    offset unk_413A3C ; void *
.text:00405A56                 call    memset
.text:00405A5B                 add     esp, 0Ch
.text:00405A5E                 cmp     [esi], edi
.text:00405A60                 jz      short loc_405A67
.text:00405A62                 push    3
.text:00405A64                 pop     ecx
.text:00405A65                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00405A67 ; ---------------------------------------------------------------------------
.text:00405A67
.text:00405A67 loc_405A67:                             ; CODE XREF: sub_405A20+40↑j
.text:00405A67                 mov     eax, offset dword_413A18
.text:00405A6C                 mov     dword_413A18, edi
.text:00405A72                 mov     dword_413A1C, esi
.text:00405A78                 mov     [esi], eax
.text:00405A7A                 mov     dword_414F18, eax
.text:00405A7F                 mov     eax, dword_414FFC
.text:00405A84                 mov     dword_413A6C, eax
.text:00405A89                 inc     eax
.text:00405A8A                 pop     edi
.text:00405A8B                 mov     dword_414FFC, eax
.text:00405A90                 pop     esi
.text:00405A91                 retn
.text:00405A91 sub_405A20      endp
.text:00405A91
.text:00405A91 ; ---------------------------------------------------------------------------
.text:00405A92                 align 10h
.text:00405AA0
.text:00405AA0 ; =============== S U B R O U T I N E =======================================
.text:00405AA0
.text:00405AA0
.text:00405AA0 sub_405AA0      proc near               ; DATA XREF: .text:00402DF0↑o
.text:00405AA0                                         ; .text:00402F18↑o
.text:00405AA0                 cmp     dword_413150, 0
.text:00405AA7                 push    esi
.text:00405AA8                 push    edi
.text:00405AA9                 mov     edi, offset dword_414F14
.text:00405AAE                 jz      short loc_405AC7
.text:00405AB0                 and     dword_413150, 0
.text:00405AB7                 mov     esi, edi
.text:00405AB9                 mov     dword_414F18, esi
.text:00405ABF                 mov     dword_414F14, edi
.text:00405AC5                 jmp     short loc_405ACD
.text:00405AC7 ; ---------------------------------------------------------------------------
.text:00405AC7
.text:00405AC7 loc_405AC7:                             ; CODE XREF: sub_405AA0+E↑j
.text:00405AC7                 mov     esi, dword_414F18
.text:00405ACD
.text:00405ACD loc_405ACD:                             ; CODE XREF: sub_405AA0+25↑j
.text:00405ACD                 push    38h ; '8'       ; Size
.text:00405ACF                 push    0               ; Val
.text:00405AD1                 push    offset unk_41379C ; void *
.text:00405AD6                 call    memset
.text:00405ADB                 add     esp, 0Ch
.text:00405ADE                 cmp     [esi], edi
.text:00405AE0                 jz      short loc_405AE7
.text:00405AE2                 push    3
.text:00405AE4                 pop     ecx
.text:00405AE5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00405AE7 ; ---------------------------------------------------------------------------
.text:00405AE7
.text:00405AE7 loc_405AE7:                             ; CODE XREF: sub_405AA0+40↑j
.text:00405AE7                 mov     eax, offset dword_413778
.text:00405AEC                 mov     dword_413778, edi
.text:00405AF2                 mov     dword_41377C, esi
.text:00405AF8                 mov     [esi], eax
.text:00405AFA                 mov     dword_414F18, eax
.text:00405AFF                 mov     eax, dword_414FFC
.text:00405B04                 mov     dword_4137CC, eax
.text:00405B09                 inc     eax
.text:00405B0A                 pop     edi
.text:00405B0B                 mov     dword_414FFC, eax
.text:00405B10                 pop     esi
.text:00405B11                 retn
.text:00405B11 sub_405AA0      endp
.text:00405B11
.text:00405B11 ; ---------------------------------------------------------------------------
.text:00405B12                 align 10h
.text:00405B20
.text:00405B20 ; =============== S U B R O U T I N E =======================================
.text:00405B20
.text:00405B20
.text:00405B20 sub_405B20      proc near               ; DATA XREF: .text:00402DF4↑o
.text:00405B20                                         ; .text:00402F1C↑o
.text:00405B20                 cmp     dword_413150, 0
.text:00405B27                 push    esi
.text:00405B28                 push    edi
.text:00405B29                 mov     edi, offset dword_414F14
.text:00405B2E                 jz      short loc_405B47
.text:00405B30                 and     dword_413150, 0
.text:00405B37                 mov     esi, edi
.text:00405B39                 mov     dword_414F18, esi
.text:00405B3F                 mov     dword_414F14, edi
.text:00405B45                 jmp     short loc_405B4D
.text:00405B47 ; ---------------------------------------------------------------------------
.text:00405B47
.text:00405B47 loc_405B47:                             ; CODE XREF: sub_405B20+E↑j
.text:00405B47                 mov     esi, dword_414F18
.text:00405B4D
.text:00405B4D loc_405B4D:                             ; CODE XREF: sub_405B20+25↑j
.text:00405B4D                 push    38h ; '8'       ; Size
.text:00405B4F                 push    0               ; Val
.text:00405B51                 push    offset unk_41342C ; void *
.text:00405B56                 call    memset
.text:00405B5B                 add     esp, 0Ch
.text:00405B5E                 cmp     [esi], edi
.text:00405B60                 jz      short loc_405B67
.text:00405B62                 push    3
.text:00405B64                 pop     ecx
.text:00405B65                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00405B67 ; ---------------------------------------------------------------------------
.text:00405B67
.text:00405B67 loc_405B67:                             ; CODE XREF: sub_405B20+40↑j
.text:00405B67                 mov     eax, offset dword_413408
.text:00405B6C                 mov     dword_413408, edi
.text:00405B72                 mov     dword_41340C, esi
.text:00405B78                 mov     [esi], eax
.text:00405B7A                 mov     dword_414F18, eax
.text:00405B7F                 mov     eax, dword_414FFC
.text:00405B84                 mov     dword_41345C, eax
.text:00405B89                 inc     eax
.text:00405B8A                 pop     edi
.text:00405B8B                 mov     dword_414FFC, eax
.text:00405B90                 pop     esi
.text:00405B91                 retn
.text:00405B91 sub_405B20      endp
.text:00405B91
.text:00405B91 ; ---------------------------------------------------------------------------
.text:00405B92                 align 10h
.text:00405BA0
.text:00405BA0 ; =============== S U B R O U T I N E =======================================
.text:00405BA0
.text:00405BA0
.text:00405BA0 sub_405BA0      proc near               ; DATA XREF: .text:00402DF8↑o
.text:00405BA0                                         ; .text:00402F20↑o
.text:00405BA0                 cmp     dword_413150, 0
.text:00405BA7                 push    esi
.text:00405BA8                 push    edi
.text:00405BA9                 mov     edi, offset dword_414F14
.text:00405BAE                 jz      short loc_405BC7
.text:00405BB0                 and     dword_413150, 0
.text:00405BB7                 mov     esi, edi
.text:00405BB9                 mov     dword_414F18, esi
.text:00405BBF                 mov     dword_414F14, edi
.text:00405BC5                 jmp     short loc_405BCD
.text:00405BC7 ; ---------------------------------------------------------------------------
.text:00405BC7
.text:00405BC7 loc_405BC7:                             ; CODE XREF: sub_405BA0+E↑j
.text:00405BC7                 mov     esi, dword_414F18
.text:00405BCD
.text:00405BCD loc_405BCD:                             ; CODE XREF: sub_405BA0+25↑j
.text:00405BCD                 push    38h ; '8'       ; Size
.text:00405BCF                 push    0               ; Val
.text:00405BD1                 push    offset unk_414A3C ; void *
.text:00405BD6                 call    memset
.text:00405BDB                 add     esp, 0Ch
.text:00405BDE                 cmp     [esi], edi
.text:00405BE0                 jz      short loc_405BE7
.text:00405BE2                 push    3
.text:00405BE4                 pop     ecx
.text:00405BE5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00405BE7 ; ---------------------------------------------------------------------------
.text:00405BE7
.text:00405BE7 loc_405BE7:                             ; CODE XREF: sub_405BA0+40↑j
.text:00405BE7                 mov     eax, offset dword_414A18
.text:00405BEC                 mov     dword_414A18, edi
.text:00405BF2                 mov     dword_414A1C, esi
.text:00405BF8                 mov     [esi], eax
.text:00405BFA                 mov     dword_414F18, eax
.text:00405BFF                 mov     eax, dword_414FFC
.text:00405C04                 mov     dword_414A6C, eax
.text:00405C09                 inc     eax
.text:00405C0A                 pop     edi
.text:00405C0B                 mov     dword_414FFC, eax
.text:00405C10                 pop     esi
.text:00405C11                 retn
.text:00405C11 sub_405BA0      endp
.text:00405C11
.text:00405C11 ; ---------------------------------------------------------------------------
.text:00405C12                 align 10h
.text:00405C20
.text:00405C20 ; =============== S U B R O U T I N E =======================================
.text:00405C20
.text:00405C20
.text:00405C20 sub_405C20      proc near               ; DATA XREF: .text:00402DFC↑o
.text:00405C20                                         ; .text:00402F24↑o
.text:00405C20                 cmp     dword_413150, 0
.text:00405C27                 push    esi
.text:00405C28                 push    edi
.text:00405C29                 mov     edi, offset dword_414F14
.text:00405C2E                 jz      short loc_405C47
.text:00405C30                 and     dword_413150, 0
.text:00405C37                 mov     esi, edi
.text:00405C39                 mov     dword_414F18, esi
.text:00405C3F                 mov     dword_414F14, edi
.text:00405C45                 jmp     short loc_405C4D
.text:00405C47 ; ---------------------------------------------------------------------------
.text:00405C47
.text:00405C47 loc_405C47:                             ; CODE XREF: sub_405C20+E↑j
.text:00405C47                 mov     esi, dword_414F18
.text:00405C4D
.text:00405C4D loc_405C4D:                             ; CODE XREF: sub_405C20+25↑j
.text:00405C4D                 push    38h ; '8'       ; Size
.text:00405C4F                 push    0               ; Val
.text:00405C51                 push    offset unk_414A9C ; void *
.text:00405C56                 call    memset
.text:00405C5B                 add     esp, 0Ch
.text:00405C5E                 cmp     [esi], edi
.text:00405C60                 jz      short loc_405C67
.text:00405C62                 push    3
.text:00405C64                 pop     ecx
.text:00405C65                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00405C67 ; ---------------------------------------------------------------------------
.text:00405C67
.text:00405C67 loc_405C67:                             ; CODE XREF: sub_405C20+40↑j
.text:00405C67                 mov     eax, offset dword_414A78
.text:00405C6C                 mov     dword_414A78, edi
.text:00405C72                 mov     dword_414A7C, esi
.text:00405C78                 mov     [esi], eax
.text:00405C7A                 mov     dword_414F18, eax
.text:00405C7F                 mov     eax, dword_414FFC
.text:00405C84                 mov     dword_414ACC, eax
.text:00405C89                 inc     eax
.text:00405C8A                 pop     edi
.text:00405C8B                 mov     dword_414FFC, eax
.text:00405C90                 pop     esi
.text:00405C91                 retn
.text:00405C91 sub_405C20      endp
.text:00405C91
.text:00405C91 ; ---------------------------------------------------------------------------
.text:00405C92                 align 10h
.text:00405CA0
.text:00405CA0 ; =============== S U B R O U T I N E =======================================
.text:00405CA0
.text:00405CA0
.text:00405CA0 sub_405CA0      proc near               ; DATA XREF: .text:00402E00↑o
.text:00405CA0                                         ; .text:00402F28↑o
.text:00405CA0                 cmp     dword_413150, 0
.text:00405CA7                 push    esi
.text:00405CA8                 push    edi
.text:00405CA9                 mov     edi, offset dword_414F14
.text:00405CAE                 jz      short loc_405CC7
.text:00405CB0                 and     dword_413150, 0
.text:00405CB7                 mov     esi, edi
.text:00405CB9                 mov     dword_414F18, esi
.text:00405CBF                 mov     dword_414F14, edi
.text:00405CC5                 jmp     short loc_405CCD
.text:00405CC7 ; ---------------------------------------------------------------------------
.text:00405CC7
.text:00405CC7 loc_405CC7:                             ; CODE XREF: sub_405CA0+E↑j
.text:00405CC7                 mov     esi, dword_414F18
.text:00405CCD
.text:00405CCD loc_405CCD:                             ; CODE XREF: sub_405CA0+25↑j
.text:00405CCD                 push    38h ; '8'       ; Size
.text:00405CCF                 push    0               ; Val
.text:00405CD1                 push    offset unk_4143AC ; void *
.text:00405CD6                 call    memset
.text:00405CDB                 add     esp, 0Ch
.text:00405CDE                 cmp     [esi], edi
.text:00405CE0                 jz      short loc_405CE7
.text:00405CE2                 push    3
.text:00405CE4                 pop     ecx
.text:00405CE5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00405CE7 ; ---------------------------------------------------------------------------
.text:00405CE7
.text:00405CE7 loc_405CE7:                             ; CODE XREF: sub_405CA0+40↑j
.text:00405CE7                 mov     eax, offset dword_414388
.text:00405CEC                 mov     dword_414388, edi
.text:00405CF2                 mov     dword_41438C, esi
.text:00405CF8                 mov     [esi], eax
.text:00405CFA                 mov     dword_414F18, eax
.text:00405CFF                 mov     eax, dword_414FFC
.text:00405D04                 mov     dword_4143DC, eax
.text:00405D09                 inc     eax
.text:00405D0A                 pop     edi
.text:00405D0B                 mov     dword_414FFC, eax
.text:00405D10                 pop     esi
.text:00405D11                 retn
.text:00405D11 sub_405CA0      endp
.text:00405D11
.text:00405D11 ; ---------------------------------------------------------------------------
.text:00405D12                 align 10h
.text:00405D20
.text:00405D20 ; =============== S U B R O U T I N E =======================================
.text:00405D20
.text:00405D20
.text:00405D20 sub_405D20      proc near               ; DATA XREF: .text:00402E04↑o
.text:00405D20                                         ; .text:00402F2C↑o
.text:00405D20                 cmp     dword_413150, 0
.text:00405D27                 push    esi
.text:00405D28                 push    edi
.text:00405D29                 mov     edi, offset dword_414F14
.text:00405D2E                 jz      short loc_405D47
.text:00405D30                 and     dword_413150, 0
.text:00405D37                 mov     esi, edi
.text:00405D39                 mov     dword_414F18, esi
.text:00405D3F                 mov     dword_414F14, edi
.text:00405D45                 jmp     short loc_405D4D
.text:00405D47 ; ---------------------------------------------------------------------------
.text:00405D47
.text:00405D47 loc_405D47:                             ; CODE XREF: sub_405D20+E↑j
.text:00405D47                 mov     esi, dword_414F18
.text:00405D4D
.text:00405D4D loc_405D4D:                             ; CODE XREF: sub_405D20+25↑j
.text:00405D4D                 push    38h ; '8'       ; Size
.text:00405D4F                 push    0               ; Val
.text:00405D51                 push    offset unk_4146BC ; void *
.text:00405D56                 call    memset
.text:00405D5B                 add     esp, 0Ch
.text:00405D5E                 cmp     [esi], edi
.text:00405D60                 jz      short loc_405D67
.text:00405D62                 push    3
.text:00405D64                 pop     ecx
.text:00405D65                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00405D67 ; ---------------------------------------------------------------------------
.text:00405D67
.text:00405D67 loc_405D67:                             ; CODE XREF: sub_405D20+40↑j
.text:00405D67                 mov     eax, offset dword_414698
.text:00405D6C                 mov     dword_414698, edi
.text:00405D72                 mov     dword_41469C, esi
.text:00405D78                 mov     [esi], eax
.text:00405D7A                 mov     dword_414F18, eax
.text:00405D7F                 mov     eax, dword_414FFC
.text:00405D84                 mov     dword_4146EC, eax
.text:00405D89                 inc     eax
.text:00405D8A                 pop     edi
.text:00405D8B                 mov     dword_414FFC, eax
.text:00405D90                 pop     esi
.text:00405D91                 retn
.text:00405D91 sub_405D20      endp
.text:00405D91
.text:00405D91 ; ---------------------------------------------------------------------------
.text:00405D92                 align 10h
.text:00405DA0
.text:00405DA0 ; =============== S U B R O U T I N E =======================================
.text:00405DA0
.text:00405DA0
.text:00405DA0 sub_405DA0      proc near               ; DATA XREF: .text:00402E08↑o
.text:00405DA0                                         ; .text:00402F30↑o
.text:00405DA0                 cmp     dword_413150, 0
.text:00405DA7                 push    esi
.text:00405DA8                 push    edi
.text:00405DA9                 mov     edi, offset dword_414F14
.text:00405DAE                 jz      short loc_405DC7
.text:00405DB0                 and     dword_413150, 0
.text:00405DB7                 mov     esi, edi
.text:00405DB9                 mov     dword_414F18, esi
.text:00405DBF                 mov     dword_414F14, edi
.text:00405DC5                 jmp     short loc_405DCD
.text:00405DC7 ; ---------------------------------------------------------------------------
.text:00405DC7
.text:00405DC7 loc_405DC7:                             ; CODE XREF: sub_405DA0+E↑j
.text:00405DC7                 mov     esi, dword_414F18
.text:00405DCD
.text:00405DCD loc_405DCD:                             ; CODE XREF: sub_405DA0+25↑j
.text:00405DCD                 push    38h ; '8'       ; Size
.text:00405DCF                 push    0               ; Val
.text:00405DD1                 push    offset unk_41410C ; void *
.text:00405DD6                 call    memset
.text:00405DDB                 add     esp, 0Ch
.text:00405DDE                 cmp     [esi], edi
.text:00405DE0                 jz      short loc_405DE7
.text:00405DE2                 push    3
.text:00405DE4                 pop     ecx
.text:00405DE5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00405DE7 ; ---------------------------------------------------------------------------
.text:00405DE7
.text:00405DE7 loc_405DE7:                             ; CODE XREF: sub_405DA0+40↑j
.text:00405DE7                 mov     eax, offset dword_4140E8
.text:00405DEC                 mov     dword_4140E8, edi
.text:00405DF2                 mov     dword_4140EC, esi
.text:00405DF8                 mov     [esi], eax
.text:00405DFA                 mov     dword_414F18, eax
.text:00405DFF                 mov     eax, dword_414FFC
.text:00405E04                 mov     dword_41413C, eax
.text:00405E09                 inc     eax
.text:00405E0A                 pop     edi
.text:00405E0B                 mov     dword_414FFC, eax
.text:00405E10                 pop     esi
.text:00405E11                 retn
.text:00405E11 sub_405DA0      endp
.text:00405E11
.text:00405E11 ; ---------------------------------------------------------------------------
.text:00405E12                 align 10h
.text:00405E20
.text:00405E20 ; =============== S U B R O U T I N E =======================================
.text:00405E20
.text:00405E20
.text:00405E20 sub_405E20      proc near               ; DATA XREF: .text:00402E0C↑o
.text:00405E20                                         ; .text:00402F34↑o
.text:00405E20                 cmp     dword_413150, 0
.text:00405E27                 push    esi
.text:00405E28                 push    edi
.text:00405E29                 mov     edi, offset dword_414F14
.text:00405E2E                 jz      short loc_405E47
.text:00405E30                 and     dword_413150, 0
.text:00405E37                 mov     esi, edi
.text:00405E39                 mov     dword_414F18, esi
.text:00405E3F                 mov     dword_414F14, edi
.text:00405E45                 jmp     short loc_405E4D
.text:00405E47 ; ---------------------------------------------------------------------------
.text:00405E47
.text:00405E47 loc_405E47:                             ; CODE XREF: sub_405E20+E↑j
.text:00405E47                 mov     esi, dword_414F18
.text:00405E4D
.text:00405E4D loc_405E4D:                             ; CODE XREF: sub_405E20+25↑j
.text:00405E4D                 push    38h ; '8'       ; Size
.text:00405E4F                 push    0               ; Val
.text:00405E51                 push    offset unk_4134EC ; void *
.text:00405E56                 call    memset
.text:00405E5B                 add     esp, 0Ch
.text:00405E5E                 cmp     [esi], edi
.text:00405E60                 jz      short loc_405E67
.text:00405E62                 push    3
.text:00405E64                 pop     ecx
.text:00405E65                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00405E67 ; ---------------------------------------------------------------------------
.text:00405E67
.text:00405E67 loc_405E67:                             ; CODE XREF: sub_405E20+40↑j
.text:00405E67                 mov     eax, offset dword_4134C8
.text:00405E6C                 mov     dword_4134C8, edi
.text:00405E72                 mov     dword_4134CC, esi
.text:00405E78                 mov     [esi], eax
.text:00405E7A                 mov     dword_414F18, eax
.text:00405E7F                 mov     eax, dword_414FFC
.text:00405E84                 mov     dword_41351C, eax
.text:00405E89                 inc     eax
.text:00405E8A                 pop     edi
.text:00405E8B                 mov     dword_414FFC, eax
.text:00405E90                 pop     esi
.text:00405E91                 retn
.text:00405E91 sub_405E20      endp
.text:00405E91
.text:00405E91 ; ---------------------------------------------------------------------------
.text:00405E92                 align 10h
.text:00405EA0
.text:00405EA0 ; =============== S U B R O U T I N E =======================================
.text:00405EA0
.text:00405EA0
.text:00405EA0 sub_405EA0      proc near               ; DATA XREF: .text:00402E10↑o
.text:00405EA0                                         ; .text:00402F38↑o
.text:00405EA0                 cmp     dword_413150, 0
.text:00405EA7                 push    esi
.text:00405EA8                 push    edi
.text:00405EA9                 mov     edi, offset dword_414F14
.text:00405EAE                 jz      short loc_405EC7
.text:00405EB0                 and     dword_413150, 0
.text:00405EB7                 mov     esi, edi
.text:00405EB9                 mov     dword_414F18, esi
.text:00405EBF                 mov     dword_414F14, edi
.text:00405EC5                 jmp     short loc_405ECD
.text:00405EC7 ; ---------------------------------------------------------------------------
.text:00405EC7
.text:00405EC7 loc_405EC7:                             ; CODE XREF: sub_405EA0+E↑j
.text:00405EC7                 mov     esi, dword_414F18
.text:00405ECD
.text:00405ECD loc_405ECD:                             ; CODE XREF: sub_405EA0+25↑j
.text:00405ECD                 push    38h ; '8'       ; Size
.text:00405ECF                 push    0               ; Val
.text:00405ED1                 push    offset unk_413AFC ; void *
.text:00405ED6                 call    memset
.text:00405EDB                 add     esp, 0Ch
.text:00405EDE                 cmp     [esi], edi
.text:00405EE0                 jz      short loc_405EE7
.text:00405EE2                 push    3
.text:00405EE4                 pop     ecx
.text:00405EE5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00405EE7 ; ---------------------------------------------------------------------------
.text:00405EE7
.text:00405EE7 loc_405EE7:                             ; CODE XREF: sub_405EA0+40↑j
.text:00405EE7                 mov     eax, offset dword_413AD8
.text:00405EEC                 mov     dword_413AD8, edi
.text:00405EF2                 mov     dword_413ADC, esi
.text:00405EF8                 mov     [esi], eax
.text:00405EFA                 mov     dword_414F18, eax
.text:00405EFF                 mov     eax, dword_414FFC
.text:00405F04                 mov     dword_413B2C, eax
.text:00405F09                 inc     eax
.text:00405F0A                 pop     edi
.text:00405F0B                 mov     dword_414FFC, eax
.text:00405F10                 mov     dword_413AE8, 60h ; '`'
.text:00405F1A                 pop     esi
.text:00405F1B                 retn
.text:00405F1B sub_405EA0      endp
.text:00405F1B
.text:00405F1B ; ---------------------------------------------------------------------------
.text:00405F1C                 align 10h
.text:00405F20
.text:00405F20 ; =============== S U B R O U T I N E =======================================
.text:00405F20
.text:00405F20
.text:00405F20 sub_405F20      proc near               ; DATA XREF: .text:00402E14↑o
.text:00405F20                                         ; .text:00402F3C↑o
.text:00405F20                 cmp     dword_413150, 0
.text:00405F27                 push    esi
.text:00405F28                 push    edi
.text:00405F29                 mov     edi, offset dword_414F14
.text:00405F2E                 jz      short loc_405F47
.text:00405F30                 and     dword_413150, 0
.text:00405F37                 mov     esi, edi
.text:00405F39                 mov     dword_414F18, esi
.text:00405F3F                 mov     dword_414F14, edi
.text:00405F45                 jmp     short loc_405F4D
.text:00405F47 ; ---------------------------------------------------------------------------
.text:00405F47
.text:00405F47 loc_405F47:                             ; CODE XREF: sub_405F20+E↑j
.text:00405F47                 mov     esi, dword_414F18
.text:00405F4D
.text:00405F4D loc_405F4D:                             ; CODE XREF: sub_405F20+25↑j
.text:00405F4D                 push    38h ; '8'       ; Size
.text:00405F4F                 push    0               ; Val
.text:00405F51                 push    offset unk_41385C ; void *
.text:00405F56                 call    memset
.text:00405F5B                 add     esp, 0Ch
.text:00405F5E                 cmp     [esi], edi
.text:00405F60                 jz      short loc_405F67
.text:00405F62                 push    3
.text:00405F64                 pop     ecx
.text:00405F65                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00405F67 ; ---------------------------------------------------------------------------
.text:00405F67
.text:00405F67 loc_405F67:                             ; CODE XREF: sub_405F20+40↑j
.text:00405F67                 mov     eax, offset dword_413838
.text:00405F6C                 mov     dword_413838, edi
.text:00405F72                 mov     dword_41383C, esi
.text:00405F78                 mov     [esi], eax
.text:00405F7A                 mov     dword_414F18, eax
.text:00405F7F                 mov     eax, dword_414FFC
.text:00405F84                 mov     dword_41388C, eax
.text:00405F89                 inc     eax
.text:00405F8A                 pop     edi
.text:00405F8B                 mov     dword_414FFC, eax
.text:00405F90                 mov     dword_413848, 60h ; '`'
.text:00405F9A                 pop     esi
.text:00405F9B                 retn
.text:00405F9B sub_405F20      endp
.text:00405F9B
.text:00405F9B ; ---------------------------------------------------------------------------
.text:00405F9C                 align 10h
.text:00405FA0
.text:00405FA0 ; =============== S U B R O U T I N E =======================================
.text:00405FA0
.text:00405FA0
.text:00405FA0 sub_405FA0      proc near               ; DATA XREF: .text:00402E18↑o
.text:00405FA0                                         ; .text:00402F40↑o
.text:00405FA0                 cmp     dword_413150, 0
.text:00405FA7                 push    esi
.text:00405FA8                 push    edi
.text:00405FA9                 mov     edi, offset dword_414F14
.text:00405FAE                 jz      short loc_405FC7
.text:00405FB0                 and     dword_413150, 0
.text:00405FB7                 mov     esi, edi
.text:00405FB9                 mov     dword_414F18, esi
.text:00405FBF                 mov     dword_414F14, edi
.text:00405FC5                 jmp     short loc_405FCD
.text:00405FC7 ; ---------------------------------------------------------------------------
.text:00405FC7
.text:00405FC7 loc_405FC7:                             ; CODE XREF: sub_405FA0+E↑j
.text:00405FC7                 mov     esi, dword_414F18
.text:00405FCD
.text:00405FCD loc_405FCD:                             ; CODE XREF: sub_405FA0+25↑j
.text:00405FCD                 push    38h ; '8'       ; Size
.text:00405FCF                 push    0               ; Val
.text:00405FD1                 push    offset unk_4139DC ; void *
.text:00405FD6                 call    memset
.text:00405FDB                 add     esp, 0Ch
.text:00405FDE                 cmp     [esi], edi
.text:00405FE0                 jz      short loc_405FE7
.text:00405FE2                 push    3
.text:00405FE4                 pop     ecx
.text:00405FE5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00405FE7 ; ---------------------------------------------------------------------------
.text:00405FE7
.text:00405FE7 loc_405FE7:                             ; CODE XREF: sub_405FA0+40↑j
.text:00405FE7                 mov     eax, offset dword_4139B8
.text:00405FEC                 mov     dword_4139B8, edi
.text:00405FF2                 mov     dword_4139BC, esi
.text:00405FF8                 mov     [esi], eax
.text:00405FFA                 mov     dword_414F18, eax
.text:00405FFF                 mov     eax, dword_414FFC
.text:00406004                 mov     dword_413A0C, eax
.text:00406009                 inc     eax
.text:0040600A                 pop     edi
.text:0040600B                 mov     dword_414FFC, eax
.text:00406010                 mov     dword_4139C8, 60h ; '`'
.text:0040601A                 pop     esi
.text:0040601B                 retn
.text:0040601B sub_405FA0      endp
.text:0040601B
.text:0040601B ; ---------------------------------------------------------------------------
.text:0040601C                 align 10h
.text:00406020
.text:00406020 ; =============== S U B R O U T I N E =======================================
.text:00406020
.text:00406020
.text:00406020 sub_406020      proc near               ; DATA XREF: .text:00402E1C↑o
.text:00406020                                         ; .text:00402F44↑o
.text:00406020                 cmp     dword_413150, 0
.text:00406027                 push    esi
.text:00406028                 push    edi
.text:00406029                 mov     edi, offset dword_414F14
.text:0040602E                 jz      short loc_406047
.text:00406030                 and     dword_413150, 0
.text:00406037                 mov     esi, edi
.text:00406039                 mov     dword_414F18, esi
.text:0040603F                 mov     dword_414F14, edi
.text:00406045                 jmp     short loc_40604D
.text:00406047 ; ---------------------------------------------------------------------------
.text:00406047
.text:00406047 loc_406047:                             ; CODE XREF: sub_406020+E↑j
.text:00406047                 mov     esi, dword_414F18
.text:0040604D
.text:0040604D loc_40604D:                             ; CODE XREF: sub_406020+25↑j
.text:0040604D                 push    38h ; '8'       ; Size
.text:0040604F                 push    0               ; Val
.text:00406051                 push    offset unk_41354C ; void *
.text:00406056                 call    memset
.text:0040605B                 add     esp, 0Ch
.text:0040605E                 cmp     [esi], edi
.text:00406060                 jz      short loc_406067
.text:00406062                 push    3
.text:00406064                 pop     ecx
.text:00406065                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00406067 ; ---------------------------------------------------------------------------
.text:00406067
.text:00406067 loc_406067:                             ; CODE XREF: sub_406020+40↑j
.text:00406067                 mov     eax, offset dword_413528
.text:0040606C                 mov     dword_413528, edi
.text:00406072                 mov     dword_41352C, esi
.text:00406078                 mov     [esi], eax
.text:0040607A                 mov     dword_414F18, eax
.text:0040607F                 mov     eax, dword_414FFC
.text:00406084                 mov     dword_41357C, eax
.text:00406089                 inc     eax
.text:0040608A                 pop     edi
.text:0040608B                 mov     dword_414FFC, eax
.text:00406090                 mov     dword_413538, 60h ; '`'
.text:0040609A                 pop     esi
.text:0040609B                 retn
.text:0040609B sub_406020      endp
.text:0040609B
.text:0040609B ; ---------------------------------------------------------------------------
.text:0040609C                 align 10h
.text:004060A0
.text:004060A0 ; =============== S U B R O U T I N E =======================================
.text:004060A0
.text:004060A0
.text:004060A0 sub_4060A0      proc near               ; DATA XREF: .text:00402E20↑o
.text:004060A0                                         ; .text:00402F48↑o
.text:004060A0                 cmp     dword_413150, 0
.text:004060A7                 push    esi
.text:004060A8                 push    edi
.text:004060A9                 mov     edi, offset dword_414F14
.text:004060AE                 jz      short loc_4060C7
.text:004060B0                 and     dword_413150, 0
.text:004060B7                 mov     esi, edi
.text:004060B9                 mov     dword_414F18, esi
.text:004060BF                 mov     dword_414F14, edi
.text:004060C5                 jmp     short loc_4060CD
.text:004060C7 ; ---------------------------------------------------------------------------
.text:004060C7
.text:004060C7 loc_4060C7:                             ; CODE XREF: sub_4060A0+E↑j
.text:004060C7                 mov     esi, dword_414F18
.text:004060CD
.text:004060CD loc_4060CD:                             ; CODE XREF: sub_4060A0+25↑j
.text:004060CD                 push    38h ; '8'       ; Size
.text:004060CF                 push    0               ; Val
.text:004060D1                 push    offset unk_414B5C ; void *
.text:004060D6                 call    memset
.text:004060DB                 add     esp, 0Ch
.text:004060DE                 cmp     [esi], edi
.text:004060E0                 jz      short loc_4060E7
.text:004060E2                 push    3
.text:004060E4                 pop     ecx
.text:004060E5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:004060E7 ; ---------------------------------------------------------------------------
.text:004060E7
.text:004060E7 loc_4060E7:                             ; CODE XREF: sub_4060A0+40↑j
.text:004060E7                 mov     eax, offset dword_414B38
.text:004060EC                 mov     dword_414B38, edi
.text:004060F2                 mov     dword_414B3C, esi
.text:004060F8                 mov     [esi], eax
.text:004060FA                 mov     dword_414F18, eax
.text:004060FF                 mov     eax, dword_414FFC
.text:00406104                 mov     dword_414B8C, eax
.text:00406109                 inc     eax
.text:0040610A                 pop     edi
.text:0040610B                 mov     dword_414FFC, eax
.text:00406110                 mov     dword_414B48, 60h ; '`'
.text:0040611A                 pop     esi
.text:0040611B                 retn
.text:0040611B sub_4060A0      endp
.text:0040611B
.text:0040611B ; ---------------------------------------------------------------------------
.text:0040611C                 align 10h
.text:00406120
.text:00406120 ; =============== S U B R O U T I N E =======================================
.text:00406120
.text:00406120
.text:00406120 sub_406120      proc near               ; DATA XREF: .text:00402E24↑o
.text:00406120                                         ; .text:00402F4C↑o
.text:00406120                 cmp     dword_413150, 0
.text:00406127                 push    esi
.text:00406128                 push    edi
.text:00406129                 mov     edi, offset dword_414F14
.text:0040612E                 jz      short loc_406147
.text:00406130                 and     dword_413150, 0
.text:00406137                 mov     esi, edi
.text:00406139                 mov     dword_414F18, esi
.text:0040613F                 mov     dword_414F14, edi
.text:00406145                 jmp     short loc_40614D
.text:00406147 ; ---------------------------------------------------------------------------
.text:00406147
.text:00406147 loc_406147:                             ; CODE XREF: sub_406120+E↑j
.text:00406147                 mov     esi, dword_414F18
.text:0040614D
.text:0040614D loc_40614D:                             ; CODE XREF: sub_406120+25↑j
.text:0040614D                 push    38h ; '8'       ; Size
.text:0040614F                 push    0               ; Val
.text:00406151                 push    offset unk_413BCC ; void *
.text:00406156                 call    memset
.text:0040615B                 add     esp, 0Ch
.text:0040615E                 cmp     [esi], edi
.text:00406160                 jz      short loc_406167
.text:00406162                 push    3
.text:00406164                 pop     ecx
.text:00406165                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00406167 ; ---------------------------------------------------------------------------
.text:00406167
.text:00406167 loc_406167:                             ; CODE XREF: sub_406120+40↑j
.text:00406167                 mov     eax, offset dword_413BA8
.text:0040616C                 mov     dword_413BA8, edi
.text:00406172                 mov     dword_413BAC, esi
.text:00406178                 mov     [esi], eax
.text:0040617A                 mov     dword_414F18, eax
.text:0040617F                 mov     eax, dword_414FFC
.text:00406184                 mov     dword_413BFC, eax
.text:00406189                 inc     eax
.text:0040618A                 pop     edi
.text:0040618B                 mov     dword_414FFC, eax
.text:00406190                 mov     dword_413BB8, 60h ; '`'
.text:0040619A                 pop     esi
.text:0040619B                 retn
.text:0040619B sub_406120      endp
.text:0040619B
.text:0040619B ; ---------------------------------------------------------------------------
.text:0040619C                 align 10h
.text:004061A0
.text:004061A0 ; =============== S U B R O U T I N E =======================================
.text:004061A0
.text:004061A0
.text:004061A0 sub_4061A0      proc near               ; DATA XREF: .text:00402E28↑o
.text:004061A0                                         ; .text:00402F50↑o
.text:004061A0                 cmp     dword_413150, 0
.text:004061A7                 push    esi
.text:004061A8                 push    edi
.text:004061A9                 mov     edi, offset dword_414F14
.text:004061AE                 jz      short loc_4061C7
.text:004061B0                 and     dword_413150, 0
.text:004061B7                 mov     esi, edi
.text:004061B9                 mov     dword_414F18, esi
.text:004061BF                 mov     dword_414F14, edi
.text:004061C5                 jmp     short loc_4061CD
.text:004061C7 ; ---------------------------------------------------------------------------
.text:004061C7
.text:004061C7 loc_4061C7:                             ; CODE XREF: sub_4061A0+E↑j
.text:004061C7                 mov     esi, dword_414F18
.text:004061CD
.text:004061CD loc_4061CD:                             ; CODE XREF: sub_4061A0+25↑j
.text:004061CD                 push    38h ; '8'       ; Size
.text:004061CF                 push    0               ; Val
.text:004061D1                 push    offset unk_4140AC ; void *
.text:004061D6                 call    memset
.text:004061DB                 add     esp, 0Ch
.text:004061DE                 cmp     [esi], edi
.text:004061E0                 jz      short loc_4061E7
.text:004061E2                 push    3
.text:004061E4                 pop     ecx
.text:004061E5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:004061E7 ; ---------------------------------------------------------------------------
.text:004061E7
.text:004061E7 loc_4061E7:                             ; CODE XREF: sub_4061A0+40↑j
.text:004061E7                 mov     eax, offset dword_414088
.text:004061EC                 mov     dword_414088, edi
.text:004061F2                 mov     dword_41408C, esi
.text:004061F8                 mov     [esi], eax
.text:004061FA                 mov     dword_414F18, eax
.text:004061FF                 mov     eax, dword_414FFC
.text:00406204                 mov     dword_4140DC, eax
.text:00406209                 inc     eax
.text:0040620A                 pop     edi
.text:0040620B                 mov     dword_414FFC, eax
.text:00406210                 pop     esi
.text:00406211                 retn
.text:00406211 sub_4061A0      endp
.text:00406211
.text:00406211 ; ---------------------------------------------------------------------------
.text:00406212                 align 10h
.text:00406220
.text:00406220 ; =============== S U B R O U T I N E =======================================
.text:00406220
.text:00406220
.text:00406220 sub_406220      proc near               ; DATA XREF: .text:00402E2C↑o
.text:00406220                                         ; .text:00402F54↑o
.text:00406220                 cmp     dword_413150, 0
.text:00406227                 push    esi
.text:00406228                 push    edi
.text:00406229                 mov     edi, offset dword_414F14
.text:0040622E                 jz      short loc_406247
.text:00406230                 and     dword_413150, 0
.text:00406237                 mov     esi, edi
.text:00406239                 mov     dword_414F18, esi
.text:0040623F                 mov     dword_414F14, edi
.text:00406245                 jmp     short loc_40624D
.text:00406247 ; ---------------------------------------------------------------------------
.text:00406247
.text:00406247 loc_406247:                             ; CODE XREF: sub_406220+E↑j
.text:00406247                 mov     esi, dword_414F18
.text:0040624D
.text:0040624D loc_40624D:                             ; CODE XREF: sub_406220+25↑j
.text:0040624D                 push    38h ; '8'       ; Size
.text:0040624F                 push    0               ; Val
.text:00406251                 push    offset unk_41459C ; void *
.text:00406256                 call    memset
.text:0040625B                 add     esp, 0Ch
.text:0040625E                 cmp     [esi], edi
.text:00406260                 jz      short loc_406267
.text:00406262                 push    3
.text:00406264                 pop     ecx
.text:00406265                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00406267 ; ---------------------------------------------------------------------------
.text:00406267
.text:00406267 loc_406267:                             ; CODE XREF: sub_406220+40↑j
.text:00406267                 mov     eax, offset dword_414578
.text:0040626C                 mov     dword_414578, edi
.text:00406272                 mov     dword_41457C, esi
.text:00406278                 mov     [esi], eax
.text:0040627A                 mov     dword_414F18, eax
.text:0040627F                 mov     eax, dword_414FFC
.text:00406284                 mov     dword_4145CC, eax
.text:00406289                 inc     eax
.text:0040628A                 pop     edi
.text:0040628B                 mov     dword_414FFC, eax
.text:00406290                 mov     dword_414588, 60h ; '`'
.text:0040629A                 pop     esi
.text:0040629B                 retn
.text:0040629B sub_406220      endp
.text:0040629B
.text:0040629B ; ---------------------------------------------------------------------------
.text:0040629C                 align 10h
.text:004062A0
.text:004062A0 ; =============== S U B R O U T I N E =======================================
.text:004062A0
.text:004062A0
.text:004062A0 sub_4062A0      proc near               ; DATA XREF: .text:00402E30↑o
.text:004062A0                                         ; .text:00402F58↑o
.text:004062A0                 cmp     dword_413150, 0
.text:004062A7                 push    esi
.text:004062A8                 push    edi
.text:004062A9                 mov     edi, offset dword_414F14
.text:004062AE                 jz      short loc_4062C7
.text:004062B0                 and     dword_413150, 0
.text:004062B7                 mov     esi, edi
.text:004062B9                 mov     dword_414F18, esi
.text:004062BF                 mov     dword_414F14, edi
.text:004062C5                 jmp     short loc_4062CD
.text:004062C7 ; ---------------------------------------------------------------------------
.text:004062C7
.text:004062C7 loc_4062C7:                             ; CODE XREF: sub_4062A0+E↑j
.text:004062C7                 mov     esi, dword_414F18
.text:004062CD
.text:004062CD loc_4062CD:                             ; CODE XREF: sub_4062A0+25↑j
.text:004062CD                 push    38h ; '8'       ; Size
.text:004062CF                 push    0               ; Val
.text:004062D1                 push    offset unk_413FEC ; void *
.text:004062D6                 call    memset
.text:004062DB                 add     esp, 0Ch
.text:004062DE                 cmp     [esi], edi
.text:004062E0                 jz      short loc_4062E7
.text:004062E2                 push    3
.text:004062E4                 pop     ecx
.text:004062E5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:004062E7 ; ---------------------------------------------------------------------------
.text:004062E7
.text:004062E7 loc_4062E7:                             ; CODE XREF: sub_4062A0+40↑j
.text:004062E7                 mov     eax, offset dword_413FC8
.text:004062EC                 mov     dword_413FC8, edi
.text:004062F2                 mov     dword_413FCC, esi
.text:004062F8                 mov     [esi], eax
.text:004062FA                 mov     dword_414F18, eax
.text:004062FF                 mov     eax, dword_414FFC
.text:00406304                 mov     dword_41401C, eax
.text:00406309                 inc     eax
.text:0040630A                 pop     edi
.text:0040630B                 mov     dword_414FFC, eax
.text:00406310                 mov     dword_413FD8, 60h ; '`'
.text:0040631A                 pop     esi
.text:0040631B                 retn
.text:0040631B sub_4062A0      endp
.text:0040631B
.text:0040631B ; ---------------------------------------------------------------------------
.text:0040631C                 align 10h
.text:00406320
.text:00406320 ; =============== S U B R O U T I N E =======================================
.text:00406320
.text:00406320
.text:00406320 sub_406320      proc near               ; DATA XREF: .text:00402E34↑o
.text:00406320                                         ; .text:00402F5C↑o
.text:00406320                 cmp     dword_413150, 0
.text:00406327                 push    esi
.text:00406328                 push    edi
.text:00406329                 mov     edi, offset dword_414F14
.text:0040632E                 jz      short loc_406347
.text:00406330                 and     dword_413150, 0
.text:00406337                 mov     esi, edi
.text:00406339                 mov     dword_414F18, esi
.text:0040633F                 mov     dword_414F14, edi
.text:00406345                 jmp     short loc_40634D
.text:00406347 ; ---------------------------------------------------------------------------
.text:00406347
.text:00406347 loc_406347:                             ; CODE XREF: sub_406320+E↑j
.text:00406347                 mov     esi, dword_414F18
.text:0040634D
.text:0040634D loc_40634D:                             ; CODE XREF: sub_406320+25↑j
.text:0040634D                 push    38h ; '8'       ; Size
.text:0040634F                 push    0               ; Val
.text:00406351                 push    offset unk_41446C ; void *
.text:00406356                 call    memset
.text:0040635B                 add     esp, 0Ch
.text:0040635E                 cmp     [esi], edi
.text:00406360                 jz      short loc_406367
.text:00406362                 push    3
.text:00406364                 pop     ecx
.text:00406365                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00406367 ; ---------------------------------------------------------------------------
.text:00406367
.text:00406367 loc_406367:                             ; CODE XREF: sub_406320+40↑j
.text:00406367                 mov     eax, offset dword_414448
.text:0040636C                 mov     dword_414448, edi
.text:00406372                 mov     dword_41444C, esi
.text:00406378                 mov     [esi], eax
.text:0040637A                 mov     dword_414F18, eax
.text:0040637F                 mov     eax, dword_414FFC
.text:00406384                 mov     dword_41449C, eax
.text:00406389                 inc     eax
.text:0040638A                 pop     edi
.text:0040638B                 mov     dword_414FFC, eax
.text:00406390                 mov     dword_414458, 6Ch ; 'l'
.text:0040639A                 pop     esi
.text:0040639B                 retn
.text:0040639B sub_406320      endp
.text:0040639B
.text:0040639B ; ---------------------------------------------------------------------------
.text:0040639C                 align 10h
.text:004063A0
.text:004063A0 ; =============== S U B R O U T I N E =======================================
.text:004063A0
.text:004063A0
.text:004063A0 sub_4063A0      proc near               ; DATA XREF: .text:00402E38↑o
.text:004063A0                                         ; .text:00402F60↑o
.text:004063A0                 cmp     dword_413150, 0
.text:004063A7                 push    esi
.text:004063A8                 push    edi
.text:004063A9                 mov     edi, offset dword_414F14
.text:004063AE                 jz      short loc_4063C7
.text:004063B0                 and     dword_413150, 0
.text:004063B7                 mov     esi, edi
.text:004063B9                 mov     dword_414F18, esi
.text:004063BF                 mov     dword_414F14, edi
.text:004063C5                 jmp     short loc_4063CD
.text:004063C7 ; ---------------------------------------------------------------------------
.text:004063C7
.text:004063C7 loc_4063C7:                             ; CODE XREF: sub_4063A0+E↑j
.text:004063C7                 mov     esi, dword_414F18
.text:004063CD
.text:004063CD loc_4063CD:                             ; CODE XREF: sub_4063A0+25↑j
.text:004063CD                 push    38h ; '8'       ; Size
.text:004063CF                 push    0               ; Val
.text:004063D1                 push    offset unk_41372C ; void *
.text:004063D6                 call    memset
.text:004063DB                 add     esp, 0Ch
.text:004063DE                 cmp     [esi], edi
.text:004063E0                 jz      short loc_4063E7
.text:004063E2                 push    3
.text:004063E4                 pop     ecx
.text:004063E5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:004063E7 ; ---------------------------------------------------------------------------
.text:004063E7
.text:004063E7 loc_4063E7:                             ; CODE XREF: sub_4063A0+40↑j
.text:004063E7                 mov     eax, offset dword_413708
.text:004063EC                 mov     dword_413708, edi
.text:004063F2                 mov     dword_41370C, esi
.text:004063F8                 mov     [esi], eax
.text:004063FA                 mov     dword_414F18, eax
.text:004063FF                 mov     eax, dword_414FFC
.text:00406404                 mov     dword_41375C, eax
.text:00406409                 inc     eax
.text:0040640A                 pop     edi
.text:0040640B                 mov     dword_414FFC, eax
.text:00406410                 mov     dword_413718, 6Ch ; 'l'
.text:0040641A                 pop     esi
.text:0040641B                 retn
.text:0040641B sub_4063A0      endp
.text:0040641B
.text:0040641B ; ---------------------------------------------------------------------------
.text:0040641C                 align 10h
.text:00406420
.text:00406420 ; =============== S U B R O U T I N E =======================================
.text:00406420
.text:00406420
.text:00406420 sub_406420      proc near               ; DATA XREF: .text:00402E3C↑o
.text:00406420                                         ; .text:00402F64↑o
.text:00406420                 cmp     dword_413150, 0
.text:00406427                 push    esi
.text:00406428                 push    edi
.text:00406429                 mov     edi, offset dword_414F14
.text:0040642E                 jz      short loc_406447
.text:00406430                 and     dword_413150, 0
.text:00406437                 mov     esi, edi
.text:00406439                 mov     dword_414F18, esi
.text:0040643F                 mov     dword_414F14, edi
.text:00406445                 jmp     short loc_40644D
.text:00406447 ; ---------------------------------------------------------------------------
.text:00406447
.text:00406447 loc_406447:                             ; CODE XREF: sub_406420+E↑j
.text:00406447                 mov     esi, dword_414F18
.text:0040644D
.text:0040644D loc_40644D:                             ; CODE XREF: sub_406420+25↑j
.text:0040644D                 push    38h ; '8'       ; Size
.text:0040644F                 push    0               ; Val
.text:00406451                 push    offset unk_41484C ; void *
.text:00406456                 call    memset
.text:0040645B                 add     esp, 0Ch
.text:0040645E                 cmp     [esi], edi
.text:00406460                 jz      short loc_406467
.text:00406462                 push    3
.text:00406464                 pop     ecx
.text:00406465                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00406467 ; ---------------------------------------------------------------------------
.text:00406467
.text:00406467 loc_406467:                             ; CODE XREF: sub_406420+40↑j
.text:00406467                 mov     eax, offset dword_414828
.text:0040646C                 mov     dword_414828, edi
.text:00406472                 mov     dword_41482C, esi
.text:00406478                 mov     [esi], eax
.text:0040647A                 mov     dword_414F18, eax
.text:0040647F                 mov     eax, dword_414FFC
.text:00406484                 mov     dword_41487C, eax
.text:00406489                 inc     eax
.text:0040648A                 pop     edi
.text:0040648B                 mov     dword_414FFC, eax
.text:00406490                 mov     dword_414838, 6Ch ; 'l'
.text:0040649A                 pop     esi
.text:0040649B                 retn
.text:0040649B sub_406420      endp
.text:0040649B
.text:0040649B ; ---------------------------------------------------------------------------
.text:0040649C                 align 10h
.text:004064A0
.text:004064A0 ; =============== S U B R O U T I N E =======================================
.text:004064A0
.text:004064A0
.text:004064A0 sub_4064A0      proc near               ; DATA XREF: .text:00402E40↑o
.text:004064A0                                         ; .text:00402F68↑o
.text:004064A0                 cmp     dword_413150, 0
.text:004064A7                 push    esi
.text:004064A8                 push    edi
.text:004064A9                 mov     edi, offset dword_414F14
.text:004064AE                 jz      short loc_4064C7
.text:004064B0                 and     dword_413150, 0
.text:004064B7                 mov     esi, edi
.text:004064B9                 mov     dword_414F18, esi
.text:004064BF                 mov     dword_414F14, edi
.text:004064C5                 jmp     short loc_4064CD
.text:004064C7 ; ---------------------------------------------------------------------------
.text:004064C7
.text:004064C7 loc_4064C7:                             ; CODE XREF: sub_4064A0+E↑j
.text:004064C7                 mov     esi, dword_414F18
.text:004064CD
.text:004064CD loc_4064CD:                             ; CODE XREF: sub_4064A0+25↑j
.text:004064CD                 push    38h ; '8'       ; Size
.text:004064CF                 push    0               ; Val
.text:004064D1                 push    offset unk_413B5C ; void *
.text:004064D6                 call    memset
.text:004064DB                 add     esp, 0Ch
.text:004064DE                 cmp     [esi], edi
.text:004064E0                 jz      short loc_4064E7
.text:004064E2                 push    3
.text:004064E4                 pop     ecx
.text:004064E5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:004064E7 ; ---------------------------------------------------------------------------
.text:004064E7
.text:004064E7 loc_4064E7:                             ; CODE XREF: sub_4064A0+40↑j
.text:004064E7                 mov     eax, offset dword_413B38
.text:004064EC                 mov     dword_413B38, edi
.text:004064F2                 mov     dword_413B3C, esi
.text:004064F8                 mov     [esi], eax
.text:004064FA                 mov     dword_414F18, eax
.text:004064FF                 mov     eax, dword_414FFC
.text:00406504                 mov     dword_413B8C, eax
.text:00406509                 inc     eax
.text:0040650A                 pop     edi
.text:0040650B                 mov     dword_414FFC, eax
.text:00406510                 mov     dword_413B48, 6Ch ; 'l'
.text:0040651A                 pop     esi
.text:0040651B                 retn
.text:0040651B sub_4064A0      endp
.text:0040651B
.text:0040651B ; ---------------------------------------------------------------------------
.text:0040651C                 align 10h
.text:00406520
.text:00406520 ; =============== S U B R O U T I N E =======================================
.text:00406520
.text:00406520
.text:00406520 sub_406520      proc near               ; DATA XREF: .text:00402E44↑o
.text:00406520                                         ; .text:00402F6C↑o
.text:00406520                 cmp     dword_413150, 0
.text:00406527                 push    esi
.text:00406528                 push    edi
.text:00406529                 mov     edi, offset dword_414F14
.text:0040652E                 jz      short loc_406547
.text:00406530                 and     dword_413150, 0
.text:00406537                 mov     esi, edi
.text:00406539                 mov     dword_414F18, esi
.text:0040653F                 mov     dword_414F14, edi
.text:00406545                 jmp     short loc_40654D
.text:00406547 ; ---------------------------------------------------------------------------
.text:00406547
.text:00406547 loc_406547:                             ; CODE XREF: sub_406520+E↑j
.text:00406547                 mov     esi, dword_414F18
.text:0040654D
.text:0040654D loc_40654D:                             ; CODE XREF: sub_406520+25↑j
.text:0040654D                 push    38h ; '8'       ; Size
.text:0040654F                 push    0               ; Val
.text:00406551                 push    offset unk_41440C ; void *
.text:00406556                 call    memset
.text:0040655B                 add     esp, 0Ch
.text:0040655E                 cmp     [esi], edi
.text:00406560                 jz      short loc_406567
.text:00406562                 push    3
.text:00406564                 pop     ecx
.text:00406565                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00406567 ; ---------------------------------------------------------------------------
.text:00406567
.text:00406567 loc_406567:                             ; CODE XREF: sub_406520+40↑j
.text:00406567                 mov     eax, offset dword_4143E8
.text:0040656C                 mov     dword_4143E8, edi
.text:00406572                 mov     dword_4143EC, esi
.text:00406578                 mov     [esi], eax
.text:0040657A                 mov     dword_414F18, eax
.text:0040657F                 mov     eax, dword_414FFC
.text:00406584                 mov     dword_41443C, eax
.text:00406589                 inc     eax
.text:0040658A                 pop     edi
.text:0040658B                 mov     dword_414FFC, eax
.text:00406590                 mov     dword_4143F8, 60h ; '`'
.text:0040659A                 pop     esi
.text:0040659B                 retn
.text:0040659B sub_406520      endp
.text:0040659B
.text:0040659B ; ---------------------------------------------------------------------------
.text:0040659C                 align 10h
.text:004065A0
.text:004065A0 ; =============== S U B R O U T I N E =======================================
.text:004065A0
.text:004065A0
.text:004065A0 sub_4065A0      proc near               ; DATA XREF: .text:00402E48↑o
.text:004065A0                                         ; .text:00402F70↑o
.text:004065A0                 cmp     dword_413150, 0
.text:004065A7                 push    esi
.text:004065A8                 push    edi
.text:004065A9                 mov     edi, offset dword_414F14
.text:004065AE                 jz      short loc_4065C7
.text:004065B0                 and     dword_413150, 0
.text:004065B7                 mov     esi, edi
.text:004065B9                 mov     dword_414F18, esi
.text:004065BF                 mov     dword_414F14, edi
.text:004065C5                 jmp     short loc_4065CD
.text:004065C7 ; ---------------------------------------------------------------------------
.text:004065C7
.text:004065C7 loc_4065C7:                             ; CODE XREF: sub_4065A0+E↑j
.text:004065C7                 mov     esi, dword_414F18
.text:004065CD
.text:004065CD loc_4065CD:                             ; CODE XREF: sub_4065A0+25↑j
.text:004065CD                 push    38h ; '8'       ; Size
.text:004065CF                 push    0               ; Val
.text:004065D1                 push    offset unk_41416C ; void *
.text:004065D6                 call    memset
.text:004065DB                 add     esp, 0Ch
.text:004065DE                 cmp     [esi], edi
.text:004065E0                 jz      short loc_4065E7
.text:004065E2                 push    3
.text:004065E4                 pop     ecx
.text:004065E5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:004065E7 ; ---------------------------------------------------------------------------
.text:004065E7
.text:004065E7 loc_4065E7:                             ; CODE XREF: sub_4065A0+40↑j
.text:004065E7                 mov     eax, offset dword_414148
.text:004065EC                 mov     dword_414148, edi
.text:004065F2                 mov     dword_41414C, esi
.text:004065F8                 mov     [esi], eax
.text:004065FA                 mov     dword_414F18, eax
.text:004065FF                 mov     eax, dword_414FFC
.text:00406604                 mov     dword_41419C, eax
.text:00406609                 inc     eax
.text:0040660A                 pop     edi
.text:0040660B                 mov     dword_414FFC, eax
.text:00406610                 pop     esi
.text:00406611                 retn
.text:00406611 sub_4065A0      endp
.text:00406611
.text:00406611 ; ---------------------------------------------------------------------------
.text:00406612                 align 10h
.text:00406620
.text:00406620 ; =============== S U B R O U T I N E =======================================
.text:00406620
.text:00406620
.text:00406620 sub_406620      proc near               ; DATA XREF: .text:00402E4C↑o
.text:00406620                                         ; .text:00402F74↑o
.text:00406620                 cmp     dword_413150, 0
.text:00406627                 push    esi
.text:00406628                 push    edi
.text:00406629                 mov     edi, offset dword_414F14
.text:0040662E                 jz      short loc_406647
.text:00406630                 and     dword_413150, 0
.text:00406637                 mov     esi, edi
.text:00406639                 mov     dword_414F18, esi
.text:0040663F                 mov     dword_414F14, edi
.text:00406645                 jmp     short loc_40664D
.text:00406647 ; ---------------------------------------------------------------------------
.text:00406647
.text:00406647 loc_406647:                             ; CODE XREF: sub_406620+E↑j
.text:00406647                 mov     esi, dword_414F18
.text:0040664D
.text:0040664D loc_40664D:                             ; CODE XREF: sub_406620+25↑j
.text:0040664D                 push    38h ; '8'       ; Size
.text:0040664F                 push    0               ; Val
.text:00406651                 push    offset unk_4147EC ; void *
.text:00406656                 call    memset
.text:0040665B                 add     esp, 0Ch
.text:0040665E                 cmp     [esi], edi
.text:00406660                 jz      short loc_406667
.text:00406662                 push    3
.text:00406664                 pop     ecx
.text:00406665                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00406667 ; ---------------------------------------------------------------------------
.text:00406667
.text:00406667 loc_406667:                             ; CODE XREF: sub_406620+40↑j
.text:00406667                 mov     eax, offset dword_4147C8
.text:0040666C                 mov     dword_4147C8, edi
.text:00406672                 mov     dword_4147CC, esi
.text:00406678                 mov     [esi], eax
.text:0040667A                 mov     dword_414F18, eax
.text:0040667F                 mov     eax, dword_414FFC
.text:00406684                 mov     dword_41481C, eax
.text:00406689                 inc     eax
.text:0040668A                 pop     edi
.text:0040668B                 mov     dword_414FFC, eax
.text:00406690                 pop     esi
.text:00406691                 retn
.text:00406691 sub_406620      endp
.text:00406691
.text:00406691 ; ---------------------------------------------------------------------------
.text:00406692                 align 10h
.text:004066A0
.text:004066A0 ; =============== S U B R O U T I N E =======================================
.text:004066A0
.text:004066A0
.text:004066A0 sub_4066A0      proc near               ; DATA XREF: .text:00402E50↑o
.text:004066A0                                         ; .text:00402F78↑o
.text:004066A0                 cmp     dword_413150, 0
.text:004066A7                 push    esi
.text:004066A8                 push    edi
.text:004066A9                 mov     edi, offset dword_414F14
.text:004066AE                 jz      short loc_4066C7
.text:004066B0                 and     dword_413150, 0
.text:004066B7                 mov     esi, edi
.text:004066B9                 mov     dword_414F18, esi
.text:004066BF                 mov     dword_414F14, edi
.text:004066C5                 jmp     short loc_4066CD
.text:004066C7 ; ---------------------------------------------------------------------------
.text:004066C7
.text:004066C7 loc_4066C7:                             ; CODE XREF: sub_4066A0+E↑j
.text:004066C7                 mov     esi, dword_414F18
.text:004066CD
.text:004066CD loc_4066CD:                             ; CODE XREF: sub_4066A0+25↑j
.text:004066CD                 push    38h ; '8'       ; Size
.text:004066CF                 push    0               ; Val
.text:004066D1                 push    offset unk_4145FC ; void *
.text:004066D6                 call    memset
.text:004066DB                 add     esp, 0Ch
.text:004066DE                 cmp     [esi], edi
.text:004066E0                 jz      short loc_4066E7
.text:004066E2                 push    3
.text:004066E4                 pop     ecx
.text:004066E5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:004066E7 ; ---------------------------------------------------------------------------
.text:004066E7
.text:004066E7 loc_4066E7:                             ; CODE XREF: sub_4066A0+40↑j
.text:004066E7                 mov     eax, offset dword_4145D8
.text:004066EC                 mov     dword_4145D8, edi
.text:004066F2                 mov     dword_4145DC, esi
.text:004066F8                 mov     [esi], eax
.text:004066FA                 mov     dword_414F18, eax
.text:004066FF                 mov     eax, dword_414FFC
.text:00406704                 mov     dword_41462C, eax
.text:00406709                 inc     eax
.text:0040670A                 pop     edi
.text:0040670B                 mov     dword_414FFC, eax
.text:00406710                 pop     esi
.text:00406711                 retn
.text:00406711 sub_4066A0      endp
.text:00406711
.text:00406711 ; ---------------------------------------------------------------------------
.text:00406712                 align 10h
.text:00406720
.text:00406720 ; =============== S U B R O U T I N E =======================================
.text:00406720
.text:00406720
.text:00406720 sub_406720      proc near               ; DATA XREF: .text:00402E54↑o
.text:00406720                                         ; .text:00402F7C↑o
.text:00406720                 cmp     dword_413150, 0
.text:00406727                 push    esi
.text:00406728                 push    edi
.text:00406729                 mov     edi, offset dword_414F14
.text:0040672E                 jz      short loc_406747
.text:00406730                 and     dword_413150, 0
.text:00406737                 mov     esi, edi
.text:00406739                 mov     dword_414F18, esi
.text:0040673F                 mov     dword_414F14, edi
.text:00406745                 jmp     short loc_40674D
.text:00406747 ; ---------------------------------------------------------------------------
.text:00406747
.text:00406747 loc_406747:                             ; CODE XREF: sub_406720+E↑j
.text:00406747                 mov     esi, dword_414F18
.text:0040674D
.text:0040674D loc_40674D:                             ; CODE XREF: sub_406720+25↑j
.text:0040674D                 push    38h ; '8'       ; Size
.text:0040674F                 push    0               ; Val
.text:00406751                 push    offset unk_41404C ; void *
.text:00406756                 call    memset
.text:0040675B                 add     esp, 0Ch
.text:0040675E                 cmp     [esi], edi
.text:00406760                 jz      short loc_406767
.text:00406762                 push    3
.text:00406764                 pop     ecx
.text:00406765                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00406767 ; ---------------------------------------------------------------------------
.text:00406767
.text:00406767 loc_406767:                             ; CODE XREF: sub_406720+40↑j
.text:00406767                 mov     eax, offset dword_414028
.text:0040676C                 mov     dword_414028, edi
.text:00406772                 mov     dword_41402C, esi
.text:00406778                 mov     [esi], eax
.text:0040677A                 mov     dword_414F18, eax
.text:0040677F                 mov     eax, dword_414FFC
.text:00406784                 mov     dword_41407C, eax
.text:00406789                 inc     eax
.text:0040678A                 pop     edi
.text:0040678B                 mov     dword_414FFC, eax
.text:00406790                 mov     dword_414038, 60h ; '`'
.text:0040679A                 pop     esi
.text:0040679B                 retn
.text:0040679B sub_406720      endp
.text:0040679B
.text:0040679B ; ---------------------------------------------------------------------------
.text:0040679C                 align 10h
.text:004067A0
.text:004067A0 ; =============== S U B R O U T I N E =======================================
.text:004067A0
.text:004067A0
.text:004067A0 sub_4067A0      proc near               ; DATA XREF: .text:00402E58↑o
.text:004067A0                                         ; .text:00402F80↑o
.text:004067A0                 cmp     dword_413150, 0
.text:004067A7                 push    esi
.text:004067A8                 push    edi
.text:004067A9                 mov     edi, offset dword_414F14
.text:004067AE                 jz      short loc_4067C7
.text:004067B0                 and     dword_413150, 0
.text:004067B7                 mov     esi, edi
.text:004067B9                 mov     dword_414F18, esi
.text:004067BF                 mov     dword_414F14, edi
.text:004067C5                 jmp     short loc_4067CD
.text:004067C7 ; ---------------------------------------------------------------------------
.text:004067C7
.text:004067C7 loc_4067C7:                             ; CODE XREF: sub_4067A0+E↑j
.text:004067C7                 mov     esi, dword_414F18
.text:004067CD
.text:004067CD loc_4067CD:                             ; CODE XREF: sub_4067A0+25↑j
.text:004067CD                 push    38h ; '8'       ; Size
.text:004067CF                 push    0               ; Val
.text:004067D1                 push    offset unk_4132FC ; void *
.text:004067D6                 call    memset
.text:004067DB                 add     esp, 0Ch
.text:004067DE                 cmp     [esi], edi
.text:004067E0                 jz      short loc_4067E7
.text:004067E2                 push    3
.text:004067E4                 pop     ecx
.text:004067E5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:004067E7 ; ---------------------------------------------------------------------------
.text:004067E7
.text:004067E7 loc_4067E7:                             ; CODE XREF: sub_4067A0+40↑j
.text:004067E7                 mov     eax, offset dword_4132D8
.text:004067EC                 mov     dword_4132D8, edi
.text:004067F2                 mov     dword_4132DC, esi
.text:004067F8                 mov     [esi], eax
.text:004067FA                 mov     dword_414F18, eax
.text:004067FF                 mov     eax, dword_414FFC
.text:00406804                 mov     dword_41332C, eax
.text:00406809                 inc     eax
.text:0040680A                 pop     edi
.text:0040680B                 mov     dword_414FFC, eax
.text:00406810                 mov     dword_4132E8, 60h ; '`'
.text:0040681A                 pop     esi
.text:0040681B                 retn
.text:0040681B sub_4067A0      endp
.text:0040681B
.text:0040681B ; ---------------------------------------------------------------------------
.text:0040681C                 align 10h
.text:00406820
.text:00406820 ; =============== S U B R O U T I N E =======================================
.text:00406820
.text:00406820
.text:00406820 sub_406820      proc near               ; DATA XREF: .text:00402E5C↑o
.text:00406820                                         ; .text:00402F84↑o
.text:00406820                 cmp     dword_413150, 0
.text:00406827                 push    esi
.text:00406828                 push    edi
.text:00406829                 mov     edi, offset dword_414F14
.text:0040682E                 jz      short loc_406847
.text:00406830                 and     dword_413150, 0
.text:00406837                 mov     esi, edi
.text:00406839                 mov     dword_414F18, esi
.text:0040683F                 mov     dword_414F14, edi
.text:00406845                 jmp     short loc_40684D
.text:00406847 ; ---------------------------------------------------------------------------
.text:00406847
.text:00406847 loc_406847:                             ; CODE XREF: sub_406820+E↑j
.text:00406847                 mov     esi, dword_414F18
.text:0040684D
.text:0040684D loc_40684D:                             ; CODE XREF: sub_406820+25↑j
.text:0040684D                 push    38h ; '8'       ; Size
.text:0040684F                 push    0               ; Val
.text:00406851                 push    offset unk_413DAC ; void *
.text:00406856                 call    memset
.text:0040685B                 add     esp, 0Ch
.text:0040685E                 cmp     [esi], edi
.text:00406860                 jz      short loc_406867
.text:00406862                 push    3
.text:00406864                 pop     ecx
.text:00406865                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00406867 ; ---------------------------------------------------------------------------
.text:00406867
.text:00406867 loc_406867:                             ; CODE XREF: sub_406820+40↑j
.text:00406867                 mov     eax, offset dword_413D88
.text:0040686C                 mov     dword_413D88, edi
.text:00406872                 mov     dword_413D8C, esi
.text:00406878                 mov     [esi], eax
.text:0040687A                 mov     dword_414F18, eax
.text:0040687F                 mov     eax, dword_414FFC
.text:00406884                 mov     dword_413DDC, eax
.text:00406889                 inc     eax
.text:0040688A                 pop     edi
.text:0040688B                 mov     dword_414FFC, eax
.text:00406890                 mov     dword_413D98, 60h ; '`'
.text:0040689A                 pop     esi
.text:0040689B                 retn
.text:0040689B sub_406820      endp
.text:0040689B
.text:0040689B ; ---------------------------------------------------------------------------
.text:0040689C                 align 10h
.text:004068A0
.text:004068A0 ; =============== S U B R O U T I N E =======================================
.text:004068A0
.text:004068A0
.text:004068A0 sub_4068A0      proc near               ; DATA XREF: .text:00402E60↑o
.text:004068A0                                         ; .text:00402F88↑o
.text:004068A0                 cmp     dword_413150, 0
.text:004068A7                 push    esi
.text:004068A8                 push    edi
.text:004068A9                 mov     edi, offset dword_414F14
.text:004068AE                 jz      short loc_4068C7
.text:004068B0                 and     dword_413150, 0
.text:004068B7                 mov     esi, edi
.text:004068B9                 mov     dword_414F18, esi
.text:004068BF                 mov     dword_414F14, edi
.text:004068C5                 jmp     short loc_4068CD
.text:004068C7 ; ---------------------------------------------------------------------------
.text:004068C7
.text:004068C7 loc_4068C7:                             ; CODE XREF: sub_4068A0+E↑j
.text:004068C7                 mov     esi, dword_414F18
.text:004068CD
.text:004068CD loc_4068CD:                             ; CODE XREF: sub_4068A0+25↑j
.text:004068CD                 push    38h ; '8'       ; Size
.text:004068CF                 push    0               ; Val
.text:004068D1                 push    offset unk_41477C ; void *
.text:004068D6                 call    memset
.text:004068DB                 add     esp, 0Ch
.text:004068DE                 cmp     [esi], edi
.text:004068E0                 jz      short loc_4068E7
.text:004068E2                 push    3
.text:004068E4                 pop     ecx
.text:004068E5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:004068E7 ; ---------------------------------------------------------------------------
.text:004068E7
.text:004068E7 loc_4068E7:                             ; CODE XREF: sub_4068A0+40↑j
.text:004068E7                 mov     eax, offset dword_414758
.text:004068EC                 mov     dword_414758, edi
.text:004068F2                 mov     dword_41475C, esi
.text:004068F8                 mov     [esi], eax
.text:004068FA                 mov     dword_414F18, eax
.text:004068FF                 mov     eax, dword_414FFC
.text:00406904                 mov     dword_4147AC, eax
.text:00406909                 inc     eax
.text:0040690A                 pop     edi
.text:0040690B                 mov     dword_414FFC, eax
.text:00406910                 mov     dword_414768, 6Ch ; 'l'
.text:0040691A                 pop     esi
.text:0040691B                 retn
.text:0040691B sub_4068A0      endp
.text:0040691B
.text:0040691B ; ---------------------------------------------------------------------------
.text:0040691C                 align 10h
.text:00406920
.text:00406920 ; =============== S U B R O U T I N E =======================================
.text:00406920
.text:00406920
.text:00406920 sub_406920      proc near               ; DATA XREF: .text:00402E64↑o
.text:00406920                                         ; .text:00402F8C↑o
.text:00406920                 cmp     dword_413150, 0
.text:00406927                 push    esi
.text:00406928                 push    edi
.text:00406929                 mov     edi, offset dword_414F14
.text:0040692E                 jz      short loc_406947
.text:00406930                 and     dword_413150, 0
.text:00406937                 mov     esi, edi
.text:00406939                 mov     dword_414F18, esi
.text:0040693F                 mov     dword_414F14, edi
.text:00406945                 jmp     short loc_40694D
.text:00406947 ; ---------------------------------------------------------------------------
.text:00406947
.text:00406947 loc_406947:                             ; CODE XREF: sub_406920+E↑j
.text:00406947                 mov     esi, dword_414F18
.text:0040694D
.text:0040694D loc_40694D:                             ; CODE XREF: sub_406920+25↑j
.text:0040694D                 push    38h ; '8'       ; Size
.text:0040694F                 push    0               ; Val
.text:00406951                 push    offset unk_41491C ; void *
.text:00406956                 call    memset
.text:0040695B                 add     esp, 0Ch
.text:0040695E                 cmp     [esi], edi
.text:00406960                 jz      short loc_406967
.text:00406962                 push    3
.text:00406964                 pop     ecx
.text:00406965                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00406967 ; ---------------------------------------------------------------------------
.text:00406967
.text:00406967 loc_406967:                             ; CODE XREF: sub_406920+40↑j
.text:00406967                 mov     eax, offset dword_4148F8
.text:0040696C                 mov     dword_4148F8, edi
.text:00406972                 mov     dword_4148FC, esi
.text:00406978                 mov     [esi], eax
.text:0040697A                 mov     dword_414F18, eax
.text:0040697F                 mov     eax, dword_414FFC
.text:00406984                 mov     dword_41494C, eax
.text:00406989                 inc     eax
.text:0040698A                 pop     edi
.text:0040698B                 mov     dword_414FFC, eax
.text:00406990                 pop     esi
.text:00406991                 retn
.text:00406991 sub_406920      endp
.text:00406991
.text:00406991 ; ---------------------------------------------------------------------------
.text:00406992                 align 10h
.text:004069A0
.text:004069A0 ; =============== S U B R O U T I N E =======================================
.text:004069A0
.text:004069A0
.text:004069A0 sub_4069A0      proc near               ; DATA XREF: .text:00402E68↑o
.text:004069A0                                         ; .text:00402F90↑o
.text:004069A0                 cmp     dword_413150, 0
.text:004069A7                 push    esi
.text:004069A8                 push    edi
.text:004069A9                 mov     edi, offset dword_414F14
.text:004069AE                 jz      short loc_4069C7
.text:004069B0                 and     dword_413150, 0
.text:004069B7                 mov     esi, edi
.text:004069B9                 mov     dword_414F18, esi
.text:004069BF                 mov     dword_414F14, edi
.text:004069C5                 jmp     short loc_4069CD
.text:004069C7 ; ---------------------------------------------------------------------------
.text:004069C7
.text:004069C7 loc_4069C7:                             ; CODE XREF: sub_4069A0+E↑j
.text:004069C7                 mov     esi, dword_414F18
.text:004069CD
.text:004069CD loc_4069CD:                             ; CODE XREF: sub_4069A0+25↑j
.text:004069CD                 push    38h ; '8'       ; Size
.text:004069CF                 push    0               ; Val
.text:004069D1                 push    offset unk_4131DC ; void *
.text:004069D6                 call    memset
.text:004069DB                 add     esp, 0Ch
.text:004069DE                 cmp     [esi], edi
.text:004069E0                 jz      short loc_4069E7
.text:004069E2                 push    3
.text:004069E4                 pop     ecx
.text:004069E5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:004069E7 ; ---------------------------------------------------------------------------
.text:004069E7
.text:004069E7 loc_4069E7:                             ; CODE XREF: sub_4069A0+40↑j
.text:004069E7                 mov     eax, offset dword_4131B8
.text:004069EC                 mov     dword_4131B8, edi
.text:004069F2                 mov     dword_4131BC, esi
.text:004069F8                 mov     [esi], eax
.text:004069FA                 mov     dword_414F18, eax
.text:004069FF                 mov     eax, dword_414FFC
.text:00406A04                 mov     dword_41320C, eax
.text:00406A09                 inc     eax
.text:00406A0A                 pop     edi
.text:00406A0B                 mov     dword_414FFC, eax
.text:00406A10                 pop     esi
.text:00406A11                 retn
.text:00406A11 sub_4069A0      endp
.text:00406A11
.text:00406A11 ; ---------------------------------------------------------------------------
.text:00406A12                 align 10h
.text:00406A20
.text:00406A20 ; =============== S U B R O U T I N E =======================================
.text:00406A20
.text:00406A20
.text:00406A20 sub_406A20      proc near               ; DATA XREF: .text:00402E6C↑o
.text:00406A20                                         ; .text:00402F94↑o
.text:00406A20                 cmp     dword_413150, 0
.text:00406A27                 push    esi
.text:00406A28                 push    edi
.text:00406A29                 mov     edi, offset dword_414F14
.text:00406A2E                 jz      short loc_406A47
.text:00406A30                 and     dword_413150, 0
.text:00406A37                 mov     esi, edi
.text:00406A39                 mov     dword_414F18, esi
.text:00406A3F                 mov     dword_414F14, edi
.text:00406A45                 jmp     short loc_406A4D
.text:00406A47 ; ---------------------------------------------------------------------------
.text:00406A47
.text:00406A47 loc_406A47:                             ; CODE XREF: sub_406A20+E↑j
.text:00406A47                 mov     esi, dword_414F18
.text:00406A4D
.text:00406A4D loc_406A4D:                             ; CODE XREF: sub_406A20+25↑j
.text:00406A4D                 push    38h ; '8'       ; Size
.text:00406A4F                 push    0               ; Val
.text:00406A51                 push    offset unk_413ECC ; void *
.text:00406A56                 call    memset
.text:00406A5B                 add     esp, 0Ch
.text:00406A5E                 cmp     [esi], edi
.text:00406A60                 jz      short loc_406A67
.text:00406A62                 push    3
.text:00406A64                 pop     ecx
.text:00406A65                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00406A67 ; ---------------------------------------------------------------------------
.text:00406A67
.text:00406A67 loc_406A67:                             ; CODE XREF: sub_406A20+40↑j
.text:00406A67                 mov     eax, offset dword_413EA8
.text:00406A6C                 mov     dword_413EA8, edi
.text:00406A72                 mov     dword_413EAC, esi
.text:00406A78                 mov     [esi], eax
.text:00406A7A                 mov     dword_414F18, eax
.text:00406A7F                 mov     eax, dword_414FFC
.text:00406A84                 mov     dword_413EFC, eax
.text:00406A89                 inc     eax
.text:00406A8A                 pop     edi
.text:00406A8B                 mov     dword_414FFC, eax
.text:00406A90                 mov     dword_413EB8, 60h ; '`'
.text:00406A9A                 pop     esi
.text:00406A9B                 retn
.text:00406A9B sub_406A20      endp
.text:00406A9B
.text:00406A9B ; ---------------------------------------------------------------------------
.text:00406A9C                 align 10h
.text:00406AA0
.text:00406AA0 ; =============== S U B R O U T I N E =======================================
.text:00406AA0
.text:00406AA0
.text:00406AA0 sub_406AA0      proc near               ; DATA XREF: .text:00402E70↑o
.text:00406AA0                                         ; .text:00402F98↑o
.text:00406AA0                 cmp     dword_413150, 0
.text:00406AA7                 push    esi
.text:00406AA8                 push    edi
.text:00406AA9                 mov     edi, offset dword_414F14
.text:00406AAE                 jz      short loc_406AC7
.text:00406AB0                 and     dword_413150, 0
.text:00406AB7                 mov     esi, edi
.text:00406AB9                 mov     dword_414F18, esi
.text:00406ABF                 mov     dword_414F14, edi
.text:00406AC5                 jmp     short loc_406ACD
.text:00406AC7 ; ---------------------------------------------------------------------------
.text:00406AC7
.text:00406AC7 loc_406AC7:                             ; CODE XREF: sub_406AA0+E↑j
.text:00406AC7                 mov     esi, dword_414F18
.text:00406ACD
.text:00406ACD loc_406ACD:                             ; CODE XREF: sub_406AA0+25↑j
.text:00406ACD                 push    38h ; '8'       ; Size
.text:00406ACF                 push    0               ; Val
.text:00406AD1                 push    offset unk_4137FC ; void *
.text:00406AD6                 call    memset
.text:00406ADB                 add     esp, 0Ch
.text:00406ADE                 cmp     [esi], edi
.text:00406AE0                 jz      short loc_406AE7
.text:00406AE2                 push    3
.text:00406AE4                 pop     ecx
.text:00406AE5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00406AE7 ; ---------------------------------------------------------------------------
.text:00406AE7
.text:00406AE7 loc_406AE7:                             ; CODE XREF: sub_406AA0+40↑j
.text:00406AE7                 mov     eax, offset dword_4137D8
.text:00406AEC                 mov     dword_4137D8, edi
.text:00406AF2                 mov     dword_4137DC, esi
.text:00406AF8                 mov     [esi], eax
.text:00406AFA                 mov     dword_414F18, eax
.text:00406AFF                 mov     eax, dword_414FFC
.text:00406B04                 mov     dword_41382C, eax
.text:00406B09                 inc     eax
.text:00406B0A                 pop     edi
.text:00406B0B                 mov     dword_414FFC, eax
.text:00406B10                 mov     dword_4137E8, 60h ; '`'
.text:00406B1A                 pop     esi
.text:00406B1B                 retn
.text:00406B1B sub_406AA0      endp
.text:00406B1B
.text:00406B1B ; ---------------------------------------------------------------------------
.text:00406B1C                 align 10h
.text:00406B20
.text:00406B20 ; =============== S U B R O U T I N E =======================================
.text:00406B20
.text:00406B20
.text:00406B20 sub_406B20      proc near               ; DATA XREF: .text:00402E74↑o
.text:00406B20                                         ; .text:00402F9C↑o
.text:00406B20                 cmp     dword_413150, 0
.text:00406B27                 push    esi
.text:00406B28                 push    edi
.text:00406B29                 mov     edi, offset dword_414F14
.text:00406B2E                 jz      short loc_406B47
.text:00406B30                 and     dword_413150, 0
.text:00406B37                 mov     esi, edi
.text:00406B39                 mov     dword_414F18, esi
.text:00406B3F                 mov     dword_414F14, edi
.text:00406B45                 jmp     short loc_406B4D
.text:00406B47 ; ---------------------------------------------------------------------------
.text:00406B47
.text:00406B47 loc_406B47:                             ; CODE XREF: sub_406B20+E↑j
.text:00406B47                 mov     esi, dword_414F18
.text:00406B4D
.text:00406B4D loc_406B4D:                             ; CODE XREF: sub_406B20+25↑j
.text:00406B4D                 push    38h ; '8'       ; Size
.text:00406B4F                 push    0               ; Val
.text:00406B51                 push    offset unk_41434C ; void *
.text:00406B56                 call    memset
.text:00406B5B                 add     esp, 0Ch
.text:00406B5E                 cmp     [esi], edi
.text:00406B60                 jz      short loc_406B67
.text:00406B62                 push    3
.text:00406B64                 pop     ecx
.text:00406B65                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00406B67 ; ---------------------------------------------------------------------------
.text:00406B67
.text:00406B67 loc_406B67:                             ; CODE XREF: sub_406B20+40↑j
.text:00406B67                 mov     eax, offset dword_414328
.text:00406B6C                 mov     dword_414328, edi
.text:00406B72                 mov     dword_41432C, esi
.text:00406B78                 mov     [esi], eax
.text:00406B7A                 mov     dword_414F18, eax
.text:00406B7F                 mov     eax, dword_414FFC
.text:00406B84                 mov     dword_41437C, eax
.text:00406B89                 inc     eax
.text:00406B8A                 pop     edi
.text:00406B8B                 mov     dword_414FFC, eax
.text:00406B90                 mov     dword_414338, 60h ; '`'
.text:00406B9A                 pop     esi
.text:00406B9B                 retn
.text:00406B9B sub_406B20      endp
.text:00406B9B
.text:00406B9B ; ---------------------------------------------------------------------------
.text:00406B9C                 align 10h
.text:00406BA0
.text:00406BA0 ; =============== S U B R O U T I N E =======================================
.text:00406BA0
.text:00406BA0
.text:00406BA0 sub_406BA0      proc near               ; DATA XREF: .text:00402E78↑o
.text:00406BA0                                         ; .text:00402FA0↑o
.text:00406BA0                 cmp     dword_413150, 0
.text:00406BA7                 push    esi
.text:00406BA8                 push    edi
.text:00406BA9                 mov     edi, offset dword_414F14
.text:00406BAE                 jz      short loc_406BC7
.text:00406BB0                 and     dword_413150, 0
.text:00406BB7                 mov     esi, edi
.text:00406BB9                 mov     dword_414F18, esi
.text:00406BBF                 mov     dword_414F14, edi
.text:00406BC5                 jmp     short loc_406BCD
.text:00406BC7 ; ---------------------------------------------------------------------------
.text:00406BC7
.text:00406BC7 loc_406BC7:                             ; CODE XREF: sub_406BA0+E↑j
.text:00406BC7                 mov     esi, dword_414F18
.text:00406BCD
.text:00406BCD loc_406BCD:                             ; CODE XREF: sub_406BA0+25↑j
.text:00406BCD                 push    38h ; '8'       ; Size
.text:00406BCF                 push    0               ; Val
.text:00406BD1                 push    offset unk_41471C ; void *
.text:00406BD6                 call    memset
.text:00406BDB                 add     esp, 0Ch
.text:00406BDE                 cmp     [esi], edi
.text:00406BE0                 jz      short loc_406BE7
.text:00406BE2                 push    3
.text:00406BE4                 pop     ecx
.text:00406BE5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00406BE7 ; ---------------------------------------------------------------------------
.text:00406BE7
.text:00406BE7 loc_406BE7:                             ; CODE XREF: sub_406BA0+40↑j
.text:00406BE7                 mov     eax, offset dword_4146F8
.text:00406BEC                 mov     dword_4146F8, edi
.text:00406BF2                 mov     dword_4146FC, esi
.text:00406BF8                 mov     [esi], eax
.text:00406BFA                 mov     dword_414F18, eax
.text:00406BFF                 mov     eax, dword_414FFC
.text:00406C04                 mov     dword_41474C, eax
.text:00406C09                 inc     eax
.text:00406C0A                 pop     edi
.text:00406C0B                 mov     dword_414FFC, eax
.text:00406C10                 mov     dword_414708, 60h ; '`'
.text:00406C1A                 pop     esi
.text:00406C1B                 retn
.text:00406C1B sub_406BA0      endp
.text:00406C1B
.text:00406C1B ; ---------------------------------------------------------------------------
.text:00406C1C                 align 10h
.text:00406C20
.text:00406C20 ; =============== S U B R O U T I N E =======================================
.text:00406C20
.text:00406C20
.text:00406C20 sub_406C20      proc near               ; DATA XREF: .text:00402E7C↑o
.text:00406C20                                         ; .text:00402FA4↑o
.text:00406C20                 cmp     dword_413150, 0
.text:00406C27                 push    esi
.text:00406C28                 push    edi
.text:00406C29                 mov     edi, offset dword_414F14
.text:00406C2E                 jz      short loc_406C47
.text:00406C30                 and     dword_413150, 0
.text:00406C37                 mov     esi, edi
.text:00406C39                 mov     dword_414F18, esi
.text:00406C3F                 mov     dword_414F14, edi
.text:00406C45                 jmp     short loc_406C4D
.text:00406C47 ; ---------------------------------------------------------------------------
.text:00406C47
.text:00406C47 loc_406C47:                             ; CODE XREF: sub_406C20+E↑j
.text:00406C47                 mov     esi, dword_414F18
.text:00406C4D
.text:00406C4D loc_406C4D:                             ; CODE XREF: sub_406C20+25↑j
.text:00406C4D                 push    38h ; '8'       ; Size
.text:00406C4F                 push    0               ; Val
.text:00406C51                 push    offset unk_41348C ; void *
.text:00406C56                 call    memset
.text:00406C5B                 add     esp, 0Ch
.text:00406C5E                 cmp     [esi], edi
.text:00406C60                 jz      short loc_406C67
.text:00406C62                 push    3
.text:00406C64                 pop     ecx
.text:00406C65                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00406C67 ; ---------------------------------------------------------------------------
.text:00406C67
.text:00406C67 loc_406C67:                             ; CODE XREF: sub_406C20+40↑j
.text:00406C67                 mov     eax, offset dword_413468
.text:00406C6C                 mov     dword_413468, edi
.text:00406C72                 mov     dword_41346C, esi
.text:00406C78                 mov     [esi], eax
.text:00406C7A                 mov     dword_414F18, eax
.text:00406C7F                 mov     eax, dword_414FFC
.text:00406C84                 mov     dword_4134BC, eax
.text:00406C89                 inc     eax
.text:00406C8A                 pop     edi
.text:00406C8B                 mov     dword_414FFC, eax
.text:00406C90                 mov     dword_413478, 60h ; '`'
.text:00406C9A                 pop     esi
.text:00406C9B                 retn
.text:00406C9B sub_406C20      endp
.text:00406C9B
.text:00406C9B ; ---------------------------------------------------------------------------
.text:00406C9C                 align 10h
.text:00406CA0
.text:00406CA0 ; =============== S U B R O U T I N E =======================================
.text:00406CA0
.text:00406CA0
.text:00406CA0 sub_406CA0      proc near               ; DATA XREF: .text:00402E80↑o
.text:00406CA0                                         ; .text:00402FA8↑o
.text:00406CA0                 cmp     dword_413150, 0
.text:00406CA7                 push    esi
.text:00406CA8                 push    edi
.text:00406CA9                 mov     edi, offset dword_414F14
.text:00406CAE                 jz      short loc_406CC7
.text:00406CB0                 and     dword_413150, 0
.text:00406CB7                 mov     esi, edi
.text:00406CB9                 mov     dword_414F18, esi
.text:00406CBF                 mov     dword_414F14, edi
.text:00406CC5                 jmp     short loc_406CCD
.text:00406CC7 ; ---------------------------------------------------------------------------
.text:00406CC7
.text:00406CC7 loc_406CC7:                             ; CODE XREF: sub_406CA0+E↑j
.text:00406CC7                 mov     esi, dword_414F18
.text:00406CCD
.text:00406CCD loc_406CCD:                             ; CODE XREF: sub_406CA0+25↑j
.text:00406CCD                 push    38h ; '8'       ; Size
.text:00406CCF                 push    0               ; Val
.text:00406CD1                 push    offset unk_41335C ; void *
.text:00406CD6                 call    memset
.text:00406CDB                 add     esp, 0Ch
.text:00406CDE                 cmp     [esi], edi
.text:00406CE0                 jz      short loc_406CE7
.text:00406CE2                 push    3
.text:00406CE4                 pop     ecx
.text:00406CE5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00406CE7 ; ---------------------------------------------------------------------------
.text:00406CE7
.text:00406CE7 loc_406CE7:                             ; CODE XREF: sub_406CA0+40↑j
.text:00406CE7                 mov     eax, offset dword_413338
.text:00406CEC                 mov     dword_413338, edi
.text:00406CF2                 mov     dword_41333C, esi
.text:00406CF8                 mov     [esi], eax
.text:00406CFA                 mov     dword_414F18, eax
.text:00406CFF                 mov     eax, dword_414FFC
.text:00406D04                 mov     dword_41338C, eax
.text:00406D09                 inc     eax
.text:00406D0A                 pop     edi
.text:00406D0B                 mov     dword_414FFC, eax
.text:00406D10                 mov     dword_413348, 6Ch ; 'l'
.text:00406D1A                 pop     esi
.text:00406D1B                 retn
.text:00406D1B sub_406CA0      endp
.text:00406D1B
.text:00406D1B ; ---------------------------------------------------------------------------
.text:00406D1C                 align 10h
.text:00406D20
.text:00406D20 ; =============== S U B R O U T I N E =======================================
.text:00406D20
.text:00406D20
.text:00406D20 sub_406D20      proc near               ; DATA XREF: .text:00402E84↑o
.text:00406D20                                         ; .text:00402FAC↑o
.text:00406D20                 cmp     dword_413150, 0
.text:00406D27                 push    esi
.text:00406D28                 push    edi
.text:00406D29                 mov     edi, offset dword_414F14
.text:00406D2E                 jz      short loc_406D47
.text:00406D30                 and     dword_413150, 0
.text:00406D37                 mov     esi, edi
.text:00406D39                 mov     dword_414F18, esi
.text:00406D3F                 mov     dword_414F14, edi
.text:00406D45                 jmp     short loc_406D4D
.text:00406D47 ; ---------------------------------------------------------------------------
.text:00406D47
.text:00406D47 loc_406D47:                             ; CODE XREF: sub_406D20+E↑j
.text:00406D47                 mov     esi, dword_414F18
.text:00406D4D
.text:00406D4D loc_406D4D:                             ; CODE XREF: sub_406D20+25↑j
.text:00406D4D                 push    38h ; '8'       ; Size
.text:00406D4F                 push    0               ; Val
.text:00406D51                 push    offset unk_413F2C ; void *
.text:00406D56                 call    memset
.text:00406D5B                 add     esp, 0Ch
.text:00406D5E                 cmp     [esi], edi
.text:00406D60                 jz      short loc_406D67
.text:00406D62                 push    3
.text:00406D64                 pop     ecx
.text:00406D65                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00406D67 ; ---------------------------------------------------------------------------
.text:00406D67
.text:00406D67 loc_406D67:                             ; CODE XREF: sub_406D20+40↑j
.text:00406D67                 mov     eax, offset dword_413F08
.text:00406D6C                 mov     dword_413F08, edi
.text:00406D72                 mov     dword_413F0C, esi
.text:00406D78                 mov     [esi], eax
.text:00406D7A                 mov     dword_414F18, eax
.text:00406D7F                 mov     eax, dword_414FFC
.text:00406D84                 mov     dword_413F5C, eax
.text:00406D89                 inc     eax
.text:00406D8A                 pop     edi
.text:00406D8B                 mov     dword_414FFC, eax
.text:00406D90                 mov     dword_413F18, 60h ; '`'
.text:00406D9A                 pop     esi
.text:00406D9B                 retn
.text:00406D9B sub_406D20      endp
.text:00406D9B
.text:00406D9B ; ---------------------------------------------------------------------------
.text:00406D9C                 align 10h
.text:00406DA0
.text:00406DA0 ; =============== S U B R O U T I N E =======================================
.text:00406DA0
.text:00406DA0
.text:00406DA0 sub_406DA0      proc near               ; DATA XREF: .text:00402E88↑o
.text:00406DA0                                         ; .text:00402FB0↑o
.text:00406DA0                 cmp     dword_413150, 0
.text:00406DA7                 push    esi
.text:00406DA8                 push    edi
.text:00406DA9                 mov     edi, offset dword_414F14
.text:00406DAE                 jz      short loc_406DC7
.text:00406DB0                 and     dword_413150, 0
.text:00406DB7                 mov     esi, edi
.text:00406DB9                 mov     dword_414F18, esi
.text:00406DBF                 mov     dword_414F14, edi
.text:00406DC5                 jmp     short loc_406DCD
.text:00406DC7 ; ---------------------------------------------------------------------------
.text:00406DC7
.text:00406DC7 loc_406DC7:                             ; CODE XREF: sub_406DA0+E↑j
.text:00406DC7                 mov     esi, dword_414F18
.text:00406DCD
.text:00406DCD loc_406DCD:                             ; CODE XREF: sub_406DA0+25↑j
.text:00406DCD                 push    38h ; '8'       ; Size
.text:00406DCF                 push    0               ; Val
.text:00406DD1                 push    offset unk_413A9C ; void *
.text:00406DD6                 call    memset
.text:00406DDB                 add     esp, 0Ch
.text:00406DDE                 cmp     [esi], edi
.text:00406DE0                 jz      short loc_406DE7
.text:00406DE2                 push    3
.text:00406DE4                 pop     ecx
.text:00406DE5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00406DE7 ; ---------------------------------------------------------------------------
.text:00406DE7
.text:00406DE7 loc_406DE7:                             ; CODE XREF: sub_406DA0+40↑j
.text:00406DE7                 mov     eax, offset dword_413A78
.text:00406DEC                 mov     dword_413A78, edi
.text:00406DF2                 mov     dword_413A7C, esi
.text:00406DF8                 mov     [esi], eax
.text:00406DFA                 mov     dword_414F18, eax
.text:00406DFF                 mov     eax, dword_414FFC
.text:00406E04                 mov     dword_413ACC, eax
.text:00406E09                 inc     eax
.text:00406E0A                 pop     edi
.text:00406E0B                 mov     dword_414FFC, eax
.text:00406E10                 mov     dword_413A88, 60h ; '`'
.text:00406E1A                 pop     esi
.text:00406E1B                 retn
.text:00406E1B sub_406DA0      endp
.text:00406E1B
.text:00406E1B ; ---------------------------------------------------------------------------
.text:00406E1C                 align 10h
.text:00406E20
.text:00406E20 ; =============== S U B R O U T I N E =======================================
.text:00406E20
.text:00406E20
.text:00406E20 sub_406E20      proc near               ; DATA XREF: .text:00402E8C↑o
.text:00406E20                                         ; .text:00402FB4↑o
.text:00406E20                 cmp     dword_413150, 0
.text:00406E27                 push    esi
.text:00406E28                 push    edi
.text:00406E29                 mov     edi, offset dword_414F14
.text:00406E2E                 jz      short loc_406E47
.text:00406E30                 and     dword_413150, 0
.text:00406E37                 mov     esi, edi
.text:00406E39                 mov     dword_414F18, esi
.text:00406E3F                 mov     dword_414F14, edi
.text:00406E45                 jmp     short loc_406E4D
.text:00406E47 ; ---------------------------------------------------------------------------
.text:00406E47
.text:00406E47 loc_406E47:                             ; CODE XREF: sub_406E20+E↑j
.text:00406E47                 mov     esi, dword_414F18
.text:00406E4D
.text:00406E4D loc_406E4D:                             ; CODE XREF: sub_406E20+25↑j
.text:00406E4D                 push    38h ; '8'       ; Size
.text:00406E4F                 push    0               ; Val
.text:00406E51                 push    offset unk_41360C ; void *
.text:00406E56                 call    memset
.text:00406E5B                 add     esp, 0Ch
.text:00406E5E                 cmp     [esi], edi
.text:00406E60                 jz      short loc_406E67
.text:00406E62                 push    3
.text:00406E64                 pop     ecx
.text:00406E65                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00406E67 ; ---------------------------------------------------------------------------
.text:00406E67
.text:00406E67 loc_406E67:                             ; CODE XREF: sub_406E20+40↑j
.text:00406E67                 mov     eax, offset dword_4135E8
.text:00406E6C                 mov     dword_4135E8, edi
.text:00406E72                 mov     dword_4135EC, esi
.text:00406E78                 mov     [esi], eax
.text:00406E7A                 mov     dword_414F18, eax
.text:00406E7F                 mov     eax, dword_414FFC
.text:00406E84                 mov     dword_41363C, eax
.text:00406E89                 inc     eax
.text:00406E8A                 pop     edi
.text:00406E8B                 mov     dword_414FFC, eax
.text:00406E90                 pop     esi
.text:00406E91                 retn
.text:00406E91 sub_406E20      endp
.text:00406E91
.text:00406E91 ; ---------------------------------------------------------------------------
.text:00406E92                 align 10h
.text:00406EA0
.text:00406EA0 ; =============== S U B R O U T I N E =======================================
.text:00406EA0
.text:00406EA0
.text:00406EA0 sub_406EA0      proc near               ; DATA XREF: .text:00402E90↑o
.text:00406EA0                                         ; .text:00402FB8↑o
.text:00406EA0                 cmp     dword_413150, 0
.text:00406EA7                 push    esi
.text:00406EA8                 push    edi
.text:00406EA9                 mov     edi, offset dword_414F14
.text:00406EAE                 jz      short loc_406EC7
.text:00406EB0                 and     dword_413150, 0
.text:00406EB7                 mov     esi, edi
.text:00406EB9                 mov     dword_414F18, esi
.text:00406EBF                 mov     dword_414F14, edi
.text:00406EC5                 jmp     short loc_406ECD
.text:00406EC7 ; ---------------------------------------------------------------------------
.text:00406EC7
.text:00406EC7 loc_406EC7:                             ; CODE XREF: sub_406EA0+E↑j
.text:00406EC7                 mov     esi, dword_414F18
.text:00406ECD
.text:00406ECD loc_406ECD:                             ; CODE XREF: sub_406EA0+25↑j
.text:00406ECD                 push    38h ; '8'       ; Size
.text:00406ECF                 push    0               ; Val
.text:00406ED1                 push    offset unk_41465C ; void *
.text:00406ED6                 call    memset
.text:00406EDB                 add     esp, 0Ch
.text:00406EDE                 cmp     [esi], edi
.text:00406EE0                 jz      short loc_406EE7
.text:00406EE2                 push    3
.text:00406EE4                 pop     ecx
.text:00406EE5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00406EE7 ; ---------------------------------------------------------------------------
.text:00406EE7
.text:00406EE7 loc_406EE7:                             ; CODE XREF: sub_406EA0+40↑j
.text:00406EE7                 mov     eax, offset dword_414638
.text:00406EEC                 mov     dword_414638, edi
.text:00406EF2                 mov     dword_41463C, esi
.text:00406EF8                 mov     [esi], eax
.text:00406EFA                 mov     dword_414F18, eax
.text:00406EFF                 mov     eax, dword_414FFC
.text:00406F04                 mov     dword_41468C, eax
.text:00406F09                 inc     eax
.text:00406F0A                 pop     edi
.text:00406F0B                 mov     dword_414FFC, eax
.text:00406F10                 pop     esi
.text:00406F11                 retn
.text:00406F11 sub_406EA0      endp
.text:00406F11
.text:00406F11 ; ---------------------------------------------------------------------------
.text:00406F12                 align 10h
.text:00406F20
.text:00406F20 ; =============== S U B R O U T I N E =======================================
.text:00406F20
.text:00406F20
.text:00406F20 sub_406F20      proc near               ; DATA XREF: .text:00402E94↑o
.text:00406F20                                         ; .text:00402FBC↑o
.text:00406F20                 cmp     dword_413150, 0
.text:00406F27                 push    esi
.text:00406F28                 push    edi
.text:00406F29                 mov     edi, offset dword_414F14
.text:00406F2E                 jz      short loc_406F47
.text:00406F30                 and     dword_413150, 0
.text:00406F37                 mov     esi, edi
.text:00406F39                 mov     dword_414F18, esi
.text:00406F3F                 mov     dword_414F14, edi
.text:00406F45                 jmp     short loc_406F4D
.text:00406F47 ; ---------------------------------------------------------------------------
.text:00406F47
.text:00406F47 loc_406F47:                             ; CODE XREF: sub_406F20+E↑j
.text:00406F47                 mov     esi, dword_414F18
.text:00406F4D
.text:00406F4D loc_406F4D:                             ; CODE XREF: sub_406F20+25↑j
.text:00406F4D                 push    38h ; '8'       ; Size
.text:00406F4F                 push    0               ; Val
.text:00406F51                 push    offset unk_41391C ; void *
.text:00406F56                 call    memset
.text:00406F5B                 add     esp, 0Ch
.text:00406F5E                 cmp     [esi], edi
.text:00406F60                 jz      short loc_406F67
.text:00406F62                 push    3
.text:00406F64                 pop     ecx
.text:00406F65                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00406F67 ; ---------------------------------------------------------------------------
.text:00406F67
.text:00406F67 loc_406F67:                             ; CODE XREF: sub_406F20+40↑j
.text:00406F67                 mov     eax, offset dword_4138F8
.text:00406F6C                 mov     dword_4138F8, edi
.text:00406F72                 mov     dword_4138FC, esi
.text:00406F78                 mov     [esi], eax
.text:00406F7A                 mov     dword_414F18, eax
.text:00406F7F                 mov     eax, dword_414FFC
.text:00406F84                 mov     dword_41394C, eax
.text:00406F89                 inc     eax
.text:00406F8A                 pop     edi
.text:00406F8B                 mov     dword_414FFC, eax
.text:00406F90                 mov     dword_413908, 60h ; '`'
.text:00406F9A                 pop     esi
.text:00406F9B                 retn
.text:00406F9B sub_406F20      endp
.text:00406F9B
.text:00406F9B ; ---------------------------------------------------------------------------
.text:00406F9C                 align 10h
.text:00406FA0
.text:00406FA0 ; =============== S U B R O U T I N E =======================================
.text:00406FA0
.text:00406FA0
.text:00406FA0 sub_406FA0      proc near               ; DATA XREF: .text:00402E98↑o
.text:00406FA0                                         ; .text:00402FC0↑o
.text:00406FA0                 cmp     dword_413150, 0
.text:00406FA7                 push    esi
.text:00406FA8                 push    edi
.text:00406FA9                 mov     edi, offset dword_414F14
.text:00406FAE                 jz      short loc_406FC7
.text:00406FB0                 and     dword_413150, 0
.text:00406FB7                 mov     esi, edi
.text:00406FB9                 mov     dword_414F18, esi
.text:00406FBF                 mov     dword_414F14, edi
.text:00406FC5                 jmp     short loc_406FCD
.text:00406FC7 ; ---------------------------------------------------------------------------
.text:00406FC7
.text:00406FC7 loc_406FC7:                             ; CODE XREF: sub_406FA0+E↑j
.text:00406FC7                 mov     esi, dword_414F18
.text:00406FCD
.text:00406FCD loc_406FCD:                             ; CODE XREF: sub_406FA0+25↑j
.text:00406FCD                 push    38h ; '8'       ; Size
.text:00406FCF                 push    0               ; Val
.text:00406FD1                 push    offset unk_41453C ; void *
.text:00406FD6                 call    memset
.text:00406FDB                 add     esp, 0Ch
.text:00406FDE                 cmp     [esi], edi
.text:00406FE0                 jz      short loc_406FE7
.text:00406FE2                 push    3
.text:00406FE4                 pop     ecx
.text:00406FE5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00406FE7 ; ---------------------------------------------------------------------------
.text:00406FE7
.text:00406FE7 loc_406FE7:                             ; CODE XREF: sub_406FA0+40↑j
.text:00406FE7                 mov     eax, offset dword_414518
.text:00406FEC                 mov     dword_414518, edi
.text:00406FF2                 mov     dword_41451C, esi
.text:00406FF8                 mov     [esi], eax
.text:00406FFA                 mov     dword_414F18, eax
.text:00406FFF                 mov     eax, dword_414FFC
.text:00407004                 mov     dword_41456C, eax
.text:00407009                 inc     eax
.text:0040700A                 pop     edi
.text:0040700B                 mov     dword_414FFC, eax
.text:00407010                 mov     dword_414528, 60h ; '`'
.text:0040701A                 pop     esi
.text:0040701B                 retn
.text:0040701B sub_406FA0      endp
.text:0040701B
.text:0040701B ; ---------------------------------------------------------------------------
.text:0040701C                 align 10h
.text:00407020
.text:00407020 ; =============== S U B R O U T I N E =======================================
.text:00407020
.text:00407020
.text:00407020 sub_407020      proc near               ; DATA XREF: .text:00402E9C↑o
.text:00407020                                         ; .text:00402FC4↑o
.text:00407020                 cmp     dword_413150, 0
.text:00407027                 push    esi
.text:00407028                 push    edi
.text:00407029                 mov     edi, offset dword_414F14
.text:0040702E                 jz      short loc_407047
.text:00407030                 and     dword_413150, 0
.text:00407037                 mov     esi, edi
.text:00407039                 mov     dword_414F18, esi
.text:0040703F                 mov     dword_414F14, edi
.text:00407045                 jmp     short loc_40704D
.text:00407047 ; ---------------------------------------------------------------------------
.text:00407047
.text:00407047 loc_407047:                             ; CODE XREF: sub_407020+E↑j
.text:00407047                 mov     esi, dword_414F18
.text:0040704D
.text:0040704D loc_40704D:                             ; CODE XREF: sub_407020+25↑j
.text:0040704D                 push    38h ; '8'       ; Size
.text:0040704F                 push    0               ; Val
.text:00407051                 push    offset unk_413C8C ; void *
.text:00407056                 call    memset
.text:0040705B                 add     esp, 0Ch
.text:0040705E                 cmp     [esi], edi
.text:00407060                 jz      short loc_407067
.text:00407062                 push    3
.text:00407064                 pop     ecx
.text:00407065                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00407067 ; ---------------------------------------------------------------------------
.text:00407067
.text:00407067 loc_407067:                             ; CODE XREF: sub_407020+40↑j
.text:00407067                 mov     eax, offset dword_413C68
.text:0040706C                 mov     dword_413C68, edi
.text:00407072                 mov     dword_413C6C, esi
.text:00407078                 mov     [esi], eax
.text:0040707A                 mov     dword_414F18, eax
.text:0040707F                 mov     eax, dword_414FFC
.text:00407084                 mov     dword_413CBC, eax
.text:00407089                 inc     eax
.text:0040708A                 pop     edi
.text:0040708B                 mov     dword_414FFC, eax
.text:00407090                 mov     dword_413C78, 60h ; '`'
.text:0040709A                 pop     esi
.text:0040709B                 retn
.text:0040709B sub_407020      endp
.text:0040709B
.text:0040709B ; ---------------------------------------------------------------------------
.text:0040709C                 align 10h
.text:004070A0
.text:004070A0 ; =============== S U B R O U T I N E =======================================
.text:004070A0
.text:004070A0
.text:004070A0 sub_4070A0      proc near               ; DATA XREF: .text:00402EA0↑o
.text:004070A0                                         ; .text:00402FC8↑o
.text:004070A0                 cmp     dword_413150, 0
.text:004070A7                 push    esi
.text:004070A8                 push    edi
.text:004070A9                 mov     edi, offset dword_414F14
.text:004070AE                 jz      short loc_4070C7
.text:004070B0                 and     dword_413150, 0
.text:004070B7                 mov     esi, edi
.text:004070B9                 mov     dword_414F18, esi
.text:004070BF                 mov     dword_414F14, edi
.text:004070C5                 jmp     short loc_4070CD
.text:004070C7 ; ---------------------------------------------------------------------------
.text:004070C7
.text:004070C7 loc_4070C7:                             ; CODE XREF: sub_4070A0+E↑j
.text:004070C7                 mov     esi, dword_414F18
.text:004070CD
.text:004070CD loc_4070CD:                             ; CODE XREF: sub_4070A0+25↑j
.text:004070CD                 push    38h ; '8'       ; Size
.text:004070CF                 push    0               ; Val
.text:004070D1                 push    offset unk_41329C ; void *
.text:004070D6                 call    memset
.text:004070DB                 add     esp, 0Ch
.text:004070DE                 cmp     [esi], edi
.text:004070E0                 jz      short loc_4070E7
.text:004070E2                 push    3
.text:004070E4                 pop     ecx
.text:004070E5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:004070E7 ; ---------------------------------------------------------------------------
.text:004070E7
.text:004070E7 loc_4070E7:                             ; CODE XREF: sub_4070A0+40↑j
.text:004070E7                 mov     eax, offset dword_413278
.text:004070EC                 mov     dword_413278, edi
.text:004070F2                 mov     dword_41327C, esi
.text:004070F8                 mov     [esi], eax
.text:004070FA                 mov     dword_414F18, eax
.text:004070FF                 mov     eax, dword_414FFC
.text:00407104                 mov     dword_4132CC, eax
.text:00407109                 inc     eax
.text:0040710A                 pop     edi
.text:0040710B                 mov     dword_414FFC, eax
.text:00407110                 pop     esi
.text:00407111                 retn
.text:00407111 sub_4070A0      endp
.text:00407111
.text:00407111 ; ---------------------------------------------------------------------------
.text:00407112                 align 10h
.text:00407120
.text:00407120 ; =============== S U B R O U T I N E =======================================
.text:00407120
.text:00407120
.text:00407120 sub_407120      proc near               ; DATA XREF: .text:00402EA4↑o
.text:00407120                                         ; .text:00402FCC↑o
.text:00407120                 cmp     dword_413150, 0
.text:00407127                 push    esi
.text:00407128                 push    edi
.text:00407129                 mov     edi, offset dword_414F14
.text:0040712E                 jz      short loc_407147
.text:00407130                 and     dword_413150, 0
.text:00407137                 mov     esi, edi
.text:00407139                 mov     dword_414F18, esi
.text:0040713F                 mov     dword_414F14, edi
.text:00407145                 jmp     short loc_40714D
.text:00407147 ; ---------------------------------------------------------------------------
.text:00407147
.text:00407147 loc_407147:                             ; CODE XREF: sub_407120+E↑j
.text:00407147                 mov     esi, dword_414F18
.text:0040714D
.text:0040714D loc_40714D:                             ; CODE XREF: sub_407120+25↑j
.text:0040714D                 push    38h ; '8'       ; Size
.text:0040714F                 push    0               ; Val
.text:00407151                 push    offset unk_41323C ; void *
.text:00407156                 call    memset
.text:0040715B                 add     esp, 0Ch
.text:0040715E                 cmp     [esi], edi
.text:00407160                 jz      short loc_407167
.text:00407162                 push    3
.text:00407164                 pop     ecx
.text:00407165                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00407167 ; ---------------------------------------------------------------------------
.text:00407167
.text:00407167 loc_407167:                             ; CODE XREF: sub_407120+40↑j
.text:00407167                 mov     eax, offset dword_413218
.text:0040716C                 mov     dword_413218, edi
.text:00407172                 mov     dword_41321C, esi
.text:00407178                 mov     [esi], eax
.text:0040717A                 mov     dword_414F18, eax
.text:0040717F                 mov     eax, dword_414FFC
.text:00407184                 mov     dword_41326C, eax
.text:00407189                 inc     eax
.text:0040718A                 pop     edi
.text:0040718B                 mov     dword_414FFC, eax
.text:00407190                 pop     esi
.text:00407191                 retn
.text:00407191 sub_407120      endp
.text:00407191
.text:00407191 ; ---------------------------------------------------------------------------
.text:00407192                 align 10h
.text:004071A0
.text:004071A0 ; =============== S U B R O U T I N E =======================================
.text:004071A0
.text:004071A0
.text:004071A0 sub_4071A0      proc near               ; DATA XREF: .text:00402EA8↑o
.text:004071A0                                         ; .text:00402FD0↑o
.text:004071A0                 cmp     dword_413150, 0
.text:004071A7                 push    esi
.text:004071A8                 push    edi
.text:004071A9                 mov     edi, offset dword_414F14
.text:004071AE                 jz      short loc_4071C7
.text:004071B0                 and     dword_413150, 0
.text:004071B7                 mov     esi, edi
.text:004071B9                 mov     dword_414F18, esi
.text:004071BF                 mov     dword_414F14, edi
.text:004071C5                 jmp     short loc_4071CD
.text:004071C7 ; ---------------------------------------------------------------------------
.text:004071C7
.text:004071C7 loc_4071C7:                             ; CODE XREF: sub_4071A0+E↑j
.text:004071C7                 mov     esi, dword_414F18
.text:004071CD
.text:004071CD loc_4071CD:                             ; CODE XREF: sub_4071A0+25↑j
.text:004071CD                 push    38h ; '8'       ; Size
.text:004071CF                 push    0               ; Val
.text:004071D1                 push    offset unk_41422C ; void *
.text:004071D6                 call    memset
.text:004071DB                 add     esp, 0Ch
.text:004071DE                 cmp     [esi], edi
.text:004071E0                 jz      short loc_4071E7
.text:004071E2                 push    3
.text:004071E4                 pop     ecx
.text:004071E5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:004071E7 ; ---------------------------------------------------------------------------
.text:004071E7
.text:004071E7 loc_4071E7:                             ; CODE XREF: sub_4071A0+40↑j
.text:004071E7                 mov     eax, offset dword_414208
.text:004071EC                 mov     dword_414208, edi
.text:004071F2                 mov     dword_41420C, esi
.text:004071F8                 mov     [esi], eax
.text:004071FA                 mov     dword_414F18, eax
.text:004071FF                 mov     eax, dword_414FFC
.text:00407204                 mov     dword_41425C, eax
.text:00407209                 inc     eax
.text:0040720A                 pop     edi
.text:0040720B                 mov     dword_414FFC, eax
.text:00407210                 pop     esi
.text:00407211                 retn
.text:00407211 sub_4071A0      endp
.text:00407211
.text:00407211 ; ---------------------------------------------------------------------------
.text:00407212                 align 10h
.text:00407220
.text:00407220 ; =============== S U B R O U T I N E =======================================
.text:00407220
.text:00407220
.text:00407220 sub_407220      proc near               ; DATA XREF: .text:00402EAC↑o
.text:00407220                                         ; .text:00402FD4↑o
.text:00407220                 cmp     dword_413150, 0
.text:00407227                 push    esi
.text:00407228                 push    edi
.text:00407229                 mov     edi, offset dword_414F14
.text:0040722E                 jz      short loc_407247
.text:00407230                 and     dword_413150, 0
.text:00407237                 mov     esi, edi
.text:00407239                 mov     dword_414F18, esi
.text:0040723F                 mov     dword_414F14, edi
.text:00407245                 jmp     short loc_40724D
.text:00407247 ; ---------------------------------------------------------------------------
.text:00407247
.text:00407247 loc_407247:                             ; CODE XREF: sub_407220+E↑j
.text:00407247                 mov     esi, dword_414F18
.text:0040724D
.text:0040724D loc_40724D:                             ; CODE XREF: sub_407220+25↑j
.text:0040724D                 push    38h ; '8'       ; Size
.text:0040724F                 push    0               ; Val
.text:00407251                 push    offset unk_4148BC ; void *
.text:00407256                 call    memset
.text:0040725B                 add     esp, 0Ch
.text:0040725E                 cmp     [esi], edi
.text:00407260                 jz      short loc_407267
.text:00407262                 push    3
.text:00407264                 pop     ecx
.text:00407265                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00407267 ; ---------------------------------------------------------------------------
.text:00407267
.text:00407267 loc_407267:                             ; CODE XREF: sub_407220+40↑j
.text:00407267                 mov     eax, offset dword_414898
.text:0040726C                 mov     dword_414898, edi
.text:00407272                 mov     dword_41489C, esi
.text:00407278                 mov     [esi], eax
.text:0040727A                 mov     dword_414F18, eax
.text:0040727F                 mov     eax, dword_414FFC
.text:00407284                 mov     dword_4148EC, eax
.text:00407289                 inc     eax
.text:0040728A                 pop     edi
.text:0040728B                 mov     dword_414FFC, eax
.text:00407290                 mov     dword_4148A8, 60h ; '`'
.text:0040729A                 pop     esi
.text:0040729B                 retn
.text:0040729B sub_407220      endp
.text:0040729B
.text:0040729B ; ---------------------------------------------------------------------------
.text:0040729C                 align 10h
.text:004072A0
.text:004072A0 ; =============== S U B R O U T I N E =======================================
.text:004072A0
.text:004072A0
.text:004072A0 sub_4072A0      proc near               ; DATA XREF: .text:00402EB0↑o
.text:004072A0                                         ; .text:00402FD8↑o
.text:004072A0                 cmp     dword_413150, 0
.text:004072A7                 push    esi
.text:004072A8                 push    edi
.text:004072A9                 mov     edi, offset dword_414F14
.text:004072AE                 jz      short loc_4072C7
.text:004072B0                 and     dword_413150, 0
.text:004072B7                 mov     esi, edi
.text:004072B9                 mov     dword_414F18, esi
.text:004072BF                 mov     dword_414F14, edi
.text:004072C5                 jmp     short loc_4072CD
.text:004072C7 ; ---------------------------------------------------------------------------
.text:004072C7
.text:004072C7 loc_4072C7:                             ; CODE XREF: sub_4072A0+E↑j
.text:004072C7                 mov     esi, dword_414F18
.text:004072CD
.text:004072CD loc_4072CD:                             ; CODE XREF: sub_4072A0+25↑j
.text:004072CD                 push    38h ; '8'       ; Size
.text:004072CF                 push    0               ; Val
.text:004072D1                 push    offset unk_4138BC ; void *
.text:004072D6                 call    memset
.text:004072DB                 add     esp, 0Ch
.text:004072DE                 cmp     [esi], edi
.text:004072E0                 jz      short loc_4072E7
.text:004072E2                 push    3
.text:004072E4                 pop     ecx
.text:004072E5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:004072E7 ; ---------------------------------------------------------------------------
.text:004072E7
.text:004072E7 loc_4072E7:                             ; CODE XREF: sub_4072A0+40↑j
.text:004072E7                 mov     eax, offset dword_413898
.text:004072EC                 mov     dword_413898, edi
.text:004072F2                 mov     dword_41389C, esi
.text:004072F8                 mov     [esi], eax
.text:004072FA                 mov     dword_414F18, eax
.text:004072FF                 mov     eax, dword_414FFC
.text:00407304                 mov     dword_4138EC, eax
.text:00407309                 inc     eax
.text:0040730A                 pop     edi
.text:0040730B                 mov     dword_414FFC, eax
.text:00407310                 mov     dword_4138A8, 60h ; '`'
.text:0040731A                 pop     esi
.text:0040731B                 retn
.text:0040731B sub_4072A0      endp
.text:0040731B
.text:0040731B ; ---------------------------------------------------------------------------
.text:0040731C                 align 10h
.text:00407320
.text:00407320 ; =============== S U B R O U T I N E =======================================
.text:00407320
.text:00407320
.text:00407320 sub_407320      proc near               ; DATA XREF: .text:00402EB4↑o
.text:00407320                                         ; .text:00402FDC↑o
.text:00407320                 cmp     dword_413150, 0
.text:00407327                 push    esi
.text:00407328                 push    edi
.text:00407329                 mov     edi, offset dword_414F14
.text:0040732E                 jz      short loc_407347
.text:00407330                 and     dword_413150, 0
.text:00407337                 mov     esi, edi
.text:00407339                 mov     dword_414F18, esi
.text:0040733F                 mov     dword_414F14, edi
.text:00407345                 jmp     short loc_40734D
.text:00407347 ; ---------------------------------------------------------------------------
.text:00407347
.text:00407347 loc_407347:                             ; CODE XREF: sub_407320+E↑j
.text:00407347                 mov     esi, dword_414F18
.text:0040734D
.text:0040734D loc_40734D:                             ; CODE XREF: sub_407320+25↑j
.text:0040734D                 push    38h ; '8'       ; Size
.text:0040734F                 push    0               ; Val
.text:00407351                 push    offset unk_4135AC ; void *
.text:00407356                 call    memset
.text:0040735B                 add     esp, 0Ch
.text:0040735E                 cmp     [esi], edi
.text:00407360                 jz      short loc_407367
.text:00407362                 push    3
.text:00407364                 pop     ecx
.text:00407365                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00407367 ; ---------------------------------------------------------------------------
.text:00407367
.text:00407367 loc_407367:                             ; CODE XREF: sub_407320+40↑j
.text:00407367                 mov     eax, offset dword_413588
.text:0040736C                 mov     dword_413588, edi
.text:00407372                 mov     dword_41358C, esi
.text:00407378                 mov     [esi], eax
.text:0040737A                 mov     dword_414F18, eax
.text:0040737F                 mov     eax, dword_414FFC
.text:00407384                 mov     dword_4135DC, eax
.text:00407389                 inc     eax
.text:0040738A                 pop     edi
.text:0040738B                 mov     dword_414FFC, eax
.text:00407390                 mov     dword_413598, 60h ; '`'
.text:0040739A                 pop     esi
.text:0040739B                 retn
.text:0040739B sub_407320      endp
.text:0040739B
.text:0040739B ; ---------------------------------------------------------------------------
.text:0040739C                 align 10h
.text:004073A0
.text:004073A0 ; =============== S U B R O U T I N E =======================================
.text:004073A0
.text:004073A0
.text:004073A0 sub_4073A0      proc near               ; DATA XREF: .text:00402EB8↑o
.text:004073A0                                         ; .text:00402FE0↑o
.text:004073A0                 cmp     dword_413150, 0
.text:004073A7                 push    esi
.text:004073A8                 push    edi
.text:004073A9                 mov     edi, offset dword_414F14
.text:004073AE                 jz      short loc_4073C7
.text:004073B0                 and     dword_413150, 0
.text:004073B7                 mov     esi, edi
.text:004073B9                 mov     dword_414F18, esi
.text:004073BF                 mov     dword_414F14, edi
.text:004073C5                 jmp     short loc_4073CD
.text:004073C7 ; ---------------------------------------------------------------------------
.text:004073C7
.text:004073C7 loc_4073C7:                             ; CODE XREF: sub_4073A0+E↑j
.text:004073C7                 mov     esi, dword_414F18
.text:004073CD
.text:004073CD loc_4073CD:                             ; CODE XREF: sub_4073A0+25↑j
.text:004073CD                 push    38h ; '8'       ; Size
.text:004073CF                 push    0               ; Val
.text:004073D1                 push    offset unk_4149DC ; void *
.text:004073D6                 call    memset
.text:004073DB                 add     esp, 0Ch
.text:004073DE                 cmp     [esi], edi
.text:004073E0                 jz      short loc_4073E7
.text:004073E2                 push    3
.text:004073E4                 pop     ecx
.text:004073E5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:004073E7 ; ---------------------------------------------------------------------------
.text:004073E7
.text:004073E7 loc_4073E7:                             ; CODE XREF: sub_4073A0+40↑j
.text:004073E7                 mov     eax, offset dword_4149B8
.text:004073EC                 mov     dword_4149B8, edi
.text:004073F2                 mov     dword_4149BC, esi
.text:004073F8                 mov     [esi], eax
.text:004073FA                 mov     dword_414F18, eax
.text:004073FF                 mov     eax, dword_414FFC
.text:00407404                 mov     dword_414A0C, eax
.text:00407409                 inc     eax
.text:0040740A                 pop     edi
.text:0040740B                 mov     dword_414FFC, eax
.text:00407410                 mov     dword_4149C8, 60h ; '`'
.text:0040741A                 pop     esi
.text:0040741B                 retn
.text:0040741B sub_4073A0      endp
.text:0040741B
.text:0040741B ; ---------------------------------------------------------------------------
.text:0040741C                 align 10h
.text:00407420
.text:00407420 ; =============== S U B R O U T I N E =======================================
.text:00407420
.text:00407420
.text:00407420 sub_407420      proc near               ; DATA XREF: .text:00402EBC↑o
.text:00407420                                         ; .text:00402FE4↑o
.text:00407420                 cmp     dword_413150, 0
.text:00407427                 push    esi
.text:00407428                 push    edi
.text:00407429                 mov     edi, offset dword_414F14
.text:0040742E                 jz      short loc_407447
.text:00407430                 and     dword_413150, 0
.text:00407437                 mov     esi, edi
.text:00407439                 mov     dword_414F18, esi
.text:0040743F                 mov     dword_414F14, edi
.text:00407445                 jmp     short loc_40744D
.text:00407447 ; ---------------------------------------------------------------------------
.text:00407447
.text:00407447 loc_407447:                             ; CODE XREF: sub_407420+E↑j
.text:00407447                 mov     esi, dword_414F18
.text:0040744D
.text:0040744D loc_40744D:                             ; CODE XREF: sub_407420+25↑j
.text:0040744D                 push    38h ; '8'       ; Size
.text:0040744F                 push    0               ; Val
.text:00407451                 push    offset unk_41397C ; void *
.text:00407456                 call    memset
.text:0040745B                 add     esp, 0Ch
.text:0040745E                 cmp     [esi], edi
.text:00407460                 jz      short loc_407467
.text:00407462                 push    3
.text:00407464                 pop     ecx
.text:00407465                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00407467 ; ---------------------------------------------------------------------------
.text:00407467
.text:00407467 loc_407467:                             ; CODE XREF: sub_407420+40↑j
.text:00407467                 mov     eax, offset dword_413958
.text:0040746C                 mov     dword_413958, edi
.text:00407472                 mov     dword_41395C, esi
.text:00407478                 mov     [esi], eax
.text:0040747A                 mov     dword_414F18, eax
.text:0040747F                 mov     eax, dword_414FFC
.text:00407484                 mov     dword_4139AC, eax
.text:00407489                 inc     eax
.text:0040748A                 pop     edi
.text:0040748B                 mov     dword_414FFC, eax
.text:00407490                 pop     esi
.text:00407491                 retn
.text:00407491 sub_407420      endp
.text:00407491
.text:00407491 ; ---------------------------------------------------------------------------
.text:00407492                 align 10h
.text:004074A0
.text:004074A0 ; =============== S U B R O U T I N E =======================================
.text:004074A0
.text:004074A0
.text:004074A0 sub_4074A0      proc near               ; DATA XREF: .text:00402EC0↑o
.text:004074A0                                         ; .text:00402FE8↑o
.text:004074A0                 cmp     dword_413150, 0
.text:004074A7                 push    esi
.text:004074A8                 push    edi
.text:004074A9                 mov     edi, offset dword_414F14
.text:004074AE                 jz      short loc_4074C7
.text:004074B0                 and     dword_413150, 0
.text:004074B7                 mov     esi, edi
.text:004074B9                 mov     dword_414F18, esi
.text:004074BF                 mov     dword_414F14, edi
.text:004074C5                 jmp     short loc_4074CD
.text:004074C7 ; ---------------------------------------------------------------------------
.text:004074C7
.text:004074C7 loc_4074C7:                             ; CODE XREF: sub_4074A0+E↑j
.text:004074C7                 mov     esi, dword_414F18
.text:004074CD
.text:004074CD loc_4074CD:                             ; CODE XREF: sub_4074A0+25↑j
.text:004074CD                 push    38h ; '8'       ; Size
.text:004074CF                 push    0               ; Val
.text:004074D1                 push    offset unk_4136CC ; void *
.text:004074D6                 call    memset
.text:004074DB                 add     esp, 0Ch
.text:004074DE                 cmp     [esi], edi
.text:004074E0                 jz      short loc_4074E7
.text:004074E2                 push    3
.text:004074E4                 pop     ecx
.text:004074E5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:004074E7 ; ---------------------------------------------------------------------------
.text:004074E7
.text:004074E7 loc_4074E7:                             ; CODE XREF: sub_4074A0+40↑j
.text:004074E7                 mov     eax, offset dword_4136A8
.text:004074EC                 mov     dword_4136A8, edi
.text:004074F2                 mov     dword_4136AC, esi
.text:004074F8                 mov     [esi], eax
.text:004074FA                 mov     dword_414F18, eax
.text:004074FF                 mov     eax, dword_414FFC
.text:00407504                 mov     dword_4136FC, eax
.text:00407509                 inc     eax
.text:0040750A                 pop     edi
.text:0040750B                 mov     dword_414FFC, eax
.text:00407510                 mov     dword_4136B8, 60h ; '`'
.text:0040751A                 pop     esi
.text:0040751B                 retn
.text:0040751B sub_4074A0      endp
.text:0040751B
.text:0040751B ; ---------------------------------------------------------------------------
.text:0040751C                 align 10h
.text:00407520
.text:00407520 ; =============== S U B R O U T I N E =======================================
.text:00407520
.text:00407520
.text:00407520 sub_407520      proc near               ; DATA XREF: .text:00402EC4↑o
.text:00407520                                         ; .text:00402FEC↑o
.text:00407520                 cmp     dword_413150, 0
.text:00407527                 push    esi
.text:00407528                 push    edi
.text:00407529                 mov     edi, offset dword_414F14
.text:0040752E                 jz      short loc_407547
.text:00407530                 and     dword_413150, 0
.text:00407537                 mov     esi, edi
.text:00407539                 mov     dword_414F18, esi
.text:0040753F                 mov     dword_414F14, edi
.text:00407545                 jmp     short loc_40754D
.text:00407547 ; ---------------------------------------------------------------------------
.text:00407547
.text:00407547 loc_407547:                             ; CODE XREF: sub_407520+E↑j
.text:00407547                 mov     esi, dword_414F18
.text:0040754D
.text:0040754D loc_40754D:                             ; CODE XREF: sub_407520+25↑j
.text:0040754D                 push    38h ; '8'       ; Size
.text:0040754F                 push    0               ; Val
.text:00407551                 push    offset unk_41366C ; void *
.text:00407556                 call    memset
.text:0040755B                 add     esp, 0Ch
.text:0040755E                 cmp     [esi], edi
.text:00407560                 jz      short loc_407567
.text:00407562                 push    3
.text:00407564                 pop     ecx
.text:00407565                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00407567 ; ---------------------------------------------------------------------------
.text:00407567
.text:00407567 loc_407567:                             ; CODE XREF: sub_407520+40↑j
.text:00407567                 mov     eax, offset dword_413648
.text:0040756C                 mov     dword_413648, edi
.text:00407572                 mov     dword_41364C, esi
.text:00407578                 mov     [esi], eax
.text:0040757A                 mov     dword_414F18, eax
.text:0040757F                 mov     eax, dword_414FFC
.text:00407584                 mov     dword_41369C, eax
.text:00407589                 inc     eax
.text:0040758A                 pop     edi
.text:0040758B                 mov     dword_414FFC, eax
.text:00407590                 mov     dword_413658, 60h ; '`'
.text:0040759A                 pop     esi
.text:0040759B                 retn
.text:0040759B sub_407520      endp
.text:0040759B
.text:0040759B ; ---------------------------------------------------------------------------
.text:0040759C                 align 10h
.text:004075A0
.text:004075A0 ; =============== S U B R O U T I N E =======================================
.text:004075A0
.text:004075A0
.text:004075A0 sub_4075A0      proc near               ; DATA XREF: .text:00402EC8↑o
.text:004075A0                                         ; .text:00402FF0↑o
.text:004075A0                 cmp     dword_413150, 0
.text:004075A7                 push    esi
.text:004075A8                 push    edi
.text:004075A9                 mov     edi, offset dword_414F14
.text:004075AE                 jz      short loc_4075C7
.text:004075B0                 and     dword_413150, 0
.text:004075B7                 mov     esi, edi
.text:004075B9                 mov     dword_414F18, esi
.text:004075BF                 mov     dword_414F14, edi
.text:004075C5                 jmp     short loc_4075CD
.text:004075C7 ; ---------------------------------------------------------------------------
.text:004075C7
.text:004075C7 loc_4075C7:                             ; CODE XREF: sub_4075A0+E↑j
.text:004075C7                 mov     esi, dword_414F18
.text:004075CD
.text:004075CD loc_4075CD:                             ; CODE XREF: sub_4075A0+25↑j
.text:004075CD                 push    38h ; '8'       ; Size
.text:004075CF                 push    0               ; Val
.text:004075D1                 push    offset unk_414AFC ; void *
.text:004075D6                 call    memset
.text:004075DB                 add     esp, 0Ch
.text:004075DE                 cmp     [esi], edi
.text:004075E0                 jz      short loc_4075E7
.text:004075E2                 push    3
.text:004075E4                 pop     ecx
.text:004075E5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:004075E7 ; ---------------------------------------------------------------------------
.text:004075E7
.text:004075E7 loc_4075E7:                             ; CODE XREF: sub_4075A0+40↑j
.text:004075E7                 mov     eax, offset dword_414AD8
.text:004075EC                 mov     dword_414AD8, edi
.text:004075F2                 mov     dword_414ADC, esi
.text:004075F8                 mov     [esi], eax
.text:004075FA                 mov     dword_414F18, eax
.text:004075FF                 mov     eax, dword_414FFC
.text:00407604                 mov     dword_414B2C, eax
.text:00407609                 inc     eax
.text:0040760A                 pop     edi
.text:0040760B                 mov     dword_414FFC, eax
.text:00407610                 mov     dword_414AE8, 60h ; '`'
.text:0040761A                 pop     esi
.text:0040761B                 retn
.text:0040761B sub_4075A0      endp
.text:0040761B
.text:0040761B ; ---------------------------------------------------------------------------
.text:0040761C                 align 10h
.text:00407620
.text:00407620 ; =============== S U B R O U T I N E =======================================
.text:00407620
.text:00407620
.text:00407620 sub_407620      proc near               ; DATA XREF: .text:00402ECC↑o
.text:00407620                                         ; .text:00402FF4↑o
.text:00407620                 cmp     dword_413150, 0
.text:00407627                 push    esi
.text:00407628                 push    edi
.text:00407629                 mov     edi, offset dword_414F14
.text:0040762E                 jz      short loc_407647
.text:00407630                 and     dword_413150, 0
.text:00407637                 mov     esi, edi
.text:00407639                 mov     dword_414F18, esi
.text:0040763F                 mov     dword_414F14, edi
.text:00407645                 jmp     short loc_40764D
.text:00407647 ; ---------------------------------------------------------------------------
.text:00407647
.text:00407647 loc_407647:                             ; CODE XREF: sub_407620+E↑j
.text:00407647                 mov     esi, dword_414F18
.text:0040764D
.text:0040764D loc_40764D:                             ; CODE XREF: sub_407620+25↑j
.text:0040764D                 push    38h ; '8'       ; Size
.text:0040764F                 push    0               ; Val
.text:00407651                 push    offset unk_413D4C ; void *
.text:00407656                 call    memset
.text:0040765B                 add     esp, 0Ch
.text:0040765E                 cmp     [esi], edi
.text:00407660                 jz      short loc_407667
.text:00407662                 push    3
.text:00407664                 pop     ecx
.text:00407665                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00407667 ; ---------------------------------------------------------------------------
.text:00407667
.text:00407667 loc_407667:                             ; CODE XREF: sub_407620+40↑j
.text:00407667                 mov     eax, offset dword_413D28
.text:0040766C                 mov     dword_413D28, edi
.text:00407672                 mov     dword_413D2C, esi
.text:00407678                 mov     [esi], eax
.text:0040767A                 mov     dword_414F18, eax
.text:0040767F                 mov     eax, dword_414FFC
.text:00407684                 mov     dword_413D7C, eax
.text:00407689                 inc     eax
.text:0040768A                 pop     edi
.text:0040768B                 mov     dword_414FFC, eax
.text:00407690                 mov     dword_413D38, 60h ; '`'
.text:0040769A                 pop     esi
.text:0040769B                 retn
.text:0040769B sub_407620      endp
.text:0040769B
.text:0040769B ; ---------------------------------------------------------------------------
.text:0040769C                 align 10h
.text:004076A0
.text:004076A0 ; =============== S U B R O U T I N E =======================================
.text:004076A0
.text:004076A0
.text:004076A0 sub_4076A0      proc near               ; DATA XREF: .text:00402ED0↑o
.text:004076A0                                         ; .text:00402FF8↑o
.text:004076A0                 cmp     dword_413150, 0
.text:004076A7                 push    esi
.text:004076A8                 push    edi
.text:004076A9                 mov     edi, offset dword_414F14
.text:004076AE                 jz      short loc_4076C7
.text:004076B0                 and     dword_413150, 0
.text:004076B7                 mov     esi, edi
.text:004076B9                 mov     dword_414F18, esi
.text:004076BF                 mov     dword_414F14, edi
.text:004076C5                 jmp     short loc_4076CD
.text:004076C7 ; ---------------------------------------------------------------------------
.text:004076C7
.text:004076C7 loc_4076C7:                             ; CODE XREF: sub_4076A0+E↑j
.text:004076C7                 mov     esi, dword_414F18
.text:004076CD
.text:004076CD loc_4076CD:                             ; CODE XREF: sub_4076A0+25↑j
.text:004076CD                 push    38h ; '8'       ; Size
.text:004076CF                 push    0               ; Val
.text:004076D1                 push    offset unk_413E0C ; void *
.text:004076D6                 call    memset
.text:004076DB                 add     esp, 0Ch
.text:004076DE                 cmp     [esi], edi
.text:004076E0                 jz      short loc_4076E7
.text:004076E2                 push    3
.text:004076E4                 pop     ecx
.text:004076E5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:004076E7 ; ---------------------------------------------------------------------------
.text:004076E7
.text:004076E7 loc_4076E7:                             ; CODE XREF: sub_4076A0+40↑j
.text:004076E7                 mov     eax, offset dword_413DE8
.text:004076EC                 mov     dword_413DE8, edi
.text:004076F2                 mov     dword_413DEC, esi
.text:004076F8                 mov     [esi], eax
.text:004076FA                 mov     dword_414F18, eax
.text:004076FF                 mov     eax, dword_414FFC
.text:00407704                 mov     dword_413E3C, eax
.text:00407709                 inc     eax
.text:0040770A                 pop     edi
.text:0040770B                 mov     dword_414FFC, eax
.text:00407710                 mov     dword_413DF8, 60h ; '`'
.text:0040771A                 pop     esi
.text:0040771B                 retn
.text:0040771B sub_4076A0      endp
.text:0040771B
.text:0040771B ; ---------------------------------------------------------------------------
.text:0040771C                 align 10h
.text:00407720
.text:00407720 ; =============== S U B R O U T I N E =======================================
.text:00407720
.text:00407720
.text:00407720 sub_407720      proc near               ; DATA XREF: .text:00402ED4↑o
.text:00407720                                         ; .text:00402FFC↑o
.text:00407720                 cmp     dword_413150, 0
.text:00407727                 push    esi
.text:00407728                 push    edi
.text:00407729                 mov     edi, offset dword_414F14
.text:0040772E                 jz      short loc_407747
.text:00407730                 and     dword_413150, 0
.text:00407737                 mov     esi, edi
.text:00407739                 mov     dword_414F18, esi
.text:0040773F                 mov     dword_414F14, edi
.text:00407745                 jmp     short loc_40774D
.text:00407747 ; ---------------------------------------------------------------------------
.text:00407747
.text:00407747 loc_407747:                             ; CODE XREF: sub_407720+E↑j
.text:00407747                 mov     esi, dword_414F18
.text:0040774D
.text:0040774D loc_40774D:                             ; CODE XREF: sub_407720+25↑j
.text:0040774D                 push    38h ; '8'       ; Size
.text:0040774F                 push    0               ; Val
.text:00407751                 push    offset unk_4144DC ; void *
.text:00407756                 call    memset
.text:0040775B                 add     esp, 0Ch
.text:0040775E                 cmp     [esi], edi
.text:00407760                 jz      short loc_407767
.text:00407762                 push    3
.text:00407764                 pop     ecx
.text:00407765                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00407767 ; ---------------------------------------------------------------------------
.text:00407767
.text:00407767 loc_407767:                             ; CODE XREF: sub_407720+40↑j
.text:00407767                 mov     eax, offset dword_4144B8
.text:0040776C                 mov     dword_4144B8, edi
.text:00407772                 mov     dword_4144BC, esi
.text:00407778                 mov     [esi], eax
.text:0040777A                 mov     dword_414F18, eax
.text:0040777F                 mov     eax, dword_414FFC
.text:00407784                 mov     dword_41450C, eax
.text:00407789                 inc     eax
.text:0040778A                 pop     edi
.text:0040778B                 mov     dword_414FFC, eax
.text:00407790                 mov     dword_4144C8, 60h ; '`'
.text:0040779A                 pop     esi
.text:0040779B                 retn
.text:0040779B sub_407720      endp
.text:0040779B
.text:0040779B ; ---------------------------------------------------------------------------
.text:0040779C                 align 10h
.text:004077A0
.text:004077A0 ; =============== S U B R O U T I N E =======================================
.text:004077A0
.text:004077A0
.text:004077A0 sub_4077A0      proc near               ; DATA XREF: .text:00402ED8↑o
.text:004077A0                                         ; .text:00403000↑o
.text:004077A0                 cmp     dword_413150, 0
.text:004077A7                 push    esi
.text:004077A8                 push    edi
.text:004077A9                 mov     edi, offset dword_414F14
.text:004077AE                 jz      short loc_4077C7
.text:004077B0                 and     dword_413150, 0
.text:004077B7                 mov     esi, edi
.text:004077B9                 mov     dword_414F18, esi
.text:004077BF                 mov     dword_414F14, edi
.text:004077C5                 jmp     short loc_4077CD
.text:004077C7 ; ---------------------------------------------------------------------------
.text:004077C7
.text:004077C7 loc_4077C7:                             ; CODE XREF: sub_4077A0+E↑j
.text:004077C7                 mov     esi, dword_414F18
.text:004077CD
.text:004077CD loc_4077CD:                             ; CODE XREF: sub_4077A0+25↑j
.text:004077CD                 push    38h ; '8'       ; Size
.text:004077CF                 push    0               ; Val
.text:004077D1                 push    offset unk_4141CC ; void *
.text:004077D6                 call    memset
.text:004077DB                 add     esp, 0Ch
.text:004077DE                 cmp     [esi], edi
.text:004077E0                 jz      short loc_4077E7
.text:004077E2                 push    3
.text:004077E4                 pop     ecx
.text:004077E5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:004077E7 ; ---------------------------------------------------------------------------
.text:004077E7
.text:004077E7 loc_4077E7:                             ; CODE XREF: sub_4077A0+40↑j
.text:004077E7                 mov     eax, offset dword_4141A8
.text:004077EC                 mov     dword_4141A8, edi
.text:004077F2                 mov     dword_4141AC, esi
.text:004077F8                 mov     [esi], eax
.text:004077FA                 mov     dword_414F18, eax
.text:004077FF                 mov     eax, dword_414FFC
.text:00407804                 mov     dword_4141FC, eax
.text:00407809                 inc     eax
.text:0040780A                 pop     edi
.text:0040780B                 mov     dword_414FFC, eax
.text:00407810                 pop     esi
.text:00407811                 retn
.text:00407811 sub_4077A0      endp
.text:00407811
.text:00407811 ; ---------------------------------------------------------------------------
.text:00407812                 align 10h
.text:00407820
.text:00407820 ; =============== S U B R O U T I N E =======================================
.text:00407820
.text:00407820
.text:00407820 sub_407820      proc near               ; DATA XREF: .text:00402EDC↑o
.text:00407820                                         ; .text:00403004↑o
.text:00407820                 cmp     dword_413150, 0
.text:00407827                 push    esi
.text:00407828                 push    edi
.text:00407829                 mov     edi, offset dword_414F14
.text:0040782E                 jz      short loc_407847
.text:00407830                 and     dword_413150, 0
.text:00407837                 mov     esi, edi
.text:00407839                 mov     dword_414F18, esi
.text:0040783F                 mov     dword_414F14, edi
.text:00407845                 jmp     short loc_40784D
.text:00407847 ; ---------------------------------------------------------------------------
.text:00407847
.text:00407847 loc_407847:                             ; CODE XREF: sub_407820+E↑j
.text:00407847                 mov     esi, dword_414F18
.text:0040784D
.text:0040784D loc_40784D:                             ; CODE XREF: sub_407820+25↑j
.text:0040784D                 push    38h ; '8'       ; Size
.text:0040784F                 push    0               ; Val
.text:00407851                 push    offset unk_4142EC ; void *
.text:00407856                 call    memset
.text:0040785B                 add     esp, 0Ch
.text:0040785E                 cmp     [esi], edi
.text:00407860                 jz      short loc_407867
.text:00407862                 push    3
.text:00407864                 pop     ecx
.text:00407865                 int     29h             ; Win8: RtlFailFast(ecx)
.text:00407867 ; ---------------------------------------------------------------------------
.text:00407867
.text:00407867 loc_407867:                             ; CODE XREF: sub_407820+40↑j
.text:00407867                 mov     eax, offset dword_4142C8
.text:0040786C                 mov     dword_4142C8, edi
.text:00407872                 mov     dword_4142CC, esi
.text:00407878                 mov     [esi], eax
.text:0040787A                 mov     dword_414F18, eax
.text:0040787F                 mov     eax, dword_414FFC
.text:00407884                 mov     dword_41431C, eax
.text:00407889                 inc     eax
.text:0040788A                 pop     edi
.text:0040788B                 mov     dword_414FFC, eax
.text:00407890                 pop     esi
.text:00407891                 retn
.text:00407891 sub_407820      endp
.text:00407891
.text:00407891 ; ---------------------------------------------------------------------------
.text:00407892                 align 10h
.text:004078A0
.text:004078A0 ; =============== S U B R O U T I N E =======================================
.text:004078A0
.text:004078A0
.text:004078A0 sub_4078A0      proc near               ; DATA XREF: .text:00402EE0↑o
.text:004078A0                                         ; .text:00403008↑o
.text:004078A0                 cmp     dword_413150, 0
.text:004078A7                 push    esi
.text:004078A8                 push    edi
.text:004078A9                 mov     edi, offset dword_414F14
.text:004078AE                 jz      short loc_4078C7
.text:004078B0                 and     dword_413150, 0
.text:004078B7                 mov     esi, edi
.text:004078B9                 mov     dword_414F18, esi
.text:004078BF                 mov     dword_414F14, edi
.text:004078C5                 jmp     short loc_4078CD
.text:004078C7 ; ---------------------------------------------------------------------------
.text:004078C7
.text:004078C7 loc_4078C7:                             ; CODE XREF: sub_4078A0+E↑j
.text:004078C7                 mov     esi, dword_414F18
.text:004078CD
.text:004078CD loc_4078CD:                             ; CODE XREF: sub_4078A0+25↑j
.text:004078CD                 push    38h ; '8'       ; Size
.text:004078CF                 push    0               ; Val
.text:004078D1                 push    offset unk_413F8C ; void *
.text:004078D6                 call    memset
.text:004078DB                 add     esp, 0Ch
.text:004078DE                 cmp     [esi], edi
.text:004078E0                 jz      short loc_4078E7
.text:004078E2                 push    3
.text:004078E4                 pop     ecx
.text:004078E5                 int     29h             ; Win8: RtlFailFast(ecx)
.text:004078E7 ; ---------------------------------------------------------------------------
.text:004078E7
.text:004078E7 loc_4078E7:                             ; CODE XREF: sub_4078A0+40↑j
.text:004078E7                 mov     eax, offset dword_413F68
.text:004078EC                 mov     dword_413F68, edi
.text:004078F2                 mov     dword_413F6C, esi
.text:004078F8                 mov     [esi], eax
.text:004078FA                 mov     dword_414F18, eax
.text:004078FF                 mov     eax, dword_414FFC
.text:00407904                 mov     dword_413FBC, eax
.text:00407909                 inc     eax
.text:0040790A                 pop     edi
.text:0040790B                 mov     dword_414FFC, eax
.text:00407910                 mov     dword_413F78, 60h ; '`'
.text:0040791A                 pop     esi
.text:0040791B                 retn
.text:0040791B sub_4078A0      endp
.text:0040791B
.text:0040791B ; ---------------------------------------------------------------------------
.text:0040791C                 align 10h
.text:00407920
.text:00407920 ; =============== S U B R O U T I N E =======================================
.text:00407920
.text:00407920 ; Attributes: bp-based frame info_from_lumina
.text:00407920
.text:00407920 ; HRESULT __stdcall StringCchCopyW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_LPCWSTR pszSrc)
.text:00407920 _StringCchCopyW@12 proc near            ; CODE XREF: GetNamespace(_LOGMAN_NS *)+47↓p
.text:00407920                                         ; sub_40E057+4E↓p ...
.text:00407920
.text:00407920 pszDest         = dword ptr  8
.text:00407920 cchDest         = dword ptr  0Ch
.text:00407920 pszSrc          = dword ptr  10h
.text:00407920
.text:00407920                 mov     edi, edi
.text:00407922                 push    ebp             ; pszSrc
.text:00407923                 mov     ebp, esp
.text:00407925                 xor     eax, eax
.text:00407927                 test    edx, edx
.text:00407929                 jz      short loc_407933
.text:0040792B                 cmp     edx, 7FFFFFFFh
.text:00407931                 jbe     short loc_407938
.text:00407933
.text:00407933 loc_407933:                             ; CODE XREF: StringCchCopyW(x,x,x)+9↑j
.text:00407933                 mov     eax, 80070057h
.text:00407938
.text:00407938 loc_407938:                             ; CODE XREF: StringCchCopyW(x,x,x)+11↑j
.text:00407938                 test    eax, eax
.text:0040793A                 js      short loc_407948
.text:0040793C                 push    ecx             ; pcchNewDestLength
.text:0040793D                 push    [ebp+pszDest]   ; cchDest
.text:00407940                 push    ecx             ; pszDest
.text:00407941                 call    StringCopyWorkerW
.text:00407946                 jmp     short loc_407951
.text:00407948 ; ---------------------------------------------------------------------------
.text:00407948
.text:00407948 loc_407948:                             ; CODE XREF: StringCchCopyW(x,x,x)+1A↑j
.text:00407948                 test    edx, edx
.text:0040794A                 jz      short loc_407951
.text:0040794C                 xor     edx, edx
.text:0040794E                 mov     [ecx], dx
.text:00407951
.text:00407951 loc_407951:                             ; CODE XREF: StringCchCopyW(x,x,x)+26↑j
.text:00407951                                         ; StringCchCopyW(x,x,x)+2A↑j
.text:00407951                 pop     ebp
.text:00407952                 retn    4
.text:00407952 _StringCchCopyW@12 endp ; sp-analysis failed
.text:00407952
.text:00407955
.text:00407955 ; =============== S U B R O U T I N E =======================================
.text:00407955
.text:00407955 ; Attributes: bp-based frame
.text:00407955
.text:00407955 sub_407955      proc near               ; CODE XREF: _wmain+337↓p
.text:00407955                                         ; sub_40E057+7A↓p ...
.text:00407955
.text:00407955 cchDest         = dword ptr  8
.text:00407955
.text:00407955                 mov     edi, edi
.text:00407957                 push    ebp
.text:00407958                 mov     ebp, esp
.text:0040795A                 push    ebx
.text:0040795B                 push    esi             ; cchToCopy
.text:0040795C                 xor     esi, esi
.text:0040795E                 mov     ebx, 80070057h
.text:00407963                 mov     eax, esi
.text:00407965                 push    edi             ; pszSrc
.text:00407966                 mov     edi, ecx
.text:00407968                 test    edx, edx
.text:0040796A                 jz      short loc_407974
.text:0040796C                 cmp     edx, 7FFFFFFFh
.text:00407972                 jbe     short loc_407976
.text:00407974
.text:00407974 loc_407974:                             ; CODE XREF: sub_407955+15↑j
.text:00407974                 mov     eax, ebx
.text:00407976
.text:00407976 loc_407976:                             ; CODE XREF: sub_407955+1D↑j
.text:00407976                 test    eax, eax
.text:00407978                 js      short loc_4079B7
.text:0040797A                 mov     ecx, edx
.text:0040797C                 mov     eax, edi
.text:0040797E                 test    edx, edx
.text:00407980                 jz      short loc_40798F
.text:00407982
.text:00407982 loc_407982:                             ; CODE XREF: sub_407955+38↓j
.text:00407982                 cmp     [eax], si
.text:00407985                 jz      short loc_40798F
.text:00407987                 add     eax, 2
.text:0040798A                 sub     ecx, 1
.text:0040798D                 jnz     short loc_407982
.text:0040798F
.text:0040798F loc_40798F:                             ; CODE XREF: sub_407955+2B↑j
.text:0040798F                                         ; sub_407955+30↑j
.text:0040798F                 mov     eax, ecx
.text:00407991                 neg     eax
.text:00407993                 sbb     eax, eax
.text:00407995                 and     eax, 7FF8FFA9h
.text:0040799A                 add     eax, ebx
.text:0040799C                 test    ecx, ecx
.text:0040799E                 jz      short loc_4079A4
.text:004079A0                 mov     esi, edx
.text:004079A2                 sub     esi, ecx
.text:004079A4
.text:004079A4 loc_4079A4:                             ; CODE XREF: sub_407955+49↑j
.text:004079A4                 test    eax, eax
.text:004079A6                 js      short loc_4079B7
.text:004079A8                 push    ecx             ; pcchNewDestLength
.text:004079A9                 push    [ebp+cchDest]   ; cchDest
.text:004079AC                 sub     edx, esi
.text:004079AE                 push    ecx             ; pszDest
.text:004079AF                 lea     ecx, [edi+esi*2]
.text:004079B2                 call    StringCopyWorkerW
.text:004079B7
.text:004079B7 loc_4079B7:                             ; CODE XREF: sub_407955+23↑j
.text:004079B7                                         ; sub_407955+51↑j
.text:004079B7                 pop     edi
.text:004079B8                 pop     esi
.text:004079B9                 pop     ebx
.text:004079BA                 pop     ebp
.text:004079BB                 retn    4
.text:004079BB sub_407955      endp ; sp-analysis failed
.text:004079BB
.text:004079BE
.text:004079BE ; =============== S U B R O U T I N E =======================================
.text:004079BE
.text:004079BE ; Attributes: bp-based frame info_from_lumina
.text:004079BE
.text:004079BE ; HRESULT StringCchPrintfW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_LPCWSTR pszFormat, ...)
.text:004079BE ?StringCchPrintfW@@YAJPAGIPBGZZ_0 proc near
.text:004079BE                                         ; CODE XREF: InitializeComSecurity(void)+5C↓p
.text:004079BE                                         ; GetNamespace(_LOGMAN_NS *)+26E↓p ...
.text:004079BE
.text:004079BE Buffer          = dword ptr  8
.text:004079BE arg_4           = dword ptr  0Ch
.text:004079BE Format          = dword ptr  10h
.text:004079BE Args            = byte ptr  14h
.text:004079BE
.text:004079BE                 mov     edi, edi
.text:004079C0                 push    ebp
.text:004079C1                 mov     ebp, esp
.text:004079C3                 mov     eax, [ebp+arg_4]
.text:004079C6                 push    esi
.text:004079C7                 xor     esi, esi
.text:004079C9                 test    eax, eax
.text:004079CB                 jz      short loc_4079D4
.text:004079CD                 cmp     eax, 7FFFFFFFh
.text:004079D2                 jbe     short loc_4079D9
.text:004079D4
.text:004079D4 loc_4079D4:                             ; CODE XREF: StringCchPrintfW(ushort *,uint,ushort const *,...)+D↑j
.text:004079D4                 mov     esi, 80070057h
.text:004079D9
.text:004079D9 loc_4079D9:                             ; CODE XREF: StringCchPrintfW(ushort *,uint,ushort const *,...)+14↑j
.text:004079D9                 test    esi, esi
.text:004079DB                 js      short loc_407A14
.text:004079DD                 push    ebx
.text:004079DE                 mov     ebx, [ebp+Buffer]
.text:004079E1                 xor     esi, esi
.text:004079E3                 push    edi
.text:004079E4                 lea     edi, [eax-1]
.text:004079E7                 lea     eax, [ebp+Args]
.text:004079EA                 push    eax             ; Args
.text:004079EB                 push    [ebp+Format]    ; Format
.text:004079EE                 push    edi             ; BufferCount
.text:004079EF                 push    ebx             ; Buffer
.text:004079F0                 call    ds:_vsnwprintf
.text:004079F6                 add     esp, 10h
.text:004079F9                 test    eax, eax
.text:004079FB                 js      short loc_407A05
.text:004079FD                 cmp     eax, edi
.text:004079FF                 ja      short loc_407A05
.text:00407A01                 jnz     short loc_407A10
.text:00407A03                 jmp     short loc_407A0A
.text:00407A05 ; ---------------------------------------------------------------------------
.text:00407A05
.text:00407A05 loc_407A05:                             ; CODE XREF: StringCchPrintfW(ushort *,uint,ushort const *,...)+3D↑j
.text:00407A05                                         ; StringCchPrintfW(ushort *,uint,ushort const *,...)+41↑j
.text:00407A05                 mov     esi, 8007007Ah
.text:00407A0A
.text:00407A0A loc_407A0A:                             ; CODE XREF: StringCchPrintfW(ushort *,uint,ushort const *,...)+45↑j
.text:00407A0A                 xor     eax, eax
.text:00407A0C                 mov     [ebx+edi*2], ax
.text:00407A10
.text:00407A10 loc_407A10:                             ; CODE XREF: StringCchPrintfW(ushort *,uint,ushort const *,...)+43↑j
.text:00407A10                 pop     edi
.text:00407A11                 pop     ebx
.text:00407A12                 jmp     short loc_407A20
.text:00407A14 ; ---------------------------------------------------------------------------
.text:00407A14
.text:00407A14 loc_407A14:                             ; CODE XREF: StringCchPrintfW(ushort *,uint,ushort const *,...)+1D↑j
.text:00407A14                 test    eax, eax
.text:00407A16                 jz      short loc_407A20
.text:00407A18                 mov     ecx, [ebp+Buffer]
.text:00407A1B                 xor     eax, eax
.text:00407A1D                 mov     [ecx], ax
.text:00407A20
.text:00407A20 loc_407A20:                             ; CODE XREF: StringCchPrintfW(ushort *,uint,ushort const *,...)+54↑j
.text:00407A20                                         ; StringCchPrintfW(ushort *,uint,ushort const *,...)+58↑j
.text:00407A20                 mov     eax, esi
.text:00407A22                 pop     esi
.text:00407A23                 pop     ebp
.text:00407A24                 retn
.text:00407A24 ?StringCchPrintfW@@YAJPAGIPBGZZ_0 endp
.text:00407A24
.text:00407A25
.text:00407A25 ; =============== S U B R O U T I N E =======================================
.text:00407A25
.text:00407A25 ; Attributes: bp-based frame info_from_lumina
.text:00407A25
.text:00407A25 ; HRESULT __stdcall static StringCopyWorkerW(STRSAFE_LPWSTR pszDest, size_t cchDest, size_t *pcchNewDestLength, STRSAFE_PCNZWCH pszSrc, size_t cchToCopy)
.text:00407A25 StringCopyWorkerW proc near             ; CODE XREF: StringCchCopyW(x,x,x)+21↑p
.text:00407A25                                         ; sub_407955+5D↑p ...
.text:00407A25
.text:00407A25 pszDest         = dword ptr  8
.text:00407A25 cchDest         = dword ptr  0Ch
.text:00407A25 pcchNewDestLength= dword ptr  10h
.text:00407A25 pszSrc          = dword ptr  14h
.text:00407A25 cchToCopy       = dword ptr  18h
.text:00407A25
.text:00407A25                 mov     edi, edi
.text:00407A27                 push    ebp
.text:00407A28                 mov     ebp, esp
.text:00407A2A                 push    edi
.text:00407A2B                 xor     edi, edi
.text:00407A2D                 test    edx, edx
.text:00407A2F                 jz      short loc_407A5C
.text:00407A31                 mov     eax, [ebp+cchDest]
.text:00407A34                 push    ebx
.text:00407A35                 push    esi
.text:00407A36                 mov     esi, 7FFFFFFEh
.text:00407A3B                 sub     eax, ecx
.text:00407A3D
.text:00407A3D loc_407A3D:                             ; CODE XREF: StringCopyWorkerW+2F↓j
.text:00407A3D                 test    esi, esi
.text:00407A3F                 jz      short loc_407A56
.text:00407A41                 movzx   ebx, word ptr [eax+ecx]
.text:00407A45                 test    bx, bx
.text:00407A48                 jz      short loc_407A56
.text:00407A4A                 mov     [ecx], bx
.text:00407A4D                 add     ecx, 2
.text:00407A50                 dec     esi
.text:00407A51                 sub     edx, 1
.text:00407A54                 jnz     short loc_407A3D
.text:00407A56
.text:00407A56 loc_407A56:                             ; CODE XREF: StringCopyWorkerW+1A↑j
.text:00407A56                                         ; StringCopyWorkerW+23↑j
.text:00407A56                 pop     esi
.text:00407A57                 pop     ebx
.text:00407A58                 test    edx, edx
.text:00407A5A                 jnz     short loc_407A64
.text:00407A5C
.text:00407A5C loc_407A5C:                             ; CODE XREF: StringCopyWorkerW+A↑j
.text:00407A5C                 sub     ecx, 2
.text:00407A5F                 mov     edi, 8007007Ah
.text:00407A64
.text:00407A64 loc_407A64:                             ; CODE XREF: StringCopyWorkerW+35↑j
.text:00407A64                 xor     eax, eax
.text:00407A66                 mov     [ecx], ax
.text:00407A69                 mov     eax, edi
.text:00407A6B                 pop     edi
.text:00407A6C                 pop     ebp
.text:00407A6D                 retn    0Ch
.text:00407A6D StringCopyWorkerW endp
.text:00407A6D
.text:00407A70
.text:00407A70 ; =============== S U B R O U T I N E =======================================
.text:00407A70
.text:00407A70 ; Attributes: bp-based frame info_from_lumina
.text:00407A70
.text:00407A70 ; int __stdcall ArgApplyRules(int)
.text:00407A70 ?ArgApplyRules@@YGJH@Z proc near        ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+321↓p
.text:00407A70                                         ; sub_40FD8A+46↓p ...
.text:00407A70
.text:00407A70 var_20          = dword ptr -20h
.text:00407A70 var_1C          = dword ptr -1Ch
.text:00407A70 var_18          = dword ptr -18h
.text:00407A70 var_14          = dword ptr -14h
.text:00407A70 var_10          = dword ptr -10h
.text:00407A70 var_C           = dword ptr -0Ch
.text:00407A70 var_8           = dword ptr -8
.text:00407A70 var_4           = dword ptr -4
.text:00407A70
.text:00407A70                 mov     edi, edi
.text:00407A72                 push    ebp
.text:00407A73                 mov     ebp, esp
.text:00407A75                 sub     esp, 20h
.text:00407A78                 mov     eax, ___security_cookie
.text:00407A7D                 xor     eax, ebp
.text:00407A7F                 mov     [ebp+var_4], eax
.text:00407A82                 push    ebx
.text:00407A83                 mov     ebx, dword_41501C
.text:00407A89                 xor     eax, eax
.text:00407A8B                 push    esi
.text:00407A8C                 push    edi
.text:00407A8D                 mov     edi, ecx
.text:00407A8F                 mov     esi, eax
.text:00407A91                 xor     ecx, ecx
.text:00407A93                 inc     ecx
.text:00407A94                 test    cl, bl
.text:00407A96                 jnz     short loc_407AF0
.text:00407A98                 or      ebx, ecx
.text:00407A9A                 mov     dword_414F80, offset dword_413E48
.text:00407AA4                 mov     dword_41501C, ebx
.text:00407AAA                 mov     dword_414F84, offset dword_414268
.text:00407AB4                 mov     dword_414F88, offset dword_413C08
.text:00407ABE                 mov     dword_414F8C, offset dword_413CC8
.text:00407AC8                 mov     dword_414F90, offset dword_414958
.text:00407AD2                 mov     dword_414F94, offset dword_413158
.text:00407ADC                 mov     dword_414F98, offset dword_413A18
.text:00407AE6                 mov     dword_414F9C, offset dword_413778
.text:00407AF0
.text:00407AF0 loc_407AF0:                             ; CODE XREF: ArgApplyRules(int)+26↑j
.text:00407AF0                 test    bl, 2
.text:00407AF3                 jnz     short loc_407B13
.text:00407AF5                 or      ebx, 2
.text:00407AF8                 mov     dword_4130E8, ecx
.text:00407AFE                 mov     dword_41501C, ebx
.text:00407B04                 mov     dword_4130EC, eax
.text:00407B09                 mov     dword_4130F0, eax
.text:00407B0E                 mov     dword_4130F4, eax
.text:00407B13
.text:00407B13 loc_407B13:                             ; CODE XREF: ArgApplyRules(int)+83↑j
.text:00407B13                 mov     ecx, offset off_4130E0
.text:00407B18                 call    sub_40ED60
.text:00407B1D                 test    bl, 4
.text:00407B20                 jnz     short loc_407B67
.text:00407B22                 or      ebx, 4
.text:00407B25                 mov     dword_414F20, offset dword_413408
.text:00407B2F                 mov     dword_41501C, ebx
.text:00407B35                 mov     dword_414F24, offset dword_414A18
.text:00407B3F                 mov     dword_414F28, offset dword_414A78
.text:00407B49                 mov     dword_414F2C, offset dword_414388
.text:00407B53                 mov     dword_414F30, offset dword_414698
.text:00407B5D                 mov     dword_414F34, offset dword_4140E8
.text:00407B67
.text:00407B67 loc_407B67:                             ; CODE XREF: ArgApplyRules(int)+B0↑j
.text:00407B67                 test    bl, 8
.text:00407B6A                 jnz     short loc_407B90
.text:00407B6C                 or      ebx, 8
.text:00407B6F                 mov     dword_413130, 2
.text:00407B79                 xor     eax, eax
.text:00407B7B                 mov     dword_41501C, ebx
.text:00407B81                 mov     dword_413134, eax
.text:00407B86                 mov     dword_413138, eax
.text:00407B8B                 mov     dword_41313C, eax
.text:00407B90
.text:00407B90 loc_407B90:                             ; CODE XREF: ArgApplyRules(int)+FA↑j
.text:00407B90                 mov     ecx, offset off_413128
.text:00407B95                 call    sub_40ED60
.text:00407B9A                 test    bl, 10h
.text:00407B9D                 jnz     short loc_407BE9
.text:00407B9F                 mov     eax, offset dword_414148
.text:00407BA4                 mov     dword_414FDC, offset dword_4143E8
.text:00407BAE                 or      ebx, 10h
.text:00407BB1                 mov     dword_414FE0, eax
.text:00407BB6                 mov     dword_41501C, ebx
.text:00407BBC                 mov     dword_414FE4, offset dword_4147C8
.text:00407BC6                 mov     dword_414FE8, offset dword_4145D8
.text:00407BD0                 mov     dword_414FEC, offset dword_413D88
.text:00407BDA                 mov     dword_414FF0, offset dword_413FC8
.text:00407BE4                 mov     dword_414FF4, eax
.text:00407BE9
.text:00407BE9 loc_407BE9:                             ; CODE XREF: ArgApplyRules(int)+12D↑j
.text:00407BE9                 test    bl, 20h
.text:00407BEC                 jnz     short loc_407C0D
.text:00407BEE                 or      ebx, 20h
.text:00407BF1                 xor     eax, eax
.text:00407BF3                 mov     dword_41501C, ebx
.text:00407BF9                 mov     dword_413038, eax
.text:00407BFE                 mov     dword_41303C, eax
.text:00407C03                 mov     dword_413040, eax
.text:00407C08                 mov     dword_413044, eax
.text:00407C0D
.text:00407C0D loc_407C0D:                             ; CODE XREF: ArgApplyRules(int)+17C↑j
.text:00407C0D                 mov     ecx, offset off_413030
.text:00407C12                 call    sub_40ED60
.text:00407C17                 test    bl, 40h
.text:00407C1A                 jnz     short loc_407C61
.text:00407C1C                 or      ebx, 40h
.text:00407C1F                 mov     dword_414F38, offset dword_413408
.text:00407C29                 mov     dword_41501C, ebx
.text:00407C2F                 mov     dword_414F3C, offset dword_4137D8
.text:00407C39                 mov     dword_414F40, offset dword_413EA8
.text:00407C43                 mov     dword_414F44, offset dword_414B38
.text:00407C4D                 mov     dword_414F48, offset dword_414328
.text:00407C57                 mov     dword_414F4C, offset dword_413B38
.text:00407C61
.text:00407C61 loc_407C61:                             ; CODE XREF: ArgApplyRules(int)+1AA↑j
.text:00407C61                 test    bl, bl
.text:00407C63                 js      short loc_407C8C
.text:00407C65                 or      ebx, 80h
.text:00407C6B                 mov     dword_413100, 3
.text:00407C75                 xor     eax, eax
.text:00407C77                 mov     dword_41501C, ebx
.text:00407C7D                 mov     dword_413104, eax
.text:00407C82                 mov     dword_413108, eax
.text:00407C87                 mov     dword_41310C, eax
.text:00407C8C
.text:00407C8C loc_407C8C:                             ; CODE XREF: ArgApplyRules(int)+1F3↑j
.text:00407C8C                 mov     ecx, offset off_4130F8
.text:00407C91                 call    sub_40ED60
.text:00407C96                 mov     eax, 100h
.text:00407C9B                 test    eax, ebx
.text:00407C9D                 jnz     loc_407D23
.text:00407CA3                 or      ebx, eax
.text:00407CA5                 mov     dword_414F50, offset dword_414A18
.text:00407CAF                 mov     dword_41501C, ebx
.text:00407CB5                 mov     dword_414F54, offset dword_414B38
.text:00407CBF                 mov     dword_414F58, offset dword_413C68
.text:00407CC9                 mov     dword_414F5C, offset dword_4146F8
.text:00407CD3                 mov     dword_414F60, offset dword_413468
.text:00407CDD                 mov     dword_414F64, offset dword_413338
.text:00407CE7                 mov     dword_414F68, offset dword_413F08
.text:00407CF1                 mov     dword_414F6C, offset dword_413A78
.text:00407CFB                 mov     dword_414F70, offset dword_4135E8
.text:00407D05                 mov     dword_414F74, offset dword_414638
.text:00407D0F                 mov     dword_414F78, offset dword_4138F8
.text:00407D19                 mov     dword_414F7C, offset dword_414518
.text:00407D23
.text:00407D23 loc_407D23:                             ; CODE XREF: ArgApplyRules(int)+22D↑j
.text:00407D23                 mov     eax, 200h
.text:00407D28                 test    eax, ebx
.text:00407D2A                 jnz     short loc_407D4F
.text:00407D2C                 or      ebx, eax
.text:00407D2E                 mov     dword_413118, 3
.text:00407D38                 xor     eax, eax
.text:00407D3A                 mov     dword_41501C, ebx
.text:00407D40                 mov     dword_41311C, eax
.text:00407D45                 mov     dword_413120, eax
.text:00407D4A                 mov     dword_413124, eax
.text:00407D4F
.text:00407D4F loc_407D4F:                             ; CODE XREF: ArgApplyRules(int)+2BA↑j
.text:00407D4F                 mov     ecx, offset off_413110
.text:00407D54                 call    sub_40ED60
.text:00407D59                 mov     eax, 400h
.text:00407D5E                 test    eax, ebx
.text:00407D60                 jnz     short loc_407DB0
.text:00407D62                 or      ebx, eax
.text:00407D64                 mov     dword_414FC0, offset dword_414A78
.text:00407D6E                 mov     dword_41501C, ebx
.text:00407D74                 mov     dword_414FC4, offset dword_414208
.text:00407D7E                 mov     dword_414FC8, offset dword_414898
.text:00407D88                 mov     dword_414FCC, offset dword_413898
.text:00407D92                 mov     dword_414FD0, offset dword_413588
.text:00407D9C                 mov     dword_414FD4, offset dword_4149B8
.text:00407DA6                 mov     dword_414FD8, offset dword_413B38
.text:00407DB0
.text:00407DB0 loc_407DB0:                             ; CODE XREF: ArgApplyRules(int)+2F0↑j
.text:00407DB0                 mov     eax, 800h
.text:00407DB5                 test    eax, ebx
.text:00407DB7                 jnz     short loc_407DDC
.text:00407DB9                 or      ebx, eax
.text:00407DBB                 mov     dword_413050, 3
.text:00407DC5                 xor     eax, eax
.text:00407DC7                 mov     dword_41501C, ebx
.text:00407DCD                 mov     dword_413054, eax
.text:00407DD2                 mov     dword_413058, eax
.text:00407DD7                 mov     dword_41305C, eax
.text:00407DDC
.text:00407DDC loc_407DDC:                             ; CODE XREF: ArgApplyRules(int)+347↑j
.text:00407DDC                 mov     ecx, offset off_413048
.text:00407DE1                 call    sub_40ED60
.text:00407DE6                 mov     eax, 1000h
.text:00407DEB                 test    eax, ebx
.text:00407DED                 jnz     short loc_407E29
.text:00407DEF                 or      ebx, eax
.text:00407DF1                 mov     dword_414EEC, offset dword_414388
.text:00407DFB                 mov     dword_41501C, ebx
.text:00407E01                 mov     dword_414EF0, offset dword_413958
.text:00407E0B                 mov     dword_414EF4, offset dword_4136A8
.text:00407E15                 mov     dword_414EF8, offset dword_413648
.text:00407E1F                 mov     dword_414EFC, offset dword_414AD8
.text:00407E29
.text:00407E29 loc_407E29:                             ; CODE XREF: ArgApplyRules(int)+37D↑j
.text:00407E29                 mov     eax, 2000h
.text:00407E2E                 test    eax, ebx
.text:00407E30                 jnz     short loc_407E55
.text:00407E32                 or      ebx, eax
.text:00407E34                 mov     dword_413020, 3
.text:00407E3E                 xor     eax, eax
.text:00407E40                 mov     dword_41501C, ebx
.text:00407E46                 mov     dword_413024, eax
.text:00407E4B                 mov     dword_413028, eax
.text:00407E50                 mov     dword_41302C, eax
.text:00407E55
.text:00407E55 loc_407E55:                             ; CODE XREF: ArgApplyRules(int)+3C0↑j
.text:00407E55                 mov     ecx, offset off_413018
.text:00407E5A                 call    sub_40ED60
.text:00407E5F                 mov     eax, 4000h
.text:00407E64                 test    eax, ebx
.text:00407E66                 jnz     short loc_407EC0
.text:00407E68                 or      ebx, eax
.text:00407E6A                 mov     dword_414FA0, offset dword_414698
.text:00407E74                 mov     dword_41501C, ebx
.text:00407E7A                 mov     dword_414FA4, offset dword_413D28
.text:00407E84                 mov     dword_414FA8, offset dword_413DE8
.text:00407E8E                 mov     dword_414FAC, offset dword_4144B8
.text:00407E98                 mov     dword_414FB0, offset dword_4141A8
.text:00407EA2                 mov     dword_414FB4, offset dword_4142C8
.text:00407EAC                 mov     dword_414FB8, offset dword_413F68
.text:00407EB6                 mov     dword_414FBC, offset dword_414B38
.text:00407EC0
.text:00407EC0 loc_407EC0:                             ; CODE XREF: ArgApplyRules(int)+3F6↑j
.text:00407EC0                 mov     eax, 8000h
.text:00407EC5                 test    eax, ebx
.text:00407EC7                 jnz     short loc_407EF1
.text:00407EC9                 or      ebx, eax
.text:00407ECB                 mov     dword_413008, 3
.text:00407ED5                 mov     dword_41501C, ebx
.text:00407EDB                 xor     ebx, ebx
.text:00407EDD                 mov     dword_41300C, ebx
.text:00407EE3                 mov     dword_413010, ebx
.text:00407EE9                 mov     dword_413014, ebx
.text:00407EEF                 jmp     short loc_407EF3
.text:00407EF1 ; ---------------------------------------------------------------------------
.text:00407EF1
.text:00407EF1 loc_407EF1:                             ; CODE XREF: ArgApplyRules(int)+457↑j
.text:00407EF1                 xor     ebx, ebx
.text:00407EF3
.text:00407EF3 loc_407EF3:                             ; CODE XREF: ArgApplyRules(int)+47F↑j
.text:00407EF3                 mov     ecx, offset off_413000
.text:00407EF8                 call    sub_40ED60
.text:00407EFD                 cmp     dword_413510, esi
.text:00407F03                 jnz     short loc_407F4F
.text:00407F05                 cmp     dword_413E90, esi
.text:00407F0B                 jnz     short loc_407F4F
.text:00407F0D                 cmp     dword_4142B0, esi
.text:00407F13                 jnz     short loc_407F4F
.text:00407F15                 cmp     dword_413C50, esi
.text:00407F1B                 jnz     short loc_407F4F
.text:00407F1D                 cmp     dword_413D10, esi
.text:00407F23                 jnz     short loc_407F4F
.text:00407F25                 cmp     dword_4149A0, esi
.text:00407F2B                 jnz     short loc_407F4F
.text:00407F2D                 cmp     dword_4131A0, esi
.text:00407F33                 jnz     short loc_407F4F
.text:00407F35                 cmp     dword_413A60, esi
.text:00407F3B                 jnz     short loc_407F4F
.text:00407F3D                 cmp     dword_4137C0, esi
.text:00407F43                 jnz     short loc_407F4F
.text:00407F45                 mov     dword_4142B0, 1
.text:00407F4F
.text:00407F4F loc_407F4F:                             ; CODE XREF: ArgApplyRules(int)+493↑j
.text:00407F4F                                         ; ArgApplyRules(int)+49B↑j ...
.text:00407F4F                 push    ecx
.text:00407F50                 lea     edx, [ebp+var_18]
.text:00407F53                 mov     [ebp+var_18], offset off_4130F8
.text:00407F5A                 mov     [ebp+var_14], offset off_413110
.text:00407F61                 mov     [ebp+var_10], offset off_413018
.text:00407F68                 mov     [ebp+var_C], offset off_413048
.text:00407F6F                 mov     [ebp+var_8], offset off_413000
.text:00407F76                 call    sub_4101E9
.text:00407F7B                 test    eax, eax
.text:00407F7D                 jns     short loc_407F81
.text:00407F7F                 mov     esi, eax
.text:00407F81
.text:00407F81 loc_407F81:                             ; CODE XREF: ArgApplyRules(int)+50D↑j
.text:00407F81                 push    dword_4130E4
.text:00407F87                 mov     edx, off_4130E0
.text:00407F8D                 mov     ecx, edi
.text:00407F8F                 call    sub_4105BC
.text:00407F94                 test    eax, eax
.text:00407F96                 jns     short loc_407F9A
.text:00407F98                 mov     esi, eax
.text:00407F9A
.text:00407F9A loc_407F9A:                             ; CODE XREF: ArgApplyRules(int)+526↑j
.text:00407F9A                 mov     [ebp+var_14], offset dword_413AD8
.text:00407FA1                 mov     ecx, ebx
.text:00407FA3                 mov     [ebp+var_10], offset dword_413838
.text:00407FAA                 mov     [ebp+var_C], offset dword_413218
.text:00407FB1                 mov     [ebp+var_8], offset dword_4134C8
.text:00407FB8
.text:00407FB8 loc_407FB8:                             ; CODE XREF: ArgApplyRules(int)+557↓j
.text:00407FB8                 mov     eax, [ebp+ecx*4+var_14]
.text:00407FBC                 inc     ecx
.text:00407FBD                 mov     dword ptr [eax+38h], 1
.text:00407FC4                 cmp     ecx, 4
.text:00407FC7                 jb      short loc_407FB8
.text:00407FC9                 cmp     dword_413260, 0
.text:00407FD0                 jz      short loc_408015
.text:00407FD2                 mov     [ebp+var_C], offset dword_413278
.text:00407FD9                 mov     ecx, ebx
.text:00407FDB                 mov     [ebp+var_8], offset dword_414638
.text:00407FE2
.text:00407FE2 loc_407FE2:                             ; CODE XREF: ArgApplyRules(int)+581↓j
.text:00407FE2                 mov     eax, [ebp+ecx*4+var_C]
.text:00407FE6                 inc     ecx
.text:00407FE7                 mov     dword ptr [eax+38h], 1
.text:00407FEE                 cmp     ecx, 2
.text:00407FF1                 jb      short loc_407FE2
.text:00407FF3                 cmp     dword_414680, 0
.text:00407FFA                 jz      short loc_408015
.text:00407FFC                 push    1
.text:00407FFE                 lea     edx, [ebp+var_8]
.text:00408001                 mov     [ebp+var_8], offset dword_413F08
.text:00408008                 mov     ecx, edi
.text:0040800A                 call    sub_410434
.text:0040800F                 test    eax, eax
.text:00408011                 jns     short loc_408015
.text:00408013                 mov     esi, eax
.text:00408015
.text:00408015 loc_408015:                             ; CODE XREF: ArgApplyRules(int)+560↑j
.text:00408015                                         ; ArgApplyRules(int)+58A↑j ...
.text:00408015                 cmp     dword_413C50, 0
.text:0040801C                 jz      short loc_408078
.text:0040801E                 push    1
.text:00408020                 lea     edx, [ebp+var_8]
.text:00408023                 mov     [ebp+var_8], offset dword_4139B8
.text:0040802A                 mov     ecx, edi
.text:0040802C                 call    sub_410434
.text:00408031                 test    eax, eax
.text:00408033                 jns     short loc_408037
.text:00408035                 mov     esi, eax
.text:00408037
.text:00408037 loc_408037:                             ; CODE XREF: ArgApplyRules(int)+5C3↑j
.text:00408037                 cmp     dword_413260, 0
.text:0040803E                 mov     dword_4140C0, 1
.text:00408048                 jz      short loc_408078
.text:0040804A                 push    dword_413034
.text:00408050                 mov     edx, off_413030
.text:00408056                 call    sub_410412
.text:0040805B                 test    eax, eax
.text:0040805D                 jns     short loc_408061
.text:0040805F                 mov     esi, eax
.text:00408061
.text:00408061 loc_408061:                             ; CODE XREF: ArgApplyRules(int)+5ED↑j
.text:00408061                 push    dword_413114
.text:00408067                 mov     edx, off_413110
.text:0040806D                 call    sub_410412
.text:00408072                 test    eax, eax
.text:00408074                 jns     short loc_408078
.text:00408076                 mov     esi, eax
.text:00408078
.text:00408078 loc_408078:                             ; CODE XREF: ArgApplyRules(int)+5AC↑j
.text:00408078                                         ; ArgApplyRules(int)+5D8↑j ...
.text:00408078                 cmp     dword_413D10, 0
.text:0040807F                 jz      short loc_4080A4
.text:00408081                 push    1
.text:00408083                 lea     edx, [ebp+var_8]
.text:00408086                 mov     [ebp+var_8], offset dword_4139B8
.text:0040808D                 mov     ecx, edi
.text:0040808F                 call    sub_410434
.text:00408094                 test    eax, eax
.text:00408096                 jns     short loc_40809A
.text:00408098                 mov     esi, eax
.text:0040809A
.text:0040809A loc_40809A:                             ; CODE XREF: ArgApplyRules(int)+626↑j
.text:0040809A                 mov     dword_4140C0, 1
.text:004080A4
.text:004080A4 loc_4080A4:                             ; CODE XREF: ArgApplyRules(int)+60F↑j
.text:004080A4                 cmp     dword_4149A0, 0
.text:004080AB                 jz      short loc_4080D0
.text:004080AD                 push    1
.text:004080AF                 lea     edx, [ebp+var_8]
.text:004080B2                 mov     [ebp+var_8], offset dword_4139B8
.text:004080B9                 mov     ecx, edi
.text:004080BB                 call    sub_410434
.text:004080C0                 test    eax, eax
.text:004080C2                 jns     short loc_4080C6
.text:004080C4                 mov     esi, eax
.text:004080C6
.text:004080C6 loc_4080C6:                             ; CODE XREF: ArgApplyRules(int)+652↑j
.text:004080C6                 mov     dword_4145B0, 1
.text:004080D0
.text:004080D0 loc_4080D0:                             ; CODE XREF: ArgApplyRules(int)+63B↑j
.text:004080D0                 cmp     dword_413E90, 0
.text:004080D7                 jz      short loc_40811B
.text:004080D9                 push    1
.text:004080DB                 lea     edx, [ebp+var_8]
.text:004080DE                 mov     [ebp+var_8], offset dword_4139B8
.text:004080E5                 mov     ecx, edi
.text:004080E7                 call    sub_410434
.text:004080EC                 test    eax, eax
.text:004080EE                 jns     short loc_4080F2
.text:004080F0                 mov     esi, eax
.text:004080F2
.text:004080F2 loc_4080F2:                             ; CODE XREF: ArgApplyRules(int)+67E↑j
.text:004080F2                 push    dword_41312C
.text:004080F8                 mov     edx, off_413128
.text:004080FE                 mov     ecx, edi
.text:00408100                 mov     dword_414930, 1
.text:0040810A                 call    sub_410571
.text:0040810F                 test    eax, eax
.text:00408111                 jns     short loc_408115
.text:00408113                 mov     esi, eax
.text:00408115
.text:00408115 loc_408115:                             ; CODE XREF: ArgApplyRules(int)+6A1↑j
.text:00408115                 mov     dword_414120, ebx
.text:0040811B
.text:0040811B loc_40811B:                             ; CODE XREF: ArgApplyRules(int)+667↑j
.text:0040811B                 cmp     dword_4142B0, 0
.text:00408122                 jz      short loc_40815B
.text:00408124                 push    1
.text:00408126                 lea     edx, [ebp+var_8]
.text:00408129                 mov     [ebp+var_8], offset dword_4140E8
.text:00408130                 mov     ecx, edi
.text:00408132                 call    sub_4105BC
.text:00408137                 test    eax, eax
.text:00408139                 jns     short loc_40813D
.text:0040813B                 mov     esi, eax
.text:0040813D
.text:0040813D loc_40813D:                             ; CODE XREF: ArgApplyRules(int)+6C9↑j
.text:0040813D                 xor     eax, eax
.text:0040813F                 inc     eax
.text:00408140                 cmp     dword_414130, 0
.text:00408147                 mov     dword_4139F0, eax
.text:0040814C                 jz      short loc_40815E
.text:0040814E                 mov     dword_413560, eax
.text:00408153                 mov     dword_413250, ebx
.text:00408159                 jmp     short loc_40815E
.text:0040815B ; ---------------------------------------------------------------------------
.text:0040815B
.text:0040815B loc_40815B:                             ; CODE XREF: ArgApplyRules(int)+6B2↑j
.text:0040815B                 xor     eax, eax
.text:0040815D                 inc     eax
.text:0040815E
.text:0040815E loc_40815E:                             ; CODE XREF: ArgApplyRules(int)+6DC↑j
.text:0040815E                                         ; ArgApplyRules(int)+6E9↑j
.text:0040815E                 cmp     dword_4131A0, 0
.text:00408165                 jz      loc_408248
.text:0040816B                 push    eax
.text:0040816C                 lea     edx, [ebp+var_8]
.text:0040816F                 mov     [ebp+var_8], offset dword_4139B8
.text:00408176                 mov     ecx, edi
.text:00408178                 call    sub_410434
.text:0040817D                 test    eax, eax
.text:0040817F                 jns     short loc_408183
.text:00408181                 mov     esi, eax
.text:00408183
.text:00408183 loc_408183:                             ; CODE XREF: ArgApplyRules(int)+70F↑j
.text:00408183                 push    dword_41312C
.text:00408189                 mov     edx, off_413128
.text:0040818F                 mov     ecx, edi
.text:00408191                 call    sub_4105BC
.text:00408196                 test    eax, eax
.text:00408198                 jns     short loc_40819C
.text:0040819A                 mov     esi, eax
.text:0040819C
.text:0040819C loc_40819C:                             ; CODE XREF: ArgApplyRules(int)+728↑j
.text:0040819C                 cmp     dword_413450, 0
.text:004081A3                 jnz     loc_408248
.text:004081A9                 cmp     dword_414A60, 0
.text:004081B0                 jnz     loc_408248
.text:004081B6                 cmp     dword_4146E0, 0
.text:004081BD                 jnz     loc_408248
.text:004081C3                 cmp     dword_4143D0, 0
.text:004081CA                 jnz     short loc_408248
.text:004081CC                 cmp     dword_414AC0, 0
.text:004081D3                 jnz     short loc_408248
.text:004081D5                 push    dword_4130FC
.text:004081DB                 mov     edx, off_4130F8
.text:004081E1                 call    sub_410412
.text:004081E6                 test    eax, eax
.text:004081E8                 jns     short loc_4081EC
.text:004081EA                 mov     esi, eax
.text:004081EC
.text:004081EC loc_4081EC:                             ; CODE XREF: ArgApplyRules(int)+778↑j
.text:004081EC                 push    dword_413114
.text:004081F2                 mov     edx, off_413110
.text:004081F8                 call    sub_410412
.text:004081FD                 test    eax, eax
.text:004081FF                 jns     short loc_408203
.text:00408201                 mov     esi, eax
.text:00408203
.text:00408203 loc_408203:                             ; CODE XREF: ArgApplyRules(int)+78F↑j
.text:00408203                 push    dword_413004
.text:00408209                 mov     edx, off_413000
.text:0040820F                 call    sub_410412
.text:00408214                 test    eax, eax
.text:00408216                 jns     short loc_40821A
.text:00408218                 mov     esi, eax
.text:0040821A
.text:0040821A loc_40821A:                             ; CODE XREF: ArgApplyRules(int)+7A6↑j
.text:0040821A                 push    dword_41301C
.text:00408220                 mov     edx, off_413018
.text:00408226                 call    sub_410412
.text:0040822B                 test    eax, eax
.text:0040822D                 jns     short loc_408231
.text:0040822F                 mov     esi, eax
.text:00408231
.text:00408231 loc_408231:                             ; CODE XREF: ArgApplyRules(int)+7BD↑j
.text:00408231                 push    dword_41304C
.text:00408237                 mov     edx, off_413048
.text:0040823D                 call    sub_410412
.text:00408242                 test    eax, eax
.text:00408244                 jns     short loc_408248
.text:00408246                 mov     esi, eax
.text:00408248
.text:00408248 loc_408248:                             ; CODE XREF: ArgApplyRules(int)+6F5↑j
.text:00408248                                         ; ArgApplyRules(int)+733↑j ...
.text:00408248                 cmp     dword_4137C0, 0
.text:0040824F                 jz      short loc_408271
.text:00408251                 push    2
.text:00408253                 lea     edx, [ebp+var_C]
.text:00408256                 mov     [ebp+var_C], offset dword_413BA8
.text:0040825D                 mov     ecx, edi
.text:0040825F                 mov     [ebp+var_8], offset dword_4139B8
.text:00408266                 call    sub_410434
.text:0040826B                 test    eax, eax
.text:0040826D                 jns     short loc_408271
.text:0040826F                 mov     esi, eax
.text:00408271
.text:00408271 loc_408271:                             ; CODE XREF: ArgApplyRules(int)+7DF↑j
.text:00408271                                         ; ArgApplyRules(int)+7FD↑j
.text:00408271                 cmp     dword_413A60, 0
.text:00408278                 jz      short loc_4082BB
.text:0040827A                 push    2
.text:0040827C                 lea     edx, [ebp+var_C]
.text:0040827F                 mov     [ebp+var_C], offset dword_413BA8
.text:00408286                 mov     ecx, edi
.text:00408288                 mov     [ebp+var_8], offset dword_4139B8
.text:0040828F                 call    sub_410434
.text:00408294                 test    eax, eax
.text:00408296                 jns     short loc_40829A
.text:00408298                 mov     esi, eax
.text:0040829A
.text:0040829A loc_40829A:                             ; CODE XREF: ArgApplyRules(int)+826↑j
.text:0040829A                 mov     [ebp+var_C], offset dword_4148F8
.text:004082A1                 mov     ecx, ebx
.text:004082A3                 mov     [ebp+var_8], offset dword_414578
.text:004082AA
.text:004082AA loc_4082AA:                             ; CODE XREF: ArgApplyRules(int)+849↓j
.text:004082AA                 mov     eax, [ebp+ecx*4+var_C]
.text:004082AE                 inc     ecx
.text:004082AF                 mov     dword ptr [eax+38h], 1
.text:004082B6                 cmp     ecx, 2
.text:004082B9                 jb      short loc_4082AA
.text:004082BB
.text:004082BB loc_4082BB:                             ; CODE XREF: ArgApplyRules(int)+808↑j
.text:004082BB                 cmp     dword_413E90, 0
.text:004082C2                 jnz     short loc_4082D1
.text:004082C4                 cmp     dword_4131A0, 0
.text:004082CB                 jz      loc_408355
.text:004082D1
.text:004082D1 loc_4082D1:                             ; CODE XREF: ArgApplyRules(int)+852↑j
.text:004082D1                 push    dword_413034
.text:004082D7                 mov     edx, off_413030
.text:004082DD                 call    sub_410412
.text:004082E2                 test    eax, eax
.text:004082E4                 jns     short loc_4082E8
.text:004082E6                 mov     esi, eax
.text:004082E8
.text:004082E8 loc_4082E8:                             ; CODE XREF: ArgApplyRules(int)+874↑j
.text:004082E8                 cmp     dword_413260, 0
.text:004082EF                 jnz     short loc_408355
.text:004082F1                 xor     edx, edx
.text:004082F3                 mov     [ebp+var_20], offset dword_414578
.text:004082FA                 mov     [ebp+var_1C], offset dword_414448
.text:00408301                 mov     ecx, ebx
.text:00408303                 mov     [ebp+var_18], offset dword_413708
.text:0040830A                 inc     edx
.text:0040830B                 mov     [ebp+var_14], offset dword_414828
.text:00408312                 mov     [ebp+var_10], offset dword_4132D8
.text:00408319                 mov     [ebp+var_C], offset dword_414758
.text:00408320                 mov     [ebp+var_8], offset dword_414028
.text:00408327
.text:00408327 loc_408327:                             ; CODE XREF: ArgApplyRules(int)+8C2↓j
.text:00408327                 mov     eax, [ebp+ecx*4+var_20]
.text:0040832B                 inc     ecx
.text:0040832C                 mov     [eax+38h], edx
.text:0040832F                 cmp     ecx, 7
.text:00408332                 jb      short loc_408327
.text:00408334                 cmp     dword_414870, 0
.text:0040833B                 jz      short loc_408355
.text:0040833D                 push    edx
.text:0040833E                 lea     edx, [ebp+var_8]
.text:00408341                 mov     [ebp+var_8], offset dword_413708
.text:00408348                 mov     ecx, edi
.text:0040834A                 call    sub_410434
.text:0040834F                 test    eax, eax
.text:00408351                 jns     short loc_408355
.text:00408353                 mov     esi, eax
.text:00408355
.text:00408355 loc_408355:                             ; CODE XREF: ArgApplyRules(int)+85B↑j
.text:00408355                                         ; ArgApplyRules(int)+87F↑j ...
.text:00408355                 cmp     dword_413450, 0
.text:0040835C                 jz      short loc_40837E
.text:0040835E                 cmp     dword_413440, 0
.text:00408365                 jz      short loc_40837E
.text:00408367                 push    dword_4130FC
.text:0040836D                 mov     edx, off_4130F8
.text:00408373                 call    sub_410412
.text:00408378                 test    eax, eax
.text:0040837A                 jns     short loc_40837E
.text:0040837C                 mov     esi, eax
.text:0040837E
.text:0040837E loc_40837E:                             ; CODE XREF: ArgApplyRules(int)+8EC↑j
.text:0040837E                                         ; ArgApplyRules(int)+8F5↑j ...
.text:0040837E                 cmp     dword_414A60, 0
.text:00408385                 jz      short loc_4083A7
.text:00408387                 cmp     dword_414A50, 0
.text:0040838E                 jz      short loc_4083A7
.text:00408390                 push    dword_413114
.text:00408396                 mov     edx, off_413110
.text:0040839C                 call    sub_410412
.text:004083A1                 test    eax, eax
.text:004083A3                 jns     short loc_4083A7
.text:004083A5                 mov     esi, eax
.text:004083A7
.text:004083A7 loc_4083A7:                             ; CODE XREF: ArgApplyRules(int)+915↑j
.text:004083A7                                         ; ArgApplyRules(int)+91E↑j ...
.text:004083A7                 cmp     dword_4146E0, 0
.text:004083AE                 jz      short loc_4083D0
.text:004083B0                 cmp     dword_4146D0, 0
.text:004083B7                 jz      short loc_4083D0
.text:004083B9                 push    dword_413004
.text:004083BF                 mov     edx, off_413000
.text:004083C5                 call    sub_410412
.text:004083CA                 test    eax, eax
.text:004083CC                 jns     short loc_4083D0
.text:004083CE                 mov     esi, eax
.text:004083D0
.text:004083D0 loc_4083D0:                             ; CODE XREF: ArgApplyRules(int)+93E↑j
.text:004083D0                                         ; ArgApplyRules(int)+947↑j ...
.text:004083D0                 cmp     dword_4143D0, 0
.text:004083D7                 jz      short loc_4083F9
.text:004083D9                 cmp     dword_4143C0, 0
.text:004083E0                 jz      short loc_4083F9
.text:004083E2                 push    dword_41301C
.text:004083E8                 mov     edx, off_413018
.text:004083EE                 call    sub_410412
.text:004083F3                 test    eax, eax
.text:004083F5                 jns     short loc_4083F9
.text:004083F7                 mov     esi, eax
.text:004083F9
.text:004083F9 loc_4083F9:                             ; CODE XREF: ArgApplyRules(int)+967↑j
.text:004083F9                                         ; ArgApplyRules(int)+970↑j ...
.text:004083F9                 cmp     dword_414AC0, 0
.text:00408400                 jz      short loc_408422
.text:00408402                 cmp     dword_414AB0, 0
.text:00408409                 jz      short loc_408422
.text:0040840B                 push    dword_41304C
.text:00408411                 mov     edx, off_413048
.text:00408417                 call    sub_410412
.text:0040841C                 test    eax, eax
.text:0040841E                 jns     short loc_408422
.text:00408420                 mov     esi, eax
.text:00408422
.text:00408422 loc_408422:                             ; CODE XREF: ArgApplyRules(int)+990↑j
.text:00408422                                         ; ArgApplyRules(int)+999↑j ...
.text:00408422                 cmp     dword_413450, 0
.text:00408429                 jnz     short loc_408446
.text:0040842B                 cmp     dword_4146E0, 0
.text:00408432                 jnz     short loc_408446
.text:00408434                 cmp     dword_4143D0, 0
.text:0040843B                 jnz     short loc_408446
.text:0040843D                 cmp     dword_414AC0, 0
.text:00408444                 jz      short loc_40844C
.text:00408446
.text:00408446 loc_408446:                             ; CODE XREF: ArgApplyRules(int)+9B9↑j
.text:00408446                                         ; ArgApplyRules(int)+9C2↑j ...
.text:00408446                 mov     dword_413250, ebx
.text:0040844C
.text:0040844C loc_40844C:                             ; CODE XREF: ArgApplyRules(int)+9D4↑j
.text:0040844C                 mov     ecx, [ebp+var_4]
.text:0040844F                 mov     eax, esi
.text:00408451                 pop     edi
.text:00408452                 pop     esi
.text:00408453                 xor     ecx, ebp        ; StackCookie
.text:00408455                 mov     uID, 293h
.text:0040845F                 mov     dword_413414, 325h
.text:00408469                 mov     dword_414A84, 326h
.text:00408473                 mov     dword_414394, 327h
.text:0040847D                 mov     dword_4146A4, 328h
.text:00408487                 mov     dword_414A24, 324h
.text:00408491                 mov     dword_413C14, 321h
.text:0040849B                 mov     dword_413164, 323h
.text:004084A5                 mov     dword_413224, 320h
.text:004084AF                 mov     dword_413C74, 329h
.text:004084B9                 mov     dword_414644, 32Ah
.text:004084C3                 mov     dword_4140F4, 32Bh
.text:004084CD                 mov     dword_413F14, 32Ch
.text:004084D7                 pop     ebx
.text:004084D8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004084DD                 mov     esp, ebp
.text:004084DF                 pop     ebp
.text:004084E0                 retn
.text:004084E0 ?ArgApplyRules@@YGJH@Z endp
.text:004084E0
.text:004084E1
.text:004084E1 ; =============== S U B R O U T I N E =======================================
.text:004084E1
.text:004084E1 ; Attributes: bp-based frame fuzzy-sp info_from_lumina
.text:004084E1
.text:004084E1 _wmain          proc near               ; CODE XREF: start-BB↓p
.text:004084E1
.text:004084E1 anonymous_0     = byte ptr -470h
.text:004084E1 var_450         = dword ptr -450h
.text:004084E1 ppv             = dword ptr -44Ch
.text:004084E1 var_448         = dword ptr -448h
.text:004084E1 var_444         = dword ptr -444h
.text:004084E1 String2         = dword ptr -440h
.text:004084E1 lpMem           = dword ptr -43Ch
.text:004084E1 var_438         = dword ptr -438h
.text:004084E1 bstrString      = dword ptr -434h
.text:004084E1 var_430         = dword ptr -430h
.text:004084E1 var_42C         = dword ptr -42Ch
.text:004084E1 var_428         = dword ptr -428h
.text:004084E1 uID             = dword ptr -424h
.text:004084E1 nSize           = dword ptr -420h
.text:004084E1 var_41C         = dword ptr -41Ch
.text:004084E1 pvarg           = VARIANTARG ptr -418h
.text:004084E1 NameBuffer      = word ptr -408h
.text:004084E1 var_4           = dword ptr -4
.text:004084E1 arg_0           = dword ptr  8
.text:004084E1 arg_4           = dword ptr  0Ch
.text:004084E1
.text:004084E1                 mov     edi, edi
.text:004084E3                 push    ebp
.text:004084E4                 mov     ebp, esp
.text:004084E6                 and     esp, 0FFFFFFF8h
.text:004084E9                 sub     esp, 454h
.text:004084EF                 mov     eax, ___security_cookie
.text:004084F4                 xor     eax, esp
.text:004084F6                 mov     [esp+454h+var_4], eax
.text:004084FD                 push    ebx
.text:004084FE                 push    esi
.text:004084FF                 mov     esi, [ebp+arg_4]
.text:00408502                 xor     eax, eax
.text:00408504                 push    edi             ; char
.text:00408505                 push    2
.text:00408507                 mov     [esp+464h+ppv], eax
.text:0040850B                 mov     [esp+464h+var_448], eax
.text:0040850F                 mov     [esp+464h+var_430], eax
.text:00408513                 mov     [esp+464h+var_450], eax
.text:00408517                 mov     [esp+464h+var_444], eax
.text:0040851B                 mov     [esp+464h+uID], eax
.text:0040851F                 mov     [esp+464h+var_41C], eax
.text:00408523                 lea     eax, [esp+464h+pvarg]
.text:00408527                 pop     ebx
.text:00408528                 push    eax             ; pvarg
.text:00408529                 call    ds:VariantInit
.text:0040852F                 xor     eax, eax
.text:00408531                 lea     edi, [esp+460h+String2]
.text:00408535                 stosd
.text:00408536                 stosd
.text:00408537                 stosd
.text:00408538                 stosd
.text:00408539                 xor     eax, eax
.text:0040853B                 push    eax             ; HeapInformationLength
.text:0040853C                 push    eax             ; HeapInformation
.text:0040853D                 push    1               ; HeapInformationClass
.text:0040853F                 push    eax             ; HeapHandle
.text:00408540                 mov     [esp+470h+var_42C], eax
.text:00408544                 mov     [esp+470h+var_428], eax
.text:00408548                 call    ds:HeapSetInformation
.text:0040854E                 push    ecx
.text:0040854F                 push    ecx
.text:00408550                 mov     ecx, [ebp+arg_0]
.text:00408553                 mov     edx, esi
.text:00408555                 call    sub_40FF6D
.text:0040855A                 mov     edi, eax
.text:0040855C                 xor     esi, esi
.text:0040855E                 test    edi, edi
.text:00408560                 js      loc_408CAA
.text:00408566                 cmp     edi, 1
.text:00408569                 jz      loc_408CAA
.text:0040856F                 push    esi             ; dwCoInit
.text:00408570                 push    esi             ; pvReserved
.text:00408571                 call    ds:CoInitializeEx
.text:00408577                 mov     edi, eax
.text:00408579                 test    edi, edi
.text:0040857B                 js      loc_408CAA
.text:00408581                 mov     [esp+460h+var_41C], 1
.text:00408589                 call    ?InitializeComSecurity@@YGJXZ ; InitializeComSecurity(void)
.text:0040858E                 mov     edi, eax
.text:00408590                 test    edi, edi
.text:00408592                 js      loc_408CAA
.text:00408598                 cmp     dword_413B20, esi
.text:0040859E                 jz      short loc_4085BF
.text:004085A0                 push    psz             ; psz
.text:004085A6                 call    ds:SysAllocString
.text:004085AC                 mov     bstrString, eax
.text:004085B1                 test    eax, eax
.text:004085B3                 jnz     short loc_4085BF
.text:004085B5
.text:004085B5 loc_4085B5:                             ; CODE XREF: _wmain+363↓j
.text:004085B5                 mov     edi, 8007000Eh
.text:004085BA                 jmp     loc_408CAA
.text:004085BF ; ---------------------------------------------------------------------------
.text:004085BF
.text:004085BF loc_4085BF:                             ; CODE XREF: _wmain+BD↑j
.text:004085BF                                         ; _wmain+D2↑j
.text:004085BF                 lea     ecx, [esp+460h+String2]
.text:004085C3                 call    ?GetNamespace@@YGJPAU_LOGMAN_NS@@@Z ; GetNamespace(_LOGMAN_NS *)
.text:004085C8                 mov     edi, eax
.text:004085CA                 test    edi, edi
.text:004085CC                 js      loc_408CAA
.text:004085D2                 mov     esi, [esp+460h+String2]
.text:004085D6                 test    esi, esi
.text:004085D8                 jz      short loc_40860E
.text:004085DA                 push    esi             ; String2
.text:004085DB                 push    offset String1  ; "session"
.text:004085E0                 call    ds:__imp__wcsicmp
.text:004085E6                 neg     eax
.text:004085E8                 push    esi             ; String2
.text:004085E9                 sbb     eax, eax
.text:004085EB                 inc     eax
.text:004085EC                 push    offset aAutosession ; "autosession"
.text:004085F1                 mov     dword_414F08, eax
.text:004085F6                 call    ds:__imp__wcsicmp
.text:004085FC                 mov     ecx, dword_414F08
.text:00408602                 add     esp, 10h
.text:00408605                 neg     eax
.text:00408607                 sbb     eax, eax
.text:00408609                 inc     eax
.text:0040860A                 xor     edx, edx
.text:0040860C                 jmp     short loc_40861E
.text:0040860E ; ---------------------------------------------------------------------------
.text:0040860E
.text:0040860E loc_40860E:                             ; CODE XREF: _wmain+F7↑j
.text:0040860E                 mov     ecx, dword_413260
.text:00408614                 xor     edx, edx
.text:00408616                 mov     dword_414F08, ecx
.text:0040861C                 mov     eax, edx
.text:0040861E
.text:0040861E loc_40861E:                             ; CODE XREF: _wmain+12B↑j
.text:0040861E                 mov     esi, dword_413E90
.text:00408624                 test    eax, eax
.text:00408626                 mov     dword_414F04, eax
.text:0040862B                 mov     eax, dword_413C50
.text:00408630                 jnz     short loc_408651
.text:00408632                 test    ecx, ecx
.text:00408634                 jnz     short loc_408651
.text:00408636                 mov     dword_414F00, edx
.text:0040863C
.text:0040863C loc_40863C:                             ; CODE XREF: _wmain+17C↓j
.text:0040863C                                         ; _wmain+185↓j
.text:0040863C                 test    esi, esi
.text:0040863E                 jnz     loc_408C00
.text:00408644                 test    eax, eax
.text:00408646                 jz      short loc_40864C
.text:00408648                 test    ecx, ecx
.text:0040864A                 jnz     short loc_40866A
.text:0040864C
.text:0040864C loc_40864C:                             ; CODE XREF: _wmain+165↑j
.text:0040864C                 xor     edx, edx
.text:0040864E                 inc     edx
.text:0040864F                 jmp     short loc_408672
.text:00408651 ; ---------------------------------------------------------------------------
.text:00408651
.text:00408651 loc_408651:                             ; CODE XREF: _wmain+14F↑j
.text:00408651                                         ; _wmain+153↑j
.text:00408651                 mov     dword_414F00, 1
.text:0040865B                 test    ecx, ecx
.text:0040865D                 jz      short loc_40863C
.text:0040865F                 cmp     dword_414680, 0
.text:00408666                 jz      short loc_40863C
.text:00408668                 mov     edx, ebx
.text:0040866A
.text:0040866A loc_40866A:                             ; CODE XREF: _wmain+169↑j
.text:0040866A                 test    esi, esi
.text:0040866C                 jnz     loc_408C00
.text:00408672
.text:00408672 loc_408672:                             ; CODE XREF: _wmain+16E↑j
.text:00408672                 test    ecx, ecx
.text:00408674                 jz      short loc_40867E
.text:00408676                 test    eax, eax
.text:00408678                 jnz     loc_408C00
.text:0040867E
.text:0040867E loc_40867E:                             ; CODE XREF: _wmain+193↑j
.text:0040867E                 cmp     dword_4131A0, 0
.text:00408685                 jz      loc_408742
.text:0040868B                 cmp     dword_4132C0, 0
.text:00408692                 lea     eax, [esp+460h+var_448]
.text:00408696                 push    eax
.text:00408697                 lea     eax, [esp+464h+ppv]
.text:0040869B                 lea     ecx, [esp+464h+String2]
.text:0040869F                 push    eax
.text:004086A0                 jz      short loc_4086F5
.text:004086A2                 call    ?GetDataSet@@YGJPAU_LOGMAN_NS@@W4GETMODE@@PAPAUIDataCollectorSet@@PAPAUIDataCollector@@@Z ; GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)
.text:004086A7                 mov     edi, eax
.text:004086A9                 test    edi, edi
.text:004086AB                 js      loc_408CA8
.text:004086B1                 mov     edx, [esp+460h+var_448]
.text:004086B5                 mov     ecx, [esp+460h+ppv]
.text:004086B9                 call    sub_40BD7F
.text:004086BE                 mov     edi, eax
.text:004086C0                 test    edi, edi
.text:004086C2                 js      loc_408CA8
.text:004086C8                 lea     ecx, [esp+460h+var_444]
.text:004086CC                 push    ecx
.text:004086CD                 push    20h ; ' '
.text:004086CF
.text:004086CF loc_4086CF:                             ; CODE XREF: _wmain+25F↓j
.text:004086CF                                         ; _wmain+664↓j
.text:004086CF                 mov     eax, [esp+468h+ppv]
.text:004086D3                 push    bstrString
.text:004086D9                 push    [esp+46Ch+bstrString]
.text:004086DD                 mov     esi, [eax]
.text:004086DF                 push    eax
.text:004086E0                 mov     esi, [esi+0F0h]
.text:004086E6                 mov     ecx, esi
.text:004086E8                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:004086EE                 call    esi
.text:004086F0                 jmp     loc_408CA6
.text:004086F5 ; ---------------------------------------------------------------------------
.text:004086F5
.text:004086F5 loc_4086F5:                             ; CODE XREF: _wmain+1BF↑j
.text:004086F5                 call    ?GetDataSet@@YGJPAU_LOGMAN_NS@@W4GETMODE@@PAPAUIDataCollectorSet@@PAPAUIDataCollector@@@Z ; GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)
.text:004086FA                 mov     edi, eax
.text:004086FC                 test    edi, edi
.text:004086FE                 js      loc_408CA8
.text:00408704                 mov     edx, [esp+460h+var_448]
.text:00408708                 mov     ecx, [esp+460h+ppv]
.text:0040870C                 call    sub_40BF14
.text:00408711                 mov     edi, eax
.text:00408713                 test    edi, edi
.text:00408715                 js      loc_408CA8
.text:0040871B                 mov     ecx, [esp+460h+ppv]
.text:0040871F                 call    sub_4096BC
.text:00408724                 mov     edi, eax
.text:00408726                 test    edi, edi
.text:00408728                 js      loc_408CA8
.text:0040872E                 cmp     dword_414F08, 0
.text:00408735                 jz      short loc_40873A
.text:00408737                 push    12h
.text:00408739                 pop     ebx
.text:0040873A
.text:0040873A loc_40873A:                             ; CODE XREF: _wmain+254↑j
.text:0040873A                 lea     ecx, [esp+460h+var_444]
.text:0040873E                 push    ecx
.text:0040873F                 push    ebx
.text:00408740                 jmp     short loc_4086CF
.text:00408742 ; ---------------------------------------------------------------------------
.text:00408742
.text:00408742 loc_408742:                             ; CODE XREF: _wmain+1A4↑j
.text:00408742                 test    eax, eax
.text:00408744                 jz      loc_40888D
.text:0040874A                 xor     esi, esi
.text:0040874C                 lea     eax, [esp+460h+ppv]
.text:00408750                 push    esi
.text:00408751                 push    eax
.text:00408752                 lea     ecx, [esp+468h+String2]
.text:00408756                 call    ?GetDataSet@@YGJPAU_LOGMAN_NS@@W4GETMODE@@PAPAUIDataCollectorSet@@PAPAUIDataCollector@@@Z ; GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)
.text:0040875B                 mov     edi, eax
.text:0040875D                 test    edi, edi
.text:0040875F                 js      loc_408CAA
.text:00408765                 mov     ecx, [esp+460h+ppv]
.text:00408769                 xor     eax, eax
.text:0040876B                 cmp     dword_4140D0, eax
.text:00408771                 setnz   al
.text:00408774                 mov     esi, [ecx]
.text:00408776                 dec     eax
.text:00408777                 push    eax
.text:00408778                 push    ecx
.text:00408779                 mov     esi, [esi+0F8h]
.text:0040877F                 mov     ecx, esi
.text:00408781                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408787                 call    esi
.text:00408789                 mov     edi, eax
.text:0040878B                 cmp     edi, 8007051Fh
.text:00408791                 jnz     loc_408CA8
.text:00408797                 push    [esp+460h+String2] ; String2
.text:0040879B                 push    offset aSystem  ; "system"
.text:004087A0                 call    ds:__imp__wcsicmp
.text:004087A6                 pop     ecx
.text:004087A7                 pop     ecx
.text:004087A8                 test    eax, eax
.text:004087AA                 jnz     loc_408CA8
.text:004087B0                 cmp     dword_4140D0, eax
.text:004087B6                 jnz     loc_408CA8
.text:004087BC                 cmp     dword_414940, eax
.text:004087C2                 jnz     loc_408CA8
.text:004087C8                 lea     eax, [esp+460h+nSize]
.text:004087CC                 mov     [esp+460h+nSize], 200h
.text:004087D4                 push    eax             ; nSize
.text:004087D5                 lea     eax, [esp+464h+NameBuffer]
.text:004087D9                 push    eax             ; lpNameBuffer
.text:004087DA                 push    ebx             ; NameFormat
.text:004087DB                 call    ds:GetUserNameExW
.text:004087E1                 test    al, al
.text:004087E3                 jnz     short loc_4087FE
.text:004087E5                 call    ds:GetLastError
.text:004087EB                 mov     edi, eax
.text:004087ED                 test    edi, edi
.text:004087EF                 jle     short loc_4087FA
.text:004087F1                 movzx   edi, di
.text:004087F4                 or      edi, 80070000h
.text:004087FA
.text:004087FA loc_4087FA:                             ; CODE XREF: _wmain+30E↑j
.text:004087FA                 xor     esi, esi
.text:004087FC                 jmp     short loc_408802
.text:004087FE ; ---------------------------------------------------------------------------
.text:004087FE
.text:004087FE loc_4087FE:                             ; CODE XREF: _wmain+302↑j
.text:004087FE                 xor     esi, esi
.text:00408800                 mov     edi, esi
.text:00408802
.text:00408802 loc_408802:                             ; CODE XREF: _wmain+31B↑j
.text:00408802                 test    edi, edi
.text:00408804                 js      loc_408CA8
.text:0040880A                 push    offset asc_4031FC ; " * "
.text:0040880F                 mov     edx, 200h
.text:00408814                 lea     ecx, [esp+464h+NameBuffer]
.text:00408818                 call    sub_407955
.text:0040881D                 mov     edi, eax
.text:0040881F                 test    edi, edi
.text:00408821                 js      loc_408CA8
.text:00408827                 lea     ecx, [esp+460h+NameBuffer]
.text:0040882B                 mov     dword_4145C0, 1
.text:00408835                 call    sub_40EDB8
.text:0040883A                 mov     edx, eax
.text:0040883C                 mov     dword_4145D4, edx
.text:00408842                 test    edx, edx
.text:00408844                 jz      loc_4085B5
.text:0040884A                 mov     ecx, edx
.text:0040884C                 xor     edi, edi
.text:0040884E                 lea     esi, [ecx+2]
.text:00408851
.text:00408851 loc_408851:                             ; CODE XREF: _wmain+378↓j
.text:00408851                 mov     ax, [ecx]
.text:00408854                 add     ecx, ebx
.text:00408856                 cmp     ax, di
.text:00408859                 jnz     short loc_408851
.text:0040885B                 sub     ecx, esi
.text:0040885D                 xor     eax, eax
.text:0040885F                 sar     ecx, 1
.text:00408861                 mov     [edx+ecx*2-2], ax
.text:00408866                 xor     edx, edx
.text:00408868                 mov     ecx, [esp+460h+nSize]
.text:0040886C                 mov     eax, dword_4145D4
.text:00408871                 mov     [eax+ecx*2], dx
.text:00408875                 mov     ecx, [esp+460h+ppv]
.text:00408879                 call    sub_4096BC
.text:0040887E                 mov     edi, eax
.text:00408880                 test    edi, edi
.text:00408882                 js      loc_408CA8
.text:00408888                 jmp     loc_408C8D
.text:0040888D ; ---------------------------------------------------------------------------
.text:0040888D
.text:0040888D loc_40888D:                             ; CODE XREF: _wmain+263↑j
.text:0040888D                 cmp     dword_413D10, 0
.text:00408894                 jz      short loc_4088D0
.text:00408896                 xor     esi, esi
.text:00408898                 lea     eax, [esp+460h+ppv]
.text:0040889C                 push    esi
.text:0040889D                 push    eax
.text:0040889E                 lea     ecx, [esp+468h+String2]
.text:004088A2                 call    ?GetDataSet@@YGJPAU_LOGMAN_NS@@W4GETMODE@@PAPAUIDataCollectorSet@@PAPAUIDataCollector@@@Z ; GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)
.text:004088A7                 mov     edi, eax
.text:004088A9                 test    edi, edi
.text:004088AB                 js      loc_408CAA
.text:004088B1                 mov     ecx, [esp+460h+ppv]
.text:004088B5                 xor     eax, eax
.text:004088B7                 cmp     dword_4140D0, eax
.text:004088BD                 setnz   al
.text:004088C0                 mov     esi, [ecx]
.text:004088C2                 dec     eax
.text:004088C3                 push    eax
.text:004088C4                 push    ecx
.text:004088C5                 mov     esi, [esi+0FCh]
.text:004088CB                 jmp     loc_408C9C
.text:004088D0 ; ---------------------------------------------------------------------------
.text:004088D0
.text:004088D0 loc_4088D0:                             ; CODE XREF: _wmain+3B3↑j
.text:004088D0                 cmp     dword_4142B0, 0
.text:004088D7                 jz      loc_408A12
.text:004088DD                 cmp     dword_414130, 0
.text:004088E4                 jz      short loc_40895C
.text:004088E6                 cmp     dword_413A00, 0
.text:004088ED                 jnz     short loc_408912
.text:004088EF                 lea     ecx, [esp+460h+var_450]
.text:004088F3                 call    sub_40CB46
.text:004088F8                 mov     ebx, [esp+460h+var_450]
.text:004088FC                 mov     edi, eax
.text:004088FE                 test    edi, edi
.text:00408900                 js      short loc_40890B
.text:00408902                 mov     ecx, ebx
.text:00408904                 call    sub_40D809
.text:00408909                 mov     edi, eax
.text:0040890B
.text:0040890B loc_40890B:                             ; CODE XREF: _wmain+41F↑j
.text:0040890B                 xor     esi, esi
.text:0040890D                 jmp     loc_408CAE
.text:00408912 ; ---------------------------------------------------------------------------
.text:00408912
.text:00408912 loc_408912:                             ; CODE XREF: _wmain+40C↑j
.text:00408912                 mov     ecx, pszDest    ; psz
.text:00408918                 lea     edx, [esp+460h+var_42C]
.text:0040891C                 call    sub_40CA6F
.text:00408921                 mov     edi, eax
.text:00408923                 test    edi, edi
.text:00408925                 js      loc_408CA8
.text:0040892B                 mov     edx, pszDest
.text:00408931                 lea     eax, [esp+460h+uID]
.text:00408935                 push    eax
.text:00408936                 push    1
.text:00408938                 lea     ecx, [esp+468h+var_42C]
.text:0040893C                 call    ?DisplayProvider@@YGJPAU_PLAPROVIDER@@PBGHPAH@Z ; DisplayProvider(_PLAPROVIDER *,ushort const *,int,int *)
.text:00408941                 mov     edi, eax
.text:00408943                 test    edi, edi
.text:00408945                 js      loc_408CA8
.text:0040894B                 mov     edx, offset asc_403204 ; "\n"
.text:00408950                 xor     ecx, ecx
.text:00408952                 call    sub_40E5A2
.text:00408957                 jmp     loc_408CA8
.text:0040895C ; ---------------------------------------------------------------------------
.text:0040895C
.text:0040895C loc_40895C:                             ; CODE XREF: _wmain+403↑j
.text:0040895C                 cmp     dword_413A00, 0
.text:00408963                 jz      loc_408A04
.text:00408969                 mov     ecx, [esp+460h+lpMem]
.text:0040896D                 mov     eax, offset asc_403208 ; "*"
.text:00408972
.text:00408972 loc_408972:                             ; CODE XREF: _wmain+4B1↓j
.text:00408972                 mov     si, [eax]
.text:00408975                 cmp     si, [ecx]
.text:00408978                 jnz     short loc_40899A
.text:0040897A                 test    si, si
.text:0040897D                 jz      short loc_408994
.text:0040897F                 mov     si, [eax+2]
.text:00408983                 cmp     si, [ecx+2]
.text:00408987                 jnz     short loc_40899A
.text:00408989                 add     eax, 4
.text:0040898C                 add     ecx, 4
.text:0040898F                 test    si, si
.text:00408992                 jnz     short loc_408972
.text:00408994
.text:00408994 loc_408994:                             ; CODE XREF: _wmain+49C↑j
.text:00408994                 xor     esi, esi
.text:00408996                 mov     eax, esi
.text:00408998                 jmp     short loc_4089A1
.text:0040899A ; ---------------------------------------------------------------------------
.text:0040899A
.text:0040899A loc_40899A:                             ; CODE XREF: _wmain+497↑j
.text:0040899A                                         ; _wmain+4A6↑j
.text:0040899A                 sbb     eax, eax
.text:0040899C                 or      eax, 1
.text:0040899F                 xor     esi, esi
.text:004089A1
.text:004089A1 loc_4089A1:                             ; CODE XREF: _wmain+4B7↑j
.text:004089A1                 test    eax, eax
.text:004089A3                 jz      short loc_408A04
.text:004089A5                 lea     eax, [esp+460h+var_448]
.text:004089A9                 push    eax
.text:004089AA                 lea     eax, [esp+464h+ppv]
.text:004089AE                 push    eax
.text:004089AF                 lea     ecx, [esp+468h+String2]
.text:004089B3                 call    ?GetDataSet@@YGJPAU_LOGMAN_NS@@W4GETMODE@@PAPAUIDataCollectorSet@@PAPAUIDataCollector@@@Z ; GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)
.text:004089B8                 mov     edi, eax
.text:004089BA                 test    edi, edi
.text:004089BC                 js      loc_408CAA
.text:004089C2                 cmp     dword_414680, 0
.text:004089C9                 jz      short loc_4089F6
.text:004089CB                 mov     eax, [esp+460h+ppv]
.text:004089CF                 push    bstrString
.text:004089D5                 push    [esp+464h+bstrString]
.text:004089D9                 mov     ecx, [eax]
.text:004089DB                 push    eax
.text:004089DC                 mov     esi, [ecx+0ECh]
.text:004089E2                 mov     ecx, esi
.text:004089E4                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:004089EA                 call    esi
.text:004089EC                 mov     edi, eax
.text:004089EE                 test    edi, edi
.text:004089F0                 js      loc_408CA8
.text:004089F6
.text:004089F6 loc_4089F6:                             ; CODE XREF: _wmain+4E8↑j
.text:004089F6                 mov     ecx, [esp+460h+ppv]
.text:004089FA                 call    sub_40D6AA
.text:004089FF                 jmp     loc_408CA6
.text:00408A04 ; ---------------------------------------------------------------------------
.text:00408A04
.text:00408A04 loc_408A04:                             ; CODE XREF: _wmain+482↑j
.text:00408A04                                         ; _wmain+4C2↑j
.text:00408A04                 lea     ecx, [esp+460h+String2]
.text:00408A08                 call    ?DisplayDataSets@@YGJPAU_LOGMAN_NS@@@Z ; DisplayDataSets(_LOGMAN_NS *)
.text:00408A0D                 jmp     loc_408CA6
.text:00408A12 ; ---------------------------------------------------------------------------
.text:00408A12
.text:00408A12 loc_408A12:                             ; CODE XREF: _wmain+3F6↑j
.text:00408A12                 cmp     dword_4149A0, 0
.text:00408A19                 jz      loc_408B4A
.text:00408A1F                 lea     eax, [esp+460h+var_448]
.text:00408A23                 push    eax
.text:00408A24                 lea     eax, [esp+464h+ppv]
.text:00408A28                 push    eax
.text:00408A29                 lea     ecx, [esp+468h+String2]
.text:00408A2D                 call    ?GetDataSet@@YGJPAU_LOGMAN_NS@@W4GETMODE@@PAPAUIDataCollectorSet@@PAPAUIDataCollector@@@Z ; GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)
.text:00408A32                 mov     edi, eax
.text:00408A34                 test    edi, edi
.text:00408A36                 js      loc_408CA8
.text:00408A3C                 cmp     [esp+460h+var_438], 0
.text:00408A41                 mov     eax, [esp+460h+ppv]
.text:00408A45                 mov     ecx, [eax]
.text:00408A47                 jnz     short loc_408AB7
.text:00408A49                 mov     esi, [ecx+0F4h]
.text:00408A4F                 mov     ecx, esi
.text:00408A51                 push    eax
.text:00408A52                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408A58                 call    esi
.text:00408A5A                 mov     edi, eax
.text:00408A5C                 cmp     di, 0AAh ; 'ª'
.text:00408A61                 jnz     loc_408CA8
.text:00408A67                 mov     ecx, [esp+460h+ppv]
.text:00408A6B                 lea     edx, [esp+460h+uID]
.text:00408A6F                 call    sub_40CD4A
.text:00408A74                 xor     esi, esi
.text:00408A76                 test    eax, eax
.text:00408A78                 js      loc_408CAA
.text:00408A7E                 push    200h            ; cchBufferMax
.text:00408A83                 lea     eax, [esp+464h+NameBuffer]
.text:00408A87                 push    eax             ; lpBuffer
.text:00408A88                 push    [esp+468h+uID]  ; uID
.text:00408A8C                 push    esi             ; hInstance
.text:00408A8D                 call    ds:LoadStringW
.text:00408A93                 test    eax, eax
.text:00408A95                 jz      loc_408CAA
.text:00408A9B                 lea     eax, [esp+460h+NameBuffer]
.text:00408A9F                 push    eax
.text:00408AA0                 push    [esp+464h+lpMem] ; char
.text:00408AA4                 push    28Eh            ; uID
.text:00408AA9                 push    esi             ; int
.text:00408AAA                 call    sub_40E7F8
.text:00408AAF                 add     esp, 10h
.text:00408AB2                 jmp     loc_408CAA
.text:00408AB7 ; ---------------------------------------------------------------------------
.text:00408AB7
.text:00408AB7 loc_408AB7:                             ; CODE XREF: _wmain+566↑j
.text:00408AB7                 mov     esi, [ecx+1Ch]
.text:00408ABA                 lea     edx, [esp+460h+var_430]
.text:00408ABE                 push    edx
.text:00408ABF                 push    eax
.text:00408AC0                 mov     ecx, esi
.text:00408AC2                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408AC8                 call    esi
.text:00408ACA                 mov     edi, eax
.text:00408ACC                 test    edi, edi
.text:00408ACE                 js      loc_408CA8
.text:00408AD4                 mov     ecx, [esp+460h+var_448]
.text:00408AD8                 lea     eax, [esp+460h+pvarg.anonymous_0+8]
.text:00408ADC                 push    eax
.text:00408ADD                 push    offset dword_4035F8
.text:00408AE2                 push    ecx
.text:00408AE3                 mov     esi, [ecx]
.text:00408AE5                 mov     ecx, [esi]
.text:00408AE7                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408AED                 call    dword ptr [esi]
.text:00408AEF                 mov     edi, eax
.text:00408AF1                 test    edi, edi
.text:00408AF3                 js      loc_408CA8
.text:00408AF9                 push    9
.text:00408AFB                 pop     eax
.text:00408AFC                 sub     esp, 10h
.text:00408AFF                 mov     word ptr [esp+470h+pvarg.anonymous_0], ax
.text:00408B04                 mov     eax, [esp+470h+var_430]
.text:00408B08                 lea     esi, [esp+470h+pvarg]
.text:00408B0C                 mov     edi, esp
.text:00408B0E                 push    eax
.text:00408B0F                 mov     ebx, [eax]
.text:00408B11                 movsd
.text:00408B12                 mov     ecx, [ebx+2Ch]
.text:00408B15                 movsd
.text:00408B16                 movsd
.text:00408B17                 movsd
.text:00408B18                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408B1E                 call    dword ptr [ebx+2Ch]
.text:00408B21                 mov     edi, eax
.text:00408B23                 test    edi, edi
.text:00408B25                 js      loc_408CA8
.text:00408B2B                 mov     ecx, [esp+460h+ppv]
.text:00408B2F                 call    sub_4096BC
.text:00408B34                 mov     edi, eax
.text:00408B36                 test    edi, edi
.text:00408B38                 js      loc_408CA8
.text:00408B3E                 lea     ecx, [esp+460h+var_444]
.text:00408B42                 push    ecx
.text:00408B43                 push    2
.text:00408B45                 jmp     loc_4086CF
.text:00408B4A ; ---------------------------------------------------------------------------
.text:00408B4A
.text:00408B4A loc_408B4A:                             ; CODE XREF: _wmain+538↑j
.text:00408B4A                 cmp     dword_4137C0, 0
.text:00408B51                 jz      short loc_408B7E
.text:00408B53                 xor     esi, esi
.text:00408B55                 lea     eax, [esp+460h+ppv]
.text:00408B59                 push    esi
.text:00408B5A                 push    eax
.text:00408B5B                 lea     ecx, [esp+468h+String2]
.text:00408B5F                 call    ?GetDataSet@@YGJPAU_LOGMAN_NS@@W4GETMODE@@PAPAUIDataCollectorSet@@PAPAUIDataCollector@@@Z ; GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)
.text:00408B64                 mov     edi, eax
.text:00408B66                 test    edi, edi
.text:00408B68                 js      loc_408CAA
.text:00408B6E                 mov     ecx, [esp+460h+ppv]
.text:00408B72                 call    sub_40C58B
.text:00408B77                 mov     edi, eax
.text:00408B79                 jmp     loc_408CAA
.text:00408B7E ; ---------------------------------------------------------------------------
.text:00408B7E
.text:00408B7E loc_408B7E:                             ; CODE XREF: _wmain+670↑j
.text:00408B7E                 cmp     dword_413A60, 0
.text:00408B85                 jz      loc_408CA8
.text:00408B8B                 lea     eax, [esp+460h+ppv]
.text:00408B8F                 xor     esi, esi
.text:00408B91                 push    eax             ; ppv
.text:00408B92                 push    offset riid     ; riid
.text:00408B97                 push    15h             ; dwClsContext
.text:00408B99                 push    esi             ; pUnkOuter
.text:00408B9A                 push    offset rclsid   ; rclsid
.text:00408B9F                 call    ds:CoCreateInstance
.text:00408BA5                 mov     edi, eax
.text:00408BA7                 test    edi, edi
.text:00408BA9                 js      loc_408CAA
.text:00408BAF                 mov     ecx, [esp+460h+ppv]
.text:00408BB3                 call    sub_40BCA7
.text:00408BB8                 mov     edi, eax
.text:00408BBA                 test    edi, edi
.text:00408BBC                 js      loc_408CAA
.text:00408BC2                 mov     ecx, [esp+460h+ppv]
.text:00408BC6                 call    sub_4096BC
.text:00408BCB                 mov     edi, eax
.text:00408BCD                 test    edi, edi
.text:00408BCF                 js      loc_408CAA
.text:00408BD5                 mov     ecx, [esp+460h+ppv]
.text:00408BD9                 lea     eax, [esp+460h+var_444]
.text:00408BDD                 push    eax
.text:00408BDE                 xor     eax, eax
.text:00408BE0                 cmp     dword_414940, eax
.text:00408BE6                 mov     esi, [ecx]
.text:00408BE8                 setnz   al
.text:00408BEB                 lea     eax, ds:1[eax*2]
.text:00408BF2                 push    eax
.text:00408BF3                 push    bstrString
.text:00408BF9                 push    [esp+46Ch+bstrString]
.text:00408BFD                 push    ecx
.text:00408BFE                 jmp     short loc_408C6E
.text:00408C00 ; ---------------------------------------------------------------------------
.text:00408C00
.text:00408C00 loc_408C00:                             ; CODE XREF: _wmain+15D↑j
.text:00408C00                                         ; _wmain+18B↑j ...
.text:00408C00                 lea     eax, [esp+460h+var_448]
.text:00408C04                 push    eax
.text:00408C05                 lea     eax, [esp+464h+ppv]
.text:00408C09                 push    eax
.text:00408C0A                 lea     ecx, [esp+468h+String2]
.text:00408C0E                 call    ?GetDataSet@@YGJPAU_LOGMAN_NS@@W4GETMODE@@PAPAUIDataCollectorSet@@PAPAUIDataCollector@@@Z ; GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)
.text:00408C13                 mov     edi, eax
.text:00408C15                 test    edi, edi
.text:00408C17                 js      loc_408CA8
.text:00408C1D                 mov     edx, [esp+460h+var_448]
.text:00408C21                 mov     ecx, [esp+460h+ppv]
.text:00408C25                 call    sub_40BF14
.text:00408C2A                 mov     edi, eax
.text:00408C2C                 test    edi, edi
.text:00408C2E                 js      short loc_408CA8
.text:00408C30                 cmp     [esp+460h+var_438], 0
.text:00408C35                 jnz     short loc_408C45
.text:00408C37                 cmp     dword_414940, 0
.text:00408C3E                 jnz     short loc_408C45
.text:00408C40                 xor     ebx, ebx
.text:00408C42                 inc     ebx
.text:00408C43                 jmp     short loc_408C48
.text:00408C45 ; ---------------------------------------------------------------------------
.text:00408C45
.text:00408C45 loc_408C45:                             ; CODE XREF: _wmain+754↑j
.text:00408C45                                         ; _wmain+75D↑j
.text:00408C45                 push    3
.text:00408C47                 pop     ebx
.text:00408C48
.text:00408C48 loc_408C48:                             ; CODE XREF: _wmain+762↑j
.text:00408C48                 mov     ecx, [esp+460h+ppv]
.text:00408C4C                 call    sub_4096BC
.text:00408C51                 mov     edi, eax
.text:00408C53                 test    edi, edi
.text:00408C55                 js      short loc_408CA8
.text:00408C57                 mov     eax, [esp+460h+ppv]
.text:00408C5B                 lea     ecx, [esp+460h+var_444]
.text:00408C5F                 push    ecx
.text:00408C60                 push    ebx
.text:00408C61                 push    bstrString
.text:00408C67                 mov     esi, [eax]
.text:00408C69                 push    [esp+46Ch+bstrString]
.text:00408C6D                 push    eax
.text:00408C6E
.text:00408C6E loc_408C6E:                             ; CODE XREF: _wmain+71D↑j
.text:00408C6E                 mov     esi, [esi+0F0h]
.text:00408C74                 mov     ecx, esi
.text:00408C76                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408C7C                 call    esi
.text:00408C7E                 mov     edi, eax
.text:00408C80                 test    edi, edi
.text:00408C82                 js      short loc_408CA8
.text:00408C84                 cmp     dword_414F08, 0
.text:00408C8B                 jz      short loc_408CA8
.text:00408C8D
.text:00408C8D loc_408C8D:                             ; CODE XREF: _wmain+3A7↑j
.text:00408C8D                 mov     eax, [esp+460h+ppv]
.text:00408C91                 push    0FFFFFFFFh
.text:00408C93                 push    eax
.text:00408C94                 mov     ecx, [eax]
.text:00408C96                 mov     esi, [ecx+0F8h]
.text:00408C9C
.text:00408C9C loc_408C9C:                             ; CODE XREF: _wmain+3EA↑j
.text:00408C9C                 mov     ecx, esi
.text:00408C9E                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408CA4                 call    esi
.text:00408CA6
.text:00408CA6 loc_408CA6:                             ; CODE XREF: _wmain+20F↑j
.text:00408CA6                                         ; _wmain+51E↑j ...
.text:00408CA6                 mov     edi, eax
.text:00408CA8
.text:00408CA8 loc_408CA8:                             ; CODE XREF: _wmain+1CA↑j
.text:00408CA8                                         ; _wmain+1E1↑j ...
.text:00408CA8                 xor     esi, esi
.text:00408CAA
.text:00408CAA loc_408CAA:                             ; CODE XREF: _wmain+7F↑j
.text:00408CAA                                         ; _wmain+88↑j ...
.text:00408CAA                 mov     ebx, [esp+460h+var_450]
.text:00408CAE
.text:00408CAE loc_408CAE:                             ; CODE XREF: _wmain+42C↑j
.text:00408CAE                 lea     eax, [esp+460h+pvarg]
.text:00408CB2                 push    eax             ; pvarg
.text:00408CB3                 call    ds:VariantClear
.text:00408CB9                 test    edi, edi
.text:00408CBB                 jnz     short loc_408CCC
.text:00408CBD                 push    3B60h           ; uID
.text:00408CC2                 push    esi             ; int
.text:00408CC3                 call    sub_40E7F8
.text:00408CC8                 pop     ecx
.text:00408CC9                 pop     ecx
.text:00408CCA                 jmp     short loc_408CD8
.text:00408CCC ; ---------------------------------------------------------------------------
.text:00408CCC
.text:00408CCC loc_408CCC:                             ; CODE XREF: _wmain+7DA↑j
.text:00408CCC                 cmp     edi, 1
.text:00408CCF                 jz      short loc_408CD8
.text:00408CD1                 mov     ecx, edi        ; char
.text:00408CD3                 call    sub_40E842
.text:00408CD8
.text:00408CD8 loc_408CD8:                             ; CODE XREF: _wmain+7E9↑j
.text:00408CD8                                         ; _wmain+7EE↑j
.text:00408CD8                 mov     esi, [esp+460h+String2]
.text:00408CDC                 test    esi, esi
.text:00408CDE                 jz      short loc_408CF3
.text:00408CE0                 push    esi             ; lpMem
.text:00408CE1                 xor     esi, esi
.text:00408CE3                 push    esi             ; dwFlags
.text:00408CE4                 call    ds:GetProcessHeap
.text:00408CEA                 push    eax             ; hHeap
.text:00408CEB                 call    ds:HeapFree
.text:00408CF1                 jmp     short loc_408CF5
.text:00408CF3 ; ---------------------------------------------------------------------------
.text:00408CF3
.text:00408CF3 loc_408CF3:                             ; CODE XREF: _wmain+7FD↑j
.text:00408CF3                 xor     esi, esi
.text:00408CF5
.text:00408CF5 loc_408CF5:                             ; CODE XREF: _wmain+810↑j
.text:00408CF5                 cmp     [esp+460h+lpMem], 0
.text:00408CFA                 jz      short loc_408D0E
.text:00408CFC                 push    [esp+460h+lpMem] ; lpMem
.text:00408D00                 push    esi             ; dwFlags
.text:00408D01                 call    ds:GetProcessHeap
.text:00408D07                 push    eax             ; hHeap
.text:00408D08                 call    ds:HeapFree
.text:00408D0E
.text:00408D0E loc_408D0E:                             ; CODE XREF: _wmain+819↑j
.text:00408D0E                 cmp     [esp+460h+var_438], 0
.text:00408D13                 jz      short loc_408D27
.text:00408D15                 push    [esp+460h+var_438] ; lpMem
.text:00408D19                 push    esi             ; dwFlags
.text:00408D1A                 call    ds:GetProcessHeap
.text:00408D20                 push    eax             ; hHeap
.text:00408D21                 call    ds:HeapFree
.text:00408D27
.text:00408D27 loc_408D27:                             ; CODE XREF: _wmain+832↑j
.text:00408D27                 cmp     [esp+460h+bstrString], 0
.text:00408D2C                 jz      short loc_408D38
.text:00408D2E                 push    [esp+460h+bstrString] ; bstrString
.text:00408D32                 call    ds:SysFreeString
.text:00408D38
.text:00408D38 loc_408D38:                             ; CODE XREF: _wmain+84B↑j
.text:00408D38                 mov     eax, bstrString
.text:00408D3D                 test    eax, eax
.text:00408D3F                 jz      short loc_408D4E
.text:00408D41                 push    eax             ; bstrString
.text:00408D42                 call    ds:SysFreeString
.text:00408D48                 mov     bstrString, esi
.text:00408D4E
.text:00408D4E loc_408D4E:                             ; CODE XREF: _wmain+85E↑j
.text:00408D4E                 mov     ecx, [esp+460h+ppv]
.text:00408D52                 test    ecx, ecx
.text:00408D54                 jz      short loc_408D6C
.text:00408D56                 mov     eax, [ecx]
.text:00408D58                 push    ecx
.text:00408D59                 mov     esi, [eax+8]
.text:00408D5C                 mov     ecx, esi
.text:00408D5E                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408D64                 call    esi
.text:00408D66                 xor     esi, esi
.text:00408D68                 mov     [esp+460h+ppv], esi
.text:00408D6C
.text:00408D6C loc_408D6C:                             ; CODE XREF: _wmain+873↑j
.text:00408D6C                 mov     ecx, [esp+460h+var_448]
.text:00408D70                 test    ecx, ecx
.text:00408D72                 jz      short loc_408D86
.text:00408D74                 mov     eax, [ecx]
.text:00408D76                 push    ecx
.text:00408D77                 mov     esi, [eax+8]
.text:00408D7A                 mov     ecx, esi
.text:00408D7C                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408D82                 call    esi
.text:00408D84                 xor     esi, esi
.text:00408D86
.text:00408D86 loc_408D86:                             ; CODE XREF: _wmain+891↑j
.text:00408D86                 mov     ecx, [esp+460h+var_430]
.text:00408D8A                 test    ecx, ecx
.text:00408D8C                 jz      short loc_408DA4
.text:00408D8E                 mov     eax, [ecx]
.text:00408D90                 push    ecx
.text:00408D91                 mov     esi, [eax+8]
.text:00408D94                 mov     ecx, esi
.text:00408D96                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408D9C                 call    esi
.text:00408D9E                 xor     esi, esi
.text:00408DA0                 mov     [esp+460h+var_430], esi
.text:00408DA4
.text:00408DA4 loc_408DA4:                             ; CODE XREF: _wmain+8AB↑j
.text:00408DA4                 test    ebx, ebx
.text:00408DA6                 jz      short loc_408DBA
.text:00408DA8                 mov     eax, [ebx]
.text:00408DAA                 push    ebx
.text:00408DAB                 mov     esi, [eax+8]
.text:00408DAE                 mov     ecx, esi
.text:00408DB0                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408DB6                 call    esi
.text:00408DB8                 xor     esi, esi
.text:00408DBA
.text:00408DBA loc_408DBA:                             ; CODE XREF: _wmain+8C5↑j
.text:00408DBA                 mov     ecx, [esp+460h+var_428]
.text:00408DBE                 test    ecx, ecx
.text:00408DC0                 jz      short loc_408DD8
.text:00408DC2                 mov     eax, [ecx]
.text:00408DC4                 push    ecx
.text:00408DC5                 mov     esi, [eax+8]
.text:00408DC8                 mov     ecx, esi
.text:00408DCA                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408DD0                 call    esi
.text:00408DD2                 xor     esi, esi
.text:00408DD4                 mov     [esp+460h+var_428], esi
.text:00408DD8
.text:00408DD8 loc_408DD8:                             ; CODE XREF: _wmain+8DF↑j
.text:00408DD8                 cmp     [esp+460h+var_42C], 0
.text:00408DDD                 jz      short loc_408DED
.text:00408DDF                 push    [esp+460h+var_42C] ; bstrString
.text:00408DE3                 call    ds:SysFreeString
.text:00408DE9                 mov     [esp+460h+var_42C], esi
.text:00408DED
.text:00408DED loc_408DED:                             ; CODE XREF: _wmain+8FC↑j
.text:00408DED                 mov     ecx, [esp+460h+var_444]
.text:00408DF1                 test    ecx, ecx
.text:00408DF3                 jz      short loc_408E0B
.text:00408DF5                 mov     eax, [ecx]
.text:00408DF7                 push    ecx
.text:00408DF8                 mov     esi, [eax+8]
.text:00408DFB                 mov     ecx, esi
.text:00408DFD                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00408E03                 call    esi
.text:00408E05                 xor     eax, eax
.text:00408E07                 mov     [esp+460h+var_444], eax
.text:00408E0B
.text:00408E0B loc_408E0B:                             ; CODE XREF: _wmain+912↑j
.text:00408E0B                 cmp     [esp+460h+var_41C], 0
.text:00408E10                 jz      short loc_408E18
.text:00408E12                 call    ds:CoUninitialize
.text:00408E18
.text:00408E18 loc_408E18:                             ; CODE XREF: _wmain+92F↑j
.text:00408E18                 call    sub_4100CD
.text:00408E1D                 mov     ecx, [esp+460h+var_4]
.text:00408E24                 mov     eax, edi
.text:00408E26                 pop     edi
.text:00408E27                 pop     esi
.text:00408E28                 pop     ebx
.text:00408E29                 xor     ecx, esp        ; StackCookie
.text:00408E2B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00408E30                 mov     esp, ebp
.text:00408E32                 pop     ebp
.text:00408E33                 retn
.text:00408E33 _wmain          endp
.text:00408E33
.text:00408E34
.text:00408E34 ; =============== S U B R O U T I N E =======================================
.text:00408E34
.text:00408E34 ; Attributes: bp-based frame
.text:00408E34
.text:00408E34 ; int __thiscall sub_408E34(LPWSTR *StringSid)
.text:00408E34 sub_408E34      proc near               ; CODE XREF: InitializeComSecurity(void)+15↓p
.text:00408E34
.text:00408E34 dwBytes         = dword ptr -8
.text:00408E34 TokenHandle     = dword ptr -4
.text:00408E34
.text:00408E34                 mov     edi, edi
.text:00408E36                 push    ebp
.text:00408E37                 mov     ebp, esp
.text:00408E39                 push    ecx
.text:00408E3A                 push    ecx
.text:00408E3B                 and     [ebp+TokenHandle], 0
.text:00408E3F                 lea     eax, [ebp+TokenHandle]
.text:00408E42                 push    ebx
.text:00408E43                 push    esi
.text:00408E44                 push    edi
.text:00408E45                 push    eax             ; TokenHandle
.text:00408E46                 xor     edi, edi
.text:00408E48                 mov     ebx, ecx
.text:00408E4A                 push    edi             ; OpenAsSelf
.text:00408E4B                 push    8               ; DesiredAccess
.text:00408E4D                 call    ds:GetCurrentThread
.text:00408E53                 push    eax             ; ThreadHandle
.text:00408E54                 call    ds:OpenThreadToken
.text:00408E5A                 test    eax, eax
.text:00408E5C                 jnz     short loc_408E75
.text:00408E5E                 call    ds:GetLastError
.text:00408E64                 mov     esi, eax
.text:00408E66                 test    esi, esi
.text:00408E68                 jle     short loc_408E79
.text:00408E6A                 movzx   esi, si
.text:00408E6D                 or      esi, 80070000h
.text:00408E73                 jmp     short loc_408E77
.text:00408E75 ; ---------------------------------------------------------------------------
.text:00408E75
.text:00408E75 loc_408E75:                             ; CODE XREF: sub_408E34+28↑j
.text:00408E75                 xor     esi, esi
.text:00408E77
.text:00408E77 loc_408E77:                             ; CODE XREF: sub_408E34+3F↑j
.text:00408E77                 test    esi, esi
.text:00408E79
.text:00408E79 loc_408E79:                             ; CODE XREF: sub_408E34+34↑j
.text:00408E79                 jns     short loc_408EBF
.text:00408E7B                 cmp     esi, 800703F0h
.text:00408E81                 jnz     loc_408F6F
.text:00408E87                 lea     eax, [ebp+TokenHandle]
.text:00408E8A                 push    eax             ; TokenHandle
.text:00408E8B                 push    8               ; DesiredAccess
.text:00408E8D                 call    ds:GetCurrentProcess
.text:00408E93                 push    eax             ; ProcessHandle
.text:00408E94                 call    ds:OpenProcessToken
.text:00408E9A                 test    eax, eax
.text:00408E9C                 jnz     short loc_408EB5
.text:00408E9E                 call    ds:GetLastError
.text:00408EA4                 mov     esi, eax
.text:00408EA6                 test    esi, esi
.text:00408EA8                 jle     short loc_408EB9
.text:00408EAA                 movzx   esi, si
.text:00408EAD                 or      esi, 80070000h
.text:00408EB3                 jmp     short loc_408EB7
.text:00408EB5 ; ---------------------------------------------------------------------------
.text:00408EB5
.text:00408EB5 loc_408EB5:                             ; CODE XREF: sub_408E34+68↑j
.text:00408EB5                 xor     esi, esi
.text:00408EB7
.text:00408EB7 loc_408EB7:                             ; CODE XREF: sub_408E34+7F↑j
.text:00408EB7                 test    esi, esi
.text:00408EB9
.text:00408EB9 loc_408EB9:                             ; CODE XREF: sub_408E34+74↑j
.text:00408EB9                 js      loc_408F6F
.text:00408EBF
.text:00408EBF loc_408EBF:                             ; CODE XREF: sub_408E34:loc_408E79↑j
.text:00408EBF                 mov     [ebp+dwBytes], 4Ch ; 'L'
.text:00408EC6
.text:00408EC6 loc_408EC6:                             ; CODE XREF: sub_408E34+F4↓j
.text:00408EC6                 test    edi, edi
.text:00408EC8                 jz      short loc_408EDA
.text:00408ECA                 push    edi             ; lpMem
.text:00408ECB                 push    0               ; dwFlags
.text:00408ECD                 call    ds:GetProcessHeap
.text:00408ED3                 push    eax             ; hHeap
.text:00408ED4                 call    ds:HeapFree
.text:00408EDA
.text:00408EDA loc_408EDA:                             ; CODE XREF: sub_408E34+94↑j
.text:00408EDA                 push    [ebp+dwBytes]   ; dwBytes
.text:00408EDD                 push    0               ; dwFlags
.text:00408EDF                 call    ds:GetProcessHeap
.text:00408EE5                 push    eax             ; hHeap
.text:00408EE6                 call    ds:HeapAlloc
.text:00408EEC                 mov     edi, eax
.text:00408EEE                 test    edi, edi
.text:00408EF0                 jz      short loc_408F6A
.text:00408EF2                 lea     eax, [ebp+dwBytes]
.text:00408EF5                 push    eax             ; ReturnLength
.text:00408EF6                 push    [ebp+dwBytes]   ; TokenInformationLength
.text:00408EF9                 push    edi             ; TokenInformation
.text:00408EFA                 push    1               ; TokenInformationClass
.text:00408EFC                 push    [ebp+TokenHandle] ; TokenHandle
.text:00408EFF                 call    ds:GetTokenInformation
.text:00408F05                 test    eax, eax
.text:00408F07                 jnz     short loc_408F20
.text:00408F09                 call    ds:GetLastError
.text:00408F0F                 mov     esi, eax
.text:00408F11                 test    esi, esi
.text:00408F13                 jle     short loc_408F22
.text:00408F15                 movzx   esi, si
.text:00408F18                 or      esi, 80070000h
.text:00408F1E                 jmp     short loc_408F22
.text:00408F20 ; ---------------------------------------------------------------------------
.text:00408F20
.text:00408F20 loc_408F20:                             ; CODE XREF: sub_408E34+D3↑j
.text:00408F20                 xor     esi, esi
.text:00408F22
.text:00408F22 loc_408F22:                             ; CODE XREF: sub_408E34+DF↑j
.text:00408F22                                         ; sub_408E34+EA↑j
.text:00408F22                 cmp     esi, 8007007Ah
.text:00408F28                 jz      short loc_408EC6
.text:00408F2A                 test    esi, esi
.text:00408F2C                 js      short loc_408F54
.text:00408F2E                 push    ebx             ; StringSid
.text:00408F2F                 push    dword ptr [edi] ; Sid
.text:00408F31                 call    ds:ConvertSidToStringSidW
.text:00408F37                 test    eax, eax
.text:00408F39                 jnz     short loc_408F52
.text:00408F3B                 call    ds:GetLastError
.text:00408F41                 mov     esi, eax
.text:00408F43                 test    esi, esi
.text:00408F45                 jle     short loc_408F54
.text:00408F47                 movzx   esi, si
.text:00408F4A                 or      esi, 80070000h
.text:00408F50                 jmp     short loc_408F54
.text:00408F52 ; ---------------------------------------------------------------------------
.text:00408F52
.text:00408F52 loc_408F52:                             ; CODE XREF: sub_408E34+105↑j
.text:00408F52                 xor     esi, esi
.text:00408F54
.text:00408F54 loc_408F54:                             ; CODE XREF: sub_408E34+F8↑j
.text:00408F54                                         ; sub_408E34+111↑j ...
.text:00408F54                 test    edi, edi
.text:00408F56                 jz      short loc_408F6F
.text:00408F58                 push    edi             ; lpMem
.text:00408F59                 push    0               ; dwFlags
.text:00408F5B                 call    ds:GetProcessHeap
.text:00408F61                 push    eax             ; hHeap
.text:00408F62                 call    ds:HeapFree
.text:00408F68                 jmp     short loc_408F6F
.text:00408F6A ; ---------------------------------------------------------------------------
.text:00408F6A
.text:00408F6A loc_408F6A:                             ; CODE XREF: sub_408E34+BC↑j
.text:00408F6A                 mov     esi, 8007000Eh
.text:00408F6F
.text:00408F6F loc_408F6F:                             ; CODE XREF: sub_408E34+4D↑j
.text:00408F6F                                         ; sub_408E34:loc_408EB9↑j ...
.text:00408F6F                 cmp     [ebp+TokenHandle], 0
.text:00408F73                 jz      short loc_408F7E
.text:00408F75                 push    [ebp+TokenHandle] ; hObject
.text:00408F78                 call    ds:CloseHandle
.text:00408F7E
.text:00408F7E loc_408F7E:                             ; CODE XREF: sub_408E34+13F↑j
.text:00408F7E                 pop     edi
.text:00408F7F                 mov     eax, esi
.text:00408F81                 pop     esi
.text:00408F82                 pop     ebx
.text:00408F83                 mov     esp, ebp
.text:00408F85                 pop     ebp
.text:00408F86                 retn
.text:00408F86 sub_408E34      endp
.text:00408F86
.text:00408F86 ; ---------------------------------------------------------------------------
.text:00408F87                 align 4
.text:00408F88
.text:00408F88 ; =============== S U B R O U T I N E =======================================
.text:00408F88
.text:00408F88 ; Attributes: bp-based frame info_from_lumina
.text:00408F88
.text:00408F88 ; int __stdcall InitializeComSecurity()
.text:00408F88 ?InitializeComSecurity@@YGJXZ proc near ; CODE XREF: _wmain+A8↑p
.text:00408F88
.text:00408F88 pSecurityDescriptor= byte ptr -2Ch
.text:00408F88 bDaclPresent    = dword ptr -18h
.text:00408F88 pDacl           = dword ptr -14h
.text:00408F88 pOwner          = dword ptr -10h
.text:00408F88 hMem            = dword ptr -0Ch
.text:00408F88 SecurityDescriptor= dword ptr -8
.text:00408F88 bOwnerDefaulted = dword ptr -4
.text:00408F88
.text:00408F88                 mov     edi, edi
.text:00408F8A                 push    ebp
.text:00408F8B                 mov     ebp, esp
.text:00408F8D                 sub     esp, 2Ch
.text:00408F90                 push    ebx
.text:00408F91                 xor     ebx, ebx
.text:00408F93                 lea     ecx, [ebp+hMem] ; StringSid
.text:00408F96                 push    esi
.text:00408F97                 mov     [ebp+SecurityDescriptor], ebx
.text:00408F9A                 mov     [ebp+hMem], ebx
.text:00408F9D                 call    sub_408E34
.text:00408FA2                 mov     esi, eax
.text:00408FA4                 test    esi, esi
.text:00408FA6                 js      loc_4091C5
.text:00408FAC                 push    edi
.text:00408FAD                 push    800h            ; dwBytes
.text:00408FB2                 push    ebx             ; dwFlags
.text:00408FB3                 call    ds:GetProcessHeap
.text:00408FB9                 push    eax             ; hHeap
.text:00408FBA                 call    ds:HeapAlloc
.text:00408FC0                 mov     edi, eax
.text:00408FC2                 test    edi, edi
.text:00408FC4                 jnz     short loc_408FD0
.text:00408FC6                 mov     esi, 8007000Eh
.text:00408FCB                 jmp     loc_4091C4
.text:00408FD0 ; ---------------------------------------------------------------------------
.text:00408FD0
.text:00408FD0 loc_408FD0:                             ; CODE XREF: InitializeComSecurity(void)+3C↑j
.text:00408FD0                 push    [ebp+hMem]
.text:00408FD3                 push    [ebp+hMem]
.text:00408FD6                 push    [ebp+hMem]      ; Args
.text:00408FD9                 push    offset aOSgSdA0x7S ; "O:%sG:%sD:(A;;0x7;;;%s)"
.text:00408FDE                 push    400h            ; int
.text:00408FE3                 push    edi             ; Buffer
.text:00408FE4                 call    ?StringCchPrintfW@@YAJPAGIPBGZZ_0 ; StringCchPrintfW(ushort *,uint,ushort const *,...)
.text:00408FE9                 mov     esi, eax
.text:00408FEB                 add     esp, 18h
.text:00408FEE                 test    esi, esi
.text:00408FF0                 js      loc_4091B5
.text:00408FF6                 push    ebx             ; SecurityDescriptorSize
.text:00408FF7                 lea     eax, [ebp+SecurityDescriptor]
.text:00408FFA                 push    eax             ; SecurityDescriptor
.text:00408FFB                 push    1               ; StringSDRevision
.text:00408FFD                 push    edi             ; StringSecurityDescriptor
.text:00408FFE                 call    ds:ConvertStringSecurityDescriptorToSecurityDescriptorW
.text:00409004                 test    eax, eax
.text:00409006                 jnz     short loc_40901F
.text:00409008                 call    ds:GetLastError
.text:0040900E                 mov     esi, eax
.text:00409010                 test    esi, esi
.text:00409012                 jle     short loc_409023
.text:00409014                 movzx   esi, si
.text:00409017                 or      esi, 80070000h
.text:0040901D                 jmp     short loc_409021
.text:0040901F ; ---------------------------------------------------------------------------
.text:0040901F
.text:0040901F loc_40901F:                             ; CODE XREF: InitializeComSecurity(void)+7E↑j
.text:0040901F                 mov     esi, ebx
.text:00409021
.text:00409021 loc_409021:                             ; CODE XREF: InitializeComSecurity(void)+95↑j
.text:00409021                 test    esi, esi
.text:00409023
.text:00409023 loc_409023:                             ; CODE XREF: InitializeComSecurity(void)+8A↑j
.text:00409023                 js      loc_4091B5
.text:00409029                 push    1               ; dwRevision
.text:0040902B                 lea     eax, [ebp+pSecurityDescriptor]
.text:0040902E                 push    eax             ; pSecurityDescriptor
.text:0040902F                 call    ds:InitializeSecurityDescriptor
.text:00409035                 test    eax, eax
.text:00409037                 jnz     short loc_409050
.text:00409039                 call    ds:GetLastError
.text:0040903F                 mov     esi, eax
.text:00409041                 test    esi, esi
.text:00409043                 jle     short loc_409054
.text:00409045                 movzx   esi, si
.text:00409048                 or      esi, 80070000h
.text:0040904E                 jmp     short loc_409052
.text:00409050 ; ---------------------------------------------------------------------------
.text:00409050
.text:00409050 loc_409050:                             ; CODE XREF: InitializeComSecurity(void)+AF↑j
.text:00409050                 mov     esi, ebx
.text:00409052
.text:00409052 loc_409052:                             ; CODE XREF: InitializeComSecurity(void)+C6↑j
.text:00409052                 test    esi, esi
.text:00409054
.text:00409054 loc_409054:                             ; CODE XREF: InitializeComSecurity(void)+BB↑j
.text:00409054                 js      loc_4091B5
.text:0040905A                 lea     eax, [ebp+bOwnerDefaulted]
.text:0040905D                 push    eax             ; lpbOwnerDefaulted
.text:0040905E                 lea     eax, [ebp+pOwner]
.text:00409061                 push    eax             ; pOwner
.text:00409062                 push    [ebp+SecurityDescriptor] ; pSecurityDescriptor
.text:00409065                 call    ds:GetSecurityDescriptorOwner
.text:0040906B                 test    eax, eax
.text:0040906D                 jnz     short loc_409086
.text:0040906F                 call    ds:GetLastError
.text:00409075                 mov     esi, eax
.text:00409077                 test    esi, esi
.text:00409079                 jle     short loc_40908A
.text:0040907B                 movzx   esi, si
.text:0040907E                 or      esi, 80070000h
.text:00409084                 jmp     short loc_409088
.text:00409086 ; ---------------------------------------------------------------------------
.text:00409086
.text:00409086 loc_409086:                             ; CODE XREF: InitializeComSecurity(void)+E5↑j
.text:00409086                 mov     esi, ebx
.text:00409088
.text:00409088 loc_409088:                             ; CODE XREF: InitializeComSecurity(void)+FC↑j
.text:00409088                 test    esi, esi
.text:0040908A
.text:0040908A loc_40908A:                             ; CODE XREF: InitializeComSecurity(void)+F1↑j
.text:0040908A                 js      loc_4091B5
.text:00409090                 push    [ebp+bOwnerDefaulted] ; bOwnerDefaulted
.text:00409093                 lea     eax, [ebp+pSecurityDescriptor]
.text:00409096                 push    [ebp+pOwner]    ; pOwner
.text:00409099                 push    eax             ; pSecurityDescriptor
.text:0040909A                 call    ds:SetSecurityDescriptorOwner
.text:004090A0                 test    eax, eax
.text:004090A2                 jnz     short loc_4090BB
.text:004090A4                 call    ds:GetLastError
.text:004090AA                 mov     esi, eax
.text:004090AC                 test    esi, esi
.text:004090AE                 jle     short loc_4090BF
.text:004090B0                 movzx   esi, si
.text:004090B3                 or      esi, 80070000h
.text:004090B9                 jmp     short loc_4090BD
.text:004090BB ; ---------------------------------------------------------------------------
.text:004090BB
.text:004090BB loc_4090BB:                             ; CODE XREF: InitializeComSecurity(void)+11A↑j
.text:004090BB                 mov     esi, ebx
.text:004090BD
.text:004090BD loc_4090BD:                             ; CODE XREF: InitializeComSecurity(void)+131↑j
.text:004090BD                 test    esi, esi
.text:004090BF
.text:004090BF loc_4090BF:                             ; CODE XREF: InitializeComSecurity(void)+126↑j
.text:004090BF                 js      loc_4091B5
.text:004090C5                 lea     eax, [ebp+bOwnerDefaulted]
.text:004090C8                 push    eax             ; lpbGroupDefaulted
.text:004090C9                 lea     eax, [ebp+pOwner]
.text:004090CC                 push    eax             ; pGroup
.text:004090CD                 push    [ebp+SecurityDescriptor] ; pSecurityDescriptor
.text:004090D0                 call    ds:GetSecurityDescriptorGroup
.text:004090D6                 test    eax, eax
.text:004090D8                 jnz     short loc_4090F1
.text:004090DA                 call    ds:GetLastError
.text:004090E0                 mov     esi, eax
.text:004090E2                 test    esi, esi
.text:004090E4                 jle     short loc_4090F5
.text:004090E6                 movzx   esi, si
.text:004090E9                 or      esi, 80070000h
.text:004090EF                 jmp     short loc_4090F3
.text:004090F1 ; ---------------------------------------------------------------------------
.text:004090F1
.text:004090F1 loc_4090F1:                             ; CODE XREF: InitializeComSecurity(void)+150↑j
.text:004090F1                 mov     esi, ebx
.text:004090F3
.text:004090F3 loc_4090F3:                             ; CODE XREF: InitializeComSecurity(void)+167↑j
.text:004090F3                 test    esi, esi
.text:004090F5
.text:004090F5 loc_4090F5:                             ; CODE XREF: InitializeComSecurity(void)+15C↑j
.text:004090F5                 js      loc_4091B5
.text:004090FB                 push    [ebp+bOwnerDefaulted] ; bGroupDefaulted
.text:004090FE                 lea     eax, [ebp+pSecurityDescriptor]
.text:00409101                 push    [ebp+pOwner]    ; pGroup
.text:00409104                 push    eax             ; pSecurityDescriptor
.text:00409105                 call    ds:SetSecurityDescriptorGroup
.text:0040910B                 test    eax, eax
.text:0040910D                 jnz     short loc_409126
.text:0040910F                 call    ds:GetLastError
.text:00409115                 mov     esi, eax
.text:00409117                 test    esi, esi
.text:00409119                 jle     short loc_40912A
.text:0040911B                 movzx   esi, si
.text:0040911E                 or      esi, 80070000h
.text:00409124                 jmp     short loc_409128
.text:00409126 ; ---------------------------------------------------------------------------
.text:00409126
.text:00409126 loc_409126:                             ; CODE XREF: InitializeComSecurity(void)+185↑j
.text:00409126                 mov     esi, ebx
.text:00409128
.text:00409128 loc_409128:                             ; CODE XREF: InitializeComSecurity(void)+19C↑j
.text:00409128                 test    esi, esi
.text:0040912A
.text:0040912A loc_40912A:                             ; CODE XREF: InitializeComSecurity(void)+191↑j
.text:0040912A                 js      loc_4091B5
.text:00409130                 lea     eax, [ebp+bOwnerDefaulted]
.text:00409133                 push    eax             ; lpbDaclDefaulted
.text:00409134                 lea     eax, [ebp+pDacl]
.text:00409137                 push    eax             ; pDacl
.text:00409138                 lea     eax, [ebp+bDaclPresent]
.text:0040913B                 push    eax             ; lpbDaclPresent
.text:0040913C                 push    [ebp+SecurityDescriptor] ; pSecurityDescriptor
.text:0040913F                 call    ds:GetSecurityDescriptorDacl
.text:00409145                 test    eax, eax
.text:00409147                 jnz     short loc_409160
.text:00409149                 call    ds:GetLastError
.text:0040914F                 mov     esi, eax
.text:00409151                 test    esi, esi
.text:00409153                 jle     short loc_409164
.text:00409155                 movzx   esi, si
.text:00409158                 or      esi, 80070000h
.text:0040915E                 jmp     short loc_409162
.text:00409160 ; ---------------------------------------------------------------------------
.text:00409160
.text:00409160 loc_409160:                             ; CODE XREF: InitializeComSecurity(void)+1BF↑j
.text:00409160                 mov     esi, ebx
.text:00409162
.text:00409162 loc_409162:                             ; CODE XREF: InitializeComSecurity(void)+1D6↑j
.text:00409162                 test    esi, esi
.text:00409164
.text:00409164 loc_409164:                             ; CODE XREF: InitializeComSecurity(void)+1CB↑j
.text:00409164                 js      short loc_4091B5
.text:00409166                 push    [ebp+bOwnerDefaulted] ; bDaclDefaulted
.text:00409169                 lea     eax, [ebp+pSecurityDescriptor]
.text:0040916C                 push    [ebp+pDacl]     ; pDacl
.text:0040916F                 push    [ebp+bDaclPresent] ; bDaclPresent
.text:00409172                 push    eax             ; pSecurityDescriptor
.text:00409173                 call    ds:SetSecurityDescriptorDacl
.text:00409179                 test    eax, eax
.text:0040917B                 jnz     short loc_409194
.text:0040917D                 call    ds:GetLastError
.text:00409183                 mov     esi, eax
.text:00409185                 test    esi, esi
.text:00409187                 jle     short loc_409198
.text:00409189                 movzx   esi, si
.text:0040918C                 or      esi, 80070000h
.text:00409192                 jmp     short loc_409196
.text:00409194 ; ---------------------------------------------------------------------------
.text:00409194
.text:00409194 loc_409194:                             ; CODE XREF: InitializeComSecurity(void)+1F3↑j
.text:00409194                 mov     esi, ebx
.text:00409196
.text:00409196 loc_409196:                             ; CODE XREF: InitializeComSecurity(void)+20A↑j
.text:00409196                 test    esi, esi
.text:00409198
.text:00409198 loc_409198:                             ; CODE XREF: InitializeComSecurity(void)+1FF↑j
.text:00409198                 js      short loc_4091B5
.text:0040919A                 push    ebx             ; pReserved3
.text:0040919B                 push    2020h           ; dwCapabilities
.text:004091A0                 push    ebx             ; pAuthList
.text:004091A1                 push    3               ; dwImpLevel
.text:004091A3                 push    4               ; dwAuthnLevel
.text:004091A5                 push    ebx             ; pReserved1
.text:004091A6                 push    ebx             ; asAuthSvc
.text:004091A7                 push    0FFFFFFFFh      ; cAuthSvc
.text:004091A9                 lea     eax, [ebp+pSecurityDescriptor]
.text:004091AC                 push    eax             ; pSecDesc
.text:004091AD                 call    ds:CoInitializeSecurity
.text:004091B3                 mov     esi, eax
.text:004091B5
.text:004091B5 loc_4091B5:                             ; CODE XREF: InitializeComSecurity(void)+68↑j
.text:004091B5                                         ; InitializeComSecurity(void):loc_409023↑j ...
.text:004091B5                 push    edi             ; lpMem
.text:004091B6                 push    ebx             ; dwFlags
.text:004091B7                 call    ds:GetProcessHeap
.text:004091BD                 push    eax             ; hHeap
.text:004091BE                 call    ds:HeapFree
.text:004091C4
.text:004091C4 loc_4091C4:                             ; CODE XREF: InitializeComSecurity(void)+43↑j
.text:004091C4                 pop     edi
.text:004091C5
.text:004091C5 loc_4091C5:                             ; CODE XREF: InitializeComSecurity(void)+1E↑j
.text:004091C5                 push    [ebp+SecurityDescriptor] ; hMem
.text:004091C8                 call    ds:LocalFree
.text:004091CE                 push    [ebp+hMem]      ; hMem
.text:004091D1                 call    ds:LocalFree
.text:004091D7                 mov     eax, esi
.text:004091D9                 pop     esi
.text:004091DA                 pop     ebx
.text:004091DB                 mov     esp, ebp
.text:004091DD                 pop     ebp
.text:004091DE                 retn
.text:004091DE ?InitializeComSecurity@@YGJXZ endp
.text:004091DE
.text:004091DF
.text:004091DF ; =============== S U B R O U T I N E =======================================
.text:004091DF
.text:004091DF ; Attributes: bp-based frame
.text:004091DF
.text:004091DF sub_4091DF      proc near               ; CODE XREF: MergeProviders(ITraceDataProviderCollection *,ITraceDataProviderCollection *)+143↓p
.text:004091DF                                         ; sub_40AAF8+454↓p ...
.text:004091DF
.text:004091DF pvarg           = VARIANTARG ptr -48h
.text:004091DF var_38          = dword ptr -38h
.text:004091DF var_34          = dword ptr -34h
.text:004091DF var_30          = dword ptr -30h
.text:004091DF var_2C          = dword ptr -2Ch
.text:004091DF var_28          = byte ptr -28h
.text:004091DF var_14          = byte ptr -14h
.text:004091DF var_4           = dword ptr -4
.text:004091DF arg_0           = byte ptr  8
.text:004091DF
.text:004091DF                 mov     edi, edi
.text:004091E1                 push    ebp
.text:004091E2                 mov     ebp, esp
.text:004091E4                 sub     esp, 4Ch
.text:004091E7                 mov     eax, ___security_cookie
.text:004091EC                 xor     eax, ebp
.text:004091EE                 mov     [ebp+var_4], eax
.text:004091F1                 and     [ebp+var_30], 0
.text:004091F5                 lea     eax, [ebp+pvarg]
.text:004091F8                 and     [ebp+var_34], 0
.text:004091FC                 and     [ebp+var_2C], 0
.text:00409200                 push    ebx
.text:00409201                 push    esi
.text:00409202                 push    edi
.text:00409203                 lea     esi, [ebp+arg_0]
.text:00409206                 mov     [ebp+var_38], edx
.text:00409209                 lea     edi, [ebp+var_28]
.text:0040920C                 mov     ebx, ecx
.text:0040920E                 movsd
.text:0040920F                 push    eax             ; pvarg
.text:00409210                 movsd
.text:00409211                 movsd
.text:00409212                 movsd
.text:00409213                 call    ds:VariantInit
.text:00409219                 mov     eax, [ebx]
.text:0040921B                 lea     ecx, [ebp+var_34]
.text:0040921E                 push    ecx
.text:0040921F                 push    ebx
.text:00409220                 mov     esi, [eax+24h]
.text:00409223                 mov     ecx, esi
.text:00409225                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040922B                 call    esi
.text:0040922D                 mov     edi, eax
.text:0040922F                 test    edi, edi
.text:00409231                 js      loc_40931D
.text:00409237                 mov     eax, [ebp+var_34]
.text:0040923A                 lea     ecx, [ebp+var_30]
.text:0040923D                 push    ecx
.text:0040923E                 push    offset dword_4035E8
.text:00409243                 push    eax
.text:00409244                 mov     esi, [eax]
.text:00409246                 mov     ecx, [esi]
.text:00409248                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040924E                 call    dword ptr [esi]
.text:00409250                 mov     edi, eax
.text:00409252                 test    edi, edi
.text:00409254                 js      loc_40931D
.text:0040925A                 lea     eax, [ebp+pvarg]
.text:0040925D                 push    eax             ; pvarg
.text:0040925E                 call    ds:VariantClear
.text:00409264                 xor     ebx, ebx
.text:00409266                 inc     ebx
.text:00409267                 jmp     loc_409393
.text:0040926C ; ---------------------------------------------------------------------------
.text:0040926C
.text:0040926C loc_40926C:                             ; CODE XREF: sub_4091DF+1D9↓j
.text:0040926C                 push    9
.text:0040926E                 pop     eax
.text:0040926F                 cmp     ax, word ptr [ebp+pvarg.anonymous_0]
.text:00409273                 jnz     loc_409389
.text:00409279                 mov     ecx, [ebp+var_2C]
.text:0040927C                 test    ecx, ecx
.text:0040927E                 jz      short loc_409294
.text:00409280                 mov     eax, [ecx]
.text:00409282                 push    ecx
.text:00409283                 mov     esi, [eax+8]
.text:00409286                 mov     ecx, esi
.text:00409288                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040928E                 call    esi
.text:00409290                 and     [ebp+var_2C], 0
.text:00409294
.text:00409294 loc_409294:                             ; CODE XREF: sub_4091DF+9F↑j
.text:00409294                 mov     eax, dword ptr [ebp+pvarg.anonymous_0+8]
.text:00409297                 lea     ecx, [ebp+var_2C]
.text:0040929A                 push    ecx
.text:0040929B                 push    offset stru_403598
.text:004092A0                 push    eax
.text:004092A1                 mov     esi, [eax]
.text:004092A3                 mov     ecx, [esi]
.text:004092A5                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:004092AB                 call    dword ptr [esi]
.text:004092AD                 mov     edi, eax
.text:004092AF                 test    edi, edi
.text:004092B1                 js      short loc_40931D
.text:004092B3                 mov     eax, [ebp+var_2C]
.text:004092B6                 lea     edx, [ebp+var_14]
.text:004092B9                 push    edx
.text:004092BA                 push    eax
.text:004092BB                 mov     ecx, [eax]
.text:004092BD                 mov     esi, [ecx+24h]
.text:004092C0                 mov     ecx, esi
.text:004092C2                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:004092C8                 call    esi
.text:004092CA                 mov     edi, eax
.text:004092CC                 test    edi, edi
.text:004092CE                 js      short loc_40931D
.text:004092D0                 lea     edx, [ebp+var_14]
.text:004092D3                 xor     ecx, ecx
.text:004092D5                 lea     esi, [ebp+var_28]
.text:004092D8
.text:004092D8 loc_4092D8:                             ; CODE XREF: sub_4091DF+109↓j
.text:004092D8                 mov     eax, [edx+ecx*4]
.text:004092DB                 cmp     eax, [esi+ecx*4]
.text:004092DE                 jnz     loc_409389
.text:004092E4                 inc     ecx
.text:004092E5                 cmp     ecx, 4
.text:004092E8                 jnz     short loc_4092D8
.text:004092EA                 mov     ebx, [ebp+var_38]
.text:004092ED                 mov     ecx, [ebx]
.text:004092EF                 test    ecx, ecx
.text:004092F1                 jz      short loc_409306
.text:004092F3                 mov     eax, [ecx]
.text:004092F5                 push    ecx
.text:004092F6                 mov     esi, [eax+8]
.text:004092F9                 mov     ecx, esi
.text:004092FB                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409301                 call    esi
.text:00409303                 and     dword ptr [ebx], 0
.text:00409306
.text:00409306 loc_409306:                             ; CODE XREF: sub_4091DF+112↑j
.text:00409306                 mov     ecx, [ebp+var_2C]
.text:00409309                 mov     [ebx], ecx
.text:0040930B                 push    ecx
.text:0040930C                 mov     eax, [ecx]
.text:0040930E                 mov     esi, [eax+4]
.text:00409311                 mov     ecx, esi
.text:00409313                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409319                 call    esi
.text:0040931B
.text:0040931B loc_40931B:                             ; CODE XREF: sub_4091DF+1DF↓j
.text:0040931B                 xor     edi, edi
.text:0040931D
.text:0040931D loc_40931D:                             ; CODE XREF: sub_4091DF+52↑j
.text:0040931D                                         ; sub_4091DF+75↑j ...
.text:0040931D                 lea     eax, [ebp+pvarg]
.text:00409320                 push    eax             ; pvarg
.text:00409321                 call    ds:VariantClear
.text:00409327                 mov     ecx, [ebp+var_2C]
.text:0040932A                 test    ecx, ecx
.text:0040932C                 jz      short loc_409342
.text:0040932E                 mov     eax, [ecx]
.text:00409330                 push    ecx
.text:00409331                 mov     esi, [eax+8]
.text:00409334                 mov     ecx, esi
.text:00409336                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040933C                 call    esi
.text:0040933E                 and     [ebp+var_2C], 0
.text:00409342
.text:00409342 loc_409342:                             ; CODE XREF: sub_4091DF+14D↑j
.text:00409342                 mov     ecx, [ebp+var_30]
.text:00409345                 test    ecx, ecx
.text:00409347                 jz      short loc_40935D
.text:00409349                 mov     eax, [ecx]
.text:0040934B                 push    ecx
.text:0040934C                 mov     esi, [eax+8]
.text:0040934F                 mov     ecx, esi
.text:00409351                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409357                 call    esi
.text:00409359                 and     [ebp+var_30], 0
.text:0040935D
.text:0040935D loc_40935D:                             ; CODE XREF: sub_4091DF+168↑j
.text:0040935D                 mov     ecx, [ebp+var_34]
.text:00409360                 test    ecx, ecx
.text:00409362                 jz      short loc_409374
.text:00409364                 mov     eax, [ecx]
.text:00409366                 push    ecx
.text:00409367                 mov     esi, [eax+8]
.text:0040936A                 mov     ecx, esi
.text:0040936C                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409372                 call    esi
.text:00409374
.text:00409374 loc_409374:                             ; CODE XREF: sub_4091DF+183↑j
.text:00409374                 mov     ecx, [ebp+var_4]
.text:00409377                 mov     eax, edi
.text:00409379                 pop     edi
.text:0040937A                 pop     esi
.text:0040937B                 xor     ecx, ebp        ; StackCookie
.text:0040937D                 pop     ebx
.text:0040937E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00409383                 mov     esp, ebp
.text:00409385                 pop     ebp
.text:00409386                 retn    10h
.text:00409389 ; ---------------------------------------------------------------------------
.text:00409389
.text:00409389 loc_409389:                             ; CODE XREF: sub_4091DF+94↑j
.text:00409389                                         ; sub_4091DF+FF↑j
.text:00409389                 lea     eax, [ebp+pvarg]
.text:0040938C                 push    eax             ; pvarg
.text:0040938D                 call    ds:VariantClear
.text:00409393
.text:00409393 loc_409393:                             ; CODE XREF: sub_4091DF+88↑j
.text:00409393                 mov     eax, [ebp+var_30]
.text:00409396                 lea     ecx, [ebp+pvarg]
.text:00409399                 push    0
.text:0040939B                 push    ecx
.text:0040939C                 push    ebx
.text:0040939D                 mov     esi, [eax]
.text:0040939F                 push    eax
.text:004093A0                 mov     ecx, [esi+0Ch]
.text:004093A3                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:004093A9                 call    dword ptr [esi+0Ch]
.text:004093AC                 mov     edi, eax
.text:004093AE                 test    edi, edi
.text:004093B0                 js      loc_40931D
.text:004093B6                 cmp     edi, ebx
.text:004093B8                 jnz     loc_40926C
.text:004093BE                 jmp     loc_40931B
.text:004093BE sub_4091DF      endp
.text:004093BE
.text:004093C3
.text:004093C3 ; =============== S U B R O U T I N E =======================================
.text:004093C3
.text:004093C3 ; Attributes: bp-based frame
.text:004093C3
.text:004093C3 sub_4093C3      proc near               ; CODE XREF: sub_40BCA7+4A↓p
.text:004093C3                                         ; sub_40C58B+54↓p ...
.text:004093C3
.text:004093C3 pvarg           = VARIANTARG ptr -2Ch
.text:004093C3 psz             = dword ptr -18h
.text:004093C3 ppstm           = dword ptr -14h
.text:004093C3 ppv             = dword ptr -10h
.text:004093C3 var_C           = word ptr -0Ch
.text:004093C3 var_8           = dword ptr -8
.text:004093C3 arg_0           = dword ptr  8
.text:004093C3
.text:004093C3                 mov     edi, edi
.text:004093C5                 push    ebp
.text:004093C6                 mov     ebp, esp
.text:004093C8                 sub     esp, 30h
.text:004093CB                 mov     eax, ___security_cookie
.text:004093D0                 xor     eax, ebp
.text:004093D2                 mov     [ebp+var_8], eax
.text:004093D5                 push    ebx
.text:004093D6                 push    esi
.text:004093D7                 or      eax, 0FFFFFFFFh
.text:004093DA                 mov     [ebp+psz], edx
.text:004093DD                 mov     [ebp+var_C], ax
.text:004093E1                 xor     esi, esi
.text:004093E3                 push    edi
.text:004093E4                 lea     eax, [ebp+pvarg]
.text:004093E7                 mov     [ebp+ppstm], esi
.text:004093EA                 push    eax             ; pvarg
.text:004093EB                 mov     ebx, ecx
.text:004093ED                 mov     [ebp+ppv], esi
.text:004093F0                 call    ds:VariantInit
.text:004093F6                 lea     eax, [ebp+ppv]
.text:004093F9                 push    eax             ; ppv
.text:004093FA                 push    offset stru_403618 ; riid
.text:004093FF                 push    15h             ; dwClsContext
.text:00409401                 push    esi             ; pUnkOuter
.text:00409402                 push    offset stru_403628 ; rclsid
.text:00409407                 call    ds:CoCreateInstance
.text:0040940D                 mov     edi, eax
.text:0040940F                 test    edi, edi
.text:00409411                 js      loc_409514
.text:00409417                 mov     eax, [ebp+ppv]
.text:0040941A                 push    0FFFFFFFFh
.text:0040941C                 push    eax
.text:0040941D                 mov     ecx, [eax]
.text:0040941F                 mov     esi, [ecx+0FCh]
.text:00409425                 mov     ecx, esi
.text:00409427                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040942D                 call    esi
.text:0040942F                 mov     edi, eax
.text:00409431                 test    edi, edi
.text:00409433                 js      loc_409514
.text:00409439                 sub     ebx, 1
.text:0040943C                 jz      loc_4094D9
.text:00409442                 sub     ebx, 1
.text:00409445                 jz      short loc_4094BE
.text:00409447                 sub     ebx, 1
.text:0040944A                 jz      short loc_409456
.text:0040944C                 mov     edi, 80070057h
.text:00409451                 jmp     loc_409514
.text:00409456 ; ---------------------------------------------------------------------------
.text:00409456
.text:00409456 loc_409456:                             ; CODE XREF: sub_4093C3+87↑j
.text:00409456                 mov     ecx, [ebp+psz]  ; lpName
.text:00409459                 lea     eax, [ebp+ppstm]
.text:0040945C                 push    eax             ; ppstm
.text:0040945D                 call    sub_40C1E5
.text:00409462                 mov     edi, eax
.text:00409464                 test    edi, edi
.text:00409466                 js      loc_409514
.text:0040946C                 mov     eax, [ebp+ppstm]
.text:0040946F                 lea     ecx, [ebp+pvarg.anonymous_0+8]
.text:00409472                 push    ecx
.text:00409473                 push    offset dword_403608
.text:00409478                 push    eax
.text:00409479                 mov     esi, [eax]
.text:0040947B                 mov     ecx, [esi]
.text:0040947D                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409483                 call    dword ptr [esi]
.text:00409485                 mov     edi, eax
.text:00409487                 test    edi, edi
.text:00409489                 js      loc_409514
.text:0040948F                 push    0Dh
.text:00409491
.text:00409491 loc_409491:                             ; CODE XREF: sub_4093C3+114↓j
.text:00409491                 pop     eax
.text:00409492                 lea     edx, [ebp+var_C]
.text:00409495                 mov     word ptr [ebp+pvarg.anonymous_0], ax
.text:00409499                 mov     eax, [ebp+ppv]
.text:0040949C                 lea     esi, [ebp+pvarg]
.text:0040949F                 push    edx
.text:004094A0                 sub     esp, 10h
.text:004094A3                 mov     edi, esp
.text:004094A5                 mov     ecx, [eax]
.text:004094A7                 push    eax
.text:004094A8                 movsd
.text:004094A9                 movsd
.text:004094AA                 movsd
.text:004094AB                 movsd
.text:004094AC                 mov     esi, [ecx+0E8h]
.text:004094B2                 mov     ecx, esi
.text:004094B4                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:004094BA                 call    esi
.text:004094BC                 jmp     short loc_4094F6
.text:004094BE ; ---------------------------------------------------------------------------
.text:004094BE
.text:004094BE loc_4094BE:                             ; CODE XREF: sub_4093C3+82↑j
.text:004094BE                 push    [ebp+psz]       ; psz
.text:004094C1                 call    ds:SysAllocString
.text:004094C7                 mov     dword ptr [ebp+pvarg.anonymous_0+8], eax
.text:004094CA                 test    eax, eax
.text:004094CC                 jnz     short loc_4094D5
.text:004094CE                 mov     edi, 8007000Eh
.text:004094D3                 jmp     short loc_409514
.text:004094D5 ; ---------------------------------------------------------------------------
.text:004094D5
.text:004094D5 loc_4094D5:                             ; CODE XREF: sub_4093C3+109↑j
.text:004094D5                 push    8
.text:004094D7                 jmp     short loc_409491
.text:004094D9 ; ---------------------------------------------------------------------------
.text:004094D9
.text:004094D9 loc_4094D9:                             ; CODE XREF: sub_4093C3+79↑j
.text:004094D9                 mov     eax, [ebp+ppv]
.text:004094DC                 lea     ecx, [ebp+var_C]
.text:004094DF                 push    ecx
.text:004094E0                 push    [ebp+psz]
.text:004094E3                 mov     esi, [eax]
.text:004094E5                 push    eax
.text:004094E6                 mov     esi, [esi+104h]
.text:004094EC                 mov     ecx, esi
.text:004094EE                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:004094F4                 call    esi
.text:004094F6
.text:004094F6 loc_4094F6:                             ; CODE XREF: sub_4093C3+F9↑j
.text:004094F6                 mov     edi, eax
.text:004094F8                 test    edi, edi
.text:004094FA                 js      short loc_409514
.text:004094FC                 or      eax, 0FFFFFFFFh
.text:004094FF                 cmp     ax, [ebp+var_C]
.text:00409503                 jz      short loc_40950C
.text:00409505                 mov     edi, 80004005h
.text:0040950A                 jmp     short loc_409514
.text:0040950C ; ---------------------------------------------------------------------------
.text:0040950C
.text:0040950C loc_40950C:                             ; CODE XREF: sub_4093C3+140↑j
.text:0040950C                 mov     ecx, [ebp+arg_0]
.text:0040950F                 mov     eax, [ebp+ppv]
.text:00409512                 mov     [ecx], eax
.text:00409514
.text:00409514 loc_409514:                             ; CODE XREF: sub_4093C3+4E↑j
.text:00409514                                         ; sub_4093C3+70↑j ...
.text:00409514                 lea     eax, [ebp+pvarg]
.text:00409517                 push    eax             ; pvarg
.text:00409518                 call    ds:VariantClear
.text:0040951E                 mov     ecx, [ebp+ppstm]
.text:00409521                 test    ecx, ecx
.text:00409523                 jz      short loc_409539
.text:00409525                 mov     eax, [ecx]
.text:00409527                 push    ecx
.text:00409528                 mov     esi, [eax+8]
.text:0040952B                 mov     ecx, esi
.text:0040952D                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409533                 call    esi
.text:00409535                 and     [ebp+ppstm], 0
.text:00409539
.text:00409539 loc_409539:                             ; CODE XREF: sub_4093C3+160↑j
.text:00409539                 test    edi, edi
.text:0040953B                 jns     short loc_409554
.text:0040953D                 mov     ecx, [ebp+ppv]
.text:00409540                 test    ecx, ecx
.text:00409542                 jz      short loc_409554
.text:00409544                 mov     eax, [ecx]
.text:00409546                 push    ecx
.text:00409547                 mov     esi, [eax+8]
.text:0040954A                 mov     ecx, esi
.text:0040954C                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409552                 call    esi
.text:00409554
.text:00409554 loc_409554:                             ; CODE XREF: sub_4093C3+178↑j
.text:00409554                                         ; sub_4093C3+17F↑j
.text:00409554                 mov     ecx, [ebp+var_8]
.text:00409557                 mov     eax, edi
.text:00409559                 pop     edi
.text:0040955A                 pop     esi
.text:0040955B                 xor     ecx, ebp        ; StackCookie
.text:0040955D                 pop     ebx
.text:0040955E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00409563                 mov     esp, ebp
.text:00409565                 pop     ebp
.text:00409566                 retn    4
.text:00409566 sub_4093C3      endp
.text:00409566
.text:00409569
.text:00409569 ; =============== S U B R O U T I N E =======================================
.text:00409569
.text:00409569 ; Attributes: bp-based frame
.text:00409569
.text:00409569 sub_409569      proc near               ; CODE XREF: sub_40A742+A8↓p
.text:00409569
.text:00409569 pvarg           = VARIANTARG ptr -30h
.text:00409569 var_20          = VARIANTARG ptr -20h
.text:00409569 var_C           = dword ptr -0Ch
.text:00409569 var_8           = dword ptr -8
.text:00409569 var_4           = dword ptr -4
.text:00409569
.text:00409569                 mov     edi, edi
.text:0040956B                 push    ebp
.text:0040956C                 mov     ebp, esp
.text:0040956E                 sub     esp, 34h
.text:00409571                 mov     eax, ___security_cookie
.text:00409576                 xor     eax, ebp
.text:00409578                 mov     [ebp+var_4], eax
.text:0040957B                 push    ebx
.text:0040957C                 push    esi
.text:0040957D                 push    edi
.text:0040957E                 lea     eax, [ebp+pvarg]
.text:00409581                 mov     ebx, ecx
.text:00409583                 push    eax             ; pvarg
.text:00409584                 mov     [ebp+var_8], ebx
.text:00409587                 call    ds:VariantInit
.text:0040958D                 lea     eax, [ebp+var_20]
.text:00409590                 push    eax             ; pvarg
.text:00409591                 call    ds:VariantInit
.text:00409597                 mov     eax, [ebx]
.text:00409599                 lea     ecx, [ebp+var_C]
.text:0040959C                 push    ecx
.text:0040959D                 push    ebx
.text:0040959E                 mov     esi, [eax+38h]
.text:004095A1                 mov     ecx, esi
.text:004095A3                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:004095A9                 call    esi
.text:004095AB                 mov     esi, eax
.text:004095AD                 test    esi, esi
.text:004095AF                 js      loc_409695
.text:004095B5                 mov     eax, [ebp+var_C]
.text:004095B8                 dec     eax
.text:004095B9                 sub     eax, 1
.text:004095BC                 jz      short loc_4095D1
.text:004095BE                 sub     eax, 1
.text:004095C1                 jz      loc_409695
.text:004095C7                 mov     esi, 80070057h
.text:004095CC                 jmp     loc_409695
.text:004095D1 ; ---------------------------------------------------------------------------
.text:004095D1
.text:004095D1 loc_4095D1:                             ; CODE XREF: sub_409569+53↑j
.text:004095D1                 lea     eax, [ebp+var_20]
.text:004095D4                 push    eax             ; pvarg
.text:004095D5                 call    ds:VariantClear
.text:004095DB                 mov     eax, [ebx]
.text:004095DD                 lea     ecx, [ebp+var_20]
.text:004095E0                 push    ecx
.text:004095E1                 push    ebx
.text:004095E2                 mov     esi, [eax+30h]
.text:004095E5                 mov     ecx, esi
.text:004095E7                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:004095ED                 call    esi
.text:004095EF                 mov     esi, eax
.text:004095F1                 test    esi, esi
.text:004095F3                 js      loc_409695
.text:004095F9                 mov     eax, [ebx]
.text:004095FB                 push    ebx
.text:004095FC                 mov     esi, [eax+48h]
.text:004095FF                 mov     ecx, esi
.text:00409601                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409607                 call    esi
.text:00409609                 mov     esi, eax
.text:0040960B                 test    esi, esi
.text:0040960D                 js      loc_409695
.text:00409613                 mov     eax, [ebx]
.text:00409615                 push    3
.text:00409617                 push    ebx
.text:00409618                 mov     esi, [eax+3Ch]
.text:0040961B                 mov     ecx, esi
.text:0040961D                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409623                 call    esi
.text:00409625                 mov     esi, eax
.text:00409627                 test    esi, esi
.text:00409629                 js      short loc_409695
.text:0040962B                 lea     eax, [ebp+pvarg]
.text:0040962E                 push    eax             ; pvarg
.text:0040962F                 call    ds:VariantClear
.text:00409635                 and     dword ptr [ebp+pvarg.anonymous_0+0Ch], 0
.text:00409639                 lea     esi, [ebp+pvarg]
.text:0040963C                 mov     ebx, [ebx]
.text:0040963E                 push    14h
.text:00409640                 pop     eax
.text:00409641                 sub     esp, 10h
.text:00409644                 mov     word ptr [ebp+pvarg.anonymous_0], ax
.text:00409648                 mov     ecx, [ebx+40h]
.text:0040964B                 mov     edi, esp
.text:0040964D                 mov     dword ptr [ebp+pvarg.anonymous_0+8], 80000000h
.text:00409654                 push    [ebp+var_8]
.text:00409657                 movsd
.text:00409658                 movsd
.text:00409659                 movsd
.text:0040965A                 movsd
.text:0040965B                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409661                 call    dword ptr [ebx+40h]
.text:00409664                 mov     esi, eax
.text:00409666                 test    esi, esi
.text:00409668                 js      short loc_409695
.text:0040966A                 and     dword ptr [ebp+var_20.anonymous_0+8], 7FFFFFFFh
.text:00409671                 lea     esi, [ebp+var_20]
.text:00409674                 and     dword ptr [ebp+var_20.anonymous_0+0Ch], 0
.text:00409678                 sub     esp, 10h
.text:0040967B                 mov     eax, [ebp+var_8]
.text:0040967E                 mov     edi, esp
.text:00409680                 push    eax
.text:00409681                 mov     ebx, [eax]
.text:00409683                 movsd
.text:00409684                 mov     ecx, [ebx+40h]
.text:00409687                 movsd
.text:00409688                 movsd
.text:00409689                 movsd
.text:0040968A                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409690                 call    dword ptr [ebx+40h]
.text:00409693                 mov     esi, eax
.text:00409695
.text:00409695 loc_409695:                             ; CODE XREF: sub_409569+46↑j
.text:00409695                                         ; sub_409569+58↑j ...
.text:00409695                 lea     eax, [ebp+pvarg]
.text:00409698                 push    eax             ; pvarg
.text:00409699                 call    ds:VariantClear
.text:0040969F                 lea     eax, [ebp+var_20]
.text:004096A2                 push    eax             ; pvarg
.text:004096A3                 call    ds:VariantClear
.text:004096A9                 mov     ecx, [ebp+var_4]
.text:004096AC                 mov     eax, esi
.text:004096AE                 pop     edi
.text:004096AF                 pop     esi
.text:004096B0                 xor     ecx, ebp        ; StackCookie
.text:004096B2                 pop     ebx
.text:004096B3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004096B8                 mov     esp, ebp
.text:004096BA                 pop     ebp
.text:004096BB                 retn
.text:004096BB sub_409569      endp
.text:004096BB
.text:004096BC
.text:004096BC ; =============== S U B R O U T I N E =======================================
.text:004096BC
.text:004096BC ; Attributes: bp-based frame
.text:004096BC
.text:004096BC sub_4096BC      proc near               ; CODE XREF: _wmain+23E↑p
.text:004096BC                                         ; _wmain+398↑p ...
.text:004096BC
.text:004096BC var_C           = dword ptr -0Ch
.text:004096BC bstrString      = dword ptr -8
.text:004096BC var_4           = dword ptr -4
.text:004096BC
.text:004096BC                 mov     edi, edi
.text:004096BE                 push    ebp
.text:004096BF                 mov     ebp, esp
.text:004096C1                 sub     esp, 0Ch
.text:004096C4                 mov     eax, ___security_cookie
.text:004096C9                 xor     eax, ebp
.text:004096CB                 mov     [ebp+var_4], eax
.text:004096CE                 push    ebx
.text:004096CF                 xor     ebx, ebx
.text:004096D1                 mov     [ebp+var_C], ecx
.text:004096D4                 push    esi
.text:004096D5                 mov     esi, ebx
.text:004096D7                 push    edi
.text:004096D8                 mov     edi, ebx
.text:004096DA                 cmp     dword_4145C0, ebx
.text:004096E0                 jz      loc_40981C
.text:004096E6                 cmp     dword_4145C4, ebx
.text:004096EC                 jz      short loc_40970A
.text:004096EE                 mov     eax, [ecx]
.text:004096F0                 push    ebx
.text:004096F1                 push    ebx
.text:004096F2                 push    ecx
.text:004096F3                 mov     esi, [eax+0E8h]
.text:004096F9                 mov     ecx, esi
.text:004096FB                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409701                 call    esi
.text:00409703                 mov     esi, eax
.text:00409705                 jmp     loc_40981C
.text:0040970A ; ---------------------------------------------------------------------------
.text:0040970A
.text:0040970A loc_40970A:                             ; CODE XREF: sub_4096BC+30↑j
.text:0040970A                 mov     esi, dword_4145D4
.text:00409710                 mov     ecx, esi
.text:00409712                 lea     edx, [ecx+2]
.text:00409715
.text:00409715 loc_409715:                             ; CODE XREF: sub_4096BC+62↓j
.text:00409715                 mov     ax, [ecx]
.text:00409718                 add     ecx, 2
.text:0040971B                 cmp     ax, bx
.text:0040971E                 jnz     short loc_409715
.text:00409720                 sub     ecx, edx
.text:00409722                 mov     eax, offset asc_403208 ; "*"
.text:00409727                 sar     ecx, 1
.text:00409729                 inc     ecx
.text:0040972A                 lea     ebx, [esi+ecx*2]
.text:0040972D                 mov     ecx, ebx
.text:0040972F
.text:0040972F loc_40972F:                             ; CODE XREF: sub_4096BC+93↓j
.text:0040972F                 mov     dx, [eax]
.text:00409732                 cmp     dx, [ecx]
.text:00409735                 jnz     short loc_409755
.text:00409737                 test    dx, dx
.text:0040973A                 jz      short loc_409751
.text:0040973C                 mov     dx, [eax+2]
.text:00409740                 cmp     dx, [ecx+2]
.text:00409744                 jnz     short loc_409755
.text:00409746                 add     eax, 4
.text:00409749                 add     ecx, 4
.text:0040974C                 test    dx, dx
.text:0040974F                 jnz     short loc_40972F
.text:00409751
.text:00409751 loc_409751:                             ; CODE XREF: sub_4096BC+7E↑j
.text:00409751                 xor     eax, eax
.text:00409753                 jmp     short loc_40975A
.text:00409755 ; ---------------------------------------------------------------------------
.text:00409755
.text:00409755 loc_409755:                             ; CODE XREF: sub_4096BC+79↑j
.text:00409755                                         ; sub_4096BC+88↑j
.text:00409755                 sbb     eax, eax
.text:00409757                 or      eax, 1
.text:0040975A
.text:0040975A loc_40975A:                             ; CODE XREF: sub_4096BC+97↑j
.text:0040975A                 test    eax, eax
.text:0040975C                 jnz     short loc_4097AF
.text:0040975E                 push    800h            ; dwBytes
.text:00409763                 push    eax             ; dwFlags
.text:00409764                 call    ds:GetProcessHeap
.text:0040976A                 push    eax             ; hHeap
.text:0040976B                 call    ds:HeapAlloc
.text:00409771                 mov     edi, eax
.text:00409773                 test    edi, edi
.text:00409775                 jnz     short loc_409781
.text:00409777                 mov     esi, 8007000Eh
.text:0040977C                 jmp     loc_40981C
.text:00409781 ; ---------------------------------------------------------------------------
.text:00409781
.text:00409781 loc_409781:                             ; CODE XREF: sub_4096BC+B9↑j
.text:00409781                 push    400h            ; cchBufferMax
.text:00409786                 push    edi             ; lpBuffer
.text:00409787                 push    269h            ; uID
.text:0040978C                 push    0               ; hInstance
.text:0040978E                 call    ds:LoadStringW
.text:00409794                 push    pszDest         ; char
.text:0040979A                 push    edi             ; lpSource
.text:0040979B                 call    sub_40E7E4
.text:004097A0                 pop     ecx
.text:004097A1                 pop     ecx
.text:004097A2                 lea     eax, [ebp+bstrString]
.text:004097A5                 mov     ecx, edi
.text:004097A7                 push    eax
.text:004097A8                 call    sub_40E16F
.text:004097AD                 mov     ebx, edi
.text:004097AF
.text:004097AF loc_4097AF:                             ; CODE XREF: sub_4096BC+A0↑j
.text:004097AF                 push    esi             ; psz
.text:004097B0                 call    ds:SysAllocString
.text:004097B6                 mov     esi, eax
.text:004097B8                 mov     [ebp+bstrString], esi
.text:004097BB                 test    esi, esi
.text:004097BD                 jnz     short loc_4097C6
.text:004097BF                 mov     esi, 8007000Eh
.text:004097C4                 jmp     short loc_409808
.text:004097C6 ; ---------------------------------------------------------------------------
.text:004097C6
.text:004097C6 loc_4097C6:                             ; CODE XREF: sub_4096BC+101↑j
.text:004097C6                 push    ebx             ; psz
.text:004097C7                 call    ds:SysAllocString
.text:004097CD                 mov     ebx, eax
.text:004097CF                 test    ebx, ebx
.text:004097D1                 jnz     short loc_4097DA
.text:004097D3                 mov     esi, 8007000Eh
.text:004097D8                 jmp     short loc_4097F4
.text:004097DA ; ---------------------------------------------------------------------------
.text:004097DA
.text:004097DA loc_4097DA:                             ; CODE XREF: sub_4096BC+115↑j
.text:004097DA                 mov     ecx, [ebp+var_C]
.text:004097DD                 push    ebx
.text:004097DE                 push    esi
.text:004097DF                 push    ecx
.text:004097E0                 mov     eax, [ecx]
.text:004097E2                 mov     esi, [eax+0E8h]
.text:004097E8                 mov     ecx, esi
.text:004097EA                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:004097F0                 call    esi
.text:004097F2                 mov     esi, eax
.text:004097F4
.text:004097F4 loc_4097F4:                             ; CODE XREF: sub_4096BC+11C↑j
.text:004097F4                 push    [ebp+bstrString] ; bstrString
.text:004097F7                 call    ds:SysFreeString
.text:004097FD                 test    ebx, ebx
.text:004097FF                 jz      short loc_409808
.text:00409801                 push    ebx             ; bstrString
.text:00409802                 call    ds:SysFreeString
.text:00409808
.text:00409808 loc_409808:                             ; CODE XREF: sub_4096BC+108↑j
.text:00409808                                         ; sub_4096BC+143↑j
.text:00409808                 test    edi, edi
.text:0040980A                 jz      short loc_40981C
.text:0040980C                 push    edi             ; lpMem
.text:0040980D                 push    0               ; dwFlags
.text:0040980F                 call    ds:GetProcessHeap
.text:00409815                 push    eax             ; hHeap
.text:00409816                 call    ds:HeapFree
.text:0040981C
.text:0040981C loc_40981C:                             ; CODE XREF: sub_4096BC+24↑j
.text:0040981C                                         ; sub_4096BC+49↑j ...
.text:0040981C                 mov     ecx, [ebp+var_4]
.text:0040981F                 mov     eax, esi
.text:00409821                 pop     edi
.text:00409822                 pop     esi
.text:00409823                 xor     ecx, ebp        ; StackCookie
.text:00409825                 pop     ebx
.text:00409826                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040982B                 mov     esp, ebp
.text:0040982D                 pop     ebp
.text:0040982E                 retn
.text:0040982E sub_4096BC      endp
.text:0040982E
.text:0040982F
.text:0040982F ; =============== S U B R O U T I N E =======================================
.text:0040982F
.text:0040982F ; Attributes: bp-based frame
.text:0040982F
.text:0040982F ; int __thiscall sub_40982F(SYSTEMTIME *lpSystemTime, int, int)
.text:0040982F sub_40982F      proc near               ; CODE XREF: SetSchedule(IDataCollectorSet *)+17E↓p
.text:0040982F                                         ; SetSchedule(IDataCollectorSet *)+20C↓p
.text:0040982F
.text:0040982F FileTime        = _FILETIME ptr -28h
.text:0040982F var_20          = dword ptr -20h
.text:0040982F var_1C          = dword ptr -1Ch
.text:0040982F pvarg           = dword ptr -18h
.text:0040982F SystemTime      = _SYSTEMTIME ptr -14h
.text:0040982F var_4           = dword ptr -4
.text:0040982F arg_0           = dword ptr  8
.text:0040982F arg_4           = dword ptr  0Ch
.text:0040982F
.text:0040982F                 mov     edi, edi
.text:00409831                 push    ebp
.text:00409832                 mov     ebp, esp
.text:00409834                 sub     esp, 2Ch
.text:00409837                 mov     eax, ___security_cookie
.text:0040983C                 xor     eax, ebp
.text:0040983E                 mov     [ebp+var_4], eax
.text:00409841                 mov     eax, [ebp+arg_0]
.text:00409844                 push    ebx
.text:00409845                 push    esi
.text:00409846                 mov     [ebp+var_1C], eax
.text:00409849                 mov     ebx, ecx
.text:0040984B                 mov     eax, [ebp+arg_4]
.text:0040984E                 push    edi
.text:0040984F                 mov     [ebp+pvarg], eax
.text:00409852                 mov     edi, edx
.text:00409854                 lea     eax, [ebp+FileTime]
.text:00409857                 mov     [ebp+var_20], edi
.text:0040985A                 push    eax             ; lpFileTime
.text:0040985B                 push    ebx             ; lpSystemTime
.text:0040985C                 call    ds:SystemTimeToFileTime
.text:00409862                 test    eax, eax
.text:00409864                 jnz     short loc_40987D
.text:00409866                 call    ds:GetLastError
.text:0040986C                 mov     esi, eax
.text:0040986E                 test    esi, esi
.text:00409870                 jle     short loc_409881
.text:00409872                 movzx   esi, si
.text:00409875                 or      esi, 80070000h
.text:0040987B                 jmp     short loc_40987F
.text:0040987D ; ---------------------------------------------------------------------------
.text:0040987D
.text:0040987D loc_40987D:                             ; CODE XREF: sub_40982F+35↑j
.text:0040987D                 xor     esi, esi
.text:0040987F
.text:0040987F loc_40987F:                             ; CODE XREF: sub_40982F+4C↑j
.text:0040987F                 test    esi, esi
.text:00409881
.text:00409881 loc_409881:                             ; CODE XREF: sub_40982F+41↑j
.text:00409881                 js      loc_409955
.text:00409887                 mov     eax, [ebp+FileTime.dwLowDateTime]
.text:0040988A                 mov     ecx, [ebp+FileTime.dwHighDateTime]
.text:0040988D                 push    [ebp+pvarg]     ; pvarg
.text:00409890                 mov     [edi], eax
.text:00409892                 mov     [edi+4], ecx
.text:00409895                 call    ds:VariantClear
.text:0040989B                 xor     eax, eax
.text:0040989D                 push    7
.text:0040989F                 pop     edi
.text:004098A0                 cmp     ax, [ebx+8]
.text:004098A4                 jnz     short loc_4098B2
.text:004098A6                 cmp     ax, [ebx+0Ah]
.text:004098AA                 jnz     short loc_4098B2
.text:004098AC                 cmp     ax, [ebx+0Ch]
.text:004098B0                 jz      short loc_4098F5
.text:004098B2
.text:004098B2 loc_4098B2:                             ; CODE XREF: sub_40982F+75↑j
.text:004098B2                                         ; sub_40982F+7B↑j
.text:004098B2                 mov     ecx, [ebp+pvarg]
.text:004098B5                 xor     eax, eax
.text:004098B7                 mov     [ecx], di
.text:004098BA                 lea     edi, [ebp+SystemTime]
.text:004098BD                 stosd
.text:004098BE                 stosd
.text:004098BF                 stosd
.text:004098C0                 stosd
.text:004098C1                 mov     ax, [ebx+8]
.text:004098C5                 mov     [ebp+SystemTime.wHour], ax
.text:004098C9                 mov     ax, [ebx+0Ah]
.text:004098CD                 mov     [ebp+SystemTime.wMinute], ax
.text:004098D1                 mov     ax, [ebx+0Ch]
.text:004098D5                 mov     [ebp+SystemTime.wSecond], ax
.text:004098D9                 lea     eax, [ecx+8]
.text:004098DC                 push    eax             ; pvtime
.text:004098DD                 lea     eax, [ebp+SystemTime]
.text:004098E0                 push    eax             ; lpSystemTime
.text:004098E1                 call    ds:SystemTimeToVariantTime
.text:004098E7                 test    eax, eax
.text:004098E9                 jnz     short loc_4098F2
.text:004098EB                 mov     esi, 80070057h
.text:004098F0                 jmp     short loc_409952
.text:004098F2 ; ---------------------------------------------------------------------------
.text:004098F2
.text:004098F2 loc_4098F2:                             ; CODE XREF: sub_40982F+BA↑j
.text:004098F2                 push    7
.text:004098F4                 pop     edi
.text:004098F5
.text:004098F5 loc_4098F5:                             ; CODE XREF: sub_40982F+81↑j
.text:004098F5                 push    [ebp+var_1C]    ; pvarg
.text:004098F8                 call    ds:VariantClear
.text:004098FE                 xor     eax, eax
.text:00409900                 cmp     ax, [ebx]
.text:00409903                 jnz     short loc_409911
.text:00409905                 cmp     ax, [ebx+2]
.text:00409909                 jnz     short loc_409911
.text:0040990B                 cmp     ax, [ebx+6]
.text:0040990F                 jz      short loc_40994E
.text:00409911
.text:00409911 loc_409911:                             ; CODE XREF: sub_40982F+D4↑j
.text:00409911                                         ; sub_40982F+DA↑j
.text:00409911                 mov     ecx, [ebp+var_1C]
.text:00409914                 xor     eax, eax
.text:00409916                 mov     [ecx], di
.text:00409919                 lea     edi, [ebp+SystemTime]
.text:0040991C                 stosd
.text:0040991D                 stosd
.text:0040991E                 stosd
.text:0040991F                 stosd
.text:00409920                 mov     ax, [ebx]
.text:00409923                 mov     [ebp+SystemTime.wYear], ax
.text:00409927                 mov     ax, [ebx+2]
.text:0040992B                 mov     [ebp+SystemTime.wMonth], ax
.text:0040992F                 mov     ax, [ebx+6]
.text:00409933                 mov     [ebp+SystemTime.wDay], ax
.text:00409937                 lea     eax, [ecx+8]
.text:0040993A                 push    eax             ; pvtime
.text:0040993B                 lea     eax, [ebp+SystemTime]
.text:0040993E                 push    eax             ; lpSystemTime
.text:0040993F                 call    ds:SystemTimeToVariantTime
.text:00409945                 test    eax, eax
.text:00409947                 jnz     short loc_40994E
.text:00409949                 mov     esi, 80070057h
.text:0040994E
.text:0040994E loc_40994E:                             ; CODE XREF: sub_40982F+E0↑j
.text:0040994E                                         ; sub_40982F+118↑j
.text:0040994E                 test    esi, esi
.text:00409950                 jns     short loc_40996E
.text:00409952
.text:00409952 loc_409952:                             ; CODE XREF: sub_40982F+C1↑j
.text:00409952                 mov     edi, [ebp+var_20]
.text:00409955
.text:00409955 loc_409955:                             ; CODE XREF: sub_40982F:loc_409881↑j
.text:00409955                 push    [ebp+pvarg]     ; pvarg
.text:00409958                 and     dword ptr [edi], 0
.text:0040995B                 and     dword ptr [edi+4], 0
.text:0040995F                 call    ds:VariantInit
.text:00409965                 push    [ebp+var_1C]    ; pvarg
.text:00409968                 call    ds:VariantInit
.text:0040996E
.text:0040996E loc_40996E:                             ; CODE XREF: sub_40982F+121↑j
.text:0040996E                 mov     ecx, [ebp+var_4]
.text:00409971                 mov     eax, esi
.text:00409973                 pop     edi
.text:00409974                 pop     esi
.text:00409975                 xor     ecx, ebp        ; StackCookie
.text:00409977                 pop     ebx
.text:00409978                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040997D                 mov     esp, ebp
.text:0040997F                 pop     ebp
.text:00409980                 retn    8
.text:00409980 sub_40982F      endp
.text:00409980
.text:00409983
.text:00409983 ; =============== S U B R O U T I N E =======================================
.text:00409983
.text:00409983 ; Attributes: bp-based frame info_from_lumina
.text:00409983
.text:00409983 ; int __cdecl SetSchedule(struct IDataCollectorSet *)
.text:00409983 ?SetSchedule@@YGJPAUIDataCollectorSet@@@Z proc near
.text:00409983                                         ; CODE XREF: sub_40BF14+21C↓p
.text:00409983
.text:00409983 var_48          = VARIANTARG ptr -48h
.text:00409983 pvarg           = VARIANTARG ptr -38h
.text:00409983 var_28          = dword ptr -28h
.text:00409983 var_24          = dword ptr -24h
.text:00409983 var_20          = dword ptr -20h
.text:00409983 var_1C          = dword ptr -1Ch
.text:00409983 String2         = dword ptr -14h
.text:00409983 var_10          = dword ptr -10h
.text:00409983 var_C           = dword ptr -0Ch
.text:00409983 var_8           = dword ptr -8
.text:00409983 var_4           = dword ptr -4
.text:00409983
.text:00409983                 mov     edi, edi
.text:00409985                 push    ebp
.text:00409986                 mov     ebp, esp
.text:00409988                 sub     esp, 4Ch
.text:0040998B                 mov     eax, ___security_cookie
.text:00409990                 xor     eax, ebp
.text:00409992                 mov     [ebp+var_4], eax
.text:00409995                 push    ebx
.text:00409996                 push    esi
.text:00409997                 xor     esi, esi
.text:00409999                 lea     eax, [ebp+pvarg]
.text:0040999C                 push    edi
.text:0040999D                 mov     ebx, ecx
.text:0040999F                 mov     [ebp+var_24], esi
.text:004099A2                 push    eax             ; pvarg
.text:004099A3                 mov     [ebp+var_10], ebx
.text:004099A6                 mov     edi, esi
.text:004099A8                 mov     [ebp+var_8], esi
.text:004099AB                 mov     [ebp+var_C], esi
.text:004099AE                 mov     [ebp+var_20], esi
.text:004099B1                 mov     [ebp+var_1C], esi
.text:004099B4                 call    ds:VariantInit
.text:004099BA                 lea     eax, [ebp+var_48]
.text:004099BD                 push    eax             ; pvarg
.text:004099BE                 call    ds:VariantInit
.text:004099C4                 cmp     dword_414010, esi
.text:004099CA                 jz      loc_409A58
.text:004099D0                 mov     edx, String2
.text:004099D6                 xor     eax, eax
.text:004099D8                 mov     [ebp+String2], edx
.text:004099DB                 cmp     ax, [edx]
.text:004099DE                 jz      short loc_409A58
.text:004099E0                 jmp     short loc_4099E4
.text:004099E2 ; ---------------------------------------------------------------------------
.text:004099E2
.text:004099E2 loc_4099E2:                             ; CODE XREF: SetSchedule(IDataCollectorSet *)+D3↓j
.text:004099E2                 xor     esi, esi
.text:004099E4
.text:004099E4 loc_4099E4:                             ; CODE XREF: SetSchedule(IDataCollectorSet *)+5D↑j
.text:004099E4                 push    edx             ; String2
.text:004099E5                 push    offset aStart   ; "start"
.text:004099EA                 call    ds:__imp__wcsicmp
.text:004099F0                 pop     ecx
.text:004099F1                 pop     ecx
.text:004099F2                 test    eax, eax
.text:004099F4                 jnz     short loc_409A01
.text:004099F6                 mov     eax, [ebx]
.text:004099F8                 push    esi
.text:004099F9                 mov     esi, [eax+0C8h]
.text:004099FF                 jmp     short loc_409A1B
.text:00409A01 ; ---------------------------------------------------------------------------
.text:00409A01
.text:00409A01 loc_409A01:                             ; CODE XREF: SetSchedule(IDataCollectorSet *)+71↑j
.text:00409A01                 push    [ebp+String2]   ; String2
.text:00409A04                 push    offset aStop    ; "stop"
.text:00409A09                 call    ds:__imp__wcsicmp
.text:00409A0F                 pop     ecx
.text:00409A10                 pop     ecx
.text:00409A11                 test    eax, eax
.text:00409A13                 jnz     short loc_409A30
.text:00409A15                 mov     eax, [ebx]
.text:00409A17                 push    esi
.text:00409A18                 mov     esi, [eax+24h]
.text:00409A1B
.text:00409A1B loc_409A1B:                             ; CODE XREF: SetSchedule(IDataCollectorSet *)+7C↑j
.text:00409A1B                 push    ebx
.text:00409A1C                 mov     ecx, esi
.text:00409A1E                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409A24                 call    esi
.text:00409A26                 mov     edi, eax
.text:00409A28                 test    edi, edi
.text:00409A2A                 js      loc_409CCC
.text:00409A30
.text:00409A30 loc_409A30:                             ; CODE XREF: SetSchedule(IDataCollectorSet *)+90↑j
.text:00409A30                 mov     edx, [ebp+String2]
.text:00409A33                 mov     ecx, edx
.text:00409A35                 lea     esi, [ecx+2]
.text:00409A38
.text:00409A38 loc_409A38:                             ; CODE XREF: SetSchedule(IDataCollectorSet *)+BF↓j
.text:00409A38                 mov     ax, [ecx]
.text:00409A3B                 add     ecx, 2
.text:00409A3E                 cmp     ax, word ptr [ebp+var_24]
.text:00409A42                 jnz     short loc_409A38
.text:00409A44                 sub     ecx, esi
.text:00409A46                 xor     eax, eax
.text:00409A48                 sar     ecx, 1
.text:00409A4A                 lea     edx, [edx+ecx*2]
.text:00409A4D                 add     edx, 2
.text:00409A50                 mov     [ebp+String2], edx
.text:00409A53                 cmp     ax, [edx]
.text:00409A56                 jnz     short loc_4099E2
.text:00409A58
.text:00409A58 loc_409A58:                             ; CODE XREF: SetSchedule(IDataCollectorSet *)+47↑j
.text:00409A58                                         ; SetSchedule(IDataCollectorSet *)+5B↑j
.text:00409A58                 cmp     dword_413750, 0
.text:00409A5F                 jnz     short loc_409A80
.text:00409A61                 cmp     dword_414870, 0
.text:00409A68                 jnz     short loc_409A80
.text:00409A6A                 cmp     dword_414490, 0
.text:00409A71                 jnz     short loc_409A80
.text:00409A73                 cmp     dword_414190, 0
.text:00409A7A                 jz      loc_409CCC
.text:00409A80
.text:00409A80 loc_409A80:                             ; CODE XREF: SetSchedule(IDataCollectorSet *)+DC↑j
.text:00409A80                                         ; SetSchedule(IDataCollectorSet *)+E5↑j ...
.text:00409A80                 mov     eax, [ebx]
.text:00409A82                 push    0FFFFFFFFh
.text:00409A84                 push    ebx
.text:00409A85                 mov     esi, [eax+0C8h]
.text:00409A8B                 mov     ecx, esi
.text:00409A8D                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409A93                 call    esi
.text:00409A95                 mov     edi, eax
.text:00409A97                 test    edi, edi
.text:00409A99                 js      loc_409CCC
.text:00409A9F                 mov     eax, [ebx]
.text:00409AA1                 lea     ecx, [ebp+var_C]
.text:00409AA4                 push    ecx
.text:00409AA5                 push    ebx
.text:00409AA6                 mov     esi, [eax+0C0h]
.text:00409AAC                 mov     ecx, esi
.text:00409AAE                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409AB4                 call    esi
.text:00409AB6                 mov     edi, eax
.text:00409AB8                 test    edi, edi
.text:00409ABA                 js      loc_409CCC
.text:00409AC0                 mov     eax, [ebp+var_C]
.text:00409AC3                 lea     edx, [ebp+var_8]
.text:00409AC6                 push    edx
.text:00409AC7                 push    eax
.text:00409AC8                 mov     ecx, [eax]
.text:00409ACA                 mov     esi, [ecx+38h]
.text:00409ACD                 mov     ecx, esi
.text:00409ACF                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409AD5                 call    esi
.text:00409AD7                 mov     edi, eax
.text:00409AD9                 test    edi, edi
.text:00409ADB                 js      loc_409CCC
.text:00409AE1                 cmp     dword_413750, 0
.text:00409AE8                 push    7
.text:00409AEA                 pop     ebx
.text:00409AEB                 jz      loc_409B72
.text:00409AF1                 lea     eax, [ebp+var_48]
.text:00409AF4                 mov     ecx, offset SystemTime ; lpSystemTime
.text:00409AF9                 push    eax             ; int
.text:00409AFA                 lea     eax, [ebp+pvarg]
.text:00409AFD                 push    eax             ; int
.text:00409AFE                 lea     edx, [ebp+var_20]
.text:00409B01                 call    sub_40982F
.text:00409B06                 mov     edi, eax
.text:00409B08                 test    edi, edi
.text:00409B0A                 js      loc_409CCC
.text:00409B10                 cmp     bx, word ptr [ebp+pvarg.anonymous_0]
.text:00409B14                 jnz     short loc_409B41
.text:00409B16                 mov     eax, [ebp+var_8]
.text:00409B19                 lea     esi, [ebp+pvarg]
.text:00409B1C                 sub     esp, 10h
.text:00409B1F                 mov     edi, esp
.text:00409B21                 mov     ebx, [eax]
.text:00409B23                 push    eax
.text:00409B24                 movsd
.text:00409B25                 mov     ecx, [ebx+20h]
.text:00409B28                 movsd
.text:00409B29                 movsd
.text:00409B2A                 movsd
.text:00409B2B                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409B31                 call    dword ptr [ebx+20h]
.text:00409B34                 mov     edi, eax
.text:00409B36                 test    edi, edi
.text:00409B38                 js      loc_409CCC
.text:00409B3E                 push    7
.text:00409B40                 pop     ebx
.text:00409B41
.text:00409B41 loc_409B41:                             ; CODE XREF: SetSchedule(IDataCollectorSet *)+191↑j
.text:00409B41                 cmp     bx, word ptr [ebp+var_48.anonymous_0]
.text:00409B45                 jnz     short loc_409B72
.text:00409B47                 mov     eax, [ebp+var_8]
.text:00409B4A                 lea     esi, [ebp+var_48]
.text:00409B4D                 sub     esp, 10h
.text:00409B50                 mov     edi, esp
.text:00409B52                 mov     ebx, [eax]
.text:00409B54                 push    eax
.text:00409B55                 movsd
.text:00409B56                 mov     ecx, [ebx+30h]
.text:00409B59                 movsd
.text:00409B5A                 movsd
.text:00409B5B                 movsd
.text:00409B5C                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409B62                 call    dword ptr [ebx+30h]
.text:00409B65                 mov     edi, eax
.text:00409B67                 test    edi, edi
.text:00409B69                 js      loc_409CCC
.text:00409B6F                 push    7
.text:00409B71                 pop     ebx
.text:00409B72
.text:00409B72 loc_409B72:                             ; CODE XREF: SetSchedule(IDataCollectorSet *)+168↑j
.text:00409B72                                         ; SetSchedule(IDataCollectorSet *)+1C2↑j
.text:00409B72                 cmp     dword_414870, 0
.text:00409B79                 jz      loc_409C2D
.text:00409B7F                 lea     eax, [ebp+var_48]
.text:00409B82                 mov     ecx, offset stru_414884 ; lpSystemTime
.text:00409B87                 push    eax             ; int
.text:00409B88                 lea     eax, [ebp+pvarg]
.text:00409B8B                 push    eax             ; int
.text:00409B8C                 lea     edx, [ebp+var_28]
.text:00409B8F                 call    sub_40982F
.text:00409B94                 mov     edi, eax
.text:00409B96                 test    edi, edi
.text:00409B98                 js      loc_409CCC
.text:00409B9E                 cmp     bx, word ptr [ebp+pvarg.anonymous_0]
.text:00409BA2                 jnz     short loc_409BE1
.text:00409BA4                 cmp     dword_414190, 0
.text:00409BAB                 jz      short loc_409BB6
.text:00409BAD                 cmp     dword_414194, 0
.text:00409BB4                 jz      short loc_409BE1
.text:00409BB6
.text:00409BB6 loc_409BB6:                             ; CODE XREF: SetSchedule(IDataCollectorSet *)+228↑j
.text:00409BB6                 mov     eax, [ebp+var_8]
.text:00409BB9                 lea     esi, [ebp+pvarg]
.text:00409BBC                 sub     esp, 10h
.text:00409BBF                 mov     edi, esp
.text:00409BC1                 mov     ebx, [eax]
.text:00409BC3                 push    eax
.text:00409BC4                 movsd
.text:00409BC5                 mov     ecx, [ebx+28h]
.text:00409BC8                 movsd
.text:00409BC9                 movsd
.text:00409BCA                 movsd
.text:00409BCB                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409BD1                 call    dword ptr [ebx+28h]
.text:00409BD4                 mov     edi, eax
.text:00409BD6                 test    edi, edi
.text:00409BD8                 js      loc_409CCC
.text:00409BDE                 push    7
.text:00409BE0                 pop     ebx
.text:00409BE1
.text:00409BE1 loc_409BE1:                             ; CODE XREF: SetSchedule(IDataCollectorSet *)+21F↑j
.text:00409BE1                                         ; SetSchedule(IDataCollectorSet *)+231↑j
.text:00409BE1                 cmp     bx, word ptr [ebp+var_48.anonymous_0]
.text:00409BE5                 jnz     short loc_409C2D
.text:00409BE7                 mov     eax, [ebp+var_20]
.text:00409BEA                 xor     edi, edi
.text:00409BEC                 mov     edx, [ebp+var_1C]
.text:00409BEF                 cmp     eax, edi
.text:00409BF1                 jnz     short loc_409BF7
.text:00409BF3                 cmp     edx, edi
.text:00409BF5                 jz      short loc_409C2D
.text:00409BF7
.text:00409BF7 loc_409BF7:                             ; CODE XREF: SetSchedule(IDataCollectorSet *)+26E↑j
.text:00409BF7                 mov     ecx, [ebp+var_28]
.text:00409BFA                 mov     ebx, [ebp+var_10]
.text:00409BFD                 sub     ecx, eax
.text:00409BFF                 mov     eax, [ebp+var_24]
.text:00409C02                 push    edi
.text:00409C03                 push    989680h
.text:00409C08                 mov     esi, [ebx]
.text:00409C0A                 sbb     eax, edx
.text:00409C0C                 push    eax
.text:00409C0D                 push    ecx
.text:00409C0E                 call    __aulldiv
.text:00409C13                 mov     ecx, [esi+24h]
.text:00409C16                 push    eax
.text:00409C17                 push    ebx
.text:00409C18                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409C1E                 call    dword ptr [esi+24h]
.text:00409C21                 mov     edi, eax
.text:00409C23                 test    edi, edi
.text:00409C25                 js      loc_409CCC
.text:00409C2B                 jmp     short loc_409C30
.text:00409C2D ; ---------------------------------------------------------------------------
.text:00409C2D
.text:00409C2D loc_409C2D:                             ; CODE XREF: SetSchedule(IDataCollectorSet *)+1F6↑j
.text:00409C2D                                         ; SetSchedule(IDataCollectorSet *)+262↑j ...
.text:00409C2D                 mov     ebx, [ebp+var_10]
.text:00409C30
.text:00409C30 loc_409C30:                             ; CODE XREF: SetSchedule(IDataCollectorSet *)+2A8↑j
.text:00409C30                 cmp     dword_414490, 0
.text:00409C37                 jz      short loc_409C6F
.text:00409C39                 movzx   eax, word_4144AC
.text:00409C40                 imul    ecx, eax, 3Ch ; '<'
.text:00409C43                 movzx   eax, word_4144AE
.text:00409C4A                 add     ecx, eax
.text:00409C4C                 movzx   eax, word_4144B0
.text:00409C53                 imul    ecx, 3Ch ; '<'
.text:00409C56                 add     ecx, eax
.text:00409C58                 mov     eax, [ebx]
.text:00409C5A                 push    ecx
.text:00409C5B                 push    ebx
.text:00409C5C                 mov     esi, [eax+24h]
.text:00409C5F                 mov     ecx, esi
.text:00409C61                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409C67                 call    esi
.text:00409C69                 mov     edi, eax
.text:00409C6B                 test    edi, edi
.text:00409C6D                 js      short loc_409CCC
.text:00409C6F
.text:00409C6F loc_409C6F:                             ; CODE XREF: SetSchedule(IDataCollectorSet *)+2B4↑j
.text:00409C6F                 cmp     dword_414190, 0
.text:00409C76                 jz      short loc_409C85
.text:00409C78                 cmp     dword_414194, 0
.text:00409C7F                 jnz     short loc_409C85
.text:00409C81                 push    7Fh
.text:00409C83                 jmp     short loc_409C88
.text:00409C85 ; ---------------------------------------------------------------------------
.text:00409C85
.text:00409C85 loc_409C85:                             ; CODE XREF: SetSchedule(IDataCollectorSet *)+2F3↑j
.text:00409C85                                         ; SetSchedule(IDataCollectorSet *)+2FC↑j
.text:00409C85                 xor     edx, edx
.text:00409C87                 push    edx
.text:00409C88
.text:00409C88 loc_409C88:                             ; CODE XREF: SetSchedule(IDataCollectorSet *)+300↑j
.text:00409C88                 mov     eax, [ebp+var_8]
.text:00409C8B                 push    eax
.text:00409C8C                 mov     ecx, [eax]
.text:00409C8E                 mov     esi, [ecx+38h]
.text:00409C91                 mov     ecx, esi
.text:00409C93                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409C99                 call    esi
.text:00409C9B                 mov     eax, [ebp+var_C]
.text:00409C9E                 push    eax
.text:00409C9F                 mov     ecx, [eax]
.text:00409CA1                 mov     esi, [ecx+30h]
.text:00409CA4                 mov     ecx, esi
.text:00409CA6                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409CAC                 call    esi
.text:00409CAE                 mov     edi, eax
.text:00409CB0                 test    edi, edi
.text:00409CB2                 js      short loc_409CCC
.text:00409CB4                 mov     eax, [ebp+var_C]
.text:00409CB7                 push    [ebp+var_8]
.text:00409CBA                 push    eax
.text:00409CBB                 mov     ecx, [eax]
.text:00409CBD                 mov     esi, [ecx+28h]
.text:00409CC0                 mov     ecx, esi
.text:00409CC2                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409CC8                 call    esi
.text:00409CCA                 mov     edi, eax
.text:00409CCC
.text:00409CCC loc_409CCC:                             ; CODE XREF: SetSchedule(IDataCollectorSet *)+A7↑j
.text:00409CCC                                         ; SetSchedule(IDataCollectorSet *)+F7↑j ...
.text:00409CCC                 lea     eax, [ebp+pvarg]
.text:00409CCF                 push    eax             ; pvarg
.text:00409CD0                 call    ds:VariantClear
.text:00409CD6                 lea     eax, [ebp+var_48]
.text:00409CD9                 push    eax             ; pvarg
.text:00409CDA                 call    ds:VariantClear
.text:00409CE0                 mov     ecx, [ebp+var_8]
.text:00409CE3                 test    ecx, ecx
.text:00409CE5                 jz      short loc_409CFC
.text:00409CE7                 mov     eax, [ecx]
.text:00409CE9                 push    ecx
.text:00409CEA                 mov     esi, [eax+8]
.text:00409CED                 mov     ecx, esi
.text:00409CEF                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409CF5                 call    esi
.text:00409CF7                 xor     eax, eax
.text:00409CF9                 mov     [ebp+var_8], eax
.text:00409CFC
.text:00409CFC loc_409CFC:                             ; CODE XREF: SetSchedule(IDataCollectorSet *)+362↑j
.text:00409CFC                 mov     ecx, [ebp+var_C]
.text:00409CFF                 test    ecx, ecx
.text:00409D01                 jz      short loc_409D13
.text:00409D03                 mov     eax, [ecx]
.text:00409D05                 push    ecx
.text:00409D06                 mov     esi, [eax+8]
.text:00409D09                 mov     ecx, esi
.text:00409D0B                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00409D11                 call    esi
.text:00409D13
.text:00409D13 loc_409D13:                             ; CODE XREF: SetSchedule(IDataCollectorSet *)+37E↑j
.text:00409D13                 mov     ecx, [ebp+var_4]
.text:00409D16                 mov     eax, edi
.text:00409D18                 pop     edi
.text:00409D19                 pop     esi
.text:00409D1A                 xor     ecx, ebp        ; StackCookie
.text:00409D1C                 pop     ebx
.text:00409D1D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00409D22                 mov     esp, ebp
.text:00409D24                 pop     ebp
.text:00409D25                 retn
.text:00409D25 ?SetSchedule@@YGJPAUIDataCollectorSet@@@Z endp
.text:00409D25
.text:00409D26
.text:00409D26 ; =============== S U B R O U T I N E =======================================
.text:00409D26
.text:00409D26 ; Attributes: bp-based frame
.text:00409D26
.text:00409D26 sub_409D26      proc near               ; CODE XREF: SetCounterValues(IDataCollector *,int *)+262↓p
.text:00409D26                                         ; sub_40B60B+98↓p ...
.text:00409D26
.text:00409D26 var_10          = dword ptr -10h
.text:00409D26 var_C           = dword ptr -0Ch
.text:00409D26 psz             = dword ptr -8
.text:00409D26 ppvData         = dword ptr -4
.text:00409D26
.text:00409D26                 mov     edi, edi
.text:00409D28                 push    ebp
.text:00409D29                 mov     ebp, esp
.text:00409D2B                 sub     esp, 10h
.text:00409D2E                 push    ebx
.text:00409D2F                 mov     eax, ecx
.text:00409D31                 mov     [ebp+var_10], edx
.text:00409D34                 push    esi
.text:00409D35                 push    edi
.text:00409D36                 xor     edi, edi
.text:00409D38                 mov     [ebp+psz], eax
.text:00409D3B                 xor     ecx, ecx
.text:00409D3D                 mov     [ebp+ppvData], edi
.text:00409D40                 mov     ebx, edi
.text:00409D42                 mov     [ebp+var_C], edi
.text:00409D45                 mov     esi, eax
.text:00409D47                 mov     [edx], edi
.text:00409D49                 cmp     cx, [eax]
.text:00409D4C                 jz      short loc_409D70
.text:00409D4E
.text:00409D4E loc_409D4E:                             ; CODE XREF: sub_409D26+48↓j
.text:00409D4E                 mov     ecx, esi
.text:00409D50                 inc     ebx
.text:00409D51                 lea     edx, [ecx+2]
.text:00409D54
.text:00409D54 loc_409D54:                             ; CODE XREF: sub_409D26+37↓j
.text:00409D54                 mov     ax, [ecx]
.text:00409D57                 add     ecx, 2
.text:00409D5A                 cmp     ax, di
.text:00409D5D                 jnz     short loc_409D54
.text:00409D5F                 sub     ecx, edx
.text:00409D61                 xor     eax, eax
.text:00409D63                 sar     ecx, 1
.text:00409D65                 lea     esi, [esi+ecx*2]
.text:00409D68                 add     esi, 2
.text:00409D6B                 cmp     ax, [esi]
.text:00409D6E                 jnz     short loc_409D4E
.text:00409D70
.text:00409D70 loc_409D70:                             ; CODE XREF: sub_409D26+26↑j
.text:00409D70                 push    ebx             ; cElements
.text:00409D71                 push    edi             ; lLbound
.text:00409D72                 push    8               ; vt
.text:00409D74                 call    ds:SafeArrayCreateVector
.text:00409D7A                 mov     edi, eax
.text:00409D7C                 test    edi, edi
.text:00409D7E                 jnz     short loc_409D87
.text:00409D80
.text:00409D80 loc_409D80:                             ; CODE XREF: sub_409D26+92↓j
.text:00409D80                 mov     esi, 8007000Eh
.text:00409D85                 jmp     short loc_409DED
.text:00409D87 ; ---------------------------------------------------------------------------
.text:00409D87
.text:00409D87 loc_409D87:                             ; CODE XREF: sub_409D26+58↑j
.text:00409D87                 lea     eax, [ebp+ppvData]
.text:00409D8A                 push    eax             ; ppvData
.text:00409D8B                 push    edi             ; psa
.text:00409D8C                 call    ds:SafeArrayAccessData
.text:00409D92                 mov     esi, eax
.text:00409D94                 test    esi, esi
.text:00409D96                 js      short loc_409DED
.text:00409D98                 xor     eax, eax
.text:00409D9A                 mov     esi, eax
.text:00409D9C                 test    ebx, ebx
.text:00409D9E                 jz      short loc_409DE4
.text:00409DA0                 mov     edx, [ebp+psz]
.text:00409DA3
.text:00409DA3 loc_409DA3:                             ; CODE XREF: sub_409D26+BC↓j
.text:00409DA3                 push    edx             ; psz
.text:00409DA4                 call    ds:SysAllocString
.text:00409DAA                 mov     ecx, [ebp+ppvData]
.text:00409DAD                 mov     [ecx+esi*4], eax
.text:00409DB0                 xor     ecx, ecx
.text:00409DB2                 mov     eax, [ebp+ppvData]
.text:00409DB5                 cmp     [eax+esi*4], ecx
.text:00409DB8                 jz      short loc_409D80
.text:00409DBA                 mov     edx, [ebp+psz]
.text:00409DBD                 mov     ecx, edx
.text:00409DBF                 lea     eax, [ecx+2]
.text:00409DC2                 mov     [ebp+psz], eax
.text:00409DC5
.text:00409DC5 loc_409DC5:                             ; CODE XREF: sub_409D26+A9↓j
.text:00409DC5                 mov     ax, [ecx]
.text:00409DC8                 add     ecx, 2
.text:00409DCB                 cmp     ax, word ptr [ebp+var_C]
.text:00409DCF                 jnz     short loc_409DC5
.text:00409DD1                 sub     ecx, [ebp+psz]
.text:00409DD4                 sar     ecx, 1
.text:00409DD6                 lea     edx, [edx+ecx*2]
.text:00409DD9                 add     edx, 2
.text:00409DDC                 inc     esi
.text:00409DDD                 mov     [ebp+psz], edx
.text:00409DE0                 cmp     esi, ebx
.text:00409DE2                 jb      short loc_409DA3
.text:00409DE4
.text:00409DE4 loc_409DE4:                             ; CODE XREF: sub_409D26+78↑j
.text:00409DE4                 mov     eax, [ebp+var_10]
.text:00409DE7                 mov     [eax], edi
.text:00409DE9                 xor     eax, eax
.text:00409DEB                 mov     esi, eax
.text:00409DED
.text:00409DED loc_409DED:                             ; CODE XREF: sub_409D26+5F↑j
.text:00409DED                                         ; sub_409D26+70↑j
.text:00409DED                 cmp     [ebp+ppvData], 0
.text:00409DF1                 jz      short loc_409DFA
.text:00409DF3                 push    edi             ; psa
.text:00409DF4                 call    ds:SafeArrayUnaccessData
.text:00409DFA
.text:00409DFA loc_409DFA:                             ; CODE XREF: sub_409D26+CB↑j
.text:00409DFA                 test    esi, esi
.text:00409DFC                 jns     short loc_409E09
.text:00409DFE                 test    edi, edi
.text:00409E00                 jz      short loc_409E09
.text:00409E02                 push    edi             ; psa
.text:00409E03                 call    ds:SafeArrayDestroy
.text:00409E09
.text:00409E09 loc_409E09:                             ; CODE XREF: sub_409D26+D6↑j
.text:00409E09                                         ; sub_409D26+DA↑j
.text:00409E09                 pop     edi
.text:00409E0A                 mov     eax, esi
.text:00409E0C                 pop     esi
.text:00409E0D                 pop     ebx
.text:00409E0E                 mov     esp, ebp
.text:00409E10                 pop     ebp
.text:00409E11                 retn
.text:00409E11 sub_409D26      endp
.text:00409E11
.text:00409E12
.text:00409E12 ; =============== S U B R O U T I N E =======================================
.text:00409E12
.text:00409E12 ; Attributes: bp-based frame
.text:00409E12
.text:00409E12 ; int __thiscall sub_409E12(wchar_t *FileName)
.text:00409E12 sub_409E12      proc near               ; CODE XREF: SetCounterValues(IDataCollector *,int *)+29A↓p
.text:00409E12
.text:00409E12 var_834         = dword ptr -834h
.text:00409E12 var_830         = dword ptr -830h
.text:00409E12 Buffer          = dword ptr -82Ch
.text:00409E12 var_828         = dword ptr -828h
.text:00409E12 Stream          = dword ptr -824h
.text:00409E12 ppvData         = dword ptr -820h
.text:00409E12 NumberOfBytesRead= dword ptr -81Ch
.text:00409E12 hFile           = dword ptr -818h
.text:00409E12 var_814         = dword ptr -814h
.text:00409E12 Str             = word ptr -810h
.text:00409E12 var_80E         = byte ptr -80Eh
.text:00409E12 var_10          = word ptr -10h
.text:00409E12 var_4           = dword ptr -4
.text:00409E12
.text:00409E12                 mov     edi, edi
.text:00409E14                 push    ebp
.text:00409E15                 mov     ebp, esp
.text:00409E17                 sub     esp, 834h
.text:00409E1D                 mov     eax, ___security_cookie
.text:00409E22                 xor     eax, ebp
.text:00409E24                 mov     [ebp+var_4], eax
.text:00409E27                 push    ebx
.text:00409E28                 push    esi
.text:00409E29                 push    edi
.text:00409E2A                 xor     eax, eax
.text:00409E2C                 mov     [ebp+var_834], edx
.text:00409E32                 push    eax             ; hTemplateFile
.text:00409E33                 push    80h ; '€'       ; dwFlagsAndAttributes
.text:00409E38                 push    3               ; dwCreationDisposition
.text:00409E3A                 push    eax             ; lpSecurityAttributes
.text:00409E3B                 push    1               ; dwShareMode
.text:00409E3D                 mov     esi, ecx
.text:00409E3F                 mov     [ebp+var_828], eax
.text:00409E45                 push    80000000h       ; dwDesiredAccess
.text:00409E4A                 mov     ebx, eax
.text:00409E4C                 mov     [ebp+Stream], eax
.text:00409E52                 push    esi             ; lpFileName
.text:00409E53                 mov     [ebp+var_814], ebx
.text:00409E59                 mov     [ebp+ppvData], eax
.text:00409E5F                 call    ds:CreateFileW
.text:00409E65                 mov     edi, eax
.text:00409E67                 mov     [ebp+hFile], edi
.text:00409E6D                 cmp     edi, 0FFFFFFFFh
.text:00409E70                 jnz     short loc_409E90
.text:00409E72                 call    ds:GetLastError
.text:00409E78                 mov     esi, eax
.text:00409E7A
.text:00409E7A loc_409E7A:                             ; CODE XREF: sub_409E12+14B↓j
.text:00409E7A                 test    esi, esi
.text:00409E7C                 jle     loc_40A05F
.text:00409E82                 movzx   esi, si
.text:00409E85                 or      esi, 80070000h
.text:00409E8B                 jmp     loc_40A05F
.text:00409E90 ; ---------------------------------------------------------------------------
.text:00409E90
.text:00409E90 loc_409E90:                             ; CODE XREF: sub_409E12+5E↑j
.text:00409E90                 xor     eax, eax
.text:00409E92                 push    eax             ; lpOverlapped
.text:00409E93                 lea     eax, [ebp+NumberOfBytesRead]
.text:00409E99                 push    eax             ; lpNumberOfBytesRead
.text:00409E9A                 push    4               ; nNumberOfBytesToRead
.text:00409E9C                 lea     eax, [ebp+Buffer]
.text:00409EA2                 push    eax             ; lpBuffer
.text:00409EA3                 push    edi             ; hFile
.text:00409EA4                 call    ds:ReadFile
.text:00409EAA                 test    eax, eax
.text:00409EAC                 jnz     short loc_409ECC
.text:00409EAE                 call    ds:GetLastError
.text:00409EB4                 mov     esi, eax
.text:00409EB6                 test    esi, esi
.text:00409EB8                 jle     loc_40A048
.text:00409EBE                 movzx   esi, si
.text:00409EC1                 or      esi, 80070000h
.text:00409EC7                 jmp     loc_40A048
.text:00409ECC ; ---------------------------------------------------------------------------
.text:00409ECC
.text:00409ECC loc_409ECC:                             ; CODE XREF: sub_409E12+9A↑j
.text:00409ECC                 cmp     [ebp+NumberOfBytesRead], 4
.text:00409ED3                 jz      short loc_409EDF
.text:00409ED5
.text:00409ED5 loc_409ED5:                             ; CODE XREF: sub_409E12+EF↓j
.text:00409ED5                                         ; sub_409E12+100↓j ...
.text:00409ED5                 mov     esi, 8007000Dh
.text:00409EDA                 jmp     loc_40A048
.text:00409EDF ; ---------------------------------------------------------------------------
.text:00409EDF
.text:00409EDF loc_409EDF:                             ; CODE XREF: sub_409E12+C1↑j
.text:00409EDF                 mov     eax, [ebp+Buffer]
.text:00409EE5                 mov     dl, byte ptr [ebp+Buffer+3]
.text:00409EEB                 mov     cl, byte ptr [ebp+Buffer+2]
.text:00409EF1                 test    al, al
.text:00409EF3                 jnz     short loc_409F03
.text:00409EF5                 test    ah, ah
.text:00409EF7                 jnz     short loc_409F03
.text:00409EF9                 cmp     cl, 0FEh ; 'þ'
.text:00409EFC                 jnz     short loc_409F03
.text:00409EFE                 cmp     dl, 0FFh
.text:00409F01                 jz      short loc_409ED5
.text:00409F03
.text:00409F03 loc_409F03:                             ; CODE XREF: sub_409E12+E1↑j
.text:00409F03                                         ; sub_409E12+E5↑j ...
.text:00409F03                 test    dl, dl
.text:00409F05                 jnz     short loc_409F14
.text:00409F07                 test    cl, cl
.text:00409F09                 jnz     short loc_409F14
.text:00409F0B                 cmp     ah, 0FEh ; 'þ'
.text:00409F0E                 jnz     short loc_409F14
.text:00409F10                 cmp     al, 0FFh
.text:00409F12                 jz      short loc_409ED5
.text:00409F14
.text:00409F14 loc_409F14:                             ; CODE XREF: sub_409E12+F3↑j
.text:00409F14                                         ; sub_409E12+F7↑j ...
.text:00409F14                 cmp     ah, 0FFh
.text:00409F17                 jnz     short loc_409F1D
.text:00409F19                 cmp     al, 0FEh ; 'þ'
.text:00409F1B                 jz      short loc_409ED5
.text:00409F1D
.text:00409F1D loc_409F1D:                             ; CODE XREF: sub_409E12+105↑j
.text:00409F1D                 cmp     al, 0EFh ; 'ï'
.text:00409F1F                 jnz     short loc_409F62
.text:00409F21                 cmp     ah, 0BBh ; '»'
.text:00409F24                 jnz     short loc_409F2B
.text:00409F26                 cmp     cl, 0BFh ; '¿'
.text:00409F29                 jz      short loc_409ED5
.text:00409F2B
.text:00409F2B loc_409F2B:                             ; CODE XREF: sub_409E12+112↑j
.text:00409F2B                                         ; sub_409E12+152↓j ...
.text:00409F2B                 xor     eax, eax
.text:00409F2D                 push    edi             ; hObject
.text:00409F2E                 call    ds:CloseHandle
.text:00409F34                 or      [ebp+hFile], 0FFFFFFFFh
.text:00409F3B                 push    offset Mode     ; "r"
.text:00409F40                 push    esi             ; FileName
.text:00409F41                 call    ds:_wfopen
.text:00409F47                 mov     esi, eax
.text:00409F49                 mov     [ebp+Stream], esi
.text:00409F4F                 pop     ecx
.text:00409F50                 pop     ecx
.text:00409F51                 test    esi, esi
.text:00409F53                 jnz     short loc_409F74
.text:00409F55                 call    ds:_errno
.text:00409F5B                 mov     esi, [eax]
.text:00409F5D                 jmp     loc_409E7A
.text:00409F62 ; ---------------------------------------------------------------------------
.text:00409F62
.text:00409F62 loc_409F62:                             ; CODE XREF: sub_409E12+10D↑j
.text:00409F62                 cmp     al, 0FFh
.text:00409F64                 jnz     short loc_409F2B
.text:00409F66                 cmp     ah, 0FEh ; 'þ'
.text:00409F69                 jnz     short loc_409F2B
.text:00409F6B                 mov     esi, [ebp+Stream]
.text:00409F71                 xor     ebx, ebx
.text:00409F73                 inc     ebx
.text:00409F74
.text:00409F74 loc_409F74:                             ; CODE XREF: sub_409E12+141↑j
.text:00409F74                 xor     ecx, ecx
.text:00409F76                 xor     eax, eax
.text:00409F78                 mov     [ebp+var_10], ax
.text:00409F7C                 mov     edi, ecx
.text:00409F7E                 test    ebx, ebx
.text:00409F80                 jz      short loc_409FD8
.text:00409F82                 mov     esi, [ebp+hFile]
.text:00409F88                 push    ecx             ; dwMoveMethod
.text:00409F89                 push    ecx             ; lpNewFilePointer
.text:00409F8A                 push    ecx
.text:00409F8B                 push    2               ; liDistanceToMove
.text:00409F8D                 push    esi             ; hFile
.text:00409F8E                 call    ds:SetFilePointerEx
.text:00409F94                 test    eax, eax
.text:00409F96                 jnz     loc_40A072
.text:00409F9C
.text:00409F9C loc_409F9C:                             ; CODE XREF: sub_409E12+27F↓j
.text:00409F9C                                         ; sub_409E12+2CE↓j
.text:00409F9C                 call    ds:GetLastError
.text:00409FA2                 mov     esi, eax
.text:00409FA4                 jmp     short loc_40A00A
.text:00409FA6 ; ---------------------------------------------------------------------------
.text:00409FA6
.text:00409FA6 loc_409FA6:                             ; CODE XREF: sub_409E12+1DE↓j
.text:00409FA6                 lea     ecx, [ebp+Str]
.text:00409FAC                 call    sub_40E0F0
.text:00409FB1                 mov     ax, [ebp+Str]
.text:00409FB8                 xor     ecx, ecx
.text:00409FBA                 cmp     cx, ax
.text:00409FBD                 jz      short loc_409FD8
.text:00409FBF                 push    3Bh ; ';'
.text:00409FC1                 pop     ecx
.text:00409FC2                 cmp     cx, ax
.text:00409FC5                 jz      short loc_409FD8
.text:00409FC7                 push    23h ; '#'
.text:00409FC9                 pop     ecx
.text:00409FCA                 cmp     cx, ax
.text:00409FCD                 jz      short loc_409FD8
.text:00409FCF                 lea     eax, [edi+1]
.text:00409FD2                 cmp     eax, edi
.text:00409FD4                 jb      short loc_40A025
.text:00409FD6                 mov     edi, eax
.text:00409FD8
.text:00409FD8 loc_409FD8:                             ; CODE XREF: sub_409E12+16E↑j
.text:00409FD8                                         ; sub_409E12+1AB↑j ...
.text:00409FD8                 push    esi             ; Stream
.text:00409FD9                 lea     eax, [ebp+Str]
.text:00409FDF                 push    401h            ; BufferCount
.text:00409FE4                 push    eax             ; Buffer
.text:00409FE5                 call    ds:fgetws
.text:00409FEB                 add     esp, 0Ch
.text:00409FEE                 test    eax, eax
.text:00409FF0                 jnz     short loc_409FA6
.text:00409FF2                 push    esi             ; Stream
.text:00409FF3                 call    ds:ferror
.text:00409FF9                 pop     ecx
.text:00409FFA                 test    eax, eax
.text:00409FFC                 jz      loc_40A163
.text:0040A002
.text:0040A002 loc_40A002:                             ; CODE XREF: sub_409E12+3AD↓j
.text:0040A002                 call    ds:_errno
.text:0040A008                 mov     esi, [eax]
.text:0040A00A
.text:0040A00A loc_40A00A:                             ; CODE XREF: sub_409E12+192↑j
.text:0040A00A                 mov     edi, [ebp+hFile]
.text:0040A010
.text:0040A010 loc_40A010:                             ; CODE XREF: sub_409E12+4DC↓j
.text:0040A010                 mov     ebx, [ebp+var_814]
.text:0040A016                 test    esi, esi
.text:0040A018                 jle     short loc_40A036
.text:0040A01A                 movzx   esi, si
.text:0040A01D                 or      esi, 80070000h
.text:0040A023                 jmp     short loc_40A036
.text:0040A025 ; ---------------------------------------------------------------------------
.text:0040A025
.text:0040A025 loc_40A025:                             ; CODE XREF: sub_409E12+1C2↑j
.text:0040A025                                         ; sub_409E12+31C↓j
.text:0040A025                 mov     esi, 80070216h
.text:0040A02A
.text:0040A02A loc_40A02A:                             ; CODE XREF: sub_409E12+36C↓j
.text:0040A02A                                         ; sub_409E12+383↓j
.text:0040A02A                 mov     ebx, [ebp+var_814]
.text:0040A030
.text:0040A030 loc_40A030:                             ; CODE XREF: sub_409E12+4BB↓j
.text:0040A030                 mov     edi, [ebp+hFile]
.text:0040A036
.text:0040A036 loc_40A036:                             ; CODE XREF: sub_409E12+206↑j
.text:0040A036                                         ; sub_409E12+211↑j
.text:0040A036                 mov     eax, [ebp+Stream]
.text:0040A03C                 test    eax, eax
.text:0040A03E                 jz      short loc_40A048
.text:0040A040                 push    eax             ; Stream
.text:0040A041                 call    ds:fclose
.text:0040A047                 pop     ecx
.text:0040A048
.text:0040A048 loc_40A048:                             ; CODE XREF: sub_409E12+A6↑j
.text:0040A048                                         ; sub_409E12+B5↑j ...
.text:0040A048                 cmp     edi, 0FFFFFFFFh
.text:0040A04B                 jz      short loc_40A054
.text:0040A04D                 push    edi             ; hObject
.text:0040A04E                 call    ds:CloseHandle
.text:0040A054
.text:0040A054 loc_40A054:                             ; CODE XREF: sub_409E12+239↑j
.text:0040A054                 test    ebx, ebx
.text:0040A056                 jz      short loc_40A05F
.text:0040A058                 push    ebx             ; psa
.text:0040A059                 call    ds:SafeArrayDestroy
.text:0040A05F
.text:0040A05F loc_40A05F:                             ; CODE XREF: sub_409E12+6A↑j
.text:0040A05F                                         ; sub_409E12+79↑j ...
.text:0040A05F                 mov     ecx, [ebp+var_4]
.text:0040A062                 mov     eax, esi
.text:0040A064                 pop     edi
.text:0040A065                 pop     esi
.text:0040A066                 xor     ecx, ebp        ; StackCookie
.text:0040A068                 pop     ebx
.text:0040A069                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040A06E                 mov     esp, ebp
.text:0040A070                 pop     ebp
.text:0040A071                 retn
.text:0040A072 ; ---------------------------------------------------------------------------
.text:0040A072
.text:0040A072 loc_40A072:                             ; CODE XREF: sub_409E12+184↑j
.text:0040A072                                         ; sub_409E12+34C↓j
.text:0040A072                 xor     eax, eax
.text:0040A074                 push    eax             ; lpOverlapped
.text:0040A075                 lea     eax, [ebp+NumberOfBytesRead]
.text:0040A07B                 push    eax             ; lpNumberOfBytesRead
.text:0040A07C                 push    800h            ; nNumberOfBytesToRead
.text:0040A081                 lea     eax, [ebp+Str]
.text:0040A087                 push    eax             ; lpBuffer
.text:0040A088                 push    esi             ; hFile
.text:0040A089                 call    ds:ReadFile
.text:0040A08F                 test    eax, eax
.text:0040A091                 jz      loc_409F9C
.text:0040A097                 mov     eax, [ebp+NumberOfBytesRead]
.text:0040A09D                 cmp     eax, 800h
.text:0040A0A2                 jnz     short loc_40A0E8
.text:0040A0A4                 lea     eax, [ebp+Str]
.text:0040A0AA                 push    0Ah             ; Ch
.text:0040A0AC                 push    eax             ; Str
.text:0040A0AD                 call    ds:wcsrchr
.text:0040A0B3                 pop     ecx
.text:0040A0B4                 pop     ecx
.text:0040A0B5                 test    eax, eax
.text:0040A0B7                 jz      short loc_40A100
.text:0040A0B9                 xor     ecx, ecx
.text:0040A0BB                 mov     [eax], cx
.text:0040A0BE                 lea     ecx, [ebp+Str]
.text:0040A0C4                 sub     eax, ecx
.text:0040A0C6                 xor     ecx, ecx
.text:0040A0C8                 and     eax, 0FFFFFFFEh
.text:0040A0CB                 sub     eax, [ebp+NumberOfBytesRead]
.text:0040A0D1                 push    1               ; dwMoveMethod
.text:0040A0D3                 push    ecx             ; lpNewFilePointer
.text:0040A0D4                 cdq
.text:0040A0D5                 push    edx
.text:0040A0D6                 push    eax             ; liDistanceToMove
.text:0040A0D7                 push    esi             ; hFile
.text:0040A0D8                 call    ds:SetFilePointerEx
.text:0040A0DE                 test    eax, eax
.text:0040A0E0                 jz      loc_409F9C
.text:0040A0E6                 jmp     short loc_40A100
.text:0040A0E8 ; ---------------------------------------------------------------------------
.text:0040A0E8
.text:0040A0E8 loc_40A0E8:                             ; CODE XREF: sub_409E12+290↑j
.text:0040A0E8                 and     eax, 0FFFFFFFEh
.text:0040A0EB                 cmp     eax, 802h
.text:0040A0F0                 jnb     loc_40A454
.text:0040A0F6                 xor     ecx, ecx
.text:0040A0F8                 mov     [ebp+eax+Str], cx
.text:0040A100
.text:0040A100 loc_40A100:                             ; CODE XREF: sub_409E12+2A5↑j
.text:0040A100                                         ; sub_409E12+2D4↑j
.text:0040A100                 lea     eax, [ebp+Str]
.text:0040A106                 jmp     short loc_40A138
.text:0040A108 ; ---------------------------------------------------------------------------
.text:0040A108
.text:0040A108 loc_40A108:                             ; CODE XREF: sub_409E12+338↓j
.text:0040A108                 mov     ecx, esi
.text:0040A10A                 call    sub_40E0F0
.text:0040A10F                 movzx   eax, word ptr [esi]
.text:0040A112                 xor     ecx, ecx
.text:0040A114                 cmp     cx, ax
.text:0040A117                 jz      short loc_40A136
.text:0040A119                 push    3Bh ; ';'
.text:0040A11B                 pop     ecx
.text:0040A11C                 cmp     cx, ax
.text:0040A11F                 jz      short loc_40A136
.text:0040A121                 push    23h ; '#'
.text:0040A123                 pop     ecx
.text:0040A124                 cmp     cx, ax
.text:0040A127                 jz      short loc_40A136
.text:0040A129                 lea     eax, [edi+1]
.text:0040A12C                 cmp     eax, edi
.text:0040A12E                 jb      loc_40A025
.text:0040A134                 mov     edi, eax
.text:0040A136
.text:0040A136 loc_40A136:                             ; CODE XREF: sub_409E12+305↑j
.text:0040A136                                         ; sub_409E12+30D↑j ...
.text:0040A136                 xor     eax, eax
.text:0040A138
.text:0040A138 loc_40A138:                             ; CODE XREF: sub_409E12+2F4↑j
.text:0040A138                 push    offset Delimiter ; "\r\n"
.text:0040A13D                 push    eax             ; String
.text:0040A13E                 call    ds:wcstok
.text:0040A144                 mov     esi, eax
.text:0040A146                 pop     ecx
.text:0040A147                 pop     ecx
.text:0040A148                 test    esi, esi
.text:0040A14A                 jnz     short loc_40A108
.text:0040A14C                 cmp     [ebp+NumberOfBytesRead], 800h
.text:0040A156                 jnz     short loc_40A163
.text:0040A158                 mov     esi, [ebp+hFile]
.text:0040A15E                 jmp     loc_40A072
.text:0040A163 ; ---------------------------------------------------------------------------
.text:0040A163
.text:0040A163 loc_40A163:                             ; CODE XREF: sub_409E12+1EA↑j
.text:0040A163                                         ; sub_409E12+344↑j
.text:0040A163                 push    edi             ; cElements
.text:0040A164                 xor     edi, edi
.text:0040A166                 push    edi             ; lLbound
.text:0040A167                 push    8               ; vt
.text:0040A169                 call    ds:SafeArrayCreateVector
.text:0040A16F                 mov     [ebp+var_814], eax
.text:0040A175                 test    eax, eax
.text:0040A177                 jnz     short loc_40A183
.text:0040A179
.text:0040A179 loc_40A179:                             ; CODE XREF: sub_409E12+470↓j
.text:0040A179                                         ; sub_409E12+601↓j
.text:0040A179                 mov     esi, 8007000Eh
.text:0040A17E                 jmp     loc_40A02A
.text:0040A183 ; ---------------------------------------------------------------------------
.text:0040A183
.text:0040A183 loc_40A183:                             ; CODE XREF: sub_409E12+365↑j
.text:0040A183                 lea     ecx, [ebp+ppvData]
.text:0040A189                 push    ecx             ; ppvData
.text:0040A18A                 push    eax             ; psa
.text:0040A18B                 call    ds:SafeArrayAccessData
.text:0040A191                 mov     esi, eax
.text:0040A193                 test    esi, esi
.text:0040A195                 js      loc_40A02A
.text:0040A19B                 mov     esi, edi
.text:0040A19D                 mov     [ebp+var_830], esi
.text:0040A1A3                 push    edi             ; dwMoveMethod
.text:0040A1A4                 push    edi             ; lpNewFilePointer
.text:0040A1A5                 test    ebx, ebx
.text:0040A1A7                 jnz     loc_40A2D2
.text:0040A1AD                 mov     ebx, [ebp+Stream]
.text:0040A1B3                 push    ebx             ; Stream
.text:0040A1B4                 call    ds:fseek
.text:0040A1BA                 add     esp, 0Ch
.text:0040A1BD                 test    eax, eax
.text:0040A1BF                 jnz     loc_40A002
.text:0040A1C5                 push    ebx             ; Stream
.text:0040A1C6                 lea     eax, [ebp+Str]
.text:0040A1CC                 push    401h            ; BufferCount
.text:0040A1D1                 push    eax             ; Buffer
.text:0040A1D2                 call    ds:fgetws
.text:0040A1D8                 add     esp, 0Ch
.text:0040A1DB                 test    eax, eax
.text:0040A1DD                 jz      loc_40A2AB
.text:0040A1E3                 push    22h ; '"'
.text:0040A1E5                 pop     ebx
.text:0040A1E6
.text:0040A1E6 loc_40A1E6:                             ; CODE XREF: sub_409E12+493↓j
.text:0040A1E6                 lea     edi, [ebp+Str]
.text:0040A1EC                 mov     ecx, edi
.text:0040A1EE                 call    sub_40E0F0
.text:0040A1F3                 mov     ax, [ebp+Str]
.text:0040A1FA                 xor     ecx, ecx
.text:0040A1FC                 cmp     cx, ax
.text:0040A1FF                 jz      loc_40A288
.text:0040A205                 push    3Bh ; ';'
.text:0040A207                 pop     ecx
.text:0040A208                 cmp     cx, ax
.text:0040A20B                 jz      short loc_40A288
.text:0040A20D                 push    23h ; '#'
.text:0040A20F                 pop     ecx
.text:0040A210                 cmp     cx, ax
.text:0040A213                 jz      short loc_40A288
.text:0040A215                 cmp     ax, bx
.text:0040A218                 jnz     short loc_40A264
.text:0040A21A                 mov     ecx, edi
.text:0040A21C                 lea     edx, [ecx+2]
.text:0040A21F
.text:0040A21F loc_40A21F:                             ; CODE XREF: sub_409E12+41A↓j
.text:0040A21F                 mov     ax, [ecx]
.text:0040A222                 add     ecx, 2
.text:0040A225                 cmp     ax, word ptr [ebp+var_828]
.text:0040A22C                 jnz     short loc_40A21F
.text:0040A22E                 sub     ecx, edx
.text:0040A230                 sar     ecx, 1
.text:0040A232                 cmp     word ptr [ebp+ecx*2+var_814+2], bx
.text:0040A23A                 jnz     short loc_40A264
.text:0040A23C                 lea     edi, [ebp+var_80E]
.text:0040A242                 mov     ecx, edi
.text:0040A244                 lea     edx, [ecx+2]
.text:0040A247
.text:0040A247 loc_40A247:                             ; CODE XREF: sub_409E12+442↓j
.text:0040A247                 mov     ax, [ecx]
.text:0040A24A                 add     ecx, 2
.text:0040A24D                 cmp     ax, word ptr [ebp+var_828]
.text:0040A254                 jnz     short loc_40A247
.text:0040A256                 sub     ecx, edx
.text:0040A258                 sar     ecx, 1
.text:0040A25A                 xor     eax, eax
.text:0040A25C                 mov     [ebp+ecx*2+Str], ax
.text:0040A264
.text:0040A264 loc_40A264:                             ; CODE XREF: sub_409E12+406↑j
.text:0040A264                                         ; sub_409E12+428↑j
.text:0040A264                 push    edi             ; psz
.text:0040A265                 call    ds:SysAllocString
.text:0040A26B                 mov     ecx, [ebp+ppvData]
.text:0040A271                 mov     [esi+ecx], eax
.text:0040A274                 mov     eax, [ebp+ppvData]
.text:0040A27A                 mov     eax, [esi+eax]
.text:0040A27D                 add     esi, 4
.text:0040A280                 test    eax, eax
.text:0040A282                 jz      loc_40A179
.text:0040A288
.text:0040A288 loc_40A288:                             ; CODE XREF: sub_409E12+3ED↑j
.text:0040A288                                         ; sub_409E12+3F9↑j ...
.text:0040A288                 push    [ebp+Stream]    ; Stream
.text:0040A28E                 lea     eax, [ebp+Str]
.text:0040A294                 push    401h            ; BufferCount
.text:0040A299                 push    eax             ; Buffer
.text:0040A29A                 call    ds:fgetws
.text:0040A2A0                 add     esp, 0Ch
.text:0040A2A3                 test    eax, eax
.text:0040A2A5                 jnz     loc_40A1E6
.text:0040A2AB
.text:0040A2AB loc_40A2AB:                             ; CODE XREF: sub_409E12+3CB↑j
.text:0040A2AB                                         ; sub_409E12+631↓j
.text:0040A2AB                 mov     ecx, [ebp+var_834]
.text:0040A2B1                 mov     ebx, [ebp+var_814]
.text:0040A2B7                 push    ebx
.text:0040A2B8                 push    ecx
.text:0040A2B9                 mov     eax, [ecx]
.text:0040A2BB                 mov     esi, [eax+8Ch]
.text:0040A2C1                 mov     ecx, esi
.text:0040A2C3                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040A2C9                 call    esi
.text:0040A2CB                 mov     esi, eax
.text:0040A2CD                 jmp     loc_40A030
.text:0040A2D2 ; ---------------------------------------------------------------------------
.text:0040A2D2
.text:0040A2D2 loc_40A2D2:                             ; CODE XREF: sub_409E12+395↑j
.text:0040A2D2                 push    edi
.text:0040A2D3                 mov     edi, [ebp+hFile]
.text:0040A2D9                 push    2               ; liDistanceToMove
.text:0040A2DB                 push    edi             ; hFile
.text:0040A2DC                 call    ds:SetFilePointerEx
.text:0040A2E2                 test    eax, eax
.text:0040A2E4                 jnz     short loc_40A2F3
.text:0040A2E6
.text:0040A2E6 loc_40A2E6:                             ; CODE XREF: sub_409E12+503↓j
.text:0040A2E6                                         ; sub_409E12+54E↓j
.text:0040A2E6                 call    ds:GetLastError
.text:0040A2EC                 mov     esi, eax
.text:0040A2EE                 jmp     loc_40A010
.text:0040A2F3 ; ---------------------------------------------------------------------------
.text:0040A2F3
.text:0040A2F3 loc_40A2F3:                             ; CODE XREF: sub_409E12+4D2↑j
.text:0040A2F3                 push    22h ; '"'
.text:0040A2F5                 pop     ebx
.text:0040A2F6
.text:0040A2F6 loc_40A2F6:                             ; CODE XREF: sub_409E12+63D↓j
.text:0040A2F6                 xor     eax, eax
.text:0040A2F8                 push    eax             ; lpOverlapped
.text:0040A2F9                 lea     eax, [ebp+NumberOfBytesRead]
.text:0040A2FF                 push    eax             ; lpNumberOfBytesRead
.text:0040A300                 push    800h            ; nNumberOfBytesToRead
.text:0040A305                 lea     eax, [ebp+Str]
.text:0040A30B                 push    eax             ; lpBuffer
.text:0040A30C                 push    edi             ; hFile
.text:0040A30D                 call    ds:ReadFile
.text:0040A313                 test    eax, eax
.text:0040A315                 jz      short loc_40A2E6
.text:0040A317                 mov     eax, [ebp+NumberOfBytesRead]
.text:0040A31D                 cmp     eax, 800h
.text:0040A322                 jnz     short loc_40A364
.text:0040A324                 lea     eax, [ebp+Str]
.text:0040A32A                 push    0Ah             ; Ch
.text:0040A32C                 push    eax             ; Str
.text:0040A32D                 call    ds:wcsrchr
.text:0040A333                 pop     ecx
.text:0040A334                 pop     ecx
.text:0040A335                 test    eax, eax
.text:0040A337                 jz      short loc_40A37C
.text:0040A339                 xor     ecx, ecx
.text:0040A33B                 mov     [eax], cx
.text:0040A33E                 lea     ecx, [ebp+Str]
.text:0040A344                 sub     eax, ecx
.text:0040A346                 xor     ecx, ecx
.text:0040A348                 and     eax, 0FFFFFFFEh
.text:0040A34B                 sub     eax, [ebp+NumberOfBytesRead]
.text:0040A351                 push    1               ; dwMoveMethod
.text:0040A353                 push    ecx             ; lpNewFilePointer
.text:0040A354                 cdq
.text:0040A355                 push    edx
.text:0040A356                 push    eax             ; liDistanceToMove
.text:0040A357                 push    edi             ; hFile
.text:0040A358                 call    ds:SetFilePointerEx
.text:0040A35E                 test    eax, eax
.text:0040A360                 jz      short loc_40A2E6
.text:0040A362                 jmp     short loc_40A37C
.text:0040A364 ; ---------------------------------------------------------------------------
.text:0040A364
.text:0040A364 loc_40A364:                             ; CODE XREF: sub_409E12+510↑j
.text:0040A364                 and     eax, 0FFFFFFFEh
.text:0040A367                 cmp     eax, 802h
.text:0040A36C                 jnb     loc_40A454
.text:0040A372                 xor     ecx, ecx
.text:0040A374                 mov     [ebp+eax+Str], cx
.text:0040A37C
.text:0040A37C loc_40A37C:                             ; CODE XREF: sub_409E12+525↑j
.text:0040A37C                                         ; sub_409E12+550↑j
.text:0040A37C                 lea     eax, [ebp+Str]
.text:0040A382                 jmp     loc_40A421
.text:0040A387 ; ---------------------------------------------------------------------------
.text:0040A387
.text:0040A387 loc_40A387:                             ; CODE XREF: sub_409E12+621↓j
.text:0040A387                 mov     ecx, edi
.text:0040A389                 call    sub_40E0F0
.text:0040A38E                 movzx   eax, word ptr [edi]
.text:0040A391                 xor     ecx, ecx
.text:0040A393                 cmp     cx, ax
.text:0040A396                 jz      loc_40A41F
.text:0040A39C                 push    3Bh ; ';'
.text:0040A39E                 pop     ecx
.text:0040A39F                 cmp     cx, ax
.text:0040A3A2                 jz      short loc_40A41F
.text:0040A3A4                 push    23h ; '#'
.text:0040A3A6                 pop     ecx
.text:0040A3A7                 cmp     cx, ax
.text:0040A3AA                 jz      short loc_40A41F
.text:0040A3AC                 cmp     ax, bx
.text:0040A3AF                 jnz     short loc_40A3F2
.text:0040A3B1                 mov     ecx, edi
.text:0040A3B3                 lea     edx, [ecx+2]
.text:0040A3B6
.text:0040A3B6 loc_40A3B6:                             ; CODE XREF: sub_409E12+5B1↓j
.text:0040A3B6                 mov     ax, [ecx]
.text:0040A3B9                 add     ecx, 2
.text:0040A3BC                 cmp     ax, word ptr [ebp+var_828]
.text:0040A3C3                 jnz     short loc_40A3B6
.text:0040A3C5                 sub     ecx, edx
.text:0040A3C7                 sar     ecx, 1
.text:0040A3C9                 cmp     [edi+ecx*2-2], bx
.text:0040A3CE                 jnz     short loc_40A3F2
.text:0040A3D0                 add     edi, 2
.text:0040A3D3                 mov     ecx, edi
.text:0040A3D5                 lea     edx, [ecx+2]
.text:0040A3D8
.text:0040A3D8 loc_40A3D8:                             ; CODE XREF: sub_409E12+5D3↓j
.text:0040A3D8                 mov     ax, [ecx]
.text:0040A3DB                 add     ecx, 2
.text:0040A3DE                 cmp     ax, word ptr [ebp+var_828]
.text:0040A3E5                 jnz     short loc_40A3D8
.text:0040A3E7                 sub     ecx, edx
.text:0040A3E9                 sar     ecx, 1
.text:0040A3EB                 xor     eax, eax
.text:0040A3ED                 mov     [edi+ecx*2-2], ax
.text:0040A3F2
.text:0040A3F2 loc_40A3F2:                             ; CODE XREF: sub_409E12+59D↑j
.text:0040A3F2                                         ; sub_409E12+5BC↑j
.text:0040A3F2                 push    edi             ; psz
.text:0040A3F3                 call    ds:SysAllocString
.text:0040A3F9                 mov     ecx, [ebp+ppvData]
.text:0040A3FF                 inc     [ebp+var_830]
.text:0040A405                 mov     [ecx+esi*4], eax
.text:0040A408                 xor     ecx, ecx
.text:0040A40A                 mov     eax, [ebp+ppvData]
.text:0040A410                 cmp     [eax+esi*4], ecx
.text:0040A413                 jz      loc_40A179
.text:0040A419                 mov     esi, [ebp+var_830]
.text:0040A41F
.text:0040A41F loc_40A41F:                             ; CODE XREF: sub_409E12+584↑j
.text:0040A41F                                         ; sub_409E12+590↑j ...
.text:0040A41F                 xor     eax, eax
.text:0040A421
.text:0040A421 loc_40A421:                             ; CODE XREF: sub_409E12+570↑j
.text:0040A421                 push    offset Delimiter ; "\r\n"
.text:0040A426                 push    eax             ; String
.text:0040A427                 call    ds:wcstok
.text:0040A42D                 mov     edi, eax
.text:0040A42F                 pop     ecx
.text:0040A430                 pop     ecx
.text:0040A431                 test    edi, edi
.text:0040A433                 jnz     loc_40A387
.text:0040A439                 cmp     [ebp+NumberOfBytesRead], 800h
.text:0040A443                 jnz     loc_40A2AB
.text:0040A449                 mov     edi, [ebp+hFile]
.text:0040A44F                 jmp     loc_40A2F6
.text:0040A454 ; ---------------------------------------------------------------------------
.text:0040A454
.text:0040A454 loc_40A454:                             ; CODE XREF: sub_409E12+2DE↑j
.text:0040A454                                         ; sub_409E12+55A↑j
.text:0040A454                 call    ___report_rangecheckfailure
.text:0040A459                 int     3               ; Trap to Debugger
.text:0040A459 sub_409E12      endp
.text:0040A459
.text:0040A45A
.text:0040A45A ; =============== S U B R O U T I N E =======================================
.text:0040A45A
.text:0040A45A ; Attributes: bp-based frame info_from_lumina
.text:0040A45A
.text:0040A45A ; int __stdcall SetCounterValues(struct IDataCollector *, int *)
.text:0040A45A ?SetCounterValues@@YGJPAUIDataCollector@@PAH@Z proc near
.text:0040A45A                                         ; CODE XREF: sub_40BF14+294↓p
.text:0040A45A
.text:0040A45A var_18          = dword ptr -18h
.text:0040A45A psa             = dword ptr -14h
.text:0040A45A var_10          = dword ptr -10h
.text:0040A45A var_C           = dword ptr -0Ch
.text:0040A45A var_8           = dword ptr -8
.text:0040A45A var_4           = dword ptr -4
.text:0040A45A
.text:0040A45A                 mov     edi, edi
.text:0040A45C                 push    ebp
.text:0040A45D                 mov     ebp, esp
.text:0040A45F                 sub     esp, 1Ch
.text:0040A462                 mov     eax, ___security_cookie
.text:0040A467                 xor     eax, ebp
.text:0040A469                 mov     [ebp+var_4], eax
.text:0040A46C                 push    ebx
.text:0040A46D                 push    esi
.text:0040A46E                 mov     esi, [ecx]
.text:0040A470                 lea     eax, [ebp+var_8]
.text:0040A473                 push    edi
.text:0040A474                 push    eax
.text:0040A475                 push    offset dword_403568
.text:0040A47A                 xor     ebx, ebx
.text:0040A47C                 mov     [ebp+var_18], edx
.text:0040A47F                 and     [ebp+var_8], ebx
.text:0040A482                 and     [ebp+psa], ebx
.text:0040A485                 push    ecx
.text:0040A486                 mov     ecx, [esi]
.text:0040A488                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040A48E                 call    dword ptr [esi]
.text:0040A490                 mov     edi, eax
.text:0040A492                 test    edi, edi
.text:0040A494                 js      loc_40A6FB
.text:0040A49A                 cmp     dword_414370, ebx
.text:0040A4A0                 jz      short loc_40A4C8
.text:0040A4A2                 mov     eax, [ebp+var_8]
.text:0040A4A5                 push    dword_414384
.text:0040A4AB                 push    eax
.text:0040A4AC                 mov     ecx, [eax]
.text:0040A4AE                 mov     esi, [ecx+0A4h]
.text:0040A4B4                 mov     ecx, esi
.text:0040A4B6                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040A4BC                 call    esi
.text:0040A4BE                 mov     edi, eax
.text:0040A4C0                 test    edi, edi
.text:0040A4C2                 js      loc_40A6FB
.text:0040A4C8
.text:0040A4C8 loc_40A4C8:                             ; CODE XREF: SetCounterValues(IDataCollector *,int *)+46↑j
.text:0040A4C8                 cmp     dword_413B80, ebx
.text:0040A4CE                 jz      short loc_40A510
.text:0040A4D0                 movzx   eax, word_413B9C
.text:0040A4D7                 imul    ecx, eax, 3Ch ; '<'
.text:0040A4DA                 movzx   eax, word_413B9E
.text:0040A4E1                 add     ecx, eax
.text:0040A4E3                 movzx   eax, word_413BA0
.text:0040A4EA                 imul    edx, ecx, 3Ch ; '<'
.text:0040A4ED                 add     edx, eax
.text:0040A4EF                 mov     eax, [ebp+var_8]
.text:0040A4F2                 push    edx
.text:0040A4F3                 push    eax
.text:0040A4F4                 mov     ecx, [eax]
.text:0040A4F6                 mov     esi, [ecx+9Ch]
.text:0040A4FC                 mov     ecx, esi
.text:0040A4FE                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040A504                 call    esi
.text:0040A506                 mov     edi, eax
.text:0040A508                 test    edi, edi
.text:0040A50A                 js      loc_40A6FB
.text:0040A510
.text:0040A510 loc_40A510:                             ; CODE XREF: SetCounterValues(IDataCollector *,int *)+74↑j
.text:0040A510                 cmp     dword_414B80, ebx
.text:0040A516                 jz      loc_40A6A6
.text:0040A51C                 xor     esi, esi
.text:0040A51E                 xor     eax, eax
.text:0040A520                 mov     [ebp+var_C], esi
.text:0040A523                 mov     [ebp+var_10], eax
.text:0040A526
.text:0040A526 loc_40A526:                             ; CODE XREF: SetCounterValues(IDataCollector *,int *)+F4↓j
.text:0040A526                 push    dword_414B94    ; String2
.text:0040A52C                 push    ds:off_401008[eax] ; String1
.text:0040A532                 call    ds:__imp__wcsicmp
.text:0040A538                 pop     ecx
.text:0040A539                 pop     ecx
.text:0040A53A                 test    eax, eax
.text:0040A53C                 jz      short loc_40A552
.text:0040A53E                 mov     eax, [ebp+var_10]
.text:0040A541                 inc     esi
.text:0040A542                 add     eax, 0Ch
.text:0040A545                 mov     [ebp+var_C], esi
.text:0040A548                 mov     [ebp+var_10], eax
.text:0040A54B                 cmp     eax, 3Ch ; '<'
.text:0040A54E                 jb      short loc_40A526
.text:0040A550                 jmp     short loc_40A5A9
.text:0040A552 ; ---------------------------------------------------------------------------
.text:0040A552
.text:0040A552 loc_40A552:                             ; CODE XREF: SetCounterValues(IDataCollector *,int *)+E2↑j
.text:0040A552                 mov     eax, [ebp+var_8]
.text:0040A555                 imul    edx, esi, 0Ch
.text:0040A558                 mov     ecx, [eax]
.text:0040A55A                 mov     [ebp+var_10], edx
.text:0040A55D                 mov     esi, [ecx+94h]
.text:0040A563                 mov     ecx, esi
.text:0040A565                 push    ds:dword_40100C[edx]
.text:0040A56B                 push    eax
.text:0040A56C                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040A572                 call    esi
.text:0040A574                 mov     edi, eax
.text:0040A576                 test    edi, edi
.text:0040A578                 js      loc_40A6FB
.text:0040A57E                 mov     ecx, [ebp+var_8]
.text:0040A581                 mov     eax, [ebp+var_10]
.text:0040A584                 mov     edx, [ecx]
.text:0040A586                 movzx   eax, ds:word_401010[eax]
.text:0040A58D                 push    eax
.text:0040A58E                 push    ecx
.text:0040A58F                 mov     esi, [edx+54h]
.text:0040A592                 mov     ecx, esi
.text:0040A594                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040A59A                 call    esi
.text:0040A59C                 mov     edi, eax
.text:0040A59E                 test    edi, edi
.text:0040A5A0                 js      loc_40A6FB
.text:0040A5A6                 mov     esi, [ebp+var_C]
.text:0040A5A9
.text:0040A5A9 loc_40A5A9:                             ; CODE XREF: SetCounterValues(IDataCollector *,int *)+F6↑j
.text:0040A5A9                 cmp     esi, 5
.text:0040A5AC                 jb      short loc_40A5B8
.text:0040A5AE                 mov     edi, 80070057h
.text:0040A5B3                 jmp     loc_40A6FB
.text:0040A5B8 ; ---------------------------------------------------------------------------
.text:0040A5B8
.text:0040A5B8 loc_40A5B8:                             ; CODE XREF: SetCounterValues(IDataCollector *,int *)+152↑j
.text:0040A5B8                 imul    eax, esi, 0Ch
.text:0040A5BB                 cmp     ds:dword_40100C[eax], 2
.text:0040A5C2                 jnz     loc_40A6A6
.text:0040A5C8                 mov     eax, [ebp+var_18]
.text:0040A5CB                 and     [eax], ebx
.text:0040A5CD                 cmp     dword_414430, ebx
.text:0040A5D3                 jz      loc_40A6A6
.text:0040A5D9                 push    21h ; '!'
.text:0040A5DB                 pop     eax
.text:0040A5DC                 push    eax             ; Ch
.text:0040A5DD                 push    lpFileName      ; Str
.text:0040A5E3                 call    ds:wcschr
.text:0040A5E9                 mov     [ebp+var_C], eax
.text:0040A5EC                 pop     ecx
.text:0040A5ED                 pop     ecx
.text:0040A5EE                 test    eax, eax
.text:0040A5F0                 jnz     short loc_40A631
.text:0040A5F2                 push    lpFileName      ; psz
.text:0040A5F8                 call    ds:SysAllocString
.text:0040A5FE                 mov     ebx, eax
.text:0040A600                 test    ebx, ebx
.text:0040A602                 jnz     short loc_40A60E
.text:0040A604
.text:0040A604 loc_40A604:                             ; CODE XREF: SetCounterValues(IDataCollector *,int *)+1EC↓j
.text:0040A604                                         ; SetCounterValues(IDataCollector *,int *)+227↓j
.text:0040A604                 mov     edi, 8007000Eh
.text:0040A609                 jmp     loc_40A6FB
.text:0040A60E ; ---------------------------------------------------------------------------
.text:0040A60E
.text:0040A60E loc_40A60E:                             ; CODE XREF: SetCounterValues(IDataCollector *,int *)+1A8↑j
.text:0040A60E                 mov     eax, [ebp+var_8]
.text:0040A611                 push    ebx
.text:0040A612                 push    eax
.text:0040A613                 mov     ecx, [eax]
.text:0040A615                 mov     esi, [ecx+84h]
.text:0040A61B                 mov     ecx, esi
.text:0040A61D                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040A623                 call    esi
.text:0040A625                 mov     edi, eax
.text:0040A627                 test    edi, edi
.text:0040A629                 js      loc_40A6FB
.text:0040A62F                 jmp     short loc_40A6A6
.text:0040A631 ; ---------------------------------------------------------------------------
.text:0040A631
.text:0040A631 loc_40A631:                             ; CODE XREF: SetCounterValues(IDataCollector *,int *)+196↑j
.text:0040A631                 xor     ecx, ecx
.text:0040A633                 mov     [eax], cx
.text:0040A636                 push    lpFileName      ; psz
.text:0040A63C                 call    ds:SysAllocString
.text:0040A642                 mov     ebx, eax
.text:0040A644                 test    ebx, ebx
.text:0040A646                 jz      short loc_40A604
.text:0040A648                 mov     eax, [ebp+var_8]
.text:0040A64B                 push    ebx
.text:0040A64C                 push    eax
.text:0040A64D                 mov     ecx, [eax]
.text:0040A64F                 mov     esi, [ecx+84h]
.text:0040A655                 mov     ecx, esi
.text:0040A657                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040A65D                 call    esi
.text:0040A65F                 mov     edi, eax
.text:0040A661                 test    edi, edi
.text:0040A663                 js      loc_40A6FB
.text:0040A669                 push    ebx             ; bstrString
.text:0040A66A                 call    ds:SysFreeString
.text:0040A670                 mov     eax, [ebp+var_C]
.text:0040A673                 add     eax, 2
.text:0040A676                 push    eax             ; psz
.text:0040A677                 call    ds:SysAllocString
.text:0040A67D                 mov     ebx, eax
.text:0040A67F                 test    ebx, ebx
.text:0040A681                 jz      short loc_40A604
.text:0040A683                 mov     eax, [ebp+var_8]
.text:0040A686                 push    ebx
.text:0040A687                 push    eax
.text:0040A688                 mov     ecx, [eax]
.text:0040A68A                 mov     esi, [ecx+2Ch]
.text:0040A68D                 mov     ecx, esi
.text:0040A68F                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040A695                 call    esi
.text:0040A697                 mov     edi, eax
.text:0040A699                 test    edi, edi
.text:0040A69B                 js      short loc_40A6FB
.text:0040A69D                 mov     eax, [ebp+var_C]
.text:0040A6A0                 push    21h ; '!'
.text:0040A6A2                 pop     ecx
.text:0040A6A3                 mov     [eax], cx
.text:0040A6A6
.text:0040A6A6 loc_40A6A6:                             ; CODE XREF: SetCounterValues(IDataCollector *,int *)+BC↑j
.text:0040A6A6                                         ; SetCounterValues(IDataCollector *,int *)+168↑j ...
.text:0040A6A6                 cmp     dword_413820, 0
.text:0040A6AD                 jz      short loc_40A6E2
.text:0040A6AF                 mov     ecx, dword_413834
.text:0040A6B5                 test    ecx, ecx
.text:0040A6B7                 jz      short loc_40A6E2
.text:0040A6B9                 lea     edx, [ebp+psa]
.text:0040A6BC                 call    sub_409D26
.text:0040A6C1                 mov     edi, eax
.text:0040A6C3                 test    edi, edi
.text:0040A6C5                 js      short loc_40A6FB
.text:0040A6C7                 mov     eax, [ebp+var_8]
.text:0040A6CA                 push    [ebp+psa]
.text:0040A6CD                 push    eax
.text:0040A6CE                 mov     ecx, [eax]
.text:0040A6D0                 mov     esi, [ecx+8Ch]
.text:0040A6D6                 mov     ecx, esi
.text:0040A6D8                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040A6DE                 call    esi
.text:0040A6E0                 jmp     short loc_40A6F9
.text:0040A6E2 ; ---------------------------------------------------------------------------
.text:0040A6E2
.text:0040A6E2 loc_40A6E2:                             ; CODE XREF: SetCounterValues(IDataCollector *,int *)+253↑j
.text:0040A6E2                                         ; SetCounterValues(IDataCollector *,int *)+25D↑j
.text:0040A6E2                 cmp     dword_413EF0, 0
.text:0040A6E9                 jz      short loc_40A6FB
.text:0040A6EB                 mov     edx, [ebp+var_8]
.text:0040A6EE                 mov     ecx, dword_413F04 ; FileName
.text:0040A6F4                 call    sub_409E12
.text:0040A6F9
.text:0040A6F9 loc_40A6F9:                             ; CODE XREF: SetCounterValues(IDataCollector *,int *)+286↑j
.text:0040A6F9                 mov     edi, eax
.text:0040A6FB
.text:0040A6FB loc_40A6FB:                             ; CODE XREF: SetCounterValues(IDataCollector *,int *)+3A↑j
.text:0040A6FB                                         ; SetCounterValues(IDataCollector *,int *)+68↑j ...
.text:0040A6FB                 mov     ecx, [ebp+var_8]
.text:0040A6FE                 test    ecx, ecx
.text:0040A700                 jz      short loc_40A716
.text:0040A702                 mov     eax, [ecx]
.text:0040A704                 push    ecx
.text:0040A705                 mov     esi, [eax+8]
.text:0040A708                 mov     ecx, esi
.text:0040A70A                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040A710                 call    esi
.text:0040A712                 and     [ebp+var_8], 0
.text:0040A716
.text:0040A716 loc_40A716:                             ; CODE XREF: SetCounterValues(IDataCollector *,int *)+2A6↑j
.text:0040A716                 test    ebx, ebx
.text:0040A718                 jz      short loc_40A721
.text:0040A71A                 push    ebx             ; bstrString
.text:0040A71B                 call    ds:SysFreeString
.text:0040A721
.text:0040A721 loc_40A721:                             ; CODE XREF: SetCounterValues(IDataCollector *,int *)+2BE↑j
.text:0040A721                 mov     eax, [ebp+psa]
.text:0040A724                 test    eax, eax
.text:0040A726                 jz      short loc_40A72F
.text:0040A728                 push    eax             ; psa
.text:0040A729                 call    ds:SafeArrayDestroy
.text:0040A72F
.text:0040A72F loc_40A72F:                             ; CODE XREF: SetCounterValues(IDataCollector *,int *)+2CC↑j
.text:0040A72F                 mov     ecx, [ebp+var_4]
.text:0040A732                 mov     eax, edi
.text:0040A734                 pop     edi
.text:0040A735                 pop     esi
.text:0040A736                 xor     ecx, ebp        ; StackCookie
.text:0040A738                 pop     ebx
.text:0040A739                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040A73E                 mov     esp, ebp
.text:0040A740                 pop     ebp
.text:0040A741                 retn
.text:0040A741 ?SetCounterValues@@YGJPAUIDataCollector@@PAH@Z endp
.text:0040A741
.text:0040A742
.text:0040A742 ; =============== S U B R O U T I N E =======================================
.text:0040A742
.text:0040A742 ; Attributes: bp-based frame
.text:0040A742
.text:0040A742 sub_40A742      proc near               ; CODE XREF: sub_40AAF8+51C↓p
.text:0040A742
.text:0040A742 var_20          = dword ptr -20h
.text:0040A742 pvarg           = VARIANTARG ptr -1Ch
.text:0040A742 var_C           = dword ptr -0Ch
.text:0040A742 var_8           = dword ptr -8
.text:0040A742 arg_0           = dword ptr  8
.text:0040A742
.text:0040A742                 mov     edi, edi
.text:0040A744                 push    ebp
.text:0040A745                 mov     ebp, esp
.text:0040A747                 sub     esp, 20h
.text:0040A74A                 mov     eax, ___security_cookie
.text:0040A74F                 xor     eax, ebp
.text:0040A751                 mov     [ebp+var_8], eax
.text:0040A754                 push    ebx
.text:0040A755                 push    esi
.text:0040A756                 push    edi
.text:0040A757                 lea     eax, [ebp+pvarg]
.text:0040A75A                 mov     [ebp+var_20], ecx
.text:0040A75D                 xor     edi, edi
.text:0040A75F                 mov     esi, edx
.text:0040A761                 and     [ebp+var_C], edi
.text:0040A764                 push    eax             ; pvarg
.text:0040A765                 call    ds:VariantInit
.text:0040A76B                 push    offset asc_4032A0 ; "(),"
.text:0040A770                 push    esi
.text:0040A771                 jmp     loc_40A836
.text:0040A776 ; ---------------------------------------------------------------------------
.text:0040A776
.text:0040A776 loc_40A776:                             ; CODE XREF: sub_40A742+4E↓j
.text:0040A776                 movzx   eax, ax
.text:0040A779                 push    eax             ; C
.text:0040A77A                 call    ds:isspace
.text:0040A780                 pop     ecx
.text:0040A781                 test    eax, eax
.text:0040A783                 jz      short loc_40A792
.text:0040A785                 add     esi, 2
.text:0040A788
.text:0040A788 loc_40A788:                             ; CODE XREF: sub_40A742+100↓j
.text:0040A788                 movzx   eax, word ptr [esi]
.text:0040A78B                 xor     ecx, ecx
.text:0040A78D                 cmp     cx, ax
.text:0040A790                 jnz     short loc_40A776
.text:0040A792
.text:0040A792 loc_40A792:                             ; CODE XREF: sub_40A742+41↑j
.text:0040A792                 lea     eax, [ebp+pvarg]
.text:0040A795                 push    eax             ; pvarg
.text:0040A796                 call    ds:VariantClear
.text:0040A79C                 push    esi             ; psz
.text:0040A79D                 call    ds:SysAllocString
.text:0040A7A3                 mov     dword ptr [ebp+pvarg.anonymous_0+8], eax
.text:0040A7A6                 test    eax, eax
.text:0040A7A8                 jz      loc_40A84A
.text:0040A7AE                 mov     ebx, [ebp+arg_0]
.text:0040A7B1                 lea     esi, [ebp+pvarg]
.text:0040A7B4                 push    8
.text:0040A7B6                 pop     eax
.text:0040A7B7                 sub     esp, 10h
.text:0040A7BA                 mov     word ptr [ebp+pvarg.anonymous_0], ax
.text:0040A7BE                 mov     ebx, [ebx]
.text:0040A7C0                 mov     edi, esp
.text:0040A7C2                 mov     ecx, [ebx+40h]
.text:0040A7C5                 movsd
.text:0040A7C6                 movsd
.text:0040A7C7                 movsd
.text:0040A7C8                 movsd
.text:0040A7C9                 mov     esi, [ebp+arg_0]
.text:0040A7CC                 push    esi
.text:0040A7CD                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040A7D3                 call    dword ptr [ebx+40h]
.text:0040A7D6                 mov     edi, eax
.text:0040A7D8                 test    edi, edi
.text:0040A7DA                 js      short loc_40A84F
.text:0040A7DC                 cmp     [ebp+var_20], 0
.text:0040A7E0                 jz      short loc_40A82F
.text:0040A7E2                 cmp     [ebp+var_C], 0
.text:0040A7E6                 jz      short loc_40A7F7
.text:0040A7E8                 mov     ecx, esi
.text:0040A7EA                 call    sub_409569
.text:0040A7EF                 mov     edi, eax
.text:0040A7F1                 test    edi, edi
.text:0040A7F3                 js      short loc_40A84F
.text:0040A7F5                 jmp     short loc_40A82F
.text:0040A7F7 ; ---------------------------------------------------------------------------
.text:0040A7F7
.text:0040A7F7 loc_40A7F7:                             ; CODE XREF: sub_40A742+A4↑j
.text:0040A7F7                 lea     eax, [ebp+pvarg]
.text:0040A7FA                 push    eax             ; pvarg
.text:0040A7FB                 call    ds:VariantClear
.text:0040A801                 mov     eax, [esi]
.text:0040A803                 lea     ecx, [ebp+pvarg]
.text:0040A806                 push    ecx
.text:0040A807                 push    esi
.text:0040A808                 mov     esi, [eax+30h]
.text:0040A80B                 mov     ecx, esi
.text:0040A80D                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040A813                 call    esi
.text:0040A815                 mov     edi, eax
.text:0040A817                 test    edi, edi
.text:0040A819                 js      short loc_40A84F
.text:0040A81B                 mov     eax, dword ptr [ebp+pvarg.anonymous_0+8]
.text:0040A81E                 and     eax, 80000000h
.text:0040A823                 or      eax, 0
.text:0040A826                 jz      short loc_40A82F
.text:0040A828                 mov     [ebp+var_C], 1
.text:0040A82F
.text:0040A82F loc_40A82F:                             ; CODE XREF: sub_40A742+9E↑j
.text:0040A82F                                         ; sub_40A742+B3↑j ...
.text:0040A82F                 push    offset asc_4032A0 ; "(),"
.text:0040A834                 push    0               ; String
.text:0040A836
.text:0040A836 loc_40A836:                             ; CODE XREF: sub_40A742+2F↑j
.text:0040A836                 call    ds:wcstok
.text:0040A83C                 mov     esi, eax
.text:0040A83E                 pop     ecx
.text:0040A83F                 pop     ecx
.text:0040A840                 test    esi, esi
.text:0040A842                 jnz     loc_40A788
.text:0040A848                 jmp     short loc_40A84F
.text:0040A84A ; ---------------------------------------------------------------------------
.text:0040A84A
.text:0040A84A loc_40A84A:                             ; CODE XREF: sub_40A742+66↑j
.text:0040A84A                 mov     edi, 8007000Eh
.text:0040A84F
.text:0040A84F loc_40A84F:                             ; CODE XREF: sub_40A742+98↑j
.text:0040A84F                                         ; sub_40A742+B1↑j ...
.text:0040A84F                 lea     eax, [ebp+pvarg]
.text:0040A852                 push    eax             ; pvarg
.text:0040A853                 call    ds:VariantClear
.text:0040A859                 mov     ecx, [ebp+var_8]
.text:0040A85C                 mov     eax, edi
.text:0040A85E                 pop     edi
.text:0040A85F                 pop     esi
.text:0040A860                 xor     ecx, ebp        ; StackCookie
.text:0040A862                 pop     ebx
.text:0040A863                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040A868                 mov     esp, ebp
.text:0040A86A                 pop     ebp
.text:0040A86B                 retn    4
.text:0040A86B sub_40A742      endp
.text:0040A86B
.text:0040A86E
.text:0040A86E ; =============== S U B R O U T I N E =======================================
.text:0040A86E
.text:0040A86E ; Attributes: bp-based frame info_from_lumina
.text:0040A86E
.text:0040A86E ; int __stdcall MergeProviders(struct ITraceDataProviderCollection *, struct ITraceDataProviderCollection *)
.text:0040A86E ?MergeProviders@@YGJPAUITraceDataProviderCollection@@0@Z proc near
.text:0040A86E                                         ; CODE XREF: sub_40AAF8+6C9↓p
.text:0040A86E
.text:0040A86E pvarg           = VARIANTARG ptr -38h
.text:0040A86E var_28          = dword ptr -28h
.text:0040A86E var_24          = dword ptr -24h
.text:0040A86E var_20          = dword ptr -20h
.text:0040A86E var_1C          = dword ptr -1Ch
.text:0040A86E var_18          = dword ptr -18h
.text:0040A86E var_14          = byte ptr -14h
.text:0040A86E var_4           = dword ptr -4
.text:0040A86E
.text:0040A86E                 mov     edi, edi
.text:0040A870                 push    ebp
.text:0040A871                 mov     ebp, esp
.text:0040A873                 sub     esp, 3Ch
.text:0040A876                 mov     eax, ___security_cookie
.text:0040A87B                 xor     eax, ebp
.text:0040A87D                 mov     [ebp+var_4], eax
.text:0040A880                 push    ebx
.text:0040A881                 xor     eax, eax
.text:0040A883                 mov     [ebp+var_24], ecx
.text:0040A886                 push    esi
.text:0040A887                 mov     ebx, eax
.text:0040A889                 mov     [ebp+var_20], eax
.text:0040A88C                 mov     [ebp+var_28], eax
.text:0040A88F                 mov     esi, edx
.text:0040A891                 mov     [ebp+var_18], eax
.text:0040A894                 lea     eax, [ebp+pvarg]
.text:0040A897                 push    edi
.text:0040A898                 push    eax             ; pvarg
.text:0040A899                 mov     [ebp+var_1C], ebx
.text:0040A89C                 call    ds:VariantInit
.text:0040A8A2                 mov     eax, [esi]
.text:0040A8A4                 lea     ecx, [ebp+var_28]
.text:0040A8A7                 push    ecx
.text:0040A8A8                 push    esi
.text:0040A8A9                 mov     esi, [eax+24h]
.text:0040A8AC                 mov     ecx, esi
.text:0040A8AE                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040A8B4                 call    esi
.text:0040A8B6                 mov     edi, eax
.text:0040A8B8                 test    edi, edi
.text:0040A8BA                 js      loc_40AA6D
.text:0040A8C0                 mov     eax, [ebp+var_28]
.text:0040A8C3                 lea     ecx, [ebp+var_20]
.text:0040A8C6                 push    ecx
.text:0040A8C7                 push    offset dword_4035E8
.text:0040A8CC                 push    eax
.text:0040A8CD                 mov     esi, [eax]
.text:0040A8CF                 mov     ecx, [esi]
.text:0040A8D1                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040A8D7                 call    dword ptr [esi]
.text:0040A8D9                 mov     edi, eax
.text:0040A8DB                 test    edi, edi
.text:0040A8DD                 js      loc_40AA6D
.text:0040A8E3                 lea     eax, [ebp+pvarg]
.text:0040A8E6                 push    eax             ; pvarg
.text:0040A8E7                 call    ds:VariantClear
.text:0040A8ED                 mov     eax, [ebp+var_20]
.text:0040A8F0                 lea     ecx, [ebp+pvarg]
.text:0040A8F3                 push    ebx
.text:0040A8F4                 push    ecx
.text:0040A8F5                 push    1
.text:0040A8F7                 mov     esi, [eax]
.text:0040A8F9                 push    eax
.text:0040A8FA                 mov     ecx, [esi+0Ch]
.text:0040A8FD                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040A903                 call    dword ptr [esi+0Ch]
.text:0040A906                 mov     edi, eax
.text:0040A908                 test    edi, edi
.text:0040A90A                 js      loc_40AA6D
.text:0040A910                 cmp     edi, 1
.text:0040A913                 jz      loc_40AA6B
.text:0040A919                 push    9
.text:0040A91B                 pop     eax
.text:0040A91C
.text:0040A91C loc_40A91C:                             ; CODE XREF: MergeProviders(ITraceDataProviderCollection *,ITraceDataProviderCollection *)+1F7↓j
.text:0040A91C                 cmp     ax, word ptr [ebp+pvarg.anonymous_0]
.text:0040A920                 jnz     loc_40AAEE
.text:0040A926                 mov     ecx, [ebp+var_18]
.text:0040A929                 test    ecx, ecx
.text:0040A92B                 jz      short loc_40A941
.text:0040A92D                 mov     eax, [ecx]
.text:0040A92F                 push    ecx
.text:0040A930                 mov     esi, [eax+8]
.text:0040A933                 mov     ecx, esi
.text:0040A935                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040A93B                 call    esi
.text:0040A93D                 and     [ebp+var_18], 0
.text:0040A941
.text:0040A941 loc_40A941:                             ; CODE XREF: MergeProviders(ITraceDataProviderCollection *,ITraceDataProviderCollection *)+BD↑j
.text:0040A941                 mov     eax, dword ptr [ebp+pvarg.anonymous_0+8]
.text:0040A944                 lea     ecx, [ebp+var_18]
.text:0040A947                 push    ecx
.text:0040A948                 push    offset stru_403598
.text:0040A94D                 push    eax
.text:0040A94E                 mov     esi, [eax]
.text:0040A950                 mov     ecx, [esi]
.text:0040A952                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040A958                 call    dword ptr [esi]
.text:0040A95A                 mov     edi, eax
.text:0040A95C                 test    edi, edi
.text:0040A95E                 js      loc_40AA6D
.text:0040A964                 mov     eax, [ebp+var_18]
.text:0040A967                 lea     edx, [ebp+var_14]
.text:0040A96A                 push    edx
.text:0040A96B                 push    eax
.text:0040A96C                 mov     ecx, [eax]
.text:0040A96E                 mov     esi, [ecx+24h]
.text:0040A971                 mov     ecx, esi
.text:0040A973                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040A979                 call    esi
.text:0040A97B                 mov     edi, eax
.text:0040A97D                 test    edi, edi
.text:0040A97F                 js      loc_40AA6D
.text:0040A985                 test    ebx, ebx
.text:0040A987                 jz      short loc_40A99D
.text:0040A989                 mov     eax, [ebx]
.text:0040A98B                 push    ebx
.text:0040A98C                 mov     esi, [eax+8]
.text:0040A98F                 mov     ecx, esi
.text:0040A991                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040A997                 call    esi
.text:0040A999                 and     [ebp+var_1C], 0
.text:0040A99D
.text:0040A99D loc_40A99D:                             ; CODE XREF: MergeProviders(ITraceDataProviderCollection *,ITraceDataProviderCollection *)+119↑j
.text:0040A99D                 sub     esp, 10h
.text:0040A9A0                 lea     esi, [ebp+var_14]
.text:0040A9A3                 mov     edi, esp
.text:0040A9A5                 lea     edx, [ebp+var_1C]
.text:0040A9A8                 movsd
.text:0040A9A9                 movsd
.text:0040A9AA                 movsd
.text:0040A9AB                 movsd
.text:0040A9AC                 mov     esi, [ebp+var_24]
.text:0040A9AF                 mov     ecx, esi
.text:0040A9B1                 call    sub_4091DF
.text:0040A9B6                 mov     edi, eax
.text:0040A9B8                 test    edi, edi
.text:0040A9BA                 js      loc_40AA6D
.text:0040A9C0                 mov     ebx, [ebp+var_1C]
.text:0040A9C3                 test    ebx, ebx
.text:0040A9C5                 jz      short loc_40AA1B
.text:0040A9C7                 mov     ecx, [ebp+var_18]
.text:0040A9CA                 cmp     ecx, ebx
.text:0040A9CC                 jz      short loc_40AA1E
.text:0040A9CE                 lea     eax, [ebp+pvarg]
.text:0040A9D1                 push    eax             ; pvarg
.text:0040A9D2                 call    ds:VariantClear
.text:0040A9D8                 push    9
.text:0040A9DA                 pop     eax
.text:0040A9DB                 mov     word ptr [ebp+pvarg.anonymous_0], ax
.text:0040A9DF                 mov     dword ptr [ebp+pvarg.anonymous_0+8], ebx
.text:0040A9E2                 mov     eax, [ebx]
.text:0040A9E4                 push    ebx
.text:0040A9E5                 mov     esi, [eax+4]
.text:0040A9E8                 mov     ecx, esi
.text:0040A9EA                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040A9F0                 call    esi
.text:0040A9F2                 mov     ecx, [ebp+var_24]
.text:0040A9F5                 lea     esi, [ebp+pvarg]
.text:0040A9F8                 sub     esp, 10h
.text:0040A9FB                 mov     edi, esp
.text:0040A9FD                 mov     ebx, [ecx]
.text:0040A9FF                 movsd
.text:0040AA00                 movsd
.text:0040AA01                 movsd
.text:0040AA02                 movsd
.text:0040AA03                 mov     esi, ecx
.text:0040AA05                 mov     ecx, [ebx+2Ch]
.text:0040AA08                 push    esi
.text:0040AA09                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040AA0F                 call    dword ptr [ebx+2Ch]
.text:0040AA12                 mov     edi, eax
.text:0040AA14                 test    edi, edi
.text:0040AA16                 js      short loc_40AA6D
.text:0040AA18                 mov     ebx, [ebp+var_1C]
.text:0040AA1B
.text:0040AA1B loc_40AA1B:                             ; CODE XREF: MergeProviders(ITraceDataProviderCollection *,ITraceDataProviderCollection *)+157↑j
.text:0040AA1B                 mov     ecx, [ebp+var_18]
.text:0040AA1E
.text:0040AA1E loc_40AA1E:                             ; CODE XREF: MergeProviders(ITraceDataProviderCollection *,ITraceDataProviderCollection *)+15E↑j
.text:0040AA1E                 mov     eax, [esi]
.text:0040AA20                 push    ecx
.text:0040AA21                 push    esi
.text:0040AA22                 mov     esi, [eax+28h]
.text:0040AA25                 mov     ecx, esi
.text:0040AA27                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040AA2D                 call    esi
.text:0040AA2F                 mov     edi, eax
.text:0040AA31                 test    edi, edi
.text:0040AA33                 js      short loc_40AA6D
.text:0040AA35                 lea     eax, [ebp+pvarg]
.text:0040AA38                 push    eax             ; pvarg
.text:0040AA39                 call    ds:VariantClear
.text:0040AA3F                 mov     eax, [ebp+var_20]
.text:0040AA42                 lea     ecx, [ebp+pvarg]
.text:0040AA45                 push    0
.text:0040AA47                 push    ecx
.text:0040AA48                 push    1
.text:0040AA4A                 mov     esi, [eax]
.text:0040AA4C                 push    eax
.text:0040AA4D                 mov     ecx, [esi+0Ch]
.text:0040AA50                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040AA56                 call    dword ptr [esi+0Ch]
.text:0040AA59                 mov     edi, eax
.text:0040AA5B                 test    edi, edi
.text:0040AA5D                 js      short loc_40AA6D
.text:0040AA5F                 push    9
.text:0040AA61                 pop     eax
.text:0040AA62                 cmp     edi, 1
.text:0040AA65                 jnz     loc_40A91C
.text:0040AA6B
.text:0040AA6B loc_40AA6B:                             ; CODE XREF: MergeProviders(ITraceDataProviderCollection *,ITraceDataProviderCollection *)+A5↑j
.text:0040AA6B                 xor     edi, edi
.text:0040AA6D
.text:0040AA6D loc_40AA6D:                             ; CODE XREF: MergeProviders(ITraceDataProviderCollection *,ITraceDataProviderCollection *)+4C↑j
.text:0040AA6D                                         ; MergeProviders(ITraceDataProviderCollection *,ITraceDataProviderCollection *)+6F↑j ...
.text:0040AA6D                 lea     eax, [ebp+pvarg]
.text:0040AA70                 push    eax             ; pvarg
.text:0040AA71                 call    ds:VariantClear
.text:0040AA77                 mov     ecx, [ebp+var_1C]
.text:0040AA7A                 test    ecx, ecx
.text:0040AA7C                 jz      short loc_40AA8E
.text:0040AA7E                 mov     eax, [ecx]
.text:0040AA80                 push    ecx
.text:0040AA81                 mov     esi, [eax+8]
.text:0040AA84                 mov     ecx, esi
.text:0040AA86                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040AA8C                 call    esi
.text:0040AA8E
.text:0040AA8E loc_40AA8E:                             ; CODE XREF: MergeProviders(ITraceDataProviderCollection *,ITraceDataProviderCollection *)+20E↑j
.text:0040AA8E                 mov     ecx, [ebp+var_18]
.text:0040AA91                 test    ecx, ecx
.text:0040AA93                 jz      short loc_40AAA9
.text:0040AA95                 mov     eax, [ecx]
.text:0040AA97                 push    ecx
.text:0040AA98                 mov     esi, [eax+8]
.text:0040AA9B                 mov     ecx, esi
.text:0040AA9D                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040AAA3                 call    esi
.text:0040AAA5                 and     [ebp+var_18], 0
.text:0040AAA9
.text:0040AAA9 loc_40AAA9:                             ; CODE XREF: MergeProviders(ITraceDataProviderCollection *,ITraceDataProviderCollection *)+225↑j
.text:0040AAA9                 mov     ecx, [ebp+var_20]
.text:0040AAAC                 test    ecx, ecx
.text:0040AAAE                 jz      short loc_40AAC4
.text:0040AAB0                 mov     eax, [ecx]
.text:0040AAB2                 push    ecx
.text:0040AAB3                 mov     esi, [eax+8]
.text:0040AAB6                 mov     ecx, esi
.text:0040AAB8                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040AABE                 call    esi
.text:0040AAC0                 and     [ebp+var_20], 0
.text:0040AAC4
.text:0040AAC4 loc_40AAC4:                             ; CODE XREF: MergeProviders(ITraceDataProviderCollection *,ITraceDataProviderCollection *)+240↑j
.text:0040AAC4                 mov     ecx, [ebp+var_28]
.text:0040AAC7                 test    ecx, ecx
.text:0040AAC9                 jz      short loc_40AADB
.text:0040AACB                 mov     eax, [ecx]
.text:0040AACD                 push    ecx
.text:0040AACE                 mov     esi, [eax+8]
.text:0040AAD1                 mov     ecx, esi
.text:0040AAD3                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040AAD9                 call    esi
.text:0040AADB
.text:0040AADB loc_40AADB:                             ; CODE XREF: MergeProviders(ITraceDataProviderCollection *,ITraceDataProviderCollection *)+25B↑j
.text:0040AADB                 mov     ecx, [ebp+var_4]
.text:0040AADE                 mov     eax, edi
.text:0040AAE0                 pop     edi
.text:0040AAE1                 pop     esi
.text:0040AAE2                 xor     ecx, ebp        ; StackCookie
.text:0040AAE4                 pop     ebx
.text:0040AAE5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040AAEA                 mov     esp, ebp
.text:0040AAEC                 pop     ebp
.text:0040AAED                 retn
.text:0040AAEE ; ---------------------------------------------------------------------------
.text:0040AAEE
.text:0040AAEE loc_40AAEE:                             ; CODE XREF: MergeProviders(ITraceDataProviderCollection *,ITraceDataProviderCollection *)+B2↑j
.text:0040AAEE                 mov     edi, 80004005h
.text:0040AAF3                 jmp     loc_40AA6D
.text:0040AAF3 ?MergeProviders@@YGJPAUITraceDataProviderCollection@@0@Z endp
.text:0040AAF3
.text:0040AAF8
.text:0040AAF8 ; =============== S U B R O U T I N E =======================================
.text:0040AAF8
.text:0040AAF8 ; Attributes: bp-based frame
.text:0040AAF8
.text:0040AAF8 sub_40AAF8      proc near               ; CODE XREF: SetTraceValues(IDataCollector *)+36F↓p
.text:0040AAF8
.text:0040AAF8 var_54          = dword ptr -54h
.text:0040AAF8 pvarg           = VARIANTARG ptr -50h
.text:0040AAF8 var_40          = dword ptr -40h
.text:0040AAF8 bstrString      = dword ptr -3Ch
.text:0040AAF8 Stream          = dword ptr -38h
.text:0040AAF8 psz             = dword ptr -34h
.text:0040AAF8 ppv             = dword ptr -30h
.text:0040AAF8 var_2C          = dword ptr -2Ch
.text:0040AAF8 var_28          = dword ptr -28h
.text:0040AAF8 var_24          = dword ptr -24h
.text:0040AAF8 var_20          = dword ptr -20h
.text:0040AAF8 var_1C          = dword ptr -1Ch
.text:0040AAF8 var_18          = dword ptr -18h
.text:0040AAF8 var_14          = byte ptr -14h
.text:0040AAF8 var_4           = dword ptr -4
.text:0040AAF8
.text:0040AAF8                 mov     edi, edi
.text:0040AAFA                 push    ebp
.text:0040AAFB                 mov     ebp, esp
.text:0040AAFD                 sub     esp, 54h
.text:0040AB00                 mov     eax, ___security_cookie
.text:0040AB05                 xor     eax, ebp
.text:0040AB07                 mov     [ebp+var_4], eax
.text:0040AB0A                 xor     eax, eax
.text:0040AB0C                 push    ebx
.text:0040AB0D                 push    esi
.text:0040AB0E                 mov     [ebp+var_54], eax
.text:0040AB11                 mov     ebx, eax
.text:0040AB13                 mov     [ebp+bstrString], eax
.text:0040AB16                 mov     esi, ecx
.text:0040AB18                 mov     [ebp+var_1C], eax
.text:0040AB1B                 mov     [ebp+var_28], eax
.text:0040AB1E                 mov     [ebp+ppv], eax
.text:0040AB21                 mov     [ebp+var_20], eax
.text:0040AB24                 mov     [ebp+Stream], eax
.text:0040AB27                 mov     [ebp+var_40], eax
.text:0040AB2A                 lea     eax, [ebp+pvarg]
.text:0040AB2D                 push    edi             ; Context
.text:0040AB2E                 push    eax             ; pvarg
.text:0040AB2F                 call    ds:VariantInit
.text:0040AB35                 mov     eax, [esi]
.text:0040AB37                 lea     ecx, [ebp+var_28]
.text:0040AB3A                 push    ecx
.text:0040AB3B                 push    esi
.text:0040AB3C                 mov     esi, [eax+11Ch]
.text:0040AB42                 mov     ecx, esi
.text:0040AB44                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040AB4A                 call    esi
.text:0040AB4C                 mov     edi, eax
.text:0040AB4E                 xor     esi, esi
.text:0040AB50                 test    edi, edi
.text:0040AB52                 js      short loc_40AB98
.text:0040AB54                 lea     eax, [ebp+ppv]
.text:0040AB57                 push    eax             ; ppv
.text:0040AB58                 push    offset stru_4035C8 ; riid
.text:0040AB5D                 push    15h             ; dwClsContext
.text:0040AB5F                 push    esi             ; pUnkOuter
.text:0040AB60                 push    offset stru_403588 ; rclsid
.text:0040AB65                 call    ds:CoCreateInstance
.text:0040AB6B                 mov     edi, eax
.text:0040AB6D                 test    edi, edi
.text:0040AB6F                 js      short loc_40AB96
.text:0040AB71                 push    800h            ; dwBytes
.text:0040AB76                 push    esi             ; dwFlags
.text:0040AB77                 call    ds:GetProcessHeap
.text:0040AB7D                 push    eax             ; hHeap
.text:0040AB7E                 call    ds:HeapAlloc
.text:0040AB84                 mov     ebx, eax
.text:0040AB86                 mov     [ebp+var_18], ebx
.text:0040AB89                 test    ebx, ebx
.text:0040AB8B                 jnz     loc_40AC55
.text:0040AB91                 mov     edi, 8007000Eh
.text:0040AB96
.text:0040AB96 loc_40AB96:                             ; CODE XREF: sub_40AAF8+77↑j
.text:0040AB96                                         ; sub_40AAF8+18B↓j ...
.text:0040AB96                 xor     esi, esi
.text:0040AB98
.text:0040AB98 loc_40AB98:                             ; CODE XREF: sub_40AAF8+5A↑j
.text:0040AB98                                         ; sub_40AAF8+6E2↓j
.text:0040AB98                 lea     eax, [ebp+pvarg]
.text:0040AB9B                 push    eax             ; pvarg
.text:0040AB9C                 call    ds:VariantClear
.text:0040ABA2                 mov     eax, [ebp+bstrString]
.text:0040ABA5                 test    eax, eax
.text:0040ABA7                 jz      short loc_40ABB0
.text:0040ABA9                 push    eax             ; bstrString
.text:0040ABAA                 call    ds:SysFreeString
.text:0040ABB0
.text:0040ABB0 loc_40ABB0:                             ; CODE XREF: sub_40AAF8+AF↑j
.text:0040ABB0                 mov     ecx, [ebp+var_1C]
.text:0040ABB3                 test    ecx, ecx
.text:0040ABB5                 jz      short loc_40ABCC
.text:0040ABB7                 mov     eax, [ecx]
.text:0040ABB9                 push    ecx
.text:0040ABBA                 mov     esi, [eax+8]
.text:0040ABBD                 mov     ecx, esi
.text:0040ABBF                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040ABC5                 call    esi
.text:0040ABC7                 xor     esi, esi
.text:0040ABC9                 mov     [ebp+var_1C], esi
.text:0040ABCC
.text:0040ABCC loc_40ABCC:                             ; CODE XREF: sub_40AAF8+BD↑j
.text:0040ABCC                 mov     ecx, [ebp+var_28]
.text:0040ABCF                 test    ecx, ecx
.text:0040ABD1                 jz      short loc_40ABE8
.text:0040ABD3                 mov     eax, [ecx]
.text:0040ABD5                 push    ecx
.text:0040ABD6                 mov     esi, [eax+8]
.text:0040ABD9                 mov     ecx, esi
.text:0040ABDB                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040ABE1                 call    esi
.text:0040ABE3                 xor     esi, esi
.text:0040ABE5                 mov     [ebp+var_28], esi
.text:0040ABE8
.text:0040ABE8 loc_40ABE8:                             ; CODE XREF: sub_40AAF8+D9↑j
.text:0040ABE8                 mov     ecx, [ebp+var_20]
.text:0040ABEB                 test    ecx, ecx
.text:0040ABED                 jz      short loc_40AC04
.text:0040ABEF                 mov     eax, [ecx]
.text:0040ABF1                 push    ecx
.text:0040ABF2                 mov     esi, [eax+8]
.text:0040ABF5                 mov     ecx, esi
.text:0040ABF7                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040ABFD                 call    esi
.text:0040ABFF                 xor     esi, esi
.text:0040AC01                 mov     [ebp+var_20], esi
.text:0040AC04
.text:0040AC04 loc_40AC04:                             ; CODE XREF: sub_40AAF8+F5↑j
.text:0040AC04                 mov     ecx, [ebp+ppv]
.text:0040AC07                 test    ecx, ecx
.text:0040AC09                 jz      short loc_40AC20
.text:0040AC0B                 mov     eax, [ecx]
.text:0040AC0D                 push    ecx
.text:0040AC0E                 mov     esi, [eax+8]
.text:0040AC11                 mov     ecx, esi
.text:0040AC13                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040AC19                 call    esi
.text:0040AC1B                 xor     esi, esi
.text:0040AC1D                 mov     [ebp+ppv], esi
.text:0040AC20
.text:0040AC20 loc_40AC20:                             ; CODE XREF: sub_40AAF8+111↑j
.text:0040AC20                 mov     eax, [ebp+Stream]
.text:0040AC23                 test    eax, eax
.text:0040AC25                 jz      short loc_40AC2F
.text:0040AC27                 push    eax             ; Stream
.text:0040AC28                 call    ds:fclose
.text:0040AC2E                 pop     ecx
.text:0040AC2F
.text:0040AC2F loc_40AC2F:                             ; CODE XREF: sub_40AAF8+12D↑j
.text:0040AC2F                 test    ebx, ebx
.text:0040AC31                 jz      short loc_40AC42
.text:0040AC33                 push    ebx             ; lpMem
.text:0040AC34                 push    esi             ; dwFlags
.text:0040AC35                 call    ds:GetProcessHeap
.text:0040AC3B                 push    eax             ; hHeap
.text:0040AC3C                 call    ds:HeapFree
.text:0040AC42
.text:0040AC42 loc_40AC42:                             ; CODE XREF: sub_40AAF8+139↑j
.text:0040AC42                 mov     ecx, [ebp+var_4]
.text:0040AC45                 mov     eax, edi
.text:0040AC47                 pop     edi
.text:0040AC48                 pop     esi
.text:0040AC49                 xor     ecx, ebp        ; StackCookie
.text:0040AC4B                 pop     ebx
.text:0040AC4C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040AC51                 mov     esp, ebp
.text:0040AC53                 pop     ebp
.text:0040AC54                 retn
.text:0040AC55 ; ---------------------------------------------------------------------------
.text:0040AC55
.text:0040AC55 loc_40AC55:                             ; CODE XREF: sub_40AAF8+93↑j
.text:0040AC55                 cmp     dword_413AC0, esi
.text:0040AC5B                 jz      short loc_40ACB5
.text:0040AC5D                 push    offset Mode     ; "r"
.text:0040AC62                 push    FileName        ; FileName
.text:0040AC68                 call    ds:_wfopen
.text:0040AC6E                 mov     edi, eax
.text:0040AC70                 mov     [ebp+Stream], edi
.text:0040AC73                 pop     ecx
.text:0040AC74                 pop     ecx
.text:0040AC75                 test    edi, edi
.text:0040AC77                 jnz     short loc_40AC97
.text:0040AC79                 call    ds:GetLastError
.text:0040AC7F                 mov     edi, eax
.text:0040AC81                 test    edi, edi
.text:0040AC83                 jle     loc_40AB96
.text:0040AC89                 movzx   edi, di
.text:0040AC8C                 or      edi, 80070000h
.text:0040AC92                 jmp     loc_40AB96
.text:0040AC97 ; ---------------------------------------------------------------------------
.text:0040AC97
.text:0040AC97 loc_40AC97:                             ; CODE XREF: sub_40AAF8+17F↑j
.text:0040AC97                 push    edi             ; Stream
.text:0040AC98                 push    400h            ; BufferCount
.text:0040AC9D                 push    ebx             ; Buffer
.text:0040AC9E                 call    ds:fgetws
.text:0040ACA4                 add     esp, 0Ch
.text:0040ACA7                 mov     [ebp+var_24], eax
.text:0040ACAA                 mov     ecx, ebx
.text:0040ACAC                 mov     esi, eax
.text:0040ACAE                 call    sub_40E0F0
.text:0040ACB3                 jmp     short loc_40ACD5
.text:0040ACB5 ; ---------------------------------------------------------------------------
.text:0040ACB5
.text:0040ACB5 loc_40ACB5:                             ; CODE XREF: sub_40AAF8+163↑j
.text:0040ACB5                 cmp     dword_413F50, esi
.text:0040ACBB                 jz      loc_40B1BB
.text:0040ACC1                 mov     esi, dword_413F64
.text:0040ACC7                 mov     eax, dword_413F54
.text:0040ACCC                 mov     edi, [ebp+Stream]
.text:0040ACCF                 mov     [ebp+var_24], esi
.text:0040ACD2                 mov     [ebp+var_40], eax
.text:0040ACD5
.text:0040ACD5 loc_40ACD5:                             ; CODE XREF: sub_40AAF8+1BB↑j
.text:0040ACD5                 test    esi, esi
.text:0040ACD7                 jz      loc_40B1BB
.text:0040ACDD                 xor     ecx, ecx
.text:0040ACDF
.text:0040ACDF loc_40ACDF:                             ; CODE XREF: sub_40AAF8+6BD↓j
.text:0040ACDF                 cmp     dword_413AC0, 0
.text:0040ACE6                 mov     [ebp+var_2C], ecx
.text:0040ACE9                 mov     [ebp+psz], ecx
.text:0040ACEC                 jz      loc_40ADB0
.text:0040ACF2                 movzx   eax, word ptr [esi]
.text:0040ACF5                 cmp     eax, 23h ; '#'
.text:0040ACF8                 jz      loc_40B184
.text:0040ACFE                 cmp     eax, 2Ah ; '*'
.text:0040AD01                 jz      loc_40B184
.text:0040AD07                 cmp     eax, 3Bh ; ';'
.text:0040AD0A                 jz      loc_40B184
.text:0040AD10                 push    offset SubStr   ; "\""
.text:0040AD15                 push    esi             ; Str
.text:0040AD16                 call    ds:wcsstr
.text:0040AD1C                 pop     ecx
.text:0040AD1D                 pop     ecx
.text:0040AD1E                 xor     ecx, ecx
.text:0040AD20                 mov     ebx, eax
.text:0040AD22                 movzx   eax, word ptr [esi]
.text:0040AD25                 push    2Dh ; '-'
.text:0040AD27                 pop     edx
.text:0040AD28                 cmp     dx, ax
.text:0040AD2B                 setz    cl
.text:0040AD2E                 mov     [ebp+var_40], ecx
.text:0040AD31                 cmp     dx, ax
.text:0040AD34                 jnz     short loc_40AD3C
.text:0040AD36                 add     esi, 2
.text:0040AD39                 mov     [ebp+var_24], esi
.text:0040AD3C
.text:0040AD3C loc_40AD3C:                             ; CODE XREF: sub_40AAF8+23C↑j
.text:0040AD3C                 test    ebx, ebx
.text:0040AD3E                 jz      short loc_40AD80
.text:0040AD40                 add     ebx, 2
.text:0040AD43                 push    offset SubStr   ; "\""
.text:0040AD48                 push    ebx             ; Str
.text:0040AD49                 call    ds:wcsstr
.text:0040AD4F                 pop     ecx
.text:0040AD50                 pop     ecx
.text:0040AD51                 test    eax, eax
.text:0040AD53                 jz      loc_40AE19
.text:0040AD59                 xor     ecx, ecx
.text:0040AD5B                 mov     edi, offset asc_4032AC ; "\n\t "
.text:0040AD60                 mov     [eax], cx
.text:0040AD63                 add     eax, 2
.text:0040AD66                 push    edi             ; Delimiter
.text:0040AD67                 push    eax             ; Context
.text:0040AD68                 call    ds:wcstok
.text:0040AD6E                 push    edi             ; Delimiter
.text:0040AD6F                 xor     edi, edi
.text:0040AD71                 mov     [ebp+var_2C], eax
.text:0040AD74                 push    edi             ; String
.text:0040AD75                 call    ds:wcstok
.text:0040AD7B                 add     esp, 10h
.text:0040AD7E                 jmp     short loc_40ADAB
.text:0040AD80 ; ---------------------------------------------------------------------------
.text:0040AD80
.text:0040AD80 loc_40AD80:                             ; CODE XREF: sub_40AAF8+246↑j
.text:0040AD80                 mov     edi, offset asc_4032AC ; "\n\t "
.text:0040AD85                 push    edi             ; Delimiter
.text:0040AD86                 push    esi             ; Context
.text:0040AD87                 call    ds:wcstok
.text:0040AD8D                 push    edi             ; Delimiter
.text:0040AD8E                 xor     edi, edi
.text:0040AD90                 mov     ebx, eax
.text:0040AD92                 push    edi             ; Context
.text:0040AD93                 call    ds:wcstok
.text:0040AD99                 push    offset asc_4032AC ; "\n\t "
.text:0040AD9E                 push    edi             ; String
.text:0040AD9F                 mov     [ebp+var_2C], eax
.text:0040ADA2                 call    ds:wcstok
.text:0040ADA8                 add     esp, 18h
.text:0040ADAB
.text:0040ADAB loc_40ADAB:                             ; CODE XREF: sub_40AAF8+286↑j
.text:0040ADAB                 mov     [ebp+psz], eax
.text:0040ADAE                 jmp     short loc_40AE1B
.text:0040ADB0 ; ---------------------------------------------------------------------------
.text:0040ADB0
.text:0040ADB0 loc_40ADB0:                             ; CODE XREF: sub_40AAF8+1F4↑j
.text:0040ADB0                 cmp     dword_413F50, 0
.text:0040ADB7                 jz      loc_40B1B3
.text:0040ADBD                 xor     edi, edi
.text:0040ADBF                 mov     ebx, esi
.text:0040ADC1                 cmp     [esi], cx
.text:0040ADC4                 jz      loc_40AEDC
.text:0040ADCA                 mov     ecx, esi
.text:0040ADCC                 lea     edx, [ecx+2]
.text:0040ADCF
.text:0040ADCF loc_40ADCF:                             ; CODE XREF: sub_40AAF8+2E0↓j
.text:0040ADCF                 mov     ax, [ecx]
.text:0040ADD2                 add     ecx, 2
.text:0040ADD5                 cmp     ax, di
.text:0040ADD8                 jnz     short loc_40ADCF
.text:0040ADDA                 sub     ecx, edx
.text:0040ADDC                 sar     ecx, 1
.text:0040ADDE                 inc     ecx
.text:0040ADDF                 lea     edi, [esi+ecx*2]
.text:0040ADE2                 xor     ecx, ecx
.text:0040ADE4                 mov     [ebp+var_2C], edi
.text:0040ADE7                 cmp     [edi], cx
.text:0040ADEA                 jz      short loc_40AE16
.text:0040ADEC                 mov     ecx, edi
.text:0040ADEE                 lea     edx, [ecx+2]
.text:0040ADF1
.text:0040ADF1 loc_40ADF1:                             ; CODE XREF: sub_40AAF8+303↓j
.text:0040ADF1                 mov     ax, [ecx]
.text:0040ADF4                 add     ecx, 2
.text:0040ADF7                 cmp     ax, word ptr [ebp+var_54]
.text:0040ADFB                 jnz     short loc_40ADF1
.text:0040ADFD                 sub     ecx, edx
.text:0040ADFF                 sar     ecx, 1
.text:0040AE01                 inc     ecx
.text:0040AE02                 lea     eax, [edi+ecx*2]
.text:0040AE05                 xor     ecx, ecx
.text:0040AE07                 mov     [ebp+psz], eax
.text:0040AE0A                 cmp     cx, [eax]
.text:0040AE0D                 jnz     short loc_40AE19
.text:0040AE0F                 xor     edi, edi
.text:0040AE11                 mov     [ebp+psz], edi
.text:0040AE14                 jmp     short loc_40AE1B
.text:0040AE16 ; ---------------------------------------------------------------------------
.text:0040AE16
.text:0040AE16 loc_40AE16:                             ; CODE XREF: sub_40AAF8+2F2↑j
.text:0040AE16                 mov     [ebp+var_2C], ecx
.text:0040AE19
.text:0040AE19 loc_40AE19:                             ; CODE XREF: sub_40AAF8+25B↑j
.text:0040AE19                                         ; sub_40AAF8+315↑j
.text:0040AE19                 xor     edi, edi
.text:0040AE1B
.text:0040AE1B loc_40AE1B:                             ; CODE XREF: sub_40AAF8+2B6↑j
.text:0040AE1B                                         ; sub_40AAF8+31C↑j ...
.text:0040AE1B                 test    ebx, ebx
.text:0040AE1D                 jz      loc_40B175
.text:0040AE23                 mov     ecx, [ebp+var_1C]
.text:0040AE26                 test    ecx, ecx
.text:0040AE28                 jz      short loc_40AE3D
.text:0040AE2A                 mov     eax, [ecx]
.text:0040AE2C                 push    ecx
.text:0040AE2D                 mov     esi, [eax+8]
.text:0040AE30                 mov     ecx, esi
.text:0040AE32                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040AE38                 call    esi
.text:0040AE3A                 mov     [ebp+var_1C], edi
.text:0040AE3D
.text:0040AE3D loc_40AE3D:                             ; CODE XREF: sub_40AAF8+330↑j
.text:0040AE3D                 mov     eax, [ebp+var_28]
.text:0040AE40                 lea     edx, [ebp+var_1C]
.text:0040AE43                 push    edx
.text:0040AE44                 push    eax
.text:0040AE45                 mov     ecx, [eax]
.text:0040AE47                 mov     esi, [ecx+38h]
.text:0040AE4A                 mov     ecx, esi
.text:0040AE4C                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040AE52                 call    esi
.text:0040AE54                 mov     edi, eax
.text:0040AE56                 test    edi, edi
.text:0040AE58                 js      loc_40B1CF
.text:0040AE5E                 mov     eax, [ebp+bstrString]
.text:0040AE61                 test    eax, eax
.text:0040AE63                 jz      short loc_40AE6C
.text:0040AE65                 push    eax             ; bstrString
.text:0040AE66                 call    ds:SysFreeString
.text:0040AE6C
.text:0040AE6C loc_40AE6C:                             ; CODE XREF: sub_40AAF8+36B↑j
.text:0040AE6C                 push    ebx             ; psz
.text:0040AE6D                 call    ds:SysAllocString
.text:0040AE73                 mov     [ebp+bstrString], eax
.text:0040AE76                 test    eax, eax
.text:0040AE78                 jz      loc_40B1CA
.text:0040AE7E                 mov     ecx, [ebp+var_1C]
.text:0040AE81                 push    eax
.text:0040AE82                 push    ecx
.text:0040AE83                 mov     edx, [ecx]
.text:0040AE85                 mov     esi, [edx+20h]
.text:0040AE88                 mov     ecx, esi
.text:0040AE8A                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040AE90                 call    esi
.text:0040AE92                 mov     edi, eax
.text:0040AE94                 test    edi, edi
.text:0040AE96                 js      loc_40B1CF
.text:0040AE9C                 mov     eax, [ebp+var_1C]
.text:0040AE9F                 lea     edx, [ebp+var_14]
.text:0040AEA2                 push    edx
.text:0040AEA3                 push    eax
.text:0040AEA4                 mov     ecx, [eax]
.text:0040AEA6                 mov     esi, [ecx+24h]
.text:0040AEA9                 mov     ecx, esi
.text:0040AEAB                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040AEB1                 call    esi
.text:0040AEB3                 mov     edi, eax
.text:0040AEB5                 test    edi, edi
.text:0040AEB7                 js      loc_40B1CF
.text:0040AEBD                 xor     eax, eax
.text:0040AEBF                 lea     edx, [ebp+var_14]
.text:0040AEC2                 mov     esi, offset dword_4034E8
.text:0040AEC7                 mov     ecx, eax
.text:0040AEC9
.text:0040AEC9 loc_40AEC9:                             ; CODE XREF: sub_40AAF8+3DD↓j
.text:0040AEC9                 mov     eax, [edx+ecx*4]
.text:0040AECC                 cmp     eax, [esi+ecx*4]
.text:0040AECF                 jnz     short loc_40AEE3
.text:0040AED1                 inc     ecx
.text:0040AED2                 cmp     ecx, 4
.text:0040AED5                 jnz     short loc_40AEC9
.text:0040AED7                 mov     ebx, [ebp+var_2C]
.text:0040AEDA                 jmp     short loc_40AEF2
.text:0040AEDC ; ---------------------------------------------------------------------------
.text:0040AEDC
.text:0040AEDC loc_40AEDC:                             ; CODE XREF: sub_40AAF8+2CC↑j
.text:0040AEDC                 mov     ebx, ecx
.text:0040AEDE                 jmp     loc_40AE1B
.text:0040AEE3 ; ---------------------------------------------------------------------------
.text:0040AEE3
.text:0040AEE3 loc_40AEE3:                             ; CODE XREF: sub_40AAF8+3D7↑j
.text:0040AEE3                 mov     ebx, [ebp+var_2C]
.text:0040AEE6                 test    ebx, ebx
.text:0040AEE8                 jz      short loc_40AF3A
.text:0040AEEA                 push    28h ; '('
.text:0040AEEC                 pop     eax
.text:0040AEED                 cmp     ax, [ebx]
.text:0040AEF0                 jnz     short loc_40AF3A
.text:0040AEF2
.text:0040AEF2 loc_40AEF2:                             ; CODE XREF: sub_40AAF8+3E2↑j
.text:0040AEF2                 mov     eax, [ebp+var_1C]
.text:0040AEF5                 push    bstrString
.text:0040AEFB                 mov     edx, [ebp+bstrString]
.text:0040AEFE                 push    edx
.text:0040AEFF                 mov     ecx, [eax]
.text:0040AF01                 push    eax
.text:0040AF02                 mov     esi, [ecx+54h]
.text:0040AF05                 mov     ecx, esi
.text:0040AF07                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040AF0D                 call    esi
.text:0040AF0F                 mov     edi, eax
.text:0040AF11                 test    edi, edi
.text:0040AF13                 js      loc_40B1CF
.text:0040AF19                 mov     eax, [ebp+var_1C]
.text:0040AF1C                 lea     edx, [ebp+var_14]
.text:0040AF1F                 push    edx
.text:0040AF20                 push    eax
.text:0040AF21                 mov     ecx, [eax]
.text:0040AF23                 mov     esi, [ecx+24h]
.text:0040AF26                 mov     ecx, esi
.text:0040AF28                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040AF2E                 call    esi
.text:0040AF30                 mov     edi, eax
.text:0040AF32                 test    edi, edi
.text:0040AF34                 js      loc_40B1CF
.text:0040AF3A
.text:0040AF3A loc_40AF3A:                             ; CODE XREF: sub_40AAF8+3F0↑j
.text:0040AF3A                                         ; sub_40AAF8+3F8↑j
.text:0040AF3A                 mov     ecx, [ebp+ppv]
.text:0040AF3D                 lea     esi, [ebp+var_14]
.text:0040AF40                 sub     esp, 10h
.text:0040AF43                 lea     edx, [ebp+var_1C]
.text:0040AF46                 mov     edi, esp
.text:0040AF48                 movsd
.text:0040AF49                 movsd
.text:0040AF4A                 movsd
.text:0040AF4B                 movsd
.text:0040AF4C                 call    sub_4091DF
.text:0040AF51                 mov     edi, eax
.text:0040AF53                 test    edi, edi
.text:0040AF55                 js      loc_40B1CF
.text:0040AF5B                 test    ebx, ebx
.text:0040AF5D                 jz      loc_40B023
.text:0040AF63                 mov     ecx, [ebp+var_20]
.text:0040AF66                 test    ecx, ecx
.text:0040AF68                 jz      short loc_40AF7F
.text:0040AF6A                 mov     eax, [ecx]
.text:0040AF6C                 push    ecx
.text:0040AF6D                 mov     esi, [eax+8]
.text:0040AF70                 mov     ecx, esi
.text:0040AF72                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040AF78                 call    esi
.text:0040AF7A                 xor     eax, eax
.text:0040AF7C                 mov     [ebp+var_20], eax
.text:0040AF7F
.text:0040AF7F loc_40AF7F:                             ; CODE XREF: sub_40AAF8+470↑j
.text:0040AF7F                 mov     eax, [ebp+var_1C]
.text:0040AF82                 lea     edx, [ebp+var_20]
.text:0040AF85                 push    edx
.text:0040AF86                 push    eax
.text:0040AF87                 mov     ecx, [eax]
.text:0040AF89                 mov     esi, [ecx+30h]
.text:0040AF8C                 mov     ecx, esi
.text:0040AF8E                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040AF94                 call    esi
.text:0040AF96                 mov     edi, eax
.text:0040AF98                 xor     esi, esi
.text:0040AF9A                 test    edi, edi
.text:0040AF9C                 js      loc_40B1D7
.text:0040AFA2                 lea     edx, [ebp+var_14]
.text:0040AFA5                 mov     edi, offset dword_4034F8
.text:0040AFAA                 mov     ecx, esi
.text:0040AFAC
.text:0040AFAC loc_40AFAC:                             ; CODE XREF: sub_40AAF8+4C0↓j
.text:0040AFAC                 mov     eax, [edx+ecx*4]
.text:0040AFAF                 cmp     eax, [edi+ecx*4]
.text:0040AFB2                 jnz     short loc_40AFBC
.text:0040AFB4                 inc     ecx
.text:0040AFB5                 cmp     ecx, 4
.text:0040AFB8                 jnz     short loc_40AFAC
.text:0040AFBA                 jmp     short loc_40B008
.text:0040AFBC ; ---------------------------------------------------------------------------
.text:0040AFBC
.text:0040AFBC loc_40AFBC:                             ; CODE XREF: sub_40AAF8+4BA↑j
.text:0040AFBC                 lea     edx, [ebp+var_14]
.text:0040AFBF                 mov     edi, offset dword_4034C8
.text:0040AFC4                 mov     ecx, esi
.text:0040AFC6
.text:0040AFC6 loc_40AFC6:                             ; CODE XREF: sub_40AAF8+4DA↓j
.text:0040AFC6                 mov     eax, [edx+ecx*4]
.text:0040AFC9                 cmp     eax, [edi+ecx*4]
.text:0040AFCC                 jnz     short loc_40AFD6
.text:0040AFCE                 inc     ecx
.text:0040AFCF                 cmp     ecx, 4
.text:0040AFD2                 jnz     short loc_40AFC6
.text:0040AFD4                 jmp     short loc_40B008
.text:0040AFD6 ; ---------------------------------------------------------------------------
.text:0040AFD6
.text:0040AFD6 loc_40AFD6:                             ; CODE XREF: sub_40AAF8+4D4↑j
.text:0040AFD6                 lea     edx, [ebp+var_14]
.text:0040AFD9                 mov     edi, offset dword_4034B8
.text:0040AFDE                 mov     ecx, esi
.text:0040AFE0
.text:0040AFE0 loc_40AFE0:                             ; CODE XREF: sub_40AAF8+4F4↓j
.text:0040AFE0                 mov     eax, [edx+ecx*4]
.text:0040AFE3                 cmp     eax, [edi+ecx*4]
.text:0040AFE6                 jnz     short loc_40AFF0
.text:0040AFE8                 inc     ecx
.text:0040AFE9                 cmp     ecx, 4
.text:0040AFEC                 jnz     short loc_40AFE0
.text:0040AFEE                 jmp     short loc_40B008
.text:0040AFF0 ; ---------------------------------------------------------------------------
.text:0040AFF0
.text:0040AFF0 loc_40AFF0:                             ; CODE XREF: sub_40AAF8+4EE↑j
.text:0040AFF0                 lea     edx, [ebp+var_14]
.text:0040AFF3                 mov     edi, offset dword_4034D8
.text:0040AFF8                 mov     ecx, esi
.text:0040AFFA
.text:0040AFFA loc_40AFFA:                             ; CODE XREF: sub_40AAF8+50E↓j
.text:0040AFFA                 mov     eax, [edx+ecx*4]
.text:0040AFFD                 cmp     eax, [edi+ecx*4]
.text:0040B000                 jnz     short loc_40B00D
.text:0040B002                 inc     ecx
.text:0040B003                 cmp     ecx, 4
.text:0040B006                 jnz     short loc_40AFFA
.text:0040B008
.text:0040B008 loc_40B008:                             ; CODE XREF: sub_40AAF8+4C2↑j
.text:0040B008                                         ; sub_40AAF8+4DC↑j ...
.text:0040B008                 xor     ecx, ecx
.text:0040B00A                 inc     ecx
.text:0040B00B                 jmp     short loc_40B00F
.text:0040B00D ; ---------------------------------------------------------------------------
.text:0040B00D
.text:0040B00D loc_40B00D:                             ; CODE XREF: sub_40AAF8+508↑j
.text:0040B00D                 mov     ecx, esi
.text:0040B00F
.text:0040B00F loc_40B00F:                             ; CODE XREF: sub_40AAF8+513↑j
.text:0040B00F                 push    [ebp+var_20]
.text:0040B012                 mov     edx, ebx
.text:0040B014                 call    sub_40A742
.text:0040B019                 mov     edi, eax
.text:0040B01B                 test    edi, edi
.text:0040B01D                 js      loc_40B1D7
.text:0040B023
.text:0040B023 loc_40B023:                             ; CODE XREF: sub_40AAF8+465↑j
.text:0040B023                 mov     ebx, [ebp+psz]
.text:0040B026                 test    ebx, ebx
.text:0040B028                 jz      loc_40B0B6
.text:0040B02E                 lea     eax, [ebp+pvarg]
.text:0040B031                 push    eax             ; pvarg
.text:0040B032                 call    ds:VariantClear
.text:0040B038                 mov     ecx, [ebp+var_20]
.text:0040B03B                 test    ecx, ecx
.text:0040B03D                 jz      short loc_40B054
.text:0040B03F                 mov     eax, [ecx]
.text:0040B041                 push    ecx
.text:0040B042                 mov     esi, [eax+8]
.text:0040B045                 mov     ecx, esi
.text:0040B047                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B04D                 call    esi
.text:0040B04F                 xor     eax, eax
.text:0040B051                 mov     [ebp+var_20], eax
.text:0040B054
.text:0040B054 loc_40B054:                             ; CODE XREF: sub_40AAF8+545↑j
.text:0040B054                 mov     eax, [ebp+var_1C]
.text:0040B057                 lea     edx, [ebp+var_20]
.text:0040B05A                 push    edx
.text:0040B05B                 push    eax
.text:0040B05C                 mov     ecx, [eax]
.text:0040B05E                 mov     esi, [ecx+2Ch]
.text:0040B061                 mov     ecx, esi
.text:0040B063                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B069                 call    esi
.text:0040B06B                 mov     edi, eax
.text:0040B06D                 test    edi, edi
.text:0040B06F                 js      loc_40B1CF
.text:0040B075                 push    ebx             ; psz
.text:0040B076                 call    ds:SysAllocString
.text:0040B07C                 mov     dword ptr [ebp+pvarg.anonymous_0+8], eax
.text:0040B07F                 test    eax, eax
.text:0040B081                 jz      loc_40B1CA
.text:0040B087                 push    8
.text:0040B089                 pop     eax
.text:0040B08A                 sub     esp, 10h
.text:0040B08D                 mov     word ptr [ebp+pvarg.anonymous_0], ax
.text:0040B091                 mov     eax, [ebp+var_20]
.text:0040B094                 lea     esi, [ebp+pvarg]
.text:0040B097                 mov     edi, esp
.text:0040B099                 push    eax
.text:0040B09A                 mov     ebx, [eax]
.text:0040B09C                 movsd
.text:0040B09D                 mov     ecx, [ebx+40h]
.text:0040B0A0                 movsd
.text:0040B0A1                 movsd
.text:0040B0A2                 movsd
.text:0040B0A3                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B0A9                 call    dword ptr [ebx+40h]
.text:0040B0AC                 mov     edi, eax
.text:0040B0AE                 test    edi, edi
.text:0040B0B0                 js      loc_40B1CF
.text:0040B0B6
.text:0040B0B6 loc_40B0B6:                             ; CODE XREF: sub_40AAF8+530↑j
.text:0040B0B6                 cmp     [ebp+var_40], 0
.text:0040B0BA                 jnz     short loc_40B0D7
.text:0040B0BC                 mov     eax, [ebp+ppv]
.text:0040B0BF                 push    [ebp+var_1C]
.text:0040B0C2                 push    eax
.text:0040B0C3                 mov     ecx, [eax]
.text:0040B0C5                 mov     esi, [ecx+28h]
.text:0040B0C8                 mov     ecx, esi
.text:0040B0CA                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B0D0                 call    esi
.text:0040B0D2                 jmp     loc_40B16C
.text:0040B0D7 ; ---------------------------------------------------------------------------
.text:0040B0D7
.text:0040B0D7 loc_40B0D7:                             ; CODE XREF: sub_40AAF8+5C2↑j
.text:0040B0D7                 mov     ecx, [ebp+var_1C]
.text:0040B0DA                 test    ecx, ecx
.text:0040B0DC                 jz      short loc_40B0F3
.text:0040B0DE                 mov     eax, [ecx]
.text:0040B0E0                 push    ecx
.text:0040B0E1                 mov     esi, [eax+8]
.text:0040B0E4                 mov     ecx, esi
.text:0040B0E6                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B0EC                 call    esi
.text:0040B0EE                 xor     eax, eax
.text:0040B0F0                 mov     [ebp+var_1C], eax
.text:0040B0F3
.text:0040B0F3 loc_40B0F3:                             ; CODE XREF: sub_40AAF8+5E4↑j
.text:0040B0F3                 mov     ecx, [ebp+var_28]
.text:0040B0F6                 lea     esi, [ebp+var_14]
.text:0040B0F9                 sub     esp, 10h
.text:0040B0FC                 lea     edx, [ebp+var_1C]
.text:0040B0FF                 mov     edi, esp
.text:0040B101                 movsd
.text:0040B102                 movsd
.text:0040B103                 movsd
.text:0040B104                 movsd
.text:0040B105                 call    sub_4091DF
.text:0040B10A                 mov     edi, eax
.text:0040B10C                 test    edi, edi
.text:0040B10E                 js      loc_40B1CF
.text:0040B114                 cmp     [ebp+var_1C], 0
.text:0040B118                 jz      short loc_40B172
.text:0040B11A                 lea     eax, [ebp+pvarg]
.text:0040B11D                 push    eax             ; pvarg
.text:0040B11E                 call    ds:VariantClear
.text:0040B124                 mov     eax, [ebp+var_1C]
.text:0040B127                 lea     ecx, [ebp+pvarg.anonymous_0+8]
.text:0040B12A                 push    ecx
.text:0040B12B                 push    offset dword_4035F8
.text:0040B130                 push    eax
.text:0040B131                 mov     esi, [eax]
.text:0040B133                 mov     ecx, [esi]
.text:0040B135                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B13B                 call    dword ptr [esi]
.text:0040B13D                 mov     edi, eax
.text:0040B13F                 test    edi, edi
.text:0040B141                 js      loc_40B1CF
.text:0040B147                 push    9
.text:0040B149                 pop     eax
.text:0040B14A                 sub     esp, 10h
.text:0040B14D                 mov     word ptr [ebp+pvarg.anonymous_0], ax
.text:0040B151                 mov     eax, [ebp+var_28]
.text:0040B154                 lea     esi, [ebp+pvarg]
.text:0040B157                 mov     edi, esp
.text:0040B159                 push    eax
.text:0040B15A                 mov     ebx, [eax]
.text:0040B15C                 movsd
.text:0040B15D                 mov     ecx, [ebx+2Ch]
.text:0040B160                 movsd
.text:0040B161                 movsd
.text:0040B162                 movsd
.text:0040B163                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B169                 call    dword ptr [ebx+2Ch]
.text:0040B16C
.text:0040B16C loc_40B16C:                             ; CODE XREF: sub_40AAF8+5DA↑j
.text:0040B16C                 mov     edi, eax
.text:0040B16E                 test    edi, edi
.text:0040B170                 js      short loc_40B1CF
.text:0040B172
.text:0040B172 loc_40B172:                             ; CODE XREF: sub_40AAF8+620↑j
.text:0040B172                 mov     esi, [ebp+var_24]
.text:0040B175
.text:0040B175 loc_40B175:                             ; CODE XREF: sub_40AAF8+325↑j
.text:0040B175                 cmp     dword_413AC0, 0
.text:0040B17C                 jz      short loc_40B1A2
.text:0040B17E                 mov     edi, [ebp+Stream]
.text:0040B181                 mov     ebx, [ebp+var_18]
.text:0040B184
.text:0040B184 loc_40B184:                             ; CODE XREF: sub_40AAF8+200↑j
.text:0040B184                                         ; sub_40AAF8+209↑j ...
.text:0040B184                 push    edi             ; Stream
.text:0040B185                 push    400h            ; BufferCount
.text:0040B18A                 push    ebx             ; Buffer
.text:0040B18B                 call    ds:fgetws
.text:0040B191                 add     esp, 0Ch
.text:0040B194                 mov     esi, eax
.text:0040B196                 mov     ecx, ebx
.text:0040B198                 mov     [ebp+var_24], esi
.text:0040B19B                 call    sub_40E0F0
.text:0040B1A0                 jmp     short loc_40B1B1
.text:0040B1A2 ; ---------------------------------------------------------------------------
.text:0040B1A2
.text:0040B1A2 loc_40B1A2:                             ; CODE XREF: sub_40AAF8+684↑j
.text:0040B1A2                 cmp     dword_413F50, 0
.text:0040B1A9                 jnz     short loc_40B1BB
.text:0040B1AB                 mov     ebx, [ebp+var_18]
.text:0040B1AE                 mov     edi, [ebp+Stream]
.text:0040B1B1
.text:0040B1B1 loc_40B1B1:                             ; CODE XREF: sub_40AAF8+6A8↑j
.text:0040B1B1                 xor     ecx, ecx
.text:0040B1B3
.text:0040B1B3 loc_40B1B3:                             ; CODE XREF: sub_40AAF8+2BF↑j
.text:0040B1B3                 test    esi, esi
.text:0040B1B5                 jnz     loc_40ACDF
.text:0040B1BB
.text:0040B1BB loc_40B1BB:                             ; CODE XREF: sub_40AAF8+1C3↑j
.text:0040B1BB                                         ; sub_40AAF8+1DF↑j ...
.text:0040B1BB                 mov     edx, [ebp+ppv]
.text:0040B1BE                 mov     ecx, [ebp+var_28]
.text:0040B1C1                 call    ?MergeProviders@@YGJPAUITraceDataProviderCollection@@0@Z ; MergeProviders(ITraceDataProviderCollection *,ITraceDataProviderCollection *)
.text:0040B1C6                 mov     edi, eax
.text:0040B1C8                 jmp     short loc_40B1CF
.text:0040B1CA ; ---------------------------------------------------------------------------
.text:0040B1CA
.text:0040B1CA loc_40B1CA:                             ; CODE XREF: sub_40AAF8+380↑j
.text:0040B1CA                                         ; sub_40AAF8+589↑j
.text:0040B1CA                 mov     edi, 8007000Eh
.text:0040B1CF
.text:0040B1CF loc_40B1CF:                             ; CODE XREF: sub_40AAF8+360↑j
.text:0040B1CF                                         ; sub_40AAF8+39E↑j ...
.text:0040B1CF                 mov     ebx, [ebp+var_18]
.text:0040B1D2                 jmp     loc_40AB96
.text:0040B1D7 ; ---------------------------------------------------------------------------
.text:0040B1D7
.text:0040B1D7 loc_40B1D7:                             ; CODE XREF: sub_40AAF8+4A4↑j
.text:0040B1D7                                         ; sub_40AAF8+525↑j
.text:0040B1D7                 mov     ebx, [ebp+var_18]
.text:0040B1DA                 jmp     loc_40AB98
.text:0040B1DA sub_40AAF8      endp
.text:0040B1DA
.text:0040B1DF
.text:0040B1DF ; =============== S U B R O U T I N E =======================================
.text:0040B1DF
.text:0040B1DF ; Attributes: bp-based frame
.text:0040B1DF
.text:0040B1DF sub_40B1DF      proc near               ; CODE XREF: SetTraceValues(IDataCollector *)+41↓p
.text:0040B1DF                                         ; SetApiTraceValues(IDataCollector *,int *)+220↓p
.text:0040B1DF
.text:0040B1DF var_4           = dword ptr -4
.text:0040B1DF
.text:0040B1DF                 mov     edi, edi
.text:0040B1E1                 push    ebp
.text:0040B1E2                 mov     ebp, esp
.text:0040B1E4                 push    ecx
.text:0040B1E5                 mov     eax, ___security_cookie
.text:0040B1EA                 xor     eax, ebp
.text:0040B1EC                 mov     [ebp+var_4], eax
.text:0040B1EF                 cmp     dword_414B80, 0
.text:0040B1F6                 push    esi
.text:0040B1F7                 mov     esi, ecx
.text:0040B1F9                 jz      short loc_40B245
.text:0040B1FB                 push    dword_414B94    ; String2
.text:0040B201                 push    offset aBin     ; "bin"
.text:0040B206                 call    ds:__imp__wcsicmp
.text:0040B20C                 pop     ecx
.text:0040B20D                 pop     ecx
.text:0040B20E                 test    eax, eax
.text:0040B210                 jnz     short loc_40B216
.text:0040B212                 xor     ecx, ecx
.text:0040B214                 jmp     short loc_40B230
.text:0040B216 ; ---------------------------------------------------------------------------
.text:0040B216
.text:0040B216 loc_40B216:                             ; CODE XREF: sub_40B1DF+31↑j
.text:0040B216                 push    dword_414B94    ; String2
.text:0040B21C                 push    offset aBincirc ; "bincirc"
.text:0040B221                 call    ds:__imp__wcsicmp
.text:0040B227                 pop     ecx
.text:0040B228                 pop     ecx
.text:0040B229                 test    eax, eax
.text:0040B22B                 jnz     short loc_40B256
.text:0040B22D                 or      ecx, 0FFFFFFFFh
.text:0040B230
.text:0040B230 loc_40B230:                             ; CODE XREF: sub_40B1DF+35↑j
.text:0040B230                 mov     eax, [esi]
.text:0040B232                 push    ecx
.text:0040B233                 push    esi
.text:0040B234                 mov     esi, [eax+54h]
.text:0040B237                 mov     ecx, esi
.text:0040B239                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B23F                 call    esi
.text:0040B241                 test    eax, eax
.text:0040B243                 js      short loc_40B247
.text:0040B245
.text:0040B245 loc_40B245:                             ; CODE XREF: sub_40B1DF+1A↑j
.text:0040B245                 xor     eax, eax
.text:0040B247
.text:0040B247 loc_40B247:                             ; CODE XREF: sub_40B1DF+64↑j
.text:0040B247                                         ; sub_40B1DF+7C↓j
.text:0040B247                 mov     ecx, [ebp+var_4]
.text:0040B24A                 xor     ecx, ebp        ; StackCookie
.text:0040B24C                 pop     esi
.text:0040B24D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040B252                 mov     esp, ebp
.text:0040B254                 pop     ebp
.text:0040B255                 retn
.text:0040B256 ; ---------------------------------------------------------------------------
.text:0040B256
.text:0040B256 loc_40B256:                             ; CODE XREF: sub_40B1DF+4C↑j
.text:0040B256                 mov     eax, 80070057h
.text:0040B25B                 jmp     short loc_40B247
.text:0040B25B sub_40B1DF      endp
.text:0040B25B
.text:0040B25D
.text:0040B25D ; =============== S U B R O U T I N E =======================================
.text:0040B25D
.text:0040B25D ; Attributes: bp-based frame info_from_lumina
.text:0040B25D
.text:0040B25D ; int __stdcall SetTraceValues(struct IDataCollector *)
.text:0040B25D ?SetTraceValues@@YGJPAUIDataCollector@@@Z proc near
.text:0040B25D                                         ; CODE XREF: sub_40BF14+288↓p
.text:0040B25D
.text:0040B25D bstrString      = dword ptr -14h
.text:0040B25D var_10          = dword ptr -10h
.text:0040B25D var_C           = dword ptr -0Ch
.text:0040B25D var_8           = dword ptr -8
.text:0040B25D var_4           = dword ptr -4
.text:0040B25D
.text:0040B25D                 mov     edi, edi
.text:0040B25F                 push    ebp
.text:0040B260                 mov     ebp, esp
.text:0040B262                 sub     esp, 14h
.text:0040B265                 mov     eax, ___security_cookie
.text:0040B26A                 xor     eax, ebp
.text:0040B26C                 mov     [ebp+var_4], eax
.text:0040B26F                 push    ebx
.text:0040B270                 push    esi
.text:0040B271                 mov     ebx, ecx
.text:0040B273                 xor     eax, eax
.text:0040B275                 push    edi
.text:0040B276                 mov     [ebp+bstrString], eax
.text:0040B279                 mov     [ebp+var_8], eax
.text:0040B27C                 lea     eax, [ebp+var_8]
.text:0040B27F                 mov     esi, [ebx]
.text:0040B281                 push    eax
.text:0040B282                 push    offset dword_4035A8
.text:0040B287                 push    ebx
.text:0040B288                 mov     ecx, [esi]
.text:0040B28A                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B290                 call    dword ptr [esi]
.text:0040B292                 mov     edi, eax
.text:0040B294                 test    edi, edi
.text:0040B296                 js      loc_40B5E1
.text:0040B29C                 mov     ecx, ebx
.text:0040B29E                 call    sub_40B1DF
.text:0040B2A3                 mov     edi, eax
.text:0040B2A5                 test    edi, edi
.text:0040B2A7                 js      loc_40B5E1
.text:0040B2AD                 cmp     dword_4134B0, 0
.text:0040B2B4                 jz      short loc_40B2F6
.text:0040B2B6                 push    dword_4134C4    ; psz
.text:0040B2BC                 call    ds:SysAllocString
.text:0040B2C2                 mov     ebx, eax
.text:0040B2C4                 mov     [ebp+bstrString], ebx
.text:0040B2C7                 test    ebx, ebx
.text:0040B2C9                 jnz     short loc_40B2D5
.text:0040B2CB                 mov     edi, 8007000Eh
.text:0040B2D0                 jmp     loc_40B5E1
.text:0040B2D5 ; ---------------------------------------------------------------------------
.text:0040B2D5
.text:0040B2D5 loc_40B2D5:                             ; CODE XREF: SetTraceValues(IDataCollector *)+6C↑j
.text:0040B2D5                 mov     eax, [ebp+var_8]
.text:0040B2D8                 push    ebx
.text:0040B2D9                 push    eax
.text:0040B2DA                 mov     ecx, [eax]
.text:0040B2DC                 mov     esi, [ecx+108h]
.text:0040B2E2                 mov     ecx, esi
.text:0040B2E4                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B2EA                 call    esi
.text:0040B2EC                 mov     edi, eax
.text:0040B2EE                 test    edi, edi
.text:0040B2F0                 js      loc_40B5D3
.text:0040B2F6
.text:0040B2F6 loc_40B2F6:                             ; CODE XREF: SetTraceValues(IDataCollector *)+57↑j
.text:0040B2F6                 mov     eax, [ebp+var_8]
.text:0040B2F9                 lea     edx, [ebp+var_C]
.text:0040B2FC                 push    edx
.text:0040B2FD                 push    eax
.text:0040B2FE                 mov     ecx, [eax]
.text:0040B300                 mov     esi, [ecx+114h]
.text:0040B306                 mov     ecx, esi
.text:0040B308                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B30E                 call    esi
.text:0040B310                 mov     edi, eax
.text:0040B312                 test    edi, edi
.text:0040B314                 js      loc_40B5D3
.text:0040B31A                 cmp     dword_413630, 0
.text:0040B321                 jz      short loc_40B33C
.text:0040B323                 cmp     dword_413634, 0
.text:0040B32A                 jz      short loc_40B337
.text:0040B32C                 mov     edx, [ebp+var_C]
.text:0040B32F                 and     edx, 0FFFFFFFDh
.text:0040B332
.text:0040B332 loc_40B332:                             ; CODE XREF: SetTraceValues(IDataCollector *)+DD↓j
.text:0040B332                 mov     [ebp+var_C], edx
.text:0040B335                 jmp     short loc_40B33F
.text:0040B337 ; ---------------------------------------------------------------------------
.text:0040B337
.text:0040B337 loc_40B337:                             ; CODE XREF: SetTraceValues(IDataCollector *)+CD↑j
.text:0040B337                 push    2
.text:0040B339                 pop     edx
.text:0040B33A                 jmp     short loc_40B332
.text:0040B33C ; ---------------------------------------------------------------------------
.text:0040B33C
.text:0040B33C loc_40B33C:                             ; CODE XREF: SetTraceValues(IDataCollector *)+C4↑j
.text:0040B33C                 mov     edx, [ebp+var_C]
.text:0040B33F
.text:0040B33F loc_40B33F:                             ; CODE XREF: SetTraceValues(IDataCollector *)+D8↑j
.text:0040B33F                 xor     ebx, ebx
.text:0040B341                 inc     ebx
.text:0040B342                 cmp     dword_414430, 0
.text:0040B349                 jz      short loc_40B350
.text:0040B34B                 or      edx, ebx
.text:0040B34D                 mov     [ebp+var_C], edx
.text:0040B350
.text:0040B350 loc_40B350:                             ; CODE XREF: SetTraceValues(IDataCollector *)+EC↑j
.text:0040B350                 cmp     dword_413CB0, 0
.text:0040B357                 jz      loc_40B3F5
.text:0040B35D                 mov     esi, dword_413CC4
.text:0040B363                 test    esi, esi
.text:0040B365                 jz      loc_40B3F5
.text:0040B36B                 xor     edi, edi
.text:0040B36D                 cmp     [esi], di
.text:0040B370                 jz      short loc_40B38E
.text:0040B372
.text:0040B372 loc_40B372:                             ; CODE XREF: SetTraceValues(IDataCollector *)+129↓j
.text:0040B372                 movzx   eax, word ptr [esi]
.text:0040B375                 push    eax             ; C
.text:0040B376                 call    ds:towlower
.text:0040B37C                 mov     [esi], ax
.text:0040B37F                 lea     esi, [esi+2]
.text:0040B382                 pop     ecx
.text:0040B383                 cmp     [esi], di
.text:0040B386                 jnz     short loc_40B372
.text:0040B388                 mov     esi, dword_413CC4
.text:0040B38E
.text:0040B38E loc_40B38E:                             ; CODE XREF: SetTraceValues(IDataCollector *)+113↑j
.text:0040B38E                 mov     ebx, edi
.text:0040B390
.text:0040B390 loc_40B390:                             ; CODE XREF: SetTraceValues(IDataCollector *)+16F↓j
.text:0040B390                 push    off_413064[edi] ; SubStr
.text:0040B396                 push    esi             ; Str
.text:0040B397                 call    ds:wcsstr
.text:0040B39D                 pop     ecx
.text:0040B39E                 pop     ecx
.text:0040B39F                 test    eax, eax
.text:0040B3A1                 jz      short loc_40B3BB
.text:0040B3A3                 mov     eax, dword_413060[edi]
.text:0040B3A9                 test    eax, 400h
.text:0040B3AE                 jz      short loc_40B3B9
.text:0040B3B0                 mov     [ebp+var_C], 4
.text:0040B3B7                 jmp     short loc_40B3BB
.text:0040B3B9 ; ---------------------------------------------------------------------------
.text:0040B3B9
.text:0040B3B9 loc_40B3B9:                             ; CODE XREF: SetTraceValues(IDataCollector *)+151↑j
.text:0040B3B9                 or      ebx, eax
.text:0040B3BB
.text:0040B3BB loc_40B3BB:                             ; CODE XREF: SetTraceValues(IDataCollector *)+144↑j
.text:0040B3BB                                         ; SetTraceValues(IDataCollector *)+15A↑j
.text:0040B3BB                 add     edi, 8
.text:0040B3BE                 cmp     edi, 80h ; '€'
.text:0040B3C4                 jnb     short loc_40B3CE
.text:0040B3C6                 mov     esi, dword_413CC4
.text:0040B3CC                 jmp     short loc_40B390
.text:0040B3CE ; ---------------------------------------------------------------------------
.text:0040B3CE
.text:0040B3CE loc_40B3CE:                             ; CODE XREF: SetTraceValues(IDataCollector *)+167↑j
.text:0040B3CE                 mov     eax, [ebp+var_8]
.text:0040B3D1                 push    ebx
.text:0040B3D2                 push    eax
.text:0040B3D3                 mov     ecx, [eax]
.text:0040B3D5                 mov     esi, [ecx+0ACh]
.text:0040B3DB                 mov     ecx, esi
.text:0040B3DD                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B3E3                 call    esi
.text:0040B3E5                 mov     edi, eax
.text:0040B3E7                 push    1
.text:0040B3E9                 pop     ebx
.text:0040B3EA                 test    edi, edi
.text:0040B3EC                 js      loc_40B5D3
.text:0040B3F2                 mov     edx, [ebp+var_C]
.text:0040B3F5
.text:0040B3F5 loc_40B3F5:                             ; CODE XREF: SetTraceValues(IDataCollector *)+FA↑j
.text:0040B3F5                                         ; SetTraceValues(IDataCollector *)+108↑j
.text:0040B3F5                 mov     eax, [ebp+var_8]
.text:0040B3F8                 push    edx
.text:0040B3F9                 push    eax
.text:0040B3FA                 mov     ecx, [eax]
.text:0040B3FC                 mov     esi, [ecx+118h]
.text:0040B402                 mov     ecx, esi
.text:0040B404                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B40A                 call    esi
.text:0040B40C                 mov     edi, eax
.text:0040B40E                 test    edi, edi
.text:0040B410                 js      loc_40B5D3
.text:0040B416                 cmp     dword_414680, 0
.text:0040B41D                 jz      short loc_40B44C
.text:0040B41F                 mov     eax, [ebp+var_8]
.text:0040B422                 xor     edx, edx
.text:0040B424                 cmp     dword_414684, edx
.text:0040B42A                 setnz   dl
.text:0040B42D                 mov     ecx, [eax]
.text:0040B42F                 dec     edx
.text:0040B430                 push    edx
.text:0040B431                 push    eax
.text:0040B432                 mov     esi, [ecx+0F0h]
.text:0040B438                 mov     ecx, esi
.text:0040B43A                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B440                 call    esi
.text:0040B442                 mov     edi, eax
.text:0040B444                 test    edi, edi
.text:0040B446                 js      loc_40B5D3
.text:0040B44C
.text:0040B44C loc_40B44C:                             ; CODE XREF: SetTraceValues(IDataCollector *)+1C0↑j
.text:0040B44C                 cmp     dword_413940, 0
.text:0040B453                 jz      short loc_40B47B
.text:0040B455                 mov     eax, [ebp+var_8]
.text:0040B458                 push    dword_413954
.text:0040B45E                 push    eax
.text:0040B45F                 mov     ecx, [eax]
.text:0040B461                 mov     esi, [ecx+84h]
.text:0040B467                 mov     ecx, esi
.text:0040B469                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B46F                 call    esi
.text:0040B471                 mov     edi, eax
.text:0040B473                 test    edi, edi
.text:0040B475                 js      loc_40B5D3
.text:0040B47B
.text:0040B47B loc_40B47B:                             ; CODE XREF: SetTraceValues(IDataCollector *)+1F6↑j
.text:0040B47B                 cmp     dword_413380, 0
.text:0040B482                 jz      short loc_40B4C4
.text:0040B484                 movzx   eax, word_41339C
.text:0040B48B                 imul    ecx, eax, 3Ch ; '<'
.text:0040B48E                 movzx   eax, word_41339E
.text:0040B495                 add     ecx, eax
.text:0040B497                 movzx   eax, word_4133A0
.text:0040B49E                 imul    edx, ecx, 3Ch ; '<'
.text:0040B4A1                 add     edx, eax
.text:0040B4A3                 mov     eax, [ebp+var_8]
.text:0040B4A6                 push    edx
.text:0040B4A7                 push    eax
.text:0040B4A8                 mov     ecx, [eax]
.text:0040B4AA                 mov     esi, [ecx+0B4h]
.text:0040B4B0                 mov     ecx, esi
.text:0040B4B2                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B4B8                 call    esi
.text:0040B4BA                 mov     edi, eax
.text:0040B4BC                 test    edi, edi
.text:0040B4BE                 js      loc_40B5D3
.text:0040B4C4
.text:0040B4C4 loc_40B4C4:                             ; CODE XREF: SetTraceValues(IDataCollector *)+225↑j
.text:0040B4C4                 cmp     dword_414560, 0
.text:0040B4CB                 jz      loc_40B553
.text:0040B4D1                 mov     eax, String
.text:0040B4D6                 mov     [ebp+var_10], eax
.text:0040B4D9                 test    eax, eax
.text:0040B4DB                 jz      short loc_40B553
.text:0040B4DD                 push    eax             ; String
.text:0040B4DE                 call    ds:_wtoi
.text:0040B4E4                 pop     ecx
.text:0040B4E5                 mov     ecx, [ebp+var_8]
.text:0040B4E8                 push    eax
.text:0040B4E9                 push    ecx
.text:0040B4EA                 mov     edx, [ecx]
.text:0040B4EC                 mov     esi, [edx+0D8h]
.text:0040B4F2                 mov     ecx, esi
.text:0040B4F4                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B4FA                 call    esi
.text:0040B4FC                 mov     edi, eax
.text:0040B4FE                 test    edi, edi
.text:0040B500                 js      loc_40B5D3
.text:0040B506                 mov     edx, [ebp+var_10]
.text:0040B509                 xor     edi, edi
.text:0040B50B                 mov     ecx, edx
.text:0040B50D                 lea     esi, [ecx+2]
.text:0040B510
.text:0040B510 loc_40B510:                             ; CODE XREF: SetTraceValues(IDataCollector *)+2BC↓j
.text:0040B510                 mov     ax, [ecx]
.text:0040B513                 add     ecx, 2
.text:0040B516                 cmp     ax, di
.text:0040B519                 jnz     short loc_40B510
.text:0040B51B                 sub     ecx, esi
.text:0040B51D                 lea     eax, [edx+2]
.text:0040B520                 sar     ecx, 1
.text:0040B522                 lea     eax, [eax+ecx*2]
.text:0040B525                 cmp     [eax], di
.text:0040B528                 jz      short loc_40B553
.text:0040B52A                 push    eax             ; String
.text:0040B52B                 call    ds:_wtoi
.text:0040B531                 pop     ecx
.text:0040B532                 mov     ecx, [ebp+var_8]
.text:0040B535                 push    eax
.text:0040B536                 push    ecx
.text:0040B537                 mov     edx, [ecx]
.text:0040B539                 mov     esi, [edx+0D0h]
.text:0040B53F                 mov     ecx, esi
.text:0040B541                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B547                 call    esi
.text:0040B549                 mov     edi, eax
.text:0040B54B                 test    edi, edi
.text:0040B54D                 js      loc_40B5D3
.text:0040B553
.text:0040B553 loc_40B553:                             ; CODE XREF: SetTraceValues(IDataCollector *)+26E↑j
.text:0040B553                                         ; SetTraceValues(IDataCollector *)+27E↑j ...
.text:0040B553                 cmp     dword_414740, 0
.text:0040B55A                 jz      short loc_40B5C9
.text:0040B55C                 mov     eax, dword_414754
.text:0040B561                 test    eax, eax
.text:0040B563                 jz      short loc_40B5C9
.text:0040B565                 push    offset aPerf    ; "perf"
.text:0040B56A                 push    eax             ; String1
.text:0040B56B                 call    ds:__imp__wcsicmp
.text:0040B571                 pop     ecx
.text:0040B572                 pop     ecx
.text:0040B573                 test    eax, eax
.text:0040B575                 jz      short loc_40B5AC
.text:0040B577                 push    offset aSystem  ; "system"
.text:0040B57C                 push    dword_414754    ; String1
.text:0040B582                 call    ds:__imp__wcsicmp
.text:0040B588                 pop     ecx
.text:0040B589                 pop     ecx
.text:0040B58A                 test    eax, eax
.text:0040B58C                 jnz     short loc_40B592
.text:0040B58E                 push    2
.text:0040B590                 jmp     short loc_40B5AB
.text:0040B592 ; ---------------------------------------------------------------------------
.text:0040B592
.text:0040B592 loc_40B592:                             ; CODE XREF: SetTraceValues(IDataCollector *)+32F↑j
.text:0040B592                 push    offset aCycle   ; "cycle"
.text:0040B597                 push    dword_414754    ; String1
.text:0040B59D                 call    ds:__imp__wcsicmp
.text:0040B5A3                 pop     ecx
.text:0040B5A4                 pop     ecx
.text:0040B5A5                 test    eax, eax
.text:0040B5A7                 jnz     short loc_40B5AC
.text:0040B5A9                 push    3
.text:0040B5AB
.text:0040B5AB loc_40B5AB:                             ; CODE XREF: SetTraceValues(IDataCollector *)+333↑j
.text:0040B5AB                 pop     ebx
.text:0040B5AC
.text:0040B5AC loc_40B5AC:                             ; CODE XREF: SetTraceValues(IDataCollector *)+318↑j
.text:0040B5AC                                         ; SetTraceValues(IDataCollector *)+34A↑j
.text:0040B5AC                 mov     eax, [ebp+var_8]
.text:0040B5AF                 push    ebx
.text:0040B5B0                 push    eax
.text:0040B5B1                 mov     ecx, [eax]
.text:0040B5B3                 mov     esi, [ecx+9Ch]
.text:0040B5B9                 mov     ecx, esi
.text:0040B5BB                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B5C1                 call    esi
.text:0040B5C3                 mov     edi, eax
.text:0040B5C5                 test    edi, edi
.text:0040B5C7                 js      short loc_40B5D3
.text:0040B5C9
.text:0040B5C9 loc_40B5C9:                             ; CODE XREF: SetTraceValues(IDataCollector *)+2FD↑j
.text:0040B5C9                                         ; SetTraceValues(IDataCollector *)+306↑j
.text:0040B5C9                 mov     ecx, [ebp+var_8]
.text:0040B5CC                 call    sub_40AAF8
.text:0040B5D1                 mov     edi, eax
.text:0040B5D3
.text:0040B5D3 loc_40B5D3:                             ; CODE XREF: SetTraceValues(IDataCollector *)+93↑j
.text:0040B5D3                                         ; SetTraceValues(IDataCollector *)+B7↑j ...
.text:0040B5D3                 mov     eax, [ebp+bstrString]
.text:0040B5D6                 test    eax, eax
.text:0040B5D8                 jz      short loc_40B5E1
.text:0040B5DA                 push    eax             ; bstrString
.text:0040B5DB                 call    ds:SysFreeString
.text:0040B5E1
.text:0040B5E1 loc_40B5E1:                             ; CODE XREF: SetTraceValues(IDataCollector *)+39↑j
.text:0040B5E1                                         ; SetTraceValues(IDataCollector *)+4A↑j ...
.text:0040B5E1                 mov     ecx, [ebp+var_8]
.text:0040B5E4                 test    ecx, ecx
.text:0040B5E6                 jz      short loc_40B5F8
.text:0040B5E8                 mov     eax, [ecx]
.text:0040B5EA                 push    ecx
.text:0040B5EB                 mov     esi, [eax+8]
.text:0040B5EE                 mov     ecx, esi
.text:0040B5F0                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B5F6                 call    esi
.text:0040B5F8
.text:0040B5F8 loc_40B5F8:                             ; CODE XREF: SetTraceValues(IDataCollector *)+389↑j
.text:0040B5F8                 mov     ecx, [ebp+var_4]
.text:0040B5FB                 mov     eax, edi
.text:0040B5FD                 pop     edi
.text:0040B5FE                 pop     esi
.text:0040B5FF                 xor     ecx, ebp        ; StackCookie
.text:0040B601                 pop     ebx
.text:0040B602                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040B607                 mov     esp, ebp
.text:0040B609                 pop     ebp
.text:0040B60A                 retn
.text:0040B60A ?SetTraceValues@@YGJPAUIDataCollector@@@Z endp
.text:0040B60A
.text:0040B60B
.text:0040B60B ; =============== S U B R O U T I N E =======================================
.text:0040B60B
.text:0040B60B ; Attributes: bp-based frame
.text:0040B60B
.text:0040B60B sub_40B60B      proc near               ; CODE XREF: sub_40BF14+276↓p
.text:0040B60B
.text:0040B60B psa             = dword ptr -0Ch
.text:0040B60B var_8           = dword ptr -8
.text:0040B60B var_4           = dword ptr -4
.text:0040B60B
.text:0040B60B                 mov     edi, edi
.text:0040B60D                 push    ebp
.text:0040B60E                 mov     ebp, esp
.text:0040B610                 sub     esp, 0Ch
.text:0040B613                 mov     eax, ___security_cookie
.text:0040B618                 xor     eax, ebp
.text:0040B61A                 mov     [ebp+var_4], eax
.text:0040B61D                 and     [ebp+var_8], 0
.text:0040B621                 lea     eax, [ebp+var_8]
.text:0040B624                 and     [ebp+psa], 0
.text:0040B628                 push    ebx
.text:0040B629                 push    esi
.text:0040B62A                 mov     esi, [ecx]
.text:0040B62C                 push    edi
.text:0040B62D                 push    eax
.text:0040B62E                 push    offset dword_403578
.text:0040B633                 push    ecx
.text:0040B634                 mov     ecx, [esi]
.text:0040B636                 xor     edi, edi
.text:0040B638                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B63E                 call    dword ptr [esi]
.text:0040B640                 mov     ebx, eax
.text:0040B642                 test    ebx, ebx
.text:0040B644                 js      loc_40B81B
.text:0040B64A                 cmp     dword_413B80, edi
.text:0040B650                 jz      short loc_40B692
.text:0040B652                 movzx   eax, word_413B9C
.text:0040B659                 imul    ecx, eax, 3Ch ; '<'
.text:0040B65C                 movzx   eax, word_413B9E
.text:0040B663                 add     ecx, eax
.text:0040B665                 movzx   eax, word_413BA0
.text:0040B66C                 imul    edx, ecx, 3Ch ; '<'
.text:0040B66F                 add     edx, eax
.text:0040B671                 mov     eax, [ebp+var_8]
.text:0040B674                 push    edx
.text:0040B675                 push    eax
.text:0040B676                 mov     ecx, [eax]
.text:0040B678                 mov     esi, [ecx+94h]
.text:0040B67E                 mov     ecx, esi
.text:0040B680                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B686                 call    esi
.text:0040B688                 mov     ebx, eax
.text:0040B68A                 test    ebx, ebx
.text:0040B68C                 js      loc_40B81B
.text:0040B692
.text:0040B692 loc_40B692:                             ; CODE XREF: sub_40B60B+45↑j
.text:0040B692                 cmp     dword_4148E0, edi
.text:0040B698                 jz      short loc_40B6D5
.text:0040B69A                 mov     ecx, dword_4148F4
.text:0040B6A0                 lea     edx, [ebp+psa]
.text:0040B6A3                 call    sub_409D26
.text:0040B6A8                 mov     ebx, eax
.text:0040B6AA                 test    ebx, ebx
.text:0040B6AC                 js      loc_40B80D
.text:0040B6B2                 mov     eax, [ebp+var_8]
.text:0040B6B5                 push    [ebp+psa]
.text:0040B6B8                 push    eax
.text:0040B6B9                 mov     ecx, [eax]
.text:0040B6BB                 mov     esi, [ecx+84h]
.text:0040B6C1                 mov     ecx, esi
.text:0040B6C3                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B6C9                 call    esi
.text:0040B6CB                 mov     ebx, eax
.text:0040B6CD                 test    ebx, ebx
.text:0040B6CF                 js      loc_40B80D
.text:0040B6D5
.text:0040B6D5 loc_40B6D5:                             ; CODE XREF: sub_40B60B+8D↑j
.text:0040B6D5                 cmp     dword_414250, edi
.text:0040B6DB                 jz      short loc_40B70B
.text:0040B6DD                 mov     eax, [ebp+var_8]
.text:0040B6E0                 mov     ecx, [eax]
.text:0040B6E2                 mov     esi, [ecx+8Ch]
.text:0040B6E8                 mov     ecx, esi
.text:0040B6EA                 cmp     dword_414254, edi
.text:0040B6F0                 jz      short loc_40B6F6
.text:0040B6F2                 push    0
.text:0040B6F4                 jmp     short loc_40B6F8
.text:0040B6F6 ; ---------------------------------------------------------------------------
.text:0040B6F6
.text:0040B6F6 loc_40B6F6:                             ; CODE XREF: sub_40B60B+E5↑j
.text:0040B6F6                 push    0FFFFFFFFh
.text:0040B6F8
.text:0040B6F8 loc_40B6F8:                             ; CODE XREF: sub_40B60B+E9↑j
.text:0040B6F8                 push    eax
.text:0040B6F9                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B6FF                 call    esi
.text:0040B701                 mov     ebx, eax
.text:0040B703                 test    ebx, ebx
.text:0040B705                 js      loc_40B80D
.text:0040B70B
.text:0040B70B loc_40B70B:                             ; CODE XREF: sub_40B60B+D0↑j
.text:0040B70B                 cmp     dword_4138E0, edi
.text:0040B711                 jz      short loc_40B75E
.text:0040B713                 xor     edi, edi
.text:0040B715                 cmp     dword_4138E4, edi
.text:0040B71B                 jnz     short loc_40B73D
.text:0040B71D                 mov     eax, dword_4138F4
.text:0040B722                 test    eax, eax
.text:0040B724                 jz      short loc_40B73D
.text:0040B726                 push    eax             ; psz
.text:0040B727                 call    ds:SysAllocString
.text:0040B72D                 mov     edi, eax
.text:0040B72F                 test    edi, edi
.text:0040B731                 jnz     short loc_40B73D
.text:0040B733
.text:0040B733 loc_40B733:                             ; CODE XREF: sub_40B60B+186↓j
.text:0040B733                                         ; sub_40B60B+1D8↓j
.text:0040B733                 mov     ebx, 8007000Eh
.text:0040B738                 jmp     loc_40B80D
.text:0040B73D ; ---------------------------------------------------------------------------
.text:0040B73D
.text:0040B73D loc_40B73D:                             ; CODE XREF: sub_40B60B+110↑j
.text:0040B73D                                         ; sub_40B60B+119↑j ...
.text:0040B73D                 mov     eax, [ebp+var_8]
.text:0040B740                 push    edi
.text:0040B741                 push    eax
.text:0040B742                 mov     ecx, [eax]
.text:0040B744                 mov     esi, [ecx+0BCh]
.text:0040B74A                 mov     ecx, esi
.text:0040B74C                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B752                 call    esi
.text:0040B754                 mov     ebx, eax
.text:0040B756                 test    ebx, ebx
.text:0040B758                 js      loc_40B802
.text:0040B75E
.text:0040B75E loc_40B75E:                             ; CODE XREF: sub_40B60B+106↑j
.text:0040B75E                 cmp     dword_4135D0, 0
.text:0040B765                 jz      short loc_40B7B0
.text:0040B767                 test    edi, edi
.text:0040B769                 jz      short loc_40B774
.text:0040B76B                 push    edi             ; bstrString
.text:0040B76C                 call    ds:SysFreeString
.text:0040B772                 xor     edi, edi
.text:0040B774
.text:0040B774 loc_40B774:                             ; CODE XREF: sub_40B60B+15E↑j
.text:0040B774                 cmp     dword_4135D4, 0
.text:0040B77B                 jnz     short loc_40B793
.text:0040B77D                 mov     eax, dword_4135E4
.text:0040B782                 test    eax, eax
.text:0040B784                 jz      short loc_40B793
.text:0040B786                 push    eax             ; psz
.text:0040B787                 call    ds:SysAllocString
.text:0040B78D                 mov     edi, eax
.text:0040B78F                 test    edi, edi
.text:0040B791                 jz      short loc_40B733
.text:0040B793
.text:0040B793 loc_40B793:                             ; CODE XREF: sub_40B60B+170↑j
.text:0040B793                                         ; sub_40B60B+179↑j
.text:0040B793                 mov     eax, [ebp+var_8]
.text:0040B796                 push    edi
.text:0040B797                 push    eax
.text:0040B798                 mov     ecx, [eax]
.text:0040B79A                 mov     esi, [ecx+9Ch]
.text:0040B7A0                 mov     ecx, esi
.text:0040B7A2                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B7A8                 call    esi
.text:0040B7AA                 mov     ebx, eax
.text:0040B7AC                 test    ebx, ebx
.text:0040B7AE                 js      short loc_40B802
.text:0040B7B0
.text:0040B7B0 loc_40B7B0:                             ; CODE XREF: sub_40B60B+15A↑j
.text:0040B7B0                 cmp     dword_414A00, 0
.text:0040B7B7                 jz      short loc_40B802
.text:0040B7B9                 test    edi, edi
.text:0040B7BB                 jz      short loc_40B7C6
.text:0040B7BD                 push    edi             ; bstrString
.text:0040B7BE                 call    ds:SysFreeString
.text:0040B7C4                 xor     edi, edi
.text:0040B7C6
.text:0040B7C6 loc_40B7C6:                             ; CODE XREF: sub_40B60B+1B0↑j
.text:0040B7C6                 cmp     dword_414A04, 0
.text:0040B7CD                 jnz     short loc_40B7E9
.text:0040B7CF                 mov     eax, dword_414A14
.text:0040B7D4                 test    eax, eax
.text:0040B7D6                 jz      short loc_40B7E9
.text:0040B7D8                 push    eax             ; psz
.text:0040B7D9                 call    ds:SysAllocString
.text:0040B7DF                 mov     edi, eax
.text:0040B7E1                 test    edi, edi
.text:0040B7E3                 jz      loc_40B733
.text:0040B7E9
.text:0040B7E9 loc_40B7E9:                             ; CODE XREF: sub_40B60B+1C2↑j
.text:0040B7E9                                         ; sub_40B60B+1CB↑j
.text:0040B7E9                 mov     eax, [ebp+var_8]
.text:0040B7EC                 push    edi
.text:0040B7ED                 push    eax
.text:0040B7EE                 mov     ecx, [eax]
.text:0040B7F0                 mov     esi, [ecx+0ACh]
.text:0040B7F6                 mov     ecx, esi
.text:0040B7F8                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B7FE                 call    esi
.text:0040B800                 mov     ebx, eax
.text:0040B802
.text:0040B802 loc_40B802:                             ; CODE XREF: sub_40B60B+14D↑j
.text:0040B802                                         ; sub_40B60B+1A3↑j ...
.text:0040B802                 test    edi, edi
.text:0040B804                 jz      short loc_40B80D
.text:0040B806                 push    edi             ; bstrString
.text:0040B807                 call    ds:SysFreeString
.text:0040B80D
.text:0040B80D loc_40B80D:                             ; CODE XREF: sub_40B60B+A1↑j
.text:0040B80D                                         ; sub_40B60B+C4↑j ...
.text:0040B80D                 mov     eax, [ebp+psa]
.text:0040B810                 test    eax, eax
.text:0040B812                 jz      short loc_40B81B
.text:0040B814                 push    eax             ; psa
.text:0040B815                 call    ds:SafeArrayDestroy
.text:0040B81B
.text:0040B81B loc_40B81B:                             ; CODE XREF: sub_40B60B+39↑j
.text:0040B81B                                         ; sub_40B60B+81↑j ...
.text:0040B81B                 mov     ecx, [ebp+var_8]
.text:0040B81E                 test    ecx, ecx
.text:0040B820                 jz      short loc_40B832
.text:0040B822                 mov     eax, [ecx]
.text:0040B824                 push    ecx
.text:0040B825                 mov     esi, [eax+8]
.text:0040B828                 mov     ecx, esi
.text:0040B82A                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B830                 call    esi
.text:0040B832
.text:0040B832 loc_40B832:                             ; CODE XREF: sub_40B60B+215↑j
.text:0040B832                 mov     ecx, [ebp+var_4]
.text:0040B835                 mov     eax, ebx
.text:0040B837                 pop     edi
.text:0040B838                 pop     esi
.text:0040B839                 xor     ecx, ebp        ; StackCookie
.text:0040B83B                 pop     ebx
.text:0040B83C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040B841                 mov     esp, ebp
.text:0040B843                 pop     ebp
.text:0040B844                 retn
.text:0040B844 sub_40B60B      endp
.text:0040B844
.text:0040B845
.text:0040B845 ; =============== S U B R O U T I N E =======================================
.text:0040B845
.text:0040B845 ; Attributes: bp-based frame
.text:0040B845
.text:0040B845 sub_40B845      proc near               ; CODE XREF: sub_40BF14+27F↓p
.text:0040B845
.text:0040B845 var_C           = dword ptr -0Ch
.text:0040B845 psa             = dword ptr -8
.text:0040B845 var_4           = dword ptr -4
.text:0040B845
.text:0040B845                 mov     edi, edi
.text:0040B847                 push    ebp
.text:0040B848                 mov     ebp, esp
.text:0040B84A                 sub     esp, 0Ch
.text:0040B84D                 mov     eax, ___security_cookie
.text:0040B852                 xor     eax, ebp
.text:0040B854                 mov     [ebp+var_4], eax
.text:0040B857                 and     [ebp+var_C], 0
.text:0040B85B                 lea     eax, [ebp+var_C]
.text:0040B85E                 push    ebx
.text:0040B85F                 push    esi
.text:0040B860                 mov     esi, [ecx]
.text:0040B862                 xor     ebx, ebx
.text:0040B864                 push    edi
.text:0040B865                 push    eax
.text:0040B866                 push    offset dword_403518
.text:0040B86B                 push    ecx
.text:0040B86C                 mov     ecx, [esi]
.text:0040B86E                 mov     [ebp+psa], ebx
.text:0040B871                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B877                 call    dword ptr [esi]
.text:0040B879                 mov     edi, eax
.text:0040B87B                 test    edi, edi
.text:0040B87D                 js      loc_40B9A0
.text:0040B883                 cmp     dword_4139A0, ebx
.text:0040B889                 jz      short loc_40B8B8
.text:0040B88B                 mov     eax, [ebp+var_C]
.text:0040B88E                 mov     ecx, [eax]
.text:0040B890                 mov     esi, [ecx+0ACh]
.text:0040B896                 mov     ecx, esi
.text:0040B898                 cmp     dword_4139A4, ebx
.text:0040B89E                 jz      short loc_40B8A3
.text:0040B8A0                 push    ebx
.text:0040B8A1                 jmp     short loc_40B8A5
.text:0040B8A3 ; ---------------------------------------------------------------------------
.text:0040B8A3
.text:0040B8A3 loc_40B8A3:                             ; CODE XREF: sub_40B845+59↑j
.text:0040B8A3                 push    0FFFFFFFFh
.text:0040B8A5
.text:0040B8A5 loc_40B8A5:                             ; CODE XREF: sub_40B845+5C↑j
.text:0040B8A5                 push    eax
.text:0040B8A6                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B8AC                 call    esi
.text:0040B8AE                 mov     edi, eax
.text:0040B8B0                 test    edi, edi
.text:0040B8B2                 js      loc_40B9A0
.text:0040B8B8
.text:0040B8B8 loc_40B8B8:                             ; CODE XREF: sub_40B845+44↑j
.text:0040B8B8                 cmp     dword_414B20, ebx
.text:0040B8BE                 jz      short loc_40B8FC
.text:0040B8C0                 mov     ecx, dword_414B34
.text:0040B8C6                 lea     edx, [ebp+psa]
.text:0040B8C9                 call    sub_409D26
.text:0040B8CE                 mov     edi, eax
.text:0040B8D0                 test    edi, edi
.text:0040B8D2                 js      loc_40B992
.text:0040B8D8                 mov     eax, [ebp+var_C]
.text:0040B8DB                 mov     ebx, [ebp+psa]
.text:0040B8DE                 push    ebx
.text:0040B8DF                 push    eax
.text:0040B8E0                 mov     ecx, [eax]
.text:0040B8E2                 mov     esi, [ecx+9Ch]
.text:0040B8E8                 mov     ecx, esi
.text:0040B8EA                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B8F0                 call    esi
.text:0040B8F2                 mov     edi, eax
.text:0040B8F4                 test    edi, edi
.text:0040B8F6                 js      loc_40B995
.text:0040B8FC
.text:0040B8FC loc_40B8FC:                             ; CODE XREF: sub_40B845+79↑j
.text:0040B8FC                 cmp     dword_4136F0, 0
.text:0040B903                 jz      short loc_40B948
.text:0040B905                 test    ebx, ebx
.text:0040B907                 jz      short loc_40B914
.text:0040B909                 push    ebx             ; psa
.text:0040B90A                 call    ds:SafeArrayDestroy
.text:0040B910                 and     [ebp+psa], 0
.text:0040B914
.text:0040B914 loc_40B914:                             ; CODE XREF: sub_40B845+C2↑j
.text:0040B914                 mov     ecx, dword_413704
.text:0040B91A                 lea     edx, [ebp+psa]
.text:0040B91D                 call    sub_409D26
.text:0040B922                 mov     edi, eax
.text:0040B924                 test    edi, edi
.text:0040B926                 js      short loc_40B992
.text:0040B928                 mov     eax, [ebp+var_C]
.text:0040B92B                 mov     ebx, [ebp+psa]
.text:0040B92E                 push    ebx
.text:0040B92F                 push    eax
.text:0040B930                 mov     ecx, [eax]
.text:0040B932                 mov     esi, [ecx+0B4h]
.text:0040B938                 mov     ecx, esi
.text:0040B93A                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B940                 call    esi
.text:0040B942                 mov     edi, eax
.text:0040B944                 test    edi, edi
.text:0040B946                 js      short loc_40B995
.text:0040B948
.text:0040B948 loc_40B948:                             ; CODE XREF: sub_40B845+BE↑j
.text:0040B948                 cmp     dword_413690, 0
.text:0040B94F                 jz      short loc_40B995
.text:0040B951                 test    ebx, ebx
.text:0040B953                 jz      short loc_40B960
.text:0040B955                 push    ebx             ; psa
.text:0040B956                 call    ds:SafeArrayDestroy
.text:0040B95C                 and     [ebp+psa], 0
.text:0040B960
.text:0040B960 loc_40B960:                             ; CODE XREF: sub_40B845+10E↑j
.text:0040B960                 mov     ecx, dword_4136A4
.text:0040B966                 lea     edx, [ebp+psa]
.text:0040B969                 call    sub_409D26
.text:0040B96E                 mov     edi, eax
.text:0040B970                 test    edi, edi
.text:0040B972                 js      short loc_40B992
.text:0040B974                 mov     eax, [ebp+var_C]
.text:0040B977                 mov     ebx, [ebp+psa]
.text:0040B97A                 push    ebx
.text:0040B97B                 push    eax
.text:0040B97C                 mov     ecx, [eax]
.text:0040B97E                 mov     esi, [ecx+0A4h]
.text:0040B984                 mov     ecx, esi
.text:0040B986                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B98C                 call    esi
.text:0040B98E                 mov     edi, eax
.text:0040B990                 jmp     short loc_40B995
.text:0040B992 ; ---------------------------------------------------------------------------
.text:0040B992
.text:0040B992 loc_40B992:                             ; CODE XREF: sub_40B845+8D↑j
.text:0040B992                                         ; sub_40B845+E1↑j ...
.text:0040B992                 mov     ebx, [ebp+psa]
.text:0040B995
.text:0040B995 loc_40B995:                             ; CODE XREF: sub_40B845+B1↑j
.text:0040B995                                         ; sub_40B845+101↑j ...
.text:0040B995                 test    ebx, ebx
.text:0040B997                 jz      short loc_40B9A0
.text:0040B999                 push    ebx             ; psa
.text:0040B99A                 call    ds:SafeArrayDestroy
.text:0040B9A0
.text:0040B9A0 loc_40B9A0:                             ; CODE XREF: sub_40B845+38↑j
.text:0040B9A0                                         ; sub_40B845+6D↑j ...
.text:0040B9A0                 mov     ecx, [ebp+var_C]
.text:0040B9A3                 test    ecx, ecx
.text:0040B9A5                 jz      short loc_40B9B7
.text:0040B9A7                 mov     eax, [ecx]
.text:0040B9A9                 push    ecx
.text:0040B9AA                 mov     esi, [eax+8]
.text:0040B9AD                 mov     ecx, esi
.text:0040B9AF                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040B9B5                 call    esi
.text:0040B9B7
.text:0040B9B7 loc_40B9B7:                             ; CODE XREF: sub_40B845+160↑j
.text:0040B9B7                 mov     ecx, [ebp+var_4]
.text:0040B9BA                 mov     eax, edi
.text:0040B9BC                 pop     edi
.text:0040B9BD                 pop     esi
.text:0040B9BE                 xor     ecx, ebp        ; StackCookie
.text:0040B9C0                 pop     ebx
.text:0040B9C1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040B9C6                 mov     esp, ebp
.text:0040B9C8                 pop     ebp
.text:0040B9C9                 retn
.text:0040B9C9 sub_40B845      endp
.text:0040B9C9
.text:0040B9CA
.text:0040B9CA ; =============== S U B R O U T I N E =======================================
.text:0040B9CA
.text:0040B9CA ; Attributes: bp-based frame info_from_lumina
.text:0040B9CA
.text:0040B9CA ; int __stdcall SetApiTraceValues(struct IDataCollector *, int *)
.text:0040B9CA ?SetApiTraceValues@@YGJPAUIDataCollector@@PAH@Z proc near
.text:0040B9CA                                         ; CODE XREF: sub_40BF14+26D↓p
.text:0040B9CA
.text:0040B9CA var_1C          = dword ptr -1Ch
.text:0040B9CA var_18          = dword ptr -18h
.text:0040B9CA var_14          = dword ptr -14h
.text:0040B9CA bstrString      = dword ptr -10h
.text:0040B9CA var_C           = dword ptr -0Ch
.text:0040B9CA var_8           = dword ptr -8
.text:0040B9CA var_4           = dword ptr -4
.text:0040B9CA
.text:0040B9CA                 mov     edi, edi
.text:0040B9CC                 push    ebp
.text:0040B9CD                 mov     ebp, esp
.text:0040B9CF                 sub     esp, 1Ch
.text:0040B9D2                 mov     eax, ___security_cookie
.text:0040B9D7                 xor     eax, ebp
.text:0040B9D9                 mov     [ebp+var_4], eax
.text:0040B9DC                 push    ebx
.text:0040B9DD                 mov     eax, ecx
.text:0040B9DF                 mov     [ebp+var_1C], edx
.text:0040B9E2                 xor     ecx, ecx
.text:0040B9E4                 mov     [ebp+var_18], eax
.text:0040B9E7                 push    esi
.text:0040B9E8                 mov     ebx, ecx
.text:0040B9EA                 mov     [ebp+var_14], ecx
.text:0040B9ED                 mov     esi, [eax]
.text:0040B9EF                 push    edi
.text:0040B9F0                 mov     [ebp+bstrString], ecx
.text:0040B9F3                 mov     [ebp+var_8], ecx
.text:0040B9F6                 lea     ecx, [ebp+var_8]
.text:0040B9F9                 push    ecx
.text:0040B9FA                 mov     ecx, [esi]
.text:0040B9FC                 push    offset dword_4035B8
.text:0040BA01                 push    eax
.text:0040BA02                 mov     [ebp+var_C], ebx
.text:0040BA05                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040BA0B                 call    dword ptr [esi]
.text:0040BA0D                 mov     edi, eax
.text:0040BA0F                 test    edi, edi
.text:0040BA11                 js      loc_40BC3A
.text:0040BA17                 cmp     dword_413FB0, ebx
.text:0040BA1D                 jz      loc_40BC8F
.text:0040BA23                 push    dword_413FC4
.text:0040BA29                 call    ds:api_ms_win_shcore_path_l1_1_0_170
.text:0040BA2F                 test    eax, eax
.text:0040BA31                 jz      short loc_40BA3D
.text:0040BA33                 mov     edi, 80300106h
.text:0040BA38                 jmp     loc_40BC3A
.text:0040BA3D ; ---------------------------------------------------------------------------
.text:0040BA3D
.text:0040BA3D loc_40BA3D:                             ; CODE XREF: SetApiTraceValues(IDataCollector *,int *)+67↑j
.text:0040BA3D                 push    dword_413FC4    ; psz
.text:0040BA43                 call    ds:SysAllocString
.text:0040BA49                 mov     edx, eax
.text:0040BA4B                 mov     [ebp+var_14], edx
.text:0040BA4E                 test    edx, edx
.text:0040BA50                 jnz     short loc_40BA5C
.text:0040BA52
.text:0040BA52 loc_40BA52:                             ; CODE XREF: SetApiTraceValues(IDataCollector *,int *)+247↓j
.text:0040BA52                 mov     edi, 8007000Eh
.text:0040BA57                 jmp     loc_40BC3A
.text:0040BA5C ; ---------------------------------------------------------------------------
.text:0040BA5C
.text:0040BA5C loc_40BA5C:                             ; CODE XREF: SetApiTraceValues(IDataCollector *,int *)+86↑j
.text:0040BA5C                 mov     eax, [ebp+var_8]
.text:0040BA5F                 push    edx
.text:0040BA60                 push    eax
.text:0040BA61                 mov     ecx, [eax]
.text:0040BA63                 mov     esi, [ecx+94h]
.text:0040BA69                 mov     ecx, esi
.text:0040BA6B                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040BA71                 call    esi
.text:0040BA73                 mov     edi, eax
.text:0040BA75                 test    edi, edi
.text:0040BA77                 js      loc_40BC3A
.text:0040BA7D
.text:0040BA7D loc_40BA7D:                             ; CODE XREF: SetApiTraceValues(IDataCollector *,int *)+2CB↓j
.text:0040BA7D                 cmp     dword_4141F0, ebx
.text:0040BA83                 jz      short loc_40BAB2
.text:0040BA85                 mov     eax, [ebp+var_8]
.text:0040BA88                 xor     edx, edx
.text:0040BA8A                 cmp     dword_4141F4, edx
.text:0040BA90                 setnz   dl
.text:0040BA93                 mov     ecx, [eax]
.text:0040BA95                 dec     edx
.text:0040BA96                 push    edx
.text:0040BA97                 push    eax
.text:0040BA98                 mov     esi, [ecx+84h]
.text:0040BA9E                 mov     ecx, esi
.text:0040BAA0                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040BAA6                 call    esi
.text:0040BAA8                 mov     edi, eax
.text:0040BAAA                 test    edi, edi
.text:0040BAAC                 js      loc_40BC3A
.text:0040BAB2
.text:0040BAB2 loc_40BAB2:                             ; CODE XREF: SetApiTraceValues(IDataCollector *,int *)+B9↑j
.text:0040BAB2                 cmp     dword_414310, ebx
.text:0040BAB8                 jz      short loc_40BAE7
.text:0040BABA                 mov     eax, [ebp+var_8]
.text:0040BABD                 xor     edx, edx
.text:0040BABF                 cmp     dword_414314, edx
.text:0040BAC5                 setnz   dl
.text:0040BAC8                 mov     ecx, [eax]
.text:0040BACA                 dec     edx
.text:0040BACB                 push    edx
.text:0040BACC                 push    eax
.text:0040BACD                 mov     esi, [ecx+8Ch]
.text:0040BAD3                 mov     ecx, esi
.text:0040BAD5                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040BADB                 call    esi
.text:0040BADD                 mov     edi, eax
.text:0040BADF                 test    edi, edi
.text:0040BAE1                 js      loc_40BC3A
.text:0040BAE7
.text:0040BAE7 loc_40BAE7:                             ; CODE XREF: SetApiTraceValues(IDataCollector *,int *)+EE↑j
.text:0040BAE7                 cmp     dword_413D70, ebx
.text:0040BAED                 jz      short loc_40BB2F
.text:0040BAEF                 mov     ecx, dword_413D84
.text:0040BAF5                 test    ecx, ecx
.text:0040BAF7                 jz      short loc_40BB2F
.text:0040BAF9                 lea     edx, [ebp+var_C]
.text:0040BAFC                 call    sub_409D26
.text:0040BB01                 mov     edi, eax
.text:0040BB03                 test    edi, edi
.text:0040BB05                 js      loc_40BCA2
.text:0040BB0B                 mov     eax, [ebp+var_8]
.text:0040BB0E                 mov     ebx, [ebp+var_C]
.text:0040BB11                 push    ebx
.text:0040BB12                 push    eax
.text:0040BB13                 mov     ecx, [eax]
.text:0040BB15                 mov     esi, [ecx+0A4h]
.text:0040BB1B                 mov     ecx, esi
.text:0040BB1D                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040BB23                 call    esi
.text:0040BB25                 mov     edi, eax
.text:0040BB27                 test    edi, edi
.text:0040BB29                 js      loc_40BC3A
.text:0040BB2F
.text:0040BB2F loc_40BB2F:                             ; CODE XREF: SetApiTraceValues(IDataCollector *,int *)+123↑j
.text:0040BB2F                                         ; SetApiTraceValues(IDataCollector *,int *)+12D↑j
.text:0040BB2F                 cmp     dword_413E30, 0
.text:0040BB36                 jz      short loc_40BB8D
.text:0040BB38                 mov     ecx, dword_413E44
.text:0040BB3E                 test    ecx, ecx
.text:0040BB40                 jz      short loc_40BB8D
.text:0040BB42                 test    ebx, ebx
.text:0040BB44                 jz      short loc_40BB57
.text:0040BB46                 push    ebx             ; psa
.text:0040BB47                 call    ds:SafeArrayDestroy
.text:0040BB4D                 and     [ebp+var_C], 0
.text:0040BB51                 mov     ecx, dword_413E44
.text:0040BB57
.text:0040BB57 loc_40BB57:                             ; CODE XREF: SetApiTraceValues(IDataCollector *,int *)+17A↑j
.text:0040BB57                 lea     edx, [ebp+var_C]
.text:0040BB5A                 call    sub_409D26
.text:0040BB5F                 mov     edi, eax
.text:0040BB61                 test    edi, edi
.text:0040BB63                 js      loc_40BCA2
.text:0040BB69                 mov     eax, [ebp+var_8]
.text:0040BB6C                 mov     ebx, [ebp+var_C]
.text:0040BB6F                 push    ebx
.text:0040BB70                 push    eax
.text:0040BB71                 mov     ecx, [eax]
.text:0040BB73                 mov     esi, [ecx+0ACh]
.text:0040BB79                 mov     ecx, esi
.text:0040BB7B                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040BB81                 call    esi
.text:0040BB83                 mov     edi, eax
.text:0040BB85                 test    edi, edi
.text:0040BB87                 js      loc_40BC3A
.text:0040BB8D
.text:0040BB8D loc_40BB8D:                             ; CODE XREF: SetApiTraceValues(IDataCollector *,int *)+16C↑j
.text:0040BB8D                                         ; SetApiTraceValues(IDataCollector *,int *)+176↑j
.text:0040BB8D                 cmp     dword_414500, 0
.text:0040BB94                 jz      short loc_40BBE7
.text:0040BB96                 mov     ecx, dword_414514
.text:0040BB9C                 test    ecx, ecx
.text:0040BB9E                 jz      short loc_40BBE7
.text:0040BBA0                 test    ebx, ebx
.text:0040BBA2                 jz      short loc_40BBB5
.text:0040BBA4                 push    ebx             ; psa
.text:0040BBA5                 call    ds:SafeArrayDestroy
.text:0040BBAB                 and     [ebp+var_C], 0
.text:0040BBAF                 mov     ecx, dword_414514
.text:0040BBB5
.text:0040BBB5 loc_40BBB5:                             ; CODE XREF: SetApiTraceValues(IDataCollector *,int *)+1D8↑j
.text:0040BBB5                 lea     edx, [ebp+var_C]
.text:0040BBB8                 call    sub_409D26
.text:0040BBBD                 mov     edi, eax
.text:0040BBBF                 test    edi, edi
.text:0040BBC1                 js      loc_40BCA2
.text:0040BBC7                 mov     eax, [ebp+var_8]
.text:0040BBCA                 mov     ebx, [ebp+var_C]
.text:0040BBCD                 push    ebx
.text:0040BBCE                 push    eax
.text:0040BBCF                 mov     ecx, [eax]
.text:0040BBD1                 mov     esi, [ecx+0B4h]
.text:0040BBD7                 mov     ecx, esi
.text:0040BBD9                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040BBDF                 call    esi
.text:0040BBE1                 mov     edi, eax
.text:0040BBE3                 test    edi, edi
.text:0040BBE5                 js      short loc_40BC3A
.text:0040BBE7
.text:0040BBE7 loc_40BBE7:                             ; CODE XREF: SetApiTraceValues(IDataCollector *,int *)+1CA↑j
.text:0040BBE7                                         ; SetApiTraceValues(IDataCollector *,int *)+1D4↑j
.text:0040BBE7                 mov     ecx, [ebp+var_18]
.text:0040BBEA                 call    sub_40B1DF
.text:0040BBEF                 mov     edi, eax
.text:0040BBF1                 test    edi, edi
.text:0040BBF3                 js      short loc_40BC3A
.text:0040BBF5                 cmp     dword_414430, 0
.text:0040BBFC                 jz      short loc_40BC34
.text:0040BBFE                 push    lpFileName      ; psz
.text:0040BC04                 call    ds:SysAllocString
.text:0040BC0A                 mov     edx, eax
.text:0040BC0C                 mov     [ebp+bstrString], edx
.text:0040BC0F                 test    edx, edx
.text:0040BC11                 jz      loc_40BA52
.text:0040BC17                 mov     eax, [ebp+var_8]
.text:0040BC1A                 push    edx
.text:0040BC1B                 push    eax
.text:0040BC1C                 mov     ecx, [eax]
.text:0040BC1E                 mov     esi, [ecx+9Ch]
.text:0040BC24                 mov     ecx, esi
.text:0040BC26                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040BC2C                 call    esi
.text:0040BC2E                 mov     edi, eax
.text:0040BC30                 test    edi, edi
.text:0040BC32                 js      short loc_40BC3A
.text:0040BC34
.text:0040BC34 loc_40BC34:                             ; CODE XREF: SetApiTraceValues(IDataCollector *,int *)+232↑j
.text:0040BC34                 mov     eax, [ebp+var_1C]
.text:0040BC37                 and     dword ptr [eax], 0
.text:0040BC3A
.text:0040BC3A loc_40BC3A:                             ; CODE XREF: SetApiTraceValues(IDataCollector *,int *)+47↑j
.text:0040BC3A                                         ; SetApiTraceValues(IDataCollector *,int *)+6E↑j ...
.text:0040BC3A                 mov     ecx, [ebp+var_8]
.text:0040BC3D                 test    ecx, ecx
.text:0040BC3F                 jz      short loc_40BC55
.text:0040BC41                 mov     eax, [ecx]
.text:0040BC43                 push    ecx
.text:0040BC44                 mov     esi, [eax+8]
.text:0040BC47                 mov     ecx, esi
.text:0040BC49                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040BC4F                 call    esi
.text:0040BC51                 and     [ebp+var_8], 0
.text:0040BC55
.text:0040BC55 loc_40BC55:                             ; CODE XREF: SetApiTraceValues(IDataCollector *,int *)+275↑j
.text:0040BC55                 mov     eax, [ebp+bstrString]
.text:0040BC58                 test    eax, eax
.text:0040BC5A                 jz      short loc_40BC63
.text:0040BC5C                 push    eax             ; bstrString
.text:0040BC5D                 call    ds:SysFreeString
.text:0040BC63
.text:0040BC63 loc_40BC63:                             ; CODE XREF: SetApiTraceValues(IDataCollector *,int *)+290↑j
.text:0040BC63                 mov     eax, [ebp+var_14]
.text:0040BC66                 test    eax, eax
.text:0040BC68                 jz      short loc_40BC71
.text:0040BC6A                 push    eax             ; bstrString
.text:0040BC6B                 call    ds:SysFreeString
.text:0040BC71
.text:0040BC71 loc_40BC71:                             ; CODE XREF: SetApiTraceValues(IDataCollector *,int *)+29E↑j
.text:0040BC71                 test    ebx, ebx
.text:0040BC73                 jz      short loc_40BC7C
.text:0040BC75                 push    ebx             ; psa
.text:0040BC76                 call    ds:SafeArrayDestroy
.text:0040BC7C
.text:0040BC7C loc_40BC7C:                             ; CODE XREF: SetApiTraceValues(IDataCollector *,int *)+2A9↑j
.text:0040BC7C                 mov     ecx, [ebp+var_4]
.text:0040BC7F                 mov     eax, edi
.text:0040BC81                 pop     edi
.text:0040BC82                 pop     esi
.text:0040BC83                 xor     ecx, ebp        ; StackCookie
.text:0040BC85                 pop     ebx
.text:0040BC86                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040BC8B                 mov     esp, ebp
.text:0040BC8D                 pop     ebp
.text:0040BC8E                 retn
.text:0040BC8F ; ---------------------------------------------------------------------------
.text:0040BC8F
.text:0040BC8F loc_40BC8F:                             ; CODE XREF: SetApiTraceValues(IDataCollector *,int *)+53↑j
.text:0040BC8F                 cmp     dword_413C50, ebx
.text:0040BC95                 jz      loc_40BA7D
.text:0040BC9B                 mov     edi, 80070057h
.text:0040BCA0                 jmp     short loc_40BC3A
.text:0040BCA2 ; ---------------------------------------------------------------------------
.text:0040BCA2
.text:0040BCA2 loc_40BCA2:                             ; CODE XREF: SetApiTraceValues(IDataCollector *,int *)+13B↑j
.text:0040BCA2                                         ; SetApiTraceValues(IDataCollector *,int *)+199↑j ...
.text:0040BCA2                 mov     ebx, [ebp+var_C]
.text:0040BCA5                 jmp     short loc_40BC3A
.text:0040BCA5 ?SetApiTraceValues@@YGJPAUIDataCollector@@PAH@Z endp
.text:0040BCA5
.text:0040BCA7
.text:0040BCA7 ; =============== S U B R O U T I N E =======================================
.text:0040BCA7
.text:0040BCA7 ; Attributes: bp-based frame
.text:0040BCA7
.text:0040BCA7 sub_40BCA7      proc near               ; CODE XREF: _wmain+6D2↑p
.text:0040BCA7
.text:0040BCA7 pvarg           = VARIANTARG ptr -20h
.text:0040BCA7 bstrString      = dword ptr -10h
.text:0040BCA7 var_C           = dword ptr -0Ch
.text:0040BCA7 var_8           = dword ptr -8
.text:0040BCA7 var_4           = dword ptr -4
.text:0040BCA7
.text:0040BCA7                 mov     edi, edi
.text:0040BCA9                 push    ebp
.text:0040BCAA                 mov     ebp, esp
.text:0040BCAC                 sub     esp, 24h
.text:0040BCAF                 mov     eax, ___security_cookie
.text:0040BCB4                 xor     eax, ebp
.text:0040BCB6                 mov     [ebp+var_4], eax
.text:0040BCB9                 push    ebx
.text:0040BCBA                 push    esi
.text:0040BCBB                 push    edi
.text:0040BCBC                 lea     eax, [ebp+pvarg]
.text:0040BCBF                 mov     [ebp+var_C], ecx
.text:0040BCC2                 xor     edi, edi
.text:0040BCC4                 push    eax             ; pvarg
.text:0040BCC5                 mov     [ebp+var_8], edi
.text:0040BCC8                 call    ds:VariantInit
.text:0040BCCE                 push    dword_413C04    ; psz
.text:0040BCD4                 call    ds:SysAllocString
.text:0040BCDA                 mov     [ebp+bstrString], eax
.text:0040BCDD                 test    eax, eax
.text:0040BCDF                 jnz     short loc_40BCE8
.text:0040BCE1                 mov     ebx, 8007000Eh
.text:0040BCE6                 jmp     short loc_40BD40
.text:0040BCE8 ; ---------------------------------------------------------------------------
.text:0040BCE8
.text:0040BCE8 loc_40BCE8:                             ; CODE XREF: sub_40BCA7+38↑j
.text:0040BCE8                 lea     ecx, [ebp+var_8]
.text:0040BCEB                 mov     edx, eax
.text:0040BCED                 push    ecx
.text:0040BCEE                 push    2
.text:0040BCF0                 pop     ecx
.text:0040BCF1                 call    sub_4093C3
.text:0040BCF6                 mov     edi, [ebp+var_8]
.text:0040BCF9                 mov     ebx, eax
.text:0040BCFB                 test    ebx, ebx
.text:0040BCFD                 js      short loc_40BD40
.text:0040BCFF                 mov     eax, [edi]
.text:0040BD01                 lea     ecx, [ebp+pvarg.anonymous_0+8]
.text:0040BD04                 push    ecx
.text:0040BD05                 push    edi
.text:0040BD06                 mov     esi, [eax+88h]
.text:0040BD0C                 mov     ecx, esi
.text:0040BD0E                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040BD14                 call    esi
.text:0040BD16                 mov     ebx, eax
.text:0040BD18                 test    ebx, ebx
.text:0040BD1A                 js      short loc_40BD40
.text:0040BD1C                 mov     ecx, [ebp+var_C]
.text:0040BD1F                 push    8
.text:0040BD21                 pop     eax
.text:0040BD22                 mov     word ptr [ebp+pvarg.anonymous_0], ax
.text:0040BD26                 mov     eax, [ecx]
.text:0040BD28                 push    0
.text:0040BD2A                 push    dword ptr [ebp+pvarg.anonymous_0+8]
.text:0040BD2D                 mov     esi, [eax+100h]
.text:0040BD33                 push    ecx
.text:0040BD34                 mov     ecx, esi
.text:0040BD36                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040BD3C                 call    esi
.text:0040BD3E                 mov     ebx, eax
.text:0040BD40
.text:0040BD40 loc_40BD40:                             ; CODE XREF: sub_40BCA7+3F↑j
.text:0040BD40                                         ; sub_40BCA7+56↑j ...
.text:0040BD40                 lea     eax, [ebp+pvarg]
.text:0040BD43                 push    eax             ; pvarg
.text:0040BD44                 call    ds:VariantClear
.text:0040BD4A                 mov     eax, [ebp+bstrString]
.text:0040BD4D                 test    eax, eax
.text:0040BD4F                 jz      short loc_40BD58
.text:0040BD51                 push    eax             ; bstrString
.text:0040BD52                 call    ds:SysFreeString
.text:0040BD58
.text:0040BD58 loc_40BD58:                             ; CODE XREF: sub_40BCA7+A8↑j
.text:0040BD58                 test    edi, edi
.text:0040BD5A                 jz      short loc_40BD6C
.text:0040BD5C                 mov     eax, [edi]
.text:0040BD5E                 push    edi
.text:0040BD5F                 mov     esi, [eax+8]
.text:0040BD62                 mov     ecx, esi
.text:0040BD64                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040BD6A                 call    esi
.text:0040BD6C
.text:0040BD6C loc_40BD6C:                             ; CODE XREF: sub_40BCA7+B3↑j
.text:0040BD6C                 mov     ecx, [ebp+var_4]
.text:0040BD6F                 mov     eax, ebx
.text:0040BD71                 pop     edi
.text:0040BD72                 pop     esi
.text:0040BD73                 xor     ecx, ebp        ; StackCookie
.text:0040BD75                 pop     ebx
.text:0040BD76                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040BD7B                 mov     esp, ebp
.text:0040BD7D                 pop     ebp
.text:0040BD7E                 retn
.text:0040BD7E sub_40BCA7      endp
.text:0040BD7E
.text:0040BD7F
.text:0040BD7F ; =============== S U B R O U T I N E =======================================
.text:0040BD7F
.text:0040BD7F ; Attributes: bp-based frame
.text:0040BD7F
.text:0040BD7F sub_40BD7F      proc near               ; CODE XREF: _wmain+1D8↑p
.text:0040BD7F                                         ; sub_40BF14+2A9↓p
.text:0040BD7F
.text:0040BD7F var_10          = dword ptr -10h
.text:0040BD7F var_C           = dword ptr -0Ch
.text:0040BD7F FilePart        = dword ptr -8
.text:0040BD7F var_4           = dword ptr -4
.text:0040BD7F
.text:0040BD7F                 mov     edi, edi
.text:0040BD81                 push    ebp
.text:0040BD82                 mov     ebp, esp
.text:0040BD84                 sub     esp, 10h
.text:0040BD87                 mov     eax, ___security_cookie
.text:0040BD8C                 xor     eax, ebp
.text:0040BD8E                 mov     [ebp+var_4], eax
.text:0040BD91                 push    ebx
.text:0040BD92                 push    esi
.text:0040BD93                 push    edi
.text:0040BD94                 push    800h            ; dwBytes
.text:0040BD99                 xor     edi, edi
.text:0040BD9B                 mov     [ebp+var_C], edx
.text:0040BD9E                 push    edi             ; dwFlags
.text:0040BD9F                 mov     [ebp+var_10], ecx
.text:0040BDA2                 call    ds:GetProcessHeap
.text:0040BDA8                 push    eax             ; hHeap
.text:0040BDA9                 call    ds:HeapAlloc
.text:0040BDAF                 mov     ebx, eax
.text:0040BDB1                 test    ebx, ebx
.text:0040BDB3                 jnz     short loc_40BDBF
.text:0040BDB5                 mov     esi, 8007000Eh
.text:0040BDBA                 jmp     loc_40BF01
.text:0040BDBF ; ---------------------------------------------------------------------------
.text:0040BDBF
.text:0040BDBF loc_40BDBF:                             ; CODE XREF: sub_40BD7F+34↑j
.text:0040BDBF                 cmp     dword_414430, edi
.text:0040BDC5                 jnz     short loc_40BE14
.text:0040BDC7                 cmp     dword_414F00, edi
.text:0040BDCD                 jz      loc_40BEE4
.text:0040BDD3                 push    ebx             ; lpBuffer
.text:0040BDD4                 mov     esi, 400h
.text:0040BDD9                 push    esi             ; nBufferLength
.text:0040BDDA                 call    ds:GetCurrentDirectoryW
.text:0040BDE0                 test    eax, eax
.text:0040BDE2                 jnz     short loc_40BE02
.text:0040BDE4
.text:0040BDE4 loc_40BDE4:                             ; CODE XREF: sub_40BD7F+AE↓j
.text:0040BDE4                 call    ds:GetLastError
.text:0040BDEA                 mov     esi, eax
.text:0040BDEC                 test    esi, esi
.text:0040BDEE                 jle     loc_40BEE6
.text:0040BDF4                 movzx   esi, si
.text:0040BDF7                 or      esi, 80070000h
.text:0040BDFD                 jmp     loc_40BEE6
.text:0040BE02 ; ---------------------------------------------------------------------------
.text:0040BE02
.text:0040BE02 loc_40BE02:                             ; CODE XREF: sub_40BD7F+63↑j
.text:0040BE02                 cmp     eax, esi
.text:0040BE04                 jbe     loc_40BEBD
.text:0040BE0A
.text:0040BE0A loc_40BE0A:                             ; CODE XREF: sub_40BD7F+B2↓j
.text:0040BE0A                 mov     esi, 8007007Ah
.text:0040BE0F                 jmp     loc_40BEE6
.text:0040BE14 ; ---------------------------------------------------------------------------
.text:0040BE14
.text:0040BE14 loc_40BE14:                             ; CODE XREF: sub_40BD7F+46↑j
.text:0040BE14                 lea     eax, [ebp+FilePart]
.text:0040BE17                 mov     esi, 400h
.text:0040BE1C                 push    eax             ; lpFilePart
.text:0040BE1D                 push    ebx             ; lpBuffer
.text:0040BE1E                 push    esi             ; nBufferLength
.text:0040BE1F                 push    lpFileName      ; lpFileName
.text:0040BE25                 call    ds:GetFullPathNameW
.text:0040BE2B                 test    eax, eax
.text:0040BE2D                 jz      short loc_40BDE4
.text:0040BE2F                 cmp     eax, esi
.text:0040BE31                 ja      short loc_40BE0A
.text:0040BE33                 mov     eax, [ebp+FilePart]
.text:0040BE36                 test    eax, eax
.text:0040BE38                 jnz     short loc_40BE44
.text:0040BE3A                 mov     esi, 8007007Bh
.text:0040BE3F                 jmp     loc_40BEE6
.text:0040BE44 ; ---------------------------------------------------------------------------
.text:0040BE44
.text:0040BE44 loc_40BE44:                             ; CODE XREF: sub_40BD7F+B9↑j
.text:0040BE44                 cmp     dword_414F00, edi
.text:0040BE4A                 jz      short loc_40BE87
.text:0040BE4C                 push    ebx             ; psz
.text:0040BE4D                 call    ds:SysAllocString
.text:0040BE53                 mov     edi, eax
.text:0040BE55                 test    edi, edi
.text:0040BE57                 jnz     short loc_40BE63
.text:0040BE59
.text:0040BE59 loc_40BE59:                             ; CODE XREF: sub_40BD7F+113↓j
.text:0040BE59                                         ; sub_40BD7F+149↓j
.text:0040BE59                 mov     esi, 8007000Eh
.text:0040BE5E                 jmp     loc_40BEE6
.text:0040BE63 ; ---------------------------------------------------------------------------
.text:0040BE63
.text:0040BE63 loc_40BE63:                             ; CODE XREF: sub_40BD7F+D8↑j
.text:0040BE63                 mov     ecx, [ebp+var_C]
.text:0040BE66                 push    edi
.text:0040BE67                 push    ecx
.text:0040BE68                 mov     eax, [ecx]
.text:0040BE6A                 mov     esi, [eax+44h]
.text:0040BE6D                 mov     ecx, esi
.text:0040BE6F                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040BE75                 call    esi
.text:0040BE77                 mov     esi, eax
.text:0040BE79                 test    esi, esi
.text:0040BE7B                 js      short loc_40BEE6
.text:0040BE7D                 push    edi             ; bstrString
.text:0040BE7E                 call    ds:SysFreeString
.text:0040BE84                 mov     eax, [ebp+FilePart]
.text:0040BE87
.text:0040BE87 loc_40BE87:                             ; CODE XREF: sub_40BD7F+CB↑j
.text:0040BE87                 push    eax             ; psz
.text:0040BE88                 call    ds:SysAllocString
.text:0040BE8E                 mov     edi, eax
.text:0040BE90                 test    edi, edi
.text:0040BE92                 jz      short loc_40BE59
.text:0040BE94                 mov     ecx, [ebp+var_C]
.text:0040BE97                 push    edi
.text:0040BE98                 push    ecx
.text:0040BE99                 mov     eax, [ecx]
.text:0040BE9B                 mov     esi, [eax+2Ch]
.text:0040BE9E                 mov     ecx, esi
.text:0040BEA0                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040BEA6                 call    esi
.text:0040BEA8                 mov     esi, eax
.text:0040BEAA                 test    esi, esi
.text:0040BEAC                 js      short loc_40BEE6
.text:0040BEAE                 mov     eax, [ebp+FilePart]
.text:0040BEB1                 xor     ecx, ecx
.text:0040BEB3                 push    edi             ; bstrString
.text:0040BEB4                 mov     [eax], cx
.text:0040BEB7                 call    ds:SysFreeString
.text:0040BEBD
.text:0040BEBD loc_40BEBD:                             ; CODE XREF: sub_40BD7F+85↑j
.text:0040BEBD                 push    ebx             ; psz
.text:0040BEBE                 call    ds:SysAllocString
.text:0040BEC4                 mov     edi, eax
.text:0040BEC6                 test    edi, edi
.text:0040BEC8                 jz      short loc_40BE59
.text:0040BECA                 mov     ecx, [ebp+var_10]
.text:0040BECD                 push    edi
.text:0040BECE                 push    ecx
.text:0040BECF                 mov     eax, [ecx]
.text:0040BED1                 mov     esi, [eax+5Ch]
.text:0040BED4                 mov     ecx, esi
.text:0040BED6                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040BEDC                 call    esi
.text:0040BEDE                 mov     esi, eax
.text:0040BEE0                 test    esi, esi
.text:0040BEE2                 js      short loc_40BEE6
.text:0040BEE4
.text:0040BEE4 loc_40BEE4:                             ; CODE XREF: sub_40BD7F+4E↑j
.text:0040BEE4                 xor     esi, esi
.text:0040BEE6
.text:0040BEE6 loc_40BEE6:                             ; CODE XREF: sub_40BD7F+6F↑j
.text:0040BEE6                                         ; sub_40BD7F+7E↑j ...
.text:0040BEE6                 push    ebx             ; lpMem
.text:0040BEE7                 push    0               ; dwFlags
.text:0040BEE9                 call    ds:GetProcessHeap
.text:0040BEEF                 push    eax             ; hHeap
.text:0040BEF0                 call    ds:HeapFree
.text:0040BEF6                 test    edi, edi
.text:0040BEF8                 jz      short loc_40BF01
.text:0040BEFA                 push    edi             ; bstrString
.text:0040BEFB                 call    ds:SysFreeString
.text:0040BF01
.text:0040BF01 loc_40BF01:                             ; CODE XREF: sub_40BD7F+3B↑j
.text:0040BF01                                         ; sub_40BD7F+179↑j
.text:0040BF01                 mov     ecx, [ebp+var_4]
.text:0040BF04                 mov     eax, esi
.text:0040BF06                 pop     edi
.text:0040BF07                 pop     esi
.text:0040BF08                 xor     ecx, ebp        ; StackCookie
.text:0040BF0A                 pop     ebx
.text:0040BF0B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040BF10                 mov     esp, ebp
.text:0040BF12                 pop     ebp
.text:0040BF13                 retn
.text:0040BF13 sub_40BD7F      endp
.text:0040BF13
.text:0040BF14
.text:0040BF14 ; =============== S U B R O U T I N E =======================================
.text:0040BF14
.text:0040BF14 ; Attributes: bp-based frame
.text:0040BF14
.text:0040BF14 sub_40BF14      proc near               ; CODE XREF: _wmain+22B↑p
.text:0040BF14                                         ; _wmain+744↑p ...
.text:0040BF14
.text:0040BF14 var_14          = dword ptr -14h
.text:0040BF14 var_10          = dword ptr -10h
.text:0040BF14 var_C           = dword ptr -0Ch
.text:0040BF14 bstrString      = dword ptr -8
.text:0040BF14 var_4           = dword ptr -4
.text:0040BF14
.text:0040BF14                 mov     edi, edi
.text:0040BF16                 push    ebp
.text:0040BF17                 mov     ebp, esp
.text:0040BF19                 sub     esp, 14h
.text:0040BF1C                 mov     eax, ___security_cookie
.text:0040BF21                 xor     eax, ebp
.text:0040BF23                 mov     [ebp+var_4], eax
.text:0040BF26                 and     [ebp+bstrString], 0
.text:0040BF2A                 cmp     dword_414810, 0
.text:0040BF31                 push    ebx
.text:0040BF32                 push    esi
.text:0040BF33                 push    edi
.text:0040BF34                 mov     ebx, edx
.text:0040BF36                 mov     [ebp+var_C], 1
.text:0040BF3D                 mov     edi, ecx
.text:0040BF3F                 jz      short loc_40BF68
.text:0040BF41                 mov     eax, [ebx]
.text:0040BF43                 xor     ecx, ecx
.text:0040BF45                 cmp     dword_414814, ecx
.text:0040BF4B                 setnz   cl
.text:0040BF4E                 mov     esi, [eax+4Ch]
.text:0040BF51                 dec     ecx
.text:0040BF52                 push    ecx
.text:0040BF53                 push    ebx
.text:0040BF54                 mov     ecx, esi
.text:0040BF56                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040BF5C                 call    esi
.text:0040BF5E                 mov     esi, eax
.text:0040BF60                 test    esi, esi
.text:0040BF62                 js      loc_40C1D2
.text:0040BF68
.text:0040BF68 loc_40BF68:                             ; CODE XREF: sub_40BF14+2B↑j
.text:0040BF68                 cmp     dword_414620, 0
.text:0040BF6F                 jz      short loc_40BF98
.text:0040BF71                 mov     eax, [ebx]
.text:0040BF73                 xor     ecx, ecx
.text:0040BF75                 cmp     dword_414624, ecx
.text:0040BF7B                 setnz   cl
.text:0040BF7E                 mov     esi, [eax+5Ch]
.text:0040BF81                 dec     ecx
.text:0040BF82                 push    ecx
.text:0040BF83                 push    ebx
.text:0040BF84                 mov     ecx, esi
.text:0040BF86                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040BF8C                 call    esi
.text:0040BF8E                 mov     esi, eax
.text:0040BF90                 test    esi, esi
.text:0040BF92                 js      loc_40C1D2
.text:0040BF98
.text:0040BF98 loc_40BF98:                             ; CODE XREF: sub_40BF14+5B↑j
.text:0040BF98                 cmp     dword_414070, 0
.text:0040BF9F                 jz      short loc_40C003
.text:0040BFA1                 cmp     dword_414074, 0
.text:0040BFA8                 jz      short loc_40BFAE
.text:0040BFAA                 xor     ecx, ecx
.text:0040BFAC                 jmp     short loc_40BFE8
.text:0040BFAE ; ---------------------------------------------------------------------------
.text:0040BFAE
.text:0040BFAE loc_40BFAE:                             ; CODE XREF: sub_40BF14+94↑j
.text:0040BFAE                 push    offset aNnnnnn  ; "nnnnnn"
.text:0040BFB3                 push    dword_414084    ; String1
.text:0040BFB9                 call    ds:__imp__wcsicmp
.text:0040BFBF                 pop     ecx
.text:0040BFC0                 pop     ecx
.text:0040BFC1                 test    eax, eax
.text:0040BFC3                 jnz     short loc_40BFCC
.text:0040BFC5                 mov     ecx, 200h
.text:0040BFCA                 jmp     short loc_40BFE8
.text:0040BFCC ; ---------------------------------------------------------------------------
.text:0040BFCC
.text:0040BFCC loc_40BFCC:                             ; CODE XREF: sub_40BF14+AF↑j
.text:0040BFCC                 push    offset aMmddhhmm ; "mmddhhmm"
.text:0040BFD1                 push    dword_414084    ; String1
.text:0040BFD7                 call    ds:__imp__wcsicmp
.text:0040BFDD                 pop     ecx
.text:0040BFDE                 pop     ecx
.text:0040BFDF                 test    eax, eax
.text:0040BFE1                 jnz     short loc_40C03F
.text:0040BFE3                 mov     ecx, 4000h
.text:0040BFE8
.text:0040BFE8 loc_40BFE8:                             ; CODE XREF: sub_40BF14+98↑j
.text:0040BFE8                                         ; sub_40BF14+B6↑j
.text:0040BFE8                 mov     eax, [ebx]
.text:0040BFEA                 push    ecx
.text:0040BFEB                 push    ebx
.text:0040BFEC                 mov     esi, [eax+34h]
.text:0040BFEF                 mov     ecx, esi
.text:0040BFF1                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040BFF7                 call    esi
.text:0040BFF9                 mov     esi, eax
.text:0040BFFB                 test    esi, esi
.text:0040BFFD                 js      loc_40C1D2
.text:0040C003
.text:0040C003 loc_40C003:                             ; CODE XREF: sub_40BF14+8B↑j
.text:0040C003                 cmp     dword_413320, 0
.text:0040C00A                 jz      short loc_40C067
.text:0040C00C                 xor     ecx, ecx
.text:0040C00E                 mov     [ebp+bstrString], ecx
.text:0040C011                 cmp     dword_413324, ecx
.text:0040C017                 jnz     short loc_40C049
.text:0040C019                 mov     eax, dword_413334
.text:0040C01E                 mov     [ebp+bstrString], ecx
.text:0040C021                 test    eax, eax
.text:0040C023                 jz      short loc_40C049
.text:0040C025                 push    eax             ; psz
.text:0040C026                 call    ds:SysAllocString
.text:0040C02C                 mov     ecx, eax
.text:0040C02E                 mov     [ebp+bstrString], ecx
.text:0040C031                 test    ecx, ecx
.text:0040C033                 jnz     short loc_40C049
.text:0040C035                 mov     esi, 8007000Eh
.text:0040C03A                 jmp     loc_40C1D2
.text:0040C03F ; ---------------------------------------------------------------------------
.text:0040C03F
.text:0040C03F loc_40C03F:                             ; CODE XREF: sub_40BF14+CD↑j
.text:0040C03F                 mov     esi, 80070057h
.text:0040C044                 jmp     loc_40C1D2
.text:0040C049 ; ---------------------------------------------------------------------------
.text:0040C049
.text:0040C049 loc_40C049:                             ; CODE XREF: sub_40BF14+103↑j
.text:0040C049                                         ; sub_40BF14+10F↑j ...
.text:0040C049                 mov     eax, [edi]
.text:0040C04B                 push    ecx
.text:0040C04C                 push    edi
.text:0040C04D                 mov     esi, [eax+0A4h]
.text:0040C053                 mov     ecx, esi
.text:0040C055                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040C05B                 call    esi
.text:0040C05D                 mov     esi, eax
.text:0040C05F                 test    esi, esi
.text:0040C061                 js      loc_40C1C4
.text:0040C067
.text:0040C067 loc_40C067:                             ; CODE XREF: sub_40BF14+F6↑j
.text:0040C067                 cmp     dword_413DD0, 0
.text:0040C06E                 jz      short loc_40C09D
.text:0040C070                 cmp     dword_413DD4, 0
.text:0040C077                 mov     eax, [edi]
.text:0040C079                 mov     esi, [eax+74h]
.text:0040C07C                 mov     ecx, esi
.text:0040C07E                 jz      short loc_40C084
.text:0040C080                 push    0
.text:0040C082                 jmp     short loc_40C08A
.text:0040C084 ; ---------------------------------------------------------------------------
.text:0040C084
.text:0040C084 loc_40C084:                             ; CODE XREF: sub_40BF14+16A↑j
.text:0040C084                 push    dword_413DE4
.text:0040C08A
.text:0040C08A loc_40C08A:                             ; CODE XREF: sub_40BF14+16E↑j
.text:0040C08A                 push    edi
.text:0040C08B                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040C091                 call    esi
.text:0040C093                 mov     esi, eax
.text:0040C095                 test    esi, esi
.text:0040C097                 js      loc_40C1C4
.text:0040C09D
.text:0040C09D loc_40C09D:                             ; CODE XREF: sub_40BF14+15A↑j
.text:0040C09D                 cmp     dword_4147A0, 0
.text:0040C0A4                 jz      loc_40C12E
.text:0040C0AA                 cmp     dword_4147A4, 0
.text:0040C0B1                 jz      short loc_40C0D3
.text:0040C0B3                 mov     eax, [edi]
.text:0040C0B5                 push    0
.text:0040C0B7                 push    edi
.text:0040C0B8                 mov     esi, [eax+64h]
.text:0040C0BB                 mov     ecx, esi
.text:0040C0BD                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040C0C3                 call    esi
.text:0040C0C5                 mov     esi, eax
.text:0040C0C7                 test    esi, esi
.text:0040C0C9                 js      loc_40C1C4
.text:0040C0CF                 push    0
.text:0040C0D1                 jmp     short loc_40C114
.text:0040C0D3 ; ---------------------------------------------------------------------------
.text:0040C0D3
.text:0040C0D3 loc_40C0D3:                             ; CODE XREF: sub_40BF14+19D↑j
.text:0040C0D3                 movzx   eax, word_4147BC
.text:0040C0DA                 imul    ecx, eax, 3Ch ; '<'
.text:0040C0DD                 movzx   eax, word_4147BE
.text:0040C0E4                 push    0FFFFFFFFh
.text:0040C0E6                 push    edi
.text:0040C0E7                 add     ecx, eax
.text:0040C0E9                 movzx   eax, word_4147C0
.text:0040C0F0                 imul    ecx, 3Ch ; '<'
.text:0040C0F3                 add     ecx, eax
.text:0040C0F5                 mov     eax, [edi]
.text:0040C0F7                 mov     [ebp+var_10], ecx
.text:0040C0FA                 mov     esi, [eax+64h]
.text:0040C0FD                 mov     ecx, esi
.text:0040C0FF                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040C105                 call    esi
.text:0040C107                 mov     esi, eax
.text:0040C109                 test    esi, esi
.text:0040C10B                 js      loc_40C1C4
.text:0040C111                 push    [ebp+var_10]
.text:0040C114
.text:0040C114 loc_40C114:                             ; CODE XREF: sub_40BF14+1BD↑j
.text:0040C114                 mov     eax, [edi]
.text:0040C116                 push    edi
.text:0040C117                 mov     esi, [eax+6Ch]
.text:0040C11A                 mov     ecx, esi
.text:0040C11C                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040C122                 call    esi
.text:0040C124                 mov     esi, eax
.text:0040C126                 test    esi, esi
.text:0040C128                 js      loc_40C1C4
.text:0040C12E
.text:0040C12E loc_40C12E:                             ; CODE XREF: sub_40BF14+190↑j
.text:0040C12E                 mov     ecx, edi
.text:0040C130                 call    ?SetSchedule@@YGJPAUIDataCollectorSet@@@Z ; SetSchedule(IDataCollectorSet *)
.text:0040C135                 mov     esi, eax
.text:0040C137                 test    esi, esi
.text:0040C139                 js      loc_40C1C4
.text:0040C13F                 mov     eax, [ebx]
.text:0040C141                 lea     ecx, [ebp+var_14]
.text:0040C144                 push    ecx
.text:0040C145                 push    ebx
.text:0040C146                 mov     esi, [eax+24h]
.text:0040C149                 mov     ecx, esi
.text:0040C14B                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040C151                 call    esi
.text:0040C153                 mov     esi, eax
.text:0040C155                 test    esi, esi
.text:0040C157                 js      short loc_40C1C4
.text:0040C159                 mov     eax, [ebp+var_14]
.text:0040C15C                 sub     eax, 0
.text:0040C15F                 jz      short loc_40C1A3
.text:0040C161                 sub     eax, 1
.text:0040C164                 jz      short loc_40C19A
.text:0040C166                 sub     eax, 1
.text:0040C169                 jz      short loc_40C191
.text:0040C16B                 sub     eax, 1
.text:0040C16E                 jz      short loc_40C188
.text:0040C170                 sub     eax, 1
.text:0040C173                 jz      short loc_40C17C
.text:0040C175                 mov     esi, 80070057h
.text:0040C17A                 jmp     short loc_40C1C4
.text:0040C17C ; ---------------------------------------------------------------------------
.text:0040C17C
.text:0040C17C loc_40C17C:                             ; CODE XREF: sub_40BF14+25F↑j
.text:0040C17C                 lea     edx, [ebp+var_C]
.text:0040C17F                 mov     ecx, ebx
.text:0040C181                 call    ?SetApiTraceValues@@YGJPAUIDataCollector@@PAH@Z ; SetApiTraceValues(IDataCollector *,int *)
.text:0040C186                 jmp     short loc_40C1AD
.text:0040C188 ; ---------------------------------------------------------------------------
.text:0040C188
.text:0040C188 loc_40C188:                             ; CODE XREF: sub_40BF14+25A↑j
.text:0040C188                 mov     ecx, ebx
.text:0040C18A                 call    sub_40B60B
.text:0040C18F                 jmp     short loc_40C1AD
.text:0040C191 ; ---------------------------------------------------------------------------
.text:0040C191
.text:0040C191 loc_40C191:                             ; CODE XREF: sub_40BF14+255↑j
.text:0040C191                 mov     ecx, ebx
.text:0040C193                 call    sub_40B845
.text:0040C198                 jmp     short loc_40C1AD
.text:0040C19A ; ---------------------------------------------------------------------------
.text:0040C19A
.text:0040C19A loc_40C19A:                             ; CODE XREF: sub_40BF14+250↑j
.text:0040C19A                 mov     ecx, ebx
.text:0040C19C                 call    ?SetTraceValues@@YGJPAUIDataCollector@@@Z ; SetTraceValues(IDataCollector *)
.text:0040C1A1                 jmp     short loc_40C1AD
.text:0040C1A3 ; ---------------------------------------------------------------------------
.text:0040C1A3
.text:0040C1A3 loc_40C1A3:                             ; CODE XREF: sub_40BF14+24B↑j
.text:0040C1A3                 lea     edx, [ebp+var_C]
.text:0040C1A6                 mov     ecx, ebx
.text:0040C1A8                 call    ?SetCounterValues@@YGJPAUIDataCollector@@PAH@Z ; SetCounterValues(IDataCollector *,int *)
.text:0040C1AD
.text:0040C1AD loc_40C1AD:                             ; CODE XREF: sub_40BF14+272↑j
.text:0040C1AD                                         ; sub_40BF14+27B↑j ...
.text:0040C1AD                 mov     esi, eax
.text:0040C1AF                 test    esi, esi
.text:0040C1B1                 js      short loc_40C1C4
.text:0040C1B3                 cmp     [ebp+var_C], 0
.text:0040C1B7                 jz      short loc_40C1C4
.text:0040C1B9                 mov     edx, ebx
.text:0040C1BB                 mov     ecx, edi
.text:0040C1BD                 call    sub_40BD7F
.text:0040C1C2                 mov     esi, eax
.text:0040C1C4
.text:0040C1C4 loc_40C1C4:                             ; CODE XREF: sub_40BF14+14D↑j
.text:0040C1C4                                         ; sub_40BF14+183↑j ...
.text:0040C1C4                 mov     eax, [ebp+bstrString]
.text:0040C1C7                 test    eax, eax
.text:0040C1C9                 jz      short loc_40C1D2
.text:0040C1CB                 push    eax             ; bstrString
.text:0040C1CC                 call    ds:SysFreeString
.text:0040C1D2
.text:0040C1D2 loc_40C1D2:                             ; CODE XREF: sub_40BF14+4E↑j
.text:0040C1D2                                         ; sub_40BF14+7E↑j ...
.text:0040C1D2                 mov     ecx, [ebp+var_4]
.text:0040C1D5                 mov     eax, esi
.text:0040C1D7                 pop     edi
.text:0040C1D8                 pop     esi
.text:0040C1D9                 xor     ecx, ebp        ; StackCookie
.text:0040C1DB                 pop     ebx
.text:0040C1DC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040C1E1                 mov     esp, ebp
.text:0040C1E3                 pop     ebp
.text:0040C1E4                 retn
.text:0040C1E4 sub_40BF14      endp
.text:0040C1E4
.text:0040C1E5
.text:0040C1E5 ; =============== S U B R O U T I N E =======================================
.text:0040C1E5
.text:0040C1E5 ; Attributes: bp-based frame
.text:0040C1E5
.text:0040C1E5 ; int __thiscall sub_40C1E5(LPCWSTR lpName, LPSTREAM *ppstm)
.text:0040C1E5 sub_40C1E5      proc near               ; CODE XREF: sub_4093C3+9A↑p
.text:0040C1E5
.text:0040C1E5 Src             = dword ptr -8
.text:0040C1E5 hResData        = dword ptr -4
.text:0040C1E5 ppstm           = dword ptr  8
.text:0040C1E5
.text:0040C1E5                 mov     edi, edi
.text:0040C1E7                 push    ebp
.text:0040C1E8                 mov     ebp, esp
.text:0040C1EA                 push    ecx
.text:0040C1EB                 push    ecx
.text:0040C1EC                 push    ebx
.text:0040C1ED                 push    esi
.text:0040C1EE                 push    edi
.text:0040C1EF                 push    17h             ; lpType
.text:0040C1F1                 xor     ebx, ebx
.text:0040C1F3                 push    ecx             ; lpName
.text:0040C1F4                 push    ebx             ; hModule
.text:0040C1F5                 mov     [ebp+hResData], ebx
.text:0040C1F8                 mov     edi, ebx
.text:0040C1FA                 call    ds:FindResourceW
.text:0040C200                 mov     esi, eax
.text:0040C202                 test    esi, esi
.text:0040C204                 jz      loc_40C29B
.text:0040C20A                 cmp     esi, 0FFFFFFFFh
.text:0040C20D                 jz      loc_40C29B
.text:0040C213                 push    esi             ; hResInfo
.text:0040C214                 push    ebx             ; hModule
.text:0040C215                 call    ds:LoadResource
.text:0040C21B                 mov     [ebp+hResData], eax
.text:0040C21E                 test    eax, eax
.text:0040C220                 jz      short loc_40C24A
.text:0040C222                 cmp     eax, 0FFFFFFFFh
.text:0040C225                 jz      short loc_40C24A
.text:0040C227                 push    eax             ; hResData
.text:0040C228                 call    ds:LockResource
.text:0040C22E                 mov     [ebp+Src], eax
.text:0040C231                 test    eax, eax
.text:0040C233                 jnz     short loc_40C23C
.text:0040C235                 mov     esi, 80004005h
.text:0040C23A                 jmp     short loc_40C2B0
.text:0040C23C ; ---------------------------------------------------------------------------
.text:0040C23C
.text:0040C23C loc_40C23C:                             ; CODE XREF: sub_40C1E5+4E↑j
.text:0040C23C                 push    esi             ; hResInfo
.text:0040C23D                 push    ebx             ; hModule
.text:0040C23E                 call    ds:SizeofResource
.text:0040C244                 mov     esi, eax
.text:0040C246                 test    esi, esi
.text:0040C248                 jnz     short loc_40C258
.text:0040C24A
.text:0040C24A loc_40C24A:                             ; CODE XREF: sub_40C1E5+3B↑j
.text:0040C24A                                         ; sub_40C1E5+40↑j ...
.text:0040C24A                 call    ds:GetLastError
.text:0040C250                 mov     esi, eax
.text:0040C252                 test    esi, esi
.text:0040C254                 jle     short loc_40C2B0
.text:0040C256                 jmp     short loc_40C2A7
.text:0040C258 ; ---------------------------------------------------------------------------
.text:0040C258
.text:0040C258 loc_40C258:                             ; CODE XREF: sub_40C1E5+63↑j
.text:0040C258                 push    esi             ; dwBytes
.text:0040C259                 push    2               ; uFlags
.text:0040C25B                 call    ds:GlobalAlloc
.text:0040C261                 mov     edi, eax
.text:0040C263                 test    edi, edi
.text:0040C265                 jz      short loc_40C24A
.text:0040C267                 cmp     edi, 0FFFFFFFFh
.text:0040C26A                 jz      short loc_40C24A
.text:0040C26C                 push    edi             ; hMem
.text:0040C26D                 call    ds:GlobalLock
.text:0040C273                 mov     ebx, eax
.text:0040C275                 test    ebx, ebx
.text:0040C277                 jz      short loc_40C24A
.text:0040C279                 cmp     ebx, 0FFFFFFFFh
.text:0040C27C                 jz      short loc_40C24A
.text:0040C27E                 push    esi             ; Size
.text:0040C27F                 push    [ebp+Src]       ; Src
.text:0040C282                 push    ebx             ; void *
.text:0040C283                 call    memcpy
.text:0040C288                 add     esp, 0Ch
.text:0040C28B                 push    [ebp+ppstm]     ; ppstm
.text:0040C28E                 push    1               ; fDeleteOnRelease
.text:0040C290                 push    edi             ; hGlobal
.text:0040C291                 call    ds:CreateStreamOnHGlobal
.text:0040C297                 mov     esi, eax
.text:0040C299                 jmp     short loc_40C2B0
.text:0040C29B ; ---------------------------------------------------------------------------
.text:0040C29B
.text:0040C29B loc_40C29B:                             ; CODE XREF: sub_40C1E5+1F↑j
.text:0040C29B                                         ; sub_40C1E5+28↑j
.text:0040C29B                 call    ds:GetLastError
.text:0040C2A1                 mov     esi, eax
.text:0040C2A3                 test    esi, esi
.text:0040C2A5                 jle     short loc_40C2CB
.text:0040C2A7
.text:0040C2A7 loc_40C2A7:                             ; CODE XREF: sub_40C1E5+71↑j
.text:0040C2A7                 movzx   esi, si
.text:0040C2AA                 or      esi, 80070000h
.text:0040C2B0
.text:0040C2B0 loc_40C2B0:                             ; CODE XREF: sub_40C1E5+55↑j
.text:0040C2B0                                         ; sub_40C1E5+6F↑j ...
.text:0040C2B0                 mov     eax, [ebp+hResData]
.text:0040C2B3                 test    eax, eax
.text:0040C2B5                 jz      short loc_40C2BE
.text:0040C2B7                 push    eax             ; hResData
.text:0040C2B8                 call    ds:FreeResource
.text:0040C2BE
.text:0040C2BE loc_40C2BE:                             ; CODE XREF: sub_40C1E5+D0↑j
.text:0040C2BE                 test    ebx, ebx
.text:0040C2C0                 jz      short loc_40C2C9
.text:0040C2C2                 push    edi             ; hMem
.text:0040C2C3                 call    ds:GlobalUnlock
.text:0040C2C9
.text:0040C2C9 loc_40C2C9:                             ; CODE XREF: sub_40C1E5+DB↑j
.text:0040C2C9                 test    esi, esi
.text:0040C2CB
.text:0040C2CB loc_40C2CB:                             ; CODE XREF: sub_40C1E5+C0↑j
.text:0040C2CB                 jns     short loc_40C2D8
.text:0040C2CD                 test    edi, edi
.text:0040C2CF                 jz      short loc_40C2D8
.text:0040C2D1                 push    edi             ; hMem
.text:0040C2D2                 call    ds:GlobalFree
.text:0040C2D8
.text:0040C2D8 loc_40C2D8:                             ; CODE XREF: sub_40C1E5:loc_40C2CB↑j
.text:0040C2D8                                         ; sub_40C1E5+EA↑j
.text:0040C2D8                 pop     edi
.text:0040C2D9                 mov     eax, esi
.text:0040C2DB                 pop     esi
.text:0040C2DC                 pop     ebx
.text:0040C2DD                 mov     esp, ebp
.text:0040C2DF                 pop     ebp
.text:0040C2E0                 retn    4
.text:0040C2E0 sub_40C1E5      endp
.text:0040C2E0
.text:0040C2E3
.text:0040C2E3 ; =============== S U B R O U T I N E =======================================
.text:0040C2E3
.text:0040C2E3 ; Attributes: bp-based frame info_from_lumina
.text:0040C2E3
.text:0040C2E3 ; int __stdcall GetNamespace(struct _LOGMAN_NS *)
.text:0040C2E3 ?GetNamespace@@YGJPAU_LOGMAN_NS@@@Z proc near
.text:0040C2E3                                         ; CODE XREF: _wmain+E2↑p
.text:0040C2E3
.text:0040C2E3 var_80C         = dword ptr -80Ch
.text:0040C2E3 String1         = word ptr -808h
.text:0040C2E3 var_806         = byte ptr -806h
.text:0040C2E3 var_4           = dword ptr -4
.text:0040C2E3
.text:0040C2E3                 mov     edi, edi
.text:0040C2E5                 push    ebp
.text:0040C2E6                 mov     ebp, esp
.text:0040C2E8                 sub     esp, 80Ch
.text:0040C2EE                 mov     eax, ___security_cookie
.text:0040C2F3                 xor     eax, ebp
.text:0040C2F5                 mov     [ebp+var_4], eax
.text:0040C2F8                 push    ebx
.text:0040C2F9                 push    esi             ; pszSrc
.text:0040C2FA                 push    edi             ; cchDest
.text:0040C2FB                 xor     eax, eax
.text:0040C2FD                 mov     ebx, ecx
.text:0040C2FF                 mov     edi, ebx
.text:0040C301                 mov     [ebp+var_80C], eax
.text:0040C307                 mov     esi, eax
.text:0040C309                 stosd
.text:0040C30A                 stosd
.text:0040C30B                 stosd
.text:0040C30C                 stosd
.text:0040C30D                 cmp     dword_413A00, esi
.text:0040C313                 jz      loc_40C578
.text:0040C319                 push    pszDest         ; pszDest
.text:0040C31F                 mov     edx, 400h
.text:0040C324                 lea     ecx, [ebp+String1]
.text:0040C32A                 call    _StringCchCopyW@12 ; StringCchCopyW(x,x,x)
.text:0040C32F                 mov     esi, eax
.text:0040C331                 test    esi, esi
.text:0040C333                 js      loc_40C578
.text:0040C339                 xor     eax, eax
.text:0040C33B                 lea     ecx, [ebp+String1]
.text:0040C341                 xor     edx, edx
.text:0040C343                 inc     eax
.text:0040C344                 push    2
.text:0040C346                 pop     edi
.text:0040C347                 cmp     dx, [ebp+String1]
.text:0040C34E                 jz      short loc_40C376
.text:0040C350
.text:0040C350 loc_40C350:                             ; CODE XREF: GetNamespace(_LOGMAN_NS *)+82↓j
.text:0040C350                 push    5Ch ; '\'
.text:0040C352                 pop     edx
.text:0040C353                 cmp     dx, [ecx]
.text:0040C356                 jnz     short loc_40C35E
.text:0040C358                 xor     edx, edx
.text:0040C35A                 inc     eax
.text:0040C35B                 mov     [ecx], dx
.text:0040C35E
.text:0040C35E loc_40C35E:                             ; CODE XREF: GetNamespace(_LOGMAN_NS *)+73↑j
.text:0040C35E                 add     ecx, edi
.text:0040C360                 xor     edx, edx
.text:0040C362                 cmp     dx, [ecx]
.text:0040C365                 jnz     short loc_40C350
.text:0040C367                 cmp     eax, 3
.text:0040C36A                 jbe     short loc_40C376
.text:0040C36C                 mov     esi, 80070057h
.text:0040C371                 jmp     loc_40C578
.text:0040C376 ; ---------------------------------------------------------------------------
.text:0040C376
.text:0040C376 loc_40C376:                             ; CODE XREF: GetNamespace(_LOGMAN_NS *)+6B↑j
.text:0040C376                                         ; GetNamespace(_LOGMAN_NS *)+87↑j
.text:0040C376                 sub     eax, 1
.text:0040C379                 jz      loc_40C50B
.text:0040C37F                 sub     eax, 1
.text:0040C382                 jz      loc_40C40A
.text:0040C388                 sub     eax, 1
.text:0040C38B                 jnz     loc_40C519
.text:0040C391                 lea     ecx, [ebp+String1]
.text:0040C397                 call    sub_40EDB8
.text:0040C39C                 mov     [ebx], eax
.text:0040C39E                 test    eax, eax
.text:0040C3A0                 jz      loc_40C573
.text:0040C3A6                 lea     ecx, [ebp+String1]
.text:0040C3AC                 xor     esi, esi
.text:0040C3AE                 lea     edx, [ecx+2]
.text:0040C3B1
.text:0040C3B1 loc_40C3B1:                             ; CODE XREF: GetNamespace(_LOGMAN_NS *)+D6↓j
.text:0040C3B1                 mov     ax, [ecx]
.text:0040C3B4                 add     ecx, edi
.text:0040C3B6                 cmp     ax, si
.text:0040C3B9                 jnz     short loc_40C3B1
.text:0040C3BB                 sub     ecx, edx
.text:0040C3BD                 lea     esi, [ebp+var_806]
.text:0040C3C3                 sar     ecx, 1
.text:0040C3C5                 lea     esi, [esi+ecx*2]
.text:0040C3C8                 mov     ecx, esi
.text:0040C3CA                 call    sub_40EDB8
.text:0040C3CF                 mov     [ebx+4], eax
.text:0040C3D2                 test    eax, eax
.text:0040C3D4                 jz      loc_40C573
.text:0040C3DA                 mov     ecx, esi
.text:0040C3DC                 lea     edx, [ecx+2]
.text:0040C3DF
.text:0040C3DF loc_40C3DF:                             ; CODE XREF: GetNamespace(_LOGMAN_NS *)+108↓j
.text:0040C3DF                 mov     ax, [ecx]
.text:0040C3E2                 add     ecx, edi
.text:0040C3E4                 cmp     ax, word ptr [ebp+var_80C]
.text:0040C3EB                 jnz     short loc_40C3DF
.text:0040C3ED                 sub     ecx, edx
.text:0040C3EF                 sar     ecx, 1
.text:0040C3F1                 inc     ecx
.text:0040C3F2                 lea     ecx, [esi+ecx*2]
.text:0040C3F5
.text:0040C3F5 loc_40C3F5:                             ; CODE XREF: GetNamespace(_LOGMAN_NS *)+1DF↓j
.text:0040C3F5                 call    sub_40EDB8
.text:0040C3FA                 mov     [ebx+8], eax
.text:0040C3FD
.text:0040C3FD loc_40C3FD:                             ; CODE XREF: GetNamespace(_LOGMAN_NS *)+223↓j
.text:0040C3FD                 test    eax, eax
.text:0040C3FF                 jnz     loc_40C519
.text:0040C405                 jmp     loc_40C573
.text:0040C40A ; ---------------------------------------------------------------------------
.text:0040C40A
.text:0040C40A loc_40C40A:                             ; CODE XREF: GetNamespace(_LOGMAN_NS *)+9F↑j
.text:0040C40A                 lea     eax, [ebp+String1]
.text:0040C410                 push    offset aService ; "service"
.text:0040C415                 push    eax             ; String1
.text:0040C416                 call    ds:__imp__wcsicmp
.text:0040C41C                 pop     ecx
.text:0040C41D                 pop     ecx
.text:0040C41E                 test    eax, eax
.text:0040C420                 jz      loc_40C4C7
.text:0040C426                 lea     eax, [ebp+String1]
.text:0040C42C                 push    offset String1  ; "session"
.text:0040C431                 push    eax             ; String1
.text:0040C432                 call    ds:__imp__wcsicmp
.text:0040C438                 pop     ecx
.text:0040C439                 pop     ecx
.text:0040C43A                 test    eax, eax
.text:0040C43C                 jz      loc_40C4C7
.text:0040C442                 lea     eax, [ebp+String1]
.text:0040C448                 push    offset aAutosession ; "autosession"
.text:0040C44D                 push    eax             ; String1
.text:0040C44E                 call    ds:__imp__wcsicmp
.text:0040C454                 pop     ecx
.text:0040C455                 pop     ecx
.text:0040C456                 test    eax, eax
.text:0040C458                 jz      short loc_40C4C7
.text:0040C45A                 lea     eax, [ebp+String1]
.text:0040C460                 push    offset aLegacy  ; "legacy"
.text:0040C465                 push    eax             ; String1
.text:0040C466                 call    ds:__imp__wcsicmp
.text:0040C46C                 pop     ecx
.text:0040C46D                 pop     ecx
.text:0040C46E                 test    eax, eax
.text:0040C470                 jz      short loc_40C4C7
.text:0040C472                 lea     eax, [ebp+String1]
.text:0040C478                 push    offset aSystem  ; "system"
.text:0040C47D                 push    eax             ; String1
.text:0040C47E                 call    ds:__imp__wcsicmp
.text:0040C484                 pop     ecx
.text:0040C485                 pop     ecx
.text:0040C486                 test    eax, eax
.text:0040C488                 jz      short loc_40C4C7
.text:0040C48A                 lea     ecx, [ebp+String1]
.text:0040C490                 call    sub_40EDB8
.text:0040C495                 mov     [ebx+4], eax
.text:0040C498                 test    eax, eax
.text:0040C49A                 jz      loc_40C573
.text:0040C4A0                 lea     ecx, [ebp+String1]
.text:0040C4A6                 xor     esi, esi
.text:0040C4A8                 lea     edx, [ecx+2]
.text:0040C4AB
.text:0040C4AB loc_40C4AB:                             ; CODE XREF: GetNamespace(_LOGMAN_NS *)+1D0↓j
.text:0040C4AB                 mov     ax, [ecx]
.text:0040C4AE                 add     ecx, edi
.text:0040C4B0                 cmp     ax, si
.text:0040C4B3                 jnz     short loc_40C4AB
.text:0040C4B5                 sub     ecx, edx
.text:0040C4B7                 lea     eax, [ebp+var_806]
.text:0040C4BD                 sar     ecx, 1
.text:0040C4BF                 lea     ecx, [eax+ecx*2]
.text:0040C4C2                 jmp     loc_40C3F5
.text:0040C4C7 ; ---------------------------------------------------------------------------
.text:0040C4C7
.text:0040C4C7 loc_40C4C7:                             ; CODE XREF: GetNamespace(_LOGMAN_NS *)+13D↑j
.text:0040C4C7                                         ; GetNamespace(_LOGMAN_NS *)+159↑j ...
.text:0040C4C7                 lea     ecx, [ebp+String1]
.text:0040C4CD                 call    sub_40EDB8
.text:0040C4D2                 mov     [ebx], eax
.text:0040C4D4                 test    eax, eax
.text:0040C4D6                 jz      loc_40C573
.text:0040C4DC                 lea     ecx, [ebp+String1]
.text:0040C4E2                 xor     esi, esi
.text:0040C4E4                 lea     edx, [ecx+2]
.text:0040C4E7
.text:0040C4E7 loc_40C4E7:                             ; CODE XREF: GetNamespace(_LOGMAN_NS *)+20C↓j
.text:0040C4E7                 mov     ax, [ecx]
.text:0040C4EA                 add     ecx, edi
.text:0040C4EC                 cmp     ax, si
.text:0040C4EF                 jnz     short loc_40C4E7
.text:0040C4F1                 sub     ecx, edx
.text:0040C4F3                 lea     eax, [ebp+var_806]
.text:0040C4F9                 sar     ecx, 1
.text:0040C4FB                 lea     ecx, [eax+ecx*2]
.text:0040C4FE                 call    sub_40EDB8
.text:0040C503                 mov     [ebx+4], eax
.text:0040C506                 jmp     loc_40C3FD
.text:0040C50B ; ---------------------------------------------------------------------------
.text:0040C50B
.text:0040C50B loc_40C50B:                             ; CODE XREF: GetNamespace(_LOGMAN_NS *)+96↑j
.text:0040C50B                 lea     ecx, [ebp+String1]
.text:0040C511                 call    sub_40EDB8
.text:0040C516                 mov     [ebx+4], eax
.text:0040C519
.text:0040C519 loc_40C519:                             ; CODE XREF: GetNamespace(_LOGMAN_NS *)+A8↑j
.text:0040C519                                         ; GetNamespace(_LOGMAN_NS *)+11C↑j
.text:0040C519                 mov     eax, [ebx]
.text:0040C51B                 test    eax, eax
.text:0040C51D                 jnz     short loc_40C53C
.text:0040C51F                 mov     ecx, offset String1 ; "session"
.text:0040C524                 cmp     dword_413260, eax
.text:0040C52A                 jnz     short loc_40C531
.text:0040C52C                 mov     ecx, offset aService ; "service"
.text:0040C531
.text:0040C531 loc_40C531:                             ; CODE XREF: GetNamespace(_LOGMAN_NS *)+247↑j
.text:0040C531                 call    sub_40EDB8
.text:0040C536                 mov     [ebx], eax
.text:0040C538                 test    eax, eax
.text:0040C53A                 jz      short loc_40C573
.text:0040C53C
.text:0040C53C loc_40C53C:                             ; CODE XREF: GetNamespace(_LOGMAN_NS *)+23A↑j
.text:0040C53C                 push    dword ptr [ebx+4]
.text:0040C53F                 push    eax             ; Args
.text:0040C540                 push    offset pszFormat ; "%s\\%s"
.text:0040C545                 lea     eax, [ebp+String1]
.text:0040C54B                 push    400h            ; cchDest
.text:0040C550                 push    eax             ; pszDest
.text:0040C551                 call    ?StringCchPrintfW@@YAJPAGIPBGZZ_0 ; StringCchPrintfW(ushort *,uint,ushort const *,...)
.text:0040C556                 mov     esi, eax
.text:0040C558                 add     esp, 14h
.text:0040C55B                 test    esi, esi
.text:0040C55D                 js      short loc_40C578
.text:0040C55F                 lea     eax, [ebp+String1]
.text:0040C565                 push    eax             ; psz
.text:0040C566                 call    ds:SysAllocString
.text:0040C56C                 mov     [ebx+0Ch], eax
.text:0040C56F                 test    eax, eax
.text:0040C571                 jnz     short loc_40C578
.text:0040C573
.text:0040C573 loc_40C573:                             ; CODE XREF: GetNamespace(_LOGMAN_NS *)+BD↑j
.text:0040C573                                         ; GetNamespace(_LOGMAN_NS *)+F1↑j ...
.text:0040C573                 mov     esi, 8007000Eh
.text:0040C578
.text:0040C578 loc_40C578:                             ; CODE XREF: GetNamespace(_LOGMAN_NS *)+30↑j
.text:0040C578                                         ; GetNamespace(_LOGMAN_NS *)+50↑j ...
.text:0040C578                 mov     ecx, [ebp+var_4]
.text:0040C57B                 mov     eax, esi
.text:0040C57D                 pop     edi
.text:0040C57E                 pop     esi
.text:0040C57F                 xor     ecx, ebp        ; StackCookie
.text:0040C581                 pop     ebx
.text:0040C582                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040C587                 mov     esp, ebp
.text:0040C589                 pop     ebp
.text:0040C58A                 retn
.text:0040C58A ?GetNamespace@@YGJPAU_LOGMAN_NS@@@Z endp
.text:0040C58A
.text:0040C58B
.text:0040C58B ; =============== S U B R O U T I N E =======================================
.text:0040C58B
.text:0040C58B ; Attributes: bp-based frame
.text:0040C58B
.text:0040C58B sub_40C58B      proc near               ; CODE XREF: _wmain+691↑p
.text:0040C58B
.text:0040C58B pvarg           = VARIANTARG ptr -18h
.text:0040C58B var_8           = dword ptr -8
.text:0040C58B var_4           = dword ptr -4
.text:0040C58B
.text:0040C58B                 mov     edi, edi
.text:0040C58D                 push    ebp
.text:0040C58E                 mov     ebp, esp
.text:0040C590                 sub     esp, 1Ch
.text:0040C593                 mov     eax, ___security_cookie
.text:0040C598                 xor     eax, ebp
.text:0040C59A                 mov     [ebp+var_4], eax
.text:0040C59D                 push    ebx
.text:0040C59E                 push    esi
.text:0040C59F                 push    edi
.text:0040C5A0                 lea     eax, [ebp+pvarg]
.text:0040C5A3                 xor     ebx, ebx
.text:0040C5A5                 push    eax             ; pvarg
.text:0040C5A6                 mov     esi, ecx
.text:0040C5A8                 mov     [ebp+var_8], ebx
.text:0040C5AB                 call    ds:VariantInit
.text:0040C5B1                 mov     eax, [esi]
.text:0040C5B3                 lea     ecx, [ebp+pvarg.anonymous_0+8]
.text:0040C5B6                 push    ecx
.text:0040C5B7                 push    esi
.text:0040C5B8                 mov     esi, [eax+0D0h]
.text:0040C5BE                 mov     ecx, esi
.text:0040C5C0                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040C5C6                 call    esi
.text:0040C5C8                 mov     edi, eax
.text:0040C5CA                 test    edi, edi
.text:0040C5CC                 js      short loc_40C63B
.text:0040C5CE                 mov     edx, dword ptr [ebp+pvarg.anonymous_0+8]
.text:0040C5D1                 lea     eax, [ebp+var_8]
.text:0040C5D4                 push    8
.text:0040C5D6                 pop     esi
.text:0040C5D7                 xor     ecx, ecx
.text:0040C5D9                 mov     word ptr [ebp+pvarg.anonymous_0], si
.text:0040C5DD                 push    eax
.text:0040C5DE                 inc     ecx
.text:0040C5DF                 call    sub_4093C3
.text:0040C5E4                 mov     edi, eax
.text:0040C5E6                 test    edi, edi
.text:0040C5E8                 js      short loc_40C638
.text:0040C5EA                 lea     eax, [ebp+pvarg]
.text:0040C5ED                 push    eax             ; pvarg
.text:0040C5EE                 call    ds:VariantClear
.text:0040C5F4                 push    dword_413C04    ; psz
.text:0040C5FA                 mov     word ptr [ebp+pvarg.anonymous_0], si
.text:0040C5FE                 call    ds:SysAllocString
.text:0040C604                 mov     ebx, [ebp+var_8]
.text:0040C607                 mov     dword ptr [ebp+pvarg.anonymous_0+8], eax
.text:0040C60A                 test    eax, eax
.text:0040C60C                 jnz     short loc_40C615
.text:0040C60E                 mov     edi, 8007000Eh
.text:0040C613                 jmp     short loc_40C63B
.text:0040C615 ; ---------------------------------------------------------------------------
.text:0040C615
.text:0040C615 loc_40C615:                             ; CODE XREF: sub_40C58B+81↑j
.text:0040C615                 mov     eax, [ebx]
.text:0040C617                 lea     esi, [ebp+pvarg]
.text:0040C61A                 sub     esp, 10h
.text:0040C61D                 mov     edi, esp
.text:0040C61F                 push    ebx
.text:0040C620                 movsd
.text:0040C621                 movsd
.text:0040C622                 movsd
.text:0040C623                 movsd
.text:0040C624                 mov     esi, [eax+108h]
.text:0040C62A                 mov     ecx, esi
.text:0040C62C                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040C632                 call    esi
.text:0040C634                 mov     edi, eax
.text:0040C636                 jmp     short loc_40C63B
.text:0040C638 ; ---------------------------------------------------------------------------
.text:0040C638
.text:0040C638 loc_40C638:                             ; CODE XREF: sub_40C58B+5D↑j
.text:0040C638                 mov     ebx, [ebp+var_8]
.text:0040C63B
.text:0040C63B loc_40C63B:                             ; CODE XREF: sub_40C58B+41↑j
.text:0040C63B                                         ; sub_40C58B+88↑j ...
.text:0040C63B                 lea     eax, [ebp+pvarg]
.text:0040C63E                 push    eax             ; pvarg
.text:0040C63F                 call    ds:VariantClear
.text:0040C645                 test    ebx, ebx
.text:0040C647                 jz      short loc_40C659
.text:0040C649                 mov     eax, [ebx]
.text:0040C64B                 push    ebx
.text:0040C64C                 mov     esi, [eax+8]
.text:0040C64F                 mov     ecx, esi
.text:0040C651                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040C657                 call    esi
.text:0040C659
.text:0040C659 loc_40C659:                             ; CODE XREF: sub_40C58B+BC↑j
.text:0040C659                 mov     ecx, [ebp+var_4]
.text:0040C65C                 mov     eax, edi
.text:0040C65E                 pop     edi
.text:0040C65F                 pop     esi
.text:0040C660                 xor     ecx, ebp        ; StackCookie
.text:0040C662                 pop     ebx
.text:0040C663                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040C668                 mov     esp, ebp
.text:0040C66A                 pop     ebp
.text:0040C66B                 retn
.text:0040C66B sub_40C58B      endp
.text:0040C66B
.text:0040C66C
.text:0040C66C ; =============== S U B R O U T I N E =======================================
.text:0040C66C
.text:0040C66C ; Attributes: bp-based frame info_from_lumina
.text:0040C66C
.text:0040C66C ; int __stdcall __high GetDataSet(struct _LOGMAN_NS *, enum GETMODE, struct IDataCollectorSet **, struct IDataCollector **)
.text:0040C66C ?GetDataSet@@YGJPAU_LOGMAN_NS@@W4GETMODE@@PAPAUIDataCollectorSet@@PAPAUIDataCollector@@@Z proc near
.text:0040C66C                                         ; CODE XREF: _wmain+1C1↑p
.text:0040C66C                                         ; _wmain:loc_4086F5↑p ...
.text:0040C66C
.text:0040C66C pvarg           = VARIANTARG ptr -30h
.text:0040C66C var_1C          = dword ptr -1Ch
.text:0040C66C var_18          = dword ptr -18h
.text:0040C66C var_14          = dword ptr -14h
.text:0040C66C var_10          = dword ptr -10h
.text:0040C66C ppv             = dword ptr -0Ch
.text:0040C66C var_8           = dword ptr -8
.text:0040C66C var_4           = dword ptr -4
.text:0040C66C arg_0           = dword ptr  8
.text:0040C66C arg_4           = dword ptr  0Ch
.text:0040C66C
.text:0040C66C                 mov     edi, edi
.text:0040C66E                 push    ebp
.text:0040C66F                 mov     ebp, esp
.text:0040C671                 sub     esp, 34h
.text:0040C674                 mov     eax, ___security_cookie
.text:0040C679                 xor     eax, ebp
.text:0040C67B                 mov     [ebp+var_4], eax
.text:0040C67E                 push    ebx
.text:0040C67F                 push    esi
.text:0040C680                 push    edi
.text:0040C681                 xor     edi, edi
.text:0040C683                 lea     eax, [ebp+pvarg]
.text:0040C686                 mov     ebx, edx
.text:0040C688                 mov     [ebp+ppv], edi
.text:0040C68B                 mov     esi, ecx
.text:0040C68D                 mov     [ebp+var_1C], ebx
.text:0040C690                 push    eax             ; pvarg
.text:0040C691                 mov     [ebp+var_18], esi
.text:0040C694                 mov     [ebp+var_8], edi
.text:0040C697                 mov     [ebp+var_14], edi
.text:0040C69A                 call    ds:VariantInit
.text:0040C6A0                 lea     eax, [ebp+ppv]
.text:0040C6A3                 push    eax             ; ppv
.text:0040C6A4                 push    offset riid     ; riid
.text:0040C6A9                 push    15h             ; dwClsContext
.text:0040C6AB                 push    edi             ; pUnkOuter
.text:0040C6AC                 push    offset rclsid   ; rclsid
.text:0040C6B1                 call    ds:CoCreateInstance
.text:0040C6B7                 mov     edi, eax
.text:0040C6B9                 test    edi, edi
.text:0040C6BB                 js      loc_40C9E4
.text:0040C6C1                 mov     eax, ebx
.text:0040C6C3                 sub     eax, 0
.text:0040C6C6                 jz      short loc_40C6F7
.text:0040C6C8                 sub     eax, 1
.text:0040C6CB                 jnz     short loc_40C71F
.text:0040C6CD                 mov     eax, [ebp+ppv]
.text:0040C6D0                 push    bstrString
.text:0040C6D6                 push    dword ptr [esi+0Ch]
.text:0040C6D9                 mov     ecx, [eax]
.text:0040C6DB                 push    eax
.text:0040C6DC                 mov     esi, [ecx+0ECh]
.text:0040C6E2                 mov     ecx, esi
.text:0040C6E4                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040C6EA                 call    esi
.text:0040C6EC                 mov     edi, eax
.text:0040C6EE                 test    edi, edi
.text:0040C6F0                 jns     short loc_40C71F
.text:0040C6F2                 jmp     loc_40C9E4
.text:0040C6F7 ; ---------------------------------------------------------------------------
.text:0040C6F7
.text:0040C6F7 loc_40C6F7:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+5A↑j
.text:0040C6F7                 cmp     dword_414940, 0
.text:0040C6FE                 jnz     short loc_40C71F
.text:0040C700                 mov     eax, [ebp+ppv]
.text:0040C703                 push    bstrString
.text:0040C709                 push    dword ptr [esi+0Ch]
.text:0040C70C                 mov     ecx, [eax]
.text:0040C70E                 push    eax
.text:0040C70F                 mov     esi, [ecx+0ECh]
.text:0040C715                 mov     ecx, esi
.text:0040C717                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040C71D                 call    esi
.text:0040C71F
.text:0040C71F loc_40C71F:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+5F↑j
.text:0040C71F                                         ; GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+84↑j ...
.text:0040C71F                 mov     eax, [ebp+ppv]
.text:0040C722                 lea     edx, [ebp+var_14]
.text:0040C725                 push    edx
.text:0040C726                 push    eax
.text:0040C727                 mov     ecx, [eax]
.text:0040C729                 mov     esi, [ecx+1Ch]
.text:0040C72C                 mov     ecx, esi
.text:0040C72E                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040C734                 call    esi
.text:0040C736                 mov     edi, eax
.text:0040C738                 test    edi, edi
.text:0040C73A                 js      loc_40C9E4
.text:0040C740                 mov     eax, [ebp+var_18]
.text:0040C743                 push    8
.text:0040C745                 pop     esi
.text:0040C746                 push    3
.text:0040C748                 cmp     dword ptr [eax+8], 0
.text:0040C74C                 pop     ebx
.text:0040C74D                 jnz     short loc_40C759
.text:0040C74F                 and     dword ptr [ebp+pvarg.anonymous_0+8], 0
.text:0040C753                 mov     word ptr [ebp+pvarg.anonymous_0], bx
.text:0040C757                 jmp     short loc_40C777
.text:0040C759 ; ---------------------------------------------------------------------------
.text:0040C759
.text:0040C759 loc_40C759:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+E1↑j
.text:0040C759                 push    dword ptr [eax+8] ; psz
.text:0040C75C                 call    ds:SysAllocString
.text:0040C762                 mov     dword ptr [ebp+pvarg.anonymous_0+8], eax
.text:0040C765                 test    eax, eax
.text:0040C767                 jnz     short loc_40C773
.text:0040C769
.text:0040C769 loc_40C769:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+212↓j
.text:0040C769                 mov     edi, 8007000Eh
.text:0040C76E                 jmp     loc_40C9E4
.text:0040C773 ; ---------------------------------------------------------------------------
.text:0040C773
.text:0040C773 loc_40C773:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+FB↑j
.text:0040C773                 mov     word ptr [ebp+pvarg.anonymous_0], si
.text:0040C777
.text:0040C777 loc_40C777:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+EB↑j
.text:0040C777                 cmp     [ebp+var_1C], 0
.text:0040C77B                 jnz     short loc_40C786
.text:0040C77D                 mov     eax, dword_414F00
.text:0040C782                 test    eax, eax
.text:0040C784                 jz      short loc_40C7EA
.text:0040C786
.text:0040C786 loc_40C786:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+10F↑j
.text:0040C786                 mov     eax, [ebp+var_14]
.text:0040C789                 lea     ecx, [ebp+var_8]
.text:0040C78C                 push    ecx
.text:0040C78D                 sub     esp, 10h
.text:0040C790                 lea     esi, [ebp+pvarg]
.text:0040C793                 mov     edi, esp
.text:0040C795                 mov     ebx, [eax]
.text:0040C797                 push    eax
.text:0040C798                 movsd
.text:0040C799                 mov     ecx, [ebx+20h]
.text:0040C79C                 movsd
.text:0040C79D                 movsd
.text:0040C79E                 movsd
.text:0040C79F                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040C7A5                 call    dword ptr [ebx+20h]
.text:0040C7A8                 mov     edi, eax
.text:0040C7AA                 mov     eax, [ebp+var_18]
.text:0040C7AD                 cmp     dword ptr [eax+8], 0
.text:0040C7B1                 jz      short loc_40C7BD
.text:0040C7B3                 test    edi, edi
.text:0040C7B5                 js      loc_40C9E4
.text:0040C7BB                 jmp     short loc_40C7BF
.text:0040C7BD ; ---------------------------------------------------------------------------
.text:0040C7BD
.text:0040C7BD loc_40C7BD:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+145↑j
.text:0040C7BD                 xor     edi, edi
.text:0040C7BF
.text:0040C7BF loc_40C7BF:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+14F↑j
.text:0040C7BF                 mov     ebx, [ebp+var_1C]
.text:0040C7C2                 mov     eax, dword_414F00
.text:0040C7C7                 cmp     ebx, 2
.text:0040C7CA                 jz      short loc_40C7E7
.text:0040C7CC                 test    ebx, ebx
.text:0040C7CE                 jnz     short loc_40C7D4
.text:0040C7D0                 test    eax, eax
.text:0040C7D2                 jz      short loc_40C7E7
.text:0040C7D4
.text:0040C7D4 loc_40C7D4:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+162↑j
.text:0040C7D4                 mov     edx, [ebp+var_8]
.text:0040C7D7                 test    eax, eax
.text:0040C7D9                 jz      loc_40C8F8
.text:0040C7DF                 test    edx, edx
.text:0040C7E1                 jnz     loc_40C8F8
.text:0040C7E7
.text:0040C7E7 loc_40C7E7:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+15E↑j
.text:0040C7E7                                         ; GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+166↑j
.text:0040C7E7                 push    3
.text:0040C7E9                 pop     ebx
.text:0040C7EA
.text:0040C7EA loc_40C7EA:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+118↑j
.text:0040C7EA                 cmp     dword_414AC0, 0
.text:0040C7F1                 jnz     short loc_40C834
.text:0040C7F3                 cmp     dword_414A60, 0
.text:0040C7FA                 jnz     short loc_40C831
.text:0040C7FC                 test    eax, eax
.text:0040C7FE                 jnz     short loc_40C831
.text:0040C800                 cmp     dword_413450, eax
.text:0040C806                 jz      short loc_40C80C
.text:0040C808                 xor     ebx, ebx
.text:0040C80A                 jmp     short loc_40C834
.text:0040C80C ; ---------------------------------------------------------------------------
.text:0040C80C
.text:0040C80C loc_40C80C:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+19A↑j
.text:0040C80C                 cmp     dword_4143D0, 0
.text:0040C813                 jz      short loc_40C81A
.text:0040C815                 push    2
.text:0040C817
.text:0040C817 loc_40C817:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+1B9↓j
.text:0040C817                 pop     ebx
.text:0040C818                 jmp     short loc_40C834
.text:0040C81A ; ---------------------------------------------------------------------------
.text:0040C81A
.text:0040C81A loc_40C81A:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+1A7↑j
.text:0040C81A                 cmp     dword_4146E0, 0
.text:0040C821                 jz      short loc_40C827
.text:0040C823                 push    4
.text:0040C825                 jmp     short loc_40C817
.text:0040C827 ; ---------------------------------------------------------------------------
.text:0040C827
.text:0040C827 loc_40C827:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+1B5↑j
.text:0040C827                 mov     edi, 80004002h
.text:0040C82C                 jmp     loc_40C9E4
.text:0040C831 ; ---------------------------------------------------------------------------
.text:0040C831
.text:0040C831 loc_40C831:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+18E↑j
.text:0040C831                                         ; GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+192↑j
.text:0040C831                 xor     ebx, ebx
.text:0040C833                 inc     ebx
.text:0040C834
.text:0040C834 loc_40C834:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+185↑j
.text:0040C834                                         ; GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+19E↑j ...
.text:0040C834                 mov     eax, [ebp+var_14]
.text:0040C837                 lea     ecx, [ebp+var_8]
.text:0040C83A                 push    ecx
.text:0040C83B                 mov     [ebp+var_10], ebx
.text:0040C83E                 push    ebx
.text:0040C83F                 mov     esi, [eax]
.text:0040C841                 push    eax
.text:0040C842                 mov     ecx, [esi+3Ch]
.text:0040C845                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040C84B                 call    dword ptr [esi+3Ch]
.text:0040C84E                 mov     edi, eax
.text:0040C850                 test    edi, edi
.text:0040C852                 js      loc_40C9E4
.text:0040C858                 push    8
.text:0040C85A                 pop     esi
.text:0040C85B                 cmp     word ptr [ebp+pvarg.anonymous_0], si
.text:0040C85F                 jz      short loc_40C88A
.text:0040C861                 lea     eax, [ebp+pvarg]
.text:0040C864                 push    eax             ; pvarg
.text:0040C865                 call    ds:VariantClear
.text:0040C86B                 mov     eax, [ebp+var_18]
.text:0040C86E                 push    dword ptr [eax+4] ; psz
.text:0040C871                 call    ds:SysAllocString
.text:0040C877                 mov     edx, eax
.text:0040C879                 mov     dword ptr [ebp+pvarg.anonymous_0+8], edx
.text:0040C87C                 test    edx, edx
.text:0040C87E                 jz      loc_40C769
.text:0040C884                 mov     word ptr [ebp+pvarg.anonymous_0], si
.text:0040C888                 jmp     short loc_40C88D
.text:0040C88A ; ---------------------------------------------------------------------------
.text:0040C88A
.text:0040C88A loc_40C88A:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+1F3↑j
.text:0040C88A                 mov     edx, dword ptr [ebp+pvarg.anonymous_0+8]
.text:0040C88D
.text:0040C88D loc_40C88D:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+21C↑j
.text:0040C88D                 mov     eax, [ebp+var_8]
.text:0040C890                 push    edx
.text:0040C891                 push    eax
.text:0040C892                 mov     ecx, [eax]
.text:0040C894                 mov     esi, [ecx+64h]
.text:0040C897                 mov     ecx, esi
.text:0040C899                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040C89F                 call    esi
.text:0040C8A1                 mov     edi, eax
.text:0040C8A3                 test    edi, edi
.text:0040C8A5                 js      loc_40C9E4
.text:0040C8AB                 mov     eax, [ebp+var_8]
.text:0040C8AE                 push    200h
.text:0040C8B3                 push    eax
.text:0040C8B4                 mov     ecx, [eax]
.text:0040C8B6                 mov     esi, [ecx+34h]
.text:0040C8B9                 mov     ecx, esi
.text:0040C8BB                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040C8C1                 call    esi
.text:0040C8C3                 mov     edi, eax
.text:0040C8C5                 test    edi, edi
.text:0040C8C7                 js      loc_40C9E4
.text:0040C8CD                 mov     eax, [ebp+var_14]
.text:0040C8D0                 push    [ebp+var_8]
.text:0040C8D3                 push    eax
.text:0040C8D4                 mov     ecx, [eax]
.text:0040C8D6                 mov     esi, [ecx+28h]
.text:0040C8D9                 mov     ecx, esi
.text:0040C8DB                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040C8E1                 call    esi
.text:0040C8E3                 mov     edi, eax
.text:0040C8E5                 test    edi, edi
.text:0040C8E7                 js      loc_40C9E4
.text:0040C8ED                 mov     edx, [ebp+var_8]
.text:0040C8F0                 mov     eax, dword_414F00
.text:0040C8F5                 mov     ebx, [ebp+var_1C]
.text:0040C8F8
.text:0040C8F8 loc_40C8F8:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+16D↑j
.text:0040C8F8                                         ; GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+175↑j
.text:0040C8F8                 cmp     dword_4131A0, 0
.text:0040C8FF                 jz      loc_40C99B
.text:0040C905                 test    eax, eax
.text:0040C907                 jnz     short loc_40C975
.text:0040C909                 test    edx, edx
.text:0040C90B                 jnz     short loc_40C917
.text:0040C90D                 mov     edi, 80070490h
.text:0040C912                 jmp     loc_40C9E4
.text:0040C917 ; ---------------------------------------------------------------------------
.text:0040C917
.text:0040C917 loc_40C917:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+29F↑j
.text:0040C917                 mov     eax, [edx]
.text:0040C919                 lea     ecx, [ebp+var_10]
.text:0040C91C                 push    ecx
.text:0040C91D                 push    edx
.text:0040C91E                 mov     esi, [eax+24h]
.text:0040C921                 mov     ecx, esi
.text:0040C923                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040C929                 call    esi
.text:0040C92B                 mov     edi, eax
.text:0040C92D                 test    edi, edi
.text:0040C92F                 js      loc_40C9E4
.text:0040C935                 mov     eax, [ebp+var_10]
.text:0040C938                 sub     eax, 0
.text:0040C93B                 jz      short loc_40C981
.text:0040C93D                 sub     eax, 1
.text:0040C940                 jz      short loc_40C975
.text:0040C942                 sub     eax, 1
.text:0040C945                 jz      short loc_40C969
.text:0040C947                 sub     eax, 1
.text:0040C94A                 jz      short loc_40C95D
.text:0040C94C                 sub     eax, 1
.text:0040C94F                 jnz     short loc_40C98B
.text:0040C951                 mov     dword_4146E0, 1
.text:0040C95B                 jmp     short loc_40C98B
.text:0040C95D ; ---------------------------------------------------------------------------
.text:0040C95D
.text:0040C95D loc_40C95D:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+2DE↑j
.text:0040C95D                 mov     dword_414AC0, 1
.text:0040C967                 jmp     short loc_40C98B
.text:0040C969 ; ---------------------------------------------------------------------------
.text:0040C969
.text:0040C969 loc_40C969:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+2D9↑j
.text:0040C969                 mov     dword_4143D0, 1
.text:0040C973                 jmp     short loc_40C98B
.text:0040C975 ; ---------------------------------------------------------------------------
.text:0040C975
.text:0040C975 loc_40C975:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+29B↑j
.text:0040C975                                         ; GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+2D4↑j
.text:0040C975                 mov     dword_414A60, 1
.text:0040C97F                 jmp     short loc_40C98B
.text:0040C981 ; ---------------------------------------------------------------------------
.text:0040C981
.text:0040C981 loc_40C981:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+2CF↑j
.text:0040C981                 mov     dword_413450, 1
.text:0040C98B
.text:0040C98B loc_40C98B:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+2E3↑j
.text:0040C98B                                         ; GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+2EF↑j ...
.text:0040C98B                 xor     ecx, ecx
.text:0040C98D                 call    ?ArgApplyRules@@YGJH@Z ; ArgApplyRules(int)
.text:0040C992                 mov     edi, eax
.text:0040C994                 test    edi, edi
.text:0040C996                 js      short loc_40C9E4
.text:0040C998                 mov     edx, [ebp+var_8]
.text:0040C99B
.text:0040C99B loc_40C99B:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+293↑j
.text:0040C99B                 cmp     ebx, 2
.text:0040C99E                 jnz     short loc_40C9E4
.text:0040C9A0                 mov     ecx, [ebp+ppv]
.text:0040C9A3                 call    sub_40BF14
.text:0040C9A8                 mov     edi, eax
.text:0040C9AA                 test    edi, edi
.text:0040C9AC                 js      short loc_40C9E4
.text:0040C9AE                 cmp     dword_414F00, 0
.text:0040C9B5                 jz      short loc_40C9C0
.text:0040C9B7                 cmp     dword_413C50, 0
.text:0040C9BE                 jnz     short loc_40C9E4
.text:0040C9C0
.text:0040C9C0 loc_40C9C0:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+349↑j
.text:0040C9C0                 mov     eax, [ebp+ppv]
.text:0040C9C3                 mov     edx, [ebp+var_18]
.text:0040C9C6                 push    bstrString
.text:0040C9CC                 mov     ecx, [eax]
.text:0040C9CE                 push    dword ptr [edx+0Ch]
.text:0040C9D1                 push    eax
.text:0040C9D2                 mov     esi, [ecx+0ECh]
.text:0040C9D8                 mov     ecx, esi
.text:0040C9DA                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040C9E0                 call    esi
.text:0040C9E2                 mov     edi, eax
.text:0040C9E4
.text:0040C9E4 loc_40C9E4:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+4F↑j
.text:0040C9E4                                         ; GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+86↑j ...
.text:0040C9E4                 lea     eax, [ebp+pvarg]
.text:0040C9E7                 push    eax             ; pvarg
.text:0040C9E8                 call    ds:VariantClear
.text:0040C9EE                 mov     ecx, [ebp+var_14]
.text:0040C9F1                 test    ecx, ecx
.text:0040C9F3                 jz      short loc_40CA09
.text:0040C9F5                 mov     eax, [ecx]
.text:0040C9F7                 push    ecx
.text:0040C9F8                 mov     esi, [eax+8]
.text:0040C9FB                 mov     ecx, esi
.text:0040C9FD                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040CA03                 call    esi
.text:0040CA05                 and     [ebp+var_14], 0
.text:0040CA09
.text:0040CA09 loc_40CA09:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+387↑j
.text:0040CA09                 test    edi, edi
.text:0040CA0B                 jns     short loc_40CA2D
.text:0040CA0D                 mov     ecx, [ebp+var_8]
.text:0040CA10                 test    ecx, ecx
.text:0040CA12                 jz      short loc_40CA28
.text:0040CA14                 mov     eax, [ecx]
.text:0040CA16                 push    ecx
.text:0040CA17                 mov     esi, [eax+8]
.text:0040CA1A                 mov     ecx, esi
.text:0040CA1C                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040CA22                 call    esi
.text:0040CA24                 and     [ebp+var_8], 0
.text:0040CA28
.text:0040CA28 loc_40CA28:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+3A6↑j
.text:0040CA28                 mov     ecx, [ebp+ppv]
.text:0040CA2B                 jmp     short loc_40CA46
.text:0040CA2D ; ---------------------------------------------------------------------------
.text:0040CA2D
.text:0040CA2D loc_40CA2D:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+39F↑j
.text:0040CA2D                 mov     ecx, [ebp+arg_0]
.text:0040CA30                 mov     eax, [ebp+ppv]
.text:0040CA33                 mov     [ecx], eax
.text:0040CA35                 mov     ecx, [ebp+arg_4]
.text:0040CA38                 test    ecx, ecx
.text:0040CA3A                 jz      short loc_40CA43
.text:0040CA3C                 mov     eax, [ebp+var_8]
.text:0040CA3F                 mov     [ecx], eax
.text:0040CA41                 jmp     short loc_40CA5A
.text:0040CA43 ; ---------------------------------------------------------------------------
.text:0040CA43
.text:0040CA43 loc_40CA43:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+3CE↑j
.text:0040CA43                 mov     ecx, [ebp+var_8]
.text:0040CA46
.text:0040CA46 loc_40CA46:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+3BF↑j
.text:0040CA46                 test    ecx, ecx
.text:0040CA48                 jz      short loc_40CA5A
.text:0040CA4A                 mov     eax, [ecx]
.text:0040CA4C                 push    ecx
.text:0040CA4D                 mov     esi, [eax+8]
.text:0040CA50                 mov     ecx, esi
.text:0040CA52                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040CA58                 call    esi
.text:0040CA5A
.text:0040CA5A loc_40CA5A:                             ; CODE XREF: GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+3D5↑j
.text:0040CA5A                                         ; GetDataSet(_LOGMAN_NS *,GETMODE,IDataCollectorSet * *,IDataCollector * *)+3DC↑j
.text:0040CA5A                 mov     ecx, [ebp+var_4]
.text:0040CA5D                 mov     eax, edi
.text:0040CA5F                 pop     edi
.text:0040CA60                 pop     esi
.text:0040CA61                 xor     ecx, ebp        ; StackCookie
.text:0040CA63                 pop     ebx
.text:0040CA64                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040CA69                 mov     esp, ebp
.text:0040CA6B                 pop     ebp
.text:0040CA6C                 retn    8
.text:0040CA6C ?GetDataSet@@YGJPAU_LOGMAN_NS@@W4GETMODE@@PAPAUIDataCollectorSet@@PAPAUIDataCollector@@@Z endp
.text:0040CA6C
.text:0040CA6F
.text:0040CA6F ; =============== S U B R O U T I N E =======================================
.text:0040CA6F
.text:0040CA6F ; Attributes: bp-based frame
.text:0040CA6F
.text:0040CA6F ; int __thiscall sub_40CA6F(OLECHAR *psz)
.text:0040CA6F sub_40CA6F      proc near               ; CODE XREF: _wmain+43B↑p
.text:0040CA6F
.text:0040CA6F var_C           = dword ptr -0Ch
.text:0040CA6F ppv             = dword ptr -8
.text:0040CA6F var_4           = dword ptr -4
.text:0040CA6F
.text:0040CA6F                 mov     edi, edi
.text:0040CA71                 push    ebp
.text:0040CA72                 mov     ebp, esp
.text:0040CA74                 sub     esp, 0Ch
.text:0040CA77                 mov     eax, ___security_cookie
.text:0040CA7C                 xor     eax, ebp
.text:0040CA7E                 mov     [ebp+var_4], eax
.text:0040CA81                 and     [ebp+ppv], 0
.text:0040CA85                 lea     eax, [ebp+ppv]
.text:0040CA88                 push    ebx
.text:0040CA89                 push    esi
.text:0040CA8A                 push    edi
.text:0040CA8B                 push    eax             ; ppv
.text:0040CA8C                 push    offset stru_403598 ; riid
.text:0040CA91                 push    15h             ; dwClsContext
.text:0040CA93                 xor     edi, edi
.text:0040CA95                 mov     [ebp+var_C], edx
.text:0040CA98                 push    edi             ; pUnkOuter
.text:0040CA99                 push    offset stru_403538 ; rclsid
.text:0040CA9E                 mov     esi, ecx
.text:0040CAA0                 call    ds:CoCreateInstance
.text:0040CAA6                 mov     ebx, eax
.text:0040CAA8                 test    ebx, ebx
.text:0040CAAA                 js      short loc_40CABE
.text:0040CAAC                 push    esi             ; psz
.text:0040CAAD                 call    ds:SysAllocString
.text:0040CAB3                 mov     edi, eax
.text:0040CAB5                 test    edi, edi
.text:0040CAB7                 jnz     short loc_40CAF7
.text:0040CAB9                 mov     ebx, 8007000Eh
.text:0040CABE
.text:0040CABE loc_40CABE:                             ; CODE XREF: sub_40CA6F+3B↑j
.text:0040CABE                                         ; sub_40CA6F+A6↓j ...
.text:0040CABE                 mov     ecx, [ebp+ppv]
.text:0040CAC1
.text:0040CAC1 loc_40CAC1:                             ; CODE XREF: sub_40CA6F+D2↓j
.text:0040CAC1                 test    ecx, ecx
.text:0040CAC3                 jz      short loc_40CAD9
.text:0040CAC5                 mov     eax, [ecx]
.text:0040CAC7                 push    ecx
.text:0040CAC8                 mov     esi, [eax+8]
.text:0040CACB                 mov     ecx, esi
.text:0040CACD                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040CAD3                 call    esi
.text:0040CAD5                 and     [ebp+ppv], 0
.text:0040CAD9
.text:0040CAD9 loc_40CAD9:                             ; CODE XREF: sub_40CA6F+54↑j
.text:0040CAD9                 test    edi, edi
.text:0040CADB                 jz      short loc_40CAE4
.text:0040CADD                 push    edi             ; bstrString
.text:0040CADE                 call    ds:SysFreeString
.text:0040CAE4
.text:0040CAE4 loc_40CAE4:                             ; CODE XREF: sub_40CA6F+6C↑j
.text:0040CAE4                 mov     ecx, [ebp+var_4]
.text:0040CAE7                 mov     eax, ebx
.text:0040CAE9                 pop     edi
.text:0040CAEA                 pop     esi
.text:0040CAEB                 xor     ecx, ebp        ; StackCookie
.text:0040CAED                 pop     ebx
.text:0040CAEE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040CAF3                 mov     esp, ebp
.text:0040CAF5                 pop     ebp
.text:0040CAF6                 retn
.text:0040CAF7 ; ---------------------------------------------------------------------------
.text:0040CAF7
.text:0040CAF7 loc_40CAF7:                             ; CODE XREF: sub_40CA6F+48↑j
.text:0040CAF7                 mov     eax, [ebp+ppv]
.text:0040CAFA                 push    bstrString
.text:0040CB00                 push    edi
.text:0040CB01                 mov     ecx, [eax]
.text:0040CB03                 push    eax
.text:0040CB04                 mov     esi, [ecx+54h]
.text:0040CB07                 mov     ecx, esi
.text:0040CB09                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040CB0F                 call    esi
.text:0040CB11                 mov     ebx, eax
.text:0040CB13                 test    ebx, ebx
.text:0040CB15                 js      short loc_40CABE
.text:0040CB17                 mov     eax, [ebp+ppv]
.text:0040CB1A                 push    [ebp+var_C]
.text:0040CB1D                 push    eax
.text:0040CB1E                 mov     ecx, [eax]
.text:0040CB20                 mov     esi, [ecx+1Ch]
.text:0040CB23                 mov     ecx, esi
.text:0040CB25                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040CB2B                 call    esi
.text:0040CB2D                 mov     ebx, eax
.text:0040CB2F                 test    ebx, ebx
.text:0040CB31                 js      short loc_40CABE
.text:0040CB33                 mov     ecx, [ebp+var_C]
.text:0040CB36                 mov     eax, [ebp+ppv]
.text:0040CB39                 mov     [ecx+4], eax
.text:0040CB3C                 xor     ecx, ecx
.text:0040CB3E                 mov     [ebp+ppv], ecx
.text:0040CB41                 jmp     loc_40CAC1
.text:0040CB41 sub_40CA6F      endp
.text:0040CB41
.text:0040CB46
.text:0040CB46 ; =============== S U B R O U T I N E =======================================
.text:0040CB46
.text:0040CB46 ; Attributes: bp-based frame
.text:0040CB46
.text:0040CB46 sub_40CB46      proc near               ; CODE XREF: _wmain+412↑p
.text:0040CB46
.text:0040CB46 ppv             = dword ptr -8
.text:0040CB46 var_4           = dword ptr -4
.text:0040CB46
.text:0040CB46                 mov     edi, edi
.text:0040CB48                 push    ebp
.text:0040CB49                 mov     ebp, esp
.text:0040CB4B                 push    ecx
.text:0040CB4C                 push    ecx
.text:0040CB4D                 mov     eax, ___security_cookie
.text:0040CB52                 xor     eax, ebp
.text:0040CB54                 mov     [ebp+var_4], eax
.text:0040CB57                 and     [ebp+ppv], 0
.text:0040CB5B                 lea     eax, [ebp+ppv]
.text:0040CB5E                 push    ebx
.text:0040CB5F                 push    esi
.text:0040CB60                 push    edi
.text:0040CB61                 push    eax             ; ppv
.text:0040CB62                 push    offset stru_4035C8 ; riid
.text:0040CB67                 push    15h             ; dwClsContext
.text:0040CB69                 push    0               ; pUnkOuter
.text:0040CB6B                 push    offset stru_403588 ; rclsid
.text:0040CB70                 mov     ebx, ecx
.text:0040CB72                 call    ds:CoCreateInstance
.text:0040CB78                 mov     edi, eax
.text:0040CB7A                 test    edi, edi
.text:0040CB7C                 js      short loc_40CBAC
.text:0040CB7E                 cmp     dword_413570, 0
.text:0040CB85                 mov     eax, [ebp+ppv]
.text:0040CB88                 mov     ecx, [eax]
.text:0040CB8A                 jz      short loc_40CBD6
.text:0040CB8C                 push    dword_413584
.text:0040CB92                 mov     esi, [ecx+40h]
.text:0040CB95                 mov     ecx, esi
.text:0040CB97                 push    bstrString
.text:0040CB9D                 push    eax
.text:0040CB9E                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040CBA4                 call    esi
.text:0040CBA6                 mov     edi, eax
.text:0040CBA8                 test    edi, edi
.text:0040CBAA                 jns     short loc_40CBEC
.text:0040CBAC
.text:0040CBAC loc_40CBAC:                             ; CODE XREF: sub_40CB46+36↑j
.text:0040CBAC                                         ; sub_40CB46+A8↓j
.text:0040CBAC                 mov     ecx, [ebp+ppv]
.text:0040CBAF                 test    ecx, ecx
.text:0040CBB1                 jz      short loc_40CBC3
.text:0040CBB3                 mov     eax, [ecx]
.text:0040CBB5                 push    ecx
.text:0040CBB6                 mov     esi, [eax+8]
.text:0040CBB9                 mov     ecx, esi
.text:0040CBBB                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040CBC1                 call    esi
.text:0040CBC3
.text:0040CBC3 loc_40CBC3:                             ; CODE XREF: sub_40CB46+6B↑j
.text:0040CBC3                                         ; sub_40CB46+AF↓j
.text:0040CBC3                 mov     ecx, [ebp+var_4]
.text:0040CBC6                 mov     eax, edi
.text:0040CBC8                 pop     edi
.text:0040CBC9                 pop     esi
.text:0040CBCA                 xor     ecx, ebp        ; StackCookie
.text:0040CBCC                 pop     ebx
.text:0040CBCD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040CBD2                 mov     esp, ebp
.text:0040CBD4                 pop     ebp
.text:0040CBD5                 retn
.text:0040CBD6 ; ---------------------------------------------------------------------------
.text:0040CBD6
.text:0040CBD6 loc_40CBD6:                             ; CODE XREF: sub_40CB46+44↑j
.text:0040CBD6                 push    bstrString
.text:0040CBDC                 mov     esi, [ecx+3Ch]
.text:0040CBDF                 mov     ecx, esi
.text:0040CBE1                 push    eax
.text:0040CBE2                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040CBE8                 call    esi
.text:0040CBEA                 mov     edi, eax
.text:0040CBEC
.text:0040CBEC loc_40CBEC:                             ; CODE XREF: sub_40CB46+64↑j
.text:0040CBEC                 test    edi, edi
.text:0040CBEE                 js      short loc_40CBAC
.text:0040CBF0                 mov     eax, [ebp+ppv]
.text:0040CBF3                 mov     [ebx], eax
.text:0040CBF5                 jmp     short loc_40CBC3
.text:0040CBF5 sub_40CB46      endp
.text:0040CBF5
.text:0040CBF7
.text:0040CBF7 ; =============== S U B R O U T I N E =======================================
.text:0040CBF7
.text:0040CBF7 ; Attributes: bp-based frame
.text:0040CBF7
.text:0040CBF7 sub_40CBF7      proc near               ; CODE XREF: DisplayDataSets(_LOGMAN_NS *)+225↓p
.text:0040CBF7
.text:0040CBF7 var_28          = word ptr -28h
.text:0040CBF7 var_20          = dword ptr -20h
.text:0040CBF7 var_18          = dword ptr -18h
.text:0040CBF7 var_14          = dword ptr -14h
.text:0040CBF7 var_10          = dword ptr -10h
.text:0040CBF7 var_C           = dword ptr -0Ch
.text:0040CBF7 var_8           = dword ptr -8
.text:0040CBF7 var_4           = dword ptr -4
.text:0040CBF7
.text:0040CBF7                 mov     edi, edi
.text:0040CBF9                 push    ebp
.text:0040CBFA                 mov     ebp, esp
.text:0040CBFC                 sub     esp, 28h
.text:0040CBFF                 mov     eax, ___security_cookie
.text:0040CC04                 xor     eax, ebp
.text:0040CC06                 mov     [ebp+var_4], eax
.text:0040CC09                 mov     eax, [ecx]
.text:0040CC0B                 and     [ebp+var_8], 0
.text:0040CC0F                 and     [ebp+var_C], 0
.text:0040CC13                 push    ebx
.text:0040CC14                 push    esi
.text:0040CC15                 mov     esi, [eax+1Ch]
.text:0040CC18                 mov     ebx, edx
.text:0040CC1A                 push    edi
.text:0040CC1B                 lea     edx, [ebp+var_8]
.text:0040CC1E                 mov     [ebp+var_18], ebx
.text:0040CC21                 push    edx
.text:0040CC22                 push    ecx
.text:0040CC23                 mov     ecx, esi
.text:0040CC25                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040CC2B                 call    esi
.text:0040CC2D                 mov     edi, eax
.text:0040CC2F                 test    edi, edi
.text:0040CC31                 js      loc_40CD05
.text:0040CC37                 mov     eax, [ebp+var_8]
.text:0040CC3A                 lea     edx, [ebp+var_14]
.text:0040CC3D                 push    edx
.text:0040CC3E                 push    eax
.text:0040CC3F                 mov     ecx, [eax]
.text:0040CC41                 mov     esi, [ecx+1Ch]
.text:0040CC44                 mov     ecx, esi
.text:0040CC46                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040CC4C                 call    esi
.text:0040CC4E                 mov     edi, eax
.text:0040CC50                 test    edi, edi
.text:0040CC52                 js      loc_40CD05
.text:0040CC58                 cmp     [ebp+var_14], 1
.text:0040CC5C                 jnz     short loc_40CCB6
.text:0040CC5E                 and     [ebp+var_20], 0
.text:0040CC62                 lea     ecx, [ebp+var_C]
.text:0040CC65                 push    3
.text:0040CC67                 pop     eax
.text:0040CC68                 push    ecx
.text:0040CC69                 sub     esp, 10h
.text:0040CC6C                 mov     [ebp+var_28], ax
.text:0040CC70                 mov     eax, [ebp+var_8]
.text:0040CC73                 lea     esi, [ebp+var_28]
.text:0040CC76                 mov     edi, esp
.text:0040CC78                 push    eax
.text:0040CC79                 mov     ebx, [eax]
.text:0040CC7B                 movsd
.text:0040CC7C                 mov     ecx, [ebx+20h]
.text:0040CC7F                 movsd
.text:0040CC80                 movsd
.text:0040CC81                 movsd
.text:0040CC82                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040CC88                 call    dword ptr [ebx+20h]
.text:0040CC8B                 mov     edi, eax
.text:0040CC8D                 test    edi, edi
.text:0040CC8F                 js      short loc_40CD05
.text:0040CC91                 mov     eax, [ebp+var_C]
.text:0040CC94                 lea     edx, [ebp+var_10]
.text:0040CC97                 push    edx
.text:0040CC98                 push    eax
.text:0040CC99                 mov     ecx, [eax]
.text:0040CC9B                 mov     esi, [ecx+24h]
.text:0040CC9E                 mov     ecx, esi
.text:0040CCA0                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040CCA6                 call    esi
.text:0040CCA8                 mov     edi, eax
.text:0040CCAA                 test    edi, edi
.text:0040CCAC                 js      short loc_40CD05
.text:0040CCAE                 mov     eax, [ebp+var_10]
.text:0040CCB1                 mov     ebx, [ebp+var_18]
.text:0040CCB4                 jmp     short loc_40CCBE
.text:0040CCB6 ; ---------------------------------------------------------------------------
.text:0040CCB6
.text:0040CCB6 loc_40CCB6:                             ; CODE XREF: sub_40CBF7+65↑j
.text:0040CCB6                 mov     eax, 0FFh
.text:0040CCBB                 mov     [ebp+var_10], eax
.text:0040CCBE
.text:0040CCBE loc_40CCBE:                             ; CODE XREF: sub_40CBF7+BD↑j
.text:0040CCBE                 sub     eax, 0
.text:0040CCC1                 jz      short loc_40CCFF
.text:0040CCC3                 sub     eax, 1
.text:0040CCC6                 jz      short loc_40CCF7
.text:0040CCC8                 sub     eax, 1
.text:0040CCCB                 jz      short loc_40CCEF
.text:0040CCCD                 sub     eax, 1
.text:0040CCD0                 jz      short loc_40CCE7
.text:0040CCD2                 sub     eax, 1
.text:0040CCD5                 jz      short loc_40CCDF
.text:0040CCD7                 mov     dword ptr [ebx], 286h
.text:0040CCDD                 jmp     short loc_40CD05
.text:0040CCDF ; ---------------------------------------------------------------------------
.text:0040CCDF
.text:0040CCDF loc_40CCDF:                             ; CODE XREF: sub_40CBF7+DE↑j
.text:0040CCDF                 mov     dword ptr [ebx], 28Bh
.text:0040CCE5                 jmp     short loc_40CD05
.text:0040CCE7 ; ---------------------------------------------------------------------------
.text:0040CCE7
.text:0040CCE7 loc_40CCE7:                             ; CODE XREF: sub_40CBF7+D9↑j
.text:0040CCE7                 mov     dword ptr [ebx], 25Fh
.text:0040CCED                 jmp     short loc_40CD05
.text:0040CCEF ; ---------------------------------------------------------------------------
.text:0040CCEF
.text:0040CCEF loc_40CCEF:                             ; CODE XREF: sub_40CBF7+D4↑j
.text:0040CCEF                 mov     dword ptr [ebx], 285h
.text:0040CCF5                 jmp     short loc_40CD05
.text:0040CCF7 ; ---------------------------------------------------------------------------
.text:0040CCF7
.text:0040CCF7 loc_40CCF7:                             ; CODE XREF: sub_40CBF7+CF↑j
.text:0040CCF7                 mov     dword ptr [ebx], 25Eh
.text:0040CCFD                 jmp     short loc_40CD05
.text:0040CCFF ; ---------------------------------------------------------------------------
.text:0040CCFF
.text:0040CCFF loc_40CCFF:                             ; CODE XREF: sub_40CBF7+CA↑j
.text:0040CCFF                 mov     dword ptr [ebx], 25Dh
.text:0040CD05
.text:0040CD05 loc_40CD05:                             ; CODE XREF: sub_40CBF7+3A↑j
.text:0040CD05                                         ; sub_40CBF7+5B↑j ...
.text:0040CD05                 mov     ecx, [ebp+var_8]
.text:0040CD08                 test    ecx, ecx
.text:0040CD0A                 jz      short loc_40CD20
.text:0040CD0C                 mov     eax, [ecx]
.text:0040CD0E                 push    ecx
.text:0040CD0F                 mov     esi, [eax+8]
.text:0040CD12                 mov     ecx, esi
.text:0040CD14                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040CD1A                 call    esi
.text:0040CD1C                 and     [ebp+var_8], 0
.text:0040CD20
.text:0040CD20 loc_40CD20:                             ; CODE XREF: sub_40CBF7+113↑j
.text:0040CD20                 mov     ecx, [ebp+var_C]
.text:0040CD23                 test    ecx, ecx
.text:0040CD25                 jz      short loc_40CD37
.text:0040CD27                 mov     eax, [ecx]
.text:0040CD29                 push    ecx
.text:0040CD2A                 mov     esi, [eax+8]
.text:0040CD2D                 mov     ecx, esi
.text:0040CD2F                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040CD35                 call    esi
.text:0040CD37
.text:0040CD37 loc_40CD37:                             ; CODE XREF: sub_40CBF7+12E↑j
.text:0040CD37                 mov     ecx, [ebp+var_4]
.text:0040CD3A                 mov     eax, edi
.text:0040CD3C                 pop     edi
.text:0040CD3D                 pop     esi
.text:0040CD3E                 xor     ecx, ebp        ; StackCookie
.text:0040CD40                 pop     ebx
.text:0040CD41                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040CD46                 mov     esp, ebp
.text:0040CD48                 pop     ebp
.text:0040CD49                 retn
.text:0040CD49 sub_40CBF7      endp
.text:0040CD49
.text:0040CD4A
.text:0040CD4A ; =============== S U B R O U T I N E =======================================
.text:0040CD4A
.text:0040CD4A ; Attributes: bp-based frame
.text:0040CD4A
.text:0040CD4A sub_40CD4A      proc near               ; CODE XREF: _wmain+58E↑p
.text:0040CD4A                                         ; DisplayDataSets(_LOGMAN_NS *)+25B↓p
.text:0040CD4A
.text:0040CD4A var_8           = dword ptr -8
.text:0040CD4A var_4           = dword ptr -4
.text:0040CD4A
.text:0040CD4A                 mov     edi, edi
.text:0040CD4C                 push    ebp
.text:0040CD4D                 mov     ebp, esp
.text:0040CD4F                 push    ecx
.text:0040CD50                 push    ecx
.text:0040CD51                 mov     eax, ___security_cookie
.text:0040CD56                 xor     eax, ebp
.text:0040CD58                 mov     [ebp+var_4], eax
.text:0040CD5B                 mov     eax, [ecx]
.text:0040CD5D                 push    esi
.text:0040CD5E                 push    edi
.text:0040CD5F                 mov     edi, edx
.text:0040CD61                 lea     edx, [ebp+var_8]
.text:0040CD64                 mov     esi, [eax+84h]
.text:0040CD6A                 push    edx
.text:0040CD6B                 push    ecx
.text:0040CD6C                 mov     ecx, esi
.text:0040CD6E                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040CD74                 call    esi
.text:0040CD76                 mov     ecx, eax
.text:0040CD78                 test    ecx, ecx
.text:0040CD7A                 jns     short loc_40CD86
.text:0040CD7C                 xor     ecx, ecx
.text:0040CD7E
.text:0040CD7E loc_40CD7E:                             ; CODE XREF: sub_40CD4A+51↓j
.text:0040CD7E                 mov     dword ptr [edi], 284h
.text:0040CD84                 jmp     short loc_40CDBB
.text:0040CD86 ; ---------------------------------------------------------------------------
.text:0040CD86
.text:0040CD86 loc_40CD86:                             ; CODE XREF: sub_40CD4A+30↑j
.text:0040CD86                 mov     eax, [ebp+var_8]
.text:0040CD89                 sub     eax, 0
.text:0040CD8C                 jz      short loc_40CDB5
.text:0040CD8E                 sub     eax, 1
.text:0040CD91                 jz      short loc_40CDAD
.text:0040CD93                 sub     eax, 1
.text:0040CD96                 jz      short loc_40CDA5
.text:0040CD98                 sub     eax, 1
.text:0040CD9B                 jnz     short loc_40CD7E
.text:0040CD9D                 mov     dword ptr [edi], 262h
.text:0040CDA3                 jmp     short loc_40CDBB
.text:0040CDA5 ; ---------------------------------------------------------------------------
.text:0040CDA5
.text:0040CDA5 loc_40CDA5:                             ; CODE XREF: sub_40CD4A+4C↑j
.text:0040CDA5                 mov     dword ptr [edi], 28Dh
.text:0040CDAB                 jmp     short loc_40CDBB
.text:0040CDAD ; ---------------------------------------------------------------------------
.text:0040CDAD
.text:0040CDAD loc_40CDAD:                             ; CODE XREF: sub_40CD4A+47↑j
.text:0040CDAD                 mov     dword ptr [edi], 261h
.text:0040CDB3                 jmp     short loc_40CDBB
.text:0040CDB5 ; ---------------------------------------------------------------------------
.text:0040CDB5
.text:0040CDB5 loc_40CDB5:                             ; CODE XREF: sub_40CD4A+42↑j
.text:0040CDB5                 mov     dword ptr [edi], 260h
.text:0040CDBB
.text:0040CDBB loc_40CDBB:                             ; CODE XREF: sub_40CD4A+3A↑j
.text:0040CDBB                                         ; sub_40CD4A+59↑j ...
.text:0040CDBB                 mov     eax, ecx
.text:0040CDBD                 mov     ecx, [ebp+var_4]
.text:0040CDC0                 pop     edi
.text:0040CDC1                 xor     ecx, ebp        ; StackCookie
.text:0040CDC3                 pop     esi
.text:0040CDC4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040CDC9                 mov     esp, ebp
.text:0040CDCB                 pop     ebp
.text:0040CDCC                 retn
.text:0040CDCC sub_40CD4A      endp
.text:0040CDCC
.text:0040CDCD
.text:0040CDCD ; =============== S U B R O U T I N E =======================================
.text:0040CDCD
.text:0040CDCD ; Attributes: bp-based frame info_from_lumina
.text:0040CDCD
.text:0040CDCD ; int __stdcall DisplayDataSets(struct _LOGMAN_NS *)
.text:0040CDCD ?DisplayDataSets@@YGJPAU_LOGMAN_NS@@@Z proc near
.text:0040CDCD                                         ; CODE XREF: _wmain+527↑p
.text:0040CDCD
.text:0040CDCD var_444         = byte ptr -444h
.text:0040CDCD pvarg           = VARIANTARG ptr -440h
.text:0040CDCD var_42C         = dword ptr -42Ch
.text:0040CDCD var_428         = dword ptr -428h
.text:0040CDCD var_424         = dword ptr -424h
.text:0040CDCD uID             = dword ptr -420h
.text:0040CDCD var_41C         = dword ptr -41Ch
.text:0040CDCD ppv             = dword ptr -418h
.text:0040CDCD var_414         = dword ptr -414h
.text:0040CDCD bstrString      = dword ptr -410h
.text:0040CDCD var_40C         = dword ptr -40Ch
.text:0040CDCD Buffer          = word ptr -408h
.text:0040CDCD var_208         = word ptr -208h
.text:0040CDCD var_4           = dword ptr -4
.text:0040CDCD
.text:0040CDCD                 mov     edi, edi
.text:0040CDCF                 push    ebp
.text:0040CDD0                 mov     ebp, esp
.text:0040CDD2                 sub     esp, 444h
.text:0040CDD8                 mov     eax, ___security_cookie
.text:0040CDDD                 xor     eax, ebp
.text:0040CDDF                 mov     [ebp+var_4], eax
.text:0040CDE2                 push    ebx
.text:0040CDE3                 push    esi
.text:0040CDE4                 xor     ebx, ebx
.text:0040CDE6                 lea     eax, [ebp+pvarg]
.text:0040CDEC                 push    edi             ; char
.text:0040CDED                 push    eax             ; pvarg
.text:0040CDEE                 mov     edi, ecx
.text:0040CDF0                 mov     [ebp+ppv], ebx
.text:0040CDF6                 mov     [ebp+var_414], ebx
.text:0040CDFC                 mov     [ebp+var_424], ebx
.text:0040CE02                 mov     [ebp+var_41C], ebx
.text:0040CE08                 mov     [ebp+bstrString], ebx
.text:0040CE0E                 call    ds:VariantInit
.text:0040CE14                 push    800h            ; dwBytes
.text:0040CE19                 push    ebx             ; dwFlags
.text:0040CE1A                 call    ds:GetProcessHeap
.text:0040CE20                 push    eax             ; hHeap
.text:0040CE21                 call    ds:HeapAlloc
.text:0040CE27                 mov     esi, eax
.text:0040CE29                 mov     [ebp+var_40C], esi
.text:0040CE2F                 test    esi, esi
.text:0040CE31                 jnz     short loc_40CE3D
.text:0040CE33                 mov     edi, 8007000Eh
.text:0040CE38                 jmp     loc_40D0FE
.text:0040CE3D ; ---------------------------------------------------------------------------
.text:0040CE3D
.text:0040CE3D loc_40CE3D:                             ; CODE XREF: DisplayDataSets(_LOGMAN_NS *)+64↑j
.text:0040CE3D                 cmp     dword_413260, ebx
.text:0040CE43                 jz      short loc_40CE4C
.text:0040CE45                 push    offset aSession_0 ; "session\\*"
.text:0040CE4A                 jmp     short loc_40CE5A
.text:0040CE4C ; ---------------------------------------------------------------------------
.text:0040CE4C
.text:0040CE4C loc_40CE4C:                             ; CODE XREF: DisplayDataSets(_LOGMAN_NS *)+76↑j
.text:0040CE4C                 cmp     [edi], ebx
.text:0040CE4E                 jz      short loc_40CE55
.text:0040CE50                 push    dword ptr [edi+0Ch]
.text:0040CE53                 jmp     short loc_40CE5A
.text:0040CE55 ; ---------------------------------------------------------------------------
.text:0040CE55
.text:0040CE55 loc_40CE55:                             ; CODE XREF: DisplayDataSets(_LOGMAN_NS *)+81↑j
.text:0040CE55                 push    offset aService_0 ; "service\\*"
.text:0040CE5A
.text:0040CE5A loc_40CE5A:                             ; CODE XREF: DisplayDataSets(_LOGMAN_NS *)+7D↑j
.text:0040CE5A                                         ; DisplayDataSets(_LOGMAN_NS *)+86↑j
.text:0040CE5A                 call    ds:SysAllocString
.text:0040CE60                 mov     ebx, eax
.text:0040CE62                 test    ebx, ebx
.text:0040CE64                 jnz     short loc_40CE70
.text:0040CE66                 mov     edi, 8007000Eh
.text:0040CE6B                 jmp     loc_40D0FC
.text:0040CE70 ; ---------------------------------------------------------------------------
.text:0040CE70
.text:0040CE70 loc_40CE70:                             ; CODE XREF: DisplayDataSets(_LOGMAN_NS *)+97↑j
.text:0040CE70                 push    258h            ; uID
.text:0040CE75                 push    0               ; int
.text:0040CE77                 call    sub_40E7F8
.text:0040CE7C                 pop     ecx
.text:0040CE7D                 pop     ecx
.text:0040CE7E                 push    4Fh ; 'O'
.text:0040CE80                 pop     edi
.text:0040CE81
.text:0040CE81 loc_40CE81:                             ; CODE XREF: DisplayDataSets(_LOGMAN_NS *)+C3↓j
.text:0040CE81                 mov     edx, offset asc_403344 ; "-"
.text:0040CE86                 xor     ecx, ecx
.text:0040CE88                 call    sub_40E5A2
.text:0040CE8D                 sub     edi, 1
.text:0040CE90                 jnz     short loc_40CE81
.text:0040CE92                 mov     edx, offset asc_403204 ; "\n"
.text:0040CE97                 xor     ecx, ecx
.text:0040CE99                 call    sub_40E5A2
.text:0040CE9E                 lea     eax, [ebp+ppv]
.text:0040CEA4                 push    eax             ; ppv
.text:0040CEA5                 push    offset stru_403558 ; riid
.text:0040CEAA                 push    15h             ; dwClsContext
.text:0040CEAC                 push    edi             ; pUnkOuter
.text:0040CEAD                 push    offset stru_403548 ; rclsid
.text:0040CEB2                 call    ds:CoCreateInstance
.text:0040CEB8                 mov     edi, eax
.text:0040CEBA                 test    edi, edi
.text:0040CEBC                 js      loc_40D0F5
.text:0040CEC2                 mov     eax, [ebp+ppv]
.text:0040CEC8                 push    ebx
.text:0040CEC9                 push    bstrString
.text:0040CECF                 mov     ecx, [eax]
.text:0040CED1                 push    eax
.text:0040CED2                 mov     esi, [ecx+38h]
.text:0040CED5                 mov     ecx, esi
.text:0040CED7                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040CEDD                 call    esi
.text:0040CEDF                 mov     edi, eax
.text:0040CEE1                 test    edi, edi
.text:0040CEE3                 js      loc_40D0EF
.text:0040CEE9                 mov     eax, [ebp+ppv]
.text:0040CEEF                 lea     edx, [ebp+var_41C]
.text:0040CEF5                 push    edx
.text:0040CEF6                 push    eax
.text:0040CEF7                 mov     ecx, [eax]
.text:0040CEF9                 mov     esi, [ecx+24h]
.text:0040CEFC                 mov     ecx, esi
.text:0040CEFE                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040CF04                 call    esi
.text:0040CF06                 mov     edi, eax
.text:0040CF08                 test    edi, edi
.text:0040CF0A                 js      loc_40D0EF
.text:0040CF10                 mov     eax, [ebp+var_41C]
.text:0040CF16                 lea     ecx, [ebp+var_424]
.text:0040CF1C                 push    ecx
.text:0040CF1D                 push    offset dword_4035E8
.text:0040CF22                 push    eax
.text:0040CF23                 mov     esi, [eax]
.text:0040CF25                 mov     ecx, [esi]
.text:0040CF27                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040CF2D                 call    dword ptr [esi]
.text:0040CF2F                 mov     edi, eax
.text:0040CF31                 test    edi, edi
.text:0040CF33                 js      loc_40D0EF
.text:0040CF39                 mov     eax, [ebp+ppv]
.text:0040CF3F                 lea     edx, [ebp+var_42C]
.text:0040CF45                 push    edx
.text:0040CF46                 push    eax
.text:0040CF47                 mov     ecx, [eax]
.text:0040CF49                 mov     esi, [ecx+1Ch]
.text:0040CF4C                 mov     ecx, esi
.text:0040CF4E                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040CF54                 call    esi
.text:0040CF56                 mov     edi, eax
.text:0040CF58                 test    edi, edi
.text:0040CF5A                 js      loc_40D0EF
.text:0040CF60                 and     [ebp+var_428], 0
.text:0040CF67                 cmp     [ebp+var_42C], 0
.text:0040CF6E                 jbe     loc_40D0DB
.text:0040CF74
.text:0040CF74 loc_40CF74:                             ; CODE XREF: DisplayDataSets(_LOGMAN_NS *)+306↓j
.text:0040CF74                 mov     ecx, [ebp+var_414]
.text:0040CF7A                 test    ecx, ecx
.text:0040CF7C                 jz      short loc_40CF95
.text:0040CF7E                 mov     eax, [ecx]
.text:0040CF80                 push    ecx
.text:0040CF81                 mov     esi, [eax+8]
.text:0040CF84                 mov     ecx, esi
.text:0040CF86                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040CF8C                 call    esi
.text:0040CF8E                 and     [ebp+var_414], 0
.text:0040CF95
.text:0040CF95 loc_40CF95:                             ; CODE XREF: DisplayDataSets(_LOGMAN_NS *)+1AF↑j
.text:0040CF95                 mov     eax, [ebp+var_424]
.text:0040CF9B                 lea     ecx, [ebp+var_444]
.text:0040CFA1                 push    ecx
.text:0040CFA2                 lea     ecx, [ebp+pvarg]
.text:0040CFA8                 push    ecx
.text:0040CFA9                 mov     esi, [eax]
.text:0040CFAB                 push    1
.text:0040CFAD                 push    eax
.text:0040CFAE                 mov     ecx, [esi+0Ch]
.text:0040CFB1                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040CFB7                 call    dword ptr [esi+0Ch]
.text:0040CFBA                 mov     eax, dword ptr [ebp+pvarg.anonymous_0+8]
.text:0040CFC0                 lea     ecx, [ebp+var_414]
.text:0040CFC6                 push    ecx
.text:0040CFC7                 push    offset riid
.text:0040CFCC                 push    eax
.text:0040CFCD                 mov     esi, [eax]
.text:0040CFCF                 mov     ecx, [esi]
.text:0040CFD1                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040CFD7                 call    dword ptr [esi]
.text:0040CFD9                 lea     eax, [ebp+pvarg]
.text:0040CFDF                 push    eax             ; pvarg
.text:0040CFE0                 call    ds:VariantClear
.text:0040CFE6                 mov     ecx, [ebp+var_414]
.text:0040CFEC                 lea     edx, [ebp+uID]
.text:0040CFF2                 call    sub_40CBF7
.text:0040CFF7                 mov     edi, eax
.text:0040CFF9                 test    edi, edi
.text:0040CFFB                 js      loc_40D0EF
.text:0040D001                 push    100h            ; cchBufferMax
.text:0040D006                 lea     eax, [ebp+Buffer]
.text:0040D00C                 xor     esi, esi
.text:0040D00E                 push    eax             ; lpBuffer
.text:0040D00F                 push    [ebp+uID]       ; uID
.text:0040D015                 push    esi             ; hInstance
.text:0040D016                 call    ds:LoadStringW
.text:0040D01C                 mov     ecx, [ebp+var_414]
.text:0040D022                 lea     edx, [ebp+uID]
.text:0040D028                 call    sub_40CD4A
.text:0040D02D                 mov     edi, eax
.text:0040D02F                 test    edi, edi
.text:0040D031                 js      loc_40D0EF
.text:0040D037                 push    100h            ; cchBufferMax
.text:0040D03C                 lea     eax, [ebp+var_208]
.text:0040D042                 push    eax             ; lpBuffer
.text:0040D043                 push    [ebp+uID]       ; uID
.text:0040D049                 push    esi             ; hInstance
.text:0040D04A                 call    ds:LoadStringW
.text:0040D050                 cmp     [ebp+bstrString], esi
.text:0040D056                 jz      short loc_40D06A
.text:0040D058                 push    [ebp+bstrString] ; bstrString
.text:0040D05E                 call    ds:SysFreeString
.text:0040D064                 mov     [ebp+bstrString], esi
.text:0040D06A
.text:0040D06A loc_40D06A:                             ; CODE XREF: DisplayDataSets(_LOGMAN_NS *)+289↑j
.text:0040D06A                 mov     eax, [ebp+var_414]
.text:0040D070                 lea     edx, [ebp+bstrString]
.text:0040D076                 push    edx
.text:0040D077                 push    eax
.text:0040D078                 mov     ecx, [eax]
.text:0040D07A                 mov     esi, [ecx+50h]
.text:0040D07D                 mov     ecx, esi
.text:0040D07F                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D085                 call    esi
.text:0040D087                 mov     esi, [ebp+var_40C]
.text:0040D08D                 mov     edi, eax
.text:0040D08F                 test    edi, edi
.text:0040D091                 js      short loc_40D0F5
.text:0040D093                 lea     eax, [ebp+var_208]
.text:0040D099                 mov     edx, esi
.text:0040D09B                 push    eax
.text:0040D09C                 lea     eax, [ebp+Buffer]
.text:0040D0A2                 push    eax
.text:0040D0A3                 push    ecx
.text:0040D0A4                 push    ecx
.text:0040D0A5                 mov     ecx, [ebp+bstrString]
.text:0040D0AB                 call    sub_40E057
.text:0040D0B0                 push    eax             ; char
.text:0040D0B1                 push    259h            ; uID
.text:0040D0B6                 push    0               ; int
.text:0040D0B8                 call    sub_40E7F8
.text:0040D0BD                 mov     eax, [ebp+var_428]
.text:0040D0C3                 add     esp, 14h
.text:0040D0C6                 inc     eax
.text:0040D0C7                 mov     [ebp+var_428], eax
.text:0040D0CD                 cmp     eax, [ebp+var_42C]
.text:0040D0D3                 jb      loc_40CF74
.text:0040D0D9                 jmp     short loc_40D0E1
.text:0040D0DB ; ---------------------------------------------------------------------------
.text:0040D0DB
.text:0040D0DB loc_40D0DB:                             ; CODE XREF: DisplayDataSets(_LOGMAN_NS *)+1A1↑j
.text:0040D0DB                 mov     esi, [ebp+var_40C]
.text:0040D0E1
.text:0040D0E1 loc_40D0E1:                             ; CODE XREF: DisplayDataSets(_LOGMAN_NS *)+30C↑j
.text:0040D0E1                 mov     edx, offset asc_403204 ; "\n"
.text:0040D0E6                 xor     ecx, ecx
.text:0040D0E8                 call    sub_40E5A2
.text:0040D0ED                 jmp     short loc_40D0F5
.text:0040D0EF ; ---------------------------------------------------------------------------
.text:0040D0EF
.text:0040D0EF loc_40D0EF:                             ; CODE XREF: DisplayDataSets(_LOGMAN_NS *)+116↑j
.text:0040D0EF                                         ; DisplayDataSets(_LOGMAN_NS *)+13D↑j ...
.text:0040D0EF                 mov     esi, [ebp+var_40C]
.text:0040D0F5
.text:0040D0F5 loc_40D0F5:                             ; CODE XREF: DisplayDataSets(_LOGMAN_NS *)+EF↑j
.text:0040D0F5                                         ; DisplayDataSets(_LOGMAN_NS *)+2C4↑j ...
.text:0040D0F5                 push    ebx             ; bstrString
.text:0040D0F6                 call    ds:SysFreeString
.text:0040D0FC
.text:0040D0FC loc_40D0FC:                             ; CODE XREF: DisplayDataSets(_LOGMAN_NS *)+9E↑j
.text:0040D0FC                 xor     ebx, ebx
.text:0040D0FE
.text:0040D0FE loc_40D0FE:                             ; CODE XREF: DisplayDataSets(_LOGMAN_NS *)+6B↑j
.text:0040D0FE                 lea     eax, [ebp+pvarg]
.text:0040D104                 push    eax             ; pvarg
.text:0040D105                 call    ds:VariantClear
.text:0040D10B                 test    esi, esi
.text:0040D10D                 jz      short loc_40D11E
.text:0040D10F                 push    esi             ; lpMem
.text:0040D110                 push    ebx             ; dwFlags
.text:0040D111                 call    ds:GetProcessHeap
.text:0040D117                 push    eax             ; hHeap
.text:0040D118                 call    ds:HeapFree
.text:0040D11E
.text:0040D11E loc_40D11E:                             ; CODE XREF: DisplayDataSets(_LOGMAN_NS *)+340↑j
.text:0040D11E                 cmp     [ebp+bstrString], 0
.text:0040D125                 jz      short loc_40D139
.text:0040D127                 push    [ebp+bstrString] ; bstrString
.text:0040D12D                 call    ds:SysFreeString
.text:0040D133                 mov     [ebp+bstrString], ebx
.text:0040D139
.text:0040D139 loc_40D139:                             ; CODE XREF: DisplayDataSets(_LOGMAN_NS *)+358↑j
.text:0040D139                 mov     ecx, [ebp+ppv]
.text:0040D13F                 test    ecx, ecx
.text:0040D141                 jz      short loc_40D159
.text:0040D143                 mov     eax, [ecx]
.text:0040D145                 push    ecx
.text:0040D146                 mov     esi, [eax+8]
.text:0040D149                 mov     ecx, esi
.text:0040D14B                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D151                 call    esi
.text:0040D153                 mov     [ebp+ppv], ebx
.text:0040D159
.text:0040D159 loc_40D159:                             ; CODE XREF: DisplayDataSets(_LOGMAN_NS *)+374↑j
.text:0040D159                 mov     ecx, [ebp+var_414]
.text:0040D15F                 test    ecx, ecx
.text:0040D161                 jz      short loc_40D179
.text:0040D163                 mov     eax, [ecx]
.text:0040D165                 push    ecx
.text:0040D166                 mov     esi, [eax+8]
.text:0040D169                 mov     ecx, esi
.text:0040D16B                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D171                 call    esi
.text:0040D173                 mov     [ebp+var_414], ebx
.text:0040D179
.text:0040D179 loc_40D179:                             ; CODE XREF: DisplayDataSets(_LOGMAN_NS *)+394↑j
.text:0040D179                 mov     ecx, [ebp+var_41C]
.text:0040D17F                 test    ecx, ecx
.text:0040D181                 jz      short loc_40D199
.text:0040D183                 mov     eax, [ecx]
.text:0040D185                 push    ecx
.text:0040D186                 mov     esi, [eax+8]
.text:0040D189                 mov     ecx, esi
.text:0040D18B                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D191                 call    esi
.text:0040D193                 mov     [ebp+var_41C], ebx
.text:0040D199
.text:0040D199 loc_40D199:                             ; CODE XREF: DisplayDataSets(_LOGMAN_NS *)+3B4↑j
.text:0040D199                 mov     ecx, [ebp+var_424]
.text:0040D19F                 test    ecx, ecx
.text:0040D1A1                 jz      short loc_40D1B3
.text:0040D1A3                 mov     eax, [ecx]
.text:0040D1A5                 push    ecx
.text:0040D1A6                 mov     esi, [eax+8]
.text:0040D1A9                 mov     ecx, esi
.text:0040D1AB                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D1B1                 call    esi
.text:0040D1B3
.text:0040D1B3 loc_40D1B3:                             ; CODE XREF: DisplayDataSets(_LOGMAN_NS *)+3D4↑j
.text:0040D1B3                 mov     ecx, [ebp+var_4]
.text:0040D1B6                 mov     eax, edi
.text:0040D1B8                 pop     edi
.text:0040D1B9                 pop     esi
.text:0040D1BA                 xor     ecx, ebp        ; StackCookie
.text:0040D1BC                 pop     ebx
.text:0040D1BD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040D1C2                 mov     esp, ebp
.text:0040D1C4                 pop     ebp
.text:0040D1C5                 retn
.text:0040D1C5 ?DisplayDataSets@@YGJPAU_LOGMAN_NS@@@Z endp
.text:0040D1C5
.text:0040D1C6
.text:0040D1C6 ; =============== S U B R O U T I N E =======================================
.text:0040D1C6
.text:0040D1C6 ; Attributes: bp-based frame
.text:0040D1C6
.text:0040D1C6 sub_40D1C6      proc near               ; CODE XREF: ResolveProviders(IDataCollectorSet *)+28B↓p
.text:0040D1C6
.text:0040D1C6 var_1C          = dword ptr -1Ch
.text:0040D1C6 var_18          = dword ptr -18h
.text:0040D1C6 rguid           = GUID ptr -14h
.text:0040D1C6 var_4           = dword ptr -4
.text:0040D1C6
.text:0040D1C6                 mov     edi, edi
.text:0040D1C8                 push    ebp
.text:0040D1C9                 mov     ebp, esp
.text:0040D1CB                 sub     esp, 1Ch
.text:0040D1CE                 mov     eax, ___security_cookie
.text:0040D1D3                 xor     eax, ebp
.text:0040D1D5                 mov     [ebp+var_4], eax
.text:0040D1D8                 mov     eax, [edx]
.text:0040D1DA                 push    ebx
.text:0040D1DB                 push    esi
.text:0040D1DC                 mov     [ebp+var_18], ecx
.text:0040D1DF                 lea     ecx, [ebp+rguid]
.text:0040D1E2                 mov     esi, [eax+24h]
.text:0040D1E5                 push    edi
.text:0040D1E6                 push    ecx
.text:0040D1E7                 push    edx
.text:0040D1E8                 mov     ecx, esi
.text:0040D1EA                 mov     [ebp+var_1C], edx
.text:0040D1ED                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D1F3                 call    esi
.text:0040D1F5                 mov     esi, eax
.text:0040D1F7                 test    esi, esi
.text:0040D1F9                 js      loc_40D2A4
.text:0040D1FF                 push    800h            ; dwBytes
.text:0040D204                 push    0               ; dwFlags
.text:0040D206                 call    ds:GetProcessHeap
.text:0040D20C                 push    eax             ; hHeap
.text:0040D20D                 call    ds:HeapAlloc
.text:0040D213                 mov     edi, eax
.text:0040D215                 test    edi, edi
.text:0040D217                 jnz     short loc_40D223
.text:0040D219                 mov     esi, 8007000Eh
.text:0040D21E                 jmp     loc_40D2A4
.text:0040D223 ; ---------------------------------------------------------------------------
.text:0040D223
.text:0040D223 loc_40D223:                             ; CODE XREF: sub_40D1C6+51↑j
.text:0040D223                 push    400h            ; cchMax
.text:0040D228                 push    edi             ; lpsz
.text:0040D229                 lea     eax, [ebp+rguid]
.text:0040D22C                 push    eax             ; rguid
.text:0040D22D                 call    ds:StringFromGUID2
.text:0040D233                 test    eax, eax
.text:0040D235                 jnz     short loc_40D23E
.text:0040D237                 mov     esi, 80004005h
.text:0040D23C                 jmp     short loc_40D294
.text:0040D23E ; ---------------------------------------------------------------------------
.text:0040D23E
.text:0040D23E loc_40D23E:                             ; CODE XREF: sub_40D1C6+6F↑j
.text:0040D23E                 push    edi             ; psz
.text:0040D23F                 call    ds:SysAllocString
.text:0040D245                 mov     ebx, eax
.text:0040D247                 test    ebx, ebx
.text:0040D249                 jnz     short loc_40D252
.text:0040D24B                 mov     esi, 8007000Eh
.text:0040D250                 jmp     short loc_40D294
.text:0040D252 ; ---------------------------------------------------------------------------
.text:0040D252
.text:0040D252 loc_40D252:                             ; CODE XREF: sub_40D1C6+83↑j
.text:0040D252                 mov     ecx, [ebp+var_18]
.text:0040D255                 push    bstrString
.text:0040D25B                 push    ebx
.text:0040D25C                 mov     eax, [ecx]
.text:0040D25E                 push    ecx
.text:0040D25F                 mov     esi, [eax+54h]
.text:0040D262                 mov     ecx, esi
.text:0040D264                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D26A                 call    esi
.text:0040D26C                 test    eax, eax
.text:0040D26E                 jns     short loc_40D275
.text:0040D270                 xor     esi, esi
.text:0040D272                 inc     esi
.text:0040D273                 jmp     short loc_40D28D
.text:0040D275 ; ---------------------------------------------------------------------------
.text:0040D275
.text:0040D275 loc_40D275:                             ; CODE XREF: sub_40D1C6+A8↑j
.text:0040D275                 mov     ecx, [ebp+var_1C]
.text:0040D278                 push    [ebp+var_18]
.text:0040D27B                 push    ecx
.text:0040D27C                 mov     eax, [ecx]
.text:0040D27E                 mov     esi, [eax+58h]
.text:0040D281                 mov     ecx, esi
.text:0040D283                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D289                 call    esi
.text:0040D28B                 mov     esi, eax
.text:0040D28D
.text:0040D28D loc_40D28D:                             ; CODE XREF: sub_40D1C6+AD↑j
.text:0040D28D                 push    ebx             ; bstrString
.text:0040D28E                 call    ds:SysFreeString
.text:0040D294
.text:0040D294 loc_40D294:                             ; CODE XREF: sub_40D1C6+76↑j
.text:0040D294                                         ; sub_40D1C6+8A↑j
.text:0040D294                 push    edi             ; lpMem
.text:0040D295                 push    0               ; dwFlags
.text:0040D297                 call    ds:GetProcessHeap
.text:0040D29D                 push    eax             ; hHeap
.text:0040D29E                 call    ds:HeapFree
.text:0040D2A4
.text:0040D2A4 loc_40D2A4:                             ; CODE XREF: sub_40D1C6+33↑j
.text:0040D2A4                                         ; sub_40D1C6+58↑j
.text:0040D2A4                 mov     ecx, [ebp+var_4]
.text:0040D2A7                 mov     eax, esi
.text:0040D2A9                 pop     edi
.text:0040D2AA                 pop     esi
.text:0040D2AB                 xor     ecx, ebp        ; StackCookie
.text:0040D2AD                 pop     ebx
.text:0040D2AE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040D2B3                 mov     esp, ebp
.text:0040D2B5                 pop     ebp
.text:0040D2B6                 retn
.text:0040D2B6 sub_40D1C6      endp
.text:0040D2B6
.text:0040D2B7
.text:0040D2B7 ; =============== S U B R O U T I N E =======================================
.text:0040D2B7
.text:0040D2B7 ; Attributes: bp-based frame info_from_lumina
.text:0040D2B7
.text:0040D2B7 ; int __cdecl ResolveProviders(struct IDataCollectorSet *)
.text:0040D2B7 ?ResolveProviders@@YGJPAUIDataCollectorSet@@@Z proc near
.text:0040D2B7                                         ; CODE XREF: sub_40D6AA+2B↓p
.text:0040D2B7
.text:0040D2B7 var_48          = VARIANTARG ptr -48h
.text:0040D2B7 pvarg           = VARIANTARG ptr -38h
.text:0040D2B7 var_24          = dword ptr -24h
.text:0040D2B7 var_20          = dword ptr -20h
.text:0040D2B7 var_1C          = dword ptr -1Ch
.text:0040D2B7 var_18          = dword ptr -18h
.text:0040D2B7 var_14          = dword ptr -14h
.text:0040D2B7 var_10          = dword ptr -10h
.text:0040D2B7 var_C           = dword ptr -0Ch
.text:0040D2B7 var_8           = dword ptr -8
.text:0040D2B7 var_4           = dword ptr -4
.text:0040D2B7
.text:0040D2B7                 mov     edi, edi
.text:0040D2B9                 push    ebp
.text:0040D2BA                 mov     ebp, esp
.text:0040D2BC                 sub     esp, 4Ch
.text:0040D2BF                 mov     eax, ___security_cookie
.text:0040D2C4                 xor     eax, ebp
.text:0040D2C6                 mov     [ebp+var_4], eax
.text:0040D2C9                 push    ebx
.text:0040D2CA                 xor     ebx, ebx
.text:0040D2CC                 lea     eax, [ebp+pvarg]
.text:0040D2CF                 push    esi
.text:0040D2D0                 push    edi
.text:0040D2D1                 push    eax             ; pvarg
.text:0040D2D2                 mov     edi, ecx
.text:0040D2D4                 mov     [ebp+var_18], ebx
.text:0040D2D7                 mov     [ebp+var_8], ebx
.text:0040D2DA                 mov     [ebp+var_C], ebx
.text:0040D2DD                 mov     [ebp+var_10], ebx
.text:0040D2E0                 mov     [ebp+var_1C], ebx
.text:0040D2E3                 mov     [ebp+var_14], ebx
.text:0040D2E6                 mov     [ebp+var_20], ebx
.text:0040D2E9                 mov     [ebp+var_24], ebx
.text:0040D2EC                 call    ds:VariantInit
.text:0040D2F2                 lea     eax, [ebp+var_48]
.text:0040D2F5                 push    eax             ; pvarg
.text:0040D2F6                 call    ds:VariantInit
.text:0040D2FC                 mov     ecx, [ebp+var_18]
.text:0040D2FF                 test    ecx, ecx
.text:0040D301                 jz      short loc_40D316
.text:0040D303                 mov     eax, [ecx]
.text:0040D305                 push    ecx
.text:0040D306                 mov     esi, [eax+8]
.text:0040D309                 mov     ecx, esi
.text:0040D30B                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D311                 call    esi
.text:0040D313                 mov     [ebp+var_18], ebx
.text:0040D316
.text:0040D316 loc_40D316:                             ; CODE XREF: ResolveProviders(IDataCollectorSet *)+4A↑j
.text:0040D316                 mov     eax, [edi]
.text:0040D318                 lea     ecx, [ebp+var_18]
.text:0040D31B                 push    ecx
.text:0040D31C                 push    edi
.text:0040D31D                 mov     esi, [eax+1Ch]
.text:0040D320                 mov     ecx, esi
.text:0040D322                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D328                 call    esi
.text:0040D32A                 mov     edi, eax
.text:0040D32C                 test    edi, edi
.text:0040D32E                 js      loc_40D5B6
.text:0040D334                 mov     ecx, [ebp+var_8]
.text:0040D337                 test    ecx, ecx
.text:0040D339                 jz      short loc_40D34E
.text:0040D33B                 mov     eax, [ecx]
.text:0040D33D                 push    ecx
.text:0040D33E                 mov     esi, [eax+8]
.text:0040D341                 mov     ecx, esi
.text:0040D343                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D349                 call    esi
.text:0040D34B                 mov     [ebp+var_8], ebx
.text:0040D34E
.text:0040D34E loc_40D34E:                             ; CODE XREF: ResolveProviders(IDataCollectorSet *)+82↑j
.text:0040D34E                 mov     eax, [ebp+var_18]
.text:0040D351                 lea     edx, [ebp+var_8]
.text:0040D354                 push    edx
.text:0040D355                 push    eax
.text:0040D356                 mov     ecx, [eax]
.text:0040D358                 mov     esi, [ecx+24h]
.text:0040D35B                 mov     ecx, esi
.text:0040D35D                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D363                 call    esi
.text:0040D365                 mov     edi, eax
.text:0040D367                 test    edi, edi
.text:0040D369                 js      loc_40D5B6
.text:0040D36F                 mov     ecx, [ebp+var_C]
.text:0040D372                 test    ecx, ecx
.text:0040D374                 jz      short loc_40D389
.text:0040D376                 mov     eax, [ecx]
.text:0040D378                 push    ecx
.text:0040D379                 mov     esi, [eax+8]
.text:0040D37C                 mov     ecx, esi
.text:0040D37E                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D384                 call    esi
.text:0040D386                 mov     [ebp+var_C], ebx
.text:0040D389
.text:0040D389 loc_40D389:                             ; CODE XREF: ResolveProviders(IDataCollectorSet *)+BD↑j
.text:0040D389                 mov     eax, [ebp+var_8]
.text:0040D38C                 lea     ecx, [ebp+var_C]
.text:0040D38F                 push    ecx
.text:0040D390                 push    offset dword_4035E8
.text:0040D395                 push    eax
.text:0040D396                 mov     esi, [eax]
.text:0040D398                 mov     ecx, [esi]
.text:0040D39A                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D3A0                 call    dword ptr [esi]
.text:0040D3A2                 mov     edi, eax
.text:0040D3A4                 test    edi, edi
.text:0040D3A6                 js      loc_40D5B6
.text:0040D3AC                 lea     eax, [ebp+var_48]
.text:0040D3AF                 push    eax             ; pvarg
.text:0040D3B0                 call    ds:VariantClear
.text:0040D3B6                 mov     eax, [ebp+var_C]
.text:0040D3B9                 lea     ecx, [ebp+var_48]
.text:0040D3BC                 push    ebx
.text:0040D3BD                 push    ecx
.text:0040D3BE                 push    1
.text:0040D3C0                 mov     esi, [eax]
.text:0040D3C2                 push    eax
.text:0040D3C3                 mov     ecx, [esi+0Ch]
.text:0040D3C6                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D3CC                 call    dword ptr [esi+0Ch]
.text:0040D3CF                 mov     edi, eax
.text:0040D3D1                 test    edi, edi
.text:0040D3D3                 js      loc_40D5B6
.text:0040D3D9                 cmp     edi, 1
.text:0040D3DC                 jz      loc_40D5B4
.text:0040D3E2                 push    9
.text:0040D3E4                 pop     eax
.text:0040D3E5
.text:0040D3E5 loc_40D3E5:                             ; CODE XREF: ResolveProviders(IDataCollectorSet *)+2F7↓j
.text:0040D3E5                 cmp     ax, word ptr [ebp+var_48.anonymous_0]
.text:0040D3E9                 jnz     loc_40D57F
.text:0040D3EF                 mov     ecx, [ebp+var_1C]
.text:0040D3F2                 test    ecx, ecx
.text:0040D3F4                 jz      short loc_40D409
.text:0040D3F6                 mov     eax, [ecx]
.text:0040D3F8                 push    ecx
.text:0040D3F9                 mov     esi, [eax+8]
.text:0040D3FC                 mov     ecx, esi
.text:0040D3FE                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D404                 call    esi
.text:0040D406                 mov     [ebp+var_1C], ebx
.text:0040D409
.text:0040D409 loc_40D409:                             ; CODE XREF: ResolveProviders(IDataCollectorSet *)+13D↑j
.text:0040D409                 mov     eax, dword ptr [ebp+var_48.anonymous_0+8]
.text:0040D40C                 lea     ecx, [ebp+var_1C]
.text:0040D40F                 push    ecx
.text:0040D410                 push    offset dword_4035A8
.text:0040D415                 push    eax
.text:0040D416                 mov     esi, [eax]
.text:0040D418                 mov     ecx, [esi]
.text:0040D41A                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D420                 call    dword ptr [esi]
.text:0040D422                 test    eax, eax
.text:0040D424                 js      loc_40D57F
.text:0040D42A                 mov     ecx, [ebp+var_14]
.text:0040D42D                 test    ecx, ecx
.text:0040D42F                 jz      short loc_40D444
.text:0040D431                 mov     eax, [ecx]
.text:0040D433                 push    ecx
.text:0040D434                 mov     esi, [eax+8]
.text:0040D437                 mov     ecx, esi
.text:0040D439                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D43F                 call    esi
.text:0040D441                 mov     [ebp+var_14], ebx
.text:0040D444
.text:0040D444 loc_40D444:                             ; CODE XREF: ResolveProviders(IDataCollectorSet *)+178↑j
.text:0040D444                 mov     eax, [ebp+var_1C]
.text:0040D447                 lea     edx, [ebp+var_14]
.text:0040D44A                 push    edx
.text:0040D44B                 push    eax
.text:0040D44C                 mov     ecx, [eax]
.text:0040D44E                 mov     esi, [ecx+11Ch]
.text:0040D454                 mov     ecx, esi
.text:0040D456                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D45C                 call    esi
.text:0040D45E                 mov     edi, eax
.text:0040D460                 test    edi, edi
.text:0040D462                 js      loc_40D5B6
.text:0040D468                 mov     ecx, [ebp+var_8]
.text:0040D46B                 test    ecx, ecx
.text:0040D46D                 jz      short loc_40D482
.text:0040D46F                 mov     eax, [ecx]
.text:0040D471                 push    ecx
.text:0040D472                 mov     esi, [eax+8]
.text:0040D475                 mov     ecx, esi
.text:0040D477                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D47D                 call    esi
.text:0040D47F                 mov     [ebp+var_8], ebx
.text:0040D482
.text:0040D482 loc_40D482:                             ; CODE XREF: ResolveProviders(IDataCollectorSet *)+1B6↑j
.text:0040D482                 mov     eax, [ebp+var_14]
.text:0040D485                 lea     edx, [ebp+var_8]
.text:0040D488                 push    edx
.text:0040D489                 push    eax
.text:0040D48A                 mov     ecx, [eax]
.text:0040D48C                 mov     esi, [ecx+24h]
.text:0040D48F                 mov     ecx, esi
.text:0040D491                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D497                 call    esi
.text:0040D499                 mov     edi, eax
.text:0040D49B                 test    edi, edi
.text:0040D49D                 js      loc_40D5B6
.text:0040D4A3                 mov     ecx, [ebp+var_10]
.text:0040D4A6                 test    ecx, ecx
.text:0040D4A8                 jz      short loc_40D4BD
.text:0040D4AA                 mov     eax, [ecx]
.text:0040D4AC                 push    ecx
.text:0040D4AD                 mov     esi, [eax+8]
.text:0040D4B0                 mov     ecx, esi
.text:0040D4B2                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D4B8                 call    esi
.text:0040D4BA                 mov     [ebp+var_10], ebx
.text:0040D4BD
.text:0040D4BD loc_40D4BD:                             ; CODE XREF: ResolveProviders(IDataCollectorSet *)+1F1↑j
.text:0040D4BD                 mov     eax, [ebp+var_8]
.text:0040D4C0                 lea     ecx, [ebp+var_10]
.text:0040D4C3                 push    ecx
.text:0040D4C4                 push    offset dword_4035E8
.text:0040D4C9                 push    eax
.text:0040D4CA                 mov     esi, [eax]
.text:0040D4CC                 mov     ecx, [esi]
.text:0040D4CE                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D4D4                 call    dword ptr [esi]
.text:0040D4D6                 jmp     short loc_40D547
.text:0040D4D8 ; ---------------------------------------------------------------------------
.text:0040D4D8
.text:0040D4D8 loc_40D4D8:                             ; CODE XREF: ResolveProviders(IDataCollectorSet *)+2C2↓j
.text:0040D4D8                 push    9
.text:0040D4DA                 pop     eax
.text:0040D4DB                 cmp     ax, word ptr [ebp+pvarg.anonymous_0]
.text:0040D4DF                 jnz     short loc_40D54D
.text:0040D4E1                 mov     ecx, [ebp+var_20]
.text:0040D4E4                 test    ecx, ecx
.text:0040D4E6                 jz      short loc_40D4FB
.text:0040D4E8                 mov     eax, [ecx]
.text:0040D4EA                 push    ecx
.text:0040D4EB                 mov     esi, [eax+8]
.text:0040D4EE                 mov     ecx, esi
.text:0040D4F0                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D4F6                 call    esi
.text:0040D4F8                 mov     [ebp+var_20], ebx
.text:0040D4FB
.text:0040D4FB loc_40D4FB:                             ; CODE XREF: ResolveProviders(IDataCollectorSet *)+22F↑j
.text:0040D4FB                 mov     eax, dword ptr [ebp+pvarg.anonymous_0+8]
.text:0040D4FE                 lea     ecx, [ebp+var_20]
.text:0040D501                 push    ecx
.text:0040D502                 push    offset stru_403598
.text:0040D507                 push    eax
.text:0040D508                 mov     esi, [eax]
.text:0040D50A                 mov     ecx, [esi]
.text:0040D50C                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D512                 call    dword ptr [esi]
.text:0040D514                 test    eax, eax
.text:0040D516                 js      short loc_40D54D
.text:0040D518                 mov     ecx, [ebp+var_24]
.text:0040D51B                 test    ecx, ecx
.text:0040D51D                 jnz     short loc_40D53F
.text:0040D51F                 mov     eax, [ebp+var_14]
.text:0040D522                 lea     edx, [ebp+var_24]
.text:0040D525                 push    edx
.text:0040D526                 push    eax
.text:0040D527                 mov     ecx, [eax]
.text:0040D529                 mov     esi, [ecx+38h]
.text:0040D52C                 mov     ecx, esi
.text:0040D52E                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D534                 call    esi
.text:0040D536                 mov     edi, eax
.text:0040D538                 test    edi, edi
.text:0040D53A                 js      short loc_40D5B6
.text:0040D53C                 mov     ecx, [ebp+var_24]
.text:0040D53F
.text:0040D53F loc_40D53F:                             ; CODE XREF: ResolveProviders(IDataCollectorSet *)+266↑j
.text:0040D53F                 mov     edx, [ebp+var_20]
.text:0040D542                 call    sub_40D1C6
.text:0040D547
.text:0040D547 loc_40D547:                             ; CODE XREF: ResolveProviders(IDataCollectorSet *)+21F↑j
.text:0040D547                 mov     edi, eax
.text:0040D549                 test    edi, edi
.text:0040D54B                 js      short loc_40D5B6
.text:0040D54D
.text:0040D54D loc_40D54D:                             ; CODE XREF: ResolveProviders(IDataCollectorSet *)+228↑j
.text:0040D54D                                         ; ResolveProviders(IDataCollectorSet *)+25F↑j
.text:0040D54D                 lea     eax, [ebp+pvarg]
.text:0040D550                 push    eax             ; pvarg
.text:0040D551                 call    ds:VariantClear
.text:0040D557                 mov     eax, [ebp+var_10]
.text:0040D55A                 lea     ecx, [ebp+pvarg]
.text:0040D55D                 push    ebx
.text:0040D55E                 push    ecx
.text:0040D55F                 push    1
.text:0040D561                 mov     esi, [eax]
.text:0040D563                 push    eax
.text:0040D564                 mov     ecx, [esi+0Ch]
.text:0040D567                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D56D                 call    dword ptr [esi+0Ch]
.text:0040D570                 mov     edi, eax
.text:0040D572                 test    edi, edi
.text:0040D574                 js      short loc_40D5B6
.text:0040D576                 cmp     edi, 1
.text:0040D579                 jnz     loc_40D4D8
.text:0040D57F
.text:0040D57F loc_40D57F:                             ; CODE XREF: ResolveProviders(IDataCollectorSet *)+132↑j
.text:0040D57F                                         ; ResolveProviders(IDataCollectorSet *)+16D↑j
.text:0040D57F                 lea     eax, [ebp+var_48]
.text:0040D582                 push    eax             ; pvarg
.text:0040D583                 call    ds:VariantClear
.text:0040D589                 mov     eax, [ebp+var_C]
.text:0040D58C                 lea     ecx, [ebp+var_48]
.text:0040D58F                 push    ebx
.text:0040D590                 push    ecx
.text:0040D591                 push    1
.text:0040D593                 mov     esi, [eax]
.text:0040D595                 push    eax
.text:0040D596                 mov     ecx, [esi+0Ch]
.text:0040D599                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D59F                 call    dword ptr [esi+0Ch]
.text:0040D5A2                 mov     edi, eax
.text:0040D5A4                 test    edi, edi
.text:0040D5A6                 js      short loc_40D5B6
.text:0040D5A8                 push    9
.text:0040D5AA                 pop     eax
.text:0040D5AB                 cmp     edi, 1
.text:0040D5AE                 jnz     loc_40D3E5
.text:0040D5B4
.text:0040D5B4 loc_40D5B4:                             ; CODE XREF: ResolveProviders(IDataCollectorSet *)+125↑j
.text:0040D5B4                 mov     edi, ebx
.text:0040D5B6
.text:0040D5B6 loc_40D5B6:                             ; CODE XREF: ResolveProviders(IDataCollectorSet *)+77↑j
.text:0040D5B6                                         ; ResolveProviders(IDataCollectorSet *)+B2↑j ...
.text:0040D5B6                 lea     eax, [ebp+pvarg]
.text:0040D5B9                 push    eax             ; pvarg
.text:0040D5BA                 call    ds:VariantClear
.text:0040D5C0                 lea     eax, [ebp+var_48]
.text:0040D5C3                 push    eax             ; pvarg
.text:0040D5C4                 call    ds:VariantClear
.text:0040D5CA                 mov     ecx, [ebp+var_18]
.text:0040D5CD                 test    ecx, ecx
.text:0040D5CF                 jz      short loc_40D5E4
.text:0040D5D1                 mov     eax, [ecx]
.text:0040D5D3                 push    ecx
.text:0040D5D4                 mov     esi, [eax+8]
.text:0040D5D7                 mov     ecx, esi
.text:0040D5D9                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D5DF                 call    esi
.text:0040D5E1                 mov     [ebp+var_18], ebx
.text:0040D5E4
.text:0040D5E4 loc_40D5E4:                             ; CODE XREF: ResolveProviders(IDataCollectorSet *)+318↑j
.text:0040D5E4                 mov     ecx, [ebp+var_8]
.text:0040D5E7                 test    ecx, ecx
.text:0040D5E9                 jz      short loc_40D5FE
.text:0040D5EB                 mov     eax, [ecx]
.text:0040D5ED                 push    ecx
.text:0040D5EE                 mov     esi, [eax+8]
.text:0040D5F1                 mov     ecx, esi
.text:0040D5F3                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D5F9                 call    esi
.text:0040D5FB                 mov     [ebp+var_8], ebx
.text:0040D5FE
.text:0040D5FE loc_40D5FE:                             ; CODE XREF: ResolveProviders(IDataCollectorSet *)+332↑j
.text:0040D5FE                 mov     ecx, [ebp+var_C]
.text:0040D601                 test    ecx, ecx
.text:0040D603                 jz      short loc_40D618
.text:0040D605                 mov     eax, [ecx]
.text:0040D607                 push    ecx
.text:0040D608                 mov     esi, [eax+8]
.text:0040D60B                 mov     ecx, esi
.text:0040D60D                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D613                 call    esi
.text:0040D615                 mov     [ebp+var_C], ebx
.text:0040D618
.text:0040D618 loc_40D618:                             ; CODE XREF: ResolveProviders(IDataCollectorSet *)+34C↑j
.text:0040D618                 mov     ecx, [ebp+var_10]
.text:0040D61B                 test    ecx, ecx
.text:0040D61D                 jz      short loc_40D632
.text:0040D61F                 mov     eax, [ecx]
.text:0040D621                 push    ecx
.text:0040D622                 mov     esi, [eax+8]
.text:0040D625                 mov     ecx, esi
.text:0040D627                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D62D                 call    esi
.text:0040D62F                 mov     [ebp+var_10], ebx
.text:0040D632
.text:0040D632 loc_40D632:                             ; CODE XREF: ResolveProviders(IDataCollectorSet *)+366↑j
.text:0040D632                 mov     ecx, [ebp+var_1C]
.text:0040D635                 test    ecx, ecx
.text:0040D637                 jz      short loc_40D64C
.text:0040D639                 mov     eax, [ecx]
.text:0040D63B                 push    ecx
.text:0040D63C                 mov     esi, [eax+8]
.text:0040D63F                 mov     ecx, esi
.text:0040D641                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D647                 call    esi
.text:0040D649                 mov     [ebp+var_1C], ebx
.text:0040D64C
.text:0040D64C loc_40D64C:                             ; CODE XREF: ResolveProviders(IDataCollectorSet *)+380↑j
.text:0040D64C                 mov     ecx, [ebp+var_14]
.text:0040D64F                 test    ecx, ecx
.text:0040D651                 jz      short loc_40D666
.text:0040D653                 mov     eax, [ecx]
.text:0040D655                 push    ecx
.text:0040D656                 mov     esi, [eax+8]
.text:0040D659                 mov     ecx, esi
.text:0040D65B                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D661                 call    esi
.text:0040D663                 mov     [ebp+var_14], ebx
.text:0040D666
.text:0040D666 loc_40D666:                             ; CODE XREF: ResolveProviders(IDataCollectorSet *)+39A↑j
.text:0040D666                 mov     ecx, [ebp+var_20]
.text:0040D669                 test    ecx, ecx
.text:0040D66B                 jz      short loc_40D680
.text:0040D66D                 mov     eax, [ecx]
.text:0040D66F                 push    ecx
.text:0040D670                 mov     esi, [eax+8]
.text:0040D673                 mov     ecx, esi
.text:0040D675                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D67B                 call    esi
.text:0040D67D                 mov     [ebp+var_20], ebx
.text:0040D680
.text:0040D680 loc_40D680:                             ; CODE XREF: ResolveProviders(IDataCollectorSet *)+3B4↑j
.text:0040D680                 mov     ecx, [ebp+var_24]
.text:0040D683                 test    ecx, ecx
.text:0040D685                 jz      short loc_40D697
.text:0040D687                 mov     eax, [ecx]
.text:0040D689                 push    ecx
.text:0040D68A                 mov     esi, [eax+8]
.text:0040D68D                 mov     ecx, esi
.text:0040D68F                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D695                 call    esi
.text:0040D697
.text:0040D697 loc_40D697:                             ; CODE XREF: ResolveProviders(IDataCollectorSet *)+3CE↑j
.text:0040D697                 mov     ecx, [ebp+var_4]
.text:0040D69A                 mov     eax, edi
.text:0040D69C                 pop     edi
.text:0040D69D                 pop     esi
.text:0040D69E                 xor     ecx, ebp        ; StackCookie
.text:0040D6A0                 pop     ebx
.text:0040D6A1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040D6A6                 mov     esp, ebp
.text:0040D6A8                 pop     ebp
.text:0040D6A9                 retn
.text:0040D6A9 ?ResolveProviders@@YGJPAUIDataCollectorSet@@@Z endp
.text:0040D6A9
.text:0040D6AA
.text:0040D6AA ; =============== S U B R O U T I N E =======================================
.text:0040D6AA
.text:0040D6AA ; Attributes: bp-based frame
.text:0040D6AA
.text:0040D6AA sub_40D6AA      proc near               ; CODE XREF: _wmain+519↑p
.text:0040D6AA
.text:0040D6AA pvarg           = VARIANTARG ptr -20h
.text:0040D6AA var_10          = dword ptr -10h
.text:0040D6AA var_C           = dword ptr -0Ch
.text:0040D6AA var_8           = dword ptr -8
.text:0040D6AA var_4           = dword ptr -4
.text:0040D6AA
.text:0040D6AA                 mov     edi, edi
.text:0040D6AC                 push    ebp
.text:0040D6AD                 mov     ebp, esp
.text:0040D6AF                 sub     esp, 24h
.text:0040D6B2                 mov     eax, ___security_cookie
.text:0040D6B7                 xor     eax, ebp
.text:0040D6B9                 mov     [ebp+var_4], eax
.text:0040D6BC                 and     [ebp+var_C], 0
.text:0040D6C0                 lea     eax, [ebp+pvarg]
.text:0040D6C3                 and     [ebp+var_8], 0
.text:0040D6C7                 push    ebx
.text:0040D6C8                 push    esi
.text:0040D6C9                 push    edi
.text:0040D6CA                 push    eax             ; pvarg
.text:0040D6CB                 mov     esi, ecx
.text:0040D6CD                 call    ds:VariantInit
.text:0040D6D3                 mov     ecx, esi
.text:0040D6D5                 call    ?ResolveProviders@@YGJPAUIDataCollectorSet@@@Z ; ResolveProviders(IDataCollectorSet *)
.text:0040D6DA                 mov     edi, eax
.text:0040D6DC                 test    edi, edi
.text:0040D6DE                 js      loc_40D7C6
.text:0040D6E4                 push    offset aLogmanXsl ; "logman.xsl"
.text:0040D6E9                 call    ds:SysAllocString
.text:0040D6EF                 mov     ebx, eax
.text:0040D6F1                 mov     [ebp+var_10], ebx
.text:0040D6F4                 test    ebx, ebx
.text:0040D6F6                 jnz     short loc_40D702
.text:0040D6F8                 mov     edi, 8007000Eh
.text:0040D6FD                 jmp     loc_40D7C6
.text:0040D702 ; ---------------------------------------------------------------------------
.text:0040D702
.text:0040D702 loc_40D702:                             ; CODE XREF: sub_40D6AA+4C↑j
.text:0040D702                 lea     eax, [ebp+var_8]
.text:0040D705                 mov     edx, ebx
.text:0040D707                 push    eax
.text:0040D708                 push    3
.text:0040D70A                 pop     ecx
.text:0040D70B                 call    sub_4093C3
.text:0040D710                 mov     edi, eax
.text:0040D712                 test    edi, edi
.text:0040D714                 js      loc_40D7A8
.text:0040D71A                 mov     eax, [esi]
.text:0040D71C                 lea     ecx, [ebp+pvarg.anonymous_0+8]
.text:0040D71F                 push    ecx
.text:0040D720                 push    esi
.text:0040D721                 mov     esi, [eax+0D0h]
.text:0040D727                 mov     ecx, esi
.text:0040D729                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D72F                 call    esi
.text:0040D731                 mov     edi, eax
.text:0040D733                 test    edi, edi
.text:0040D735                 js      short loc_40D7A8
.text:0040D737                 mov     edx, dword ptr [ebp+pvarg.anonymous_0+8]
.text:0040D73A                 xor     ecx, ecx
.text:0040D73C                 push    8
.text:0040D73E                 pop     eax
.text:0040D73F                 mov     word ptr [ebp+pvarg.anonymous_0], ax
.text:0040D743                 inc     ecx
.text:0040D744                 lea     eax, [ebp+var_C]
.text:0040D747                 push    eax
.text:0040D748                 call    sub_4093C3
.text:0040D74D                 mov     ebx, [ebp+var_C]
.text:0040D750                 mov     edi, eax
.text:0040D752                 test    edi, edi
.text:0040D754                 js      short loc_40D791
.text:0040D756                 lea     eax, [ebp+pvarg]
.text:0040D759                 push    eax             ; pvarg
.text:0040D75A                 call    ds:VariantClear
.text:0040D760                 mov     esi, [ebx]
.text:0040D762                 lea     eax, [ebp+pvarg.anonymous_0+8]
.text:0040D765                 push    eax
.text:0040D766                 push    [ebp+var_8]
.text:0040D769                 mov     esi, [esi+8Ch]
.text:0040D76F                 mov     ecx, esi
.text:0040D771                 push    ebx
.text:0040D772                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D778                 call    esi
.text:0040D77A                 mov     edi, eax
.text:0040D77C                 test    edi, edi
.text:0040D77E                 js      short loc_40D791
.text:0040D780                 mov     edx, dword ptr [ebp+pvarg.anonymous_0+8]
.text:0040D783                 xor     ecx, ecx
.text:0040D785                 push    8
.text:0040D787                 pop     eax
.text:0040D788                 mov     word ptr [ebp+pvarg.anonymous_0], ax
.text:0040D78C                 call    sub_40E5A2
.text:0040D791
.text:0040D791 loc_40D791:                             ; CODE XREF: sub_40D6AA+AA↑j
.text:0040D791                                         ; sub_40D6AA+D4↑j
.text:0040D791                 test    ebx, ebx
.text:0040D793                 jz      short loc_40D7A5
.text:0040D795                 mov     eax, [ebx]
.text:0040D797                 push    ebx
.text:0040D798                 mov     esi, [eax+8]
.text:0040D79B                 mov     ecx, esi
.text:0040D79D                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D7A3                 call    esi
.text:0040D7A5
.text:0040D7A5 loc_40D7A5:                             ; CODE XREF: sub_40D6AA+E9↑j
.text:0040D7A5                 mov     ebx, [ebp+var_10]
.text:0040D7A8
.text:0040D7A8 loc_40D7A8:                             ; CODE XREF: sub_40D6AA+6A↑j
.text:0040D7A8                                         ; sub_40D6AA+8B↑j
.text:0040D7A8                 mov     ecx, [ebp+var_8]
.text:0040D7AB                 test    ecx, ecx
.text:0040D7AD                 jz      short loc_40D7BF
.text:0040D7AF                 mov     eax, [ecx]
.text:0040D7B1                 push    ecx
.text:0040D7B2                 mov     esi, [eax+8]
.text:0040D7B5                 mov     ecx, esi
.text:0040D7B7                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D7BD                 call    esi
.text:0040D7BF
.text:0040D7BF loc_40D7BF:                             ; CODE XREF: sub_40D6AA+103↑j
.text:0040D7BF                 push    ebx             ; bstrString
.text:0040D7C0                 call    ds:SysFreeString
.text:0040D7C6
.text:0040D7C6 loc_40D7C6:                             ; CODE XREF: sub_40D6AA+34↑j
.text:0040D7C6                                         ; sub_40D6AA+53↑j
.text:0040D7C6                 lea     eax, [ebp+pvarg]
.text:0040D7C9                 push    eax             ; pvarg
.text:0040D7CA                 call    ds:VariantClear
.text:0040D7D0                 mov     ecx, [ebp+var_4]
.text:0040D7D3                 mov     eax, edi
.text:0040D7D5                 pop     edi
.text:0040D7D6                 pop     esi
.text:0040D7D7                 xor     ecx, ebp        ; StackCookie
.text:0040D7D9                 pop     ebx
.text:0040D7DA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040D7DF                 mov     esp, ebp
.text:0040D7E1                 pop     ebp
.text:0040D7E2                 retn
.text:0040D7E2 sub_40D6AA      endp
.text:0040D7E2
.text:0040D7E2 ; ---------------------------------------------------------------------------
.text:0040D7E3                 align 10h
.text:0040D7F0
.text:0040D7F0 ; =============== S U B R O U T I N E =======================================
.text:0040D7F0
.text:0040D7F0 ; Attributes: bp-based frame
.text:0040D7F0
.text:0040D7F0 ; int __cdecl CompareFunction(const void *, const void *)
.text:0040D7F0 CompareFunction proc near               ; DATA XREF: .text:0040300C↑o
.text:0040D7F0                                         ; sub_40D809:loc_40D8E3↓o
.text:0040D7F0
.text:0040D7F0 arg_0           = dword ptr  8
.text:0040D7F0 arg_4           = dword ptr  0Ch
.text:0040D7F0
.text:0040D7F0                 mov     edi, edi
.text:0040D7F2                 push    ebp
.text:0040D7F3                 mov     ebp, esp
.text:0040D7F5                 mov     eax, [ebp+arg_4]
.text:0040D7F8                 push    dword ptr [eax] ; String2
.text:0040D7FA                 mov     eax, [ebp+arg_0]
.text:0040D7FD                 push    dword ptr [eax] ; String1
.text:0040D7FF                 call    ds:__imp__wcsicmp
.text:0040D805                 pop     ecx
.text:0040D806                 pop     ecx
.text:0040D807                 pop     ebp
.text:0040D808                 retn
.text:0040D808 CompareFunction endp
.text:0040D808
.text:0040D809
.text:0040D809 ; =============== S U B R O U T I N E =======================================
.text:0040D809
.text:0040D809 ; Attributes: bp-based frame
.text:0040D809
.text:0040D809 sub_40D809      proc near               ; CODE XREF: _wmain+423↑p
.text:0040D809
.text:0040D809 var_30          = word ptr -30h
.text:0040D809 var_28          = dword ptr -28h
.text:0040D809 var_1C          = dword ptr -1Ch
.text:0040D809 var_18          = dword ptr -18h
.text:0040D809 var_14          = dword ptr -14h
.text:0040D809 lpMem           = dword ptr -10h
.text:0040D809 NumOfElements   = dword ptr -0Ch
.text:0040D809 var_8           = dword ptr -8
.text:0040D809 var_4           = dword ptr -4
.text:0040D809
.text:0040D809                 mov     edi, edi
.text:0040D80B                 push    ebp
.text:0040D80C                 mov     ebp, esp
.text:0040D80E                 sub     esp, 34h
.text:0040D811                 mov     eax, ___security_cookie
.text:0040D816                 xor     eax, ebp
.text:0040D818                 mov     [ebp+var_4], eax
.text:0040D81B                 mov     eax, [ecx]
.text:0040D81D                 lea     edx, [ebp+NumOfElements]
.text:0040D820                 and     [ebp+var_14], 0
.text:0040D824                 push    ebx
.text:0040D825                 push    esi
.text:0040D826                 mov     esi, [eax+1Ch]
.text:0040D829                 push    edi
.text:0040D82A                 push    edx
.text:0040D82B                 mov     [ebp+var_8], ecx
.text:0040D82E                 push    ecx
.text:0040D82F                 mov     ecx, esi
.text:0040D831                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D837                 call    esi
.text:0040D839                 mov     edi, eax
.text:0040D83B                 test    edi, edi
.text:0040D83D                 js      loc_40D9A2
.text:0040D843                 mov     ecx, [ebp+NumOfElements]
.text:0040D846                 shl     ecx, 3
.text:0040D849                 push    ecx             ; dwBytes
.text:0040D84A                 push    8               ; dwFlags
.text:0040D84C                 call    ds:GetProcessHeap
.text:0040D852                 push    eax             ; hHeap
.text:0040D853                 call    ds:HeapAlloc
.text:0040D859                 mov     ebx, eax
.text:0040D85B                 mov     [ebp+lpMem], ebx
.text:0040D85E                 test    ebx, ebx
.text:0040D860                 jnz     short loc_40D86C
.text:0040D862                 mov     edi, 8007000Eh
.text:0040D867                 jmp     loc_40D9A2
.text:0040D86C ; ---------------------------------------------------------------------------
.text:0040D86C
.text:0040D86C loc_40D86C:                             ; CODE XREF: sub_40D809+57↑j
.text:0040D86C                 mov     ecx, [ebp+NumOfElements]
.text:0040D86F                 push    13h
.text:0040D871                 pop     eax
.text:0040D872                 mov     [ebp+var_30], ax
.text:0040D876                 xor     eax, eax
.text:0040D878                 mov     [ebp+var_28], eax
.text:0040D87B                 test    ecx, ecx
.text:0040D87D                 jz      short loc_40D8E3
.text:0040D87F
.text:0040D87F loc_40D87F:                             ; CODE XREF: sub_40D809+D8↓j
.text:0040D87F                 lea     eax, [ebx+eax*8]
.text:0040D882                 lea     ecx, [eax+4]
.text:0040D885                 mov     [ebp+var_1C], eax
.text:0040D888                 mov     eax, [ebp+var_8]
.text:0040D88B                 lea     esi, [ebp+var_30]
.text:0040D88E                 push    ecx
.text:0040D88F                 sub     esp, 10h
.text:0040D892                 mov     [ebp+var_18], ecx
.text:0040D895                 mov     edi, esp
.text:0040D897                 mov     ebx, [eax]
.text:0040D899                 push    eax
.text:0040D89A                 movsd
.text:0040D89B                 mov     ecx, [ebx+20h]
.text:0040D89E                 movsd
.text:0040D89F                 movsd
.text:0040D8A0                 movsd
.text:0040D8A1                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D8A7                 call    dword ptr [ebx+20h]
.text:0040D8AA                 mov     edi, eax
.text:0040D8AC                 test    edi, edi
.text:0040D8AE                 js      loc_40D942
.text:0040D8B4                 mov     eax, [ebp+var_18]
.text:0040D8B7                 push    [ebp+var_1C]
.text:0040D8BA                 mov     eax, [eax]
.text:0040D8BC                 push    eax
.text:0040D8BD                 mov     ecx, [eax]
.text:0040D8BF                 mov     esi, [ecx+1Ch]
.text:0040D8C2                 mov     ecx, esi
.text:0040D8C4                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D8CA                 call    esi
.text:0040D8CC                 mov     ebx, [ebp+lpMem]
.text:0040D8CF                 mov     edi, eax
.text:0040D8D1                 test    edi, edi
.text:0040D8D3                 js      short loc_40D945
.text:0040D8D5                 mov     eax, [ebp+var_28]
.text:0040D8D8                 mov     ecx, [ebp+NumOfElements]
.text:0040D8DB                 inc     eax
.text:0040D8DC                 mov     [ebp+var_28], eax
.text:0040D8DF                 cmp     eax, ecx
.text:0040D8E1                 jb      short loc_40D87F
.text:0040D8E3
.text:0040D8E3 loc_40D8E3:                             ; CODE XREF: sub_40D809+74↑j
.text:0040D8E3                 push    offset CompareFunction ; CompareFunction
.text:0040D8E8                 push    8               ; SizeOfElements
.text:0040D8EA                 push    ecx             ; NumOfElements
.text:0040D8EB                 push    ebx             ; Base
.text:0040D8EC                 call    ds:qsort
.text:0040D8F2                 xor     esi, esi
.text:0040D8F4                 add     esp, 10h
.text:0040D8F7                 cmp     [ebp+NumOfElements], esi
.text:0040D8FA                 jbe     short loc_40D929
.text:0040D8FC                 mov     ecx, ebx
.text:0040D8FE                 mov     [ebp+var_8], ebx
.text:0040D901
.text:0040D901 loc_40D901:                             ; CODE XREF: sub_40D809+11E↓j
.text:0040D901                 lea     eax, [ebp+var_14]
.text:0040D904                 push    eax
.text:0040D905                 xor     eax, eax
.text:0040D907                 test    esi, esi
.text:0040D909                 setz    al
.text:0040D90C                 xor     edx, edx
.text:0040D90E                 push    eax
.text:0040D90F                 call    ?DisplayProvider@@YGJPAU_PLAPROVIDER@@PBGHPAH@Z ; DisplayProvider(_PLAPROVIDER *,ushort const *,int,int *)
.text:0040D914                 mov     edi, eax
.text:0040D916                 test    edi, edi
.text:0040D918                 js      short loc_40D945
.text:0040D91A                 mov     ecx, [ebp+var_8]
.text:0040D91D                 inc     esi
.text:0040D91E                 add     ecx, 8
.text:0040D921                 mov     [ebp+var_8], ecx
.text:0040D924                 cmp     esi, [ebp+NumOfElements]
.text:0040D927                 jb      short loc_40D901
.text:0040D929
.text:0040D929 loc_40D929:                             ; CODE XREF: sub_40D809+F1↑j
.text:0040D929                 mov     edx, offset asc_403204 ; "\n"
.text:0040D92E                 xor     ecx, ecx
.text:0040D930                 call    sub_40E5A2
.text:0040D935                 cmp     [ebp+var_14], 0
.text:0040D939                 jnz     short loc_40D945
.text:0040D93B                 mov     edi, 80070490h
.text:0040D940                 jmp     short loc_40D945
.text:0040D942 ; ---------------------------------------------------------------------------
.text:0040D942
.text:0040D942 loc_40D942:                             ; CODE XREF: sub_40D809+A5↑j
.text:0040D942                 mov     ebx, [ebp+lpMem]
.text:0040D945
.text:0040D945 loc_40D945:                             ; CODE XREF: sub_40D809+CA↑j
.text:0040D945                                         ; sub_40D809+10F↑j ...
.text:0040D945                 xor     eax, eax
.text:0040D947                 mov     [ebp+var_8], eax
.text:0040D94A                 cmp     [ebp+NumOfElements], eax
.text:0040D94D                 jbe     short loc_40D990
.text:0040D94F                 add     ebx, 4
.text:0040D952
.text:0040D952 loc_40D952:                             ; CODE XREF: sub_40D809+185↓j
.text:0040D952                 cmp     dword ptr [ebx-4], 0
.text:0040D956                 jz      short loc_40D968
.text:0040D958                 push    dword ptr [ebx-4] ; bstrString
.text:0040D95B                 call    ds:SysFreeString
.text:0040D961                 and     dword ptr [ebx-4], 0
.text:0040D965                 mov     eax, [ebp+var_8]
.text:0040D968
.text:0040D968 loc_40D968:                             ; CODE XREF: sub_40D809+14D↑j
.text:0040D968                 mov     ecx, [ebx]
.text:0040D96A                 test    ecx, ecx
.text:0040D96C                 jz      short loc_40D984
.text:0040D96E                 mov     eax, [ecx]
.text:0040D970                 push    ecx
.text:0040D971                 mov     esi, [eax+8]
.text:0040D974                 mov     ecx, esi
.text:0040D976                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040D97C                 call    esi
.text:0040D97E                 and     dword ptr [ebx], 0
.text:0040D981                 mov     eax, [ebp+var_8]
.text:0040D984
.text:0040D984 loc_40D984:                             ; CODE XREF: sub_40D809+163↑j
.text:0040D984                 inc     eax
.text:0040D985                 add     ebx, 8
.text:0040D988                 mov     [ebp+var_8], eax
.text:0040D98B                 cmp     eax, [ebp+NumOfElements]
.text:0040D98E                 jb      short loc_40D952
.text:0040D990
.text:0040D990 loc_40D990:                             ; CODE XREF: sub_40D809+144↑j
.text:0040D990                 push    [ebp+lpMem]     ; lpMem
.text:0040D993                 push    0               ; dwFlags
.text:0040D995                 call    ds:GetProcessHeap
.text:0040D99B                 push    eax             ; hHeap
.text:0040D99C                 call    ds:HeapFree
.text:0040D9A2
.text:0040D9A2 loc_40D9A2:                             ; CODE XREF: sub_40D809+34↑j
.text:0040D9A2                                         ; sub_40D809+5E↑j
.text:0040D9A2                 mov     ecx, [ebp+var_4]
.text:0040D9A5                 mov     eax, edi
.text:0040D9A7                 pop     edi
.text:0040D9A8                 pop     esi
.text:0040D9A9                 xor     ecx, ebp        ; StackCookie
.text:0040D9AB                 pop     ebx
.text:0040D9AC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040D9B1                 mov     esp, ebp
.text:0040D9B3                 pop     ebp
.text:0040D9B4                 retn
.text:0040D9B4 sub_40D809      endp
.text:0040D9B4
.text:0040D9B5
.text:0040D9B5 ; =============== S U B R O U T I N E =======================================
.text:0040D9B5
.text:0040D9B5 ; Attributes: bp-based frame
.text:0040D9B5
.text:0040D9B5 ; int __stdcall sub_40D9B5(UINT, UINT)
.text:0040D9B5 sub_40D9B5      proc near               ; CODE XREF: DisplayProvider(_PLAPROVIDER *,ushort const *,int,int *)+18A↓p
.text:0040D9B5                                         ; DisplayProvider(_PLAPROVIDER *,ushort const *,int,int *)+1E3↓p ...
.text:0040D9B5
.text:0040D9B5 var_58          = VARIANTARG ptr -58h
.text:0040D9B5 var_48          = VARIANTARG ptr -48h
.text:0040D9B5 uID             = dword ptr -38h
.text:0040D9B5 var_34          = dword ptr -34h
.text:0040D9B5 pvarg           = VARIANTARG ptr -30h
.text:0040D9B5 var_20          = dword ptr -20h
.text:0040D9B5 var_1C          = dword ptr -1Ch
.text:0040D9B5 var_18          = dword ptr -18h
.text:0040D9B5 var_14          = dword ptr -14h
.text:0040D9B5 var_10          = dword ptr -10h
.text:0040D9B5 lpBuffer        = dword ptr -0Ch
.text:0040D9B5 var_8           = dword ptr -8
.text:0040D9B5 var_4           = dword ptr -4
.text:0040D9B5 arg_0           = dword ptr  8
.text:0040D9B5 arg_4           = dword ptr  0Ch
.text:0040D9B5
.text:0040D9B5                 mov     edi, edi
.text:0040D9B7                 push    ebp
.text:0040D9B8                 mov     ebp, esp
.text:0040D9BA                 sub     esp, 5Ch
.text:0040D9BD                 mov     eax, ___security_cookie
.text:0040D9C2                 xor     eax, ebp
.text:0040D9C4                 mov     [ebp+var_4], eax
.text:0040D9C7                 and     [ebp+var_18], 0
.text:0040D9CB                 lea     eax, [ebp+pvarg]
.text:0040D9CE                 and     [ebp+var_14], 0
.text:0040D9D2                 and     [ebp+var_8], 0
.text:0040D9D6                 and     [ebp+var_1C], 0
.text:0040D9DA                 and     [ebp+var_20], 0
.text:0040D9DE                 push    ebx
.text:0040D9DF                 push    esi
.text:0040D9E0                 push    edi
.text:0040D9E1                 push    eax             ; pvarg
.text:0040D9E2                 mov     [ebp+uID], edx
.text:0040D9E5                 mov     ebx, ecx
.text:0040D9E7                 call    ds:VariantInit
.text:0040D9ED                 lea     eax, [ebp+var_48]
.text:0040D9F0                 push    eax             ; pvarg
.text:0040D9F1                 call    ds:VariantInit
.text:0040D9F7                 lea     eax, [ebp+var_58]
.text:0040D9FA                 push    eax             ; pvarg
.text:0040D9FB                 call    ds:VariantInit
.text:0040DA01                 mov     edi, 800h
.text:0040DA06                 push    edi             ; dwBytes
.text:0040DA07                 push    0               ; dwFlags
.text:0040DA09                 call    ds:GetProcessHeap
.text:0040DA0F                 push    eax             ; hHeap
.text:0040DA10                 call    ds:HeapAlloc
.text:0040DA16                 mov     [ebp+lpBuffer], eax
.text:0040DA19                 test    eax, eax
.text:0040DA1B                 jnz     short loc_40DA27
.text:0040DA1D
.text:0040DA1D loc_40DA1D:                             ; CODE XREF: sub_40D9B5+89↓j
.text:0040DA1D                                         ; sub_40D9B5+A2↓j
.text:0040DA1D                 mov     edi, 8007000Eh
.text:0040DA22                 jmp     loc_40DD12
.text:0040DA27 ; ---------------------------------------------------------------------------
.text:0040DA27
.text:0040DA27 loc_40DA27:                             ; CODE XREF: sub_40D9B5+66↑j
.text:0040DA27                 push    edi             ; dwBytes
.text:0040DA28                 push    0               ; dwFlags
.text:0040DA2A                 call    ds:GetProcessHeap
.text:0040DA30                 push    eax             ; hHeap
.text:0040DA31                 call    ds:HeapAlloc
.text:0040DA37                 mov     esi, eax
.text:0040DA39                 mov     [ebp+var_1C], esi
.text:0040DA3C                 test    esi, esi
.text:0040DA3E                 jz      short loc_40DA1D
.text:0040DA40                 push    edi             ; dwBytes
.text:0040DA41                 push    0               ; dwFlags
.text:0040DA43                 call    ds:GetProcessHeap
.text:0040DA49                 push    eax             ; hHeap
.text:0040DA4A                 call    ds:HeapAlloc
.text:0040DA50                 mov     esi, eax
.text:0040DA52                 mov     [ebp+var_20], esi
.text:0040DA55                 test    esi, esi
.text:0040DA57                 jz      short loc_40DA1D
.text:0040DA59                 mov     eax, [ebx]
.text:0040DA5B                 lea     ecx, [ebp+pvarg]
.text:0040DA5E                 push    ecx
.text:0040DA5F                 push    ebx
.text:0040DA60                 mov     esi, [eax+30h]
.text:0040DA63                 mov     ecx, esi
.text:0040DA65                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040DA6B                 call    esi
.text:0040DA6D                 mov     edi, eax
.text:0040DA6F                 test    edi, edi
.text:0040DA71                 js      loc_40DD12
.text:0040DA77                 movzx   eax, word ptr [ebp+pvarg.anonymous_0]
.text:0040DA7B                 lea     ecx, [ebp+var_14]
.text:0040DA7E                 mov     [ebp+var_34], eax
.text:0040DA81                 mov     eax, [ebx]
.text:0040DA83                 push    ecx
.text:0040DA84                 push    ebx
.text:0040DA85                 mov     esi, [eax+24h]
.text:0040DA88                 mov     ecx, esi
.text:0040DA8A                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040DA90                 call    esi
.text:0040DA92                 mov     edi, eax
.text:0040DA94                 test    edi, edi
.text:0040DA96                 js      loc_40DD12
.text:0040DA9C                 mov     eax, [ebp+var_14]
.text:0040DA9F                 lea     ecx, [ebp+var_18]
.text:0040DAA2                 push    ecx
.text:0040DAA3                 push    offset dword_4035E8
.text:0040DAA8                 push    eax
.text:0040DAA9                 mov     esi, [eax]
.text:0040DAAB                 mov     ecx, [esi]
.text:0040DAAD                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040DAB3                 call    dword ptr [esi]
.text:0040DAB5                 mov     edi, eax
.text:0040DAB7                 test    edi, edi
.text:0040DAB9                 js      loc_40DD12
.text:0040DABF                 mov     eax, [ebx]
.text:0040DAC1                 lea     ecx, [ebp+var_10]
.text:0040DAC4                 push    ecx
.text:0040DAC5                 push    ebx
.text:0040DAC6                 mov     esi, [eax+1Ch]
.text:0040DAC9                 mov     ecx, esi
.text:0040DACB                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040DAD1                 call    esi
.text:0040DAD3                 mov     edi, eax
.text:0040DAD5                 test    edi, edi
.text:0040DAD7                 js      loc_40DD12
.text:0040DADD                 mov     eax, [ebp+var_10]
.text:0040DAE0                 test    eax, eax
.text:0040DAE2                 jz      loc_40DB68
.text:0040DAE8                 mov     eax, [ebp+lpBuffer]
.text:0040DAEB                 mov     esi, 400h
.text:0040DAF0                 push    esi             ; cchBufferMax
.text:0040DAF1                 push    eax             ; lpBuffer
.text:0040DAF2                 push    [ebp+uID]       ; uID
.text:0040DAF5                 xor     ecx, ecx
.text:0040DAF7                 push    ecx             ; hInstance
.text:0040DAF8                 mov     [eax], cx
.text:0040DAFB                 call    ds:LoadStringW
.text:0040DB01                 mov     ebx, [ebp+var_1C]
.text:0040DB04                 xor     eax, eax
.text:0040DB06                 push    esi             ; cchBufferMax
.text:0040DB07                 push    ebx             ; lpBuffer
.text:0040DB08                 push    [ebp+arg_0]     ; uID
.text:0040DB0B                 mov     [ebx], ax
.text:0040DB0E                 push    eax             ; hInstance
.text:0040DB0F                 call    ds:LoadStringW
.text:0040DB15                 mov     esi, [ebp+var_20]
.text:0040DB18                 xor     eax, eax
.text:0040DB1A                 push    400h            ; cchBufferMax
.text:0040DB1F                 push    esi             ; lpBuffer
.text:0040DB20                 push    [ebp+arg_4]     ; uID
.text:0040DB23                 mov     [esi], ax
.text:0040DB26                 push    eax             ; hInstance
.text:0040DB27                 call    ds:LoadStringW
.text:0040DB2D                 mov     ecx, [ebp+var_34]
.text:0040DB30                 push    esi
.text:0040DB31                 push    [ebp+lpBuffer]
.text:0040DB34                 movzx   eax, cx
.text:0040DB37                 push    ebx             ; char
.text:0040DB38                 push    offset a118s220s3S ; "%1!-18s!  %2!-20s! %3!s!\n"
.text:0040DB3D                 call    sub_40E7E4
.text:0040DB42                 add     esp, 10h
.text:0040DB45                 push    4Fh ; 'O'
.text:0040DB47                 pop     esi
.text:0040DB48
.text:0040DB48 loc_40DB48:                             ; CODE XREF: sub_40D9B5+1A2↓j
.text:0040DB48                 mov     edx, offset asc_403344 ; "-"
.text:0040DB4D                 xor     ecx, ecx
.text:0040DB4F                 call    sub_40E5A2
.text:0040DB54                 sub     esi, 1
.text:0040DB57                 jnz     short loc_40DB48
.text:0040DB59                 mov     edx, offset asc_403204 ; "\n"
.text:0040DB5E                 xor     ecx, ecx
.text:0040DB60                 call    sub_40E5A2
.text:0040DB65                 mov     eax, [ebp+var_10]
.text:0040DB68
.text:0040DB68 loc_40DB68:                             ; CODE XREF: sub_40D9B5+12D↑j
.text:0040DB68                 xor     ebx, ebx
.text:0040DB6A                 test    eax, eax
.text:0040DB6C                 jz      loc_40DD12
.text:0040DB72
.text:0040DB72 loc_40DB72:                             ; CODE XREF: sub_40D9B5+345↓j
.text:0040DB72                 mov     ecx, [ebp+var_8]
.text:0040DB75                 test    ecx, ecx
.text:0040DB77                 jz      short loc_40DB8D
.text:0040DB79                 mov     eax, [ecx]
.text:0040DB7B                 push    ecx
.text:0040DB7C                 mov     esi, [eax+8]
.text:0040DB7F                 mov     ecx, esi
.text:0040DB81                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040DB87                 call    esi
.text:0040DB89                 and     [ebp+var_8], 0
.text:0040DB8D
.text:0040DB8D loc_40DB8D:                             ; CODE XREF: sub_40D9B5+1C2↑j
.text:0040DB8D                 lea     eax, [ebp+pvarg]
.text:0040DB90                 push    eax             ; pvarg
.text:0040DB91                 call    ds:VariantClear
.text:0040DB97                 lea     eax, [ebp+var_48]
.text:0040DB9A                 push    eax             ; pvarg
.text:0040DB9B                 call    ds:VariantClear
.text:0040DBA1                 lea     eax, [ebp+var_58]
.text:0040DBA4                 push    eax             ; pvarg
.text:0040DBA5                 call    ds:VariantClear
.text:0040DBAB                 mov     eax, [ebp+var_18]
.text:0040DBAE                 lea     ecx, [ebp+pvarg]
.text:0040DBB1                 push    0
.text:0040DBB3                 push    ecx
.text:0040DBB4                 push    1
.text:0040DBB6                 mov     esi, [eax]
.text:0040DBB8                 push    eax
.text:0040DBB9                 mov     ecx, [esi+0Ch]
.text:0040DBBC                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040DBC2                 call    dword ptr [esi+0Ch]
.text:0040DBC5                 mov     edi, eax
.text:0040DBC7                 test    edi, edi
.text:0040DBC9                 js      loc_40DD12
.text:0040DBCF                 mov     eax, dword ptr [ebp+pvarg.anonymous_0+8]
.text:0040DBD2                 lea     ecx, [ebp+var_8]
.text:0040DBD5                 push    ecx
.text:0040DBD6                 push    offset dword_4035D8
.text:0040DBDB                 push    eax
.text:0040DBDC                 mov     esi, [eax]
.text:0040DBDE                 mov     ecx, [esi]
.text:0040DBE0                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040DBE6                 call    dword ptr [esi]
.text:0040DBE8                 mov     edi, eax
.text:0040DBEA                 test    edi, edi
.text:0040DBEC                 js      loc_40DD12
.text:0040DBF2                 push    8
.text:0040DBF4                 pop     eax
.text:0040DBF5                 mov     word ptr [ebp+var_48.anonymous_0], ax
.text:0040DBF9                 lea     edx, [ebp+var_48.anonymous_0+8]
.text:0040DBFC                 mov     eax, [ebp+var_8]
.text:0040DBFF                 push    edx
.text:0040DC00                 push    eax
.text:0040DC01                 mov     ecx, [eax]
.text:0040DC03                 mov     esi, [ecx+1Ch]
.text:0040DC06                 mov     ecx, esi
.text:0040DC08                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040DC0E                 call    esi
.text:0040DC10                 mov     edi, eax
.text:0040DC12                 test    edi, edi
.text:0040DC14                 js      loc_40DD12
.text:0040DC1A                 push    8
.text:0040DC1C                 pop     eax
.text:0040DC1D                 mov     word ptr [ebp+var_58.anonymous_0], ax
.text:0040DC21                 lea     edx, [ebp+var_58.anonymous_0+8]
.text:0040DC24                 mov     eax, [ebp+var_8]
.text:0040DC27                 push    edx
.text:0040DC28                 push    eax
.text:0040DC29                 mov     ecx, [eax]
.text:0040DC2B                 mov     esi, [ecx+2Ch]
.text:0040DC2E                 mov     ecx, esi
.text:0040DC30                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040DC36                 call    esi
.text:0040DC38                 mov     edi, eax
.text:0040DC3A                 test    edi, edi
.text:0040DC3C                 js      loc_40DD12
.text:0040DC42                 lea     eax, [ebp+pvarg]
.text:0040DC45                 push    eax             ; pvarg
.text:0040DC46                 call    ds:VariantClear
.text:0040DC4C                 mov     eax, [ebp+var_8]
.text:0040DC4F                 lea     edx, [ebp+pvarg]
.text:0040DC52                 push    edx
.text:0040DC53                 push    eax
.text:0040DC54                 mov     ecx, [eax]
.text:0040DC56                 mov     esi, [ecx+34h]
.text:0040DC59                 mov     ecx, esi
.text:0040DC5B                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040DC61                 call    esi
.text:0040DC63                 mov     edi, eax
.text:0040DC65                 test    edi, edi
.text:0040DC67                 js      loc_40DD12
.text:0040DC6D                 mov     eax, [ebp+var_34]
.text:0040DC70                 mov     ecx, dword ptr [ebp+var_48.anonymous_0+8]
.text:0040DC73                 movzx   eax, ax
.text:0040DC76                 cmp     eax, 11h
.text:0040DC79                 jz      short loc_40DCCD
.text:0040DC7B                 cmp     eax, 15h
.text:0040DC7E                 jz      short loc_40DCA1
.text:0040DC80                 test    ecx, ecx
.text:0040DC82                 jnz     short loc_40DC89
.text:0040DC84                 mov     ecx, offset ppszDestEnd
.text:0040DC89
.text:0040DC89 loc_40DC89:                             ; CODE XREF: sub_40D9B5+2CD↑j
.text:0040DC89                 mov     eax, dword ptr [ebp+var_58.anonymous_0+8]
.text:0040DC8C                 test    eax, eax
.text:0040DC8E                 jnz     short loc_40DC95
.text:0040DC90                 mov     eax, offset ppszDestEnd
.text:0040DC95
.text:0040DC95 loc_40DC95:                             ; CODE XREF: sub_40D9B5+2D9↑j
.text:0040DC95                 push    ecx
.text:0040DC96                 push    eax
.text:0040DC97                 push    dword ptr [ebp+pvarg.anonymous_0+8]
.text:0040DC9A                 push    offset a0x108x220s3S ; "0x%1!08x!          %2!-20s! %3!s!\n"
.text:0040DC9F                 jmp     short loc_40DCEE
.text:0040DCA1 ; ---------------------------------------------------------------------------
.text:0040DCA1
.text:0040DCA1 loc_40DCA1:                             ; CODE XREF: sub_40D9B5+2C9↑j
.text:0040DCA1                 test    ecx, ecx
.text:0040DCA3                 jnz     short loc_40DCAA
.text:0040DCA5                 mov     ecx, offset ppszDestEnd
.text:0040DCAA
.text:0040DCAA loc_40DCAA:                             ; CODE XREF: sub_40D9B5+2EE↑j
.text:0040DCAA                 mov     eax, dword ptr [ebp+var_58.anonymous_0+8]
.text:0040DCAD                 test    eax, eax
.text:0040DCAF                 jnz     short loc_40DCB6
.text:0040DCB1                 mov     eax, offset ppszDestEnd
.text:0040DCB6
.text:0040DCB6 loc_40DCB6:                             ; CODE XREF: sub_40D9B5+2FA↑j
.text:0040DCB6                 push    ecx
.text:0040DCB7                 push    eax
.text:0040DCB8                 push    dword ptr [ebp+pvarg.anonymous_0+0Ch]
.text:0040DCBB                 push    dword ptr [ebp+pvarg.anonymous_0+8] ; char
.text:0040DCBE                 push    offset a0x1016i64x220s ; "0x%1!016I64x!  %2!-20s! %3!s!\n"
.text:0040DCC3                 call    sub_40E7E4
.text:0040DCC8                 add     esp, 14h
.text:0040DCCB                 jmp     short loc_40DCF6
.text:0040DCCD ; ---------------------------------------------------------------------------
.text:0040DCCD
.text:0040DCCD loc_40DCCD:                             ; CODE XREF: sub_40D9B5+2C4↑j
.text:0040DCCD                 test    ecx, ecx
.text:0040DCCF                 jnz     short loc_40DCD6
.text:0040DCD1                 mov     ecx, offset ppszDestEnd
.text:0040DCD6
.text:0040DCD6 loc_40DCD6:                             ; CODE XREF: sub_40D9B5+31A↑j
.text:0040DCD6                 mov     eax, dword ptr [ebp+var_58.anonymous_0+8]
.text:0040DCD9                 test    eax, eax
.text:0040DCDB                 jnz     short loc_40DCE2
.text:0040DCDD                 mov     eax, offset ppszDestEnd
.text:0040DCE2
.text:0040DCE2 loc_40DCE2:                             ; CODE XREF: sub_40D9B5+326↑j
.text:0040DCE2                 push    ecx
.text:0040DCE3                 push    eax
.text:0040DCE4                 movsx   eax, byte ptr [ebp+pvarg.anonymous_0+8]
.text:0040DCE8                 push    eax             ; char
.text:0040DCE9                 push    offset a0x102x220s3S ; "0x%1!02x!                %2!-20s! %3!s!"...
.text:0040DCEE
.text:0040DCEE loc_40DCEE:                             ; CODE XREF: sub_40D9B5+2EA↑j
.text:0040DCEE                 call    sub_40E7E4
.text:0040DCF3                 add     esp, 10h
.text:0040DCF6
.text:0040DCF6 loc_40DCF6:                             ; CODE XREF: sub_40D9B5+316↑j
.text:0040DCF6                 inc     ebx
.text:0040DCF7                 cmp     ebx, [ebp+var_10]
.text:0040DCFA                 jb      loc_40DB72
.text:0040DD00                 cmp     [ebp+var_10], 0
.text:0040DD04                 jbe     short loc_40DD12
.text:0040DD06                 mov     edx, offset asc_403204 ; "\n"
.text:0040DD0B                 xor     ecx, ecx
.text:0040DD0D                 call    sub_40E5A2
.text:0040DD12
.text:0040DD12 loc_40DD12:                             ; CODE XREF: sub_40D9B5+6D↑j
.text:0040DD12                                         ; sub_40D9B5+BC↑j ...
.text:0040DD12                 lea     eax, [ebp+pvarg]
.text:0040DD15                 push    eax             ; pvarg
.text:0040DD16                 call    ds:VariantClear
.text:0040DD1C                 lea     eax, [ebp+var_48]
.text:0040DD1F                 push    eax             ; pvarg
.text:0040DD20                 call    ds:VariantClear
.text:0040DD26                 lea     eax, [ebp+var_58]
.text:0040DD29                 push    eax             ; pvarg
.text:0040DD2A                 call    ds:VariantClear
.text:0040DD30                 mov     ecx, [ebp+var_14]
.text:0040DD33                 test    ecx, ecx
.text:0040DD35                 jz      short loc_40DD4B
.text:0040DD37                 mov     eax, [ecx]
.text:0040DD39                 push    ecx
.text:0040DD3A                 mov     esi, [eax+8]
.text:0040DD3D                 mov     ecx, esi
.text:0040DD3F                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040DD45                 call    esi
.text:0040DD47                 and     [ebp+var_14], 0
.text:0040DD4B
.text:0040DD4B loc_40DD4B:                             ; CODE XREF: sub_40D9B5+380↑j
.text:0040DD4B                 mov     ecx, [ebp+var_18]
.text:0040DD4E                 test    ecx, ecx
.text:0040DD50                 jz      short loc_40DD66
.text:0040DD52                 mov     eax, [ecx]
.text:0040DD54                 push    ecx
.text:0040DD55                 mov     esi, [eax+8]
.text:0040DD58                 mov     ecx, esi
.text:0040DD5A                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040DD60                 call    esi
.text:0040DD62                 and     [ebp+var_18], 0
.text:0040DD66
.text:0040DD66 loc_40DD66:                             ; CODE XREF: sub_40D9B5+39B↑j
.text:0040DD66                 mov     ecx, [ebp+var_8]
.text:0040DD69                 test    ecx, ecx
.text:0040DD6B                 jz      short loc_40DD81
.text:0040DD6D                 mov     eax, [ecx]
.text:0040DD6F                 push    ecx
.text:0040DD70                 mov     esi, [eax+8]
.text:0040DD73                 mov     ecx, esi
.text:0040DD75                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040DD7B                 call    esi
.text:0040DD7D                 and     [ebp+var_8], 0
.text:0040DD81
.text:0040DD81 loc_40DD81:                             ; CODE XREF: sub_40D9B5+3B6↑j
.text:0040DD81                 mov     eax, [ebp+lpBuffer]
.text:0040DD84                 test    eax, eax
.text:0040DD86                 jz      short loc_40DD98
.text:0040DD88                 push    eax             ; lpMem
.text:0040DD89                 push    0               ; dwFlags
.text:0040DD8B                 call    ds:GetProcessHeap
.text:0040DD91                 push    eax             ; hHeap
.text:0040DD92                 call    ds:HeapFree
.text:0040DD98
.text:0040DD98 loc_40DD98:                             ; CODE XREF: sub_40D9B5+3D1↑j
.text:0040DD98                 mov     eax, [ebp+var_1C]
.text:0040DD9B                 test    eax, eax
.text:0040DD9D                 jz      short loc_40DDAF
.text:0040DD9F                 push    eax             ; lpMem
.text:0040DDA0                 push    0               ; dwFlags
.text:0040DDA2                 call    ds:GetProcessHeap
.text:0040DDA8                 push    eax             ; hHeap
.text:0040DDA9                 call    ds:HeapFree
.text:0040DDAF
.text:0040DDAF loc_40DDAF:                             ; CODE XREF: sub_40D9B5+3E8↑j
.text:0040DDAF                 mov     eax, [ebp+var_20]
.text:0040DDB2                 test    eax, eax
.text:0040DDB4                 jz      short loc_40DDC6
.text:0040DDB6                 push    eax             ; lpMem
.text:0040DDB7                 push    0               ; dwFlags
.text:0040DDB9                 call    ds:GetProcessHeap
.text:0040DDBF                 push    eax             ; hHeap
.text:0040DDC0                 call    ds:HeapFree
.text:0040DDC6
.text:0040DDC6 loc_40DDC6:                             ; CODE XREF: sub_40D9B5+3FF↑j
.text:0040DDC6                 mov     ecx, [ebp+var_4]
.text:0040DDC9                 mov     eax, edi
.text:0040DDCB                 pop     edi
.text:0040DDCC                 pop     esi
.text:0040DDCD                 xor     ecx, ebp        ; StackCookie
.text:0040DDCF                 pop     ebx
.text:0040DDD0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040DDD5                 mov     esp, ebp
.text:0040DDD7                 pop     ebp
.text:0040DDD8                 retn    8
.text:0040DDD8 sub_40D9B5      endp
.text:0040DDD8
.text:0040DDDB
.text:0040DDDB ; =============== S U B R O U T I N E =======================================
.text:0040DDDB
.text:0040DDDB ; Attributes: bp-based frame info_from_lumina
.text:0040DDDB
.text:0040DDDB ; int __stdcall DisplayProvider(struct _PLAPROVIDER *, const unsigned __int16 *, int, int *)
.text:0040DDDB ?DisplayProvider@@YGJPAU_PLAPROVIDER@@PBGHPAH@Z proc near
.text:0040DDDB                                         ; CODE XREF: _wmain+45B↑p
.text:0040DDDB                                         ; sub_40D809+106↑p
.text:0040DDDB
.text:0040DDDB var_28          = dword ptr -28h
.text:0040DDDB var_24          = dword ptr -24h
.text:0040DDDB String2         = dword ptr -20h
.text:0040DDDB lpsz            = dword ptr -1Ch
.text:0040DDDB var_18          = dword ptr -18h
.text:0040DDDB rguid           = GUID ptr -14h
.text:0040DDDB var_4           = dword ptr -4
.text:0040DDDB arg_0           = dword ptr  8
.text:0040DDDB arg_4           = dword ptr  0Ch
.text:0040DDDB
.text:0040DDDB                 mov     edi, edi
.text:0040DDDD                 push    ebp
.text:0040DDDE                 mov     ebp, esp
.text:0040DDE0                 sub     esp, 2Ch
.text:0040DDE3                 mov     eax, ___security_cookie
.text:0040DDE8                 xor     eax, ebp
.text:0040DDEA                 mov     [ebp+var_4], eax
.text:0040DDED                 mov     eax, [ebp+arg_4]
.text:0040DDF0                 push    ebx
.text:0040DDF1                 push    esi
.text:0040DDF2                 push    edi             ; char
.text:0040DDF3                 mov     [ebp+var_28], eax
.text:0040DDF6                 mov     ebx, ecx
.text:0040DDF8                 xor     eax, eax
.text:0040DDFA                 mov     [ebp+String2], edx
.text:0040DDFD                 push    100h            ; dwBytes
.text:0040DE02                 push    eax             ; dwFlags
.text:0040DE03                 mov     [ebp+var_24], eax
.text:0040DE06                 mov     [ebp+var_18], eax
.text:0040DE09                 call    ds:GetProcessHeap
.text:0040DE0F                 push    eax             ; hHeap
.text:0040DE10                 call    ds:HeapAlloc
.text:0040DE16                 mov     [ebp+lpsz], eax
.text:0040DE19                 test    eax, eax
.text:0040DE1B                 jnz     short loc_40DE27
.text:0040DE1D                 mov     edi, 8007000Eh
.text:0040DE22                 jmp     loc_40E02B
.text:0040DE27 ; ---------------------------------------------------------------------------
.text:0040DE27
.text:0040DE27 loc_40DE27:                             ; CODE XREF: DisplayProvider(_PLAPROVIDER *,ushort const *,int,int *)+40↑j
.text:0040DE27                 mov     eax, [ebx+4]
.text:0040DE2A                 lea     edx, [ebp+rguid]
.text:0040DE2D                 push    edx
.text:0040DE2E                 push    eax
.text:0040DE2F                 mov     ecx, [eax]
.text:0040DE31                 mov     esi, [ecx+24h]
.text:0040DE34                 mov     ecx, esi
.text:0040DE36                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040DE3C                 call    esi
.text:0040DE3E                 mov     edi, eax
.text:0040DE40                 test    edi, edi
.text:0040DE42                 js      loc_40E019
.text:0040DE48                 mov     esi, [ebp+lpsz]
.text:0040DE4B                 lea     eax, [ebp+rguid]
.text:0040DE4E                 push    80h ; '€'       ; cchMax
.text:0040DE53                 push    esi             ; lpsz
.text:0040DE54                 push    eax             ; rguid
.text:0040DE55                 call    ds:StringFromGUID2
.text:0040DE5B                 test    eax, eax
.text:0040DE5D                 jnz     short loc_40DE7C
.text:0040DE5F                 call    ds:GetLastError
.text:0040DE65                 mov     edi, eax
.text:0040DE67                 test    edi, edi
.text:0040DE69                 jle     short loc_40DE76
.text:0040DE6B                 movzx   edi, di
.text:0040DE6E                 or      edi, 80070000h
.text:0040DE74                 test    edi, edi
.text:0040DE76
.text:0040DE76 loc_40DE76:                             ; CODE XREF: DisplayProvider(_PLAPROVIDER *,ushort const *,int,int *)+8E↑j
.text:0040DE76                 js      loc_40E019
.text:0040DE7C
.text:0040DE7C loc_40DE7C:                             ; CODE XREF: DisplayProvider(_PLAPROVIDER *,ushort const *,int,int *)+82↑j
.text:0040DE7C                 mov     eax, [ebp+String2]
.text:0040DE7F                 xor     edx, edx
.text:0040DE81                 inc     edx
.text:0040DE82                 test    eax, eax
.text:0040DE84                 jz      short loc_40DEB4
.text:0040DE86                 push    eax             ; String2
.text:0040DE87                 push    dword ptr [ebx] ; String1
.text:0040DE89                 call    ds:__imp__wcsicmp
.text:0040DE8F                 pop     ecx
.text:0040DE90                 pop     ecx
.text:0040DE91                 test    eax, eax
.text:0040DE93                 jz      short loc_40DEAA
.text:0040DE95                 mov     edx, [ebp+String2]
.text:0040DE98                 push    edx             ; String2
.text:0040DE99                 push    esi             ; String1
.text:0040DE9A                 call    ds:__imp__wcsicmp
.text:0040DEA0                 pop     ecx
.text:0040DEA1                 pop     ecx
.text:0040DEA2                 test    eax, eax
.text:0040DEA4                 jnz     loc_40E019
.text:0040DEAA
.text:0040DEAA loc_40DEAA:                             ; CODE XREF: DisplayProvider(_PLAPROVIDER *,ushort const *,int,int *)+B8↑j
.text:0040DEAA                 xor     edx, edx
.text:0040DEAC                 inc     edx
.text:0040DEAD                 mov     [ebp+var_24], edx
.text:0040DEB0                 mov     eax, edx
.text:0040DEB2                 jmp     short loc_40DEB7
.text:0040DEB4 ; ---------------------------------------------------------------------------
.text:0040DEB4
.text:0040DEB4 loc_40DEB4:                             ; CODE XREF: DisplayProvider(_PLAPROVIDER *,ushort const *,int,int *)+A9↑j
.text:0040DEB4                 mov     eax, [ebp+arg_0]
.text:0040DEB7
.text:0040DEB7 loc_40DEB7:                             ; CODE XREF: DisplayProvider(_PLAPROVIDER *,ushort const *,int,int *)+D7↑j
.text:0040DEB7                 mov     ecx, [ebp+var_28] ; int
.text:0040DEBA                 mov     [ecx], edx
.text:0040DEBC                 test    eax, eax
.text:0040DEBE                 jz      short loc_40DEF1
.text:0040DEC0                 push    27Ch            ; uID
.text:0040DEC5                 push    0               ; int
.text:0040DEC7                 call    sub_40E7F8
.text:0040DECC                 pop     ecx
.text:0040DECD                 pop     ecx
.text:0040DECE                 push    4Fh ; 'O'
.text:0040DED0                 pop     esi
.text:0040DED1
.text:0040DED1 loc_40DED1:                             ; CODE XREF: DisplayProvider(_PLAPROVIDER *,ushort const *,int,int *)+105↓j
.text:0040DED1                 mov     edx, offset asc_403344 ; "-"
.text:0040DED6                 xor     ecx, ecx
.text:0040DED8                 call    sub_40E5A2
.text:0040DEDD                 sub     esi, 1
.text:0040DEE0                 jnz     short loc_40DED1
.text:0040DEE2                 mov     edx, offset asc_403204 ; "\n"
.text:0040DEE7                 xor     ecx, ecx
.text:0040DEE9                 call    sub_40E5A2
.text:0040DEEE                 mov     esi, [ebp+lpsz]
.text:0040DEF1
.text:0040DEF1 loc_40DEF1:                             ; CODE XREF: DisplayProvider(_PLAPROVIDER *,ushort const *,int,int *)+E3↑j
.text:0040DEF1                 push    esi
.text:0040DEF2                 push    dword ptr [ebx] ; char
.text:0040DEF4                 push    offset a140s238s ; "%1!-40s! %2!-38s!\n"
.text:0040DEF9                 call    sub_40E7E4
.text:0040DEFE                 add     esp, 0Ch
.text:0040DF01                 cmp     [ebp+var_24], 0
.text:0040DF05                 jz      loc_40E019
.text:0040DF0B                 mov     edx, offset asc_403204 ; "\n"
.text:0040DF10                 xor     ecx, ecx
.text:0040DF12                 call    sub_40E5A2
.text:0040DF17                 mov     ecx, [ebp+var_18]
.text:0040DF1A                 test    ecx, ecx
.text:0040DF1C                 jz      short loc_40DF32
.text:0040DF1E                 mov     eax, [ecx]
.text:0040DF20                 push    ecx
.text:0040DF21                 mov     esi, [eax+8]
.text:0040DF24                 mov     ecx, esi
.text:0040DF26                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040DF2C                 call    esi
.text:0040DF2E                 and     [ebp+var_18], 0
.text:0040DF32
.text:0040DF32 loc_40DF32:                             ; CODE XREF: DisplayProvider(_PLAPROVIDER *,ushort const *,int,int *)+141↑j
.text:0040DF32                 mov     eax, [ebx+4]
.text:0040DF35                 lea     edx, [ebp+var_18]
.text:0040DF38                 push    edx
.text:0040DF39                 push    eax
.text:0040DF3A                 mov     ecx, [eax]
.text:0040DF3C                 mov     esi, [ecx+30h]
.text:0040DF3F                 mov     ecx, esi
.text:0040DF41                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040DF47                 call    esi
.text:0040DF49                 mov     edi, eax
.text:0040DF4B                 test    edi, edi
.text:0040DF4D                 js      loc_40E019
.text:0040DF53                 mov     ecx, [ebp+var_18]
.text:0040DF56                 mov     edx, 282h
.text:0040DF5B                 push    291h            ; UINT
.text:0040DF60                 push    290h            ; UINT
.text:0040DF65                 call    sub_40D9B5
.text:0040DF6A                 mov     edi, eax
.text:0040DF6C                 test    edi, edi
.text:0040DF6E                 js      loc_40E019
.text:0040DF74                 mov     ecx, [ebp+var_18]
.text:0040DF77                 test    ecx, ecx
.text:0040DF79                 jz      short loc_40DF8F
.text:0040DF7B                 mov     eax, [ecx]
.text:0040DF7D                 push    ecx
.text:0040DF7E                 mov     esi, [eax+8]
.text:0040DF81                 mov     ecx, esi
.text:0040DF83                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040DF89                 call    esi
.text:0040DF8B                 and     [ebp+var_18], 0
.text:0040DF8F
.text:0040DF8F loc_40DF8F:                             ; CODE XREF: DisplayProvider(_PLAPROVIDER *,ushort const *,int,int *)+19E↑j
.text:0040DF8F                 mov     eax, [ebx+4]
.text:0040DF92                 lea     edx, [ebp+var_18]
.text:0040DF95                 push    edx
.text:0040DF96                 push    eax
.text:0040DF97                 mov     ecx, [eax]
.text:0040DF99                 mov     esi, [ecx+2Ch]
.text:0040DF9C                 mov     ecx, esi
.text:0040DF9E                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040DFA4                 call    esi
.text:0040DFA6                 mov     edi, eax
.text:0040DFA8                 test    edi, edi
.text:0040DFAA                 js      short loc_40E019
.text:0040DFAC                 mov     ecx, [ebp+var_18]
.text:0040DFAF                 mov     edx, 283h
.text:0040DFB4                 push    291h            ; UINT
.text:0040DFB9                 push    290h            ; UINT
.text:0040DFBE                 call    sub_40D9B5
.text:0040DFC3                 mov     edi, eax
.text:0040DFC5                 test    edi, edi
.text:0040DFC7                 js      short loc_40E019
.text:0040DFC9                 mov     ecx, [ebp+var_18]
.text:0040DFCC                 test    ecx, ecx
.text:0040DFCE                 jz      short loc_40DFE4
.text:0040DFD0                 mov     eax, [ecx]
.text:0040DFD2                 push    ecx
.text:0040DFD3                 mov     esi, [eax+8]
.text:0040DFD6                 mov     ecx, esi
.text:0040DFD8                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040DFDE                 call    esi
.text:0040DFE0                 and     [ebp+var_18], 0
.text:0040DFE4
.text:0040DFE4 loc_40DFE4:                             ; CODE XREF: DisplayProvider(_PLAPROVIDER *,ushort const *,int,int *)+1F3↑j
.text:0040DFE4                 mov     eax, [ebx+4]
.text:0040DFE7                 lea     edx, [ebp+var_18]
.text:0040DFEA                 push    edx
.text:0040DFEB                 push    eax
.text:0040DFEC                 mov     ecx, [eax]
.text:0040DFEE                 mov     esi, [ecx+64h]
.text:0040DFF1                 mov     ecx, esi
.text:0040DFF3                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040DFF9                 call    esi
.text:0040DFFB                 test    eax, eax
.text:0040DFFD                 jns     short loc_40E003
.text:0040DFFF                 xor     edi, edi
.text:0040E001                 jmp     short loc_40E019
.text:0040E003 ; ---------------------------------------------------------------------------
.text:0040E003
.text:0040E003 loc_40E003:                             ; CODE XREF: DisplayProvider(_PLAPROVIDER *,ushort const *,int,int *)+222↑j
.text:0040E003                 mov     ecx, [ebp+var_18]
.text:0040E006                 mov     edx, 292h
.text:0040E00B                 push    0               ; UINT
.text:0040E00D                 push    28Fh            ; UINT
.text:0040E012                 call    sub_40D9B5
.text:0040E017                 mov     edi, eax
.text:0040E019
.text:0040E019 loc_40E019:                             ; CODE XREF: DisplayProvider(_PLAPROVIDER *,ushort const *,int,int *)+67↑j
.text:0040E019                                         ; DisplayProvider(_PLAPROVIDER *,ushort const *,int,int *):loc_40DE76↑j ...
.text:0040E019                 push    [ebp+lpsz]      ; lpMem
.text:0040E01C                 push    0               ; dwFlags
.text:0040E01E                 call    ds:GetProcessHeap
.text:0040E024                 push    eax             ; hHeap
.text:0040E025                 call    ds:HeapFree
.text:0040E02B
.text:0040E02B loc_40E02B:                             ; CODE XREF: DisplayProvider(_PLAPROVIDER *,ushort const *,int,int *)+47↑j
.text:0040E02B                 mov     ecx, [ebp+var_18]
.text:0040E02E                 test    ecx, ecx
.text:0040E030                 jz      short loc_40E042
.text:0040E032                 mov     eax, [ecx]
.text:0040E034                 push    ecx
.text:0040E035                 mov     esi, [eax+8]
.text:0040E038                 mov     ecx, esi
.text:0040E03A                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040E040                 call    esi
.text:0040E042
.text:0040E042 loc_40E042:                             ; CODE XREF: DisplayProvider(_PLAPROVIDER *,ushort const *,int,int *)+255↑j
.text:0040E042                 mov     ecx, [ebp+var_4]
.text:0040E045                 mov     eax, edi
.text:0040E047                 pop     edi
.text:0040E048                 pop     esi
.text:0040E049                 xor     ecx, ebp        ; StackCookie
.text:0040E04B                 pop     ebx
.text:0040E04C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040E051                 mov     esp, ebp
.text:0040E053                 pop     ebp
.text:0040E054                 retn    8
.text:0040E054 ?DisplayProvider@@YGJPAU_PLAPROVIDER@@PBGHPAH@Z endp
.text:0040E054
.text:0040E057
.text:0040E057 ; =============== S U B R O U T I N E =======================================
.text:0040E057
.text:0040E057 ; Attributes: bp-based frame
.text:0040E057
.text:0040E057 sub_40E057      proc near               ; CODE XREF: DisplayDataSets(_LOGMAN_NS *)+2DE↑p
.text:0040E057
.text:0040E057 var_8           = byte ptr -8
.text:0040E057 var_4           = dword ptr -4
.text:0040E057
.text:0040E057                 mov     edi, edi
.text:0040E059                 push    ebp
.text:0040E05A                 mov     ebp, esp
.text:0040E05C                 push    ecx
.text:0040E05D                 push    ecx
.text:0040E05E                 push    esi             ; pszSrc
.text:0040E05F                 push    edi             ; cchDest
.text:0040E060                 mov     edi, ecx
.text:0040E062                 mov     esi, edx
.text:0040E064                 test    edi, edi
.text:0040E066                 jnz     short loc_40E086
.text:0040E068                 push    offset asc_4034A0 ; " "
.text:0040E06D                 push    27h ; '''       ; Args
.text:0040E06F                 push    offset aS       ; "%*s"
.text:0040E074                 push    400h            ; cchDest
.text:0040E079                 push    esi             ; pszDest
.text:0040E07A                 call    ?StringCchPrintfW@@YAJPAGIPBGZZ_0 ; StringCchPrintfW(ushort *,uint,ushort const *,...)
.text:0040E07F                 add     esp, 14h
.text:0040E082
.text:0040E082 loc_40E082:                             ; CODE XREF: sub_40E057+89↓j
.text:0040E082                 mov     eax, esi
.text:0040E084                 jmp     short loc_40E0E8
.text:0040E086 ; ---------------------------------------------------------------------------
.text:0040E086
.text:0040E086 loc_40E086:                             ; CODE XREF: sub_40E057+F↑j
.text:0040E086                 lea     edx, [ecx+2]
.text:0040E089
.text:0040E089 loc_40E089:                             ; CODE XREF: sub_40E057+3B↓j
.text:0040E089                 mov     ax, [ecx]
.text:0040E08C                 add     ecx, 2
.text:0040E08F                 test    ax, ax
.text:0040E092                 jnz     short loc_40E089
.text:0040E094                 sub     ecx, edx
.text:0040E096                 sar     ecx, 1
.text:0040E098                 cmp     ecx, 27h ; '''
.text:0040E09B                 jnb     short loc_40E0E6
.text:0040E09D                 push    edi             ; pszDest
.text:0040E09E                 mov     edx, 400h
.text:0040E0A3                 mov     ecx, esi
.text:0040E0A5                 call    _StringCchCopyW@12 ; StringCchCopyW(x,x,x)
.text:0040E0AA                 test    eax, eax
.text:0040E0AC                 js      short loc_40E0E2
.text:0040E0AE                 lea     eax, [ebp+var_8]
.text:0040E0B1                 mov     ecx, edi
.text:0040E0B3                 push    eax
.text:0040E0B4                 lea     edx, [ebp+var_4]
.text:0040E0B7                 call    sub_40E486
.text:0040E0BC                 test    eax, eax
.text:0040E0BE                 js      short loc_40E0E2
.text:0040E0C0                 mov     edi, [ebp+var_4]
.text:0040E0C3                 jmp     short loc_40E0DB
.text:0040E0C5 ; ---------------------------------------------------------------------------
.text:0040E0C5
.text:0040E0C5 loc_40E0C5:                             ; CODE XREF: sub_40E057+87↓j
.text:0040E0C5                 push    offset asc_4034A0 ; " "
.text:0040E0CA                 mov     edx, 400h
.text:0040E0CF                 mov     ecx, esi
.text:0040E0D1                 call    sub_407955
.text:0040E0D6                 test    eax, eax
.text:0040E0D8                 js      short loc_40E0E2
.text:0040E0DA                 inc     edi
.text:0040E0DB
.text:0040E0DB loc_40E0DB:                             ; CODE XREF: sub_40E057+6C↑j
.text:0040E0DB                 cmp     edi, 27h ; '''
.text:0040E0DE                 jb      short loc_40E0C5
.text:0040E0E0                 jmp     short loc_40E082
.text:0040E0E2 ; ---------------------------------------------------------------------------
.text:0040E0E2
.text:0040E0E2 loc_40E0E2:                             ; CODE XREF: sub_40E057+55↑j
.text:0040E0E2                                         ; sub_40E057+67↑j ...
.text:0040E0E2                 xor     eax, eax
.text:0040E0E4                 jmp     short loc_40E0E8
.text:0040E0E6 ; ---------------------------------------------------------------------------
.text:0040E0E6
.text:0040E0E6 loc_40E0E6:                             ; CODE XREF: sub_40E057+44↑j
.text:0040E0E6                 mov     eax, edi
.text:0040E0E8
.text:0040E0E8 loc_40E0E8:                             ; CODE XREF: sub_40E057+2D↑j
.text:0040E0E8                                         ; sub_40E057+8D↑j
.text:0040E0E8                 pop     edi
.text:0040E0E9                 pop     esi
.text:0040E0EA                 mov     esp, ebp
.text:0040E0EC                 pop     ebp
.text:0040E0ED                 retn    8
.text:0040E0ED sub_40E057      endp ; sp-analysis failed
.text:0040E0ED
.text:0040E0F0
.text:0040E0F0 ; =============== S U B R O U T I N E =======================================
.text:0040E0F0
.text:0040E0F0 ; Attributes: bp-based frame
.text:0040E0F0
.text:0040E0F0 sub_40E0F0      proc near               ; CODE XREF: sub_409E12+19A↑p
.text:0040E0F0                                         ; sub_409E12+2F8↑p ...
.text:0040E0F0
.text:0040E0F0 var_4           = dword ptr -4
.text:0040E0F0
.text:0040E0F0                 mov     edi, edi
.text:0040E0F2                 push    ebp
.text:0040E0F3                 mov     ebp, esp
.text:0040E0F5                 push    ecx
.text:0040E0F6                 test    ecx, ecx
.text:0040E0F8                 jz      short loc_40E16B
.text:0040E0FA                 mov     edx, ecx
.text:0040E0FC                 push    esi
.text:0040E0FD                 lea     esi, [edx+2]
.text:0040E100
.text:0040E100 loc_40E100:                             ; CODE XREF: sub_40E0F0+19↓j
.text:0040E100                 mov     ax, [edx]
.text:0040E103                 add     edx, 2
.text:0040E106                 test    ax, ax
.text:0040E109                 jnz     short loc_40E100
.text:0040E10B                 push    ebx
.text:0040E10C                 sub     edx, esi
.text:0040E10E                 push    edi
.text:0040E10F                 sar     edx, 1
.text:0040E111                 dec     edx
.text:0040E112                 push    20h ; ' '
.text:0040E114                 lea     eax, [ecx+edx*2]
.text:0040E117                 pop     edx
.text:0040E118                 mov     [ebp+var_4], edx
.text:0040E11B                 push    0Dh
.text:0040E11D                 pop     esi
.text:0040E11E                 push    0Ah
.text:0040E120                 pop     ebx
.text:0040E121                 push    9
.text:0040E123                 pop     edi
.text:0040E124                 cmp     eax, ecx
.text:0040E126                 jb      short loc_40E14A
.text:0040E128
.text:0040E128 loc_40E128:                             ; CODE XREF: sub_40E0F0+55↓j
.text:0040E128                 movzx   edx, word ptr [eax]
.text:0040E12B                 cmp     dx, word ptr [ebp+var_4]
.text:0040E12F                 jz      short loc_40E140
.text:0040E131                 cmp     dx, si
.text:0040E134                 jz      short loc_40E140
.text:0040E136                 cmp     dx, bx
.text:0040E139                 jz      short loc_40E140
.text:0040E13B                 cmp     dx, di
.text:0040E13E                 jnz     short loc_40E147
.text:0040E140
.text:0040E140 loc_40E140:                             ; CODE XREF: sub_40E0F0+3F↑j
.text:0040E140                                         ; sub_40E0F0+44↑j ...
.text:0040E140                 sub     eax, 2
.text:0040E143                 cmp     eax, ecx
.text:0040E145                 jnb     short loc_40E128
.text:0040E147
.text:0040E147 loc_40E147:                             ; CODE XREF: sub_40E0F0+4E↑j
.text:0040E147                 push    20h ; ' '
.text:0040E149                 pop     edx
.text:0040E14A
.text:0040E14A loc_40E14A:                             ; CODE XREF: sub_40E0F0+36↑j
.text:0040E14A                 movzx   ecx, word ptr [eax+2]
.text:0040E14E                 cmp     cx, dx
.text:0040E151                 jz      short loc_40E162
.text:0040E153                 cmp     cx, bx
.text:0040E156                 jz      short loc_40E162
.text:0040E158                 cmp     cx, di
.text:0040E15B                 jz      short loc_40E162
.text:0040E15D                 cmp     cx, si
.text:0040E160                 jnz     short loc_40E168
.text:0040E162
.text:0040E162 loc_40E162:                             ; CODE XREF: sub_40E0F0+61↑j
.text:0040E162                                         ; sub_40E0F0+66↑j ...
.text:0040E162                 xor     ecx, ecx
.text:0040E164                 mov     [eax+2], cx
.text:0040E168
.text:0040E168 loc_40E168:                             ; CODE XREF: sub_40E0F0+70↑j
.text:0040E168                 pop     edi
.text:0040E169                 pop     ebx
.text:0040E16A                 pop     esi
.text:0040E16B
.text:0040E16B loc_40E16B:                             ; CODE XREF: sub_40E0F0+8↑j
.text:0040E16B                 mov     esp, ebp
.text:0040E16D                 pop     ebp
.text:0040E16E                 retn
.text:0040E16E sub_40E0F0      endp
.text:0040E16E
.text:0040E16F
.text:0040E16F ; =============== S U B R O U T I N E =======================================
.text:0040E16F
.text:0040E16F ; Attributes: bp-based frame
.text:0040E16F
.text:0040E16F sub_40E16F      proc near               ; CODE XREF: sub_4096BC+EC↑p
.text:0040E16F
.text:0040E16F var_14          = dword ptr -14h
.text:0040E16F Mode            = dword ptr -10h
.text:0040E16F NumberOfBytesRead= dword ptr -0Ch
.text:0040E16F WideCharStr     = word ptr -8
.text:0040E16F Buffer          = byte ptr -1
.text:0040E16F arg_0           = dword ptr  8
.text:0040E16F
.text:0040E16F                 mov     edi, edi
.text:0040E171                 push    ebp
.text:0040E172                 mov     ebp, esp
.text:0040E174                 sub     esp, 14h
.text:0040E177                 push    ebx
.text:0040E178                 push    esi
.text:0040E179                 push    edi
.text:0040E17A                 xor     esi, esi
.text:0040E17C                 mov     [ebp+var_14], ecx
.text:0040E17F                 xor     eax, eax
.text:0040E181                 mov     [ebp+Mode], esi
.text:0040E184                 push    0FFFFFFF6h      ; nStdHandle
.text:0040E186                 mov     [ebp+WideCharStr], ax
.text:0040E18A                 mov     edi, esi
.text:0040E18C                 call    ds:GetStdHandle
.text:0040E192                 mov     ebx, eax
.text:0040E194                 cmp     ebx, 0FFFFFFFFh
.text:0040E197                 jz      loc_40E315
.text:0040E19D                 test    ebx, ebx
.text:0040E19F                 jz      loc_40E315
.text:0040E1A5                 lea     eax, [ebp+Mode]
.text:0040E1A8                 push    eax             ; lpMode
.text:0040E1A9                 push    ebx             ; hConsoleHandle
.text:0040E1AA                 call    ds:GetConsoleMode
.text:0040E1B0                 mov     eax, [ebp+Mode]
.text:0040E1B3                 and     eax, 0FFFFFFF9h
.text:0040E1B6                 push    eax             ; dwMode
.text:0040E1B7                 push    ebx             ; hConsoleHandle
.text:0040E1B8                 call    ds:SetConsoleMode
.text:0040E1BE                 cmp     [ebp+arg_0], esi
.text:0040E1C1                 jz      loc_40E2EA
.text:0040E1C7
.text:0040E1C7 loc_40E1C7:                             ; CODE XREF: sub_40E16F+102↓j
.text:0040E1C7                                         ; sub_40E16F+110↓j ...
.text:0040E1C7                 push    ebx             ; hFile
.text:0040E1C8                 call    ds:GetFileType
.text:0040E1CE                 and     eax, 0FFFF7FFFh
.text:0040E1D3                 push    esi             ; pInputControl
.text:0040E1D4                 cmp     eax, 2
.text:0040E1D7                 lea     eax, [ebp+NumberOfBytesRead]
.text:0040E1DA                 push    eax             ; lpNumberOfCharsRead
.text:0040E1DB                 push    1               ; nNumberOfCharsToRead
.text:0040E1DD                 jz      short loc_40E244
.text:0040E1DF                 lea     eax, [ebp+Buffer]
.text:0040E1E2                 push    eax             ; lpBuffer
.text:0040E1E3                 push    ebx             ; hFile
.text:0040E1E4                 call    ds:ReadFile
.text:0040E1EA                 test    eax, eax
.text:0040E1EC                 jz      loc_40E2C5
.text:0040E1F2                 cmp     [ebp+NumberOfBytesRead], esi
.text:0040E1F5                 jnz     short loc_40E200
.text:0040E1F7                 push    0Ah
.text:0040E1F9                 pop     eax
.text:0040E1FA                 mov     [ebp+WideCharStr], ax
.text:0040E1FE                 jmp     short loc_40E253
.text:0040E200 ; ---------------------------------------------------------------------------
.text:0040E200
.text:0040E200 loc_40E200:                             ; CODE XREF: sub_40E16F+86↑j
.text:0040E200                 push    1               ; cchWideChar
.text:0040E202                 lea     eax, [ebp+WideCharStr]
.text:0040E205                 push    eax             ; lpWideCharStr
.text:0040E206                 push    1               ; cbMultiByte
.text:0040E208                 lea     eax, [ebp+Buffer]
.text:0040E20B                 push    eax             ; lpMultiByteStr
.text:0040E20C                 push    esi             ; dwFlags
.text:0040E20D                 call    ds:_getmbcp
.text:0040E213                 push    eax             ; CodePage
.text:0040E214                 call    ds:MultiByteToWideChar
.text:0040E21A                 test    eax, eax
.text:0040E21C                 jnz     short loc_40E224
.text:0040E21E                 mov     [ebp+WideCharStr], ax
.text:0040E222                 jmp     short loc_40E228
.text:0040E224 ; ---------------------------------------------------------------------------
.text:0040E224
.text:0040E224 loc_40E224:                             ; CODE XREF: sub_40E16F+AD↑j
.text:0040E224                 mov     ax, [ebp+WideCharStr]
.text:0040E228
.text:0040E228 loc_40E228:                             ; CODE XREF: sub_40E16F+B3↑j
.text:0040E228                 push    0Dh
.text:0040E22A                 pop     ecx
.text:0040E22B                 cmp     cx, ax
.text:0040E22E                 jnz     short loc_40E253
.text:0040E230                 push    esi             ; lpOverlapped
.text:0040E231                 lea     eax, [ebp+NumberOfBytesRead]
.text:0040E234                 push    eax             ; lpNumberOfBytesRead
.text:0040E235                 push    1               ; nNumberOfBytesToRead
.text:0040E237                 lea     eax, [ebp+Buffer]
.text:0040E23A                 push    eax             ; lpBuffer
.text:0040E23B                 push    ebx             ; hFile
.text:0040E23C                 call    ds:ReadFile
.text:0040E242                 jmp     short loc_40E24F
.text:0040E244 ; ---------------------------------------------------------------------------
.text:0040E244
.text:0040E244 loc_40E244:                             ; CODE XREF: sub_40E16F+6E↑j
.text:0040E244                 lea     eax, [ebp+WideCharStr]
.text:0040E247                 push    eax             ; lpBuffer
.text:0040E248                 push    ebx             ; hConsoleInput
.text:0040E249                 call    ds:ReadConsoleW
.text:0040E24F
.text:0040E24F loc_40E24F:                             ; CODE XREF: sub_40E16F+D3↑j
.text:0040E24F                 mov     ax, [ebp+WideCharStr]
.text:0040E253
.text:0040E253 loc_40E253:                             ; CODE XREF: sub_40E16F+8F↑j
.text:0040E253                                         ; sub_40E16F+BF↑j
.text:0040E253                 movzx   ecx, ax
.text:0040E256                 sub     ecx, 8
.text:0040E259                 jz      short loc_40E2A8
.text:0040E25B                 dec     ecx
.text:0040E25C                 sub     ecx, 1
.text:0040E25F                 jz      short loc_40E2DC
.text:0040E261                 sub     ecx, 3
.text:0040E264                 jz      short loc_40E2DC
.text:0040E266                 sub     ecx, 0Eh
.text:0040E269                 jz      short loc_40E284
.text:0040E26B                 cmp     edi, 3FFh
.text:0040E271                 jnb     loc_40E1C7
.text:0040E277                 mov     ecx, [ebp+var_14]
.text:0040E27A                 mov     [ecx+edi*2], ax
.text:0040E27E                 inc     edi
.text:0040E27F                 jmp     loc_40E1C7
.text:0040E284 ; ---------------------------------------------------------------------------
.text:0040E284
.text:0040E284 loc_40E284:                             ; CODE XREF: sub_40E16F+FA↑j
.text:0040E284                 test    edi, edi
.text:0040E286                 jz      loc_40E1C7
.text:0040E28C
.text:0040E28C loc_40E28C:                             ; CODE XREF: sub_40E16F+132↓j
.text:0040E28C                 push    8
.text:0040E28E                 push    8
.text:0040E290                 push    offset Format   ; "%c %c"
.text:0040E295                 call    ds:wprintf
.text:0040E29B                 add     esp, 0Ch
.text:0040E29E                 sub     edi, 1
.text:0040E2A1                 jnz     short loc_40E28C
.text:0040E2A3                 jmp     loc_40E1C7
.text:0040E2A8 ; ---------------------------------------------------------------------------
.text:0040E2A8
.text:0040E2A8 loc_40E2A8:                             ; CODE XREF: sub_40E16F+EA↑j
.text:0040E2A8                 lea     eax, [edi-1]
.text:0040E2AB                 cmp     eax, 3FEh
.text:0040E2B0                 ja      loc_40E1C7
.text:0040E2B6                 mov     eax, [ebp+var_14]
.text:0040E2B9                 xor     ecx, ecx
.text:0040E2BB                 mov     [eax+edi*2], cx
.text:0040E2BF                 dec     edi
.text:0040E2C0                 jmp     loc_40E1C7
.text:0040E2C5 ; ---------------------------------------------------------------------------
.text:0040E2C5
.text:0040E2C5 loc_40E2C5:                             ; CODE XREF: sub_40E16F+7D↑j
.text:0040E2C5                 call    ds:GetLastError
.text:0040E2CB                 mov     esi, eax
.text:0040E2CD                 test    esi, esi
.text:0040E2CF                 jle     short loc_40E2EF
.text:0040E2D1                 movzx   esi, si
.text:0040E2D4                 or      esi, 80070000h
.text:0040E2DA                 jmp     short loc_40E2EF
.text:0040E2DC ; ---------------------------------------------------------------------------
.text:0040E2DC
.text:0040E2DC loc_40E2DC:                             ; CODE XREF: sub_40E16F+F0↑j
.text:0040E2DC                                         ; sub_40E16F+F5↑j
.text:0040E2DC                 mov     edx, offset asc_403204 ; "\n"
.text:0040E2E1                 xor     ecx, ecx
.text:0040E2E3                 call    sub_40E5A2
.text:0040E2E8                 jmp     short loc_40E2EF
.text:0040E2EA ; ---------------------------------------------------------------------------
.text:0040E2EA
.text:0040E2EA loc_40E2EA:                             ; CODE XREF: sub_40E16F+52↑j
.text:0040E2EA                 mov     esi, 80070057h
.text:0040E2EF
.text:0040E2EF loc_40E2EF:                             ; CODE XREF: sub_40E16F+160↑j
.text:0040E2EF                                         ; sub_40E16F+16B↑j ...
.text:0040E2EF                 push    [ebp+Mode]      ; dwMode
.text:0040E2F2                 push    ebx             ; hConsoleHandle
.text:0040E2F3                 call    ds:SetConsoleMode
.text:0040E2F9                 cmp     edi, 400h
.text:0040E2FF                 jb      short loc_40E308
.text:0040E301                 mov     eax, 8007007Ah
.text:0040E306                 jmp     short loc_40E327
.text:0040E308 ; ---------------------------------------------------------------------------
.text:0040E308
.text:0040E308 loc_40E308:                             ; CODE XREF: sub_40E16F+190↑j
.text:0040E308                 mov     eax, [ebp+var_14]
.text:0040E30B                 xor     ecx, ecx
.text:0040E30D                 mov     [eax+edi*2], cx
.text:0040E311                 mov     eax, esi
.text:0040E313                 jmp     short loc_40E327
.text:0040E315 ; ---------------------------------------------------------------------------
.text:0040E315
.text:0040E315 loc_40E315:                             ; CODE XREF: sub_40E16F+28↑j
.text:0040E315                                         ; sub_40E16F+30↑j
.text:0040E315                 call    ds:GetLastError
.text:0040E31B                 test    eax, eax
.text:0040E31D                 jle     short loc_40E327
.text:0040E31F                 movzx   eax, ax
.text:0040E322                 or      eax, 80070000h
.text:0040E327
.text:0040E327 loc_40E327:                             ; CODE XREF: sub_40E16F+197↑j
.text:0040E327                                         ; sub_40E16F+1A4↑j ...
.text:0040E327                 pop     edi
.text:0040E328                 pop     esi
.text:0040E329                 pop     ebx
.text:0040E32A                 mov     esp, ebp
.text:0040E32C                 pop     ebp
.text:0040E32D                 retn    4
.text:0040E32D sub_40E16F      endp
.text:0040E32D
.text:0040E330
.text:0040E330 ; =============== S U B R O U T I N E =======================================
.text:0040E330
.text:0040E330
.text:0040E330 sub_40E330      proc near               ; CODE XREF: sub_40E486+65↓p
.text:0040E330                                         ; sub_40E940+2A↓p
.text:0040E330                 lea     eax, [ecx-20h]
.text:0040E333                 cmp     ax, 5Eh ; '^'
.text:0040E337                 ja      short loc_40E33C
.text:0040E339                 xor     eax, eax
.text:0040E33B                 retn
.text:0040E33C ; ---------------------------------------------------------------------------
.text:0040E33C
.text:0040E33C loc_40E33C:                             ; CODE XREF: sub_40E330+7↑j
.text:0040E33C                 lea     eax, [ecx-3000h]
.text:0040E342                 cmp     ax, 36h ; '6'
.text:0040E346                 ja      short loc_40E34C
.text:0040E348
.text:0040E348 loc_40E348:                             ; CODE XREF: sub_40E330+26↓j
.text:0040E348                 xor     eax, eax
.text:0040E34A                 inc     eax
.text:0040E34B                 retn
.text:0040E34C ; ---------------------------------------------------------------------------
.text:0040E34C
.text:0040E34C loc_40E34C:                             ; CODE XREF: sub_40E330+16↑j
.text:0040E34C                 lea     eax, [ecx-3041h]
.text:0040E352                 cmp     ax, 53h ; 'S'
.text:0040E356                 jbe     short loc_40E348
.text:0040E358                 push    esi
.text:0040E359                 push    5Dh ; ']'
.text:0040E35B                 lea     eax, [ecx-30A1h]
.text:0040E361                 pop     esi
.text:0040E362                 cmp     ax, si
.text:0040E365                 jbe     loc_40E46F
.text:0040E36B                 lea     eax, [ecx-3105h]
.text:0040E371                 cmp     ax, 27h ; '''
.text:0040E375                 jbe     loc_40E46F
.text:0040E37B                 lea     eax, [ecx-3131h]
.text:0040E381                 cmp     ax, si
.text:0040E384                 jbe     loc_40E46F
.text:0040E38A                 lea     eax, [ecx-3200h]
.text:0040E390                 mov     edx, 0FFh
.text:0040E395                 cmp     ax, dx
.text:0040E398                 jbe     loc_40E46F
.text:0040E39E                 lea     eax, [ecx-3300h]
.text:0040E3A4                 dec     edx
.text:0040E3A5                 cmp     ax, dx
.text:0040E3A8                 jbe     loc_40E46F
.text:0040E3AE                 lea     eax, [ecx+5400h]
.text:0040E3B4                 mov     edx, 2BA3h
.text:0040E3B9                 cmp     ax, dx
.text:0040E3BC                 jbe     loc_40E46F
.text:0040E3C2                 lea     eax, [ecx+2000h]
.text:0040E3C8                 mov     edx, 18FFh
.text:0040E3CD                 cmp     ax, dx
.text:0040E3D0                 jbe     loc_40E46F
.text:0040E3D6                 lea     eax, [ecx+0FFh]
.text:0040E3DC                 cmp     ax, si
.text:0040E3DF                 jbe     loc_40E46F
.text:0040E3E5                 lea     eax, [ecx+9Fh]
.text:0040E3EB                 cmp     ax, 3Eh ; '>'
.text:0040E3EF                 jbe     short loc_40E442
.text:0040E3F1                 mov     eax, 0FFA0h
.text:0040E3F6                 cmp     ax, cx
.text:0040E3F9                 ja      short loc_40E403
.text:0040E3FB                 add     eax, 1Eh
.text:0040E3FE                 cmp     cx, ax
.text:0040E401                 jbe     short loc_40E442
.text:0040E403
.text:0040E403 loc_40E403:                             ; CODE XREF: sub_40E330+C9↑j
.text:0040E403                 mov     eax, 0FFC2h
.text:0040E408                 cmp     ax, cx
.text:0040E40B                 ja      short loc_40E415
.text:0040E40D                 add     eax, 5
.text:0040E410                 cmp     cx, ax
.text:0040E413                 jbe     short loc_40E442
.text:0040E415
.text:0040E415 loc_40E415:                             ; CODE XREF: sub_40E330+DB↑j
.text:0040E415                 mov     eax, 0FFCAh
.text:0040E41A                 cmp     ax, cx
.text:0040E41D                 ja      short loc_40E427
.text:0040E41F                 add     eax, 5
.text:0040E422                 cmp     cx, ax
.text:0040E425                 jbe     short loc_40E442
.text:0040E427
.text:0040E427 loc_40E427:                             ; CODE XREF: sub_40E330+ED↑j
.text:0040E427                 mov     eax, 0FFD2h
.text:0040E42C                 cmp     ax, cx
.text:0040E42F                 ja      short loc_40E439
.text:0040E431                 add     eax, 5
.text:0040E434                 cmp     cx, ax
.text:0040E437                 jbe     short loc_40E442
.text:0040E439
.text:0040E439 loc_40E439:                             ; CODE XREF: sub_40E330+FF↑j
.text:0040E439                 lea     eax, [ecx+26h]
.text:0040E43C                 cmp     ax, 2
.text:0040E440                 ja      short loc_40E446
.text:0040E442
.text:0040E442 loc_40E442:                             ; CODE XREF: sub_40E330+BF↑j
.text:0040E442                                         ; sub_40E330+D1↑j ...
.text:0040E442                 xor     eax, eax
.text:0040E444                 pop     esi
.text:0040E445                 retn
.text:0040E446 ; ---------------------------------------------------------------------------
.text:0040E446
.text:0040E446 loc_40E446:                             ; CODE XREF: sub_40E330+110↑j
.text:0040E446                 lea     eax, [ecx+20h]
.text:0040E449                 cmp     ax, 6
.text:0040E44D                 jbe     short loc_40E46F
.text:0040E44F                 lea     eax, [ecx-4E00h]
.text:0040E455                 mov     edx, 51A5h
.text:0040E45A                 cmp     ax, dx
.text:0040E45D                 jbe     short loc_40E46F
.text:0040E45F                 lea     eax, [ecx+700h]
.text:0040E465                 mov     edx, 12Dh
.text:0040E46A                 cmp     ax, dx
.text:0040E46D                 ja      short loc_40E474
.text:0040E46F
.text:0040E46F loc_40E46F:                             ; CODE XREF: sub_40E330+35↑j
.text:0040E46F                                         ; sub_40E330+45↑j ...
.text:0040E46F                 xor     eax, eax
.text:0040E471                 inc     eax
.text:0040E472                 pop     esi
.text:0040E473                 retn
.text:0040E474 ; ---------------------------------------------------------------------------
.text:0040E474
.text:0040E474 loc_40E474:                             ; CODE XREF: sub_40E330+13D↑j
.text:0040E474                 lea     eax, [ecx+1D0h]
.text:0040E47A                 mov     cx, 1Fh
.text:0040E47E                 cmp     cx, ax
.text:0040E481                 pop     esi
.text:0040E482                 sbb     eax, eax
.text:0040E484                 inc     eax
.text:0040E485                 retn
.text:0040E485 sub_40E330      endp
.text:0040E485
.text:0040E486
.text:0040E486 ; =============== S U B R O U T I N E =======================================
.text:0040E486
.text:0040E486 ; Attributes: bp-based frame
.text:0040E486
.text:0040E486 sub_40E486      proc near               ; CODE XREF: sub_40E057+60↑p
.text:0040E486                                         ; sub_40E5A2+3D↓p
.text:0040E486
.text:0040E486 var_C           = dword ptr -0Ch
.text:0040E486 var_8           = dword ptr -8
.text:0040E486 var_4           = dword ptr -4
.text:0040E486 arg_0           = dword ptr  8
.text:0040E486
.text:0040E486                 mov     edi, edi
.text:0040E488                 push    ebp
.text:0040E489                 mov     ebp, esp
.text:0040E48B                 sub     esp, 0Ch
.text:0040E48E                 and     [ebp+var_4], 0
.text:0040E492                 and     [ebp+var_8], 0
.text:0040E496                 push    ebx
.text:0040E497                 push    esi
.text:0040E498                 push    edi
.text:0040E499                 mov     edi, ecx
.text:0040E49B                 mov     ebx, edx
.text:0040E49D                 mov     [ebp+var_C], ebx
.text:0040E4A0                 test    edi, edi
.text:0040E4A2                 jnz     short loc_40E4A9
.text:0040E4A4                 xor     esi, esi
.text:0040E4A6                 inc     esi
.text:0040E4A7                 jmp     short loc_40E522
.text:0040E4A9 ; ---------------------------------------------------------------------------
.text:0040E4A9
.text:0040E4A9 loc_40E4A9:                             ; CODE XREF: sub_40E486+1C↑j
.text:0040E4A9                 lea     eax, [ebp+var_8]
.text:0040E4AC                 push    eax
.text:0040E4AD                 call    sub_40EBD0
.text:0040E4B2                 mov     esi, eax
.text:0040E4B4                 test    esi, esi
.text:0040E4B6                 js      short loc_40E522
.text:0040E4B8                 test    ebx, ebx
.text:0040E4BA                 jz      short loc_40E52D
.text:0040E4BC                 call    ds:GetConsoleOutputCP
.text:0040E4C2                 cmp     eax, 3A4h
.text:0040E4C7                 jz      short loc_40E4DE
.text:0040E4C9                 cmp     eax, 3A8h
.text:0040E4CE                 jz      short loc_40E4DE
.text:0040E4D0                 cmp     eax, 3B4h
.text:0040E4D5                 jbe     short loc_40E52D
.text:0040E4D7                 cmp     eax, 3B6h
.text:0040E4DC                 ja      short loc_40E52D
.text:0040E4DE
.text:0040E4DE loc_40E4DE:                             ; CODE XREF: sub_40E486+41↑j
.text:0040E4DE                                         ; sub_40E486+48↑j
.text:0040E4DE                 movzx   eax, word ptr [edi]
.text:0040E4E1                 test    ax, ax
.text:0040E4E4                 jz      short loc_40E50B
.text:0040E4E6                 mov     ebx, [ebp+var_4]
.text:0040E4E9
.text:0040E4E9 loc_40E4E9:                             ; CODE XREF: sub_40E486+7D↓j
.text:0040E4E9                 mov     ecx, eax
.text:0040E4EB                 call    sub_40E330
.text:0040E4F0                 xor     ecx, ecx
.text:0040E4F2                 lea     edi, [edi+2]
.text:0040E4F5                 test    eax, eax
.text:0040E4F7                 movzx   eax, word ptr [edi]
.text:0040E4FA                 setnz   cl
.text:0040E4FD                 inc     ecx
.text:0040E4FE                 add     ebx, ecx
.text:0040E500                 test    ax, ax
.text:0040E503                 jnz     short loc_40E4E9
.text:0040E505                 mov     [ebp+var_4], ebx
.text:0040E508                 mov     ebx, [ebp+var_C]
.text:0040E50B
.text:0040E50B loc_40E50B:                             ; CODE XREF: sub_40E486+5E↑j
.text:0040E50B                 mov     ecx, [ebp+var_8]
.text:0040E50E                 mov     eax, [ebp+var_4]
.text:0040E511
.text:0040E511 loc_40E511:                             ; CODE XREF: sub_40E486+AE↓j
.text:0040E511                 test    ebx, ebx
.text:0040E513                 jz      short loc_40E517
.text:0040E515                 mov     [ebx], eax
.text:0040E517
.text:0040E517 loc_40E517:                             ; CODE XREF: sub_40E486+8D↑j
.text:0040E517                 mov     eax, [ebp+arg_0]
.text:0040E51A                 test    eax, eax
.text:0040E51C                 jz      short loc_40E522
.text:0040E51E                 mov     [eax], ecx
.text:0040E520                 xor     esi, esi
.text:0040E522
.text:0040E522 loc_40E522:                             ; CODE XREF: sub_40E486+21↑j
.text:0040E522                                         ; sub_40E486+30↑j ...
.text:0040E522                 pop     edi
.text:0040E523                 mov     eax, esi
.text:0040E525                 pop     esi
.text:0040E526                 pop     ebx
.text:0040E527                 mov     esp, ebp
.text:0040E529                 pop     ebp
.text:0040E52A                 retn    4
.text:0040E52D ; ---------------------------------------------------------------------------
.text:0040E52D
.text:0040E52D loc_40E52D:                             ; CODE XREF: sub_40E486+34↑j
.text:0040E52D                                         ; sub_40E486+4F↑j ...
.text:0040E52D                 mov     ecx, [ebp+var_8]
.text:0040E530                 xor     esi, esi
.text:0040E532                 mov     eax, ecx
.text:0040E534                 jmp     short loc_40E511
.text:0040E534 sub_40E486      endp
.text:0040E534
.text:0040E536
.text:0040E536 ; =============== S U B R O U T I N E =======================================
.text:0040E536
.text:0040E536 ; Attributes: bp-based frame
.text:0040E536
.text:0040E536 ; int __fastcall sub_40E536(HANDLE hConsoleOutput, void *lpBuffer, DWORD nNumberOfCharsToWrite)
.text:0040E536 sub_40E536      proc near               ; CODE XREF: sub_40E5A2+5F↓p
.text:0040E536
.text:0040E536 NumberOfCharsWritten= dword ptr -4
.text:0040E536 nNumberOfCharsToWrite= dword ptr  8
.text:0040E536
.text:0040E536                 mov     edi, edi
.text:0040E538                 push    ebp
.text:0040E539                 mov     ebp, esp
.text:0040E53B                 push    ecx
.text:0040E53C                 push    ebx
.text:0040E53D                 push    esi
.text:0040E53E                 mov     esi, [ebp+nNumberOfCharsToWrite]
.text:0040E541                 mov     ebx, ecx
.text:0040E543                 push    edi
.text:0040E544                 mov     edi, edx
.text:0040E546
.text:0040E546 loc_40E546:                             ; CODE XREF: sub_40E536+61↓j
.text:0040E546                 mov     eax, esi
.text:0040E548                 cmp     esi, 2000h
.text:0040E54E                 jb      short loc_40E555
.text:0040E550                 mov     eax, 2000h
.text:0040E555
.text:0040E555 loc_40E555:                             ; CODE XREF: sub_40E536+18↑j
.text:0040E555                 push    0               ; lpReserved
.text:0040E557                 lea     ecx, [ebp+NumberOfCharsWritten]
.text:0040E55A                 push    ecx             ; lpNumberOfCharsWritten
.text:0040E55B                 push    eax             ; nNumberOfCharsToWrite
.text:0040E55C                 push    edi             ; lpBuffer
.text:0040E55D                 push    ebx             ; hConsoleOutput
.text:0040E55E                 call    ds:WriteConsoleW
.text:0040E564                 test    eax, eax
.text:0040E566                 jz      short loc_40E56C
.text:0040E568                 xor     eax, eax
.text:0040E56A                 jmp     short loc_40E58B
.text:0040E56C ; ---------------------------------------------------------------------------
.text:0040E56C
.text:0040E56C loc_40E56C:                             ; CODE XREF: sub_40E536+30↑j
.text:0040E56C                 call    ds:GetLastError
.text:0040E572                 test    eax, eax
.text:0040E574                 jz      short loc_40E582
.text:0040E576                 jle     short loc_40E589
.text:0040E578                 movzx   eax, ax
.text:0040E57B                 or      eax, 80070000h
.text:0040E580                 jmp     short loc_40E587
.text:0040E582 ; ---------------------------------------------------------------------------
.text:0040E582
.text:0040E582 loc_40E582:                             ; CODE XREF: sub_40E536+3E↑j
.text:0040E582                 mov     eax, 80004005h
.text:0040E587
.text:0040E587 loc_40E587:                             ; CODE XREF: sub_40E536+4A↑j
.text:0040E587                 test    eax, eax
.text:0040E589
.text:0040E589 loc_40E589:                             ; CODE XREF: sub_40E536+40↑j
.text:0040E589                 js      short loc_40E599
.text:0040E58B
.text:0040E58B loc_40E58B:                             ; CODE XREF: sub_40E536+34↑j
.text:0040E58B                 mov     ecx, [ebp+NumberOfCharsWritten]
.text:0040E58E                 cmp     ecx, esi
.text:0040E590                 ja      short loc_40E599
.text:0040E592                 lea     edi, [edi+ecx*2]
.text:0040E595                 sub     esi, ecx
.text:0040E597                 jnz     short loc_40E546
.text:0040E599
.text:0040E599 loc_40E599:                             ; CODE XREF: sub_40E536:loc_40E589↑j
.text:0040E599                                         ; sub_40E536+5A↑j
.text:0040E599                 pop     edi
.text:0040E59A                 pop     esi
.text:0040E59B                 pop     ebx
.text:0040E59C                 mov     esp, ebp
.text:0040E59E                 pop     ebp
.text:0040E59F                 retn    4
.text:0040E59F sub_40E536      endp
.text:0040E59F
.text:0040E5A2
.text:0040E5A2 ; =============== S U B R O U T I N E =======================================
.text:0040E5A2
.text:0040E5A2 ; Attributes: bp-based frame
.text:0040E5A2
.text:0040E5A2 sub_40E5A2      proc near               ; CODE XREF: _wmain+471↑p
.text:0040E5A2                                         ; DisplayDataSets(_LOGMAN_NS *)+BB↑p ...
.text:0040E5A2
.text:0040E5A2 NumberOfBytesWritten= dword ptr -10h
.text:0040E5A2 nNumberOfBytesToWrite= dword ptr -0Ch
.text:0040E5A2 lpWideCharStr   = dword ptr -8
.text:0040E5A2 dwBytes         = dword ptr -4
.text:0040E5A2
.text:0040E5A2                 mov     edi, edi
.text:0040E5A4                 push    ebp
.text:0040E5A5                 mov     ebp, esp
.text:0040E5A7                 sub     esp, 10h
.text:0040E5AA                 and     [ebp+dwBytes], 0
.text:0040E5AE                 push    ebx
.text:0040E5AF                 push    esi
.text:0040E5B0                 push    edi
.text:0040E5B1                 mov     esi, edx
.text:0040E5B3                 mov     [ebp+nNumberOfBytesToWrite], ecx
.text:0040E5B6                 push    0FFFFFFF5h      ; nStdHandle
.text:0040E5B8                 mov     [ebp+lpWideCharStr], esi
.text:0040E5BB                 xor     edi, edi
.text:0040E5BD                 call    ds:GetStdHandle
.text:0040E5C3                 mov     ebx, eax
.text:0040E5C5                 cmp     ebx, 0FFFFFFFFh
.text:0040E5C8                 jz      loc_40E71B
.text:0040E5CE                 test    ebx, ebx
.text:0040E5D0                 jz      loc_40E71B
.text:0040E5D6                 mov     edx, [ebp+nNumberOfBytesToWrite]
.text:0040E5D9                 lea     eax, [ebp+dwBytes]
.text:0040E5DC                 push    eax
.text:0040E5DD                 mov     ecx, esi
.text:0040E5DF                 call    sub_40E486
.text:0040E5E4                 mov     esi, eax
.text:0040E5E6                 test    esi, esi
.text:0040E5E8                 js      loc_40E744
.text:0040E5EE                 mov     ecx, ebx        ; hConsoleHandle
.text:0040E5F0                 call    sub_4105F7
.text:0040E5F5                 test    eax, eax
.text:0040E5F7                 jz      short loc_40E63B
.text:0040E5F9                 push    [ebp+dwBytes]   ; nNumberOfCharsToWrite
.text:0040E5FC                 mov     edx, [ebp+lpWideCharStr] ; lpBuffer
.text:0040E5FF                 mov     ecx, ebx        ; hConsoleOutput
.text:0040E601                 call    sub_40E536
.text:0040E606                 test    eax, eax
.text:0040E608                 jz      short loc_40E611
.text:0040E60A                 xor     esi, esi
.text:0040E60C                 jmp     loc_40E744
.text:0040E611 ; ---------------------------------------------------------------------------
.text:0040E611
.text:0040E611 loc_40E611:                             ; CODE XREF: sub_40E5A2+66↑j
.text:0040E611                 call    ds:GetLastError
.text:0040E617                 mov     esi, eax
.text:0040E619                 test    esi, esi
.text:0040E61B                 jz      short loc_40E631
.text:0040E61D                 jle     loc_40E744
.text:0040E623                 movzx   esi, si
.text:0040E626                 or      esi, 80070000h
.text:0040E62C                 jmp     loc_40E744
.text:0040E631 ; ---------------------------------------------------------------------------
.text:0040E631
.text:0040E631 loc_40E631:                             ; CODE XREF: sub_40E5A2+79↑j
.text:0040E631                 mov     esi, 80004005h
.text:0040E636                 jmp     loc_40E744
.text:0040E63B ; ---------------------------------------------------------------------------
.text:0040E63B
.text:0040E63B loc_40E63B:                             ; CODE XREF: sub_40E5A2+55↑j
.text:0040E63B                 mov     eax, [ebp+dwBytes]
.text:0040E63E                 lea     ecx, [eax+1]
.text:0040E641                 cmp     ecx, eax
.text:0040E643                 jb      loc_40E714
.text:0040E649                 lea     eax, [ebp+dwBytes]
.text:0040E64C                 mov     [ebp+dwBytes], ecx
.text:0040E64F                 push    eax
.text:0040E650                 call    ?SizeTMult@@YGJIIPAI@Z ; SizeTMult(uint,uint,uint *)
.text:0040E655                 mov     esi, eax
.text:0040E657                 test    esi, esi
.text:0040E659                 js      loc_40E744
.text:0040E65F                 cmp     [ebp+dwBytes], 7FFFFFFFh
.text:0040E666                 ja      loc_40E714
.text:0040E66C                 push    [ebp+dwBytes]   ; dwBytes
.text:0040E66F                 push    0               ; dwFlags
.text:0040E671                 call    ds:GetProcessHeap
.text:0040E677                 push    eax             ; hHeap
.text:0040E678                 call    ds:HeapAlloc
.text:0040E67E                 mov     edi, eax
.text:0040E680                 test    edi, edi
.text:0040E682                 jnz     short loc_40E68E
.text:0040E684                 mov     esi, 8007000Eh
.text:0040E689                 jmp     loc_40E744
.text:0040E68E ; ---------------------------------------------------------------------------
.text:0040E68E
.text:0040E68E loc_40E68E:                             ; CODE XREF: sub_40E5A2+E0↑j
.text:0040E68E                 xor     eax, eax
.text:0040E690                 push    eax             ; lpUsedDefaultChar
.text:0040E691                 push    offset DefaultChar ; "_"
.text:0040E696                 push    [ebp+dwBytes]   ; cbMultiByte
.text:0040E699                 mov     [edi], al
.text:0040E69B                 push    edi             ; lpMultiByteStr
.text:0040E69C                 push    0FFFFFFFFh      ; cchWideChar
.text:0040E69E                 push    [ebp+lpWideCharStr] ; lpWideCharStr
.text:0040E6A1                 push    eax             ; dwFlags
.text:0040E6A2                 push    1               ; CodePage
.text:0040E6A4                 call    ds:WideCharToMultiByte
.text:0040E6AA                 test    eax, eax
.text:0040E6AC                 jg      short loc_40E6D0
.text:0040E6AE                 call    ds:GetLastError
.text:0040E6B4                 mov     esi, eax
.text:0040E6B6                 test    esi, esi
.text:0040E6B8                 jz      short loc_40E6C7
.text:0040E6BA                 jle     short loc_40E6CE
.text:0040E6BC                 movzx   esi, si
.text:0040E6BF                 or      esi, 80070000h
.text:0040E6C5                 jmp     short loc_40E6CC
.text:0040E6C7 ; ---------------------------------------------------------------------------
.text:0040E6C7
.text:0040E6C7 loc_40E6C7:                             ; CODE XREF: sub_40E5A2+116↑j
.text:0040E6C7                 mov     esi, 80004005h
.text:0040E6CC
.text:0040E6CC loc_40E6CC:                             ; CODE XREF: sub_40E5A2+123↑j
.text:0040E6CC                 test    esi, esi
.text:0040E6CE
.text:0040E6CE loc_40E6CE:                             ; CODE XREF: sub_40E5A2+118↑j
.text:0040E6CE                 js      short loc_40E730
.text:0040E6D0
.text:0040E6D0 loc_40E6D0:                             ; CODE XREF: sub_40E5A2+10A↑j
.text:0040E6D0                 mov     edx, [ebp+dwBytes]
.text:0040E6D3                 lea     eax, [ebp+nNumberOfBytesToWrite]
.text:0040E6D6                 push    eax
.text:0040E6D7                 mov     ecx, edi
.text:0040E6D9                 call    ?StringCchLengthA@@YGJPBDIPAI@Z ; StringCchLengthA(char const *,uint,uint *)
.text:0040E6DE                 mov     esi, eax
.text:0040E6E0                 test    esi, esi
.text:0040E6E2                 js      short loc_40E730
.text:0040E6E4                 push    0               ; lpOverlapped
.text:0040E6E6                 lea     eax, [ebp+NumberOfBytesWritten]
.text:0040E6E9                 push    eax             ; lpNumberOfBytesWritten
.text:0040E6EA                 push    [ebp+nNumberOfBytesToWrite] ; nNumberOfBytesToWrite
.text:0040E6ED                 push    edi             ; lpBuffer
.text:0040E6EE                 push    ebx             ; hFile
.text:0040E6EF                 call    ds:WriteFile
.text:0040E6F5                 test    eax, eax
.text:0040E6F7                 jz      short loc_40E6FD
.text:0040E6F9                 xor     esi, esi
.text:0040E6FB                 jmp     short loc_40E730
.text:0040E6FD ; ---------------------------------------------------------------------------
.text:0040E6FD
.text:0040E6FD loc_40E6FD:                             ; CODE XREF: sub_40E5A2+155↑j
.text:0040E6FD                 call    ds:GetLastError
.text:0040E703                 mov     esi, eax
.text:0040E705                 test    esi, esi
.text:0040E707                 jz      short loc_40E70D
.text:0040E709                 jle     short loc_40E730
.text:0040E70B                 jmp     short loc_40E727
.text:0040E70D ; ---------------------------------------------------------------------------
.text:0040E70D
.text:0040E70D loc_40E70D:                             ; CODE XREF: sub_40E5A2+165↑j
.text:0040E70D                 mov     esi, 80004005h
.text:0040E712                 jmp     short loc_40E730
.text:0040E714 ; ---------------------------------------------------------------------------
.text:0040E714
.text:0040E714 loc_40E714:                             ; CODE XREF: sub_40E5A2+A1↑j
.text:0040E714                                         ; sub_40E5A2+C4↑j
.text:0040E714                 mov     esi, 80070216h
.text:0040E719                 jmp     short loc_40E744
.text:0040E71B ; ---------------------------------------------------------------------------
.text:0040E71B
.text:0040E71B loc_40E71B:                             ; CODE XREF: sub_40E5A2+26↑j
.text:0040E71B                                         ; sub_40E5A2+2E↑j
.text:0040E71B                 call    ds:GetLastError
.text:0040E721                 mov     esi, eax
.text:0040E723                 test    esi, esi
.text:0040E725                 jle     short loc_40E744
.text:0040E727
.text:0040E727 loc_40E727:                             ; CODE XREF: sub_40E5A2+169↑j
.text:0040E727                 movzx   esi, si
.text:0040E72A                 or      esi, 80070000h
.text:0040E730
.text:0040E730 loc_40E730:                             ; CODE XREF: sub_40E5A2:loc_40E6CE↑j
.text:0040E730                                         ; sub_40E5A2+140↑j ...
.text:0040E730                 test    edi, edi
.text:0040E732                 jz      short loc_40E744
.text:0040E734                 push    edi             ; lpMem
.text:0040E735                 push    0               ; dwFlags
.text:0040E737                 call    ds:GetProcessHeap
.text:0040E73D                 push    eax             ; hHeap
.text:0040E73E                 call    ds:HeapFree
.text:0040E744
.text:0040E744 loc_40E744:                             ; CODE XREF: sub_40E5A2+46↑j
.text:0040E744                                         ; sub_40E5A2+6A↑j ...
.text:0040E744                 pop     edi
.text:0040E745                 mov     eax, esi
.text:0040E747                 pop     esi
.text:0040E748                 pop     ebx
.text:0040E749                 mov     esp, ebp
.text:0040E74B                 pop     ebp
.text:0040E74C                 retn
.text:0040E74C sub_40E5A2      endp
.text:0040E74C
.text:0040E74D
.text:0040E74D ; =============== S U B R O U T I N E =======================================
.text:0040E74D
.text:0040E74D ; Attributes: bp-based frame
.text:0040E74D
.text:0040E74D ; int __thiscall sub_40E74D(LPCVOID lpSource, int)
.text:0040E74D sub_40E74D      proc near               ; CODE XREF: sub_40E7CF+E↓p
.text:0040E74D                                         ; sub_40E7E4+D↓p ...
.text:0040E74D
.text:0040E74D Arguments       = dword ptr -8
.text:0040E74D Buffer          = word ptr -4
.text:0040E74D arg_0           = dword ptr  8
.text:0040E74D
.text:0040E74D                 mov     edi, edi
.text:0040E74F                 push    ebp
.text:0040E750                 mov     ebp, esp
.text:0040E752                 push    ecx
.text:0040E753                 push    ecx
.text:0040E754                 push    ebx
.text:0040E755                 push    esi
.text:0040E756                 push    edi
.text:0040E757                 lea     eax, [ebp+Arguments]
.text:0040E75A                 mov     [ebp+Arguments], edx
.text:0040E75D                 push    eax             ; Arguments
.text:0040E75E                 push    400h            ; nSize
.text:0040E763                 xor     edx, edx
.text:0040E765                 lea     eax, [ebp+Buffer]
.text:0040E768                 push    eax             ; lpBuffer
.text:0040E769                 push    edx             ; dwLanguageId
.text:0040E76A                 push    edx             ; dwMessageId
.text:0040E76B                 push    ecx             ; lpSource
.text:0040E76C                 push    500h            ; dwFlags
.text:0040E771                 mov     dword ptr [ebp+Buffer], edx
.text:0040E774                 call    ds:FormatMessageW
.text:0040E77A                 mov     edi, [ebp+arg_0]
.text:0040E77D                 mov     ebx, eax
.text:0040E77F                 test    ebx, ebx
.text:0040E781                 jnz     short loc_40E7A3
.text:0040E783                 call    ds:GetLastError
.text:0040E789                 mov     esi, eax
.text:0040E78B                 test    esi, esi
.text:0040E78D                 jz      short loc_40E79C
.text:0040E78F                 jle     short loc_40E7AF
.text:0040E791                 movzx   esi, si
.text:0040E794                 or      esi, 80070000h
.text:0040E79A                 jmp     short loc_40E7AF
.text:0040E79C ; ---------------------------------------------------------------------------
.text:0040E79C
.text:0040E79C loc_40E79C:                             ; CODE XREF: sub_40E74D+40↑j
.text:0040E79C                 mov     esi, 80004005h
.text:0040E7A1                 jmp     short loc_40E7AF
.text:0040E7A3 ; ---------------------------------------------------------------------------
.text:0040E7A3
.text:0040E7A3 loc_40E7A3:                             ; CODE XREF: sub_40E74D+34↑j
.text:0040E7A3                 mov     edx, dword ptr [ebp+Buffer]
.text:0040E7A6                 mov     ecx, edi
.text:0040E7A8                 call    sub_40E5A2
.text:0040E7AD                 mov     esi, eax
.text:0040E7AF
.text:0040E7AF loc_40E7AF:                             ; CODE XREF: sub_40E74D+42↑j
.text:0040E7AF                                         ; sub_40E74D+4D↑j ...
.text:0040E7AF                 test    edi, edi
.text:0040E7B1                 jz      short loc_40E7B5
.text:0040E7B3                 mov     [edi], ebx
.text:0040E7B5
.text:0040E7B5 loc_40E7B5:                             ; CODE XREF: sub_40E74D+64↑j
.text:0040E7B5                 cmp     dword ptr [ebp+Buffer], 0
.text:0040E7B9                 jz      short loc_40E7C4
.text:0040E7BB                 push    dword ptr [ebp+Buffer] ; hMem
.text:0040E7BE                 call    ds:LocalFree
.text:0040E7C4
.text:0040E7C4 loc_40E7C4:                             ; CODE XREF: sub_40E74D+6C↑j
.text:0040E7C4                 pop     edi
.text:0040E7C5                 mov     eax, esi
.text:0040E7C7                 pop     esi
.text:0040E7C8                 pop     ebx
.text:0040E7C9                 mov     esp, ebp
.text:0040E7CB                 pop     ebp
.text:0040E7CC                 retn    4
.text:0040E7CC sub_40E74D      endp
.text:0040E7CC
.text:0040E7CF
.text:0040E7CF ; =============== S U B R O U T I N E =======================================
.text:0040E7CF
.text:0040E7CF ; Attributes: bp-based frame
.text:0040E7CF
.text:0040E7CF ; int __cdecl sub_40E7CF(int, LPCVOID lpSource, char)
.text:0040E7CF sub_40E7CF      proc near               ; CODE XREF: sub_40F3C0+6E↓p
.text:0040E7CF                                         ; sub_40F3C0+B1↓p
.text:0040E7CF
.text:0040E7CF arg_0           = dword ptr  8
.text:0040E7CF lpSource        = dword ptr  0Ch
.text:0040E7CF arg_8           = byte ptr  10h
.text:0040E7CF
.text:0040E7CF                 mov     edi, edi
.text:0040E7D1                 push    ebp
.text:0040E7D2                 mov     ebp, esp
.text:0040E7D4                 push    [ebp+arg_0]     ; int
.text:0040E7D7                 mov     ecx, [ebp+lpSource] ; lpSource
.text:0040E7DA                 lea     edx, [ebp+arg_8]
.text:0040E7DD                 call    sub_40E74D
.text:0040E7E2                 pop     ebp
.text:0040E7E3                 retn
.text:0040E7E3 sub_40E7CF      endp
.text:0040E7E3
.text:0040E7E4
.text:0040E7E4 ; =============== S U B R O U T I N E =======================================
.text:0040E7E4
.text:0040E7E4 ; Attributes: bp-based frame
.text:0040E7E4
.text:0040E7E4 ; int __cdecl sub_40E7E4(LPCVOID lpSource, char)
.text:0040E7E4 sub_40E7E4      proc near               ; CODE XREF: sub_4096BC+DF↑p
.text:0040E7E4                                         ; sub_40D9B5+188↑p ...
.text:0040E7E4
.text:0040E7E4 lpSource        = dword ptr  8
.text:0040E7E4 arg_4           = byte ptr  0Ch
.text:0040E7E4
.text:0040E7E4                 mov     edi, edi
.text:0040E7E6                 push    ebp
.text:0040E7E7                 mov     ebp, esp
.text:0040E7E9                 mov     ecx, [ebp+lpSource] ; lpSource
.text:0040E7EC                 lea     edx, [ebp+arg_4]
.text:0040E7EF                 push    0               ; int
.text:0040E7F1                 call    sub_40E74D
.text:0040E7F6                 pop     ebp
.text:0040E7F7                 retn
.text:0040E7F7 sub_40E7E4      endp
.text:0040E7F7
.text:0040E7F8
.text:0040E7F8 ; =============== S U B R O U T I N E =======================================
.text:0040E7F8
.text:0040E7F8 ; Attributes: bp-based frame
.text:0040E7F8
.text:0040E7F8 ; int __usercall sub_40E7F8@<eax>(int@<ecx>, int, UINT uID, char)
.text:0040E7F8 sub_40E7F8      proc near               ; CODE XREF: _wmain+5C9↑p
.text:0040E7F8                                         ; _wmain+7E2↑p ...
.text:0040E7F8
.text:0040E7F8 Source          = byte ptr -804h
.text:0040E7F8 var_4           = dword ptr -4
.text:0040E7F8 arg_0           = dword ptr  8
.text:0040E7F8 uID             = dword ptr  0Ch
.text:0040E7F8 arg_8           = byte ptr  10h
.text:0040E7F8
.text:0040E7F8                 mov     edi, edi
.text:0040E7FA                 push    ebp
.text:0040E7FB                 mov     ebp, esp
.text:0040E7FD                 sub     esp, 804h
.text:0040E803                 mov     eax, ___security_cookie
.text:0040E808                 xor     eax, ebp
.text:0040E80A                 mov     [ebp+var_4], eax
.text:0040E80D                 push    esi
.text:0040E80E                 mov     esi, [ebp+arg_0]
.text:0040E811                 lea     edx, [ebp+Source] ; lpBuffer
.text:0040E817                 push    ecx             ; int
.text:0040E818                 mov     ecx, [ebp+uID]  ; uID
.text:0040E81B                 call    sub_40EE50
.text:0040E820                 test    eax, eax
.text:0040E822                 js      short loc_40E833
.text:0040E824                 push    esi             ; int
.text:0040E825                 lea     edx, [ebp+arg_8]
.text:0040E828                 lea     ecx, [ebp+Source] ; lpSource
.text:0040E82E                 call    sub_40E74D
.text:0040E833
.text:0040E833 loc_40E833:                             ; CODE XREF: sub_40E7F8+2A↑j
.text:0040E833                 mov     ecx, [ebp+var_4]
.text:0040E836                 xor     ecx, ebp        ; StackCookie
.text:0040E838                 pop     esi
.text:0040E839                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040E83E                 mov     esp, ebp
.text:0040E840                 pop     ebp
.text:0040E841                 retn
.text:0040E841 sub_40E7F8      endp
.text:0040E841
.text:0040E842
.text:0040E842 ; =============== S U B R O U T I N E =======================================
.text:0040E842
.text:0040E842 ; Attributes: bp-based frame
.text:0040E842
.text:0040E842 ; int __fastcall sub_40E842(char)
.text:0040E842 sub_40E842      proc near               ; CODE XREF: _wmain+7F2↑p
.text:0040E842
.text:0040E842 var_8           = dword ptr -8
.text:0040E842 Buffer          = word ptr -4
.text:0040E842
.text:0040E842                 mov     edi, edi
.text:0040E844                 push    ebp
.text:0040E845                 mov     ebp, esp
.text:0040E847                 push    ecx
.text:0040E848                 push    ecx
.text:0040E849                 push    ebx
.text:0040E84A                 push    esi
.text:0040E84B                 push    edi             ; char
.text:0040E84C                 xor     esi, esi
.text:0040E84E                 mov     edi, ecx
.text:0040E850                 push    offset LibFileName ; "pdh.dll"
.text:0040E855                 mov     dword ptr [ebp+Buffer], esi
.text:0040E858                 call    ds:LoadLibraryW
.text:0040E85E                 mov     ebx, eax
.text:0040E860                 test    ebx, ebx
.text:0040E862                 jnz     short loc_40E882
.text:0040E864                 call    ds:GetLastError
.text:0040E86A                 mov     esi, eax
.text:0040E86C                 test    esi, esi
.text:0040E86E                 jle     loc_40E928
.text:0040E874                 movzx   esi, si
.text:0040E877                 or      esi, 80070000h
.text:0040E87D                 jmp     loc_40E928
.text:0040E882 ; ---------------------------------------------------------------------------
.text:0040E882
.text:0040E882 loc_40E882:                             ; CODE XREF: sub_40E842+20↑j
.text:0040E882                 cmp     dword_414FF8, esi
.text:0040E888                 jz      short loc_40E89B
.text:0040E88A                 push    edi             ; char
.text:0040E88B                 push    3B64h           ; uID
.text:0040E890                 push    esi             ; int
.text:0040E891                 call    sub_40E7F8
.text:0040E896                 add     esp, 0Ch
.text:0040E899                 jmp     short loc_40E8A8
.text:0040E89B ; ---------------------------------------------------------------------------
.text:0040E89B
.text:0040E89B loc_40E89B:                             ; CODE XREF: sub_40E842+46↑j
.text:0040E89B                 push    3B61h           ; uID
.text:0040E8A0                 push    esi             ; int
.text:0040E8A1                 call    sub_40E7F8
.text:0040E8A6                 pop     ecx
.text:0040E8A7                 pop     ecx
.text:0040E8A8
.text:0040E8A8 loc_40E8A8:                             ; CODE XREF: sub_40E842+57↑j
.text:0040E8A8                 push    esi             ; Arguments
.text:0040E8A9                 push    400h            ; nSize
.text:0040E8AE                 lea     eax, [ebp+Buffer]
.text:0040E8B1                 push    eax             ; lpBuffer
.text:0040E8B2                 push    esi             ; dwLanguageId
.text:0040E8B3                 push    edi             ; dwMessageId
.text:0040E8B4                 push    ebx             ; lpSource
.text:0040E8B5                 push    0B00h           ; dwFlags
.text:0040E8BA                 call    ds:FormatMessageW
.text:0040E8C0                 mov     edx, dword ptr [ebp+Buffer]
.text:0040E8C3                 test    edx, edx
.text:0040E8C5                 jnz     short loc_40E8F5
.text:0040E8C7                 push    esi             ; Arguments
.text:0040E8C8                 push    400h            ; nSize
.text:0040E8CD                 lea     eax, [ebp+Buffer]
.text:0040E8D0                 push    eax             ; lpBuffer
.text:0040E8D1                 push    esi             ; dwLanguageId
.text:0040E8D2                 push    edi             ; dwMessageId
.text:0040E8D3                 push    esi             ; lpSource
.text:0040E8D4                 push    1300h           ; dwFlags
.text:0040E8D9                 call    ds:FormatMessageW
.text:0040E8DF                 mov     edx, dword ptr [ebp+Buffer]
.text:0040E8E2                 test    edx, edx
.text:0040E8E4                 jnz     short loc_40E8F5
.text:0040E8E6                 push    3B63h           ; uID
.text:0040E8EB                 push    esi             ; int
.text:0040E8EC                 call    sub_40E7F8
.text:0040E8F1                 pop     ecx
.text:0040E8F2                 pop     ecx
.text:0040E8F3                 jmp     short loc_40E8FC
.text:0040E8F5 ; ---------------------------------------------------------------------------
.text:0040E8F5
.text:0040E8F5 loc_40E8F5:                             ; CODE XREF: sub_40E842+83↑j
.text:0040E8F5                                         ; sub_40E842+A2↑j
.text:0040E8F5                 xor     ecx, ecx
.text:0040E8F7                 call    sub_40E5A2
.text:0040E8FC
.text:0040E8FC loc_40E8FC:                             ; CODE XREF: sub_40E842+B1↑j
.text:0040E8FC                 cmp     di, 5
.text:0040E900                 jnz     short loc_40E921
.text:0040E902                 lea     edx, [ebp+var_8]
.text:0040E905                 call    sub_4121E0
.text:0040E90A                 test    eax, eax
.text:0040E90C                 jnz     short loc_40E921
.text:0040E90E                 cmp     [ebp+var_8], 1
.text:0040E912                 jnz     short loc_40E921
.text:0040E914                 push    3B62h           ; uID
.text:0040E919                 push    esi             ; int
.text:0040E91A                 call    sub_40E7F8
.text:0040E91F                 pop     ecx
.text:0040E920                 pop     ecx
.text:0040E921
.text:0040E921 loc_40E921:                             ; CODE XREF: sub_40E842+BE↑j
.text:0040E921                                         ; sub_40E842+CA↑j ...
.text:0040E921                 push    ebx             ; hLibModule
.text:0040E922                 call    ds:FreeLibrary
.text:0040E928
.text:0040E928 loc_40E928:                             ; CODE XREF: sub_40E842+2C↑j
.text:0040E928                                         ; sub_40E842+3B↑j
.text:0040E928                 cmp     dword ptr [ebp+Buffer], 0
.text:0040E92C                 jz      short loc_40E937
.text:0040E92E                 push    dword ptr [ebp+Buffer] ; hMem
.text:0040E931                 call    ds:LocalFree
.text:0040E937
.text:0040E937 loc_40E937:                             ; CODE XREF: sub_40E842+EA↑j
.text:0040E937                 pop     edi
.text:0040E938                 mov     eax, esi
.text:0040E93A                 pop     esi
.text:0040E93B                 pop     ebx
.text:0040E93C                 mov     esp, ebp
.text:0040E93E                 pop     ebp
.text:0040E93F                 retn
.text:0040E93F sub_40E842      endp
.text:0040E93F
.text:0040E940
.text:0040E940 ; =============== S U B R O U T I N E =======================================
.text:0040E940
.text:0040E940 ; Attributes: bp-based frame
.text:0040E940
.text:0040E940 sub_40E940      proc near               ; CODE XREF: sub_40E9E0+BC↓p
.text:0040E940
.text:0040E940 var_10          = dword ptr -10h
.text:0040E940 var_C           = dword ptr -0Ch
.text:0040E940 var_8           = dword ptr -8
.text:0040E940 var_4           = dword ptr -4
.text:0040E940 arg_0           = dword ptr  8
.text:0040E940
.text:0040E940                 mov     edi, edi
.text:0040E942                 push    ebp
.text:0040E943                 mov     ebp, esp
.text:0040E945                 sub     esp, 10h
.text:0040E948                 mov     eax, [ebp+arg_0]
.text:0040E94B                 push    ebx
.text:0040E94C                 movzx   ebx, word ptr [ecx]
.text:0040E94F                 push    esi
.text:0040E950                 xor     esi, esi
.text:0040E952                 mov     [ebp+var_8], edx
.text:0040E955                 push    edi
.text:0040E956                 mov     [ebp+var_C], ecx
.text:0040E959                 mov     edx, esi
.text:0040E95B                 mov     edi, esi
.text:0040E95D                 mov     [eax], esi
.text:0040E95F                 jmp     short loc_40E9C0
.text:0040E961 ; ---------------------------------------------------------------------------
.text:0040E961
.text:0040E961 loc_40E961:                             ; CODE XREF: sub_40E940+83↓j
.text:0040E961                 mov     [ebp+var_10], edx
.text:0040E964                 mov     ecx, ebx
.text:0040E966                 inc     edx
.text:0040E967                 mov     [ebp+var_4], edx
.text:0040E96A                 call    sub_40E330
.text:0040E96F                 test    eax, eax
.text:0040E971                 mov     eax, [ebp+var_8]
.text:0040E974                 jz      short loc_40E984
.text:0040E976                 mov     edx, [ebp+var_4]
.text:0040E979                 add     esi, 2
.text:0040E97C                 cmp     esi, eax
.text:0040E97E                 jnb     short loc_40E9B2
.text:0040E980                 mov     edi, edx
.text:0040E982                 jmp     short loc_40E9B0
.text:0040E984 ; ---------------------------------------------------------------------------
.text:0040E984
.text:0040E984 loc_40E984:                             ; CODE XREF: sub_40E940+34↑j
.text:0040E984                 inc     esi
.text:0040E985                 cmp     esi, eax
.text:0040E987                 jnb     short loc_40E9AD
.text:0040E989                 movzx   eax, bx
.text:0040E98C                 cmp     eax, 9
.text:0040E98F                 jb      short loc_40E9AA
.text:0040E991                 push    0Ah
.text:0040E993                 pop     ecx
.text:0040E994                 cmp     eax, ecx
.text:0040E996                 jbe     short loc_40E9A2
.text:0040E998                 cmp     eax, 0Dh
.text:0040E99B                 jz      short loc_40E9A2
.text:0040E99D                 cmp     eax, 20h ; ' '
.text:0040E9A0                 jnz     short loc_40E9AA
.text:0040E9A2
.text:0040E9A2 loc_40E9A2:                             ; CODE XREF: sub_40E940+56↑j
.text:0040E9A2                                         ; sub_40E940+5B↑j
.text:0040E9A2                 mov     edi, [ebp+var_10]
.text:0040E9A5                 cmp     bx, cx
.text:0040E9A8                 jz      short loc_40E9C7
.text:0040E9AA
.text:0040E9AA loc_40E9AA:                             ; CODE XREF: sub_40E940+4F↑j
.text:0040E9AA                                         ; sub_40E940+60↑j
.text:0040E9AA                 mov     eax, [ebp+var_8]
.text:0040E9AD
.text:0040E9AD loc_40E9AD:                             ; CODE XREF: sub_40E940+47↑j
.text:0040E9AD                 mov     edx, [ebp+var_4]
.text:0040E9B0
.text:0040E9B0 loc_40E9B0:                             ; CODE XREF: sub_40E940+42↑j
.text:0040E9B0                 cmp     esi, eax
.text:0040E9B2
.text:0040E9B2 loc_40E9B2:                             ; CODE XREF: sub_40E940+3E↑j
.text:0040E9B2                 ja      short loc_40E9D1
.text:0040E9B4                 mov     eax, [ebp+var_C]
.text:0040E9B7                 add     eax, 2
.text:0040E9BA                 mov     [ebp+var_C], eax
.text:0040E9BD                 movzx   ebx, word ptr [eax]
.text:0040E9C0
.text:0040E9C0 loc_40E9C0:                             ; CODE XREF: sub_40E940+1F↑j
.text:0040E9C0                 test    bx, bx
.text:0040E9C3                 jnz     short loc_40E961
.text:0040E9C5                 jmp     short loc_40E9D5
.text:0040E9C7 ; ---------------------------------------------------------------------------
.text:0040E9C7
.text:0040E9C7 loc_40E9C7:                             ; CODE XREF: sub_40E940+68↑j
.text:0040E9C7                                         ; sub_40E940+93↓j
.text:0040E9C7                 mov     eax, [ebp+arg_0]
.text:0040E9CA                 mov     [eax], edi
.text:0040E9CC                 xor     eax, eax
.text:0040E9CE                 inc     eax
.text:0040E9CF                 jmp     short loc_40E9D7
.text:0040E9D1 ; ---------------------------------------------------------------------------
.text:0040E9D1
.text:0040E9D1 loc_40E9D1:                             ; CODE XREF: sub_40E940:loc_40E9B2↑j
.text:0040E9D1                 test    edi, edi
.text:0040E9D3                 jnz     short loc_40E9C7
.text:0040E9D5
.text:0040E9D5 loc_40E9D5:                             ; CODE XREF: sub_40E940+85↑j
.text:0040E9D5                 xor     eax, eax
.text:0040E9D7
.text:0040E9D7 loc_40E9D7:                             ; CODE XREF: sub_40E940+8F↑j
.text:0040E9D7                 pop     edi
.text:0040E9D8                 pop     esi
.text:0040E9D9                 pop     ebx
.text:0040E9DA                 mov     esp, ebp
.text:0040E9DC                 pop     ebp
.text:0040E9DD                 retn    4
.text:0040E9DD sub_40E940      endp
.text:0040E9DD
.text:0040E9E0
.text:0040E9E0 ; =============== S U B R O U T I N E =======================================
.text:0040E9E0
.text:0040E9E0 ; Attributes: bp-based frame
.text:0040E9E0
.text:0040E9E0 sub_40E9E0      proc near               ; CODE XREF: sub_40F543+118↓p
.text:0040E9E0                                         ; sub_40F694+9E↓p
.text:0040E9E0
.text:0040E9E0 var_10          = dword ptr -10h
.text:0040E9E0 var_C           = dword ptr -0Ch
.text:0040E9E0 var_8           = dword ptr -8
.text:0040E9E0 pszDest         = dword ptr -4
.text:0040E9E0 arg_4           = dword ptr  0Ch
.text:0040E9E0
.text:0040E9E0                 mov     edi, edi
.text:0040E9E2                 push    ebp
.text:0040E9E3                 mov     ebp, esp
.text:0040E9E5                 sub     esp, 10h
.text:0040E9E8                 push    ebx
.text:0040E9E9                 mov     ebx, [ebp+arg_4]
.text:0040E9EC                 mov     eax, ebx
.text:0040E9EE                 mov     [ebp+pszDest], ecx
.text:0040E9F1                 push    esi             ; pszSrc
.text:0040E9F2                 mov     esi, edx
.text:0040E9F4                 mov     [ebp+var_C], esi
.text:0040E9F7                 push    edi             ; cchDest
.text:0040E9F8                 and     eax, 80000001h
.text:0040E9FD                 jns     short loc_40EA04
.text:0040E9FF                 dec     eax
.text:0040EA00                 or      eax, 0FFFFFFFEh
.text:0040EA03                 inc     eax
.text:0040EA04
.text:0040EA04 loc_40EA04:                             ; CODE XREF: sub_40E9E0+1D↑j
.text:0040EA04                 sub     ebx, eax
.text:0040EA06                 cmp     ebx, 20h ; ' '
.text:0040EA09                 jg      short loc_40EA0E
.text:0040EA0B                 push    4Fh ; 'O'
.text:0040EA0D                 pop     ebx
.text:0040EA0E
.text:0040EA0E loc_40EA0E:                             ; CODE XREF: sub_40E9E0+29↑j
.text:0040EA0E                 push    800h            ; dwBytes
.text:0040EA13                 xor     eax, eax
.text:0040EA15                 push    eax             ; dwFlags
.text:0040EA16                 call    ds:GetProcessHeap
.text:0040EA1C                 push    eax             ; hHeap
.text:0040EA1D                 call    ds:HeapAlloc
.text:0040EA23                 mov     edi, eax
.text:0040EA25                 mov     [ebp+var_8], edi
.text:0040EA28                 test    edi, edi
.text:0040EA2A                 jnz     short loc_40EA36
.text:0040EA2C                 mov     eax, 8007000Eh
.text:0040EA31                 jmp     loc_40EB32
.text:0040EA36 ; ---------------------------------------------------------------------------
.text:0040EA36
.text:0040EA36 loc_40EA36:                             ; CODE XREF: sub_40E9E0+4A↑j
.text:0040EA36                 push    [ebp+pszDest]   ; pszDest
.text:0040EA39                 xor     eax, eax
.text:0040EA3B                 mov     edx, 400h
.text:0040EA40                 mov     ecx, edi
.text:0040EA42                 mov     [edi], ax
.text:0040EA45                 call    _StringCchCopyW@12 ; StringCchCopyW(x,x,x)
.text:0040EA4A                 mov     [ebp+var_10], eax
.text:0040EA4D                 test    eax, eax
.text:0040EA4F                 js      loc_40EB1E
.text:0040EA55                 cmp     esi, 20h ; ' '
.text:0040EA58                 jge     short loc_40EA76
.text:0040EA5A                 push    20h ; ' '
.text:0040EA5C                 pop     esi
.text:0040EA5D                 sub     esi, [ebp+var_C]
.text:0040EA60
.text:0040EA60 loc_40EA60:                             ; CODE XREF: sub_40E9E0+8F↓j
.text:0040EA60                 mov     edx, offset asc_4034A0 ; " "
.text:0040EA65                 xor     ecx, ecx
.text:0040EA67                 call    sub_40E5A2
.text:0040EA6C                 sub     esi, 1
.text:0040EA6F                 jnz     short loc_40EA60
.text:0040EA71                 lea     edx, [ebx-20h]
.text:0040EA74                 jmp     short loc_40EA86
.text:0040EA76 ; ---------------------------------------------------------------------------
.text:0040EA76
.text:0040EA76 loc_40EA76:                             ; CODE XREF: sub_40E9E0+78↑j
.text:0040EA76                 mov     edx, offset asc_4034A0 ; " "
.text:0040EA7B                 xor     ecx, ecx
.text:0040EA7D                 call    sub_40E5A2
.text:0040EA82                 mov     edx, ebx
.text:0040EA84                 sub     edx, esi
.text:0040EA86
.text:0040EA86 loc_40EA86:                             ; CODE XREF: sub_40E9E0+94↑j
.text:0040EA86                 xor     eax, eax
.text:0040EA88                 mov     esi, edi
.text:0040EA8A                 mov     [ebp+pszDest], esi
.text:0040EA8D                 cmp     [edi], ax
.text:0040EA90                 jz      loc_40EB1E
.text:0040EA96
.text:0040EA96 loc_40EA96:                             ; CODE XREF: sub_40E9E0+12A↓j
.text:0040EA96                 lea     eax, [ebp+var_C]
.text:0040EA99                 mov     ecx, esi
.text:0040EA9B                 push    eax
.text:0040EA9C                 call    sub_40E940
.text:0040EAA1                 test    eax, eax
.text:0040EAA3                 jz      short loc_40EB0E
.text:0040EAA5                 mov     eax, [ebp+var_C]
.text:0040EAA8                 xor     ecx, ecx
.text:0040EAAA                 mov     edx, [ebp+pszDest]
.text:0040EAAD                 lea     edi, [esi+eax*2]
.text:0040EAB0                 xor     eax, eax
.text:0040EAB2                 movzx   esi, word ptr [edi]
.text:0040EAB5                 mov     [edi], ax
.text:0040EAB8                 call    sub_40E5A2
.text:0040EABD                 mov     [edi], si
.text:0040EAC0                 mov     esi, edi
.text:0040EAC2                 mov     [ebp+pszDest], esi
.text:0040EAC5                 movzx   eax, word ptr [esi]
.text:0040EAC8                 cmp     eax, 9
.text:0040EACB                 jb      short loc_40EAE2
.text:0040EACD                 cmp     eax, 0Ah
.text:0040EAD0                 jbe     short loc_40EADC
.text:0040EAD2                 cmp     eax, 0Dh
.text:0040EAD5                 jz      short loc_40EADC
.text:0040EAD7                 cmp     eax, 20h ; ' '
.text:0040EADA                 jnz     short loc_40EAE2
.text:0040EADC
.text:0040EADC loc_40EADC:                             ; CODE XREF: sub_40E9E0+F0↑j
.text:0040EADC                                         ; sub_40E9E0+F5↑j
.text:0040EADC                 add     esi, 2
.text:0040EADF                 mov     [ebp+pszDest], esi
.text:0040EAE2
.text:0040EAE2 loc_40EAE2:                             ; CODE XREF: sub_40E9E0+EB↑j
.text:0040EAE2                                         ; sub_40E9E0+FA↑j
.text:0040EAE2                 mov     edx, offset asc_403204 ; "\n"
.text:0040EAE7                 xor     ecx, ecx
.text:0040EAE9                 call    sub_40E5A2
.text:0040EAEE                 push    20h ; ' '
.text:0040EAF0                 pop     edi
.text:0040EAF1
.text:0040EAF1 loc_40EAF1:                             ; CODE XREF: sub_40E9E0+120↓j
.text:0040EAF1                 mov     edx, offset asc_4034A0 ; " "
.text:0040EAF6                 xor     ecx, ecx
.text:0040EAF8                 call    sub_40E5A2
.text:0040EAFD                 sub     edi, 1
.text:0040EB00                 jnz     short loc_40EAF1
.text:0040EB02                 xor     eax, eax
.text:0040EB04                 lea     edx, [ebx-20h]
.text:0040EB07                 cmp     [esi], ax
.text:0040EB0A                 jnz     short loc_40EA96
.text:0040EB0C                 jmp     short loc_40EB1B
.text:0040EB0E ; ---------------------------------------------------------------------------
.text:0040EB0E
.text:0040EB0E loc_40EB0E:                             ; CODE XREF: sub_40E9E0+C3↑j
.text:0040EB0E                 push    esi             ; char
.text:0040EB0F                 push    offset a1S      ; "%1!s!\n"
.text:0040EB14                 call    sub_40E7E4
.text:0040EB19                 pop     ecx
.text:0040EB1A                 pop     ecx
.text:0040EB1B
.text:0040EB1B loc_40EB1B:                             ; CODE XREF: sub_40E9E0+12C↑j
.text:0040EB1B                 mov     edi, [ebp+var_8]
.text:0040EB1E
.text:0040EB1E loc_40EB1E:                             ; CODE XREF: sub_40E9E0+6F↑j
.text:0040EB1E                                         ; sub_40E9E0+B0↑j
.text:0040EB1E                 push    edi             ; lpMem
.text:0040EB1F                 xor     edx, edx
.text:0040EB21                 push    edx             ; dwFlags
.text:0040EB22                 call    ds:GetProcessHeap
.text:0040EB28                 push    eax             ; hHeap
.text:0040EB29                 call    ds:HeapFree
.text:0040EB2F                 mov     eax, [ebp+var_10]
.text:0040EB32
.text:0040EB32 loc_40EB32:                             ; CODE XREF: sub_40E9E0+51↑j
.text:0040EB32                 pop     edi
.text:0040EB33                 pop     esi
.text:0040EB34                 pop     ebx
.text:0040EB35                 mov     esp, ebp
.text:0040EB37                 pop     ebp
.text:0040EB38                 retn    8
.text:0040EB38 sub_40E9E0      endp
.text:0040EB38
.text:0040EB3B
.text:0040EB3B ; =============== S U B R O U T I N E =======================================
.text:0040EB3B
.text:0040EB3B ; Attributes: bp-based frame info_from_lumina
.text:0040EB3B
.text:0040EB3B ; int __stdcall StringCchLengthA(const char *, unsigned int, unsigned int *)
.text:0040EB3B ?StringCchLengthA@@YGJPBDIPAI@Z proc near
.text:0040EB3B                                         ; CODE XREF: sub_40E5A2+137↑p
.text:0040EB3B
.text:0040EB3B arg_0           = dword ptr  8
.text:0040EB3B
.text:0040EB3B                 mov     edi, edi
.text:0040EB3D                 push    ebp
.text:0040EB3E                 mov     ebp, esp
.text:0040EB40                 mov     eax, ecx
.text:0040EB42                 push    esi
.text:0040EB43                 mov     esi, [ebp+arg_0]
.text:0040EB46                 test    eax, eax
.text:0040EB48                 jz      short loc_40EB86
.text:0040EB4A                 cmp     edx, 7FFFFFFFh
.text:0040EB50                 ja      short loc_40EB86
.text:0040EB52                 mov     ecx, edx
.text:0040EB54                 test    edx, edx
.text:0040EB56                 jz      short loc_40EB63
.text:0040EB58
.text:0040EB58 loc_40EB58:                             ; CODE XREF: StringCchLengthA(char const *,uint,uint *)+26↓j
.text:0040EB58                 cmp     byte ptr [eax], 0
.text:0040EB5B                 jz      short loc_40EB63
.text:0040EB5D                 inc     eax
.text:0040EB5E                 sub     ecx, 1
.text:0040EB61                 jnz     short loc_40EB58
.text:0040EB63
.text:0040EB63 loc_40EB63:                             ; CODE XREF: StringCchLengthA(char const *,uint,uint *)+1B↑j
.text:0040EB63                                         ; StringCchLengthA(char const *,uint,uint *)+20↑j
.text:0040EB63                 mov     eax, ecx
.text:0040EB65                 neg     eax
.text:0040EB67                 sbb     eax, eax
.text:0040EB69                 and     eax, 7FF8FFA9h
.text:0040EB6E                 add     eax, 80070057h
.text:0040EB73                 test    esi, esi
.text:0040EB75                 jz      short loc_40EB8B
.text:0040EB77                 test    ecx, ecx
.text:0040EB79                 jz      short loc_40EB81
.text:0040EB7B                 sub     edx, ecx
.text:0040EB7D                 mov     [esi], edx
.text:0040EB7F                 jmp     short loc_40EB8B
.text:0040EB81 ; ---------------------------------------------------------------------------
.text:0040EB81
.text:0040EB81 loc_40EB81:                             ; CODE XREF: StringCchLengthA(char const *,uint,uint *)+3E↑j
.text:0040EB81                 and     dword ptr [esi], 0
.text:0040EB84                 jmp     short loc_40EB8B
.text:0040EB86 ; ---------------------------------------------------------------------------
.text:0040EB86
.text:0040EB86 loc_40EB86:                             ; CODE XREF: StringCchLengthA(char const *,uint,uint *)+D↑j
.text:0040EB86                                         ; StringCchLengthA(char const *,uint,uint *)+15↑j
.text:0040EB86                 mov     eax, 80070057h
.text:0040EB8B
.text:0040EB8B loc_40EB8B:                             ; CODE XREF: StringCchLengthA(char const *,uint,uint *)+3A↑j
.text:0040EB8B                                         ; StringCchLengthA(char const *,uint,uint *)+44↑j ...
.text:0040EB8B                 test    eax, eax
.text:0040EB8D                 jns     short loc_40EB96
.text:0040EB8F                 test    esi, esi
.text:0040EB91                 jz      short loc_40EB96
.text:0040EB93                 and     dword ptr [esi], 0
.text:0040EB96
.text:0040EB96 loc_40EB96:                             ; CODE XREF: StringCchLengthA(char const *,uint,uint *)+52↑j
.text:0040EB96                                         ; StringCchLengthA(char const *,uint,uint *)+56↑j
.text:0040EB96                 pop     esi
.text:0040EB97                 pop     ebp
.text:0040EB98                 retn    4
.text:0040EB98 ?StringCchLengthA@@YGJPBDIPAI@Z endp
.text:0040EB98
.text:0040EB9B
.text:0040EB9B ; =============== S U B R O U T I N E =======================================
.text:0040EB9B
.text:0040EB9B ; Attributes: bp-based frame info_from_lumina
.text:0040EB9B
.text:0040EB9B ; int __stdcall SizeTMult(unsigned int, unsigned int, unsigned int *)
.text:0040EB9B ?SizeTMult@@YGJIIPAI@Z proc near        ; CODE XREF: sub_40E5A2+AE↑p
.text:0040EB9B                                         ; sub_40EDB8+2A↓p
.text:0040EB9B
.text:0040EB9B arg_0           = dword ptr  8
.text:0040EB9B
.text:0040EB9B                 mov     edi, edi
.text:0040EB9D                 push    ebp
.text:0040EB9E                 mov     ebp, esp
.text:0040EBA0                 push    esi
.text:0040EBA1                 mov     eax, ecx
.text:0040EBA3                 push    2
.text:0040EBA5                 pop     ecx
.text:0040EBA6                 mul     ecx
.text:0040EBA8                 xor     ecx, ecx
.text:0040EBAA                 mov     esi, eax
.text:0040EBAC                 cmp     edx, ecx
.text:0040EBAE                 ja      short loc_40EBBE
.text:0040EBB0                 jb      short loc_40EBB7
.text:0040EBB2                 cmp     esi, 0FFFFFFFFh
.text:0040EBB5                 ja      short loc_40EBBE
.text:0040EBB7
.text:0040EBB7 loc_40EBB7:                             ; CODE XREF: SizeTMult(uint,uint,uint *)+15↑j
.text:0040EBB7                 mov     eax, [ebp+arg_0]
.text:0040EBBA                 mov     [eax], esi
.text:0040EBBC                 jmp     short loc_40EBC9
.text:0040EBBE ; ---------------------------------------------------------------------------
.text:0040EBBE
.text:0040EBBE loc_40EBBE:                             ; CODE XREF: SizeTMult(uint,uint,uint *)+13↑j
.text:0040EBBE                                         ; SizeTMult(uint,uint,uint *)+1A↑j
.text:0040EBBE                 mov     eax, [ebp+arg_0]
.text:0040EBC1                 mov     ecx, 80070216h
.text:0040EBC6                 or      dword ptr [eax], 0FFFFFFFFh
.text:0040EBC9
.text:0040EBC9 loc_40EBC9:                             ; CODE XREF: SizeTMult(uint,uint,uint *)+21↑j
.text:0040EBC9                 mov     eax, ecx
.text:0040EBCB                 pop     esi
.text:0040EBCC                 pop     ebp
.text:0040EBCD                 retn    4
.text:0040EBCD ?SizeTMult@@YGJIIPAI@Z endp
.text:0040EBCD
.text:0040EBD0
.text:0040EBD0 ; =============== S U B R O U T I N E =======================================
.text:0040EBD0
.text:0040EBD0 ; Attributes: bp-based frame
.text:0040EBD0
.text:0040EBD0 sub_40EBD0      proc near               ; CODE XREF: sub_40E486+27↑p
.text:0040EBD0
.text:0040EBD0 arg_0           = dword ptr  8
.text:0040EBD0
.text:0040EBD0                 mov     edi, edi
.text:0040EBD2                 push    ebp
.text:0040EBD3                 mov     ebp, esp
.text:0040EBD5                 mov     edx, [ebp+arg_0]
.text:0040EBD8                 push    ebx
.text:0040EBD9                 xor     ebx, ebx
.text:0040EBDB                 test    ecx, ecx
.text:0040EBDD                 jz      short loc_40EC19
.text:0040EBDF                 push    esi
.text:0040EBE0                 push    edi
.text:0040EBE1                 mov     edi, 7FFFFFFFh
.text:0040EBE6                 mov     esi, edi
.text:0040EBE8
.text:0040EBE8 loc_40EBE8:                             ; CODE XREF: sub_40EBD0+23↓j
.text:0040EBE8                 cmp     [ecx], bx
.text:0040EBEB                 jz      short loc_40EBF5
.text:0040EBED                 add     ecx, 2
.text:0040EBF0                 sub     esi, 1
.text:0040EBF3                 jnz     short loc_40EBE8
.text:0040EBF5
.text:0040EBF5 loc_40EBF5:                             ; CODE XREF: sub_40EBD0+1B↑j
.text:0040EBF5                 mov     eax, esi
.text:0040EBF7                 neg     eax
.text:0040EBF9                 sbb     eax, eax
.text:0040EBFB                 and     eax, 7FF8FFA9h
.text:0040EC00                 add     eax, 80070057h
.text:0040EC05                 test    edx, edx
.text:0040EC07                 jz      short loc_40EC15
.text:0040EC09                 test    esi, esi
.text:0040EC0B                 jz      short loc_40EC13
.text:0040EC0D                 sub     edi, esi
.text:0040EC0F                 mov     [edx], edi
.text:0040EC11                 jmp     short loc_40EC15
.text:0040EC13 ; ---------------------------------------------------------------------------
.text:0040EC13
.text:0040EC13 loc_40EC13:                             ; CODE XREF: sub_40EBD0+3B↑j
.text:0040EC13                 mov     [edx], ebx
.text:0040EC15
.text:0040EC15 loc_40EC15:                             ; CODE XREF: sub_40EBD0+37↑j
.text:0040EC15                                         ; sub_40EBD0+41↑j
.text:0040EC15                 pop     edi
.text:0040EC16                 pop     esi
.text:0040EC17                 jmp     short loc_40EC1E
.text:0040EC19 ; ---------------------------------------------------------------------------
.text:0040EC19
.text:0040EC19 loc_40EC19:                             ; CODE XREF: sub_40EBD0+D↑j
.text:0040EC19                 mov     eax, 80070057h
.text:0040EC1E
.text:0040EC1E loc_40EC1E:                             ; CODE XREF: sub_40EBD0+47↑j
.text:0040EC1E                 test    eax, eax
.text:0040EC20                 jns     short loc_40EC28
.text:0040EC22                 test    edx, edx
.text:0040EC24                 jz      short loc_40EC28
.text:0040EC26                 mov     [edx], ebx
.text:0040EC28
.text:0040EC28 loc_40EC28:                             ; CODE XREF: sub_40EBD0+50↑j
.text:0040EC28                                         ; sub_40EBD0+54↑j
.text:0040EC28                 pop     ebx
.text:0040EC29                 pop     ebp
.text:0040EC2A                 retn    4
.text:0040EC2A sub_40EBD0      endp
.text:0040EC2A
.text:0040EC2D
.text:0040EC2D ; =============== S U B R O U T I N E =======================================
.text:0040EC2D
.text:0040EC2D ; Attributes: bp-based frame
.text:0040EC2D
.text:0040EC2D sub_40EC2D      proc near               ; CODE XREF: sub_40EE50+14↓p
.text:0040EC2D
.text:0040EC2D var_4           = dword ptr -4
.text:0040EC2D
.text:0040EC2D                 mov     edi, edi
.text:0040EC2F                 push    ebp
.text:0040EC30                 mov     ebp, esp
.text:0040EC32                 push    ecx
.text:0040EC33                 push    ebx
.text:0040EC34                 push    esi
.text:0040EC35                 xor     esi, esi
.text:0040EC37                 mov     ebx, ecx
.text:0040EC39                 push    edi
.text:0040EC3A                 xor     edi, edi
.text:0040EC3C                 mov     [ebp+var_4], esi
.text:0040EC3F                 cmp     hLibModule, esi
.text:0040EC45                 jnz     loc_40ECD7
.text:0040EC4B                 push    208h            ; dwBytes
.text:0040EC50                 push    edi             ; dwFlags
.text:0040EC51                 call    ds:GetProcessHeap
.text:0040EC57                 push    eax             ; hHeap
.text:0040EC58                 call    ds:HeapAlloc
.text:0040EC5E                 mov     edi, eax
.text:0040EC60                 test    edi, edi
.text:0040EC62                 jnz     short loc_40EC6E
.text:0040EC64                 mov     esi, 8007000Eh
.text:0040EC69                 jmp     loc_40ECF2
.text:0040EC6E ; ---------------------------------------------------------------------------
.text:0040EC6E
.text:0040EC6E loc_40EC6E:                             ; CODE XREF: sub_40EC2D+35↑j
.text:0040EC6E                 push    104h            ; nSize
.text:0040EC73                 xor     eax, eax
.text:0040EC75                 push    edi             ; lpFilename
.text:0040EC76                 push    eax             ; hModule
.text:0040EC77                 mov     [edi], ax
.text:0040EC7A                 call    ds:GetModuleFileNameW
.text:0040EC80                 test    eax, eax
.text:0040EC82                 jnz     short loc_40EC97
.text:0040EC84                 call    ds:GetLastError
.text:0040EC8A                 mov     esi, eax
.text:0040EC8C                 test    esi, esi
.text:0040EC8E                 jnz     short loc_40ECAF
.text:0040EC90                 mov     esi, 80004005h
.text:0040EC95                 jmp     short loc_40ECDE
.text:0040EC97 ; ---------------------------------------------------------------------------
.text:0040EC97
.text:0040EC97 loc_40EC97:                             ; CODE XREF: sub_40EC2D+55↑j
.text:0040EC97                 push    ecx             ; int
.text:0040EC98                 mov     ecx, edi        ; lpFileName
.text:0040EC9A                 call    _LoadMUILibraryW@12 ; LoadMUILibraryW(x,x,x)
.text:0040EC9F                 mov     edx, eax
.text:0040ECA1                 test    edx, edx
.text:0040ECA3                 jnz     short loc_40ECBC
.text:0040ECA5                 call    ds:GetLastError
.text:0040ECAB                 mov     esi, eax
.text:0040ECAD                 test    esi, esi
.text:0040ECAF
.text:0040ECAF loc_40ECAF:                             ; CODE XREF: sub_40EC2D+61↑j
.text:0040ECAF                 jle     short loc_40ECDE
.text:0040ECB1                 movzx   esi, si
.text:0040ECB4                 or      esi, 80070000h
.text:0040ECBA                 jmp     short loc_40ECDE
.text:0040ECBC ; ---------------------------------------------------------------------------
.text:0040ECBC
.text:0040ECBC loc_40ECBC:                             ; CODE XREF: sub_40EC2D+76↑j
.text:0040ECBC                 mov     ecx, edx
.text:0040ECBE                 xor     eax, eax
.text:0040ECC0                 mov     esi, offset hLibModule
.text:0040ECC5                 lock cmpxchg [esi], ecx
.text:0040ECC9                 mov     esi, [ebp+var_4]
.text:0040ECCC                 test    eax, eax
.text:0040ECCE                 jz      short loc_40ECD7
.text:0040ECD0                 push    edx             ; hLibModule
.text:0040ECD1                 call    ds:FreeLibrary
.text:0040ECD7
.text:0040ECD7 loc_40ECD7:                             ; CODE XREF: sub_40EC2D+18↑j
.text:0040ECD7                                         ; sub_40EC2D+A1↑j
.text:0040ECD7                 mov     eax, hLibModule
.text:0040ECDC                 mov     [ebx], eax
.text:0040ECDE
.text:0040ECDE loc_40ECDE:                             ; CODE XREF: sub_40EC2D+68↑j
.text:0040ECDE                                         ; sub_40EC2D:loc_40ECAF↑j ...
.text:0040ECDE                 test    edi, edi
.text:0040ECE0                 jz      short loc_40ECF2
.text:0040ECE2                 push    edi             ; lpMem
.text:0040ECE3                 push    0               ; dwFlags
.text:0040ECE5                 call    ds:GetProcessHeap
.text:0040ECEB                 push    eax             ; hHeap
.text:0040ECEC                 call    ds:HeapFree
.text:0040ECF2
.text:0040ECF2 loc_40ECF2:                             ; CODE XREF: sub_40EC2D+3C↑j
.text:0040ECF2                                         ; sub_40EC2D+B3↑j
.text:0040ECF2                 pop     edi
.text:0040ECF3                 mov     eax, esi
.text:0040ECF5                 pop     esi
.text:0040ECF6                 pop     ebx
.text:0040ECF7                 mov     esp, ebp
.text:0040ECF9                 pop     ebp
.text:0040ECFA                 retn
.text:0040ECFA sub_40EC2D      endp
.text:0040ECFA
.text:0040ECFB
.text:0040ECFB ; =============== S U B R O U T I N E =======================================
.text:0040ECFB
.text:0040ECFB
.text:0040ECFB sub_40ECFB      proc near               ; CODE XREF: sub_40FF6D+93↓p
.text:0040ECFB                 cmp     dword_413150, 0
.text:0040ED02                 push    esi
.text:0040ED03                 push    edi
.text:0040ED04                 mov     esi, ecx
.text:0040ED06                 mov     edi, offset dword_414F14
.text:0040ED0B                 jz      short loc_40ED20
.text:0040ED0D                 and     dword_413150, 0
.text:0040ED14                 mov     dword_414F18, edi
.text:0040ED1A                 mov     dword_414F14, edi
.text:0040ED20
.text:0040ED20 loc_40ED20:                             ; CODE XREF: sub_40ECFB+10↑j
.text:0040ED20                 test    esi, esi
.text:0040ED22                 jz      short loc_40ED5D
.text:0040ED24                 push    38h ; '8'       ; Size
.text:0040ED26                 lea     eax, [esi+24h]
.text:0040ED29                 push    0               ; Val
.text:0040ED2B                 push    eax             ; void *
.text:0040ED2C                 call    memset
.text:0040ED31                 mov     eax, dword_414F18
.text:0040ED36                 add     esp, 0Ch
.text:0040ED39                 cmp     [eax], edi
.text:0040ED3B                 jz      short loc_40ED42
.text:0040ED3D                 push    3
.text:0040ED3F                 pop     ecx
.text:0040ED40                 int     29h             ; Win8: RtlFailFast(ecx)
.text:0040ED42 ; ---------------------------------------------------------------------------
.text:0040ED42
.text:0040ED42 loc_40ED42:                             ; CODE XREF: sub_40ECFB+40↑j
.text:0040ED42                 mov     [esi+4], eax
.text:0040ED45                 mov     [esi], edi
.text:0040ED47                 mov     [eax], esi
.text:0040ED49                 mov     eax, dword_414FFC
.text:0040ED4E                 mov     dword_414F18, esi
.text:0040ED54                 mov     [esi+54h], eax
.text:0040ED57                 inc     eax
.text:0040ED58                 mov     dword_414FFC, eax
.text:0040ED5D
.text:0040ED5D loc_40ED5D:                             ; CODE XREF: sub_40ECFB+27↑j
.text:0040ED5D                 pop     edi
.text:0040ED5E                 pop     esi
.text:0040ED5F                 retn
.text:0040ED5F sub_40ECFB      endp
.text:0040ED5F
.text:0040ED60
.text:0040ED60 ; =============== S U B R O U T I N E =======================================
.text:0040ED60
.text:0040ED60
.text:0040ED60 sub_40ED60      proc near               ; CODE XREF: ArgApplyRules(int)+A8↑p
.text:0040ED60                                         ; ArgApplyRules(int)+125↑p ...
.text:0040ED60                 cmp     dword_41314C, 0
.text:0040ED67                 mov     edx, ecx
.text:0040ED69                 push    esi
.text:0040ED6A                 mov     esi, offset dword_414F0C
.text:0040ED6F                 jz      short loc_40ED87
.text:0040ED71                 and     dword_41314C, 0
.text:0040ED78                 mov     eax, esi
.text:0040ED7A                 mov     dword_414F10, eax
.text:0040ED7F                 mov     dword_414F0C, esi
.text:0040ED85                 jmp     short loc_40ED8C
.text:0040ED87 ; ---------------------------------------------------------------------------
.text:0040ED87
.text:0040ED87 loc_40ED87:                             ; CODE XREF: sub_40ED60+F↑j
.text:0040ED87                 mov     eax, dword_414F10
.text:0040ED8C
.text:0040ED8C loc_40ED8C:                             ; CODE XREF: sub_40ED60+25↑j
.text:0040ED8C                 test    edx, edx
.text:0040ED8E                 jz      short loc_40EDB6
.text:0040ED90                 cmp     dword ptr [edx+0Ch], 0
.text:0040ED94                 jnz     short loc_40EDB6
.text:0040ED96                 lea     ecx, [edx+10h]
.text:0040ED99                 cmp     [eax], esi
.text:0040ED9B                 jz      short loc_40EDA2
.text:0040ED9D                 push    3
.text:0040ED9F                 pop     ecx
.text:0040EDA0                 int     29h             ; Win8: RtlFailFast(ecx)
.text:0040EDA2 ; ---------------------------------------------------------------------------
.text:0040EDA2
.text:0040EDA2 loc_40EDA2:                             ; CODE XREF: sub_40ED60+3B↑j
.text:0040EDA2                 mov     [ecx], esi
.text:0040EDA4                 mov     [ecx+4], eax
.text:0040EDA7                 mov     [eax], ecx
.text:0040EDA9                 mov     dword_414F10, ecx
.text:0040EDAF                 mov     dword ptr [edx+0Ch], 1
.text:0040EDB6
.text:0040EDB6 loc_40EDB6:                             ; CODE XREF: sub_40ED60+2E↑j
.text:0040EDB6                                         ; sub_40ED60+34↑j
.text:0040EDB6                 pop     esi
.text:0040EDB7                 retn
.text:0040EDB7 sub_40ED60      endp
.text:0040EDB7
.text:0040EDB8
.text:0040EDB8 ; =============== S U B R O U T I N E =======================================
.text:0040EDB8
.text:0040EDB8 ; Attributes: bp-based frame
.text:0040EDB8
.text:0040EDB8 sub_40EDB8      proc near               ; CODE XREF: _wmain+354↑p
.text:0040EDB8                                         ; GetNamespace(_LOGMAN_NS *)+B4↑p ...
.text:0040EDB8
.text:0040EDB8 Src             = dword ptr -8
.text:0040EDB8 var_4           = dword ptr -4
.text:0040EDB8
.text:0040EDB8                 mov     edi, edi
.text:0040EDBA                 push    ebp
.text:0040EDBB                 mov     ebp, esp
.text:0040EDBD                 sub     esp, 0Ch
.text:0040EDC0                 push    ebx
.text:0040EDC1                 push    esi
.text:0040EDC2                 mov     eax, ecx
.text:0040EDC4                 lea     edx, [ecx+2]
.text:0040EDC7                 xor     ebx, ebx
.text:0040EDC9                 mov     [ebp+Src], eax
.text:0040EDCC                 push    edi
.text:0040EDCD                 mov     esi, ebx
.text:0040EDCF
.text:0040EDCF loc_40EDCF:                             ; CODE XREF: sub_40EDB8+20↓j
.text:0040EDCF                 mov     ax, [ecx]
.text:0040EDD2                 add     ecx, 2
.text:0040EDD5                 cmp     ax, bx
.text:0040EDD8                 jnz     short loc_40EDCF
.text:0040EDDA                 sub     ecx, edx
.text:0040EDDC                 lea     eax, [ebp+var_4]
.text:0040EDDF                 sar     ecx, 1
.text:0040EDE1                 push    eax
.text:0040EDE2                 call    ?SizeTMult@@YGJIIPAI@Z ; SizeTMult(uint,uint,uint *)
.text:0040EDE7                 test    eax, eax
.text:0040EDE9                 js      short loc_40EE47
.text:0040EDEB                 mov     ecx, [ebp+var_4]
.text:0040EDEE                 lea     eax, [ecx+2]
.text:0040EDF1                 cmp     eax, ecx
.text:0040EDF3                 jb      short loc_40EDF9
.text:0040EDF5                 mov     edi, eax
.text:0040EDF7                 jmp     short loc_40EDFC
.text:0040EDF9 ; ---------------------------------------------------------------------------
.text:0040EDF9
.text:0040EDF9 loc_40EDF9:                             ; CODE XREF: sub_40EDB8+3B↑j
.text:0040EDF9                 or      edi, 0FFFFFFFFh
.text:0040EDFC
.text:0040EDFC loc_40EDFC:                             ; CODE XREF: sub_40EDB8+3F↑j
.text:0040EDFC                 cmp     eax, ecx
.text:0040EDFE                 sbb     ebx, ebx
.text:0040EE00                 and     ebx, 80070216h
.text:0040EE06                 cmp     eax, ecx
.text:0040EE08                 jb      short loc_40EE2D
.text:0040EE0A                 push    edi             ; dwBytes
.text:0040EE0B                 push    0               ; dwFlags
.text:0040EE0D                 call    ds:GetProcessHeap
.text:0040EE13                 push    eax             ; hHeap
.text:0040EE14                 call    ds:HeapAlloc
.text:0040EE1A                 mov     esi, eax
.text:0040EE1C                 test    esi, esi
.text:0040EE1E                 jz      short loc_40EE47
.text:0040EE20                 push    edi             ; Size
.text:0040EE21                 push    [ebp+Src]       ; Src
.text:0040EE24                 push    esi             ; void *
.text:0040EE25                 call    memcpy
.text:0040EE2A                 add     esp, 0Ch
.text:0040EE2D
.text:0040EE2D loc_40EE2D:                             ; CODE XREF: sub_40EDB8+50↑j
.text:0040EE2D                 test    ebx, ebx
.text:0040EE2F                 jns     short loc_40EE47
.text:0040EE31                 test    esi, esi
.text:0040EE33                 jz      short loc_40EE47
.text:0040EE35                 push    esi             ; lpMem
.text:0040EE36                 push    0               ; dwFlags
.text:0040EE38                 call    ds:GetProcessHeap
.text:0040EE3E                 push    eax             ; hHeap
.text:0040EE3F                 call    ds:HeapFree
.text:0040EE45                 xor     esi, esi
.text:0040EE47
.text:0040EE47 loc_40EE47:                             ; CODE XREF: sub_40EDB8+31↑j
.text:0040EE47                                         ; sub_40EDB8+66↑j ...
.text:0040EE47                 pop     edi
.text:0040EE48                 mov     eax, esi
.text:0040EE4A                 pop     esi
.text:0040EE4B                 pop     ebx
.text:0040EE4C                 mov     esp, ebp
.text:0040EE4E                 pop     ebp
.text:0040EE4F                 retn
.text:0040EE4F sub_40EDB8      endp
.text:0040EE4F
.text:0040EE50
.text:0040EE50 ; =============== S U B R O U T I N E =======================================
.text:0040EE50
.text:0040EE50 ; Attributes: bp-based frame
.text:0040EE50
.text:0040EE50 ; int __fastcall sub_40EE50(UINT uID, LPWSTR lpBuffer, int)
.text:0040EE50 sub_40EE50      proc near               ; CODE XREF: sub_40E7F8+23↑p
.text:0040EE50                                         ; ArgpLoadArguments(void)+85↓p ...
.text:0040EE50
.text:0040EE50 hInstance       = dword ptr -4
.text:0040EE50
.text:0040EE50                 mov     edi, edi
.text:0040EE52                 push    ebp
.text:0040EE53                 mov     ebp, esp
.text:0040EE55                 push    ecx
.text:0040EE56                 and     [ebp+hInstance], 0
.text:0040EE5A                 push    ebx
.text:0040EE5B                 push    esi
.text:0040EE5C                 mov     ebx, ecx
.text:0040EE5E                 lea     ecx, [ebp+hInstance]
.text:0040EE61                 push    edi
.text:0040EE62                 mov     edi, edx
.text:0040EE64                 call    sub_40EC2D
.text:0040EE69                 mov     esi, eax
.text:0040EE6B                 test    esi, esi
.text:0040EE6D                 js      short loc_40EEA1
.text:0040EE6F                 push    400h            ; cchBufferMax
.text:0040EE74                 push    edi             ; lpBuffer
.text:0040EE75                 push    ebx             ; uID
.text:0040EE76                 push    [ebp+hInstance] ; hInstance
.text:0040EE79                 call    ds:LoadStringW
.text:0040EE7F                 test    eax, eax
.text:0040EE81                 jnz     short loc_40EEA1
.text:0040EE83                 call    ds:GetLastError
.text:0040EE89                 mov     esi, eax
.text:0040EE8B                 test    esi, esi
.text:0040EE8D                 jz      short loc_40EE9C
.text:0040EE8F                 jle     short loc_40EEA1
.text:0040EE91                 movzx   esi, si
.text:0040EE94                 or      esi, 80070000h
.text:0040EE9A                 jmp     short loc_40EEA1
.text:0040EE9C ; ---------------------------------------------------------------------------
.text:0040EE9C
.text:0040EE9C loc_40EE9C:                             ; CODE XREF: sub_40EE50+3D↑j
.text:0040EE9C                 mov     esi, 80004005h
.text:0040EEA1
.text:0040EEA1 loc_40EEA1:                             ; CODE XREF: sub_40EE50+1D↑j
.text:0040EEA1                                         ; sub_40EE50+31↑j ...
.text:0040EEA1                 pop     edi
.text:0040EEA2                 mov     eax, esi
.text:0040EEA4                 pop     esi
.text:0040EEA5                 pop     ebx
.text:0040EEA6                 mov     esp, ebp
.text:0040EEA8                 pop     ebp
.text:0040EEA9                 retn    4
.text:0040EEA9 sub_40EE50      endp
.text:0040EEA9
.text:0040EEAC
.text:0040EEAC ; =============== S U B R O U T I N E =======================================
.text:0040EEAC
.text:0040EEAC ; Attributes: bp-based frame info_from_lumina
.text:0040EEAC
.text:0040EEAC ; int __stdcall ArgpLoadArguments()
.text:0040EEAC ?ArgpLoadArguments@@YGJXZ proc near     ; CODE XREF: sub_40FF6D+9F↓p
.text:0040EEAC
.text:0040EEAC String          = dword ptr -15Ch
.text:0040EEAC LCData          = word ptr -158h
.text:0040EEAC Str             = word ptr -0B8h
.text:0040EEAC var_14          = word ptr -14h
.text:0040EEAC var_C           = word ptr -0Ch
.text:0040EEAC var_4           = dword ptr -4
.text:0040EEAC
.text:0040EEAC                 mov     edi, edi
.text:0040EEAE                 push    ebp
.text:0040EEAF                 mov     ebp, esp
.text:0040EEB1                 sub     esp, 164h
.text:0040EEB7                 mov     eax, ___security_cookie
.text:0040EEBC                 xor     eax, ebp
.text:0040EEBE                 mov     [ebp+var_4], eax
.text:0040EEC1                 push    ebx
.text:0040EEC2                 push    esi
.text:0040EEC3                 push    edi             ; Context
.text:0040EEC4                 mov     edi, 800h
.text:0040EEC9                 xor     ebx, ebx
.text:0040EECB                 push    edi             ; dwBytes
.text:0040EECC                 push    ebx             ; dwFlags
.text:0040EECD                 call    ds:GetProcessHeap
.text:0040EED3                 push    eax             ; hHeap
.text:0040EED4                 call    ds:HeapAlloc
.text:0040EEDA                 mov     esi, eax
.text:0040EEDC                 mov     [ebp+String], esi
.text:0040EEE2                 test    esi, esi
.text:0040EEE4                 jnz     short loc_40EEF0
.text:0040EEE6                 mov     esi, 8007000Eh
.text:0040EEEB                 jmp     loc_40F1F9
.text:0040EEF0 ; ---------------------------------------------------------------------------
.text:0040EEF0
.text:0040EEF0 loc_40EEF0:                             ; CODE XREF: ArgpLoadArguments(void)+38↑j
.text:0040EEF0                 push    edi             ; dwBytes
.text:0040EEF1                 xor     eax, eax
.text:0040EEF3                 push    ebx             ; dwFlags
.text:0040EEF4                 mov     [esi], ax
.text:0040EEF7                 call    ds:GetProcessHeap
.text:0040EEFD                 push    eax             ; hHeap
.text:0040EEFE                 call    ds:HeapAlloc
.text:0040EF04                 mov     ebx, eax
.text:0040EF06                 test    ebx, ebx
.text:0040EF08                 jnz     short loc_40EF14
.text:0040EF0A                 mov     esi, 8007000Eh
.text:0040EF0F                 jmp     loc_40F1E3
.text:0040EF14 ; ---------------------------------------------------------------------------
.text:0040EF14
.text:0040EF14 loc_40EF14:                             ; CODE XREF: ArgpLoadArguments(void)+5C↑j
.text:0040EF14                 xor     eax, eax
.text:0040EF16                 mov     [ebx], ax
.text:0040EF19                 mov     edi, dword_414F14
.text:0040EF1F                 cmp     edi, offset dword_414F14
.text:0040EF25                 jz      loc_40F1D1
.text:0040EF2B
.text:0040EF2B loc_40EF2B:                             ; CODE XREF: ArgpLoadArguments(void)+1F7↓j
.text:0040EF2B                 push    ecx             ; int
.text:0040EF2C                 mov     ecx, [edi+8]    ; uID
.text:0040EF2F                 mov     edx, esi        ; lpBuffer
.text:0040EF31                 call    sub_40EE50
.text:0040EF36                 mov     esi, eax
.text:0040EF38                 test    esi, esi
.text:0040EF3A                 js      loc_40F1D3
.text:0040EF40                 mov     esi, offset asc_40364C ; "`"
.text:0040EF45                 push    esi             ; Delimiter
.text:0040EF46                 push    [ebp+String]    ; String
.text:0040EF4C                 call    ds:wcstok
.text:0040EF52                 pop     ecx
.text:0040EF53                 pop     ecx
.text:0040EF54                 test    eax, eax
.text:0040EF56                 jz      loc_40F1CA
.text:0040EF5C                 mov     ecx, eax
.text:0040EF5E                 call    sub_40EDB8
.text:0040EF63                 mov     [edi+24h], eax
.text:0040EF66                 test    eax, eax
.text:0040EF68                 jz      loc_40F1C3
.text:0040EF6E                 xor     eax, eax
.text:0040EF70                 push    esi             ; Delimiter
.text:0040EF71                 push    eax             ; String
.text:0040EF72                 mov     [edi+18h], eax
.text:0040EF75                 call    ds:wcstok
.text:0040EF7B                 mov     esi, eax
.text:0040EF7D                 pop     ecx
.text:0040EF7E                 pop     ecx
.text:0040EF7F                 test    esi, esi
.text:0040EF81                 jz      loc_40F1CA
.text:0040EF87                 xor     eax, eax
.text:0040EF89                 cmp     ax, [esi]
.text:0040EF8C                 jz      short loc_40EFC2
.text:0040EF8E                 push    offset asc_403208 ; "*"
.text:0040EF93                 push    esi             ; String1
.text:0040EF94                 call    ds:__imp__wcsicmp
.text:0040EF9A                 pop     ecx
.text:0040EF9B                 pop     ecx
.text:0040EF9C                 test    eax, eax
.text:0040EF9E                 jz      short loc_40EFC2
.text:0040EFA0                 mov     ecx, esi
.text:0040EFA2                 call    sub_40EDB8
.text:0040EFA7                 mov     [edi+28h], eax
.text:0040EFAA                 test    eax, eax
.text:0040EFAC                 jz      loc_40F1C3
.text:0040EFB2                 test    dword ptr [edi+20h], 40h
.text:0040EFB9                 jnz     short loc_40EFC2
.text:0040EFBB                 mov     dword ptr [edi+18h], 1
.text:0040EFC2
.text:0040EFC2 loc_40EFC2:                             ; CODE XREF: ArgpLoadArguments(void)+E0↑j
.text:0040EFC2                                         ; ArgpLoadArguments(void)+F2↑j ...
.text:0040EFC2                 xor     eax, eax
.text:0040EFC4                 push    offset asc_40364C ; "`"
.text:0040EFC9                 push    eax             ; String
.text:0040EFCA                 call    ds:wcstok
.text:0040EFD0                 mov     esi, eax
.text:0040EFD2                 pop     ecx
.text:0040EFD3                 pop     ecx
.text:0040EFD4                 test    esi, esi
.text:0040EFD6                 jz      loc_40F1CA
.text:0040EFDC                 mov     edx, offset asc_403208 ; "*"
.text:0040EFE1                 mov     ecx, esi
.text:0040EFE3
.text:0040EFE3 loc_40EFE3:                             ; CODE XREF: ArgpLoadArguments(void)+157↓j
.text:0040EFE3                 mov     ax, [ecx]
.text:0040EFE6                 cmp     ax, [edx]
.text:0040EFE9                 jnz     short loc_40F009
.text:0040EFEB                 test    ax, ax
.text:0040EFEE                 jz      short loc_40F005
.text:0040EFF0                 mov     ax, [ecx+2]
.text:0040EFF4                 cmp     ax, [edx+2]
.text:0040EFF8                 jnz     short loc_40F009
.text:0040EFFA                 add     ecx, 4
.text:0040EFFD                 add     edx, 4
.text:0040F000                 test    ax, ax
.text:0040F003                 jnz     short loc_40EFE3
.text:0040F005
.text:0040F005 loc_40F005:                             ; CODE XREF: ArgpLoadArguments(void)+142↑j
.text:0040F005                 xor     eax, eax
.text:0040F007                 jmp     short loc_40F00E
.text:0040F009 ; ---------------------------------------------------------------------------
.text:0040F009
.text:0040F009 loc_40F009:                             ; CODE XREF: ArgpLoadArguments(void)+13D↑j
.text:0040F009                                         ; ArgpLoadArguments(void)+14C↑j
.text:0040F009                 sbb     eax, eax
.text:0040F00B                 or      eax, 1
.text:0040F00E
.text:0040F00E loc_40F00E:                             ; CODE XREF: ArgpLoadArguments(void)+15B↑j
.text:0040F00E                 test    eax, eax
.text:0040F010                 jz      short loc_40F016
.text:0040F012                 mov     ecx, esi
.text:0040F014                 jmp     short loc_40F055
.text:0040F016 ; ---------------------------------------------------------------------------
.text:0040F016
.text:0040F016 loc_40F016:                             ; CODE XREF: ArgpLoadArguments(void)+164↑j
.text:0040F016                 mov     eax, [edi+1Ch]
.text:0040F019                 test    eax, eax
.text:0040F01B                 jle     short loc_40F065
.text:0040F01D                 cmp     eax, 2
.text:0040F020                 jle     short loc_40F035
.text:0040F022                 cmp     eax, 3
.text:0040F025                 jz      loc_40F1B6
.text:0040F02B                 cmp     eax, 4
.text:0040F02E                 jz      short loc_40F0A8
.text:0040F030                 cmp     eax, 5
.text:0040F033                 jnz     short loc_40F065
.text:0040F035
.text:0040F035 loc_40F035:                             ; CODE XREF: ArgpLoadArguments(void)+174↑j
.text:0040F035                 test    byte ptr [edi+20h], 80h
.text:0040F039                 mov     edx, ebx        ; lpBuffer
.text:0040F03B                 push    ecx             ; int
.text:0040F03C                 mov     ecx, 3BC5h
.text:0040F041                 jnz     short loc_40F044
.text:0040F043                 dec     ecx             ; uID
.text:0040F044
.text:0040F044 loc_40F044:                             ; CODE XREF: ArgpLoadArguments(void)+195↑j
.text:0040F044                                         ; ArgpLoadArguments(void)+312↓j
.text:0040F044                 call    sub_40EE50
.text:0040F049
.text:0040F049 loc_40F049:                             ; CODE XREF: ArgpLoadArguments(void)+2DF↓j
.text:0040F049                                         ; ArgpLoadArguments(void)+305↓j
.text:0040F049                 mov     esi, eax
.text:0040F04B                 test    esi, esi
.text:0040F04D                 js      loc_40F1D3
.text:0040F053                 mov     ecx, ebx
.text:0040F055
.text:0040F055 loc_40F055:                             ; CODE XREF: ArgpLoadArguments(void)+168↑j
.text:0040F055                 call    sub_40EDB8
.text:0040F05A                 mov     [edi+2Ch], eax
.text:0040F05D                 test    eax, eax
.text:0040F05F                 jz      loc_40F1C3
.text:0040F065
.text:0040F065 loc_40F065:                             ; CODE XREF: ArgpLoadArguments(void)+16F↑j
.text:0040F065                                         ; ArgpLoadArguments(void)+187↑j
.text:0040F065                 xor     eax, eax
.text:0040F067                 push    offset asc_40364C ; "`"
.text:0040F06C                 push    eax             ; String
.text:0040F06D                 call    ds:wcstok
.text:0040F073                 pop     ecx
.text:0040F074                 pop     ecx
.text:0040F075                 test    eax, eax
.text:0040F077                 jz      loc_40F1CA
.text:0040F07D                 mov     ecx, eax
.text:0040F07F                 call    sub_40EDB8
.text:0040F084                 mov     [edi+30h], eax
.text:0040F087                 test    eax, eax
.text:0040F089                 jz      loc_40F1C3
.text:0040F08F                 mov     edi, [edi]
.text:0040F091                 cmp     edi, offset dword_414F14
.text:0040F097                 jz      loc_40F1D1
.text:0040F09D                 mov     esi, [ebp+String]
.text:0040F0A3                 jmp     loc_40EF2B
.text:0040F0A8 ; ---------------------------------------------------------------------------
.text:0040F0A8
.text:0040F0A8 loc_40F0A8:                             ; CODE XREF: ArgpLoadArguments(void)+182↑j
.text:0040F0A8                 push    50h ; 'P'       ; cchData
.text:0040F0AA                 lea     eax, [ebp+LCData]
.text:0040F0B0                 mov     esi, 400h
.text:0040F0B5                 push    eax             ; lpLCData
.text:0040F0B6                 push    1Fh             ; LCType
.text:0040F0B8                 push    esi             ; Locale
.text:0040F0B9                 call    ds:GetLocaleInfoW
.text:0040F0BF                 test    eax, eax
.text:0040F0C1                 jnz     short loc_40F0CA
.text:0040F0C3                 mov     [ebp+LCData], ax
.text:0040F0CA
.text:0040F0CA loc_40F0CA:                             ; CODE XREF: ArgpLoadArguments(void)+215↑j
.text:0040F0CA                 push    50h ; 'P'       ; cchData
.text:0040F0CC                 lea     eax, [ebp+Str]
.text:0040F0D2                 push    eax             ; lpLCData
.text:0040F0D3                 push    1003h           ; LCType
.text:0040F0D8                 push    esi             ; Locale
.text:0040F0D9                 call    ds:GetLocaleInfoW
.text:0040F0DF                 test    eax, eax
.text:0040F0E1                 jnz     short loc_40F0EA
.text:0040F0E3                 mov     [ebp+Str], ax
.text:0040F0EA
.text:0040F0EA loc_40F0EA:                             ; CODE XREF: ArgpLoadArguments(void)+235↑j
.text:0040F0EA                 push    4               ; cchData
.text:0040F0EC                 lea     eax, [ebp+var_14]
.text:0040F0EF                 push    eax             ; lpLCData
.text:0040F0F0                 push    28h ; '('       ; LCType
.text:0040F0F2                 push    esi             ; Locale
.text:0040F0F3                 call    ds:GetLocaleInfoW
.text:0040F0F9                 test    eax, eax
.text:0040F0FB                 jnz     short loc_40F101
.text:0040F0FD                 mov     [ebp+var_14], ax
.text:0040F101
.text:0040F101 loc_40F101:                             ; CODE XREF: ArgpLoadArguments(void)+24F↑j
.text:0040F101                 push    4               ; cchData
.text:0040F103                 lea     eax, [ebp+var_C]
.text:0040F106                 push    eax             ; lpLCData
.text:0040F107                 push    29h ; ')'       ; LCType
.text:0040F109                 push    esi             ; Locale
.text:0040F10A                 call    ds:GetLocaleInfoW
.text:0040F110                 test    eax, eax
.text:0040F112                 jnz     short loc_40F118
.text:0040F114                 mov     [ebp+var_C], ax
.text:0040F118
.text:0040F118 loc_40F118:                             ; CODE XREF: ArgpLoadArguments(void)+266↑j
.text:0040F118                 lea     eax, [ebp+Str]
.text:0040F11E                 push    20h ; ' '       ; Ch
.text:0040F120                 push    eax             ; Str
.text:0040F121                 call    ds:wcsrchr
.text:0040F127                 pop     ecx
.text:0040F128                 pop     ecx
.text:0040F129                 test    eax, eax
.text:0040F12B                 jz      short loc_40F132
.text:0040F12D                 xor     ecx, ecx
.text:0040F12F                 mov     [eax], cx
.text:0040F132
.text:0040F132 loc_40F132:                             ; CODE XREF: ArgpLoadArguments(void)+27F↑j
.text:0040F132                 lea     ecx, [ebp+var_14]
.text:0040F135                 xor     esi, esi
.text:0040F137                 lea     edx, [ecx+2]
.text:0040F13A
.text:0040F13A loc_40F13A:                             ; CODE XREF: ArgpLoadArguments(void)+297↓j
.text:0040F13A                 mov     ax, [ecx]
.text:0040F13D                 add     ecx, 2
.text:0040F140                 cmp     ax, si
.text:0040F143                 jnz     short loc_40F13A
.text:0040F145                 sub     ecx, edx
.text:0040F147                 sar     ecx, 1
.text:0040F149                 jz      short loc_40F190
.text:0040F14B                 lea     ecx, [ebp+var_C]
.text:0040F14E                 lea     edx, [ecx+2]
.text:0040F151
.text:0040F151 loc_40F151:                             ; CODE XREF: ArgpLoadArguments(void)+2AE↓j
.text:0040F151                 mov     ax, [ecx]
.text:0040F154                 add     ecx, 2
.text:0040F157                 cmp     ax, si
.text:0040F15A                 jnz     short loc_40F151
.text:0040F15C                 sub     ecx, edx
.text:0040F15E                 sar     ecx, 1
.text:0040F160                 jz      short loc_40F190
.text:0040F162                 lea     eax, [ebp+var_C]
.text:0040F165                 push    eax
.text:0040F166                 lea     eax, [ebp+var_14]
.text:0040F169                 push    eax
.text:0040F16A                 lea     eax, [ebp+Str]
.text:0040F170                 push    eax
.text:0040F171                 lea     eax, [ebp+LCData]
.text:0040F177                 push    eax             ; Args
.text:0040F178                 push    offset aSSSS    ; "%s %s[%s|%s]"
.text:0040F17D                 push    400h            ; int
.text:0040F182                 push    ebx             ; Buffer
.text:0040F183                 call    ?StringCchPrintfW@@YAJPAGIPBGZZ_0 ; StringCchPrintfW(ushort *,uint,ushort const *,...)
.text:0040F188                 add     esp, 1Ch
.text:0040F18B                 jmp     loc_40F049
.text:0040F190 ; ---------------------------------------------------------------------------
.text:0040F190
.text:0040F190 loc_40F190:                             ; CODE XREF: ArgpLoadArguments(void)+29D↑j
.text:0040F190                                         ; ArgpLoadArguments(void)+2B4↑j
.text:0040F190                 lea     eax, [ebp+Str]
.text:0040F196                 push    eax
.text:0040F197                 lea     eax, [ebp+LCData]
.text:0040F19D                 push    eax             ; Args
.text:0040F19E                 push    offset aSS_0    ; "%s %s"
.text:0040F1A3                 push    400h            ; int
.text:0040F1A8                 push    ebx             ; Buffer
.text:0040F1A9                 call    ?StringCchPrintfW@@YAJPAGIPBGZZ_0 ; StringCchPrintfW(ushort *,uint,ushort const *,...)
.text:0040F1AE                 add     esp, 14h
.text:0040F1B1                 jmp     loc_40F049
.text:0040F1B6 ; ---------------------------------------------------------------------------
.text:0040F1B6
.text:0040F1B6 loc_40F1B6:                             ; CODE XREF: ArgpLoadArguments(void)+179↑j
.text:0040F1B6                 push    ecx
.text:0040F1B7                 mov     edx, ebx
.text:0040F1B9                 mov     ecx, 3BC6h
.text:0040F1BE                 jmp     loc_40F044
.text:0040F1C3 ; ---------------------------------------------------------------------------
.text:0040F1C3
.text:0040F1C3 loc_40F1C3:                             ; CODE XREF: ArgpLoadArguments(void)+BC↑j
.text:0040F1C3                                         ; ArgpLoadArguments(void)+100↑j ...
.text:0040F1C3                 mov     esi, 8007000Eh
.text:0040F1C8                 jmp     short loc_40F1D3
.text:0040F1CA ; ---------------------------------------------------------------------------
.text:0040F1CA
.text:0040F1CA loc_40F1CA:                             ; CODE XREF: ArgpLoadArguments(void)+AA↑j
.text:0040F1CA                                         ; ArgpLoadArguments(void)+D5↑j ...
.text:0040F1CA                 mov     esi, 8000FFFFh
.text:0040F1CF                 jmp     short loc_40F1D3
.text:0040F1D1 ; ---------------------------------------------------------------------------
.text:0040F1D1
.text:0040F1D1 loc_40F1D1:                             ; CODE XREF: ArgpLoadArguments(void)+79↑j
.text:0040F1D1                                         ; ArgpLoadArguments(void)+1EB↑j
.text:0040F1D1                 xor     esi, esi
.text:0040F1D3
.text:0040F1D3 loc_40F1D3:                             ; CODE XREF: ArgpLoadArguments(void)+8E↑j
.text:0040F1D3                                         ; ArgpLoadArguments(void)+1A1↑j ...
.text:0040F1D3                 push    ebx             ; lpMem
.text:0040F1D4                 push    0               ; dwFlags
.text:0040F1D6                 call    ds:GetProcessHeap
.text:0040F1DC                 push    eax             ; hHeap
.text:0040F1DD                 call    ds:HeapFree
.text:0040F1E3
.text:0040F1E3 loc_40F1E3:                             ; CODE XREF: ArgpLoadArguments(void)+63↑j
.text:0040F1E3                 push    [ebp+String]    ; lpMem
.text:0040F1E9                 xor     eax, eax
.text:0040F1EB                 push    eax             ; dwFlags
.text:0040F1EC                 call    ds:GetProcessHeap
.text:0040F1F2                 push    eax             ; hHeap
.text:0040F1F3                 call    ds:HeapFree
.text:0040F1F9
.text:0040F1F9 loc_40F1F9:                             ; CODE XREF: ArgpLoadArguments(void)+3F↑j
.text:0040F1F9                 mov     ecx, [ebp+var_4]
.text:0040F1FC                 mov     eax, esi
.text:0040F1FE                 pop     edi
.text:0040F1FF                 pop     esi
.text:0040F200                 xor     ecx, ebp        ; StackCookie
.text:0040F202                 pop     ebx
.text:0040F203                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040F208                 mov     esp, ebp
.text:0040F20A                 pop     ebp
.text:0040F20B                 retn
.text:0040F20B ?ArgpLoadArguments@@YGJXZ endp
.text:0040F20B
.text:0040F20C
.text:0040F20C ; =============== S U B R O U T I N E =======================================
.text:0040F20C
.text:0040F20C ; Attributes: bp-based frame
.text:0040F20C
.text:0040F20C ; int __thiscall sub_40F20C(wchar_t *String1, int, int, int)
.text:0040F20C sub_40F20C      proc near               ; CODE XREF: sub_40FDF4+45↓p
.text:0040F20C
.text:0040F20C var_8           = dword ptr -8
.text:0040F20C var_4           = dword ptr -4
.text:0040F20C arg_0           = dword ptr  8
.text:0040F20C arg_4           = dword ptr  0Ch
.text:0040F20C arg_8           = dword ptr  10h
.text:0040F20C
.text:0040F20C                 mov     edi, edi
.text:0040F20E                 push    ebp
.text:0040F20F                 mov     ebp, esp
.text:0040F211                 push    ecx
.text:0040F212                 push    ecx
.text:0040F213                 and     [ebp+var_4], 0
.text:0040F217                 xor     eax, eax
.text:0040F219                 push    ebx
.text:0040F21A                 mov     ebx, [ebp+arg_8]
.text:0040F21D                 push    esi
.text:0040F21E                 push    edi
.text:0040F21F                 mov     edi, ecx
.text:0040F221                 mov     [ebp+var_8], edx
.text:0040F224                 mov     ecx, [ebp+arg_4]
.text:0040F227                 push    2Dh ; '-'
.text:0040F229                 pop     esi
.text:0040F22A                 and     dword ptr [ecx], 0
.text:0040F22D                 cmp     si, [edi]
.text:0040F230                 setz    al
.text:0040F233                 mov     [ebx], eax
.text:0040F235                 test    eax, eax
.text:0040F237                 jz      short loc_40F23C
.text:0040F239                 add     edi, 2
.text:0040F23C
.text:0040F23C loc_40F23C:                             ; CODE XREF: sub_40F20C+2B↑j
.text:0040F23C                 mov     esi, dword_414F14
.text:0040F242                 mov     eax, offset dword_414F14
.text:0040F247                 cmp     esi, eax
.text:0040F249                 jz      short loc_40F2B4
.text:0040F24B
.text:0040F24B loc_40F24B:                             ; CODE XREF: sub_40F20C+9A↓j
.text:0040F24B                 cmp     dword ptr [esi+24h], 0
.text:0040F24F                 jz      short loc_40F25F
.text:0040F251                 test    edx, edx
.text:0040F253                 jnz     short loc_40F25A
.text:0040F255                 cmp     [esi+14h], edx
.text:0040F258                 jnz     short loc_40F25F
.text:0040F25A
.text:0040F25A loc_40F25A:                             ; CODE XREF: sub_40F20C+47↑j
.text:0040F25A                 xor     eax, eax
.text:0040F25C                 inc     eax
.text:0040F25D                 jmp     short loc_40F261
.text:0040F25F ; ---------------------------------------------------------------------------
.text:0040F25F
.text:0040F25F loc_40F25F:                             ; CODE XREF: sub_40F20C+43↑j
.text:0040F25F                                         ; sub_40F20C+4C↑j
.text:0040F25F                 xor     eax, eax
.text:0040F261
.text:0040F261 loc_40F261:                             ; CODE XREF: sub_40F20C+51↑j
.text:0040F261                 cmp     dword ptr [esi+28h], 0
.text:0040F265                 jz      short loc_40F270
.text:0040F267                 test    edx, edx
.text:0040F269                 jz      short loc_40F270
.text:0040F26B                 xor     ebx, ebx
.text:0040F26D                 inc     ebx
.text:0040F26E                 jmp     short loc_40F272
.text:0040F270 ; ---------------------------------------------------------------------------
.text:0040F270
.text:0040F270 loc_40F270:                             ; CODE XREF: sub_40F20C+59↑j
.text:0040F270                                         ; sub_40F20C+5D↑j
.text:0040F270                 xor     ebx, ebx
.text:0040F272
.text:0040F272 loc_40F272:                             ; CODE XREF: sub_40F20C+62↑j
.text:0040F272                 test    eax, eax
.text:0040F274                 jz      short loc_40F286
.text:0040F276                 push    dword ptr [esi+24h] ; String2
.text:0040F279                 push    edi             ; String1
.text:0040F27A                 call    ds:__imp__wcsicmp
.text:0040F280                 pop     ecx
.text:0040F281                 pop     ecx
.text:0040F282                 test    eax, eax
.text:0040F284                 jz      short loc_40F2CA
.text:0040F286
.text:0040F286 loc_40F286:                             ; CODE XREF: sub_40F20C+68↑j
.text:0040F286                 test    ebx, ebx
.text:0040F288                 jz      short loc_40F29A
.text:0040F28A                 push    dword ptr [esi+28h] ; String2
.text:0040F28D                 push    edi             ; String1
.text:0040F28E                 call    ds:__imp__wcsicmp
.text:0040F294                 pop     ecx
.text:0040F295                 pop     ecx
.text:0040F296                 test    eax, eax
.text:0040F298                 jz      short loc_40F2D8
.text:0040F29A
.text:0040F29A loc_40F29A:                             ; CODE XREF: sub_40F20C+7C↑j
.text:0040F29A                 mov     esi, [esi]
.text:0040F29C                 mov     eax, offset dword_414F14
.text:0040F2A1                 mov     edx, [ebp+var_8]
.text:0040F2A4                 cmp     esi, eax
.text:0040F2A6                 jnz     short loc_40F24B
.text:0040F2A8                 mov     esi, dword_414F14
.text:0040F2AE                 mov     ecx, [ebp+arg_4]
.text:0040F2B1                 mov     ebx, [ebp+arg_8]
.text:0040F2B4
.text:0040F2B4 loc_40F2B4:                             ; CODE XREF: sub_40F20C+3D↑j
.text:0040F2B4                 test    edx, edx
.text:0040F2B6                 jz      short loc_40F2F2
.text:0040F2B8
.text:0040F2B8 loc_40F2B8:                             ; CODE XREF: sub_40F20C+EA↓j
.text:0040F2B8                 mov     ecx, [ebp+arg_0]
.text:0040F2BB                 xor     eax, eax
.text:0040F2BD                 inc     eax
.text:0040F2BE                 and     dword ptr [ecx], 0
.text:0040F2C1
.text:0040F2C1 loc_40F2C1:                             ; CODE XREF: sub_40F20C+CA↓j
.text:0040F2C1                 pop     edi
.text:0040F2C2                 pop     esi
.text:0040F2C3                 pop     ebx
.text:0040F2C4                 mov     esp, ebp
.text:0040F2C6                 pop     ebp
.text:0040F2C7                 retn    0Ch
.text:0040F2CA ; ---------------------------------------------------------------------------
.text:0040F2CA
.text:0040F2CA loc_40F2CA:                             ; CODE XREF: sub_40F20C+78↑j
.text:0040F2CA                 and     dword ptr [esi+18h], 0
.text:0040F2CE
.text:0040F2CE loc_40F2CE:                             ; CODE XREF: sub_40F20C+D3↓j
.text:0040F2CE                                         ; sub_40F20C+F5↓j
.text:0040F2CE                 mov     eax, [ebp+arg_0]
.text:0040F2D1                 mov     [eax], esi
.text:0040F2D3                 mov     eax, [ebp+var_4]
.text:0040F2D6                 jmp     short loc_40F2C1
.text:0040F2D8 ; ---------------------------------------------------------------------------
.text:0040F2D8
.text:0040F2D8 loc_40F2D8:                             ; CODE XREF: sub_40F20C+8C↑j
.text:0040F2D8                 mov     dword ptr [esi+18h], 1
.text:0040F2DF                 jmp     short loc_40F2CE
.text:0040F2E1 ; ---------------------------------------------------------------------------
.text:0040F2E1
.text:0040F2E1 loc_40F2E1:                             ; CODE XREF: sub_40F20C+E8↓j
.text:0040F2E1                 cmp     dword ptr [esi+48h], 0
.text:0040F2E5                 jnz     short loc_40F2F0
.text:0040F2E7                 test    dword ptr [esi+20h], 1
.text:0040F2EE                 jnz     short loc_40F2F8
.text:0040F2F0
.text:0040F2F0 loc_40F2F0:                             ; CODE XREF: sub_40F20C+D9↑j
.text:0040F2F0                 mov     esi, [esi]
.text:0040F2F2
.text:0040F2F2 loc_40F2F2:                             ; CODE XREF: sub_40F20C+AA↑j
.text:0040F2F2                 cmp     esi, eax
.text:0040F2F4                 jnz     short loc_40F2E1
.text:0040F2F6                 jmp     short loc_40F2B8
.text:0040F2F8 ; ---------------------------------------------------------------------------
.text:0040F2F8
.text:0040F2F8 loc_40F2F8:                             ; CODE XREF: sub_40F20C+E2↑j
.text:0040F2F8                 and     dword ptr [ebx], 0
.text:0040F2FB                 mov     dword ptr [ecx], 1
.text:0040F301                 jmp     short loc_40F2CE
.text:0040F301 sub_40F20C      endp
.text:0040F301
.text:0040F303
.text:0040F303 ; =============== S U B R O U T I N E =======================================
.text:0040F303
.text:0040F303
.text:0040F303 sub_40F303      proc near               ; CODE XREF: sub_40FD8A+4D↓p
.text:0040F303                                         ; sub_40FF6D+136↓p
.text:0040F303                 mov     edi, edi
.text:0040F305                 push    esi
.text:0040F306                 mov     esi, dword_414F14
.text:0040F30C                 cmp     esi, offset dword_414F14
.text:0040F312                 jz      loc_40F3AB
.text:0040F318                 push    ebx
.text:0040F319                 push    edi
.text:0040F31A                 xor     ebx, ebx
.text:0040F31C
.text:0040F31C loc_40F31C:                             ; CODE XREF: sub_40F303+A0↓j
.text:0040F31C                 cmp     [esi+48h], ebx
.text:0040F31F                 jz      short loc_40F39B
.text:0040F321                 cmp     [esi+38h], ebx
.text:0040F324                 jnz     short loc_40F348
.text:0040F326                 cmp     dword ptr [esi+18h], 1
.text:0040F32A                 jnz     short loc_40F331
.text:0040F32C                 mov     eax, [esi+28h]
.text:0040F32F                 jmp     short loc_40F334
.text:0040F331 ; ---------------------------------------------------------------------------
.text:0040F331
.text:0040F331 loc_40F331:                             ; CODE XREF: sub_40F303+27↑j
.text:0040F331                 mov     eax, [esi+24h]
.text:0040F334
.text:0040F334 loc_40F334:                             ; CODE XREF: sub_40F303+2C↑j
.text:0040F334                 push    eax             ; char
.text:0040F335                 push    3C2Bh           ; uID
.text:0040F33A                 push    ebx             ; int
.text:0040F33B                 call    sub_40E7F8
.text:0040F340                 add     esp, 0Ch
.text:0040F343                 mov     ecx, 80070057h
.text:0040F348
.text:0040F348 loc_40F348:                             ; CODE XREF: sub_40F303+21↑j
.text:0040F348                 cmp     [esi+58h], ebx
.text:0040F34B                 jz      short loc_40F39B
.text:0040F34D                 mov     edi, ebx
.text:0040F34F                 cmp     dword_414FFC, ebx
.text:0040F355                 jbe     short loc_40F39B
.text:0040F357
.text:0040F357 loc_40F357:                             ; CODE XREF: sub_40F303+96↓j
.text:0040F357                 mov     eax, [esi+58h]
.text:0040F35A                 mov     eax, [eax+edi*4]
.text:0040F35D                 test    eax, eax
.text:0040F35F                 jz      short loc_40F392
.text:0040F361                 cmp     dword ptr [eax+18h], 1
.text:0040F365                 jnz     short loc_40F36C
.text:0040F367                 mov     ecx, [eax+28h]
.text:0040F36A                 jmp     short loc_40F36F
.text:0040F36C ; ---------------------------------------------------------------------------
.text:0040F36C
.text:0040F36C loc_40F36C:                             ; CODE XREF: sub_40F303+62↑j
.text:0040F36C                 mov     ecx, [eax+24h]  ; int
.text:0040F36F
.text:0040F36F loc_40F36F:                             ; CODE XREF: sub_40F303+67↑j
.text:0040F36F                 cmp     dword ptr [esi+18h], 1
.text:0040F373                 jnz     short loc_40F37A
.text:0040F375                 mov     eax, [esi+28h]
.text:0040F378                 jmp     short loc_40F37D
.text:0040F37A ; ---------------------------------------------------------------------------
.text:0040F37A
.text:0040F37A loc_40F37A:                             ; CODE XREF: sub_40F303+70↑j
.text:0040F37A                 mov     eax, [esi+24h]
.text:0040F37D
.text:0040F37D loc_40F37D:                             ; CODE XREF: sub_40F303+75↑j
.text:0040F37D                 push    ecx
.text:0040F37E                 push    eax             ; char
.text:0040F37F                 push    3C28h           ; uID
.text:0040F384                 push    ebx             ; int
.text:0040F385                 call    sub_40E7F8
.text:0040F38A                 add     esp, 10h
.text:0040F38D                 mov     ecx, 80070057h
.text:0040F392
.text:0040F392 loc_40F392:                             ; CODE XREF: sub_40F303+5C↑j
.text:0040F392                 inc     edi
.text:0040F393                 cmp     edi, dword_414FFC
.text:0040F399                 jb      short loc_40F357
.text:0040F39B
.text:0040F39B loc_40F39B:                             ; CODE XREF: sub_40F303+1C↑j
.text:0040F39B                                         ; sub_40F303+48↑j ...
.text:0040F39B                 mov     esi, [esi]
.text:0040F39D                 cmp     esi, offset dword_414F14
.text:0040F3A3                 jnz     loc_40F31C
.text:0040F3A9                 pop     edi
.text:0040F3AA                 pop     ebx
.text:0040F3AB
.text:0040F3AB loc_40F3AB:                             ; CODE XREF: sub_40F303+F↑j
.text:0040F3AB                 mov     eax, ecx
.text:0040F3AD                 pop     esi
.text:0040F3AE                 retn
.text:0040F3AE sub_40F303      endp
.text:0040F3AE
.text:0040F3AF
.text:0040F3AF ; =============== S U B R O U T I N E =======================================
.text:0040F3AF
.text:0040F3AF
.text:0040F3AF sub_40F3AF      proc near               ; CODE XREF: sub_40F543+46↓p
.text:0040F3AF                                         ; sub_40F543+70↓p ...
.text:0040F3AF                 test    dword ptr [ecx+20h], 400h
.text:0040F3B6                 jz      short loc_40F3BC
.text:0040F3B8                 mov     eax, [ecx+48h]
.text:0040F3BB                 retn
.text:0040F3BC ; ---------------------------------------------------------------------------
.text:0040F3BC
.text:0040F3BC loc_40F3BC:                             ; CODE XREF: sub_40F3AF+7↑j
.text:0040F3BC                 xor     eax, eax
.text:0040F3BE                 inc     eax
.text:0040F3BF                 retn
.text:0040F3BF sub_40F3AF      endp
.text:0040F3BF
.text:0040F3C0
.text:0040F3C0 ; =============== S U B R O U T I N E =======================================
.text:0040F3C0
.text:0040F3C0 ; Attributes: bp-based frame
.text:0040F3C0
.text:0040F3C0 sub_40F3C0      proc near               ; CODE XREF: sub_40F543+104↓p
.text:0040F3C0                                         ; sub_40F694+8A↓p ...
.text:0040F3C0
.text:0040F3C0 var_C           = dword ptr -0Ch
.text:0040F3C0 var_8           = dword ptr -8
.text:0040F3C0 var_4           = dword ptr -4
.text:0040F3C0
.text:0040F3C0                 mov     edi, edi
.text:0040F3C2                 push    ebp
.text:0040F3C3                 mov     ebp, esp
.text:0040F3C5                 sub     esp, 0Ch
.text:0040F3C8                 push    ebx
.text:0040F3C9                 push    esi
.text:0040F3CA                 mov     esi, ecx
.text:0040F3CC                 mov     [ebp+var_C], edx
.text:0040F3CF                 mov     ebx, offset asc_403678 ; "]"
.text:0040F3D4                 mov     eax, offset ppszDestEnd
.text:0040F3D9                 push    edi
.text:0040F3DA                 mov     [ebp+var_4], ebx
.text:0040F3DD                 mov     ecx, [esi+20h]
.text:0040F3E0                 and     ecx, 1
.text:0040F3E3                 jnz     short loc_40F3E8
.text:0040F3E5                 mov     [ebp+var_4], eax
.text:0040F3E8
.text:0040F3E8 loc_40F3E8:                             ; CODE XREF: sub_40F3C0+23↑j
.text:0040F3E8                 cmp     dword ptr [esi+14h], 1
.text:0040F3EC                 jnz     short loc_40F3F3
.text:0040F3EE                 mov     edx, [esi+28h]
.text:0040F3F1                 jmp     short loc_40F3F6
.text:0040F3F3 ; ---------------------------------------------------------------------------
.text:0040F3F3
.text:0040F3F3 loc_40F3F3:                             ; CODE XREF: sub_40F3C0+2C↑j
.text:0040F3F3                 mov     edx, [esi+24h]
.text:0040F3F6
.text:0040F3F6 loc_40F3F6:                             ; CODE XREF: sub_40F3C0+31↑j
.text:0040F3F6                 test    byte ptr [esi+20h], 4
.text:0040F3FA                 mov     edi, offset asc_40367C ; "[-]"
.text:0040F3FF                 mov     [ebp+var_8], edx
.text:0040F402                 jnz     short loc_40F406
.text:0040F404                 mov     edi, eax
.text:0040F406
.text:0040F406 loc_40F406:                             ; CODE XREF: sub_40F3C0+42↑j
.text:0040F406                 cmp     dword ptr [esi+14h], 1
.text:0040F40A                 mov     edx, offset asc_403344 ; "-"
.text:0040F40F                 jz      short loc_40F413
.text:0040F411                 mov     edx, eax
.text:0040F413
.text:0040F413 loc_40F413:                             ; CODE XREF: sub_40F3C0+4F↑j
.text:0040F413                 test    ecx, ecx
.text:0040F415                 jz      short loc_40F41C
.text:0040F417                 mov     eax, offset asc_403684 ; "["
.text:0040F41C
.text:0040F41C loc_40F41C:                             ; CODE XREF: sub_40F3C0+55↑j
.text:0040F41C                 push    [ebp+var_4]
.text:0040F41F                 push    [ebp+var_8]
.text:0040F422                 push    edi
.text:0040F423                 push    edx
.text:0040F424                 push    eax             ; char
.text:0040F425                 lea     eax, [ebp+var_4]
.text:0040F428                 push    offset a1S2S3S4S5S ; "%1!s!%2!s!%3!s!%4!s!%5!s!"
.text:0040F42D                 push    eax             ; int
.text:0040F42E                 call    sub_40E7CF
.text:0040F433                 mov     edi, [ebp+var_4]
.text:0040F436                 add     esp, 1Ch
.text:0040F439                 add     edi, 2
.text:0040F43C                 cmp     dword ptr [esi+1Ch], 0
.text:0040F440                 jz      short loc_40F4A2
.text:0040F442                 test    byte ptr [esi+20h], 2
.text:0040F446                 mov     edx, offset asc_4036BC ; " ["
.text:0040F44B                 jnz     short loc_40F452
.text:0040F44D                 mov     edx, offset asc_4036C4 ; " <"
.text:0040F452
.text:0040F452 loc_40F452:                             ; CODE XREF: sub_40F3C0+8B↑j
.text:0040F452                 xor     ecx, ecx
.text:0040F454                 call    sub_40E5A2
.text:0040F459                 cmp     dword ptr [esi+1Ch], 2
.text:0040F45D                 jnz     short loc_40F47B
.text:0040F45F                 test    byte ptr [esi+20h], 8
.text:0040F463                 jnz     short loc_40F47B
.text:0040F465                 push    dword ptr [esi+2Ch] ; char
.text:0040F468                 lea     eax, [ebp+var_4]
.text:0040F46B                 push    offset a1S1S    ; "%1!s! [%1!s! [...]]"
.text:0040F470                 push    eax             ; int
.text:0040F471                 call    sub_40E7CF
.text:0040F476                 add     esp, 0Ch
.text:0040F479                 jmp     short loc_40F486
.text:0040F47B ; ---------------------------------------------------------------------------
.text:0040F47B
.text:0040F47B loc_40F47B:                             ; CODE XREF: sub_40F3C0+9D↑j
.text:0040F47B                                         ; sub_40F3C0+A3↑j
.text:0040F47B                 mov     edx, [esi+2Ch]
.text:0040F47E                 lea     ecx, [ebp+var_4]
.text:0040F481                 call    sub_40E5A2
.text:0040F486
.text:0040F486 loc_40F486:                             ; CODE XREF: sub_40F3C0+B9↑j
.text:0040F486                 test    byte ptr [esi+20h], 2
.text:0040F48A                 jnz     short loc_40F491
.text:0040F48C                 mov     ebx, offset asc_4036F4 ; ">"
.text:0040F491
.text:0040F491 loc_40F491:                             ; CODE XREF: sub_40F3C0+CA↑j
.text:0040F491                 mov     edx, ebx
.text:0040F493                 xor     ecx, ecx
.text:0040F495                 call    sub_40E5A2
.text:0040F49A                 mov     eax, [ebp+var_4]
.text:0040F49D                 add     eax, 3
.text:0040F4A0                 add     edi, eax
.text:0040F4A2
.text:0040F4A2 loc_40F4A2:                             ; CODE XREF: sub_40F3C0+80↑j
.text:0040F4A2                 mov     eax, [ebp+var_C]
.text:0040F4A5                 test    eax, eax
.text:0040F4A7                 jz      short loc_40F4AB
.text:0040F4A9                 mov     [eax], edi
.text:0040F4AB
.text:0040F4AB loc_40F4AB:                             ; CODE XREF: sub_40F3C0+E7↑j
.text:0040F4AB                 pop     edi
.text:0040F4AC                 pop     esi
.text:0040F4AD                 pop     ebx
.text:0040F4AE                 mov     esp, ebp
.text:0040F4B0                 pop     ebp
.text:0040F4B1                 retn
.text:0040F4B1 sub_40F3C0      endp
.text:0040F4B1
.text:0040F4B2
.text:0040F4B2 ; =============== S U B R O U T I N E =======================================
.text:0040F4B2
.text:0040F4B2
.text:0040F4B2 ; int __thiscall sub_40F4B2(UINT uID)
.text:0040F4B2 sub_40F4B2      proc near               ; CODE XREF: sub_40F694+13B↓p
.text:0040F4B2                 mov     edi, edi
.text:0040F4B4                 push    esi
.text:0040F4B5                 push    edi
.text:0040F4B6                 push    800h            ; dwBytes
.text:0040F4BB                 push    0               ; dwFlags
.text:0040F4BD                 mov     edi, ecx
.text:0040F4BF                 call    ds:GetProcessHeap
.text:0040F4C5                 push    eax             ; hHeap
.text:0040F4C6                 call    ds:HeapAlloc
.text:0040F4CC                 mov     esi, eax
.text:0040F4CE                 test    esi, esi
.text:0040F4D0                 jnz     short loc_40F4D9
.text:0040F4D2                 mov     edi, 8007000Eh
.text:0040F4D7                 jmp     short loc_40F53E
.text:0040F4D9 ; ---------------------------------------------------------------------------
.text:0040F4D9
.text:0040F4D9 loc_40F4D9:                             ; CODE XREF: sub_40F4B2+1E↑j
.text:0040F4D9                 xor     eax, eax
.text:0040F4DB                 mov     edx, esi        ; lpBuffer
.text:0040F4DD                 push    ecx             ; int
.text:0040F4DE                 mov     ecx, edi        ; uID
.text:0040F4E0                 mov     [esi], ax
.text:0040F4E3                 call    sub_40EE50
.text:0040F4E8                 mov     edi, eax
.text:0040F4EA                 test    edi, edi
.text:0040F4EC                 js      short loc_40F52E
.text:0040F4EE                 push    ebx             ; Context
.text:0040F4EF                 push    offset word_4036F8
.text:0040F4F4                 push    esi
.text:0040F4F5                 jmp     short loc_40F51F
.text:0040F4F7 ; ---------------------------------------------------------------------------
.text:0040F4F7
.text:0040F4F7 loc_40F4F7:                             ; CODE XREF: sub_40F4B2+79↓j
.text:0040F4F7                 mov     edx, offset asc_4036FC ; "  "
.text:0040F4FC                 xor     ecx, ecx
.text:0040F4FE                 call    sub_40E5A2
.text:0040F503                 mov     edx, ebx
.text:0040F505                 xor     ecx, ecx
.text:0040F507                 call    sub_40E5A2
.text:0040F50C                 mov     edx, offset asc_403204 ; "\n"
.text:0040F511                 xor     ecx, ecx
.text:0040F513                 call    sub_40E5A2
.text:0040F518                 push    offset word_4036F8 ; Delimiter
.text:0040F51D                 push    0               ; String
.text:0040F51F
.text:0040F51F loc_40F51F:                             ; CODE XREF: sub_40F4B2+43↑j
.text:0040F51F                 call    ds:wcstok
.text:0040F525                 mov     ebx, eax
.text:0040F527                 pop     ecx
.text:0040F528                 pop     ecx
.text:0040F529                 test    ebx, ebx
.text:0040F52B                 jnz     short loc_40F4F7
.text:0040F52D                 pop     ebx
.text:0040F52E
.text:0040F52E loc_40F52E:                             ; CODE XREF: sub_40F4B2+3A↑j
.text:0040F52E                 push    esi             ; lpMem
.text:0040F52F                 push    0               ; dwFlags
.text:0040F531                 call    ds:GetProcessHeap
.text:0040F537                 push    eax             ; hHeap
.text:0040F538                 call    ds:HeapFree
.text:0040F53E
.text:0040F53E loc_40F53E:                             ; CODE XREF: sub_40F4B2+25↑j
.text:0040F53E                 mov     eax, edi
.text:0040F540                 pop     edi
.text:0040F541                 pop     esi
.text:0040F542                 retn
.text:0040F542 sub_40F4B2      endp
.text:0040F542
.text:0040F543
.text:0040F543 ; =============== S U B R O U T I N E =======================================
.text:0040F543
.text:0040F543 ; Attributes: bp-based frame
.text:0040F543
.text:0040F543 sub_40F543      proc near               ; CODE XREF: sub_40F694+15↓p
.text:0040F543                                         ; sub_40F694+20↓p ...
.text:0040F543
.text:0040F543 var_10          = dword ptr -10h
.text:0040F543 var_C           = dword ptr -0Ch
.text:0040F543 var_8           = dword ptr -8
.text:0040F543 var_4           = dword ptr -4
.text:0040F543
.text:0040F543                 mov     edi, edi
.text:0040F545                 push    ebp
.text:0040F546                 mov     ebp, esp
.text:0040F548                 sub     esp, 10h
.text:0040F54B                 and     [ebp+var_4], 0
.text:0040F54F                 push    esi
.text:0040F550                 mov     esi, dword_414F0C
.text:0040F556                 mov     [ebp+var_10], edx
.text:0040F559                 mov     edx, ecx
.text:0040F55B                 mov     [ebp+var_8], edx
.text:0040F55E                 cmp     esi, offset dword_414F0C
.text:0040F564                 jz      loc_40F68F
.text:0040F56A                 push    ebx
.text:0040F56B                 push    edi             ; char
.text:0040F56C
.text:0040F56C loc_40F56C:                             ; CODE XREF: sub_40F543+144↓j
.text:0040F56C                 cmp     edx, [esi-8]
.text:0040F56F                 jnz     loc_40F67F
.text:0040F575                 cmp     edx, 3
.text:0040F578                 jnz     short loc_40F597
.text:0040F57A                 mov     eax, [esi-10h]
.text:0040F57D                 mov     ecx, [eax]
.text:0040F57F                 cmp     dword ptr [ecx+38h], 0
.text:0040F583                 jz      loc_40F67F
.text:0040F589                 call    sub_40F3AF
.text:0040F58E                 test    eax, eax
.text:0040F590                 jnz     short loc_40F59C
.text:0040F592                 jmp     loc_40F67F
.text:0040F597 ; ---------------------------------------------------------------------------
.text:0040F597
.text:0040F597 loc_40F597:                             ; CODE XREF: sub_40F543+35↑j
.text:0040F597                 cmp     edx, 2
.text:0040F59A                 jle     short loc_40F5A0
.text:0040F59C
.text:0040F59C loc_40F59C:                             ; CODE XREF: sub_40F543+4D↑j
.text:0040F59C                 and     [ebp+var_4], 0
.text:0040F5A0
.text:0040F5A0 loc_40F5A0:                             ; CODE XREF: sub_40F543+57↑j
.text:0040F5A0                 xor     ebx, ebx
.text:0040F5A2                 cmp     [esi-0Ch], ebx
.text:0040F5A5                 jbe     loc_40F67F
.text:0040F5AB
.text:0040F5AB loc_40F5AB:                             ; CODE XREF: sub_40F543+136↓j
.text:0040F5AB                 mov     eax, [esi-10h]
.text:0040F5AE                 mov     edi, [eax+ebx*4]
.text:0040F5B1                 mov     ecx, edi
.text:0040F5B3                 call    sub_40F3AF
.text:0040F5B8                 test    eax, eax
.text:0040F5BA                 jz      loc_40F675
.text:0040F5C0                 cmp     dword ptr [edi+38h], 0
.text:0040F5C4                 jnz     short loc_40F5D6
.text:0040F5C6                 cmp     dword ptr [edi+3Ch], 0
.text:0040F5CA                 jnz     short loc_40F5D6
.text:0040F5CC                 cmp     dword ptr [edi+48h], 0
.text:0040F5D0                 jz      loc_40F675
.text:0040F5D6
.text:0040F5D6 loc_40F5D6:                             ; CODE XREF: sub_40F543+81↑j
.text:0040F5D6                                         ; sub_40F543+87↑j
.text:0040F5D6                 cmp     edx, 3
.text:0040F5D9                 jnz     short loc_40F5E3
.text:0040F5DB                 test    ebx, ebx
.text:0040F5DD                 jz      loc_40F675
.text:0040F5E3
.text:0040F5E3 loc_40F5E3:                             ; CODE XREF: sub_40F543+96↑j
.text:0040F5E3                 cmp     [ebp+var_4], 0
.text:0040F5E7                 jnz     short loc_40F62F
.text:0040F5E9                 mov     eax, edx
.text:0040F5EB                 sub     eax, 1
.text:0040F5EE                 jz      short loc_40F61A
.text:0040F5F0                 sub     eax, 1
.text:0040F5F3                 jz      short loc_40F613
.text:0040F5F5                 sub     eax, 1
.text:0040F5F8                 jnz     short loc_40F628
.text:0040F5FA                 mov     eax, [esi-10h]
.text:0040F5FD                 mov     eax, [eax]
.text:0040F5FF                 push    dword ptr [eax+24h] ; char
.text:0040F602                 push    3C37h           ; uID
.text:0040F607                 push    0               ; int
.text:0040F609                 call    sub_40E7F8
.text:0040F60E                 add     esp, 0Ch
.text:0040F611                 jmp     short loc_40F628
.text:0040F613 ; ---------------------------------------------------------------------------
.text:0040F613
.text:0040F613 loc_40F613:                             ; CODE XREF: sub_40F543+B0↑j
.text:0040F613                 push    3C2Dh
.text:0040F618                 jmp     short loc_40F61F
.text:0040F61A ; ---------------------------------------------------------------------------
.text:0040F61A
.text:0040F61A loc_40F61A:                             ; CODE XREF: sub_40F543+AB↑j
.text:0040F61A                 push    3C2Ch           ; uID
.text:0040F61F
.text:0040F61F loc_40F61F:                             ; CODE XREF: sub_40F543+D5↑j
.text:0040F61F                 push    0               ; int
.text:0040F621                 call    sub_40E7F8
.text:0040F626                 pop     ecx
.text:0040F627                 pop     ecx
.text:0040F628
.text:0040F628 loc_40F628:                             ; CODE XREF: sub_40F543+B5↑j
.text:0040F628                                         ; sub_40F543+CE↑j
.text:0040F628                 mov     [ebp+var_4], 1
.text:0040F62F
.text:0040F62F loc_40F62F:                             ; CODE XREF: sub_40F543+A4↑j
.text:0040F62F                 mov     edx, offset asc_4036FC ; "  "
.text:0040F634                 mov     dword ptr [edi+34h], 1
.text:0040F63B                 xor     ecx, ecx
.text:0040F63D                 call    sub_40E5A2
.text:0040F642                 lea     edx, [ebp+var_C]
.text:0040F645                 mov     ecx, edi
.text:0040F647                 call    sub_40F3C0
.text:0040F64C                 movzx   eax, word_415008
.text:0040F653                 mov     edx, [ebp+var_C]
.text:0040F656                 push    eax
.text:0040F657                 push    ecx
.text:0040F658                 mov     ecx, [edi+30h]
.text:0040F65B                 call    sub_40E9E0
.text:0040F660                 test    byte ptr [edi+20h], 4
.text:0040F664                 mov     edx, [ebp+var_8]
.text:0040F667                 jz      short loc_40F675
.text:0040F669                 mov     ecx, [ebp+var_10]
.text:0040F66C                 test    ecx, ecx
.text:0040F66E                 jnz     short loc_40F675
.text:0040F670                 mov     eax, [edi+28h]
.text:0040F673                 mov     [ecx], eax
.text:0040F675
.text:0040F675 loc_40F675:                             ; CODE XREF: sub_40F543+77↑j
.text:0040F675                                         ; sub_40F543+8D↑j ...
.text:0040F675                 inc     ebx
.text:0040F676                 cmp     ebx, [esi-0Ch]
.text:0040F679                 jb      loc_40F5AB
.text:0040F67F
.text:0040F67F loc_40F67F:                             ; CODE XREF: sub_40F543+2C↑j
.text:0040F67F                                         ; sub_40F543+40↑j ...
.text:0040F67F                 mov     esi, [esi]
.text:0040F681                 cmp     esi, offset dword_414F0C
.text:0040F687                 jnz     loc_40F56C
.text:0040F68D                 pop     edi
.text:0040F68E                 pop     ebx
.text:0040F68F
.text:0040F68F loc_40F68F:                             ; CODE XREF: sub_40F543+21↑j
.text:0040F68F                 pop     esi
.text:0040F690                 mov     esp, ebp
.text:0040F692                 pop     ebp
.text:0040F693                 retn
.text:0040F693 sub_40F543      endp
.text:0040F693
.text:0040F694
.text:0040F694 ; =============== S U B R O U T I N E =======================================
.text:0040F694
.text:0040F694 ; Attributes: bp-based frame
.text:0040F694
.text:0040F694 sub_40F694      proc near               ; CODE XREF: sub_40FD8A+5F↓p
.text:0040F694
.text:0040F694 var_4           = byte ptr -4
.text:0040F694
.text:0040F694                 mov     edi, edi
.text:0040F696                 push    ebp
.text:0040F697                 mov     ebp, esp
.text:0040F699                 push    ecx
.text:0040F69A                 and     dword ptr [ebp+var_4], 0
.text:0040F69E                 lea     edx, [ebp+var_4]
.text:0040F6A1                 push    ebx
.text:0040F6A2                 mov     ebx, ecx
.text:0040F6A4                 xor     ecx, ecx
.text:0040F6A6                 push    esi
.text:0040F6A7                 push    edi             ; char
.text:0040F6A8                 inc     ecx
.text:0040F6A9                 call    sub_40F543
.text:0040F6AE                 push    2
.text:0040F6B0                 lea     edx, [ebp+var_4]
.text:0040F6B3                 pop     ecx
.text:0040F6B4                 call    sub_40F543
.text:0040F6B9                 push    3
.text:0040F6BB                 lea     edx, [ebp+var_4]
.text:0040F6BE                 pop     ecx
.text:0040F6BF                 call    sub_40F543
.text:0040F6C4                 push    3C2Eh           ; uID
.text:0040F6C9                 push    0               ; int
.text:0040F6CB                 call    sub_40E7F8
.text:0040F6D0                 mov     esi, dword_414F14
.text:0040F6D6                 mov     edi, dword ptr [ebp+var_4]
.text:0040F6D9                 pop     ecx
.text:0040F6DA                 pop     ecx             ; int
.text:0040F6DB
.text:0040F6DB loc_40F6DB:                             ; CODE XREF: sub_40F694+B2↓j
.text:0040F6DB                 cmp     esi, offset dword_414F14
.text:0040F6E1                 jz      short loc_40F748
.text:0040F6E3                 cmp     dword ptr [esi+34h], 0
.text:0040F6E7                 jnz     short loc_40F744
.text:0040F6E9                 mov     ecx, esi
.text:0040F6EB                 call    sub_40F3AF
.text:0040F6F0                 test    eax, eax
.text:0040F6F2                 jz      short loc_40F744
.text:0040F6F4                 cmp     dword ptr [esi+3Ch], 0
.text:0040F6F8                 jnz     short loc_40F706
.text:0040F6FA                 cmp     dword ptr [esi+48h], 0
.text:0040F6FE                 jnz     short loc_40F706
.text:0040F700                 cmp     dword ptr [esi+38h], 0
.text:0040F704                 jz      short loc_40F744
.text:0040F706
.text:0040F706 loc_40F706:                             ; CODE XREF: sub_40F694+64↑j
.text:0040F706                                         ; sub_40F694+6A↑j
.text:0040F706                 mov     edx, offset asc_4036FC ; "  "
.text:0040F70B                 mov     dword ptr [esi+34h], 1
.text:0040F712                 xor     ecx, ecx
.text:0040F714                 call    sub_40E5A2
.text:0040F719                 lea     edx, [ebp+var_4]
.text:0040F71C                 mov     ecx, esi
.text:0040F71E                 call    sub_40F3C0
.text:0040F723                 movzx   eax, word_415008
.text:0040F72A                 mov     edx, dword ptr [ebp+var_4]
.text:0040F72D                 push    eax
.text:0040F72E                 push    ecx
.text:0040F72F                 mov     ecx, [esi+30h]
.text:0040F732                 call    sub_40E9E0
.text:0040F737                 test    byte ptr [esi+20h], 4
.text:0040F73B                 jz      short loc_40F744
.text:0040F73D                 test    edi, edi
.text:0040F73F                 jnz     short loc_40F744
.text:0040F741                 mov     edi, [esi+28h]
.text:0040F744
.text:0040F744 loc_40F744:                             ; CODE XREF: sub_40F694+53↑j
.text:0040F744                                         ; sub_40F694+5E↑j ...
.text:0040F744                 mov     esi, [esi]
.text:0040F746                 jmp     short loc_40F6DB
.text:0040F748 ; ---------------------------------------------------------------------------
.text:0040F748
.text:0040F748 loc_40F748:                             ; CODE XREF: sub_40F694+4D↑j
.text:0040F748                 test    edi, edi
.text:0040F74A                 jz      short loc_40F75C
.text:0040F74C                 push    edi             ; char
.text:0040F74D                 push    3C35h           ; uID
.text:0040F752                 push    0               ; int
.text:0040F754                 call    sub_40E7F8
.text:0040F759                 add     esp, 0Ch
.text:0040F75C
.text:0040F75C loc_40F75C:                             ; CODE XREF: sub_40F694+B6↑j
.text:0040F75C                 cmp     uID, 0
.text:0040F763                 jz      short loc_40F79A
.text:0040F765                 push    3C38h           ; uID
.text:0040F76A                 push    0               ; int
.text:0040F76C                 call    sub_40E7F8
.text:0040F771                 pop     ecx
.text:0040F772                 pop     ecx
.text:0040F773                 mov     edx, offset asc_4036FC ; "  "
.text:0040F778                 xor     ecx, ecx
.text:0040F77A                 call    sub_40E5A2
.text:0040F77F                 push    uID             ; uID
.text:0040F785                 push    0               ; int
.text:0040F787                 call    sub_40E7F8
.text:0040F78C                 pop     ecx
.text:0040F78D                 pop     ecx
.text:0040F78E                 mov     edx, offset asc_403204 ; "\n"
.text:0040F793                 xor     ecx, ecx
.text:0040F795                 call    sub_40E5A2
.text:0040F79A
.text:0040F79A loc_40F79A:                             ; CODE XREF: sub_40F694+CF↑j
.text:0040F79A                 mov     esi, dword_414F14
.text:0040F7A0                 xor     edi, edi
.text:0040F7A2                 jmp     short loc_40F7D6
.text:0040F7A4 ; ---------------------------------------------------------------------------
.text:0040F7A4
.text:0040F7A4 loc_40F7A4:                             ; CODE XREF: sub_40F694+148↓j
.text:0040F7A4                 cmp     dword ptr [esi+34h], 0
.text:0040F7A8                 jz      short loc_40F7D4
.text:0040F7AA                 cmp     dword ptr [esi+0Ch], 0
.text:0040F7AE                 jz      short loc_40F7D4
.text:0040F7B0                 test    ebx, ebx
.text:0040F7B2                 jz      short loc_40F7BA
.text:0040F7B4                 cmp     dword ptr [esi+48h], 0
.text:0040F7B8                 jz      short loc_40F7D4
.text:0040F7BA
.text:0040F7BA loc_40F7BA:                             ; CODE XREF: sub_40F694+11E↑j
.text:0040F7BA                 test    edi, edi
.text:0040F7BC                 jnz     short loc_40F7CC
.text:0040F7BE                 push    3C36h           ; uID
.text:0040F7C3                 push    edi             ; int
.text:0040F7C4                 call    sub_40E7F8
.text:0040F7C9                 pop     ecx
.text:0040F7CA                 pop     ecx
.text:0040F7CB                 inc     edi
.text:0040F7CC
.text:0040F7CC loc_40F7CC:                             ; CODE XREF: sub_40F694+128↑j
.text:0040F7CC                 mov     ecx, [esi+0Ch]  ; uID
.text:0040F7CF                 call    sub_40F4B2
.text:0040F7D4
.text:0040F7D4 loc_40F7D4:                             ; CODE XREF: sub_40F694+114↑j
.text:0040F7D4                                         ; sub_40F694+11A↑j ...
.text:0040F7D4                 mov     esi, [esi]
.text:0040F7D6
.text:0040F7D6 loc_40F7D6:                             ; CODE XREF: sub_40F694+10E↑j
.text:0040F7D6                 cmp     esi, offset dword_414F14
.text:0040F7DC                 jnz     short loc_40F7A4
.text:0040F7DE                 pop     edi
.text:0040F7DF                 pop     esi
.text:0040F7E0                 pop     ebx
.text:0040F7E1                 mov     esp, ebp
.text:0040F7E3                 pop     ebp
.text:0040F7E4                 retn
.text:0040F7E4 sub_40F694      endp
.text:0040F7E4
.text:0040F7E5
.text:0040F7E5 ; =============== S U B R O U T I N E =======================================
.text:0040F7E5
.text:0040F7E5 ; Attributes: bp-based frame
.text:0040F7E5
.text:0040F7E5 sub_40F7E5      proc near               ; CODE XREF: sub_40FCFE+28↓p
.text:0040F7E5
.text:0040F7E5 var_4           = dword ptr -4
.text:0040F7E5
.text:0040F7E5                 mov     edi, edi
.text:0040F7E7                 push    ebp
.text:0040F7E8                 mov     ebp, esp
.text:0040F7EA                 push    ecx
.text:0040F7EB                 push    ebx
.text:0040F7EC                 push    esi
.text:0040F7ED                 mov     esi, dword_414F14
.text:0040F7F3                 mov     edx, ecx
.text:0040F7F5                 push    edi
.text:0040F7F6                 mov     eax, esi
.text:0040F7F8                 mov     [ebp+var_4], edx
.text:0040F7FB                 mov     ecx, offset dword_414F14
.text:0040F800                 xor     edi, edi
.text:0040F802                 cmp     eax, ecx
.text:0040F804                 jz      loc_40F8BC
.text:0040F80A
.text:0040F80A loc_40F80A:                             ; CODE XREF: sub_40F7E5+3A↓j
.text:0040F80A                 cmp     dword ptr [eax+48h], 0
.text:0040F80E                 jz      short loc_40F81B
.text:0040F810                 cmp     edx, [eax+44h]
.text:0040F813                 jnz     short loc_40F81B
.text:0040F815                 test    edi, edi
.text:0040F817                 jnz     short loc_40F860
.text:0040F819                 mov     edi, eax
.text:0040F81B
.text:0040F81B loc_40F81B:                             ; CODE XREF: sub_40F7E5+29↑j
.text:0040F81B                                         ; sub_40F7E5+2E↑j
.text:0040F81B                 mov     eax, [eax]
.text:0040F81D                 cmp     eax, ecx
.text:0040F81F                 jnz     short loc_40F80A
.text:0040F821                 test    edi, edi
.text:0040F823                 jz      loc_40F8BC
.text:0040F829                 xor     edx, edx
.text:0040F82B                 mov     ecx, edi
.text:0040F82D                 call    sub_40F3C0
.text:0040F832                 mov     eax, dword_414F14
.text:0040F837                 mov     edx, offset dword_414F14
.text:0040F83C                 cmp     eax, edx
.text:0040F83E                 jz      short loc_40F856
.text:0040F840                 mov     ecx, [ebp+var_4]
.text:0040F843
.text:0040F843 loc_40F843:                             ; CODE XREF: sub_40F7E5+6F↓j
.text:0040F843                 cmp     ecx, [eax+44h]
.text:0040F846                 jnz     short loc_40F850
.text:0040F848                 cmp     eax, edi
.text:0040F84A                 jz      short loc_40F850
.text:0040F84C                 and     dword ptr [eax+38h], 0
.text:0040F850
.text:0040F850 loc_40F850:                             ; CODE XREF: sub_40F7E5+61↑j
.text:0040F850                                         ; sub_40F7E5+65↑j
.text:0040F850                 mov     eax, [eax]
.text:0040F852                 cmp     eax, edx
.text:0040F854                 jnz     short loc_40F843
.text:0040F856
.text:0040F856 loc_40F856:                             ; CODE XREF: sub_40F7E5+59↑j
.text:0040F856                 mov     edx, offset asc_4034A0 ; " "
.text:0040F85B                 jmp     loc_40F928
.text:0040F860 ; ---------------------------------------------------------------------------
.text:0040F860
.text:0040F860 loc_40F860:                             ; CODE XREF: sub_40F7E5+32↑j
.text:0040F860                 xor     edi, edi
.text:0040F862                 xor     ebx, ebx
.text:0040F864                 inc     edi
.text:0040F865                 cmp     esi, ecx
.text:0040F867                 jz      loc_40F92F
.text:0040F86D
.text:0040F86D loc_40F86D:                             ; CODE XREF: sub_40F7E5+D3↓j
.text:0040F86D                 cmp     edx, [esi+44h]
.text:0040F870                 jnz     short loc_40F8B4
.text:0040F872                 cmp     dword ptr [esi+48h], 0
.text:0040F876                 jnz     short loc_40F87E
.text:0040F878                 and     dword ptr [esi+38h], 0
.text:0040F87C                 jmp     short loc_40F8B4
.text:0040F87E ; ---------------------------------------------------------------------------
.text:0040F87E
.text:0040F87E loc_40F87E:                             ; CODE XREF: sub_40F7E5+91↑j
.text:0040F87E                 test    edi, edi
.text:0040F880                 jz      short loc_40F897
.text:0040F882                 mov     ebx, [esi+40h]
.text:0040F885                 xor     edi, edi
.text:0040F887                 mov     edx, offset asc_403704 ; "<"
.text:0040F88C                 test    ebx, ebx
.text:0040F88E                 jnz     short loc_40F89C
.text:0040F890                 mov     edx, offset asc_403684 ; "["
.text:0040F895                 jmp     short loc_40F89C
.text:0040F897 ; ---------------------------------------------------------------------------
.text:0040F897
.text:0040F897 loc_40F897:                             ; CODE XREF: sub_40F7E5+9B↑j
.text:0040F897                 mov     edx, offset asc_403708 ; "|"
.text:0040F89C
.text:0040F89C loc_40F89C:                             ; CODE XREF: sub_40F7E5+A9↑j
.text:0040F89C                                         ; sub_40F7E5+B0↑j
.text:0040F89C                 xor     ecx, ecx
.text:0040F89E                 call    sub_40E5A2
.text:0040F8A3                 xor     edx, edx
.text:0040F8A5                 mov     ecx, esi
.text:0040F8A7                 call    sub_40F3C0
.text:0040F8AC                 mov     edx, [ebp+var_4]
.text:0040F8AF                 mov     ecx, offset dword_414F14
.text:0040F8B4
.text:0040F8B4 loc_40F8B4:                             ; CODE XREF: sub_40F7E5+8B↑j
.text:0040F8B4                                         ; sub_40F7E5+97↑j
.text:0040F8B4                 mov     esi, [esi]
.text:0040F8B6                 cmp     esi, ecx
.text:0040F8B8                 jnz     short loc_40F86D
.text:0040F8BA                 jmp     short loc_40F916
.text:0040F8BC ; ---------------------------------------------------------------------------
.text:0040F8BC
.text:0040F8BC loc_40F8BC:                             ; CODE XREF: sub_40F7E5+1F↑j
.text:0040F8BC                                         ; sub_40F7E5+3E↑j
.text:0040F8BC                 xor     edi, edi
.text:0040F8BE                 xor     ebx, ebx
.text:0040F8C0                 inc     edi
.text:0040F8C1                 cmp     esi, ecx
.text:0040F8C3                 jz      short loc_40F92F
.text:0040F8C5
.text:0040F8C5 loc_40F8C5:                             ; CODE XREF: sub_40F7E5+12F↓j
.text:0040F8C5                 mov     ecx, esi
.text:0040F8C7                 call    sub_40F3AF
.text:0040F8CC                 test    eax, eax
.text:0040F8CE                 jz      short loc_40F90C
.text:0040F8D0                 cmp     dword ptr [esi+38h], 0
.text:0040F8D4                 jz      short loc_40F90C
.text:0040F8D6                 cmp     edx, [esi+44h]
.text:0040F8D9                 jnz     short loc_40F90C
.text:0040F8DB                 test    edi, edi
.text:0040F8DD                 jz      short loc_40F8F4
.text:0040F8DF                 mov     ebx, [esi+40h]
.text:0040F8E2                 xor     edi, edi
.text:0040F8E4                 mov     edx, offset asc_403704 ; "<"
.text:0040F8E9                 test    ebx, ebx
.text:0040F8EB                 jnz     short loc_40F8F9
.text:0040F8ED                 mov     edx, offset asc_403684 ; "["
.text:0040F8F2                 jmp     short loc_40F8F9
.text:0040F8F4 ; ---------------------------------------------------------------------------
.text:0040F8F4
.text:0040F8F4 loc_40F8F4:                             ; CODE XREF: sub_40F7E5+F8↑j
.text:0040F8F4                 mov     edx, offset asc_403708 ; "|"
.text:0040F8F9
.text:0040F8F9 loc_40F8F9:                             ; CODE XREF: sub_40F7E5+106↑j
.text:0040F8F9                                         ; sub_40F7E5+10D↑j
.text:0040F8F9                 xor     ecx, ecx
.text:0040F8FB                 call    sub_40E5A2
.text:0040F900                 xor     edx, edx
.text:0040F902                 mov     ecx, esi
.text:0040F904                 call    sub_40F3C0
.text:0040F909                 mov     edx, [ebp+var_4]
.text:0040F90C
.text:0040F90C loc_40F90C:                             ; CODE XREF: sub_40F7E5+E9↑j
.text:0040F90C                                         ; sub_40F7E5+EF↑j ...
.text:0040F90C                 mov     esi, [esi]
.text:0040F90E                 cmp     esi, offset dword_414F14
.text:0040F914                 jnz     short loc_40F8C5
.text:0040F916
.text:0040F916 loc_40F916:                             ; CODE XREF: sub_40F7E5+D5↑j
.text:0040F916                 test    edi, edi
.text:0040F918                 jnz     short loc_40F92F
.text:0040F91A                 mov     edx, offset asc_40370C ; "> "
.text:0040F91F                 test    ebx, ebx
.text:0040F921                 jnz     short loc_40F928
.text:0040F923                 mov     edx, offset asc_403714 ; "] "
.text:0040F928
.text:0040F928 loc_40F928:                             ; CODE XREF: sub_40F7E5+76↑j
.text:0040F928                                         ; sub_40F7E5+13C↑j
.text:0040F928                 xor     ecx, ecx
.text:0040F92A                 call    sub_40E5A2
.text:0040F92F
.text:0040F92F loc_40F92F:                             ; CODE XREF: sub_40F7E5+82↑j
.text:0040F92F                                         ; sub_40F7E5+DE↑j ...
.text:0040F92F                 pop     edi
.text:0040F930                 pop     esi
.text:0040F931                 pop     ebx
.text:0040F932                 mov     esp, ebp
.text:0040F934                 pop     ebp
.text:0040F935                 retn
.text:0040F935 sub_40F7E5      endp
.text:0040F935
.text:0040F936
.text:0040F936 ; =============== S U B R O U T I N E =======================================
.text:0040F936
.text:0040F936 ; Attributes: bp-based frame info_from_lumina
.text:0040F936
.text:0040F936 ; int __stdcall ArgpPrintVersion()
.text:0040F936 ?ArgpPrintVersion@@YGJXZ proc near      ; CODE XREF: sub_40FCFE+6↓p
.text:0040F936
.text:0040F936 var_38          = dword ptr -38h
.text:0040F936 var_34          = dword ptr -34h
.text:0040F936 lpBuffer        = dword ptr -30h
.text:0040F936 lpSubBlock      = dword ptr -2Ch
.text:0040F936 dwLen           = dword ptr -28h
.text:0040F936 var_24          = byte ptr -24h
.text:0040F936 var_4           = dword ptr -4
.text:0040F936
.text:0040F936                 mov     edi, edi
.text:0040F938                 push    ebp
.text:0040F939                 mov     ebp, esp
.text:0040F93B                 sub     esp, 38h
.text:0040F93E                 mov     eax, ___security_cookie
.text:0040F943                 xor     eax, ebp
.text:0040F945                 mov     [ebp+var_4], eax
.text:0040F948                 push    esi
.text:0040F949                 push    edi             ; cchToCopy
.text:0040F94A                 xor     esi, esi
.text:0040F94C                 push    400h            ; dwBytes
.text:0040F951                 push    esi             ; dwFlags
.text:0040F952                 mov     [ebp+dwLen], esi
.text:0040F955                 mov     edi, esi
.text:0040F957                 mov     [ebp+lpBuffer], esi
.text:0040F95A                 mov     [ebp+var_34], esi
.text:0040F95D                 mov     [ebp+var_38], esi
.text:0040F960                 call    ds:GetProcessHeap
.text:0040F966                 push    eax             ; hHeap
.text:0040F967                 call    ds:HeapAlloc
.text:0040F96D                 mov     [ebp+lpSubBlock], eax
.text:0040F970                 test    eax, eax
.text:0040F972                 jnz     short loc_40F97E
.text:0040F974                 mov     esi, 8007000Eh
.text:0040F979                 jmp     loc_40FB52
.text:0040F97E ; ---------------------------------------------------------------------------
.text:0040F97E
.text:0040F97E loc_40F97E:                             ; CODE XREF: ArgpPrintVersion(void)+3C↑j
.text:0040F97E                 push    ebx             ; pszSrc
.text:0040F97F                 push    800h            ; dwBytes
.text:0040F984                 xor     ecx, ecx
.text:0040F986                 push    esi             ; dwFlags
.text:0040F987                 mov     [eax], cx
.text:0040F98A                 call    ds:GetProcessHeap
.text:0040F990                 push    eax             ; hHeap
.text:0040F991                 call    ds:HeapAlloc
.text:0040F997                 mov     ebx, eax
.text:0040F999                 test    ebx, ebx
.text:0040F99B                 jnz     short loc_40F9A7
.text:0040F99D
.text:0040F99D loc_40F99D:                             ; CODE XREF: ArgpPrintVersion(void)+E0↓j
.text:0040F99D                 mov     esi, 8007000Eh
.text:0040F9A2                 jmp     loc_40FB17
.text:0040F9A7 ; ---------------------------------------------------------------------------
.text:0040F9A7
.text:0040F9A7 loc_40F9A7:                             ; CODE XREF: ArgpPrintVersion(void)+65↑j
.text:0040F9A7                 push    400h            ; nSize
.text:0040F9AC                 push    ebx             ; lpFilename
.text:0040F9AD                 xor     eax, eax
.text:0040F9AF                 push    esi             ; hModule
.text:0040F9B0                 mov     [ebx], ax
.text:0040F9B3                 call    ds:GetModuleFileNameW
.text:0040F9B9                 test    eax, eax
.text:0040F9BB                 jz      short loc_40F9EC
.text:0040F9BD                 push    ecx             ; pcchNewDestLength
.text:0040F9BE                 push    offset aMicrosoft ; "Microsoft ®"
.text:0040F9C3                 push    ecx             ; pszDest
.text:0040F9C4                 push    10h
.text:0040F9C6                 pop     edx
.text:0040F9C7                 lea     ecx, [ebp+var_24]
.text:0040F9CA                 call    StringCopyWorkerW
.text:0040F9CF                 mov     esi, eax
.text:0040F9D1                 test    esi, esi
.text:0040F9D3                 js      loc_40FB17
.text:0040F9D9                 xor     esi, esi
.text:0040F9DB                 push    esi             ; lpdwHandle
.text:0040F9DC                 push    ebx             ; lpwstrFilename
.text:0040F9DD                 push    2               ; dwFlags
.text:0040F9DF                 call    ds:GetFileVersionInfoSizeExW
.text:0040F9E5                 mov     [ebp+dwLen], eax
.text:0040F9E8                 test    eax, eax
.text:0040F9EA                 jnz     short loc_40FA02
.text:0040F9EC
.text:0040F9EC loc_40F9EC:                             ; CODE XREF: ArgpPrintVersion(void)+85↑j
.text:0040F9EC                 call    ds:GetLastError
.text:0040F9F2                 mov     esi, eax
.text:0040F9F4                 test    esi, esi
.text:0040F9F6                 jnz     short loc_40FA34
.text:0040F9F8                 mov     esi, 80004005h
.text:0040F9FD                 jmp     loc_40FB17
.text:0040FA02 ; ---------------------------------------------------------------------------
.text:0040FA02
.text:0040FA02 loc_40FA02:                             ; CODE XREF: ArgpPrintVersion(void)+B4↑j
.text:0040FA02                 push    eax             ; dwBytes
.text:0040FA03                 push    8               ; dwFlags
.text:0040FA05                 call    ds:GetProcessHeap
.text:0040FA0B                 push    eax             ; hHeap
.text:0040FA0C                 call    ds:HeapAlloc
.text:0040FA12                 mov     edi, eax
.text:0040FA14                 test    edi, edi
.text:0040FA16                 jz      short loc_40F99D
.text:0040FA18                 push    edi             ; lpData
.text:0040FA19                 push    [ebp+dwLen]     ; dwLen
.text:0040FA1C                 push    esi             ; dwHandle
.text:0040FA1D                 push    ebx             ; lpwstrFilename
.text:0040FA1E                 push    2               ; dwFlags
.text:0040FA20                 call    ds:GetFileVersionInfoExW
.text:0040FA26                 test    eax, eax
.text:0040FA28                 jnz     short loc_40FA48
.text:0040FA2A                 call    ds:GetLastError
.text:0040FA30                 mov     esi, eax
.text:0040FA32                 test    esi, esi
.text:0040FA34
.text:0040FA34 loc_40FA34:                             ; CODE XREF: ArgpPrintVersion(void)+C0↑j
.text:0040FA34                 jle     loc_40FB17
.text:0040FA3A                 movzx   esi, si
.text:0040FA3D                 or      esi, 80070000h
.text:0040FA43                 jmp     loc_40FB17
.text:0040FA48 ; ---------------------------------------------------------------------------
.text:0040FA48
.text:0040FA48 loc_40FA48:                             ; CODE XREF: ArgpPrintVersion(void)+F2↑j
.text:0040FA48                 lea     eax, [ebp+dwLen]
.text:0040FA4B                 mov     [ebp+dwLen], esi
.text:0040FA4E                 push    eax             ; puLen
.text:0040FA4F                 lea     eax, [ebp+lpBuffer]
.text:0040FA52                 push    eax             ; lplpBuffer
.text:0040FA53                 push    offset SubBlock ; "\\VarFileInfo\\Translation"
.text:0040FA58                 push    edi             ; pBlock
.text:0040FA59                 call    ds:VerQueryValueW
.text:0040FA5F                 mov     ecx, [ebp+lpBuffer]
.text:0040FA62                 test    ecx, ecx
.text:0040FA64                 jnz     short loc_40FA70
.text:0040FA66
.text:0040FA66 loc_40FA66:                             ; CODE XREF: ArgpPrintVersion(void)+17E↓j
.text:0040FA66                                         ; ArgpPrintVersion(void)+1C4↓j
.text:0040FA66                 mov     esi, 80004004h
.text:0040FA6B                 jmp     loc_40FB17
.text:0040FA70 ; ---------------------------------------------------------------------------
.text:0040FA70
.text:0040FA70 loc_40FA70:                             ; CODE XREF: ArgpPrintVersion(void)+12E↑j
.text:0040FA70                 movzx   eax, word ptr [ecx+2]
.text:0040FA74                 push    offset aProductversion ; "ProductVersion"
.text:0040FA79                 push    eax
.text:0040FA7A                 movzx   eax, word ptr [ecx]
.text:0040FA7D                 push    eax             ; Args
.text:0040FA7E                 push    offset aStringfileinfo ; "\\StringFileInfo\\%04x%04x\\%s"
.text:0040FA83                 push    200h            ; cchDest
.text:0040FA88                 push    [ebp+lpSubBlock] ; pszDest
.text:0040FA8B                 call    ?StringCchPrintfW@@YAJPAGIPBGZZ_0 ; StringCchPrintfW(ushort *,uint,ushort const *,...)
.text:0040FA90                 mov     esi, eax
.text:0040FA92                 add     esp, 18h
.text:0040FA95                 test    esi, esi
.text:0040FA97                 js      short loc_40FB17
.text:0040FA99                 mov     esi, [ebp+lpSubBlock]
.text:0040FA9C                 lea     eax, [ebp+dwLen]
.text:0040FA9F                 and     [ebp+dwLen], 0
.text:0040FAA3                 push    eax             ; puLen
.text:0040FAA4                 lea     eax, [ebp+var_34]
.text:0040FAA7                 push    eax             ; lplpBuffer
.text:0040FAA8                 push    esi             ; lpSubBlock
.text:0040FAA9                 push    edi             ; pBlock
.text:0040FAAA                 call    ds:VerQueryValueW
.text:0040FAB0                 cmp     [ebp+var_34], 0
.text:0040FAB4                 jz      short loc_40FA66
.text:0040FAB6                 mov     ecx, [ebp+lpBuffer]
.text:0040FAB9                 push    offset aOriginalfilena ; "OriginalFilename"
.text:0040FABE                 movzx   eax, word ptr [ecx+2]
.text:0040FAC2                 push    eax
.text:0040FAC3                 movzx   eax, word ptr [ecx]
.text:0040FAC6                 push    eax             ; Args
.text:0040FAC7                 push    offset aStringfileinfo ; "\\StringFileInfo\\%04x%04x\\%s"
.text:0040FACC                 push    200h            ; cchDest
.text:0040FAD1                 push    esi             ; pszDest
.text:0040FAD2                 call    ?StringCchPrintfW@@YAJPAGIPBGZZ_0 ; StringCchPrintfW(ushort *,uint,ushort const *,...)
.text:0040FAD7                 mov     esi, eax
.text:0040FAD9                 add     esp, 18h
.text:0040FADC                 test    esi, esi
.text:0040FADE                 js      short loc_40FB17
.text:0040FAE0                 and     [ebp+dwLen], 0
.text:0040FAE4                 lea     eax, [ebp+dwLen]
.text:0040FAE7                 push    eax             ; puLen
.text:0040FAE8                 lea     eax, [ebp+var_38]
.text:0040FAEB                 push    eax             ; lplpBuffer
.text:0040FAEC                 push    [ebp+lpSubBlock] ; lpSubBlock
.text:0040FAEF                 push    edi             ; pBlock
.text:0040FAF0                 call    ds:VerQueryValueW
.text:0040FAF6                 cmp     [ebp+var_38], 0
.text:0040FAFA                 jz      loc_40FA66
.text:0040FB00                 push    [ebp+var_34]
.text:0040FB03                 lea     eax, [ebp+var_24]
.text:0040FB06                 push    [ebp+var_38]
.text:0040FB09                 push    eax             ; char
.text:0040FB0A                 push    offset a1S2S3S  ; "\n%1!s! %2!s! (%3!s!)\n\n"
.text:0040FB0F                 call    sub_40E7E4
.text:0040FB14                 add     esp, 10h
.text:0040FB17
.text:0040FB17 loc_40FB17:                             ; CODE XREF: ArgpPrintVersion(void)+6C↑j
.text:0040FB17                                         ; ArgpPrintVersion(void)+9D↑j ...
.text:0040FB17                 push    [ebp+lpSubBlock] ; lpMem
.text:0040FB1A                 push    0               ; dwFlags
.text:0040FB1C                 call    ds:GetProcessHeap
.text:0040FB22                 push    eax             ; hHeap
.text:0040FB23                 call    ds:HeapFree
.text:0040FB29                 test    ebx, ebx
.text:0040FB2B                 jz      short loc_40FB3D
.text:0040FB2D                 push    ebx             ; lpMem
.text:0040FB2E                 push    0               ; dwFlags
.text:0040FB30                 call    ds:GetProcessHeap
.text:0040FB36                 push    eax             ; hHeap
.text:0040FB37                 call    ds:HeapFree
.text:0040FB3D
.text:0040FB3D loc_40FB3D:                             ; CODE XREF: ArgpPrintVersion(void)+1F5↑j
.text:0040FB3D                 pop     ebx
.text:0040FB3E                 test    edi, edi
.text:0040FB40                 jz      short loc_40FB52
.text:0040FB42                 push    edi             ; lpMem
.text:0040FB43                 push    0               ; dwFlags
.text:0040FB45                 call    ds:GetProcessHeap
.text:0040FB4B                 push    eax             ; hHeap
.text:0040FB4C                 call    ds:HeapFree
.text:0040FB52
.text:0040FB52 loc_40FB52:                             ; CODE XREF: ArgpPrintVersion(void)+43↑j
.text:0040FB52                                         ; ArgpPrintVersion(void)+20A↑j
.text:0040FB52                 mov     ecx, [ebp+var_4]
.text:0040FB55                 mov     eax, esi
.text:0040FB57                 pop     edi
.text:0040FB58                 xor     ecx, ebp        ; StackCookie
.text:0040FB5A                 pop     esi
.text:0040FB5B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040FB60                 mov     esp, ebp
.text:0040FB62                 pop     ebp
.text:0040FB63                 retn
.text:0040FB63 ?ArgpPrintVersion@@YGJXZ endp ; sp-analysis failed
.text:0040FB63
.text:0040FB64
.text:0040FB64 ; =============== S U B R O U T I N E =======================================
.text:0040FB64
.text:0040FB64 ; Attributes: bp-based frame
.text:0040FB64
.text:0040FB64 sub_40FB64      proc near               ; CODE XREF: sub_40FF6D+10C↓p
.text:0040FB64
.text:0040FB64 dateIn          = qword ptr -34h
.text:0040FB64 pvtime          = qword ptr -10h
.text:0040FB64 pbstrOut        = dword ptr -4
.text:0040FB64
.text:0040FB64                 mov     edi, edi
.text:0040FB66                 push    ebp
.text:0040FB67                 mov     ebp, esp
.text:0040FB69                 sub     esp, 14h
.text:0040FB6C                 push    ebx
.text:0040FB6D                 push    esi
.text:0040FB6E                 xor     ebx, ebx
.text:0040FB70                 mov     edx, offset asc_403204 ; "\n"
.text:0040FB75                 push    edi
.text:0040FB76                 xor     ecx, ecx
.text:0040FB78                 mov     [ebp+pbstrOut], ebx
.text:0040FB7B                 call    sub_40E5A2
.text:0040FB80                 mov     esi, dword_414F14
.text:0040FB86                 jmp     loc_40FCD6
.text:0040FB8B ; ---------------------------------------------------------------------------
.text:0040FB8B
.text:0040FB8B loc_40FB8B:                             ; CODE XREF: sub_40FB64+178↓j
.text:0040FB8B                 cmp     [esi+48h], ebx
.text:0040FB8E                 jz      loc_40FCD4
.text:0040FB94                 mov     eax, [esi+28h]
.text:0040FB97                 test    eax, eax
.text:0040FB99                 jnz     short loc_40FBA0
.text:0040FB9B                 mov     eax, offset ppszDestEnd
.text:0040FBA0
.text:0040FBA0 loc_40FBA0:                             ; CODE XREF: sub_40FB64+35↑j
.text:0040FBA0                 push    eax
.text:0040FBA1                 push    dword ptr [esi+24h] ; char
.text:0040FBA4                 push    offset a116s26s ; "%1!-16s! %2!-6s! = "
.text:0040FBA9                 call    sub_40E7E4
.text:0040FBAE                 mov     eax, [esi+1Ch]
.text:0040FBB1                 add     esp, 0Ch
.text:0040FBB4                 sub     eax, ebx
.text:0040FBB6                 jz      loc_40FCA7
.text:0040FBBC                 sub     eax, 1
.text:0040FBBF                 jz      loc_40FCA2
.text:0040FBC5                 sub     eax, 1
.text:0040FBC8                 jz      short loc_40FC41
.text:0040FBCA                 sub     eax, 1
.text:0040FBCD                 jz      short loc_40FC20
.text:0040FBCF                 sub     eax, 1
.text:0040FBD2                 jz      short loc_40FBEA
.text:0040FBD4                 sub     eax, 1
.text:0040FBD7                 jnz     loc_40FCC8
.text:0040FBDD                 push    dword ptr [esi+5Ch]
.text:0040FBE0                 push    offset a1D      ; "%1!d!"
.text:0040FBE5                 jmp     loc_40FCC1
.text:0040FBEA ; ---------------------------------------------------------------------------
.text:0040FBEA
.text:0040FBEA loc_40FBEA:                             ; CODE XREF: sub_40FB64+6E↑j
.text:0040FBEA                 lea     eax, [ebp+pvtime]
.text:0040FBED                 push    eax             ; pvtime
.text:0040FBEE                 lea     eax, [esi+5Ch]
.text:0040FBF1                 push    eax             ; lpSystemTime
.text:0040FBF2                 call    ds:SystemTimeToVariantTime
.text:0040FBF8                 fld     [ebp+pvtime]
.text:0040FBFB                 lea     eax, [ebp+pbstrOut]
.text:0040FBFE                 push    eax             ; pbstrOut
.text:0040FBFF                 push    ebx             ; dwFlags
.text:0040FC00                 push    400h            ; lcid
.text:0040FC05                 push    ecx
.text:0040FC06                 push    ecx
.text:0040FC07                 fstp    [esp+34h+dateIn] ; dateIn
.text:0040FC0A                 call    ds:VarBstrFromDate
.text:0040FC10                 test    eax, eax
.text:0040FC12                 js      loc_40FCEE
.text:0040FC18                 push    [ebp+pbstrOut]
.text:0040FC1B                 jmp     loc_40FCBC
.text:0040FC20 ; ---------------------------------------------------------------------------
.text:0040FC20
.text:0040FC20 loc_40FC20:                             ; CODE XREF: sub_40FB64+69↑j
.text:0040FC20                 movzx   eax, word ptr [esi+68h]
.text:0040FC24                 push    eax
.text:0040FC25                 movzx   eax, word ptr [esi+66h]
.text:0040FC29                 push    eax
.text:0040FC2A                 movzx   eax, word ptr [esi+64h]
.text:0040FC2E                 push    eax             ; char
.text:0040FC2F                 push    offset a102d202d302d ; "%1!02d!:%2!02d!:%3!02d!"
.text:0040FC34                 call    sub_40E7E4
.text:0040FC39                 add     esp, 10h
.text:0040FC3C                 jmp     loc_40FCC8
.text:0040FC41 ; ---------------------------------------------------------------------------
.text:0040FC41
.text:0040FC41 loc_40FC41:                             ; CODE XREF: sub_40FB64+64↑j
.text:0040FC41                 mov     edi, [esi+5Ch]
.text:0040FC44                 test    edi, edi
.text:0040FC46                 jz      short loc_40FC96
.text:0040FC48                 xor     eax, eax
.text:0040FC4A                 cmp     ax, [edi]
.text:0040FC4D                 jz      short loc_40FC96
.text:0040FC4F
.text:0040FC4F loc_40FC4F:                             ; CODE XREF: sub_40FB64+12E↓j
.text:0040FC4F                 push    edi             ; char
.text:0040FC50                 cmp     edi, [esi+5Ch]
.text:0040FC53                 jnz     short loc_40FC63
.text:0040FC55                 push    offset a120s    ; "%1!-20s!"
.text:0040FC5A                 call    sub_40E7E4
.text:0040FC5F                 pop     ecx
.text:0040FC60                 pop     ecx
.text:0040FC61                 jmp     short loc_40FC75
.text:0040FC63 ; ---------------------------------------------------------------------------
.text:0040FC63
.text:0040FC63 loc_40FC63:                             ; CODE XREF: sub_40FB64+EF↑j
.text:0040FC63                 push    offset asc_4034A0 ; " "
.text:0040FC68                 push    offset a126s220s ; "\n%1!26s!%2!-20s!"
.text:0040FC6D                 call    sub_40E7E4
.text:0040FC72                 add     esp, 0Ch
.text:0040FC75
.text:0040FC75 loc_40FC75:                             ; CODE XREF: sub_40FB64+FD↑j
.text:0040FC75                 mov     ecx, edi
.text:0040FC77                 lea     edx, [ecx+2]
.text:0040FC7A
.text:0040FC7A loc_40FC7A:                             ; CODE XREF: sub_40FB64+11F↓j
.text:0040FC7A                 mov     ax, [ecx]
.text:0040FC7D                 add     ecx, 2
.text:0040FC80                 cmp     ax, bx
.text:0040FC83                 jnz     short loc_40FC7A
.text:0040FC85                 sub     ecx, edx
.text:0040FC87                 sar     ecx, 1
.text:0040FC89                 lea     edi, [edi+ecx*2]
.text:0040FC8C                 add     edi, 2
.text:0040FC8F                 cmp     [edi], bx
.text:0040FC92                 jnz     short loc_40FC4F
.text:0040FC94                 jmp     short loc_40FCC8
.text:0040FC96 ; ---------------------------------------------------------------------------
.text:0040FC96
.text:0040FC96 loc_40FC96:                             ; CODE XREF: sub_40FB64+E2↑j
.text:0040FC96                                         ; sub_40FB64+E9↑j
.text:0040FC96                 push    offset asc_403344 ; "-"
.text:0040FC9B                 call    sub_40E7E4
.text:0040FCA0                 jmp     short loc_40FCC7
.text:0040FCA2 ; ---------------------------------------------------------------------------
.text:0040FCA2
.text:0040FCA2 loc_40FCA2:                             ; CODE XREF: sub_40FB64+5B↑j
.text:0040FCA2                 push    dword ptr [esi+5Ch]
.text:0040FCA5                 jmp     short loc_40FCBC
.text:0040FCA7 ; ---------------------------------------------------------------------------
.text:0040FCA7
.text:0040FCA7 loc_40FCA7:                             ; CODE XREF: sub_40FB64+52↑j
.text:0040FCA7                 cmp     [esi+48h], ebx
.text:0040FCAA                 jz      short loc_40FCB6
.text:0040FCAC                 mov     eax, offset aTrue ; "TRUE"
.text:0040FCB1                 cmp     [esi+4Ch], ebx
.text:0040FCB4                 jz      short loc_40FCBB
.text:0040FCB6
.text:0040FCB6 loc_40FCB6:                             ; CODE XREF: sub_40FB64+146↑j
.text:0040FCB6                 mov     eax, offset off_403848
.text:0040FCBB
.text:0040FCBB loc_40FCBB:                             ; CODE XREF: sub_40FB64+150↑j
.text:0040FCBB                 push    eax             ; char
.text:0040FCBC
.text:0040FCBC loc_40FCBC:                             ; CODE XREF: sub_40FB64+B7↑j
.text:0040FCBC                                         ; sub_40FB64+141↑j
.text:0040FCBC                 push    offset a1S_0    ; "%1!s!"
.text:0040FCC1
.text:0040FCC1 loc_40FCC1:                             ; CODE XREF: sub_40FB64+81↑j
.text:0040FCC1                 call    sub_40E7E4
.text:0040FCC6                 pop     ecx
.text:0040FCC7
.text:0040FCC7 loc_40FCC7:                             ; CODE XREF: sub_40FB64+13C↑j
.text:0040FCC7                 pop     ecx
.text:0040FCC8
.text:0040FCC8 loc_40FCC8:                             ; CODE XREF: sub_40FB64+73↑j
.text:0040FCC8                                         ; sub_40FB64+D8↑j ...
.text:0040FCC8                 mov     edx, offset asc_403204 ; "\n"
.text:0040FCCD                 xor     ecx, ecx
.text:0040FCCF                 call    sub_40E5A2
.text:0040FCD4
.text:0040FCD4 loc_40FCD4:                             ; CODE XREF: sub_40FB64+2A↑j
.text:0040FCD4                 mov     esi, [esi]
.text:0040FCD6
.text:0040FCD6 loc_40FCD6:                             ; CODE XREF: sub_40FB64+22↑j
.text:0040FCD6                 cmp     esi, offset dword_414F14
.text:0040FCDC                 jnz     loc_40FB8B
.text:0040FCE2                 mov     edx, offset asc_403204 ; "\n"
.text:0040FCE7                 xor     ecx, ecx
.text:0040FCE9                 call    sub_40E5A2
.text:0040FCEE
.text:0040FCEE loc_40FCEE:                             ; CODE XREF: sub_40FB64+AE↑j
.text:0040FCEE                 push    [ebp+pbstrOut]  ; bstrString
.text:0040FCF1                 call    ds:SysFreeString
.text:0040FCF7                 pop     edi
.text:0040FCF8                 pop     esi
.text:0040FCF9                 pop     ebx
.text:0040FCFA                 mov     esp, ebp
.text:0040FCFC                 pop     ebp
.text:0040FCFD                 retn
.text:0040FCFD sub_40FB64      endp
.text:0040FCFD
.text:0040FCFE
.text:0040FCFE ; =============== S U B R O U T I N E =======================================
.text:0040FCFE
.text:0040FCFE
.text:0040FCFE ; int __fastcall sub_40FCFE(char)
.text:0040FCFE sub_40FCFE      proc near               ; CODE XREF: sub_40FD8A+58↓p
.text:0040FCFE                 mov     edi, edi
.text:0040FD00                 push    ebx
.text:0040FD01                 push    esi
.text:0040FD02                 mov     esi, ecx
.text:0040FD04                 call    ?ArgpPrintVersion@@YGJXZ ; ArgpPrintVersion(void)
.text:0040FD09                 push    esi             ; char
.text:0040FD0A                 push    3C2Fh           ; uID
.text:0040FD0F                 push    0               ; int
.text:0040FD11                 call    sub_40E7F8
.text:0040FD16                 xor     esi, esi
.text:0040FD18                 add     esp, 0Ch
.text:0040FD1B                 inc     esi
.text:0040FD1C                 cmp     dword_41500C, esi
.text:0040FD22                 jb      short loc_40FD34
.text:0040FD24
.text:0040FD24 loc_40FD24:                             ; CODE XREF: sub_40FCFE+34↓j
.text:0040FD24                 mov     ecx, esi
.text:0040FD26                 call    sub_40F7E5
.text:0040FD2B                 inc     esi
.text:0040FD2C                 cmp     esi, dword_41500C
.text:0040FD32                 jbe     short loc_40FD24
.text:0040FD34
.text:0040FD34 loc_40FD34:                             ; CODE XREF: sub_40FCFE+24↑j
.text:0040FD34                 mov     esi, dword_414F14
.text:0040FD3A                 mov     ebx, offset dword_414F14
.text:0040FD3F                 jmp     short loc_40FD75
.text:0040FD41 ; ---------------------------------------------------------------------------
.text:0040FD41
.text:0040FD41 loc_40FD41:                             ; CODE XREF: sub_40FCFE+79↓j
.text:0040FD41                 cmp     dword ptr [esi+3Ch], 0
.text:0040FD45                 jz      short loc_40FD73
.text:0040FD47                 mov     ecx, esi
.text:0040FD49                 call    sub_40F3AF
.text:0040FD4E                 test    eax, eax
.text:0040FD50                 jz      short loc_40FD73
.text:0040FD52                 mov     edx, offset asc_403704 ; "<"
.text:0040FD57                 xor     ecx, ecx
.text:0040FD59                 call    sub_40E5A2
.text:0040FD5E                 xor     edx, edx
.text:0040FD60                 mov     ecx, esi
.text:0040FD62                 call    sub_40F3C0
.text:0040FD67                 mov     edx, offset asc_40370C ; "> "
.text:0040FD6C                 xor     ecx, ecx
.text:0040FD6E                 call    sub_40E5A2
.text:0040FD73
.text:0040FD73 loc_40FD73:                             ; CODE XREF: sub_40FCFE+47↑j
.text:0040FD73                                         ; sub_40FCFE+52↑j
.text:0040FD73                 mov     esi, [esi]
.text:0040FD75
.text:0040FD75 loc_40FD75:                             ; CODE XREF: sub_40FCFE+41↑j
.text:0040FD75                 cmp     esi, ebx
.text:0040FD77                 jnz     short loc_40FD41
.text:0040FD79                 push    3C30h           ; uID
.text:0040FD7E                 push    0               ; int
.text:0040FD80                 call    sub_40E7F8
.text:0040FD85                 pop     ecx
.text:0040FD86                 pop     ecx
.text:0040FD87                 pop     esi
.text:0040FD88                 pop     ebx
.text:0040FD89                 retn
.text:0040FD89 sub_40FCFE      endp
.text:0040FD89
.text:0040FD8A
.text:0040FD8A ; =============== S U B R O U T I N E =======================================
.text:0040FD8A
.text:0040FD8A
.text:0040FD8A ; int __fastcall sub_40FD8A(char)
.text:0040FD8A sub_40FD8A      proc near               ; CODE XREF: sub_40FF6D+126↓p
.text:0040FD8A                 mov     eax, dword_414F14
.text:0040FD8F                 mov     edx, eax
.text:0040FD91                 push    ebx
.text:0040FD92                 push    esi
.text:0040FD93                 push    edi
.text:0040FD94                 xor     ebx, ebx
.text:0040FD96                 mov     edi, ecx
.text:0040FD98                 xor     esi, esi
.text:0040FD9A                 mov     ecx, offset dword_414F14
.text:0040FD9F                 inc     ebx
.text:0040FDA0                 jmp     short loc_40FDB2
.text:0040FDA2 ; ---------------------------------------------------------------------------
.text:0040FDA2
.text:0040FDA2 loc_40FDA2:                             ; CODE XREF: sub_40FD8A+2A↓j
.text:0040FDA2                 cmp     [edx+48h], esi
.text:0040FDA5                 jz      short loc_40FDB0
.text:0040FDA7                 test    dword ptr [edx+20h], 200h
.text:0040FDAE                 jz      short loc_40FDB8
.text:0040FDB0
.text:0040FDB0 loc_40FDB0:                             ; CODE XREF: sub_40FD8A+1B↑j
.text:0040FDB0                 mov     edx, [edx]
.text:0040FDB2
.text:0040FDB2 loc_40FDB2:                             ; CODE XREF: sub_40FD8A+16↑j
.text:0040FDB2                 cmp     edx, ecx
.text:0040FDB4                 jnz     short loc_40FDA2
.text:0040FDB6                 jmp     short loc_40FDCA
.text:0040FDB8 ; ---------------------------------------------------------------------------
.text:0040FDB8
.text:0040FDB8 loc_40FDB8:                             ; CODE XREF: sub_40FD8A+24↑j
.text:0040FDB8                 mov     esi, ebx
.text:0040FDBA                 jmp     short loc_40FDCE
.text:0040FDBC ; ---------------------------------------------------------------------------
.text:0040FDBC
.text:0040FDBC loc_40FDBC:                             ; CODE XREF: sub_40FD8A+42↓j
.text:0040FDBC                 test    dword ptr [eax+20h], 10h
.text:0040FDC3                 jnz     short loc_40FDC8
.text:0040FDC5                 mov     [eax+38h], ebx
.text:0040FDC8
.text:0040FDC8 loc_40FDC8:                             ; CODE XREF: sub_40FD8A+39↑j
.text:0040FDC8                 mov     eax, [eax]
.text:0040FDCA
.text:0040FDCA loc_40FDCA:                             ; CODE XREF: sub_40FD8A+2C↑j
.text:0040FDCA                 cmp     eax, ecx
.text:0040FDCC                 jnz     short loc_40FDBC
.text:0040FDCE
.text:0040FDCE loc_40FDCE:                             ; CODE XREF: sub_40FD8A+30↑j
.text:0040FDCE                 mov     ecx, ebx
.text:0040FDD0                 call    ?ArgApplyRules@@YGJH@Z ; ArgApplyRules(int)
.text:0040FDD5                 mov     ecx, eax
.text:0040FDD7                 call    sub_40F303
.text:0040FDDC                 test    eax, eax
.text:0040FDDE                 js      short loc_40FDF0
.text:0040FDE0                 mov     ecx, edi        ; char
.text:0040FDE2                 call    sub_40FCFE
.text:0040FDE7                 mov     ecx, esi
.text:0040FDE9                 call    sub_40F694
.text:0040FDEE                 mov     eax, ebx
.text:0040FDF0
.text:0040FDF0 loc_40FDF0:                             ; CODE XREF: sub_40FD8A+54↑j
.text:0040FDF0                 pop     edi
.text:0040FDF1                 pop     esi
.text:0040FDF2                 pop     ebx
.text:0040FDF3                 retn
.text:0040FDF3 sub_40FD8A      endp
.text:0040FDF3
.text:0040FDF4
.text:0040FDF4 ; =============== S U B R O U T I N E =======================================
.text:0040FDF4
.text:0040FDF4 ; Attributes: bp-based frame
.text:0040FDF4
.text:0040FDF4 sub_40FDF4      proc near               ; CODE XREF: sub_40FF6D+C8↓p
.text:0040FDF4                                         ; sub_40FF6D+F8↓p
.text:0040FDF4
.text:0040FDF4 var_20          = dword ptr -20h
.text:0040FDF4 var_1C          = dword ptr -1Ch
.text:0040FDF4 var_18          = dword ptr -18h
.text:0040FDF4 var_14          = dword ptr -14h
.text:0040FDF4 var_10          = dword ptr -10h
.text:0040FDF4 var_C           = dword ptr -0Ch
.text:0040FDF4 lpMem           = dword ptr -8
.text:0040FDF4 var_4           = dword ptr -4
.text:0040FDF4
.text:0040FDF4                 mov     edi, edi
.text:0040FDF6                 push    ebp
.text:0040FDF7                 mov     ebp, esp
.text:0040FDF9                 sub     esp, 24h
.text:0040FDFC                 mov     eax, ___security_cookie
.text:0040FE01                 xor     eax, ebp
.text:0040FE03                 mov     [ebp+var_4], eax
.text:0040FE06                 and     [ebp+lpMem], 0
.text:0040FE0A                 mov     eax, ecx
.text:0040FE0C                 push    ebx
.text:0040FE0D                 push    esi
.text:0040FE0E                 push    edi
.text:0040FE0F                 mov     esi, [eax]
.text:0040FE11                 lea     ecx, [ebp+var_14]
.text:0040FE14                 push    ecx
.text:0040FE15                 lea     ecx, [ebp+lpMem]
.text:0040FE18                 mov     [ebp+var_10], edx
.text:0040FE1B                 push    ecx
.text:0040FE1C                 mov     [ebp+var_C], eax
.text:0040FE1F                 xor     ebx, ebx
.text:0040FE21                 push    eax
.text:0040FE22                 jmp     loc_40FF0C
.text:0040FE27 ; ---------------------------------------------------------------------------
.text:0040FE27
.text:0040FE27 loc_40FE27:                             ; CODE XREF: sub_40FDF4+12B↓j
.text:0040FE27                 mov     edx, [ebp+var_14]
.text:0040FE2A                 lea     eax, [ebp+var_1C]
.text:0040FE2D                 mov     ecx, [ebp+lpMem] ; String1
.text:0040FE30                 push    eax             ; int
.text:0040FE31                 lea     eax, [ebp+var_20]
.text:0040FE34                 push    eax             ; int
.text:0040FE35                 lea     eax, [ebp+var_18]
.text:0040FE38                 push    eax             ; int
.text:0040FE39                 call    sub_40F20C
.text:0040FE3E                 mov     edi, eax
.text:0040FE40                 test    edi, edi
.text:0040FE42                 js      loc_40FF27
.text:0040FE48                 mov     esi, [ebp+var_18]
.text:0040FE4B                 test    esi, esi
.text:0040FE4D                 jnz     short loc_40FE6A
.text:0040FE4F                 push    [ebp+lpMem]     ; char
.text:0040FE52                 push    3C31h           ; uID
.text:0040FE57                 push    esi             ; int
.text:0040FE58                 call    sub_40E7F8
.text:0040FE5D                 mov     edi, [ebp+var_C]
.text:0040FE60                 add     esp, 0Ch
.text:0040FE63                 mov     ebx, 80070057h
.text:0040FE68                 jmp     short loc_40FEE5
.text:0040FE6A ; ---------------------------------------------------------------------------
.text:0040FE6A
.text:0040FE6A loc_40FE6A:                             ; CODE XREF: sub_40FDF4+59↑j
.text:0040FE6A                 mov     eax, [ebp+var_1C]
.text:0040FE6D                 mov     [esi+4Ch], eax
.text:0040FE70                 test    eax, eax
.text:0040FE72                 jz      short loc_40FE94
.text:0040FE74                 test    dword ptr [esi+20h], 4
.text:0040FE7B                 jnz     short loc_40FE94
.text:0040FE7D                 push    [ebp+lpMem]     ; char
.text:0040FE80                 push    3C32h           ; uID
.text:0040FE85                 push    0               ; int
.text:0040FE87                 call    sub_40E7F8
.text:0040FE8C                 add     esp, 0Ch
.text:0040FE8F                 mov     ebx, 80070057h
.text:0040FE94
.text:0040FE94 loc_40FE94:                             ; CODE XREF: sub_40FDF4+7E↑j
.text:0040FE94                                         ; sub_40FDF4+87↑j
.text:0040FE94                 push    [ebp+var_20]
.text:0040FE97                 mov     edi, [ebp+var_C]
.text:0040FE9A                 mov     edx, esi
.text:0040FE9C                 push    [ebp+lpMem]
.text:0040FE9F                 mov     ecx, edi
.text:0040FEA1                 push    dword ptr [esi+10h]
.text:0040FEA4                 call    sub_411019
.text:0040FEA9                 test    eax, eax
.text:0040FEAB                 jns     short loc_40FEAF
.text:0040FEAD                 mov     ebx, eax
.text:0040FEAF
.text:0040FEAF loc_40FEAF:                             ; CODE XREF: sub_40FDF4+B7↑j
.text:0040FEAF                 mov     eax, [esi+48h]
.text:0040FEB2                 mov     ecx, [ebp+var_10] ; int
.text:0040FEB5                 test    eax, eax
.text:0040FEB7                 jz      short loc_40FEDB
.text:0040FEB9                 cmp     [esi+50h], ecx
.text:0040FEBC                 jnz     short loc_40FED7
.text:0040FEBE                 push    [ebp+lpMem]     ; char
.text:0040FEC1                 push    3C33h           ; uID
.text:0040FEC6                 push    0               ; int
.text:0040FEC8                 call    sub_40E7F8
.text:0040FECD                 add     esp, 0Ch
.text:0040FED0                 mov     ebx, 80070057h
.text:0040FED5                 jmp     short loc_40FEE5
.text:0040FED7 ; ---------------------------------------------------------------------------
.text:0040FED7
.text:0040FED7 loc_40FED7:                             ; CODE XREF: sub_40FDF4+C8↑j
.text:0040FED7                 test    eax, eax
.text:0040FED9                 jnz     short loc_40FEE5
.text:0040FEDB
.text:0040FEDB loc_40FEDB:                             ; CODE XREF: sub_40FDF4+C3↑j
.text:0040FEDB                 mov     [esi+50h], ecx
.text:0040FEDE                 mov     dword ptr [esi+48h], 1
.text:0040FEE5
.text:0040FEE5 loc_40FEE5:                             ; CODE XREF: sub_40FDF4+74↑j
.text:0040FEE5                                         ; sub_40FDF4+E1↑j ...
.text:0040FEE5                 cmp     [ebp+lpMem], 0
.text:0040FEE9                 jz      short loc_40FF01
.text:0040FEEB                 push    [ebp+lpMem]     ; lpMem
.text:0040FEEE                 push    0               ; dwFlags
.text:0040FEF0                 call    ds:GetProcessHeap
.text:0040FEF6                 push    eax             ; hHeap
.text:0040FEF7                 call    ds:HeapFree
.text:0040FEFD                 and     [ebp+lpMem], 0
.text:0040FF01
.text:0040FF01 loc_40FF01:                             ; CODE XREF: sub_40FDF4+F5↑j
.text:0040FF01                 mov     esi, [edi]
.text:0040FF03                 lea     eax, [ebp+var_14]
.text:0040FF06                 push    eax
.text:0040FF07                 lea     eax, [ebp+lpMem]
.text:0040FF0A                 push    eax
.text:0040FF0B                 push    edi
.text:0040FF0C
.text:0040FF0C loc_40FF0C:                             ; CODE XREF: sub_40FDF4+2E↑j
.text:0040FF0C                 mov     ecx, esi
.text:0040FF0E                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040FF14                 call    esi
.text:0040FF16                 mov     edi, eax
.text:0040FF18                 test    edi, edi
.text:0040FF1A                 js      short loc_40FF27
.text:0040FF1C                 cmp     edi, 1
.text:0040FF1F                 jnz     loc_40FE27
.text:0040FF25                 xor     edi, edi
.text:0040FF27
.text:0040FF27 loc_40FF27:                             ; CODE XREF: sub_40FDF4+4E↑j
.text:0040FF27                                         ; sub_40FDF4+126↑j
.text:0040FF27                 cmp     [ebp+lpMem], 0
.text:0040FF2B                 jz      short loc_40FF43
.text:0040FF2D                 push    [ebp+lpMem]     ; lpMem
.text:0040FF30                 push    0               ; dwFlags
.text:0040FF32                 call    ds:GetProcessHeap
.text:0040FF38                 push    eax             ; hHeap
.text:0040FF39                 call    ds:HeapFree
.text:0040FF3F                 and     [ebp+lpMem], 0
.text:0040FF43
.text:0040FF43 loc_40FF43:                             ; CODE XREF: sub_40FDF4+137↑j
.text:0040FF43                 mov     esi, [ebp+var_C]
.text:0040FF46                 push    esi
.text:0040FF47                 mov     esi, [esi+8]
.text:0040FF4A                 mov     ecx, esi
.text:0040FF4C                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:0040FF52                 call    esi
.text:0040FF54                 mov     eax, edi
.text:0040FF56                 test    edi, edi
.text:0040FF58                 js      short loc_40FF5C
.text:0040FF5A                 mov     eax, ebx
.text:0040FF5C
.text:0040FF5C loc_40FF5C:                             ; CODE XREF: sub_40FDF4+164↑j
.text:0040FF5C                 mov     ecx, [ebp+var_4]
.text:0040FF5F                 pop     edi
.text:0040FF60                 pop     esi
.text:0040FF61                 xor     ecx, ebp        ; StackCookie
.text:0040FF63                 pop     ebx
.text:0040FF64                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0040FF69                 mov     esp, ebp
.text:0040FF6B                 pop     ebp
.text:0040FF6C                 retn
.text:0040FF6C sub_40FDF4      endp
.text:0040FF6C
.text:0040FF6D
.text:0040FF6D ; =============== S U B R O U T I N E =======================================
.text:0040FF6D
.text:0040FF6D ; Attributes: bp-based frame
.text:0040FF6D
.text:0040FF6D sub_40FF6D      proc near               ; CODE XREF: _wmain+74↑p
.text:0040FF6D
.text:0040FF6D var_24          = dword ptr -24h
.text:0040FF6D var_20          = dword ptr -20h
.text:0040FF6D ConsoleScreenBufferInfo= _CONSOLE_SCREEN_BUFFER_INFO ptr -1Ch
.text:0040FF6D var_4           = dword ptr -4
.text:0040FF6D
.text:0040FF6D                 mov     edi, edi
.text:0040FF6F                 push    ebp
.text:0040FF70                 mov     ebp, esp
.text:0040FF72                 sub     esp, 24h
.text:0040FF75                 mov     eax, ___security_cookie
.text:0040FF7A                 xor     eax, ebp
.text:0040FF7C                 mov     [ebp+var_4], eax
.text:0040FF7F                 push    ebx
.text:0040FF80                 push    esi
.text:0040FF81                 push    edi
.text:0040FF82                 xor     edi, edi
.text:0040FF84                 mov     [ebp+var_24], ecx
.text:0040FF87                 push    edi             ; pulNumLanguages
.text:0040FF88                 push    edi             ; pwszLanguagesBuffer
.text:0040FF89                 push    100h            ; dwFlags
.text:0040FF8E                 mov     ebx, edx
.text:0040FF90                 call    ds:SetThreadPreferredUILanguages
.text:0040FF96                 push    0FFFFFFF5h      ; nStdHandle
.text:0040FF98                 call    ds:GetStdHandle
.text:0040FF9E                 mov     esi, eax
.text:0040FFA0                 cmp     esi, 0FFFFFFFFh
.text:0040FFA3                 jz      loc_4100AA
.text:0040FFA9                 test    esi, esi
.text:0040FFAB                 jz      loc_4100AA
.text:0040FFB1                 xor     eax, eax
.text:0040FFB3                 mov     ecx, esi        ; hConsoleHandle
.text:0040FFB5                 mov     word_415008, ax
.text:0040FFBB                 call    sub_4105F7
.text:0040FFC0                 test    eax, eax
.text:0040FFC2                 jz      short loc_40FFFE
.text:0040FFC4                 lea     eax, [ebp+ConsoleScreenBufferInfo]
.text:0040FFC7                 push    eax             ; lpConsoleScreenBufferInfo
.text:0040FFC8                 push    esi             ; hConsoleOutput
.text:0040FFC9                 call    ds:GetConsoleScreenBufferInfo
.text:0040FFCF                 test    eax, eax
.text:0040FFD1                 jnz     short loc_40FFF2
.text:0040FFD3                 call    ds:GetLastError
.text:0040FFD9                 test    eax, eax
.text:0040FFDB                 jz      short loc_40FFE9
.text:0040FFDD                 jle     short loc_40FFF0
.text:0040FFDF                 movzx   eax, ax
.text:0040FFE2                 or      eax, 80070000h
.text:0040FFE7                 jmp     short loc_40FFEE
.text:0040FFE9 ; ---------------------------------------------------------------------------
.text:0040FFE9
.text:0040FFE9 loc_40FFE9:                             ; CODE XREF: sub_40FF6D+6E↑j
.text:0040FFE9                 mov     eax, 80004005h
.text:0040FFEE
.text:0040FFEE loc_40FFEE:                             ; CODE XREF: sub_40FF6D+7A↑j
.text:0040FFEE                 test    eax, eax
.text:0040FFF0
.text:0040FFF0 loc_40FFF0:                             ; CODE XREF: sub_40FF6D+70↑j
.text:0040FFF0                 js      short loc_40FFFE
.text:0040FFF2
.text:0040FFF2 loc_40FFF2:                             ; CODE XREF: sub_40FF6D+64↑j
.text:0040FFF2                 mov     eax, dword ptr [ebp+ConsoleScreenBufferInfo.srWindow.Right]
.text:0040FFF5                 sub     eax, dword ptr [ebp+ConsoleScreenBufferInfo.srWindow.Left]
.text:0040FFF8                 mov     word_415008, ax
.text:0040FFFE
.text:0040FFFE loc_40FFFE:                             ; CODE XREF: sub_40FF6D+55↑j
.text:0040FFFE                                         ; sub_40FF6D:loc_40FFF0↑j
.text:0040FFFE                 xor     ecx, ecx
.text:00410000                 call    sub_40ECFB
.text:00410005                 xor     ecx, ecx
.text:00410007                 call    sub_40ED60
.text:0041000C                 call    ?ArgpLoadArguments@@YGJXZ ; ArgpLoadArguments(void)
.text:00410011                 test    eax, eax
.text:00410013                 js      loc_4100BA
.text:00410019                 mov     ecx, [ebp+var_24]
.text:0041001C                 lea     eax, [ebp+var_20]
.text:0041001F                 push    eax
.text:00410020                 mov     edx, ebx
.text:00410022                 call    sub_4112A1
.text:00410027                 test    eax, eax
.text:00410029                 js      loc_4100BA
.text:0041002F                 mov     ecx, [ebp+var_20]
.text:00410032                 xor     edx, edx
.text:00410034                 inc     edx
.text:00410035                 call    sub_40FDF4
.text:0041003A                 test    eax, eax
.text:0041003C                 jns     short loc_410040
.text:0041003E                 mov     edi, eax
.text:00410040
.text:00410040 loc_410040:                             ; CODE XREF: sub_40FF6D+CF↑j
.text:00410040                                         ; DATA XREF: .text:off_403848↑o
.text:00410040                 cmp     dword_413880, 0
.text:00410047                 jz      short loc_410070
.text:00410049                 mov     ecx, dword_413894
.text:0041004F                 test    ecx, ecx
.text:00410051                 jz      short loc_410070
.text:00410053                 lea     edx, [ebp+var_20]
.text:00410056                 call    sub_41156E
.text:0041005B                 test    eax, eax
.text:0041005D                 js      short loc_4100BA
.text:0041005F                 mov     ecx, [ebp+var_20]
.text:00410062                 push    2
.text:00410064                 pop     edx
.text:00410065                 call    sub_40FDF4
.text:0041006A                 test    eax, eax
.text:0041006C                 jns     short loc_410070
.text:0041006E                 mov     edi, eax
.text:00410070
.text:00410070 loc_410070:                             ; CODE XREF: sub_40FF6D+DA↑j
.text:00410070                                         ; sub_40FF6D+E4↑j ...
.text:00410070                 cmp     dword_414FF8, 0
.text:00410077                 jz      short loc_41007E
.text:00410079                 call    sub_40FB64
.text:0041007E
.text:0041007E loc_41007E:                             ; CODE XREF: sub_40FF6D+10A↑j
.text:0041007E                 cmp     dword_413510, 0
.text:00410085                 jz      short loc_41009A
.text:00410087                 or      dword_4134E8, 200h
.text:00410091                 mov     ecx, [ebx]      ; char
.text:00410093                 call    sub_40FD8A
.text:00410098                 jmp     short loc_4100AF
.text:0041009A ; ---------------------------------------------------------------------------
.text:0041009A
.text:0041009A loc_41009A:                             ; CODE XREF: sub_40FF6D+118↑j
.text:0041009A                 xor     ecx, ecx
.text:0041009C                 call    ?ArgApplyRules@@YGJH@Z ; ArgApplyRules(int)
.text:004100A1                 mov     ecx, eax
.text:004100A3                 call    sub_40F303
.text:004100A8                 jmp     short loc_4100AF
.text:004100AA ; ---------------------------------------------------------------------------
.text:004100AA
.text:004100AA loc_4100AA:                             ; CODE XREF: sub_40FF6D+36↑j
.text:004100AA                                         ; sub_40FF6D+3E↑j
.text:004100AA                 mov     eax, 80070057h
.text:004100AF
.text:004100AF loc_4100AF:                             ; CODE XREF: sub_40FF6D+12B↑j
.text:004100AF                                         ; sub_40FF6D+13B↑j
.text:004100AF                 test    eax, eax
.text:004100B1                 js      short loc_4100BA
.text:004100B3                 cmp     eax, 1
.text:004100B6                 jz      short loc_4100BA
.text:004100B8                 mov     eax, edi
.text:004100BA
.text:004100BA loc_4100BA:                             ; CODE XREF: sub_40FF6D+A6↑j
.text:004100BA                                         ; sub_40FF6D+BC↑j ...
.text:004100BA                 mov     ecx, [ebp+var_4]
.text:004100BD                 pop     edi
.text:004100BE                 pop     esi
.text:004100BF                 xor     ecx, ebp        ; StackCookie
.text:004100C1                 pop     ebx
.text:004100C2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004100C7                 mov     esp, ebp
.text:004100C9                 pop     ebp
.text:004100CA                 retn    8
.text:004100CA sub_40FF6D      endp
.text:004100CA
.text:004100CD
.text:004100CD ; =============== S U B R O U T I N E =======================================
.text:004100CD
.text:004100CD
.text:004100CD sub_4100CD      proc near               ; CODE XREF: _wmain:loc_408E18↑p
.text:004100CD                 mov     edi, edi
.text:004100CF                 push    ebx
.text:004100D0                 push    esi
.text:004100D1                 mov     esi, dword_414F14
.text:004100D7                 mov     ebx, offset dword_414F14
.text:004100DC                 push    edi
.text:004100DD                 xor     edi, edi
.text:004100DF                 jmp     loc_41016C
.text:004100E4 ; ---------------------------------------------------------------------------
.text:004100E4
.text:004100E4 loc_4100E4:                             ; CODE XREF: sub_4100CD+A1↓j
.text:004100E4                 cmp     [esi+24h], edi
.text:004100E7                 jz      short loc_4100FD
.text:004100E9                 push    dword ptr [esi+24h] ; lpMem
.text:004100EC                 push    edi             ; dwFlags
.text:004100ED                 call    ds:GetProcessHeap
.text:004100F3                 push    eax             ; hHeap
.text:004100F4                 call    ds:HeapFree
.text:004100FA                 mov     [esi+24h], edi
.text:004100FD
.text:004100FD loc_4100FD:                             ; CODE XREF: sub_4100CD+1A↑j
.text:004100FD                 cmp     [esi+28h], edi
.text:00410100                 jz      short loc_410116
.text:00410102                 push    dword ptr [esi+28h] ; lpMem
.text:00410105                 push    edi             ; dwFlags
.text:00410106                 call    ds:GetProcessHeap
.text:0041010C                 push    eax             ; hHeap
.text:0041010D                 call    ds:HeapFree
.text:00410113                 mov     [esi+28h], edi
.text:00410116
.text:00410116 loc_410116:                             ; CODE XREF: sub_4100CD+33↑j
.text:00410116                 cmp     [esi+30h], edi
.text:00410119                 jz      short loc_41012F
.text:0041011B                 push    dword ptr [esi+30h] ; lpMem
.text:0041011E                 push    edi             ; dwFlags
.text:0041011F                 call    ds:GetProcessHeap
.text:00410125                 push    eax             ; hHeap
.text:00410126                 call    ds:HeapFree
.text:0041012C                 mov     [esi+30h], edi
.text:0041012F
.text:0041012F loc_41012F:                             ; CODE XREF: sub_4100CD+4C↑j
.text:0041012F                 cmp     [esi+2Ch], edi
.text:00410132                 jz      short loc_410148
.text:00410134                 push    dword ptr [esi+2Ch] ; lpMem
.text:00410137                 push    edi             ; dwFlags
.text:00410138                 call    ds:GetProcessHeap
.text:0041013E                 push    eax             ; hHeap
.text:0041013F                 call    ds:HeapFree
.text:00410145                 mov     [esi+2Ch], edi
.text:00410148
.text:00410148 loc_410148:                             ; CODE XREF: sub_4100CD+65↑j
.text:00410148                 mov     eax, [esi+1Ch]
.text:0041014B                 dec     eax
.text:0041014C                 cmp     eax, 1
.text:0041014F                 ja      short loc_41016A
.text:00410151                 cmp     [esi+5Ch], edi
.text:00410154                 jz      short loc_41016A
.text:00410156                 push    dword ptr [esi+5Ch] ; lpMem
.text:00410159                 push    edi             ; dwFlags
.text:0041015A                 call    ds:GetProcessHeap
.text:00410160                 push    eax             ; hHeap
.text:00410161                 call    ds:HeapFree
.text:00410167                 mov     [esi+5Ch], edi
.text:0041016A
.text:0041016A loc_41016A:                             ; CODE XREF: sub_4100CD+82↑j
.text:0041016A                                         ; sub_4100CD+87↑j
.text:0041016A                 mov     esi, [esi]
.text:0041016C
.text:0041016C loc_41016C:                             ; CODE XREF: sub_4100CD+12↑j
.text:0041016C                 cmp     esi, ebx
.text:0041016E                 jnz     loc_4100E4
.text:00410174                 mov     eax, hLibModule
.text:00410179                 test    eax, eax
.text:0041017B                 jz      short loc_41018A
.text:0041017D                 push    eax             ; hLibModule
.text:0041017E                 call    ds:FreeLibrary
.text:00410184                 mov     hLibModule, edi
.text:0041018A
.text:0041018A loc_41018A:                             ; CODE XREF: sub_4100CD+AE↑j
.text:0041018A                 pop     edi
.text:0041018B                 pop     esi
.text:0041018C                 pop     ebx
.text:0041018D                 retn
.text:0041018D sub_4100CD      endp
.text:0041018D
.text:0041018E
.text:0041018E ; =============== S U B R O U T I N E =======================================
.text:0041018E
.text:0041018E ; Attributes: bp-based frame
.text:0041018E
.text:0041018E sub_41018E      proc near               ; CODE XREF: sub_4101E9+119↓p
.text:0041018E                                         ; sub_410372:loc_4103D1↓p
.text:0041018E
.text:0041018E Size            = dword ptr -4
.text:0041018E
.text:0041018E                 mov     edi, edi
.text:00410190                 push    ebp
.text:00410191                 mov     ebp, esp
.text:00410193                 push    ecx
.text:00410194                 push    ebx
.text:00410195                 push    esi
.text:00410196                 push    edi
.text:00410197                 mov     edi, ecx
.text:00410199                 xor     esi, esi
.text:0041019B                 mov     ebx, edx
.text:0041019D                 cmp     [edi+58h], esi
.text:004101A0                 jnz     short loc_4101D7
.text:004101A2                 mov     eax, dword_414FFC
.text:004101A7                 shl     eax, 2
.text:004101AA                 push    eax             ; dwBytes
.text:004101AB                 push    esi             ; dwFlags
.text:004101AC                 mov     [ebp+Size], eax
.text:004101AF                 call    ds:GetProcessHeap
.text:004101B5                 push    eax             ; hHeap
.text:004101B6                 call    ds:HeapAlloc
.text:004101BC                 mov     [edi+58h], eax
.text:004101BF                 test    eax, eax
.text:004101C1                 jnz     short loc_4101CA
.text:004101C3                 mov     esi, 8007000Eh
.text:004101C8                 jmp     short loc_4101E0
.text:004101CA ; ---------------------------------------------------------------------------
.text:004101CA
.text:004101CA loc_4101CA:                             ; CODE XREF: sub_41018E+33↑j
.text:004101CA                 push    [ebp+Size]      ; Size
.text:004101CD                 push    esi             ; Val
.text:004101CE                 push    eax             ; void *
.text:004101CF                 call    memset
.text:004101D4                 add     esp, 0Ch
.text:004101D7
.text:004101D7 loc_4101D7:                             ; CODE XREF: sub_41018E+12↑j
.text:004101D7                 mov     edx, [ebx+54h]
.text:004101DA                 mov     ecx, [edi+58h]
.text:004101DD                 mov     [ecx+edx*4], ebx
.text:004101E0
.text:004101E0 loc_4101E0:                             ; CODE XREF: sub_41018E+3A↑j
.text:004101E0                 pop     edi
.text:004101E1                 mov     eax, esi
.text:004101E3                 pop     esi
.text:004101E4                 pop     ebx
.text:004101E5                 mov     esp, ebp
.text:004101E7                 pop     ebp
.text:004101E8                 retn
.text:004101E8 sub_41018E      endp
.text:004101E8
.text:004101E9
.text:004101E9 ; =============== S U B R O U T I N E =======================================
.text:004101E9
.text:004101E9 ; Attributes: bp-based frame
.text:004101E9
.text:004101E9 sub_4101E9      proc near               ; CODE XREF: ArgApplyRules(int)+506↑p
.text:004101E9
.text:004101E9 var_34          = dword ptr -34h
.text:004101E9 var_30          = dword ptr -30h
.text:004101E9 var_2C          = dword ptr -2Ch
.text:004101E9 var_28          = dword ptr -28h
.text:004101E9 var_24          = dword ptr -24h
.text:004101E9 var_20          = dword ptr -20h
.text:004101E9 var_1C          = dword ptr -1Ch
.text:004101E9 var_18          = dword ptr -18h
.text:004101E9 var_14          = dword ptr -14h
.text:004101E9 var_10          = dword ptr -10h
.text:004101E9 var_C           = dword ptr -0Ch
.text:004101E9 var_8           = dword ptr -8
.text:004101E9 var_4           = dword ptr -4
.text:004101E9
.text:004101E9                 mov     edi, edi
.text:004101EB                 push    ebp
.text:004101EC                 mov     ebp, esp
.text:004101EE                 sub     esp, 34h
.text:004101F1                 push    ebx
.text:004101F2                 push    esi
.text:004101F3                 mov     ecx, edx
.text:004101F5                 xor     edx, edx
.text:004101F7                 push    edi
.text:004101F8                 xor     edi, edi
.text:004101FA                 mov     [ebp+var_10], ecx
.text:004101FD                 xor     esi, esi
.text:004101FF                 mov     [ebp+var_20], edx
.text:00410202                 mov     [ebp+var_2C], edi
.text:00410205                 mov     [ebp+var_18], esi
.text:00410208
.text:00410208 loc_410208:                             ; CODE XREF: sub_4101E9+16F↓j
.text:00410208                 mov     eax, [ecx+esi*4]
.text:0041020B                 xor     ebx, ebx
.text:0041020D                 mov     [ebp+var_28], ebx
.text:00410210                 cmp     [eax+4], ebx
.text:00410213                 jbe     loc_410351
.text:00410219
.text:00410219 loc_410219:                             ; CODE XREF: sub_4101E9+162↓j
.text:00410219                 mov     eax, [eax]
.text:0041021B                 mov     eax, [eax+ebx*4]
.text:0041021E                 cmp     dword ptr [eax+48h], 0
.text:00410222                 jz      loc_410341
.text:00410228                 lea     edi, [esi+1]
.text:0041022B                 cmp     edi, 5
.text:0041022E                 jnb     loc_410341
.text:00410234                 lea     eax, [ecx+edi*4]
.text:00410237                 mov     [ebp+var_24], eax
.text:0041023A
.text:0041023A loc_41023A:                             ; CODE XREF: sub_4101E9+14F↓j
.text:0041023A                 mov     ecx, [eax]
.text:0041023C                 and     [ebp+var_C], 0
.text:00410240                 cmp     dword ptr [ecx+4], 0
.text:00410244                 jbe     loc_41032E
.text:0041024A
.text:0041024A loc_41024A:                             ; CODE XREF: sub_4101E9+13F↓j
.text:0041024A                 mov     eax, [ebp+var_10]
.text:0041024D                 mov     eax, [eax+esi*4]
.text:00410250                 mov     eax, [eax]
.text:00410252                 mov     eax, [eax+ebx*4]
.text:00410255                 mov     [ebp+var_1C], eax
.text:00410258                 mov     [ebp+var_8], eax
.text:0041025B                 mov     eax, [ecx]
.text:0041025D                 mov     ecx, [ebp+var_C]
.text:00410260                 mov     edx, [eax+ecx*4]
.text:00410263                 mov     eax, [ebp+var_8]
.text:00410266                 cmp     eax, edx
.text:00410268                 jz      loc_410317
.text:0041026E                 cmp     dword ptr [edx+48h], 0
.text:00410272                 jz      loc_410317
.text:00410278                 mov     eax, [eax+54h]
.text:0041027B                 cmp     eax, [edx+54h]
.text:0041027E                 jbe     short loc_410286
.text:00410280                 mov     [ebp+var_8], edx
.text:00410283                 mov     edx, [ebp+var_1C]
.text:00410286
.text:00410286 loc_410286:                             ; CODE XREF: sub_4101E9+95↑j
.text:00410286                 mov     eax, [ebp+var_10]
.text:00410289                 xor     ecx, ecx
.text:0041028B                 mov     [ebp+var_14], ecx
.text:0041028E
.text:0041028E loc_41028E:                             ; CODE XREF: sub_4101E9+114↓j
.text:0041028E                 mov     ecx, [ebp+var_14]
.text:00410291                 and     [ebp+var_1C], 0
.text:00410295                 and     [ebp+var_4], 0
.text:00410299                 mov     esi, [eax+ecx*4]
.text:0041029C                 mov     esi, [esi+4]
.text:0041029F                 test    esi, esi
.text:004102A1                 mov     [ebp+var_34], esi
.text:004102A4                 mov     esi, [ebp+var_18]
.text:004102A7                 jz      short loc_4102F6
.text:004102A9                 mov     eax, [eax+ecx*4]
.text:004102AC                 mov     eax, [eax]
.text:004102AE                 mov     [ebp+var_30], eax
.text:004102B1                 mov     eax, [ebp+var_4]
.text:004102B4
.text:004102B4 loc_4102B4:                             ; CODE XREF: sub_4101E9+105↓j
.text:004102B4                 mov     ebx, [ebp+var_30]
.text:004102B7                 xor     ecx, ecx
.text:004102B9                 mov     esi, [ebp+var_8]
.text:004102BC                 cmp     esi, [ebx+eax*4]
.text:004102BF                 mov     esi, [ebp+var_4]
.text:004102C2                 setz    cl
.text:004102C5                 xor     eax, eax
.text:004102C7                 add     ecx, ecx
.text:004102C9                 cmp     edx, [ebx+esi*4]
.text:004102CC                 mov     esi, [ebp+var_18]
.text:004102CF                 mov     ebx, [ebp+var_28]
.text:004102D2                 setz    al
.text:004102D5                 or      ecx, eax
.text:004102D7                 mov     eax, [ebp+var_1C]
.text:004102DA                 or      eax, ecx
.text:004102DC                 mov     [ebp+var_1C], eax
.text:004102DF                 cmp     eax, 3
.text:004102E2                 jz      short loc_410317
.text:004102E4                 mov     eax, [ebp+var_4]
.text:004102E7                 inc     eax
.text:004102E8                 mov     [ebp+var_4], eax
.text:004102EB                 cmp     eax, [ebp+var_34]
.text:004102EE                 jb      short loc_4102B4
.text:004102F0                 mov     eax, [ebp+var_10]
.text:004102F3                 mov     ecx, [ebp+var_14]
.text:004102F6
.text:004102F6 loc_4102F6:                             ; CODE XREF: sub_4101E9+BE↑j
.text:004102F6                 inc     ecx
.text:004102F7                 mov     [ebp+var_14], ecx
.text:004102FA                 cmp     ecx, 5
.text:004102FD                 jb      short loc_41028E
.text:004102FF                 mov     ecx, [ebp+var_8]
.text:00410302                 call    sub_41018E
.text:00410307                 mov     edx, eax
.text:00410309                 mov     [ebp+var_20], edx
.text:0041030C                 test    edx, edx
.text:0041030E                 js      short loc_410365
.text:00410310                 mov     [ebp+var_2C], 80070057h
.text:00410317
.text:00410317 loc_410317:                             ; CODE XREF: sub_4101E9+7F↑j
.text:00410317                                         ; sub_4101E9+89↑j ...
.text:00410317                 mov     eax, [ebp+var_24]
.text:0041031A                 inc     [ebp+var_C]
.text:0041031D                 mov     edx, [ebp+var_C]
.text:00410320                 mov     ecx, [eax]
.text:00410322                 cmp     edx, [ecx+4]
.text:00410325                 mov     edx, [ebp+var_20]
.text:00410328                 jb      loc_41024A
.text:0041032E
.text:0041032E loc_41032E:                             ; CODE XREF: sub_4101E9+5B↑j
.text:0041032E                 inc     edi
.text:0041032F                 add     eax, 4
.text:00410332                 mov     [ebp+var_24], eax
.text:00410335                 cmp     edi, 5
.text:00410338                 jb      loc_41023A
.text:0041033E                 mov     ecx, [ebp+var_10]
.text:00410341
.text:00410341 loc_410341:                             ; CODE XREF: sub_4101E9+39↑j
.text:00410341                                         ; sub_4101E9+45↑j
.text:00410341                 mov     eax, [ecx+esi*4]
.text:00410344                 inc     ebx
.text:00410345                 mov     [ebp+var_28], ebx
.text:00410348                 cmp     ebx, [eax+4]
.text:0041034B                 jb      loc_410219
.text:00410351
.text:00410351 loc_410351:                             ; CODE XREF: sub_4101E9+2A↑j
.text:00410351                 inc     esi
.text:00410352                 mov     [ebp+var_18], esi
.text:00410355                 cmp     esi, 4
.text:00410358                 jb      loc_410208
.text:0041035E                 mov     edi, [ebp+var_2C]
.text:00410361                 test    edx, edx
.text:00410363                 jns     short loc_410367
.text:00410365
.text:00410365 loc_410365:                             ; CODE XREF: sub_4101E9+125↑j
.text:00410365                 mov     edi, edx
.text:00410367
.text:00410367 loc_410367:                             ; CODE XREF: sub_4101E9+17A↑j
.text:00410367                 mov     eax, edi
.text:00410369                 pop     edi
.text:0041036A                 pop     esi
.text:0041036B                 pop     ebx
.text:0041036C                 mov     esp, ebp
.text:0041036E                 pop     ebp
.text:0041036F                 retn    4
.text:0041036F sub_4101E9      endp
.text:0041036F
.text:00410372
.text:00410372 ; =============== S U B R O U T I N E =======================================
.text:00410372
.text:00410372 ; Attributes: bp-based frame
.text:00410372
.text:00410372 sub_410372      proc near               ; CODE XREF: sub_410571+21↓p
.text:00410372                                         ; sub_4105BC+1E↓p
.text:00410372
.text:00410372 var_14          = dword ptr -14h
.text:00410372 var_10          = dword ptr -10h
.text:00410372 var_C           = dword ptr -0Ch
.text:00410372 var_8           = dword ptr -8
.text:00410372 var_4           = dword ptr -4
.text:00410372 arg_0           = dword ptr  8
.text:00410372
.text:00410372                 mov     edi, edi
.text:00410374                 push    ebp
.text:00410375                 mov     ebp, esp
.text:00410377                 sub     esp, 14h
.text:0041037A                 mov     eax, [ebp+arg_0]
.text:0041037D                 xor     ecx, ecx
.text:0041037F                 and     [ebp+var_C], ecx
.text:00410382                 push    ebx
.text:00410383                 mov     ebx, edx
.text:00410385                 xor     edx, edx
.text:00410387                 push    esi
.text:00410388                 sub     eax, 1
.text:0041038B                 mov     [ebp+var_10], ebx
.text:0041038E                 push    edi
.text:0041038F                 mov     [ebp+var_4], edx
.text:00410392                 mov     [ebp+var_8], eax
.text:00410395                 jz      short loc_410405
.text:00410397                 xor     esi, esi
.text:00410399                 mov     edi, eax
.text:0041039B                 inc     esi
.text:0041039C
.text:0041039C loc_41039C:                             ; CODE XREF: sub_410372+8D↓j
.text:0041039C                 mov     eax, [ebx]
.text:0041039E                 cmp     dword ptr [eax+48h], 0
.text:004103A2                 jz      short loc_4103F2
.text:004103A4                 mov     edi, esi
.text:004103A6                 cmp     esi, [ebp+arg_0]
.text:004103A9                 jnb     short loc_4103EF
.text:004103AB
.text:004103AB loc_4103AB:                             ; CODE XREF: sub_410372+7B↓j
.text:004103AB                 mov     edx, [ebp+var_10]
.text:004103AE                 mov     eax, [ebx]
.text:004103B0                 mov     [ebp+var_14], eax
.text:004103B3                 mov     edx, [edx+edi*4]
.text:004103B6                 cmp     eax, edx
.text:004103B8                 jz      short loc_4103E6
.text:004103BA                 cmp     dword ptr [edx+48h], 0
.text:004103BE                 jz      short loc_4103E6
.text:004103C0                 mov     eax, [eax+54h]
.text:004103C3                 cmp     eax, [edx+54h]
.text:004103C6                 jbe     short loc_4103CE
.text:004103C8                 mov     ecx, edx
.text:004103CA                 mov     edx, [ebx]
.text:004103CC                 jmp     short loc_4103D1
.text:004103CE ; ---------------------------------------------------------------------------
.text:004103CE
.text:004103CE loc_4103CE:                             ; CODE XREF: sub_410372+54↑j
.text:004103CE                 mov     ecx, [ebp+var_14]
.text:004103D1
.text:004103D1 loc_4103D1:                             ; CODE XREF: sub_410372+5A↑j
.text:004103D1                 call    sub_41018E
.text:004103D6                 mov     ecx, eax
.text:004103D8                 test    ecx, ecx
.text:004103DA                 js      short loc_410407
.text:004103DC                 mov     edx, 80070057h
.text:004103E1                 mov     [ebp+var_4], edx
.text:004103E4                 jmp     short loc_4103E9
.text:004103E6 ; ---------------------------------------------------------------------------
.text:004103E6
.text:004103E6 loc_4103E6:                             ; CODE XREF: sub_410372+46↑j
.text:004103E6                                         ; sub_410372+4C↑j
.text:004103E6                 mov     edx, [ebp+var_4]
.text:004103E9
.text:004103E9 loc_4103E9:                             ; CODE XREF: sub_410372+72↑j
.text:004103E9                 inc     edi
.text:004103EA                 cmp     edi, [ebp+arg_0]
.text:004103ED                 jb      short loc_4103AB
.text:004103EF
.text:004103EF loc_4103EF:                             ; CODE XREF: sub_410372+37↑j
.text:004103EF                 mov     edi, [ebp+var_8]
.text:004103F2
.text:004103F2 loc_4103F2:                             ; CODE XREF: sub_410372+30↑j
.text:004103F2                 mov     eax, [ebp+var_C]
.text:004103F5                 add     ebx, 4
.text:004103F8                 inc     eax
.text:004103F9                 inc     esi
.text:004103FA                 mov     [ebp+var_C], eax
.text:004103FD                 cmp     eax, edi
.text:004103FF                 jb      short loc_41039C
.text:00410401                 test    ecx, ecx
.text:00410403                 js      short loc_410407
.text:00410405
.text:00410405 loc_410405:                             ; CODE XREF: sub_410372+23↑j
.text:00410405                 mov     ecx, edx
.text:00410407
.text:00410407 loc_410407:                             ; CODE XREF: sub_410372+68↑j
.text:00410407                                         ; sub_410372+91↑j
.text:00410407                 pop     edi
.text:00410408                 pop     esi
.text:00410409                 mov     eax, ecx
.text:0041040B                 pop     ebx
.text:0041040C                 mov     esp, ebp
.text:0041040E                 pop     ebp
.text:0041040F                 retn    4
.text:0041040F sub_410372      endp
.text:0041040F
.text:00410412
.text:00410412 ; =============== S U B R O U T I N E =======================================
.text:00410412
.text:00410412 ; Attributes: bp-based frame
.text:00410412
.text:00410412 sub_410412      proc near               ; CODE XREF: ArgApplyRules(int)+5E6↑p
.text:00410412                                         ; ArgApplyRules(int)+5FD↑p ...
.text:00410412
.text:00410412 arg_0           = dword ptr  8
.text:00410412
.text:00410412                 mov     edi, edi
.text:00410414                 push    ebp
.text:00410415                 mov     ebp, esp
.text:00410417                 xor     ecx, ecx
.text:00410419                 cmp     [ebp+arg_0], ecx
.text:0041041C                 jbe     short loc_41042E
.text:0041041E
.text:0041041E loc_41041E:                             ; CODE XREF: sub_410412+1A↓j
.text:0041041E                 mov     eax, [edx+ecx*4]
.text:00410421                 inc     ecx
.text:00410422                 mov     dword ptr [eax+38h], 1
.text:00410429                 cmp     ecx, [ebp+arg_0]
.text:0041042C                 jb      short loc_41041E
.text:0041042E
.text:0041042E loc_41042E:                             ; CODE XREF: sub_410412+A↑j
.text:0041042E                 xor     eax, eax
.text:00410430                 pop     ebp
.text:00410431                 retn    4
.text:00410431 sub_410412      endp
.text:00410431
.text:00410434
.text:00410434 ; =============== S U B R O U T I N E =======================================
.text:00410434
.text:00410434 ; Attributes: bp-based frame
.text:00410434
.text:00410434 sub_410434      proc near               ; CODE XREF: ArgApplyRules(int)+59A↑p
.text:00410434                                         ; ArgApplyRules(int)+5BC↑p ...
.text:00410434
.text:00410434 arg_0           = dword ptr  8
.text:00410434
.text:00410434                 mov     edi, edi
.text:00410436                 push    ebp
.text:00410437                 mov     ebp, esp
.text:00410439                 push    ebx
.text:0041043A                 push    esi
.text:0041043B                 mov     esi, [ebp+arg_0]
.text:0041043E                 mov     ebx, edx
.text:00410440                 push    edi
.text:00410441                 push    esi
.text:00410442                 mov     edi, ecx
.text:00410444                 call    sub_410412
.text:00410449                 mov     edx, eax
.text:0041044B                 test    edx, edx
.text:0041044D                 js      short loc_4104AA
.text:0041044F                 test    edi, edi
.text:00410451                 jz      short loc_41046A
.text:00410453                 xor     ecx, ecx
.text:00410455                 test    esi, esi
.text:00410457                 jz      short loc_4104AA
.text:00410459
.text:00410459 loc_410459:                             ; CODE XREF: sub_410434+32↓j
.text:00410459                 mov     eax, [ebx+ecx*4]
.text:0041045C                 inc     ecx
.text:0041045D                 mov     dword ptr [eax+3Ch], 1
.text:00410464                 cmp     ecx, esi
.text:00410466                 jb      short loc_410459
.text:00410468                 jmp     short loc_4104AA
.text:0041046A ; ---------------------------------------------------------------------------
.text:0041046A
.text:0041046A loc_41046A:                             ; CODE XREF: sub_410434+1D↑j
.text:0041046A                 xor     edi, edi
.text:0041046C                 test    esi, esi
.text:0041046E                 jz      short loc_4104AA
.text:00410470
.text:00410470 loc_410470:                             ; CODE XREF: sub_410434+74↓j
.text:00410470                 mov     eax, [ebx+edi*4]
.text:00410473                 test    dword ptr [eax+20h], 400h
.text:0041047A                 jnz     short loc_4104A5
.text:0041047C                 cmp     dword ptr [eax+48h], 0
.text:00410480                 jnz     short loc_4104A5
.text:00410482                 cmp     dword ptr [eax+18h], 1
.text:00410486                 jnz     short loc_41048D
.text:00410488                 mov     eax, [eax+28h]
.text:0041048B                 jmp     short loc_410490
.text:0041048D ; ---------------------------------------------------------------------------
.text:0041048D
.text:0041048D loc_41048D:                             ; CODE XREF: sub_410434+52↑j
.text:0041048D                 mov     eax, [eax+24h]
.text:00410490
.text:00410490 loc_410490:                             ; CODE XREF: sub_410434+57↑j
.text:00410490                 push    eax             ; char
.text:00410491                 push    3C29h           ; uID
.text:00410496                 push    0               ; int
.text:00410498                 call    sub_40E7F8
.text:0041049D                 add     esp, 0Ch
.text:004104A0                 mov     edx, 80070057h
.text:004104A5
.text:004104A5 loc_4104A5:                             ; CODE XREF: sub_410434+46↑j
.text:004104A5                                         ; sub_410434+4C↑j
.text:004104A5                 inc     edi
.text:004104A6                 cmp     edi, esi
.text:004104A8                 jb      short loc_410470
.text:004104AA
.text:004104AA loc_4104AA:                             ; CODE XREF: sub_410434+19↑j
.text:004104AA                                         ; sub_410434+23↑j ...
.text:004104AA                 pop     edi
.text:004104AB                 pop     esi
.text:004104AC                 mov     eax, edx
.text:004104AE                 pop     ebx
.text:004104AF                 pop     ebp
.text:004104B0                 retn    4
.text:004104B0 sub_410434      endp
.text:004104B0
.text:004104B3
.text:004104B3 ; =============== S U B R O U T I N E =======================================
.text:004104B3
.text:004104B3 ; Attributes: bp-based frame
.text:004104B3
.text:004104B3 sub_4104B3      proc near               ; CODE XREF: sub_410571+2F↓p
.text:004104B3
.text:004104B3 var_4           = dword ptr -4
.text:004104B3 arg_0           = dword ptr  8
.text:004104B3
.text:004104B3                 mov     edi, edi
.text:004104B5                 push    ebp
.text:004104B6                 mov     ebp, esp
.text:004104B8                 push    ecx
.text:004104B9                 push    ebx
.text:004104BA                 push    edi
.text:004104BB                 mov     edi, [ebp+arg_0]
.text:004104BE                 mov     ebx, edx
.text:004104C0                 push    edi
.text:004104C1                 mov     [ebp+var_4], ecx
.text:004104C4                 call    sub_410412
.text:004104C9                 mov     edx, eax
.text:004104CB                 test    edx, edx
.text:004104CD                 js      short loc_410531
.text:004104CF                 push    esi             ; char
.text:004104D0                 xor     esi, esi
.text:004104D2                 mov     ecx, esi
.text:004104D4                 test    edi, edi
.text:004104D6                 jz      short loc_4104E5
.text:004104D8
.text:004104D8 loc_4104D8:                             ; CODE XREF: sub_4104B3+30↓j
.text:004104D8                 mov     eax, [ebx+ecx*4]
.text:004104DB                 cmp     [eax+48h], esi
.text:004104DE                 jnz     short loc_4104E5
.text:004104E0                 inc     ecx             ; int
.text:004104E1                 cmp     ecx, edi
.text:004104E3                 jb      short loc_4104D8
.text:004104E5
.text:004104E5 loc_4104E5:                             ; CODE XREF: sub_4104B3+23↑j
.text:004104E5                                         ; sub_4104B3+2B↑j
.text:004104E5                 cmp     ecx, edi
.text:004104E7                 jnz     short loc_410530
.text:004104E9                 cmp     [ebp+var_4], esi
.text:004104EC                 jnz     short loc_410530
.text:004104EE                 push    3C2Ah           ; uID
.text:004104F3                 push    esi             ; int
.text:004104F4                 call    sub_40E7F8
.text:004104F9                 pop     ecx
.text:004104FA                 pop     ecx
.text:004104FB                 test    edi, edi
.text:004104FD                 jz      short loc_41052B
.text:004104FF
.text:004104FF loc_4104FF:                             ; CODE XREF: sub_4104B3+76↓j
.text:004104FF                 mov     eax, [ebx+esi*4]
.text:00410502                 test    dword ptr [eax+20h], 400h
.text:00410509                 jnz     short loc_410526
.text:0041050B                 cmp     dword ptr [eax+18h], 1
.text:0041050F                 jnz     short loc_410516
.text:00410511                 mov     eax, [eax+28h]
.text:00410514                 jmp     short loc_410519
.text:00410516 ; ---------------------------------------------------------------------------
.text:00410516
.text:00410516 loc_410516:                             ; CODE XREF: sub_4104B3+5C↑j
.text:00410516                 mov     eax, [eax+24h]
.text:00410519
.text:00410519 loc_410519:                             ; CODE XREF: sub_4104B3+61↑j
.text:00410519                 push    eax             ; char
.text:0041051A                 push    offset a1S_1    ; "  %1!s!\n"
.text:0041051F                 call    sub_40E7E4
.text:00410524                 pop     ecx
.text:00410525                 pop     ecx
.text:00410526
.text:00410526 loc_410526:                             ; CODE XREF: sub_4104B3+56↑j
.text:00410526                 inc     esi
.text:00410527                 cmp     esi, edi
.text:00410529                 jb      short loc_4104FF
.text:0041052B
.text:0041052B loc_41052B:                             ; CODE XREF: sub_4104B3+4A↑j
.text:0041052B                 mov     edx, 80070057h
.text:00410530
.text:00410530 loc_410530:                             ; CODE XREF: sub_4104B3+34↑j
.text:00410530                                         ; sub_4104B3+39↑j
.text:00410530                 pop     esi
.text:00410531
.text:00410531 loc_410531:                             ; CODE XREF: sub_4104B3+1A↑j
.text:00410531                 pop     edi
.text:00410532                 mov     eax, edx
.text:00410534                 pop     ebx
.text:00410535                 mov     esp, ebp
.text:00410537                 pop     ebp
.text:00410538                 retn    4
.text:00410538 sub_4104B3      endp
.text:00410538
.text:0041053B
.text:0041053B ; =============== S U B R O U T I N E =======================================
.text:0041053B
.text:0041053B ; Attributes: bp-based frame
.text:0041053B
.text:0041053B sub_41053B      proc near               ; CODE XREF: sub_410571+17↓p
.text:0041053B                                         ; sub_4105BC+14↓p
.text:0041053B
.text:0041053B arg_0           = dword ptr  8
.text:0041053B
.text:0041053B                 mov     edi, edi
.text:0041053D                 push    ebp
.text:0041053E                 mov     ebp, esp
.text:00410540                 push    esi
.text:00410541                 mov     esi, dword_41500C
.text:00410547                 push    edi
.text:00410548                 inc     esi
.text:00410549                 xor     edi, edi
.text:0041054B                 mov     dword_41500C, esi
.text:00410551                 test    edx, edx
.text:00410553                 jz      short loc_41056B
.text:00410555                 push    ebx
.text:00410556                 mov     ebx, [ebp+arg_0]
.text:00410559
.text:00410559 loc_410559:                             ; CODE XREF: sub_41053B+2D↓j
.text:00410559                 mov     eax, [ecx+edi*4]
.text:0041055C                 mov     [eax+40h], ebx
.text:0041055F                 mov     eax, [ecx+edi*4]
.text:00410562                 inc     edi
.text:00410563                 mov     [eax+44h], esi
.text:00410566                 cmp     edi, edx
.text:00410568                 jb      short loc_410559
.text:0041056A                 pop     ebx
.text:0041056B
.text:0041056B loc_41056B:                             ; CODE XREF: sub_41053B+18↑j
.text:0041056B                 pop     edi
.text:0041056C                 pop     esi
.text:0041056D                 pop     ebp
.text:0041056E                 retn    4
.text:0041056E sub_41053B      endp
.text:0041056E
.text:00410571
.text:00410571 ; =============== S U B R O U T I N E =======================================
.text:00410571
.text:00410571 ; Attributes: bp-based frame
.text:00410571
.text:00410571 sub_410571      proc near               ; CODE XREF: ArgApplyRules(int)+69A↑p
.text:00410571
.text:00410571 arg_0           = dword ptr  8
.text:00410571
.text:00410571                 mov     edi, edi
.text:00410573                 push    ebp
.text:00410574                 mov     ebp, esp
.text:00410576                 push    ebx
.text:00410577                 push    esi
.text:00410578                 mov     esi, ecx
.text:0041057A                 push    edi
.text:0041057B                 mov     edi, edx
.text:0041057D                 test    esi, esi
.text:0041057F                 jz      short loc_41058D
.text:00410581                 mov     edx, [ebp+arg_0]
.text:00410584                 mov     ecx, edi
.text:00410586                 push    1
.text:00410588                 call    sub_41053B
.text:0041058D
.text:0041058D loc_41058D:                             ; CODE XREF: sub_410571+E↑j
.text:0041058D                 push    [ebp+arg_0]
.text:00410590                 mov     edx, edi
.text:00410592                 call    sub_410372
.text:00410597                 push    [ebp+arg_0]
.text:0041059A                 mov     edx, edi
.text:0041059C                 mov     ecx, esi
.text:0041059E                 mov     ebx, eax
.text:004105A0                 call    sub_4104B3
.text:004105A5                 test    ebx, ebx
.text:004105A7                 jns     short loc_4105AD
.text:004105A9                 mov     eax, ebx
.text:004105AB                 jmp     short loc_4105B5
.text:004105AD ; ---------------------------------------------------------------------------
.text:004105AD
.text:004105AD loc_4105AD:                             ; CODE XREF: sub_410571+36↑j
.text:004105AD                 neg     esi
.text:004105AF                 sbb     esi, esi
.text:004105B1                 not     esi
.text:004105B3                 and     eax, esi
.text:004105B5
.text:004105B5 loc_4105B5:                             ; CODE XREF: sub_410571+3A↑j
.text:004105B5                 pop     edi
.text:004105B6                 pop     esi
.text:004105B7                 pop     ebx
.text:004105B8                 pop     ebp
.text:004105B9                 retn    4
.text:004105B9 sub_410571      endp
.text:004105B9
.text:004105BC
.text:004105BC ; =============== S U B R O U T I N E =======================================
.text:004105BC
.text:004105BC ; Attributes: bp-based frame
.text:004105BC
.text:004105BC sub_4105BC      proc near               ; CODE XREF: ArgApplyRules(int)+51F↑p
.text:004105BC                                         ; ArgApplyRules(int)+6C2↑p ...
.text:004105BC
.text:004105BC arg_0           = dword ptr  8
.text:004105BC
.text:004105BC                 mov     edi, edi
.text:004105BE                 push    ebp
.text:004105BF                 mov     ebp, esp
.text:004105C1                 push    esi
.text:004105C2                 mov     esi, edx
.text:004105C4                 push    edi
.text:004105C5                 test    ecx, ecx
.text:004105C7                 jz      short loc_4105D5
.text:004105C9                 mov     edx, [ebp+arg_0]
.text:004105CC                 mov     ecx, esi
.text:004105CE                 push    0
.text:004105D0                 call    sub_41053B
.text:004105D5
.text:004105D5 loc_4105D5:                             ; CODE XREF: sub_4105BC+B↑j
.text:004105D5                 push    [ebp+arg_0]
.text:004105D8                 mov     edx, esi
.text:004105DA                 call    sub_410372
.text:004105DF                 push    [ebp+arg_0]
.text:004105E2                 mov     edx, esi
.text:004105E4                 mov     edi, eax
.text:004105E6                 call    sub_410412
.text:004105EB                 test    edi, edi
.text:004105ED                 jns     short loc_4105F1
.text:004105EF                 mov     eax, edi
.text:004105F1
.text:004105F1 loc_4105F1:                             ; CODE XREF: sub_4105BC+31↑j
.text:004105F1                 pop     edi
.text:004105F2                 pop     esi
.text:004105F3                 pop     ebp
.text:004105F4                 retn    4
.text:004105F4 sub_4105BC      endp
.text:004105F4
.text:004105F7
.text:004105F7 ; =============== S U B R O U T I N E =======================================
.text:004105F7
.text:004105F7 ; Attributes: bp-based frame
.text:004105F7
.text:004105F7 ; int __thiscall sub_4105F7(HANDLE hConsoleHandle)
.text:004105F7 sub_4105F7      proc near               ; CODE XREF: sub_40E5A2+4E↑p
.text:004105F7                                         ; sub_40FF6D+4E↑p
.text:004105F7
.text:004105F7 Mode            = dword ptr -4
.text:004105F7
.text:004105F7                 mov     edi, edi
.text:004105F9                 push    ebp
.text:004105FA                 mov     ebp, esp
.text:004105FC                 push    ecx
.text:004105FD                 push    esi
.text:004105FE                 mov     esi, ecx
.text:00410600                 push    esi             ; hFile
.text:00410601                 call    ds:GetFileType
.text:00410607                 and     eax, 0FFFF7FFFh
.text:0041060C                 mov     [ebp+Mode], eax
.text:0041060F                 cmp     eax, 2
.text:00410612                 jz      short loc_410618
.text:00410614                 xor     eax, eax
.text:00410616                 jmp     short loc_41064B
.text:00410618 ; ---------------------------------------------------------------------------
.text:00410618
.text:00410618 loc_410618:                             ; CODE XREF: sub_4105F7+1B↑j
.text:00410618                 lea     eax, [ebp+Mode]
.text:0041061B                 push    eax             ; lpMode
.text:0041061C                 push    esi             ; hConsoleHandle
.text:0041061D                 call    ds:GetConsoleMode
.text:00410623                 test    eax, eax
.text:00410625                 jz      short loc_41062B
.text:00410627                 xor     eax, eax
.text:00410629                 jmp     short loc_410646
.text:0041062B ; ---------------------------------------------------------------------------
.text:0041062B
.text:0041062B loc_41062B:                             ; CODE XREF: sub_4105F7+2E↑j
.text:0041062B                 call    ds:GetLastError
.text:00410631                 test    eax, eax
.text:00410633                 jz      short loc_410641
.text:00410635                 jle     short loc_410646
.text:00410637                 movzx   eax, ax
.text:0041063A                 or      eax, 80070000h
.text:0041063F                 jmp     short loc_410646
.text:00410641 ; ---------------------------------------------------------------------------
.text:00410641
.text:00410641 loc_410641:                             ; CODE XREF: sub_4105F7+3C↑j
.text:00410641                 mov     eax, 80004005h
.text:00410646
.text:00410646 loc_410646:                             ; CODE XREF: sub_4105F7+32↑j
.text:00410646                                         ; sub_4105F7+3E↑j ...
.text:00410646                 not     eax
.text:00410648                 shr     eax, 1Fh
.text:0041064B
.text:0041064B loc_41064B:                             ; CODE XREF: sub_4105F7+1F↑j
.text:0041064B                 pop     esi
.text:0041064C                 mov     esp, ebp
.text:0041064E                 pop     ebp
.text:0041064F                 retn
.text:0041064F sub_4105F7      endp
.text:0041064F
.text:00410650
.text:00410650 ; =============== S U B R O U T I N E =======================================
.text:00410650
.text:00410650 ; Attributes: bp-based frame info_from_lumina
.text:00410650
.text:00410650 ; int __stdcall ArgExpandFiles(unsigned __int16 **, int)
.text:00410650 ?ArgExpandFiles@@YGJPAPAGH@Z proc near  ; CODE XREF: sub_410D8A+AA↓p
.text:00410650                                         ; sub_410E58+179↓p
.text:00410650
.text:00410650 var_A8C         = dword ptr -0A8Ch
.text:00410650 var_A88         = dword ptr -0A88h
.text:00410650 hFindFile       = dword ptr -0A84h
.text:00410650 var_A80         = dword ptr -0A80h
.text:00410650 lpMem           = dword ptr -0A7Ch
.text:00410650 pszSrc          = word ptr -0A78h
.text:00410650 cchDest         = dword ptr -0A74h
.text:00410650 var_A70         = dword ptr -0A70h
.text:00410650 lpFileName      = dword ptr -0A6Ch
.text:00410650 FindFileData    = _WIN32_FIND_DATAW ptr -0A68h
.text:00410650 Filename        = word ptr -818h
.text:00410650 Ext             = word ptr -618h
.text:00410650 Buffer          = word ptr -418h
.text:00410650 Dir             = word ptr -210h
.text:00410650 Drive           = word ptr -0Ch
.text:00410650 var_4           = dword ptr -4
.text:00410650
.text:00410650                 mov     edi, edi
.text:00410652                 push    ebp
.text:00410653                 mov     ebp, esp
.text:00410655                 sub     esp, 0A8Ch
.text:0041065B                 mov     eax, ___security_cookie
.text:00410660                 xor     eax, ebp
.text:00410662                 mov     [ebp+var_4], eax
.text:00410665                 or      [ebp+hFindFile], 0FFFFFFFFh
.text:0041066C                 xor     eax, eax
.text:0041066E                 push    ebx
.text:0041066F                 push    esi             ; dwFlags
.text:00410670                 push    edi             ; pcchRemaining
.text:00410671                 push    800h            ; dwBytes
.text:00410676                 xor     ebx, ebx
.text:00410678                 mov     [ebp+var_A80], edx
.text:0041067E                 mov     edi, 400h
.text:00410683                 mov     [ebp+var_A88], ecx
.text:00410689                 push    eax             ; dwFlags
.text:0041068A                 inc     ebx
.text:0041068B                 mov     dword ptr [ebp+pszSrc], edi
.text:00410691                 mov     [ebp+var_A8C], eax
.text:00410697                 mov     [ebp+var_A70], eax
.text:0041069D                 call    ds:GetProcessHeap
.text:004106A3                 push    eax             ; hHeap
.text:004106A4                 call    ds:HeapAlloc
.text:004106AA                 mov     [ebp+lpMem], eax
.text:004106B0                 test    eax, eax
.text:004106B2                 jnz     short loc_4106BE
.text:004106B4                 mov     ebx, 8007000Eh
.text:004106B9                 jmp     loc_410984
.text:004106BE ; ---------------------------------------------------------------------------
.text:004106BE
.text:004106BE loc_4106BE:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+62↑j
.text:004106BE                 mov     edx, [ebp+var_A88]
.text:004106C4                 xor     ecx, ecx
.text:004106C6                 mov     [eax], cx
.text:004106C9                 mov     esi, eax
.text:004106CB                 xor     eax, eax
.text:004106CD                 mov     [ebp+cchDest], esi
.text:004106D3                 mov     edx, [edx]
.text:004106D5                 mov     [ebp+lpFileName], edx
.text:004106DB                 cmp     [edx], ax
.text:004106DE                 jz      loc_410997
.text:004106E4
.text:004106E4 loc_4106E4:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+257↓j
.text:004106E4                 mov     ecx, 100h
.text:004106E9                 lea     eax, [ebp+Ext]
.text:004106EF                 push    ecx             ; ExtCount
.text:004106F0                 push    eax             ; Ext
.text:004106F1                 push    ecx             ; FilenameCount
.text:004106F2                 lea     eax, [ebp+Filename]
.text:004106F8                 push    eax             ; Filename
.text:004106F9                 push    ecx             ; DirCount
.text:004106FA                 lea     eax, [ebp+Dir]
.text:00410700                 push    eax             ; Dir
.text:00410701                 push    3               ; DriveCount
.text:00410703                 lea     eax, [ebp+Drive]
.text:00410706                 push    eax             ; Drive
.text:00410707                 push    edx             ; FullPath
.text:00410708                 call    ds:_wsplitpath_s
.text:0041070E                 add     esp, 24h
.text:00410711                 lea     eax, [ebp+FindFileData]
.text:00410717                 push    eax             ; lpFindFileData
.text:00410718                 push    [ebp+lpFileName] ; lpFileName
.text:0041071E                 call    ds:FindFirstFileW
.text:00410724                 mov     [ebp+hFindFile], eax
.text:0041072A                 cmp     eax, 0FFFFFFFFh
.text:0041072D                 jz      loc_4108B8
.text:00410733
.text:00410733 loc_410733:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+20A↓j
.text:00410733                 mov     ecx, offset asc_4038E8 ; "."
.text:00410738                 lea     eax, [ebp+FindFileData.cFileName]
.text:0041073E
.text:0041073E loc_41073E:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+10E↓j
.text:0041073E                 mov     dx, [eax]
.text:00410741                 cmp     dx, [ecx]
.text:00410744                 jnz     short loc_410764
.text:00410746                 test    dx, dx
.text:00410749                 jz      short loc_410760
.text:0041074B                 mov     dx, [eax+2]
.text:0041074F                 cmp     dx, [ecx+2]
.text:00410753                 jnz     short loc_410764
.text:00410755                 add     eax, 4
.text:00410758                 add     ecx, 4
.text:0041075B                 test    dx, dx
.text:0041075E                 jnz     short loc_41073E
.text:00410760
.text:00410760 loc_410760:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+F9↑j
.text:00410760                 xor     eax, eax
.text:00410762                 jmp     short loc_410769
.text:00410764 ; ---------------------------------------------------------------------------
.text:00410764
.text:00410764 loc_410764:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+F4↑j
.text:00410764                                         ; ArgExpandFiles(ushort * *,int)+103↑j
.text:00410764                 sbb     eax, eax
.text:00410766                 or      eax, 1
.text:00410769
.text:00410769 loc_410769:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+112↑j
.text:00410769                 test    eax, eax
.text:0041076B                 jz      loc_410845
.text:00410771                 mov     ecx, offset asc_4038EC ; ".."
.text:00410776                 lea     eax, [ebp+FindFileData.cFileName]
.text:0041077C
.text:0041077C loc_41077C:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+14C↓j
.text:0041077C                 mov     dx, [eax]
.text:0041077F                 cmp     dx, [ecx]
.text:00410782                 jnz     short loc_4107A2
.text:00410784                 test    dx, dx
.text:00410787                 jz      short loc_41079E
.text:00410789                 mov     dx, [eax+2]
.text:0041078D                 cmp     dx, [ecx+2]
.text:00410791                 jnz     short loc_4107A2
.text:00410793                 add     eax, 4
.text:00410796                 add     ecx, 4
.text:00410799                 test    dx, dx
.text:0041079C                 jnz     short loc_41077C
.text:0041079E
.text:0041079E loc_41079E:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+137↑j
.text:0041079E                 xor     eax, eax
.text:004107A0                 jmp     short loc_4107A7
.text:004107A2 ; ---------------------------------------------------------------------------
.text:004107A2
.text:004107A2 loc_4107A2:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+132↑j
.text:004107A2                                         ; ArgExpandFiles(ushort * *,int)+141↑j
.text:004107A2                 sbb     eax, eax
.text:004107A4                 or      eax, 1
.text:004107A7
.text:004107A7 loc_4107A7:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+150↑j
.text:004107A7                 test    eax, eax
.text:004107A9                 jz      loc_410845
.text:004107AF                 push    offset ppszDestEnd ; ppszDestEnd
.text:004107B4                 lea     eax, [ebp+FindFileData.cFileName]
.text:004107BA                 push    eax             ; Filename
.text:004107BB                 lea     eax, [ebp+Dir]
.text:004107C1                 push    eax             ; Dir
.text:004107C2                 lea     eax, [ebp+Drive]
.text:004107C5                 push    eax             ; Drive
.text:004107C6                 lea     eax, [ebp+Buffer]
.text:004107CC                 push    104h            ; BufferCount
.text:004107D1                 push    eax             ; Buffer
.text:004107D2                 call    ds:_wmakepath_s
.text:004107D8                 add     esp, 14h
.text:004107DB                 lea     eax, [ebp+pszSrc]
.text:004107E1                 mov     edx, edi
.text:004107E3                 mov     ecx, esi
.text:004107E5                 push    eax             ; pszSrc
.text:004107E6                 lea     eax, [ebp+cchDest]
.text:004107EC                 push    eax             ; cchDest
.text:004107ED                 lea     eax, [ebp+Buffer]
.text:004107F3                 push    eax             ; pszDest
.text:004107F4                 call    _StringCchCopyExW@24 ; StringCchCopyExW(x,x,x,x,x,x)
.text:004107F9                 mov     ebx, eax
.text:004107FB                 test    ebx, ebx
.text:004107FD                 js      loc_41094A
.text:00410803                 mov     edi, dword ptr [ebp+pszSrc]
.text:00410809                 test    edi, edi
.text:0041080B                 jz      loc_410945
.text:00410811                 mov     esi, [ebp+var_A70]
.text:00410817                 xor     eax, eax
.text:00410819                 inc     esi
.text:0041081A                 mov     [ebp+var_A70], esi
.text:00410820                 cmp     [ebp+var_A80], eax
.text:00410826                 jz      loc_4109A3
.text:0041082C                 mov     esi, [ebp+cchDest]
.text:00410832                 add     esi, 2
.text:00410835                 dec     edi
.text:00410836                 mov     [ebp+cchDest], esi
.text:0041083C                 mov     dword ptr [ebp+pszSrc], edi
.text:00410842                 mov     [esi], ax
.text:00410845
.text:00410845 loc_410845:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+11B↑j
.text:00410845                                         ; ArgExpandFiles(ushort * *,int)+159↑j
.text:00410845                 lea     eax, [ebp+FindFileData]
.text:0041084B                 push    eax             ; lpFindFileData
.text:0041084C                 push    [ebp+hFindFile] ; hFindFile
.text:00410852                 call    ds:FindNextFileW
.text:00410858                 test    eax, eax
.text:0041085A                 jnz     loc_410733
.text:00410860
.text:00410860 loc_410860:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+27A↓j
.text:00410860                                         ; ArgExpandFiles(ushort * *,int)+28E↓j
.text:00410860                 mov     eax, [ebp+var_A80]
.text:00410866
.text:00410866 loc_410866:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+2F0↓j
.text:00410866                 test    eax, eax
.text:00410868                 jz      loc_41099B
.text:0041086E                 mov     edx, [ebp+lpFileName]
.text:00410874                 mov     ecx, edx
.text:00410876                 lea     eax, [ecx+2]
.text:00410879                 mov     [ebp+lpFileName], eax
.text:0041087F
.text:0041087F loc_41087F:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+23C↓j
.text:0041087F                 mov     ax, [ecx]
.text:00410882                 add     ecx, 2
.text:00410885                 cmp     ax, word ptr [ebp+var_A8C]
.text:0041088C                 jnz     short loc_41087F
.text:0041088E                 sub     ecx, [ebp+lpFileName]
.text:00410894                 xor     eax, eax
.text:00410896                 sar     ecx, 1
.text:00410898                 lea     edx, [edx+ecx*2]
.text:0041089B                 add     edx, 2
.text:0041089E                 mov     [ebp+lpFileName], edx
.text:004108A4                 cmp     [edx], ax
.text:004108A7                 jnz     loc_4106E4
.text:004108AD                 mov     esi, [ebp+var_A70]
.text:004108B3                 jmp     loc_4109A3
.text:004108B8 ; ---------------------------------------------------------------------------
.text:004108B8
.text:004108B8 loc_4108B8:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+DD↑j
.text:004108B8                 push    2Ah ; '*'       ; Ch
.text:004108BA                 push    [ebp+lpFileName] ; Str
.text:004108C0                 call    ds:wcschr
.text:004108C6                 pop     ecx
.text:004108C7                 pop     ecx
.text:004108C8                 test    eax, eax
.text:004108CA                 jnz     short loc_410860
.text:004108CC                 push    3Fh ; '?'       ; Ch
.text:004108CE                 push    [ebp+lpFileName] ; Str
.text:004108D4                 call    ds:wcschr
.text:004108DA                 pop     ecx
.text:004108DB                 pop     ecx
.text:004108DC                 test    eax, eax
.text:004108DE                 jnz     short loc_410860
.text:004108E0                 push    ecx             ; ppszDestEnd
.text:004108E1                 lea     eax, [ebp+pszSrc]
.text:004108E7                 mov     edx, edi
.text:004108E9                 push    eax             ; pszSrc
.text:004108EA                 lea     eax, [ebp+cchDest]
.text:004108F0                 mov     ecx, esi
.text:004108F2                 push    eax             ; cchDest
.text:004108F3                 push    [ebp+lpFileName] ; pszDest
.text:004108F9                 call    _StringCchCopyExW@24 ; StringCchCopyExW(x,x,x,x,x,x)
.text:004108FE                 mov     ebx, eax
.text:00410900                 test    ebx, ebx
.text:00410902                 js      short loc_410969
.text:00410904                 mov     edi, dword ptr [ebp+pszSrc]
.text:0041090A                 test    edi, edi
.text:0041090C                 jz      short loc_410964
.text:0041090E                 mov     esi, [ebp+var_A70]
.text:00410914                 mov     eax, [ebp+var_A80]
.text:0041091A                 inc     esi
.text:0041091B                 mov     [ebp+var_A70], esi
.text:00410921                 test    eax, eax
.text:00410923                 jz      short loc_4109A1
.text:00410925                 mov     esi, [ebp+cchDest]
.text:0041092B                 xor     ecx, ecx
.text:0041092D                 add     esi, 2
.text:00410930                 dec     edi
.text:00410931                 mov     [ebp+cchDest], esi
.text:00410937                 mov     dword ptr [ebp+pszSrc], edi
.text:0041093D                 mov     [esi], cx
.text:00410940                 jmp     loc_410866
.text:00410945 ; ---------------------------------------------------------------------------
.text:00410945
.text:00410945 loc_410945:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+1BB↑j
.text:00410945                 mov     ebx, 8007007Ah
.text:0041094A
.text:0041094A loc_41094A:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+1AD↑j
.text:0041094A                 mov     esi, [ebp+lpMem]
.text:00410950
.text:00410950 loc_410950:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+380↓j
.text:00410950                                         ; ArgExpandFiles(ushort * *,int)+38A↓j
.text:00410950                 mov     eax, [ebp+hFindFile]
.text:00410956                 cmp     eax, 0FFFFFFFFh
.text:00410959                 jz      short loc_41096F
.text:0041095B                 push    eax             ; hFindFile
.text:0041095C                 call    ds:FindClose
.text:00410962                 jmp     short loc_41096F
.text:00410964 ; ---------------------------------------------------------------------------
.text:00410964
.text:00410964 loc_410964:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+2BC↑j
.text:00410964                 mov     ebx, 8007007Ah
.text:00410969
.text:00410969 loc_410969:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+2B2↑j
.text:00410969                 mov     esi, [ebp+lpMem]
.text:0041096F
.text:0041096F loc_41096F:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+309↑j
.text:0041096F                                         ; ArgExpandFiles(ushort * *,int)+312↑j
.text:0041096F                 test    esi, esi
.text:00410971                 jz      short loc_410984
.text:00410973                 push    esi             ; lpMem
.text:00410974                 xor     eax, eax
.text:00410976                 push    eax             ; dwFlags
.text:00410977                 call    ds:GetProcessHeap
.text:0041097D                 push    eax             ; hHeap
.text:0041097E                 call    ds:HeapFree
.text:00410984
.text:00410984 loc_410984:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+69↑j
.text:00410984                                         ; ArgExpandFiles(ushort * *,int)+321↑j
.text:00410984                 mov     ecx, [ebp+var_4]
.text:00410987                 mov     eax, ebx
.text:00410989                 pop     edi
.text:0041098A                 pop     esi
.text:0041098B                 xor     ecx, ebp        ; StackCookie
.text:0041098D                 pop     ebx
.text:0041098E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410993                 mov     esp, ebp
.text:00410995                 pop     ebp
.text:00410996                 retn
.text:00410997 ; ---------------------------------------------------------------------------
.text:00410997
.text:00410997 loc_410997:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+8E↑j
.text:00410997                 mov     esi, eax
.text:00410999                 jmp     short loc_4109A3
.text:0041099B ; ---------------------------------------------------------------------------
.text:0041099B
.text:0041099B loc_41099B:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+218↑j
.text:0041099B                 mov     esi, [ebp+var_A70]
.text:004109A1
.text:004109A1 loc_4109A1:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+2D3↑j
.text:004109A1                 xor     eax, eax
.text:004109A3
.text:004109A3 loc_4109A3:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+1D6↑j
.text:004109A3                                         ; ArgExpandFiles(ushort * *,int)+263↑j ...
.text:004109A3                 mov     edi, [ebp+var_A88]
.text:004109A9                 cmp     dword ptr [edi], 0
.text:004109AC                 jz      short loc_4109C2
.text:004109AE                 push    dword ptr [edi] ; lpMem
.text:004109B0                 push    eax             ; dwFlags
.text:004109B1                 call    ds:GetProcessHeap
.text:004109B7                 push    eax             ; hHeap
.text:004109B8                 call    ds:HeapFree
.text:004109BE                 xor     eax, eax
.text:004109C0                 mov     [edi], eax
.text:004109C2
.text:004109C2 loc_4109C2:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+35C↑j
.text:004109C2                 test    esi, esi
.text:004109C4                 mov     esi, [ebp+lpMem]
.text:004109CA                 jz      short loc_4109D5
.text:004109CC                 mov     [edi], esi
.text:004109CE                 mov     esi, eax
.text:004109D0                 jmp     loc_410950
.text:004109D5 ; ---------------------------------------------------------------------------
.text:004109D5
.text:004109D5 loc_4109D5:                             ; CODE XREF: ArgExpandFiles(ushort * *,int)+37A↑j
.text:004109D5                 mov     ebx, 80070002h
.text:004109DA                 jmp     loc_410950
.text:004109DA ?ArgExpandFiles@@YGJPAPAGH@Z endp ; sp-analysis failed
.text:004109DA
.text:004109DF
.text:004109DF ; =============== S U B R O U T I N E =======================================
.text:004109DF
.text:004109DF ; Attributes: bp-based frame info_from_lumina
.text:004109DF
.text:004109DF ; HRESULT __stdcall static StringCopyWorkerW_3(STRSAFE_LPWSTR pszDest, size_t cchDest, size_t *pcchNewDestLength, STRSAFE_PCNZWCH pszSrc, size_t cchToCopy)
.text:004109DF StringCopyWorkerW_3 proc near           ; CODE XREF: StringCchCopyExW(x,x,x,x,x,x)+54↓p
.text:004109DF
.text:004109DF pszDest         = dword ptr  8
.text:004109DF cchDest         = dword ptr  0Ch
.text:004109DF pcchNewDestLength= dword ptr  10h
.text:004109DF pszSrc          = dword ptr  14h
.text:004109DF cchToCopy       = dword ptr  18h
.text:004109DF
.text:004109DF                 mov     edi, edi
.text:004109E1                 push    ebp
.text:004109E2                 mov     ebp, esp
.text:004109E4                 xor     eax, eax
.text:004109E6                 push    esi
.text:004109E7                 mov     esi, eax
.text:004109E9                 test    edx, edx
.text:004109EB                 jz      short loc_410A1C
.text:004109ED                 push    ebx
.text:004109EE                 push    edi
.text:004109EF                 mov     edi, [ebp+cchDest]
.text:004109F2                 mov     ebx, 7FFFFFFEh
.text:004109F7                 sub     edi, ecx
.text:004109F9
.text:004109F9 loc_4109F9:                             ; CODE XREF: StringCopyWorkerW_3+32↓j
.text:004109F9                 test    ebx, ebx
.text:004109FB                 jz      short loc_410A13
.text:004109FD                 movzx   eax, word ptr [edi+ecx]
.text:00410A01                 test    ax, ax
.text:00410A04                 jz      short loc_410A13
.text:00410A06                 mov     [ecx], ax
.text:00410A09                 add     ecx, 2
.text:00410A0C                 dec     ebx
.text:00410A0D                 inc     esi
.text:00410A0E                 sub     edx, 1
.text:00410A11                 jnz     short loc_4109F9
.text:00410A13
.text:00410A13 loc_410A13:                             ; CODE XREF: StringCopyWorkerW_3+1C↑j
.text:00410A13                                         ; StringCopyWorkerW_3+25↑j
.text:00410A13                 pop     edi
.text:00410A14                 pop     ebx
.text:00410A15                 push    0
.text:00410A17                 pop     eax
.text:00410A18                 test    edx, edx
.text:00410A1A                 jnz     short loc_410A25
.text:00410A1C
.text:00410A1C loc_410A1C:                             ; CODE XREF: StringCopyWorkerW_3+C↑j
.text:00410A1C                 sub     ecx, 2
.text:00410A1F                 mov     eax, 8007007Ah
.text:00410A24                 dec     esi
.text:00410A25
.text:00410A25 loc_410A25:                             ; CODE XREF: StringCopyWorkerW_3+3B↑j
.text:00410A25                 xor     edx, edx
.text:00410A27                 mov     [ecx], dx
.text:00410A2A                 mov     ecx, [ebp+pszDest]
.text:00410A2D                 test    ecx, ecx
.text:00410A2F                 jz      short loc_410A33
.text:00410A31                 mov     [ecx], esi
.text:00410A33
.text:00410A33 loc_410A33:                             ; CODE XREF: StringCopyWorkerW_3+50↑j
.text:00410A33                 pop     esi
.text:00410A34                 pop     ebp
.text:00410A35                 retn    0Ch
.text:00410A35 StringCopyWorkerW_3 endp
.text:00410A35
.text:00410A38
.text:00410A38 ; =============== S U B R O U T I N E =======================================
.text:00410A38
.text:00410A38 ; Attributes: bp-based frame info_from_lumina
.text:00410A38
.text:00410A38 ; HRESULT __stdcall StringCchCopyExW(STRSAFE_LPWSTR pszDest, size_t cchDest, STRSAFE_LPCWSTR pszSrc, STRSAFE_LPWSTR *ppszDestEnd, size_t *pcchRemaining, DWORD dwFlags)
.text:00410A38 _StringCchCopyExW@24 proc near          ; CODE XREF: ArgExpandFiles(ushort * *,int)+1A4↑p
.text:00410A38                                         ; ArgExpandFiles(ushort * *,int)+2A9↑p ...
.text:00410A38
.text:00410A38 var_4           = word ptr -4
.text:00410A38 pszDest         = dword ptr  8
.text:00410A38 cchDest         = dword ptr  0Ch
.text:00410A38 pszSrc          = dword ptr  10h
.text:00410A38 ppszDestEnd     = dword ptr  14h
.text:00410A38 pcchRemaining   = dword ptr  18h
.text:00410A38 dwFlags         = dword ptr  1Ch
.text:00410A38
.text:00410A38                 mov     edi, edi
.text:00410A3A                 push    ebp
.text:00410A3B                 mov     ebp, esp
.text:00410A3D                 push    ecx
.text:00410A3E                 push    ebx
.text:00410A3F                 push    esi             ; cchToCopy
.text:00410A40                 push    edi             ; pszSrc
.text:00410A41                 mov     edi, edx
.text:00410A43                 mov     ebx, ecx
.text:00410A45                 xor     ecx, ecx
.text:00410A47                 mov     edx, 80070057h
.text:00410A4C                 mov     esi, ecx
.text:00410A4E                 test    edi, edi
.text:00410A50                 jz      short loc_410A5A
.text:00410A52                 cmp     edi, 7FFFFFFFh
.text:00410A58                 jbe     short loc_410A5C
.text:00410A5A
.text:00410A5A loc_410A5A:                             ; CODE XREF: StringCchCopyExW(x,x,x,x,x,x)+18↑j
.text:00410A5A                 mov     esi, edx
.text:00410A5C
.text:00410A5C loc_410A5C:                             ; CODE XREF: StringCchCopyExW(x,x,x,x,x,x)+20↑j
.text:00410A5C                 test    esi, esi
.text:00410A5E                 js      short loc_410ABB
.text:00410A60                 mov     esi, ecx
.text:00410A62                 test    edi, edi
.text:00410A64                 jnz     short loc_410A7D
.text:00410A66                 mov     eax, [ebp+pszDest]
.text:00410A69                 cmp     [eax], cx
.text:00410A6C                 jz      short loc_410AA7
.text:00410A6E                 test    ebx, ebx
.text:00410A70                 jnz     short loc_410A76
.text:00410A72                 mov     esi, edx
.text:00410A74                 jmp     short loc_410AC4
.text:00410A76 ; ---------------------------------------------------------------------------
.text:00410A76
.text:00410A76 loc_410A76:                             ; CODE XREF: StringCchCopyExW(x,x,x,x,x,x)+38↑j
.text:00410A76                 mov     esi, 8007007Ah
.text:00410A7B                 jmp     short loc_410AA7
.text:00410A7D ; ---------------------------------------------------------------------------
.text:00410A7D
.text:00410A7D loc_410A7D:                             ; CODE XREF: StringCchCopyExW(x,x,x,x,x,x)+2C↑j
.text:00410A7D                 push    ecx             ; pcchNewDestLength
.text:00410A7E                 push    [ebp+pszDest]   ; cchDest
.text:00410A81                 lea     eax, [ebp+var_4]
.text:00410A84                 mov     dword ptr [ebp+var_4], ecx
.text:00410A87                 push    eax             ; pszDest
.text:00410A88                 mov     edx, edi
.text:00410A8A                 mov     ecx, ebx
.text:00410A8C                 call    StringCopyWorkerW_3
.text:00410A91                 mov     ecx, dword ptr [ebp+var_4]
.text:00410A94                 mov     esi, eax
.text:00410A96                 sub     edi, ecx
.text:00410A98                 lea     ebx, [ebx+ecx*2]
.text:00410A9B                 test    esi, esi
.text:00410A9D                 jns     short loc_410AA7
.text:00410A9F                 cmp     esi, 8007007Ah
.text:00410AA5                 jnz     short loc_410AC4
.text:00410AA7
.text:00410AA7 loc_410AA7:                             ; CODE XREF: StringCchCopyExW(x,x,x,x,x,x)+34↑j
.text:00410AA7                                         ; StringCchCopyExW(x,x,x,x,x,x)+43↑j ...
.text:00410AA7                 mov     eax, [ebp+cchDest]
.text:00410AAA                 test    eax, eax
.text:00410AAC                 jz      short loc_410AB0
.text:00410AAE                 mov     [eax], ebx
.text:00410AB0
.text:00410AB0 loc_410AB0:                             ; CODE XREF: StringCchCopyExW(x,x,x,x,x,x)+74↑j
.text:00410AB0                 mov     eax, [ebp+pszSrc]
.text:00410AB3                 test    eax, eax
.text:00410AB5                 jz      short loc_410AC4
.text:00410AB7                 mov     [eax], edi
.text:00410AB9                 jmp     short loc_410AC4
.text:00410ABB ; ---------------------------------------------------------------------------
.text:00410ABB
.text:00410ABB loc_410ABB:                             ; CODE XREF: StringCchCopyExW(x,x,x,x,x,x)+26↑j
.text:00410ABB                 test    edi, edi
.text:00410ABD                 jz      short loc_410AC4
.text:00410ABF                 xor     eax, eax
.text:00410AC1                 mov     [ebx], ax
.text:00410AC4
.text:00410AC4 loc_410AC4:                             ; CODE XREF: StringCchCopyExW(x,x,x,x,x,x)+3C↑j
.text:00410AC4                                         ; StringCchCopyExW(x,x,x,x,x,x)+6D↑j ...
.text:00410AC4                 pop     edi
.text:00410AC5                 mov     eax, esi
.text:00410AC7                 pop     esi
.text:00410AC8                 pop     ebx
.text:00410AC9                 mov     esp, ebp
.text:00410ACB                 pop     ebp
.text:00410ACC                 retn    10h
.text:00410ACC _StringCchCopyExW@24 endp ; sp-analysis failed
.text:00410ACC
.text:00410ACF
.text:00410ACF ; =============== S U B R O U T I N E =======================================
.text:00410ACF
.text:00410ACF ; Attributes: bp-based frame
.text:00410ACF
.text:00410ACF ; int __thiscall sub_410ACF(OLECHAR *psz)
.text:00410ACF sub_410ACF      proc near               ; CODE XREF: sub_410B3A+B8↓p
.text:00410ACF                                         ; sub_411019+FA↓p
.text:00410ACF
.text:00410ACF pvarg           = VARIANTARG ptr -10h
.text:00410ACF
.text:00410ACF                 mov     edi, edi
.text:00410AD1                 push    ebp
.text:00410AD2                 mov     ebp, esp
.text:00410AD4                 sub     esp, 14h
.text:00410AD7                 lea     eax, [ebp+pvarg]
.text:00410ADA                 push    ebx
.text:00410ADB                 push    esi
.text:00410ADC                 push    edi
.text:00410ADD                 push    eax             ; pvarg
.text:00410ADE                 mov     edi, edx
.text:00410AE0                 mov     ebx, ecx
.text:00410AE2                 xor     esi, esi
.text:00410AE4                 call    ds:VariantInit
.text:00410AEA                 test    ebx, ebx
.text:00410AEC                 jnz     short loc_410AF2
.text:00410AEE                 mov     [edi], esi
.text:00410AF0                 jmp     short loc_410B27
.text:00410AF2 ; ---------------------------------------------------------------------------
.text:00410AF2
.text:00410AF2 loc_410AF2:                             ; CODE XREF: sub_410ACF+1D↑j
.text:00410AF2                 push    ebx             ; psz
.text:00410AF3                 call    ds:SysAllocString
.text:00410AF9                 mov     dword ptr [ebp+pvarg.anonymous_0+8], eax
.text:00410AFC                 test    eax, eax
.text:00410AFE                 jnz     short loc_410B07
.text:00410B00                 mov     esi, 8007000Eh
.text:00410B05                 jmp     short loc_410B27
.text:00410B07 ; ---------------------------------------------------------------------------
.text:00410B07
.text:00410B07 loc_410B07:                             ; CODE XREF: sub_410ACF+2F↑j
.text:00410B07                 push    8
.text:00410B09                 pop     eax
.text:00410B0A                 push    13h             ; vt
.text:00410B0C                 mov     word ptr [ebp+pvarg.anonymous_0], ax
.text:00410B10                 lea     eax, [ebp+pvarg]
.text:00410B13                 push    esi             ; wFlags
.text:00410B14                 push    eax             ; pvarSrc
.text:00410B15                 push    eax             ; pvargDest
.text:00410B16                 call    ds:VariantChangeType
.text:00410B1C                 mov     esi, eax
.text:00410B1E                 test    esi, esi
.text:00410B20                 js      short loc_410B27
.text:00410B22                 mov     ecx, dword ptr [ebp+pvarg.anonymous_0+8]
.text:00410B25                 mov     [edi], ecx
.text:00410B27
.text:00410B27 loc_410B27:                             ; CODE XREF: sub_410ACF+21↑j
.text:00410B27                                         ; sub_410ACF+36↑j ...
.text:00410B27                 lea     eax, [ebp+pvarg]
.text:00410B2A                 push    eax             ; pvarg
.text:00410B2B                 call    ds:VariantClear
.text:00410B31                 pop     edi
.text:00410B32                 mov     eax, esi
.text:00410B34                 pop     esi
.text:00410B35                 pop     ebx
.text:00410B36                 mov     esp, ebp
.text:00410B38                 pop     ebp
.text:00410B39                 retn
.text:00410B39 sub_410ACF      endp
.text:00410B39
.text:00410B3A
.text:00410B3A ; =============== S U B R O U T I N E =======================================
.text:00410B3A
.text:00410B3A ; Attributes: bp-based frame
.text:00410B3A
.text:00410B3A sub_410B3A      proc near               ; CODE XREF: sub_411019+129↓p
.text:00410B3A
.text:00410B3A String          = dword ptr -28h
.text:00410B3A var_24          = dword ptr -24h
.text:00410B3A var_20          = word ptr -20h
.text:00410B3A var_1C          = word ptr -1Ch
.text:00410B3A var_18          = word ptr -18h
.text:00410B3A Delimiter       = word ptr -14h
.text:00410B3A var_10          = byte ptr -10h
.text:00410B3A var_4           = dword ptr -4
.text:00410B3A
.text:00410B3A                 mov     edi, edi
.text:00410B3C                 push    ebp
.text:00410B3D                 mov     ebp, esp
.text:00410B3F                 sub     esp, 2Ch
.text:00410B42                 mov     eax, ___security_cookie
.text:00410B47                 xor     eax, ebp
.text:00410B49                 mov     [ebp+var_4], eax
.text:00410B4C                 push    ebx             ; cchDest
.text:00410B4D                 push    esi             ; pszSrc
.text:00410B4E                 push    edi             ; cchDest
.text:00410B4F                 mov     dword ptr [ebp+Delimiter], 3Ah ; ':'
.text:00410B56                 lea     edi, [ebp+var_10]
.text:00410B59                 xor     eax, eax
.text:00410B5B                 mov     ebx, edx
.text:00410B5D                 stosd
.text:00410B5E                 mov     esi, ecx
.text:00410B60                 push    800h            ; dwBytes
.text:00410B65                 push    0               ; dwFlags
.text:00410B67                 stosd
.text:00410B68                 stosd
.text:00410B69                 call    ds:GetProcessHeap
.text:00410B6F                 push    eax             ; hHeap
.text:00410B70                 call    ds:HeapAlloc
.text:00410B76                 mov     edi, eax
.text:00410B78                 mov     [ebp+String], edi
.text:00410B7B                 test    edi, edi
.text:00410B7D                 jnz     short loc_410B89
.text:00410B7F                 mov     edi, 8007000Eh
.text:00410B84                 jmp     loc_410C6C
.text:00410B89 ; ---------------------------------------------------------------------------
.text:00410B89
.text:00410B89 loc_410B89:                             ; CODE XREF: sub_410B3A+43↑j
.text:00410B89                 push    8               ; cchData
.text:00410B8B                 push    edi             ; lpLCData
.text:00410B8C                 push    1Eh             ; LCType
.text:00410B8E                 xor     eax, eax
.text:00410B90                 push    400h            ; Locale
.text:00410B95                 mov     [edi], ax
.text:00410B98                 call    ds:GetLocaleInfoW
.text:00410B9E                 cmp     eax, 1
.text:00410BA1                 jle     short loc_410BBC
.text:00410BA3                 push    edi             ; pszDest
.text:00410BA4                 push    8
.text:00410BA6                 pop     edx
.text:00410BA7                 lea     ecx, [ebp+Delimiter]
.text:00410BAA                 call    _StringCchCopyW@12 ; StringCchCopyW(x,x,x)
.text:00410BAF                 mov     edi, eax
.text:00410BB1                 test    edi, edi
.text:00410BB3                 js      loc_410C5A
.text:00410BB9                 mov     edi, [ebp+String]
.text:00410BBC
.text:00410BBC loc_410BBC:                             ; CODE XREF: sub_410B3A+67↑j
.text:00410BBC                 push    esi             ; pszDest
.text:00410BBD                 mov     edx, 400h
.text:00410BC2                 mov     ecx, edi
.text:00410BC4                 call    _StringCchCopyW@12 ; StringCchCopyW(x,x,x)
.text:00410BC9                 mov     edi, eax
.text:00410BCB                 test    edi, edi
.text:00410BCD                 js      loc_410C5A
.text:00410BD3                 lea     eax, [ebp+Delimiter]
.text:00410BD6                 push    eax             ; Delimiter
.text:00410BD7                 push    [ebp+String]    ; String
.text:00410BDA                 call    ds:wcstok
.text:00410BE0                 pop     ecx
.text:00410BE1                 pop     ecx
.text:00410BE2                 lea     ecx, [ebp+var_20]
.text:00410BE5                 xor     esi, esi
.text:00410BE7                 mov     [ebp+var_24], ecx
.text:00410BEA
.text:00410BEA loc_410BEA:                             ; CODE XREF: sub_410B3A+DC↓j
.text:00410BEA                 test    eax, eax
.text:00410BEC                 jz      short loc_410C18
.text:00410BEE                 mov     edx, ecx
.text:00410BF0                 mov     ecx, eax        ; psz
.text:00410BF2                 call    sub_410ACF
.text:00410BF7                 add     [ebp+var_24], 4
.text:00410BFB                 mov     edi, eax
.text:00410BFD                 inc     esi
.text:00410BFE                 test    edi, edi
.text:00410C00                 js      short loc_410C5A
.text:00410C02                 lea     eax, [ebp+Delimiter]
.text:00410C05                 push    eax             ; Delimiter
.text:00410C06                 push    0               ; String
.text:00410C08                 call    ds:wcstok
.text:00410C0E                 pop     ecx
.text:00410C0F                 pop     ecx
.text:00410C10                 mov     ecx, [ebp+var_24]
.text:00410C13                 cmp     esi, 3
.text:00410C16                 jb      short loc_410BEA
.text:00410C18
.text:00410C18 loc_410C18:                             ; CODE XREF: sub_410B3A+B2↑j
.text:00410C18                 sub     esi, 1
.text:00410C1B                 jz      short loc_410C52
.text:00410C1D                 sub     esi, 1
.text:00410C20                 jz      short loc_410C44
.text:00410C22                 sub     esi, 1
.text:00410C25                 jz      short loc_410C2E
.text:00410C27                 mov     edi, 80070057h
.text:00410C2C                 jmp     short loc_410C5A
.text:00410C2E ; ---------------------------------------------------------------------------
.text:00410C2E
.text:00410C2E loc_410C2E:                             ; CODE XREF: sub_410B3A+EB↑j
.text:00410C2E                 mov     ax, [ebp+var_20]
.text:00410C32                 mov     [ebx+64h], ax
.text:00410C36                 mov     ax, [ebp+var_1C]
.text:00410C3A                 mov     [ebx+66h], ax
.text:00410C3E                 mov     ax, [ebp+var_18]
.text:00410C42                 jmp     short loc_410C56
.text:00410C44 ; ---------------------------------------------------------------------------
.text:00410C44
.text:00410C44 loc_410C44:                             ; CODE XREF: sub_410B3A+E6↑j
.text:00410C44                 mov     ax, [ebp+var_20]
.text:00410C48                 mov     [ebx+66h], ax
.text:00410C4C                 mov     ax, [ebp+var_1C]
.text:00410C50                 jmp     short loc_410C56
.text:00410C52 ; ---------------------------------------------------------------------------
.text:00410C52
.text:00410C52 loc_410C52:                             ; CODE XREF: sub_410B3A+E1↑j
.text:00410C52                 mov     ax, [ebp+var_20]
.text:00410C56
.text:00410C56 loc_410C56:                             ; CODE XREF: sub_410B3A+108↑j
.text:00410C56                                         ; sub_410B3A+116↑j
.text:00410C56                 mov     [ebx+68h], ax
.text:00410C5A
.text:00410C5A loc_410C5A:                             ; CODE XREF: sub_410B3A+79↑j
.text:00410C5A                                         ; sub_410B3A+93↑j ...
.text:00410C5A                 push    [ebp+String]    ; lpMem
.text:00410C5D                 push    0               ; dwFlags
.text:00410C5F                 call    ds:GetProcessHeap
.text:00410C65                 push    eax             ; hHeap
.text:00410C66                 call    ds:HeapFree
.text:00410C6C
.text:00410C6C loc_410C6C:                             ; CODE XREF: sub_410B3A+4A↑j
.text:00410C6C                 mov     ecx, [ebp+var_4]
.text:00410C6F                 mov     eax, edi
.text:00410C71                 pop     edi
.text:00410C72                 pop     esi
.text:00410C73                 xor     ecx, ebp        ; StackCookie
.text:00410C75                 pop     ebx
.text:00410C76                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410C7B                 mov     esp, ebp
.text:00410C7D                 pop     ebp
.text:00410C7E                 retn
.text:00410C7E sub_410B3A      endp ; sp-analysis failed
.text:00410C7E
.text:00410C7F
.text:00410C7F ; =============== S U B R O U T I N E =======================================
.text:00410C7F
.text:00410C7F ; Attributes: bp-based frame
.text:00410C7F
.text:00410C7F sub_410C7F      proc near               ; CODE XREF: sub_411019+118↓p
.text:00410C7F
.text:00410C7F vtime           = qword ptr -30h
.text:00410C7F pdateOut        = qword ptr -14h
.text:00410C7F lpMem           = dword ptr -0Ch
.text:00410C7F var_8           = dword ptr -8
.text:00410C7F arg_0           = dword ptr  8
.text:00410C7F
.text:00410C7F                 mov     edi, edi
.text:00410C81                 push    ebp
.text:00410C82                 mov     ebp, esp
.text:00410C84                 sub     esp, 18h
.text:00410C87                 mov     eax, ___security_cookie
.text:00410C8C                 xor     eax, ebp
.text:00410C8E                 mov     [ebp+var_8], eax
.text:00410C91                 and     [ebp+lpMem], 0
.text:00410C95                 push    ebx
.text:00410C96                 push    esi             ; pszSrc
.text:00410C97                 push    edi             ; cchDest
.text:00410C98                 push    800h            ; dwBytes
.text:00410C9D                 push    0               ; dwFlags
.text:00410C9F                 mov     esi, edx
.text:00410CA1                 mov     ebx, ecx
.text:00410CA3                 call    ds:GetProcessHeap
.text:00410CA9                 push    eax             ; hHeap
.text:00410CAA                 call    ds:HeapAlloc
.text:00410CB0                 mov     edi, eax
.text:00410CB2                 test    edi, edi
.text:00410CB4                 jnz     short loc_410CC0
.text:00410CB6                 mov     esi, 8007000Eh
.text:00410CBB                 jmp     loc_410D5D
.text:00410CC0 ; ---------------------------------------------------------------------------
.text:00410CC0
.text:00410CC0 loc_410CC0:                             ; CODE XREF: sub_410C7F+35↑j
.text:00410CC0                 xor     eax, eax
.text:00410CC2                 mov     edx, 400h
.text:00410CC7                 push    esi             ; pszDest
.text:00410CC8                 mov     ecx, edi
.text:00410CCA                 mov     [edi], ax
.text:00410CCD                 call    _StringCchCopyW@12 ; StringCchCopyW(x,x,x)
.text:00410CD2                 mov     esi, eax
.text:00410CD4                 test    esi, esi
.text:00410CD6                 js      short loc_410D4D
.text:00410CD8                 mov     esi, [ebx+4]
.text:00410CDB                 lea     eax, [ebp+lpMem]
.text:00410CDE                 push    eax
.text:00410CDF                 push    ebx
.text:00410CE0                 mov     ecx, esi
.text:00410CE2                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00410CE8                 call    esi
.text:00410CEA                 mov     esi, eax
.text:00410CEC                 test    esi, esi
.text:00410CEE                 js      short loc_410D4D
.text:00410CF0                 jnz     short loc_410D1E
.text:00410CF2                 push    offset asc_4034A0 ; " "
.text:00410CF7                 mov     edx, 400h
.text:00410CFC                 mov     ecx, edi
.text:00410CFE                 call    sub_407955
.text:00410D03                 mov     esi, eax
.text:00410D05                 test    esi, esi
.text:00410D07                 js      short loc_410D4D
.text:00410D09                 push    [ebp+lpMem]
.text:00410D0C                 mov     edx, 400h
.text:00410D11                 mov     ecx, edi
.text:00410D13                 call    sub_407955
.text:00410D18                 mov     esi, eax
.text:00410D1A                 test    esi, esi
.text:00410D1C                 js      short loc_410D4D
.text:00410D1E
.text:00410D1E loc_410D1E:                             ; CODE XREF: sub_410C7F+71↑j
.text:00410D1E                 lea     eax, [ebp+pdateOut]
.text:00410D21                 push    eax             ; pdateOut
.text:00410D22                 push    0               ; dwFlags
.text:00410D24                 push    400h            ; lcid
.text:00410D29                 push    edi             ; strIn
.text:00410D2A                 call    ds:VarDateFromStr
.text:00410D30                 mov     esi, eax
.text:00410D32                 test    esi, esi
.text:00410D34                 js      short loc_410D4D
.text:00410D36                 mov     eax, [ebp+arg_0]
.text:00410D39                 fld     [ebp+pdateOut]
.text:00410D3C                 add     eax, 5Ch ; '\'
.text:00410D3F                 push    eax             ; lpSystemTime
.text:00410D40                 push    ecx
.text:00410D41                 push    ecx
.text:00410D42                 fstp    [esp+30h+vtime] ; vtime
.text:00410D45                 call    ds:VariantTimeToSystemTime
.text:00410D4B                 mov     esi, eax
.text:00410D4D
.text:00410D4D loc_410D4D:                             ; CODE XREF: sub_410C7F+57↑j
.text:00410D4D                                         ; sub_410C7F+6F↑j ...
.text:00410D4D                 push    edi             ; lpMem
.text:00410D4E                 push    0               ; dwFlags
.text:00410D50                 call    ds:GetProcessHeap
.text:00410D56                 push    eax             ; hHeap
.text:00410D57                 call    ds:HeapFree
.text:00410D5D
.text:00410D5D loc_410D5D:                             ; CODE XREF: sub_410C7F+3C↑j
.text:00410D5D                 cmp     [ebp+lpMem], 0
.text:00410D61                 jz      short loc_410D75
.text:00410D63                 push    [ebp+lpMem]     ; lpMem
.text:00410D66                 push    0               ; dwFlags
.text:00410D68                 call    ds:GetProcessHeap
.text:00410D6E                 push    eax             ; hHeap
.text:00410D6F                 call    ds:HeapFree
.text:00410D75
.text:00410D75 loc_410D75:                             ; CODE XREF: sub_410C7F+E2↑j
.text:00410D75                 mov     ecx, [ebp+var_8]
.text:00410D78                 mov     eax, esi
.text:00410D7A                 pop     edi
.text:00410D7B                 pop     esi
.text:00410D7C                 xor     ecx, ebp        ; StackCookie
.text:00410D7E                 pop     ebx
.text:00410D7F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00410D84                 mov     esp, ebp
.text:00410D86                 pop     ebp
.text:00410D87                 retn    4
.text:00410D87 sub_410C7F      endp ; sp-analysis failed
.text:00410D87
.text:00410D8A
.text:00410D8A ; =============== S U B R O U T I N E =======================================
.text:00410D8A
.text:00410D8A ; Attributes: bp-based frame
.text:00410D8A
.text:00410D8A sub_410D8A      proc near               ; CODE XREF: sub_411019+153↓p
.text:00410D8A
.text:00410D8A var_4           = dword ptr -4
.text:00410D8A
.text:00410D8A                 mov     edi, edi
.text:00410D8C                 push    ebp
.text:00410D8D                 mov     ebp, esp
.text:00410D8F                 push    ecx
.text:00410D90                 push    ebx             ; Context
.text:00410D91                 push    esi             ; int
.text:00410D92                 push    edi             ; unsigned __int16 **
.text:00410D93                 mov     ebx, edx
.text:00410D95                 xor     esi, esi
.text:00410D97                 xor     edi, edi
.text:00410D99                 call    sub_40EDB8
.text:00410D9E                 lea     ecx, [ebx+5Ch]
.text:00410DA1                 mov     [ebp+var_4], ecx
.text:00410DA4                 mov     [ecx], eax
.text:00410DA6                 test    eax, eax
.text:00410DA8                 jnz     short loc_410DB4
.text:00410DAA
.text:00410DAA loc_410DAA:                             ; CODE XREF: sub_410D8A+48↓j
.text:00410DAA                 mov     esi, 8007000Eh
.text:00410DAF                 jmp     loc_410E4F
.text:00410DB4 ; ---------------------------------------------------------------------------
.text:00410DB4
.text:00410DB4 loc_410DB4:                             ; CODE XREF: sub_410D8A+1E↑j
.text:00410DB4                 test    byte ptr [ebx+20h], 20h
.text:00410DB8                 jz      short loc_410E2C
.text:00410DBA                 push    800h            ; dwBytes
.text:00410DBF                 push    0               ; dwFlags
.text:00410DC1                 call    ds:GetProcessHeap
.text:00410DC7                 push    eax             ; hHeap
.text:00410DC8                 call    ds:HeapAlloc
.text:00410DCE                 mov     edi, eax
.text:00410DD0                 test    edi, edi
.text:00410DD2                 jz      short loc_410DAA
.text:00410DD4                 xor     eax, eax
.text:00410DD6                 mov     edx, 400h
.text:00410DDB                 mov     [edi], ax
.text:00410DDE                 mov     ecx, edi
.text:00410DE0                 push    dword ptr [ebx+2Ch] ; pszDest
.text:00410DE3                 call    _StringCchCopyW@12 ; StringCchCopyW(x,x,x)
.text:00410DE8                 mov     esi, eax
.text:00410DEA                 test    esi, esi
.text:00410DEC                 js      short loc_410E3B
.text:00410DEE                 push    offset asc_403708 ; "|"
.text:00410DF3                 push    edi             ; String
.text:00410DF4                 call    ds:wcstok
.text:00410DFA                 pop     ecx
.text:00410DFB                 pop     ecx
.text:00410DFC                 test    eax, eax
.text:00410DFE                 jz      short loc_410E25
.text:00410E00                 mov     ebx, [ebp+var_4]
.text:00410E03
.text:00410E03 loc_410E03:                             ; CODE XREF: sub_410D8A+99↓j
.text:00410E03                 push    eax             ; String2
.text:00410E04                 push    dword ptr [ebx] ; String1
.text:00410E06                 call    ds:__imp__wcsicmp
.text:00410E0C                 pop     ecx
.text:00410E0D                 pop     ecx
.text:00410E0E                 test    eax, eax
.text:00410E10                 jz      short loc_410E3B
.text:00410E12                 push    offset asc_403708 ; "|"
.text:00410E17                 push    0               ; String
.text:00410E19                 call    ds:wcstok
.text:00410E1F                 pop     ecx
.text:00410E20                 pop     ecx
.text:00410E21                 test    eax, eax
.text:00410E23                 jnz     short loc_410E03
.text:00410E25
.text:00410E25 loc_410E25:                             ; CODE XREF: sub_410D8A+74↑j
.text:00410E25                 mov     esi, 80070057h
.text:00410E2A                 jmp     short loc_410E3B
.text:00410E2C ; ---------------------------------------------------------------------------
.text:00410E2C
.text:00410E2C loc_410E2C:                             ; CODE XREF: sub_410D8A+2E↑j
.text:00410E2C                 test    byte ptr [ebx+20h], 80h
.text:00410E30                 jz      short loc_410E4F
.text:00410E32                 xor     edx, edx
.text:00410E34                 call    ?ArgExpandFiles@@YGJPAPAGH@Z ; ArgExpandFiles(ushort * *,int)
.text:00410E39                 mov     esi, eax
.text:00410E3B
.text:00410E3B loc_410E3B:                             ; CODE XREF: sub_410D8A+62↑j
.text:00410E3B                                         ; sub_410D8A+86↑j ...
.text:00410E3B                 test    edi, edi
.text:00410E3D                 jz      short loc_410E4F
.text:00410E3F                 push    edi             ; lpMem
.text:00410E40                 push    0               ; dwFlags
.text:00410E42                 call    ds:GetProcessHeap
.text:00410E48                 push    eax             ; hHeap
.text:00410E49                 call    ds:HeapFree
.text:00410E4F
.text:00410E4F loc_410E4F:                             ; CODE XREF: sub_410D8A+25↑j
.text:00410E4F                                         ; sub_410D8A+A6↑j ...
.text:00410E4F                 pop     edi
.text:00410E50                 mov     eax, esi
.text:00410E52                 pop     esi
.text:00410E53                 pop     ebx
.text:00410E54                 mov     esp, ebp
.text:00410E56                 pop     ebp
.text:00410E57                 retn
.text:00410E57 sub_410D8A      endp ; sp-analysis failed
.text:00410E57
.text:00410E58
.text:00410E58 ; =============== S U B R O U T I N E =======================================
.text:00410E58
.text:00410E58 ; Attributes: bp-based frame
.text:00410E58
.text:00410E58 sub_410E58      proc near               ; CODE XREF: sub_411019+13B↓p
.text:00410E58
.text:00410E58 var_1C          = dword ptr -1Ch
.text:00410E58 var_18          = dword ptr -18h
.text:00410E58 var_14          = dword ptr -14h
.text:00410E58 cchDest         = dword ptr -10h
.text:00410E58 pszSrc          = word ptr -0Ch
.text:00410E58 lpMem           = dword ptr -8
.text:00410E58 var_4           = dword ptr -4
.text:00410E58 arg_0           = dword ptr  8
.text:00410E58
.text:00410E58                 mov     edi, edi
.text:00410E5A                 push    ebp
.text:00410E5B                 mov     ebp, esp
.text:00410E5D                 sub     esp, 20h
.text:00410E60                 mov     eax, ___security_cookie
.text:00410E65                 xor     eax, ebp
.text:00410E67                 mov     [ebp+var_4], eax
.text:00410E6A                 and     [ebp+lpMem], 0
.text:00410E6E                 push    ebx
.text:00410E6F                 push    esi
.text:00410E70                 mov     [ebp+var_1C], ecx
.text:00410E73                 xor     esi, esi
.text:00410E75                 push    edi
.text:00410E76                 mov     ecx, edx
.text:00410E78                 mov     [ebp+var_18], esi
.text:00410E7B                 call    sub_40EDB8
.text:00410E80                 mov     [ebp+lpMem], eax
.text:00410E83                 test    eax, eax
.text:00410E85                 jnz     short loc_410E91
.text:00410E87                 mov     esi, 8007000Eh
.text:00410E8C                 jmp     loc_411004
.text:00410E91 ; ---------------------------------------------------------------------------
.text:00410E91
.text:00410E91 loc_410E91:                             ; CODE XREF: sub_410E58+2D↑j
.text:00410E91                 mov     eax, [ebp+arg_0]
.text:00410E94                 test    dword ptr [eax+20h], 8
.text:00410E9B                 jnz     short loc_410ECB
.text:00410E9D                 push    1000h           ; dwBytes
.text:00410EA2                 push    0               ; dwFlags
.text:00410EA4                 call    ds:GetProcessHeap
.text:00410EAA                 push    eax             ; hHeap
.text:00410EAB                 call    ds:HeapAlloc
.text:00410EB1                 mov     edi, eax
.text:00410EB3                 test    edi, edi
.text:00410EB5                 jnz     short loc_410EC1
.text:00410EB7
.text:00410EB7 loc_410EB7:                             ; CODE XREF: sub_410E58+8B↓j
.text:00410EB7                 mov     esi, 8007000Eh
.text:00410EBC                 jmp     loc_410FEC
.text:00410EC1 ; ---------------------------------------------------------------------------
.text:00410EC1
.text:00410EC1 loc_410EC1:                             ; CODE XREF: sub_410E58+5D↑j
.text:00410EC1                 mov     ebx, 7FFh
.text:00410EC6                 mov     dword ptr [ebp+pszSrc], ebx
.text:00410EC9                 jmp     short loc_410F0D
.text:00410ECB ; ---------------------------------------------------------------------------
.text:00410ECB
.text:00410ECB loc_410ECB:                             ; CODE XREF: sub_410E58+43↑j
.text:00410ECB                 push    800h            ; dwBytes
.text:00410ED0                 push    0               ; dwFlags
.text:00410ED2                 call    ds:GetProcessHeap
.text:00410ED8                 push    eax             ; hHeap
.text:00410ED9                 call    ds:HeapAlloc
.text:00410EDF                 mov     edi, eax
.text:00410EE1                 test    edi, edi
.text:00410EE3                 jz      short loc_410EB7
.text:00410EE5                 mov     eax, [ebp+arg_0]
.text:00410EE8                 mov     ebx, 3FFh
.text:00410EED                 mov     dword ptr [ebp+pszSrc], ebx
.text:00410EF0                 xor     esi, esi
.text:00410EF2                 mov     ecx, [eax+2Ch]
.text:00410EF5                 jmp     short loc_410F01
.text:00410EF7 ; ---------------------------------------------------------------------------
.text:00410EF7
.text:00410EF7 loc_410EF7:                             ; CODE XREF: sub_410E58+AF↓j
.text:00410EF7                 cmp     ax, 20h ; ' '
.text:00410EFB                 jnz     short loc_410EFE
.text:00410EFD                 inc     esi
.text:00410EFE
.text:00410EFE loc_410EFE:                             ; CODE XREF: sub_410E58+A3↑j
.text:00410EFE                 add     ecx, 2
.text:00410F01
.text:00410F01 loc_410F01:                             ; CODE XREF: sub_410E58+9D↑j
.text:00410F01                 movzx   eax, word ptr [ecx]
.text:00410F04                 test    ax, ax
.text:00410F07                 jnz     short loc_410EF7
.text:00410F09                 inc     esi
.text:00410F0A                 mov     [ebp+var_18], esi
.text:00410F0D
.text:00410F0D loc_410F0D:                             ; CODE XREF: sub_410E58+71↑j
.text:00410F0D                 and     [ebp+var_14], 0
.text:00410F11                 mov     ecx, edi
.text:00410F13                 mov     [ebp+cchDest], ecx
.text:00410F16
.text:00410F16 loc_410F16:                             ; CODE XREF: sub_410E58+153↓j
.text:00410F16                 push    ecx             ; ppszDestEnd
.text:00410F17                 lea     eax, [ebp+pszSrc]
.text:00410F1A                 mov     edx, ebx
.text:00410F1C                 push    eax             ; pszSrc
.text:00410F1D                 lea     eax, [ebp+cchDest]
.text:00410F20                 push    eax             ; cchDest
.text:00410F21                 push    [ebp+lpMem]     ; pszDest
.text:00410F24                 call    _StringCchCopyExW@24 ; StringCchCopyExW(x,x,x,x,x,x)
.text:00410F29                 test    eax, eax
.text:00410F2B                 jns     short loc_410F34
.text:00410F2D                 mov     ecx, eax
.text:00410F2F                 mov     [ebp+var_14], ecx
.text:00410F32                 jmp     short loc_410F37
.text:00410F34 ; ---------------------------------------------------------------------------
.text:00410F34
.text:00410F34 loc_410F34:                             ; CODE XREF: sub_410E58+D3↑j
.text:00410F34                 mov     ecx, [ebp+var_14]
.text:00410F37
.text:00410F37 loc_410F37:                             ; CODE XREF: sub_410E58+DA↑j
.text:00410F37                 mov     ebx, dword ptr [ebp+pszSrc]
.text:00410F3A                 test    ebx, ebx
.text:00410F3C                 jnz     short loc_410F48
.text:00410F3E                 mov     ecx, 8007007Ah
.text:00410F43                 mov     [ebp+var_14], ecx
.text:00410F46                 jmp     short loc_410F5A
.text:00410F48 ; ---------------------------------------------------------------------------
.text:00410F48
.text:00410F48 loc_410F48:                             ; CODE XREF: sub_410E58+E4↑j
.text:00410F48                 mov     eax, [ebp+cchDest]
.text:00410F4B                 xor     edx, edx
.text:00410F4D                 add     eax, 2
.text:00410F50                 dec     ebx
.text:00410F51                 mov     [ebp+cchDest], eax
.text:00410F54                 mov     dword ptr [ebp+pszSrc], ebx
.text:00410F57                 mov     [eax], dx
.text:00410F5A
.text:00410F5A loc_410F5A:                             ; CODE XREF: sub_410E58+EE↑j
.text:00410F5A                 mov     eax, [ebp+arg_0]
.text:00410F5D                 test    byte ptr [eax+20h], 8
.text:00410F61                 jz      short loc_410F6B
.text:00410F63                 sub     esi, 1
.text:00410F66                 mov     [ebp+var_18], esi
.text:00410F69                 jz      short loc_410FB7
.text:00410F6B
.text:00410F6B loc_410F6B:                             ; CODE XREF: sub_410E58+109↑j
.text:00410F6B                 cmp     [ebp+lpMem], 0
.text:00410F6F                 jz      short loc_410F87
.text:00410F71                 push    [ebp+lpMem]     ; lpMem
.text:00410F74                 push    0               ; dwFlags
.text:00410F76                 call    ds:GetProcessHeap
.text:00410F7C                 push    eax             ; hHeap
.text:00410F7D                 call    ds:HeapFree
.text:00410F83                 and     [ebp+lpMem], 0
.text:00410F87
.text:00410F87 loc_410F87:                             ; CODE XREF: sub_410E58+117↑j
.text:00410F87                 lea     eax, [ebp+lpMem]
.text:00410F8A                 push    eax             ; int
.text:00410F8B                 mov     eax, [ebp+var_1C]
.text:00410F8E                 push    eax             ; unsigned __int16 **
.text:00410F8F                 mov     esi, [eax+4]
.text:00410F92                 mov     ecx, esi
.text:00410F94                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00410F9A                 call    esi
.text:00410F9C                 mov     esi, eax
.text:00410F9E                 test    esi, esi
.text:00410FA0                 js      short loc_410FD8
.text:00410FA2                 mov     ecx, [ebp+cchDest]
.text:00410FA5                 cmp     esi, 1
.text:00410FA8                 mov     esi, [ebp+var_18]
.text:00410FAB                 jnz     loc_410F16
.text:00410FB1                 mov     eax, [ebp+arg_0]
.text:00410FB4                 mov     ecx, [ebp+var_14]
.text:00410FB7
.text:00410FB7 loc_410FB7:                             ; CODE XREF: sub_410E58+111↑j
.text:00410FB7                 test    ecx, ecx
.text:00410FB9                 jns     short loc_410FBF
.text:00410FBB                 mov     esi, ecx
.text:00410FBD                 jmp     short loc_410FD8
.text:00410FBF ; ---------------------------------------------------------------------------
.text:00410FBF
.text:00410FBF loc_410FBF:                             ; CODE XREF: sub_410E58+161↑j
.text:00410FBF                 lea     ecx, [eax+5Ch]
.text:00410FC2                 xor     esi, esi
.text:00410FC4                 mov     [ecx], edi
.text:00410FC6                 xor     edi, edi
.text:00410FC8                 test    byte ptr [eax+20h], 80h
.text:00410FCC                 jz      short loc_410FEC
.text:00410FCE                 xor     edx, edx
.text:00410FD0                 inc     edx
.text:00410FD1                 call    ?ArgExpandFiles@@YGJPAPAGH@Z ; ArgExpandFiles(ushort * *,int)
.text:00410FD6                 mov     esi, eax
.text:00410FD8
.text:00410FD8 loc_410FD8:                             ; CODE XREF: sub_410E58+148↑j
.text:00410FD8                                         ; sub_410E58+165↑j
.text:00410FD8                 test    edi, edi
.text:00410FDA                 jz      short loc_410FEC
.text:00410FDC                 push    edi             ; lpMem
.text:00410FDD                 push    0               ; dwFlags
.text:00410FDF                 call    ds:GetProcessHeap
.text:00410FE5                 push    eax             ; hHeap
.text:00410FE6                 call    ds:HeapFree
.text:00410FEC
.text:00410FEC loc_410FEC:                             ; CODE XREF: sub_410E58+64↑j
.text:00410FEC                                         ; sub_410E58+174↑j ...
.text:00410FEC                 cmp     [ebp+lpMem], 0
.text:00410FF0                 jz      short loc_411004
.text:00410FF2                 push    [ebp+lpMem]     ; lpMem
.text:00410FF5                 push    0               ; dwFlags
.text:00410FF7                 call    ds:GetProcessHeap
.text:00410FFD                 push    eax             ; hHeap
.text:00410FFE                 call    ds:HeapFree
.text:00411004
.text:00411004 loc_411004:                             ; CODE XREF: sub_410E58+34↑j
.text:00411004                                         ; sub_410E58+198↑j
.text:00411004                 mov     ecx, [ebp+var_4]
.text:00411007                 mov     eax, esi
.text:00411009                 pop     edi
.text:0041100A                 pop     esi
.text:0041100B                 xor     ecx, ebp        ; StackCookie
.text:0041100D                 pop     ebx
.text:0041100E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00411013                 mov     esp, ebp
.text:00411015                 pop     ebp
.text:00411016                 retn    4
.text:00411016 sub_410E58      endp ; sp-analysis failed
.text:00411016
.text:00411019
.text:00411019 ; =============== S U B R O U T I N E =======================================
.text:00411019
.text:00411019 ; Attributes: bp-based frame
.text:00411019
.text:00411019 sub_411019      proc near               ; CODE XREF: sub_40FDF4+B0↑p
.text:00411019
.text:00411019 var_C           = dword ptr -0Ch
.text:00411019 lpMem           = dword ptr -8
.text:00411019 var_4           = dword ptr -4
.text:00411019 arg_0           = dword ptr  8
.text:00411019 arg_4           = dword ptr  0Ch
.text:00411019 arg_8           = dword ptr  10h
.text:00411019
.text:00411019                 mov     edi, edi
.text:0041101B                 push    ebp
.text:0041101C                 mov     ebp, esp
.text:0041101E                 sub     esp, 10h
.text:00411021                 mov     eax, ___security_cookie
.text:00411026                 xor     eax, ebp
.text:00411028                 mov     [ebp+var_4], eax
.text:0041102B                 push    ebx
.text:0041102C                 mov     ebx, [ebp+arg_0]
.text:0041102F                 xor     eax, eax
.text:00411031                 mov     [ebp+lpMem], eax
.text:00411034                 push    esi
.text:00411035                 mov     esi, ecx
.text:00411037                 mov     [ebp+var_C], esi
.text:0041103A                 push    edi
.text:0041103B                 mov     edi, edx
.text:0041103D                 cmp     ebx, 5Ch ; '\'
.text:00411040                 jnb     short loc_41104C
.text:00411042                 mov     eax, 80070057h
.text:00411047                 jmp     loc_411196
.text:0041104C ; ---------------------------------------------------------------------------
.text:0041104C
.text:0041104C loc_41104C:                             ; CODE XREF: sub_411019+27↑j
.text:0041104C                 xor     ecx, ecx
.text:0041104E                 inc     ecx
.text:0041104F                 test    byte ptr [edi+20h], 10h
.text:00411053                 jz      short loc_41105E
.text:00411055                 mov     [edi+38h], ecx
.text:00411058                 mov     dword_414FF8, ecx
.text:0041105E
.text:0041105E loc_41105E:                             ; CODE XREF: sub_411019+3A↑j
.text:0041105E                 cmp     [edi+1Ch], eax
.text:00411061                 jz      loc_411194
.text:00411067                 cmp     [edi+4Ch], eax
.text:0041106A                 jz      short loc_411079
.text:0041106C                 test    dword ptr [edi+20h], 100h
.text:00411073                 jnz     loc_411194
.text:00411079
.text:00411079 loc_411079:                             ; CODE XREF: sub_411019+51↑j
.text:00411079                 cmp     [ebp+arg_8], eax
.text:0041107C                 jz      short loc_411097
.text:0041107E                 mov     ecx, [ebp+arg_4]
.text:00411081                 call    sub_40EDB8
.text:00411086                 mov     [ebp+lpMem], eax
.text:00411089                 test    eax, eax
.text:0041108B                 jnz     short loc_4110EC
.text:0041108D                 mov     esi, 8007000Eh
.text:00411092                 jmp     loc_411190
.text:00411097 ; ---------------------------------------------------------------------------
.text:00411097
.text:00411097 loc_411097:                             ; CODE XREF: sub_411019+63↑j
.text:00411097                 lea     eax, [ebp+lpMem]
.text:0041109A                 push    eax
.text:0041109B                 push    esi
.text:0041109C                 mov     esi, [esi+4]
.text:0041109F                 mov     ecx, esi
.text:004110A1                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:004110A7                 call    esi
.text:004110A9                 mov     esi, eax
.text:004110AB                 test    esi, esi
.text:004110AD                 js      loc_411179
.text:004110B3                 cmp     esi, 1
.text:004110B6                 jnz     short loc_4110E9
.text:004110B8                 test    byte ptr [edi+20h], 2
.text:004110BC                 jnz     loc_411177
.text:004110C2                 cmp     [edi+18h], eax
.text:004110C5                 jnz     short loc_4110CC
.text:004110C7                 mov     eax, [edi+28h]
.text:004110CA                 jmp     short loc_4110CF
.text:004110CC ; ---------------------------------------------------------------------------
.text:004110CC
.text:004110CC loc_4110CC:                             ; CODE XREF: sub_411019+AC↑j
.text:004110CC                 mov     eax, [edi+24h]
.text:004110CF
.text:004110CF loc_4110CF:                             ; CODE XREF: sub_411019+B1↑j
.text:004110CF                 push    eax             ; char
.text:004110D0                 push    3C34h           ; uID
.text:004110D5                 push    0               ; int
.text:004110D7                 call    sub_40E7F8
.text:004110DC                 add     esp, 0Ch
.text:004110DF                 mov     esi, 80070057h
.text:004110E4                 jmp     loc_411179
.text:004110E9 ; ---------------------------------------------------------------------------
.text:004110E9
.text:004110E9 loc_4110E9:                             ; CODE XREF: sub_411019+9D↑j
.text:004110E9                 mov     esi, [ebp+var_C]
.text:004110EC
.text:004110EC loc_4110EC:                             ; CODE XREF: sub_411019+72↑j
.text:004110EC                 mov     eax, [edi+1Ch]
.text:004110EF                 sub     eax, 1
.text:004110F2                 jz      short loc_41115B
.text:004110F4                 sub     eax, 1
.text:004110F7                 jz      short loc_411149
.text:004110F9                 sub     eax, 1
.text:004110FC                 jz      short loc_411138
.text:004110FE                 sub     eax, 1
.text:00411101                 jz      short loc_411126
.text:00411103                 sub     eax, 1
.text:00411106                 jnz     short loc_411177
.text:00411108                 cmp     ebx, 60h ; '`'
.text:0041110B                 jnz     short loc_411160
.text:0041110D                 mov     ecx, [ebp+lpMem] ; psz
.text:00411110                 lea     edx, [ebp+var_C]
.text:00411113                 call    sub_410ACF
.text:00411118                 mov     esi, eax
.text:0041111A                 test    esi, esi
.text:0041111C                 js      short loc_411179
.text:0041111E                 mov     eax, [ebp+var_C]
.text:00411121                 mov     [edi+5Ch], eax
.text:00411124                 jmp     short loc_411177
.text:00411126 ; ---------------------------------------------------------------------------
.text:00411126
.text:00411126 loc_411126:                             ; CODE XREF: sub_411019+E8↑j
.text:00411126                 cmp     ebx, 6Ch ; 'l'
.text:00411129                 jnz     short loc_411160
.text:0041112B                 mov     edx, [ebp+lpMem]
.text:0041112E                 mov     ecx, esi
.text:00411130                 push    edi
.text:00411131                 call    sub_410C7F
.text:00411136                 jmp     short loc_411171
.text:00411138 ; ---------------------------------------------------------------------------
.text:00411138
.text:00411138 loc_411138:                             ; CODE XREF: sub_411019+E3↑j
.text:00411138                 cmp     ebx, 6Ch ; 'l'
.text:0041113B                 jnz     short loc_411160
.text:0041113D                 mov     ecx, [ebp+lpMem]
.text:00411140                 mov     edx, edi
.text:00411142                 call    sub_410B3A
.text:00411147                 jmp     short loc_411171
.text:00411149 ; ---------------------------------------------------------------------------
.text:00411149
.text:00411149 loc_411149:                             ; CODE XREF: sub_411019+DE↑j
.text:00411149                 cmp     ebx, 60h ; '`'
.text:0041114C                 jnz     short loc_411160
.text:0041114E                 mov     edx, [ebp+lpMem]
.text:00411151                 mov     ecx, esi
.text:00411153                 push    edi
.text:00411154                 call    sub_410E58
.text:00411159                 jmp     short loc_411171
.text:0041115B ; ---------------------------------------------------------------------------
.text:0041115B
.text:0041115B loc_41115B:                             ; CODE XREF: sub_411019+D9↑j
.text:0041115B                 cmp     ebx, 60h ; '`'
.text:0041115E                 jz      short loc_411167
.text:00411160
.text:00411160 loc_411160:                             ; CODE XREF: sub_411019+F2↑j
.text:00411160                                         ; sub_411019+110↑j ...
.text:00411160                 mov     esi, 80004005h
.text:00411165                 jmp     short loc_411179
.text:00411167 ; ---------------------------------------------------------------------------
.text:00411167
.text:00411167 loc_411167:                             ; CODE XREF: sub_411019+145↑j
.text:00411167                 mov     ecx, [ebp+lpMem]
.text:0041116A                 mov     edx, edi
.text:0041116C                 call    sub_410D8A
.text:00411171
.text:00411171 loc_411171:                             ; CODE XREF: sub_411019+11D↑j
.text:00411171                                         ; sub_411019+12E↑j ...
.text:00411171                 mov     esi, eax
.text:00411173                 test    esi, esi
.text:00411175                 js      short loc_411179
.text:00411177
.text:00411177 loc_411177:                             ; CODE XREF: sub_411019+A3↑j
.text:00411177                                         ; sub_411019+ED↑j ...
.text:00411177                 xor     esi, esi
.text:00411179
.text:00411179 loc_411179:                             ; CODE XREF: sub_411019+94↑j
.text:00411179                                         ; sub_411019+CB↑j ...
.text:00411179                 mov     eax, [ebp+lpMem]
.text:0041117C                 test    eax, eax
.text:0041117E                 jz      short loc_411190
.text:00411180                 push    eax             ; lpMem
.text:00411181                 push    0               ; dwFlags
.text:00411183                 call    ds:GetProcessHeap
.text:00411189                 push    eax             ; hHeap
.text:0041118A                 call    ds:HeapFree
.text:00411190
.text:00411190 loc_411190:                             ; CODE XREF: sub_411019+79↑j
.text:00411190                                         ; sub_411019+165↑j
.text:00411190                 mov     eax, esi
.text:00411192                 jmp     short loc_411196
.text:00411194 ; ---------------------------------------------------------------------------
.text:00411194
.text:00411194 loc_411194:                             ; CODE XREF: sub_411019+48↑j
.text:00411194                                         ; sub_411019+5A↑j
.text:00411194                 xor     eax, eax
.text:00411196
.text:00411196 loc_411196:                             ; CODE XREF: sub_411019+2E↑j
.text:00411196                                         ; sub_411019+179↑j
.text:00411196                 mov     ecx, [ebp+var_4]
.text:00411199                 pop     edi
.text:0041119A                 pop     esi
.text:0041119B                 xor     ecx, ebp        ; StackCookie
.text:0041119D                 pop     ebx
.text:0041119E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004111A3                 mov     esp, ebp
.text:004111A5                 pop     ebp
.text:004111A6                 retn    0Ch
.text:004111A6 sub_411019      endp
.text:004111A6
.text:004111A6 ; ---------------------------------------------------------------------------
.text:004111A9                 align 10h
.text:004111B0
.text:004111B0 ; =============== S U B R O U T I N E =======================================
.text:004111B0
.text:004111B0 ; Attributes: bp-based frame
.text:004111B0
.text:004111B0 sub_4111B0      proc near               ; DATA XREF: .text:00403010↑o
.text:004111B0                                         ; sub_4112A1+44↓o
.text:004111B0
.text:004111B0 arg_0           = dword ptr  8
.text:004111B0 arg_4           = dword ptr  0Ch
.text:004111B0 arg_8           = dword ptr  10h
.text:004111B0
.text:004111B0                 mov     edi, edi
.text:004111B2                 push    ebp
.text:004111B3                 mov     ebp, esp
.text:004111B5                 push    esi
.text:004111B6                 push    edi
.text:004111B7                 mov     edi, [ebp+arg_0]
.text:004111BA                 mov     esi, [edi+0Ch]
.text:004111BD                 cmp     esi, [edi+10h]
.text:004111C0                 jge     short loc_41120D
.text:004111C2                 test    esi, esi
.text:004111C4                 js      short loc_41120D
.text:004111C6                 mov     eax, [edi+14h]
.text:004111C9                 mov     esi, [eax+esi*4]
.text:004111CC                 movzx   eax, word ptr [esi]
.text:004111CF                 push    eax             ; Ch
.text:004111D0                 push    offset Str      ; "-/"
.text:004111D5                 call    ds:wcschr
.text:004111DB                 neg     eax
.text:004111DD                 pop     ecx
.text:004111DE                 pop     ecx
.text:004111DF                 sbb     ecx, ecx
.text:004111E1                 mov     eax, [ebp+arg_8]
.text:004111E4                 neg     ecx
.text:004111E6                 mov     [eax], ecx
.text:004111E8                 neg     ecx
.text:004111EA                 sbb     ecx, ecx
.text:004111EC                 and     ecx, 2
.text:004111EF                 add     ecx, esi
.text:004111F1                 call    sub_40EDB8
.text:004111F6                 mov     ecx, [ebp+arg_4]
.text:004111F9                 mov     [ecx], eax
.text:004111FB                 test    eax, eax
.text:004111FD                 jnz     short loc_411206
.text:004111FF                 mov     eax, 8007000Eh
.text:00411204                 jmp     short loc_411210
.text:00411206 ; ---------------------------------------------------------------------------
.text:00411206
.text:00411206 loc_411206:                             ; CODE XREF: sub_4111B0+4D↑j
.text:00411206                 inc     dword ptr [edi+0Ch]
.text:00411209                 xor     eax, eax
.text:0041120B                 jmp     short loc_411210
.text:0041120D ; ---------------------------------------------------------------------------
.text:0041120D
.text:0041120D loc_41120D:                             ; CODE XREF: sub_4111B0+10↑j
.text:0041120D                                         ; sub_4111B0+14↑j
.text:0041120D                 xor     eax, eax
.text:0041120F                 inc     eax
.text:00411210
.text:00411210 loc_411210:                             ; CODE XREF: sub_4111B0+54↑j
.text:00411210                                         ; sub_4111B0+5B↑j
.text:00411210                 pop     edi
.text:00411211                 pop     esi
.text:00411212                 pop     ebp
.text:00411213                 retn    0Ch
.text:00411213 sub_4111B0      endp
.text:00411213
.text:00411213 ; ---------------------------------------------------------------------------
.text:00411216                 align 10h
.text:00411220
.text:00411220 ; =============== S U B R O U T I N E =======================================
.text:00411220
.text:00411220 ; Attributes: bp-based frame
.text:00411220
.text:00411220 sub_411220      proc near               ; DATA XREF: .text:00403014↑o
.text:00411220                                         ; sub_4112A1+4A↓o
.text:00411220
.text:00411220 arg_0           = dword ptr  8
.text:00411220 arg_4           = dword ptr  0Ch
.text:00411220
.text:00411220                 mov     edi, edi
.text:00411222                 push    ebp
.text:00411223                 mov     ebp, esp
.text:00411225                 push    esi
.text:00411226                 mov     esi, [ebp+arg_0]
.text:00411229                 mov     ecx, [esi+0Ch]
.text:0041122C                 cmp     ecx, [esi+10h]
.text:0041122F                 jge     short loc_411271
.text:00411231                 mov     eax, [esi+14h]
.text:00411234                 mov     eax, [eax+ecx*4]
.text:00411237                 movzx   eax, word ptr [eax]
.text:0041123A                 push    eax             ; Ch
.text:0041123B                 push    offset Str      ; "-/"
.text:00411240                 call    ds:wcschr
.text:00411246                 pop     ecx
.text:00411247                 pop     ecx
.text:00411248                 test    eax, eax
.text:0041124A                 jnz     short loc_411271
.text:0041124C                 mov     eax, [esi+0Ch]
.text:0041124F                 mov     ecx, [esi+14h]
.text:00411252                 mov     ecx, [ecx+eax*4]
.text:00411255                 call    sub_40EDB8
.text:0041125A                 mov     ecx, [ebp+arg_4]
.text:0041125D                 mov     [ecx], eax
.text:0041125F                 test    eax, eax
.text:00411261                 jnz     short loc_41126A
.text:00411263                 mov     eax, 8007000Eh
.text:00411268                 jmp     short loc_411274
.text:0041126A ; ---------------------------------------------------------------------------
.text:0041126A
.text:0041126A loc_41126A:                             ; CODE XREF: sub_411220+41↑j
.text:0041126A                 inc     dword ptr [esi+0Ch]
.text:0041126D                 xor     eax, eax
.text:0041126F                 jmp     short loc_411274
.text:00411271 ; ---------------------------------------------------------------------------
.text:00411271
.text:00411271 loc_411271:                             ; CODE XREF: sub_411220+F↑j
.text:00411271                                         ; sub_411220+2A↑j
.text:00411271                 xor     eax, eax
.text:00411273                 inc     eax
.text:00411274
.text:00411274 loc_411274:                             ; CODE XREF: sub_411220+48↑j
.text:00411274                                         ; sub_411220+4F↑j
.text:00411274                 pop     esi
.text:00411275                 pop     ebp
.text:00411276                 retn    8
.text:00411276 sub_411220      endp
.text:00411276
.text:00411276 ; ---------------------------------------------------------------------------
.text:00411279                 align 10h
.text:00411280 ; Exported entry 107. MFHeapFree
.text:00411280
.text:00411280 ; =============== S U B R O U T I N E =======================================
.text:00411280
.text:00411280 ; Attributes: bp-based frame info_from_lumina
.text:00411280
.text:00411280 ; void __stdcall MFHeapFree(void *pv)
.text:00411280 _MFHeapFree@4   proc near               ; DATA XREF: .text:00403018↑o
.text:00411280                                         ; sub_4112A1+51↓o
.text:00411280
.text:00411280 lpMem           = dword ptr  8
.text:00411280
.text:00411280                 mov     edi, edi
.text:00411282                 push    ebp
.text:00411283                 mov     ebp, esp
.text:00411285                 cmp     [ebp+lpMem], 0
.text:00411289                 jz      short loc_41129D
.text:0041128B                 push    [ebp+lpMem]     ; lpMem
.text:0041128E                 push    0               ; dwFlags
.text:00411290                 call    ds:GetProcessHeap
.text:00411296                 push    eax             ; hHeap
.text:00411297                 call    ds:HeapFree
.text:0041129D
.text:0041129D loc_41129D:                             ; CODE XREF: MFHeapFree(x)+9↑j
.text:0041129D                 pop     ebp
.text:0041129E                 retn    4
.text:0041129E _MFHeapFree@4   endp
.text:0041129E
.text:004112A1
.text:004112A1 ; =============== S U B R O U T I N E =======================================
.text:004112A1
.text:004112A1 ; Attributes: bp-based frame
.text:004112A1
.text:004112A1 sub_4112A1      proc near               ; CODE XREF: sub_40FF6D+B5↑p
.text:004112A1
.text:004112A1 var_8           = dword ptr -8
.text:004112A1 var_4           = dword ptr -4
.text:004112A1 arg_0           = dword ptr  8
.text:004112A1
.text:004112A1                 mov     edi, edi
.text:004112A3                 push    ebp
.text:004112A4                 mov     ebp, esp
.text:004112A6                 push    ecx
.text:004112A7                 push    ecx
.text:004112A8                 push    ebx
.text:004112A9                 push    esi
.text:004112AA                 push    18h             ; dwBytes
.text:004112AC                 xor     ebx, ebx
.text:004112AE                 mov     [ebp+var_8], edx
.text:004112B1                 push    ebx             ; dwFlags
.text:004112B2                 mov     [ebp+var_4], ecx
.text:004112B5                 call    ds:GetProcessHeap
.text:004112BB                 push    eax             ; hHeap
.text:004112BC                 call    ds:HeapAlloc
.text:004112C2                 mov     esi, eax
.text:004112C4                 test    esi, esi
.text:004112C6                 jnz     short loc_4112CF
.text:004112C8                 mov     ebx, 8007000Eh
.text:004112CD                 jmp     short loc_411306
.text:004112CF ; ---------------------------------------------------------------------------
.text:004112CF
.text:004112CF loc_4112CF:                             ; CODE XREF: sub_4112A1+25↑j
.text:004112CF                 push    edi
.text:004112D0                 push    6
.text:004112D2                 xor     eax, eax
.text:004112D4                 mov     edi, esi
.text:004112D6                 pop     ecx
.text:004112D7                 rep stosd
.text:004112D9                 mov     ecx, [ebp+arg_0]
.text:004112DC                 mov     eax, [ebp+var_4]
.text:004112DF                 mov     [esi+10h], eax
.text:004112E2                 mov     eax, [ebp+var_8]
.text:004112E5                 mov     dword ptr [esi], offset sub_4111B0
.text:004112EB                 mov     dword ptr [esi+4], offset sub_411220
.text:004112F2                 mov     dword ptr [esi+8], offset _MFHeapFree@4 ; MFHeapFree(x)
.text:004112F9                 mov     [esi+14h], eax
.text:004112FC                 mov     dword ptr [esi+0Ch], 1
.text:00411303                 mov     [ecx], esi
.text:00411305                 pop     edi
.text:00411306
.text:00411306 loc_411306:                             ; CODE XREF: sub_4112A1+2C↑j
.text:00411306                 pop     esi
.text:00411307                 mov     eax, ebx
.text:00411309                 pop     ebx
.text:0041130A                 mov     esp, ebp
.text:0041130C                 pop     ebp
.text:0041130D                 retn    4
.text:0041130D sub_4112A1      endp
.text:0041130D
.text:00411310
.text:00411310 ; =============== S U B R O U T I N E =======================================
.text:00411310
.text:00411310 ; Attributes: bp-based frame
.text:00411310
.text:00411310 sub_411310      proc near               ; CODE XREF: sub_4113D0+21↓p
.text:00411310                                         ; sub_4114A0+47↓p
.text:00411310
.text:00411310 var_8           = dword ptr -8
.text:00411310 var_4           = dword ptr -4
.text:00411310
.text:00411310                 mov     edi, edi
.text:00411312                 push    ebp
.text:00411313                 mov     ebp, esp
.text:00411315                 push    ecx
.text:00411316                 push    ecx
.text:00411317                 push    ebx
.text:00411318                 push    esi
.text:00411319                 push    edi
.text:0041131A                 mov     edi, ecx
.text:0041131C                 mov     [ebp+var_8], edi
.text:0041131F                 push    dword ptr [edi+0Ch] ; Stream
.text:00411322                 mov     ebx, [edi+14h]
.text:00411325                 push    400h            ; BufferCount
.text:0041132A                 push    ebx             ; Buffer
.text:0041132B                 call    ds:fgetws
.text:00411331                 add     esp, 0Ch
.text:00411334                 test    eax, eax
.text:00411336                 jz      short loc_4113A2
.text:00411338                 xor     esi, esi
.text:0041133A
.text:0041133A loc_41133A:                             ; CODE XREF: sub_411310+90↓j
.text:0041133A                 mov     ecx, ebx
.text:0041133C                 lea     edx, [ecx+2]
.text:0041133F
.text:0041133F loc_41133F:                             ; CODE XREF: sub_411310+38↓j
.text:0041133F                 mov     ax, [ecx]
.text:00411342                 add     ecx, 2
.text:00411345                 cmp     ax, si
.text:00411348                 jnz     short loc_41133F
.text:0041134A                 sub     ecx, edx
.text:0041134C                 lea     eax, [ebx-2]
.text:0041134F                 sar     ecx, 1
.text:00411351                 lea     eax, [eax+ecx*2]
.text:00411354                 mov     [ebp+var_4], eax
.text:00411357                 cmp     eax, ebx
.text:00411359                 jb      short loc_41137B
.text:0041135B                 mov     edi, eax
.text:0041135D
.text:0041135D loc_41135D:                             ; CODE XREF: sub_411310+66↓j
.text:0041135D                 movzx   eax, word ptr [edi]
.text:00411360                 push    eax             ; C
.text:00411361                 call    ds:iswspace
.text:00411367                 pop     ecx
.text:00411368                 test    eax, eax
.text:0041136A                 jz      short loc_411378
.text:0041136C                 xor     eax, eax
.text:0041136E                 mov     [edi], ax
.text:00411371                 sub     edi, 2
.text:00411374                 cmp     edi, ebx
.text:00411376                 jnb     short loc_41135D
.text:00411378
.text:00411378 loc_411378:                             ; CODE XREF: sub_411310+5A↑j
.text:00411378                 mov     edi, [ebp+var_8]
.text:0041137B
.text:0041137B loc_41137B:                             ; CODE XREF: sub_411310+49↑j
.text:0041137B                 movzx   eax, word ptr [ebx]
.text:0041137E                 test    eax, eax
.text:00411380                 jz      short loc_41138C
.text:00411382                 cmp     eax, 23h ; '#'
.text:00411385                 jz      short loc_41138C
.text:00411387                 cmp     eax, 3Bh ; ';'
.text:0041138A                 jnz     short loc_4113BF
.text:0041138C
.text:0041138C loc_41138C:                             ; CODE XREF: sub_411310+70↑j
.text:0041138C                                         ; sub_411310+75↑j
.text:0041138C                 push    dword ptr [edi+0Ch] ; Stream
.text:0041138F                 push    400h            ; BufferCount
.text:00411394                 push    ebx             ; Buffer
.text:00411395                 call    ds:fgetws
.text:0041139B                 add     esp, 0Ch
.text:0041139E                 test    eax, eax
.text:004113A0                 jnz     short loc_41133A
.text:004113A2
.text:004113A2 loc_4113A2:                             ; CODE XREF: sub_411310+26↑j
.text:004113A2                 push    dword ptr [edi+0Ch] ; Stream
.text:004113A5                 call    ds:ferror
.text:004113AB                 mov     esi, eax
.text:004113AD                 pop     ecx
.text:004113AE                 test    esi, esi
.text:004113B0                 jz      short loc_4113C4
.text:004113B2                 jle     short loc_4113C7
.text:004113B4                 movzx   esi, si
.text:004113B7                 or      esi, 80070000h
.text:004113BD                 jmp     short loc_4113C7
.text:004113BF ; ---------------------------------------------------------------------------
.text:004113BF
.text:004113BF loc_4113BF:                             ; CODE XREF: sub_411310+7A↑j
.text:004113BF                 mov     [edi+18h], esi
.text:004113C2                 jmp     short loc_4113C7
.text:004113C4 ; ---------------------------------------------------------------------------
.text:004113C4
.text:004113C4 loc_4113C4:                             ; CODE XREF: sub_411310+A0↑j
.text:004113C4                 xor     esi, esi
.text:004113C6                 inc     esi
.text:004113C7
.text:004113C7 loc_4113C7:                             ; CODE XREF: sub_411310+A2↑j
.text:004113C7                                         ; sub_411310+AD↑j ...
.text:004113C7                 pop     edi
.text:004113C8                 mov     eax, esi
.text:004113CA                 pop     esi
.text:004113CB                 pop     ebx
.text:004113CC                 mov     esp, ebp
.text:004113CE                 pop     ebp
.text:004113CF                 retn
.text:004113CF sub_411310      endp
.text:004113CF
.text:004113D0
.text:004113D0 ; =============== S U B R O U T I N E =======================================
.text:004113D0
.text:004113D0 ; Attributes: bp-based frame
.text:004113D0
.text:004113D0 sub_4113D0      proc near               ; DATA XREF: .text:0040301C↑o
.text:004113D0                                         ; sub_41156E+3E↓o
.text:004113D0
.text:004113D0 arg_0           = dword ptr  8
.text:004113D0 arg_4           = dword ptr  0Ch
.text:004113D0 arg_8           = dword ptr  10h
.text:004113D0
.text:004113D0                 mov     edi, edi
.text:004113D2                 push    ebp
.text:004113D3                 mov     ebp, esp
.text:004113D5                 push    ebx
.text:004113D6                 push    esi
.text:004113D7                 mov     esi, [ebp+arg_0]
.text:004113DA                 xor     ecx, ecx
.text:004113DC                 push    edi
.text:004113DD                 xor     edi, edi
.text:004113DF                 xor     ebx, ebx
.text:004113E1                 inc     edi
.text:004113E2                 mov     eax, [esi+14h]
.text:004113E5                 cmp     cx, [eax]
.text:004113E8                 jz      short loc_4113EF
.text:004113EA                 cmp     [esi+18h], ebx
.text:004113ED                 jz      short loc_411406
.text:004113EF
.text:004113EF loc_4113EF:                             ; CODE XREF: sub_4113D0+18↑j
.text:004113EF                 mov     ecx, esi
.text:004113F1                 call    sub_411310
.text:004113F6                 test    eax, eax
.text:004113F8                 js      loc_41148E
.text:004113FE                 cmp     eax, edi
.text:00411400                 jz      loc_41148E
.text:00411406
.text:00411406 loc_411406:                             ; CODE XREF: sub_4113D0+1D↑j
.text:00411406                 mov     edx, [esi+14h]
.text:00411409                 push    5Bh ; '['
.text:0041140B                 pop     eax
.text:0041140C                 cmp     ax, [edx]
.text:0041140F                 jnz     short loc_411444
.text:00411411                 mov     ecx, edx
.text:00411413                 lea     edi, [ecx+2]
.text:00411416
.text:00411416 loc_411416:                             ; CODE XREF: sub_4113D0+4F↓j
.text:00411416                 mov     ax, [ecx]
.text:00411419                 add     ecx, 2
.text:0041141C                 cmp     ax, bx
.text:0041141F                 jnz     short loc_411416
.text:00411421                 sub     ecx, edi
.text:00411423                 sar     ecx, 1
.text:00411425                 push    5Dh ; ']'
.text:00411427                 pop     eax
.text:00411428                 cmp     ax, [edx+ecx*2-2]
.text:0041142D                 jnz     short loc_411436
.text:0041142F                 xor     eax, eax
.text:00411431                 mov     [edx+ecx*2-2], ax
.text:00411436
.text:00411436 loc_411436:                             ; CODE XREF: sub_4113D0+5D↑j
.text:00411436                 mov     ecx, [esi+14h]
.text:00411439                 xor     edi, edi
.text:0041143B                 add     ecx, 2
.text:0041143E                 mov     [esi+10h], ebx
.text:00411441                 inc     edi
.text:00411442                 jmp     short loc_41146A
.text:00411444 ; ---------------------------------------------------------------------------
.text:00411444
.text:00411444 loc_411444:                             ; CODE XREF: sub_4113D0+3F↑j
.text:00411444                 push    3Dh ; '='       ; Ch
.text:00411446                 push    edx             ; Str
.text:00411447                 call    ds:wcschr
.text:0041144D                 mov     [esi+18h], eax
.text:00411450                 pop     ecx
.text:00411451                 pop     ecx
.text:00411452                 test    eax, eax
.text:00411454                 jz      short loc_411464
.text:00411456                 xor     ecx, ecx
.text:00411458                 mov     [eax], cx
.text:0041145B                 add     dword ptr [esi+18h], 2
.text:0041145F                 mov     [esi+10h], ebx
.text:00411462                 jmp     short loc_411467
.text:00411464 ; ---------------------------------------------------------------------------
.text:00411464
.text:00411464 loc_411464:                             ; CODE XREF: sub_4113D0+84↑j
.text:00411464                 mov     [esi+10h], edi
.text:00411467
.text:00411467 loc_411467:                             ; CODE XREF: sub_4113D0+92↑j
.text:00411467                 mov     ecx, [esi+14h]
.text:0041146A
.text:0041146A loc_41146A:                             ; CODE XREF: sub_4113D0+72↑j
.text:0041146A                 mov     eax, [ebp+arg_8]
.text:0041146D                 mov     [eax], edi
.text:0041146F                 call    sub_40EDB8
.text:00411474                 mov     ecx, [ebp+arg_4]
.text:00411477                 mov     [ecx], eax
.text:00411479                 test    eax, eax
.text:0041147B                 jnz     short loc_411484
.text:0041147D                 mov     eax, 8007000Eh
.text:00411482                 jmp     short loc_41148E
.text:00411484 ; ---------------------------------------------------------------------------
.text:00411484
.text:00411484 loc_411484:                             ; CODE XREF: sub_4113D0+AB↑j
.text:00411484                 mov     eax, [esi+14h]
.text:00411487                 xor     ecx, ecx
.text:00411489                 mov     [eax], cx
.text:0041148C                 mov     eax, ebx
.text:0041148E
.text:0041148E loc_41148E:                             ; CODE XREF: sub_4113D0+28↑j
.text:0041148E                                         ; sub_4113D0+30↑j ...
.text:0041148E                 pop     edi
.text:0041148F                 pop     esi
.text:00411490                 pop     ebx
.text:00411491                 pop     ebp
.text:00411492                 retn    0Ch
.text:00411492 sub_4113D0      endp
.text:00411492
.text:00411492 ; ---------------------------------------------------------------------------
.text:00411495                 align 10h
.text:004114A0
.text:004114A0 ; =============== S U B R O U T I N E =======================================
.text:004114A0
.text:004114A0 ; Attributes: bp-based frame
.text:004114A0
.text:004114A0 sub_4114A0      proc near               ; DATA XREF: .text:00403020↑o
.text:004114A0                                         ; sub_41156E+44↓o
.text:004114A0
.text:004114A0 arg_0           = dword ptr  8
.text:004114A0 arg_4           = dword ptr  0Ch
.text:004114A0
.text:004114A0                 mov     edi, edi
.text:004114A2                 push    ebp
.text:004114A3                 mov     ebp, esp
.text:004114A5                 push    esi
.text:004114A6                 mov     esi, [ebp+arg_0]
.text:004114A9                 cmp     dword ptr [esi+10h], 0
.text:004114AD                 jz      short loc_4114B4
.text:004114AF                 xor     eax, eax
.text:004114B1                 inc     eax
.text:004114B2                 jmp     short loc_411514
.text:004114B4 ; ---------------------------------------------------------------------------
.text:004114B4
.text:004114B4 loc_4114B4:                             ; CODE XREF: sub_4114A0+D↑j
.text:004114B4                 mov     ecx, [esi+18h]
.text:004114B7                 push    edi
.text:004114B8                 test    ecx, ecx
.text:004114BA                 jz      short loc_4114D8
.text:004114BC                 mov     dword ptr [esi+10h], 1
.text:004114C3
.text:004114C3 loc_4114C3:                             ; CODE XREF: sub_4114A0+5D↓j
.text:004114C3                 call    sub_40EDB8
.text:004114C8                 mov     ecx, [ebp+arg_4]
.text:004114CB                 mov     [ecx], eax
.text:004114CD                 test    eax, eax
.text:004114CF                 jnz     short loc_411506
.text:004114D1                 mov     eax, 8007000Eh
.text:004114D6                 jmp     short loc_411513
.text:004114D8 ; ---------------------------------------------------------------------------
.text:004114D8
.text:004114D8 loc_4114D8:                             ; CODE XREF: sub_4114A0+1A↑j
.text:004114D8                 mov     eax, [esi+14h]
.text:004114DB                 xor     edi, edi
.text:004114DD                 xor     ecx, ecx
.text:004114DF                 inc     edi
.text:004114E0                 cmp     cx, [eax]
.text:004114E3                 jnz     short loc_4114F4
.text:004114E5                 mov     ecx, esi
.text:004114E7                 call    sub_411310
.text:004114EC                 test    eax, eax
.text:004114EE                 js      short loc_411513
.text:004114F0                 cmp     eax, edi
.text:004114F2                 jz      short loc_411513
.text:004114F4
.text:004114F4 loc_4114F4:                             ; CODE XREF: sub_4114A0+43↑j
.text:004114F4                 mov     ecx, [esi+14h]
.text:004114F7                 push    5Bh ; '['
.text:004114F9                 pop     eax
.text:004114FA                 cmp     ax, [ecx]
.text:004114FD                 jnz     short loc_4114C3
.text:004114FF                 mov     [esi+10h], edi
.text:00411502                 mov     eax, edi
.text:00411504                 jmp     short loc_411513
.text:00411506 ; ---------------------------------------------------------------------------
.text:00411506
.text:00411506 loc_411506:                             ; CODE XREF: sub_4114A0+2F↑j
.text:00411506                 mov     eax, [esi+14h]
.text:00411509                 xor     ecx, ecx
.text:0041150B                 mov     [eax], cx
.text:0041150E                 and     [esi+18h], ecx
.text:00411511                 xor     eax, eax
.text:00411513
.text:00411513 loc_411513:                             ; CODE XREF: sub_4114A0+36↑j
.text:00411513                                         ; sub_4114A0+4E↑j ...
.text:00411513                 pop     edi
.text:00411514
.text:00411514 loc_411514:                             ; CODE XREF: sub_4114A0+12↑j
.text:00411514                 pop     esi
.text:00411515                 pop     ebp
.text:00411516                 retn    8
.text:00411516 sub_4114A0      endp
.text:00411516
.text:00411516 ; ---------------------------------------------------------------------------
.text:00411519                 align 10h
.text:00411520
.text:00411520 ; =============== S U B R O U T I N E =======================================
.text:00411520
.text:00411520 ; Attributes: bp-based frame
.text:00411520
.text:00411520 ; int __stdcall sub_411520(LPVOID lpMem)
.text:00411520 sub_411520      proc near               ; CODE XREF: sub_41156E+AA↓p
.text:00411520                                         ; DATA XREF: .text:00403024↑o ...
.text:00411520
.text:00411520 lpMem           = dword ptr  8
.text:00411520
.text:00411520                 mov     edi, edi
.text:00411522                 push    ebp
.text:00411523                 mov     ebp, esp
.text:00411525                 push    esi
.text:00411526                 mov     esi, [ebp+lpMem]
.text:00411529                 test    esi, esi
.text:0041152B                 jz      short loc_411569
.text:0041152D                 cmp     dword ptr [esi+0Ch], 0
.text:00411531                 jz      short loc_41153D
.text:00411533                 push    dword ptr [esi+0Ch] ; Stream
.text:00411536                 call    ds:fclose
.text:0041153C                 pop     ecx
.text:0041153D
.text:0041153D loc_41153D:                             ; CODE XREF: sub_411520+11↑j
.text:0041153D                 cmp     dword ptr [esi+14h], 0
.text:00411541                 jz      short loc_411559
.text:00411543                 push    dword ptr [esi+14h] ; lpMem
.text:00411546                 push    0               ; dwFlags
.text:00411548                 call    ds:GetProcessHeap
.text:0041154E                 push    eax             ; hHeap
.text:0041154F                 call    ds:HeapFree
.text:00411555                 and     dword ptr [esi+14h], 0
.text:00411559
.text:00411559 loc_411559:                             ; CODE XREF: sub_411520+21↑j
.text:00411559                 push    esi             ; lpMem
.text:0041155A                 push    0               ; dwFlags
.text:0041155C                 call    ds:GetProcessHeap
.text:00411562                 push    eax             ; hHeap
.text:00411563                 call    ds:HeapFree
.text:00411569
.text:00411569 loc_411569:                             ; CODE XREF: sub_411520+B↑j
.text:00411569                 pop     esi
.text:0041156A                 pop     ebp
.text:0041156B                 retn    4
.text:0041156B sub_411520      endp
.text:0041156B
.text:0041156E
.text:0041156E ; =============== S U B R O U T I N E =======================================
.text:0041156E
.text:0041156E ; Attributes: bp-based frame
.text:0041156E
.text:0041156E sub_41156E      proc near               ; CODE XREF: sub_40FF6D+E9↑p
.text:0041156E
.text:0041156E var_8           = dword ptr -8
.text:0041156E FileName        = dword ptr -4
.text:0041156E
.text:0041156E                 mov     edi, edi
.text:00411570                 push    ebp
.text:00411571                 mov     ebp, esp
.text:00411573                 push    ecx
.text:00411574                 push    ecx
.text:00411575                 push    ebx
.text:00411576                 push    esi
.text:00411577                 push    1Ch             ; dwBytes
.text:00411579                 xor     esi, esi
.text:0041157B                 mov     [ebp+var_8], edx
.text:0041157E                 push    esi             ; dwFlags
.text:0041157F                 mov     [ebp+FileName], ecx
.text:00411582                 call    ds:GetProcessHeap
.text:00411588                 push    eax             ; hHeap
.text:00411589                 call    ds:HeapAlloc
.text:0041158F                 mov     ebx, eax
.text:00411591                 test    ebx, ebx
.text:00411593                 jnz     short loc_41159C
.text:00411595
.text:00411595 loc_411595:                             ; CODE XREF: sub_41156E+65↓j
.text:00411595                 mov     esi, 8007000Eh
.text:0041159A                 jmp     short loc_411617
.text:0041159C ; ---------------------------------------------------------------------------
.text:0041159C
.text:0041159C loc_41159C:                             ; CODE XREF: sub_41156E+25↑j
.text:0041159C                 push    edi
.text:0041159D                 push    7
.text:0041159F                 pop     ecx
.text:004115A0                 xor     eax, eax
.text:004115A2                 mov     edi, ebx
.text:004115A4                 rep stosd
.text:004115A6                 push    800h            ; dwBytes
.text:004115AB                 push    esi             ; dwFlags
.text:004115AC                 mov     dword ptr [ebx], offset sub_4113D0
.text:004115B2                 mov     dword ptr [ebx+4], offset sub_4114A0
.text:004115B9                 mov     dword ptr [ebx+8], offset sub_411520
.text:004115C0                 call    ds:GetProcessHeap
.text:004115C6                 push    eax             ; hHeap
.text:004115C7                 call    ds:HeapAlloc
.text:004115CD                 mov     [ebx+14h], eax
.text:004115D0                 pop     edi
.text:004115D1                 test    eax, eax
.text:004115D3                 jz      short loc_411595
.text:004115D5                 xor     ecx, ecx
.text:004115D7                 push    offset Mode     ; "r"
.text:004115DC                 push    [ebp+FileName]  ; FileName
.text:004115DF                 mov     [eax], cx
.text:004115E2                 mov     [ebx+18h], esi
.text:004115E5                 mov     [ebx+10h], esi
.text:004115E8                 call    ds:_wfopen
.text:004115EE                 mov     [ebx+0Ch], eax
.text:004115F1                 pop     ecx
.text:004115F2                 pop     ecx
.text:004115F3                 test    eax, eax
.text:004115F5                 jnz     short loc_41160E
.text:004115F7                 call    ds:_errno
.text:004115FD                 mov     esi, [eax]
.text:004115FF                 test    esi, esi
.text:00411601                 jle     short loc_411615
.text:00411603                 movzx   esi, si
.text:00411606                 or      esi, 80070000h
.text:0041160C                 jmp     short loc_411613
.text:0041160E ; ---------------------------------------------------------------------------
.text:0041160E
.text:0041160E loc_41160E:                             ; CODE XREF: sub_41156E+87↑j
.text:0041160E                 mov     eax, [ebp+var_8]
.text:00411611                 mov     [eax], ebx
.text:00411613
.text:00411613 loc_411613:                             ; CODE XREF: sub_41156E+9E↑j
.text:00411613                 test    esi, esi
.text:00411615
.text:00411615 loc_411615:                             ; CODE XREF: sub_41156E+93↑j
.text:00411615                 jns     short loc_41161D
.text:00411617
.text:00411617 loc_411617:                             ; CODE XREF: sub_41156E+2C↑j
.text:00411617                 push    ebx             ; lpMem
.text:00411618                 call    sub_411520
.text:0041161D
.text:0041161D loc_41161D:                             ; CODE XREF: sub_41156E:loc_411615↑j
.text:0041161D                 mov     eax, esi
.text:0041161F                 pop     esi
.text:00411620                 pop     ebx
.text:00411621                 mov     esp, ebp
.text:00411623                 pop     ebp
.text:00411624                 retn
.text:00411624 sub_41156E      endp
.text:00411624
.text:00411625
.text:00411625 ; =============== S U B R O U T I N E =======================================
.text:00411625
.text:00411625 ; Attributes: info_from_lumina
.text:00411625
.text:00411625 ; int __thiscall RcConfig_Load(HMODULE hModule)
.text:00411625 RcConfig_Load   proc near               ; CODE XREF: sub_41164A+E↓p
.text:00411625                                         ; sub_41164A+17↓p
.text:00411625                 mov     edi, edi
.text:00411627                 push    esi
.text:00411628                 push    0               ; wLanguage
.text:0041162A                 push    1               ; lpName
.text:0041162C                 mov     esi, ecx
.text:0041162E                 push    offset Type     ; "MUI"
.text:00411633                 push    esi             ; hModule
.text:00411634                 call    ds:FindResourceExW
.text:0041163A                 test    eax, eax
.text:0041163C                 jnz     short loc_411640
.text:0041163E                 pop     esi
.text:0041163F                 retn
.text:00411640 ; ---------------------------------------------------------------------------
.text:00411640
.text:00411640 loc_411640:                             ; CODE XREF: RcConfig_Load+17↑j
.text:00411640                 push    eax             ; hResInfo
.text:00411641                 push    esi             ; hModule
.text:00411642                 call    ds:LoadResource
.text:00411648                 pop     esi
.text:00411649                 retn
.text:00411649 RcConfig_Load   endp
.text:00411649
.text:0041164A
.text:0041164A ; =============== S U B R O U T I N E =======================================
.text:0041164A
.text:0041164A
.text:0041164A sub_41164A      proc near               ; CODE XREF: sub_411835+7C↓p
.text:0041164A                 mov     edi, edi
.text:0041164C                 push    esi
.text:0041164D                 mov     esi, edx
.text:0041164F                 push    edi
.text:00411650                 test    ecx, ecx
.text:00411652                 jz      short loc_4116A0
.text:00411654                 test    esi, esi
.text:00411656                 jz      short loc_4116A0
.text:00411658                 call    RcConfig_Load
.text:0041165D                 mov     ecx, esi        ; hModule
.text:0041165F                 mov     edi, eax
.text:00411661                 call    RcConfig_Load
.text:00411666                 mov     esi, eax
.text:00411668                 test    edi, edi
.text:0041166A                 jz      short loc_411698
.text:0041166C                 test    esi, esi
.text:0041166E                 jz      short loc_411698
.text:00411670                 mov     eax, 0FECDFECDh
.text:00411675                 xor     edx, edx
.text:00411677                 cmp     [edi], eax
.text:00411679                 jnz     short loc_411694
.text:0041167B                 cmp     [esi], eax
.text:0041167D                 jnz     short loc_411694
.text:0041167F                 mov     ecx, edx
.text:00411681
.text:00411681 loc_411681:                             ; CODE XREF: sub_41164A+45↓j
.text:00411681                 mov     eax, [edi+ecx*4+1Ch]
.text:00411685                 cmp     eax, [esi+ecx*4+1Ch]
.text:00411689                 jnz     short loc_411694
.text:0041168B                 inc     ecx
.text:0041168C                 cmp     ecx, 4
.text:0041168F                 jnz     short loc_411681
.text:00411691                 xor     edx, edx
.text:00411693                 inc     edx
.text:00411694
.text:00411694 loc_411694:                             ; CODE XREF: sub_41164A+2F↑j
.text:00411694                                         ; sub_41164A+33↑j ...
.text:00411694                 mov     eax, edx
.text:00411696                 jmp     short loc_4116A2
.text:00411698 ; ---------------------------------------------------------------------------
.text:00411698
.text:00411698 loc_411698:                             ; CODE XREF: sub_41164A+20↑j
.text:00411698                                         ; sub_41164A+24↑j
.text:00411698                 push    0Dh             ; dwErrCode
.text:0041169A                 call    ds:SetLastError
.text:004116A0
.text:004116A0 loc_4116A0:                             ; CODE XREF: sub_41164A+8↑j
.text:004116A0                                         ; sub_41164A+C↑j
.text:004116A0                 xor     eax, eax
.text:004116A2
.text:004116A2 loc_4116A2:                             ; CODE XREF: sub_41164A+4C↑j
.text:004116A2                 pop     edi
.text:004116A3                 pop     esi
.text:004116A4                 retn
.text:004116A4 sub_41164A      endp
.text:004116A4
.text:004116A5
.text:004116A5 ; =============== S U B R O U T I N E =======================================
.text:004116A5
.text:004116A5 ; Attributes: bp-based frame info_from_lumina
.text:004116A5
.text:004116A5 ; int __thiscall MapMUIFile(LPCWSTR lpLibFileName, int)
.text:004116A5 MapMUIFile      proc near               ; CODE XREF: sub_411835+6D↓p
.text:004116A5                                         ; LoadMUILibraryW(x,x,x)+2F6↓p
.text:004116A5
.text:004116A5 arg_0           = dword ptr  8
.text:004116A5
.text:004116A5                 mov     edi, edi
.text:004116A7                 push    ebp
.text:004116A8                 mov     ebp, esp
.text:004116AA                 push    ebx
.text:004116AB                 push    esi
.text:004116AC                 push    edi
.text:004116AD                 test    ecx, ecx
.text:004116AF                 jnz     short loc_4116B5
.text:004116B1
.text:004116B1 loc_4116B1:                             ; CODE XREF: MapMUIFile+2E↓j
.text:004116B1                                         ; MapMUIFile+48↓j ...
.text:004116B1                 xor     eax, eax
.text:004116B3                 jmp     short loc_411721
.text:004116B5 ; ---------------------------------------------------------------------------
.text:004116B5
.text:004116B5 loc_4116B5:                             ; CODE XREF: MapMUIFile+A↑j
.text:004116B5                 test    edx, edx
.text:004116B7                 jz      short loc_41170F
.text:004116B9                 xor     ebx, ebx
.text:004116BB                 push    ebx             ; hTemplateFile
.text:004116BC                 push    ebx             ; dwFlagsAndAttributes
.text:004116BD                 push    3               ; dwCreationDisposition
.text:004116BF                 push    ebx             ; lpSecurityAttributes
.text:004116C0                 push    5               ; dwShareMode
.text:004116C2                 push    80000000h       ; dwDesiredAccess
.text:004116C7                 push    ecx             ; lpFileName
.text:004116C8                 call    ds:CreateFileW
.text:004116CE                 mov     esi, eax
.text:004116D0                 cmp     esi, 0FFFFFFFFh
.text:004116D3                 jz      short loc_4116B1
.text:004116D5                 push    ebx             ; lpName
.text:004116D6                 push    ebx             ; dwMaximumSizeLow
.text:004116D7                 push    ebx             ; dwMaximumSizeHigh
.text:004116D8                 push    8               ; flProtect
.text:004116DA                 push    ebx             ; lpFileMappingAttributes
.text:004116DB                 push    esi             ; hFile
.text:004116DC                 call    ds:CreateFileMappingW
.text:004116E2                 push    esi             ; hObject
.text:004116E3                 mov     edi, eax
.text:004116E5                 call    ds:CloseHandle
.text:004116EB                 test    edi, edi
.text:004116ED                 jz      short loc_4116B1
.text:004116EF                 push    ebx             ; dwNumberOfBytesToMap
.text:004116F0                 push    ebx             ; dwFileOffsetLow
.text:004116F1                 push    ebx             ; dwFileOffsetHigh
.text:004116F2                 push    1               ; dwDesiredAccess
.text:004116F4                 push    edi             ; hFileMappingObject
.text:004116F5                 call    ds:MapViewOfFile
.text:004116FB                 push    edi             ; hObject
.text:004116FC                 mov     esi, eax
.text:004116FE                 call    ds:CloseHandle
.text:00411704                 test    esi, esi
.text:00411706                 jz      short loc_4116B1
.text:00411708                 or      esi, 1
.text:0041170B                 mov     eax, esi
.text:0041170D                 jmp     short loc_411721
.text:0041170F ; ---------------------------------------------------------------------------
.text:0041170F
.text:0041170F loc_41170F:                             ; CODE XREF: MapMUIFile+12↑j
.text:0041170F                 xor     eax, eax
.text:00411711                 cmp     [ebp+arg_0], eax
.text:00411714                 setnz   al
.text:00411717                 push    eax             ; dwFlags
.text:00411718                 push    0               ; hFile
.text:0041171A                 push    ecx             ; lpLibFileName
.text:0041171B                 call    ds:LoadLibraryExW
.text:00411721
.text:00411721 loc_411721:                             ; CODE XREF: MapMUIFile+E↑j
.text:00411721                                         ; MapMUIFile+68↑j
.text:00411721                 pop     edi
.text:00411722                 pop     esi
.text:00411723                 pop     ebx
.text:00411724                 pop     ebp
.text:00411725                 retn    4
.text:00411725 MapMUIFile      endp
.text:00411725
.text:00411728
.text:00411728 ; =============== S U B R O U T I N E =======================================
.text:00411728
.text:00411728 ; Attributes: bp-based frame info_from_lumina
.text:00411728
.text:00411728 GetOSType       proc near               ; CODE XREF: sub_411835:loc_411887↓p
.text:00411728                                         ; sub_411835+5C↓p ...
.text:00411728
.text:00411728 VersionInformation= _OSVERSIONINFOW ptr -120h
.text:00411728 var_C           = word ptr -0Ch
.text:00411728 var_4           = dword ptr -4
.text:00411728
.text:00411728                 mov     edi, edi
.text:0041172A                 push    ebp
.text:0041172B                 mov     ebp, esp
.text:0041172D                 sub     esp, 120h
.text:00411733                 mov     eax, ___security_cookie
.text:00411738                 xor     eax, ebp
.text:0041173A                 mov     [ebp+var_4], eax
.text:0041173D                 push    esi
.text:0041173E                 mov     esi, Val
.text:00411744                 test    esi, esi
.text:00411746                 jnz     loc_411820
.text:0041174C                 push    edi
.text:0041174D                 mov     edi, 11Ch
.text:00411752                 lea     eax, [ebp+VersionInformation]
.text:00411758                 push    edi             ; Size
.text:00411759                 push    esi             ; Val
.text:0041175A                 push    eax             ; void *
.text:0041175B                 call    memset
.text:00411760                 add     esp, 0Ch
.text:00411763                 mov     [ebp+VersionInformation.dwOSVersionInfoSize], edi
.text:00411769                 lea     eax, [ebp+VersionInformation]
.text:0041176F                 push    eax             ; lpVersionInformation
.text:00411770                 call    ds:GetVersionExW
.text:00411776                 pop     edi
.text:00411777                 test    eax, eax
.text:00411779                 jnz     short loc_411792
.text:0041177B                 lea     eax, [ebp+VersionInformation]
.text:00411781                 mov     [ebp+VersionInformation.dwOSVersionInfoSize], 114h
.text:0041178B                 push    eax             ; lpVersionInformation
.text:0041178C                 call    ds:GetVersionExW
.text:00411792
.text:00411792 loc_411792:                             ; CODE XREF: GetOSType+51↑j
.text:00411792                 mov     eax, [ebp+VersionInformation.dwPlatformId]
.text:00411798                 mov     Val, esi
.text:0041179E                 sub     eax, 1
.text:004117A1                 jz      short loc_4117FA
.text:004117A3                 sub     eax, 1
.text:004117A6                 jnz     short loc_411820
.text:004117A8                 cmp     [ebp+VersionInformation.dwMajorVersion], 5
.text:004117AF                 jnz     short loc_4117E8
.text:004117B1                 mov     eax, [ebp+VersionInformation.dwMinorVersion]
.text:004117B7                 sub     eax, esi
.text:004117B9                 jz      short loc_4117E4
.text:004117BB                 sub     eax, 1
.text:004117BE                 jz      short loc_4117D9
.text:004117C0                 sub     eax, 1
.text:004117C3                 jz      short loc_4117CA
.text:004117C5                 push    14h
.text:004117C7
.text:004117C7 loc_4117C7:                             ; CODE XREF: GetOSType+BE↓j
.text:004117C7                                         ; GetOSType+10B↓j
.text:004117C7                 pop     esi
.text:004117C8                 jmp     short loc_41181A
.text:004117CA ; ---------------------------------------------------------------------------
.text:004117CA
.text:004117CA loc_4117CA:                             ; CODE XREF: GetOSType+9B↑j
.text:004117CA                 cmp     [ebp+var_C], 1
.text:004117CF                 jb      short loc_4117D4
.text:004117D1                 push    10h
.text:004117D3
.text:004117D3 loc_4117D3:                             ; CODE XREF: GetOSType+BA↓j
.text:004117D3                 pop     esi
.text:004117D4
.text:004117D4 loc_4117D4:                             ; CODE XREF: GetOSType+A7↑j
.text:004117D4                                         ; GetOSType+B6↓j
.text:004117D4                 or      esi, 4
.text:004117D7                 jmp     short loc_41181A
.text:004117D9 ; ---------------------------------------------------------------------------
.text:004117D9
.text:004117D9 loc_4117D9:                             ; CODE XREF: GetOSType+96↑j
.text:004117D9                 cmp     [ebp+var_C], 2
.text:004117DE                 jb      short loc_4117D4
.text:004117E0                 push    8
.text:004117E2                 jmp     short loc_4117D3
.text:004117E4 ; ---------------------------------------------------------------------------
.text:004117E4
.text:004117E4 loc_4117E4:                             ; CODE XREF: GetOSType+91↑j
.text:004117E4                 push    4
.text:004117E6                 jmp     short loc_4117C7
.text:004117E8 ; ---------------------------------------------------------------------------
.text:004117E8
.text:004117E8 loc_4117E8:                             ; CODE XREF: GetOSType+87↑j
.text:004117E8                 cmp     [ebp+VersionInformation.dwMajorVersion], 4
.text:004117EF                 ja      short loc_411831
.text:004117F1                 push    2
.text:004117F3                 pop     esi
.text:004117F4                 mov     Val, esi
.text:004117FA
.text:004117FA loc_4117FA:                             ; CODE XREF: GetOSType+79↑j
.text:004117FA                 cmp     [ebp+VersionInformation.dwMajorVersion], 4
.text:00411801                 jnz     short loc_411820
.text:00411803                 mov     eax, [ebp+VersionInformation.dwMinorVersion]
.text:00411809                 test    eax, eax
.text:0041180B                 jz      short loc_411817
.text:0041180D                 cmp     eax, 0Ah
.text:00411810                 jz      short loc_411817
.text:00411812                 cmp     eax, 5Ah ; 'Z'
.text:00411815                 jnz     short loc_411820
.text:00411817
.text:00411817 loc_411817:                             ; CODE XREF: GetOSType+E3↑j
.text:00411817                                         ; GetOSType+E8↑j
.text:00411817                 xor     esi, esi
.text:00411819                 inc     esi
.text:0041181A
.text:0041181A loc_41181A:                             ; CODE XREF: GetOSType+A0↑j
.text:0041181A                                         ; GetOSType+AF↑j
.text:0041181A                 mov     Val, esi
.text:00411820
.text:00411820 loc_411820:                             ; CODE XREF: GetOSType+1E↑j
.text:00411820                                         ; GetOSType+7E↑j ...
.text:00411820                 mov     ecx, [ebp+var_4]
.text:00411823                 mov     eax, esi
.text:00411825                 xor     ecx, ebp        ; StackCookie
.text:00411827                 pop     esi
.text:00411828                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:0041182D                 mov     esp, ebp
.text:0041182F                 pop     ebp
.text:00411830                 retn
.text:00411831 ; ---------------------------------------------------------------------------
.text:00411831
.text:00411831 loc_411831:                             ; CODE XREF: GetOSType+C7↑j
.text:00411831                 push    20h ; ' '
.text:00411833                 jmp     short loc_4117C7
.text:00411833 GetOSType       endp
.text:00411833
.text:00411835
.text:00411835 ; =============== S U B R O U T I N E =======================================
.text:00411835
.text:00411835 ; Attributes: bp-based frame
.text:00411835
.text:00411835 ; int __cdecl sub_411835(int, wchar_t *Format, char Args)
.text:00411835 sub_411835      proc near               ; CODE XREF: LoadMUIFile+25↓p
.text:00411835                                         ; LoadMUIFile+36↓p ...
.text:00411835
.text:00411835 Buffer          = word ptr -210h
.text:00411835 var_A           = word ptr -0Ah
.text:00411835 var_4           = dword ptr -4
.text:00411835 arg_0           = dword ptr  8
.text:00411835 Format          = dword ptr  0Ch
.text:00411835 Args            = byte ptr  10h
.text:00411835
.text:00411835                 mov     edi, edi
.text:00411837                 push    ebp
.text:00411838                 mov     ebp, esp
.text:0041183A                 sub     esp, 210h
.text:00411840                 mov     eax, ___security_cookie
.text:00411845                 xor     eax, ebp
.text:00411847                 mov     [ebp+var_4], eax
.text:0041184A                 push    edi
.text:0041184B                 mov     edi, [ebp+arg_0]
.text:0041184E                 test    edi, edi
.text:00411850                 jnz     short loc_411856
.text:00411852                 xor     eax, eax
.text:00411854                 jmp     short loc_4118D4
.text:00411856 ; ---------------------------------------------------------------------------
.text:00411856
.text:00411856 loc_411856:                             ; CODE XREF: sub_411835+1B↑j
.text:00411856                 push    ebx
.text:00411857                 push    esi
.text:00411858                 lea     eax, [ebp+Args]
.text:0041185B                 mov     esi, 103h
.text:00411860                 push    eax             ; Args
.text:00411861                 push    [ebp+Format]    ; Format
.text:00411864                 lea     eax, [ebp+Buffer]
.text:0041186A                 xor     ebx, ebx
.text:0041186C                 push    esi             ; BufferCount
.text:0041186D                 push    eax             ; Buffer
.text:0041186E                 call    ds:_vsnwprintf
.text:00411874                 add     esp, 10h
.text:00411877                 test    eax, eax
.text:00411879                 js      short loc_4118D0
.text:0041187B                 cmp     eax, esi
.text:0041187D                 ja      short loc_4118D0
.text:0041187F                 jnz     short loc_411887
.text:00411881                 xor     eax, eax
.text:00411883                 mov     [ebp+var_A], ax
.text:00411887
.text:00411887 loc_411887:                             ; CODE XREF: sub_411835+4A↑j
.text:00411887                 call    GetOSType
.text:0041188C                 mov     esi, eax
.text:0041188E                 and     esi, 26h
.text:00411891                 call    GetOSType
.text:00411896                 and     eax, 38h
.text:00411899                 lea     ecx, [ebp+Buffer] ; lpLibFileName
.text:0041189F                 push    esi             ; int
.text:004118A0                 mov     edx, eax
.text:004118A2                 call    MapMUIFile
.text:004118A7                 mov     ebx, eax
.text:004118A9                 test    ebx, ebx
.text:004118AB                 jz      short loc_4118D0
.text:004118AD                 mov     edx, ebx
.text:004118AF                 mov     ecx, edi
.text:004118B1                 call    sub_41164A
.text:004118B6                 test    eax, eax
.text:004118B8                 jnz     short loc_4118D0
.text:004118BA                 push    ebx             ; hLibModule
.text:004118BB                 test    bl, 1
.text:004118BE                 jz      short loc_4118C8
.text:004118C0                 call    ds:UnmapViewOfFile
.text:004118C6                 jmp     short loc_4118CE
.text:004118C8 ; ---------------------------------------------------------------------------
.text:004118C8
.text:004118C8 loc_4118C8:                             ; CODE XREF: sub_411835+89↑j
.text:004118C8                 call    ds:FreeLibrary
.text:004118CE
.text:004118CE loc_4118CE:                             ; CODE XREF: sub_411835+91↑j
.text:004118CE                 xor     ebx, ebx
.text:004118D0
.text:004118D0 loc_4118D0:                             ; CODE XREF: sub_411835+44↑j
.text:004118D0                                         ; sub_411835+48↑j ...
.text:004118D0                 pop     esi
.text:004118D1                 mov     eax, ebx
.text:004118D3                 pop     ebx
.text:004118D4
.text:004118D4 loc_4118D4:                             ; CODE XREF: sub_411835+1F↑j
.text:004118D4                 mov     ecx, [ebp+var_4]
.text:004118D7                 xor     ecx, ebp        ; StackCookie
.text:004118D9                 pop     edi
.text:004118DA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004118DF                 mov     esp, ebp
.text:004118E1                 pop     ebp
.text:004118E2                 retn
.text:004118E2 sub_411835      endp
.text:004118E2
.text:004118E3
.text:004118E3 ; =============== S U B R O U T I N E =======================================
.text:004118E3
.text:004118E3 ; Attributes: bp-based frame info_from_lumina
.text:004118E3
.text:004118E3 ; int __fastcall LoadMUIFile(int, size_t pcchNewDestLength, int, size_t pcchNewDestLength)
.text:004118E3 LoadMUIFile     proc near               ; CODE XREF: LoadMUILibraryW(x,x,x)+12E↓p
.text:004118E3                                         ; LoadMUILibraryW(x,x,x)+14E↓p ...
.text:004118E3
.text:004118E3 arg_0           = dword ptr  8
.text:004118E3 Args            = byte ptr  0Ch
.text:004118E3
.text:004118E3                 mov     edi, edi
.text:004118E5                 push    ebp
.text:004118E6                 mov     ebp, esp
.text:004118E8                 mov     eax, dword ptr [ebp+Args]
.text:004118EB                 test    eax, eax
.text:004118ED                 jz      short loc_411943
.text:004118EF                 test    ecx, ecx
.text:004118F1                 jz      short loc_411943
.text:004118F3                 push    eax             ; Args
.text:004118F4                 test    edx, edx
.text:004118F6                 jz      short loc_411923
.text:004118F8                 cmp     [ebp+arg_0], 0
.text:004118FC                 jz      short loc_411912
.text:004118FE                 push    [ebp+arg_0]
.text:00411901                 push    edx             ; Args
.text:00411902                 push    offset aSSSMui  ; "%s\\%s\\%s.mui"
.text:00411907                 push    ecx             ; int
.text:00411908                 call    sub_411835
.text:0041190D                 add     esp, 14h
.text:00411910                 jmp     short loc_411945
.text:00411912 ; ---------------------------------------------------------------------------
.text:00411912
.text:00411912 loc_411912:                             ; CODE XREF: LoadMUIFile+19↑j
.text:00411912                 push    edx             ; Args
.text:00411913                 push    offset aSSMui   ; "%s\\%s.mui"
.text:00411918
.text:00411918 loc_411918:                             ; CODE XREF: LoadMUIFile+4E↓j
.text:00411918                 push    ecx             ; int
.text:00411919                 call    sub_411835
.text:0041191E                 add     esp, 10h
.text:00411921                 jmp     short loc_411945
.text:00411923 ; ---------------------------------------------------------------------------
.text:00411923
.text:00411923 loc_411923:                             ; CODE XREF: LoadMUIFile+13↑j
.text:00411923                 cmp     [ebp+arg_0], 0
.text:00411927                 jz      short loc_411933
.text:00411929                 push    [ebp+arg_0]
.text:0041192C                 push    offset aSSMui_0 ; ".\\%s\\%s.mui"
.text:00411931                 jmp     short loc_411918
.text:00411933 ; ---------------------------------------------------------------------------
.text:00411933
.text:00411933 loc_411933:                             ; CODE XREF: LoadMUIFile+44↑j
.text:00411933                 push    offset aSMui    ; ".\\%s.mui"
.text:00411938                 push    ecx             ; int
.text:00411939                 call    sub_411835
.text:0041193E                 add     esp, 0Ch
.text:00411941                 jmp     short loc_411945
.text:00411943 ; ---------------------------------------------------------------------------
.text:00411943
.text:00411943 loc_411943:                             ; CODE XREF: LoadMUIFile+A↑j
.text:00411943                                         ; LoadMUIFile+E↑j
.text:00411943                 xor     eax, eax
.text:00411945
.text:00411945 loc_411945:                             ; CODE XREF: LoadMUIFile+2D↑j
.text:00411945                                         ; LoadMUIFile+3E↑j ...
.text:00411945                 pop     ebp
.text:00411946                 retn    8
.text:00411946 LoadMUIFile     endp
.text:00411946
.text:00411949
.text:00411949 ; =============== S U B R O U T I N E =======================================
.text:00411949
.text:00411949 ; Attributes: bp-based frame info_from_lumina
.text:00411949
.text:00411949 GetCHTLangauge  proc near               ; CODE XREF: LoadMUILibraryW(x,x,x)+EC↓p
.text:00411949
.text:00411949 LCData          = word ptr -44h
.text:00411949 var_4           = dword ptr -4
.text:00411949
.text:00411949                 mov     edi, edi
.text:0041194B                 push    ebp
.text:0041194C                 mov     ebp, esp
.text:0041194E                 sub     esp, 44h
.text:00411951                 mov     eax, ___security_cookie
.text:00411956                 xor     eax, ebp
.text:00411958                 mov     [ebp+var_4], eax
.text:0041195B                 push    esi
.text:0041195C                 push    20h ; ' '       ; cchData
.text:0041195E                 lea     eax, [ebp+LCData]
.text:00411961                 mov     esi, 0C04h
.text:00411966                 push    eax             ; lpLCData
.text:00411967                 push    8               ; LCType
.text:00411969                 push    404h            ; Locale
.text:0041196E                 call    ds:GetLocaleInfoW
.text:00411974                 test    eax, eax
.text:00411976                 jz      short loc_411997
.text:00411978                 push    3               ; MaxCount
.text:0041197A                 lea     eax, [ebp+LCData]
.text:0041197D                 push    offset word_403BD4 ; String2
.text:00411982                 push    eax             ; String1
.text:00411983                 call    ds:wcsncmp
.text:00411989                 add     esp, 0Ch
.text:0041198C                 neg     eax
.text:0041198E                 sbb     eax, eax
.text:00411990                 and     eax, 0FFFFF800h
.text:00411995                 add     esi, eax
.text:00411997
.text:00411997 loc_411997:                             ; CODE XREF: GetCHTLangauge+2D↑j
.text:00411997                 mov     ecx, [ebp+var_4]
.text:0041199A                 mov     ax, si
.text:0041199D                 xor     ecx, ebp        ; StackCookie
.text:0041199F                 pop     esi
.text:004119A0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004119A5                 mov     esp, ebp
.text:004119A7                 pop     ebp
.text:004119A8                 retn
.text:004119A8 GetCHTLangauge  endp
.text:004119A8
.text:004119A9
.text:004119A9 ; =============== S U B R O U T I N E =======================================
.text:004119A9
.text:004119A9 ; Attributes: bp-based frame info_from_lumina
.text:004119A9
.text:004119A9 GetInstallLanguage proc near            ; CODE XREF: LoadMUILibraryW(x,x,x)+304↓p
.text:004119A9
.text:004119A9 cbData          = dword ptr -14h
.text:004119A9 phkResult       = dword ptr -10h
.text:004119A9 Data            = byte ptr -0Ch
.text:004119A9 var_4           = dword ptr -4
.text:004119A9
.text:004119A9                 mov     edi, edi
.text:004119AB                 push    ebp
.text:004119AC                 mov     ebp, esp
.text:004119AE                 sub     esp, 14h
.text:004119B1                 mov     eax, ___security_cookie
.text:004119B6                 xor     eax, ebp
.text:004119B8                 mov     [ebp+var_4], eax
.text:004119BB                 xor     eax, eax
.text:004119BD                 cmp     ax, word_415018
.text:004119C4                 jnz     short loc_411A45
.text:004119C6                 push    edi
.text:004119C7                 lea     eax, [ebp+phkResult]
.text:004119CA                 mov     [ebp+cbData], 6
.text:004119D1                 push    eax             ; phkResult
.text:004119D2                 push    1               ; samDesired
.text:004119D4                 xor     edi, edi
.text:004119D6                 push    edi             ; ulOptions
.text:004119D7                 push    offset SubKey   ; "Software\\Microsoft\\Active Setup\\Inst"...
.text:004119DC                 push    80000002h       ; hKey
.text:004119E1                 call    ds:RegOpenKeyExW
.text:004119E7                 test    eax, eax
.text:004119E9                 jnz     short loc_411A44
.text:004119EB                 push    esi
.text:004119EC                 lea     eax, [ebp+cbData]
.text:004119EF                 push    eax             ; lpcbData
.text:004119F0                 lea     eax, [ebp+Data]
.text:004119F3                 push    eax             ; lpData
.text:004119F4                 push    edi             ; lpType
.text:004119F5                 push    edi             ; lpReserved
.text:004119F6                 push    offset ValueName ; "Locale"
.text:004119FB                 push    [ebp+phkResult] ; hKey
.text:004119FE                 call    ds:RegQueryValueExW
.text:00411A04                 push    [ebp+phkResult] ; hKey
.text:00411A07                 mov     esi, eax
.text:00411A09                 call    ds:RegCloseKey
.text:00411A0F                 test    esi, esi
.text:00411A11                 pop     esi
.text:00411A12                 jnz     short loc_411A44
.text:00411A14
.text:00411A14 loc_411A14:                             ; CODE XREF: GetInstallLanguage+89↓j
.text:00411A14                 push    3               ; MaxCount
.text:00411A16                 push    ds:off_401118[edi*8] ; String2
.text:00411A1D                 lea     eax, [ebp+Data]
.text:00411A20                 push    eax             ; String1
.text:00411A21                 call    ds:_wcsnicmp
.text:00411A27                 add     esp, 0Ch
.text:00411A2A                 test    eax, eax
.text:00411A2C                 jz      short loc_411A36
.text:00411A2E                 inc     edi
.text:00411A2F                 cmp     edi, 1Ch
.text:00411A32                 jb      short loc_411A14
.text:00411A34                 jmp     short loc_411A44
.text:00411A36 ; ---------------------------------------------------------------------------
.text:00411A36
.text:00411A36 loc_411A36:                             ; CODE XREF: GetInstallLanguage+83↑j
.text:00411A36                 mov     ax, ds:word_40111C[edi*8]
.text:00411A3E                 mov     word_415018, ax
.text:00411A44
.text:00411A44 loc_411A44:                             ; CODE XREF: GetInstallLanguage+40↑j
.text:00411A44                                         ; GetInstallLanguage+69↑j ...
.text:00411A44                 pop     edi
.text:00411A45
.text:00411A45 loc_411A45:                             ; CODE XREF: GetInstallLanguage+1B↑j
.text:00411A45                 mov     ecx, [ebp+var_4]
.text:00411A48                 mov     ax, word_415018
.text:00411A4E                 xor     ecx, ebp        ; StackCookie
.text:00411A50                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00411A55                 mov     esp, ebp
.text:00411A57                 pop     ebp
.text:00411A58                 retn
.text:00411A58 GetInstallLanguage endp
.text:00411A58
.text:00411A59
.text:00411A59 ; =============== S U B R O U T I N E =======================================
.text:00411A59
.text:00411A59 ; Attributes: bp-based frame
.text:00411A59
.text:00411A59 ; int __thiscall sub_411A59(wchar_t *String1, void *)
.text:00411A59 sub_411A59      proc near               ; CODE XREF: sub_411B3A+3B↓p
.text:00411A59
.text:00411A59 var_4           = dword ptr -4
.text:00411A59 arg_0           = dword ptr  8
.text:00411A59
.text:00411A59                 mov     edi, edi
.text:00411A5B                 push    ebp
.text:00411A5C                 mov     ebp, esp
.text:00411A5E                 push    ecx
.text:00411A5F                 push    ebx
.text:00411A60                 push    edi
.text:00411A61                 mov     edi, ecx
.text:00411A63                 mov     ebx, edx
.text:00411A65                 test    edi, edi
.text:00411A67                 jz      loc_411B32
.text:00411A6D                 test    ebx, ebx
.text:00411A6F                 jz      loc_411B32
.text:00411A75                 cmp     [ebp+arg_0], 0
.text:00411A79                 jz      loc_411B32
.text:00411A7F                 push    esi
.text:00411A80                 xor     eax, eax
.text:00411A82                 mov     edx, eax
.text:00411A84                 push    19h
.text:00411A86                 mov     [ebp+var_4], edx
.text:00411A89                 pop     esi
.text:00411A8A
.text:00411A8A loc_411A8A:                             ; CODE XREF: sub_411A59+8D↓j
.text:00411A8A                 movzx   ecx, word ptr [edi]
.text:00411A8D                 lea     eax, [ecx-61h]
.text:00411A90                 cmp     ax, si
.text:00411A93                 ja      short loc_411A9A
.text:00411A95                 lea     eax, [ecx-61h]
.text:00411A98                 jmp     short loc_411AA5
.text:00411A9A ; ---------------------------------------------------------------------------
.text:00411A9A
.text:00411A9A loc_411A9A:                             ; CODE XREF: sub_411A59+3A↑j
.text:00411A9A                 lea     eax, [ecx-41h]
.text:00411A9D                 cmp     ax, si
.text:00411AA0                 ja      short loc_411ADD
.text:00411AA2                 lea     eax, [ecx-41h]
.text:00411AA5
.text:00411AA5 loc_411AA5:                             ; CODE XREF: sub_411A59+3F↑j
.text:00411AA5                 cmp     eax, 1Ah
.text:00411AA8                 jnb     short loc_411ADD
.text:00411AAA                 mov     esi, ds:dword_401078[eax*4]
.text:00411AB1                 test    esi, esi
.text:00411AB3                 jz      short loc_411ADA
.text:00411AB5                 mov     eax, [esi]
.text:00411AB7                 xor     ecx, ecx
.text:00411AB9                 cmp     [eax], cx
.text:00411ABC                 jz      short loc_411ADA
.text:00411ABE
.text:00411ABE loc_411ABE:                             ; CODE XREF: sub_411A59+7C↓j
.text:00411ABE                 push    eax             ; String2
.text:00411ABF                 push    edi             ; String1
.text:00411AC0                 call    _wcsicmp
.text:00411AC5                 pop     ecx
.text:00411AC6                 pop     ecx
.text:00411AC7                 test    eax, eax
.text:00411AC9                 jz      short loc_411AEA
.text:00411ACB                 add     esi, 8
.text:00411ACE                 xor     ecx, ecx
.text:00411AD0                 mov     eax, [esi]
.text:00411AD2                 cmp     [eax], cx
.text:00411AD5                 jnz     short loc_411ABE
.text:00411AD7                 mov     edx, [ebp+var_4]
.text:00411ADA
.text:00411ADA loc_411ADA:                             ; CODE XREF: sub_411A59+5A↑j
.text:00411ADA                                         ; sub_411A59+63↑j
.text:00411ADA                 push    19h
.text:00411ADC                 pop     esi
.text:00411ADD
.text:00411ADD loc_411ADD:                             ; CODE XREF: sub_411A59+47↑j
.text:00411ADD                                         ; sub_411A59+4F↑j
.text:00411ADD                 inc     edx
.text:00411ADE                 mov     edi, ebx
.text:00411AE0                 mov     [ebp+var_4], edx
.text:00411AE3                 cmp     edx, 2
.text:00411AE6                 jl      short loc_411A8A
.text:00411AE8                 jmp     short loc_411B31
.text:00411AEA ; ---------------------------------------------------------------------------
.text:00411AEA
.text:00411AEA loc_411AEA:                             ; CODE XREF: sub_411A59+70↑j
.text:00411AEA                 mov     ecx, [esi+4]
.text:00411AED                 xor     ebx, ebx
.text:00411AEF                 lea     edx, [ecx+2]
.text:00411AF2
.text:00411AF2 loc_411AF2:                             ; CODE XREF: sub_411A59+A2↓j
.text:00411AF2                 mov     ax, [ecx]
.text:00411AF5                 add     ecx, 2
.text:00411AF8                 cmp     ax, bx
.text:00411AFB                 jnz     short loc_411AF2
.text:00411AFD                 sub     ecx, edx
.text:00411AFF                 sar     ecx, 1
.text:00411B01                 cmp     ecx, 55h ; 'U'
.text:00411B04                 jnb     short loc_411B31
.text:00411B06                 mov     ecx, [esi+4]
.text:00411B09                 lea     edx, [ecx+2]
.text:00411B0C
.text:00411B0C loc_411B0C:                             ; CODE XREF: sub_411A59+BC↓j
.text:00411B0C                 mov     ax, [ecx]
.text:00411B0F                 add     ecx, 2
.text:00411B12                 cmp     ax, bx
.text:00411B15                 jnz     short loc_411B0C
.text:00411B17                 sub     ecx, edx
.text:00411B19                 sar     ecx, 1
.text:00411B1B                 lea     eax, ds:2[ecx*2]
.text:00411B22                 push    eax             ; Size
.text:00411B23                 push    dword ptr [esi+4] ; Src
.text:00411B26                 push    [ebp+arg_0]     ; void *
.text:00411B29                 call    memcpy
.text:00411B2E                 add     esp, 0Ch
.text:00411B31
.text:00411B31 loc_411B31:                             ; CODE XREF: sub_411A59+8F↑j
.text:00411B31                                         ; sub_411A59+AB↑j
.text:00411B31                 pop     esi
.text:00411B32
.text:00411B32 loc_411B32:                             ; CODE XREF: sub_411A59+E↑j
.text:00411B32                                         ; sub_411A59+16↑j ...
.text:00411B32                 pop     edi
.text:00411B33                 pop     ebx
.text:00411B34                 mov     esp, ebp
.text:00411B36                 pop     ebp
.text:00411B37                 retn    4
.text:00411B37 sub_411A59      endp
.text:00411B37
.text:00411B3A
.text:00411B3A ; =============== S U B R O U T I N E =======================================
.text:00411B3A
.text:00411B3A ; Attributes: bp-based frame
.text:00411B3A
.text:00411B3A sub_411B3A      proc near               ; CODE XREF: LoadMUILibraryW(x,x,x)+110↓p
.text:00411B3A                                         ; LoadMUILibraryW(x,x,x)+1D0↓p ...
.text:00411B3A
.text:00411B3A arg_0           = dword ptr  8
.text:00411B3A arg_4           = dword ptr  0Ch
.text:00411B3A
.text:00411B3A                 mov     edi, edi
.text:00411B3C                 push    ebp
.text:00411B3D                 mov     ebp, esp
.text:00411B3F                 push    esi
.text:00411B40                 mov     esi, edx
.text:00411B42                 test    esi, esi
.text:00411B44                 jz      short loc_411B7F
.text:00411B46                 cmp     [ebp+arg_0], 0
.text:00411B4A                 jz      short loc_411B7F
.text:00411B4C                 push    55h ; 'U'
.text:00411B4E                 call    sub_412066
.text:00411B53                 test    eax, eax
.text:00411B55                 jz      short loc_411B7F
.text:00411B57                 mov     edx, [ebp+arg_0]
.text:00411B5A                 push    ecx             ; int
.text:00411B5B                 push    ecx             ; int
.text:00411B5C                 mov     ecx, esi        ; Key
.text:00411B5E                 call    sub_4120EB
.text:00411B63                 mov     eax, [ebp+arg_4]
.text:00411B66                 test    eax, eax
.text:00411B68                 jz      short loc_411B7A
.text:00411B6A                 mov     edx, [ebp+arg_0]
.text:00411B6D                 xor     ecx, ecx
.text:00411B6F                 mov     [eax], cx
.text:00411B72                 mov     ecx, esi        ; String1
.text:00411B74                 push    eax             ; void *
.text:00411B75                 call    sub_411A59
.text:00411B7A
.text:00411B7A loc_411B7A:                             ; CODE XREF: sub_411B3A+2E↑j
.text:00411B7A                 xor     eax, eax
.text:00411B7C                 inc     eax
.text:00411B7D                 jmp     short loc_411B81
.text:00411B7F ; ---------------------------------------------------------------------------
.text:00411B7F
.text:00411B7F loc_411B7F:                             ; CODE XREF: sub_411B3A+A↑j
.text:00411B7F                                         ; sub_411B3A+10↑j ...
.text:00411B7F                 xor     eax, eax
.text:00411B81
.text:00411B81 loc_411B81:                             ; CODE XREF: sub_411B3A+43↑j
.text:00411B81                 pop     esi
.text:00411B82                 pop     ebp
.text:00411B83                 retn    8
.text:00411B83 sub_411B3A      endp
.text:00411B83
.text:00411B86
.text:00411B86 ; =============== S U B R O U T I N E =======================================
.text:00411B86
.text:00411B86 ; Attributes: bp-based frame info_from_lumina
.text:00411B86
.text:00411B86 ; HINSTANCE __stdcall LoadMUILibraryW(PCWSTR pszFullModuleName, DWORD dwLangConvention, LANGID LangID)
.text:00411B86 _LoadMUILibraryW@12 proc near           ; CODE XREF: sub_40EC2D+6D↑p
.text:00411B86
.text:00411B86 lpLibFileName   = dword ptr -420h
.text:00411B86 var_41C         = dword ptr -41Ch
.text:00411B86 var_418         = dword ptr -418h
.text:00411B86 FilePart        = dword ptr -414h
.text:00411B86 Buffer          = word ptr -410h
.text:00411B86 var_208         = dword ptr -208h
.text:00411B86 var_15C         = dword ptr -15Ch
.text:00411B86 var_B0          = dword ptr -0B0h
.text:00411B86 var_4           = dword ptr -4
.text:00411B86 dwLangConvention= byte ptr  0Ch
.text:00411B86 LangID          = byte ptr  10h
.text:00411B86
.text:00411B86                 mov     edi, edi
.text:00411B88                 push    ebp
.text:00411B89                 mov     ebp, esp
.text:00411B8B                 sub     esp, 420h
.text:00411B91                 mov     eax, ___security_cookie
.text:00411B96                 xor     eax, ebp
.text:00411B98                 mov     [ebp+var_4], eax
.text:00411B9B                 and     [ebp+FilePart], 0
.text:00411BA2                 push    edi
.text:00411BA3                 mov     edi, ecx
.text:00411BA5                 mov     [ebp+lpLibFileName], edi
.text:00411BAB                 test    edi, edi
.text:00411BAD                 jnz     short loc_411BB6
.text:00411BAF                 xor     eax, eax
.text:00411BB1                 jmp     loc_411FAD
.text:00411BB6 ; ---------------------------------------------------------------------------
.text:00411BB6
.text:00411BB6 loc_411BB6:                             ; CODE XREF: LoadMUILibraryW(x,x,x)+27↑j
.text:00411BB6                 push    ebx
.text:00411BB7                 push    esi
.text:00411BB8                 call    GetOSType
.text:00411BBD                 mov     dword_415020, eax
.text:00411BC2                 xor     esi, esi
.text:00411BC4                 and     eax, 20h
.text:00411BC7                 or      eax, 2
.text:00411BCA                 push    eax             ; dwFlags
.text:00411BCB                 push    esi             ; hFile
.text:00411BCC                 push    edi             ; lpLibFileName
.text:00411BCD                 call    ds:LoadLibraryExW
.text:00411BD3                 mov     ebx, eax
.text:00411BD5                 test    ebx, ebx
.text:00411BD7                 jz      loc_411FA9
.text:00411BDD                 test    byte ptr dword_415020, 20h
.text:00411BE4                 jnz     loc_411FAB
.text:00411BEA                 lea     eax, [ebp+FilePart]
.text:00411BF0                 push    eax             ; lpFilePart
.text:00411BF1                 lea     eax, [ebp+Buffer]
.text:00411BF7                 push    eax             ; lpBuffer
.text:00411BF8                 push    104h            ; nBufferLength
.text:00411BFD                 push    esi             ; lpExtension
.text:00411BFE                 push    edi             ; lpFileName
.text:00411BFF                 push    esi             ; lpPath
.text:00411C00                 call    ds:SearchPathW
.text:00411C06                 test    eax, eax
.text:00411C08                 jz      loc_411FA2
.text:00411C0E                 mov     eax, [ebp+FilePart]
.text:00411C14                 test    eax, eax
.text:00411C16                 jnz     short loc_411C28
.text:00411C18                 lea     eax, [ebp+Buffer]
.text:00411C1E                 xor     edi, edi
.text:00411C20                 mov     [ebp+FilePart], eax
.text:00411C26                 jmp     short loc_411C34
.text:00411C28 ; ---------------------------------------------------------------------------
.text:00411C28
.text:00411C28 loc_411C28:                             ; CODE XREF: LoadMUILibraryW(x,x,x)+90↑j
.text:00411C28                 xor     ecx, ecx
.text:00411C2A                 lea     edi, [ebp+Buffer]
.text:00411C30                 mov     [eax-2], cx
.text:00411C34
.text:00411C34 loc_411C34:                             ; CODE XREF: LoadMUILibraryW(x,x,x)+A0↑j
.text:00411C34                 push    0               ; wLanguage
.text:00411C36                 push    1               ; lpName
.text:00411C38                 push    offset Type     ; "MUI"
.text:00411C3D                 push    ebx             ; hModule
.text:00411C3E                 call    ds:FindResourceExW
.text:00411C44                 test    eax, eax
.text:00411C46                 jz      loc_411E34
.text:00411C4C                 mov     eax, dword_415020
.text:00411C51                 test    al, 4
.text:00411C53                 jz      loc_411E86
.text:00411C59                 call    ds:GetUserDefaultUILanguage
.text:00411C5F                 movzx   eax, ax
.text:00411C62                 mov     ecx, 404h
.text:00411C67                 mov     [ebp+var_418], eax
.text:00411C6D                 cmp     ax, cx
.text:00411C70                 jnz     short loc_411C80
.text:00411C72                 call    GetCHTLangauge
.text:00411C77                 movzx   eax, ax
.text:00411C7A
.text:00411C7A loc_411C7A:                             ; CODE XREF: LoadMUILibraryW(x,x,x)+199↓j
.text:00411C7A                 mov     [ebp+var_418], eax
.text:00411C80
.text:00411C80 loc_411C80:                             ; CODE XREF: LoadMUILibraryW(x,x,x)+EA↑j
.text:00411C80                 lea     ecx, [ebp+var_15C]
.text:00411C86                 push    ecx
.text:00411C87                 lea     ecx, [ebp+var_208]
.text:00411C8D                 push    ecx
.text:00411C8E                 lea     edx, [ebp+var_B0]
.text:00411C94                 mov     ecx, eax
.text:00411C96                 call    sub_411B3A
.text:00411C9B                 test    eax, eax
.text:00411C9D                 jz      loc_411E2C
.text:00411CA3                 push    [ebp+FilePart]  ; char
.text:00411CA9                 lea     eax, [ebp+var_B0]
.text:00411CAF                 mov     edx, edi        ; Args
.text:00411CB1                 push    eax             ; int
.text:00411CB2                 mov     ecx, ebx        ; int
.text:00411CB4                 call    LoadMUIFile
.text:00411CB9                 mov     esi, eax
.text:00411CBB                 test    esi, esi
.text:00411CBD                 jnz     loc_411F75
.text:00411CC3                 push    [ebp+FilePart]  ; char
.text:00411CC9                 lea     eax, [ebp+var_208]
.text:00411CCF                 mov     edx, edi        ; Args
.text:00411CD1                 push    eax             ; int
.text:00411CD2                 mov     ecx, ebx        ; int
.text:00411CD4                 call    LoadMUIFile
.text:00411CD9                 mov     esi, eax
.text:00411CDB                 test    esi, esi
.text:00411CDD                 jnz     loc_411F75
.text:00411CE3                 cmp     word ptr [ebp+var_15C], ax
.text:00411CEA                 jz      short loc_411D0C
.text:00411CEC                 push    [ebp+FilePart]  ; char
.text:00411CF2                 lea     eax, [ebp+var_15C]
.text:00411CF8                 mov     edx, edi        ; Args
.text:00411CFA                 push    eax             ; int
.text:00411CFB                 mov     ecx, ebx        ; int
.text:00411CFD                 call    LoadMUIFile
.text:00411D02                 mov     esi, eax
.text:00411D04                 test    esi, esi
.text:00411D06                 jnz     loc_411F75
.text:00411D0C
.text:00411D0C loc_411D0C:                             ; CODE XREF: LoadMUILibraryW(x,x,x)+164↑j
.text:00411D0C                 mov     eax, 0C04h
.text:00411D11                 cmp     word ptr [ebp+var_418], ax
.text:00411D18                 jnz     short loc_411D24
.text:00411D1A                 mov     eax, 404h
.text:00411D1F                 jmp     loc_411C7A
.text:00411D24 ; ---------------------------------------------------------------------------
.text:00411D24
.text:00411D24 loc_411D24:                             ; CODE XREF: LoadMUILibraryW(x,x,x)+192↑j
.text:00411D24                 call    ds:GetSystemDefaultUILanguage
.text:00411D2A                 movzx   eax, ax
.text:00411D2D                 mov     [ebp+var_41C], eax
.text:00411D33                 cmp     ax, word ptr [ebp+var_418]
.text:00411D3A                 jz      loc_411DD2
.text:00411D40                 lea     ecx, [ebp+var_15C]
.text:00411D46                 push    ecx
.text:00411D47                 lea     ecx, [ebp+var_208]
.text:00411D4D                 push    ecx
.text:00411D4E                 lea     edx, [ebp+var_B0]
.text:00411D54                 mov     ecx, eax
.text:00411D56                 call    sub_411B3A
.text:00411D5B                 test    eax, eax
.text:00411D5D                 jz      loc_411E34
.text:00411D63                 push    [ebp+FilePart]  ; char
.text:00411D69                 lea     eax, [ebp+var_B0]
.text:00411D6F                 mov     edx, edi        ; Args
.text:00411D71                 push    eax             ; int
.text:00411D72                 mov     ecx, ebx        ; int
.text:00411D74                 call    LoadMUIFile
.text:00411D79                 mov     esi, eax
.text:00411D7B                 test    esi, esi
.text:00411D7D                 jnz     loc_411F75
.text:00411D83                 push    [ebp+FilePart]  ; char
.text:00411D89                 lea     eax, [ebp+var_208]
.text:00411D8F                 mov     edx, edi        ; Args
.text:00411D91                 push    eax             ; int
.text:00411D92                 mov     ecx, ebx        ; int
.text:00411D94                 call    LoadMUIFile
.text:00411D99                 mov     esi, eax
.text:00411D9B                 test    esi, esi
.text:00411D9D                 jnz     loc_411F75
.text:00411DA3                 cmp     word ptr [ebp+var_15C], ax
.text:00411DAA                 jz      short loc_411DCC
.text:00411DAC                 push    [ebp+FilePart]  ; char
.text:00411DB2                 lea     eax, [ebp+var_15C]
.text:00411DB8                 mov     edx, edi        ; Args
.text:00411DBA                 push    eax             ; int
.text:00411DBB                 mov     ecx, ebx        ; int
.text:00411DBD                 call    LoadMUIFile
.text:00411DC2                 mov     esi, eax
.text:00411DC4                 test    esi, esi
.text:00411DC6                 jnz     loc_411F75
.text:00411DCC
.text:00411DCC loc_411DCC:                             ; CODE XREF: LoadMUILibraryW(x,x,x)+224↑j
.text:00411DCC                 mov     eax, [ebp+var_41C]
.text:00411DD2
.text:00411DD2 loc_411DD2:                             ; CODE XREF: LoadMUILibraryW(x,x,x)+1B4↑j
.text:00411DD2                 mov     ecx, 409h
.text:00411DD7                 cmp     cx, word ptr [ebp+var_418]
.text:00411DDE                 jz      short loc_411E19
.text:00411DE0                 cmp     cx, ax
.text:00411DE3                 jz      short loc_411E19
.text:00411DE5                 push    0
.text:00411DE7                 lea     eax, [ebp+var_208]
.text:00411DED                 push    eax
.text:00411DEE                 lea     edx, [ebp+var_B0]
.text:00411DF4                 call    sub_411B3A
.text:00411DF9                 push    [ebp+FilePart]  ; char
.text:00411DFF                 lea     eax, [ebp+var_B0]
.text:00411E05                 mov     edx, edi        ; Args
.text:00411E07                 push    eax             ; int
.text:00411E08                 mov     ecx, ebx        ; int
.text:00411E0A                 call    LoadMUIFile
.text:00411E0F                 mov     esi, eax
.text:00411E11                 test    esi, esi
.text:00411E13                 jnz     loc_411F75
.text:00411E19
.text:00411E19 loc_411E19:                             ; CODE XREF: LoadMUILibraryW(x,x,x)+258↑j
.text:00411E19                                         ; LoadMUILibraryW(x,x,x)+25D↑j
.text:00411E19                 push    [ebp+FilePart]  ; char
.text:00411E1F                 mov     edx, edi        ; Args
.text:00411E21                 mov     ecx, ebx        ; int
.text:00411E23                 push    0               ; int
.text:00411E25                 call    LoadMUIFile
.text:00411E2A                 mov     esi, eax
.text:00411E2C
.text:00411E2C loc_411E2C:                             ; CODE XREF: LoadMUILibraryW(x,x,x)+117↑j
.text:00411E2C                 test    esi, esi
.text:00411E2E                 jnz     loc_411F75
.text:00411E34
.text:00411E34 loc_411E34:                             ; CODE XREF: LoadMUILibraryW(x,x,x)+C0↑j
.text:00411E34                                         ; LoadMUILibraryW(x,x,x)+1D7↑j ...
.text:00411E34                 test    bl, 1
.text:00411E37                 jz      loc_411F9E
.text:00411E3D                 push    ebx             ; hLibModule
.text:00411E3E                 call    ds:FreeLibrary
.text:00411E44                 call    GetOSType
.text:00411E49                 test    al, 38h
.text:00411E4B                 jz      loc_411F80
.text:00411E51                 push    [ebp+FilePart]
.text:00411E57                 lea     eax, [ebp+Buffer]
.text:00411E5D                 push    edi             ; Args
.text:00411E5E                 push    offset pszFormat ; "%s\\%s"
.text:00411E63                 push    104h            ; int
.text:00411E68                 push    eax             ; Buffer
.text:00411E69                 call    ?StringCchPrintfW@@YAJPAGIPBGZZ_0 ; StringCchPrintfW(ushort *,uint,ushort const *,...)
.text:00411E6E                 add     esp, 14h
.text:00411E71                 lea     ecx, [ebp+Buffer] ; lpLibFileName
.text:00411E77                 xor     edx, edx
.text:00411E79                 inc     edx
.text:00411E7A                 push    0               ; int
.text:00411E7C                 call    MapMUIFile
.text:00411E81                 jmp     loc_411F9C
.text:00411E86 ; ---------------------------------------------------------------------------
.text:00411E86
.text:00411E86 loc_411E86:                             ; CODE XREF: LoadMUILibraryW(x,x,x)+CD↑j
.text:00411E86                 test    al, 3
.text:00411E88                 jz      short loc_411E34
.text:00411E8A                 call    GetInstallLanguage
.text:00411E8F                 lea     ecx, [ebp+var_15C]
.text:00411E95                 movzx   eax, ax
.text:00411E98                 push    ecx
.text:00411E99                 lea     ecx, [ebp+var_208]
.text:00411E9F                 mov     [ebp+var_41C], eax
.text:00411EA5                 push    ecx
.text:00411EA6                 lea     edx, [ebp+var_B0]
.text:00411EAC                 mov     ecx, eax
.text:00411EAE                 call    sub_411B3A
.text:00411EB3                 test    eax, eax
.text:00411EB5                 jz      loc_411E34
.text:00411EBB                 push    [ebp+FilePart]  ; char
.text:00411EC1                 lea     eax, [ebp+var_B0]
.text:00411EC7                 mov     edx, edi        ; Args
.text:00411EC9                 push    eax             ; int
.text:00411ECA                 mov     ecx, ebx        ; int
.text:00411ECC                 call    LoadMUIFile
.text:00411ED1                 mov     esi, eax
.text:00411ED3                 test    esi, esi
.text:00411ED5                 jnz     loc_411F75
.text:00411EDB                 push    [ebp+FilePart]  ; char
.text:00411EE1                 lea     eax, [ebp+var_208]
.text:00411EE7                 mov     edx, edi        ; Args
.text:00411EE9                 push    eax             ; int
.text:00411EEA                 mov     ecx, ebx        ; int
.text:00411EEC                 call    LoadMUIFile
.text:00411EF1                 mov     esi, eax
.text:00411EF3                 test    esi, esi
.text:00411EF5                 jnz     short loc_411F75
.text:00411EF7                 cmp     word ptr [ebp+var_15C], ax
.text:00411EFE                 jz      short loc_411F1C
.text:00411F00                 push    [ebp+FilePart]  ; char
.text:00411F06                 lea     eax, [ebp+var_15C]
.text:00411F0C                 mov     edx, edi        ; Args
.text:00411F0E                 push    eax             ; int
.text:00411F0F                 mov     ecx, ebx        ; int
.text:00411F11                 call    LoadMUIFile
.text:00411F16                 mov     esi, eax
.text:00411F18                 test    esi, esi
.text:00411F1A                 jnz     short loc_411F75
.text:00411F1C
.text:00411F1C loc_411F1C:                             ; CODE XREF: LoadMUILibraryW(x,x,x)+378↑j
.text:00411F1C                 mov     ecx, 409h
.text:00411F21                 cmp     cx, word ptr [ebp+var_41C]
.text:00411F28                 jz      short loc_411F5A
.text:00411F2A                 push    0
.text:00411F2C                 lea     eax, [ebp+var_208]
.text:00411F32                 push    eax
.text:00411F33                 lea     edx, [ebp+var_B0]
.text:00411F39                 call    sub_411B3A
.text:00411F3E                 push    [ebp+FilePart]  ; char
.text:00411F44                 lea     eax, [ebp+var_B0]
.text:00411F4A                 mov     edx, edi        ; Args
.text:00411F4C                 push    eax             ; int
.text:00411F4D                 mov     ecx, ebx        ; int
.text:00411F4F                 call    LoadMUIFile
.text:00411F54                 mov     esi, eax
.text:00411F56                 test    esi, esi
.text:00411F58                 jnz     short loc_411F75
.text:00411F5A
.text:00411F5A loc_411F5A:                             ; CODE XREF: LoadMUILibraryW(x,x,x)+3A2↑j
.text:00411F5A                 push    [ebp+FilePart]  ; char
.text:00411F60                 mov     edx, edi        ; Args
.text:00411F62                 mov     ecx, ebx        ; int
.text:00411F64                 push    0               ; int
.text:00411F66                 call    LoadMUIFile
.text:00411F6B                 mov     esi, eax
.text:00411F6D                 test    esi, esi
.text:00411F6F                 jz      loc_411E34
.text:00411F75
.text:00411F75 loc_411F75:                             ; CODE XREF: LoadMUILibraryW(x,x,x)+137↑j
.text:00411F75                                         ; LoadMUILibraryW(x,x,x)+157↑j ...
.text:00411F75                 push    ebx             ; hLibModule
.text:00411F76                 call    ds:FreeLibrary
.text:00411F7C                 mov     eax, esi
.text:00411F7E                 jmp     short loc_411FAB
.text:00411F80 ; ---------------------------------------------------------------------------
.text:00411F80
.text:00411F80 loc_411F80:                             ; CODE XREF: LoadMUILibraryW(x,x,x)+2C5↑j
.text:00411F80                 call    GetOSType
.text:00411F85                 push    0
.text:00411F87                 test    al, 26h
.text:00411F89                 pop     eax
.text:00411F8A                 setnz   al
.text:00411F8D                 push    eax             ; dwFlags
.text:00411F8E                 push    0               ; hFile
.text:00411F90                 push    [ebp+lpLibFileName] ; lpLibFileName
.text:00411F96                 call    ds:LoadLibraryExW
.text:00411F9C
.text:00411F9C loc_411F9C:                             ; CODE XREF: LoadMUILibraryW(x,x,x)+2FB↑j
.text:00411F9C                 mov     ebx, eax
.text:00411F9E
.text:00411F9E loc_411F9E:                             ; CODE XREF: LoadMUILibraryW(x,x,x)+2B1↑j
.text:00411F9E                 mov     eax, ebx
.text:00411FA0                 jmp     short loc_411FAB
.text:00411FA2 ; ---------------------------------------------------------------------------
.text:00411FA2
.text:00411FA2 loc_411FA2:                             ; CODE XREF: LoadMUILibraryW(x,x,x)+82↑j
.text:00411FA2                 push    ebx             ; hLibModule
.text:00411FA3                 call    ds:FreeLibrary
.text:00411FA9
.text:00411FA9 loc_411FA9:                             ; CODE XREF: LoadMUILibraryW(x,x,x)+51↑j
.text:00411FA9                 xor     eax, eax
.text:00411FAB
.text:00411FAB loc_411FAB:                             ; CODE XREF: LoadMUILibraryW(x,x,x)+5E↑j
.text:00411FAB                                         ; LoadMUILibraryW(x,x,x)+3F8↑j ...
.text:00411FAB                 pop     esi
.text:00411FAC                 pop     ebx
.text:00411FAD
.text:00411FAD loc_411FAD:                             ; CODE XREF: LoadMUILibraryW(x,x,x)+2B↑j
.text:00411FAD                 mov     ecx, [ebp+var_4]
.text:00411FB0                 xor     ecx, ebp        ; StackCookie
.text:00411FB2                 pop     edi
.text:00411FB3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00411FB8                 mov     esp, ebp
.text:00411FBA                 pop     ebp
.text:00411FBB                 retn    4
.text:00411FBB _LoadMUILibraryW@12 endp
.text:00411FBB
.text:00411FBE
.text:00411FBE ; =============== S U B R O U T I N E =======================================
.text:00411FBE
.text:00411FBE ; Attributes: bp-based frame
.text:00411FBE
.text:00411FBE sub_411FBE      proc near               ; CODE XREF: sub_412066+66↓p
.text:00411FBE                                         ; sub_4120EB+66↓p
.text:00411FBE
.text:00411FBE arg_0           = dword ptr  8
.text:00411FBE arg_4           = dword ptr  0Ch
.text:00411FBE
.text:00411FBE                 mov     edi, edi
.text:00411FC0                 push    ebp
.text:00411FC1                 mov     ebp, esp
.text:00411FC3                 push    edi
.text:00411FC4                 mov     edi, [ebp+arg_4]
.text:00411FC7                 cmp     edi, 7FFFFFFEh
.text:00411FCD                 jbe     short loc_411FD6
.text:00411FCF                 mov     edx, 80070057h
.text:00411FD4                 jmp     short loc_41200B
.text:00411FD6 ; ---------------------------------------------------------------------------
.text:00411FD6
.text:00411FD6 loc_411FD6:                             ; CODE XREF: sub_411FBE+F↑j
.text:00411FD6                 push    ebx
.text:00411FD7                 mov     ebx, [ebp+arg_0]
.text:00411FDA                 xor     edx, edx
.text:00411FDC                 push    esi
.text:00411FDD                 push    55h ; 'U'
.text:00411FDF                 pop     esi
.text:00411FE0                 sub     ebx, ecx
.text:00411FE2
.text:00411FE2 loc_411FE2:                             ; CODE XREF: sub_411FBE+3D↓j
.text:00411FE2                 lea     eax, [edi-55h]
.text:00411FE5                 add     eax, esi
.text:00411FE7                 jz      short loc_411FFD
.text:00411FE9                 movzx   eax, word ptr [ebx+ecx]
.text:00411FED                 test    ax, ax
.text:00411FF0                 jz      short loc_411FFD
.text:00411FF2                 mov     [ecx], ax
.text:00411FF5                 add     ecx, 2
.text:00411FF8                 sub     esi, 1
.text:00411FFB                 jnz     short loc_411FE2
.text:00411FFD
.text:00411FFD loc_411FFD:                             ; CODE XREF: sub_411FBE+29↑j
.text:00411FFD                                         ; sub_411FBE+32↑j
.text:00411FFD                 test    esi, esi
.text:00411FFF                 pop     esi
.text:00412000                 pop     ebx
.text:00412001                 jnz     short loc_41200B
.text:00412003                 sub     ecx, 2
.text:00412006                 mov     edx, 8007007Ah
.text:0041200B
.text:0041200B loc_41200B:                             ; CODE XREF: sub_411FBE+16↑j
.text:0041200B                                         ; sub_411FBE+43↑j
.text:0041200B                 xor     eax, eax
.text:0041200D                 mov     [ecx], ax
.text:00412010                 mov     eax, edx
.text:00412012                 pop     edi
.text:00412013                 pop     ebp
.text:00412014                 retn    8
.text:00412014 sub_411FBE      endp
.text:00412014
.text:00412014 ; ---------------------------------------------------------------------------
.text:00412017                 align 10h
.text:00412020
.text:00412020 ; =============== S U B R O U T I N E =======================================
.text:00412020
.text:00412020 ; Attributes: bp-based frame info_from_lumina
.text:00412020
.text:00412020 ; int __cdecl CompareLangIDs(const void *arg1, const void *arg2)
.text:00412020 ?CompareLangIDs@@YAHPBX0@Z proc near    ; DATA XREF: .text:00403028↑o
.text:00412020                                         ; sub_412066:loc_412088↓o
.text:00412020
.text:00412020 arg_0           = dword ptr  8
.text:00412020 arg_4           = dword ptr  0Ch
.text:00412020
.text:00412020                 mov     edi, edi
.text:00412022                 push    ebp
.text:00412023                 mov     ebp, esp
.text:00412025                 mov     eax, [ebp+arg_0]
.text:00412028                 movzx   ecx, word ptr [eax]
.text:0041202B                 mov     eax, [ebp+arg_4]
.text:0041202E                 movzx   eax, word ptr [eax+4]
.text:00412032                 cmp     ax, cx
.text:00412035                 jnz     short loc_41203B
.text:00412037                 xor     eax, eax
.text:00412039                 pop     ebp
.text:0041203A                 retn
.text:0041203B ; ---------------------------------------------------------------------------
.text:0041203B
.text:0041203B loc_41203B:                             ; CODE XREF: CompareLangIDs(void const *,void const *)+15↑j
.text:0041203B                 sbb     eax, eax
.text:0041203D                 and     eax, 2
.text:00412040                 dec     eax
.text:00412041                 pop     ebp
.text:00412042                 retn
.text:00412042 ?CompareLangIDs@@YAHPBX0@Z endp
.text:00412042
.text:00412042 ; ---------------------------------------------------------------------------
.text:00412043                 align 10h
.text:00412050
.text:00412050 ; =============== S U B R O U T I N E =======================================
.text:00412050
.text:00412050 ; Attributes: bp-based frame
.text:00412050
.text:00412050 ; int __cdecl sub_412050(const void *, const void *)
.text:00412050 sub_412050      proc near               ; DATA XREF: .text:0040302C↑o
.text:00412050                                         ; sub_4120EB+E↓o
.text:00412050
.text:00412050 String1         = dword ptr  8
.text:00412050 arg_4           = dword ptr  0Ch
.text:00412050
.text:00412050                 mov     edi, edi
.text:00412052                 push    ebp
.text:00412053                 mov     ebp, esp
.text:00412055                 mov     eax, [ebp+arg_4]
.text:00412058                 push    dword ptr [eax] ; String2
.text:0041205A                 push    [ebp+String1]   ; String1
.text:0041205D                 call    _wcsicmp
.text:00412062                 pop     ecx
.text:00412063                 pop     ecx
.text:00412064                 pop     ebp
.text:00412065                 retn
.text:00412065 sub_412050      endp
.text:00412065
.text:00412066
.text:00412066 ; =============== S U B R O U T I N E =======================================
.text:00412066
.text:00412066 ; Attributes: bp-based frame
.text:00412066
.text:00412066 sub_412066      proc near               ; CODE XREF: sub_411B3A+14↑p
.text:00412066
.text:00412066 Key             = word ptr -4
.text:00412066 arg_0           = dword ptr  8
.text:00412066
.text:00412066                 mov     edi, edi
.text:00412068                 push    ebp
.text:00412069                 mov     ebp, esp
.text:0041206B                 push    ecx
.text:0041206C                 push    esi
.text:0041206D                 mov     esi, edx
.text:0041206F                 mov     [ebp+Key], cx
.text:00412073                 test    esi, esi
.text:00412075                 jnz     short loc_412088
.text:00412077                 cmp     [ebp+arg_0], edx
.text:0041207A                 jz      short loc_412088
.text:0041207C
.text:0041207C loc_41207C:                             ; CODE XREF: sub_412066+42↓j
.text:0041207C                 push    57h ; 'W'       ; dwErrCode
.text:0041207E                 call    ds:SetLastError
.text:00412084                 xor     eax, eax
.text:00412086                 jmp     short loc_4120E4
.text:00412088 ; ---------------------------------------------------------------------------
.text:00412088
.text:00412088 loc_412088:                             ; CODE XREF: sub_412066+F↑j
.text:00412088                                         ; sub_412066+14↑j
.text:00412088                 push    offset ?CompareLangIDs@@YAHPBX0@Z ; CompareFunction
.text:0041208D                 push    0Ch             ; SizeOfElements
.text:0041208F                 push    1B3h            ; NumOfElements
.text:00412094                 lea     eax, [ebp+Key]
.text:00412097                 push    offset off_4011F8 ; Base
.text:0041209C                 push    eax             ; Key
.text:0041209D                 call    ds:bsearch
.text:004120A3                 add     esp, 14h
.text:004120A6                 test    eax, eax
.text:004120A8                 jz      short loc_41207C
.text:004120AA                 mov     edx, [eax]
.text:004120AC                 mov     ecx, edx
.text:004120AE                 push    edi
.text:004120AF                 lea     edi, [ecx+2]
.text:004120B2
.text:004120B2 loc_4120B2:                             ; CODE XREF: sub_412066+55↓j
.text:004120B2                 mov     ax, [ecx]
.text:004120B5                 add     ecx, 2
.text:004120B8                 test    ax, ax
.text:004120BB                 jnz     short loc_4120B2
.text:004120BD                 sub     ecx, edi
.text:004120BF                 sar     ecx, 1
.text:004120C1                 lea     edi, [ecx+1]
.text:004120C4                 test    esi, esi
.text:004120C6                 jz      short loc_4120E1
.text:004120C8                 push    edi
.text:004120C9                 push    edx
.text:004120CA                 mov     ecx, esi
.text:004120CC                 call    sub_411FBE
.text:004120D1                 test    eax, eax
.text:004120D3                 jns     short loc_4120E1
.text:004120D5                 push    7Ah ; 'z'       ; dwErrCode
.text:004120D7                 call    ds:SetLastError
.text:004120DD                 xor     eax, eax
.text:004120DF                 jmp     short loc_4120E3
.text:004120E1 ; ---------------------------------------------------------------------------
.text:004120E1
.text:004120E1 loc_4120E1:                             ; CODE XREF: sub_412066+60↑j
.text:004120E1                                         ; sub_412066+6D↑j
.text:004120E1                 mov     eax, edi
.text:004120E3
.text:004120E3 loc_4120E3:                             ; CODE XREF: sub_412066+79↑j
.text:004120E3                 pop     edi
.text:004120E4
.text:004120E4 loc_4120E4:                             ; CODE XREF: sub_412066+20↑j
.text:004120E4                 pop     esi
.text:004120E5                 mov     esp, ebp
.text:004120E7                 pop     ebp
.text:004120E8                 retn    4
.text:004120E8 sub_412066      endp
.text:004120E8
.text:004120EB
.text:004120EB ; =============== S U B R O U T I N E =======================================
.text:004120EB
.text:004120EB
.text:004120EB ; int __thiscall sub_4120EB(void *Key, int, int)
.text:004120EB sub_4120EB      proc near               ; CODE XREF: sub_411B3A+24↑p
.text:004120EB                 mov     edi, edi
.text:004120ED                 push    esi
.text:004120EE                 mov     esi, edx
.text:004120F0                 push    edi
.text:004120F1                 test    ecx, ecx
.text:004120F3                 jz      short loc_412162
.text:004120F5                 test    esi, esi
.text:004120F7                 jz      short loc_412162
.text:004120F9                 push    offset sub_412050 ; CompareFunction
.text:004120FE                 push    4               ; SizeOfElements
.text:00412100                 push    1B3h            ; NumOfElements
.text:00412105                 mov     edi, offset off_402660
.text:0041210A                 push    edi             ; Base
.text:0041210B                 push    ecx             ; Key
.text:0041210C                 call    ds:bsearch
.text:00412112                 add     esp, 14h
.text:00412115                 test    eax, eax
.text:00412117                 jz      short loc_412162
.text:00412119                 sub     eax, edi
.text:0041211B                 mov     ecx, offset off_4011F8 ; "ar"
.text:00412120                 sar     eax, 2
.text:00412123                 movsx   eax, ds:word_405098[eax*2]
.text:0041212B                 imul    eax, 0Ch
.text:0041212E                 imul    eax, [eax+ecx+8], 0Ch
.text:00412133                 mov     edx, [eax+ecx]
.text:00412136                 mov     ecx, edx
.text:00412138                 lea     edi, [ecx+2]
.text:0041213B
.text:0041213B loc_41213B:                             ; CODE XREF: sub_4120EB+59↓j
.text:0041213B                 mov     ax, [ecx]
.text:0041213E                 add     ecx, 2
.text:00412141                 test    ax, ax
.text:00412144                 jnz     short loc_41213B
.text:00412146                 sub     ecx, edi
.text:00412148                 sar     ecx, 1
.text:0041214A                 lea     edi, [ecx+1]
.text:0041214D                 mov     ecx, esi
.text:0041214F                 push    edi
.text:00412150                 push    edx
.text:00412151                 call    sub_411FBE
.text:00412156                 test    eax, eax
.text:00412158                 jns     short loc_41215E
.text:0041215A                 push    7Ah ; 'z'
.text:0041215C                 jmp     short loc_412164
.text:0041215E ; ---------------------------------------------------------------------------
.text:0041215E
.text:0041215E loc_41215E:                             ; CODE XREF: sub_4120EB+6D↑j
.text:0041215E                 mov     eax, edi
.text:00412160                 jmp     short loc_41216C
.text:00412162 ; ---------------------------------------------------------------------------
.text:00412162
.text:00412162 loc_412162:                             ; CODE XREF: sub_4120EB+8↑j
.text:00412162                                         ; sub_4120EB+C↑j ...
.text:00412162                 push    57h ; 'W'       ; dwErrCode
.text:00412164
.text:00412164 loc_412164:                             ; CODE XREF: sub_4120EB+71↑j
.text:00412164                 call    ds:SetLastError
.text:0041216A                 xor     eax, eax
.text:0041216C
.text:0041216C loc_41216C:                             ; CODE XREF: sub_4120EB+75↑j
.text:0041216C                 pop     edi
.text:0041216D                 pop     esi
.text:0041216E                 retn    8
.text:0041216E sub_4120EB      endp
.text:0041216E
.text:00412171
.text:00412171 ; =============== S U B R O U T I N E =======================================
.text:00412171
.text:00412171 ; Attributes: bp-based frame info_from_lumina
.text:00412171
.text:00412171 ; int __thiscall LUAIsElevatedToken(HANDLE TokenHandle, int)
.text:00412171 _LUAIsElevatedToken@12 proc near        ; CODE XREF: sub_4121E0+4E↓p
.text:00412171
.text:00412171 var_C           = dword ptr -0Ch
.text:00412171 ReturnLength    = dword ptr -8
.text:00412171 TokenInformation= dword ptr -4
.text:00412171 arg_0           = dword ptr  8
.text:00412171
.text:00412171                 mov     edi, edi
.text:00412173                 push    ebp
.text:00412174                 mov     ebp, esp
.text:00412176                 sub     esp, 0Ch
.text:00412179                 push    ebx
.text:0041217A                 mov     ebx, [ebp+arg_0]
.text:0041217D                 xor     eax, eax
.text:0041217F                 push    esi
.text:00412180                 inc     eax
.text:00412181                 mov     esi, edx
.text:00412183                 push    edi
.text:00412184                 mov     [ebp+TokenInformation], eax
.text:00412187                 mov     edi, ecx
.text:00412189                 mov     [ebx], eax
.text:0041218B                 lea     eax, [ebp+ReturnLength]
.text:0041218E                 and     dword ptr [esi], 0
.text:00412191                 push    eax             ; ReturnLength
.text:00412192                 push    4               ; TokenInformationLength
.text:00412194                 lea     eax, [ebp+TokenInformation]
.text:00412197                 push    eax             ; TokenInformation
.text:00412198                 push    12h             ; TokenInformationClass
.text:0041219A                 push    edi             ; TokenHandle
.text:0041219B                 call    ds:NtQueryInformationToken
.text:004121A1                 test    eax, eax
.text:004121A3                 js      short loc_4121D7
.text:004121A5                 cmp     [ebp+TokenInformation], 2
.text:004121A9                 jz      short loc_4121D1
.text:004121AB                 cmp     [ebp+TokenInformation], 1
.text:004121AF                 jnz     short loc_4121D7
.text:004121B1                 and     dword ptr [ebx], 0
.text:004121B4                 lea     eax, [ebp+ReturnLength]
.text:004121B7                 push    eax             ; ReturnLength
.text:004121B8                 push    4               ; TokenInformationLength
.text:004121BA                 lea     eax, [ebp+var_C]
.text:004121BD                 push    eax             ; TokenInformation
.text:004121BE                 push    14h             ; TokenInformationClass
.text:004121C0                 push    edi             ; TokenHandle
.text:004121C1                 call    ds:NtQueryInformationToken
.text:004121C7                 test    eax, eax
.text:004121C9                 js      short loc_4121D7
.text:004121CB                 cmp     [ebp+var_C], 0
.text:004121CF                 jz      short loc_4121D7
.text:004121D1
.text:004121D1 loc_4121D1:                             ; CODE XREF: LUAIsElevatedToken(x,x,x)+38↑j
.text:004121D1                 mov     dword ptr [esi], 1
.text:004121D7
.text:004121D7 loc_4121D7:                             ; CODE XREF: LUAIsElevatedToken(x,x,x)+32↑j
.text:004121D7                                         ; LUAIsElevatedToken(x,x,x)+3E↑j ...
.text:004121D7                 pop     edi
.text:004121D8                 pop     esi
.text:004121D9                 pop     ebx
.text:004121DA                 mov     esp, ebp
.text:004121DC                 pop     ebp
.text:004121DD                 retn    4
.text:004121DD _LUAIsElevatedToken@12 endp
.text:004121DD
.text:004121E0
.text:004121E0 ; =============== S U B R O U T I N E =======================================
.text:004121E0
.text:004121E0 ; Attributes: bp-based frame
.text:004121E0
.text:004121E0 sub_4121E0      proc near               ; CODE XREF: sub_40E842+C3↑p
.text:004121E0
.text:004121E0 Handle          = dword ptr -10h
.text:004121E0 ReturnLength    = dword ptr -0Ch
.text:004121E0 TokenInformation= dword ptr -8
.text:004121E0 TokenHandle     = dword ptr -4
.text:004121E0
.text:004121E0                 mov     edi, edi
.text:004121E2                 push    ebp
.text:004121E3                 mov     ebp, esp
.text:004121E5                 sub     esp, 10h
.text:004121E8                 push    ebx
.text:004121E9                 push    esi
.text:004121EA                 push    edi
.text:004121EB                 lea     eax, [ebp+TokenHandle]
.text:004121EE                 xor     ebx, ebx
.text:004121F0                 push    eax             ; TokenHandle
.text:004121F1                 push    ebx             ; OpenAsSelf
.text:004121F2                 push    8               ; DesiredAccess
.text:004121F4                 push    0FFFFFFFEh      ; ThreadHandle
.text:004121F6                 mov     edi, edx
.text:004121F8                 mov     [ebp+TokenHandle], ebx
.text:004121FB                 call    ds:NtOpenThreadToken
.text:00412201                 mov     esi, eax
.text:00412203                 cmp     esi, 0C000007Ch
.text:00412209                 jnz     short loc_41221B
.text:0041220B                 lea     eax, [ebp+TokenHandle]
.text:0041220E                 push    eax             ; TokenHandle
.text:0041220F                 push    8               ; DesiredAccess
.text:00412211                 push    0FFFFFFFFh      ; ProcessHandle
.text:00412213                 call    ds:NtOpenProcessToken
.text:00412219                 mov     esi, eax
.text:0041221B
.text:0041221B loc_41221B:                             ; CODE XREF: sub_4121E0+29↑j
.text:0041221B                 test    esi, esi
.text:0041221D                 js      short loc_41229C
.text:0041221F                 mov     eax, [ebp+TokenHandle]
.text:00412222                 lea     ecx, [ebp+ReturnLength]
.text:00412225                 push    ecx             ; int
.text:00412226                 lea     edx, [ebp+TokenInformation]
.text:00412229                 mov     [ebp+Handle], eax
.text:0041222C                 mov     ecx, eax        ; TokenHandle
.text:0041222E                 call    _LUAIsElevatedToken@12 ; LUAIsElevatedToken(x,x,x)
.text:00412233                 mov     esi, eax
.text:00412235                 test    esi, esi
.text:00412237                 js      short loc_41228E
.text:00412239                 cmp     [ebp+TokenInformation], ebx
.text:0041223C                 jz      short loc_412242
.text:0041223E                 mov     [edi], ebx
.text:00412240                 jmp     short loc_41224D
.text:00412242 ; ---------------------------------------------------------------------------
.text:00412242
.text:00412242 loc_412242:                             ; CODE XREF: sub_4121E0+5C↑j
.text:00412242                 xor     eax, eax
.text:00412244                 cmp     [ebp+ReturnLength], eax
.text:00412247                 setz    al
.text:0041224A                 inc     eax
.text:0041224B                 mov     [edi], eax
.text:0041224D
.text:0041224D loc_41224D:                             ; CODE XREF: sub_4121E0+60↑j
.text:0041224D                 push    4
.text:0041224F                 pop     ecx
.text:00412250                 lea     eax, [ebp+ReturnLength]
.text:00412253                 mov     [ebp+ReturnLength], ecx
.text:00412256                 push    eax             ; ReturnLength
.text:00412257                 push    ecx             ; TokenInformationLength
.text:00412258                 lea     eax, [ebp+TokenInformation]
.text:0041225B                 push    eax             ; TokenInformation
.text:0041225C                 push    1Ah             ; TokenInformationClass
.text:0041225E                 push    [ebp+TokenHandle] ; TokenHandle
.text:00412261                 call    ds:NtQueryInformationToken
.text:00412267                 mov     esi, eax
.text:00412269                 test    esi, esi
.text:0041226B                 js      short loc_41228E
.text:0041226D                 xor     ebx, ebx
.text:0041226F                 cmp     [ebp+TokenInformation], ebx
.text:00412272                 setnz   bl
.text:00412275                 test    esi, esi
.text:00412277                 js      short loc_41228E
.text:00412279                 test    ebx, ebx
.text:0041227B                 jz      short loc_41228E
.text:0041227D                 mov     eax, [edi]
.text:0041227F                 cmp     eax, 10h
.text:00412282                 jb      short loc_412289
.text:00412284                 cmp     eax, 13h
.text:00412287                 jb      short loc_41228C
.text:00412289
.text:00412289 loc_412289:                             ; CODE XREF: sub_4121E0+A2↑j
.text:00412289                 add     eax, 10h
.text:0041228C
.text:0041228C loc_41228C:                             ; CODE XREF: sub_4121E0+A7↑j
.text:0041228C                 mov     [edi], eax
.text:0041228E
.text:0041228E loc_41228E:                             ; CODE XREF: sub_4121E0+57↑j
.text:0041228E                                         ; sub_4121E0+8B↑j ...
.text:0041228E                 mov     eax, [ebp+Handle]
.text:00412291                 test    eax, eax
.text:00412293                 jz      short loc_41229C
.text:00412295                 push    eax             ; Handle
.text:00412296                 call    ds:NtClose
.text:0041229C
.text:0041229C loc_41229C:                             ; CODE XREF: sub_4121E0+3D↑j
.text:0041229C                                         ; sub_4121E0+B3↑j
.text:0041229C                 pop     edi
.text:0041229D                 mov     eax, esi
.text:0041229F                 pop     esi
.text:004122A0                 pop     ebx
.text:004122A1                 mov     esp, ebp
.text:004122A3                 pop     ebp
.text:004122A4                 retn
.text:004122A4 sub_4121E0      endp
.text:004122A4
.text:004122A4 ; ---------------------------------------------------------------------------
.text:004122A5                 align 10h
.text:004122B0
.text:004122B0 ; =============== S U B R O U T I N E =======================================
.text:004122B0
.text:004122B0 ; Attributes: info_from_lumina
.text:004122B0
.text:004122B0 ; int pre_c_init()
.text:004122B0 pre_c_init      proc near               ; DATA XREF: .text:00402EEC↑o
.text:004122B0                                         ; .text:00403030↑o
.text:004122B0                 mov     eax, 5A4Dh
.text:004122B5                 cmp     ds:400000h, ax
.text:004122BC                 jz      short loc_4122C2
.text:004122BE
.text:004122BE loc_4122BE:                             ; CODE XREF: pre_c_init+22↓j
.text:004122BE                                         ; pre_c_init+37↓j
.text:004122BE                 xor     eax, eax
.text:004122C0                 jmp     short loc_412310
.text:004122C2 ; ---------------------------------------------------------------------------
.text:004122C2
.text:004122C2 loc_4122C2:                             ; CODE XREF: pre_c_init+C↑j
.text:004122C2                 mov     ecx, ds:40003Ch
.text:004122C8                 cmp     dword ptr [ecx+400000h], 4550h
.text:004122D2                 jnz     short loc_4122BE
.text:004122D4                 movzx   eax, word ptr [ecx+400018h]
.text:004122DB                 cmp     eax, 10Bh
.text:004122E0                 jz      short loc_4122FC
.text:004122E2                 cmp     eax, 20Bh
.text:004122E7                 jnz     short loc_4122BE
.text:004122E9                 xor     eax, eax
.text:004122EB                 cmp     dword ptr [ecx+400084h], 0Eh
.text:004122F2                 jbe     short loc_412310
.text:004122F4                 cmp     [ecx+4000F8h], eax
.text:004122FA                 jmp     short loc_41230D
.text:004122FC ; ---------------------------------------------------------------------------
.text:004122FC
.text:004122FC loc_4122FC:                             ; CODE XREF: pre_c_init+30↑j
.text:004122FC                 xor     eax, eax
.text:004122FE                 cmp     dword ptr [ecx+400074h], 0Eh
.text:00412305                 jbe     short loc_412310
.text:00412307                 cmp     [ecx+4000E8h], eax
.text:0041230D
.text:0041230D loc_41230D:                             ; CODE XREF: pre_c_init+4A↑j
.text:0041230D                 setnz   al
.text:00412310
.text:00412310 loc_412310:                             ; CODE XREF: pre_c_init+10↑j
.text:00412310                                         ; pre_c_init+42↑j ...
.text:00412310                 push    1
.text:00412312                 mov     dword_414BB8, eax
.text:00412317                 call    __get_image_app_type
.text:0041231C                 push    eax             ; Type
.text:0041231D                 call    ds:__set_app_type
.text:00412323                 or      dword_415024, 0FFFFFFFFh
.text:0041232A                 or      dword_415028, 0FFFFFFFFh
.text:00412331                 pop     ecx
.text:00412332                 pop     ecx
.text:00412333                 call    ds:__p__fmode
.text:00412339                 mov     ecx, dword_414EE8
.text:0041233F                 mov     [eax], ecx
.text:00412341                 call    ds:__p__commode
.text:00412347                 mov     ecx, dword_414EDC
.text:0041234D                 mov     [eax], ecx
.text:0041234F                 call    UserMathErrorFunction
.text:00412354                 cmp     dword_413140, 0
.text:0041235B                 jnz     short loc_412369
.text:0041235D                 push    offset UserMathErrorFunction ; UserMathErrorFunction
.text:00412362                 call    ds:__setusermatherr
.text:00412368                 pop     ecx
.text:00412369
.text:00412369 loc_412369:                             ; CODE XREF: pre_c_init+AB↑j
.text:00412369                 call    sub_412A93
.text:0041236E                 xor     eax, eax
.text:00412370                 retn
.text:00412370 pre_c_init      endp
.text:00412370
.text:00412370 ; ---------------------------------------------------------------------------
.text:00412371                 align 10h
.text:00412380
.text:00412380 ; =============== S U B R O U T I N E =======================================
.text:00412380
.text:00412380 ; Attributes: info_from_lumina
.text:00412380
.text:00412380 ; int pre_cpp_init()
.text:00412380 pre_cpp_init    proc near               ; DATA XREF: .text:00402DCC↑o
.text:00412380                                         ; .text:00403034↑o
.text:00412380                 mov     eax, dword_414EE4
.text:00412385                 push    offset dword_414BBC
.text:0041238A                 push    dword_414EE0
.text:00412390                 mov     dword_414BBC, eax
.text:00412395                 push    offset dword_414BB0
.text:0041239A                 push    offset dword_414BAC
.text:0041239F                 push    offset dword_414BA8
.text:004123A4                 call    ds:__wgetmainargs
.text:004123AA                 add     esp, 14h
.text:004123AD                 mov     dword_414BB4, eax
.text:004123B2                 retn
.text:004123B2 pre_cpp_init    endp
.text:004123B2
.text:004123B3 ; ---------------------------------------------------------------------------
.text:004123B3 ; START OF FUNCTION CHUNK FOR start
.text:004123B3
.text:004123B3 loc_4123B3:                             ; CODE XREF: start+5↓j
.text:004123B3 ; __unwind { // __SEH_prolog4_GS
.text:004123B3                 push    10h
.text:004123B5                 push    offset stru_412C30
.text:004123BA                 call    __SEH_prolog4_GS
.text:004123BF                 xor     ebx, ebx
.text:004123C1                 mov     [ebp-4], ebx
.text:004123C4                 mov     eax, large fs:18h
.text:004123CA                 mov     esi, [eax+4]
.text:004123CD                 mov     edi, ebx
.text:004123CF
.text:004123CF loc_4123CF:                             ; CODE XREF: start-17A↓j
.text:004123CF                 mov     edx, offset unk_41502C
.text:004123D4                 mov     ecx, esi
.text:004123D6                 xor     eax, eax
.text:004123D8                 lock cmpxchg [edx], ecx
.text:004123DC                 test    eax, eax
.text:004123DE                 jz      short loc_4123F8
.text:004123E0                 cmp     eax, esi
.text:004123E2                 jnz     short loc_4123EB
.text:004123E4                 xor     esi, esi
.text:004123E6                 inc     esi
.text:004123E7                 mov     edi, esi
.text:004123E9                 jmp     short loc_4123FB
.text:004123EB ; ---------------------------------------------------------------------------
.text:004123EB
.text:004123EB loc_4123EB:                             ; CODE XREF: start-18E↑j
.text:004123EB                 push    3E8h            ; dwMilliseconds
.text:004123F0                 call    ds:Sleep
.text:004123F6                 jmp     short loc_4123CF
.text:004123F8 ; ---------------------------------------------------------------------------
.text:004123F8
.text:004123F8 loc_4123F8:                             ; CODE XREF: start-192↑j
.text:004123F8                 xor     esi, esi
.text:004123FA                 inc     esi
.text:004123FB
.text:004123FB loc_4123FB:                             ; CODE XREF: start-187↑j
.text:004123FB                 cmp     dword_415030, esi
.text:00412401                 jnz     short loc_41240D
.text:00412403                 push    1Fh
.text:00412405                 call    _amsg_exit
.text:0041240A                 pop     ecx
.text:0041240B                 jmp     short loc_412447
.text:0041240D ; ---------------------------------------------------------------------------
.text:0041240D
.text:0041240D loc_41240D:                             ; CODE XREF: start-16F↑j
.text:0041240D                 cmp     dword_415030, ebx
.text:00412413                 jnz     short loc_412441
.text:00412415                 mov     dword_415030, esi
.text:0041241B                 push    offset dword_402EF4 ; Last
.text:00412420                 push    offset dword_402EE8 ; First
.text:00412425                 call    __initterm_e
.text:0041242A                 pop     ecx
.text:0041242B                 pop     ecx
.text:0041242C                 test    eax, eax
.text:0041242E                 jz      short loc_412447
.text:00412430                 mov     dword ptr [ebp-4], 0FFFFFFFEh
.text:00412437                 mov     eax, 0FFh
.text:0041243C                 jmp     loc_41251C
.text:00412441 ; ---------------------------------------------------------------------------
.text:00412441
.text:00412441 loc_412441:                             ; CODE XREF: start-15D↑j
.text:00412441                 mov     dword_414BA4, esi
.text:00412447
.text:00412447 loc_412447:                             ; CODE XREF: start-165↑j
.text:00412447                                         ; start-142↑j
.text:00412447                 cmp     dword_415030, esi
.text:0041244D                 jnz     short loc_41246A
.text:0041244F                 push    offset Last     ; Last
.text:00412454                 push    offset First    ; First
.text:00412459                 call    _initterm
.text:0041245E                 pop     ecx
.text:0041245F                 pop     ecx
.text:00412460                 mov     dword_415030, 2
.text:0041246A
.text:0041246A loc_41246A:                             ; CODE XREF: start-123↑j
.text:0041246A                 test    edi, edi
.text:0041246C                 jnz     short loc_412477
.text:0041246E                 xor     eax, eax
.text:00412470                 mov     ecx, offset unk_41502C
.text:00412475                 xchg    eax, [ecx]
.text:00412477
.text:00412477 loc_412477:                             ; CODE XREF: start-104↑j
.text:00412477                 cmp     pTarget, 0
.text:0041247E                 jz      short loc_4124A3
.text:00412480                 push    offset pTarget  ; pTarget
.text:00412485                 call    __IsNonwritableInCurrentImage
.text:0041248A                 pop     ecx
.text:0041248B                 test    eax, eax
.text:0041248D                 jz      short loc_4124A3
.text:0041248F                 push    ebx
.text:00412490                 push    2
.text:00412492                 push    ebx
.text:00412493                 mov     esi, pTarget
.text:00412499                 mov     ecx, esi
.text:0041249B                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:004124A1                 call    esi ; pTarget
.text:004124A3
.text:004124A3 loc_4124A3:                             ; CODE XREF: start-F2↑j
.text:004124A3                                         ; start-E3↑j
.text:004124A3                 push    dword_414BB0
.text:004124A9                 push    dword_414BAC
.text:004124AF                 push    dword_414BA8
.text:004124B5                 call    _wmain
.text:004124BA                 add     esp, 0Ch
.text:004124BD                 mov     dword_414BA0, eax
.text:004124C2                 cmp     dword_414BB8, 0
.text:004124C9                 jnz     short loc_412501
.text:004124CB                 push    eax             ; Code
.text:004124CC                 call    ds:exit
.text:004124CC ; } // starts at 4123B3
.text:004124CC ; END OF FUNCTION CHUNK FOR start
.text:004124D2
.text:004124D2 ; =============== S U B R O U T I N E =======================================
.text:004124D2
.text:004124D2
.text:004124D2 sub_4124D2      proc near               ; DATA XREF: .text:stru_412C30↓o
.text:004124D2                 mov     ecx, [ebp-14h]
.text:004124D5                 mov     eax, [ecx]
.text:004124D7                 mov     eax, [eax]
.text:004124D9                 mov     [ebp-20h], eax
.text:004124DC                 push    ecx
.text:004124DD                 push    eax
.text:004124DE                 call    _XcptFilter
.text:004124E3                 pop     ecx
.text:004124E4                 pop     ecx
.text:004124E5                 retn
.text:004124E5 sub_4124D2      endp
.text:004124E5
.text:004124E6 ; ---------------------------------------------------------------------------
.text:004124E6
.text:004124E6 loc_4124E6:                             ; DATA XREF: .text:stru_412C30↓o
.text:004124E6                 mov     esp, [ebp-18h]
.text:004124E9                 mov     eax, [ebp-20h]
.text:004124EC                 mov     dword_414BA0, eax
.text:004124F1                 cmp     dword_414BB8, 0
.text:004124F8                 jnz     short loc_412501
.text:004124FA                 push    eax
.text:004124FB                 call    ds:_exit
.text:00412501 ; ---------------------------------------------------------------------------
.text:00412501 ; START OF FUNCTION CHUNK FOR start
.text:00412501
.text:00412501 loc_412501:                             ; CODE XREF: start-A7↑j
.text:00412501                                         ; .text:004124F8↑j
.text:00412501 ; __unwind { // __SEH_prolog4_GS
.text:00412501                 cmp     dword_414BA4, 0
.text:00412508                 jnz     short loc_412515
.text:0041250A                 call    ds:_cexit
.text:00412510                 mov     eax, dword_414BA0
.text:00412515
.text:00412515 loc_412515:                             ; CODE XREF: start-68↑j
.text:00412515                 mov     dword ptr [ebp-4], 0FFFFFFFEh
.text:0041251C
.text:0041251C loc_41251C:                             ; CODE XREF: start-134↑j
.text:0041251C                 call    __SEH_epilog4_GS
.text:00412521                 retn
.text:00412521 ; } // starts at 412501
.text:00412521 ; END OF FUNCTION CHUNK FOR start
.text:00412522
.text:00412522 ; =============== S U B R O U T I N E =======================================
.text:00412522
.text:00412522 ; Attributes: bp-based frame info_from_lumina
.text:00412522
.text:00412522 ; int __cdecl _initterm_e(_PIFV *First, _PIFV *Last)
.text:00412522 __initterm_e    proc near               ; CODE XREF: start-14B↑p
.text:00412522
.text:00412522 var_4           = dword ptr -4
.text:00412522 First           = dword ptr  8
.text:00412522 Last            = dword ptr  0Ch
.text:00412522
.text:00412522                 mov     edi, edi
.text:00412524                 push    ebp
.text:00412525                 mov     ebp, esp
.text:00412527                 push    ecx
.text:00412528                 mov     eax, ___security_cookie
.text:0041252D                 xor     eax, ebp
.text:0041252F                 mov     [ebp+var_4], eax
.text:00412532                 push    esi
.text:00412533                 mov     esi, [ebp+First]
.text:00412536                 xor     eax, eax
.text:00412538                 cmp     esi, [ebp+Last]
.text:0041253B                 jnb     short loc_41255B
.text:0041253D                 push    edi
.text:0041253E
.text:0041253E loc_41253E:                             ; CODE XREF: __initterm_e+36↓j
.text:0041253E                 test    eax, eax
.text:00412540                 jnz     short loc_41255A
.text:00412542                 mov     edi, [esi]
.text:00412544                 test    edi, edi
.text:00412546                 jz      short loc_412552
.text:00412548                 mov     ecx, edi
.text:0041254A                 call    ds:___guard_check_icall_fptr ; _guard_check_icall_nop(x)
.text:00412550                 call    edi
.text:00412552
.text:00412552 loc_412552:                             ; CODE XREF: __initterm_e+24↑j
.text:00412552                 add     esi, 4
.text:00412555                 cmp     esi, [ebp+Last]
.text:00412558                 jb      short loc_41253E
.text:0041255A
.text:0041255A loc_41255A:                             ; CODE XREF: __initterm_e+1E↑j
.text:0041255A                 pop     edi
.text:0041255B
.text:0041255B loc_41255B:                             ; CODE XREF: __initterm_e+19↑j
.text:0041255B                 mov     ecx, [ebp+var_4]
.text:0041255E                 xor     ecx, ebp        ; StackCookie
.text:00412560                 pop     esi
.text:00412561                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00412566                 mov     esp, ebp
.text:00412568                 pop     ebp
.text:00412569                 retn
.text:00412569 __initterm_e    endp
.text:00412569
.text:00412569 ; ---------------------------------------------------------------------------
.text:0041256A                 align 10h
.text:00412570
.text:00412570 ; =============== S U B R O U T I N E =======================================
.text:00412570
.text:00412570 ; Attributes: library function
.text:00412570
.text:00412570                 public start
.text:00412570 start           proc near               ; DATA XREF: .text:00403038↑o
.text:00412570
.text:00412570 ; FUNCTION CHUNK AT .text:004123B3 SIZE 0000011F BYTES
.text:00412570 ; FUNCTION CHUNK AT .text:00412501 SIZE 00000021 BYTES
.text:00412570
.text:00412570 ; __unwind { // __SEH_prolog4_GS
.text:00412570                 call    ___security_init_cookie
.text:00412575                 jmp     loc_4123B3
.text:00412575 ; } // starts at 412570
.text:00412575 start           endp
.text:00412575
.text:00412575 ; ---------------------------------------------------------------------------
.text:0041257A                 align 10h
.text:00412580
.text:00412580 ; =============== S U B R O U T I N E =======================================
.text:00412580
.text:00412580 ; Attributes: library function
.text:00412580
.text:00412580 ; void __fastcall __security_check_cookie(uintptr_t StackCookie)
.text:00412580 @__security_check_cookie@4 proc near    ; CODE XREF: ArgApplyRules(int)+A68↑p
.text:00412580                                         ; _wmain+94A↑p ...
.text:00412580                 cmp     ecx, ___security_cookie
.text:00412586                 jnz     short loc_41258B
.text:00412588                 retn    0
.text:0041258B ; ---------------------------------------------------------------------------
.text:0041258B
.text:0041258B loc_41258B:                             ; CODE XREF: __security_check_cookie(x)+6↑j
.text:0041258B                 jmp     ___report_gsfailure
.text:0041258B @__security_check_cookie@4 endp
.text:0041258B
.text:00412590
.text:00412590 ; =============== S U B R O U T I N E =======================================
.text:00412590
.text:00412590 ; Attributes: bp-based frame info_from_lumina
.text:00412590
.text:00412590 ; void __cdecl __raise_securityfailure(_EXCEPTION_POINTERS *ExceptionPointers)
.text:00412590 ___raise_securityfailure proc near      ; CODE XREF: ___report_gsfailure+107↓p
.text:00412590                                         ; ___report_rangecheckfailure+B3↓p
.text:00412590
.text:00412590 ExceptionInfo   = dword ptr  8
.text:00412590
.text:00412590                 mov     edi, edi
.text:00412592                 push    ebp
.text:00412593                 mov     ebp, esp
.text:00412595                 push    0               ; lpTopLevelExceptionFilter
.text:00412597                 call    ds:SetUnhandledExceptionFilter
.text:0041259D                 push    [ebp+ExceptionInfo] ; ExceptionInfo
.text:004125A0                 call    ds:UnhandledExceptionFilter
.text:004125A6                 push    0C0000409h      ; uExitCode
.text:004125AB                 call    ds:GetCurrentProcess
.text:004125B1                 push    eax             ; hProcess
.text:004125B2                 call    ds:TerminateProcess
.text:004125B8                 pop     ebp
.text:004125B9                 retn
.text:004125B9 ___raise_securityfailure endp
.text:004125B9
.text:004125BA
.text:004125BA ; =============== S U B R O U T I N E =======================================
.text:004125BA
.text:004125BA ; Attributes: noreturn bp-based frame info_from_lumina
.text:004125BA
.text:004125BA ; void __cdecl __noreturn __report_gsfailure()
.text:004125BA ___report_gsfailure proc near           ; CODE XREF: __security_check_cookie(x):loc_41258B↑j
.text:004125BA
.text:004125BA var_324         = dword ptr -324h
.text:004125BA var_8           = dword ptr -8
.text:004125BA var_s0          = dword ptr  0
.text:004125BA arg_0           = byte ptr  8
.text:004125BA
.text:004125BA                 mov     edi, edi
.text:004125BC                 push    ebp
.text:004125BD                 mov     ebp, esp
.text:004125BF                 sub     esp, 324h
.text:004125C5                 mov     dword_414CC0, eax
.text:004125CA                 mov     dword_414CBC, ecx
.text:004125D0                 mov     dword_414CB8, edx
.text:004125D6                 mov     dword_414CB4, ebx
.text:004125DC                 mov     dword_414CB0, esi
.text:004125E2                 mov     dword_414CAC, edi
.text:004125E8                 mov     word_414CD8, ss
.text:004125EF                 mov     word_414CCC, cs
.text:004125F6                 mov     word_414CA8, ds
.text:004125FD                 mov     word_414CA4, es
.text:00412604                 mov     word_414CA0, fs
.text:0041260B                 mov     word_414C9C, gs
.text:00412612                 pushf
.text:00412613                 pop     dword_414CD0
.text:00412619                 mov     eax, [ebp+var_s0]
.text:0041261C                 mov     dword_414CC4, eax
.text:00412621                 mov     eax, [ebp+4]
.text:00412624                 mov     dword_414CC8, eax
.text:00412629                 lea     eax, [ebp+arg_0]
.text:0041262C                 mov     dword_414CD4, eax
.text:00412631                 mov     eax, [ebp+var_324]
.text:00412637                 mov     dword_414C10, 10001h
.text:00412641                 mov     eax, dword_414CC8
.text:00412646                 mov     dword_414BCC, eax
.text:0041264B                 mov     dword_414BC0, 0C0000409h
.text:00412655                 mov     dword_414BC4, 1
.text:0041265F                 mov     dword_414BD0, 3
.text:00412669                 push    4
.text:0041266B                 pop     eax
.text:0041266C                 imul    eax, 0
.text:0041266F                 mov     dword_414BD4[eax], 2
.text:00412679                 push    4
.text:0041267B                 pop     eax
.text:0041267C                 shl     eax, 0
.text:0041267F                 mov     ecx, ___security_cookie
.text:00412685                 mov     dword_414BD4[eax], ecx
.text:0041268B                 push    4
.text:0041268D                 pop     eax
.text:0041268E                 shl     eax, 1
.text:00412690                 mov     ecx, dword_413148
.text:00412696                 mov     dword_414BD4[eax], ecx
.text:0041269C                 push    4
.text:0041269E                 pop     eax
.text:0041269F                 imul    eax, 0
.text:004126A2                 mov     ecx, ___security_cookie
.text:004126A8                 mov     [ebp+eax+var_8], ecx
.text:004126AC                 push    4
.text:004126AE                 pop     eax
.text:004126AF                 shl     eax, 0
.text:004126B2                 mov     ecx, dword_413148
.text:004126B8                 mov     [ebp+eax+var_8], ecx
.text:004126BC                 push    offset ExceptionInfo ; ExceptionInfo
.text:004126C1                 call    ___raise_securityfailure
.text:004126C6                 mov     esp, ebp
.text:004126C8                 pop     ebp
.text:004126C9                 retn
.text:004126C9 ___report_gsfailure endp
.text:004126C9
.text:004126CA
.text:004126CA ; =============== S U B R O U T I N E =======================================
.text:004126CA
.text:004126CA ; Attributes: bp-based frame info_from_lumina
.text:004126CA
.text:004126CA ___report_rangecheckfailure proc near   ; CODE XREF: sub_409E12:loc_40A454↑p
.text:004126CA                 mov     edi, edi
.text:004126CC                 push    ebp
.text:004126CD                 mov     ebp, esp
.text:004126CF                 mov     dword_414CC0, eax
.text:004126D4                 mov     dword_414CBC, ecx
.text:004126DA                 mov     dword_414CB8, edx
.text:004126E0                 mov     dword_414CB4, ebx
.text:004126E6                 mov     dword_414CB0, esi
.text:004126EC                 mov     dword_414CAC, edi
.text:004126F2                 mov     word_414CD8, ss
.text:004126F9                 mov     word_414CCC, cs
.text:00412700                 mov     word_414CA8, ds
.text:00412707                 mov     word_414CA4, es
.text:0041270E                 mov     word_414CA0, fs
.text:00412715                 mov     word_414C9C, gs
.text:0041271C                 pushf
.text:0041271D                 pop     dword_414CD0
.text:00412723                 mov     dword_414C10, 10001h
.text:0041272D                 mov     eax, [ebp+4]
.text:00412730                 mov     dword_414CC8, eax
.text:00412735                 lea     eax, [ebp+4]
.text:00412738                 add     eax, 4
.text:0041273B                 mov     dword_414CD4, eax
.text:00412740                 mov     eax, dword_414CC8
.text:00412745                 mov     dword_414BCC, eax
.text:0041274A                 mov     dword_414BC0, 0C0000409h
.text:00412754                 mov     dword_414BC4, 1
.text:0041275E                 mov     dword_414BD0, 1
.text:00412768                 push    4
.text:0041276A                 pop     eax
.text:0041276B                 imul    eax, 0
.text:0041276E                 mov     dword_414BD4[eax], 8
.text:00412778                 push    offset ExceptionInfo ; ExceptionInfo
.text:0041277D                 call    ___raise_securityfailure
.text:00412782                 pop     ebp
.text:00412783                 retn
.text:00412783 ___report_rangecheckfailure endp ; sp-analysis failed
.text:00412783
.text:00412784
.text:00412784 ; =============== S U B R O U T I N E =======================================
.text:00412784
.text:00412784 ; Attributes: thunk
.text:00412784
.text:00412784 ; int __cdecl wcsicmp(const wchar_t *String1, const wchar_t *String2)
.text:00412784 _wcsicmp        proc near               ; CODE XREF: sub_411A59+67↑p
.text:00412784                                         ; sub_412050+D↑p
.text:00412784
.text:00412784 String1         = dword ptr  4
.text:00412784 String2         = dword ptr  8
.text:00412784
.text:00412784                 jmp     ds:__imp__wcsicmp
.text:00412784 _wcsicmp        endp
.text:00412784
.text:00412784 ; ---------------------------------------------------------------------------
.text:0041278A                 align 10h
.text:00412790
.text:00412790 ; =============== S U B R O U T I N E =======================================
.text:00412790
.text:00412790 ; Attributes: bp-based frame info_from_lumina
.text:00412790
.text:00412790 ; LONG __stdcall __CxxUnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00412790 ?__CxxUnhandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z proc near
.text:00412790                                         ; DATA XREF: .text:00403040↑o
.text:00412790                                         ; sub_4127E0↓o
.text:00412790
.text:00412790 ExceptionInfo   = dword ptr  8
.text:00412790
.text:00412790                 mov     edi, edi
.text:00412792                 push    ebp
.text:00412793                 mov     ebp, esp
.text:00412795                 mov     eax, [ebp+ExceptionInfo]
.text:00412798                 mov     eax, [eax]
.text:0041279A                 cmp     dword ptr [eax], 0E06D7363h
.text:004127A0                 jnz     short loc_4127CD
.text:004127A2                 cmp     dword ptr [eax+10h], 3
.text:004127A6                 jnz     short loc_4127CD
.text:004127A8                 mov     eax, [eax+14h]
.text:004127AB                 cmp     eax, 19930520h
.text:004127B0                 jz      short loc_4127C7
.text:004127B2                 cmp     eax, 19930521h
.text:004127B7                 jz      short loc_4127C7
.text:004127B9                 cmp     eax, 19930522h
.text:004127BE                 jz      short loc_4127C7
.text:004127C0                 cmp     eax, 1994000h
.text:004127C5                 jnz     short loc_4127CD
.text:004127C7
.text:004127C7 loc_4127C7:                             ; CODE XREF: __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *)+20↑j
.text:004127C7                                         ; __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *)+27↑j ...
.text:004127C7                 call    ds:?terminate@@YAXXZ ; terminate(void)
.text:004127CD ; ---------------------------------------------------------------------------
.text:004127CD
.text:004127CD loc_4127CD:                             ; CODE XREF: __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *)+10↑j
.text:004127CD                                         ; __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *)+16↑j ...
.text:004127CD                 xor     eax, eax
.text:004127CF                 pop     ebp
.text:004127D0                 retn    4
.text:004127D0 ?__CxxUnhandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z endp
.text:004127D0
.text:004127D0 ; ---------------------------------------------------------------------------
.text:004127D3                 align 10h
.text:004127E0
.text:004127E0 ; =============== S U B R O U T I N E =======================================
.text:004127E0
.text:004127E0
.text:004127E0 sub_4127E0      proc near               ; DATA XREF: .text:00402EF0↑o
.text:004127E0                                         ; .text:00403044↑o
.text:004127E0                 push    offset ?__CxxUnhandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z ; lpTopLevelExceptionFilter
.text:004127E5                 call    ds:SetUnhandledExceptionFilter
.text:004127EB                 xor     eax, eax
.text:004127ED                 retn
.text:004127ED sub_4127E0      endp
.text:004127ED
.text:004127EE
.text:004127EE ; =============== S U B R O U T I N E =======================================
.text:004127EE
.text:004127EE ; Attributes: thunk
.text:004127EE
.text:004127EE _XcptFilter     proc near               ; CODE XREF: sub_4124D2+C↑p
.text:004127EE                 jmp     ds:__imp__XcptFilter
.text:004127EE _XcptFilter     endp
.text:004127EE
.text:004127F4
.text:004127F4 ; =============== S U B R O U T I N E =======================================
.text:004127F4
.text:004127F4 ; Attributes: bp-based frame info_from_lumina
.text:004127F4
.text:004127F4 ; __stdcall RtlpImageNtHeader(x)
.text:004127F4 _RtlpImageNtHeader@4 proc near          ; CODE XREF: __get_image_app_type+12↓p
.text:004127F4
.text:004127F4 var_1C          = dword ptr -1Ch
.text:004127F4 ms_exc          = CPPEH_RECORD ptr -18h
.text:004127F4 arg_0           = dword ptr  8
.text:004127F4
.text:004127F4 ; __unwind { // __SEH_prolog4
.text:004127F4                 push    0Ch
.text:004127F6                 push    offset stru_412C50
.text:004127FB                 call    __SEH_prolog4
.text:00412800                 xor     ecx, ecx
.text:00412802                 mov     eax, [ebp+arg_0]
.text:00412805                 test    eax, eax
.text:00412807                 jz      short loc_412854
.text:00412809                 cmp     eax, 0FFFFFFFFh
.text:0041280C                 jz      short loc_412854
.text:0041280E ;   __try { // __except at loc_412845
.text:0041280E                 mov     [ebp+ms_exc.registration.TryLevel], ecx
.text:00412811                 mov     edx, 5A4Dh
.text:00412816                 cmp     [eax], dx
.text:00412819                 jnz     short loc_41284D
.text:0041281B                 mov     edx, [eax+3Ch]
.text:0041281E                 test    edx, edx
.text:00412820                 js      short loc_41284D
.text:00412822                 cmp     edx, 10000000h
.text:00412828                 jnb     short loc_41284D
.text:0041282A                 add     eax, edx
.text:0041282C                 mov     [ebp+var_1C], eax
.text:0041282F                 mov     ecx, [eax]
.text:00412831                 sub     ecx, 4550h
.text:00412837                 neg     ecx
.text:00412839                 sbb     ecx, ecx
.text:0041283B                 not     ecx
.text:0041283D                 and     ecx, eax
.text:0041283F                 jmp     short loc_41284A
.text:00412841 ; ---------------------------------------------------------------------------
.text:00412841
.text:00412841 loc_412841:                             ; DATA XREF: .text:stru_412C50↓o
.text:00412841 ;   __except filter // owned by 41280E
.text:00412841                 xor     eax, eax
.text:00412843                 inc     eax
.text:00412844                 retn
.text:00412845 ; ---------------------------------------------------------------------------
.text:00412845
.text:00412845 loc_412845:                             ; DATA XREF: .text:stru_412C50↓o
.text:00412845 ;   __except(loc_412841) // owned by 41280E
.text:00412845                 mov     esp, [ebp+ms_exc.old_esp]
.text:00412848                 xor     ecx, ecx
.text:0041284A
.text:0041284A loc_41284A:                             ; CODE XREF: RtlpImageNtHeader(x)+4B↑j
.text:0041284A                 mov     [ebp+var_1C], ecx
.text:0041284A ;   } // starts at 41280E
.text:0041284D
.text:0041284D loc_41284D:                             ; CODE XREF: RtlpImageNtHeader(x)+25↑j
.text:0041284D                                         ; RtlpImageNtHeader(x)+2C↑j ...
.text:0041284D                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
.text:00412854
.text:00412854 loc_412854:                             ; CODE XREF: RtlpImageNtHeader(x)+13↑j
.text:00412854                                         ; RtlpImageNtHeader(x)+18↑j
.text:00412854                 mov     eax, ecx
.text:00412856                 call    __SEH_epilog4
.text:0041285B                 retn    4
.text:0041285B ; } // starts at 4127F4
.text:0041285B _RtlpImageNtHeader@4 endp
.text:0041285B
.text:0041285E
.text:0041285E ; =============== S U B R O U T I N E =======================================
.text:0041285E
.text:0041285E ; Attributes: bp-based frame info_from_lumina
.text:0041285E
.text:0041285E ; int __cdecl _get_image_app_type(int)
.text:0041285E __get_image_app_type proc near          ; CODE XREF: pre_c_init+67↑p
.text:0041285E
.text:0041285E arg_0           = dword ptr  8
.text:0041285E
.text:0041285E                 mov     edi, edi
.text:00412860                 push    ebp
.text:00412861                 mov     ebp, esp
.text:00412863                 push    0               ; lpModuleName
.text:00412865                 call    ds:GetModuleHandleA
.text:0041286B                 test    eax, eax
.text:0041286D                 jz      short loc_41288F
.text:0041286F                 push    eax
.text:00412870                 call    _RtlpImageNtHeader@4 ; RtlpImageNtHeader(x)
.text:00412875                 test    eax, eax
.text:00412877                 jz      short loc_41288F
.text:00412879                 movzx   ecx, word ptr [eax+5Ch]
.text:0041287D                 push    2
.text:0041287F                 pop     eax
.text:00412880                 cmp     cx, ax
.text:00412883                 jz      short loc_412892
.text:00412885                 cmp     ecx, 3
.text:00412888                 jnz     short loc_41288F
.text:0041288A                 xor     eax, eax
.text:0041288C                 inc     eax
.text:0041288D                 pop     ebp
.text:0041288E                 retn
.text:0041288F ; ---------------------------------------------------------------------------
.text:0041288F
.text:0041288F loc_41288F:                             ; CODE XREF: __get_image_app_type+F↑j
.text:0041288F                                         ; __get_image_app_type+19↑j ...
.text:0041288F                 mov     eax, [ebp+arg_0]
.text:00412892
.text:00412892 loc_412892:                             ; CODE XREF: __get_image_app_type+25↑j
.text:00412892                 pop     ebp
.text:00412893                 retn
.text:00412893 __get_image_app_type endp
.text:00412893
.text:00412894
.text:00412894 ; =============== S U B R O U T I N E =======================================
.text:00412894
.text:00412894 ; Attributes: thunk
.text:00412894
.text:00412894 _amsg_exit      proc near               ; CODE XREF: start-16B↑p
.text:00412894                 jmp     ds:__imp__amsg_exit
.text:00412894 _amsg_exit      endp
.text:00412894
.text:00412894 ; ---------------------------------------------------------------------------
.text:0041289A                 align 10h
.text:004128A0
.text:004128A0 ; =============== S U B R O U T I N E =======================================
.text:004128A0
.text:004128A0 ; Attributes: bp-based frame info_from_lumina
.text:004128A0
.text:004128A0 ; _IMAGE_SECTION_HEADER *__cdecl _FindPESection(char *pImageBase, unsigned int rva)
.text:004128A0 __FindPESection proc near               ; CODE XREF: __IsNonwritableInCurrentImage+5B↓p
.text:004128A0
.text:004128A0 arg_0           = dword ptr  8
.text:004128A0 arg_4           = dword ptr  0Ch
.text:004128A0
.text:004128A0                 mov     edi, edi
.text:004128A2                 push    ebp
.text:004128A3                 mov     ebp, esp
.text:004128A5                 mov     eax, [ebp+arg_0]
.text:004128A8                 xor     edx, edx
.text:004128AA                 push    ebx
.text:004128AB                 push    esi
.text:004128AC                 push    edi
.text:004128AD                 mov     ecx, [eax+3Ch]
.text:004128B0                 add     ecx, eax
.text:004128B2                 movzx   eax, word ptr [ecx+14h]
.text:004128B6                 movzx   ebx, word ptr [ecx+6]
.text:004128BA                 add     eax, 18h
.text:004128BD                 add     eax, ecx
.text:004128BF                 test    ebx, ebx
.text:004128C1                 jz      short loc_4128DE
.text:004128C3                 mov     edi, [ebp+arg_4]
.text:004128C6
.text:004128C6 loc_4128C6:                             ; CODE XREF: __FindPESection+3C↓j
.text:004128C6                 mov     esi, [eax+0Ch]
.text:004128C9                 cmp     edi, esi
.text:004128CB                 jb      short loc_4128D6
.text:004128CD                 mov     ecx, [eax+8]
.text:004128D0                 add     ecx, esi
.text:004128D2                 cmp     edi, ecx
.text:004128D4                 jb      short loc_4128E0
.text:004128D6
.text:004128D6 loc_4128D6:                             ; CODE XREF: __FindPESection+2B↑j
.text:004128D6                 inc     edx
.text:004128D7                 add     eax, 28h ; '('
.text:004128DA                 cmp     edx, ebx
.text:004128DC                 jb      short loc_4128C6
.text:004128DE
.text:004128DE loc_4128DE:                             ; CODE XREF: __FindPESection+21↑j
.text:004128DE                 xor     eax, eax
.text:004128E0
.text:004128E0 loc_4128E0:                             ; CODE XREF: __FindPESection+34↑j
.text:004128E0                 pop     edi
.text:004128E1                 pop     esi
.text:004128E2                 pop     ebx
.text:004128E3                 pop     ebp
.text:004128E4                 retn
.text:004128E4 __FindPESection endp
.text:004128E4
.text:004128E4 ; ---------------------------------------------------------------------------
.text:004128E5                 align 10h
.text:004128F0
.text:004128F0 ; =============== S U B R O U T I N E =======================================
.text:004128F0
.text:004128F0 ; Attributes: bp-based frame info_from_lumina
.text:004128F0
.text:004128F0 ; int __cdecl _IsNonwritableInCurrentImage(char *pTarget)
.text:004128F0 __IsNonwritableInCurrentImage proc near ; CODE XREF: start-EB↑p
.text:004128F0
.text:004128F0 ms_exc          = CPPEH_RECORD ptr -18h
.text:004128F0 arg_0           = dword ptr  8
.text:004128F0
.text:004128F0                 mov     edi, edi
.text:004128F2                 push    ebp
.text:004128F3                 mov     ebp, esp
.text:004128F5                 push    0FFFFFFFEh
.text:004128F7                 push    offset stru_412C70
.text:004128FC                 push    offset __except_handler4
.text:00412901                 mov     eax, large fs:0
.text:00412907                 push    eax
.text:00412908                 sub     esp, 8
.text:0041290B                 push    ebx
.text:0041290C                 push    esi
.text:0041290D                 push    edi
.text:0041290E                 mov     eax, ___security_cookie
.text:00412913                 xor     [ebp+ms_exc.registration.ScopeTable], eax
.text:00412916                 xor     eax, ebp
.text:00412918                 push    eax
.text:00412919                 lea     eax, [ebp+ms_exc.registration]
.text:0041291C                 mov     large fs:0, eax
.text:00412922                 mov     [ebp+ms_exc.old_esp], esp
.text:00412925                 mov     [ebp+ms_exc.registration.TryLevel], 0
.text:0041292C                 push    400000h
.text:00412931                 call    __ValidateImageBase
.text:00412936                 add     esp, 4
.text:00412939                 test    eax, eax
.text:0041293B                 jz      short loc_412991
.text:0041293D                 mov     eax, [ebp+arg_0]
.text:00412940                 sub     eax, 400000h
.text:00412945                 push    eax
.text:00412946                 push    400000h
.text:0041294B                 call    __FindPESection
.text:00412950                 add     esp, 8
.text:00412953                 test    eax, eax
.text:00412955                 jz      short loc_412991
.text:00412957                 mov     eax, [eax+24h]
.text:0041295A                 shr     eax, 1Fh
.text:0041295D                 not     eax
.text:0041295F                 and     eax, 1
.text:00412962                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
.text:00412969                 mov     ecx, [ebp+ms_exc.registration.Next]
.text:0041296C                 mov     large fs:0, ecx
.text:00412973                 pop     ecx
.text:00412974                 pop     edi
.text:00412975                 pop     esi
.text:00412976                 pop     ebx
.text:00412977                 mov     esp, ebp
.text:00412979                 pop     ebp
.text:0041297A                 retn
.text:0041297B ; ---------------------------------------------------------------------------
.text:0041297B
.text:0041297B loc_41297B:                             ; DATA XREF: .text:stru_412C70↓o
.text:0041297B                 mov     eax, [ebp+ms_exc.exc_ptr]
.text:0041297E                 mov     eax, [eax]
.text:00412980                 xor     ecx, ecx
.text:00412982                 cmp     dword ptr [eax], 0C0000005h
.text:00412988                 setz    cl
.text:0041298B                 mov     eax, ecx
.text:0041298D                 retn
.text:0041298E ; ---------------------------------------------------------------------------
.text:0041298E
.text:0041298E loc_41298E:                             ; DATA XREF: .text:stru_412C70↓o
.text:0041298E                 mov     esp, [ebp+ms_exc.old_esp]
.text:00412991
.text:00412991 loc_412991:                             ; CODE XREF: __IsNonwritableInCurrentImage+4B↑j
.text:00412991                                         ; __IsNonwritableInCurrentImage+65↑j
.text:00412991                 mov     [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh
.text:00412998                 xor     eax, eax
.text:0041299A                 mov     ecx, [ebp+ms_exc.registration.Next]
.text:0041299D                 mov     large fs:0, ecx
.text:004129A4                 pop     ecx
.text:004129A5                 pop     edi
.text:004129A6                 pop     esi
.text:004129A7                 pop     ebx
.text:004129A8                 mov     esp, ebp
.text:004129AA                 pop     ebp
.text:004129AB                 retn
.text:004129AB __IsNonwritableInCurrentImage endp
.text:004129AB
.text:004129AB ; ---------------------------------------------------------------------------
.text:004129AC                 align 10h
.text:004129B0
.text:004129B0 ; =============== S U B R O U T I N E =======================================
.text:004129B0
.text:004129B0 ; Attributes: bp-based frame info_from_lumina
.text:004129B0
.text:004129B0 ; int __cdecl _ValidateImageBase(char *pImageBase)
.text:004129B0 __ValidateImageBase proc near           ; CODE XREF: __IsNonwritableInCurrentImage+41↑p
.text:004129B0
.text:004129B0 arg_0           = dword ptr  8
.text:004129B0
.text:004129B0                 mov     edi, edi
.text:004129B2                 push    ebp
.text:004129B3                 mov     ebp, esp
.text:004129B5                 mov     eax, [ebp+arg_0]
.text:004129B8                 mov     ecx, 5A4Dh
.text:004129BD                 cmp     [eax], cx
.text:004129C0                 jz      short loc_4129C6
.text:004129C2                 xor     eax, eax
.text:004129C4                 pop     ebp
.text:004129C5                 retn
.text:004129C6 ; ---------------------------------------------------------------------------
.text:004129C6
.text:004129C6 loc_4129C6:                             ; CODE XREF: __ValidateImageBase+10↑j
.text:004129C6                 mov     ecx, [eax+3Ch]
.text:004129C9                 add     ecx, eax
.text:004129CB                 xor     eax, eax
.text:004129CD                 cmp     dword ptr [ecx], 4550h
.text:004129D3                 jnz     short loc_4129E1
.text:004129D5                 mov     edx, 10Bh
.text:004129DA                 cmp     [ecx+18h], dx
.text:004129DE                 setz    al
.text:004129E1
.text:004129E1 loc_4129E1:                             ; CODE XREF: __ValidateImageBase+23↑j
.text:004129E1                 pop     ebp
.text:004129E2                 retn
.text:004129E2 __ValidateImageBase endp
.text:004129E2
.text:004129E3
.text:004129E3 ; =============== S U B R O U T I N E =======================================
.text:004129E3
.text:004129E3 ; Attributes: bp-based frame info_from_lumina
.text:004129E3
.text:004129E3 ; void __cdecl __security_init_cookie()
.text:004129E3 ___security_init_cookie proc near       ; CODE XREF: start↑p
.text:004129E3
.text:004129E3 PerformanceCount= LARGE_INTEGER ptr -14h
.text:004129E3 SystemTimeAsFileTime= _FILETIME ptr -0Ch
.text:004129E3 var_4           = dword ptr -4
.text:004129E3
.text:004129E3                 mov     edi, edi
.text:004129E5                 push    ebp
.text:004129E6                 mov     ebp, esp
.text:004129E8                 sub     esp, 14h
.text:004129EB                 and     [ebp+SystemTimeAsFileTime.dwLowDateTime], 0
.text:004129EF                 and     [ebp+SystemTimeAsFileTime.dwHighDateTime], 0
.text:004129F3                 mov     eax, ___security_cookie
.text:004129F8                 push    esi
.text:004129F9                 push    edi
.text:004129FA                 mov     edi, 0BB40E64Eh
.text:004129FF                 mov     esi, 0FFFF0000h
.text:00412A04                 cmp     eax, edi
.text:00412A06                 jz      short loc_412A15
.text:00412A08                 test    esi, eax
.text:00412A0A                 jz      short loc_412A15
.text:00412A0C                 not     eax
.text:00412A0E                 mov     dword_413148, eax
.text:00412A13                 jmp     short loc_412A7F
.text:00412A15 ; ---------------------------------------------------------------------------
.text:00412A15
.text:00412A15 loc_412A15:                             ; CODE XREF: ___security_init_cookie+23↑j
.text:00412A15                                         ; ___security_init_cookie+27↑j
.text:00412A15                 lea     eax, [ebp+SystemTimeAsFileTime]
.text:00412A18                 push    eax             ; lpSystemTimeAsFileTime
.text:00412A19                 call    ds:GetSystemTimeAsFileTime
.text:00412A1F                 mov     eax, [ebp+SystemTimeAsFileTime.dwHighDateTime]
.text:00412A22                 xor     eax, [ebp+SystemTimeAsFileTime.dwLowDateTime]
.text:00412A25                 mov     [ebp+var_4], eax
.text:00412A28                 call    ds:GetCurrentProcessId
.text:00412A2E                 xor     [ebp+var_4], eax
.text:00412A31                 call    ds:GetCurrentThreadId
.text:00412A37                 xor     [ebp+var_4], eax
.text:00412A3A                 call    ds:GetTickCount
.text:00412A40                 xor     eax, [ebp+var_4]
.text:00412A43                 lea     ecx, [ebp+var_4]
.text:00412A46                 xor     eax, ecx
.text:00412A48                 mov     [ebp+var_4], eax
.text:00412A4B                 lea     eax, [ebp+PerformanceCount]
.text:00412A4E                 push    eax             ; lpPerformanceCount
.text:00412A4F                 call    ds:QueryPerformanceCounter
.text:00412A55                 mov     eax, dword ptr [ebp+PerformanceCount+4]
.text:00412A58                 xor     eax, dword ptr [ebp+PerformanceCount]
.text:00412A5B                 mov     ecx, [ebp+var_4]
.text:00412A5E                 xor     ecx, eax
.text:00412A60                 cmp     ecx, edi
.text:00412A62                 jz      short loc_412A6C
.text:00412A64                 test    ___security_cookie, esi
.text:00412A6A                 jnz     short loc_412A71
.text:00412A6C
.text:00412A6C loc_412A6C:                             ; CODE XREF: ___security_init_cookie+7F↑j
.text:00412A6C                 mov     ecx, 0BB40E64Fh
.text:00412A71
.text:00412A71 loc_412A71:                             ; CODE XREF: ___security_init_cookie+87↑j
.text:00412A71                 mov     ___security_cookie, ecx
.text:00412A77                 not     ecx
.text:00412A79                 mov     dword_413148, ecx
.text:00412A7F
.text:00412A7F loc_412A7F:                             ; CODE XREF: ___security_init_cookie+30↑j
.text:00412A7F                 pop     edi
.text:00412A80                 pop     esi
.text:00412A81                 mov     esp, ebp
.text:00412A83                 pop     ebp
.text:00412A84                 retn
.text:00412A84 ___security_init_cookie endp
.text:00412A84
.text:00412A84 ; ---------------------------------------------------------------------------
.text:00412A85                 align 10h
.text:00412A90
.text:00412A90 ; =============== S U B R O U T I N E =======================================
.text:00412A90
.text:00412A90
.text:00412A90 ; int __cdecl UserMathErrorFunction(struct _exception *)
.text:00412A90 UserMathErrorFunction proc near         ; CODE XREF: pre_c_init+9F↑p
.text:00412A90                                         ; DATA XREF: .text:00403048↑o ...
.text:00412A90                 xor     eax, eax
.text:00412A92                 retn
.text:00412A92 UserMathErrorFunction endp
.text:00412A92
.text:00412A93
.text:00412A93 ; =============== S U B R O U T I N E =======================================
.text:00412A93
.text:00412A93
.text:00412A93 sub_412A93      proc near               ; CODE XREF: pre_c_init:loc_412369↑p
.text:00412A93                 push    30000h          ; Mask
.text:00412A98                 push    10000h          ; NewValue
.text:00412A9D                 call    ds:_controlfp
.text:00412AA3                 pop     ecx
.text:00412AA4                 pop     ecx
.text:00412AA5                 retn
.text:00412AA5 sub_412A93      endp
.text:00412AA5
.text:00412AA6
.text:00412AA6 ; =============== S U B R O U T I N E =======================================
.text:00412AA6
.text:00412AA6 ; Attributes: thunk
.text:00412AA6
.text:00412AA6 ; void __cdecl initterm(_PVFV *First, _PVFV *Last)
.text:00412AA6 _initterm       proc near               ; CODE XREF: start-117↑p
.text:00412AA6
.text:00412AA6 First           = dword ptr  4
.text:00412AA6 Last            = dword ptr  8
.text:00412AA6
.text:00412AA6                 jmp     ds:__imp__initterm
.text:00412AA6 _initterm       endp
.text:00412AA6
.text:00412AAC
.text:00412AAC ; =============== S U B R O U T I N E =======================================
.text:00412AAC
.text:00412AAC ; Attributes: library function
.text:00412AAC
.text:00412AAC __SEH_prolog4_GS proc near              ; CODE XREF: start-1B6↑p
.text:00412AAC
.text:00412AAC arg_4           = dword ptr  8
.text:00412AAC
.text:00412AAC                 push    offset __except_handler4
.text:00412AB1                 push    large dword ptr fs:0
.text:00412AB8                 mov     eax, [esp+8+arg_4]
.text:00412ABC                 mov     [esp+8+arg_4], ebp
.text:00412AC0                 lea     ebp, [esp+8+arg_4]
.text:00412AC4                 sub     esp, eax
.text:00412AC6                 push    ebx
.text:00412AC7                 push    esi
.text:00412AC8                 push    edi
.text:00412AC9                 mov     eax, ___security_cookie
.text:00412ACE                 xor     [ebp-4], eax
.text:00412AD1                 xor     eax, ebp
.text:00412AD3                 mov     [ebp-1Ch], eax
.text:00412AD6                 push    eax
.text:00412AD7                 mov     [ebp-18h], esp
.text:00412ADA                 push    dword ptr [ebp-8]
.text:00412ADD                 mov     eax, [ebp-4]
.text:00412AE0                 mov     dword ptr [ebp-4], 0FFFFFFFEh
.text:00412AE7                 mov     [ebp-8], eax
.text:00412AEA                 lea     eax, [ebp-10h]
.text:00412AED                 mov     large fs:0, eax
.text:00412AF3                 retn
.text:00412AF3 __SEH_prolog4_GS endp ; sp-analysis failed
.text:00412AF3
.text:00412AF4
.text:00412AF4 ; =============== S U B R O U T I N E =======================================
.text:00412AF4
.text:00412AF4 ; Attributes: library function
.text:00412AF4
.text:00412AF4 __SEH_epilog4_GS proc near              ; CODE XREF: start:loc_41251C↑p
.text:00412AF4                 mov     ecx, [ebp-1Ch]
.text:00412AF7                 xor     ecx, ebp        ; StackCookie
.text:00412AF9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00412AFE                 jmp     __SEH_epilog4
.text:00412AFE __SEH_epilog4_GS endp
.text:00412AFE
.text:00412AFE ; ---------------------------------------------------------------------------
.text:00412B03                 align 10h
.text:00412B10
.text:00412B10 ; =============== S U B R O U T I N E =======================================
.text:00412B10
.text:00412B10 ; Attributes: bp-based frame info_from_lumina
.text:00412B10
.text:00412B10 ; _EXCEPTION_DISPOSITION __cdecl _except_handler4(_EXCEPTION_RECORD *ExceptionRecord, _EXCEPTION_REGISTRATION_RECORD *EstablisherFrame, _CONTEXT *ContextRecord, void *DispatcherContext)
.text:00412B10 __except_handler4 proc near             ; DATA XREF: .text:0040304C↑o
.text:00412B10                                         ; .text:___safe_se_handler_table↑o ...
.text:00412B10
.text:00412B10 arg_0           = dword ptr  8
.text:00412B10 arg_4           = dword ptr  0Ch
.text:00412B10 arg_8           = dword ptr  10h
.text:00412B10 arg_C           = dword ptr  14h
.text:00412B10
.text:00412B10                 mov     edi, edi
.text:00412B12                 push    ebp
.text:00412B13                 mov     ebp, esp
.text:00412B15                 push    [ebp+arg_C]
.text:00412B18                 push    [ebp+arg_8]
.text:00412B1B                 push    [ebp+arg_4]
.text:00412B1E                 push    [ebp+arg_0]
.text:00412B21                 push    offset @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00412B26                 push    offset ___security_cookie
.text:00412B2B                 call    _except_handler4_common
.text:00412B30                 add     esp, 18h
.text:00412B33                 pop     ebp
.text:00412B34                 retn
.text:00412B34 __except_handler4 endp
.text:00412B34
.text:00412B34 ; ---------------------------------------------------------------------------
.text:00412B35                 align 10h
.text:00412B40
.text:00412B40 ; =============== S U B R O U T I N E =======================================
.text:00412B40
.text:00412B40
.text:00412B40 ; __fastcall _guard_check_icall_nop(x)
.text:00412B40 @_guard_check_icall_nop@4 proc near     ; CODE XREF: _wmain+207↑p
.text:00412B40                                         ; _wmain+2A0↑p ...
.text:00412B40                 retn
.text:00412B40 @_guard_check_icall_nop@4 endp
.text:00412B40
.text:00412B40 ; ---------------------------------------------------------------------------
.text:00412B41                 align 4
.text:00412B44
.text:00412B44 ; =============== S U B R O U T I N E =======================================
.text:00412B44
.text:00412B44 ; Attributes: library function
.text:00412B44
.text:00412B44 __SEH_prolog4   proc near               ; CODE XREF: RtlpImageNtHeader(x)+7↑p
.text:00412B44
.text:00412B44 arg_4           = dword ptr  8
.text:00412B44
.text:00412B44                 push    offset __except_handler4
.text:00412B49                 push    large dword ptr fs:0
.text:00412B50                 mov     eax, [esp+8+arg_4]
.text:00412B54                 mov     [esp+8+arg_4], ebp
.text:00412B58                 lea     ebp, [esp+8+arg_4]
.text:00412B5C                 sub     esp, eax
.text:00412B5E                 push    ebx
.text:00412B5F                 push    esi
.text:00412B60                 push    edi
.text:00412B61                 mov     eax, ___security_cookie
.text:00412B66                 xor     [ebp-4], eax
.text:00412B69                 xor     eax, ebp
.text:00412B6B                 push    eax
.text:00412B6C                 mov     [ebp-18h], esp
.text:00412B6F                 push    dword ptr [ebp-8]
.text:00412B72                 mov     eax, [ebp-4]
.text:00412B75                 mov     dword ptr [ebp-4], 0FFFFFFFEh
.text:00412B7C                 mov     [ebp-8], eax
.text:00412B7F                 lea     eax, [ebp-10h]
.text:00412B82                 mov     large fs:0, eax
.text:00412B88                 retn
.text:00412B88 __SEH_prolog4   endp ; sp-analysis failed
.text:00412B88
.text:00412B89
.text:00412B89 ; =============== S U B R O U T I N E =======================================
.text:00412B89
.text:00412B89 ; Attributes: library function
.text:00412B89
.text:00412B89 __SEH_epilog4   proc near               ; CODE XREF: RtlpImageNtHeader(x)+62↑p
.text:00412B89                                         ; __SEH_epilog4_GS+A↑j
.text:00412B89                 mov     ecx, [ebp-10h]
.text:00412B8C                 mov     large fs:0, ecx
.text:00412B93                 pop     ecx
.text:00412B94                 pop     edi
.text:00412B95                 pop     edi
.text:00412B96                 pop     esi
.text:00412B97                 pop     ebx
.text:00412B98                 mov     esp, ebp
.text:00412B9A                 pop     ebp
.text:00412B9B                 push    ecx
.text:00412B9C                 retn
.text:00412B9C __SEH_epilog4   endp ; sp-analysis failed
.text:00412B9C
.text:00412B9C ; ---------------------------------------------------------------------------
.text:00412B9D                 align 2
.text:00412B9E
.text:00412B9E ; =============== S U B R O U T I N E =======================================
.text:00412B9E
.text:00412B9E ; Attributes: thunk
.text:00412B9E
.text:00412B9E _except_handler4_common proc near       ; CODE XREF: __except_handler4+1B↑p
.text:00412B9E                 jmp     ds:__imp__except_handler4_common
.text:00412B9E _except_handler4_common endp
.text:00412B9E
.text:00412B9E ; ---------------------------------------------------------------------------
.text:00412BA4                 align 10h
.text:00412BB0
.text:00412BB0 ; =============== S U B R O U T I N E =======================================
.text:00412BB0
.text:00412BB0 ; Attributes: info_from_lumina
.text:00412BB0
.text:00412BB0 ; int __stdcall __spoils<eax,ecx,edx> _aulldiv(unsigned __int64 a1, __int64 a2)
.text:00412BB0 __aulldiv       proc near               ; CODE XREF: SetSchedule(IDataCollectorSet *)+28B↑p
.text:00412BB0
.text:00412BB0 arg_0           = dword ptr  4
.text:00412BB0 arg_4           = dword ptr  8
.text:00412BB0 arg_8           = dword ptr  0Ch
.text:00412BB0 arg_C           = dword ptr  10h
.text:00412BB0
.text:00412BB0                 push    ebx
.text:00412BB1                 push    esi
.text:00412BB2                 mov     eax, [esp+8+arg_C]
.text:00412BB6                 or      eax, eax
.text:00412BB8                 jnz     short loc_412BD2
.text:00412BBA                 mov     ecx, [esp+8+arg_8]
.text:00412BBE                 mov     eax, [esp+8+arg_4]
.text:00412BC2                 xor     edx, edx
.text:00412BC4                 div     ecx
.text:00412BC6                 mov     ebx, eax
.text:00412BC8                 mov     eax, [esp+8+arg_0]
.text:00412BCC                 div     ecx
.text:00412BCE                 mov     edx, ebx
.text:00412BD0                 jmp     short loc_412C13
.text:00412BD2 ; ---------------------------------------------------------------------------
.text:00412BD2
.text:00412BD2 loc_412BD2:                             ; CODE XREF: __aulldiv+8↑j
.text:00412BD2                 mov     ecx, eax
.text:00412BD4                 mov     ebx, [esp+8+arg_8]
.text:00412BD8                 mov     edx, [esp+8+arg_4]
.text:00412BDC                 mov     eax, [esp+8+arg_0]
.text:00412BE0
.text:00412BE0 loc_412BE0:                             ; CODE XREF: __aulldiv+3A↓j
.text:00412BE0                 shr     ecx, 1
.text:00412BE2                 rcr     ebx, 1
.text:00412BE4                 shr     edx, 1
.text:00412BE6                 rcr     eax, 1
.text:00412BE8                 or      ecx, ecx
.text:00412BEA                 jnz     short loc_412BE0
.text:00412BEC                 div     ebx
.text:00412BEE                 mov     esi, eax
.text:00412BF0                 mul     [esp+8+arg_C]
.text:00412BF4                 mov     ecx, eax
.text:00412BF6                 mov     eax, [esp+8+arg_8]
.text:00412BFA                 mul     esi
.text:00412BFC                 add     edx, ecx
.text:00412BFE                 jb      short loc_412C0E
.text:00412C00                 cmp     edx, [esp+8+arg_4]
.text:00412C04                 ja      short loc_412C0E
.text:00412C06                 jb      short loc_412C0F
.text:00412C08                 cmp     eax, [esp+8+arg_0]
.text:00412C0C                 jbe     short loc_412C0F
.text:00412C0E
.text:00412C0E loc_412C0E:                             ; CODE XREF: __aulldiv+4E↑j
.text:00412C0E                                         ; __aulldiv+54↑j
.text:00412C0E                 dec     esi
.text:00412C0F
.text:00412C0F loc_412C0F:                             ; CODE XREF: __aulldiv+56↑j
.text:00412C0F                                         ; __aulldiv+5C↑j
.text:00412C0F                 xor     edx, edx
.text:00412C11                 mov     eax, esi
.text:00412C13
.text:00412C13 loc_412C13:                             ; CODE XREF: __aulldiv+20↑j
.text:00412C13                 pop     esi
.text:00412C14                 pop     ebx
.text:00412C15                 retn    10h
.text:00412C15 __aulldiv       endp
.text:00412C15
.text:00412C18
.text:00412C18 ; =============== S U B R O U T I N E =======================================
.text:00412C18
.text:00412C18 ; Attributes: thunk
.text:00412C18
.text:00412C18 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00412C18 memcpy          proc near               ; CODE XREF: sub_40C1E5+9E↑p
.text:00412C18                                         ; sub_40EDB8+6D↑p ...
.text:00412C18
.text:00412C18 Src             = dword ptr  8
.text:00412C18 Size            = dword ptr  0Ch
.text:00412C18
.text:00412C18                 jmp     ds:__imp_memcpy
.text:00412C18 memcpy          endp
.text:00412C18
.text:00412C1E
.text:00412C1E ; =============== S U B R O U T I N E =======================================
.text:00412C1E
.text:00412C1E ; Attributes: thunk
.text:00412C1E
.text:00412C1E ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00412C1E memset          proc near               ; CODE XREF: sub_4056A0+36↑p
.text:00412C1E                                         ; sub_405720+36↑p ...
.text:00412C1E
.text:00412C1E Val             = dword ptr  8
.text:00412C1E Size            = dword ptr  0Ch
.text:00412C1E
.text:00412C1E                 jmp     ds:__imp_memset
.text:00412C1E memset          endp
.text:00412C1E
.text:00412C1E ; ---------------------------------------------------------------------------
.text:00412C24                 align 10h
.text:00412C30 stru_412C30     dd 0FFFFFFE4h           ; GSCookieOffset
.text:00412C30                                         ; DATA XREF: start-1BB↑o
.text:00412C30                 dd 0                    ; GSCookieXOROffset
.text:00412C30                 dd 0FFFFFFD0h           ; EHCookieOffset
.text:00412C30                 dd 0                    ; EHCookieXOROffset
.text:00412C30                 dd 0FFFFFFFEh           ; ScopeRecord.EnclosingLevel
.text:00412C30                 dd offset sub_4124D2    ; ScopeRecord.FilterFunc
.text:00412C30                 dd offset loc_4124E6    ; ScopeRecord.HandlerFunc
.text:00412C4C                 align 10h
.text:00412C50 stru_412C50     dd 0FFFFFFFEh           ; GSCookieOffset
.text:00412C50                                         ; DATA XREF: RtlpImageNtHeader(x)+2↑o
.text:00412C50                 dd 0                    ; GSCookieXOROffset
.text:00412C50                 dd 0FFFFFFD4h           ; EHCookieOffset
.text:00412C50                 dd 0                    ; EHCookieXOROffset
.text:00412C50                 dd 0FFFFFFFEh           ; ScopeRecord.EnclosingLevel
.text:00412C50                 dd offset loc_412841    ; ScopeRecord.FilterFunc
.text:00412C50                 dd offset loc_412845    ; ScopeRecord.HandlerFunc
.text:00412C6C                 align 10h
.text:00412C70 stru_412C70     dd 0FFFFFFFEh           ; GSCookieOffset
.text:00412C70                                         ; DATA XREF: __IsNonwritableInCurrentImage+7↑o
.text:00412C70                 dd 0                    ; GSCookieXOROffset
.text:00412C70                 dd 0FFFFFFD8h           ; EHCookieOffset
.text:00412C70                 dd 0                    ; EHCookieXOROffset
.text:00412C70                 dd 0FFFFFFFEh           ; ScopeRecord.EnclosingLevel
.text:00412C70                 dd offset loc_41297B    ; ScopeRecord.FilterFunc
.text:00412C70                 dd offset loc_41298E    ; ScopeRecord.HandlerFunc
.text:00412C8C                 align 200h
.text:00412E00                 dd 80h dup(?)
.text:00412E00 _text           ends
.text:00412E00
.data:00413000 ; Section 2. (virtual address 00013000)
.data:00413000 ; Virtual size                  : 00002038 (   8248.)
.data:00413000 ; Section size in file          : 00001C00 (   7168.)
.data:00413000 ; Offset to raw data for section: 00012200
.data:00413000 ; Flags C0000040: Data Readable Writable
.data:00413000 ; Alignment     : default
.data:00413000 ; ===========================================================================
.data:00413000
.data:00413000 ; Segment type: Pure data
.data:00413000 ; Segment permissions: Read/Write
.data:00413000 _data           segment para public 'DATA' use32
.data:00413000                 assume cs:_data
.data:00413000                 ;org 413000h
.data:00413000 off_413000      dd offset dword_414FA0  ; DATA XREF: ArgApplyRules(int):loc_407EF3↑o
.data:00413000                                         ; ArgApplyRules(int)+4FF↑o ...
.data:00413004 dword_413004    dd 8                    ; DATA XREF: ArgApplyRules(int):loc_408203↑r
.data:00413004                                         ; ArgApplyRules(int)+949↑r
.data:00413008 dword_413008    dd 0                    ; DATA XREF: ArgApplyRules(int)+45B↑w
.data:0041300C dword_41300C    dd 0                    ; DATA XREF: ArgApplyRules(int)+46D↑w
.data:00413010 dword_413010    dd 0                    ; DATA XREF: ArgApplyRules(int)+473↑w
.data:00413014 dword_413014    dd 0                    ; DATA XREF: ArgApplyRules(int)+479↑w
.data:00413018 off_413018      dd offset dword_414EEC  ; DATA XREF: ArgApplyRules(int):loc_407E55↑o
.data:00413018                                         ; ArgApplyRules(int)+4F1↑o ...
.data:0041301C dword_41301C    dd 5                    ; DATA XREF: ArgApplyRules(int):loc_40821A↑r
.data:0041301C                                         ; ArgApplyRules(int)+972↑r
.data:00413020 dword_413020    dd 0                    ; DATA XREF: ArgApplyRules(int)+3C4↑w
.data:00413024 dword_413024    dd 0                    ; DATA XREF: ArgApplyRules(int)+3D6↑w
.data:00413028 dword_413028    dd 0                    ; DATA XREF: ArgApplyRules(int)+3DB↑w
.data:0041302C dword_41302C    dd 0                    ; DATA XREF: ArgApplyRules(int)+3E0↑w
.data:00413030 off_413030      dd offset dword_414FDC  ; DATA XREF: ArgApplyRules(int):loc_407C0D↑o
.data:00413030                                         ; ArgApplyRules(int)+5E0↑r ...
.data:00413034 dword_413034    dd 7                    ; DATA XREF: ArgApplyRules(int)+5DA↑r
.data:00413034                                         ; ArgApplyRules(int):loc_4082D1↑r
.data:00413038 dword_413038    dd 0                    ; DATA XREF: ArgApplyRules(int)+189↑w
.data:0041303C dword_41303C    dd 0                    ; DATA XREF: ArgApplyRules(int)+18E↑w
.data:00413040 dword_413040    dd 0                    ; DATA XREF: ArgApplyRules(int)+193↑w
.data:00413044 dword_413044    dd 0                    ; DATA XREF: ArgApplyRules(int)+198↑w
.data:00413048 off_413048      dd offset dword_414FC0  ; DATA XREF: ArgApplyRules(int):loc_407DDC↑o
.data:00413048                                         ; ArgApplyRules(int)+4F8↑o ...
.data:0041304C dword_41304C    dd 7                    ; DATA XREF: ArgApplyRules(int):loc_408231↑r
.data:0041304C                                         ; ArgApplyRules(int)+99B↑r
.data:00413050 dword_413050    dd 0                    ; DATA XREF: ArgApplyRules(int)+34B↑w
.data:00413054 dword_413054    dd 0                    ; DATA XREF: ArgApplyRules(int)+35D↑w
.data:00413058 dword_413058    dd 0                    ; DATA XREF: ArgApplyRules(int)+362↑w
.data:0041305C dword_41305C    dd 0                    ; DATA XREF: ArgApplyRules(int)+367↑w
.data:00413060 dword_413060    dd 1                    ; DATA XREF: SetTraceValues(IDataCollector *)+146↑r
.data:00413064 off_413064      dd offset aSequential   ; DATA XREF: SetTraceValues(IDataCollector *):loc_40B390↑r
.data:00413064                                         ; "sequential"
.data:00413068                 db    2
.data:00413069                 db    0
.data:0041306A                 db    0
.data:0041306B                 db    0
.data:0041306C                 dd offset aCircular     ; "circular"
.data:00413070                 db    4
.data:00413071                 db    0
.data:00413072                 db    0
.data:00413073                 db    0
.data:00413074                 dd offset aAppend       ; "append"
.data:00413078                 db    8
.data:00413079                 db    0
.data:0041307A                 db    0
.data:0041307B                 db    0
.data:0041307C                 dd offset aNewfile      ; "newfile"
.data:00413080                 db  20h
.data:00413081                 db    0
.data:00413082                 db    0
.data:00413083                 db    0
.data:00413084                 dd offset aPrealloc     ; "prealloc"
.data:00413088                 db    0
.data:00413089                 db    1
.data:0041308A                 db    0
.data:0041308B                 db    0
.data:0041308C                 dd offset aRealtime     ; "realtime"
.data:00413090                 db    0
.data:00413091                 db    2
.data:00413092                 db    0
.data:00413093                 db    0
.data:00413094                 dd offset aDelayopen    ; "delayopen"
.data:00413098                 db    0
.data:00413099                 db    4
.data:0041309A                 db    0
.data:0041309B                 db    0
.data:0041309C                 dd offset aBufferonly   ; "bufferonly"
.data:004130A0                 db    0
.data:004130A1                 db    8
.data:004130A2                 db    0
.data:004130A3                 db    0
.data:004130A4                 dd offset aPrivate      ; "private"
.data:004130A8                 db    0
.data:004130A9                 db  10h
.data:004130AA                 db    0
.data:004130AB                 db    0
.data:004130AC                 dd offset aHeader       ; "header"
.data:004130B0                 db    0
.data:004130B1                 db  40h ; @
.data:004130B2                 db    0
.data:004130B3                 db    0
.data:004130B4                 dd offset aGlobalsequence ; "globalsequence"
.data:004130B8                 db    0
.data:004130B9                 db  80h ; €
.data:004130BA                 db    0
.data:004130BB                 db    0
.data:004130BC                 dd offset aLocalsequence ; "localsequence"
.data:004130C0                 db    0
.data:004130C1                 db    0
.data:004130C2                 db    1
.data:004130C3                 db    0
.data:004130C4                 dd offset aRelog        ; "relog"
.data:004130C8                 db    0
.data:004130C9                 db    0
.data:004130CA                 db    0
.data:004130CB                 db    1
.data:004130CC                 dd offset aPagedmemory  ; "pagedmemory"
.data:004130D0                 db    0
.data:004130D1                 db    0
.data:004130D2                 db    4
.data:004130D3                 db    0
.data:004130D4                 dd offset aBufferinterfac ; "bufferinterface"
.data:004130D8                 db    0
.data:004130D9                 db    0
.data:004130DA                 db    0
.data:004130DB                 db  80h ; €
.data:004130DC                 dd offset aAddtotriagedum ; "addtotriagedump"
.data:004130E0 off_4130E0      dd offset dword_414F80  ; DATA XREF: ArgApplyRules(int):loc_407B13↑o
.data:004130E0                                         ; ArgApplyRules(int)+517↑r
.data:004130E4 dword_4130E4    dd 8                    ; DATA XREF: ArgApplyRules(int):loc_407F81↑r
.data:004130E8 dword_4130E8    dd 0                    ; DATA XREF: ArgApplyRules(int)+88↑w
.data:004130EC dword_4130EC    dd 0                    ; DATA XREF: ArgApplyRules(int)+94↑w
.data:004130F0 dword_4130F0    dd 0                    ; DATA XREF: ArgApplyRules(int)+99↑w
.data:004130F4 dword_4130F4    dd 0                    ; DATA XREF: ArgApplyRules(int)+9E↑w
.data:004130F8 off_4130F8      dd offset dword_414F38  ; DATA XREF: ArgApplyRules(int):loc_407C8C↑o
.data:004130F8                                         ; ArgApplyRules(int)+4E3↑o ...
.data:004130FC dword_4130FC    dd 6                    ; DATA XREF: ArgApplyRules(int)+765↑r
.data:004130FC                                         ; ArgApplyRules(int)+8F7↑r
.data:00413100 dword_413100    dd 0                    ; DATA XREF: ArgApplyRules(int)+1FB↑w
.data:00413104 dword_413104    dd 0                    ; DATA XREF: ArgApplyRules(int)+20D↑w
.data:00413108 dword_413108    dd 0                    ; DATA XREF: ArgApplyRules(int)+212↑w
.data:0041310C dword_41310C    dd 0                    ; DATA XREF: ArgApplyRules(int)+217↑w
.data:00413110 off_413110      dd offset dword_414F50  ; DATA XREF: ArgApplyRules(int):loc_407D4F↑o
.data:00413110                                         ; ArgApplyRules(int)+4EA↑o ...
.data:00413114 dword_413114    dd 0Ch                  ; DATA XREF: ArgApplyRules(int):loc_408061↑r
.data:00413114                                         ; ArgApplyRules(int):loc_4081EC↑r ...
.data:00413118 dword_413118    dd 0                    ; DATA XREF: ArgApplyRules(int)+2BE↑w
.data:0041311C dword_41311C    dd 0                    ; DATA XREF: ArgApplyRules(int)+2D0↑w
.data:00413120 dword_413120    dd 0                    ; DATA XREF: ArgApplyRules(int)+2D5↑w
.data:00413124 dword_413124    dd 0                    ; DATA XREF: ArgApplyRules(int)+2DA↑w
.data:00413128 off_413128      dd offset dword_414F20  ; DATA XREF: ArgApplyRules(int):loc_407B90↑o
.data:00413128                                         ; ArgApplyRules(int)+688↑r ...
.data:0041312C dword_41312C    dd 6                    ; DATA XREF: ArgApplyRules(int):loc_4080F2↑r
.data:0041312C                                         ; ArgApplyRules(int):loc_408183↑r
.data:00413130 dword_413130    dd 0                    ; DATA XREF: ArgApplyRules(int)+FF↑w
.data:00413134 dword_413134    dd 0                    ; DATA XREF: ArgApplyRules(int)+111↑w
.data:00413138 dword_413138    dd 0                    ; DATA XREF: ArgApplyRules(int)+116↑w
.data:0041313C dword_41313C    dd 0                    ; DATA XREF: ArgApplyRules(int)+11B↑w
.data:00413140 dword_413140    dd 1                    ; DATA XREF: pre_c_init+A4↑r
.data:00413144 ; uintptr_t __security_cookie
.data:00413144 ___security_cookie dd 0BB40E64Eh        ; DATA XREF: .text:00402D6C↑o
.data:00413144                                         ; ArgApplyRules(int)+8↑r ...
.data:00413148 dword_413148    dd 44BF19B1h            ; DATA XREF: ___report_gsfailure+D6↑r
.data:00413148                                         ; ___report_gsfailure+F8↑r ...
.data:0041314C dword_41314C    dd 1                    ; DATA XREF: sub_40ED60↑r
.data:0041314C                                         ; sub_40ED60+11↑w
.data:00413150 dword_413150    dd 1                    ; DATA XREF: sub_4056A0↑r
.data:00413150                                         ; sub_4056A0+10↑w ...
.data:00413154                 align 8
.data:00413158 dword_413158    dd 0                    ; DATA XREF: sub_4059A0:loc_4059E7↑o
.data:00413158                                         ; sub_4059A0+4C↑w ...
.data:0041315C dword_41315C    dd 0                    ; DATA XREF: sub_4059A0+52↑w
.data:00413160                 db 0C6h ; Æ
.data:00413161                 db    0
.data:00413162                 db    0
.data:00413163                 db    0
.data:00413164 dword_413164    dd 0                    ; DATA XREF: ArgApplyRules(int)+A2B↑w
.data:00413168                 db  5Ch ; \
.data:00413169                 db    0
.data:0041316A                 db    0
.data:0041316B                 db    0
.data:0041316C                 db    0
.data:0041316D                 db    0
.data:0041316E                 db    0
.data:0041316F                 db    0
.data:00413170                 db    0
.data:00413171                 db    0
.data:00413172                 db    0
.data:00413173                 db    0
.data:00413174                 db    0
.data:00413175                 db    0
.data:00413176                 db    0
.data:00413177                 db    0
.data:00413178                 db    0
.data:00413179                 db    0
.data:0041317A                 db    0
.data:0041317B                 db    0
.data:0041317C unk_41317C      db    0                 ; DATA XREF: sub_4059A0+31↑o
.data:0041317D                 db    0
.data:0041317E                 db    0
.data:0041317F                 db    0
.data:00413180                 db    0
.data:00413181                 db    0
.data:00413182                 db    0
.data:00413183                 db    0
.data:00413184                 db    0
.data:00413185                 db    0
.data:00413186                 db    0
.data:00413187                 db    0
.data:00413188                 db    0
.data:00413189                 db    0
.data:0041318A                 db    0
.data:0041318B                 db    0
.data:0041318C                 db    0
.data:0041318D                 db    0
.data:0041318E                 db    0
.data:0041318F                 db    0
.data:00413190                 db    0
.data:00413191                 db    0
.data:00413192                 db    0
.data:00413193                 db    0
.data:00413194                 db    0
.data:00413195                 db    0
.data:00413196                 db    0
.data:00413197                 db    0
.data:00413198                 db    0
.data:00413199                 db    0
.data:0041319A                 db    0
.data:0041319B                 db    0
.data:0041319C                 db    0
.data:0041319D                 db    0
.data:0041319E                 db    0
.data:0041319F                 db    0
.data:004131A0 dword_4131A0    dd 0                    ; DATA XREF: ArgApplyRules(int)+4BD↑r
.data:004131A0                                         ; ArgApplyRules(int):loc_40815E↑r ...
.data:004131A4                 db    0
.data:004131A5                 db    0
.data:004131A6                 db    0
.data:004131A7                 db    0
.data:004131A8                 db    0
.data:004131A9                 db    0
.data:004131AA                 db    0
.data:004131AB                 db    0
.data:004131AC dword_4131AC    dd 0                    ; DATA XREF: sub_4059A0+64↑w
.data:004131B0                 db    0
.data:004131B1                 db    0
.data:004131B2                 db    0
.data:004131B3                 db    0
.data:004131B4                 db    0
.data:004131B5                 db    0
.data:004131B6                 db    0
.data:004131B7                 db    0
.data:004131B8 dword_4131B8    dd 0                    ; DATA XREF: sub_4069A0:loc_4069E7↑o
.data:004131B8                                         ; sub_4069A0+4C↑w
.data:004131BC dword_4131BC    dd 0                    ; DATA XREF: sub_4069A0+52↑w
.data:004131C0                 db 0DBh ; Û
.data:004131C1                 db    0
.data:004131C2                 db    0
.data:004131C3                 db    0
.data:004131C4                 db    0
.data:004131C5                 db    0
.data:004131C6                 db    0
.data:004131C7                 db    0
.data:004131C8                 db  5Ch ; \
.data:004131C9                 db    0
.data:004131CA                 db    0
.data:004131CB                 db    0
.data:004131CC                 db    1
.data:004131CD                 db    0
.data:004131CE                 db    0
.data:004131CF                 db    0
.data:004131D0                 db    0
.data:004131D1                 db    0
.data:004131D2                 db    0
.data:004131D3                 db    0
.data:004131D4                 db    0
.data:004131D5                 db    0
.data:004131D6                 db    0
.data:004131D7                 db    0
.data:004131D8                 db    0
.data:004131D9                 db    4
.data:004131DA                 db    0
.data:004131DB                 db    0
.data:004131DC unk_4131DC      db    0                 ; DATA XREF: sub_4069A0+31↑o
.data:004131DD                 db    0
.data:004131DE                 db    0
.data:004131DF                 db    0
.data:004131E0                 db    0
.data:004131E1                 db    0
.data:004131E2                 db    0
.data:004131E3                 db    0
.data:004131E4                 db    0
.data:004131E5                 db    0
.data:004131E6                 db    0
.data:004131E7                 db    0
.data:004131E8                 db    0
.data:004131E9                 db    0
.data:004131EA                 db    0
.data:004131EB                 db    0
.data:004131EC                 db    0
.data:004131ED                 db    0
.data:004131EE                 db    0
.data:004131EF                 db    0
.data:004131F0                 db    0
.data:004131F1                 db    0
.data:004131F2                 db    0
.data:004131F3                 db    0
.data:004131F4                 db    0
.data:004131F5                 db    0
.data:004131F6                 db    0
.data:004131F7                 db    0
.data:004131F8                 db    0
.data:004131F9                 db    0
.data:004131FA                 db    0
.data:004131FB                 db    0
.data:004131FC                 db    0
.data:004131FD                 db    0
.data:004131FE                 db    0
.data:004131FF                 db    0
.data:00413200                 db    0
.data:00413201                 db    0
.data:00413202                 db    0
.data:00413203                 db    0
.data:00413204                 db    0
.data:00413205                 db    0
.data:00413206                 db    0
.data:00413207                 db    0
.data:00413208                 db    0
.data:00413209                 db    0
.data:0041320A                 db    0
.data:0041320B                 db    0
.data:0041320C dword_41320C    dd 0                    ; DATA XREF: sub_4069A0+64↑w
.data:00413210                 db    0
.data:00413211                 db    0
.data:00413212                 db    0
.data:00413213                 db    0
.data:00413214                 db    0
.data:00413215                 db    0
.data:00413216                 db    0
.data:00413217                 db    0
.data:00413218 dword_413218    dd 0                    ; DATA XREF: sub_407120:loc_407167↑o
.data:00413218                                         ; sub_407120+4C↑w ...
.data:0041321C dword_41321C    dd 0                    ; DATA XREF: sub_407120+52↑w
.data:00413220                 db 0DAh ; Ú
.data:00413221                 db    0
.data:00413222                 db    0
.data:00413223                 db    0
.data:00413224 dword_413224    dd 0                    ; DATA XREF: ArgApplyRules(int)+A35↑w
.data:00413228                 db  5Ch ; \
.data:00413229                 db    0
.data:0041322A                 db    0
.data:0041322B                 db    0
.data:0041322C                 db    1
.data:0041322D                 db    0
.data:0041322E                 db    0
.data:0041322F                 db    0
.data:00413230                 db    0
.data:00413231                 db    0
.data:00413232                 db    0
.data:00413233                 db    0
.data:00413234                 db    0
.data:00413235                 db    0
.data:00413236                 db    0
.data:00413237                 db    0
.data:00413238                 db    0
.data:00413239                 db    0
.data:0041323A                 db    0
.data:0041323B                 db    0
.data:0041323C unk_41323C      db    0                 ; DATA XREF: sub_407120+31↑o
.data:0041323D                 db    0
.data:0041323E                 db    0
.data:0041323F                 db    0
.data:00413240                 db    0
.data:00413241                 db    0
.data:00413242                 db    0
.data:00413243                 db    0
.data:00413244                 db    0
.data:00413245                 db    0
.data:00413246                 db    0
.data:00413247                 db    0
.data:00413248                 db    0
.data:00413249                 db    0
.data:0041324A                 db    0
.data:0041324B                 db    0
.data:0041324C                 db    0
.data:0041324D                 db    0
.data:0041324E                 db    0
.data:0041324F                 db    0
.data:00413250 dword_413250    dd 0                    ; DATA XREF: ArgApplyRules(int)+6E3↑w
.data:00413250                                         ; ArgApplyRules(int):loc_408446↑w
.data:00413254                 align 10h
.data:00413260 dword_413260    dd 0                    ; DATA XREF: ArgApplyRules(int)+559↑r
.data:00413260                                         ; ArgApplyRules(int):loc_408037↑r ...
.data:00413264                 db    0
.data:00413265                 db    0
.data:00413266                 db    0
.data:00413267                 db    0
.data:00413268                 db    0
.data:00413269                 db    0
.data:0041326A                 db    0
.data:0041326B                 db    0
.data:0041326C dword_41326C    dd 0                    ; DATA XREF: sub_407120+64↑w
.data:00413270                 db    0
.data:00413271                 db    0
.data:00413272                 db    0
.data:00413273                 db    0
.data:00413274                 db    0
.data:00413275                 db    0
.data:00413276                 db    0
.data:00413277                 db    0
.data:00413278 dword_413278    dd 0                    ; DATA XREF: sub_4070A0:loc_4070E7↑o
.data:00413278                                         ; sub_4070A0+4C↑w ...
.data:0041327C dword_41327C    dd 0                    ; DATA XREF: sub_4070A0+52↑w
.data:00413280                 db 0C3h ; Ã
.data:00413281                 db    0
.data:00413282                 db    0
.data:00413283                 db    0
.data:00413284                 db    0
.data:00413285                 db    0
.data:00413286                 db    0
.data:00413287                 db    0
.data:00413288                 db  5Ch ; \
.data:00413289                 db    0
.data:0041328A                 db    0
.data:0041328B                 db    0
.data:0041328C                 db    1
.data:0041328D                 db    0
.data:0041328E                 db    0
.data:0041328F                 db    0
.data:00413290                 db    0
.data:00413291                 db    0
.data:00413292                 db    0
.data:00413293                 db    0
.data:00413294                 db    0
.data:00413295                 db    0
.data:00413296                 db    0
.data:00413297                 db    0
.data:00413298                 db    0
.data:00413299                 db    0
.data:0041329A                 db    0
.data:0041329B                 db    0
.data:0041329C unk_41329C      db    0                 ; DATA XREF: sub_4070A0+31↑o
.data:0041329D                 db    0
.data:0041329E                 db    0
.data:0041329F                 db    0
.data:004132A0                 db    0
.data:004132A1                 db    0
.data:004132A2                 db    0
.data:004132A3                 db    0
.data:004132A4                 db    0
.data:004132A5                 db    0
.data:004132A6                 db    0
.data:004132A7                 db    0
.data:004132A8                 db    0
.data:004132A9                 db    0
.data:004132AA                 db    0
.data:004132AB                 db    0
.data:004132AC                 db    0
.data:004132AD                 db    0
.data:004132AE                 db    0
.data:004132AF                 db    0
.data:004132B0                 db    0
.data:004132B1                 db    0
.data:004132B2                 db    0
.data:004132B3                 db    0
.data:004132B4                 db    0
.data:004132B5                 db    0
.data:004132B6                 db    0
.data:004132B7                 db    0
.data:004132B8                 db    0
.data:004132B9                 db    0
.data:004132BA                 db    0
.data:004132BB                 db    0
.data:004132BC                 db    0
.data:004132BD                 db    0
.data:004132BE                 db    0
.data:004132BF                 db    0
.data:004132C0 dword_4132C0    dd 0                    ; DATA XREF: _wmain+1AA↑r
.data:004132C4                 db    0
.data:004132C5                 db    0
.data:004132C6                 db    0
.data:004132C7                 db    0
.data:004132C8                 db    0
.data:004132C9                 db    0
.data:004132CA                 db    0
.data:004132CB                 db    0
.data:004132CC dword_4132CC    dd 0                    ; DATA XREF: sub_4070A0+64↑w
.data:004132D0                 db    0
.data:004132D1                 db    0
.data:004132D2                 db    0
.data:004132D3                 db    0
.data:004132D4                 db    0
.data:004132D5                 db    0
.data:004132D6                 db    0
.data:004132D7                 db    0
.data:004132D8 dword_4132D8    dd 0                    ; DATA XREF: sub_4067A0:loc_4067E7↑o
.data:004132D8                                         ; sub_4067A0+4C↑w ...
.data:004132DC dword_4132DC    dd 0                    ; DATA XREF: sub_4067A0+52↑w
.data:004132E0                 db  97h ; —
.data:004132E1                 db    0
.data:004132E2                 db    0
.data:004132E3                 db    0
.data:004132E4                 db    0
.data:004132E5                 db    0
.data:004132E6                 db    0
.data:004132E7                 db    0
.data:004132E8 dword_4132E8    dd 5Ch                  ; DATA XREF: sub_4067A0+70↑w
.data:004132EC                 db    1
.data:004132ED                 db    0
.data:004132EE                 db    0
.data:004132EF                 db    0
.data:004132F0                 db    0
.data:004132F1                 db    0
.data:004132F2                 db    0
.data:004132F3                 db    0
.data:004132F4                 db    1
.data:004132F5                 db    0
.data:004132F6                 db    0
.data:004132F7                 db    0
.data:004132F8                 db    4
.data:004132F9                 db    1
.data:004132FA                 db    0
.data:004132FB                 db    0
.data:004132FC unk_4132FC      db    0                 ; DATA XREF: sub_4067A0+31↑o
.data:004132FD                 db    0
.data:004132FE                 db    0
.data:004132FF                 db    0
.data:00413300                 db    0
.data:00413301                 db    0
.data:00413302                 db    0
.data:00413303                 db    0
.data:00413304                 db    0
.data:00413305                 db    0
.data:00413306                 db    0
.data:00413307                 db    0
.data:00413308                 db    0
.data:00413309                 db    0
.data:0041330A                 db    0
.data:0041330B                 db    0
.data:0041330C                 db    0
.data:0041330D                 db    0
.data:0041330E                 db    0
.data:0041330F                 db    0
.data:00413310                 db    0
.data:00413311                 db    0
.data:00413312                 db    0
.data:00413313                 db    0
.data:00413314                 db    0
.data:00413315                 db    0
.data:00413316                 db    0
.data:00413317                 db    0
.data:00413318                 db    0
.data:00413319                 db    0
.data:0041331A                 db    0
.data:0041331B                 db    0
.data:0041331C                 db    0
.data:0041331D                 db    0
.data:0041331E                 db    0
.data:0041331F                 db    0
.data:00413320 dword_413320    dd 0                    ; DATA XREF: sub_40BF14:loc_40C003↑r
.data:00413324 dword_413324    dd 0                    ; DATA XREF: sub_40BF14+FD↑r
.data:00413328                 db    0
.data:00413329                 db    0
.data:0041332A                 db    0
.data:0041332B                 db    0
.data:0041332C dword_41332C    dd 0                    ; DATA XREF: sub_4067A0+64↑w
.data:00413330                 db    0
.data:00413331                 db    0
.data:00413332                 db    0
.data:00413333                 db    0
.data:00413334 ; OLECHAR *dword_413334
.data:00413334 dword_413334    dd 0                    ; DATA XREF: sub_40BF14+105↑r
.data:00413338 dword_413338    dd 0                    ; DATA XREF: sub_406CA0:loc_406CE7↑o
.data:00413338                                         ; sub_406CA0+4C↑w ...
.data:0041333C dword_41333C    dd 0                    ; DATA XREF: sub_406CA0+52↑w
.data:00413340                 db 0BCh ; ¼
.data:00413341                 db    0
.data:00413342                 db    0
.data:00413343                 db    0
.data:00413344                 db    0
.data:00413345                 db    0
.data:00413346                 db    0
.data:00413347                 db    0
.data:00413348 dword_413348    dd 5Ch                  ; DATA XREF: sub_406CA0+70↑w
.data:0041334C                 db    1
.data:0041334D                 db    0
.data:0041334E                 db    0
.data:0041334F                 db    0
.data:00413350                 db    0
.data:00413351                 db    0
.data:00413352                 db    0
.data:00413353                 db    0
.data:00413354                 db    3
.data:00413355                 db    0
.data:00413356                 db    0
.data:00413357                 db    0
.data:00413358                 db    0
.data:00413359                 db    0
.data:0041335A                 db    0
.data:0041335B                 db    0
.data:0041335C unk_41335C      db    0                 ; DATA XREF: sub_406CA0+31↑o
.data:0041335D                 db    0
.data:0041335E                 db    0
.data:0041335F                 db    0
.data:00413360                 db    0
.data:00413361                 db    0
.data:00413362                 db    0
.data:00413363                 db    0
.data:00413364                 db    0
.data:00413365                 db    0
.data:00413366                 db    0
.data:00413367                 db    0
.data:00413368                 db    0
.data:00413369                 db    0
.data:0041336A                 db    0
.data:0041336B                 db    0
.data:0041336C                 db    0
.data:0041336D                 db    0
.data:0041336E                 db    0
.data:0041336F                 db    0
.data:00413370                 db    0
.data:00413371                 db    0
.data:00413372                 db    0
.data:00413373                 db    0
.data:00413374                 db    0
.data:00413375                 db    0
.data:00413376                 db    0
.data:00413377                 db    0
.data:00413378                 db    0
.data:00413379                 db    0
.data:0041337A                 db    0
.data:0041337B                 db    0
.data:0041337C                 db    0
.data:0041337D                 db    0
.data:0041337E                 db    0
.data:0041337F                 db    0
.data:00413380 dword_413380    dd 0                    ; DATA XREF: SetTraceValues(IDataCollector *):loc_40B47B↑r
.data:00413384                 db    0
.data:00413385                 db    0
.data:00413386                 db    0
.data:00413387                 db    0
.data:00413388                 db    0
.data:00413389                 db    0
.data:0041338A                 db    0
.data:0041338B                 db    0
.data:0041338C dword_41338C    dd 0                    ; DATA XREF: sub_406CA0+64↑w
.data:00413390                 db    0
.data:00413391                 db    0
.data:00413392                 db    0
.data:00413393                 db    0
.data:00413394                 db    0
.data:00413395                 db    0
.data:00413396                 db    0
.data:00413397                 db    0
.data:00413398                 db    0
.data:00413399                 db    0
.data:0041339A                 db    0
.data:0041339B                 db    0
.data:0041339C word_41339C     dw 0                    ; DATA XREF: SetTraceValues(IDataCollector *)+227↑r
.data:0041339E word_41339E     dw 0                    ; DATA XREF: SetTraceValues(IDataCollector *)+231↑r
.data:004133A0 word_4133A0     dw 0                    ; DATA XREF: SetTraceValues(IDataCollector *)+23A↑r
.data:004133A2                 align 8
.data:004133A8 dword_4133A8    dd 0                    ; DATA XREF: sub_4056A0:loc_4056E7↑o
.data:004133A8                                         ; sub_4056A0+4C↑w
.data:004133AC dword_4133AC    dd 0                    ; DATA XREF: sub_4056A0+52↑w
.data:004133B0                 db 0FCh ; ü
.data:004133B1                 db  3Ah ; :
.data:004133B2                 db    0
.data:004133B3                 db    0
.data:004133B4                 db    0
.data:004133B5                 db    0
.data:004133B6                 db    0
.data:004133B7                 db    0
.data:004133B8                 db  5Ch ; \
.data:004133B9                 db    0
.data:004133BA                 db    0
.data:004133BB                 db    0
.data:004133BC                 db    1
.data:004133BD                 db    0
.data:004133BE                 db    0
.data:004133BF                 db    0
.data:004133C0                 db    0
.data:004133C1                 db    0
.data:004133C2                 db    0
.data:004133C3                 db    0
.data:004133C4                 db    0
.data:004133C5                 db    0
.data:004133C6                 db    0
.data:004133C7                 db    0
.data:004133C8                 db  10h
.data:004133C9                 db    0
.data:004133CA                 db    0
.data:004133CB                 db    0
.data:004133CC unk_4133CC      db    0                 ; DATA XREF: sub_4056A0+31↑o
.data:004133CD                 db    0
.data:004133CE                 db    0
.data:004133CF                 db    0
.data:004133D0                 db    0
.data:004133D1                 db    0
.data:004133D2                 db    0
.data:004133D3                 db    0
.data:004133D4                 db    0
.data:004133D5                 db    0
.data:004133D6                 db    0
.data:004133D7                 db    0
.data:004133D8                 db    0
.data:004133D9                 db    0
.data:004133DA                 db    0
.data:004133DB                 db    0
.data:004133DC                 db    0
.data:004133DD                 db    0
.data:004133DE                 db    0
.data:004133DF                 db    0
.data:004133E0                 db    0
.data:004133E1                 db    0
.data:004133E2                 db    0
.data:004133E3                 db    0
.data:004133E4                 db    0
.data:004133E5                 db    0
.data:004133E6                 db    0
.data:004133E7                 db    0
.data:004133E8                 db    0
.data:004133E9                 db    0
.data:004133EA                 db    0
.data:004133EB                 db    0
.data:004133EC                 db    0
.data:004133ED                 db    0
.data:004133EE                 db    0
.data:004133EF                 db    0
.data:004133F0                 db    0
.data:004133F1                 db    0
.data:004133F2                 db    0
.data:004133F3                 db    0
.data:004133F4                 db    0
.data:004133F5                 db    0
.data:004133F6                 db    0
.data:004133F7                 db    0
.data:004133F8                 db    0
.data:004133F9                 db    0
.data:004133FA                 db    0
.data:004133FB                 db    0
.data:004133FC dword_4133FC    dd 0                    ; DATA XREF: sub_4056A0+64↑w
.data:00413400                 db    0
.data:00413401                 db    0
.data:00413402                 db    0
.data:00413403                 db    0
.data:00413404                 db    0
.data:00413405                 db    0
.data:00413406                 db    0
.data:00413407                 db    0
.data:00413408 dword_413408    dd 0                    ; DATA XREF: sub_405B20:loc_405B67↑o
.data:00413408                                         ; sub_405B20+4C↑w ...
.data:0041340C dword_41340C    dd 0                    ; DATA XREF: sub_405B20+52↑w
.data:00413410                 db 0DDh ; Ý
.data:00413411                 db    0
.data:00413412                 db    0
.data:00413413                 db    0
.data:00413414 dword_413414    dd 0                    ; DATA XREF: ArgApplyRules(int)+9EF↑w
.data:00413418                 db  5Ch ; \
.data:00413419                 db    0
.data:0041341A                 db    0
.data:0041341B                 db    0
.data:0041341C                 db    0
.data:0041341D                 db    0
.data:0041341E                 db    0
.data:0041341F                 db    0
.data:00413420                 db    0
.data:00413421                 db    0
.data:00413422                 db    0
.data:00413423                 db    0
.data:00413424                 db    0
.data:00413425                 db    0
.data:00413426                 db    0
.data:00413427                 db    0
.data:00413428                 db    0
.data:00413429                 db    0
.data:0041342A                 db    0
.data:0041342B                 db    0
.data:0041342C unk_41342C      db    0                 ; DATA XREF: sub_405B20+31↑o
.data:0041342D                 db    0
.data:0041342E                 db    0
.data:0041342F                 db    0
.data:00413430                 db    0
.data:00413431                 db    0
.data:00413432                 db    0
.data:00413433                 db    0
.data:00413434                 db    0
.data:00413435                 db    0
.data:00413436                 db    0
.data:00413437                 db    0
.data:00413438                 db    0
.data:00413439                 db    0
.data:0041343A                 db    0
.data:0041343B                 db    0
.data:0041343C                 db    0
.data:0041343D                 db    0
.data:0041343E                 db    0
.data:0041343F                 db    0
.data:00413440 dword_413440    dd 0                    ; DATA XREF: ArgApplyRules(int)+8EE↑r
.data:00413444                 align 10h
.data:00413450 dword_413450    dd 0                    ; DATA XREF: ArgApplyRules(int):loc_40819C↑r
.data:00413450                                         ; ArgApplyRules(int):loc_408355↑r ...
.data:00413454                 db    0
.data:00413455                 db    0
.data:00413456                 db    0
.data:00413457                 db    0
.data:00413458                 db    0
.data:00413459                 db    0
.data:0041345A                 db    0
.data:0041345B                 db    0
.data:0041345C dword_41345C    dd 0                    ; DATA XREF: sub_405B20+64↑w
.data:00413460                 db    0
.data:00413461                 db    0
.data:00413462                 db    0
.data:00413463                 db    0
.data:00413464                 db    0
.data:00413465                 db    0
.data:00413466                 db    0
.data:00413467                 db    0
.data:00413468 dword_413468    dd 0                    ; DATA XREF: sub_406C20:loc_406C67↑o
.data:00413468                                         ; sub_406C20+4C↑w ...
.data:0041346C dword_41346C    dd 0                    ; DATA XREF: sub_406C20+52↑w
.data:00413470                 db 0AAh ; ª
.data:00413471                 db    0
.data:00413472                 db    0
.data:00413473                 db    0
.data:00413474                 db    0
.data:00413475                 db    0
.data:00413476                 db    0
.data:00413477                 db    0
.data:00413478 dword_413478    dd 5Ch                  ; DATA XREF: sub_406C20+70↑w
.data:0041347C                 db    1
.data:0041347D                 db    0
.data:0041347E                 db    0
.data:0041347F                 db    0
.data:00413480                 db    0
.data:00413481                 db    0
.data:00413482                 db    0
.data:00413483                 db    0
.data:00413484                 db    1
.data:00413485                 db    0
.data:00413486                 db    0
.data:00413487                 db    0
.data:00413488                 db    0
.data:00413489                 db    0
.data:0041348A                 db    0
.data:0041348B                 db    0
.data:0041348C unk_41348C      db    0                 ; DATA XREF: sub_406C20+31↑o
.data:0041348D                 db    0
.data:0041348E                 db    0
.data:0041348F                 db    0
.data:00413490                 db    0
.data:00413491                 db    0
.data:00413492                 db    0
.data:00413493                 db    0
.data:00413494                 db    0
.data:00413495                 db    0
.data:00413496                 db    0
.data:00413497                 db    0
.data:00413498                 db    0
.data:00413499                 db    0
.data:0041349A                 db    0
.data:0041349B                 db    0
.data:0041349C                 db    0
.data:0041349D                 db    0
.data:0041349E                 db    0
.data:0041349F                 db    0
.data:004134A0                 db    0
.data:004134A1                 db    0
.data:004134A2                 db    0
.data:004134A3                 db    0
.data:004134A4                 db    0
.data:004134A5                 db    0
.data:004134A6                 db    0
.data:004134A7                 db    0
.data:004134A8                 db    0
.data:004134A9                 db    0
.data:004134AA                 db    0
.data:004134AB                 db    0
.data:004134AC                 db    0
.data:004134AD                 db    0
.data:004134AE                 db    0
.data:004134AF                 db    0
.data:004134B0 dword_4134B0    dd 0                    ; DATA XREF: SetTraceValues(IDataCollector *)+50↑r
.data:004134B4                 db    0
.data:004134B5                 db    0
.data:004134B6                 db    0
.data:004134B7                 db    0
.data:004134B8                 db    0
.data:004134B9                 db    0
.data:004134BA                 db    0
.data:004134BB                 db    0
.data:004134BC dword_4134BC    dd 0                    ; DATA XREF: sub_406C20+64↑w
.data:004134C0                 db    0
.data:004134C1                 db    0
.data:004134C2                 db    0
.data:004134C3                 db    0
.data:004134C4 ; OLECHAR *dword_4134C4
.data:004134C4 dword_4134C4    dd 0                    ; DATA XREF: SetTraceValues(IDataCollector *)+59↑r
.data:004134C8 dword_4134C8    dd 0                    ; DATA XREF: sub_405E20:loc_405E67↑o
.data:004134C8                                         ; sub_405E20+4C↑w ...
.data:004134CC dword_4134CC    dd 0                    ; DATA XREF: sub_405E20+52↑w
.data:004134D0                 db 0FDh ; ý
.data:004134D1                 db  3Ah ; :
.data:004134D2                 db    0
.data:004134D3                 db    0
.data:004134D4                 db    0
.data:004134D5                 db    0
.data:004134D6                 db    0
.data:004134D7                 db    0
.data:004134D8                 db  5Ch ; \
.data:004134D9                 db    0
.data:004134DA                 db    0
.data:004134DB                 db    0
.data:004134DC                 db    1
.data:004134DD                 db    0
.data:004134DE                 db    0
.data:004134DF                 db    0
.data:004134E0                 db    0
.data:004134E1                 db    0
.data:004134E2                 db    0
.data:004134E3                 db    0
.data:004134E4                 db    0
.data:004134E5                 db    0
.data:004134E6                 db    0
.data:004134E7                 db    0
.data:004134E8 dword_4134E8    dd 0                    ; DATA XREF: sub_40FF6D+11A↑w
.data:004134EC unk_4134EC      db    0                 ; DATA XREF: sub_405E20+31↑o
.data:004134ED                 db    0
.data:004134EE                 db    0
.data:004134EF                 db    0
.data:004134F0                 db    0
.data:004134F1                 db    0
.data:004134F2                 db    0
.data:004134F3                 db    0
.data:004134F4                 db    0
.data:004134F5                 db    0
.data:004134F6                 db    0
.data:004134F7                 db    0
.data:004134F8                 db    0
.data:004134F9                 db    0
.data:004134FA                 db    0
.data:004134FB                 db    0
.data:004134FC                 db    0
.data:004134FD                 db    0
.data:004134FE                 db    0
.data:004134FF                 db    0
.data:00413500                 db    0
.data:00413501                 db    0
.data:00413502                 db    0
.data:00413503                 db    0
.data:00413504                 db    0
.data:00413505                 db    0
.data:00413506                 db    0
.data:00413507                 db    0
.data:00413508                 db    0
.data:00413509                 db    0
.data:0041350A                 db    0
.data:0041350B                 db    0
.data:0041350C                 db    0
.data:0041350D                 db    0
.data:0041350E                 db    0
.data:0041350F                 db    0
.data:00413510 dword_413510    dd 0                    ; DATA XREF: ArgApplyRules(int)+48D↑r
.data:00413510                                         ; sub_40FF6D:loc_41007E↑r
.data:00413514                 db    0
.data:00413515                 db    0
.data:00413516                 db    0
.data:00413517                 db    0
.data:00413518                 db    0
.data:00413519                 db    0
.data:0041351A                 db    0
.data:0041351B                 db    0
.data:0041351C dword_41351C    dd 0                    ; DATA XREF: sub_405E20+64↑w
.data:00413520                 db    0
.data:00413521                 db    0
.data:00413522                 db    0
.data:00413523                 db    0
.data:00413524                 db    0
.data:00413525                 db    0
.data:00413526                 db    0
.data:00413527                 db    0
.data:00413528 dword_413528    dd 0                    ; DATA XREF: sub_406020:loc_406067↑o
.data:00413528                                         ; sub_406020+4C↑w
.data:0041352C dword_41352C    dd 0                    ; DATA XREF: sub_406020+52↑w
.data:00413530                 db    2
.data:00413531                 db    1
.data:00413532                 db    0
.data:00413533                 db    0
.data:00413534                 db    0
.data:00413535                 db    0
.data:00413536                 db    0
.data:00413537                 db    0
.data:00413538 dword_413538    dd 5Ch                  ; DATA XREF: sub_406020+70↑w
.data:0041353C                 db    1
.data:0041353D                 db    0
.data:0041353E                 db    0
.data:0041353F                 db    0
.data:00413540                 db    0
.data:00413541                 db    0
.data:00413542                 db    0
.data:00413543                 db    0
.data:00413544                 db    5
.data:00413545                 db    0
.data:00413546                 db    0
.data:00413547                 db    0
.data:00413548                 db    0
.data:00413549                 db    0
.data:0041354A                 db    0
.data:0041354B                 db    0
.data:0041354C unk_41354C      db    0                 ; DATA XREF: sub_406020+31↑o
.data:0041354D                 db    0
.data:0041354E                 db    0
.data:0041354F                 db    0
.data:00413550                 db    0
.data:00413551                 db    0
.data:00413552                 db    0
.data:00413553                 db    0
.data:00413554                 db    0
.data:00413555                 db    0
.data:00413556                 db    0
.data:00413557                 db    0
.data:00413558                 db    0
.data:00413559                 db    0
.data:0041355A                 db    0
.data:0041355B                 db    0
.data:0041355C                 db    0
.data:0041355D                 db    0
.data:0041355E                 db    0
.data:0041355F                 db    0
.data:00413560 dword_413560    dd 0                    ; DATA XREF: ArgApplyRules(int)+6DE↑w
.data:00413564                 align 10h
.data:00413570 dword_413570    dd 0                    ; DATA XREF: sub_40CB46+38↑r
.data:00413574                 db    0
.data:00413575                 db    0
.data:00413576                 db    0
.data:00413577                 db    0
.data:00413578                 db    0
.data:00413579                 db    0
.data:0041357A                 db    0
.data:0041357B                 db    0
.data:0041357C dword_41357C    dd 0                    ; DATA XREF: sub_406020+64↑w
.data:00413580                 db    0
.data:00413581                 db    0
.data:00413582                 db    0
.data:00413583                 db    0
.data:00413584 dword_413584    dd 0                    ; DATA XREF: sub_40CB46+46↑r
.data:00413588 dword_413588    dd 0                    ; DATA XREF: sub_407320:loc_407367↑o
.data:00413588                                         ; sub_407320+4C↑w ...
.data:0041358C dword_41358C    dd 0                    ; DATA XREF: sub_407320+52↑w
.data:00413590                 db 0F1h ; ñ
.data:00413591                 db    0
.data:00413592                 db    0
.data:00413593                 db    0
.data:00413594                 db    0
.data:00413595                 db    0
.data:00413596                 db    0
.data:00413597                 db    0
.data:00413598 dword_413598    dd 5Ch                  ; DATA XREF: sub_407320+70↑w
.data:0041359C                 db    1
.data:0041359D                 db    0
.data:0041359E                 db    0
.data:0041359F                 db    0
.data:004135A0                 db    0
.data:004135A1                 db    0
.data:004135A2                 db    0
.data:004135A3                 db    0
.data:004135A4                 db    1
.data:004135A5                 db    0
.data:004135A6                 db    0
.data:004135A7                 db    0
.data:004135A8                 db    4
.data:004135A9                 db    1
.data:004135AA                 db    0
.data:004135AB                 db    0
.data:004135AC unk_4135AC      db    0                 ; DATA XREF: sub_407320+31↑o
.data:004135AD                 db    0
.data:004135AE                 db    0
.data:004135AF                 db    0
.data:004135B0                 db    0
.data:004135B1                 db    0
.data:004135B2                 db    0
.data:004135B3                 db    0
.data:004135B4                 db    0
.data:004135B5                 db    0
.data:004135B6                 db    0
.data:004135B7                 db    0
.data:004135B8                 db    0
.data:004135B9                 db    0
.data:004135BA                 db    0
.data:004135BB                 db    0
.data:004135BC                 db    0
.data:004135BD                 db    0
.data:004135BE                 db    0
.data:004135BF                 db    0
.data:004135C0                 db    0
.data:004135C1                 db    0
.data:004135C2                 db    0
.data:004135C3                 db    0
.data:004135C4                 db    0
.data:004135C5                 db    0
.data:004135C6                 db    0
.data:004135C7                 db    0
.data:004135C8                 db    0
.data:004135C9                 db    0
.data:004135CA                 db    0
.data:004135CB                 db    0
.data:004135CC                 db    0
.data:004135CD                 db    0
.data:004135CE                 db    0
.data:004135CF                 db    0
.data:004135D0 dword_4135D0    dd 0                    ; DATA XREF: sub_40B60B:loc_40B75E↑r
.data:004135D4 dword_4135D4    dd 0                    ; DATA XREF: sub_40B60B:loc_40B774↑r
.data:004135D8                 db    0
.data:004135D9                 db    0
.data:004135DA                 db    0
.data:004135DB                 db    0
.data:004135DC dword_4135DC    dd 0                    ; DATA XREF: sub_407320+64↑w
.data:004135E0                 db    0
.data:004135E1                 db    0
.data:004135E2                 db    0
.data:004135E3                 db    0
.data:004135E4 ; OLECHAR *dword_4135E4
.data:004135E4 dword_4135E4    dd 0                    ; DATA XREF: sub_40B60B+172↑r
.data:004135E8 dword_4135E8    dd 0                    ; DATA XREF: sub_406E20:loc_406E67↑o
.data:004135E8                                         ; sub_406E20+4C↑w ...
.data:004135EC dword_4135EC    dd 0                    ; DATA XREF: sub_406E20+52↑w
.data:004135F0                 db 0ADh ; ­
.data:004135F1                 db    0
.data:004135F2                 db    0
.data:004135F3                 db    0
.data:004135F4                 db    0
.data:004135F5                 db    0
.data:004135F6                 db    0
.data:004135F7                 db    0
.data:004135F8                 db  5Ch ; \
.data:004135F9                 db    0
.data:004135FA                 db    0
.data:004135FB                 db    0
.data:004135FC                 db    1
.data:004135FD                 db    0
.data:004135FE                 db    0
.data:004135FF                 db    0
.data:00413600                 db    0
.data:00413601                 db    0
.data:00413602                 db    0
.data:00413603                 db    0
.data:00413604                 db    0
.data:00413605                 db    0
.data:00413606                 db    0
.data:00413607                 db    0
.data:00413608                 db    4
.data:00413609                 db    0
.data:0041360A                 db    0
.data:0041360B                 db    0
.data:0041360C unk_41360C      db    0                 ; DATA XREF: sub_406E20+31↑o
.data:0041360D                 db    0
.data:0041360E                 db    0
.data:0041360F                 db    0
.data:00413610                 db    0
.data:00413611                 db    0
.data:00413612                 db    0
.data:00413613                 db    0
.data:00413614                 db    0
.data:00413615                 db    0
.data:00413616                 db    0
.data:00413617                 db    0
.data:00413618                 db    0
.data:00413619                 db    0
.data:0041361A                 db    0
.data:0041361B                 db    0
.data:0041361C                 db    0
.data:0041361D                 db    0
.data:0041361E                 db    0
.data:0041361F                 db    0
.data:00413620                 db    0
.data:00413621                 db    0
.data:00413622                 db    0
.data:00413623                 db    0
.data:00413624                 db    0
.data:00413625                 db    0
.data:00413626                 db    0
.data:00413627                 db    0
.data:00413628                 db    0
.data:00413629                 db    0
.data:0041362A                 db    0
.data:0041362B                 db    0
.data:0041362C                 db    0
.data:0041362D                 db    0
.data:0041362E                 db    0
.data:0041362F                 db    0
.data:00413630 dword_413630    dd 0                    ; DATA XREF: SetTraceValues(IDataCollector *)+BD↑r
.data:00413634 dword_413634    dd 0                    ; DATA XREF: SetTraceValues(IDataCollector *)+C6↑r
.data:00413638                 db    0
.data:00413639                 db    0
.data:0041363A                 db    0
.data:0041363B                 db    0
.data:0041363C dword_41363C    dd 0                    ; DATA XREF: sub_406E20+64↑w
.data:00413640                 db    0
.data:00413641                 db    0
.data:00413642                 db    0
.data:00413643                 db    0
.data:00413644                 db    0
.data:00413645                 db    0
.data:00413646                 db    0
.data:00413647                 db    0
.data:00413648 dword_413648    dd 0                    ; DATA XREF: sub_407520:loc_407567↑o
.data:00413648                                         ; sub_407520+4C↑w ...
.data:0041364C dword_41364C    dd 0                    ; DATA XREF: sub_407520+52↑w
.data:00413650                 db 0EAh ; ê
.data:00413651                 db    0
.data:00413652                 db    0
.data:00413653                 db    0
.data:00413654                 db    0
.data:00413655                 db    0
.data:00413656                 db    0
.data:00413657                 db    0
.data:00413658 dword_413658    dd 5Ch                  ; DATA XREF: sub_407520+70↑w
.data:0041365C                 db    1
.data:0041365D                 db    0
.data:0041365E                 db    0
.data:0041365F                 db    0
.data:00413660                 db    0
.data:00413661                 db    0
.data:00413662                 db    0
.data:00413663                 db    0
.data:00413664                 db    2
.data:00413665                 db    0
.data:00413666                 db    0
.data:00413667                 db    0
.data:00413668                 db    0
.data:00413669                 db    0
.data:0041366A                 db    0
.data:0041366B                 db    0
.data:0041366C unk_41366C      db    0                 ; DATA XREF: sub_407520+31↑o
.data:0041366D                 db    0
.data:0041366E                 db    0
.data:0041366F                 db    0
.data:00413670                 db    0
.data:00413671                 db    0
.data:00413672                 db    0
.data:00413673                 db    0
.data:00413674                 db    0
.data:00413675                 db    0
.data:00413676                 db    0
.data:00413677                 db    0
.data:00413678                 db    0
.data:00413679                 db    0
.data:0041367A                 db    0
.data:0041367B                 db    0
.data:0041367C                 db    0
.data:0041367D                 db    0
.data:0041367E                 db    0
.data:0041367F                 db    0
.data:00413680                 db    0
.data:00413681                 db    0
.data:00413682                 db    0
.data:00413683                 db    0
.data:00413684                 db    0
.data:00413685                 db    0
.data:00413686                 db    0
.data:00413687                 db    0
.data:00413688                 db    0
.data:00413689                 db    0
.data:0041368A                 db    0
.data:0041368B                 db    0
.data:0041368C                 db    0
.data:0041368D                 db    0
.data:0041368E                 db    0
.data:0041368F                 db    0
.data:00413690 dword_413690    dd 0                    ; DATA XREF: sub_40B845:loc_40B948↑r
.data:00413694                 db    0
.data:00413695                 db    0
.data:00413696                 db    0
.data:00413697                 db    0
.data:00413698                 db    0
.data:00413699                 db    0
.data:0041369A                 db    0
.data:0041369B                 db    0
.data:0041369C dword_41369C    dd 0                    ; DATA XREF: sub_407520+64↑w
.data:004136A0                 db    0
.data:004136A1                 db    0
.data:004136A2                 db    0
.data:004136A3                 db    0
.data:004136A4 dword_4136A4    dd 0                    ; DATA XREF: sub_40B845:loc_40B960↑r
.data:004136A8 dword_4136A8    dd 0                    ; DATA XREF: sub_4074A0:loc_4074E7↑o
.data:004136A8                                         ; sub_4074A0+4C↑w ...
.data:004136AC dword_4136AC    dd 0                    ; DATA XREF: sub_4074A0+52↑w
.data:004136B0                 db 0E9h ; é
.data:004136B1                 db    0
.data:004136B2                 db    0
.data:004136B3                 db    0
.data:004136B4                 db    0
.data:004136B5                 db    0
.data:004136B6                 db    0
.data:004136B7                 db    0
.data:004136B8 dword_4136B8    dd 5Ch                  ; DATA XREF: sub_4074A0+70↑w
.data:004136BC                 db    1
.data:004136BD                 db    0
.data:004136BE                 db    0
.data:004136BF                 db    0
.data:004136C0                 db    0
.data:004136C1                 db    0
.data:004136C2                 db    0
.data:004136C3                 db    0
.data:004136C4                 db    2
.data:004136C5                 db    0
.data:004136C6                 db    0
.data:004136C7                 db    0
.data:004136C8                 db    0
.data:004136C9                 db    0
.data:004136CA                 db    0
.data:004136CB                 db    0
.data:004136CC unk_4136CC      db    0                 ; DATA XREF: sub_4074A0+31↑o
.data:004136CD                 db    0
.data:004136CE                 db    0
.data:004136CF                 db    0
.data:004136D0                 db    0
.data:004136D1                 db    0
.data:004136D2                 db    0
.data:004136D3                 db    0
.data:004136D4                 db    0
.data:004136D5                 db    0
.data:004136D6                 db    0
.data:004136D7                 db    0
.data:004136D8                 db    0
.data:004136D9                 db    0
.data:004136DA                 db    0
.data:004136DB                 db    0
.data:004136DC                 db    0
.data:004136DD                 db    0
.data:004136DE                 db    0
.data:004136DF                 db    0
.data:004136E0                 db    0
.data:004136E1                 db    0
.data:004136E2                 db    0
.data:004136E3                 db    0
.data:004136E4                 db    0
.data:004136E5                 db    0
.data:004136E6                 db    0
.data:004136E7                 db    0
.data:004136E8                 db    0
.data:004136E9                 db    0
.data:004136EA                 db    0
.data:004136EB                 db    0
.data:004136EC                 db    0
.data:004136ED                 db    0
.data:004136EE                 db    0
.data:004136EF                 db    0
.data:004136F0 dword_4136F0    dd 0                    ; DATA XREF: sub_40B845:loc_40B8FC↑r
.data:004136F4                 db    0
.data:004136F5                 db    0
.data:004136F6                 db    0
.data:004136F7                 db    0
.data:004136F8                 db    0
.data:004136F9                 db    0
.data:004136FA                 db    0
.data:004136FB                 db    0
.data:004136FC dword_4136FC    dd 0                    ; DATA XREF: sub_4074A0+64↑w
.data:00413700                 db    0
.data:00413701                 db    0
.data:00413702                 db    0
.data:00413703                 db    0
.data:00413704 dword_413704    dd 0                    ; DATA XREF: sub_40B845:loc_40B914↑r
.data:00413708 dword_413708    dd 0                    ; DATA XREF: sub_4063A0:loc_4063E7↑o
.data:00413708                                         ; sub_4063A0+4C↑w ...
.data:0041370C dword_41370C    dd 0                    ; DATA XREF: sub_4063A0+52↑w
.data:00413710                 db  7Ch ; |
.data:00413711                 db    0
.data:00413712                 db    0
.data:00413713                 db    0
.data:00413714                 db    0
.data:00413715                 db    0
.data:00413716                 db    0
.data:00413717                 db    0
.data:00413718 dword_413718    dd 5Ch                  ; DATA XREF: sub_4063A0+70↑w
.data:0041371C                 db    1
.data:0041371D                 db    0
.data:0041371E                 db    0
.data:0041371F                 db    0
.data:00413720                 db    0
.data:00413721                 db    0
.data:00413722                 db    0
.data:00413723                 db    0
.data:00413724                 db    4
.data:00413725                 db    0
.data:00413726                 db    0
.data:00413727                 db    0
.data:00413728                 db    0
.data:00413729                 db    0
.data:0041372A                 db    0
.data:0041372B                 db    0
.data:0041372C unk_41372C      db    0                 ; DATA XREF: sub_4063A0+31↑o
.data:0041372D                 db    0
.data:0041372E                 db    0
.data:0041372F                 db    0
.data:00413730                 db    0
.data:00413731                 db    0
.data:00413732                 db    0
.data:00413733                 db    0
.data:00413734                 db    0
.data:00413735                 db    0
.data:00413736                 db    0
.data:00413737                 db    0
.data:00413738                 db    0
.data:00413739                 db    0
.data:0041373A                 db    0
.data:0041373B                 db    0
.data:0041373C                 db    0
.data:0041373D                 db    0
.data:0041373E                 db    0
.data:0041373F                 db    0
.data:00413740                 db    0
.data:00413741                 db    0
.data:00413742                 db    0
.data:00413743                 db    0
.data:00413744                 db    0
.data:00413745                 db    0
.data:00413746                 db    0
.data:00413747                 db    0
.data:00413748                 db    0
.data:00413749                 db    0
.data:0041374A                 db    0
.data:0041374B                 db    0
.data:0041374C                 db    0
.data:0041374D                 db    0
.data:0041374E                 db    0
.data:0041374F                 db    0
.data:00413750 dword_413750    dd 0                    ; DATA XREF: SetSchedule(IDataCollectorSet *):loc_409A58↑r
.data:00413750                                         ; SetSchedule(IDataCollectorSet *)+15E↑r
.data:00413754                 db    0
.data:00413755                 db    0
.data:00413756                 db    0
.data:00413757                 db    0
.data:00413758                 db    0
.data:00413759                 db    0
.data:0041375A                 db    0
.data:0041375B                 db    0
.data:0041375C dword_41375C    dd 0                    ; DATA XREF: sub_4063A0+64↑w
.data:00413760                 db    0
.data:00413761                 db    0
.data:00413762                 db    0
.data:00413763                 db    0
.data:00413764 ; SYSTEMTIME SystemTime
.data:00413764 SystemTime      SYSTEMTIME <0>          ; DATA XREF: SetSchedule(IDataCollectorSet *)+171↑o
.data:00413774                 db    0
.data:00413775                 db    0
.data:00413776                 db    0
.data:00413777                 db    0
.data:00413778 dword_413778    dd 0                    ; DATA XREF: sub_405AA0:loc_405AE7↑o
.data:00413778                                         ; sub_405AA0+4C↑w ...
.data:0041377C dword_41377C    dd 0                    ; DATA XREF: sub_405AA0+52↑w
.data:00413780                 db    6
.data:00413781                 db    1
.data:00413782                 db    0
.data:00413783                 db    0
.data:00413784                 db    0
.data:00413785                 db    0
.data:00413786                 db    0
.data:00413787                 db    0
.data:00413788                 db  5Ch ; \
.data:00413789                 db    0
.data:0041378A                 db    0
.data:0041378B                 db    0
.data:0041378C                 db    0
.data:0041378D                 db    0
.data:0041378E                 db    0
.data:0041378F                 db    0
.data:00413790                 db    0
.data:00413791                 db    0
.data:00413792                 db    0
.data:00413793                 db    0
.data:00413794                 db    0
.data:00413795                 db    0
.data:00413796                 db    0
.data:00413797                 db    0
.data:00413798                 db    0
.data:00413799                 db    0
.data:0041379A                 db    0
.data:0041379B                 db    0
.data:0041379C unk_41379C      db    0                 ; DATA XREF: sub_405AA0+31↑o
.data:0041379D                 db    0
.data:0041379E                 db    0
.data:0041379F                 db    0
.data:004137A0                 db    0
.data:004137A1                 db    0
.data:004137A2                 db    0
.data:004137A3                 db    0
.data:004137A4                 db    0
.data:004137A5                 db    0
.data:004137A6                 db    0
.data:004137A7                 db    0
.data:004137A8                 db    0
.data:004137A9                 db    0
.data:004137AA                 db    0
.data:004137AB                 db    0
.data:004137AC                 db    0
.data:004137AD                 db    0
.data:004137AE                 db    0
.data:004137AF                 db    0
.data:004137B0                 db    0
.data:004137B1                 db    0
.data:004137B2                 db    0
.data:004137B3                 db    0
.data:004137B4                 db    0
.data:004137B5                 db    0
.data:004137B6                 db    0
.data:004137B7                 db    0
.data:004137B8                 db    0
.data:004137B9                 db    0
.data:004137BA                 db    0
.data:004137BB                 db    0
.data:004137BC                 db    0
.data:004137BD                 db    0
.data:004137BE                 db    0
.data:004137BF                 db    0
.data:004137C0 dword_4137C0    dd 0                    ; DATA XREF: ArgApplyRules(int)+4CD↑r
.data:004137C0                                         ; ArgApplyRules(int):loc_408248↑r ...
.data:004137C4                 db    0
.data:004137C5                 db    0
.data:004137C6                 db    0
.data:004137C7                 db    0
.data:004137C8                 db    0
.data:004137C9                 db    0
.data:004137CA                 db    0
.data:004137CB                 db    0
.data:004137CC dword_4137CC    dd 0                    ; DATA XREF: sub_405AA0+64↑w
.data:004137D0                 db    0
.data:004137D1                 db    0
.data:004137D2                 db    0
.data:004137D3                 db    0
.data:004137D4                 db    0
.data:004137D5                 db    0
.data:004137D6                 db    0
.data:004137D7                 db    0
.data:004137D8 dword_4137D8    dd 0                    ; DATA XREF: sub_406AA0:loc_406AE7↑o
.data:004137D8                                         ; sub_406AA0+4C↑w ...
.data:004137DC dword_4137DC    dd 0                    ; DATA XREF: sub_406AA0+52↑w
.data:004137E0                 db 0A0h ;  
.data:004137E1                 db    0
.data:004137E2                 db    0
.data:004137E3                 db    0
.data:004137E4                 db    0
.data:004137E5                 db    0
.data:004137E6                 db    0
.data:004137E7                 db    0
.data:004137E8 dword_4137E8    dd 5Ch                  ; DATA XREF: sub_406AA0+70↑w
.data:004137EC                 db    1
.data:004137ED                 db    0
.data:004137EE                 db    0
.data:004137EF                 db    0
.data:004137F0                 db    0
.data:004137F1                 db    0
.data:004137F2                 db    0
.data:004137F3                 db    0
.data:004137F4                 db    2
.data:004137F5                 db    0
.data:004137F6                 db    0
.data:004137F7                 db    0
.data:004137F8                 db    0
.data:004137F9                 db    0
.data:004137FA                 db    0
.data:004137FB                 db    0
.data:004137FC unk_4137FC      db    0                 ; DATA XREF: sub_406AA0+31↑o
.data:004137FD                 db    0
.data:004137FE                 db    0
.data:004137FF                 db    0
.data:00413800                 db    0
.data:00413801                 db    0
.data:00413802                 db    0
.data:00413803                 db    0
.data:00413804                 db    0
.data:00413805                 db    0
.data:00413806                 db    0
.data:00413807                 db    0
.data:00413808                 db    0
.data:00413809                 db    0
.data:0041380A                 db    0
.data:0041380B                 db    0
.data:0041380C                 db    0
.data:0041380D                 db    0
.data:0041380E                 db    0
.data:0041380F                 db    0
.data:00413810                 db    0
.data:00413811                 db    0
.data:00413812                 db    0
.data:00413813                 db    0
.data:00413814                 db    0
.data:00413815                 db    0
.data:00413816                 db    0
.data:00413817                 db    0
.data:00413818                 db    0
.data:00413819                 db    0
.data:0041381A                 db    0
.data:0041381B                 db    0
.data:0041381C                 db    0
.data:0041381D                 db    0
.data:0041381E                 db    0
.data:0041381F                 db    0
.data:00413820 dword_413820    dd 0                    ; DATA XREF: SetCounterValues(IDataCollector *,int *):loc_40A6A6↑r
.data:00413824                 db    0
.data:00413825                 db    0
.data:00413826                 db    0
.data:00413827                 db    0
.data:00413828                 db    0
.data:00413829                 db    0
.data:0041382A                 db    0
.data:0041382B                 db    0
.data:0041382C dword_41382C    dd 0                    ; DATA XREF: sub_406AA0+64↑w
.data:00413830                 db    0
.data:00413831                 db    0
.data:00413832                 db    0
.data:00413833                 db    0
.data:00413834 dword_413834    dd 0                    ; DATA XREF: SetCounterValues(IDataCollector *,int *)+255↑r
.data:00413838 dword_413838    dd 0                    ; DATA XREF: sub_405F20:loc_405F67↑o
.data:00413838                                         ; sub_405F20+4C↑w ...
.data:0041383C dword_41383C    dd 0                    ; DATA XREF: sub_405F20+52↑w
.data:00413840                 db 0FEh ; þ
.data:00413841                 db  3Ah ; :
.data:00413842                 db    0
.data:00413843                 db    0
.data:00413844                 db    0
.data:00413845                 db    0
.data:00413846                 db    0
.data:00413847                 db    0
.data:00413848 dword_413848    dd 5Ch                  ; DATA XREF: sub_405F20+70↑w
.data:0041384C                 db    1
.data:0041384D                 db    0
.data:0041384E                 db    0
.data:0041384F                 db    0
.data:00413850                 db    0
.data:00413851                 db    0
.data:00413852                 db    0
.data:00413853                 db    0
.data:00413854                 db    1
.data:00413855                 db    0
.data:00413856                 db    0
.data:00413857                 db    0
.data:00413858                 db  80h ; €
.data:00413859                 db    0
.data:0041385A                 db    0
.data:0041385B                 db    0
.data:0041385C unk_41385C      db    0                 ; DATA XREF: sub_405F20+31↑o
.data:0041385D                 db    0
.data:0041385E                 db    0
.data:0041385F                 db    0
.data:00413860                 db    0
.data:00413861                 db    0
.data:00413862                 db    0
.data:00413863                 db    0
.data:00413864                 db    0
.data:00413865                 db    0
.data:00413866                 db    0
.data:00413867                 db    0
.data:00413868                 db    0
.data:00413869                 db    0
.data:0041386A                 db    0
.data:0041386B                 db    0
.data:0041386C                 db    0
.data:0041386D                 db    0
.data:0041386E                 db    0
.data:0041386F                 db    0
.data:00413870                 db    0
.data:00413871                 db    0
.data:00413872                 db    0
.data:00413873                 db    0
.data:00413874                 db    0
.data:00413875                 db    0
.data:00413876                 db    0
.data:00413877                 db    0
.data:00413878                 db    0
.data:00413879                 db    0
.data:0041387A                 db    0
.data:0041387B                 db    0
.data:0041387C                 db    0
.data:0041387D                 db    0
.data:0041387E                 db    0
.data:0041387F                 db    0
.data:00413880 dword_413880    dd 0                    ; DATA XREF: sub_40FF6D:loc_410040↑r
.data:00413884                 db    0
.data:00413885                 db    0
.data:00413886                 db    0
.data:00413887                 db    0
.data:00413888                 db    0
.data:00413889                 db    0
.data:0041388A                 db    0
.data:0041388B                 db    0
.data:0041388C dword_41388C    dd 0                    ; DATA XREF: sub_405F20+64↑w
.data:00413890                 db    0
.data:00413891                 db    0
.data:00413892                 db    0
.data:00413893                 db    0
.data:00413894 dword_413894    dd 0                    ; DATA XREF: sub_40FF6D+DC↑r
.data:00413898 dword_413898    dd 0                    ; DATA XREF: sub_4072A0:loc_4072E7↑o
.data:00413898                                         ; sub_4072A0+4C↑w ...
.data:0041389C dword_41389C    dd 0                    ; DATA XREF: sub_4072A0+52↑w
.data:004138A0                 db 0F0h ; ð
.data:004138A1                 db    0
.data:004138A2                 db    0
.data:004138A3                 db    0
.data:004138A4                 db    0
.data:004138A5                 db    0
.data:004138A6                 db    0
.data:004138A7                 db    0
.data:004138A8 dword_4138A8    dd 5Ch                  ; DATA XREF: sub_4072A0+70↑w
.data:004138AC                 db    1
.data:004138AD                 db    0
.data:004138AE                 db    0
.data:004138AF                 db    0
.data:004138B0                 db    0
.data:004138B1                 db    0
.data:004138B2                 db    0
.data:004138B3                 db    0
.data:004138B4                 db    1
.data:004138B5                 db    0
.data:004138B6                 db    0
.data:004138B7                 db    0
.data:004138B8                 db    4
.data:004138B9                 db    1
.data:004138BA                 db    0
.data:004138BB                 db    0
.data:004138BC unk_4138BC      db    0                 ; DATA XREF: sub_4072A0+31↑o
.data:004138BD                 db    0
.data:004138BE                 db    0
.data:004138BF                 db    0
.data:004138C0                 db    0
.data:004138C1                 db    0
.data:004138C2                 db    0
.data:004138C3                 db    0
.data:004138C4                 db    0
.data:004138C5                 db    0
.data:004138C6                 db    0
.data:004138C7                 db    0
.data:004138C8                 db    0
.data:004138C9                 db    0
.data:004138CA                 db    0
.data:004138CB                 db    0
.data:004138CC                 db    0
.data:004138CD                 db    0
.data:004138CE                 db    0
.data:004138CF                 db    0
.data:004138D0                 db    0
.data:004138D1                 db    0
.data:004138D2                 db    0
.data:004138D3                 db    0
.data:004138D4                 db    0
.data:004138D5                 db    0
.data:004138D6                 db    0
.data:004138D7                 db    0
.data:004138D8                 db    0
.data:004138D9                 db    0
.data:004138DA                 db    0
.data:004138DB                 db    0
.data:004138DC                 db    0
.data:004138DD                 db    0
.data:004138DE                 db    0
.data:004138DF                 db    0
.data:004138E0 dword_4138E0    dd 0                    ; DATA XREF: sub_40B60B:loc_40B70B↑r
.data:004138E4 dword_4138E4    dd 0                    ; DATA XREF: sub_40B60B+10A↑r
.data:004138E8                 db    0
.data:004138E9                 db    0
.data:004138EA                 db    0
.data:004138EB                 db    0
.data:004138EC dword_4138EC    dd 0                    ; DATA XREF: sub_4072A0+64↑w
.data:004138F0                 db    0
.data:004138F1                 db    0
.data:004138F2                 db    0
.data:004138F3                 db    0
.data:004138F4 ; OLECHAR *dword_4138F4
.data:004138F4 dword_4138F4    dd 0                    ; DATA XREF: sub_40B60B+112↑r
.data:004138F8 dword_4138F8    dd 0                    ; DATA XREF: sub_406F20:loc_406F67↑o
.data:004138F8                                         ; sub_406F20+4C↑w ...
.data:004138FC dword_4138FC    dd 0                    ; DATA XREF: sub_406F20+52↑w
.data:00413900                 db 0B9h ; ¹
.data:00413901                 db    0
.data:00413902                 db    0
.data:00413903                 db    0
.data:00413904                 db    0
.data:00413905                 db    0
.data:00413906                 db    0
.data:00413907                 db    0
.data:00413908 dword_413908    dd 5Ch                  ; DATA XREF: sub_406F20+70↑w
.data:0041390C                 db    1
.data:0041390D                 db    0
.data:0041390E                 db    0
.data:0041390F                 db    0
.data:00413910                 db    0
.data:00413911                 db    0
.data:00413912                 db    0
.data:00413913                 db    0
.data:00413914                 db    5
.data:00413915                 db    0
.data:00413916                 db    0
.data:00413917                 db    0
.data:00413918                 db    0
.data:00413919                 db    0
.data:0041391A                 db    0
.data:0041391B                 db    0
.data:0041391C unk_41391C      db    0                 ; DATA XREF: sub_406F20+31↑o
.data:0041391D                 db    0
.data:0041391E                 db    0
.data:0041391F                 db    0
.data:00413920                 db    0
.data:00413921                 db    0
.data:00413922                 db    0
.data:00413923                 db    0
.data:00413924                 db    0
.data:00413925                 db    0
.data:00413926                 db    0
.data:00413927                 db    0
.data:00413928                 db    0
.data:00413929                 db    0
.data:0041392A                 db    0
.data:0041392B                 db    0
.data:0041392C                 db    0
.data:0041392D                 db    0
.data:0041392E                 db    0
.data:0041392F                 db    0
.data:00413930                 db    0
.data:00413931                 db    0
.data:00413932                 db    0
.data:00413933                 db    0
.data:00413934                 db    0
.data:00413935                 db    0
.data:00413936                 db    0
.data:00413937                 db    0
.data:00413938                 db    0
.data:00413939                 db    0
.data:0041393A                 db    0
.data:0041393B                 db    0
.data:0041393C                 db    0
.data:0041393D                 db    0
.data:0041393E                 db    0
.data:0041393F                 db    0
.data:00413940 dword_413940    dd 0                    ; DATA XREF: SetTraceValues(IDataCollector *):loc_40B44C↑r
.data:00413944                 db    0
.data:00413945                 db    0
.data:00413946                 db    0
.data:00413947                 db    0
.data:00413948                 db    0
.data:00413949                 db    0
.data:0041394A                 db    0
.data:0041394B                 db    0
.data:0041394C dword_41394C    dd 0                    ; DATA XREF: sub_406F20+64↑w
.data:00413950                 db    0
.data:00413951                 db    0
.data:00413952                 db    0
.data:00413953                 db    0
.data:00413954 dword_413954    dd 0                    ; DATA XREF: SetTraceValues(IDataCollector *)+1FB↑r
.data:00413958 dword_413958    dd 0                    ; DATA XREF: sub_407420:loc_407467↑o
.data:00413958                                         ; sub_407420+4C↑w ...
.data:0041395C dword_41395C    dd 0                    ; DATA XREF: sub_407420+52↑w
.data:00413960                 db 0ECh ; ì
.data:00413961                 db    0
.data:00413962                 db    0
.data:00413963                 db    0
.data:00413964                 db    0
.data:00413965                 db    0
.data:00413966                 db    0
.data:00413967                 db    0
.data:00413968                 db  5Ch ; \
.data:00413969                 db    0
.data:0041396A                 db    0
.data:0041396B                 db    0
.data:0041396C                 db    1
.data:0041396D                 db    0
.data:0041396E                 db    0
.data:0041396F                 db    0
.data:00413970                 db    0
.data:00413971                 db    0
.data:00413972                 db    0
.data:00413973                 db    0
.data:00413974                 db    0
.data:00413975                 db    0
.data:00413976                 db    0
.data:00413977                 db    0
.data:00413978                 db    4
.data:00413979                 db    0
.data:0041397A                 db    0
.data:0041397B                 db    0
.data:0041397C unk_41397C      db    0                 ; DATA XREF: sub_407420+31↑o
.data:0041397D                 db    0
.data:0041397E                 db    0
.data:0041397F                 db    0
.data:00413980                 db    0
.data:00413981                 db    0
.data:00413982                 db    0
.data:00413983                 db    0
.data:00413984                 db    0
.data:00413985                 db    0
.data:00413986                 db    0
.data:00413987                 db    0
.data:00413988                 db    0
.data:00413989                 db    0
.data:0041398A                 db    0
.data:0041398B                 db    0
.data:0041398C                 db    0
.data:0041398D                 db    0
.data:0041398E                 db    0
.data:0041398F                 db    0
.data:00413990                 db    0
.data:00413991                 db    0
.data:00413992                 db    0
.data:00413993                 db    0
.data:00413994                 db    0
.data:00413995                 db    0
.data:00413996                 db    0
.data:00413997                 db    0
.data:00413998                 db    0
.data:00413999                 db    0
.data:0041399A                 db    0
.data:0041399B                 db    0
.data:0041399C                 db    0
.data:0041399D                 db    0
.data:0041399E                 db    0
.data:0041399F                 db    0
.data:004139A0 dword_4139A0    dd 0                    ; DATA XREF: sub_40B845+3E↑r
.data:004139A4 dword_4139A4    dd 0                    ; DATA XREF: sub_40B845+53↑r
.data:004139A8                 db    0
.data:004139A9                 db    0
.data:004139AA                 db    0
.data:004139AB                 db    0
.data:004139AC dword_4139AC    dd 0                    ; DATA XREF: sub_407420+64↑w
.data:004139B0                 db    0
.data:004139B1                 db    0
.data:004139B2                 db    0
.data:004139B3                 db    0
.data:004139B4                 db    0
.data:004139B5                 db    0
.data:004139B6                 db    0
.data:004139B7                 db    0
.data:004139B8 dword_4139B8    dd 0                    ; DATA XREF: sub_405FA0:loc_405FE7↑o
.data:004139B8                                         ; sub_405FA0+4C↑w ...
.data:004139BC dword_4139BC    dd 0                    ; DATA XREF: sub_405FA0+52↑w
.data:004139C0                 db  85h ; …
.data:004139C1                 db    0
.data:004139C2                 db    0
.data:004139C3                 db    0
.data:004139C4                 db    0
.data:004139C5                 db    0
.data:004139C6                 db    0
.data:004139C7                 db    0
.data:004139C8 dword_4139C8    dd 5Ch                  ; DATA XREF: sub_405FA0+70↑w
.data:004139CC                 db    1
.data:004139CD                 db    0
.data:004139CE                 db    0
.data:004139CF                 db    0
.data:004139D0                 db    0
.data:004139D1                 db    0
.data:004139D2                 db    0
.data:004139D3                 db    0
.data:004139D4                 db    1
.data:004139D5                 db    0
.data:004139D6                 db    0
.data:004139D7                 db    0
.data:004139D8                 db  41h ; A
.data:004139D9                 db    0
.data:004139DA                 db    0
.data:004139DB                 db    0
.data:004139DC unk_4139DC      db    0                 ; DATA XREF: sub_405FA0+31↑o
.data:004139DD                 db    0
.data:004139DE                 db    0
.data:004139DF                 db    0
.data:004139E0                 db    0
.data:004139E1                 db    0
.data:004139E2                 db    0
.data:004139E3                 db    0
.data:004139E4                 db    0
.data:004139E5                 db    0
.data:004139E6                 db    0
.data:004139E7                 db    0
.data:004139E8                 db    0
.data:004139E9                 db    0
.data:004139EA                 db    0
.data:004139EB                 db    0
.data:004139EC                 db    0
.data:004139ED                 db    0
.data:004139EE                 db    0
.data:004139EF                 db    0
.data:004139F0 dword_4139F0    dd 0                    ; DATA XREF: ArgApplyRules(int)+6D7↑w
.data:004139F4                 align 10h
.data:00413A00 dword_413A00    dd 0                    ; DATA XREF: _wmain+405↑r
.data:00413A00                                         ; _wmain:loc_40895C↑r ...
.data:00413A04                 db    0
.data:00413A05                 db    0
.data:00413A06                 db    0
.data:00413A07                 db    0
.data:00413A08                 db    0
.data:00413A09                 db    0
.data:00413A0A                 db    0
.data:00413A0B                 db    0
.data:00413A0C dword_413A0C    dd 0                    ; DATA XREF: sub_405FA0+64↑w
.data:00413A10                 db    0
.data:00413A11                 db    0
.data:00413A12                 db    0
.data:00413A13                 db    0
.data:00413A14 ; STRSAFE_LPWSTR pszDest
.data:00413A14 pszDest         dd 0                    ; DATA XREF: _wmain:loc_408912↑r
.data:00413A14                                         ; _wmain+44A↑r ...
.data:00413A18 dword_413A18    dd 0                    ; DATA XREF: sub_405A20:loc_405A67↑o
.data:00413A18                                         ; sub_405A20+4C↑w ...
.data:00413A1C dword_413A1C    dd 0                    ; DATA XREF: sub_405A20+52↑w
.data:00413A20                 db    5
.data:00413A21                 db    1
.data:00413A22                 db    0
.data:00413A23                 db    0
.data:00413A24                 db    0
.data:00413A25                 db    0
.data:00413A26                 db    0
.data:00413A27                 db    0
.data:00413A28                 db  5Ch ; \
.data:00413A29                 db    0
.data:00413A2A                 db    0
.data:00413A2B                 db    0
.data:00413A2C                 db    0
.data:00413A2D                 db    0
.data:00413A2E                 db    0
.data:00413A2F                 db    0
.data:00413A30                 db    0
.data:00413A31                 db    0
.data:00413A32                 db    0
.data:00413A33                 db    0
.data:00413A34                 db    0
.data:00413A35                 db    0
.data:00413A36                 db    0
.data:00413A37                 db    0
.data:00413A38                 db    0
.data:00413A39                 db    0
.data:00413A3A                 db    0
.data:00413A3B                 db    0
.data:00413A3C unk_413A3C      db    0                 ; DATA XREF: sub_405A20+31↑o
.data:00413A3D                 db    0
.data:00413A3E                 db    0
.data:00413A3F                 db    0
.data:00413A40                 db    0
.data:00413A41                 db    0
.data:00413A42                 db    0
.data:00413A43                 db    0
.data:00413A44                 db    0
.data:00413A45                 db    0
.data:00413A46                 db    0
.data:00413A47                 db    0
.data:00413A48                 db    0
.data:00413A49                 db    0
.data:00413A4A                 db    0
.data:00413A4B                 db    0
.data:00413A4C                 db    0
.data:00413A4D                 db    0
.data:00413A4E                 db    0
.data:00413A4F                 db    0
.data:00413A50                 db    0
.data:00413A51                 db    0
.data:00413A52                 db    0
.data:00413A53                 db    0
.data:00413A54                 db    0
.data:00413A55                 db    0
.data:00413A56                 db    0
.data:00413A57                 db    0
.data:00413A58                 db    0
.data:00413A59                 db    0
.data:00413A5A                 db    0
.data:00413A5B                 db    0
.data:00413A5C                 db    0
.data:00413A5D                 db    0
.data:00413A5E                 db    0
.data:00413A5F                 db    0
.data:00413A60 dword_413A60    dd 0                    ; DATA XREF: ArgApplyRules(int)+4C5↑r
.data:00413A60                                         ; ArgApplyRules(int):loc_408271↑r ...
.data:00413A64                 db    0
.data:00413A65                 db    0
.data:00413A66                 db    0
.data:00413A67                 db    0
.data:00413A68                 db    0
.data:00413A69                 db    0
.data:00413A6A                 db    0
.data:00413A6B                 db    0
.data:00413A6C dword_413A6C    dd 0                    ; DATA XREF: sub_405A20+64↑w
.data:00413A70                 db    0
.data:00413A71                 db    0
.data:00413A72                 db    0
.data:00413A73                 db    0
.data:00413A74                 db    0
.data:00413A75                 db    0
.data:00413A76                 db    0
.data:00413A77                 db    0
.data:00413A78 dword_413A78    dd 0                    ; DATA XREF: sub_406DA0:loc_406DE7↑o
.data:00413A78                                         ; sub_406DA0+4C↑w ...
.data:00413A7C dword_413A7C    dd 0                    ; DATA XREF: sub_406DA0+52↑w
.data:00413A80                 db 0B3h ; ³
.data:00413A81                 db    0
.data:00413A82                 db    0
.data:00413A83                 db    0
.data:00413A84                 db    0
.data:00413A85                 db    0
.data:00413A86                 db    0
.data:00413A87                 db    0
.data:00413A88 dword_413A88    dd 5Ch                  ; DATA XREF: sub_406DA0+70↑w
.data:00413A8C                 db    1
.data:00413A8D                 db    0
.data:00413A8E                 db    0
.data:00413A8F                 db    0
.data:00413A90                 db    0
.data:00413A91                 db    0
.data:00413A92                 db    0
.data:00413A93                 db    0
.data:00413A94                 db    1
.data:00413A95                 db    0
.data:00413A96                 db    0
.data:00413A97                 db    0
.data:00413A98                 db  80h ; €
.data:00413A99                 db    0
.data:00413A9A                 db    0
.data:00413A9B                 db    0
.data:00413A9C unk_413A9C      db    0                 ; DATA XREF: sub_406DA0+31↑o
.data:00413A9D                 db    0
.data:00413A9E                 db    0
.data:00413A9F                 db    0
.data:00413AA0                 db    0
.data:00413AA1                 db    0
.data:00413AA2                 db    0
.data:00413AA3                 db    0
.data:00413AA4                 db    0
.data:00413AA5                 db    0
.data:00413AA6                 db    0
.data:00413AA7                 db    0
.data:00413AA8                 db    0
.data:00413AA9                 db    0
.data:00413AAA                 db    0
.data:00413AAB                 db    0
.data:00413AAC                 db    0
.data:00413AAD                 db    0
.data:00413AAE                 db    0
.data:00413AAF                 db    0
.data:00413AB0                 db    0
.data:00413AB1                 db    0
.data:00413AB2                 db    0
.data:00413AB3                 db    0
.data:00413AB4                 db    0
.data:00413AB5                 db    0
.data:00413AB6                 db    0
.data:00413AB7                 db    0
.data:00413AB8                 db    0
.data:00413AB9                 db    0
.data:00413ABA                 db    0
.data:00413ABB                 db    0
.data:00413ABC                 db    0
.data:00413ABD                 db    0
.data:00413ABE                 db    0
.data:00413ABF                 db    0
.data:00413AC0 dword_413AC0    dd 0                    ; DATA XREF: sub_40AAF8:loc_40AC55↑r
.data:00413AC0                                         ; sub_40AAF8:loc_40ACDF↑r ...
.data:00413AC4                 db    0
.data:00413AC5                 db    0
.data:00413AC6                 db    0
.data:00413AC7                 db    0
.data:00413AC8                 db    0
.data:00413AC9                 db    0
.data:00413ACA                 db    0
.data:00413ACB                 db    0
.data:00413ACC dword_413ACC    dd 0                    ; DATA XREF: sub_406DA0+64↑w
.data:00413AD0                 db    0
.data:00413AD1                 db    0
.data:00413AD2                 db    0
.data:00413AD3                 db    0
.data:00413AD4 ; wchar_t *FileName
.data:00413AD4 FileName        dd 0                    ; DATA XREF: sub_40AAF8+16A↑r
.data:00413AD8 dword_413AD8    dd 0                    ; DATA XREF: sub_405EA0:loc_405EE7↑o
.data:00413AD8                                         ; sub_405EA0+4C↑w ...
.data:00413ADC dword_413ADC    dd 0                    ; DATA XREF: sub_405EA0+52↑w
.data:00413AE0                 db  68h ; h
.data:00413AE1                 db    0
.data:00413AE2                 db    0
.data:00413AE3                 db    0
.data:00413AE4                 db    0
.data:00413AE5                 db    0
.data:00413AE6                 db    0
.data:00413AE7                 db    0
.data:00413AE8 dword_413AE8    dd 5Ch                  ; DATA XREF: sub_405EA0+70↑w
.data:00413AEC                 db    1
.data:00413AED                 db    0
.data:00413AEE                 db    0
.data:00413AEF                 db    0
.data:00413AF0                 db    0
.data:00413AF1                 db    0
.data:00413AF2                 db    0
.data:00413AF3                 db    0
.data:00413AF4                 db    1
.data:00413AF5                 db    0
.data:00413AF6                 db    0
.data:00413AF7                 db    0
.data:00413AF8                 db    0
.data:00413AF9                 db    0
.data:00413AFA                 db    0
.data:00413AFB                 db    0
.data:00413AFC unk_413AFC      db    0                 ; DATA XREF: sub_405EA0+31↑o
.data:00413AFD                 db    0
.data:00413AFE                 db    0
.data:00413AFF                 db    0
.data:00413B00                 db    0
.data:00413B01                 db    0
.data:00413B02                 db    0
.data:00413B03                 db    0
.data:00413B04                 db    0
.data:00413B05                 db    0
.data:00413B06                 db    0
.data:00413B07                 db    0
.data:00413B08                 db    0
.data:00413B09                 db    0
.data:00413B0A                 db    0
.data:00413B0B                 db    0
.data:00413B0C                 db    0
.data:00413B0D                 db    0
.data:00413B0E                 db    0
.data:00413B0F                 db    0
.data:00413B10                 db    0
.data:00413B11                 db    0
.data:00413B12                 db    0
.data:00413B13                 db    0
.data:00413B14                 db    0
.data:00413B15                 db    0
.data:00413B16                 db    0
.data:00413B17                 db    0
.data:00413B18                 db    0
.data:00413B19                 db    0
.data:00413B1A                 db    0
.data:00413B1B                 db    0
.data:00413B1C                 db    0
.data:00413B1D                 db    0
.data:00413B1E                 db    0
.data:00413B1F                 db    0
.data:00413B20 dword_413B20    dd 0                    ; DATA XREF: _wmain+B7↑r
.data:00413B24                 db    0
.data:00413B25                 db    0
.data:00413B26                 db    0
.data:00413B27                 db    0
.data:00413B28                 db    0
.data:00413B29                 db    0
.data:00413B2A                 db    0
.data:00413B2B                 db    0
.data:00413B2C dword_413B2C    dd 0                    ; DATA XREF: sub_405EA0+64↑w
.data:00413B30                 db    0
.data:00413B31                 db    0
.data:00413B32                 db    0
.data:00413B33                 db    0
.data:00413B34 ; OLECHAR *psz
.data:00413B34 psz             dd 0                    ; DATA XREF: _wmain+BF↑r
.data:00413B38 dword_413B38    dd 0                    ; DATA XREF: sub_4064A0:loc_4064E7↑o
.data:00413B38                                         ; sub_4064A0+4C↑w ...
.data:00413B3C dword_413B3C    dd 0                    ; DATA XREF: sub_4064A0+52↑w
.data:00413B40                 db 0A7h ; §
.data:00413B41                 db    0
.data:00413B42                 db    0
.data:00413B43                 db    0
.data:00413B44                 db    0
.data:00413B45                 db    0
.data:00413B46                 db    0
.data:00413B47                 db    0
.data:00413B48 dword_413B48    dd 5Ch                  ; DATA XREF: sub_4064A0+70↑w
.data:00413B4C                 db    1
.data:00413B4D                 db    0
.data:00413B4E                 db    0
.data:00413B4F                 db    0
.data:00413B50                 db    0
.data:00413B51                 db    0
.data:00413B52                 db    0
.data:00413B53                 db    0
.data:00413B54                 db    3
.data:00413B55                 db    0
.data:00413B56                 db    0
.data:00413B57                 db    0
.data:00413B58                 db    0
.data:00413B59                 db    0
.data:00413B5A                 db    0
.data:00413B5B                 db    0
.data:00413B5C unk_413B5C      db    0                 ; DATA XREF: sub_4064A0+31↑o
.data:00413B5D                 db    0
.data:00413B5E                 db    0
.data:00413B5F                 db    0
.data:00413B60                 db    0
.data:00413B61                 db    0
.data:00413B62                 db    0
.data:00413B63                 db    0
.data:00413B64                 db    0
.data:00413B65                 db    0
.data:00413B66                 db    0
.data:00413B67                 db    0
.data:00413B68                 db    0
.data:00413B69                 db    0
.data:00413B6A                 db    0
.data:00413B6B                 db    0
.data:00413B6C                 db    0
.data:00413B6D                 db    0
.data:00413B6E                 db    0
.data:00413B6F                 db    0
.data:00413B70                 db    0
.data:00413B71                 db    0
.data:00413B72                 db    0
.data:00413B73                 db    0
.data:00413B74                 db    0
.data:00413B75                 db    0
.data:00413B76                 db    0
.data:00413B77                 db    0
.data:00413B78                 db    0
.data:00413B79                 db    0
.data:00413B7A                 db    0
.data:00413B7B                 db    0
.data:00413B7C                 db    0
.data:00413B7D                 db    0
.data:00413B7E                 db    0
.data:00413B7F                 db    0
.data:00413B80 dword_413B80    dd 0                    ; DATA XREF: SetCounterValues(IDataCollector *,int *):loc_40A4C8↑r
.data:00413B80                                         ; sub_40B60B+3F↑r
.data:00413B84                 db    0
.data:00413B85                 db    0
.data:00413B86                 db    0
.data:00413B87                 db    0
.data:00413B88                 db    0
.data:00413B89                 db    0
.data:00413B8A                 db    0
.data:00413B8B                 db    0
.data:00413B8C dword_413B8C    dd 0                    ; DATA XREF: sub_4064A0+64↑w
.data:00413B90                 db    0
.data:00413B91                 db    0
.data:00413B92                 db    0
.data:00413B93                 db    0
.data:00413B94                 db    0
.data:00413B95                 db    0
.data:00413B96                 db    0
.data:00413B97                 db    0
.data:00413B98                 db    0
.data:00413B99                 db    0
.data:00413B9A                 db    0
.data:00413B9B                 db    0
.data:00413B9C word_413B9C     dw 0                    ; DATA XREF: SetCounterValues(IDataCollector *,int *)+76↑r
.data:00413B9C                                         ; sub_40B60B+47↑r
.data:00413B9E word_413B9E     dw 0                    ; DATA XREF: SetCounterValues(IDataCollector *,int *)+80↑r
.data:00413B9E                                         ; sub_40B60B+51↑r
.data:00413BA0 word_413BA0     dw 0                    ; DATA XREF: SetCounterValues(IDataCollector *,int *)+89↑r
.data:00413BA0                                         ; sub_40B60B+5A↑r
.data:00413BA2                 align 8
.data:00413BA8 dword_413BA8    dd 0                    ; DATA XREF: sub_406120:loc_406167↑o
.data:00413BA8                                         ; sub_406120+4C↑w ...
.data:00413BAC dword_413BAC    dd 0                    ; DATA XREF: sub_406120+52↑w
.data:00413BB0                 db    3
.data:00413BB1                 db    1
.data:00413BB2                 db    0
.data:00413BB3                 db    0
.data:00413BB4                 db    0
.data:00413BB5                 db    0
.data:00413BB6                 db    0
.data:00413BB7                 db    0
.data:00413BB8 dword_413BB8    dd 5Ch                  ; DATA XREF: sub_406120+70↑w
.data:00413BBC                 db    1
.data:00413BBD                 db    0
.data:00413BBE                 db    0
.data:00413BBF                 db    0
.data:00413BC0                 db    0
.data:00413BC1                 db    0
.data:00413BC2                 db    0
.data:00413BC3                 db    0
.data:00413BC4                 db    1
.data:00413BC5                 db    0
.data:00413BC6                 db    0
.data:00413BC7                 db    0
.data:00413BC8                 db  80h ; €
.data:00413BC9                 db    0
.data:00413BCA                 db    0
.data:00413BCB                 db    0
.data:00413BCC unk_413BCC      db    0                 ; DATA XREF: sub_406120+31↑o
.data:00413BCD                 db    0
.data:00413BCE                 db    0
.data:00413BCF                 db    0
.data:00413BD0                 db    0
.data:00413BD1                 db    0
.data:00413BD2                 db    0
.data:00413BD3                 db    0
.data:00413BD4                 db    0
.data:00413BD5                 db    0
.data:00413BD6                 db    0
.data:00413BD7                 db    0
.data:00413BD8                 db    0
.data:00413BD9                 db    0
.data:00413BDA                 db    0
.data:00413BDB                 db    0
.data:00413BDC                 db    0
.data:00413BDD                 db    0
.data:00413BDE                 db    0
.data:00413BDF                 db    0
.data:00413BE0                 db    0
.data:00413BE1                 db    0
.data:00413BE2                 db    0
.data:00413BE3                 db    0
.data:00413BE4                 db    0
.data:00413BE5                 db    0
.data:00413BE6                 db    0
.data:00413BE7                 db    0
.data:00413BE8                 db    0
.data:00413BE9                 db    0
.data:00413BEA                 db    0
.data:00413BEB                 db    0
.data:00413BEC                 db    0
.data:00413BED                 db    0
.data:00413BEE                 db    0
.data:00413BEF                 db    0
.data:00413BF0                 db    0
.data:00413BF1                 db    0
.data:00413BF2                 db    0
.data:00413BF3                 db    0
.data:00413BF4                 db    0
.data:00413BF5                 db    0
.data:00413BF6                 db    0
.data:00413BF7                 db    0
.data:00413BF8                 db    0
.data:00413BF9                 db    0
.data:00413BFA                 db    0
.data:00413BFB                 db    0
.data:00413BFC dword_413BFC    dd 0                    ; DATA XREF: sub_406120+64↑w
.data:00413C00                 db    0
.data:00413C01                 db    0
.data:00413C02                 db    0
.data:00413C03                 db    0
.data:00413C04 ; OLECHAR *dword_413C04
.data:00413C04 dword_413C04    dd 0                    ; DATA XREF: sub_40BCA7+27↑r
.data:00413C04                                         ; sub_40C58B+69↑r
.data:00413C08 dword_413C08    dd 0                    ; DATA XREF: sub_405820:loc_405867↑o
.data:00413C08                                         ; sub_405820+4C↑w ...
.data:00413C0C dword_413C0C    dd 0                    ; DATA XREF: sub_405820+52↑w
.data:00413C10                 db  6Dh ; m
.data:00413C11                 db    0
.data:00413C12                 db    0
.data:00413C13                 db    0
.data:00413C14 dword_413C14    dd 0                    ; DATA XREF: ArgApplyRules(int)+A21↑w
.data:00413C18                 db  5Ch ; \
.data:00413C19                 db    0
.data:00413C1A                 db    0
.data:00413C1B                 db    0
.data:00413C1C                 db    0
.data:00413C1D                 db    0
.data:00413C1E                 db    0
.data:00413C1F                 db    0
.data:00413C20                 db    0
.data:00413C21                 db    0
.data:00413C22                 db    0
.data:00413C23                 db    0
.data:00413C24                 db    0
.data:00413C25                 db    0
.data:00413C26                 db    0
.data:00413C27                 db    0
.data:00413C28                 db    0
.data:00413C29                 db    0
.data:00413C2A                 db    0
.data:00413C2B                 db    0
.data:00413C2C unk_413C2C      db    0                 ; DATA XREF: sub_405820+31↑o
.data:00413C2D                 db    0
.data:00413C2E                 db    0
.data:00413C2F                 db    0
.data:00413C30                 db    0
.data:00413C31                 db    0
.data:00413C32                 db    0
.data:00413C33                 db    0
.data:00413C34                 db    0
.data:00413C35                 db    0
.data:00413C36                 db    0
.data:00413C37                 db    0
.data:00413C38                 db    0
.data:00413C39                 db    0
.data:00413C3A                 db    0
.data:00413C3B                 db    0
.data:00413C3C                 db    0
.data:00413C3D                 db    0
.data:00413C3E                 db    0
.data:00413C3F                 db    0
.data:00413C40                 db    0
.data:00413C41                 db    0
.data:00413C42                 db    0
.data:00413C43                 db    0
.data:00413C44                 db    0
.data:00413C45                 db    0
.data:00413C46                 db    0
.data:00413C47                 db    0
.data:00413C48                 db    0
.data:00413C49                 db    0
.data:00413C4A                 db    0
.data:00413C4B                 db    0
.data:00413C4C                 db    0
.data:00413C4D                 db    0
.data:00413C4E                 db    0
.data:00413C4F                 db    0
.data:00413C50 dword_413C50    dd 0                    ; DATA XREF: ArgApplyRules(int)+4A5↑r
.data:00413C50                                         ; ArgApplyRules(int):loc_408015↑r ...
.data:00413C54                 db    0
.data:00413C55                 db    0
.data:00413C56                 db    0
.data:00413C57                 db    0
.data:00413C58                 db    0
.data:00413C59                 db    0
.data:00413C5A                 db    0
.data:00413C5B                 db    0
.data:00413C5C dword_413C5C    dd 0                    ; DATA XREF: sub_405820+64↑w
.data:00413C60                 db    0
.data:00413C61                 db    0
.data:00413C62                 db    0
.data:00413C63                 db    0
.data:00413C64                 db    0
.data:00413C65                 db    0
.data:00413C66                 db    0
.data:00413C67                 db    0
.data:00413C68 dword_413C68    dd 0                    ; DATA XREF: sub_407020:loc_407067↑o
.data:00413C68                                         ; sub_407020+4C↑w ...
.data:00413C6C dword_413C6C    dd 0                    ; DATA XREF: sub_407020+52↑w
.data:00413C70                 db 0DCh ; Ü
.data:00413C71                 db    0
.data:00413C72                 db    0
.data:00413C73                 db    0
.data:00413C74 dword_413C74    dd 0                    ; DATA XREF: ArgApplyRules(int)+A3F↑w
.data:00413C78 dword_413C78    dd 5Ch                  ; DATA XREF: sub_407020+70↑w
.data:00413C7C                 db    1
.data:00413C7D                 db    0
.data:00413C7E                 db    0
.data:00413C7F                 db    0
.data:00413C80                 db    0
.data:00413C81                 db    0
.data:00413C82                 db    0
.data:00413C83                 db    0
.data:00413C84                 db    1
.data:00413C85                 db    0
.data:00413C86                 db    0
.data:00413C87                 db    0
.data:00413C88                 db    0
.data:00413C89                 db    0
.data:00413C8A                 db    0
.data:00413C8B                 db    0
.data:00413C8C unk_413C8C      db    0                 ; DATA XREF: sub_407020+31↑o
.data:00413C8D                 db    0
.data:00413C8E                 db    0
.data:00413C8F                 db    0
.data:00413C90                 db    0
.data:00413C91                 db    0
.data:00413C92                 db    0
.data:00413C93                 db    0
.data:00413C94                 db    0
.data:00413C95                 db    0
.data:00413C96                 db    0
.data:00413C97                 db    0
.data:00413C98                 db    0
.data:00413C99                 db    0
.data:00413C9A                 db    0
.data:00413C9B                 db    0
.data:00413C9C                 db    0
.data:00413C9D                 db    0
.data:00413C9E                 db    0
.data:00413C9F                 db    0
.data:00413CA0                 db    0
.data:00413CA1                 db    0
.data:00413CA2                 db    0
.data:00413CA3                 db    0
.data:00413CA4                 db    0
.data:00413CA5                 db    0
.data:00413CA6                 db    0
.data:00413CA7                 db    0
.data:00413CA8                 db    0
.data:00413CA9                 db    0
.data:00413CAA                 db    0
.data:00413CAB                 db    0
.data:00413CAC                 db    0
.data:00413CAD                 db    0
.data:00413CAE                 db    0
.data:00413CAF                 db    0
.data:00413CB0 dword_413CB0    dd 0                    ; DATA XREF: SetTraceValues(IDataCollector *):loc_40B350↑r
.data:00413CB4                 db    0
.data:00413CB5                 db    0
.data:00413CB6                 db    0
.data:00413CB7                 db    0
.data:00413CB8                 db    0
.data:00413CB9                 db    0
.data:00413CBA                 db    0
.data:00413CBB                 db    0
.data:00413CBC dword_413CBC    dd 0                    ; DATA XREF: sub_407020+64↑w
.data:00413CC0                 db    0
.data:00413CC1                 db    0
.data:00413CC2                 db    0
.data:00413CC3                 db    0
.data:00413CC4 ; wchar_t *dword_413CC4
.data:00413CC4 dword_413CC4    dd 0                    ; DATA XREF: SetTraceValues(IDataCollector *)+100↑r
.data:00413CC4                                         ; SetTraceValues(IDataCollector *)+12B↑r ...
.data:00413CC8 dword_413CC8    dd 0                    ; DATA XREF: sub_4058A0:loc_4058E7↑o
.data:00413CC8                                         ; sub_4058A0+4C↑w ...
.data:00413CCC dword_413CCC    dd 0                    ; DATA XREF: sub_4058A0+52↑w
.data:00413CD0                 db  70h ; p
.data:00413CD1                 db    0
.data:00413CD2                 db    0
.data:00413CD3                 db    0
.data:00413CD4                 db    0
.data:00413CD5                 db    0
.data:00413CD6                 db    0
.data:00413CD7                 db    0
.data:00413CD8                 db  5Ch ; \
.data:00413CD9                 db    0
.data:00413CDA                 db    0
.data:00413CDB                 db    0
.data:00413CDC                 db    0
.data:00413CDD                 db    0
.data:00413CDE                 db    0
.data:00413CDF                 db    0
.data:00413CE0                 db    0
.data:00413CE1                 db    0
.data:00413CE2                 db    0
.data:00413CE3                 db    0
.data:00413CE4                 db    0
.data:00413CE5                 db    0
.data:00413CE6                 db    0
.data:00413CE7                 db    0
.data:00413CE8                 db    0
.data:00413CE9                 db    0
.data:00413CEA                 db    0
.data:00413CEB                 db    0
.data:00413CEC unk_413CEC      db    0                 ; DATA XREF: sub_4058A0+31↑o
.data:00413CED                 db    0
.data:00413CEE                 db    0
.data:00413CEF                 db    0
.data:00413CF0                 db    0
.data:00413CF1                 db    0
.data:00413CF2                 db    0
.data:00413CF3                 db    0
.data:00413CF4                 db    0
.data:00413CF5                 db    0
.data:00413CF6                 db    0
.data:00413CF7                 db    0
.data:00413CF8                 db    0
.data:00413CF9                 db    0
.data:00413CFA                 db    0
.data:00413CFB                 db    0
.data:00413CFC                 db    0
.data:00413CFD                 db    0
.data:00413CFE                 db    0
.data:00413CFF                 db    0
.data:00413D00                 db    0
.data:00413D01                 db    0
.data:00413D02                 db    0
.data:00413D03                 db    0
.data:00413D04                 db    0
.data:00413D05                 db    0
.data:00413D06                 db    0
.data:00413D07                 db    0
.data:00413D08                 db    0
.data:00413D09                 db    0
.data:00413D0A                 db    0
.data:00413D0B                 db    0
.data:00413D0C                 db    0
.data:00413D0D                 db    0
.data:00413D0E                 db    0
.data:00413D0F                 db    0
.data:00413D10 dword_413D10    dd 0                    ; DATA XREF: ArgApplyRules(int)+4AD↑r
.data:00413D10                                         ; ArgApplyRules(int):loc_408078↑r ...
.data:00413D14                 db    0
.data:00413D15                 db    0
.data:00413D16                 db    0
.data:00413D17                 db    0
.data:00413D18                 db    0
.data:00413D19                 db    0
.data:00413D1A                 db    0
.data:00413D1B                 db    0
.data:00413D1C dword_413D1C    dd 0                    ; DATA XREF: sub_4058A0+64↑w
.data:00413D20                 db    0
.data:00413D21                 db    0
.data:00413D22                 db    0
.data:00413D23                 db    0
.data:00413D24                 db    0
.data:00413D25                 db    0
.data:00413D26                 db    0
.data:00413D27                 db    0
.data:00413D28 dword_413D28    dd 0                    ; DATA XREF: sub_407620:loc_407667↑o
.data:00413D28                                         ; sub_407620+4C↑w ...
.data:00413D2C dword_413D2C    dd 0                    ; DATA XREF: sub_407620+52↑w
.data:00413D30                 db 0FCh ; ü
.data:00413D31                 db    0
.data:00413D32                 db    0
.data:00413D33                 db    0
.data:00413D34                 db    0
.data:00413D35                 db    0
.data:00413D36                 db    0
.data:00413D37                 db    0
.data:00413D38 dword_413D38    dd 5Ch                  ; DATA XREF: sub_407620+70↑w
.data:00413D3C                 db    1
.data:00413D3D                 db    0
.data:00413D3E                 db    0
.data:00413D3F                 db    0
.data:00413D40                 db    0
.data:00413D41                 db    0
.data:00413D42                 db    0
.data:00413D43                 db    0
.data:00413D44                 db    2
.data:00413D45                 db    0
.data:00413D46                 db    0
.data:00413D47                 db    0
.data:00413D48                 db    0
.data:00413D49                 db    4
.data:00413D4A                 db    0
.data:00413D4B                 db    0
.data:00413D4C unk_413D4C      db    0                 ; DATA XREF: sub_407620+31↑o
.data:00413D4D                 db    0
.data:00413D4E                 db    0
.data:00413D4F                 db    0
.data:00413D50                 db    0
.data:00413D51                 db    0
.data:00413D52                 db    0
.data:00413D53                 db    0
.data:00413D54                 db    0
.data:00413D55                 db    0
.data:00413D56                 db    0
.data:00413D57                 db    0
.data:00413D58                 db    0
.data:00413D59                 db    0
.data:00413D5A                 db    0
.data:00413D5B                 db    0
.data:00413D5C                 db    0
.data:00413D5D                 db    0
.data:00413D5E                 db    0
.data:00413D5F                 db    0
.data:00413D60                 db    0
.data:00413D61                 db    0
.data:00413D62                 db    0
.data:00413D63                 db    0
.data:00413D64                 db    0
.data:00413D65                 db    0
.data:00413D66                 db    0
.data:00413D67                 db    0
.data:00413D68                 db    0
.data:00413D69                 db    0
.data:00413D6A                 db    0
.data:00413D6B                 db    0
.data:00413D6C                 db    0
.data:00413D6D                 db    0
.data:00413D6E                 db    0
.data:00413D6F                 db    0
.data:00413D70 dword_413D70    dd 0                    ; DATA XREF: SetApiTraceValues(IDataCollector *,int *):loc_40BAE7↑r
.data:00413D74                 db    0
.data:00413D75                 db    0
.data:00413D76                 db    0
.data:00413D77                 db    0
.data:00413D78                 db    0
.data:00413D79                 db    0
.data:00413D7A                 db    0
.data:00413D7B                 db    0
.data:00413D7C dword_413D7C    dd 0                    ; DATA XREF: sub_407620+64↑w
.data:00413D80                 db    0
.data:00413D81                 db    0
.data:00413D82                 db    0
.data:00413D83                 db    0
.data:00413D84 dword_413D84    dd 0                    ; DATA XREF: SetApiTraceValues(IDataCollector *,int *)+125↑r
.data:00413D88 dword_413D88    dd 0                    ; DATA XREF: sub_406820:loc_406867↑o
.data:00413D88                                         ; sub_406820+4C↑w ...
.data:00413D8C dword_413D8C    dd 0                    ; DATA XREF: sub_406820+52↑w
.data:00413D90                 db  9Ah ; š
.data:00413D91                 db    0
.data:00413D92                 db    0
.data:00413D93                 db    0
.data:00413D94                 db    0
.data:00413D95                 db    0
.data:00413D96                 db    0
.data:00413D97                 db    0
.data:00413D98 dword_413D98    dd 5Ch                  ; DATA XREF: sub_406820+70↑w
.data:00413D9C                 db    1
.data:00413D9D                 db    0
.data:00413D9E                 db    0
.data:00413D9F                 db    0
.data:00413DA0                 db    0
.data:00413DA1                 db    0
.data:00413DA2                 db    0
.data:00413DA3                 db    0
.data:00413DA4                 db    5
.data:00413DA5                 db    0
.data:00413DA6                 db    0
.data:00413DA7                 db    0
.data:00413DA8                 db    4
.data:00413DA9                 db    1
.data:00413DAA                 db    0
.data:00413DAB                 db    0
.data:00413DAC unk_413DAC      db    0                 ; DATA XREF: sub_406820+31↑o
.data:00413DAD                 db    0
.data:00413DAE                 db    0
.data:00413DAF                 db    0
.data:00413DB0                 db    0
.data:00413DB1                 db    0
.data:00413DB2                 db    0
.data:00413DB3                 db    0
.data:00413DB4                 db    0
.data:00413DB5                 db    0
.data:00413DB6                 db    0
.data:00413DB7                 db    0
.data:00413DB8                 db    0
.data:00413DB9                 db    0
.data:00413DBA                 db    0
.data:00413DBB                 db    0
.data:00413DBC                 db    0
.data:00413DBD                 db    0
.data:00413DBE                 db    0
.data:00413DBF                 db    0
.data:00413DC0                 db    0
.data:00413DC1                 db    0
.data:00413DC2                 db    0
.data:00413DC3                 db    0
.data:00413DC4                 db    0
.data:00413DC5                 db    0
.data:00413DC6                 db    0
.data:00413DC7                 db    0
.data:00413DC8                 db    0
.data:00413DC9                 db    0
.data:00413DCA                 db    0
.data:00413DCB                 db    0
.data:00413DCC                 db    0
.data:00413DCD                 db    0
.data:00413DCE                 db    0
.data:00413DCF                 db    0
.data:00413DD0 dword_413DD0    dd 0                    ; DATA XREF: sub_40BF14:loc_40C067↑r
.data:00413DD4 dword_413DD4    dd 0                    ; DATA XREF: sub_40BF14+15C↑r
.data:00413DD8                 db    0
.data:00413DD9                 db    0
.data:00413DDA                 db    0
.data:00413DDB                 db    0
.data:00413DDC dword_413DDC    dd 0                    ; DATA XREF: sub_406820+64↑w
.data:00413DE0                 db    0
.data:00413DE1                 db    0
.data:00413DE2                 db    0
.data:00413DE3                 db    0
.data:00413DE4 dword_413DE4    dd 0                    ; DATA XREF: sub_40BF14:loc_40C084↑r
.data:00413DE8 dword_413DE8    dd 0                    ; DATA XREF: sub_4076A0:loc_4076E7↑o
.data:00413DE8                                         ; sub_4076A0+4C↑w ...
.data:00413DEC dword_413DEC    dd 0                    ; DATA XREF: sub_4076A0+52↑w
.data:00413DF0                 db 0FDh ; ý
.data:00413DF1                 db    0
.data:00413DF2                 db    0
.data:00413DF3                 db    0
.data:00413DF4                 db    0
.data:00413DF5                 db    0
.data:00413DF6                 db    0
.data:00413DF7                 db    0
.data:00413DF8 dword_413DF8    dd 5Ch                  ; DATA XREF: sub_4076A0+70↑w
.data:00413DFC                 db    1
.data:00413DFD                 db    0
.data:00413DFE                 db    0
.data:00413DFF                 db    0
.data:00413E00                 db    0
.data:00413E01                 db    0
.data:00413E02                 db    0
.data:00413E03                 db    0
.data:00413E04                 db    2
.data:00413E05                 db    0
.data:00413E06                 db    0
.data:00413E07                 db    0
.data:00413E08                 db    0
.data:00413E09                 db    4
.data:00413E0A                 db    0
.data:00413E0B                 db    0
.data:00413E0C unk_413E0C      db    0                 ; DATA XREF: sub_4076A0+31↑o
.data:00413E0D                 db    0
.data:00413E0E                 db    0
.data:00413E0F                 db    0
.data:00413E10                 db    0
.data:00413E11                 db    0
.data:00413E12                 db    0
.data:00413E13                 db    0
.data:00413E14                 db    0
.data:00413E15                 db    0
.data:00413E16                 db    0
.data:00413E17                 db    0
.data:00413E18                 db    0
.data:00413E19                 db    0
.data:00413E1A                 db    0
.data:00413E1B                 db    0
.data:00413E1C                 db    0
.data:00413E1D                 db    0
.data:00413E1E                 db    0
.data:00413E1F                 db    0
.data:00413E20                 db    0
.data:00413E21                 db    0
.data:00413E22                 db    0
.data:00413E23                 db    0
.data:00413E24                 db    0
.data:00413E25                 db    0
.data:00413E26                 db    0
.data:00413E27                 db    0
.data:00413E28                 db    0
.data:00413E29                 db    0
.data:00413E2A                 db    0
.data:00413E2B                 db    0
.data:00413E2C                 db    0
.data:00413E2D                 db    0
.data:00413E2E                 db    0
.data:00413E2F                 db    0
.data:00413E30 dword_413E30    dd 0                    ; DATA XREF: SetApiTraceValues(IDataCollector *,int *):loc_40BB2F↑r
.data:00413E34                 db    0
.data:00413E35                 db    0
.data:00413E36                 db    0
.data:00413E37                 db    0
.data:00413E38                 db    0
.data:00413E39                 db    0
.data:00413E3A                 db    0
.data:00413E3B                 db    0
.data:00413E3C dword_413E3C    dd 0                    ; DATA XREF: sub_4076A0+64↑w
.data:00413E40                 db    0
.data:00413E41                 db    0
.data:00413E42                 db    0
.data:00413E43                 db    0
.data:00413E44 dword_413E44    dd 0                    ; DATA XREF: SetApiTraceValues(IDataCollector *,int *)+16E↑r
.data:00413E44                                         ; SetApiTraceValues(IDataCollector *,int *)+187↑r
.data:00413E48 dword_413E48    dd 0                    ; DATA XREF: sub_405720:loc_405767↑o
.data:00413E48                                         ; sub_405720+4C↑w ...
.data:00413E4C dword_413E4C    dd 0                    ; DATA XREF: sub_405720+52↑w
.data:00413E50                 db  6Ch ; l
.data:00413E51                 db    0
.data:00413E52                 db    0
.data:00413E53                 db    0
.data:00413E54                 db    0
.data:00413E55                 db    0
.data:00413E56                 db    0
.data:00413E57                 db    0
.data:00413E58                 db  5Ch ; \
.data:00413E59                 db    0
.data:00413E5A                 db    0
.data:00413E5B                 db    0
.data:00413E5C                 db    0
.data:00413E5D                 db    0
.data:00413E5E                 db    0
.data:00413E5F                 db    0
.data:00413E60                 db    0
.data:00413E61                 db    0
.data:00413E62                 db    0
.data:00413E63                 db    0
.data:00413E64                 db    0
.data:00413E65                 db    0
.data:00413E66                 db    0
.data:00413E67                 db    0
.data:00413E68                 db    0
.data:00413E69                 db    0
.data:00413E6A                 db    0
.data:00413E6B                 db    0
.data:00413E6C unk_413E6C      db    0                 ; DATA XREF: sub_405720+31↑o
.data:00413E6D                 db    0
.data:00413E6E                 db    0
.data:00413E6F                 db    0
.data:00413E70                 db    0
.data:00413E71                 db    0
.data:00413E72                 db    0
.data:00413E73                 db    0
.data:00413E74                 db    0
.data:00413E75                 db    0
.data:00413E76                 db    0
.data:00413E77                 db    0
.data:00413E78                 db    0
.data:00413E79                 db    0
.data:00413E7A                 db    0
.data:00413E7B                 db    0
.data:00413E7C                 db    0
.data:00413E7D                 db    0
.data:00413E7E                 db    0
.data:00413E7F                 db    0
.data:00413E80                 db    0
.data:00413E81                 db    0
.data:00413E82                 db    0
.data:00413E83                 db    0
.data:00413E84                 db    0
.data:00413E85                 db    0
.data:00413E86                 db    0
.data:00413E87                 db    0
.data:00413E88                 db    0
.data:00413E89                 db    0
.data:00413E8A                 db    0
.data:00413E8B                 db    0
.data:00413E8C                 db    0
.data:00413E8D                 db    0
.data:00413E8E                 db    0
.data:00413E8F                 db    0
.data:00413E90 dword_413E90    dd 0                    ; DATA XREF: ArgApplyRules(int)+495↑r
.data:00413E90                                         ; ArgApplyRules(int):loc_4080D0↑r ...
.data:00413E94                 db    0
.data:00413E95                 db    0
.data:00413E96                 db    0
.data:00413E97                 db    0
.data:00413E98                 db    0
.data:00413E99                 db    0
.data:00413E9A                 db    0
.data:00413E9B                 db    0
.data:00413E9C dword_413E9C    dd 0                    ; DATA XREF: sub_405720+64↑w
.data:00413EA0                 db    0
.data:00413EA1                 db    0
.data:00413EA2                 db    0
.data:00413EA3                 db    0
.data:00413EA4                 db    0
.data:00413EA5                 db    0
.data:00413EA6                 db    0
.data:00413EA7                 db    0
.data:00413EA8 dword_413EA8    dd 0                    ; DATA XREF: sub_406A20:loc_406A67↑o
.data:00413EA8                                         ; sub_406A20+4C↑w ...
.data:00413EAC dword_413EAC    dd 0                    ; DATA XREF: sub_406A20+52↑w
.data:00413EB0                 db 0A4h ; ¤
.data:00413EB1                 db    0
.data:00413EB2                 db    0
.data:00413EB3                 db    0
.data:00413EB4                 db    0
.data:00413EB5                 db    0
.data:00413EB6                 db    0
.data:00413EB7                 db    0
.data:00413EB8 dword_413EB8    dd 5Ch                  ; DATA XREF: sub_406A20+70↑w
.data:00413EBC                 db    1
.data:00413EBD                 db    0
.data:00413EBE                 db    0
.data:00413EBF                 db    0
.data:00413EC0                 db    0
.data:00413EC1                 db    0
.data:00413EC2                 db    0
.data:00413EC3                 db    0
.data:00413EC4                 db    1
.data:00413EC5                 db    0
.data:00413EC6                 db    0
.data:00413EC7                 db    0
.data:00413EC8                 db  80h ; €
.data:00413EC9                 db    0
.data:00413ECA                 db    0
.data:00413ECB                 db    0
.data:00413ECC unk_413ECC      db    0                 ; DATA XREF: sub_406A20+31↑o
.data:00413ECD                 db    0
.data:00413ECE                 db    0
.data:00413ECF                 db    0
.data:00413ED0                 db    0
.data:00413ED1                 db    0
.data:00413ED2                 db    0
.data:00413ED3                 db    0
.data:00413ED4                 db    0
.data:00413ED5                 db    0
.data:00413ED6                 db    0
.data:00413ED7                 db    0
.data:00413ED8                 db    0
.data:00413ED9                 db    0
.data:00413EDA                 db    0
.data:00413EDB                 db    0
.data:00413EDC                 db    0
.data:00413EDD                 db    0
.data:00413EDE                 db    0
.data:00413EDF                 db    0
.data:00413EE0                 db    0
.data:00413EE1                 db    0
.data:00413EE2                 db    0
.data:00413EE3                 db    0
.data:00413EE4                 db    0
.data:00413EE5                 db    0
.data:00413EE6                 db    0
.data:00413EE7                 db    0
.data:00413EE8                 db    0
.data:00413EE9                 db    0
.data:00413EEA                 db    0
.data:00413EEB                 db    0
.data:00413EEC                 db    0
.data:00413EED                 db    0
.data:00413EEE                 db    0
.data:00413EEF                 db    0
.data:00413EF0 dword_413EF0    dd 0                    ; DATA XREF: SetCounterValues(IDataCollector *,int *):loc_40A6E2↑r
.data:00413EF4                 db    0
.data:00413EF5                 db    0
.data:00413EF6                 db    0
.data:00413EF7                 db    0
.data:00413EF8                 db    0
.data:00413EF9                 db    0
.data:00413EFA                 db    0
.data:00413EFB                 db    0
.data:00413EFC dword_413EFC    dd 0                    ; DATA XREF: sub_406A20+64↑w
.data:00413F00                 db    0
.data:00413F01                 db    0
.data:00413F02                 db    0
.data:00413F03                 db    0
.data:00413F04 ; wchar_t *dword_413F04
.data:00413F04 dword_413F04    dd 0                    ; DATA XREF: SetCounterValues(IDataCollector *,int *)+294↑r
.data:00413F08 dword_413F08    dd 0                    ; DATA XREF: sub_406D20:loc_406D67↑o
.data:00413F08                                         ; sub_406D20+4C↑w ...
.data:00413F0C dword_413F0C    dd 0                    ; DATA XREF: sub_406D20+52↑w
.data:00413F10                 db 0B0h ; °
.data:00413F11                 db    0
.data:00413F12                 db    0
.data:00413F13                 db    0
.data:00413F14 dword_413F14    dd 0                    ; DATA XREF: ArgApplyRules(int)+A5D↑w
.data:00413F18 dword_413F18    dd 5Ch                  ; DATA XREF: sub_406D20+70↑w
.data:00413F1C                 db    1
.data:00413F1D                 db    0
.data:00413F1E                 db    0
.data:00413F1F                 db    0
.data:00413F20                 db    0
.data:00413F21                 db    0
.data:00413F22                 db    0
.data:00413F23                 db    0
.data:00413F24                 db    2
.data:00413F25                 db    0
.data:00413F26                 db    0
.data:00413F27                 db    0
.data:00413F28                 db  0Ch
.data:00413F29                 db    0
.data:00413F2A                 db    0
.data:00413F2B                 db    0
.data:00413F2C unk_413F2C      db    0                 ; DATA XREF: sub_406D20+31↑o
.data:00413F2D                 db    0
.data:00413F2E                 db    0
.data:00413F2F                 db    0
.data:00413F30                 db    0
.data:00413F31                 db    0
.data:00413F32                 db    0
.data:00413F33                 db    0
.data:00413F34                 db    0
.data:00413F35                 db    0
.data:00413F36                 db    0
.data:00413F37                 db    0
.data:00413F38                 db    0
.data:00413F39                 db    0
.data:00413F3A                 db    0
.data:00413F3B                 db    0
.data:00413F3C                 db    0
.data:00413F3D                 db    0
.data:00413F3E                 db    0
.data:00413F3F                 db    0
.data:00413F40                 db    0
.data:00413F41                 db    0
.data:00413F42                 db    0
.data:00413F43                 db    0
.data:00413F44                 db    0
.data:00413F45                 db    0
.data:00413F46                 db    0
.data:00413F47                 db    0
.data:00413F48                 db    0
.data:00413F49                 db    0
.data:00413F4A                 db    0
.data:00413F4B                 db    0
.data:00413F4C                 db    0
.data:00413F4D                 db    0
.data:00413F4E                 db    0
.data:00413F4F                 db    0
.data:00413F50 dword_413F50    dd 0                    ; DATA XREF: sub_40AAF8:loc_40ACB5↑r
.data:00413F50                                         ; sub_40AAF8:loc_40ADB0↑r ...
.data:00413F54 dword_413F54    dd 0                    ; DATA XREF: sub_40AAF8+1CF↑r
.data:00413F58                 db    0
.data:00413F59                 db    0
.data:00413F5A                 db    0
.data:00413F5B                 db    0
.data:00413F5C dword_413F5C    dd 0                    ; DATA XREF: sub_406D20+64↑w
.data:00413F60                 db    0
.data:00413F61                 db    0
.data:00413F62                 db    0
.data:00413F63                 db    0
.data:00413F64 dword_413F64    dd 0                    ; DATA XREF: sub_40AAF8+1C9↑r
.data:00413F68 dword_413F68    dd 0                    ; DATA XREF: sub_4078A0:loc_4078E7↑o
.data:00413F68                                         ; sub_4078A0+4C↑w ...
.data:00413F6C dword_413F6C    dd 0                    ; DATA XREF: sub_4078A0+52↑w
.data:00413F70                 db 0FAh ; ú
.data:00413F71                 db    0
.data:00413F72                 db    0
.data:00413F73                 db    0
.data:00413F74                 db    0
.data:00413F75                 db    0
.data:00413F76                 db    0
.data:00413F77                 db    0
.data:00413F78 dword_413F78    dd 5Ch                  ; DATA XREF: sub_4078A0+70↑w
.data:00413F7C                 db    1
.data:00413F7D                 db    0
.data:00413F7E                 db    0
.data:00413F7F                 db    0
.data:00413F80                 db    0
.data:00413F81                 db    0
.data:00413F82                 db    0
.data:00413F83                 db    0
.data:00413F84                 db    1
.data:00413F85                 db    0
.data:00413F86                 db    0
.data:00413F87                 db    0
.data:00413F88                 db    0
.data:00413F89                 db    4
.data:00413F8A                 db    0
.data:00413F8B                 db    0
.data:00413F8C unk_413F8C      db    0                 ; DATA XREF: sub_4078A0+31↑o
.data:00413F8D                 db    0
.data:00413F8E                 db    0
.data:00413F8F                 db    0
.data:00413F90                 db    0
.data:00413F91                 db    0
.data:00413F92                 db    0
.data:00413F93                 db    0
.data:00413F94                 db    0
.data:00413F95                 db    0
.data:00413F96                 db    0
.data:00413F97                 db    0
.data:00413F98                 db    0
.data:00413F99                 db    0
.data:00413F9A                 db    0
.data:00413F9B                 db    0
.data:00413F9C                 db    0
.data:00413F9D                 db    0
.data:00413F9E                 db    0
.data:00413F9F                 db    0
.data:00413FA0                 db    0
.data:00413FA1                 db    0
.data:00413FA2                 db    0
.data:00413FA3                 db    0
.data:00413FA4                 db    0
.data:00413FA5                 db    0
.data:00413FA6                 db    0
.data:00413FA7                 db    0
.data:00413FA8                 db    0
.data:00413FA9                 db    0
.data:00413FAA                 db    0
.data:00413FAB                 db    0
.data:00413FAC                 db    0
.data:00413FAD                 db    0
.data:00413FAE                 db    0
.data:00413FAF                 db    0
.data:00413FB0 dword_413FB0    dd 0                    ; DATA XREF: SetApiTraceValues(IDataCollector *,int *)+4D↑r
.data:00413FB4                 db    0
.data:00413FB5                 db    0
.data:00413FB6                 db    0
.data:00413FB7                 db    0
.data:00413FB8                 db    0
.data:00413FB9                 db    0
.data:00413FBA                 db    0
.data:00413FBB                 db    0
.data:00413FBC dword_413FBC    dd 0                    ; DATA XREF: sub_4078A0+64↑w
.data:00413FC0                 db    0
.data:00413FC1                 db    0
.data:00413FC2                 db    0
.data:00413FC3                 db    0
.data:00413FC4 ; OLECHAR *dword_413FC4
.data:00413FC4 dword_413FC4    dd 0                    ; DATA XREF: SetApiTraceValues(IDataCollector *,int *)+59↑r
.data:00413FC4                                         ; SetApiTraceValues(IDataCollector *,int *):loc_40BA3D↑r
.data:00413FC8 dword_413FC8    dd 0                    ; DATA XREF: sub_4062A0:loc_4062E7↑o
.data:00413FC8                                         ; sub_4062A0+4C↑w ...
.data:00413FCC dword_413FCC    dd 0                    ; DATA XREF: sub_4062A0+52↑w
.data:00413FD0                 db 0D9h ; Ù
.data:00413FD1                 db    0
.data:00413FD2                 db    0
.data:00413FD3                 db    0
.data:00413FD4                 db    0
.data:00413FD5                 db    0
.data:00413FD6                 db    0
.data:00413FD7                 db    0
.data:00413FD8 dword_413FD8    dd 5Ch                  ; DATA XREF: sub_4062A0+70↑w
.data:00413FDC                 db    1
.data:00413FDD                 db    0
.data:00413FDE                 db    0
.data:00413FDF                 db    0
.data:00413FE0                 db    0
.data:00413FE1                 db    0
.data:00413FE2                 db    0
.data:00413FE3                 db    0
.data:00413FE4                 db    2
.data:00413FE5                 db    0
.data:00413FE6                 db    0
.data:00413FE7                 db    0
.data:00413FE8                 db    8
.data:00413FE9                 db    0
.data:00413FEA                 db    0
.data:00413FEB                 db    0
.data:00413FEC unk_413FEC      db    0                 ; DATA XREF: sub_4062A0+31↑o
.data:00413FED                 db    0
.data:00413FEE                 db    0
.data:00413FEF                 db    0
.data:00413FF0                 db    0
.data:00413FF1                 db    0
.data:00413FF2                 db    0
.data:00413FF3                 db    0
.data:00413FF4                 db    0
.data:00413FF5                 db    0
.data:00413FF6                 db    0
.data:00413FF7                 db    0
.data:00413FF8                 db    0
.data:00413FF9                 db    0
.data:00413FFA                 db    0
.data:00413FFB                 db    0
.data:00413FFC                 db    0
.data:00413FFD                 db    0
.data:00413FFE                 db    0
.data:00413FFF                 db    0
.data:00414000                 db    0
.data:00414001                 db    0
.data:00414002                 db    0
.data:00414003                 db    0
.data:00414004                 db    0
.data:00414005                 db    0
.data:00414006                 db    0
.data:00414007                 db    0
.data:00414008                 db    0
.data:00414009                 db    0
.data:0041400A                 db    0
.data:0041400B                 db    0
.data:0041400C                 db    0
.data:0041400D                 db    0
.data:0041400E                 db    0
.data:0041400F                 db    0
.data:00414010 dword_414010    dd 0                    ; DATA XREF: SetSchedule(IDataCollectorSet *)+41↑r
.data:00414014                 db    0
.data:00414015                 db    0
.data:00414016                 db    0
.data:00414017                 db    0
.data:00414018                 db    0
.data:00414019                 db    0
.data:0041401A                 db    0
.data:0041401B                 db    0
.data:0041401C dword_41401C    dd 0                    ; DATA XREF: sub_4062A0+64↑w
.data:00414020                 db    0
.data:00414021                 db    0
.data:00414022                 db    0
.data:00414023                 db    0
.data:00414024 ; wchar_t *String2
.data:00414024 String2         dd 0                    ; DATA XREF: SetSchedule(IDataCollectorSet *)+4D↑r
.data:00414028 dword_414028    dd 0                    ; DATA XREF: sub_406720:loc_406767↑o
.data:00414028                                         ; sub_406720+4C↑w ...
.data:0041402C dword_41402C    dd 0                    ; DATA XREF: sub_406720+52↑w
.data:00414030                 db  93h ; “
.data:00414031                 db    0
.data:00414032                 db    0
.data:00414033                 db    0
.data:00414034                 db    0
.data:00414035                 db    0
.data:00414036                 db    0
.data:00414037                 db    0
.data:00414038 dword_414038    dd 5Ch                  ; DATA XREF: sub_406720+70↑w
.data:0041403C                 db    1
.data:0041403D                 db    0
.data:0041403E                 db    0
.data:0041403F                 db    0
.data:00414040                 db    0
.data:00414041                 db    0
.data:00414042                 db    0
.data:00414043                 db    0
.data:00414044                 db    1
.data:00414045                 db    0
.data:00414046                 db    0
.data:00414047                 db    0
.data:00414048                 db    4
.data:00414049                 db    1
.data:0041404A                 db    0
.data:0041404B                 db    0
.data:0041404C unk_41404C      db    0                 ; DATA XREF: sub_406720+31↑o
.data:0041404D                 db    0
.data:0041404E                 db    0
.data:0041404F                 db    0
.data:00414050                 db    0
.data:00414051                 db    0
.data:00414052                 db    0
.data:00414053                 db    0
.data:00414054                 db    0
.data:00414055                 db    0
.data:00414056                 db    0
.data:00414057                 db    0
.data:00414058                 db    0
.data:00414059                 db    0
.data:0041405A                 db    0
.data:0041405B                 db    0
.data:0041405C                 db    0
.data:0041405D                 db    0
.data:0041405E                 db    0
.data:0041405F                 db    0
.data:00414060                 db    0
.data:00414061                 db    0
.data:00414062                 db    0
.data:00414063                 db    0
.data:00414064                 db    0
.data:00414065                 db    0
.data:00414066                 db    0
.data:00414067                 db    0
.data:00414068                 db    0
.data:00414069                 db    0
.data:0041406A                 db    0
.data:0041406B                 db    0
.data:0041406C                 db    0
.data:0041406D                 db    0
.data:0041406E                 db    0
.data:0041406F                 db    0
.data:00414070 dword_414070    dd 0                    ; DATA XREF: sub_40BF14:loc_40BF98↑r
.data:00414074 dword_414074    dd 0                    ; DATA XREF: sub_40BF14+8D↑r
.data:00414078                 db    0
.data:00414079                 db    0
.data:0041407A                 db    0
.data:0041407B                 db    0
.data:0041407C dword_41407C    dd 0                    ; DATA XREF: sub_406720+64↑w
.data:00414080                 db    0
.data:00414081                 db    0
.data:00414082                 db    0
.data:00414083                 db    0
.data:00414084 ; wchar_t *dword_414084
.data:00414084 dword_414084    dd 0                    ; DATA XREF: sub_40BF14+9F↑r
.data:00414084                                         ; sub_40BF14+BD↑r
.data:00414088 dword_414088    dd 0                    ; DATA XREF: sub_4061A0:loc_4061E7↑o
.data:00414088                                         ; sub_4061A0+4C↑w
.data:0041408C dword_41408C    dd 0                    ; DATA XREF: sub_4061A0+52↑w
.data:00414090                 db    8
.data:00414091                 db    1
.data:00414092                 db    0
.data:00414093                 db    0
.data:00414094                 db    0
.data:00414095                 db    0
.data:00414096                 db    0
.data:00414097                 db    0
.data:00414098                 db  5Ch ; \
.data:00414099                 db    0
.data:0041409A                 db    0
.data:0041409B                 db    0
.data:0041409C                 db    1
.data:0041409D                 db    0
.data:0041409E                 db    0
.data:0041409F                 db    0
.data:004140A0                 db    0
.data:004140A1                 db    0
.data:004140A2                 db    0
.data:004140A3                 db    0
.data:004140A4                 db    0
.data:004140A5                 db    0
.data:004140A6                 db    0
.data:004140A7                 db    0
.data:004140A8                 db    0
.data:004140A9                 db    0
.data:004140AA                 db    0
.data:004140AB                 db    0
.data:004140AC unk_4140AC      db    0                 ; DATA XREF: sub_4061A0+31↑o
.data:004140AD                 db    0
.data:004140AE                 db    0
.data:004140AF                 db    0
.data:004140B0                 db    0
.data:004140B1                 db    0
.data:004140B2                 db    0
.data:004140B3                 db    0
.data:004140B4                 db    0
.data:004140B5                 db    0
.data:004140B6                 db    0
.data:004140B7                 db    0
.data:004140B8                 db    0
.data:004140B9                 db    0
.data:004140BA                 db    0
.data:004140BB                 db    0
.data:004140BC                 db    0
.data:004140BD                 db    0
.data:004140BE                 db    0
.data:004140BF                 db    0
.data:004140C0 dword_4140C0    dd 0                    ; DATA XREF: ArgApplyRules(int)+5CE↑w
.data:004140C0                                         ; ArgApplyRules(int):loc_40809A↑w
.data:004140C4                 align 10h
.data:004140D0 dword_4140D0    dd 0                    ; DATA XREF: _wmain+28A↑r
.data:004140D0                                         ; _wmain+2CF↑r ...
.data:004140D4                 db    0
.data:004140D5                 db    0
.data:004140D6                 db    0
.data:004140D7                 db    0
.data:004140D8                 db    0
.data:004140D9                 db    0
.data:004140DA                 db    0
.data:004140DB                 db    0
.data:004140DC dword_4140DC    dd 0                    ; DATA XREF: sub_4061A0+64↑w
.data:004140E0                 db    0
.data:004140E1                 db    0
.data:004140E2                 db    0
.data:004140E3                 db    0
.data:004140E4                 db    0
.data:004140E5                 db    0
.data:004140E6                 db    0
.data:004140E7                 db    0
.data:004140E8 dword_4140E8    dd 0                    ; DATA XREF: sub_405DA0:loc_405DE7↑o
.data:004140E8                                         ; sub_405DA0+4C↑w ...
.data:004140EC dword_4140EC    dd 0                    ; DATA XREF: sub_405DA0+52↑w
.data:004140F0                 db 0DFh ; ß
.data:004140F1                 db    0
.data:004140F2                 db    0
.data:004140F3                 db    0
.data:004140F4 dword_4140F4    dd 0                    ; DATA XREF: ArgApplyRules(int)+A53↑w
.data:004140F8                 db  5Ch ; \
.data:004140F9                 db    0
.data:004140FA                 db    0
.data:004140FB                 db    0
.data:004140FC                 db    0
.data:004140FD                 db    0
.data:004140FE                 db    0
.data:004140FF                 db    0
.data:00414100                 db    0
.data:00414101                 db    0
.data:00414102                 db    0
.data:00414103                 db    0
.data:00414104                 db    0
.data:00414105                 db    0
.data:00414106                 db    0
.data:00414107                 db    0
.data:00414108                 db    0
.data:00414109                 db    0
.data:0041410A                 db    0
.data:0041410B                 db    0
.data:0041410C unk_41410C      db    0                 ; DATA XREF: sub_405DA0+31↑o
.data:0041410D                 db    0
.data:0041410E                 db    0
.data:0041410F                 db    0
.data:00414110                 db    0
.data:00414111                 db    0
.data:00414112                 db    0
.data:00414113                 db    0
.data:00414114                 db    0
.data:00414115                 db    0
.data:00414116                 db    0
.data:00414117                 db    0
.data:00414118                 db    0
.data:00414119                 db    0
.data:0041411A                 db    0
.data:0041411B                 db    0
.data:0041411C                 db    0
.data:0041411D                 db    0
.data:0041411E                 db    0
.data:0041411F                 db    0
.data:00414120 dword_414120    dd 0                    ; DATA XREF: ArgApplyRules(int):loc_408115↑w
.data:00414124                 align 10h
.data:00414130 dword_414130    dd 0                    ; DATA XREF: ArgApplyRules(int)+6D0↑r
.data:00414130                                         ; _wmain+3FC↑r
.data:00414134                 db    0
.data:00414135                 db    0
.data:00414136                 db    0
.data:00414137                 db    0
.data:00414138                 db    0
.data:00414139                 db    0
.data:0041413A                 db    0
.data:0041413B                 db    0
.data:0041413C dword_41413C    dd 0                    ; DATA XREF: sub_405DA0+64↑w
.data:00414140                 db    0
.data:00414141                 db    0
.data:00414142                 db    0
.data:00414143                 db    0
.data:00414144                 db    0
.data:00414145                 db    0
.data:00414146                 db    0
.data:00414147                 db    0
.data:00414148 dword_414148    dd 0                    ; DATA XREF: sub_4065A0:loc_4065E7↑o
.data:00414148                                         ; sub_4065A0+4C↑w ...
.data:0041414C dword_41414C    dd 0                    ; DATA XREF: sub_4065A0+52↑w
.data:00414150                 db  82h ; ‚
.data:00414151                 db    0
.data:00414152                 db    0
.data:00414153                 db    0
.data:00414154                 db    0
.data:00414155                 db    0
.data:00414156                 db    0
.data:00414157                 db    0
.data:00414158                 db  5Ch ; \
.data:00414159                 db    0
.data:0041415A                 db    0
.data:0041415B                 db    0
.data:0041415C                 db    1
.data:0041415D                 db    0
.data:0041415E                 db    0
.data:0041415F                 db    0
.data:00414160                 db    0
.data:00414161                 db    0
.data:00414162                 db    0
.data:00414163                 db    0
.data:00414164                 db    0
.data:00414165                 db    0
.data:00414166                 db    0
.data:00414167                 db    0
.data:00414168                 db    4
.data:00414169                 db    0
.data:0041416A                 db    0
.data:0041416B                 db    0
.data:0041416C unk_41416C      db    0                 ; DATA XREF: sub_4065A0+31↑o
.data:0041416D                 db    0
.data:0041416E                 db    0
.data:0041416F                 db    0
.data:00414170                 db    0
.data:00414171                 db    0
.data:00414172                 db    0
.data:00414173                 db    0
.data:00414174                 db    0
.data:00414175                 db    0
.data:00414176                 db    0
.data:00414177                 db    0
.data:00414178                 db    0
.data:00414179                 db    0
.data:0041417A                 db    0
.data:0041417B                 db    0
.data:0041417C                 db    0
.data:0041417D                 db    0
.data:0041417E                 db    0
.data:0041417F                 db    0
.data:00414180                 db    0
.data:00414181                 db    0
.data:00414182                 db    0
.data:00414183                 db    0
.data:00414184                 db    0
.data:00414185                 db    0
.data:00414186                 db    0
.data:00414187                 db    0
.data:00414188                 db    0
.data:00414189                 db    0
.data:0041418A                 db    0
.data:0041418B                 db    0
.data:0041418C                 db    0
.data:0041418D                 db    0
.data:0041418E                 db    0
.data:0041418F                 db    0
.data:00414190 dword_414190    dd 0                    ; DATA XREF: SetSchedule(IDataCollectorSet *)+F0↑r
.data:00414190                                         ; SetSchedule(IDataCollectorSet *)+221↑r ...
.data:00414194 dword_414194    dd 0                    ; DATA XREF: SetSchedule(IDataCollectorSet *)+22A↑r
.data:00414194                                         ; SetSchedule(IDataCollectorSet *)+2F5↑r
.data:00414198                 db    0
.data:00414199                 db    0
.data:0041419A                 db    0
.data:0041419B                 db    0
.data:0041419C dword_41419C    dd 0                    ; DATA XREF: sub_4065A0+64↑w
.data:004141A0                 db    0
.data:004141A1                 db    0
.data:004141A2                 db    0
.data:004141A3                 db    0
.data:004141A4                 db    0
.data:004141A5                 db    0
.data:004141A6                 db    0
.data:004141A7                 db    0
.data:004141A8 dword_4141A8    dd 0                    ; DATA XREF: sub_4077A0:loc_4077E7↑o
.data:004141A8                                         ; sub_4077A0+4C↑w ...
.data:004141AC dword_4141AC    dd 0                    ; DATA XREF: sub_4077A0+52↑w
.data:004141B0                 db 0FBh ; û
.data:004141B1                 db    0
.data:004141B2                 db    0
.data:004141B3                 db    0
.data:004141B4                 db    0
.data:004141B5                 db    0
.data:004141B6                 db    0
.data:004141B7                 db    0
.data:004141B8                 db  5Ch ; \
.data:004141B9                 db    0
.data:004141BA                 db    0
.data:004141BB                 db    0
.data:004141BC                 db    1
.data:004141BD                 db    0
.data:004141BE                 db    0
.data:004141BF                 db    0
.data:004141C0                 db    0
.data:004141C1                 db    0
.data:004141C2                 db    0
.data:004141C3                 db    0
.data:004141C4                 db    0
.data:004141C5                 db    0
.data:004141C6                 db    0
.data:004141C7                 db    0
.data:004141C8                 db    4
.data:004141C9                 db    4
.data:004141CA                 db    0
.data:004141CB                 db    0
.data:004141CC unk_4141CC      db    0                 ; DATA XREF: sub_4077A0+31↑o
.data:004141CD                 db    0
.data:004141CE                 db    0
.data:004141CF                 db    0
.data:004141D0                 db    0
.data:004141D1                 db    0
.data:004141D2                 db    0
.data:004141D3                 db    0
.data:004141D4                 db    0
.data:004141D5                 db    0
.data:004141D6                 db    0
.data:004141D7                 db    0
.data:004141D8                 db    0
.data:004141D9                 db    0
.data:004141DA                 db    0
.data:004141DB                 db    0
.data:004141DC                 db    0
.data:004141DD                 db    0
.data:004141DE                 db    0
.data:004141DF                 db    0
.data:004141E0                 db    0
.data:004141E1                 db    0
.data:004141E2                 db    0
.data:004141E3                 db    0
.data:004141E4                 db    0
.data:004141E5                 db    0
.data:004141E6                 db    0
.data:004141E7                 db    0
.data:004141E8                 db    0
.data:004141E9                 db    0
.data:004141EA                 db    0
.data:004141EB                 db    0
.data:004141EC                 db    0
.data:004141ED                 db    0
.data:004141EE                 db    0
.data:004141EF                 db    0
.data:004141F0 dword_4141F0    dd 0                    ; DATA XREF: SetApiTraceValues(IDataCollector *,int *):loc_40BA7D↑r
.data:004141F4 dword_4141F4    dd 0                    ; DATA XREF: SetApiTraceValues(IDataCollector *,int *)+C0↑r
.data:004141F8                 db    0
.data:004141F9                 db    0
.data:004141FA                 db    0
.data:004141FB                 db    0
.data:004141FC dword_4141FC    dd 0                    ; DATA XREF: sub_4077A0+64↑w
.data:00414200                 db    0
.data:00414201                 db    0
.data:00414202                 db    0
.data:00414203                 db    0
.data:00414204                 db    0
.data:00414205                 db    0
.data:00414206                 db    0
.data:00414207                 db    0
.data:00414208 dword_414208    dd 0                    ; DATA XREF: sub_4071A0:loc_4071E7↑o
.data:00414208                                         ; sub_4071A0+4C↑w ...
.data:0041420C dword_41420C    dd 0                    ; DATA XREF: sub_4071A0+52↑w
.data:00414210                 db 0EEh ; î
.data:00414211                 db    0
.data:00414212                 db    0
.data:00414213                 db    0
.data:00414214                 db    0
.data:00414215                 db    0
.data:00414216                 db    0
.data:00414217                 db    0
.data:00414218                 db  5Ch ; \
.data:00414219                 db    0
.data:0041421A                 db    0
.data:0041421B                 db    0
.data:0041421C                 db    1
.data:0041421D                 db    0
.data:0041421E                 db    0
.data:0041421F                 db    0
.data:00414220                 db    0
.data:00414221                 db    0
.data:00414222                 db    0
.data:00414223                 db    0
.data:00414224                 db    0
.data:00414225                 db    0
.data:00414226                 db    0
.data:00414227                 db    0
.data:00414228                 db    4
.data:00414229                 db    0
.data:0041422A                 db    0
.data:0041422B                 db    0
.data:0041422C unk_41422C      db    0                 ; DATA XREF: sub_4071A0+31↑o
.data:0041422D                 db    0
.data:0041422E                 db    0
.data:0041422F                 db    0
.data:00414230                 db    0
.data:00414231                 db    0
.data:00414232                 db    0
.data:00414233                 db    0
.data:00414234                 db    0
.data:00414235                 db    0
.data:00414236                 db    0
.data:00414237                 db    0
.data:00414238                 db    0
.data:00414239                 db    0
.data:0041423A                 db    0
.data:0041423B                 db    0
.data:0041423C                 db    0
.data:0041423D                 db    0
.data:0041423E                 db    0
.data:0041423F                 db    0
.data:00414240                 db    0
.data:00414241                 db    0
.data:00414242                 db    0
.data:00414243                 db    0
.data:00414244                 db    0
.data:00414245                 db    0
.data:00414246                 db    0
.data:00414247                 db    0
.data:00414248                 db    0
.data:00414249                 db    0
.data:0041424A                 db    0
.data:0041424B                 db    0
.data:0041424C                 db    0
.data:0041424D                 db    0
.data:0041424E                 db    0
.data:0041424F                 db    0
.data:00414250 dword_414250    dd 0                    ; DATA XREF: sub_40B60B:loc_40B6D5↑r
.data:00414254 dword_414254    dd 0                    ; DATA XREF: sub_40B60B+DF↑r
.data:00414258                 db    0
.data:00414259                 db    0
.data:0041425A                 db    0
.data:0041425B                 db    0
.data:0041425C dword_41425C    dd 0                    ; DATA XREF: sub_4071A0+64↑w
.data:00414260                 db    0
.data:00414261                 db    0
.data:00414262                 db    0
.data:00414263                 db    0
.data:00414264                 db    0
.data:00414265                 db    0
.data:00414266                 db    0
.data:00414267                 db    0
.data:00414268 dword_414268    dd 0                    ; DATA XREF: sub_4057A0:loc_4057E7↑o
.data:00414268                                         ; sub_4057A0+4C↑w ...
.data:0041426C dword_41426C    dd 0                    ; DATA XREF: sub_4057A0+52↑w
.data:00414270                 db  76h ; v
.data:00414271                 db    0
.data:00414272                 db    0
.data:00414273                 db    0
.data:00414274                 db    0
.data:00414275                 db    0
.data:00414276                 db    0
.data:00414277                 db    0
.data:00414278                 db  5Ch ; \
.data:00414279                 db    0
.data:0041427A                 db    0
.data:0041427B                 db    0
.data:0041427C                 db    0
.data:0041427D                 db    0
.data:0041427E                 db    0
.data:0041427F                 db    0
.data:00414280                 db    0
.data:00414281                 db    0
.data:00414282                 db    0
.data:00414283                 db    0
.data:00414284                 db    0
.data:00414285                 db    0
.data:00414286                 db    0
.data:00414287                 db    0
.data:00414288                 db    0
.data:00414289                 db    0
.data:0041428A                 db    0
.data:0041428B                 db    0
.data:0041428C unk_41428C      db    0                 ; DATA XREF: sub_4057A0+31↑o
.data:0041428D                 db    0
.data:0041428E                 db    0
.data:0041428F                 db    0
.data:00414290                 db    0
.data:00414291                 db    0
.data:00414292                 db    0
.data:00414293                 db    0
.data:00414294                 db    0
.data:00414295                 db    0
.data:00414296                 db    0
.data:00414297                 db    0
.data:00414298                 db    0
.data:00414299                 db    0
.data:0041429A                 db    0
.data:0041429B                 db    0
.data:0041429C                 db    0
.data:0041429D                 db    0
.data:0041429E                 db    0
.data:0041429F                 db    0
.data:004142A0                 db    0
.data:004142A1                 db    0
.data:004142A2                 db    0
.data:004142A3                 db    0
.data:004142A4                 db    0
.data:004142A5                 db    0
.data:004142A6                 db    0
.data:004142A7                 db    0
.data:004142A8                 db    0
.data:004142A9                 db    0
.data:004142AA                 db    0
.data:004142AB                 db    0
.data:004142AC                 db    0
.data:004142AD                 db    0
.data:004142AE                 db    0
.data:004142AF                 db    0
.data:004142B0 dword_4142B0    dd 0                    ; DATA XREF: ArgApplyRules(int)+49D↑r
.data:004142B0                                         ; ArgApplyRules(int)+4D5↑w ...
.data:004142B4                 db    0
.data:004142B5                 db    0
.data:004142B6                 db    0
.data:004142B7                 db    0
.data:004142B8                 db    0
.data:004142B9                 db    0
.data:004142BA                 db    0
.data:004142BB                 db    0
.data:004142BC dword_4142BC    dd 0                    ; DATA XREF: sub_4057A0+64↑w
.data:004142C0                 db    0
.data:004142C1                 db    0
.data:004142C2                 db    0
.data:004142C3                 db    0
.data:004142C4                 db    0
.data:004142C5                 db    0
.data:004142C6                 db    0
.data:004142C7                 db    0
.data:004142C8 dword_4142C8    dd 0                    ; DATA XREF: sub_407820:loc_407867↑o
.data:004142C8                                         ; sub_407820+4C↑w ...
.data:004142CC dword_4142CC    dd 0                    ; DATA XREF: sub_407820+52↑w
.data:004142D0                 db    7
.data:004142D1                 db    1
.data:004142D2                 db    0
.data:004142D3                 db    0
.data:004142D4                 db    0
.data:004142D5                 db    0
.data:004142D6                 db    0
.data:004142D7                 db    0
.data:004142D8                 db  5Ch ; \
.data:004142D9                 db    0
.data:004142DA                 db    0
.data:004142DB                 db    0
.data:004142DC                 db    1
.data:004142DD                 db    0
.data:004142DE                 db    0
.data:004142DF                 db    0
.data:004142E0                 db    0
.data:004142E1                 db    0
.data:004142E2                 db    0
.data:004142E3                 db    0
.data:004142E4                 db    0
.data:004142E5                 db    0
.data:004142E6                 db    0
.data:004142E7                 db    0
.data:004142E8                 db    4
.data:004142E9                 db    4
.data:004142EA                 db    0
.data:004142EB                 db    0
.data:004142EC unk_4142EC      db    0                 ; DATA XREF: sub_407820+31↑o
.data:004142ED                 db    0
.data:004142EE                 db    0
.data:004142EF                 db    0
.data:004142F0                 db    0
.data:004142F1                 db    0
.data:004142F2                 db    0
.data:004142F3                 db    0
.data:004142F4                 db    0
.data:004142F5                 db    0
.data:004142F6                 db    0
.data:004142F7                 db    0
.data:004142F8                 db    0
.data:004142F9                 db    0
.data:004142FA                 db    0
.data:004142FB                 db    0
.data:004142FC                 db    0
.data:004142FD                 db    0
.data:004142FE                 db    0
.data:004142FF                 db    0
.data:00414300                 db    0
.data:00414301                 db    0
.data:00414302                 db    0
.data:00414303                 db    0
.data:00414304                 db    0
.data:00414305                 db    0
.data:00414306                 db    0
.data:00414307                 db    0
.data:00414308                 db    0
.data:00414309                 db    0
.data:0041430A                 db    0
.data:0041430B                 db    0
.data:0041430C                 db    0
.data:0041430D                 db    0
.data:0041430E                 db    0
.data:0041430F                 db    0
.data:00414310 dword_414310    dd 0                    ; DATA XREF: SetApiTraceValues(IDataCollector *,int *):loc_40BAB2↑r
.data:00414314 dword_414314    dd 0                    ; DATA XREF: SetApiTraceValues(IDataCollector *,int *)+F5↑r
.data:00414318                 db    0
.data:00414319                 db    0
.data:0041431A                 db    0
.data:0041431B                 db    0
.data:0041431C dword_41431C    dd 0                    ; DATA XREF: sub_407820+64↑w
.data:00414320                 db    0
.data:00414321                 db    0
.data:00414322                 db    0
.data:00414323                 db    0
.data:00414324                 db    0
.data:00414325                 db    0
.data:00414326                 db    0
.data:00414327                 db    0
.data:00414328 dword_414328    dd 0                    ; DATA XREF: sub_406B20:loc_406B67↑o
.data:00414328                                         ; sub_406B20+4C↑w ...
.data:0041432C dword_41432C    dd 0                    ; DATA XREF: sub_406B20+52↑w
.data:00414330                 db    1
.data:00414331                 db    1
.data:00414332                 db    0
.data:00414333                 db    0
.data:00414334                 db    0
.data:00414335                 db    0
.data:00414336                 db    0
.data:00414337                 db    0
.data:00414338 dword_414338    dd 5Ch                  ; DATA XREF: sub_406B20+70↑w
.data:0041433C                 db    1
.data:0041433D                 db    0
.data:0041433E                 db    0
.data:0041433F                 db    0
.data:00414340                 db    0
.data:00414341                 db    0
.data:00414342                 db    0
.data:00414343                 db    0
.data:00414344                 db    5
.data:00414345                 db    0
.data:00414346                 db    0
.data:00414347                 db    0
.data:00414348                 db    0
.data:00414349                 db    0
.data:0041434A                 db    0
.data:0041434B                 db    0
.data:0041434C unk_41434C      db    0                 ; DATA XREF: sub_406B20+31↑o
.data:0041434D                 db    0
.data:0041434E                 db    0
.data:0041434F                 db    0
.data:00414350                 db    0
.data:00414351                 db    0
.data:00414352                 db    0
.data:00414353                 db    0
.data:00414354                 db    0
.data:00414355                 db    0
.data:00414356                 db    0
.data:00414357                 db    0
.data:00414358                 db    0
.data:00414359                 db    0
.data:0041435A                 db    0
.data:0041435B                 db    0
.data:0041435C                 db    0
.data:0041435D                 db    0
.data:0041435E                 db    0
.data:0041435F                 db    0
.data:00414360                 db    0
.data:00414361                 db    0
.data:00414362                 db    0
.data:00414363                 db    0
.data:00414364                 db    0
.data:00414365                 db    0
.data:00414366                 db    0
.data:00414367                 db    0
.data:00414368                 db    0
.data:00414369                 db    0
.data:0041436A                 db    0
.data:0041436B                 db    0
.data:0041436C                 db    0
.data:0041436D                 db    0
.data:0041436E                 db    0
.data:0041436F                 db    0
.data:00414370 dword_414370    dd 0                    ; DATA XREF: SetCounterValues(IDataCollector *,int *)+40↑r
.data:00414374                 db    0
.data:00414375                 db    0
.data:00414376                 db    0
.data:00414377                 db    0
.data:00414378                 db    0
.data:00414379                 db    0
.data:0041437A                 db    0
.data:0041437B                 db    0
.data:0041437C dword_41437C    dd 0                    ; DATA XREF: sub_406B20+64↑w
.data:00414380                 db    0
.data:00414381                 db    0
.data:00414382                 db    0
.data:00414383                 db    0
.data:00414384 dword_414384    dd 0                    ; DATA XREF: SetCounterValues(IDataCollector *,int *)+4B↑r
.data:00414388 dword_414388    dd 0                    ; DATA XREF: sub_405CA0:loc_405CE7↑o
.data:00414388                                         ; sub_405CA0+4C↑w ...
.data:0041438C dword_41438C    dd 0                    ; DATA XREF: sub_405CA0+52↑w
.data:00414390                 db 0E2h ; â
.data:00414391                 db    0
.data:00414392                 db    0
.data:00414393                 db    0
.data:00414394 dword_414394    dd 0                    ; DATA XREF: ArgApplyRules(int)+A03↑w
.data:00414398                 db  5Ch ; \
.data:00414399                 db    0
.data:0041439A                 db    0
.data:0041439B                 db    0
.data:0041439C                 db    0
.data:0041439D                 db    0
.data:0041439E                 db    0
.data:0041439F                 db    0
.data:004143A0                 db    0
.data:004143A1                 db    0
.data:004143A2                 db    0
.data:004143A3                 db    0
.data:004143A4                 db    0
.data:004143A5                 db    0
.data:004143A6                 db    0
.data:004143A7                 db    0
.data:004143A8                 db    0
.data:004143A9                 db    0
.data:004143AA                 db    0
.data:004143AB                 db    0
.data:004143AC unk_4143AC      db    0                 ; DATA XREF: sub_405CA0+31↑o
.data:004143AD                 db    0
.data:004143AE                 db    0
.data:004143AF                 db    0
.data:004143B0                 db    0
.data:004143B1                 db    0
.data:004143B2                 db    0
.data:004143B3                 db    0
.data:004143B4                 db    0
.data:004143B5                 db    0
.data:004143B6                 db    0
.data:004143B7                 db    0
.data:004143B8                 db    0
.data:004143B9                 db    0
.data:004143BA                 db    0
.data:004143BB                 db    0
.data:004143BC                 db    0
.data:004143BD                 db    0
.data:004143BE                 db    0
.data:004143BF                 db    0
.data:004143C0 dword_4143C0    dd 0                    ; DATA XREF: ArgApplyRules(int)+969↑r
.data:004143C4                 align 10h
.data:004143D0 dword_4143D0    dd 0                    ; DATA XREF: ArgApplyRules(int)+753↑r
.data:004143D0                                         ; ArgApplyRules(int):loc_4083D0↑r ...
.data:004143D4                 db    0
.data:004143D5                 db    0
.data:004143D6                 db    0
.data:004143D7                 db    0
.data:004143D8                 db    0
.data:004143D9                 db    0
.data:004143DA                 db    0
.data:004143DB                 db    0
.data:004143DC dword_4143DC    dd 0                    ; DATA XREF: sub_405CA0+64↑w
.data:004143E0                 db    0
.data:004143E1                 db    0
.data:004143E2                 db    0
.data:004143E3                 db    0
.data:004143E4                 db    0
.data:004143E5                 db    0
.data:004143E6                 db    0
.data:004143E7                 db    0
.data:004143E8 dword_4143E8    dd 0                    ; DATA XREF: sub_406520:loc_406567↑o
.data:004143E8                                         ; sub_406520+4C↑w ...
.data:004143EC dword_4143EC    dd 0                    ; DATA XREF: sub_406520+52↑w
.data:004143F0                 db  89h ; ‰
.data:004143F1                 db    0
.data:004143F2                 db    0
.data:004143F3                 db    0
.data:004143F4                 db    0
.data:004143F5                 db    0
.data:004143F6                 db    0
.data:004143F7                 db    0
.data:004143F8 dword_4143F8    dd 5Ch                  ; DATA XREF: sub_406520+70↑w
.data:004143FC                 db    1
.data:004143FD                 db    0
.data:004143FE                 db    0
.data:004143FF                 db    0
.data:00414400                 db    0
.data:00414401                 db    0
.data:00414402                 db    0
.data:00414403                 db    0
.data:00414404                 db    1
.data:00414405                 db    0
.data:00414406                 db    0
.data:00414407                 db    0
.data:00414408                 db    0
.data:00414409                 db    0
.data:0041440A                 db    0
.data:0041440B                 db    0
.data:0041440C unk_41440C      db    0                 ; DATA XREF: sub_406520+31↑o
.data:0041440D                 db    0
.data:0041440E                 db    0
.data:0041440F                 db    0
.data:00414410                 db    0
.data:00414411                 db    0
.data:00414412                 db    0
.data:00414413                 db    0
.data:00414414                 db    0
.data:00414415                 db    0
.data:00414416                 db    0
.data:00414417                 db    0
.data:00414418                 db    0
.data:00414419                 db    0
.data:0041441A                 db    0
.data:0041441B                 db    0
.data:0041441C                 db    0
.data:0041441D                 db    0
.data:0041441E                 db    0
.data:0041441F                 db    0
.data:00414420                 db    0
.data:00414421                 db    0
.data:00414422                 db    0
.data:00414423                 db    0
.data:00414424                 db    0
.data:00414425                 db    0
.data:00414426                 db    0
.data:00414427                 db    0
.data:00414428                 db    0
.data:00414429                 db    0
.data:0041442A                 db    0
.data:0041442B                 db    0
.data:0041442C                 db    0
.data:0041442D                 db    0
.data:0041442E                 db    0
.data:0041442F                 db    0
.data:00414430 dword_414430    dd 0                    ; DATA XREF: SetCounterValues(IDataCollector *,int *)+173↑r
.data:00414430                                         ; SetTraceValues(IDataCollector *)+E5↑r ...
.data:00414434                 db    0
.data:00414435                 db    0
.data:00414436                 db    0
.data:00414437                 db    0
.data:00414438                 db    0
.data:00414439                 db    0
.data:0041443A                 db    0
.data:0041443B                 db    0
.data:0041443C dword_41443C    dd 0                    ; DATA XREF: sub_406520+64↑w
.data:00414440                 db    0
.data:00414441                 db    0
.data:00414442                 db    0
.data:00414443                 db    0
.data:00414444 ; LPCWSTR lpFileName
.data:00414444 lpFileName      dd 0                    ; DATA XREF: SetCounterValues(IDataCollector *,int *)+183↑r
.data:00414444                                         ; SetCounterValues(IDataCollector *,int *)+198↑r ...
.data:00414448 dword_414448    dd 0                    ; DATA XREF: sub_406320:loc_406367↑o
.data:00414448                                         ; sub_406320+4C↑w ...
.data:0041444C dword_41444C    dd 0                    ; DATA XREF: sub_406320+52↑w
.data:00414450                 db 0CEh ; Î
.data:00414451                 db    0
.data:00414452                 db    0
.data:00414453                 db    0
.data:00414454                 db    0
.data:00414455                 db    0
.data:00414456                 db    0
.data:00414457                 db    0
.data:00414458 dword_414458    dd 5Ch                  ; DATA XREF: sub_406320+70↑w
.data:0041445C                 db    1
.data:0041445D                 db    0
.data:0041445E                 db    0
.data:0041445F                 db    0
.data:00414460                 db    0
.data:00414461                 db    0
.data:00414462                 db    0
.data:00414463                 db    0
.data:00414464                 db    3
.data:00414465                 db    0
.data:00414466                 db    0
.data:00414467                 db    0
.data:00414468                 db    0
.data:00414469                 db    0
.data:0041446A                 db    0
.data:0041446B                 db    0
.data:0041446C unk_41446C      db    0                 ; DATA XREF: sub_406320+31↑o
.data:0041446D                 db    0
.data:0041446E                 db    0
.data:0041446F                 db    0
.data:00414470                 db    0
.data:00414471                 db    0
.data:00414472                 db    0
.data:00414473                 db    0
.data:00414474                 db    0
.data:00414475                 db    0
.data:00414476                 db    0
.data:00414477                 db    0
.data:00414478                 db    0
.data:00414479                 db    0
.data:0041447A                 db    0
.data:0041447B                 db    0
.data:0041447C                 db    0
.data:0041447D                 db    0
.data:0041447E                 db    0
.data:0041447F                 db    0
.data:00414480                 db    0
.data:00414481                 db    0
.data:00414482                 db    0
.data:00414483                 db    0
.data:00414484                 db    0
.data:00414485                 db    0
.data:00414486                 db    0
.data:00414487                 db    0
.data:00414488                 db    0
.data:00414489                 db    0
.data:0041448A                 db    0
.data:0041448B                 db    0
.data:0041448C                 db    0
.data:0041448D                 db    0
.data:0041448E                 db    0
.data:0041448F                 db    0
.data:00414490 dword_414490    dd 0                    ; DATA XREF: SetSchedule(IDataCollectorSet *)+E7↑r
.data:00414490                                         ; SetSchedule(IDataCollectorSet *):loc_409C30↑r
.data:00414494                 db    0
.data:00414495                 db    0
.data:00414496                 db    0
.data:00414497                 db    0
.data:00414498                 db    0
.data:00414499                 db    0
.data:0041449A                 db    0
.data:0041449B                 db    0
.data:0041449C dword_41449C    dd 0                    ; DATA XREF: sub_406320+64↑w
.data:004144A0                 db    0
.data:004144A1                 db    0
.data:004144A2                 db    0
.data:004144A3                 db    0
.data:004144A4                 db    0
.data:004144A5                 db    0
.data:004144A6                 db    0
.data:004144A7                 db    0
.data:004144A8                 db    0
.data:004144A9                 db    0
.data:004144AA                 db    0
.data:004144AB                 db    0
.data:004144AC word_4144AC     dw 0                    ; DATA XREF: SetSchedule(IDataCollectorSet *)+2B6↑r
.data:004144AE word_4144AE     dw 0                    ; DATA XREF: SetSchedule(IDataCollectorSet *)+2C0↑r
.data:004144B0 word_4144B0     dw 0                    ; DATA XREF: SetSchedule(IDataCollectorSet *)+2C9↑r
.data:004144B2                 align 8
.data:004144B8 dword_4144B8    dd 0                    ; DATA XREF: sub_407720:loc_407767↑o
.data:004144B8                                         ; sub_407720+4C↑w ...
.data:004144BC dword_4144BC    dd 0                    ; DATA XREF: sub_407720+52↑w
.data:004144C0                 db 0FEh ; þ
.data:004144C1                 db    0
.data:004144C2                 db    0
.data:004144C3                 db    0
.data:004144C4                 db    0
.data:004144C5                 db    0
.data:004144C6                 db    0
.data:004144C7                 db    0
.data:004144C8 dword_4144C8    dd 5Ch                  ; DATA XREF: sub_407720+70↑w
.data:004144CC                 db    1
.data:004144CD                 db    0
.data:004144CE                 db    0
.data:004144CF                 db    0
.data:004144D0                 db    0
.data:004144D1                 db    0
.data:004144D2                 db    0
.data:004144D3                 db    0
.data:004144D4                 db    2
.data:004144D5                 db    0
.data:004144D6                 db    0
.data:004144D7                 db    0
.data:004144D8                 db    0
.data:004144D9                 db    4
.data:004144DA                 db    0
.data:004144DB                 db    0
.data:004144DC unk_4144DC      db    0                 ; DATA XREF: sub_407720+31↑o
.data:004144DD                 db    0
.data:004144DE                 db    0
.data:004144DF                 db    0
.data:004144E0                 db    0
.data:004144E1                 db    0
.data:004144E2                 db    0
.data:004144E3                 db    0
.data:004144E4                 db    0
.data:004144E5                 db    0
.data:004144E6                 db    0
.data:004144E7                 db    0
.data:004144E8                 db    0
.data:004144E9                 db    0
.data:004144EA                 db    0
.data:004144EB                 db    0
.data:004144EC                 db    0
.data:004144ED                 db    0
.data:004144EE                 db    0
.data:004144EF                 db    0
.data:004144F0                 db    0
.data:004144F1                 db    0
.data:004144F2                 db    0
.data:004144F3                 db    0
.data:004144F4                 db    0
.data:004144F5                 db    0
.data:004144F6                 db    0
.data:004144F7                 db    0
.data:004144F8                 db    0
.data:004144F9                 db    0
.data:004144FA                 db    0
.data:004144FB                 db    0
.data:004144FC                 db    0
.data:004144FD                 db    0
.data:004144FE                 db    0
.data:004144FF                 db    0
.data:00414500 dword_414500    dd 0                    ; DATA XREF: SetApiTraceValues(IDataCollector *,int *):loc_40BB8D↑r
.data:00414504                 db    0
.data:00414505                 db    0
.data:00414506                 db    0
.data:00414507                 db    0
.data:00414508                 db    0
.data:00414509                 db    0
.data:0041450A                 db    0
.data:0041450B                 db    0
.data:0041450C dword_41450C    dd 0                    ; DATA XREF: sub_407720+64↑w
.data:00414510                 db    0
.data:00414511                 db    0
.data:00414512                 db    0
.data:00414513                 db    0
.data:00414514 dword_414514    dd 0                    ; DATA XREF: SetApiTraceValues(IDataCollector *,int *)+1CC↑r
.data:00414514                                         ; SetApiTraceValues(IDataCollector *,int *)+1E5↑r
.data:00414518 dword_414518    dd 0                    ; DATA XREF: sub_406FA0:loc_406FE7↑o
.data:00414518                                         ; sub_406FA0+4C↑w ...
.data:0041451C dword_41451C    dd 0                    ; DATA XREF: sub_406FA0+52↑w
.data:00414520                 db 0BFh ; ¿
.data:00414521                 db    0
.data:00414522                 db    0
.data:00414523                 db    0
.data:00414524                 db    0
.data:00414525                 db    0
.data:00414526                 db    0
.data:00414527                 db    0
.data:00414528 dword_414528    dd 5Ch                  ; DATA XREF: sub_406FA0+70↑w
.data:0041452C                 db    1
.data:0041452D                 db    0
.data:0041452E                 db    0
.data:0041452F                 db    0
.data:00414530                 db    0
.data:00414531                 db    0
.data:00414532                 db    0
.data:00414533                 db    0
.data:00414534                 db    2
.data:00414535                 db    0
.data:00414536                 db    0
.data:00414537                 db    0
.data:00414538                 db    8
.data:00414539                 db    0
.data:0041453A                 db    0
.data:0041453B                 db    0
.data:0041453C unk_41453C      db    0                 ; DATA XREF: sub_406FA0+31↑o
.data:0041453D                 db    0
.data:0041453E                 db    0
.data:0041453F                 db    0
.data:00414540                 db    0
.data:00414541                 db    0
.data:00414542                 db    0
.data:00414543                 db    0
.data:00414544                 db    0
.data:00414545                 db    0
.data:00414546                 db    0
.data:00414547                 db    0
.data:00414548                 db    0
.data:00414549                 db    0
.data:0041454A                 db    0
.data:0041454B                 db    0
.data:0041454C                 db    0
.data:0041454D                 db    0
.data:0041454E                 db    0
.data:0041454F                 db    0
.data:00414550                 db    0
.data:00414551                 db    0
.data:00414552                 db    0
.data:00414553                 db    0
.data:00414554                 db    0
.data:00414555                 db    0
.data:00414556                 db    0
.data:00414557                 db    0
.data:00414558                 db    0
.data:00414559                 db    0
.data:0041455A                 db    0
.data:0041455B                 db    0
.data:0041455C                 db    0
.data:0041455D                 db    0
.data:0041455E                 db    0
.data:0041455F                 db    0
.data:00414560 dword_414560    dd 0                    ; DATA XREF: SetTraceValues(IDataCollector *):loc_40B4C4↑r
.data:00414564                 db    0
.data:00414565                 db    0
.data:00414566                 db    0
.data:00414567                 db    0
.data:00414568                 db    0
.data:00414569                 db    0
.data:0041456A                 db    0
.data:0041456B                 db    0
.data:0041456C dword_41456C    dd 0                    ; DATA XREF: sub_406FA0+64↑w
.data:00414570                 db    0
.data:00414571                 db    0
.data:00414572                 db    0
.data:00414573                 db    0
.data:00414574 ; wchar_t *String
.data:00414574 String          dd 0                    ; DATA XREF: SetTraceValues(IDataCollector *)+274↑r
.data:00414578 dword_414578    dd 0                    ; DATA XREF: sub_406220:loc_406267↑o
.data:00414578                                         ; sub_406220+4C↑w ...
.data:0041457C dword_41457C    dd 0                    ; DATA XREF: sub_406220+52↑w
.data:00414580                 db 0CAh ; Ê
.data:00414581                 db    0
.data:00414582                 db    0
.data:00414583                 db    0
.data:00414584                 db    0
.data:00414585                 db    0
.data:00414586                 db    0
.data:00414587                 db    0
.data:00414588 dword_414588    dd 5Ch                  ; DATA XREF: sub_406220+70↑w
.data:0041458C                 db    1
.data:0041458D                 db    0
.data:0041458E                 db    0
.data:0041458F                 db    0
.data:00414590                 db    0
.data:00414591                 db    0
.data:00414592                 db    0
.data:00414593                 db    0
.data:00414594                 db    2
.data:00414595                 db    0
.data:00414596                 db    0
.data:00414597                 db    0
.data:00414598                 db  0Ch
.data:00414599                 db    1
.data:0041459A                 db    0
.data:0041459B                 db    0
.data:0041459C unk_41459C      db    0                 ; DATA XREF: sub_406220+31↑o
.data:0041459D                 db    0
.data:0041459E                 db    0
.data:0041459F                 db    0
.data:004145A0                 db    0
.data:004145A1                 db    0
.data:004145A2                 db    0
.data:004145A3                 db    0
.data:004145A4                 db    0
.data:004145A5                 db    0
.data:004145A6                 db    0
.data:004145A7                 db    0
.data:004145A8                 db    0
.data:004145A9                 db    0
.data:004145AA                 db    0
.data:004145AB                 db    0
.data:004145AC                 db    0
.data:004145AD                 db    0
.data:004145AE                 db    0
.data:004145AF                 db    0
.data:004145B0 dword_4145B0    dd 0                    ; DATA XREF: ArgApplyRules(int):loc_4080C6↑w
.data:004145B4                 align 10h
.data:004145C0 dword_4145C0    dd 0                    ; DATA XREF: _wmain+34A↑w
.data:004145C0                                         ; sub_4096BC+1E↑r
.data:004145C4 dword_4145C4    dd 0                    ; DATA XREF: sub_4096BC+2A↑r
.data:004145C8                 db    0
.data:004145C9                 db    0
.data:004145CA                 db    0
.data:004145CB                 db    0
.data:004145CC dword_4145CC    dd 0                    ; DATA XREF: sub_406220+64↑w
.data:004145D0                 db    0
.data:004145D1                 db    0
.data:004145D2                 db    0
.data:004145D3                 db    0
.data:004145D4 ; OLECHAR *dword_4145D4
.data:004145D4 dword_4145D4    dd 0                    ; DATA XREF: _wmain+35B↑w
.data:004145D4                                         ; _wmain+38B↑r ...
.data:004145D8 dword_4145D8    dd 0                    ; DATA XREF: sub_4066A0:loc_4066E7↑o
.data:004145D8                                         ; sub_4066A0+4C↑w ...
.data:004145DC dword_4145DC    dd 0                    ; DATA XREF: sub_4066A0+52↑w
.data:004145E0                 db    4
.data:004145E1                 db    1
.data:004145E2                 db    0
.data:004145E3                 db    0
.data:004145E4                 db    0
.data:004145E5                 db    0
.data:004145E6                 db    0
.data:004145E7                 db    0
.data:004145E8                 db  5Ch ; \
.data:004145E9                 db    0
.data:004145EA                 db    0
.data:004145EB                 db    0
.data:004145EC                 db    1
.data:004145ED                 db    0
.data:004145EE                 db    0
.data:004145EF                 db    0
.data:004145F0                 db    0
.data:004145F1                 db    0
.data:004145F2                 db    0
.data:004145F3                 db    0
.data:004145F4                 db    0
.data:004145F5                 db    0
.data:004145F6                 db    0
.data:004145F7                 db    0
.data:004145F8                 db    4
.data:004145F9                 db    0
.data:004145FA                 db    0
.data:004145FB                 db    0
.data:004145FC unk_4145FC      db    0                 ; DATA XREF: sub_4066A0+31↑o
.data:004145FD                 db    0
.data:004145FE                 db    0
.data:004145FF                 db    0
.data:00414600                 db    0
.data:00414601                 db    0
.data:00414602                 db    0
.data:00414603                 db    0
.data:00414604                 db    0
.data:00414605                 db    0
.data:00414606                 db    0
.data:00414607                 db    0
.data:00414608                 db    0
.data:00414609                 db    0
.data:0041460A                 db    0
.data:0041460B                 db    0
.data:0041460C                 db    0
.data:0041460D                 db    0
.data:0041460E                 db    0
.data:0041460F                 db    0
.data:00414610                 db    0
.data:00414611                 db    0
.data:00414612                 db    0
.data:00414613                 db    0
.data:00414614                 db    0
.data:00414615                 db    0
.data:00414616                 db    0
.data:00414617                 db    0
.data:00414618                 db    0
.data:00414619                 db    0
.data:0041461A                 db    0
.data:0041461B                 db    0
.data:0041461C                 db    0
.data:0041461D                 db    0
.data:0041461E                 db    0
.data:0041461F                 db    0
.data:00414620 dword_414620    dd 0                    ; DATA XREF: sub_40BF14:loc_40BF68↑r
.data:00414624 dword_414624    dd 0                    ; DATA XREF: sub_40BF14+61↑r
.data:00414628                 db    0
.data:00414629                 db    0
.data:0041462A                 db    0
.data:0041462B                 db    0
.data:0041462C dword_41462C    dd 0                    ; DATA XREF: sub_4066A0+64↑w
.data:00414630                 db    0
.data:00414631                 db    0
.data:00414632                 db    0
.data:00414633                 db    0
.data:00414634                 db    0
.data:00414635                 db    0
.data:00414636                 db    0
.data:00414637                 db    0
.data:00414638 dword_414638    dd 0                    ; DATA XREF: sub_406EA0:loc_406EE7↑o
.data:00414638                                         ; sub_406EA0+4C↑w ...
.data:0041463C dword_41463C    dd 0                    ; DATA XREF: sub_406EA0+52↑w
.data:00414640                 db 0B6h ; ¶
.data:00414641                 db    0
.data:00414642                 db    0
.data:00414643                 db    0
.data:00414644 dword_414644    dd 0                    ; DATA XREF: ArgApplyRules(int)+A49↑w
.data:00414648                 db  5Ch ; \
.data:00414649                 db    0
.data:0041464A                 db    0
.data:0041464B                 db    0
.data:0041464C                 db    1
.data:0041464D                 db    0
.data:0041464E                 db    0
.data:0041464F                 db    0
.data:00414650                 db    0
.data:00414651                 db    0
.data:00414652                 db    0
.data:00414653                 db    0
.data:00414654                 db    0
.data:00414655                 db    0
.data:00414656                 db    0
.data:00414657                 db    0
.data:00414658                 db    4
.data:00414659                 db    0
.data:0041465A                 db    0
.data:0041465B                 db    0
.data:0041465C unk_41465C      db    0                 ; DATA XREF: sub_406EA0+31↑o
.data:0041465D                 db    0
.data:0041465E                 db    0
.data:0041465F                 db    0
.data:00414660                 db    0
.data:00414661                 db    0
.data:00414662                 db    0
.data:00414663                 db    0
.data:00414664                 db    0
.data:00414665                 db    0
.data:00414666                 db    0
.data:00414667                 db    0
.data:00414668                 db    0
.data:00414669                 db    0
.data:0041466A                 db    0
.data:0041466B                 db    0
.data:0041466C                 db    0
.data:0041466D                 db    0
.data:0041466E                 db    0
.data:0041466F                 db    0
.data:00414670                 db    0
.data:00414671                 db    0
.data:00414672                 db    0
.data:00414673                 db    0
.data:00414674                 db    0
.data:00414675                 db    0
.data:00414676                 db    0
.data:00414677                 db    0
.data:00414678                 db    0
.data:00414679                 db    0
.data:0041467A                 db    0
.data:0041467B                 db    0
.data:0041467C                 db    0
.data:0041467D                 db    0
.data:0041467E                 db    0
.data:0041467F                 db    0
.data:00414680 dword_414680    dd 0                    ; DATA XREF: ArgApplyRules(int)+583↑r
.data:00414680                                         ; _wmain+17E↑r ...
.data:00414684 dword_414684    dd 0                    ; DATA XREF: SetTraceValues(IDataCollector *)+1C7↑r
.data:00414688                 db    0
.data:00414689                 db    0
.data:0041468A                 db    0
.data:0041468B                 db    0
.data:0041468C dword_41468C    dd 0                    ; DATA XREF: sub_406EA0+64↑w
.data:00414690                 db    0
.data:00414691                 db    0
.data:00414692                 db    0
.data:00414693                 db    0
.data:00414694                 db    0
.data:00414695                 db    0
.data:00414696                 db    0
.data:00414697                 db    0
.data:00414698 dword_414698    dd 0                    ; DATA XREF: sub_405D20:loc_405D67↑o
.data:00414698                                         ; sub_405D20+4C↑w ...
.data:0041469C dword_41469C    dd 0                    ; DATA XREF: sub_405D20+52↑w
.data:004146A0                 db 0E3h ; ã
.data:004146A1                 db    0
.data:004146A2                 db    0
.data:004146A3                 db    0
.data:004146A4 dword_4146A4    dd 0                    ; DATA XREF: ArgApplyRules(int)+A0D↑w
.data:004146A8                 db  5Ch ; \
.data:004146A9                 db    0
.data:004146AA                 db    0
.data:004146AB                 db    0
.data:004146AC                 db    0
.data:004146AD                 db    0
.data:004146AE                 db    0
.data:004146AF                 db    0
.data:004146B0                 db    0
.data:004146B1                 db    0
.data:004146B2                 db    0
.data:004146B3                 db    0
.data:004146B4                 db    0
.data:004146B5                 db    0
.data:004146B6                 db    0
.data:004146B7                 db    0
.data:004146B8                 db    0
.data:004146B9                 db    4
.data:004146BA                 db    0
.data:004146BB                 db    0
.data:004146BC unk_4146BC      db    0                 ; DATA XREF: sub_405D20+31↑o
.data:004146BD                 db    0
.data:004146BE                 db    0
.data:004146BF                 db    0
.data:004146C0                 db    0
.data:004146C1                 db    0
.data:004146C2                 db    0
.data:004146C3                 db    0
.data:004146C4                 db    0
.data:004146C5                 db    0
.data:004146C6                 db    0
.data:004146C7                 db    0
.data:004146C8                 db    0
.data:004146C9                 db    0
.data:004146CA                 db    0
.data:004146CB                 db    0
.data:004146CC                 db    0
.data:004146CD                 db    0
.data:004146CE                 db    0
.data:004146CF                 db    0
.data:004146D0 dword_4146D0    dd 0                    ; DATA XREF: ArgApplyRules(int)+940↑r
.data:004146D4                 align 10h
.data:004146E0 dword_4146E0    dd 0                    ; DATA XREF: ArgApplyRules(int)+746↑r
.data:004146E0                                         ; ArgApplyRules(int):loc_4083A7↑r ...
.data:004146E4                 db    0
.data:004146E5                 db    0
.data:004146E6                 db    0
.data:004146E7                 db    0
.data:004146E8                 db    0
.data:004146E9                 db    0
.data:004146EA                 db    0
.data:004146EB                 db    0
.data:004146EC dword_4146EC    dd 0                    ; DATA XREF: sub_405D20+64↑w
.data:004146F0                 db    0
.data:004146F1                 db    0
.data:004146F2                 db    0
.data:004146F3                 db    0
.data:004146F4                 db    0
.data:004146F5                 db    0
.data:004146F6                 db    0
.data:004146F7                 db    0
.data:004146F8 dword_4146F8    dd 0                    ; DATA XREF: sub_406BA0:loc_406BE7↑o
.data:004146F8                                         ; sub_406BA0+4C↑w ...
.data:004146FC dword_4146FC    dd 0                    ; DATA XREF: sub_406BA0+52↑w
.data:00414700                 db 0E0h ; à
.data:00414701                 db    0
.data:00414702                 db    0
.data:00414703                 db    0
.data:00414704                 db    0
.data:00414705                 db    0
.data:00414706                 db    0
.data:00414707                 db    0
.data:00414708 dword_414708    dd 5Ch                  ; DATA XREF: sub_406BA0+70↑w
.data:0041470C                 db    1
.data:0041470D                 db    0
.data:0041470E                 db    0
.data:0041470F                 db    0
.data:00414710                 db    0
.data:00414711                 db    0
.data:00414712                 db    0
.data:00414713                 db    0
.data:00414714                 db    1
.data:00414715                 db    0
.data:00414716                 db    0
.data:00414717                 db    0
.data:00414718                 db    0
.data:00414719                 db    0
.data:0041471A                 db    0
.data:0041471B                 db    0
.data:0041471C unk_41471C      db    0                 ; DATA XREF: sub_406BA0+31↑o
.data:0041471D                 db    0
.data:0041471E                 db    0
.data:0041471F                 db    0
.data:00414720                 db    0
.data:00414721                 db    0
.data:00414722                 db    0
.data:00414723                 db    0
.data:00414724                 db    0
.data:00414725                 db    0
.data:00414726                 db    0
.data:00414727                 db    0
.data:00414728                 db    0
.data:00414729                 db    0
.data:0041472A                 db    0
.data:0041472B                 db    0
.data:0041472C                 db    0
.data:0041472D                 db    0
.data:0041472E                 db    0
.data:0041472F                 db    0
.data:00414730                 db    0
.data:00414731                 db    0
.data:00414732                 db    0
.data:00414733                 db    0
.data:00414734                 db    0
.data:00414735                 db    0
.data:00414736                 db    0
.data:00414737                 db    0
.data:00414738                 db    0
.data:00414739                 db    0
.data:0041473A                 db    0
.data:0041473B                 db    0
.data:0041473C                 db    0
.data:0041473D                 db    0
.data:0041473E                 db    0
.data:0041473F                 db    0
.data:00414740 dword_414740    dd 0                    ; DATA XREF: SetTraceValues(IDataCollector *):loc_40B553↑r
.data:00414744                 db    0
.data:00414745                 db    0
.data:00414746                 db    0
.data:00414747                 db    0
.data:00414748                 db    0
.data:00414749                 db    0
.data:0041474A                 db    0
.data:0041474B                 db    0
.data:0041474C dword_41474C    dd 0                    ; DATA XREF: sub_406BA0+64↑w
.data:00414750                 db    0
.data:00414751                 db    0
.data:00414752                 db    0
.data:00414753                 db    0
.data:00414754 ; wchar_t *dword_414754
.data:00414754 dword_414754    dd 0                    ; DATA XREF: SetTraceValues(IDataCollector *)+2FF↑r
.data:00414754                                         ; SetTraceValues(IDataCollector *)+31F↑r ...
.data:00414758 dword_414758    dd 0                    ; DATA XREF: sub_4068A0:loc_4068E7↑o
.data:00414758                                         ; sub_4068A0+4C↑w ...
.data:0041475C dword_41475C    dd 0                    ; DATA XREF: sub_4068A0+52↑w
.data:00414760                 db  9Dh
.data:00414761                 db    0
.data:00414762                 db    0
.data:00414763                 db    0
.data:00414764                 db    0
.data:00414765                 db    0
.data:00414766                 db    0
.data:00414767                 db    0
.data:00414768 dword_414768    dd 5Ch                  ; DATA XREF: sub_4068A0+70↑w
.data:0041476C                 db    1
.data:0041476D                 db    0
.data:0041476E                 db    0
.data:0041476F                 db    0
.data:00414770                 db    0
.data:00414771                 db    0
.data:00414772                 db    0
.data:00414773                 db    0
.data:00414774                 db    3
.data:00414775                 db    0
.data:00414776                 db    0
.data:00414777                 db    0
.data:00414778                 db    4
.data:00414779                 db    1
.data:0041477A                 db    0
.data:0041477B                 db    0
.data:0041477C unk_41477C      db    0                 ; DATA XREF: sub_4068A0+31↑o
.data:0041477D                 db    0
.data:0041477E                 db    0
.data:0041477F                 db    0
.data:00414780                 db    0
.data:00414781                 db    0
.data:00414782                 db    0
.data:00414783                 db    0
.data:00414784                 db    0
.data:00414785                 db    0
.data:00414786                 db    0
.data:00414787                 db    0
.data:00414788                 db    0
.data:00414789                 db    0
.data:0041478A                 db    0
.data:0041478B                 db    0
.data:0041478C                 db    0
.data:0041478D                 db    0
.data:0041478E                 db    0
.data:0041478F                 db    0
.data:00414790                 db    0
.data:00414791                 db    0
.data:00414792                 db    0
.data:00414793                 db    0
.data:00414794                 db    0
.data:00414795                 db    0
.data:00414796                 db    0
.data:00414797                 db    0
.data:00414798                 db    0
.data:00414799                 db    0
.data:0041479A                 db    0
.data:0041479B                 db    0
.data:0041479C                 db    0
.data:0041479D                 db    0
.data:0041479E                 db    0
.data:0041479F                 db    0
.data:004147A0 dword_4147A0    dd 0                    ; DATA XREF: sub_40BF14:loc_40C09D↑r
.data:004147A4 dword_4147A4    dd 0                    ; DATA XREF: sub_40BF14+196↑r
.data:004147A8                 db    0
.data:004147A9                 db    0
.data:004147AA                 db    0
.data:004147AB                 db    0
.data:004147AC dword_4147AC    dd 0                    ; DATA XREF: sub_4068A0+64↑w
.data:004147B0                 db    0
.data:004147B1                 db    0
.data:004147B2                 db    0
.data:004147B3                 db    0
.data:004147B4                 db    0
.data:004147B5                 db    0
.data:004147B6                 db    0
.data:004147B7                 db    0
.data:004147B8                 db    0
.data:004147B9                 db    0
.data:004147BA                 db    0
.data:004147BB                 db    0
.data:004147BC word_4147BC     dw 0                    ; DATA XREF: sub_40BF14:loc_40C0D3↑r
.data:004147BE word_4147BE     dw 0                    ; DATA XREF: sub_40BF14+1C9↑r
.data:004147C0 word_4147C0     dw 0                    ; DATA XREF: sub_40BF14+1D5↑r
.data:004147C2                 align 8
.data:004147C8 dword_4147C8    dd 0                    ; DATA XREF: sub_406620:loc_406667↑o
.data:004147C8                                         ; sub_406620+4C↑w ...
.data:004147CC dword_4147CC    dd 0                    ; DATA XREF: sub_406620+52↑w
.data:004147D0                 db  90h
.data:004147D1                 db    0
.data:004147D2                 db    0
.data:004147D3                 db    0
.data:004147D4                 db    0
.data:004147D5                 db    0
.data:004147D6                 db    0
.data:004147D7                 db    0
.data:004147D8                 db  5Ch ; \
.data:004147D9                 db    0
.data:004147DA                 db    0
.data:004147DB                 db    0
.data:004147DC                 db    1
.data:004147DD                 db    0
.data:004147DE                 db    0
.data:004147DF                 db    0
.data:004147E0                 db    0
.data:004147E1                 db    0
.data:004147E2                 db    0
.data:004147E3                 db    0
.data:004147E4                 db    0
.data:004147E5                 db    0
.data:004147E6                 db    0
.data:004147E7                 db    0
.data:004147E8                 db    4
.data:004147E9                 db    0
.data:004147EA                 db    0
.data:004147EB                 db    0
.data:004147EC unk_4147EC      db    0                 ; DATA XREF: sub_406620+31↑o
.data:004147ED                 db    0
.data:004147EE                 db    0
.data:004147EF                 db    0
.data:004147F0                 db    0
.data:004147F1                 db    0
.data:004147F2                 db    0
.data:004147F3                 db    0
.data:004147F4                 db    0
.data:004147F5                 db    0
.data:004147F6                 db    0
.data:004147F7                 db    0
.data:004147F8                 db    0
.data:004147F9                 db    0
.data:004147FA                 db    0
.data:004147FB                 db    0
.data:004147FC                 db    0
.data:004147FD                 db    0
.data:004147FE                 db    0
.data:004147FF                 db    0
.data:00414800                 db    0
.data:00414801                 db    0
.data:00414802                 db    0
.data:00414803                 db    0
.data:00414804                 db    0
.data:00414805                 db    0
.data:00414806                 db    0
.data:00414807                 db    0
.data:00414808                 db    0
.data:00414809                 db    0
.data:0041480A                 db    0
.data:0041480B                 db    0
.data:0041480C                 db    0
.data:0041480D                 db    0
.data:0041480E                 db    0
.data:0041480F                 db    0
.data:00414810 dword_414810    dd 0                    ; DATA XREF: sub_40BF14+16↑r
.data:00414814 dword_414814    dd 0                    ; DATA XREF: sub_40BF14+31↑r
.data:00414818                 db    0
.data:00414819                 db    0
.data:0041481A                 db    0
.data:0041481B                 db    0
.data:0041481C dword_41481C    dd 0                    ; DATA XREF: sub_406620+64↑w
.data:00414820                 db    0
.data:00414821                 db    0
.data:00414822                 db    0
.data:00414823                 db    0
.data:00414824                 db    0
.data:00414825                 db    0
.data:00414826                 db    0
.data:00414827                 db    0
.data:00414828 dword_414828    dd 0                    ; DATA XREF: sub_406420:loc_406467↑o
.data:00414828                                         ; sub_406420+4C↑w ...
.data:0041482C dword_41482C    dd 0                    ; DATA XREF: sub_406420+52↑w
.data:00414830                 db  7Fh ; 
.data:00414831                 db    0
.data:00414832                 db    0
.data:00414833                 db    0
.data:00414834                 db    0
.data:00414835                 db    0
.data:00414836                 db    0
.data:00414837                 db    0
.data:00414838 dword_414838    dd 5Ch                  ; DATA XREF: sub_406420+70↑w
.data:0041483C                 db    1
.data:0041483D                 db    0
.data:0041483E                 db    0
.data:0041483F                 db    0
.data:00414840                 db    0
.data:00414841                 db    0
.data:00414842                 db    0
.data:00414843                 db    0
.data:00414844                 db    4
.data:00414845                 db    0
.data:00414846                 db    0
.data:00414847                 db    0
.data:00414848                 db    0
.data:00414849                 db    0
.data:0041484A                 db    0
.data:0041484B                 db    0
.data:0041484C unk_41484C      db    0                 ; DATA XREF: sub_406420+31↑o
.data:0041484D                 db    0
.data:0041484E                 db    0
.data:0041484F                 db    0
.data:00414850                 db    0
.data:00414851                 db    0
.data:00414852                 db    0
.data:00414853                 db    0
.data:00414854                 db    0
.data:00414855                 db    0
.data:00414856                 db    0
.data:00414857                 db    0
.data:00414858                 db    0
.data:00414859                 db    0
.data:0041485A                 db    0
.data:0041485B                 db    0
.data:0041485C                 db    0
.data:0041485D                 db    0
.data:0041485E                 db    0
.data:0041485F                 db    0
.data:00414860                 db    0
.data:00414861                 db    0
.data:00414862                 db    0
.data:00414863                 db    0
.data:00414864                 db    0
.data:00414865                 db    0
.data:00414866                 db    0
.data:00414867                 db    0
.data:00414868                 db    0
.data:00414869                 db    0
.data:0041486A                 db    0
.data:0041486B                 db    0
.data:0041486C                 db    0
.data:0041486D                 db    0
.data:0041486E                 db    0
.data:0041486F                 db    0
.data:00414870 dword_414870    dd 0                    ; DATA XREF: ArgApplyRules(int)+8C4↑r
.data:00414870                                         ; SetSchedule(IDataCollectorSet *)+DE↑r ...
.data:00414874                 db    0
.data:00414875                 db    0
.data:00414876                 db    0
.data:00414877                 db    0
.data:00414878                 db    0
.data:00414879                 db    0
.data:0041487A                 db    0
.data:0041487B                 db    0
.data:0041487C dword_41487C    dd 0                    ; DATA XREF: sub_406420+64↑w
.data:00414880                 db    0
.data:00414881                 db    0
.data:00414882                 db    0
.data:00414883                 db    0
.data:00414884 ; SYSTEMTIME stru_414884
.data:00414884 stru_414884     SYSTEMTIME <0>          ; DATA XREF: SetSchedule(IDataCollectorSet *)+1FF↑o
.data:00414894                 db    0
.data:00414895                 db    0
.data:00414896                 db    0
.data:00414897                 db    0
.data:00414898 dword_414898    dd 0                    ; DATA XREF: sub_407220:loc_407267↑o
.data:00414898                                         ; sub_407220+4C↑w ...
.data:0041489C dword_41489C    dd 0                    ; DATA XREF: sub_407220+52↑w
.data:004148A0                 db 0EDh ; í
.data:004148A1                 db    0
.data:004148A2                 db    0
.data:004148A3                 db    0
.data:004148A4                 db    0
.data:004148A5                 db    0
.data:004148A6                 db    0
.data:004148A7                 db    0
.data:004148A8 dword_4148A8    dd 5Ch                  ; DATA XREF: sub_407220+70↑w
.data:004148AC                 db    1
.data:004148AD                 db    0
.data:004148AE                 db    0
.data:004148AF                 db    0
.data:004148B0                 db    0
.data:004148B1                 db    0
.data:004148B2                 db    0
.data:004148B3                 db    0
.data:004148B4                 db    2
.data:004148B5                 db    0
.data:004148B6                 db    0
.data:004148B7                 db    0
.data:004148B8                 db    0
.data:004148B9                 db    0
.data:004148BA                 db    0
.data:004148BB                 db    0
.data:004148BC unk_4148BC      db    0                 ; DATA XREF: sub_407220+31↑o
.data:004148BD                 db    0
.data:004148BE                 db    0
.data:004148BF                 db    0
.data:004148C0                 db    0
.data:004148C1                 db    0
.data:004148C2                 db    0
.data:004148C3                 db    0
.data:004148C4                 db    0
.data:004148C5                 db    0
.data:004148C6                 db    0
.data:004148C7                 db    0
.data:004148C8                 db    0
.data:004148C9                 db    0
.data:004148CA                 db    0
.data:004148CB                 db    0
.data:004148CC                 db    0
.data:004148CD                 db    0
.data:004148CE                 db    0
.data:004148CF                 db    0
.data:004148D0                 db    0
.data:004148D1                 db    0
.data:004148D2                 db    0
.data:004148D3                 db    0
.data:004148D4                 db    0
.data:004148D5                 db    0
.data:004148D6                 db    0
.data:004148D7                 db    0
.data:004148D8                 db    0
.data:004148D9                 db    0
.data:004148DA                 db    0
.data:004148DB                 db    0
.data:004148DC                 db    0
.data:004148DD                 db    0
.data:004148DE                 db    0
.data:004148DF                 db    0
.data:004148E0 dword_4148E0    dd 0                    ; DATA XREF: sub_40B60B:loc_40B692↑r
.data:004148E4                 db    0
.data:004148E5                 db    0
.data:004148E6                 db    0
.data:004148E7                 db    0
.data:004148E8                 db    0
.data:004148E9                 db    0
.data:004148EA                 db    0
.data:004148EB                 db    0
.data:004148EC dword_4148EC    dd 0                    ; DATA XREF: sub_407220+64↑w
.data:004148F0                 db    0
.data:004148F1                 db    0
.data:004148F2                 db    0
.data:004148F3                 db    0
.data:004148F4 dword_4148F4    dd 0                    ; DATA XREF: sub_40B60B+8F↑r
.data:004148F8 dword_4148F8    dd 0                    ; DATA XREF: sub_406920:loc_406967↑o
.data:004148F8                                         ; sub_406920+4C↑w ...
.data:004148FC dword_4148FC    dd 0                    ; DATA XREF: sub_406920+52↑w
.data:00414900                 db 0D1h ; Ñ
.data:00414901                 db    0
.data:00414902                 db    0
.data:00414903                 db    0
.data:00414904                 db    0
.data:00414905                 db    0
.data:00414906                 db    0
.data:00414907                 db    0
.data:00414908                 db  5Ch ; \
.data:00414909                 db    0
.data:0041490A                 db    0
.data:0041490B                 db    0
.data:0041490C                 db    1
.data:0041490D                 db    0
.data:0041490E                 db    0
.data:0041490F                 db    0
.data:00414910                 db    0
.data:00414911                 db    0
.data:00414912                 db    0
.data:00414913                 db    0
.data:00414914                 db    0
.data:00414915                 db    0
.data:00414916                 db    0
.data:00414917                 db    0
.data:00414918                 db    0
.data:00414919                 db    0
.data:0041491A                 db    0
.data:0041491B                 db    0
.data:0041491C unk_41491C      db    0                 ; DATA XREF: sub_406920+31↑o
.data:0041491D                 db    0
.data:0041491E                 db    0
.data:0041491F                 db    0
.data:00414920                 db    0
.data:00414921                 db    0
.data:00414922                 db    0
.data:00414923                 db    0
.data:00414924                 db    0
.data:00414925                 db    0
.data:00414926                 db    0
.data:00414927                 db    0
.data:00414928                 db    0
.data:00414929                 db    0
.data:0041492A                 db    0
.data:0041492B                 db    0
.data:0041492C                 db    0
.data:0041492D                 db    0
.data:0041492E                 db    0
.data:0041492F                 db    0
.data:00414930 dword_414930    dd 0                    ; DATA XREF: ArgApplyRules(int)+690↑w
.data:00414934                 align 10h
.data:00414940 dword_414940    dd 0                    ; DATA XREF: _wmain+2DB↑r
.data:00414940                                         ; _wmain+6FF↑r ...
.data:00414944                 db    0
.data:00414945                 db    0
.data:00414946                 db    0
.data:00414947                 db    0
.data:00414948                 db    0
.data:00414949                 db    0
.data:0041494A                 db    0
.data:0041494B                 db    0
.data:0041494C dword_41494C    dd 0                    ; DATA XREF: sub_406920+64↑w
.data:00414950                 db    0
.data:00414951                 db    0
.data:00414952                 db    0
.data:00414953                 db    0
.data:00414954                 db    0
.data:00414955                 db    0
.data:00414956                 db    0
.data:00414957                 db    0
.data:00414958 dword_414958    dd 0                    ; DATA XREF: sub_405920:loc_405967↑o
.data:00414958                                         ; sub_405920+4C↑w ...
.data:0041495C dword_41495C    dd 0                    ; DATA XREF: sub_405920+52↑w
.data:00414960                 db  73h ; s
.data:00414961                 db    0
.data:00414962                 db    0
.data:00414963                 db    0
.data:00414964                 db    0
.data:00414965                 db    0
.data:00414966                 db    0
.data:00414967                 db    0
.data:00414968                 db  5Ch ; \
.data:00414969                 db    0
.data:0041496A                 db    0
.data:0041496B                 db    0
.data:0041496C                 db    0
.data:0041496D                 db    0
.data:0041496E                 db    0
.data:0041496F                 db    0
.data:00414970                 db    0
.data:00414971                 db    0
.data:00414972                 db    0
.data:00414973                 db    0
.data:00414974                 db    0
.data:00414975                 db    0
.data:00414976                 db    0
.data:00414977                 db    0
.data:00414978                 db    0
.data:00414979                 db    0
.data:0041497A                 db    0
.data:0041497B                 db    0
.data:0041497C unk_41497C      db    0                 ; DATA XREF: sub_405920+31↑o
.data:0041497D                 db    0
.data:0041497E                 db    0
.data:0041497F                 db    0
.data:00414980                 db    0
.data:00414981                 db    0
.data:00414982                 db    0
.data:00414983                 db    0
.data:00414984                 db    0
.data:00414985                 db    0
.data:00414986                 db    0
.data:00414987                 db    0
.data:00414988                 db    0
.data:00414989                 db    0
.data:0041498A                 db    0
.data:0041498B                 db    0
.data:0041498C                 db    0
.data:0041498D                 db    0
.data:0041498E                 db    0
.data:0041498F                 db    0
.data:00414990                 db    0
.data:00414991                 db    0
.data:00414992                 db    0
.data:00414993                 db    0
.data:00414994                 db    0
.data:00414995                 db    0
.data:00414996                 db    0
.data:00414997                 db    0
.data:00414998                 db    0
.data:00414999                 db    0
.data:0041499A                 db    0
.data:0041499B                 db    0
.data:0041499C                 db    0
.data:0041499D                 db    0
.data:0041499E                 db    0
.data:0041499F                 db    0
.data:004149A0 dword_4149A0    dd 0                    ; DATA XREF: ArgApplyRules(int)+4B5↑r
.data:004149A0                                         ; ArgApplyRules(int):loc_4080A4↑r ...
.data:004149A4                 db    0
.data:004149A5                 db    0
.data:004149A6                 db    0
.data:004149A7                 db    0
.data:004149A8                 db    0
.data:004149A9                 db    0
.data:004149AA                 db    0
.data:004149AB                 db    0
.data:004149AC dword_4149AC    dd 0                    ; DATA XREF: sub_405920+64↑w
.data:004149B0                 db    0
.data:004149B1                 db    0
.data:004149B2                 db    0
.data:004149B3                 db    0
.data:004149B4                 db    0
.data:004149B5                 db    0
.data:004149B6                 db    0
.data:004149B7                 db    0
.data:004149B8 dword_4149B8    dd 0                    ; DATA XREF: sub_4073A0:loc_4073E7↑o
.data:004149B8                                         ; sub_4073A0+4C↑w ...
.data:004149BC dword_4149BC    dd 0                    ; DATA XREF: sub_4073A0+52↑w
.data:004149C0                 db 0F2h ; ò
.data:004149C1                 db    0
.data:004149C2                 db    0
.data:004149C3                 db    0
.data:004149C4                 db    0
.data:004149C5                 db    0
.data:004149C6                 db    0
.data:004149C7                 db    0
.data:004149C8 dword_4149C8    dd 5Ch                  ; DATA XREF: sub_4073A0+70↑w
.data:004149CC                 db    1
.data:004149CD                 db    0
.data:004149CE                 db    0
.data:004149CF                 db    0
.data:004149D0                 db    0
.data:004149D1                 db    0
.data:004149D2                 db    0
.data:004149D3                 db    0
.data:004149D4                 db    1
.data:004149D5                 db    0
.data:004149D6                 db    0
.data:004149D7                 db    0
.data:004149D8                 db    4
.data:004149D9                 db    1
.data:004149DA                 db    0
.data:004149DB                 db    0
.data:004149DC unk_4149DC      db    0                 ; DATA XREF: sub_4073A0+31↑o
.data:004149DD                 db    0
.data:004149DE                 db    0
.data:004149DF                 db    0
.data:004149E0                 db    0
.data:004149E1                 db    0
.data:004149E2                 db    0
.data:004149E3                 db    0
.data:004149E4                 db    0
.data:004149E5                 db    0
.data:004149E6                 db    0
.data:004149E7                 db    0
.data:004149E8                 db    0
.data:004149E9                 db    0
.data:004149EA                 db    0
.data:004149EB                 db    0
.data:004149EC                 db    0
.data:004149ED                 db    0
.data:004149EE                 db    0
.data:004149EF                 db    0
.data:004149F0                 db    0
.data:004149F1                 db    0
.data:004149F2                 db    0
.data:004149F3                 db    0
.data:004149F4                 db    0
.data:004149F5                 db    0
.data:004149F6                 db    0
.data:004149F7                 db    0
.data:004149F8                 db    0
.data:004149F9                 db    0
.data:004149FA                 db    0
.data:004149FB                 db    0
.data:004149FC                 db    0
.data:004149FD                 db    0
.data:004149FE                 db    0
.data:004149FF                 db    0
.data:00414A00 dword_414A00    dd 0                    ; DATA XREF: sub_40B60B:loc_40B7B0↑r
.data:00414A04 dword_414A04    dd 0                    ; DATA XREF: sub_40B60B:loc_40B7C6↑r
.data:00414A08                 db    0
.data:00414A09                 db    0
.data:00414A0A                 db    0
.data:00414A0B                 db    0
.data:00414A0C dword_414A0C    dd 0                    ; DATA XREF: sub_4073A0+64↑w
.data:00414A10                 db    0
.data:00414A11                 db    0
.data:00414A12                 db    0
.data:00414A13                 db    0
.data:00414A14 ; OLECHAR *dword_414A14
.data:00414A14 dword_414A14    dd 0                    ; DATA XREF: sub_40B60B+1C4↑r
.data:00414A18 dword_414A18    dd 0                    ; DATA XREF: sub_405BA0:loc_405BE7↑o
.data:00414A18                                         ; sub_405BA0+4C↑w ...
.data:00414A1C dword_414A1C    dd 0                    ; DATA XREF: sub_405BA0+52↑w
.data:00414A20                 db 0DEh ; Þ
.data:00414A21                 db    0
.data:00414A22                 db    0
.data:00414A23                 db    0
.data:00414A24 dword_414A24    dd 0                    ; DATA XREF: ArgApplyRules(int)+A17↑w
.data:00414A28                 db  5Ch ; \
.data:00414A29                 db    0
.data:00414A2A                 db    0
.data:00414A2B                 db    0
.data:00414A2C                 db    0
.data:00414A2D                 db    0
.data:00414A2E                 db    0
.data:00414A2F                 db    0
.data:00414A30                 db    0
.data:00414A31                 db    0
.data:00414A32                 db    0
.data:00414A33                 db    0
.data:00414A34                 db    0
.data:00414A35                 db    0
.data:00414A36                 db    0
.data:00414A37                 db    0
.data:00414A38                 db    0
.data:00414A39                 db    0
.data:00414A3A                 db    0
.data:00414A3B                 db    0
.data:00414A3C unk_414A3C      db    0                 ; DATA XREF: sub_405BA0+31↑o
.data:00414A3D                 db    0
.data:00414A3E                 db    0
.data:00414A3F                 db    0
.data:00414A40                 db    0
.data:00414A41                 db    0
.data:00414A42                 db    0
.data:00414A43                 db    0
.data:00414A44                 db    0
.data:00414A45                 db    0
.data:00414A46                 db    0
.data:00414A47                 db    0
.data:00414A48                 db    0
.data:00414A49                 db    0
.data:00414A4A                 db    0
.data:00414A4B                 db    0
.data:00414A4C                 db    0
.data:00414A4D                 db    0
.data:00414A4E                 db    0
.data:00414A4F                 db    0
.data:00414A50 dword_414A50    dd 0                    ; DATA XREF: ArgApplyRules(int)+917↑r
.data:00414A54                 align 10h
.data:00414A60 dword_414A60    dd 0                    ; DATA XREF: ArgApplyRules(int)+739↑r
.data:00414A60                                         ; ArgApplyRules(int):loc_40837E↑r ...
.data:00414A64                 db    0
.data:00414A65                 db    0
.data:00414A66                 db    0
.data:00414A67                 db    0
.data:00414A68                 db    0
.data:00414A69                 db    0
.data:00414A6A                 db    0
.data:00414A6B                 db    0
.data:00414A6C dword_414A6C    dd 0                    ; DATA XREF: sub_405BA0+64↑w
.data:00414A70                 db    0
.data:00414A71                 db    0
.data:00414A72                 db    0
.data:00414A73                 db    0
.data:00414A74                 db    0
.data:00414A75                 db    0
.data:00414A76                 db    0
.data:00414A77                 db    0
.data:00414A78 dword_414A78    dd 0                    ; DATA XREF: sub_405C20:loc_405C67↑o
.data:00414A78                                         ; sub_405C20+4C↑w ...
.data:00414A7C dword_414A7C    dd 0                    ; DATA XREF: sub_405C20+52↑w
.data:00414A80                 db 0E1h ; á
.data:00414A81                 db    0
.data:00414A82                 db    0
.data:00414A83                 db    0
.data:00414A84 dword_414A84    dd 0                    ; DATA XREF: ArgApplyRules(int)+9F9↑w
.data:00414A88                 db  5Ch ; \
.data:00414A89                 db    0
.data:00414A8A                 db    0
.data:00414A8B                 db    0
.data:00414A8C                 db    0
.data:00414A8D                 db    0
.data:00414A8E                 db    0
.data:00414A8F                 db    0
.data:00414A90                 db    0
.data:00414A91                 db    0
.data:00414A92                 db    0
.data:00414A93                 db    0
.data:00414A94                 db    0
.data:00414A95                 db    0
.data:00414A96                 db    0
.data:00414A97                 db    0
.data:00414A98                 db    0
.data:00414A99                 db    0
.data:00414A9A                 db    0
.data:00414A9B                 db    0
.data:00414A9C unk_414A9C      db    0                 ; DATA XREF: sub_405C20+31↑o
.data:00414A9D                 db    0
.data:00414A9E                 db    0
.data:00414A9F                 db    0
.data:00414AA0                 db    0
.data:00414AA1                 db    0
.data:00414AA2                 db    0
.data:00414AA3                 db    0
.data:00414AA4                 db    0
.data:00414AA5                 db    0
.data:00414AA6                 db    0
.data:00414AA7                 db    0
.data:00414AA8                 db    0
.data:00414AA9                 db    0
.data:00414AAA                 db    0
.data:00414AAB                 db    0
.data:00414AAC                 db    0
.data:00414AAD                 db    0
.data:00414AAE                 db    0
.data:00414AAF                 db    0
.data:00414AB0 dword_414AB0    dd 0                    ; DATA XREF: ArgApplyRules(int)+992↑r
.data:00414AB4                 align 10h
.data:00414AC0 dword_414AC0    dd 0                    ; DATA XREF: ArgApplyRules(int)+75C↑r
.data:00414AC0                                         ; ArgApplyRules(int):loc_4083F9↑r ...
.data:00414AC4                 db    0
.data:00414AC5                 db    0
.data:00414AC6                 db    0
.data:00414AC7                 db    0
.data:00414AC8                 db    0
.data:00414AC9                 db    0
.data:00414ACA                 db    0
.data:00414ACB                 db    0
.data:00414ACC dword_414ACC    dd 0                    ; DATA XREF: sub_405C20+64↑w
.data:00414AD0                 db    0
.data:00414AD1                 db    0
.data:00414AD2                 db    0
.data:00414AD3                 db    0
.data:00414AD4                 db    0
.data:00414AD5                 db    0
.data:00414AD6                 db    0
.data:00414AD7                 db    0
.data:00414AD8 dword_414AD8    dd 0                    ; DATA XREF: sub_4075A0:loc_4075E7↑o
.data:00414AD8                                         ; sub_4075A0+4C↑w ...
.data:00414ADC dword_414ADC    dd 0                    ; DATA XREF: sub_4075A0+52↑w
.data:00414AE0                 db 0EBh ; ë
.data:00414AE1                 db    0
.data:00414AE2                 db    0
.data:00414AE3                 db    0
.data:00414AE4                 db    0
.data:00414AE5                 db    0
.data:00414AE6                 db    0
.data:00414AE7                 db    0
.data:00414AE8 dword_414AE8    dd 5Ch                  ; DATA XREF: sub_4075A0+70↑w
.data:00414AEC                 db    1
.data:00414AED                 db    0
.data:00414AEE                 db    0
.data:00414AEF                 db    0
.data:00414AF0                 db    0
.data:00414AF1                 db    0
.data:00414AF2                 db    0
.data:00414AF3                 db    0
.data:00414AF4                 db    2
.data:00414AF5                 db    0
.data:00414AF6                 db    0
.data:00414AF7                 db    0
.data:00414AF8                 db    0
.data:00414AF9                 db    0
.data:00414AFA                 db    0
.data:00414AFB                 db    0
.data:00414AFC unk_414AFC      db    0                 ; DATA XREF: sub_4075A0+31↑o
.data:00414AFD                 db    0
.data:00414AFE                 db    0
.data:00414AFF                 db    0
.data:00414B00                 db    0
.data:00414B01                 db    0
.data:00414B02                 db    0
.data:00414B03                 db    0
.data:00414B04                 db    0
.data:00414B05                 db    0
.data:00414B06                 db    0
.data:00414B07                 db    0
.data:00414B08                 db    0
.data:00414B09                 db    0
.data:00414B0A                 db    0
.data:00414B0B                 db    0
.data:00414B0C                 db    0
.data:00414B0D                 db    0
.data:00414B0E                 db    0
.data:00414B0F                 db    0
.data:00414B10                 db    0
.data:00414B11                 db    0
.data:00414B12                 db    0
.data:00414B13                 db    0
.data:00414B14                 db    0
.data:00414B15                 db    0
.data:00414B16                 db    0
.data:00414B17                 db    0
.data:00414B18                 db    0
.data:00414B19                 db    0
.data:00414B1A                 db    0
.data:00414B1B                 db    0
.data:00414B1C                 db    0
.data:00414B1D                 db    0
.data:00414B1E                 db    0
.data:00414B1F                 db    0
.data:00414B20 dword_414B20    dd 0                    ; DATA XREF: sub_40B845:loc_40B8B8↑r
.data:00414B24                 db    0
.data:00414B25                 db    0
.data:00414B26                 db    0
.data:00414B27                 db    0
.data:00414B28                 db    0
.data:00414B29                 db    0
.data:00414B2A                 db    0
.data:00414B2B                 db    0
.data:00414B2C dword_414B2C    dd 0                    ; DATA XREF: sub_4075A0+64↑w
.data:00414B30                 db    0
.data:00414B31                 db    0
.data:00414B32                 db    0
.data:00414B33                 db    0
.data:00414B34 dword_414B34    dd 0                    ; DATA XREF: sub_40B845+7B↑r
.data:00414B38 dword_414B38    dd 0                    ; DATA XREF: sub_4060A0:loc_4060E7↑o
.data:00414B38                                         ; sub_4060A0+4C↑w ...
.data:00414B3C dword_414B3C    dd 0                    ; DATA XREF: sub_4060A0+52↑w
.data:00414B40                 db  8Ch ; Œ
.data:00414B41                 db    0
.data:00414B42                 db    0
.data:00414B43                 db    0
.data:00414B44                 db    0
.data:00414B45                 db    0
.data:00414B46                 db    0
.data:00414B47                 db    0
.data:00414B48 dword_414B48    dd 5Ch                  ; DATA XREF: sub_4060A0+70↑w
.data:00414B4C                 db    1
.data:00414B4D                 db    0
.data:00414B4E                 db    0
.data:00414B4F                 db    0
.data:00414B50                 db    0
.data:00414B51                 db    0
.data:00414B52                 db    0
.data:00414B53                 db    0
.data:00414B54                 db    1
.data:00414B55                 db    0
.data:00414B56                 db    0
.data:00414B57                 db    0
.data:00414B58                 db    0
.data:00414B59                 db    0
.data:00414B5A                 db    0
.data:00414B5B                 db    0
.data:00414B5C unk_414B5C      db    0                 ; DATA XREF: sub_4060A0+31↑o
.data:00414B5D                 db    0
.data:00414B5E                 db    0
.data:00414B5F                 db    0
.data:00414B60                 db    0
.data:00414B61                 db    0
.data:00414B62                 db    0
.data:00414B63                 db    0
.data:00414B64                 db    0
.data:00414B65                 db    0
.data:00414B66                 db    0
.data:00414B67                 db    0
.data:00414B68                 db    0
.data:00414B69                 db    0
.data:00414B6A                 db    0
.data:00414B6B                 db    0
.data:00414B6C                 db    0
.data:00414B6D                 db    0
.data:00414B6E                 db    0
.data:00414B6F                 db    0
.data:00414B70                 db    0
.data:00414B71                 db    0
.data:00414B72                 db    0
.data:00414B73                 db    0
.data:00414B74                 db    0
.data:00414B75                 db    0
.data:00414B76                 db    0
.data:00414B77                 db    0
.data:00414B78                 db    0
.data:00414B79                 db    0
.data:00414B7A                 db    0
.data:00414B7B                 db    0
.data:00414B7C                 db    0
.data:00414B7D                 db    0
.data:00414B7E                 db    0
.data:00414B7F                 db    0
.data:00414B80 dword_414B80    dd 0                    ; DATA XREF: SetCounterValues(IDataCollector *,int *):loc_40A510↑r
.data:00414B80                                         ; sub_40B1DF+10↑r
.data:00414B84                 db    0
.data:00414B85                 db    0
.data:00414B86                 db    0
.data:00414B87                 db    0
.data:00414B88                 db    0
.data:00414B89                 db    0
.data:00414B8A                 db    0
.data:00414B8B                 db    0
.data:00414B8C dword_414B8C    dd 0                    ; DATA XREF: sub_4060A0+64↑w
.data:00414B90                 db    0
.data:00414B91                 db    0
.data:00414B92                 db    0
.data:00414B93                 db    0
.data:00414B94 ; wchar_t *dword_414B94
.data:00414B94 dword_414B94    dd 0                    ; DATA XREF: SetCounterValues(IDataCollector *,int *):loc_40A526↑r
.data:00414B94                                         ; sub_40B1DF+1C↑r ...
.data:00414B98                 align 10h
.data:00414BA0 dword_414BA0    dd 0                    ; DATA XREF: start-B3↑w
.data:00414BA0                                         ; .text:004124EC↑w ...
.data:00414BA4 dword_414BA4    dd 0                    ; DATA XREF: start:loc_412441↑w
.data:00414BA4                                         ; start:loc_412501↑r
.data:00414BA8 dword_414BA8    dd 0                    ; DATA XREF: pre_cpp_init+1F↑o
.data:00414BA8                                         ; start-C1↑r
.data:00414BAC dword_414BAC    dd 0                    ; DATA XREF: pre_cpp_init+1A↑o
.data:00414BAC                                         ; start-C7↑r
.data:00414BB0 dword_414BB0    dd 0                    ; DATA XREF: pre_cpp_init+15↑o
.data:00414BB0                                         ; start:loc_4124A3↑r
.data:00414BB4 dword_414BB4    dd 0                    ; DATA XREF: pre_cpp_init+2D↑w
.data:00414BB8 dword_414BB8    dd 0                    ; DATA XREF: pre_c_init+62↑w
.data:00414BB8                                         ; start-AE↑r ...
.data:00414BBC dword_414BBC    dd 0                    ; DATA XREF: pre_cpp_init+5↑o
.data:00414BBC                                         ; pre_cpp_init+10↑w
.data:00414BC0 dword_414BC0    dd 0                    ; DATA XREF: .text:ExceptionInfo↑o
.data:00414BC0                                         ; ___report_gsfailure+91↑w ...
.data:00414BC4 dword_414BC4    dd 0                    ; DATA XREF: ___report_gsfailure+9B↑w
.data:00414BC4                                         ; ___report_rangecheckfailure+8A↑w
.data:00414BC8                 db    0
.data:00414BC9                 db    0
.data:00414BCA                 db    0
.data:00414BCB                 db    0
.data:00414BCC dword_414BCC    dd 0                    ; DATA XREF: ___report_gsfailure+8C↑w
.data:00414BCC                                         ; ___report_rangecheckfailure+7B↑w
.data:00414BD0 dword_414BD0    dd 0                    ; DATA XREF: ___report_gsfailure+A5↑w
.data:00414BD0                                         ; ___report_rangecheckfailure+94↑w
.data:00414BD4 dword_414BD4    dd 0                    ; DATA XREF: ___report_gsfailure+B5↑w
.data:00414BD4                                         ; ___report_gsfailure+CB↑w ...
.data:00414BD8                 db    0
.data:00414BD9                 db    0
.data:00414BDA                 db    0
.data:00414BDB                 db    0
.data:00414BDC                 db    0
.data:00414BDD                 db    0
.data:00414BDE                 db    0
.data:00414BDF                 db    0
.data:00414BE0                 db    0
.data:00414BE1                 db    0
.data:00414BE2                 db    0
.data:00414BE3                 db    0
.data:00414BE4                 db    0
.data:00414BE5                 db    0
.data:00414BE6                 db    0
.data:00414BE7                 db    0
.data:00414BE8                 db    0
.data:00414BE9                 db    0
.data:00414BEA                 db    0
.data:00414BEB                 db    0
.data:00414BEC                 db    0
.data:00414BED                 db    0
.data:00414BEE                 db    0
.data:00414BEF                 db    0
.data:00414BF0                 db    0
.data:00414BF1                 db    0
.data:00414BF2                 db    0
.data:00414BF3                 db    0
.data:00414BF4                 db    0
.data:00414BF5                 db    0
.data:00414BF6                 db    0
.data:00414BF7                 db    0
.data:00414BF8                 db    0
.data:00414BF9                 db    0
.data:00414BFA                 db    0
.data:00414BFB                 db    0
.data:00414BFC                 db    0
.data:00414BFD                 db    0
.data:00414BFE                 db    0
.data:00414BFF                 db    0
.data:00414C00                 db    ? ;
.data:00414C01                 db    ? ;
.data:00414C02                 db    ? ;
.data:00414C03                 db    ? ;
.data:00414C04                 db    ? ;
.data:00414C05                 db    ? ;
.data:00414C06                 db    ? ;
.data:00414C07                 db    ? ;
.data:00414C08                 db    ? ;
.data:00414C09                 db    ? ;
.data:00414C0A                 db    ? ;
.data:00414C0B                 db    ? ;
.data:00414C0C                 db    ? ;
.data:00414C0D                 db    ? ;
.data:00414C0E                 db    ? ;
.data:00414C0F                 db    ? ;
.data:00414C10 dword_414C10    dd ?                    ; DATA XREF: .text:ExceptionInfo↑o
.data:00414C10                                         ; ___report_gsfailure+7D↑w ...
.data:00414C14                 db    ? ;
.data:00414C15                 db    ? ;
.data:00414C16                 db    ? ;
.data:00414C17                 db    ? ;
.data:00414C18                 db    ? ;
.data:00414C19                 db    ? ;
.data:00414C1A                 db    ? ;
.data:00414C1B                 db    ? ;
.data:00414C1C                 db    ? ;
.data:00414C1D                 db    ? ;
.data:00414C1E                 db    ? ;
.data:00414C1F                 db    ? ;
.data:00414C20                 db    ? ;
.data:00414C21                 db    ? ;
.data:00414C22                 db    ? ;
.data:00414C23                 db    ? ;
.data:00414C24                 db    ? ;
.data:00414C25                 db    ? ;
.data:00414C26                 db    ? ;
.data:00414C27                 db    ? ;
.data:00414C28                 db    ? ;
.data:00414C29                 db    ? ;
.data:00414C2A                 db    ? ;
.data:00414C2B                 db    ? ;
.data:00414C2C                 db    ? ;
.data:00414C2D                 db    ? ;
.data:00414C2E                 db    ? ;
.data:00414C2F                 db    ? ;
.data:00414C30                 db    ? ;
.data:00414C31                 db    ? ;
.data:00414C32                 db    ? ;
.data:00414C33                 db    ? ;
.data:00414C34                 db    ? ;
.data:00414C35                 db    ? ;
.data:00414C36                 db    ? ;
.data:00414C37                 db    ? ;
.data:00414C38                 db    ? ;
.data:00414C39                 db    ? ;
.data:00414C3A                 db    ? ;
.data:00414C3B                 db    ? ;
.data:00414C3C                 db    ? ;
.data:00414C3D                 db    ? ;
.data:00414C3E                 db    ? ;
.data:00414C3F                 db    ? ;
.data:00414C40                 db    ? ;
.data:00414C41                 db    ? ;
.data:00414C42                 db    ? ;
.data:00414C43                 db    ? ;
.data:00414C44                 db    ? ;
.data:00414C45                 db    ? ;
.data:00414C46                 db    ? ;
.data:00414C47                 db    ? ;
.data:00414C48                 db    ? ;
.data:00414C49                 db    ? ;
.data:00414C4A                 db    ? ;
.data:00414C4B                 db    ? ;
.data:00414C4C                 db    ? ;
.data:00414C4D                 db    ? ;
.data:00414C4E                 db    ? ;
.data:00414C4F                 db    ? ;
.data:00414C50                 db    ? ;
.data:00414C51                 db    ? ;
.data:00414C52                 db    ? ;
.data:00414C53                 db    ? ;
.data:00414C54                 db    ? ;
.data:00414C55                 db    ? ;
.data:00414C56                 db    ? ;
.data:00414C57                 db    ? ;
.data:00414C58                 db    ? ;
.data:00414C59                 db    ? ;
.data:00414C5A                 db    ? ;
.data:00414C5B                 db    ? ;
.data:00414C5C                 db    ? ;
.data:00414C5D                 db    ? ;
.data:00414C5E                 db    ? ;
.data:00414C5F                 db    ? ;
.data:00414C60                 db    ? ;
.data:00414C61                 db    ? ;
.data:00414C62                 db    ? ;
.data:00414C63                 db    ? ;
.data:00414C64                 db    ? ;
.data:00414C65                 db    ? ;
.data:00414C66                 db    ? ;
.data:00414C67                 db    ? ;
.data:00414C68                 db    ? ;
.data:00414C69                 db    ? ;
.data:00414C6A                 db    ? ;
.data:00414C6B                 db    ? ;
.data:00414C6C                 db    ? ;
.data:00414C6D                 db    ? ;
.data:00414C6E                 db    ? ;
.data:00414C6F                 db    ? ;
.data:00414C70                 db    ? ;
.data:00414C71                 db    ? ;
.data:00414C72                 db    ? ;
.data:00414C73                 db    ? ;
.data:00414C74                 db    ? ;
.data:00414C75                 db    ? ;
.data:00414C76                 db    ? ;
.data:00414C77                 db    ? ;
.data:00414C78                 db    ? ;
.data:00414C79                 db    ? ;
.data:00414C7A                 db    ? ;
.data:00414C7B                 db    ? ;
.data:00414C7C                 db    ? ;
.data:00414C7D                 db    ? ;
.data:00414C7E                 db    ? ;
.data:00414C7F                 db    ? ;
.data:00414C80                 db    ? ;
.data:00414C81                 db    ? ;
.data:00414C82                 db    ? ;
.data:00414C83                 db    ? ;
.data:00414C84                 db    ? ;
.data:00414C85                 db    ? ;
.data:00414C86                 db    ? ;
.data:00414C87                 db    ? ;
.data:00414C88                 db    ? ;
.data:00414C89                 db    ? ;
.data:00414C8A                 db    ? ;
.data:00414C8B                 db    ? ;
.data:00414C8C                 db    ? ;
.data:00414C8D                 db    ? ;
.data:00414C8E                 db    ? ;
.data:00414C8F                 db    ? ;
.data:00414C90                 db    ? ;
.data:00414C91                 db    ? ;
.data:00414C92                 db    ? ;
.data:00414C93                 db    ? ;
.data:00414C94                 db    ? ;
.data:00414C95                 db    ? ;
.data:00414C96                 db    ? ;
.data:00414C97                 db    ? ;
.data:00414C98                 db    ? ;
.data:00414C99                 db    ? ;
.data:00414C9A                 db    ? ;
.data:00414C9B                 db    ? ;
.data:00414C9C word_414C9C     dw ?                    ; DATA XREF: ___report_gsfailure+51↑w
.data:00414C9C                                         ; ___report_rangecheckfailure+4B↑w
.data:00414C9E                 align 10h
.data:00414CA0 word_414CA0     dw ?                    ; DATA XREF: ___report_gsfailure+4A↑w
.data:00414CA0                                         ; ___report_rangecheckfailure+44↑w
.data:00414CA2                 align 4
.data:00414CA4 word_414CA4     dw ?                    ; DATA XREF: ___report_gsfailure+43↑w
.data:00414CA4                                         ; ___report_rangecheckfailure+3D↑w
.data:00414CA6                 align 4
.data:00414CA8 word_414CA8     dw ?                    ; DATA XREF: ___report_gsfailure+3C↑w
.data:00414CA8                                         ; ___report_rangecheckfailure+36↑w
.data:00414CAA                 align 4
.data:00414CAC dword_414CAC    dd ?                    ; DATA XREF: ___report_gsfailure+28↑w
.data:00414CAC                                         ; ___report_rangecheckfailure+22↑w
.data:00414CB0 dword_414CB0    dd ?                    ; DATA XREF: ___report_gsfailure+22↑w
.data:00414CB0                                         ; ___report_rangecheckfailure+1C↑w
.data:00414CB4 dword_414CB4    dd ?                    ; DATA XREF: ___report_gsfailure+1C↑w
.data:00414CB4                                         ; ___report_rangecheckfailure+16↑w
.data:00414CB8 dword_414CB8    dd ?                    ; DATA XREF: ___report_gsfailure+16↑w
.data:00414CB8                                         ; ___report_rangecheckfailure+10↑w
.data:00414CBC dword_414CBC    dd ?                    ; DATA XREF: ___report_gsfailure+10↑w
.data:00414CBC                                         ; ___report_rangecheckfailure+A↑w
.data:00414CC0 dword_414CC0    dd ?                    ; DATA XREF: ___report_gsfailure+B↑w
.data:00414CC0                                         ; ___report_rangecheckfailure+5↑w
.data:00414CC4 dword_414CC4    dd ?                    ; DATA XREF: ___report_gsfailure+62↑w
.data:00414CC8 dword_414CC8    dd ?                    ; DATA XREF: ___report_gsfailure+6A↑w
.data:00414CC8                                         ; ___report_gsfailure+87↑r ...
.data:00414CCC word_414CCC     dw ?                    ; DATA XREF: ___report_gsfailure+35↑w
.data:00414CCC                                         ; ___report_rangecheckfailure+2F↑w
.data:00414CCE                 align 10h
.data:00414CD0 dword_414CD0    dd ?                    ; DATA XREF: ___report_gsfailure+59↑w
.data:00414CD0                                         ; ___report_rangecheckfailure+53↑w
.data:00414CD4 dword_414CD4    dd ?                    ; DATA XREF: ___report_gsfailure+72↑w
.data:00414CD4                                         ; ___report_rangecheckfailure+71↑w
.data:00414CD8 word_414CD8     dw ?                    ; DATA XREF: ___report_gsfailure+2E↑w
.data:00414CD8                                         ; ___report_rangecheckfailure+28↑w
.data:00414CDA                 db    ? ;
.data:00414CDB                 db    ? ;
.data:00414CDC                 db    ? ;
.data:00414CDD                 db    ? ;
.data:00414CDE                 db    ? ;
.data:00414CDF                 db    ? ;
.data:00414CE0                 db    ? ;
.data:00414CE1                 db    ? ;
.data:00414CE2                 db    ? ;
.data:00414CE3                 db    ? ;
.data:00414CE4                 db    ? ;
.data:00414CE5                 db    ? ;
.data:00414CE6                 db    ? ;
.data:00414CE7                 db    ? ;
.data:00414CE8                 db    ? ;
.data:00414CE9                 db    ? ;
.data:00414CEA                 db    ? ;
.data:00414CEB                 db    ? ;
.data:00414CEC                 db    ? ;
.data:00414CED                 db    ? ;
.data:00414CEE                 db    ? ;
.data:00414CEF                 db    ? ;
.data:00414CF0                 db    ? ;
.data:00414CF1                 db    ? ;
.data:00414CF2                 db    ? ;
.data:00414CF3                 db    ? ;
.data:00414CF4                 db    ? ;
.data:00414CF5                 db    ? ;
.data:00414CF6                 db    ? ;
.data:00414CF7                 db    ? ;
.data:00414CF8                 db    ? ;
.data:00414CF9                 db    ? ;
.data:00414CFA                 db    ? ;
.data:00414CFB                 db    ? ;
.data:00414CFC                 db    ? ;
.data:00414CFD                 db    ? ;
.data:00414CFE                 db    ? ;
.data:00414CFF                 db    ? ;
.data:00414D00                 db    ? ;
.data:00414D01                 db    ? ;
.data:00414D02                 db    ? ;
.data:00414D03                 db    ? ;
.data:00414D04                 db    ? ;
.data:00414D05                 db    ? ;
.data:00414D06                 db    ? ;
.data:00414D07                 db    ? ;
.data:00414D08                 db    ? ;
.data:00414D09                 db    ? ;
.data:00414D0A                 db    ? ;
.data:00414D0B                 db    ? ;
.data:00414D0C                 db    ? ;
.data:00414D0D                 db    ? ;
.data:00414D0E                 db    ? ;
.data:00414D0F                 db    ? ;
.data:00414D10                 db    ? ;
.data:00414D11                 db    ? ;
.data:00414D12                 db    ? ;
.data:00414D13                 db    ? ;
.data:00414D14                 db    ? ;
.data:00414D15                 db    ? ;
.data:00414D16                 db    ? ;
.data:00414D17                 db    ? ;
.data:00414D18                 db    ? ;
.data:00414D19                 db    ? ;
.data:00414D1A                 db    ? ;
.data:00414D1B                 db    ? ;
.data:00414D1C                 db    ? ;
.data:00414D1D                 db    ? ;
.data:00414D1E                 db    ? ;
.data:00414D1F                 db    ? ;
.data:00414D20                 db    ? ;
.data:00414D21                 db    ? ;
.data:00414D22                 db    ? ;
.data:00414D23                 db    ? ;
.data:00414D24                 db    ? ;
.data:00414D25                 db    ? ;
.data:00414D26                 db    ? ;
.data:00414D27                 db    ? ;
.data:00414D28                 db    ? ;
.data:00414D29                 db    ? ;
.data:00414D2A                 db    ? ;
.data:00414D2B                 db    ? ;
.data:00414D2C                 db    ? ;
.data:00414D2D                 db    ? ;
.data:00414D2E                 db    ? ;
.data:00414D2F                 db    ? ;
.data:00414D30                 db    ? ;
.data:00414D31                 db    ? ;
.data:00414D32                 db    ? ;
.data:00414D33                 db    ? ;
.data:00414D34                 db    ? ;
.data:00414D35                 db    ? ;
.data:00414D36                 db    ? ;
.data:00414D37                 db    ? ;
.data:00414D38                 db    ? ;
.data:00414D39                 db    ? ;
.data:00414D3A                 db    ? ;
.data:00414D3B                 db    ? ;
.data:00414D3C                 db    ? ;
.data:00414D3D                 db    ? ;
.data:00414D3E                 db    ? ;
.data:00414D3F                 db    ? ;
.data:00414D40                 db    ? ;
.data:00414D41                 db    ? ;
.data:00414D42                 db    ? ;
.data:00414D43                 db    ? ;
.data:00414D44                 db    ? ;
.data:00414D45                 db    ? ;
.data:00414D46                 db    ? ;
.data:00414D47                 db    ? ;
.data:00414D48                 db    ? ;
.data:00414D49                 db    ? ;
.data:00414D4A                 db    ? ;
.data:00414D4B                 db    ? ;
.data:00414D4C                 db    ? ;
.data:00414D4D                 db    ? ;
.data:00414D4E                 db    ? ;
.data:00414D4F                 db    ? ;
.data:00414D50                 db    ? ;
.data:00414D51                 db    ? ;
.data:00414D52                 db    ? ;
.data:00414D53                 db    ? ;
.data:00414D54                 db    ? ;
.data:00414D55                 db    ? ;
.data:00414D56                 db    ? ;
.data:00414D57                 db    ? ;
.data:00414D58                 db    ? ;
.data:00414D59                 db    ? ;
.data:00414D5A                 db    ? ;
.data:00414D5B                 db    ? ;
.data:00414D5C                 db    ? ;
.data:00414D5D                 db    ? ;
.data:00414D5E                 db    ? ;
.data:00414D5F                 db    ? ;
.data:00414D60                 db    ? ;
.data:00414D61                 db    ? ;
.data:00414D62                 db    ? ;
.data:00414D63                 db    ? ;
.data:00414D64                 db    ? ;
.data:00414D65                 db    ? ;
.data:00414D66                 db    ? ;
.data:00414D67                 db    ? ;
.data:00414D68                 db    ? ;
.data:00414D69                 db    ? ;
.data:00414D6A                 db    ? ;
.data:00414D6B                 db    ? ;
.data:00414D6C                 db    ? ;
.data:00414D6D                 db    ? ;
.data:00414D6E                 db    ? ;
.data:00414D6F                 db    ? ;
.data:00414D70                 db    ? ;
.data:00414D71                 db    ? ;
.data:00414D72                 db    ? ;
.data:00414D73                 db    ? ;
.data:00414D74                 db    ? ;
.data:00414D75                 db    ? ;
.data:00414D76                 db    ? ;
.data:00414D77                 db    ? ;
.data:00414D78                 db    ? ;
.data:00414D79                 db    ? ;
.data:00414D7A                 db    ? ;
.data:00414D7B                 db    ? ;
.data:00414D7C                 db    ? ;
.data:00414D7D                 db    ? ;
.data:00414D7E                 db    ? ;
.data:00414D7F                 db    ? ;
.data:00414D80                 db    ? ;
.data:00414D81                 db    ? ;
.data:00414D82                 db    ? ;
.data:00414D83                 db    ? ;
.data:00414D84                 db    ? ;
.data:00414D85                 db    ? ;
.data:00414D86                 db    ? ;
.data:00414D87                 db    ? ;
.data:00414D88                 db    ? ;
.data:00414D89                 db    ? ;
.data:00414D8A                 db    ? ;
.data:00414D8B                 db    ? ;
.data:00414D8C                 db    ? ;
.data:00414D8D                 db    ? ;
.data:00414D8E                 db    ? ;
.data:00414D8F                 db    ? ;
.data:00414D90                 db    ? ;
.data:00414D91                 db    ? ;
.data:00414D92                 db    ? ;
.data:00414D93                 db    ? ;
.data:00414D94                 db    ? ;
.data:00414D95                 db    ? ;
.data:00414D96                 db    ? ;
.data:00414D97                 db    ? ;
.data:00414D98                 db    ? ;
.data:00414D99                 db    ? ;
.data:00414D9A                 db    ? ;
.data:00414D9B                 db    ? ;
.data:00414D9C                 db    ? ;
.data:00414D9D                 db    ? ;
.data:00414D9E                 db    ? ;
.data:00414D9F                 db    ? ;
.data:00414DA0                 db    ? ;
.data:00414DA1                 db    ? ;
.data:00414DA2                 db    ? ;
.data:00414DA3                 db    ? ;
.data:00414DA4                 db    ? ;
.data:00414DA5                 db    ? ;
.data:00414DA6                 db    ? ;
.data:00414DA7                 db    ? ;
.data:00414DA8                 db    ? ;
.data:00414DA9                 db    ? ;
.data:00414DAA                 db    ? ;
.data:00414DAB                 db    ? ;
.data:00414DAC                 db    ? ;
.data:00414DAD                 db    ? ;
.data:00414DAE                 db    ? ;
.data:00414DAF                 db    ? ;
.data:00414DB0                 db    ? ;
.data:00414DB1                 db    ? ;
.data:00414DB2                 db    ? ;
.data:00414DB3                 db    ? ;
.data:00414DB4                 db    ? ;
.data:00414DB5                 db    ? ;
.data:00414DB6                 db    ? ;
.data:00414DB7                 db    ? ;
.data:00414DB8                 db    ? ;
.data:00414DB9                 db    ? ;
.data:00414DBA                 db    ? ;
.data:00414DBB                 db    ? ;
.data:00414DBC                 db    ? ;
.data:00414DBD                 db    ? ;
.data:00414DBE                 db    ? ;
.data:00414DBF                 db    ? ;
.data:00414DC0                 db    ? ;
.data:00414DC1                 db    ? ;
.data:00414DC2                 db    ? ;
.data:00414DC3                 db    ? ;
.data:00414DC4                 db    ? ;
.data:00414DC5                 db    ? ;
.data:00414DC6                 db    ? ;
.data:00414DC7                 db    ? ;
.data:00414DC8                 db    ? ;
.data:00414DC9                 db    ? ;
.data:00414DCA                 db    ? ;
.data:00414DCB                 db    ? ;
.data:00414DCC                 db    ? ;
.data:00414DCD                 db    ? ;
.data:00414DCE                 db    ? ;
.data:00414DCF                 db    ? ;
.data:00414DD0                 db    ? ;
.data:00414DD1                 db    ? ;
.data:00414DD2                 db    ? ;
.data:00414DD3                 db    ? ;
.data:00414DD4                 db    ? ;
.data:00414DD5                 db    ? ;
.data:00414DD6                 db    ? ;
.data:00414DD7                 db    ? ;
.data:00414DD8                 db    ? ;
.data:00414DD9                 db    ? ;
.data:00414DDA                 db    ? ;
.data:00414DDB                 db    ? ;
.data:00414DDC                 db    ? ;
.data:00414DDD                 db    ? ;
.data:00414DDE                 db    ? ;
.data:00414DDF                 db    ? ;
.data:00414DE0                 db    ? ;
.data:00414DE1                 db    ? ;
.data:00414DE2                 db    ? ;
.data:00414DE3                 db    ? ;
.data:00414DE4                 db    ? ;
.data:00414DE5                 db    ? ;
.data:00414DE6                 db    ? ;
.data:00414DE7                 db    ? ;
.data:00414DE8                 db    ? ;
.data:00414DE9                 db    ? ;
.data:00414DEA                 db    ? ;
.data:00414DEB                 db    ? ;
.data:00414DEC                 db    ? ;
.data:00414DED                 db    ? ;
.data:00414DEE                 db    ? ;
.data:00414DEF                 db    ? ;
.data:00414DF0                 db    ? ;
.data:00414DF1                 db    ? ;
.data:00414DF2                 db    ? ;
.data:00414DF3                 db    ? ;
.data:00414DF4                 db    ? ;
.data:00414DF5                 db    ? ;
.data:00414DF6                 db    ? ;
.data:00414DF7                 db    ? ;
.data:00414DF8                 db    ? ;
.data:00414DF9                 db    ? ;
.data:00414DFA                 db    ? ;
.data:00414DFB                 db    ? ;
.data:00414DFC                 db    ? ;
.data:00414DFD                 db    ? ;
.data:00414DFE                 db    ? ;
.data:00414DFF                 db    ? ;
.data:00414E00                 db    ? ;
.data:00414E01                 db    ? ;
.data:00414E02                 db    ? ;
.data:00414E03                 db    ? ;
.data:00414E04                 db    ? ;
.data:00414E05                 db    ? ;
.data:00414E06                 db    ? ;
.data:00414E07                 db    ? ;
.data:00414E08                 db    ? ;
.data:00414E09                 db    ? ;
.data:00414E0A                 db    ? ;
.data:00414E0B                 db    ? ;
.data:00414E0C                 db    ? ;
.data:00414E0D                 db    ? ;
.data:00414E0E                 db    ? ;
.data:00414E0F                 db    ? ;
.data:00414E10                 db    ? ;
.data:00414E11                 db    ? ;
.data:00414E12                 db    ? ;
.data:00414E13                 db    ? ;
.data:00414E14                 db    ? ;
.data:00414E15                 db    ? ;
.data:00414E16                 db    ? ;
.data:00414E17                 db    ? ;
.data:00414E18                 db    ? ;
.data:00414E19                 db    ? ;
.data:00414E1A                 db    ? ;
.data:00414E1B                 db    ? ;
.data:00414E1C                 db    ? ;
.data:00414E1D                 db    ? ;
.data:00414E1E                 db    ? ;
.data:00414E1F                 db    ? ;
.data:00414E20                 db    ? ;
.data:00414E21                 db    ? ;
.data:00414E22                 db    ? ;
.data:00414E23                 db    ? ;
.data:00414E24                 db    ? ;
.data:00414E25                 db    ? ;
.data:00414E26                 db    ? ;
.data:00414E27                 db    ? ;
.data:00414E28                 db    ? ;
.data:00414E29                 db    ? ;
.data:00414E2A                 db    ? ;
.data:00414E2B                 db    ? ;
.data:00414E2C                 db    ? ;
.data:00414E2D                 db    ? ;
.data:00414E2E                 db    ? ;
.data:00414E2F                 db    ? ;
.data:00414E30                 db    ? ;
.data:00414E31                 db    ? ;
.data:00414E32                 db    ? ;
.data:00414E33                 db    ? ;
.data:00414E34                 db    ? ;
.data:00414E35                 db    ? ;
.data:00414E36                 db    ? ;
.data:00414E37                 db    ? ;
.data:00414E38                 db    ? ;
.data:00414E39                 db    ? ;
.data:00414E3A                 db    ? ;
.data:00414E3B                 db    ? ;
.data:00414E3C                 db    ? ;
.data:00414E3D                 db    ? ;
.data:00414E3E                 db    ? ;
.data:00414E3F                 db    ? ;
.data:00414E40                 db    ? ;
.data:00414E41                 db    ? ;
.data:00414E42                 db    ? ;
.data:00414E43                 db    ? ;
.data:00414E44                 db    ? ;
.data:00414E45                 db    ? ;
.data:00414E46                 db    ? ;
.data:00414E47                 db    ? ;
.data:00414E48                 db    ? ;
.data:00414E49                 db    ? ;
.data:00414E4A                 db    ? ;
.data:00414E4B                 db    ? ;
.data:00414E4C                 db    ? ;
.data:00414E4D                 db    ? ;
.data:00414E4E                 db    ? ;
.data:00414E4F                 db    ? ;
.data:00414E50                 db    ? ;
.data:00414E51                 db    ? ;
.data:00414E52                 db    ? ;
.data:00414E53                 db    ? ;
.data:00414E54                 db    ? ;
.data:00414E55                 db    ? ;
.data:00414E56                 db    ? ;
.data:00414E57                 db    ? ;
.data:00414E58                 db    ? ;
.data:00414E59                 db    ? ;
.data:00414E5A                 db    ? ;
.data:00414E5B                 db    ? ;
.data:00414E5C                 db    ? ;
.data:00414E5D                 db    ? ;
.data:00414E5E                 db    ? ;
.data:00414E5F                 db    ? ;
.data:00414E60                 db    ? ;
.data:00414E61                 db    ? ;
.data:00414E62                 db    ? ;
.data:00414E63                 db    ? ;
.data:00414E64                 db    ? ;
.data:00414E65                 db    ? ;
.data:00414E66                 db    ? ;
.data:00414E67                 db    ? ;
.data:00414E68                 db    ? ;
.data:00414E69                 db    ? ;
.data:00414E6A                 db    ? ;
.data:00414E6B                 db    ? ;
.data:00414E6C                 db    ? ;
.data:00414E6D                 db    ? ;
.data:00414E6E                 db    ? ;
.data:00414E6F                 db    ? ;
.data:00414E70                 db    ? ;
.data:00414E71                 db    ? ;
.data:00414E72                 db    ? ;
.data:00414E73                 db    ? ;
.data:00414E74                 db    ? ;
.data:00414E75                 db    ? ;
.data:00414E76                 db    ? ;
.data:00414E77                 db    ? ;
.data:00414E78                 db    ? ;
.data:00414E79                 db    ? ;
.data:00414E7A                 db    ? ;
.data:00414E7B                 db    ? ;
.data:00414E7C                 db    ? ;
.data:00414E7D                 db    ? ;
.data:00414E7E                 db    ? ;
.data:00414E7F                 db    ? ;
.data:00414E80                 db    ? ;
.data:00414E81                 db    ? ;
.data:00414E82                 db    ? ;
.data:00414E83                 db    ? ;
.data:00414E84                 db    ? ;
.data:00414E85                 db    ? ;
.data:00414E86                 db    ? ;
.data:00414E87                 db    ? ;
.data:00414E88                 db    ? ;
.data:00414E89                 db    ? ;
.data:00414E8A                 db    ? ;
.data:00414E8B                 db    ? ;
.data:00414E8C                 db    ? ;
.data:00414E8D                 db    ? ;
.data:00414E8E                 db    ? ;
.data:00414E8F                 db    ? ;
.data:00414E90                 db    ? ;
.data:00414E91                 db    ? ;
.data:00414E92                 db    ? ;
.data:00414E93                 db    ? ;
.data:00414E94                 db    ? ;
.data:00414E95                 db    ? ;
.data:00414E96                 db    ? ;
.data:00414E97                 db    ? ;
.data:00414E98                 db    ? ;
.data:00414E99                 db    ? ;
.data:00414E9A                 db    ? ;
.data:00414E9B                 db    ? ;
.data:00414E9C                 db    ? ;
.data:00414E9D                 db    ? ;
.data:00414E9E                 db    ? ;
.data:00414E9F                 db    ? ;
.data:00414EA0                 db    ? ;
.data:00414EA1                 db    ? ;
.data:00414EA2                 db    ? ;
.data:00414EA3                 db    ? ;
.data:00414EA4                 db    ? ;
.data:00414EA5                 db    ? ;
.data:00414EA6                 db    ? ;
.data:00414EA7                 db    ? ;
.data:00414EA8                 db    ? ;
.data:00414EA9                 db    ? ;
.data:00414EAA                 db    ? ;
.data:00414EAB                 db    ? ;
.data:00414EAC                 db    ? ;
.data:00414EAD                 db    ? ;
.data:00414EAE                 db    ? ;
.data:00414EAF                 db    ? ;
.data:00414EB0                 db    ? ;
.data:00414EB1                 db    ? ;
.data:00414EB2                 db    ? ;
.data:00414EB3                 db    ? ;
.data:00414EB4                 db    ? ;
.data:00414EB5                 db    ? ;
.data:00414EB6                 db    ? ;
.data:00414EB7                 db    ? ;
.data:00414EB8                 db    ? ;
.data:00414EB9                 db    ? ;
.data:00414EBA                 db    ? ;
.data:00414EBB                 db    ? ;
.data:00414EBC                 db    ? ;
.data:00414EBD                 db    ? ;
.data:00414EBE                 db    ? ;
.data:00414EBF                 db    ? ;
.data:00414EC0                 db    ? ;
.data:00414EC1                 db    ? ;
.data:00414EC2                 db    ? ;
.data:00414EC3                 db    ? ;
.data:00414EC4                 db    ? ;
.data:00414EC5                 db    ? ;
.data:00414EC6                 db    ? ;
.data:00414EC7                 db    ? ;
.data:00414EC8                 db    ? ;
.data:00414EC9                 db    ? ;
.data:00414ECA                 db    ? ;
.data:00414ECB                 db    ? ;
.data:00414ECC                 db    ? ;
.data:00414ECD                 db    ? ;
.data:00414ECE                 db    ? ;
.data:00414ECF                 db    ? ;
.data:00414ED0                 db    ? ;
.data:00414ED1                 db    ? ;
.data:00414ED2                 db    ? ;
.data:00414ED3                 db    ? ;
.data:00414ED4                 db    ? ;
.data:00414ED5                 db    ? ;
.data:00414ED6                 db    ? ;
.data:00414ED7                 db    ? ;
.data:00414ED8                 db    ? ;
.data:00414ED9                 db    ? ;
.data:00414EDA                 db    ? ;
.data:00414EDB                 db    ? ;
.data:00414EDC dword_414EDC    dd ?                    ; DATA XREF: pre_c_init+97↑r
.data:00414EE0 dword_414EE0    dd ?                    ; DATA XREF: pre_cpp_init+A↑r
.data:00414EE4 dword_414EE4    dd ?                    ; DATA XREF: pre_cpp_init↑r
.data:00414EE8 dword_414EE8    dd ?                    ; DATA XREF: pre_c_init+89↑r
.data:00414EEC dword_414EEC    dd ?                    ; DATA XREF: ArgApplyRules(int)+381↑w
.data:00414EEC                                         ; .data:off_413018↑o
.data:00414EF0 dword_414EF0    dd ?                    ; DATA XREF: ArgApplyRules(int)+391↑w
.data:00414EF4 dword_414EF4    dd ?                    ; DATA XREF: ArgApplyRules(int)+39B↑w
.data:00414EF8 dword_414EF8    dd ?                    ; DATA XREF: ArgApplyRules(int)+3A5↑w
.data:00414EFC dword_414EFC    dd ?                    ; DATA XREF: ArgApplyRules(int)+3AF↑w
.data:00414F00 dword_414F00    dd ?                    ; DATA XREF: _wmain+155↑w
.data:00414F00                                         ; _wmain:loc_408651↑w ...
.data:00414F04 dword_414F04    dd ?                    ; DATA XREF: _wmain+145↑w
.data:00414F08 dword_414F08    dd ?                    ; DATA XREF: _wmain+110↑w
.data:00414F08                                         ; _wmain+11B↑r ...
.data:00414F0C dword_414F0C    dd ?                    ; DATA XREF: sub_40ED60+A↑o
.data:00414F0C                                         ; sub_40ED60+1F↑w ...
.data:00414F10 dword_414F10    dd ?                    ; DATA XREF: sub_40ED60+1A↑w
.data:00414F10                                         ; sub_40ED60:loc_40ED87↑r ...
.data:00414F14 dword_414F14    dd ?                    ; DATA XREF: sub_4056A0+9↑o
.data:00414F14                                         ; sub_4056A0+1F↑w ...
.data:00414F18 dword_414F18    dd ?                    ; DATA XREF: sub_4056A0+19↑w
.data:00414F18                                         ; sub_4056A0:loc_4056C7↑r ...
.data:00414F1C ; BSTR bstrString
.data:00414F1C bstrString      dd ?                    ; DATA XREF: _wmain+CB↑w
.data:00414F1C                                         ; _wmain+1F2↑r ...
.data:00414F20 dword_414F20    dd ?                    ; DATA XREF: ArgApplyRules(int)+B5↑w
.data:00414F20                                         ; .data:off_413128↑o
.data:00414F24 dword_414F24    dd ?                    ; DATA XREF: ArgApplyRules(int)+C5↑w
.data:00414F28 dword_414F28    dd ?                    ; DATA XREF: ArgApplyRules(int)+CF↑w
.data:00414F2C dword_414F2C    dd ?                    ; DATA XREF: ArgApplyRules(int)+D9↑w
.data:00414F30 dword_414F30    dd ?                    ; DATA XREF: ArgApplyRules(int)+E3↑w
.data:00414F34 dword_414F34    dd ?                    ; DATA XREF: ArgApplyRules(int)+ED↑w
.data:00414F38 dword_414F38    dd ?                    ; DATA XREF: ArgApplyRules(int)+1AF↑w
.data:00414F38                                         ; .data:off_4130F8↑o
.data:00414F3C dword_414F3C    dd ?                    ; DATA XREF: ArgApplyRules(int)+1BF↑w
.data:00414F40 dword_414F40    dd ?                    ; DATA XREF: ArgApplyRules(int)+1C9↑w
.data:00414F44 dword_414F44    dd ?                    ; DATA XREF: ArgApplyRules(int)+1D3↑w
.data:00414F48 dword_414F48    dd ?                    ; DATA XREF: ArgApplyRules(int)+1DD↑w
.data:00414F4C dword_414F4C    dd ?                    ; DATA XREF: ArgApplyRules(int)+1E7↑w
.data:00414F50 dword_414F50    dd ?                    ; DATA XREF: ArgApplyRules(int)+235↑w
.data:00414F50                                         ; .data:off_413110↑o
.data:00414F54 dword_414F54    dd ?                    ; DATA XREF: ArgApplyRules(int)+245↑w
.data:00414F58 dword_414F58    dd ?                    ; DATA XREF: ArgApplyRules(int)+24F↑w
.data:00414F5C dword_414F5C    dd ?                    ; DATA XREF: ArgApplyRules(int)+259↑w
.data:00414F60 dword_414F60    dd ?                    ; DATA XREF: ArgApplyRules(int)+263↑w
.data:00414F64 dword_414F64    dd ?                    ; DATA XREF: ArgApplyRules(int)+26D↑w
.data:00414F68 dword_414F68    dd ?                    ; DATA XREF: ArgApplyRules(int)+277↑w
.data:00414F6C dword_414F6C    dd ?                    ; DATA XREF: ArgApplyRules(int)+281↑w
.data:00414F70 dword_414F70    dd ?                    ; DATA XREF: ArgApplyRules(int)+28B↑w
.data:00414F74 dword_414F74    dd ?                    ; DATA XREF: ArgApplyRules(int)+295↑w
.data:00414F78 dword_414F78    dd ?                    ; DATA XREF: ArgApplyRules(int)+29F↑w
.data:00414F7C dword_414F7C    dd ?                    ; DATA XREF: ArgApplyRules(int)+2A9↑w
.data:00414F80 dword_414F80    dd ?                    ; DATA XREF: ArgApplyRules(int)+2A↑w
.data:00414F80                                         ; .data:off_4130E0↑o
.data:00414F84 dword_414F84    dd ?                    ; DATA XREF: ArgApplyRules(int)+3A↑w
.data:00414F88 dword_414F88    dd ?                    ; DATA XREF: ArgApplyRules(int)+44↑w
.data:00414F8C dword_414F8C    dd ?                    ; DATA XREF: ArgApplyRules(int)+4E↑w
.data:00414F90 dword_414F90    dd ?                    ; DATA XREF: ArgApplyRules(int)+58↑w
.data:00414F94 dword_414F94    dd ?                    ; DATA XREF: ArgApplyRules(int)+62↑w
.data:00414F98 dword_414F98    dd ?                    ; DATA XREF: ArgApplyRules(int)+6C↑w
.data:00414F9C dword_414F9C    dd ?                    ; DATA XREF: ArgApplyRules(int)+76↑w
.data:00414FA0 dword_414FA0    dd ?                    ; DATA XREF: ArgApplyRules(int)+3FA↑w
.data:00414FA0                                         ; .data:off_413000↑o
.data:00414FA4 dword_414FA4    dd ?                    ; DATA XREF: ArgApplyRules(int)+40A↑w
.data:00414FA8 dword_414FA8    dd ?                    ; DATA XREF: ArgApplyRules(int)+414↑w
.data:00414FAC dword_414FAC    dd ?                    ; DATA XREF: ArgApplyRules(int)+41E↑w
.data:00414FB0 dword_414FB0    dd ?                    ; DATA XREF: ArgApplyRules(int)+428↑w
.data:00414FB4 dword_414FB4    dd ?                    ; DATA XREF: ArgApplyRules(int)+432↑w
.data:00414FB8 dword_414FB8    dd ?                    ; DATA XREF: ArgApplyRules(int)+43C↑w
.data:00414FBC dword_414FBC    dd ?                    ; DATA XREF: ArgApplyRules(int)+446↑w
.data:00414FC0 dword_414FC0    dd ?                    ; DATA XREF: ArgApplyRules(int)+2F4↑w
.data:00414FC0                                         ; .data:off_413048↑o
.data:00414FC4 dword_414FC4    dd ?                    ; DATA XREF: ArgApplyRules(int)+304↑w
.data:00414FC8 dword_414FC8    dd ?                    ; DATA XREF: ArgApplyRules(int)+30E↑w
.data:00414FCC dword_414FCC    dd ?                    ; DATA XREF: ArgApplyRules(int)+318↑w
.data:00414FD0 dword_414FD0    dd ?                    ; DATA XREF: ArgApplyRules(int)+322↑w
.data:00414FD4 dword_414FD4    dd ?                    ; DATA XREF: ArgApplyRules(int)+32C↑w
.data:00414FD8 dword_414FD8    dd ?                    ; DATA XREF: ArgApplyRules(int)+336↑w
.data:00414FDC dword_414FDC    dd ?                    ; DATA XREF: ArgApplyRules(int)+134↑w
.data:00414FDC                                         ; .data:off_413030↑o
.data:00414FE0 dword_414FE0    dd ?                    ; DATA XREF: ArgApplyRules(int)+141↑w
.data:00414FE4 dword_414FE4    dd ?                    ; DATA XREF: ArgApplyRules(int)+14C↑w
.data:00414FE8 dword_414FE8    dd ?                    ; DATA XREF: ArgApplyRules(int)+156↑w
.data:00414FEC dword_414FEC    dd ?                    ; DATA XREF: ArgApplyRules(int)+160↑w
.data:00414FF0 dword_414FF0    dd ?                    ; DATA XREF: ArgApplyRules(int)+16A↑w
.data:00414FF4 dword_414FF4    dd ?                    ; DATA XREF: ArgApplyRules(int)+174↑w
.data:00414FF8 dword_414FF8    dd ?                    ; DATA XREF: sub_40E842:loc_40E882↑r
.data:00414FF8                                         ; sub_40FF6D:loc_410070↑r ...
.data:00414FFC dword_414FFC    dd ?                    ; DATA XREF: sub_4056A0+5F↑r
.data:00414FFC                                         ; sub_4056A0+6B↑w ...
.data:00415000 ; UINT uID
.data:00415000 uID             dd ?                    ; DATA XREF: ArgApplyRules(int)+9E5↑w
.data:00415000                                         ; sub_40F694:loc_40F75C↑r ...
.data:00415004 ; HMODULE hLibModule
.data:00415004 hLibModule      dd ?                    ; DATA XREF: sub_40EC2D+12↑r
.data:00415004                                         ; sub_40EC2D+93↑o ...
.data:00415008 word_415008     dw ?                    ; DATA XREF: sub_40F543+109↑r
.data:00415008                                         ; sub_40F694+8F↑r ...
.data:0041500A                 align 4
.data:0041500C dword_41500C    dd ?                    ; DATA XREF: sub_40FCFE+1E↑r
.data:0041500C                                         ; sub_40FCFE+2E↑r ...
.data:00415010                 db    ? ;
.data:00415011                 db    ? ;
.data:00415012                 db    ? ;
.data:00415013                 db    ? ;
.data:00415014 ; int Val
.data:00415014 Val             dd ?                    ; DATA XREF: GetOSType+16↑r
.data:00415014                                         ; GetOSType+70↑w ...
.data:00415018 word_415018     dw ?                    ; DATA XREF: GetInstallLanguage+14↑r
.data:00415018                                         ; GetInstallLanguage+95↑w ...
.data:0041501A                 align 4
.data:0041501C dword_41501C    dd ?                    ; DATA XREF: ArgApplyRules(int)+13↑r
.data:0041501C                                         ; ArgApplyRules(int)+34↑w ...
.data:00415020 dword_415020    dd ?                    ; DATA XREF: LoadMUILibraryW(x,x,x)+37↑w
.data:00415020                                         ; LoadMUILibraryW(x,x,x)+57↑r ...
.data:00415024 dword_415024    dd ?                    ; DATA XREF: pre_c_init+73↑w
.data:00415028 dword_415028    dd ?                    ; DATA XREF: pre_c_init+7A↑w
.data:0041502C unk_41502C      db    ? ;               ; DATA XREF: start:loc_4123CF↑o
.data:0041502C                                         ; start-100↑o
.data:0041502D                 db    ? ;
.data:0041502E                 db    ? ;
.data:0041502F                 db    ? ;
.data:00415030 dword_415030    dd ?                    ; DATA XREF: start:loc_4123FB↑r
.data:00415030                                         ; start:loc_41240D↑r ...
.data:00415034 ; char pTarget[]
.data:00415034 pTarget         dd ?                    ; DATA XREF: start:loc_412477↑r
.data:00415034                                         ; start-F0↑o ...
.data:00415038                 align 1000h
.data:00415038 _data           ends
.data:00415038
.idata:00416000 ; Section 3. (virtual address 00016000)
.idata:00416000 ; Virtual size                  : 00001544 (   5444.)
.idata:00416000 ; Section size in file          : 00001600 (   5632.)
.idata:00416000 ; Offset to raw data for section: 00013E00
.idata:00416000 ; Flags 40000040: Data Readable
.idata:00416000 ; Alignment     : default
.idata:00416000 ;
.idata:00416000 ; Imports from OLEAUT32.dll
.idata:00416000 ;
.idata:00416000 ; ===========================================================================
.idata:00416000
.idata:00416000 ; Segment type: Externs
.idata:00416000 ; _idata
.idata:00416000 ; HRESULT (__stdcall *SafeArrayDestroy)(SAFEARRAY *psa)
.idata:00416000                 extrn SafeArrayDestroy:dword
.idata:00416000                                         ; CODE XREF: sub_409D26+DD↑p
.idata:00416000                                         ; sub_409E12+247↑p ...
.idata:00416000                                         ; Import by ordinal 16
.idata:00416004 ; INT (__stdcall *SystemTimeToVariantTime)(LPSYSTEMTIME lpSystemTime, DOUBLE *pvtime)
.idata:00416004                 extrn SystemTimeToVariantTime:dword
.idata:00416004                                         ; CODE XREF: sub_40982F+B2↑p
.idata:00416004                                         ; sub_40982F+110↑p ...
.idata:00416004                                         ; Import by ordinal 184
.idata:00416008 ; void (__stdcall *VariantInit)(VARIANTARG *pvarg)
.idata:00416008                 extrn VariantInit:dword ; CODE XREF: _wmain+48↑p
.idata:00416008                                         ; sub_4091DF+34↑p ...
.idata:00416008                                         ; Import by ordinal 8
.idata:0041600C ; void (__stdcall *SysFreeString)(BSTR bstrString)
.idata:0041600C                 extrn SysFreeString:dword
.idata:0041600C                                         ; CODE XREF: _wmain+851↑p
.idata:0041600C                                         ; _wmain+861↑p ...
.idata:0041600C                                         ; Import by ordinal 6
.idata:00416010 ; BSTR (__stdcall *SysAllocString)(const OLECHAR *psz)
.idata:00416010                 extrn SysAllocString:dword
.idata:00416010                                         ; CODE XREF: _wmain+C5↑p
.idata:00416010                                         ; sub_4093C3+FE↑p ...
.idata:00416010                                         ; Import by ordinal 2
.idata:00416014 ; HRESULT (__stdcall *SafeArrayUnaccessData)(SAFEARRAY *psa)
.idata:00416014                 extrn SafeArrayUnaccessData:dword
.idata:00416014                                         ; CODE XREF: sub_409D26+CE↑p
.idata:00416014                                         ; DATA XREF: sub_409D26+CE↑r
.idata:00416014                                         ; Import by ordinal 24
.idata:00416018 ; SAFEARRAY *(__stdcall *SafeArrayCreateVector)(VARTYPE vt, LONG lLbound, ULONG cElements)
.idata:00416018                 extrn SafeArrayCreateVector:dword
.idata:00416018                                         ; CODE XREF: sub_409D26+4E↑p
.idata:00416018                                         ; sub_409E12+357↑p
.idata:00416018                                         ; DATA XREF: ...
.idata:00416018                                         ; Import by ordinal 411
.idata:0041601C ; HRESULT (__stdcall *SafeArrayAccessData)(SAFEARRAY *psa, void **ppvData)
.idata:0041601C                 extrn SafeArrayAccessData:dword
.idata:0041601C                                         ; CODE XREF: sub_409D26+66↑p
.idata:0041601C                                         ; sub_409E12+379↑p
.idata:0041601C                                         ; DATA XREF: ...
.idata:0041601C                                         ; Import by ordinal 23
.idata:00416020 ; HRESULT (__stdcall *VariantClear)(VARIANTARG *pvarg)
.idata:00416020                 extrn VariantClear:dword
.idata:00416020                                         ; CODE XREF: _wmain+7D2↑p
.idata:00416020                                         ; sub_4091DF+7F↑p ...
.idata:00416020                                         ; Import by ordinal 9
.idata:00416024 ; HRESULT (__stdcall *VarBstrFromDate)(DATE dateIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
.idata:00416024                 extrn VarBstrFromDate:dword
.idata:00416024                                         ; CODE XREF: sub_40FB64+A6↑p
.idata:00416024                                         ; DATA XREF: sub_40FB64+A6↑r
.idata:00416024                                         ; Import by ordinal 114
.idata:00416028 ; HRESULT (__stdcall *VariantChangeType)(VARIANTARG *pvargDest, const VARIANTARG *pvarSrc, USHORT wFlags, VARTYPE vt)
.idata:00416028                 extrn VariantChangeType:dword
.idata:00416028                                         ; CODE XREF: sub_410ACF+47↑p
.idata:00416028                                         ; DATA XREF: sub_410ACF+47↑r
.idata:00416028                                         ; Import by ordinal 12
.idata:0041602C ; HRESULT (__stdcall *VarDateFromStr)(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DATE *pdateOut)
.idata:0041602C                 extrn VarDateFromStr:dword
.idata:0041602C                                         ; CODE XREF: sub_410C7F+AB↑p
.idata:0041602C                                         ; DATA XREF: sub_410C7F+AB↑r
.idata:0041602C                                         ; Import by ordinal 94
.idata:00416030 ; INT (__stdcall *VariantTimeToSystemTime)(DOUBLE vtime, LPSYSTEMTIME lpSystemTime)
.idata:00416030                 extrn VariantTimeToSystemTime:dword
.idata:00416030                                         ; CODE XREF: sub_410C7F+C6↑p
.idata:00416030                                         ; DATA XREF: sub_410C7F+C6↑r
.idata:00416030                                         ; Import by ordinal 185
.idata:00416034
.idata:00416038 ;
.idata:00416038 ; Imports from SspiCli.dll
.idata:00416038 ;
.idata:00416038 ; BOOLEAN (__stdcall *GetUserNameExW)(EXTENDED_NAME_FORMAT NameFormat, LPWSTR lpNameBuffer, PULONG nSize)
.idata:00416038                 extrn GetUserNameExW:dword
.idata:00416038                                         ; CODE XREF: _wmain+2FA↑p
.idata:00416038                                         ; DATA XREF: _wmain+2FA↑r ...
.idata:0041603C
.idata:00416040 ;
.idata:00416040 ; Imports from api-ms-win-core-com-l1-1-1.dll
.idata:00416040 ;
.idata:00416040 ; HRESULT (__stdcall *CreateStreamOnHGlobal)(HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPSTREAM *ppstm)
.idata:00416040                 extrn CreateStreamOnHGlobal:dword
.idata:00416040                                         ; CODE XREF: sub_40C1E5+AC↑p
.idata:00416040                                         ; DATA XREF: sub_40C1E5+AC↑r ...
.idata:00416044 ; void (__stdcall *CoUninitialize)()
.idata:00416044                 extrn CoUninitialize:dword
.idata:00416044                                         ; CODE XREF: _wmain+931↑p
.idata:00416044                                         ; DATA XREF: _wmain+931↑r
.idata:00416048 ; HRESULT (__stdcall *CoInitializeSecurity)(PSECURITY_DESCRIPTOR pSecDesc, LONG cAuthSvc, SOLE_AUTHENTICATION_SERVICE *asAuthSvc, void *pReserved1, DWORD dwAuthnLevel, DWORD dwImpLevel, void *pAuthList, DWORD dwCapabilities, void *pReserved3)
.idata:00416048                 extrn CoInitializeSecurity:dword
.idata:00416048                                         ; CODE XREF: InitializeComSecurity(void)+225↑p
.idata:00416048                                         ; DATA XREF: InitializeComSecurity(void)+225↑r
.idata:0041604C ; int (__stdcall *StringFromGUID2)(const GUID *const rguid, LPOLESTR lpsz, int cchMax)
.idata:0041604C                 extrn StringFromGUID2:dword
.idata:0041604C                                         ; CODE XREF: sub_40D1C6+67↑p
.idata:0041604C                                         ; DisplayProvider(_PLAPROVIDER *,ushort const *,int,int *)+7A↑p
.idata:0041604C                                         ; DATA XREF: ...
.idata:00416050 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:00416050                 extrn CoCreateInstance:dword
.idata:00416050                                         ; CODE XREF: _wmain+6BE↑p
.idata:00416050                                         ; sub_4093C3+44↑p ...
.idata:00416054 ; HRESULT (__stdcall *CoInitializeEx)(LPVOID pvReserved, DWORD dwCoInit)
.idata:00416054                 extrn CoInitializeEx:dword
.idata:00416054                                         ; CODE XREF: _wmain+90↑p
.idata:00416054                                         ; DATA XREF: _wmain+90↑r
.idata:00416058
.idata:0041605C ;
.idata:0041605C ; Imports from api-ms-win-core-console-l1-1-0.dll
.idata:0041605C ;
.idata:0041605C ; BOOL (__stdcall *SetConsoleMode)(HANDLE hConsoleHandle, DWORD dwMode)
.idata:0041605C                 extrn SetConsoleMode:dword
.idata:0041605C                                         ; CODE XREF: sub_40E16F+49↑p
.idata:0041605C                                         ; sub_40E16F+184↑p
.idata:0041605C                                         ; DATA XREF: ...
.idata:00416060 ; BOOL (__stdcall *GetConsoleMode)(HANDLE hConsoleHandle, LPDWORD lpMode)
.idata:00416060                 extrn GetConsoleMode:dword
.idata:00416060                                         ; CODE XREF: sub_40E16F+3B↑p
.idata:00416060                                         ; sub_4105F7+26↑p
.idata:00416060                                         ; DATA XREF: ...
.idata:00416064 ; BOOL (__stdcall *WriteConsoleW)(HANDLE hConsoleOutput, const void *lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID lpReserved)
.idata:00416064                 extrn WriteConsoleW:dword
.idata:00416064                                         ; CODE XREF: sub_40E536+28↑p
.idata:00416064                                         ; DATA XREF: sub_40E536+28↑r
.idata:00416068 ; UINT (__stdcall *GetConsoleOutputCP)()
.idata:00416068                 extrn GetConsoleOutputCP:dword
.idata:00416068                                         ; CODE XREF: sub_40E486+36↑p
.idata:00416068                                         ; DATA XREF: sub_40E486+36↑r
.idata:0041606C ; BOOL (__stdcall *ReadConsoleW)(HANDLE hConsoleInput, LPVOID lpBuffer, DWORD nNumberOfCharsToRead, LPDWORD lpNumberOfCharsRead, PCONSOLE_READCONSOLE_CONTROL pInputControl)
.idata:0041606C                 extrn ReadConsoleW:dword
.idata:0041606C                                         ; CODE XREF: sub_40E16F+DA↑p
.idata:0041606C                                         ; DATA XREF: sub_40E16F+DA↑r
.idata:00416070
.idata:00416074 ;
.idata:00416074 ; Imports from api-ms-win-core-console-l2-1-0.dll
.idata:00416074 ;
.idata:00416074 ; BOOL (__stdcall *GetConsoleScreenBufferInfo)(HANDLE hConsoleOutput, PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo)
.idata:00416074                 extrn GetConsoleScreenBufferInfo:dword
.idata:00416074                                         ; CODE XREF: sub_40FF6D+5C↑p
.idata:00416074                                         ; DATA XREF: sub_40FF6D+5C↑r ...
.idata:00416078
.idata:0041607C ;
.idata:0041607C ; Imports from api-ms-win-core-errorhandling-l1-1-1.dll
.idata:0041607C ;
.idata:0041607C ; LONG (__stdcall *UnhandledExceptionFilter)(struct _EXCEPTION_POINTERS *ExceptionInfo)
.idata:0041607C                 extrn UnhandledExceptionFilter:dword
.idata:0041607C                                         ; CODE XREF: ___raise_securityfailure+10↑p
.idata:0041607C                                         ; DATA XREF: ___raise_securityfailure+10↑r ...
.idata:00416080 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00416080                 extrn SetUnhandledExceptionFilter:dword
.idata:00416080                                         ; CODE XREF: ___raise_securityfailure+7↑p
.idata:00416080                                         ; sub_4127E0+5↑p
.idata:00416080                                         ; DATA XREF: ...
.idata:00416084 ; void (__stdcall *SetLastError)(DWORD dwErrCode)
.idata:00416084                 extrn SetLastError:dword
.idata:00416084                                         ; CODE XREF: sub_41164A+50↑p
.idata:00416084                                         ; sub_412066+18↑p ...
.idata:00416088 ; DWORD (__stdcall *GetLastError)()
.idata:00416088                 extrn GetLastError:dword
.idata:00416088                                         ; CODE XREF: _wmain+304↑p
.idata:00416088                                         ; sub_408E34+2A↑p ...
.idata:0041608C
.idata:00416090 ;
.idata:00416090 ; Imports from api-ms-win-core-file-l1-2-1.dll
.idata:00416090 ;
.idata:00416090 ; BOOL (__stdcall *ReadFile)(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped)
.idata:00416090                 extrn ReadFile:dword    ; CODE XREF: sub_409E12+92↑p
.idata:00416090                                         ; sub_409E12+277↑p ...
.idata:00416094 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:00416094                 extrn FindClose:dword   ; CODE XREF: ArgExpandFiles(ushort * *,int)+30C↑p
.idata:00416094                                         ; DATA XREF: ArgExpandFiles(ushort * *,int)+30C↑r
.idata:00416098 ; BOOL (__stdcall *WriteFile)(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped)
.idata:00416098                 extrn WriteFile:dword   ; CODE XREF: sub_40E5A2+14D↑p
.idata:00416098                                         ; DATA XREF: sub_40E5A2+14D↑r
.idata:0041609C ; BOOL (__stdcall *FindNextFileW)(HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData)
.idata:0041609C                 extrn FindNextFileW:dword
.idata:0041609C                                         ; CODE XREF: ArgExpandFiles(ushort * *,int)+202↑p
.idata:0041609C                                         ; DATA XREF: ArgExpandFiles(ushort * *,int)+202↑r
.idata:004160A0 ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:004160A0                 extrn GetFileType:dword ; CODE XREF: sub_40E16F+59↑p
.idata:004160A0                                         ; sub_4105F7+A↑p
.idata:004160A0                                         ; DATA XREF: ...
.idata:004160A4 ; BOOL (__stdcall *SetFilePointerEx)(HANDLE hFile, LARGE_INTEGER liDistanceToMove, PLARGE_INTEGER lpNewFilePointer, DWORD dwMoveMethod)
.idata:004160A4                 extrn SetFilePointerEx:dword
.idata:004160A4                                         ; CODE XREF: sub_409E12+17C↑p
.idata:004160A4                                         ; sub_409E12+2C6↑p ...
.idata:004160A8 ; HANDLE (__stdcall *CreateFileW)(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:004160A8                 extrn CreateFileW:dword ; CODE XREF: sub_409E12+4D↑p
.idata:004160A8                                         ; MapMUIFile+23↑p
.idata:004160A8                                         ; DATA XREF: ...
.idata:004160AC ; HANDLE (__stdcall *FindFirstFileW)(LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData)
.idata:004160AC                 extrn FindFirstFileW:dword
.idata:004160AC                                         ; CODE XREF: ArgExpandFiles(ushort * *,int)+CE↑p
.idata:004160AC                                         ; DATA XREF: ArgExpandFiles(ushort * *,int)+CE↑r
.idata:004160B0 ; DWORD (__stdcall *GetFullPathNameW)(LPCWSTR lpFileName, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart)
.idata:004160B0                 extrn GetFullPathNameW:dword
.idata:004160B0                                         ; CODE XREF: sub_40BD7F+A6↑p
.idata:004160B0                                         ; DATA XREF: sub_40BD7F+A6↑r
.idata:004160B4
.idata:004160B8 ;
.idata:004160B8 ; Imports from api-ms-win-core-handle-l1-1-0.dll
.idata:004160B8 ;
.idata:004160B8 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:004160B8                 extrn CloseHandle:dword ; CODE XREF: sub_408E34+144↑p
.idata:004160B8                                         ; sub_409E12+11C↑p ...
.idata:004160BC
.idata:004160C0 ;
.idata:004160C0 ; Imports from api-ms-win-core-heap-l1-2-0.dll
.idata:004160C0 ;
.idata:004160C0 ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:004160C0                 extrn HeapFree:dword    ; CODE XREF: _wmain+80A↑p
.idata:004160C0                                         ; _wmain+827↑p ...
.idata:004160C4 ; BOOL (__stdcall *HeapSetInformation)(HANDLE HeapHandle, HEAP_INFORMATION_CLASS HeapInformationClass, PVOID HeapInformation, SIZE_T HeapInformationLength)
.idata:004160C4                 extrn HeapSetInformation:dword
.idata:004160C4                                         ; CODE XREF: _wmain+67↑p
.idata:004160C4                                         ; DATA XREF: _wmain+67↑r
.idata:004160C8 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:004160C8                 extrn HeapAlloc:dword   ; CODE XREF: sub_408E34+B2↑p
.idata:004160C8                                         ; InitializeComSecurity(void)+32↑p ...
.idata:004160CC ; HANDLE (__stdcall *GetProcessHeap)()
.idata:004160CC                 extrn GetProcessHeap:dword
.idata:004160CC                                         ; CODE XREF: _wmain+803↑p
.idata:004160CC                                         ; _wmain+820↑p ...
.idata:004160D0
.idata:004160D4 ;
.idata:004160D4 ; Imports from api-ms-win-core-heap-l2-1-0.dll
.idata:004160D4 ;
.idata:004160D4 ; HGLOBAL (__stdcall *GlobalAlloc)(UINT uFlags, SIZE_T dwBytes)
.idata:004160D4                 extrn GlobalAlloc:dword ; CODE XREF: sub_40C1E5+76↑p
.idata:004160D4                                         ; DATA XREF: sub_40C1E5+76↑r ...
.idata:004160D8 ; HGLOBAL (__stdcall *GlobalFree)(HGLOBAL hMem)
.idata:004160D8                 extrn GlobalFree:dword  ; CODE XREF: sub_40C1E5+ED↑p
.idata:004160D8                                         ; DATA XREF: sub_40C1E5+ED↑r
.idata:004160DC ; HLOCAL (__stdcall *LocalFree)(HLOCAL hMem)
.idata:004160DC                 extrn LocalFree:dword   ; CODE XREF: InitializeComSecurity(void)+240↑p
.idata:004160DC                                         ; InitializeComSecurity(void)+249↑p ...
.idata:004160E0
.idata:004160E4 ;
.idata:004160E4 ; Imports from api-ms-win-core-heap-obsolete-l1-1-0.dll
.idata:004160E4 ;
.idata:004160E4 ; LPVOID (__stdcall *GlobalLock)(HGLOBAL hMem)
.idata:004160E4                 extrn GlobalLock:dword  ; CODE XREF: sub_40C1E5+88↑p
.idata:004160E4                                         ; DATA XREF: sub_40C1E5+88↑r ...
.idata:004160E8 ; BOOL (__stdcall *GlobalUnlock)(HGLOBAL hMem)
.idata:004160E8                 extrn GlobalUnlock:dword
.idata:004160E8                                         ; CODE XREF: sub_40C1E5+DE↑p
.idata:004160E8                                         ; DATA XREF: sub_40C1E5+DE↑r
.idata:004160EC
.idata:004160F0 ;
.idata:004160F0 ; Imports from api-ms-win-core-libraryloader-l1-2-0.dll
.idata:004160F0 ;
.idata:004160F0 ; HGLOBAL (__stdcall *LoadResource)(HMODULE hModule, HRSRC hResInfo)
.idata:004160F0                 extrn LoadResource:dword
.idata:004160F0                                         ; CODE XREF: sub_40C1E5+30↑p
.idata:004160F0                                         ; RcConfig_Load+1D↑p
.idata:004160F0                                         ; DATA XREF: ...
.idata:004160F4 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:004160F4                 extrn GetModuleHandleA:dword
.idata:004160F4                                         ; CODE XREF: __get_image_app_type+7↑p
.idata:004160F4                                         ; DATA XREF: __get_image_app_type+7↑r
.idata:004160F8 ; DWORD (__stdcall *GetModuleFileNameW)(HMODULE hModule, LPWSTR lpFilename, DWORD nSize)
.idata:004160F8                 extrn GetModuleFileNameW:dword
.idata:004160F8                                         ; CODE XREF: sub_40EC2D+4D↑p
.idata:004160F8                                         ; ArgpPrintVersion(void)+7D↑p
.idata:004160F8                                         ; DATA XREF: ...
.idata:004160FC ; HMODULE (__stdcall *LoadLibraryExW)(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags)
.idata:004160FC                 extrn LoadLibraryExW:dword
.idata:004160FC                                         ; CODE XREF: MapMUIFile+76↑p
.idata:004160FC                                         ; LoadMUILibraryW(x,x,x)+47↑p ...
.idata:00416100 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:00416100                 extrn FreeLibrary:dword ; CODE XREF: sub_40E842+E0↑p
.idata:00416100                                         ; sub_40EC2D+A4↑p ...
.idata:00416104 ; BOOL (__stdcall *FreeResource)(HGLOBAL hResData)
.idata:00416104                 extrn FreeResource:dword
.idata:00416104                                         ; CODE XREF: sub_40C1E5+D3↑p
.idata:00416104                                         ; DATA XREF: sub_40C1E5+D3↑r
.idata:00416108 ; LPVOID (__stdcall *LockResource)(HGLOBAL hResData)
.idata:00416108                 extrn LockResource:dword
.idata:00416108                                         ; CODE XREF: sub_40C1E5+43↑p
.idata:00416108                                         ; DATA XREF: sub_40C1E5+43↑r
.idata:0041610C ; HRSRC (__stdcall *FindResourceExW)(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage)
.idata:0041610C                 extrn FindResourceExW:dword
.idata:0041610C                                         ; CODE XREF: RcConfig_Load+F↑p
.idata:0041610C                                         ; LoadMUILibraryW(x,x,x)+B8↑p
.idata:0041610C                                         ; DATA XREF: ...
.idata:00416110 ; int (__stdcall *LoadStringW)(HINSTANCE hInstance, UINT uID, LPWSTR lpBuffer, int cchBufferMax)
.idata:00416110                 extrn LoadStringW:dword ; CODE XREF: _wmain+5AC↑p
.idata:00416110                                         ; sub_4096BC+D2↑p ...
.idata:00416114 ; DWORD (__stdcall *SizeofResource)(HMODULE hModule, HRSRC hResInfo)
.idata:00416114                 extrn SizeofResource:dword
.idata:00416114                                         ; CODE XREF: sub_40C1E5+59↑p
.idata:00416114                                         ; DATA XREF: sub_40C1E5+59↑r
.idata:00416118
.idata:0041611C ;
.idata:0041611C ; Imports from api-ms-win-core-libraryloader-l1-2-2.dll
.idata:0041611C ;
.idata:0041611C ; HRSRC (__stdcall *FindResourceW)(HMODULE hModule, LPCWSTR lpName, LPCWSTR lpType)
.idata:0041611C                 extrn FindResourceW:dword
.idata:0041611C                                         ; CODE XREF: sub_40C1E5+15↑p
.idata:0041611C                                         ; DATA XREF: sub_40C1E5+15↑r ...
.idata:00416120 ; HMODULE (__stdcall *LoadLibraryW)(LPCWSTR lpLibFileName)
.idata:00416120                 extrn LoadLibraryW:dword
.idata:00416120                                         ; CODE XREF: sub_40E842+16↑p
.idata:00416120                                         ; DATA XREF: sub_40E842+16↑r
.idata:00416124
.idata:00416128 ;
.idata:00416128 ; Imports from api-ms-win-core-localization-l1-2-1.dll
.idata:00416128 ;
.idata:00416128 ; BOOL (__stdcall *SetThreadPreferredUILanguages)(DWORD dwFlags, PCZZWSTR pwszLanguagesBuffer, PULONG pulNumLanguages)
.idata:00416128                 extrn SetThreadPreferredUILanguages:dword
.idata:00416128                                         ; CODE XREF: sub_40FF6D+23↑p
.idata:00416128                                         ; DATA XREF: sub_40FF6D+23↑r ...
.idata:0041612C ; DWORD (__stdcall *FormatMessageW)(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPWSTR lpBuffer, DWORD nSize, va_list *Arguments)
.idata:0041612C                 extrn FormatMessageW:dword
.idata:0041612C                                         ; CODE XREF: sub_40E74D+27↑p
.idata:0041612C                                         ; sub_40E842+78↑p ...
.idata:00416130 ; int (__stdcall *GetLocaleInfoW)(LCID Locale, LCTYPE LCType, LPWSTR lpLCData, int cchData)
.idata:00416130                 extrn GetLocaleInfoW:dword
.idata:00416130                                         ; CODE XREF: ArgpLoadArguments(void)+20D↑p
.idata:00416130                                         ; ArgpLoadArguments(void)+22D↑p ...
.idata:00416134
.idata:00416138 ;
.idata:00416138 ; Imports from api-ms-win-core-localization-obsolete-l1-3-0.dll
.idata:00416138 ;
.idata:00416138 ; LANGID (__stdcall *GetUserDefaultUILanguage)()
.idata:00416138                 extrn GetUserDefaultUILanguage:dword
.idata:00416138                                         ; CODE XREF: LoadMUILibraryW(x,x,x)+D3↑p
.idata:00416138                                         ; DATA XREF: LoadMUILibraryW(x,x,x)+D3↑r ...
.idata:0041613C ; LANGID (__stdcall *GetSystemDefaultUILanguage)()
.idata:0041613C                 extrn GetSystemDefaultUILanguage:dword
.idata:0041613C                                         ; CODE XREF: LoadMUILibraryW(x,x,x):loc_411D24↑p
.idata:0041613C                                         ; DATA XREF: LoadMUILibraryW(x,x,x):loc_411D24↑r
.idata:00416140
.idata:00416144 ;
.idata:00416144 ; Imports from api-ms-win-core-memory-l1-1-2.dll
.idata:00416144 ;
.idata:00416144 ; BOOL (__stdcall *UnmapViewOfFile)(LPCVOID lpBaseAddress)
.idata:00416144                 extrn UnmapViewOfFile:dword
.idata:00416144                                         ; CODE XREF: sub_411835+8B↑p
.idata:00416144                                         ; DATA XREF: sub_411835+8B↑r ...
.idata:00416148 ; LPVOID (__stdcall *MapViewOfFile)(HANDLE hFileMappingObject, DWORD dwDesiredAccess, DWORD dwFileOffsetHigh, DWORD dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap)
.idata:00416148                 extrn MapViewOfFile:dword
.idata:00416148                                         ; CODE XREF: MapMUIFile+50↑p
.idata:00416148                                         ; DATA XREF: MapMUIFile+50↑r
.idata:0041614C ; HANDLE (__stdcall *CreateFileMappingW)(HANDLE hFile, LPSECURITY_ATTRIBUTES lpFileMappingAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCWSTR lpName)
.idata:0041614C                 extrn CreateFileMappingW:dword
.idata:0041614C                                         ; CODE XREF: MapMUIFile+37↑p
.idata:0041614C                                         ; DATA XREF: MapMUIFile+37↑r
.idata:00416150
.idata:00416154 ;
.idata:00416154 ; Imports from api-ms-win-core-processenvironment-l1-2-0.dll
.idata:00416154 ;
.idata:00416154 ; DWORD (__stdcall *SearchPathW)(LPCWSTR lpPath, LPCWSTR lpFileName, LPCWSTR lpExtension, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart)
.idata:00416154                 extrn SearchPathW:dword ; CODE XREF: LoadMUILibraryW(x,x,x)+7A↑p
.idata:00416154                                         ; DATA XREF: LoadMUILibraryW(x,x,x)+7A↑r ...
.idata:00416158 ; HANDLE (__stdcall *GetStdHandle)(DWORD nStdHandle)
.idata:00416158                 extrn GetStdHandle:dword
.idata:00416158                                         ; CODE XREF: sub_40E16F+1D↑p
.idata:00416158                                         ; sub_40E5A2+1B↑p ...
.idata:0041615C ; DWORD (__stdcall *GetCurrentDirectoryW)(DWORD nBufferLength, LPWSTR lpBuffer)
.idata:0041615C                 extrn GetCurrentDirectoryW:dword
.idata:0041615C                                         ; CODE XREF: sub_40BD7F+5B↑p
.idata:0041615C                                         ; DATA XREF: sub_40BD7F+5B↑r
.idata:00416160
.idata:00416164 ;
.idata:00416164 ; Imports from api-ms-win-core-processthreads-l1-1-2.dll
.idata:00416164 ;
.idata:00416164 ; DWORD (__stdcall *GetCurrentThreadId)()
.idata:00416164                 extrn GetCurrentThreadId:dword
.idata:00416164                                         ; CODE XREF: ___security_init_cookie+4E↑p
.idata:00416164                                         ; DATA XREF: ___security_init_cookie+4E↑r ...
.idata:00416168 ; DWORD (__stdcall *GetCurrentProcessId)()
.idata:00416168                 extrn GetCurrentProcessId:dword
.idata:00416168                                         ; CODE XREF: ___security_init_cookie+45↑p
.idata:00416168                                         ; DATA XREF: ___security_init_cookie+45↑r
.idata:0041616C ; BOOL (__stdcall *TerminateProcess)(HANDLE hProcess, UINT uExitCode)
.idata:0041616C                 extrn TerminateProcess:dword
.idata:0041616C                                         ; CODE XREF: ___raise_securityfailure+22↑p
.idata:0041616C                                         ; DATA XREF: ___raise_securityfailure+22↑r
.idata:00416170 ; HANDLE (__stdcall *GetCurrentProcess)()
.idata:00416170                 extrn GetCurrentProcess:dword
.idata:00416170                                         ; CODE XREF: sub_408E34+59↑p
.idata:00416170                                         ; ___raise_securityfailure+1B↑p
.idata:00416170                                         ; DATA XREF: ...
.idata:00416174 ; HANDLE (__stdcall *GetCurrentThread)()
.idata:00416174                 extrn GetCurrentThread:dword
.idata:00416174                                         ; CODE XREF: sub_408E34+19↑p
.idata:00416174                                         ; DATA XREF: sub_408E34+19↑r
.idata:00416178 ; BOOL (__stdcall *OpenThreadToken)(HANDLE ThreadHandle, DWORD DesiredAccess, BOOL OpenAsSelf, PHANDLE TokenHandle)
.idata:00416178                 extrn OpenThreadToken:dword
.idata:00416178                                         ; CODE XREF: sub_408E34+20↑p
.idata:00416178                                         ; DATA XREF: sub_408E34+20↑r
.idata:0041617C ; BOOL (__stdcall *OpenProcessToken)(HANDLE ProcessHandle, DWORD DesiredAccess, PHANDLE TokenHandle)
.idata:0041617C                 extrn OpenProcessToken:dword
.idata:0041617C                                         ; CODE XREF: sub_408E34+60↑p
.idata:0041617C                                         ; DATA XREF: sub_408E34+60↑r
.idata:00416180
.idata:00416184 ;
.idata:00416184 ; Imports from api-ms-win-core-profile-l1-1-0.dll
.idata:00416184 ;
.idata:00416184 ; BOOL (__stdcall *QueryPerformanceCounter)(LARGE_INTEGER *lpPerformanceCount)
.idata:00416184                 extrn QueryPerformanceCounter:dword
.idata:00416184                                         ; CODE XREF: ___security_init_cookie+6C↑p
.idata:00416184                                         ; DATA XREF: ___security_init_cookie+6C↑r ...
.idata:00416188
.idata:0041618C ;
.idata:0041618C ; Imports from api-ms-win-core-registry-l1-1-0.dll
.idata:0041618C ;
.idata:0041618C ; LSTATUS (__stdcall *RegOpenKeyExW)(HKEY hKey, LPCWSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:0041618C                 extrn RegOpenKeyExW:dword
.idata:0041618C                                         ; CODE XREF: GetInstallLanguage+38↑p
.idata:0041618C                                         ; DATA XREF: GetInstallLanguage+38↑r ...
.idata:00416190 ; LSTATUS (__stdcall *RegQueryValueExW)(HKEY hKey, LPCWSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:00416190                 extrn RegQueryValueExW:dword
.idata:00416190                                         ; CODE XREF: GetInstallLanguage+55↑p
.idata:00416190                                         ; DATA XREF: GetInstallLanguage+55↑r
.idata:00416194 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:00416194                 extrn RegCloseKey:dword ; CODE XREF: GetInstallLanguage+60↑p
.idata:00416194                                         ; DATA XREF: GetInstallLanguage+60↑r
.idata:00416198
.idata:0041619C ;
.idata:0041619C ; Imports from api-ms-win-core-string-l1-1-0.dll
.idata:0041619C ;
.idata:0041619C ; int (__stdcall *WideCharToMultiByte)(UINT CodePage, DWORD dwFlags, LPCWCH lpWideCharStr, int cchWideChar, LPSTR lpMultiByteStr, int cbMultiByte, LPCCH lpDefaultChar, LPBOOL lpUsedDefaultChar)
.idata:0041619C                 extrn WideCharToMultiByte:dword
.idata:0041619C                                         ; CODE XREF: sub_40E5A2+102↑p
.idata:0041619C                                         ; DATA XREF: sub_40E5A2+102↑r ...
.idata:004161A0 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:004161A0                 extrn MultiByteToWideChar:dword
.idata:004161A0                                         ; CODE XREF: sub_40E16F+A5↑p
.idata:004161A0                                         ; DATA XREF: sub_40E16F+A5↑r
.idata:004161A4
.idata:004161A8 ;
.idata:004161A8 ; Imports from api-ms-win-core-synch-l1-2-0.dll
.idata:004161A8 ;
.idata:004161A8 ; void (__stdcall *Sleep)(DWORD dwMilliseconds)
.idata:004161A8                 extrn Sleep:dword       ; CODE XREF: start-180↑p
.idata:004161A8                                         ; DATA XREF: start-180↑r ...
.idata:004161AC
.idata:004161B0 ;
.idata:004161B0 ; Imports from api-ms-win-core-sysinfo-l1-2-1.dll
.idata:004161B0 ;
.idata:004161B0 ; DWORD (__stdcall *GetTickCount)()
.idata:004161B0                 extrn GetTickCount:dword
.idata:004161B0                                         ; CODE XREF: ___security_init_cookie+57↑p
.idata:004161B0                                         ; DATA XREF: ___security_init_cookie+57↑r ...
.idata:004161B4 ; BOOL (__stdcall *GetVersionExW)(LPOSVERSIONINFOW lpVersionInformation)
.idata:004161B4                 extrn GetVersionExW:dword
.idata:004161B4                                         ; CODE XREF: GetOSType+48↑p
.idata:004161B4                                         ; GetOSType+64↑p
.idata:004161B4                                         ; DATA XREF: ...
.idata:004161B8 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:004161B8                 extrn GetSystemTimeAsFileTime:dword
.idata:004161B8                                         ; CODE XREF: ___security_init_cookie+36↑p
.idata:004161B8                                         ; DATA XREF: ___security_init_cookie+36↑r
.idata:004161BC
.idata:004161C0 ;
.idata:004161C0 ; Imports from api-ms-win-core-timezone-l1-1-0.dll
.idata:004161C0 ;
.idata:004161C0 ; BOOL (__stdcall *SystemTimeToFileTime)(const SYSTEMTIME *lpSystemTime, LPFILETIME lpFileTime)
.idata:004161C0                 extrn SystemTimeToFileTime:dword
.idata:004161C0                                         ; CODE XREF: sub_40982F+2D↑p
.idata:004161C0                                         ; DATA XREF: sub_40982F+2D↑r ...
.idata:004161C4
.idata:004161C8 ;
.idata:004161C8 ; Imports from api-ms-win-core-version-l1-1-0.dll
.idata:004161C8 ;
.idata:004161C8 ; BOOL (__stdcall *VerQueryValueW)(LPCVOID pBlock, LPCWSTR lpSubBlock, LPVOID *lplpBuffer, PUINT puLen)
.idata:004161C8                 extrn VerQueryValueW:dword
.idata:004161C8                                         ; CODE XREF: ArgpPrintVersion(void)+123↑p
.idata:004161C8                                         ; ArgpPrintVersion(void)+174↑p ...
.idata:004161CC ; DWORD (__stdcall *GetFileVersionInfoSizeExW)(DWORD dwFlags, LPCWSTR lpwstrFilename, LPDWORD lpdwHandle)
.idata:004161CC                 extrn GetFileVersionInfoSizeExW:dword
.idata:004161CC                                         ; CODE XREF: ArgpPrintVersion(void)+A9↑p
.idata:004161CC                                         ; DATA XREF: ArgpPrintVersion(void)+A9↑r
.idata:004161D0 ; BOOL (__stdcall *GetFileVersionInfoExW)(DWORD dwFlags, LPCWSTR lpwstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID lpData)
.idata:004161D0                 extrn GetFileVersionInfoExW:dword
.idata:004161D0                                         ; CODE XREF: ArgpPrintVersion(void)+EA↑p
.idata:004161D0                                         ; DATA XREF: ArgpPrintVersion(void)+EA↑r
.idata:004161D4
.idata:004161D8 ;
.idata:004161D8 ; Imports from api-ms-win-security-base-l1-2-0.dll
.idata:004161D8 ;
.idata:004161D8 ; BOOL (__stdcall *SetSecurityDescriptorGroup)(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pGroup, BOOL bGroupDefaulted)
.idata:004161D8                 extrn SetSecurityDescriptorGroup:dword
.idata:004161D8                                         ; CODE XREF: InitializeComSecurity(void)+17D↑p
.idata:004161D8                                         ; DATA XREF: InitializeComSecurity(void)+17D↑r ...
.idata:004161DC ; BOOL (__stdcall *GetTokenInformation)(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, LPVOID TokenInformation, DWORD TokenInformationLength, PDWORD ReturnLength)
.idata:004161DC                 extrn GetTokenInformation:dword
.idata:004161DC                                         ; CODE XREF: sub_408E34+CB↑p
.idata:004161DC                                         ; DATA XREF: sub_408E34+CB↑r
.idata:004161E0 ; BOOL (__stdcall *GetSecurityDescriptorDacl)(PSECURITY_DESCRIPTOR pSecurityDescriptor, LPBOOL lpbDaclPresent, PACL *pDacl, LPBOOL lpbDaclDefaulted)
.idata:004161E0                 extrn GetSecurityDescriptorDacl:dword
.idata:004161E0                                         ; CODE XREF: InitializeComSecurity(void)+1B7↑p
.idata:004161E0                                         ; DATA XREF: InitializeComSecurity(void)+1B7↑r
.idata:004161E4 ; BOOL (__stdcall *InitializeSecurityDescriptor)(PSECURITY_DESCRIPTOR pSecurityDescriptor, DWORD dwRevision)
.idata:004161E4                 extrn InitializeSecurityDescriptor:dword
.idata:004161E4                                         ; CODE XREF: InitializeComSecurity(void)+A7↑p
.idata:004161E4                                         ; DATA XREF: InitializeComSecurity(void)+A7↑r
.idata:004161E8 ; BOOL (__stdcall *SetSecurityDescriptorOwner)(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID pOwner, BOOL bOwnerDefaulted)
.idata:004161E8                 extrn SetSecurityDescriptorOwner:dword
.idata:004161E8                                         ; CODE XREF: InitializeComSecurity(void)+112↑p
.idata:004161E8                                         ; DATA XREF: InitializeComSecurity(void)+112↑r
.idata:004161EC ; BOOL (__stdcall *SetSecurityDescriptorDacl)(PSECURITY_DESCRIPTOR pSecurityDescriptor, BOOL bDaclPresent, PACL pDacl, BOOL bDaclDefaulted)
.idata:004161EC                 extrn SetSecurityDescriptorDacl:dword
.idata:004161EC                                         ; CODE XREF: InitializeComSecurity(void)+1EB↑p
.idata:004161EC                                         ; DATA XREF: InitializeComSecurity(void)+1EB↑r
.idata:004161F0 ; BOOL (__stdcall *GetSecurityDescriptorGroup)(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID *pGroup, LPBOOL lpbGroupDefaulted)
.idata:004161F0                 extrn GetSecurityDescriptorGroup:dword
.idata:004161F0                                         ; CODE XREF: InitializeComSecurity(void)+148↑p
.idata:004161F0                                         ; DATA XREF: InitializeComSecurity(void)+148↑r
.idata:004161F4 ; BOOL (__stdcall *GetSecurityDescriptorOwner)(PSECURITY_DESCRIPTOR pSecurityDescriptor, PSID *pOwner, LPBOOL lpbOwnerDefaulted)
.idata:004161F4                 extrn GetSecurityDescriptorOwner:dword
.idata:004161F4                                         ; CODE XREF: InitializeComSecurity(void)+DD↑p
.idata:004161F4                                         ; DATA XREF: InitializeComSecurity(void)+DD↑r
.idata:004161F8
.idata:004161FC ;
.idata:004161FC ; Imports from api-ms-win-security-sddl-l1-1-0.dll
.idata:004161FC ;
.idata:004161FC ; BOOL (__stdcall *ConvertSidToStringSidW)(PSID Sid, LPWSTR *StringSid)
.idata:004161FC                 extrn ConvertSidToStringSidW:dword
.idata:004161FC                                         ; CODE XREF: sub_408E34+FD↑p
.idata:004161FC                                         ; DATA XREF: sub_408E34+FD↑r ...
.idata:00416200 ; BOOL (__stdcall *ConvertStringSecurityDescriptorToSecurityDescriptorW)(LPCWSTR StringSecurityDescriptor, DWORD StringSDRevision, PSECURITY_DESCRIPTOR *SecurityDescriptor, PULONG SecurityDescriptorSize)
.idata:00416200                 extrn ConvertStringSecurityDescriptorToSecurityDescriptorW:dword
.idata:00416200                                         ; CODE XREF: InitializeComSecurity(void)+76↑p
.idata:00416200                                         ; DATA XREF: InitializeComSecurity(void)+76↑r
.idata:00416204
.idata:00416208 ;
.idata:00416208 ; Imports from api-ms-win-shcore-path-l1-1-0.dll
.idata:00416208 ;
.idata:00416208                 extrn api_ms_win_shcore_path_l1_1_0_170:dword
.idata:00416208                                         ; CODE XREF: SetApiTraceValues(IDataCollector *,int *)+5F↑p
.idata:00416208                                         ; DATA XREF: SetApiTraceValues(IDataCollector *,int *)+5F↑r ...
.idata:00416208                                         ; Import by ordinal 170
.idata:0041620C
.idata:00416210 ;
.idata:00416210 ; Imports from msvcrt.dll
.idata:00416210 ;
.idata:00416210 ; void *(__cdecl *bsearch)(const void *Key, const void *Base, size_t NumOfElements, size_t SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction CompareFunction)
.idata:00416210                 extrn bsearch:dword     ; CODE XREF: sub_412066+37↑p
.idata:00416210                                         ; sub_4120EB+21↑p
.idata:00416210                                         ; DATA XREF: ...
.idata:00416214 ; int (__cdecl *wcsncmp)(const wchar_t *String1, const wchar_t *String2, size_t MaxCount)
.idata:00416214                 extrn wcsncmp:dword     ; CODE XREF: GetCHTLangauge+3A↑p
.idata:00416214                                         ; DATA XREF: GetCHTLangauge+3A↑r
.idata:00416218 ; int (*wprintf)(const wchar_t *const Format, ...)
.idata:00416218                 extrn wprintf:dword     ; CODE XREF: sub_40E16F+126↑p
.idata:00416218                                         ; DATA XREF: sub_40E16F+126↑r
.idata:0041621C ; errno_t (__cdecl *wsplitpath_s)(const wchar_t *FullPath, wchar_t *Drive, size_t DriveCount, wchar_t *Dir, size_t DirCount, wchar_t *Filename, size_t FilenameCount, wchar_t *Ext, size_t ExtCount)
.idata:0041621C                 extrn _wsplitpath_s:dword
.idata:0041621C                                         ; CODE XREF: ArgExpandFiles(ushort * *,int)+B8↑p
.idata:0041621C                                         ; DATA XREF: ArgExpandFiles(ushort * *,int)+B8↑r
.idata:00416220 ; errno_t (__cdecl *wmakepath_s)(wchar_t *Buffer, size_t BufferCount, const wchar_t *Drive, const wchar_t *Dir, const wchar_t *Filename, const wchar_t *Ext)
.idata:00416220                 extrn _wmakepath_s:dword
.idata:00416220                                         ; CODE XREF: ArgExpandFiles(ushort * *,int)+182↑p
.idata:00416220                                         ; DATA XREF: ArgExpandFiles(ushort * *,int)+182↑r
.idata:00416224 ; int (__cdecl *wcsnicmp)(const wchar_t *String1, const wchar_t *String2, size_t MaxCount)
.idata:00416224                 extrn _wcsnicmp:dword   ; CODE XREF: GetInstallLanguage+78↑p
.idata:00416224                                         ; DATA XREF: GetInstallLanguage+78↑r
.idata:00416228                 extrn __imp__except_handler4_common:dword
.idata:00416228                                         ; DATA XREF: _except_handler4_common↑r
.idata:0041622C ; unsigned int (__cdecl *controlfp)(unsigned int NewValue, unsigned int Mask)
.idata:0041622C                 extrn _controlfp:dword  ; CODE XREF: sub_412A93+A↑p
.idata:0041622C                                         ; DATA XREF: sub_412A93+A↑r
.idata:00416230 ; void __cdecl terminate(void)
.idata:00416230                 extrn ?terminate@@YAXXZ:dword
.idata:00416230                                         ; CODE XREF: __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *):loc_4127C7↑p
.idata:00416230                                         ; DATA XREF: __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *):loc_4127C7↑r
.idata:00416234 ; void (__cdecl *_initterm)(_PVFV *First, _PVFV *Last)
.idata:00416234                 extrn __imp__initterm:dword
.idata:00416234                                         ; DATA XREF: _initterm↑r
.idata:00416238 ; void (__cdecl *_setusermatherr)(_UserMathErrorFunctionPointer UserMathErrorFunction)
.idata:00416238                 extrn __setusermatherr:dword
.idata:00416238                                         ; CODE XREF: pre_c_init+B2↑p
.idata:00416238                                         ; DATA XREF: pre_c_init+B2↑r
.idata:0041623C ; int *(__cdecl *_p__fmode)()
.idata:0041623C                 extrn __p__fmode:dword  ; CODE XREF: pre_c_init+83↑p
.idata:0041623C                                         ; DATA XREF: pre_c_init+83↑r
.idata:00416240 ; void (__cdecl *cexit)()
.idata:00416240                 extrn _cexit:dword      ; CODE XREF: start-66↑p
.idata:00416240                                         ; DATA XREF: start-66↑r
.idata:00416244 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00416244                 extrn _exit:dword       ; CODE XREF: .text:004124FB↑p
.idata:00416244                                         ; DATA XREF: .text:004124FB↑r
.idata:00416248 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00416248                 extrn exit:dword        ; CODE XREF: start-A4↑p
.idata:00416248                                         ; DATA XREF: start-A4↑r
.idata:0041624C ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0041624C                 extrn __set_app_type:dword
.idata:0041624C                                         ; CODE XREF: pre_c_init+6D↑p
.idata:0041624C                                         ; DATA XREF: pre_c_init+6D↑r
.idata:00416250                 extrn __wgetmainargs:dword
.idata:00416250                                         ; CODE XREF: pre_cpp_init+24↑p
.idata:00416250                                         ; DATA XREF: pre_cpp_init+24↑r
.idata:00416254                 extrn __imp__amsg_exit:dword
.idata:00416254                                         ; DATA XREF: _amsg_exit↑r
.idata:00416258 ; int *(__cdecl *_p__commode)()
.idata:00416258                 extrn __p__commode:dword
.idata:00416258                                         ; CODE XREF: pre_c_init+91↑p
.idata:00416258                                         ; DATA XREF: pre_c_init+91↑r
.idata:0041625C                 extrn __imp__XcptFilter:dword
.idata:0041625C                                         ; DATA XREF: _XcptFilter↑r
.idata:00416260 ; wchar_t *(__cdecl *wcsrchr)(const wchar_t *Str, wchar_t Ch)
.idata:00416260                 extrn wcsrchr:dword     ; CODE XREF: sub_409E12+29B↑p
.idata:00416260                                         ; sub_409E12+51B↑p ...
.idata:00416264 ; int (__cdecl *getmbcp)()
.idata:00416264                 extrn _getmbcp:dword    ; CODE XREF: sub_40E16F+9E↑p
.idata:00416264                                         ; DATA XREF: sub_40E16F+9E↑r
.idata:00416268 ; int (__cdecl *isspace)(int C)
.idata:00416268                 extrn isspace:dword     ; CODE XREF: sub_40A742+38↑p
.idata:00416268                                         ; DATA XREF: sub_40A742+38↑r
.idata:0041626C ; wchar_t *(__cdecl *fgetws)(wchar_t *Buffer, int BufferCount, FILE *Stream)
.idata:0041626C                 extrn fgetws:dword      ; CODE XREF: sub_409E12+1D3↑p
.idata:0041626C                                         ; sub_409E12+3C0↑p ...
.idata:00416270 ; wchar_t *(__cdecl *wcsstr)(const wchar_t *Str, const wchar_t *SubStr)
.idata:00416270                 extrn wcsstr:dword      ; CODE XREF: sub_40AAF8+21E↑p
.idata:00416270                                         ; sub_40AAF8+251↑p ...
.idata:00416274 ; FILE *(__cdecl *wfopen)(const wchar_t *FileName, const wchar_t *Mode)
.idata:00416274                 extrn _wfopen:dword     ; CODE XREF: sub_409E12+12F↑p
.idata:00416274                                         ; sub_40AAF8+170↑p ...
.idata:00416278 ; wchar_t *(__cdecl *wcschr)(const wchar_t *Str, wchar_t Ch)
.idata:00416278                 extrn wcschr:dword      ; CODE XREF: SetCounterValues(IDataCollector *,int *)+189↑p
.idata:00416278                                         ; ArgExpandFiles(ushort * *,int)+270↑p ...
.idata:0041627C ; int *(__cdecl *errno)()
.idata:0041627C                 extrn _errno:dword      ; CODE XREF: sub_409E12+143↑p
.idata:0041627C                                         ; sub_409E12:loc_40A002↑p ...
.idata:00416280 ; wchar_t *(__cdecl *wcstok)(wchar_t *String, const wchar_t *Delimiter, wchar_t **Context)
.idata:00416280                 extrn wcstok:dword      ; CODE XREF: sub_409E12+32C↑p
.idata:00416280                                         ; sub_409E12+615↑p ...
.idata:00416284 ; void (__cdecl *qsort)(void *Base, size_t NumOfElements, size_t SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction CompareFunction)
.idata:00416284                 extrn qsort:dword       ; CODE XREF: sub_40D809+E3↑p
.idata:00416284                                         ; DATA XREF: sub_40D809+E3↑r
.idata:00416288 ; int (__cdecl *fseek)(FILE *Stream, int Offset, int Origin)
.idata:00416288                 extrn fseek:dword       ; CODE XREF: sub_409E12+3A2↑p
.idata:00416288                                         ; DATA XREF: sub_409E12+3A2↑r
.idata:0041628C ; int (__cdecl *wtoi)(const wchar_t *String)
.idata:0041628C                 extrn _wtoi:dword       ; CODE XREF: SetTraceValues(IDataCollector *)+281↑p
.idata:0041628C                                         ; SetTraceValues(IDataCollector *)+2CE↑p
.idata:0041628C                                         ; DATA XREF: ...
.idata:00416290 ; int (__cdecl *fclose)(FILE *Stream)
.idata:00416290                 extrn fclose:dword      ; CODE XREF: sub_409E12+22F↑p
.idata:00416290                                         ; sub_40AAF8+130↑p ...
.idata:00416294 ; int (__cdecl *_wcsicmp)(const wchar_t *String1, const wchar_t *String2)
.idata:00416294                 extrn __imp__wcsicmp:dword
.idata:00416294                                         ; CODE XREF: _wmain+FF↑p
.idata:00416294                                         ; _wmain+115↑p ...
.idata:00416298 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00416298                 extrn __imp_memcpy:dword
.idata:00416298                                         ; DATA XREF: memcpy↑r
.idata:0041629C ; wint_t (__cdecl *towlower)(wint_t C)
.idata:0041629C                 extrn towlower:dword    ; CODE XREF: SetTraceValues(IDataCollector *)+119↑p
.idata:0041629C                                         ; DATA XREF: SetTraceValues(IDataCollector *)+119↑r
.idata:004162A0 ; int (__cdecl *ferror)(FILE *Stream)
.idata:004162A0                 extrn ferror:dword      ; CODE XREF: sub_409E12+1E1↑p
.idata:004162A0                                         ; sub_411310+95↑p
.idata:004162A0                                         ; DATA XREF: ...
.idata:004162A4 ; int (__cdecl *vsnwprintf)(wchar_t *Buffer, size_t BufferCount, const wchar_t *Format, va_list Args)
.idata:004162A4                 extrn _vsnwprintf:dword ; CODE XREF: StringCchPrintfW(ushort *,uint,ushort const *,...)+32↑p
.idata:004162A4                                         ; sub_411835+39↑p
.idata:004162A4                                         ; DATA XREF: ...
.idata:004162A8 ; int (__cdecl *iswspace)(wint_t C)
.idata:004162A8                 extrn iswspace:dword    ; CODE XREF: sub_411310+51↑p
.idata:004162A8                                         ; DATA XREF: sub_411310+51↑r
.idata:004162AC ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004162AC                 extrn __imp_memset:dword
.idata:004162AC                                         ; DATA XREF: memset↑r
.idata:004162B0
.idata:004162B4 ;
.idata:004162B4 ; Imports from ntdll.dll
.idata:004162B4 ;
.idata:004162B4 ; NTSTATUS (__stdcall *NtClose)(HANDLE Handle)
.idata:004162B4                 extrn NtClose:dword     ; CODE XREF: sub_4121E0+B6↑p
.idata:004162B4                                         ; DATA XREF: sub_4121E0+B6↑r ...
.idata:004162B8 ; NTSTATUS (__stdcall *NtOpenThreadToken)(HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, PHANDLE TokenHandle)
.idata:004162B8                 extrn NtOpenThreadToken:dword
.idata:004162B8                                         ; CODE XREF: sub_4121E0+1B↑p
.idata:004162B8                                         ; DATA XREF: sub_4121E0+1B↑r
.idata:004162BC ; NTSTATUS (__stdcall *NtOpenProcessToken)(HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, PHANDLE TokenHandle)
.idata:004162BC                 extrn NtOpenProcessToken:dword
.idata:004162BC                                         ; CODE XREF: sub_4121E0+33↑p
.idata:004162BC                                         ; DATA XREF: sub_4121E0+33↑r
.idata:004162C0 ; NTSTATUS (__stdcall *NtQueryInformationToken)(HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength, PULONG ReturnLength)
.idata:004162C0                 extrn NtQueryInformationToken:dword
.idata:004162C0                                         ; CODE XREF: LUAIsElevatedToken(x,x,x)+2A↑p
.idata:004162C0                                         ; LUAIsElevatedToken(x,x,x)+50↑p ...
.idata:004162C4
.idata:004162C4
.idata:004162C8 ; ===========================================================================
.idata:004162C8
.idata:004162C8 ; Segment type: Pure data
.idata:004162C8 ; Segment permissions: Read
.idata:004162C8 _idata          segment para public 'DATA' use32
.idata:004162C8                 assume cs:_idata
.idata:004162C8                 ;org 4162C8h
.idata:004162C8 ___guard_check_icall_fptr dd offset @_guard_check_icall_nop@4
.idata:004162C8                                         ; DATA XREF: .text:00402D78↑o
.idata:004162C8                                         ; _wmain+207↑r ...
.idata:004162C8                                         ; _guard_check_icall_nop(x)
.idata:004162CC __IMPORT_DESCRIPTOR_msvcrt dd rva off_416748 ; Import Name Table
.idata:004162D0                 dd 0                    ; Time stamp
.idata:004162D4                 dd 0                    ; Forwarder Chain
.idata:004162D8                 dd rva aMsvcrtDll       ; DLL Name
.idata:004162DC                 dd rva bsearch          ; Import Address Table
.idata:004162E0                 dd rva off_416710       ; Import Name Table
.idata:004162E4                 dd 0                    ; Time stamp
.idata:004162E8                 dd 0                    ; Forwarder Chain
.idata:004162EC                 dd rva aApiMsWinSecuri  ; DLL Name
.idata:004162F0                 dd rva SetSecurityDescriptorGroup ; Import Address Table
.idata:004162F4                 dd rva off_4165C8       ; Import Name Table
.idata:004162F8                 dd 0                    ; Time stamp
.idata:004162FC                 dd 0                    ; Forwarder Chain
.idata:00416300                 dd rva aApiMsWinCoreFi  ; DLL Name
.idata:00416304                 dd rva ReadFile         ; Import Address Table
.idata:00416308                 dd rva off_416628       ; Import Name Table
.idata:0041630C                 dd 0                    ; Time stamp
.idata:00416310                 dd 0                    ; Forwarder Chain
.idata:00416314                 dd rva aApiMsWinCoreLi  ; DLL Name
.idata:00416318                 dd rva LoadResource     ; Import Address Table
.idata:0041631C __IMPORT_DESCRIPTOR_OLEAUT32 dd rva dword_416538 ; Import Name Table
.idata:00416320                 dd 0                    ; Time stamp
.idata:00416324                 dd 0                    ; Forwarder Chain
.idata:00416328                 dd rva aOleaut32Dll     ; DLL Name
.idata:0041632C                 dd rva SafeArrayDestroy ; Import Address Table
.idata:00416330                 dd rva off_4165F8       ; Import Name Table
.idata:00416334                 dd 0                    ; Time stamp
.idata:00416338                 dd 0                    ; Forwarder Chain
.idata:0041633C                 dd rva aApiMsWinCoreHe  ; DLL Name
.idata:00416340                 dd rva HeapFree         ; Import Address Table
.idata:00416344                 dd rva off_41669C       ; Import Name Table
.idata:00416348                 dd 0                    ; Time stamp
.idata:0041634C                 dd 0                    ; Forwarder Chain
.idata:00416350                 dd rva aApiMsWinCorePr  ; DLL Name
.idata:00416354                 dd rva GetCurrentThreadId ; Import Address Table
.idata:00416358                 dd rva off_41668C       ; Import Name Table
.idata:0041635C                 dd 0                    ; Time stamp
.idata:00416360                 dd 0                    ; Forwarder Chain
.idata:00416364                 dd rva aApiMsWinCorePr_0 ; DLL Name
.idata:00416368                 dd rva SearchPathW      ; Import Address Table
.idata:0041636C                 dd rva off_416734       ; Import Name Table
.idata:00416370                 dd 0                    ; Time stamp
.idata:00416374                 dd 0                    ; Forwarder Chain
.idata:00416378                 dd rva aApiMsWinSecuri_0 ; DLL Name
.idata:0041637C                 dd rva ConvertSidToStringSidW ; Import Address Table
.idata:00416380                 dd rva off_416594       ; Import Name Table
.idata:00416384                 dd 0                    ; Time stamp
.idata:00416388                 dd 0                    ; Forwarder Chain
.idata:0041638C                 dd rva aApiMsWinCoreCo  ; DLL Name
.idata:00416390                 dd rva SetConsoleMode   ; Import Address Table
.idata:00416394                 dd rva off_416578       ; Import Name Table
.idata:00416398                 dd 0                    ; Time stamp
.idata:0041639C                 dd 0                    ; Forwarder Chain
.idata:004163A0                 dd rva aApiMsWinCoreCo_0 ; DLL Name
.idata:004163A4                 dd rva CreateStreamOnHGlobal ; Import Address Table
.idata:004163A8 __IMPORT_DESCRIPTOR_SspiCli dd rva off_416570 ; Import Name Table
.idata:004163AC                 dd 0                    ; Time stamp
.idata:004163B0                 dd 0                    ; Forwarder Chain
.idata:004163B4                 dd rva aSspicliDll      ; DLL Name
.idata:004163B8                 dd rva GetUserNameExW   ; Import Address Table
.idata:004163BC                 dd rva dword_416740     ; Import Name Table
.idata:004163C0                 dd 0                    ; Time stamp
.idata:004163C4                 dd 0                    ; Forwarder Chain
.idata:004163C8                 dd rva aApiMsWinShcore  ; DLL Name
.idata:004163CC                 dd rva api_ms_win_shcore_path_l1_1_0_170 ; Import Address Table
.idata:004163D0                 dd rva off_4166D4       ; Import Name Table
.idata:004163D4                 dd 0                    ; Time stamp
.idata:004163D8                 dd 0                    ; Forwarder Chain
.idata:004163DC                 dd rva aApiMsWinCoreSt  ; DLL Name
.idata:004163E0                 dd rva WideCharToMultiByte ; Import Address Table
.idata:004163E4                 dd rva off_4165B4       ; Import Name Table
.idata:004163E8                 dd 0                    ; Time stamp
.idata:004163EC                 dd 0                    ; Forwarder Chain
.idata:004163F0                 dd rva aApiMsWinCoreEr  ; DLL Name
.idata:004163F4                 dd rva UnhandledExceptionFilter ; Import Address Table
.idata:004163F8                 dd rva off_41660C       ; Import Name Table
.idata:004163FC                 dd 0                    ; Time stamp
.idata:00416400                 dd 0                    ; Forwarder Chain
.idata:00416404                 dd rva aApiMsWinCoreHe_0 ; DLL Name
.idata:00416408                 dd rva GlobalAlloc      ; Import Address Table
.idata:0041640C                 dd rva off_4165F0       ; Import Name Table
.idata:00416410                 dd 0                    ; Time stamp
.idata:00416414                 dd 0                    ; Forwarder Chain
.idata:00416418                 dd rva aApiMsWinCoreHa  ; DLL Name
.idata:0041641C                 dd rva CloseHandle      ; Import Address Table
.idata:00416420                 dd rva off_416654       ; Import Name Table
.idata:00416424                 dd 0                    ; Time stamp
.idata:00416428                 dd 0                    ; Forwarder Chain
.idata:0041642C                 dd rva aApiMsWinCoreLi_0 ; DLL Name
.idata:00416430                 dd rva FindResourceW    ; Import Address Table
.idata:00416434                 dd rva off_41661C       ; Import Name Table
.idata:00416438                 dd 0                    ; Time stamp
.idata:0041643C                 dd 0                    ; Forwarder Chain
.idata:00416440                 dd rva aApiMsWinCoreHe_1 ; DLL Name
.idata:00416444                 dd rva GlobalLock       ; Import Address Table
.idata:00416448                 dd rva off_4166F8       ; Import Name Table
.idata:0041644C                 dd 0                    ; Time stamp
.idata:00416450                 dd 0                    ; Forwarder Chain
.idata:00416454                 dd rva aApiMsWinCoreTi  ; DLL Name
.idata:00416458                 dd rva SystemTimeToFileTime ; Import Address Table
.idata:0041645C                 dd rva off_4166E0       ; Import Name Table
.idata:00416460                 dd 0                    ; Time stamp
.idata:00416464                 dd 0                    ; Forwarder Chain
.idata:00416468                 dd rva aApiMsWinCoreSy  ; DLL Name
.idata:0041646C                 dd rva Sleep            ; Import Address Table
.idata:00416470                 dd rva off_4166BC       ; Import Name Table
.idata:00416474                 dd 0                    ; Time stamp
.idata:00416478                 dd 0                    ; Forwarder Chain
.idata:0041647C                 dd rva aApiMsWinCorePr_1 ; DLL Name
.idata:00416480                 dd rva QueryPerformanceCounter ; Import Address Table
.idata:00416484                 dd rva off_4166E8       ; Import Name Table
.idata:00416488                 dd 0                    ; Time stamp
.idata:0041648C                 dd 0                    ; Forwarder Chain
.idata:00416490                 dd rva aApiMsWinCoreSy_0 ; DLL Name
.idata:00416494                 dd rva GetTickCount     ; Import Address Table
.idata:00416498                 dd rva off_416660       ; Import Name Table
.idata:0041649C                 dd 0                    ; Time stamp
.idata:004164A0                 dd 0                    ; Forwarder Chain
.idata:004164A4                 dd rva aApiMsWinCoreLo  ; DLL Name
.idata:004164A8                 dd rva SetThreadPreferredUILanguages ; Import Address Table
.idata:004164AC                 dd rva off_416700       ; Import Name Table
.idata:004164B0                 dd 0                    ; Time stamp
.idata:004164B4                 dd 0                    ; Forwarder Chain
.idata:004164B8                 dd rva aApiMsWinCoreVe  ; DLL Name
.idata:004164BC                 dd rva VerQueryValueW   ; Import Address Table
.idata:004164C0                 dd rva off_4165AC       ; Import Name Table
.idata:004164C4                 dd 0                    ; Time stamp
.idata:004164C8                 dd 0                    ; Forwarder Chain
.idata:004164CC                 dd rva aApiMsWinCoreCo_1 ; DLL Name
.idata:004164D0                 dd rva GetConsoleScreenBufferInfo ; Import Address Table
.idata:004164D4                 dd rva off_4166C4       ; Import Name Table
.idata:004164D8                 dd 0                    ; Time stamp
.idata:004164DC                 dd 0                    ; Forwarder Chain
.idata:004164E0                 dd rva aApiMsWinCoreRe  ; DLL Name
.idata:004164E4                 dd rva RegOpenKeyExW    ; Import Address Table
.idata:004164E8                 dd rva off_416670       ; Import Name Table
.idata:004164EC                 dd 0                    ; Time stamp
.idata:004164F0                 dd 0                    ; Forwarder Chain
.idata:004164F4                 dd rva aApiMsWinCoreLo_0 ; DLL Name
.idata:004164F8                 dd rva GetUserDefaultUILanguage ; Import Address Table
.idata:004164FC                 dd rva off_41667C       ; Import Name Table
.idata:00416500                 dd 0                    ; Time stamp
.idata:00416504                 dd 0                    ; Forwarder Chain
.idata:00416508                 dd rva aApiMsWinCoreMe  ; DLL Name
.idata:0041650C                 dd rva UnmapViewOfFile  ; Import Address Table
.idata:00416510 __IMPORT_DESCRIPTOR_ntdll dd rva off_4167EC ; Import Name Table
.idata:00416514                 dd 0                    ; Time stamp
.idata:00416518                 dd 0                    ; Forwarder Chain
.idata:0041651C                 dd rva aNtdllDll        ; DLL Name
.idata:00416520                 dd rva NtClose          ; Import Address Table
.idata:00416524                 db    0
.idata:00416525                 db    0
.idata:00416526                 db    0
.idata:00416527                 db    0
.idata:00416528                 db    0
.idata:00416529                 db    0
.idata:0041652A                 db    0
.idata:0041652B                 db    0
.idata:0041652C                 db    0
.idata:0041652D                 db    0
.idata:0041652E                 db    0
.idata:0041652F                 db    0
.idata:00416530                 db    0
.idata:00416531                 db    0
.idata:00416532                 db    0
.idata:00416533                 db    0
.idata:00416534                 db    0
.idata:00416535                 db    0
.idata:00416536                 db    0
.idata:00416537                 db    0
.idata:00416538 ;
.idata:00416538 ; Import names for OLEAUT32.dll
.idata:00416538 ;
.idata:00416538 dword_416538    dd 80000010h            ; DATA XREF: .idata:__IMPORT_DESCRIPTOR_OLEAUT32↑o
.idata:0041653C                 dd 800000B8h
.idata:00416540                 dd 80000008h
.idata:00416544                 dd 80000006h
.idata:00416548                 dd 80000002h
.idata:0041654C                 dd 80000018h
.idata:00416550                 dd 8000019Bh
.idata:00416554                 dd 80000017h
.idata:00416558                 dd 80000009h
.idata:0041655C                 dd 80000072h
.idata:00416560                 dd 8000000Ch
.idata:00416564                 dd 8000005Eh
.idata:00416568                 dd 800000B9h
.idata:0041656C                 dd 0
.idata:00416570 ;
.idata:00416570 ; Import names for SspiCli.dll
.idata:00416570 ;
.idata:00416570 off_416570      dd rva word_416B36      ; DATA XREF: .idata:__IMPORT_DESCRIPTOR_SspiCli↑o
.idata:00416574                 dd 0
.idata:00416578 ;
.idata:00416578 ; Import names for api-ms-win-core-com-l1-1-1.dll
.idata:00416578 ;
.idata:00416578 off_416578      dd rva word_416B1E      ; DATA XREF: .idata:00416394↑o
.idata:0041657C                 dd rva word_416A9C
.idata:00416580                 dd rva word_416B9E
.idata:00416584                 dd rva word_416A8A
.idata:00416588                 dd rva word_416AAE
.idata:0041658C                 dd rva word_416D20
.idata:00416590                 dd 0
.idata:00416594 ;
.idata:00416594 ; Import names for api-ms-win-core-console-l1-1-0.dll
.idata:00416594 ;
.idata:00416594 off_416594      dd rva word_416A78      ; DATA XREF: .idata:00416380↑o
.idata:00416598                 dd rva word_416B8C
.idata:0041659C                 dd rva word_4171BE
.idata:004165A0                 dd rva word_4171A8
.idata:004165A4                 dd rva word_416BDA
.idata:004165A8                 dd 0
.idata:004165AC ;
.idata:004165AC ; Import names for api-ms-win-core-console-l2-1-0.dll
.idata:004165AC ;
.idata:004165AC off_4165AC      dd rva word_4172AE      ; DATA XREF: .idata:004164C0↑o
.idata:004165B0                 dd 0
.idata:004165B4 ;
.idata:004165B4 ; Import names for api-ms-win-core-errorhandling-l1-1-1.dll
.idata:004165B4 ;
.idata:004165B4 off_4165B4      dd rva word_416D90      ; DATA XREF: .idata:004163E4↑o
.idata:004165B8                 dd rva word_416DAC
.idata:004165BC                 dd rva word_41731C
.idata:004165C0                 dd rva word_416BB6
.idata:004165C4                 dd 0
.idata:004165C8 ;
.idata:004165C8 ; Import names for api-ms-win-core-file-l1-2-1.dll
.idata:004165C8 ;
.idata:004165C8 off_4165C8      dd rva word_4169AE      ; DATA XREF: .idata:004162F4↑o
.idata:004165CC                 dd rva word_4172EE
.idata:004165D0                 dd rva word_4171E4
.idata:004165D4                 dd rva word_4172DE
.idata:004165D8                 dd rva word_416D32
.idata:004165DC                 dd rva word_416CB8
.idata:004165E0                 dd rva word_416B10
.idata:004165E4                 dd rva word_4172CC
.idata:004165E8                 dd rva word_416A08
.idata:004165EC                 dd 0
.idata:004165F0 ;
.idata:004165F0 ; Import names for api-ms-win-core-handle-l1-1-0.dll
.idata:004165F0 ;
.idata:004165F0 off_4165F0      dd rva word_416C16      ; DATA XREF: .idata:0041640C↑o
.idata:004165F4                 dd 0
.idata:004165F8 ;
.idata:004165F8 ; Import names for api-ms-win-core-heap-l1-2-0.dll
.idata:004165F8 ;
.idata:004165F8 off_4165F8      dd rva word_4169EA      ; DATA XREF: .idata:00416330↑o
.idata:004165FC                 dd rva word_416C24
.idata:00416600                 dd rva word_416C78
.idata:00416604                 dd rva word_416CF6
.idata:00416608                 dd 0
.idata:0041660C ;
.idata:0041660C ; Import names for api-ms-win-core-heap-l2-1-0.dll
.idata:0041660C ;
.idata:0041660C off_41660C      dd rva word_416BFA      ; DATA XREF: .idata:004163F8↑o
.idata:00416610                 dd rva word_416C08
.idata:00416614                 dd rva word_416CEA
.idata:00416618                 dd 0
.idata:0041661C ;
.idata:0041661C ; Import names for api-ms-win-core-heap-obsolete-l1-1-0.dll
.idata:0041661C ;
.idata:0041661C off_41661C      dd rva word_416CAA      ; DATA XREF: .idata:00416434↑o
.idata:00416620                 dd rva word_416D78
.idata:00416624                 dd 0
.idata:00416628 ;
.idata:00416628 ; Import names for api-ms-win-core-libraryloader-l1-2-0.dll
.idata:00416628 ;
.idata:00416628 off_416628      dd rva word_416C58      ; DATA XREF: .idata:00416308↑o
.idata:0041662C                 dd rva word_416DDE
.idata:00416630                 dd rva word_417220
.idata:00416634                 dd rva word_4173DE
.idata:00416638                 dd rva word_417212
.idata:0041663C                 dd rva word_416B48
.idata:00416640                 dd rva word_416BEA
.idata:00416644                 dd rva word_417398
.idata:00416648                 dd rva word_416C84
.idata:0041664C                 dd rva word_4169D8
.idata:00416650                 dd 0
.idata:00416654 ;
.idata:00416654 ; Import names for api-ms-win-core-libraryloader-l1-2-2.dll
.idata:00416654 ;
.idata:00416654 off_416654      dd rva word_416C68      ; DATA XREF: .idata:00416420↑o
.idata:00416658                 dd rva word_417202
.idata:0041665C                 dd 0
.idata:00416660 ;
.idata:00416660 ; Import names for api-ms-win-core-localization-l1-2-1.dll
.idata:00416660 ;
.idata:00416660 off_416660      dd rva word_41728E      ; DATA XREF: .idata:00416498↑o
.idata:00416664                 dd rva word_4171F0
.idata:00416668                 dd rva word_417236
.idata:0041666C                 dd 0
.idata:00416670 ;
.idata:00416670 ; Import names for api-ms-win-core-localization-obsolete-l1-3-0.dll
.idata:00416670 ;
.idata:00416670 off_416670      dd rva word_41734A      ; DATA XREF: .idata:004164E8↑o
.idata:00416674                 dd rva word_41732C
.idata:00416678                 dd 0
.idata:0041667C ;
.idata:0041667C ; Import names for api-ms-win-core-memory-l1-1-2.dll
.idata:0041667C ;
.idata:0041667C off_41667C      dd rva word_417386      ; DATA XREF: .idata:004164FC↑o
.idata:00416680                 dd rva word_4173CE
.idata:00416684                 dd rva word_4173B8
.idata:00416688                 dd 0
.idata:0041668C ;
.idata:0041668C ; Import names for api-ms-win-core-processenvironment-l1-2-0.dll
.idata:0041668C ;
.idata:0041668C off_41668C      dd rva word_4172FA      ; DATA XREF: .idata:00416358↑o
.idata:00416690                 dd rva word_416A30
.idata:00416694                 dd rva word_416C92
.idata:00416698                 dd 0
.idata:0041669C ;
.idata:0041669C ; Import names for api-ms-win-core-processthreads-l1-1-2.dll
.idata:0041669C ;
.idata:0041669C off_41669C      dd rva word_416E22      ; DATA XREF: .idata:00416344↑o
.idata:004166A0                 dd rva word_416E0C
.idata:004166A4                 dd rva word_416DCA
.idata:004166A8                 dd rva word_416A1C
.idata:004166AC                 dd rva word_416BC6
.idata:004166B0                 dd rva word_4169F6
.idata:004166B4                 dd rva word_416AFC
.idata:004166B8                 dd 0
.idata:004166BC ;
.idata:004166BC ; Import names for api-ms-win-core-profile-l1-1-0.dll
.idata:004166BC ;
.idata:004166BC off_4166BC      dd rva word_416DF2      ; DATA XREF: .idata:00416470↑o
.idata:004166C0                 dd 0
.idata:004166C4 ;
.idata:004166C4 ; Import names for api-ms-win-core-registry-l1-1-0.dll
.idata:004166C4 ;
.idata:004166C4 off_4166C4      dd rva word_417366      ; DATA XREF: .idata:004164D4↑o
.idata:004166C8                 dd rva word_417308
.idata:004166CC                 dd rva word_4173AA
.idata:004166D0                 dd 0
.idata:004166D4 ;
.idata:004166D4 ; Import names for api-ms-win-core-string-l1-1-0.dll
.idata:004166D4 ;
.idata:004166D4 off_4166D4      dd rva word_4171CE      ; DATA XREF: .idata:004163D0↑o
.idata:004166D8                 dd rva word_416B76
.idata:004166DC                 dd 0
.idata:004166E0 ;
.idata:004166E0 ; Import names for api-ms-win-core-synch-l1-2-0.dll
.idata:004166E0 ;
.idata:004166E0 off_4166E0      dd rva word_416D88      ; DATA XREF: .idata:0041645C↑o
.idata:004166E4                 dd 0
.idata:004166E8 ;
.idata:004166E8 ; Import names for api-ms-win-core-sysinfo-l1-2-1.dll
.idata:004166E8 ;
.idata:004166E8 off_4166E8      dd rva word_416E52      ; DATA XREF: .idata:00416484↑o
.idata:004166EC                 dd rva word_417376
.idata:004166F0                 dd rva word_416E38
.idata:004166F4                 dd 0
.idata:004166F8 ;
.idata:004166F8 ; Import names for api-ms-win-core-timezone-l1-1-0.dll
.idata:004166F8 ;
.idata:004166F8 off_4166F8      dd rva word_416D08      ; DATA XREF: .idata:00416448↑o
.idata:004166FC                 dd 0
.idata:00416700 ;
.idata:00416700 ; Import names for api-ms-win-core-version-l1-1-0.dll
.idata:00416700 ;
.idata:00416700 off_416700      dd rva word_41727C      ; DATA XREF: .idata:004164AC↑o
.idata:00416704                 dd rva word_417248
.idata:00416708                 dd rva word_417264
.idata:0041670C                 dd 0
.idata:00416710 ;
.idata:00416710 ; Import names for api-ms-win-security-base-l1-2-0.dll
.idata:00416710 ;
.idata:00416710 off_416710      dd rva word_4169BA      ; DATA XREF: .idata:004162E0↑o
.idata:00416714                 dd rva word_416998
.idata:00416718                 dd rva word_416D40
.idata:0041671C                 dd rva word_416ADC
.idata:00416720                 dd rva word_416CCC
.idata:00416724                 dd rva word_416D5C
.idata:00416728                 dd rva word_416C3A
.idata:0041672C                 dd rva word_416B58
.idata:00416730                 dd 0
.idata:00416734 ;
.idata:00416734 ; Import names for api-ms-win-security-sddl-l1-1-0.dll
.idata:00416734 ;
.idata:00416734 off_416734      dd rva word_416AC2      ; DATA XREF: .idata:0041636C↑o
.idata:00416738                 dd rva word_416A40
.idata:0041673C                 dd 0
.idata:00416740 ;
.idata:00416740 ; Import names for api-ms-win-shcore-path-l1-1-0.dll
.idata:00416740 ;
.idata:00416740 dword_416740    dd 800000AAh            ; DATA XREF: .idata:004163BC↑o
.idata:00416744                 dd 0
.idata:00416748 ;
.idata:00416748 ; Import names for msvcrt.dll
.idata:00416748 ;
.idata:00416748 off_416748      dd rva word_41719E      ; DATA XREF: .idata:__IMPORT_DESCRIPTOR_msvcrt↑o
.idata:0041674C                 dd rva word_417194
.idata:00416750                 dd rva word_416800
.idata:00416754                 dd rva word_41715C
.idata:00416758                 dd rva word_41716C
.idata:0041675C                 dd rva word_417188
.idata:00416760                 dd rva word_41697E
.idata:00416764                 dd rva word_416970
.idata:00416768                 dd rva word_41695C
.idata:0041676C                 dd rva word_416944
.idata:00416770                 dd rva word_416930
.idata:00416774                 dd rva word_416922
.idata:00416778                 dd rva word_416918
.idata:0041677C                 dd rva word_416910
.idata:00416780                 dd rva word_416908
.idata:00416784                 dd rva word_4168F6
.idata:00416788                 dd rva word_4168E4
.idata:0041678C                 dd rva word_4168D6
.idata:00416790                 dd rva word_4168C6
.idata:00416794                 dd rva word_4168B8
.idata:00416798                 dd rva word_4168AE
.idata:0041679C                 dd rva word_4168A2
.idata:004167A0                 dd rva word_416898
.idata:004167A4                 dd rva word_41688E
.idata:004167A8                 dd rva word_416884
.idata:004167AC                 dd rva word_41687A
.idata:004167B0                 dd rva word_416870
.idata:004167B4                 dd rva word_416866
.idata:004167B8                 dd rva word_41685C
.idata:004167BC                 dd rva word_416854
.idata:004167C0                 dd rva word_41684C
.idata:004167C4                 dd rva word_416844
.idata:004167C8                 dd rva word_41683A
.idata:004167CC                 dd rva word_41682E
.idata:004167D0                 dd rva word_417530
.idata:004167D4                 dd rva word_416822
.idata:004167D8                 dd rva word_416818
.idata:004167DC                 dd rva word_41680A
.idata:004167E0                 dd rva word_41717C
.idata:004167E4                 dd rva word_41753A
.idata:004167E8                 dd 0
.idata:004167EC ;
.idata:004167EC ; Import names for ntdll.dll
.idata:004167EC ;
.idata:004167EC off_4167EC      dd rva word_417508      ; DATA XREF: .idata:__IMPORT_DESCRIPTOR_ntdll↑o
.idata:004167F0                 dd rva word_417512
.idata:004167F4                 dd rva word_4174D8
.idata:004167F8                 dd rva word_4174EE
.idata:004167FC                 dd 0
.idata:00416800 word_416800     dw 58Fh                 ; DATA XREF: .idata:00416750↑o
.idata:00416802                 db 'wprintf',0
.idata:0041680A word_41680A     dw 3ECh                 ; DATA XREF: .idata:004167DC↑o
.idata:0041680C                 db '_vsnwprintf',0
.idata:00416818 word_416818     dw 4B3h                 ; DATA XREF: .idata:004167D8↑o
.idata:0041681A                 db 'ferror',0
.idata:00416821                 align 2
.idata:00416822 word_416822     dw 55Ah                 ; DATA XREF: .idata:004167D4↑o
.idata:00416824                 db 'towlower',0
.idata:0041682D                 align 2
.idata:0041682E word_41682E     dw 40Dh                 ; DATA XREF: .idata:004167CC↑o
.idata:00416830                 db '_wcsicmp',0
.idata:00416839                 align 2
.idata:0041683A word_41683A     dw 4B1h                 ; DATA XREF: .idata:004167C8↑o
.idata:0041683C                 db 'fclose',0
.idata:00416843                 align 4
.idata:00416844 word_416844     dw 488h                 ; DATA XREF: .idata:004167C4↑o
.idata:00416846                 db '_wtoi',0
.idata:0041684C word_41684C     dw 4CBh                 ; DATA XREF: .idata:004167C0↑o
.idata:0041684E                 db 'fseek',0
.idata:00416854 word_416854     dw 519h                 ; DATA XREF: .idata:004167BC↑o
.idata:00416856                 db 'qsort',0
.idata:0041685C word_41685C     dw 585h                 ; DATA XREF: .idata:004167B8↑o
.idata:0041685E                 db 'wcstok',0
.idata:00416865                 align 2
.idata:00416866 word_416866     dw 167h                 ; DATA XREF: .idata:004167B4↑o
.idata:00416868                 db '_errno',0
.idata:0041686F                 align 10h
.idata:00416870 word_416870     dw 570h                 ; DATA XREF: .idata:004167B0↑o
.idata:00416872                 db 'wcschr',0
.idata:00416879                 align 2
.idata:0041687A word_41687A     dw 446h                 ; DATA XREF: .idata:004167AC↑o
.idata:0041687C                 db '_wfopen',0
.idata:00416884 word_416884     dw 583h                 ; DATA XREF: .idata:004167A8↑o
.idata:00416886                 db 'wcsstr',0
.idata:0041688D                 align 2
.idata:0041688E word_41688E     dw 4B9h                 ; DATA XREF: .idata:004167A4↑o
.idata:00416890                 db 'fgetws',0
.idata:00416897                 align 4
.idata:00416898 word_416898     dw 4E5h                 ; DATA XREF: .idata:004167A0↑o
.idata:0041689A                 db 'isspace',0
.idata:004168A2 word_4168A2     dw 1D1h                 ; DATA XREF: .idata:0041679C↑o
.idata:004168A4                 db '_getmbcp',0
.idata:004168AD                 align 2
.idata:004168AE word_4168AE     dw 57Fh                 ; DATA XREF: .idata:00416798↑o
.idata:004168B0                 db 'wcsrchr',0
.idata:004168B8 word_4168B8     dw 6Fh                  ; DATA XREF: .idata:00416794↑o
.idata:004168BA                 db '_XcptFilter',0
.idata:004168C6 word_4168C6     dw 0C9h                 ; DATA XREF: .idata:00416790↑o
.idata:004168C8                 db '__p__commode',0
.idata:004168D5                 align 2
.idata:004168D6 word_4168D6     dw 111h                 ; DATA XREF: .idata:0041678C↑o
.idata:004168D8                 db '_amsg_exit',0
.idata:004168E3                 align 4
.idata:004168E4 word_4168E4     dw 0F1h                 ; DATA XREF: .idata:00416788↑o
.idata:004168E6                 db '__wgetmainargs',0
.idata:004168F5                 align 2
.idata:004168F6 word_4168F6     dw 0E2h                 ; DATA XREF: .idata:00416784↑o
.idata:004168F8                 db '__set_app_type',0
.idata:00416907                 align 4
.idata:00416908 word_416908     dw 4AEh                 ; DATA XREF: .idata:00416780↑o
.idata:0041690A                 db 'exit',0
.idata:0041690F                 align 10h
.idata:00416910 word_416910     dw 173h                 ; DATA XREF: .idata:0041677C↑o
.idata:00416912                 db '_exit',0
.idata:00416918 word_416918     dw 124h                 ; DATA XREF: .idata:00416778↑o
.idata:0041691A                 db '_cexit',0
.idata:00416921                 align 2
.idata:00416922 word_416922     dw 0CEh                 ; DATA XREF: .idata:00416774↑o
.idata:00416924                 db '__p__fmode',0
.idata:0041692F                 align 10h
.idata:00416930 word_416930     dw 0E4h                 ; DATA XREF: .idata:00416770↑o
.idata:00416932                 db '__setusermatherr',0
.idata:00416943                 align 4
.idata:00416944 word_416944     dw 1E8h                 ; DATA XREF: .idata:0041676C↑o
.idata:00416946                 db '_initterm',0
.idata:00416950 aMsvcrtDll      db 'msvcrt.dll',0       ; DATA XREF: .idata:004162D8↑o
.idata:0041695B                 align 4
.idata:0041695C word_41695C     dw 35h                  ; DATA XREF: .idata:00416768↑o
.idata:0041695E                 db '?terminate@@YAXXZ',0
.idata:00416970 word_416970     dw 137h                 ; DATA XREF: .idata:00416764↑o
.idata:00416972                 db '_controlfp',0
.idata:0041697D                 align 2
.idata:0041697E word_41697E     dw 16Ah                 ; DATA XREF: .idata:00416760↑o
.idata:00416980                 db '_except_handler4_common',0
.idata:00416998 word_416998     dw 42h                  ; DATA XREF: .idata:00416714↑o
.idata:0041699A                 db 'GetTokenInformation',0
.idata:004169AE word_4169AE     dw 47h                  ; DATA XREF: .idata:off_4165C8↑o
.idata:004169B0                 db 'ReadFile',0
.idata:004169B9                 align 2
.idata:004169BA word_4169BA     dw 63h                  ; DATA XREF: .idata:off_416710↑o
.idata:004169BC                 db 'SetSecurityDescriptorGroup',0
.idata:004169D7                 align 4
.idata:004169D8 word_4169D8     dw 20h                  ; DATA XREF: .idata:0041664C↑o
.idata:004169DA                 db 'SizeofResource',0
.idata:004169E9                 align 2
.idata:004169EA word_4169EA     dw 6                    ; DATA XREF: .idata:off_4165F8↑o
.idata:004169EC                 db 'HeapFree',0
.idata:004169F5                 align 2
.idata:004169F6 word_4169F6     dw 3                    ; DATA XREF: .idata:004166B0↑o
.idata:004169F8                 db 'OpenThreadToken',0
.idata:00416A08 word_416A08     dw 33h                  ; DATA XREF: .idata:004165E8↑o
.idata:00416A0A                 db 'GetFullPathNameW',0
.idata:00416A1B                 align 4
.idata:00416A1C word_416A1C     dw 0Ch                  ; DATA XREF: .idata:004166A8↑o
.idata:00416A1E                 db 'GetCurrentProcess',0
.idata:00416A30 word_416A30     dw 0Ch                  ; DATA XREF: .idata:00416690↑o
.idata:00416A32                 db 'GetStdHandle',0
.idata:00416A3F                 align 10h
.idata:00416A40 word_416A40     dw 2                    ; DATA XREF: .idata:00416738↑o
.idata:00416A42                 db 'ConvertStringSecurityDescriptorToSecurityDescriptorW',0
.idata:00416A77                 align 4
.idata:00416A78 word_416A78     dw 0Bh                  ; DATA XREF: .idata:off_416594↑o
.idata:00416A7A                 db 'SetConsoleMode',0
.idata:00416A89                 align 2
.idata:00416A8A word_416A8A     dw 52h                  ; DATA XREF: .idata:00416584↑o
.idata:00416A8C                 db 'StringFromGUID2',0
.idata:00416A9C word_416A9C     dw 44h                  ; DATA XREF: .idata:0041657C↑o
.idata:00416A9E                 db 'CoUninitialize',0
.idata:00416AAD                 align 2
.idata:00416AAE word_416AAE     dw 9                    ; DATA XREF: .idata:00416588↑o
.idata:00416AB0                 db 'CoCreateInstance',0
.idata:00416AC1                 align 2
.idata:00416AC2 word_416AC2     dw 1                    ; DATA XREF: .idata:off_416734↑o
.idata:00416AC4                 db 'ConvertSidToStringSidW',0
.idata:00416ADB                 align 4
.idata:00416ADC word_416ADC     dw 48h                  ; DATA XREF: .idata:0041671C↑o
.idata:00416ADE                 db 'InitializeSecurityDescriptor',0
.idata:00416AFB                 align 4
.idata:00416AFC word_416AFC     dw 2                    ; DATA XREF: .idata:004166B4↑o
.idata:00416AFE                 db 'OpenProcessToken',0
.idata:00416B0F                 align 10h
.idata:00416B10 word_416B10     dw 6                    ; DATA XREF: .idata:004165E0↑o
.idata:00416B12                 db 'CreateFileW',0
.idata:00416B1E word_416B1E     dw 49h                  ; DATA XREF: .idata:off_416578↑o
.idata:00416B20                 db 'CreateStreamOnHGlobal',0
.idata:00416B36 word_416B36     dw 19h                  ; DATA XREF: .idata:off_416570↑o
.idata:00416B38                 db 'GetUserNameExW',0
.idata:00416B47                 align 4
.idata:00416B48 word_416B48     dw 0Eh                  ; DATA XREF: .idata:0041663C↑o
.idata:00416B4A                 db 'FreeResource',0
.idata:00416B57                 align 4
.idata:00416B58 word_416B58     dw 3Bh                  ; DATA XREF: .idata:0041672C↑o
.idata:00416B5A                 db 'GetSecurityDescriptorOwner',0
.idata:00416B75                 align 2
.idata:00416B76 word_416B76     dw 6                    ; DATA XREF: .idata:004166D8↑o
.idata:00416B78                 db 'MultiByteToWideChar',0
.idata:00416B8C word_416B8C     dw 2                    ; DATA XREF: .idata:00416598↑o
.idata:00416B8E                 db 'GetConsoleMode',0
.idata:00416B9D                 align 2
.idata:00416B9E word_416B9E     dw 29h                  ; DATA XREF: .idata:00416580↑o
.idata:00416BA0                 db 'CoInitializeSecurity',0
.idata:00416BB5                 align 2
.idata:00416BB6 word_416BB6     dw 5                    ; DATA XREF: .idata:004165C0↑o
.idata:00416BB8                 db 'GetLastError',0
.idata:00416BC5                 align 2
.idata:00416BC6 word_416BC6     dw 10h                  ; DATA XREF: .idata:004166AC↑o
.idata:00416BC8                 db 'GetCurrentThread',0
.idata:00416BD9                 align 2
.idata:00416BDA word_416BDA     dw 9                    ; DATA XREF: .idata:004165A4↑o
.idata:00416BDC                 db 'ReadConsoleW',0
.idata:00416BE9                 align 2
.idata:00416BEA word_416BEA     dw 1Dh                  ; DATA XREF: .idata:00416640↑o
.idata:00416BEC                 db 'LockResource',0
.idata:00416BF9                 align 2
.idata:00416BFA word_416BFA     dw 0                    ; DATA XREF: .idata:off_41660C↑o
.idata:00416BFC                 db 'GlobalAlloc',0
.idata:00416C08 word_416C08     dw 1                    ; DATA XREF: .idata:00416610↑o
.idata:00416C0A                 db 'GlobalFree',0
.idata:00416C15                 align 2
.idata:00416C16 word_416C16     dw 0                    ; DATA XREF: .idata:off_4165F0↑o
.idata:00416C18                 db 'CloseHandle',0
.idata:00416C24 word_416C24     dw 0Ah                  ; DATA XREF: .idata:004165FC↑o
.idata:00416C26                 db 'HeapSetInformation',0
.idata:00416C39                 align 2
.idata:00416C3A word_416C3A     dw 39h                  ; DATA XREF: .idata:00416728↑o
.idata:00416C3C                 db 'GetSecurityDescriptorGroup',0
.idata:00416C57                 align 4
.idata:00416C58 word_416C58     dw 1Ah                  ; DATA XREF: .idata:off_416628↑o
.idata:00416C5A                 db 'LoadResource',0
.idata:00416C67                 align 4
.idata:00416C68 word_416C68     dw 1Ch                  ; DATA XREF: .idata:off_416654↑o
.idata:00416C6A                 db 'FindResourceW',0
.idata:00416C78 word_416C78     dw 2                    ; DATA XREF: .idata:00416600↑o
.idata:00416C7A                 db 'HeapAlloc',0
.idata:00416C84 word_416C84     dw 1Ch                  ; DATA XREF: .idata:00416648↑o
.idata:00416C86                 db 'LoadStringW',0
.idata:00416C92 word_416C92     dw 7                    ; DATA XREF: .idata:00416694↑o
.idata:00416C94                 db 'GetCurrentDirectoryW',0
.idata:00416CA9                 align 2
.idata:00416CAA word_416CAA     dw 4                    ; DATA XREF: .idata:off_41661C↑o
.idata:00416CAC                 db 'GlobalLock',0
.idata:00416CB7                 align 4
.idata:00416CB8 word_416CB8     dw 54h                  ; DATA XREF: .idata:004165DC↑o
.idata:00416CBA                 db 'SetFilePointerEx',0
.idata:00416CCB                 align 4
.idata:00416CCC word_416CCC     dw 64h                  ; DATA XREF: .idata:00416720↑o
.idata:00416CCE                 db 'SetSecurityDescriptorOwner',0
.idata:00416CE9                 align 2
.idata:00416CEA word_416CEA     dw 3                    ; DATA XREF: .idata:00416614↑o
.idata:00416CEC                 db 'LocalFree',0
.idata:00416CF6 word_416CF6     dw 0                    ; DATA XREF: .idata:00416604↑o
.idata:00416CF8                 db 'GetProcessHeap',0
.idata:00416D07                 align 4
.idata:00416D08 word_416D08     dw 8                    ; DATA XREF: .idata:off_4166F8↑o
.idata:00416D0A                 db 'SystemTimeToFileTime',0
.idata:00416D1F                 align 10h
.idata:00416D20 word_416D20     dw 28h                  ; DATA XREF: .idata:0041658C↑o
.idata:00416D22                 db 'CoInitializeEx',0
.idata:00416D31                 align 2
.idata:00416D32 word_416D32     dw 2Fh                  ; DATA XREF: .idata:004165D8↑o
.idata:00416D34                 db 'GetFileType',0
.idata:00416D40 word_416D40     dw 38h                  ; DATA XREF: .idata:00416718↑o
.idata:00416D42                 db 'GetSecurityDescriptorDacl',0
.idata:00416D5C word_416D5C     dw 62h                  ; DATA XREF: .idata:00416724↑o
.idata:00416D5E                 db 'SetSecurityDescriptorDacl',0
.idata:00416D78 word_416D78     dw 7                    ; DATA XREF: .idata:00416620↑o
.idata:00416D7A                 db 'GlobalUnlock',0
.idata:00416D87                 align 4
.idata:00416D88 word_416D88     dw 2Dh                  ; DATA XREF: .idata:off_4166E0↑o
.idata:00416D8A                 db 'Sleep',0
.idata:00416D90 word_416D90     dw 11h                  ; DATA XREF: .idata:off_4165B4↑o
.idata:00416D92                 db 'UnhandledExceptionFilter',0
.idata:00416DAB                 align 4
.idata:00416DAC word_416DAC     dw 0Fh                  ; DATA XREF: .idata:004165B8↑o
.idata:00416DAE                 db 'SetUnhandledExceptionFilter',0
.idata:00416DCA word_416DCA     dw 4Dh                  ; DATA XREF: .idata:004166A4↑o
.idata:00416DCC                 db 'TerminateProcess',0
.idata:00416DDD                 align 2
.idata:00416DDE word_416DDE     dw 11h                  ; DATA XREF: .idata:0041662C↑o
.idata:00416DE0                 db 'GetModuleHandleA',0
.idata:00416DF1                 align 2
.idata:00416DF2 word_416DF2     dw 0                    ; DATA XREF: .idata:off_4166BC↑o
.idata:00416DF4                 db 'QueryPerformanceCounter',0
.idata:00416E0C word_416E0C     dw 0Dh                  ; DATA XREF: .idata:004166A0↑o
.idata:00416E0E                 db 'GetCurrentProcessId',0
.idata:00416E22 word_416E22     dw 11h                  ; DATA XREF: .idata:off_41669C↑o
.idata:00416E24                 db 'GetCurrentThreadId',0
.idata:00416E37                 align 4
.idata:00416E38 word_416E38     dw 14h                  ; DATA XREF: .idata:004166F0↑o
.idata:00416E3A                 db 'GetSystemTimeAsFileTime',0
.idata:00416E52 word_416E52     dw 18h                  ; DATA XREF: .idata:off_4166E8↑o
.idata:00416E54                 db 'GetTickCount',0
.idata:00416E61                 align 2
.idata:00416E62 aApiMsWinSecuri db 'api-ms-win-security-base-l1-2-0.dll',0
.idata:00416E62                                         ; DATA XREF: .idata:004162EC↑o
.idata:00416E86 aApiMsWinCoreFi db 'api-ms-win-core-file-l1-2-1.dll',0
.idata:00416E86                                         ; DATA XREF: .idata:00416300↑o
.idata:00416EA6 aApiMsWinCoreLi db 'api-ms-win-core-libraryloader-l1-2-0.dll',0
.idata:00416EA6                                         ; DATA XREF: .idata:00416314↑o
.idata:00416ECF                 align 10h
.idata:00416ED0 aOleaut32Dll    db 'OLEAUT32.dll',0     ; DATA XREF: .idata:00416328↑o
.idata:00416EDD                 align 2
.idata:00416EDE aApiMsWinCoreHe db 'api-ms-win-core-heap-l1-2-0.dll',0
.idata:00416EDE                                         ; DATA XREF: .idata:0041633C↑o
.idata:00416EFE aApiMsWinCorePr db 'api-ms-win-core-processthreads-l1-1-2.dll',0
.idata:00416EFE                                         ; DATA XREF: .idata:00416350↑o
.idata:00416F28 aApiMsWinCorePr_0 db 'api-ms-win-core-processenvironment-l1-2-0.dll',0
.idata:00416F28                                         ; DATA XREF: .idata:00416364↑o
.idata:00416F56 aApiMsWinSecuri_0 db 'api-ms-win-security-sddl-l1-1-0.dll',0
.idata:00416F56                                         ; DATA XREF: .idata:00416378↑o
.idata:00416F7A aApiMsWinCoreCo db 'api-ms-win-core-console-l1-1-0.dll',0
.idata:00416F7A                                         ; DATA XREF: .idata:0041638C↑o
.idata:00416F9D                 align 2
.idata:00416F9E aApiMsWinCoreCo_0 db 'api-ms-win-core-com-l1-1-1.dll',0
.idata:00416F9E                                         ; DATA XREF: .idata:004163A0↑o
.idata:00416FBD                 align 2
.idata:00416FBE aSspicliDll     db 'SspiCli.dll',0      ; DATA XREF: .idata:004163B4↑o
.idata:00416FCA aApiMsWinShcore db 'api-ms-win-shcore-path-l1-1-0.dll',0
.idata:00416FCA                                         ; DATA XREF: .idata:004163C8↑o
.idata:00416FEC aApiMsWinCoreSt db 'api-ms-win-core-string-l1-1-0.dll',0
.idata:00416FEC                                         ; DATA XREF: .idata:004163DC↑o
.idata:0041700E aApiMsWinCoreEr db 'api-ms-win-core-errorhandling-l1-1-1.dll',0
.idata:0041700E                                         ; DATA XREF: .idata:004163F0↑o
.idata:00417037                 align 4
.idata:00417038 aApiMsWinCoreHe_0 db 'api-ms-win-core-heap-l2-1-0.dll',0
.idata:00417038                                         ; DATA XREF: .idata:00416404↑o
.idata:00417058 aApiMsWinCoreHa db 'api-ms-win-core-handle-l1-1-0.dll',0
.idata:00417058                                         ; DATA XREF: .idata:00416418↑o
.idata:0041707A aApiMsWinCoreLi_0 db 'api-ms-win-core-libraryloader-l1-2-2.dll',0
.idata:0041707A                                         ; DATA XREF: .idata:0041642C↑o
.idata:004170A3                 align 4
.idata:004170A4 aApiMsWinCoreHe_1 db 'api-ms-win-core-heap-obsolete-l1-1-0.dll',0
.idata:004170A4                                         ; DATA XREF: .idata:00416440↑o
.idata:004170CD                 align 2
.idata:004170CE aApiMsWinCoreTi db 'api-ms-win-core-timezone-l1-1-0.dll',0
.idata:004170CE                                         ; DATA XREF: .idata:00416454↑o
.idata:004170F2 aApiMsWinCoreSy db 'api-ms-win-core-synch-l1-2-0.dll',0
.idata:004170F2                                         ; DATA XREF: .idata:00416468↑o
.idata:00417113                 align 4
.idata:00417114 aApiMsWinCorePr_1 db 'api-ms-win-core-profile-l1-1-0.dll',0
.idata:00417114                                         ; DATA XREF: .idata:0041647C↑o
.idata:00417137                 align 4
.idata:00417138 aApiMsWinCoreSy_0 db 'api-ms-win-core-sysinfo-l1-2-1.dll',0
.idata:00417138                                         ; DATA XREF: .idata:00416490↑o
.idata:0041715B                 align 4
.idata:0041715C word_41715C     dw 479h                 ; DATA XREF: .idata:00416754↑o
.idata:0041715E                 db '_wsplitpath_s',0
.idata:0041716C word_41716C     dw 456h                 ; DATA XREF: .idata:00416758↑o
.idata:0041716E                 db '_wmakepath_s',0
.idata:0041717B                 align 4
.idata:0041717C word_41717C     dw 4F1h                 ; DATA XREF: .idata:004167E0↑o
.idata:0041717E                 db 'iswspace',0
.idata:00417187                 align 4
.idata:00417188 word_417188     dw 417h                 ; DATA XREF: .idata:0041675C↑o
.idata:0041718A                 db '_wcsnicmp',0
.idata:00417194 word_417194     dw 57Ah                 ; DATA XREF: .idata:0041674C↑o
.idata:00417196                 db 'wcsncmp',0
.idata:0041719E word_41719E     dw 4A1h                 ; DATA XREF: .idata:off_416748↑o
.idata:004171A0                 db 'bsearch',0
.idata:004171A8 word_4171A8     dw 3                    ; DATA XREF: .idata:004165A0↑o
.idata:004171AA                 db 'GetConsoleOutputCP',0
.idata:004171BD                 align 2
.idata:004171BE word_4171BE     dw 0Dh                  ; DATA XREF: .idata:0041659C↑o
.idata:004171C0                 db 'WriteConsoleW',0
.idata:004171CE word_4171CE     dw 7                    ; DATA XREF: .idata:off_4166D4↑o
.idata:004171D0                 db 'WideCharToMultiByte',0
.idata:004171E4 word_4171E4     dw 59h                  ; DATA XREF: .idata:004165D0↑o
.idata:004171E6                 db 'WriteFile',0
.idata:004171F0 word_4171F0     dw 8                    ; DATA XREF: .idata:00416664↑o
.idata:004171F2                 db 'FormatMessageW',0
.idata:00417201                 align 2
.idata:00417202 word_417202     dw 3Ch                  ; DATA XREF: .idata:00416658↑o
.idata:00417204                 db 'LoadLibraryW',0
.idata:00417211                 align 2
.idata:00417212 word_417212     dw 0Ch                  ; DATA XREF: .idata:00416638↑o
.idata:00417214                 db 'FreeLibrary',0
.idata:00417220 word_417220     dw 10h                  ; DATA XREF: .idata:00416630↑o
.idata:00417222                 db 'GetModuleFileNameW',0
.idata:00417235                 align 2
.idata:00417236 word_417236     dw 13h                  ; DATA XREF: .idata:00416668↑o
.idata:00417238                 db 'GetLocaleInfoW',0
.idata:00417247                 align 4
.idata:00417248 word_417248     dw 1                    ; DATA XREF: .idata:00416704↑o
.idata:0041724A                 db 'GetFileVersionInfoSizeExW',0
.idata:00417264 word_417264     dw 0                    ; DATA XREF: .idata:00416708↑o
.idata:00417266                 db 'GetFileVersionInfoExW',0
.idata:0041727C word_41727C     dw 5                    ; DATA XREF: .idata:off_416700↑o
.idata:0041727E                 db 'VerQueryValueW',0
.idata:0041728D                 align 2
.idata:0041728E word_41728E     dw 39h                  ; DATA XREF: .idata:off_416660↑o
.idata:00417290                 db 'SetThreadPreferredUILanguages',0
.idata:004172AE word_4172AE     dw 9                    ; DATA XREF: .idata:off_4165AC↑o
.idata:004172B0                 db 'GetConsoleScreenBufferInfo',0
.idata:004172CB                 align 4
.idata:004172CC word_4172CC     dw 14h                  ; DATA XREF: .idata:004165E4↑o
.idata:004172CE                 db 'FindFirstFileW',0
.idata:004172DD                 align 2
.idata:004172DE word_4172DE     dw 1Ah                  ; DATA XREF: .idata:004165D4↑o
.idata:004172E0                 db 'FindNextFileW',0
.idata:004172EE word_4172EE     dw 0Ch                  ; DATA XREF: .idata:004165CC↑o
.idata:004172F0                 db 'FindClose',0
.idata:004172FA word_4172FA     dw 10h                  ; DATA XREF: .idata:off_41668C↑o
.idata:004172FC                 db 'SearchPathW',0
.idata:00417308 word_417308     dw 23h                  ; DATA XREF: .idata:004166C8↑o
.idata:0041730A                 db 'RegQueryValueExW',0
.idata:0041731B                 align 4
.idata:0041731C word_41731C     dw 0Dh                  ; DATA XREF: .idata:004165BC↑o
.idata:0041731E                 db 'SetLastError',0
.idata:0041732B                 align 4
.idata:0041732C word_41732C     dw 7                    ; DATA XREF: .idata:00416674↑o
.idata:0041732E                 db 'GetSystemDefaultUILanguage',0
.idata:00417349                 align 2
.idata:0041734A word_41734A     dw 8                    ; DATA XREF: .idata:off_416670↑o
.idata:0041734C                 db 'GetUserDefaultUILanguage',0
.idata:00417365                 align 2
.idata:00417366 word_417366     dw 1Eh                  ; DATA XREF: .idata:off_4166C4↑o
.idata:00417368                 db 'RegOpenKeyExW',0
.idata:00417376 word_417376     dw 1Ch                  ; DATA XREF: .idata:004166EC↑o
.idata:00417378                 db 'GetVersionExW',0
.idata:00417386 word_417386     dw 20h                  ; DATA XREF: .idata:off_41667C↑o
.idata:00417388                 db 'UnmapViewOfFile',0
.idata:00417398 word_417398     dw 9                    ; DATA XREF: .idata:00416644↑o
.idata:0041739A                 db 'FindResourceExW',0
.idata:004173AA word_4173AA     dw 0                    ; DATA XREF: .idata:004166CC↑o
.idata:004173AC                 db 'RegCloseKey',0
.idata:004173B8 word_4173B8     dw 4                    ; DATA XREF: .idata:00416684↑o
.idata:004173BA                 db 'CreateFileMappingW',0
.idata:004173CD                 align 2
.idata:004173CE word_4173CE     dw 0Fh                  ; DATA XREF: .idata:00416680↑o
.idata:004173D0                 db 'MapViewOfFile',0
.idata:004173DE word_4173DE     dw 18h                  ; DATA XREF: .idata:00416634↑o
.idata:004173E0                 db 'LoadLibraryExW',0
.idata:004173EF                 align 10h
.idata:004173F0 aApiMsWinCoreLo db 'api-ms-win-core-localization-l1-2-1.dll',0
.idata:004173F0                                         ; DATA XREF: .idata:004164A4↑o
.idata:00417418 aApiMsWinCoreVe db 'api-ms-win-core-version-l1-1-0.dll',0
.idata:00417418                                         ; DATA XREF: .idata:004164B8↑o
.idata:0041743B                 align 4
.idata:0041743C aApiMsWinCoreCo_1 db 'api-ms-win-core-console-l2-1-0.dll',0
.idata:0041743C                                         ; DATA XREF: .idata:004164CC↑o
.idata:0041745F                 align 10h
.idata:00417460 aApiMsWinCoreRe db 'api-ms-win-core-registry-l1-1-0.dll',0
.idata:00417460                                         ; DATA XREF: .idata:004164E0↑o
.idata:00417484 aApiMsWinCoreLo_0 db 'api-ms-win-core-localization-obsolete-l1-3-0.dll',0
.idata:00417484                                         ; DATA XREF: .idata:004164F4↑o
.idata:004174B5                 align 2
.idata:004174B6 aApiMsWinCoreMe db 'api-ms-win-core-memory-l1-1-2.dll',0
.idata:004174B6                                         ; DATA XREF: .idata:00416508↑o
.idata:004174D8 word_4174D8     dw 19Eh                 ; DATA XREF: .idata:004167F4↑o
.idata:004174DA                 db 'NtOpenProcessToken',0
.idata:004174ED                 align 2
.idata:004174EE word_4174EE     dw 1CFh                 ; DATA XREF: .idata:004167F8↑o
.idata:004174F0                 db 'NtQueryInformationToken',0
.idata:00417508 word_417508     dw 0F5h                 ; DATA XREF: .idata:off_4167EC↑o
.idata:0041750A                 db 'NtClose',0
.idata:00417512 word_417512     dw 1A7h                 ; DATA XREF: .idata:004167F0↑o
.idata:00417514                 db 'NtOpenThreadToken',0
.idata:00417526 aNtdllDll       db 'ntdll.dll',0        ; DATA XREF: .idata:0041651C↑o
.idata:00417530 word_417530     dw 509h                 ; DATA XREF: .idata:004167D0↑o
.idata:00417532                 db 'memcpy',0
.idata:00417539                 align 2
.idata:0041753A word_41753A     dw 50Dh                 ; DATA XREF: .idata:004167E4↑o
.idata:0041753C                 db 'memset',0
.idata:00417543                 align 1000h
.idata:00417543 _idata          ends
.idata:00417543
.idata:00417543
.idata:00417543                 end start
