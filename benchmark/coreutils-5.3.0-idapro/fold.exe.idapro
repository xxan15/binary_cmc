.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : F86DC70AC8E3084AC3B4A47423B0A9394071552C94BA77EEAE2DDA243ACB1292
.text:00401000 ; Input MD5    : 4342EBFA468246D08E33FB2F341F04FE
.text:00401000 ; Input CRC32  : 1679FACD
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/fold.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A256 (Wed Apr 20 18:41:26 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00004BE0 (  19424.)
.text:00401000 ; Section size in file          : 00004C00 (  19456.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401670+6C↓p
.text:00401040                                         ; .text:00405860↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_405800
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_406000
.text:004010A2                 mov     edx, dword_406050
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_406004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_406070, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_406070
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_4057D0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_406000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_406004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401670
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_405800
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aBytes          db 'bytes',0            ; DATA XREF: .text:off_4012A0↓o
.text:00401286 aSpaces         db 'spaces',0           ; DATA XREF: .text:004012B0↓o
.text:0040128D aWidth          db 'width',0            ; DATA XREF: .text:004012C0↓o
.text:00401293 aHelp           db 'help',0             ; DATA XREF: .text:004012D0↓o
.text:00401298 aVersion        db 'version',0          ; DATA XREF: .text:004012E0↓o
.text:004012A0 off_4012A0      dd offset aBytes        ; DATA XREF: sub_401670+BE↓o
.text:004012A0                                         ; "bytes"
.text:004012A4                 dd 2 dup(0)
.text:004012AC                 dd 62h
.text:004012B0                 dd offset aSpaces       ; "spaces"
.text:004012B4                 dd 2 dup(0)
.text:004012BC                 dd 73h
.text:004012C0                 dd offset aWidth        ; "width"
.text:004012C4                 dd 1, 0
.text:004012CC                 dd 77h
.text:004012D0                 dd offset aHelp         ; "help"
.text:004012D4                 dd 2 dup(0)
.text:004012DC                 dd 0FFFFFF7Eh
.text:004012E0                 dd offset aVersion      ; "version"
.text:004012E4                 dd 2 dup(0)
.text:004012EC                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401300 ; const char Str
.text:00401300 Str             db 0                    ; DATA XREF: sub_401670+29↓o
.text:00401300                                         ; sub_401670+103↓o
.text:00401301                 align 20h
.text:00401320 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401320                                         ; DATA XREF: sub_401670+43↓o
.text:00401343 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401670+4B↓o
.text:00401343                                         ; sub_401670+58↓o
.text:0040134D ; const char aBsw[]
.text:0040134D aBsw            db 'bsw:',0             ; DATA XREF: sub_401670+C6↓o
.text:00401352                 align 10h
.text:00401360 aInvalidNumberO db 'invalid number of columns: `%s',27h,0
.text:00401360                                         ; DATA XREF: sub_401670:loc_4017B0↓o
.text:00401380 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401380                                         ; DATA XREF: sub_401670:loc_4017EA↓o
.text:00401380                                         ; .text:00401AFC↓o
.text:004013A7                 align 20h
.text:004013C0 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah,0
.text:004013C0                                         ; DATA XREF: sub_401670+1D0↓o
.text:004013C0                                         ; .text:loc_401B30↓o
.text:004013E1                 align 20h
.text:00401400 aWrapInputLines db 'Wrap input lines in each FILE (standard input by default), writin'
.text:00401400                                         ; DATA XREF: sub_401670+1EF↓o
.text:00401400                                         ; .text:00401B4F↓o
.text:00401400                 db 'g to',0Ah
.text:00401400                 db 'standard output.',0Ah
.text:00401400                 db 0Ah,0
.text:00401459                 align 10h
.text:00401460 aMandatoryArgum db 'Mandatory arguments to long options are mandatory for short optio'
.text:00401460                                         ; DATA XREF: sub_401670+211↓o
.text:00401460                                         ; .text:00401B71↓o
.text:00401460                 db 'ns too.',0Ah,0
.text:004014AA                 align 20h
.text:004014C0 aBBytesCountByt db '  -b, --bytes         count bytes rather than columns',0Ah
.text:004014C0                                         ; DATA XREF: sub_401670+233↓o
.text:004014C0                                         ; .text:00401B93↓o
.text:004014C0                 db '  -s, --spaces        break at spaces',0Ah
.text:004014C0                 db '  -w, --width=WIDTH   use WIDTH columns instead of 80',0Ah,0
.text:00401553                 align 10h
.text:00401560 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401560                                         ; DATA XREF: sub_401670+255↓o
.text:00401560                                         ; .text:00401BB5↓o
.text:0040158D                 align 20h
.text:004015A0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:004015A0                                         ; DATA XREF: sub_401670+277↓o
.text:004015A0                                         ; .text:00401BD7↓o
.text:004015D6 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401670+299↓o
.text:004015D6                                         ; .text:00401BF9↓o
.text:004015D6                 db 'Report bugs to <%s>.',0Ah,0
.text:004015ED aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:004015ED                                         ; DATA XREF: sub_401670+2A6↓o
.text:004015ED                                         ; .text:00401C06↓o
.text:00401603 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_401670+2D0↓o
.text:00401613 a530            db '5.3.0',0            ; DATA XREF: sub_401670+2D8↓o
.text:00401619 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401670+2E3↓o
.text:00401627 ; const FILE stru_401627
.text:00401627 stru_401627     FILE <646C6F66h, 90002D00h, 90909090h, 90909090h, 90909090h, \
.text:00401627                                         ; DATA XREF: sub_401670+2EB↓o
.text:00401627                                         ; sub_401670+351↓o ...
.text:00401627                       90909090h, 73256090h, 706F2027h>
.text:00401647                 db  74h ; t
.text:00401648                 db  69h ; i
.text:00401649                 db  6Fh ; o
.text:0040164A                 db  6Eh ; n
.text:0040164B                 db  20h
.text:0040164C                 db  69h ; i
.text:0040164D                 db  73h ; s
.text:0040164E                 db  20h
.text:0040164F                 db  6Fh ; o
.text:00401650                 db  62h ; b
.text:00401651                 db  73h ; s
.text:00401652                 db  6Fh ; o
.text:00401653                 db  6Ch ; l
.text:00401654                 db  65h ; e
.text:00401655                 db  74h ; t
.text:00401656                 db  65h ; e
.text:00401657                 db  3Bh ; ;
.text:00401658                 db  20h
.text:00401659                 db  75h ; u
.text:0040165A                 db  73h ; s
.text:0040165B                 db  65h ; e
.text:0040165C                 db  20h
.text:0040165D                 db  60h ; `
.text:0040165E                 db  25h ; %
.text:0040165F                 db  73h ; s
.text:00401660                 db  27h ; '
.text:00401661                 db    0
.text:00401662                 align 10h
.text:00401670
.text:00401670 ; =============== S U B R O U T I N E =======================================
.text:00401670
.text:00401670 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401670
.text:00401670 sub_401670      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401670
.text:00401670 Category        = dword ptr -38h
.text:00401670 Locale          = dword ptr -34h
.text:00401670 Size            = dword ptr -30h
.text:00401670 var_2C          = byte ptr -2Ch
.text:00401670 Str             = dword ptr -28h
.text:00401670 var_24          = dword ptr -24h
.text:00401670 var_19          = byte ptr -19h
.text:00401670 var_18          = dword ptr -18h
.text:00401670 var_14          = dword ptr -14h
.text:00401670 var_10          = dword ptr -10h
.text:00401670 arg_0           = dword ptr  8
.text:00401670 arg_4           = dword ptr  0Ch
.text:00401670
.text:00401670                 push    ebp
.text:00401671                 xor     eax, eax
.text:00401673                 mov     ebp, esp
.text:00401675                 push    edi
.text:00401676                 mov     edi, 1
.text:0040167B                 push    esi
.text:0040167C                 push    ebx
.text:0040167D                 sub     esp, 2Ch
.text:00401680                 and     esp, 0FFFFFFF0h
.text:00401683                 call    __alloca
.text:00401688                 call    sub_4058A0
.text:0040168D                 mov     [ebp+var_14], 50h ; 'P'
.text:00401694                 mov     eax, [ebp+arg_4]
.text:00401697                 mov     ecx, [eax]
.text:00401699                 mov     [esp+38h+Locale], offset Str ; Locale
.text:004016A1                 mov     [esp+38h+Category], 0 ; Category
.text:004016A8                 mov     ds:dword_4071E0, ecx
.text:004016AE                 call    setlocale
.text:004016B3                 mov     [esp+38h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:004016BB                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:004016C2                 call    ds:__imp_libintl_bindtextdomain
.text:004016C8                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:004016CF                 call    ds:libintl_textdomain
.text:004016D5                 mov     [esp+38h+Category], offset sub_403FF0 ; void (__cdecl *)()
.text:004016DC                 call    sub_401040
.text:004016E1                 cmp     edi, [ebp+arg_0]
.text:004016E4                 mov     ds:byte_407040, 0
.text:004016EB                 mov     ds:byte_407030, 0
.text:004016F2                 mov     ds:byte_407020, 0
.text:004016F9                 jge     short loc_401720
.text:004016FB                 nop
.text:004016FC                 lea     esi, [esi+0]
.text:00401700
.text:00401700 loc_401700:                             ; CODE XREF: sub_401670+A3↓j
.text:00401700                 mov     edx, [ebp+arg_4]
.text:00401703                 mov     esi, [edx+edi*4]
.text:00401706                 cmp     byte ptr [esi], 2Dh ; '-'
.text:00401709                 jz      loc_401A30
.text:0040170F
.text:0040170F loc_40170F:                             ; CODE XREF: sub_401670+3D5↓j
.text:0040170F                                         ; sub_401670+429↓j
.text:0040170F                 inc     edi
.text:00401710                 cmp     edi, [ebp+arg_0]
.text:00401713                 jl      short loc_401700
.text:00401715                 lea     esi, [esi+0]
.text:00401719                 lea     edi, [edi+0]
.text:00401720
.text:00401720 loc_401720:                             ; CODE XREF: sub_401670+89↑j
.text:00401720                                         ; sub_401670+175↓j ...
.text:00401720                 mov     [esp+38h+Str], 0 ; int
.text:00401728                 mov     edi, [ebp+arg_4]
.text:0040172B                 mov     eax, [ebp+arg_0]
.text:0040172E                 mov     dword ptr [esp+38h+var_2C], offset off_4012A0 ; char
.text:00401736                 mov     [esp+38h+Size], offset aBsw ; "bsw:"
.text:0040173E                 mov     [esp+38h+Locale], edi ; int
.text:00401742                 mov     [esp+38h+Category], eax ; int
.text:00401745                 call    sub_403B40
.text:0040174A                 cmp     eax, 0FFFFFFFFh
.text:0040174D                 jz      loc_40197C
.text:00401753                 cmp     eax, 62h ; 'b'
.text:00401756                 jz      loc_401970
.text:0040175C                 cmp     eax, 62h ; 'b'
.text:0040175F                 jle     loc_40182E
.text:00401765                 cmp     eax, 73h ; 's'
.text:00401768                 jz      loc_401822
.text:0040176E                 cmp     eax, 77h ; 'w'
.text:00401771                 jnz     short loc_4017EA
.text:00401773                 mov     [esp+38h+Str], offset Str ; Str
.text:0040177B                 mov     esi, ds:dword_407200
.text:00401781                 lea     ebx, [ebp+var_10]
.text:00401784                 mov     dword ptr [esp+38h+var_2C], ebx ; int
.text:00401788                 mov     [esp+38h+Size], 0Ah ; int
.text:00401790                 mov     [esp+38h+Locale], 0 ; int
.text:00401798                 mov     [esp+38h+Category], esi ; int
.text:0040179B                 call    sub_4035D0
.text:004017A0                 test    eax, eax
.text:004017A2                 jnz     short loc_4017B0
.text:004017A4                 mov     eax, [ebp+var_10]
.text:004017A7                 test    eax, eax
.text:004017A9                 jz      short loc_4017B0
.text:004017AB                 cmp     eax, 0FFFFFFF6h
.text:004017AE                 jbe     short loc_4017E2
.text:004017B0
.text:004017B0 loc_4017B0:                             ; CODE XREF: sub_401670+132↑j
.text:004017B0                                         ; sub_401670+139↑j
.text:004017B0                 mov     [esp+38h+Category], offset aInvalidNumberO ; "invalid number of columns: `%s'"
.text:004017B7                 call    ds:libintl_gettext
.text:004017BD                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:004017C5                 mov     ecx, ds:dword_407200
.text:004017CB                 mov     [esp+38h+Category], 1 ; Code
.text:004017D2                 mov     [esp+38h+Size], eax ; char *
.text:004017D6                 mov     dword ptr [esp+38h+var_2C], ecx ; char
.text:004017DA                 call    sub_405520
.text:004017DF                 mov     eax, [ebp+var_10]
.text:004017E2
.text:004017E2 loc_4017E2:                             ; CODE XREF: sub_401670+13E↑j
.text:004017E2                 mov     [ebp+var_14], eax
.text:004017E5                 jmp     loc_401720
.text:004017EA ; ---------------------------------------------------------------------------
.text:004017EA
.text:004017EA loc_4017EA:                             ; CODE XREF: sub_401670+101↑j
.text:004017EA                                         ; sub_401670+1CE↓j ...
.text:004017EA                 mov     [esp+38h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004017F1                 call    ds:libintl_gettext
.text:004017F7                 mov     ebx, ds:_iob
.text:004017FD                 mov     ecx, ds:dword_4071E0
.text:00401803                 add     ebx, 40h ; '@'
.text:00401806                 mov     [esp+38h+Size], ecx
.text:0040180A                 mov     [esp+38h+Locale], eax ; Format
.text:0040180E                 mov     [esp+38h+Category], ebx ; Stream
.text:00401811                 call    fprintf
.text:00401816                 mov     [esp+38h+Category], 1 ; Code
.text:0040181D
.text:0040181D loc_40181D:                             ; CODE XREF: sub_401670+2BD↓j
.text:0040181D                                         ; sub_401670+336↓j
.text:0040181D                 call    exit
.text:00401822 ; ---------------------------------------------------------------------------
.text:00401822
.text:00401822 loc_401822:                             ; CODE XREF: sub_401670+F8↑j
.text:00401822                 mov     ds:byte_407020, 1
.text:00401829                 jmp     loc_401720
.text:0040182E ; ---------------------------------------------------------------------------
.text:0040182E
.text:0040182E loc_40182E:                             ; CODE XREF: sub_401670+EF↑j
.text:0040182E                 cmp     eax, 0FFFFFF7Dh
.text:00401833                 jz      loc_401932
.text:00401839                 cmp     eax, 0FFFFFF7Eh
.text:0040183E                 jnz     short loc_4017EA
.text:00401840                 mov     [esp+38h+Category], offset aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:00401847                 call    ds:libintl_gettext
.text:0040184D                 mov     esi, ds:dword_4071E0
.text:00401853                 mov     [esp+38h+Category], eax ; Format
.text:00401856                 mov     [esp+38h+Locale], esi
.text:0040185A                 call    printf
.text:0040185F                 mov     [esp+38h+Category], offset aWrapInputLines ; "Wrap input lines in each FILE (standard"...
.text:00401866                 call    ds:libintl_gettext
.text:0040186C                 mov     edi, ds:_iob
.text:00401872                 add     edi, 20h ; ' '
.text:00401875                 mov     [esp+38h+Locale], edi ; Stream
.text:00401879                 mov     [esp+38h+Category], eax ; Buffer
.text:0040187C                 call    fputs
.text:00401881                 mov     [esp+38h+Category], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00401888                 call    ds:libintl_gettext
.text:0040188E                 mov     ecx, ds:_iob
.text:00401894                 add     ecx, 20h ; ' '
.text:00401897                 mov     [esp+38h+Locale], ecx ; Stream
.text:0040189B                 mov     [esp+38h+Category], eax ; Buffer
.text:0040189E                 call    fputs
.text:004018A3                 mov     [esp+38h+Category], offset aBBytesCountByt ; "  -b, --bytes         count bytes rathe"...
.text:004018AA                 call    ds:libintl_gettext
.text:004018B0                 mov     ebx, ds:_iob
.text:004018B6                 add     ebx, 20h ; ' '
.text:004018B9                 mov     [esp+38h+Locale], ebx ; Stream
.text:004018BD                 mov     [esp+38h+Category], eax ; Buffer
.text:004018C0                 call    fputs
.text:004018C5                 mov     [esp+38h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:004018CC                 call    ds:libintl_gettext
.text:004018D2                 mov     esi, ds:_iob
.text:004018D8                 add     esi, 20h ; ' '
.text:004018DB                 mov     [esp+38h+Locale], esi ; Stream
.text:004018DF                 mov     [esp+38h+Category], eax ; Buffer
.text:004018E2                 call    fputs
.text:004018E7                 mov     [esp+38h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:004018EE                 call    ds:libintl_gettext
.text:004018F4                 mov     edi, ds:_iob
.text:004018FA                 add     edi, 20h ; ' '
.text:004018FD                 mov     [esp+38h+Locale], edi ; Stream
.text:00401901                 mov     [esp+38h+Category], eax ; Buffer
.text:00401904                 call    fputs
.text:00401909                 mov     [esp+38h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401910                 call    ds:libintl_gettext
.text:00401916                 mov     [esp+38h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0040191E                 mov     [esp+38h+Category], eax ; Format
.text:00401921                 call    printf
.text:00401926
.text:00401926 loc_401926:                             ; CODE XREF: sub_401670+2FB↓j
.text:00401926                 mov     [esp+38h+Category], 0
.text:0040192D                 jmp     loc_40181D
.text:00401932 ; ---------------------------------------------------------------------------
.text:00401932
.text:00401932 loc_401932:                             ; CODE XREF: sub_401670+1C3↑j
.text:00401932                 mov     [esp+38h+var_24], 0
.text:0040193A                 mov     edx, ds:_iob
.text:00401940                 mov     [esp+38h+Str], offset aDavidMackenzie ; "David MacKenzie"
.text:00401948                 mov     dword ptr [esp+38h+var_2C], offset a530 ; "5.3.0"
.text:00401950                 add     edx, 20h ; ' '
.text:00401953                 mov     [esp+38h+Size], offset aGnuCoreutils ; "GNU coreutils"
.text:0040195B                 mov     [esp+38h+Locale], offset stru_401627 ; FILE *
.text:00401963                 mov     [esp+38h+Category], edx ; FILE *
.text:00401966                 call    sub_403520
.text:0040196B                 jmp     short loc_401926
.text:0040196B ; ---------------------------------------------------------------------------
.text:0040196D                 align 10h
.text:00401970
.text:00401970 loc_401970:                             ; CODE XREF: sub_401670+E6↑j
.text:00401970                 mov     ds:byte_407030, 1
.text:00401977                 jmp     loc_401720
.text:0040197C ; ---------------------------------------------------------------------------
.text:0040197C
.text:0040197C loc_40197C:                             ; CODE XREF: sub_401670+DD↑j
.text:0040197C                 mov     eax, dword_406010
.text:00401981                 cmp     [ebp+arg_0], eax
.text:00401984                 jz      loc_401A11
.text:0040198A                 cmp     eax, [ebp+arg_0]
.text:0040198D                 mov     bl, 1
.text:0040198F                 mov     edi, eax
.text:00401991                 jl      short loc_4019E0
.text:00401993
.text:00401993 loc_401993:                             ; CODE XREF: sub_401670+39F↓j
.text:00401993                                         ; sub_401670+3B6↓j
.text:00401993                 cmp     ds:byte_407040, 0
.text:0040199A                 jnz     short loc_4019AB
.text:0040199C
.text:0040199C loc_40199C:                             ; CODE XREF: sub_401670+34A↓j
.text:0040199C                                         ; sub_401670+36B↓j
.text:0040199C                 xor     ecx, ecx
.text:0040199E                 test    bl, bl
.text:004019A0                 setz    cl
.text:004019A3                 mov     [esp+38h+Category], ecx
.text:004019A6                 jmp     loc_40181D
.text:004019AB ; ---------------------------------------------------------------------------
.text:004019AB
.text:004019AB loc_4019AB:                             ; CODE XREF: sub_401670+32A↑j
.text:004019AB                 mov     edx, ds:_iob
.text:004019B1                 mov     [esp+38h+Category], edx ; Stream
.text:004019B4                 call    fclose
.text:004019B9                 inc     eax
.text:004019BA                 jnz     short loc_40199C
.text:004019BC                 call    _errno
.text:004019C1                 mov     [esp+38h+Size], (offset stru_401627._cnt+1) ; char *
.text:004019C9                 mov     edi, [eax]
.text:004019CB                 mov     [esp+38h+Category], 1 ; Code
.text:004019D2                 mov     [esp+38h+Locale], edi ; ErrorMessage
.text:004019D6                 call    sub_405520
.text:004019DB                 jmp     short loc_40199C
.text:004019DB ; ---------------------------------------------------------------------------
.text:004019DD                 align 10h
.text:004019E0
.text:004019E0 loc_4019E0:                             ; CODE XREF: sub_401670+321↑j
.text:004019E0                                         ; sub_401670+39D↓j
.text:004019E0                 mov     [ebp+var_19], 0
.text:004019E4                 mov     esi, [ebp+var_14]
.text:004019E7                 mov     eax, [ebp+arg_4]
.text:004019EA                 mov     [esp+38h+Locale], esi ; int
.text:004019EE                 mov     ecx, [eax+edi*4]
.text:004019F1                 mov     [esp+38h+Category], ecx ; FileName
.text:004019F4                 call    sub_401C20
.text:004019F9                 test    al, al
.text:004019FB                 jz      short loc_401A05
.text:004019FD                 test    bl, bl
.text:004019FF                 jz      short loc_401A05
.text:00401A01                 mov     [ebp+var_19], 1
.text:00401A05
.text:00401A05 loc_401A05:                             ; CODE XREF: sub_401670+38B↑j
.text:00401A05                                         ; sub_401670+38F↑j
.text:00401A05                 movzx   ebx, [ebp+var_19]
.text:00401A09                 inc     edi
.text:00401A0A                 cmp     edi, [ebp+arg_0]
.text:00401A0D                 jl      short loc_4019E0
.text:00401A0F                 jmp     short loc_401993
.text:00401A11 ; ---------------------------------------------------------------------------
.text:00401A11
.text:00401A11 loc_401A11:                             ; CODE XREF: sub_401670+314↑j
.text:00401A11                 mov     [esp+38h+Category], (offset stru_401627._cnt+1) ; FileName
.text:00401A18                 mov     esi, [ebp+var_14]
.text:00401A1B                 mov     [esp+38h+Locale], esi ; int
.text:00401A1F                 call    sub_401C20
.text:00401A24                 mov     bl, al
.text:00401A26                 jmp     loc_401993
.text:00401A26 ; ---------------------------------------------------------------------------
.text:00401A2B                 align 10h
.text:00401A30
.text:00401A30 loc_401A30:                             ; CODE XREF: sub_401670+99↑j
.text:00401A30                 movzx   eax, byte ptr [esi+1]
.text:00401A34                 cmp     al, 2Dh ; '-'
.text:00401A36                 jz      loc_401AD4
.text:00401A3C
.text:00401A3C loc_401A3C:                             ; CODE XREF: sub_401670+468↓j
.text:00401A3C                 movsx   ecx, al
.text:00401A3F                 sub     ecx, 30h ; '0'
.text:00401A42                 cmp     ecx, 9
.text:00401A45                 ja      loc_40170F
.text:00401A4B                 mov     [esp+38h+Category], esi ; Str
.text:00401A4E                 call    strlen
.text:00401A53                 lea     ecx, [eax+2]
.text:00401A56                 mov     ebx, eax
.text:00401A58                 mov     [esp+38h+Category], ecx ; size_t
.text:00401A5B                 call    sub_403D30
.text:00401A60                 mov     [ebp+var_18], eax
.text:00401A63                 lea     edx, [esi+1]
.text:00401A66                 mov     byte ptr [eax], 2Dh ; '-'
.text:00401A69                 mov     eax, [ebp+var_18]
.text:00401A6C                 mov     byte ptr [eax+1], 77h ; 'w'
.text:00401A70                 mov     ecx, [ebp+var_18]
.text:00401A73                 mov     [esp+38h+Size], ebx ; Size
.text:00401A77                 mov     [esp+38h+Locale], edx ; Src
.text:00401A7B                 add     ecx, 2
.text:00401A7E                 mov     [esp+38h+Category], ecx ; void *
.text:00401A81                 call    memcpy
.text:00401A86                 mov     eax, [ebp+var_18]
.text:00401A89                 mov     ebx, [ebp+arg_4]
.text:00401A8C                 mov     [ebx+edi*4], eax
.text:00401A8F                 call    sub_403C90
.text:00401A94                 cmp     eax, 30DAFh
.text:00401A99                 jle     loc_40170F
.text:00401A9F                 mov     [esp+38h+Category], (offset stru_401627._bufsiz+1)
.text:00401AA6                 call    ds:libintl_gettext
.text:00401AAC                 mov     dword ptr [esp+38h+var_2C], esi ; char
.text:00401AB0                 mov     edi, [ebp+var_18]
.text:00401AB3                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:00401ABB                 mov     [esp+38h+Category], 0 ; Code
.text:00401AC2                 mov     [esp+38h+Str], edi
.text:00401AC6                 mov     [esp+38h+Size], eax ; char *
.text:00401ACA                 call    sub_405520
.text:00401ACF                 jmp     loc_4017EA
.text:00401AD4 ; ---------------------------------------------------------------------------
.text:00401AD4
.text:00401AD4 loc_401AD4:                             ; CODE XREF: sub_401670+3C6↑j
.text:00401AD4                 cmp     byte ptr [esi+2], 0
.text:00401AD8                 jnz     loc_401A3C
.text:00401ADE                 jmp     loc_401720
.text:00401ADE sub_401670      endp
.text:00401ADE
.text:00401ADE ; ---------------------------------------------------------------------------
.text:00401AE3                 align 10h
.text:00401AF0                 push    ebx
.text:00401AF1                 sub     esp, 18h
.text:00401AF4                 mov     ebx, [esp+20h]
.text:00401AF8                 test    ebx, ebx
.text:00401AFA                 jz      short loc_401B30
.text:00401AFC                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401B03                 call    ds:libintl_gettext
.text:00401B09                 mov     edx, ds:_iob
.text:00401B0F                 mov     ecx, ds:dword_4071E0
.text:00401B15                 add     edx, 40h ; '@'
.text:00401B18                 mov     [esp+8], ecx
.text:00401B1C                 mov     [esp+4], eax
.text:00401B20                 mov     [esp], edx
.text:00401B23                 call    fprintf
.text:00401B28
.text:00401B28 loc_401B28:                             ; CODE XREF: .text:00401C16↓j
.text:00401B28                 mov     [esp], ebx
.text:00401B2B                 call    exit
.text:00401B30 ; ---------------------------------------------------------------------------
.text:00401B30
.text:00401B30 loc_401B30:                             ; CODE XREF: .text:00401AFA↑j
.text:00401B30                 mov     dword ptr [esp], offset aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:00401B37                 call    ds:libintl_gettext
.text:00401B3D                 mov     ecx, ds:dword_4071E0
.text:00401B43                 mov     [esp], eax
.text:00401B46                 mov     [esp+4], ecx
.text:00401B4A                 call    printf
.text:00401B4F                 mov     dword ptr [esp], offset aWrapInputLines ; "Wrap input lines in each FILE (standard"...
.text:00401B56                 call    ds:libintl_gettext
.text:00401B5C                 mov     ecx, ds:_iob
.text:00401B62                 add     ecx, 20h ; ' '
.text:00401B65                 mov     [esp+4], ecx
.text:00401B69                 mov     [esp], eax
.text:00401B6C                 call    fputs
.text:00401B71                 mov     dword ptr [esp], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00401B78                 call    ds:libintl_gettext
.text:00401B7E                 mov     ecx, ds:_iob
.text:00401B84                 add     ecx, 20h ; ' '
.text:00401B87                 mov     [esp+4], ecx
.text:00401B8B                 mov     [esp], eax
.text:00401B8E                 call    fputs
.text:00401B93                 mov     dword ptr [esp], offset aBBytesCountByt ; "  -b, --bytes         count bytes rathe"...
.text:00401B9A                 call    ds:libintl_gettext
.text:00401BA0                 mov     ecx, ds:_iob
.text:00401BA6                 add     ecx, 20h ; ' '
.text:00401BA9                 mov     [esp+4], ecx
.text:00401BAD                 mov     [esp], eax
.text:00401BB0                 call    fputs
.text:00401BB5                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401BBC                 call    ds:libintl_gettext
.text:00401BC2                 mov     ecx, ds:_iob
.text:00401BC8                 add     ecx, 20h ; ' '
.text:00401BCB                 mov     [esp+4], ecx
.text:00401BCF                 mov     [esp], eax
.text:00401BD2                 call    fputs
.text:00401BD7                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401BDE                 call    ds:libintl_gettext
.text:00401BE4                 mov     ecx, ds:_iob
.text:00401BEA                 add     ecx, 20h ; ' '
.text:00401BED                 mov     [esp+4], ecx
.text:00401BF1                 mov     [esp], eax
.text:00401BF4                 call    fputs
.text:00401BF9                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401C00                 call    ds:libintl_gettext
.text:00401C06                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401C0E                 mov     [esp], eax
.text:00401C11                 call    printf
.text:00401C16                 jmp     loc_401B28
.text:00401C16 ; ---------------------------------------------------------------------------
.text:00401C1B ; const char byte_401C1B
.text:00401C1B byte_401C1B     db 25h                  ; DATA XREF: sub_401C20+351↓o
.text:00401C1B                                         ; sub_401C20:loc_401F97↓o
.text:00401C1C                 db 73h, 0
.text:00401C1E ; const char aR[2]
.text:00401C1E aR              db 'r',0                ; DATA XREF: sub_401C20:loc_402019↓o
.text:00401C20
.text:00401C20 ; =============== S U B R O U T I N E =======================================
.text:00401C20
.text:00401C20
.text:00401C20 ; int __cdecl sub_401C20(char *FileName, int)
.text:00401C20 sub_401C20      proc near               ; CODE XREF: sub_401670+384↑p
.text:00401C20                                         ; sub_401670+3AF↑p
.text:00401C20
.text:00401C20 Buffer          = dword ptr -2Ch
.text:00401C20 ElementSize     = dword ptr -28h
.text:00401C20 ElementCount    = dword ptr -24h
.text:00401C20 Stream          = dword ptr -20h
.text:00401C20 var_1C          = dword ptr -1Ch
.text:00401C20 var_18          = dword ptr -18h
.text:00401C20 File            = dword ptr -14h
.text:00401C20 FileName        = dword ptr  4
.text:00401C20 arg_4           = dword ptr  8
.text:00401C20
.text:00401C20                 push    ebp
.text:00401C21                 mov     ecx, 2
.text:00401C26                 xor     ebp, ebp
.text:00401C28                 push    edi
.text:00401C29                 mov     edi, (offset stru_401627._cnt+1)
.text:00401C2E                 push    esi
.text:00401C2F                 push    ebx
.text:00401C30                 sub     esp, 1Ch
.text:00401C33                 mov     esi, [esp+2Ch+FileName]
.text:00401C37                 mov     [esp+2Ch+var_1C], 0
.text:00401C3F                 cld
.text:00401C40                 repe cmpsb
.text:00401C42                 jnz     loc_402019
.text:00401C48                 mov     ds:byte_407040, 1
.text:00401C4F                 mov     edx, ds:_iob
.text:00401C55                 mov     [esp+2Ch+File], edx
.text:00401C59
.text:00401C59 loc_401C59:                             ; CODE XREF: sub_401C20+411↓j
.text:00401C59                 mov     edx, [esp+2Ch+File]
.text:00401C5D                 test    edx, edx
.text:00401C5F                 jz      loc_401F6C
.text:00401C65                 lea     esi, [esi+0]
.text:00401C69                 lea     edi, [edi+0]
.text:00401C70
.text:00401C70 loc_401C70:                             ; CODE XREF: sub_401C20+219↓j
.text:00401C70                                         ; sub_401C20+26F↓j ...
.text:00401C70                 mov     edx, [esp+2Ch+File]
.text:00401C74                 mov     ebx, [edx+4]
.text:00401C77                 dec     ebx
.text:00401C78                 mov     [edx+4], ebx
.text:00401C7B                 test    ebx, ebx
.text:00401C7D                 js      loc_402008
.text:00401C83                 mov     ecx, [edx]
.text:00401C85                 mov     edi, [esp+2Ch+File]
.text:00401C89                 movzx   eax, byte ptr [ecx]
.text:00401C8C                 inc     ecx
.text:00401C8D                 mov     [edi], ecx
.text:00401C8F
.text:00401C8F loc_401C8F:                             ; CODE XREF: sub_401C20+3F4↓j
.text:00401C8F                 mov     [esp+2Ch+var_18], eax
.text:00401C93                 cmp     [esp+2Ch+var_18], 0FFFFFFFFh
.text:00401C98                 jz      loc_401F20
.text:00401C9E                 mov     ebx, [esp+2Ch+var_1C]
.text:00401CA2                 inc     ebx
.text:00401CA3                 cmp     ebx, ds:dword_407010
.text:00401CA9                 jnb     loc_401EF8
.text:00401CAF
.text:00401CAF loc_401CAF:                             ; CODE XREF: sub_401C20+2FB↓j
.text:00401CAF                 cmp     [esp+2Ch+var_18], 0Ah
.text:00401CB4                 jz      loc_401EB3
.text:00401CBA
.text:00401CBA loc_401CBA:                             ; CODE XREF: sub_401C20+18A↓j
.text:00401CBA                                         ; sub_401C20+259↓j
.text:00401CBA                 movzx   ebx, ds:byte_407030
.text:00401CC1                 mov     ecx, ds:Buffer
.text:00401CC7
.text:00401CC7 loc_401CC7:                             ; CODE XREF: sub_401C20+1CA↓j
.text:00401CC7                 movzx   eax, byte ptr [esp+2Ch+var_18]
.text:00401CCC                 test    bl, bl
.text:00401CCE                 mov     edx, ebp
.text:00401CD0                 jnz     short loc_401CF0
.text:00401CD2                 cmp     al, 8
.text:00401CD4                 jz      loc_401EA3
.text:00401CDA                 xor     edx, edx
.text:00401CDC                 cmp     al, 0Dh
.text:00401CDE                 jz      short loc_401CF3
.text:00401CE0                 cmp     al, 9
.text:00401CE2                 jz      loc_401E94
.text:00401CE8                 nop
.text:00401CE9                 lea     esi, [esi+0]
.text:00401CF0
.text:00401CF0 loc_401CF0:                             ; CODE XREF: sub_401C20+B0↑j
.text:00401CF0                 lea     edx, [ebp+1]
.text:00401CF3
.text:00401CF3 loc_401CF3:                             ; CODE XREF: sub_401C20+BE↑j
.text:00401CF3                                         ; sub_401C20+27E↓j ...
.text:00401CF3                 cmp     edx, [esp+2Ch+arg_4]
.text:00401CF7                 mov     ebp, edx
.text:00401CF9                 jbe     loc_401E7E
.text:00401CFF                 cmp     ds:byte_407020, 0
.text:00401D06                 jz      loc_401E22
.text:00401D0C                 mov     esi, [esp+2Ch+var_1C]
.text:00401D10                 test    esi, esi
.text:00401D12                 jz      loc_401E2A
.text:00401D18                 nop
.text:00401D19                 lea     esi, [esi+0]
.text:00401D20
.text:00401D20 loc_401D20:                             ; CODE XREF: sub_401C20+10F↓j
.text:00401D20                 dec     esi
.text:00401D21                 movzx   eax, byte ptr [esi+ecx]
.text:00401D25                 cmp     al, 20h ; ' '
.text:00401D27                 jz      short loc_401D3B
.text:00401D29                 cmp     al, 9
.text:00401D2B                 jz      short loc_401D3B
.text:00401D2D                 test    esi, esi
.text:00401D2F                 jnz     short loc_401D20
.text:00401D31                 xor     ebx, ebx
.text:00401D33                 test    bl, bl
.text:00401D35                 jz      loc_401E22
.text:00401D3B
.text:00401D3B loc_401D3B:                             ; CODE XREF: sub_401C20+107↑j
.text:00401D3B                                         ; sub_401C20+10B↑j
.text:00401D3B                 mov     [esp+2Ch+Buffer], ecx ; Buffer
.text:00401D3E                 mov     ebp, ds:_iob
.text:00401D44                 inc     esi
.text:00401D45                 mov     [esp+2Ch+ElementCount], esi ; ElementCount
.text:00401D49                 mov     [esp+2Ch+ElementSize], 1 ; ElementSize
.text:00401D51                 add     ebp, 20h ; ' '
.text:00401D54                 mov     [esp+2Ch+Stream], ebp ; Stream
.text:00401D58                 call    fwrite
.text:00401D5D                 mov     edi, ds:_iob
.text:00401D63                 mov     ecx, [edi+24h]
.text:00401D66                 dec     ecx
.text:00401D67                 mov     [edi+24h], ecx
.text:00401D6A                 test    ecx, ecx
.text:00401D6C                 js      loc_401E04
.text:00401D72                 mov     ebx, ds:_iob
.text:00401D78                 mov     eax, [ebx+20h]
.text:00401D7B                 mov     byte ptr [eax], 0Ah
.text:00401D7E                 inc     dword ptr [ebx+20h]
.text:00401D81
.text:00401D81 loc_401D81:                             ; CODE XREF: sub_401C20+1FD↓j
.text:00401D81                 mov     ecx, ds:Buffer
.text:00401D87                 mov     edi, [esp+2Ch+var_1C]
.text:00401D8B                 lea     ebp, [esi+ecx]
.text:00401D8E                 mov     [esp+2Ch+ElementSize], ebp ; Src
.text:00401D92                 sub     edi, esi
.text:00401D94                 xor     ebp, ebp
.text:00401D96                 mov     [esp+2Ch+ElementCount], edi ; Size
.text:00401D9A                 xor     esi, esi
.text:00401D9C                 mov     [esp+2Ch+Buffer], ecx ; void *
.text:00401D9F                 call    memmove
.text:00401DA4                 mov     [esp+2Ch+var_1C], edi
.text:00401DA8                 cmp     ebp, edi
.text:00401DAA                 jnb     loc_401CBA
.text:00401DB0                 movzx   ebx, ds:byte_407030
.text:00401DB7                 mov     ecx, ds:Buffer
.text:00401DBD                 lea     esi, [esi+0]
.text:00401DC0
.text:00401DC0 loc_401DC0:                             ; CODE XREF: sub_401C20+1C8↓j
.text:00401DC0                 movzx   eax, byte ptr [esi+ecx]
.text:00401DC4                 test    bl, bl
.text:00401DC6                 mov     edx, ebp
.text:00401DC8                 jnz     short loc_401DE0
.text:00401DCA                 cmp     al, 8
.text:00401DCC                 jz      short loc_401DFB
.text:00401DCE                 xor     edx, edx
.text:00401DD0                 cmp     al, 0Dh
.text:00401DD2                 jz      short loc_401DE3
.text:00401DD4                 cmp     al, 9
.text:00401DD6                 jz      short loc_401DEF
.text:00401DD8                 nop
.text:00401DD9                 lea     esi, [esi+0]
.text:00401DE0
.text:00401DE0 loc_401DE0:                             ; CODE XREF: sub_401C20+1A8↑j
.text:00401DE0                 lea     edx, [ebp+1]
.text:00401DE3
.text:00401DE3 loc_401DE3:                             ; CODE XREF: sub_401C20+1B2↑j
.text:00401DE3                                         ; sub_401C20+1D9↓j ...
.text:00401DE3                 inc     esi
.text:00401DE4                 mov     ebp, edx
.text:00401DE6                 cmp     esi, edi
.text:00401DE8                 jb      short loc_401DC0
.text:00401DEA                 jmp     loc_401CC7
.text:00401DEF ; ---------------------------------------------------------------------------
.text:00401DEF
.text:00401DEF loc_401DEF:                             ; CODE XREF: sub_401C20+1B6↑j
.text:00401DEF                 mov     edx, ebp
.text:00401DF1                 and     edx, 7
.text:00401DF4                 sub     ebp, edx
.text:00401DF6                 lea     edx, [ebp+8]
.text:00401DF9                 jmp     short loc_401DE3
.text:00401DFB ; ---------------------------------------------------------------------------
.text:00401DFB
.text:00401DFB loc_401DFB:                             ; CODE XREF: sub_401C20+1AC↑j
.text:00401DFB                 test    ebp, ebp
.text:00401DFD                 jz      short loc_401DE3
.text:00401DFF                 lea     edx, [ebp-1]
.text:00401E02                 jmp     short loc_401DE3
.text:00401E04 ; ---------------------------------------------------------------------------
.text:00401E04
.text:00401E04 loc_401E04:                             ; CODE XREF: sub_401C20+14C↑j
.text:00401E04                 mov     [esp+2Ch+Buffer], 0Ah ; Ch
.text:00401E0B                 mov     edx, ds:_iob
.text:00401E11                 add     edx, 20h ; ' '
.text:00401E14                 mov     [esp+2Ch+ElementSize], edx ; File
.text:00401E18                 call    _flsbuf
.text:00401E1D                 jmp     loc_401D81
.text:00401E22 ; ---------------------------------------------------------------------------
.text:00401E22
.text:00401E22 loc_401E22:                             ; CODE XREF: sub_401C20+E6↑j
.text:00401E22                                         ; sub_401C20+115↑j
.text:00401E22                 mov     esi, [esp+2Ch+var_1C]
.text:00401E26                 test    esi, esi
.text:00401E28                 jnz     short loc_401E3E
.text:00401E2A
.text:00401E2A loc_401E2A:                             ; CODE XREF: sub_401C20+F2↑j
.text:00401E2A                 movzx   ebx, byte ptr [esp+2Ch+var_18]
.text:00401E2F                 mov     [ecx], bl
.text:00401E31                 mov     [esp+2Ch+var_1C], 1
.text:00401E39                 jmp     loc_401C70
.text:00401E3E ; ---------------------------------------------------------------------------
.text:00401E3E
.text:00401E3E loc_401E3E:                             ; CODE XREF: sub_401C20+208↑j
.text:00401E3E                 mov     ebp, [esp+2Ch+var_1C]
.text:00401E42                 mov     byte ptr [ebp+ecx+0], 0Ah
.text:00401E47                 mov     ecx, ds:_iob
.text:00401E4D                 inc     ebp
.text:00401E4E                 mov     [esp+2Ch+ElementCount], ebp ; ElementCount
.text:00401E52                 mov     edi, ds:Buffer
.text:00401E58                 xor     ebp, ebp
.text:00401E5A                 mov     [esp+2Ch+ElementSize], 1 ; ElementSize
.text:00401E62                 add     ecx, 20h ; ' '
.text:00401E65                 mov     [esp+2Ch+Stream], ecx ; Stream
.text:00401E69                 mov     [esp+2Ch+Buffer], edi ; Buffer
.text:00401E6C                 call    fwrite
.text:00401E71                 mov     [esp+2Ch+var_1C], 0
.text:00401E79                 jmp     loc_401CBA
.text:00401E7E ; ---------------------------------------------------------------------------
.text:00401E7E
.text:00401E7E loc_401E7E:                             ; CODE XREF: sub_401C20+D9↑j
.text:00401E7E                 movzx   edx, byte ptr [esp+2Ch+var_18]
.text:00401E83                 mov     esi, [esp+2Ch+var_1C]
.text:00401E87                 mov     [esi+ecx], dl
.text:00401E8A                 inc     esi
.text:00401E8B                 mov     [esp+2Ch+var_1C], esi
.text:00401E8F                 jmp     loc_401C70
.text:00401E94 ; ---------------------------------------------------------------------------
.text:00401E94
.text:00401E94 loc_401E94:                             ; CODE XREF: sub_401C20+C2↑j
.text:00401E94                 mov     esi, ebp
.text:00401E96                 and     esi, 7
.text:00401E99                 sub     ebp, esi
.text:00401E9B                 lea     edx, [ebp+8]
.text:00401E9E                 jmp     loc_401CF3
.text:00401EA3 ; ---------------------------------------------------------------------------
.text:00401EA3
.text:00401EA3 loc_401EA3:                             ; CODE XREF: sub_401C20+B4↑j
.text:00401EA3                 test    ebp, ebp
.text:00401EA5                 jz      loc_401CF3
.text:00401EAB                 lea     edx, [ebp-1]
.text:00401EAE                 jmp     loc_401CF3
.text:00401EB3 ; ---------------------------------------------------------------------------
.text:00401EB3
.text:00401EB3 loc_401EB3:                             ; CODE XREF: sub_401C20+94↑j
.text:00401EB3                 mov     ebp, [esp+2Ch+var_1C]
.text:00401EB7                 mov     edx, ds:Buffer
.text:00401EBD                 mov     byte ptr [ebp+edx+0], 0Ah
.text:00401EC2                 mov     edi, ds:_iob
.text:00401EC8                 xor     ebp, ebp
.text:00401ECA                 mov     [esp+2Ch+ElementCount], ebx ; ElementCount
.text:00401ECE                 mov     ebx, ds:Buffer
.text:00401ED4                 add     edi, 20h ; ' '
.text:00401ED7                 mov     [esp+2Ch+Stream], edi ; Stream
.text:00401EDB                 mov     [esp+2Ch+ElementSize], 1 ; ElementSize
.text:00401EE3                 mov     [esp+2Ch+Buffer], ebx ; Buffer
.text:00401EE6                 call    fwrite
.text:00401EEB                 mov     [esp+2Ch+var_1C], 0
.text:00401EF3                 jmp     loc_401C70
.text:00401EF8 ; ---------------------------------------------------------------------------
.text:00401EF8
.text:00401EF8 loc_401EF8:                             ; CODE XREF: sub_401C20+89↑j
.text:00401EF8                 mov     [esp+2Ch+ElementCount], 1 ; int
.text:00401F00                 mov     ecx, ds:Buffer
.text:00401F06                 mov     [esp+2Ch+ElementSize], offset dword_407010 ; int
.text:00401F0E                 mov     [esp+2Ch+Buffer], ecx ; void *
.text:00401F11                 call    sub_403DF0
.text:00401F16                 mov     ds:Buffer, eax
.text:00401F1B                 jmp     loc_401CAF
.text:00401F20 ; ---------------------------------------------------------------------------
.text:00401F20
.text:00401F20 loc_401F20:                             ; CODE XREF: sub_401C20+78↑j
.text:00401F20                 call    _errno
.text:00401F25                 mov     ebp, [esp+2Ch+var_1C]
.text:00401F29                 mov     ebx, [eax]
.text:00401F2B                 test    ebp, ebp
.text:00401F2D                 jnz     loc_401FD8
.text:00401F33
.text:00401F33 loc_401F33:                             ; CODE XREF: sub_401C20+3E3↓j
.text:00401F33                 mov     esi, [esp+2Ch+File]
.text:00401F37                 test    byte ptr [esi+0Ch], 20h
.text:00401F3B                 jnz     short loc_401F97
.text:00401F3D                 cld
.text:00401F3E                 mov     esi, [esp+2Ch+FileName]
.text:00401F42                 mov     ecx, 2
.text:00401F47                 mov     edi, (offset stru_401627._cnt+1)
.text:00401F4C                 repe cmpsb
.text:00401F4E                 jnz     short loc_401F5D
.text:00401F50
.text:00401F50 loc_401F50:                             ; CODE XREF: sub_401C20+34A↓j
.text:00401F50                 mov     eax, 1
.text:00401F55
.text:00401F55 loc_401F55:                             ; CODE XREF: sub_401C20+375↓j
.text:00401F55                 add     esp, 1Ch
.text:00401F58                 pop     ebx
.text:00401F59                 pop     esi
.text:00401F5A                 pop     edi
.text:00401F5B                 pop     ebp
.text:00401F5C                 retn
.text:00401F5D ; ---------------------------------------------------------------------------
.text:00401F5D
.text:00401F5D loc_401F5D:                             ; CODE XREF: sub_401C20+32E↑j
.text:00401F5D                 mov     ebp, [esp+2Ch+File]
.text:00401F61                 mov     [esp+2Ch+Buffer], ebp ; Stream
.text:00401F64                 call    fclose
.text:00401F69                 inc     eax
.text:00401F6A                 jnz     short loc_401F50
.text:00401F6C
.text:00401F6C loc_401F6C:                             ; CODE XREF: sub_401C20+3F↑j
.text:00401F6C                 call    _errno
.text:00401F71                 mov     [esp+2Ch+ElementCount], offset byte_401C1B ; char *
.text:00401F79                 mov     edi, [esp+2Ch+FileName]
.text:00401F7D                 mov     [esp+2Ch+Stream], edi ; char
.text:00401F81                 mov     edx, [eax]
.text:00401F83                 mov     [esp+2Ch+Buffer], 0 ; Code
.text:00401F8A                 mov     [esp+2Ch+ElementSize], edx ; ErrorMessage
.text:00401F8E                 call    sub_405520
.text:00401F93
.text:00401F93 loc_401F93:                             ; CODE XREF: sub_401C20+3A8↓j
.text:00401F93                                         ; sub_401C20+3B6↓j
.text:00401F93                 xor     eax, eax
.text:00401F95                 jmp     short loc_401F55
.text:00401F97 ; ---------------------------------------------------------------------------
.text:00401F97
.text:00401F97 loc_401F97:                             ; CODE XREF: sub_401C20+31B↑j
.text:00401F97                 mov     [esp+2Ch+ElementCount], offset byte_401C1B ; char *
.text:00401F9F                 mov     eax, [esp+2Ch+FileName]
.text:00401FA3                 mov     edi, (offset stru_401627._cnt+1)
.text:00401FA8                 mov     [esp+2Ch+ElementSize], ebx ; ErrorMessage
.text:00401FAC                 mov     [esp+2Ch+Buffer], 0 ; Code
.text:00401FB3                 mov     [esp+2Ch+Stream], eax ; char
.text:00401FB7                 call    sub_405520
.text:00401FBC                 cld
.text:00401FBD                 mov     esi, [esp+2Ch+FileName]
.text:00401FC1                 mov     ecx, 2
.text:00401FC6                 repe cmpsb
.text:00401FC8                 jz      short loc_401F93
.text:00401FCA                 mov     ebx, [esp+2Ch+File]
.text:00401FCE                 mov     [esp+2Ch+Buffer], ebx ; Stream
.text:00401FD1                 call    fclose
.text:00401FD6                 jmp     short loc_401F93
.text:00401FD8 ; ---------------------------------------------------------------------------
.text:00401FD8
.text:00401FD8 loc_401FD8:                             ; CODE XREF: sub_401C20+30D↑j
.text:00401FD8                 mov     [esp+2Ch+ElementSize], 1 ; ElementSize
.text:00401FE0                 mov     ecx, ds:_iob
.text:00401FE6                 mov     edi, [esp+2Ch+var_1C]
.text:00401FEA                 mov     edx, ds:Buffer
.text:00401FF0                 add     ecx, 20h ; ' '
.text:00401FF3                 mov     [esp+2Ch+Stream], ecx ; Stream
.text:00401FF7                 mov     [esp+2Ch+ElementCount], edi ; ElementCount
.text:00401FFB                 mov     [esp+2Ch+Buffer], edx ; Buffer
.text:00401FFE                 call    fwrite
.text:00402003                 jmp     loc_401F33
.text:00402008 ; ---------------------------------------------------------------------------
.text:00402008
.text:00402008 loc_402008:                             ; CODE XREF: sub_401C20+5D↑j
.text:00402008                 mov     esi, [esp+2Ch+File]
.text:0040200C                 mov     [esp+2Ch+Buffer], esi ; File
.text:0040200F                 call    _filbuf
.text:00402014                 jmp     loc_401C8F
.text:00402019 ; ---------------------------------------------------------------------------
.text:00402019
.text:00402019 loc_402019:                             ; CODE XREF: sub_401C20+22↑j
.text:00402019                 mov     [esp+2Ch+ElementSize], offset aR ; "r"
.text:00402021                 mov     eax, [esp+2Ch+FileName]
.text:00402025                 mov     [esp+2Ch+Buffer], eax ; FileName
.text:00402028                 call    fopen
.text:0040202D                 mov     [esp+2Ch+File], eax
.text:00402031                 jmp     loc_401C59
.text:00402031 sub_401C20      endp
.text:00402031
.text:00402031 ; ---------------------------------------------------------------------------
.text:00402036                 align 10h
.text:00402040 dword_402040    dd 90002D2Dh, 7 dup(90909090h)
.text:00402040                                         ; DATA XREF: sub_402290+E4↓o
.text:00402060 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402060                                         ; DATA XREF: sub_402290+2FC↓o
.text:0040208D                 align 20h
.text:004020A0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004020A0                                         ; DATA XREF: sub_402290:loc_4025F2↓o
.text:004020CD                 align 20h
.text:004020E0 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:004020E0                                         ; DATA XREF: sub_402290:loc_402690↓o
.text:004020E0                                         ; sub_402290:loc_402A57↓o
.text:00402106                 align 20h
.text:00402120 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00402120                                         ; DATA XREF: sub_402290+48E↓o
.text:00402140 dword_402140    dd 90909000h, 7 dup(90909090h)
.text:00402140                                         ; DATA XREF: sub_402290:loc_402761↓o
.text:00402160 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00402160                                         ; DATA XREF: sub_402290:loc_40277A↓o
.text:00402180 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00402180                                         ; DATA XREF: sub_402290:loc_40285F↓o
.text:00402180                                         ; sub_402290:loc_402B8C↓o
.text:004021A7                 align 20h
.text:004021C0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004021C0                                         ; DATA XREF: sub_402290:loc_4029D3↓o
.text:004021EE                 align 20h
.text:00402200 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00402200                                         ; DATA XREF: sub_402290:loc_402ABF↓o
.text:00402221 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00402221                                         ; DATA XREF: sub_402290+93F↓o
.text:0040223B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040223B                                         ; DATA XREF: sub_402290:loc_402C07↓o
.text:00402255 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00402255                                         ; DATA XREF: sub_402290:loc_402C2E↓o
.text:00402273 ; const char VarName[]
.text:00402273 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_402290:loc_402DE0↓o
.text:00402283                 align 10h
.text:00402290
.text:00402290 ; =============== S U B R O U T I N E =======================================
.text:00402290
.text:00402290
.text:00402290 ; int __cdecl sub_402290(int, int, char *Str, int, int, int, int, int)
.text:00402290 sub_402290      proc near               ; CODE XREF: sub_402E20+5A↓p
.text:00402290                                         ; .text:00402F0A↓p ...
.text:00402290
.text:00402290 Str1            = dword ptr -5Ch
.text:00402290 Str2            = dword ptr -58h
.text:00402290 MaxCount        = dword ptr -54h
.text:00402290 var_50          = dword ptr -50h
.text:00402290 var_4C          = dword ptr -4Ch
.text:00402290 var_3C          = dword ptr -3Ch
.text:00402290 var_38          = dword ptr -38h
.text:00402290 var_34          = dword ptr -34h
.text:00402290 var_30          = dword ptr -30h
.text:00402290 var_2C          = dword ptr -2Ch
.text:00402290 var_28          = dword ptr -28h
.text:00402290 var_24          = dword ptr -24h
.text:00402290 var_20          = dword ptr -20h
.text:00402290 var_1C          = dword ptr -1Ch
.text:00402290 var_18          = dword ptr -18h
.text:00402290 var_14          = dword ptr -14h
.text:00402290 arg_0           = dword ptr  4
.text:00402290 arg_4           = dword ptr  8
.text:00402290 Str             = dword ptr  0Ch
.text:00402290 arg_C           = dword ptr  10h
.text:00402290 arg_10          = dword ptr  14h
.text:00402290 arg_14          = dword ptr  18h
.text:00402290 arg_18          = dword ptr  1Ch
.text:00402290 arg_1C          = dword ptr  20h
.text:00402290
.text:00402290                 push    ebp
.text:00402291                 mov     eax, 0FFFFFFFFh
.text:00402296                 push    edi
.text:00402297                 push    esi
.text:00402298                 push    ebx
.text:00402299                 sub     esp, 4Ch
.text:0040229C                 mov     esi, [esp+5Ch+Str]
.text:004022A0                 mov     ebp, [esp+5Ch+arg_1C]
.text:004022A4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:004022A7                 mov     ebx, [ebp+4]
.text:004022AA                 setz    dl
.text:004022AD                 movzx   ecx, dl
.text:004022B0                 dec     ecx
.text:004022B1                 and     ecx, ebx
.text:004022B3                 mov     [esp+5Ch+var_14], ecx
.text:004022B7                 mov     ecx, [esp+5Ch+arg_0]
.text:004022BB                 test    ecx, ecx
.text:004022BD                 jle     loc_4023E7
.text:004022C3                 mov     dword ptr [ebp+0Ch], 0
.text:004022CA                 mov     ebx, [ebp+0]
.text:004022CD                 test    ebx, ebx
.text:004022CF                 jz      loc_402E00
.text:004022D5                 mov     edi, [ebp+10h]
.text:004022D8                 test    edi, edi
.text:004022DA                 jnz     short loc_402333
.text:004022DC                 lea     esi, [esi+0]
.text:004022E0
.text:004022E0 loc_4022E0:                             ; CODE XREF: sub_402290+B7C↓j
.text:004022E0                 mov     [ebp+24h], ebx
.text:004022E3                 mov     esi, [esp+5Ch+Str]
.text:004022E7                 mov     [ebp+20h], ebx
.text:004022EA                 mov     ecx, [esp+5Ch+arg_18]
.text:004022EE                 xor     ebx, ebx
.text:004022F0                 mov     dword ptr [ebp+14h], 0
.text:004022F7                 test    ecx, ecx
.text:004022F9                 jz      loc_402DE0
.text:004022FF
.text:004022FF loc_4022FF:                             ; CODE XREF: sub_402290+B64↓j
.text:004022FF                 mov     ebx, 1
.text:00402304
.text:00402304 loc_402304:                             ; CODE XREF: sub_402290+B5E↓j
.text:00402304                 mov     [ebp+1Ch], ebx
.text:00402307                 mov     ecx, [esp+5Ch+Str]
.text:0040230B                 movzx   eax, byte ptr [ecx]
.text:0040230E                 cmp     al, 2Dh ; '-'
.text:00402310                 jz      loc_402DD0
.text:00402316                 cmp     al, 2Bh ; '+'
.text:00402318                 jz      loc_402DB9
.text:0040231E                 xor     edx, edx
.text:00402320                 test    ebx, ebx
.text:00402322                 setz    dl
.text:00402325                 mov     [ebp+18h], edx
.text:00402328
.text:00402328 loc_402328:                             ; CODE XREF: sub_402290+B35↓j
.text:00402328                 mov     [esp+5Ch+Str], esi
.text:0040232C                 mov     dword ptr [ebp+10h], 1
.text:00402333
.text:00402333 loc_402333:                             ; CODE XREF: sub_402290+4A↑j
.text:00402333                 mov     eax, [ebp+14h]
.text:00402336                 test    eax, eax
.text:00402338                 jz      short loc_402343
.text:0040233A                 cmp     byte ptr [eax], 0
.text:0040233D                 jnz     loc_402420
.text:00402343
.text:00402343 loc_402343:                             ; CODE XREF: sub_402290+A8↑j
.text:00402343                 mov     ebx, [ebp+0]
.text:00402346                 cmp     [ebp+24h], ebx
.text:00402349                 jle     short loc_40234E
.text:0040234B                 mov     [ebp+24h], ebx
.text:0040234E
.text:0040234E loc_40234E:                             ; CODE XREF: sub_402290+B9↑j
.text:0040234E                 cmp     [ebp+20h], ebx
.text:00402351                 jle     short loc_402356
.text:00402353                 mov     [ebp+20h], ebx
.text:00402356
.text:00402356 loc_402356:                             ; CODE XREF: sub_402290+C1↑j
.text:00402356                 cmp     dword ptr [ebp+18h], 1
.text:0040235A                 jz      loc_402D30
.text:00402360
.text:00402360 loc_402360:                             ; CODE XREF: sub_402290+B13↓j
.text:00402360                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402364                 jz      loc_402D14
.text:0040236A                 cld
.text:0040236B                 mov     ecx, [esp+5Ch+arg_4]
.text:0040236F                 mov     edx, 3
.text:00402374                 mov     edi, offset dword_402040
.text:00402379                 mov     esi, [ecx+ebx*4]
.text:0040237C                 mov     ecx, edx
.text:0040237E                 repe cmpsb
.text:00402380                 jnz     short loc_4023BC
.text:00402382                 mov     edx, [ebp+24h]
.text:00402385                 lea     eax, [ebx+1]
.text:00402388                 cmp     [ebp+20h], edx
.text:0040238B                 mov     [ebp+0], eax
.text:0040238E                 jz      loc_402D28
.text:00402394                 cmp     edx, eax
.text:00402396                 jz      short loc_4023B0
.text:00402398                 mov     [esp+5Ch+Str2], ebp
.text:0040239C                 mov     ebx, [esp+5Ch+arg_4]
.text:004023A0                 mov     [esp+5Ch+Str1], ebx
.text:004023A3                 call    sub_402F40
.text:004023A8                 nop
.text:004023A9                 lea     esi, [esi+0]
.text:004023B0
.text:004023B0 loc_4023B0:                             ; CODE XREF: sub_402290+106↑j
.text:004023B0                                         ; sub_402290+A9B↓j
.text:004023B0                 mov     eax, [esp+5Ch+arg_0]
.text:004023B4                 mov     ebx, eax
.text:004023B6                 mov     [ebp+24h], eax
.text:004023B9                 mov     [ebp+0], eax
.text:004023BC
.text:004023BC loc_4023BC:                             ; CODE XREF: sub_402290+F0↑j
.text:004023BC                 cmp     ebx, [esp+5Ch+arg_0]
.text:004023C0                 jz      loc_402D14
.text:004023C6                 mov     esi, [esp+5Ch+arg_4]
.text:004023CA                 mov     eax, [esi+ebx*4]
.text:004023CD                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004023D0                 jz      short loc_4023F7
.text:004023D2
.text:004023D2 loc_4023D2:                             ; CODE XREF: sub_402290+16D↓j
.text:004023D2                 mov     edx, [ebp+18h]
.text:004023D5                 test    edx, edx
.text:004023D7                 jz      short loc_4023F0
.text:004023D9                 mov     [ebp+0Ch], eax
.text:004023DC                 lea     edi, [ebx+1]
.text:004023DF                 mov     eax, 1
.text:004023E4                 mov     [ebp+0], edi
.text:004023E7
.text:004023E7 loc_4023E7:                             ; CODE XREF: sub_402290+2D↑j
.text:004023E7                                         ; sub_402290+165↓j ...
.text:004023E7                 add     esp, 4Ch
.text:004023EA                 pop     ebx
.text:004023EB                 pop     esi
.text:004023EC                 pop     edi
.text:004023ED                 pop     ebp
.text:004023EE                 retn
.text:004023EE ; ---------------------------------------------------------------------------
.text:004023EF                 align 10h
.text:004023F0
.text:004023F0 loc_4023F0:                             ; CODE XREF: sub_402290+147↑j
.text:004023F0                                         ; sub_402290+A8A↓j ...
.text:004023F0                 mov     eax, 0FFFFFFFFh
.text:004023F5                 jmp     short loc_4023E7
.text:004023F7 ; ---------------------------------------------------------------------------
.text:004023F7
.text:004023F7 loc_4023F7:                             ; CODE XREF: sub_402290+140↑j
.text:004023F7                 movzx   edx, byte ptr [eax+1]
.text:004023FB                 test    dl, dl
.text:004023FD                 jz      short loc_4023D2
.text:004023FF                 mov     ebx, [esp+5Ch+arg_C]
.text:00402403                 xor     ecx, ecx
.text:00402405                 test    ebx, ebx
.text:00402407                 jz      short loc_402412
.text:00402409                 cmp     dl, 2Dh ; '-'
.text:0040240C                 jz      loc_402D0A
.text:00402412
.text:00402412 loc_402412:                             ; CODE XREF: sub_402290+177↑j
.text:00402412                                         ; sub_402290+A7F↓j
.text:00402412                 lea     esi, [ecx+eax+1]
.text:00402416                 mov     [ebp+14h], esi
.text:00402419                 lea     esi, [esi+0]
.text:00402420
.text:00402420 loc_402420:                             ; CODE XREF: sub_402290+AD↑j
.text:00402420                 mov     ecx, [esp+5Ch+arg_C]
.text:00402424                 test    ecx, ecx
.text:00402426                 jz      loc_4027B0
.text:0040242C                 mov     edx, [ebp+0]
.text:0040242F                 mov     edi, [esp+5Ch+arg_4]
.text:00402433                 mov     eax, [edi+edx*4]
.text:00402436                 movzx   edx, byte ptr [eax+1]
.text:0040243A                 cmp     dl, 2Dh ; '-'
.text:0040243D                 jz      short loc_402455
.text:0040243F                 mov     ebx, [esp+5Ch+arg_14]
.text:00402443                 test    ebx, ebx
.text:00402445                 jz      loc_4027B0
.text:0040244B                 cmp     byte ptr [eax+2], 0
.text:0040244F                 jz      loc_402CEA
.text:00402455
.text:00402455 loc_402455:                             ; CODE XREF: sub_402290+1AD↑j
.text:00402455                                         ; sub_402290+A75↓j
.text:00402455                 mov     [esp+5Ch+var_18], 0
.text:0040245D                 mov     ecx, [ebp+14h]
.text:00402460                 mov     [esp+5Ch+var_1C], 0
.text:00402468                 mov     [esp+5Ch+var_20], 0
.text:00402470                 mov     edi, ecx
.text:00402472                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:0040247A                 movzx   eax, byte ptr [ecx]
.text:0040247D                 test    al, al
.text:0040247F                 jz      short loc_40249C
.text:00402481                 cmp     al, 3Dh ; '='
.text:00402483                 jz      short loc_40249C
.text:00402485                 lea     esi, [esi+0]
.text:00402489                 lea     edi, [edi+0]
.text:00402490
.text:00402490 loc_402490:                             ; CODE XREF: sub_402290+20A↓j
.text:00402490                 inc     edi
.text:00402491                 movzx   eax, byte ptr [edi]
.text:00402494                 test    al, al
.text:00402496                 jz      short loc_40249C
.text:00402498                 cmp     al, 3Dh ; '='
.text:0040249A                 jnz     short loc_402490
.text:0040249C
.text:0040249C loc_40249C:                             ; CODE XREF: sub_402290+1EF↑j
.text:0040249C                                         ; sub_402290+1F3↑j ...
.text:0040249C                 mov     [esp+5Ch+var_28], 0
.text:004024A4                 mov     esi, [esp+5Ch+arg_C]
.text:004024A8                 mov     ebx, [esi]
.text:004024AA                 test    ebx, ebx
.text:004024AC                 mov     edx, ebx
.text:004024AE                 jz      loc_4026D0
.text:004024B4                 lea     esi, [esi+0]
.text:004024BA                 lea     edi, [edi+0]
.text:004024C0
.text:004024C0 loc_4024C0:                             ; CODE XREF: sub_402290+25E↓j
.text:004024C0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:004024C4                 mov     ebx, edi
.text:004024C6                 sub     ebx, ecx
.text:004024C8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:004024CC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:004024CF                 call    strncmp
.text:004024D4                 test    eax, eax
.text:004024D6                 jz      loc_402C66
.text:004024DC
.text:004024DC loc_4024DC:                             ; CODE XREF: sub_402290+A0F↓j
.text:004024DC                                         ; sub_402290+A24↓j ...
.text:004024DC                 inc     [esp+5Ch+var_28]
.text:004024E0                 add     esi, 10h
.text:004024E3                 mov     ecx, [esi]
.text:004024E5                 test    ecx, ecx
.text:004024E7                 mov     edx, ecx
.text:004024E9                 jz      short loc_4024F0
.text:004024EB                 mov     ecx, [ebp+14h]
.text:004024EE                 jmp     short loc_4024C0
.text:004024F0 ; ---------------------------------------------------------------------------
.text:004024F0
.text:004024F0 loc_4024F0:                             ; CODE XREF: sub_402290+259↑j
.text:004024F0                                         ; sub_402290+A55↓j
.text:004024F0                 mov     esi, [esp+5Ch+var_20]
.text:004024F4                 test    esi, esi
.text:004024F6                 jz      short loc_402504
.text:004024F8                 mov     edx, [esp+5Ch+var_1C]
.text:004024FC                 test    edx, edx
.text:004024FE                 jz      loc_402C10
.text:00402504
.text:00402504 loc_402504:                             ; CODE XREF: sub_402290+266↑j
.text:00402504                 mov     eax, [esp+5Ch+var_18]
.text:00402508                 test    eax, eax
.text:0040250A                 jz      loc_4026D0
.text:00402510                 mov     ecx, [ebp+0]
.text:00402513                 lea     eax, [ecx+1]
.text:00402516                 mov     [ebp+0], eax
.text:00402519                 cmp     byte ptr [edi], 0
.text:0040251C                 jz      loc_402630
.text:00402522                 mov     ecx, [esp+5Ch+var_18]
.text:00402526                 mov     esi, [ecx+4]
.text:00402529                 test    esi, esi
.text:0040252B                 jz      short loc_402576
.text:0040252D                 lea     ebx, [edi+1]
.text:00402530                 mov     [ebp+0Ch], ebx
.text:00402533
.text:00402533 loc_402533:                             ; CODE XREF: sub_402290+3A8↓j
.text:00402533                                         ; sub_402290+3C4↓j
.text:00402533                 mov     ebx, [ebp+14h]
.text:00402536                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00402539                 call    strlen
.text:0040253E                 add     [ebp+14h], eax
.text:00402541                 mov     esi, [esp+5Ch+arg_10]
.text:00402545                 test    esi, esi
.text:00402547                 jz      short loc_402553
.text:00402549                 mov     ebp, [esp+5Ch+var_24]
.text:0040254D                 mov     ecx, [esp+5Ch+arg_10]
.text:00402551                 mov     [ecx], ebp
.text:00402553
.text:00402553 loc_402553:                             ; CODE XREF: sub_402290+2B7↑j
.text:00402553                 mov     eax, [esp+5Ch+var_18]
.text:00402557                 mov     ecx, [eax+8]
.text:0040255A                 test    ecx, ecx
.text:0040255C                 jnz     short loc_40256A
.text:0040255E                 mov     ecx, [esp+5Ch+var_18]
.text:00402562
.text:00402562 loc_402562:                             ; CODE XREF: sub_402290+723↓j
.text:00402562                 mov     eax, [ecx+0Ch]
.text:00402565                 jmp     loc_4023E7
.text:0040256A ; ---------------------------------------------------------------------------
.text:0040256A
.text:0040256A loc_40256A:                             ; CODE XREF: sub_402290+2CC↑j
.text:0040256A                                         ; sub_402290+719↓j
.text:0040256A                 mov     esi, [eax+0Ch]
.text:0040256D                 xor     eax, eax
.text:0040256F                 mov     [ecx], esi
.text:00402571                 jmp     loc_4023E7
.text:00402576 ; ---------------------------------------------------------------------------
.text:00402576
.text:00402576 loc_402576:                             ; CODE XREF: sub_402290+29B↑j
.text:00402576                 mov     edi, [esp+5Ch+var_14]
.text:0040257A                 test    edi, edi
.text:0040257C                 jz      short loc_4025D0
.text:0040257E                 mov     esi, [esp+5Ch+arg_4]
.text:00402582                 mov     edx, [esi+eax*4-4]
.text:00402586                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040258A                 jz      short loc_4025F2
.text:0040258C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00402593                 call    ds:libintl_gettext
.text:00402599                 mov     edx, [esp+5Ch+var_18]
.text:0040259D                 mov     edi, [edx]
.text:0040259F                 mov     [esp+5Ch+var_4C], edi
.text:004025A3                 mov     ebx, [ebp+0]
.text:004025A6                 mov     edi, [esp+5Ch+arg_4]
.text:004025AA                 mov     ecx, [edi+ebx*4-4]
.text:004025AE                 movsx   esi, byte ptr [ecx]
.text:004025B1                 mov     ecx, ds:_iob
.text:004025B7                 add     ecx, 40h ; '@'
.text:004025BA                 mov     [esp+5Ch+var_50], esi
.text:004025BE                 mov     ebx, [edi]
.text:004025C0                 mov     [esp+5Ch+Str2], eax ; Format
.text:004025C4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004025C7                 mov     [esp+5Ch+MaxCount], ebx
.text:004025CB                 call    fprintf
.text:004025D0
.text:004025D0 loc_4025D0:                             ; CODE XREF: sub_402290+2EC↑j
.text:004025D0                                         ; sub_402290+398↓j
.text:004025D0                 mov     ecx, [ebp+14h]
.text:004025D3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004025D6                 call    strlen
.text:004025DB                 add     [ebp+14h], eax
.text:004025DE                 mov     eax, [esp+5Ch+var_18]
.text:004025E2                 mov     esi, [eax+0Ch]
.text:004025E5                 mov     [ebp+8], esi
.text:004025E8
.text:004025E8 loc_4025E8:                             ; CODE XREF: sub_402290+4E5↓j
.text:004025E8                                         ; sub_402290+73E↓j ...
.text:004025E8                 mov     eax, 3Fh ; '?'
.text:004025ED                 jmp     loc_4023E7
.text:004025F2 ; ---------------------------------------------------------------------------
.text:004025F2
.text:004025F2 loc_4025F2:                             ; CODE XREF: sub_402290+2FA↑j
.text:004025F2                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:004025F9                 call    ds:libintl_gettext
.text:004025FF                 mov     edx, [esp+5Ch+var_18]
.text:00402603                 mov     edi, [esp+5Ch+arg_4]
.text:00402607                 mov     ecx, ds:_iob
.text:0040260D                 mov     esi, [edx]
.text:0040260F                 add     ecx, 40h ; '@'
.text:00402612                 mov     [esp+5Ch+var_50], esi
.text:00402616                 mov     ebx, [edi]
.text:00402618                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040261C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040261F                 mov     [esp+5Ch+MaxCount], ebx
.text:00402623                 call    fprintf
.text:00402628                 jmp     short loc_4025D0
.text:00402628 ; ---------------------------------------------------------------------------
.text:0040262A                 align 10h
.text:00402630
.text:00402630 loc_402630:                             ; CODE XREF: sub_402290+28C↑j
.text:00402630                 mov     ebx, [esp+5Ch+var_18]
.text:00402634                 cmp     dword ptr [ebx+4], 1
.text:00402638                 jnz     loc_402533
.text:0040263E                 cmp     eax, [esp+5Ch+arg_0]
.text:00402642                 jge     short loc_402659
.text:00402644                 mov     ebx, [esp+5Ch+arg_4]
.text:00402648                 lea     edi, [ecx+2]
.text:0040264B                 mov     [ebp+0], edi
.text:0040264E                 mov     esi, [ebx+eax*4]
.text:00402651                 mov     [ebp+0Ch], esi
.text:00402654                 jmp     loc_402533
.text:00402659 ; ---------------------------------------------------------------------------
.text:00402659
.text:00402659 loc_402659:                             ; CODE XREF: sub_402290+3B2↑j
.text:00402659                 mov     edx, [esp+5Ch+var_14]
.text:0040265D                 test    edx, edx
.text:0040265F                 jnz     short loc_402690
.text:00402661
.text:00402661 loc_402661:                             ; CODE XREF: sub_402290+437↓j
.text:00402661                 mov     edx, [ebp+14h]
.text:00402664                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402667                 call    strlen
.text:0040266C                 add     [ebp+14h], eax
.text:0040266F                 mov     eax, [esp+5Ch+var_18]
.text:00402673                 mov     edi, [eax+0Ch]
.text:00402676                 mov     [ebp+8], edi
.text:00402679
.text:00402679 loc_402679:                             ; CODE XREF: sub_402290+7C2↓j
.text:00402679                 mov     ebp, [esp+5Ch+Str]
.text:0040267D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402681                 setnz   bl
.text:00402684                 movzx   esi, bl
.text:00402687                 lea     eax, [esi+esi*4+3Ah]
.text:0040268B                 jmp     loc_4023E7
.text:00402690 ; ---------------------------------------------------------------------------
.text:00402690
.text:00402690 loc_402690:                             ; CODE XREF: sub_402290+3CF↑j
.text:00402690                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00402697                 call    ds:libintl_gettext
.text:0040269D                 mov     ecx, [ebp+0]
.text:004026A0                 mov     esi, [esp+5Ch+arg_4]
.text:004026A4                 mov     ebx, [esi+ecx*4-4]
.text:004026A8                 mov     ecx, ds:_iob
.text:004026AE                 mov     [esp+5Ch+var_50], ebx
.text:004026B2                 mov     edi, [esi]
.text:004026B4                 add     ecx, 40h ; '@'
.text:004026B7                 mov     [esp+5Ch+Str2], eax ; Format
.text:004026BB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004026BE                 mov     [esp+5Ch+MaxCount], edi
.text:004026C2                 call    fprintf
.text:004026C7                 jmp     short loc_402661
.text:004026C7 ; ---------------------------------------------------------------------------
.text:004026C9                 align 10h
.text:004026D0
.text:004026D0 loc_4026D0:                             ; CODE XREF: sub_402290+21E↑j
.text:004026D0                                         ; sub_402290+27A↑j
.text:004026D0                 mov     eax, [esp+5Ch+arg_14]
.text:004026D4                 test    eax, eax
.text:004026D6                 jz      short loc_402706
.text:004026D8                 mov     ebx, [ebp+0]
.text:004026DB                 mov     esi, [esp+5Ch+arg_4]
.text:004026DF                 mov     edi, [esi+ebx*4]
.text:004026E2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004026E6                 jz      short loc_402709
.text:004026E8                 mov     ecx, [ebp+14h]
.text:004026EB                 mov     edx, [esp+5Ch+Str]
.text:004026EF                 movsx   ebx, byte ptr [ecx]
.text:004026F2                 mov     [esp+5Ch+Str1], edx ; Str
.text:004026F5                 mov     [esp+5Ch+Str2], ebx ; Val
.text:004026F9                 call    strchr
.text:004026FE                 test    eax, eax
.text:00402700                 jnz     loc_4027B0
.text:00402706
.text:00402706 loc_402706:                             ; CODE XREF: sub_402290+446↑j
.text:00402706                 mov     ebx, [ebp+0]
.text:00402709
.text:00402709 loc_402709:                             ; CODE XREF: sub_402290+456↑j
.text:00402709                 mov     eax, [esp+5Ch+var_14]
.text:0040270D                 test    eax, eax
.text:0040270F                 jz      short loc_402761
.text:00402711                 mov     esi, [esp+5Ch+arg_4]
.text:00402715                 mov     edi, [esi+ebx*4]
.text:00402718                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040271C                 jz      short loc_40277A
.text:0040271E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00402725                 call    ds:libintl_gettext
.text:0040272B                 mov     edi, [ebp+14h]
.text:0040272E                 mov     [esp+5Ch+var_4C], edi
.text:00402732                 mov     ebx, [ebp+0]
.text:00402735                 mov     edi, [esp+5Ch+arg_4]
.text:00402739                 mov     esi, [edi+ebx*4]
.text:0040273C                 movsx   ecx, byte ptr [esi]
.text:0040273F                 mov     esi, ds:_iob
.text:00402745                 add     esi, 40h ; '@'
.text:00402748                 mov     [esp+5Ch+var_50], ecx
.text:0040274C                 mov     ebx, [edi]
.text:0040274E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402752                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00402755                 mov     [esp+5Ch+MaxCount], ebx
.text:00402759                 call    fprintf
.text:0040275E
.text:0040275E loc_40275E:                             ; CODE XREF: sub_402290+51D↓j
.text:0040275E                 mov     ebx, [ebp+0]
.text:00402761
.text:00402761 loc_402761:                             ; CODE XREF: sub_402290+47F↑j
.text:00402761                 mov     dword ptr [ebp+14h], offset dword_402140
.text:00402768                 lea     edx, [ebx+1]
.text:0040276B                 mov     [ebp+0], edx
.text:0040276E
.text:0040276E loc_40276E:                             ; CODE XREF: sub_402290+999↓j
.text:0040276E                 mov     dword ptr [ebp+8], 0
.text:00402775                 jmp     loc_4025E8
.text:0040277A ; ---------------------------------------------------------------------------
.text:0040277A
.text:0040277A loc_40277A:                             ; CODE XREF: sub_402290+48C↑j
.text:0040277A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00402781                 call    ds:libintl_gettext
.text:00402787                 mov     ecx, [ebp+14h]
.text:0040278A                 mov     edi, [esp+5Ch+arg_4]
.text:0040278E                 mov     edx, ds:_iob
.text:00402794                 mov     [esp+5Ch+var_50], ecx
.text:00402798                 mov     ebx, [edi]
.text:0040279A                 add     edx, 40h ; '@'
.text:0040279D                 mov     [esp+5Ch+Str2], eax ; Format
.text:004027A1                 mov     [esp+5Ch+MaxCount], ebx
.text:004027A5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004027A8                 call    fprintf
.text:004027AD                 jmp     short loc_40275E
.text:004027AD ; ---------------------------------------------------------------------------
.text:004027AF                 align 10h
.text:004027B0
.text:004027B0 loc_4027B0:                             ; CODE XREF: sub_402290+196↑j
.text:004027B0                                         ; sub_402290+1B5↑j ...
.text:004027B0                 mov     esi, [ebp+14h]
.text:004027B3                 movzx   ebx, byte ptr [esi]
.text:004027B6                 inc     esi
.text:004027B7                 mov     [ebp+14h], esi
.text:004027BA                 mov     ecx, [esp+5Ch+Str]
.text:004027BE                 movsx   esi, bl
.text:004027C1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004027C5                 mov     edi, esi
.text:004027C7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004027CA                 call    strchr
.text:004027CF                 mov     ecx, [ebp+14h]
.text:004027D2                 cmp     byte ptr [ecx], 0
.text:004027D5                 jnz     short loc_4027DA
.text:004027D7                 inc     dword ptr [ebp+0]
.text:004027DA
.text:004027DA loc_4027DA:                             ; CODE XREF: sub_402290+545↑j
.text:004027DA                 test    eax, eax
.text:004027DC                 jz      loc_402BC0
.text:004027E2                 cmp     bl, 3Ah ; ':'
.text:004027E5                 jz      loc_402BC0
.text:004027EB                 cmp     byte ptr [eax], 57h ; 'W'
.text:004027EE                 jz      loc_4028A6
.text:004027F4                 movzx   edx, byte ptr [eax+1]
.text:004027F8
.text:004027F8 loc_4027F8:                             ; CODE XREF: sub_402290+61D↓j
.text:004027F8                 cmp     dl, 3Ah ; ':'
.text:004027FB                 jz      short loc_402804
.text:004027FD
.text:004027FD loc_4027FD:                             ; CODE XREF: sub_402290+590↓j
.text:004027FD                 mov     eax, esi
.text:004027FF                 jmp     loc_4023E7
.text:00402804 ; ---------------------------------------------------------------------------
.text:00402804
.text:00402804 loc_402804:                             ; CODE XREF: sub_402290+56B↑j
.text:00402804                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00402808                 jz      loc_402891
.text:0040280E                 cmp     byte ptr [ecx], 0
.text:00402811                 jz      short loc_402822
.text:00402813
.text:00402813 loc_402813:                             ; CODE XREF: sub_402290+604↓j
.text:00402813                 inc     dword ptr [ebp+0]
.text:00402816                 mov     [ebp+0Ch], ecx
.text:00402819
.text:00402819 loc_402819:                             ; CODE XREF: sub_402290+5AB↓j
.text:00402819                                         ; sub_402290+5C6↓j ...
.text:00402819                 mov     dword ptr [ebp+14h], 0
.text:00402820                 jmp     short loc_4027FD
.text:00402822 ; ---------------------------------------------------------------------------
.text:00402822
.text:00402822 loc_402822:                             ; CODE XREF: sub_402290+581↑j
.text:00402822                 mov     ecx, [ebp+0]
.text:00402825                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402829                 jz      short loc_40283D
.text:0040282B                 mov     eax, [esp+5Ch+arg_4]
.text:0040282F                 lea     edx, [ecx+1]
.text:00402832                 mov     [ebp+0], edx
.text:00402835                 mov     ebx, [eax+ecx*4]
.text:00402838                 mov     [ebp+0Ch], ebx
.text:0040283B                 jmp     short loc_402819
.text:0040283D ; ---------------------------------------------------------------------------
.text:0040283D
.text:0040283D loc_40283D:                             ; CODE XREF: sub_402290+599↑j
.text:0040283D                 mov     ecx, [esp+5Ch+var_14]
.text:00402841                 test    ecx, ecx
.text:00402843                 jnz     short loc_40285F
.text:00402845
.text:00402845 loc_402845:                             ; CODE XREF: sub_402290+5FF↓j
.text:00402845                 mov     [ebp+8], edi
.text:00402848                 mov     edi, [esp+5Ch+Str]
.text:0040284C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040284F                 jz      short loc_402858
.text:00402851                 mov     esi, 3Fh ; '?'
.text:00402856                 jmp     short loc_402819
.text:00402858 ; ---------------------------------------------------------------------------
.text:00402858
.text:00402858 loc_402858:                             ; CODE XREF: sub_402290+5BF↑j
.text:00402858                 mov     esi, 3Ah ; ':'
.text:0040285D                 jmp     short loc_402819
.text:0040285F ; ---------------------------------------------------------------------------
.text:0040285F
.text:0040285F loc_40285F:                             ; CODE XREF: sub_402290+5B3↑j
.text:0040285F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402866                 call    ds:libintl_gettext
.text:0040286C                 mov     [esp+5Ch+var_50], edi
.text:00402870                 mov     ebx, [esp+5Ch+arg_4]
.text:00402874                 mov     edx, ds:_iob
.text:0040287A                 mov     esi, [ebx]
.text:0040287C                 add     edx, 40h ; '@'
.text:0040287F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402883                 mov     [esp+5Ch+MaxCount], esi
.text:00402887                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040288A                 call    fprintf
.text:0040288F                 jmp     short loc_402845
.text:00402891 ; ---------------------------------------------------------------------------
.text:00402891
.text:00402891 loc_402891:                             ; CODE XREF: sub_402290+578↑j
.text:00402891                 cmp     byte ptr [ecx], 0
.text:00402894                 jnz     loc_402813
.text:0040289A                 mov     dword ptr [ebp+0Ch], 0
.text:004028A1                 jmp     loc_402819
.text:004028A6 ; ---------------------------------------------------------------------------
.text:004028A6
.text:004028A6 loc_4028A6:                             ; CODE XREF: sub_402290+55E↑j
.text:004028A6                 movzx   edx, byte ptr [eax+1]
.text:004028AA                 cmp     dl, 3Bh ; ';'
.text:004028AD                 jnz     loc_4027F8
.text:004028B3                 mov     [esp+5Ch+var_2C], 0
.text:004028BB                 mov     [esp+5Ch+var_30], 0
.text:004028C3                 mov     [esp+5Ch+var_34], 0
.text:004028CB                 mov     [esp+5Ch+var_38], 0
.text:004028D3                 cmp     byte ptr [ecx], 0
.text:004028D6                 jz      loc_402B4B
.text:004028DC                 inc     dword ptr [ebp+0]
.text:004028DF                 mov     [ebp+0Ch], ecx
.text:004028E2
.text:004028E2 loc_4028E2:                             ; CODE XREF: sub_402290+8D4↓j
.text:004028E2                 mov     edi, [ebp+0Ch]
.text:004028E5                 mov     [ebp+14h], edi
.text:004028E8                 movzx   eax, byte ptr [edi]
.text:004028EB                 test    al, al
.text:004028ED                 jz      short loc_4028FF
.text:004028EF                 cmp     al, 3Dh ; '='
.text:004028F1                 jz      short loc_4028FF
.text:004028F3
.text:004028F3 loc_4028F3:                             ; CODE XREF: sub_402290+66D↓j
.text:004028F3                 inc     edi
.text:004028F4                 movzx   eax, byte ptr [edi]
.text:004028F7                 test    al, al
.text:004028F9                 jz      short loc_4028FF
.text:004028FB                 cmp     al, 3Dh ; '='
.text:004028FD                 jnz     short loc_4028F3
.text:004028FF
.text:004028FF loc_4028FF:                             ; CODE XREF: sub_402290+65D↑j
.text:004028FF                                         ; sub_402290+661↑j ...
.text:004028FF                 mov     [esp+5Ch+var_3C], 0
.text:00402907                 mov     esi, [esp+5Ch+arg_C]
.text:0040290B                 mov     eax, [esi]
.text:0040290D                 test    eax, eax
.text:0040290F                 jz      loc_402A90
.text:00402915                 mov     ecx, eax
.text:00402917
.text:00402917 loc_402917:                             ; CODE XREF: sub_402290+6B3↓j
.text:00402917                 mov     ebx, [ebp+14h]
.text:0040291A                 mov     eax, edi
.text:0040291C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040291F                 sub     eax, ebx
.text:00402921                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00402925                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00402929                 call    strncmp
.text:0040292E                 test    eax, eax
.text:00402930                 jz      loc_402AF7
.text:00402936
.text:00402936 loc_402936:                             ; CODE XREF: sub_402290+88C↓j
.text:00402936                                         ; sub_402290+89D↓j
.text:00402936                 inc     [esp+5Ch+var_3C]
.text:0040293A                 add     esi, 10h
.text:0040293D                 mov     edx, [esi]
.text:0040293F                 test    edx, edx
.text:00402941                 mov     ecx, edx
.text:00402943                 jnz     short loc_402917
.text:00402945
.text:00402945 loc_402945:                             ; CODE XREF: sub_402290+8B6↓j
.text:00402945                 mov     esi, [esp+5Ch+var_34]
.text:00402949                 test    esi, esi
.text:0040294B                 jz      short loc_402959
.text:0040294D                 mov     ebx, [esp+5Ch+var_30]
.text:00402951                 test    ebx, ebx
.text:00402953                 jz      loc_402AA1
.text:00402959
.text:00402959 loc_402959:                             ; CODE XREF: sub_402290+6BB↑j
.text:00402959                 mov     esi, [esp+5Ch+var_2C]
.text:0040295D                 test    esi, esi
.text:0040295F                 jz      loc_402A90
.text:00402965                 cmp     byte ptr [edi], 0
.text:00402968                 jz      loc_402A10
.text:0040296E                 mov     ecx, [esp+5Ch+var_2C]
.text:00402972                 mov     ebx, [ecx+4]
.text:00402975                 test    ebx, ebx
.text:00402977                 jz      short loc_4029B8
.text:00402979                 lea     edx, [edi+1]
.text:0040297C                 mov     [ebp+0Ch], edx
.text:0040297F
.text:0040297F loc_40297F:                             ; CODE XREF: sub_402290+788↓j
.text:0040297F                                         ; sub_402290+7A7↓j
.text:0040297F                 mov     edi, [ebp+14h]
.text:00402982                 mov     [esp+5Ch+Str1], edi ; Str
.text:00402985                 call    strlen
.text:0040298A                 add     [ebp+14h], eax
.text:0040298D                 mov     eax, [esp+5Ch+arg_10]
.text:00402991                 test    eax, eax
.text:00402993                 jz      short loc_4029A0
.text:00402995                 mov     edx, [esp+5Ch+var_38]
.text:00402999                 mov     ebp, [esp+5Ch+arg_10]
.text:0040299D                 mov     [ebp+0], edx
.text:004029A0
.text:004029A0 loc_4029A0:                             ; CODE XREF: sub_402290+703↑j
.text:004029A0                 mov     eax, [esp+5Ch+var_2C]
.text:004029A4                 mov     ecx, [eax+8]
.text:004029A7                 test    ecx, ecx
.text:004029A9                 jnz     loc_40256A
.text:004029AF                 mov     ecx, [esp+5Ch+var_2C]
.text:004029B3                 jmp     loc_402562
.text:004029B8 ; ---------------------------------------------------------------------------
.text:004029B8
.text:004029B8 loc_4029B8:                             ; CODE XREF: sub_402290+6E7↑j
.text:004029B8                 mov     eax, [esp+5Ch+var_14]
.text:004029BC                 test    eax, eax
.text:004029BE                 jnz     short loc_4029D3
.text:004029C0
.text:004029C0 loc_4029C0:                             ; CODE XREF: sub_402290+779↓j
.text:004029C0                 mov     ecx, [ebp+14h]
.text:004029C3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004029C6                 call    strlen
.text:004029CB                 add     [ebp+14h], eax
.text:004029CE                 jmp     loc_4025E8
.text:004029D3 ; ---------------------------------------------------------------------------
.text:004029D3
.text:004029D3 loc_4029D3:                             ; CODE XREF: sub_402290+72E↑j
.text:004029D3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:004029DA                 call    ds:libintl_gettext
.text:004029E0                 mov     edx, [esp+5Ch+var_2C]
.text:004029E4                 mov     ebx, [esp+5Ch+arg_4]
.text:004029E8                 mov     edi, [edx]
.text:004029EA                 mov     [esp+5Ch+var_50], edi
.text:004029EE                 mov     edi, ds:_iob
.text:004029F4                 mov     esi, [ebx]
.text:004029F6                 mov     [esp+5Ch+Str2], eax ; Format
.text:004029FA                 add     edi, 40h ; '@'
.text:004029FD                 mov     [esp+5Ch+MaxCount], esi
.text:00402A01                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402A04                 call    fprintf
.text:00402A09                 jmp     short loc_4029C0
.text:00402A09 ; ---------------------------------------------------------------------------
.text:00402A0B                 align 10h
.text:00402A10
.text:00402A10 loc_402A10:                             ; CODE XREF: sub_402290+6D8↑j
.text:00402A10                 mov     esi, [esp+5Ch+var_2C]
.text:00402A14                 cmp     dword ptr [esi+4], 1
.text:00402A18                 jnz     loc_40297F
.text:00402A1E                 mov     ecx, [ebp+0]
.text:00402A21                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402A25                 jge     short loc_402A3C
.text:00402A27                 mov     eax, [esp+5Ch+arg_4]
.text:00402A2B                 lea     ebx, [ecx+1]
.text:00402A2E                 mov     [ebp+0], ebx
.text:00402A31                 mov     edi, [eax+ecx*4]
.text:00402A34                 mov     [ebp+0Ch], edi
.text:00402A37                 jmp     loc_40297F
.text:00402A3C ; ---------------------------------------------------------------------------
.text:00402A3C
.text:00402A3C loc_402A3C:                             ; CODE XREF: sub_402290+795↑j
.text:00402A3C                 mov     edx, [esp+5Ch+var_14]
.text:00402A40                 test    edx, edx
.text:00402A42                 jnz     short loc_402A57
.text:00402A44
.text:00402A44 loc_402A44:                             ; CODE XREF: sub_402290+7FE↓j
.text:00402A44                 mov     edx, [ebp+14h]
.text:00402A47                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402A4A                 call    strlen
.text:00402A4F                 add     [ebp+14h], eax
.text:00402A52                 jmp     loc_402679
.text:00402A57 ; ---------------------------------------------------------------------------
.text:00402A57
.text:00402A57 loc_402A57:                             ; CODE XREF: sub_402290+7B2↑j
.text:00402A57                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00402A5E                 call    ds:libintl_gettext
.text:00402A64                 mov     ecx, [ebp+0]
.text:00402A67                 mov     ebx, [esp+5Ch+arg_4]
.text:00402A6B                 mov     edi, [ebx+ecx*4-4]
.text:00402A6F                 mov     ecx, ds:_iob
.text:00402A75                 mov     [esp+5Ch+var_50], edi
.text:00402A79                 mov     esi, [ebx]
.text:00402A7B                 add     ecx, 40h ; '@'
.text:00402A7E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402A82                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402A85                 mov     [esp+5Ch+MaxCount], esi
.text:00402A89                 call    fprintf
.text:00402A8E                 jmp     short loc_402A44
.text:00402A90 ; ---------------------------------------------------------------------------
.text:00402A90
.text:00402A90 loc_402A90:                             ; CODE XREF: sub_402290+67F↑j
.text:00402A90                                         ; sub_402290+6CF↑j
.text:00402A90                 mov     dword ptr [ebp+14h], 0
.text:00402A97                 mov     eax, 57h ; 'W'
.text:00402A9C                 jmp     loc_4023E7
.text:00402AA1 ; ---------------------------------------------------------------------------
.text:00402AA1
.text:00402AA1 loc_402AA1:                             ; CODE XREF: sub_402290+6C3↑j
.text:00402AA1                 mov     edi, [esp+5Ch+var_14]
.text:00402AA5                 test    edi, edi
.text:00402AA7                 jnz     short loc_402ABF
.text:00402AA9
.text:00402AA9 loc_402AA9:                             ; CODE XREF: sub_402290+865↓j
.text:00402AA9                 mov     edx, [ebp+14h]
.text:00402AAC                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402AAF                 call    strlen
.text:00402AB4                 add     [ebp+14h], eax
.text:00402AB7                 inc     dword ptr [ebp+0]
.text:00402ABA                 jmp     loc_4025E8
.text:00402ABF ; ---------------------------------------------------------------------------
.text:00402ABF
.text:00402ABF loc_402ABF:                             ; CODE XREF: sub_402290+817↑j
.text:00402ABF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00402AC6                 call    ds:libintl_gettext
.text:00402ACC                 mov     ecx, [ebp+0]
.text:00402ACF                 mov     ebx, [esp+5Ch+arg_4]
.text:00402AD3                 mov     edi, [ebx+ecx*4]
.text:00402AD6                 mov     ecx, ds:_iob
.text:00402ADC                 mov     [esp+5Ch+var_50], edi
.text:00402AE0                 mov     esi, [ebx]
.text:00402AE2                 add     ecx, 40h ; '@'
.text:00402AE5                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402AE9                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402AEC                 mov     [esp+5Ch+MaxCount], esi
.text:00402AF0                 call    fprintf
.text:00402AF5                 jmp     short loc_402AA9
.text:00402AF7 ; ---------------------------------------------------------------------------
.text:00402AF7
.text:00402AF7 loc_402AF7:                             ; CODE XREF: sub_402290+6A0↑j
.text:00402AF7                 mov     edx, [ebp+14h]
.text:00402AFA                 mov     ebx, edi
.text:00402AFC                 mov     ecx, [esi]
.text:00402AFE                 sub     ebx, edx
.text:00402B00                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402B03                 call    strlen
.text:00402B08                 cmp     ebx, eax
.text:00402B0A                 jz      short loc_402B32
.text:00402B0C                 mov     ebx, [esp+5Ch+var_2C]
.text:00402B10                 test    ebx, ebx
.text:00402B12                 jz      short loc_402B21
.text:00402B14                 mov     [esp+5Ch+var_34], 1
.text:00402B1C                 jmp     loc_402936
.text:00402B21 ; ---------------------------------------------------------------------------
.text:00402B21
.text:00402B21 loc_402B21:                             ; CODE XREF: sub_402290+882↑j
.text:00402B21                 mov     [esp+5Ch+var_2C], esi
.text:00402B25                 mov     ecx, [esp+5Ch+var_3C]
.text:00402B29                 mov     [esp+5Ch+var_38], ecx
.text:00402B2D                 jmp     loc_402936
.text:00402B32 ; ---------------------------------------------------------------------------
.text:00402B32
.text:00402B32 loc_402B32:                             ; CODE XREF: sub_402290+87A↑j
.text:00402B32                 mov     [esp+5Ch+var_2C], esi
.text:00402B36                 mov     eax, [esp+5Ch+var_3C]
.text:00402B3A                 mov     [esp+5Ch+var_30], 1
.text:00402B42                 mov     [esp+5Ch+var_38], eax
.text:00402B46                 jmp     loc_402945
.text:00402B4B ; ---------------------------------------------------------------------------
.text:00402B4B
.text:00402B4B loc_402B4B:                             ; CODE XREF: sub_402290+646↑j
.text:00402B4B                 mov     edx, [ebp+0]
.text:00402B4E                 cmp     edx, [esp+5Ch+arg_0]
.text:00402B52                 jz      short loc_402B69
.text:00402B54                 mov     ebx, [esp+5Ch+arg_4]
.text:00402B58                 lea     esi, [edx+1]
.text:00402B5B                 mov     [ebp+0], esi
.text:00402B5E                 mov     edi, [ebx+edx*4]
.text:00402B61                 mov     [ebp+0Ch], edi
.text:00402B64                 jmp     loc_4028E2
.text:00402B69 ; ---------------------------------------------------------------------------
.text:00402B69
.text:00402B69 loc_402B69:                             ; CODE XREF: sub_402290+8C2↑j
.text:00402B69                 mov     edi, [esp+5Ch+var_14]
.text:00402B6D                 test    edi, edi
.text:00402B6F                 jnz     short loc_402B8C
.text:00402B71
.text:00402B71 loc_402B71:                             ; CODE XREF: sub_402290+92C↓j
.text:00402B71                 mov     [ebp+8], esi
.text:00402B74                 mov     ebp, [esp+5Ch+Str]
.text:00402B78                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402B7C                 jz      short loc_402B88
.text:00402B7E                 mov     bl, 3Fh ; '?'
.text:00402B80
.text:00402B80 loc_402B80:                             ; CODE XREF: sub_402290+8FA↓j
.text:00402B80                 movsx   eax, bl
.text:00402B83                 jmp     loc_4023E7
.text:00402B88 ; ---------------------------------------------------------------------------
.text:00402B88
.text:00402B88 loc_402B88:                             ; CODE XREF: sub_402290+8EC↑j
.text:00402B88                 mov     bl, 3Ah ; ':'
.text:00402B8A                 jmp     short loc_402B80
.text:00402B8C ; ---------------------------------------------------------------------------
.text:00402B8C
.text:00402B8C loc_402B8C:                             ; CODE XREF: sub_402290+8DF↑j
.text:00402B8C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402B93                 call    ds:libintl_gettext
.text:00402B99                 mov     [esp+5Ch+var_50], esi
.text:00402B9D                 mov     edx, [esp+5Ch+arg_4]
.text:00402BA1                 mov     ecx, ds:_iob
.text:00402BA7                 mov     ebx, [edx]
.text:00402BA9                 add     ecx, 40h ; '@'
.text:00402BAC                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402BB0                 mov     [esp+5Ch+MaxCount], ebx
.text:00402BB4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402BB7                 call    fprintf
.text:00402BBC                 jmp     short loc_402B71
.text:00402BBC ; ---------------------------------------------------------------------------
.text:00402BBE                 align 10h
.text:00402BC0
.text:00402BC0 loc_402BC0:                             ; CODE XREF: sub_402290+54C↑j
.text:00402BC0                                         ; sub_402290+555↑j
.text:00402BC0                 mov     eax, [esp+5Ch+var_14]
.text:00402BC4                 test    eax, eax
.text:00402BC6                 jz      short loc_402BFF
.text:00402BC8                 mov     ebx, [ebp+1Ch]
.text:00402BCB                 test    ebx, ebx
.text:00402BCD                 jz      short loc_402C07
.text:00402BCF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00402BD6
.text:00402BD6 loc_402BD6:                             ; CODE XREF: sub_402290+97E↓j
.text:00402BD6                 call    ds:libintl_gettext
.text:00402BDC                 mov     [esp+5Ch+var_50], esi
.text:00402BE0                 mov     ebx, [esp+5Ch+arg_4]
.text:00402BE4                 mov     edx, ds:_iob
.text:00402BEA                 mov     esi, [ebx]
.text:00402BEC                 add     edx, 40h ; '@'
.text:00402BEF                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402BF3                 mov     [esp+5Ch+MaxCount], esi
.text:00402BF7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402BFA                 call    fprintf
.text:00402BFF
.text:00402BFF loc_402BFF:                             ; CODE XREF: sub_402290+936↑j
.text:00402BFF                 mov     [ebp+8], edi
.text:00402C02                 jmp     loc_4025E8
.text:00402C07 ; ---------------------------------------------------------------------------
.text:00402C07
.text:00402C07 loc_402C07:                             ; CODE XREF: sub_402290+93D↑j
.text:00402C07                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:00402C0E                 jmp     short loc_402BD6
.text:00402C10 ; ---------------------------------------------------------------------------
.text:00402C10
.text:00402C10 loc_402C10:                             ; CODE XREF: sub_402290+26E↑j
.text:00402C10                 mov     edi, [esp+5Ch+var_14]
.text:00402C14                 test    edi, edi
.text:00402C16                 jnz     short loc_402C2E
.text:00402C18
.text:00402C18 loc_402C18:                             ; CODE XREF: sub_402290+9D4↓j
.text:00402C18                 mov     edx, [ebp+14h]
.text:00402C1B                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402C1E                 call    strlen
.text:00402C23                 add     [ebp+14h], eax
.text:00402C26                 inc     dword ptr [ebp+0]
.text:00402C29                 jmp     loc_40276E
.text:00402C2E ; ---------------------------------------------------------------------------
.text:00402C2E
.text:00402C2E loc_402C2E:                             ; CODE XREF: sub_402290+986↑j
.text:00402C2E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00402C35                 call    ds:libintl_gettext
.text:00402C3B                 mov     ebx, [ebp+0]
.text:00402C3E                 mov     edi, [esp+5Ch+arg_4]
.text:00402C42                 mov     ecx, [edi+ebx*4]
.text:00402C45                 mov     ebx, ds:_iob
.text:00402C4B                 mov     [esp+5Ch+var_50], ecx
.text:00402C4F                 mov     esi, [edi]
.text:00402C51                 add     ebx, 40h ; '@'
.text:00402C54                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402C58                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:00402C5B                 mov     [esp+5Ch+MaxCount], esi
.text:00402C5F                 call    fprintf
.text:00402C64                 jmp     short loc_402C18
.text:00402C66 ; ---------------------------------------------------------------------------
.text:00402C66
.text:00402C66 loc_402C66:                             ; CODE XREF: sub_402290+246↑j
.text:00402C66                 mov     ecx, [ebp+14h]
.text:00402C69                 mov     ebx, edi
.text:00402C6B                 mov     edx, [esi]
.text:00402C6D                 sub     ebx, ecx
.text:00402C6F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402C72                 call    strlen
.text:00402C77                 cmp     ebx, eax
.text:00402C79                 jz      short loc_402CD1
.text:00402C7B                 mov     ebx, [esp+5Ch+var_18]
.text:00402C7F                 test    ebx, ebx
.text:00402C81                 jz      short loc_402CC0
.text:00402C83                 mov     edx, [esp+5Ch+arg_14]
.text:00402C87                 test    edx, edx
.text:00402C89                 jnz     short loc_402C97
.text:00402C8B                 mov     ecx, [esp+5Ch+var_18]
.text:00402C8F                 mov     ebx, [esi+4]
.text:00402C92                 cmp     [ecx+4], ebx
.text:00402C95                 jz      short loc_402CA4
.text:00402C97
.text:00402C97 loc_402C97:                             ; CODE XREF: sub_402290+9F9↑j
.text:00402C97                                         ; sub_402290+A1A↓j ...
.text:00402C97                 mov     [esp+5Ch+var_20], 1
.text:00402C9F                 jmp     loc_4024DC
.text:00402CA4 ; ---------------------------------------------------------------------------
.text:00402CA4
.text:00402CA4 loc_402CA4:                             ; CODE XREF: sub_402290+A05↑j
.text:00402CA4                 mov     edx, [esi+8]
.text:00402CA7                 cmp     [ecx+8], edx
.text:00402CAA                 jnz     short loc_402C97
.text:00402CAC                 mov     ebx, [esi+0Ch]
.text:00402CAF                 cmp     [ecx+0Ch], ebx
.text:00402CB2                 jnz     short loc_402C97
.text:00402CB4                 jmp     loc_4024DC
.text:00402CB4 ; ---------------------------------------------------------------------------
.text:00402CB9                 align 10h
.text:00402CC0
.text:00402CC0 loc_402CC0:                             ; CODE XREF: sub_402290+9F1↑j
.text:00402CC0                 mov     [esp+5Ch+var_18], esi
.text:00402CC4                 mov     eax, [esp+5Ch+var_28]
.text:00402CC8                 mov     [esp+5Ch+var_24], eax
.text:00402CCC                 jmp     loc_4024DC
.text:00402CD1 ; ---------------------------------------------------------------------------
.text:00402CD1
.text:00402CD1 loc_402CD1:                             ; CODE XREF: sub_402290+9E9↑j
.text:00402CD1                 mov     [esp+5Ch+var_18], esi
.text:00402CD5                 mov     ecx, [esp+5Ch+var_28]
.text:00402CD9                 mov     [esp+5Ch+var_1C], 1
.text:00402CE1                 mov     [esp+5Ch+var_24], ecx
.text:00402CE5                 jmp     loc_4024F0
.text:00402CEA ; ---------------------------------------------------------------------------
.text:00402CEA
.text:00402CEA loc_402CEA:                             ; CODE XREF: sub_402290+1BF↑j
.text:00402CEA                 mov     eax, [esp+5Ch+Str]
.text:00402CEE                 movsx   esi, dl
.text:00402CF1                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402CF5                 mov     [esp+5Ch+Str1], eax ; Str
.text:00402CF8                 call    strchr
.text:00402CFD                 test    eax, eax
.text:00402CFF                 jnz     loc_4027B0
.text:00402D05                 jmp     loc_402455
.text:00402D0A ; ---------------------------------------------------------------------------
.text:00402D0A
.text:00402D0A loc_402D0A:                             ; CODE XREF: sub_402290+17C↑j
.text:00402D0A                 mov     ecx, 1
.text:00402D0F                 jmp     loc_402412
.text:00402D14 ; ---------------------------------------------------------------------------
.text:00402D14
.text:00402D14 loc_402D14:                             ; CODE XREF: sub_402290+D4↑j
.text:00402D14                                         ; sub_402290+130↑j
.text:00402D14                 mov     eax, [ebp+20h]
.text:00402D17                 cmp     eax, [ebp+24h]
.text:00402D1A                 jz      loc_4023F0
.text:00402D20                 mov     [ebp+0], eax
.text:00402D23                 jmp     loc_4023F0
.text:00402D28 ; ---------------------------------------------------------------------------
.text:00402D28
.text:00402D28 loc_402D28:                             ; CODE XREF: sub_402290+FE↑j
.text:00402D28                 mov     [ebp+20h], eax
.text:00402D2B                 jmp     loc_4023B0
.text:00402D30 ; ---------------------------------------------------------------------------
.text:00402D30
.text:00402D30 loc_402D30:                             ; CODE XREF: sub_402290+CA↑j
.text:00402D30                 mov     edx, [ebp+20h]
.text:00402D33                 mov     eax, [ebp+24h]
.text:00402D36                 cmp     edx, eax
.text:00402D38                 jz      short loc_402DB0
.text:00402D3A                 cmp     eax, ebx
.text:00402D3C                 jz      short loc_402D51
.text:00402D3E                 mov     [esp+5Ch+Str2], ebp
.text:00402D42                 mov     ebx, [esp+5Ch+arg_4]
.text:00402D46                 mov     [esp+5Ch+Str1], ebx
.text:00402D49                 call    sub_402F40
.text:00402D4E                 mov     ebx, [ebp+0]
.text:00402D51
.text:00402D51 loc_402D51:                             ; CODE XREF: sub_402290+AAC↑j
.text:00402D51                                         ; sub_402290+B22↓j ...
.text:00402D51                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402D55                 jge     short loc_402DA0
.text:00402D57                 mov     esi, [esp+5Ch+arg_4]
.text:00402D5B                 mov     eax, [esi+ebx*4]
.text:00402D5E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402D61                 jz      short loc_402DA8
.text:00402D63                 lea     esi, [esi+0]
.text:00402D69                 lea     edi, [edi+0]
.text:00402D70
.text:00402D70 loc_402D70:                             ; CODE XREF: sub_402290+AFC↓j
.text:00402D70                                         ; sub_402290+B1C↓j
.text:00402D70                 lea     eax, [ebx+1]
.text:00402D73                 mov     ebx, eax
.text:00402D75                 mov     [ebp+0], eax
.text:00402D78                 cmp     eax, [esp+5Ch+arg_0]
.text:00402D7C                 jge     short loc_402DA0
.text:00402D7E                 mov     edi, [esp+5Ch+arg_4]
.text:00402D82                 mov     edx, [edi+eax*4]
.text:00402D85                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00402D88                 jz      short loc_402D90
.text:00402D8A
.text:00402D8A loc_402D8A:                             ; CODE XREF: sub_402290+B04↓j
.text:00402D8A                 mov     ebx, eax
.text:00402D8C                 jmp     short loc_402D70
.text:00402D8C ; ---------------------------------------------------------------------------
.text:00402D8E                 align 10h
.text:00402D90
.text:00402D90 loc_402D90:                             ; CODE XREF: sub_402290+AF8↑j
.text:00402D90                 cmp     byte ptr [edx+1], 0
.text:00402D94                 jz      short loc_402D8A
.text:00402D96                 lea     esi, [esi+0]
.text:00402D99                 lea     edi, [edi+0]
.text:00402DA0
.text:00402DA0 loc_402DA0:                             ; CODE XREF: sub_402290+AC5↑j
.text:00402DA0                                         ; sub_402290+AEC↑j ...
.text:00402DA0                 mov     [ebp+24h], ebx
.text:00402DA3                 jmp     loc_402360
.text:00402DA8 ; ---------------------------------------------------------------------------
.text:00402DA8
.text:00402DA8 loc_402DA8:                             ; CODE XREF: sub_402290+AD1↑j
.text:00402DA8                 cmp     byte ptr [eax+1], 0
.text:00402DAC                 jz      short loc_402D70
.text:00402DAE                 jmp     short loc_402DA0
.text:00402DB0 ; ---------------------------------------------------------------------------
.text:00402DB0
.text:00402DB0 loc_402DB0:                             ; CODE XREF: sub_402290+AA8↑j
.text:00402DB0                 cmp     edx, ebx
.text:00402DB2                 jz      short loc_402D51
.text:00402DB4                 mov     [ebp+20h], ebx
.text:00402DB7                 jmp     short loc_402D51
.text:00402DB9 ; ---------------------------------------------------------------------------
.text:00402DB9
.text:00402DB9 loc_402DB9:                             ; CODE XREF: sub_402290+88↑j
.text:00402DB9                 mov     dword ptr [ebp+18h], 0
.text:00402DC0                 mov     esi, [esp+5Ch+Str]
.text:00402DC4
.text:00402DC4 loc_402DC4:                             ; CODE XREF: sub_402290+B49↓j
.text:00402DC4                 inc     esi
.text:00402DC5                 jmp     loc_402328
.text:00402DC5 ; ---------------------------------------------------------------------------
.text:00402DCA                 align 10h
.text:00402DD0
.text:00402DD0 loc_402DD0:                             ; CODE XREF: sub_402290+80↑j
.text:00402DD0                 mov     dword ptr [ebp+18h], 2
.text:00402DD7                 mov     esi, ecx
.text:00402DD9                 jmp     short loc_402DC4
.text:00402DD9 ; ---------------------------------------------------------------------------
.text:00402DDB                 align 10h
.text:00402DE0
.text:00402DE0 loc_402DE0:                             ; CODE XREF: sub_402290+69↑j
.text:00402DE0                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00402DE7                 call    getenv
.text:00402DEC                 test    eax, eax
.text:00402DEE                 jz      loc_402304
.text:00402DF4                 jmp     loc_4022FF
.text:00402DF4 ; ---------------------------------------------------------------------------
.text:00402DF9                 align 10h
.text:00402E00
.text:00402E00 loc_402E00:                             ; CODE XREF: sub_402290+3F↑j
.text:00402E00                 mov     dword ptr [ebp+0], 1
.text:00402E07                 mov     ebx, 1
.text:00402E0C                 jmp     loc_4022E0
.text:00402E0C sub_402290      endp
.text:00402E0C
.text:00402E11 ; ---------------------------------------------------------------------------
.text:00402E11                 jmp     short sub_402E20
.text:00402E11 ; ---------------------------------------------------------------------------
.text:00402E13                 align 10h
.text:00402E20
.text:00402E20 ; =============== S U B R O U T I N E =======================================
.text:00402E20
.text:00402E20
.text:00402E20 ; int __cdecl sub_402E20(int, int, char *, int, int, int, int)
.text:00402E20 sub_402E20      proc near               ; CODE XREF: .text:00402E11↑j
.text:00402E20                                         ; sub_403B40+3A↓p ...
.text:00402E20
.text:00402E20 var_2C          = dword ptr -2Ch
.text:00402E20 var_28          = dword ptr -28h
.text:00402E20 Str             = dword ptr -24h
.text:00402E20 var_20          = dword ptr -20h
.text:00402E20 var_1C          = dword ptr -1Ch
.text:00402E20 var_18          = dword ptr -18h
.text:00402E20 var_14          = dword ptr -14h
.text:00402E20 var_10          = dword ptr -10h
.text:00402E20 arg_0           = dword ptr  4
.text:00402E20 arg_4           = dword ptr  8
.text:00402E20 arg_8           = dword ptr  0Ch
.text:00402E20 arg_C           = dword ptr  10h
.text:00402E20 arg_10          = dword ptr  14h
.text:00402E20 arg_14          = dword ptr  18h
.text:00402E20 arg_18          = dword ptr  1Ch
.text:00402E20
.text:00402E20                 sub     esp, 2Ch
.text:00402E23                 mov     edx, dword_406010
.text:00402E29                 mov     [esp+2Ch+var_10], offset dword_407050 ; int
.text:00402E31                 mov     ecx, dword_406014
.text:00402E37                 mov     ds:dword_407050, edx
.text:00402E3D                 mov     edx, [esp+2Ch+arg_18]
.text:00402E41                 mov     ds:dword_407054, ecx
.text:00402E47                 mov     ecx, [esp+2Ch+arg_14]
.text:00402E4B                 mov     [esp+2Ch+var_14], edx ; int
.text:00402E4F                 mov     edx, [esp+2Ch+arg_10]
.text:00402E53                 mov     [esp+2Ch+var_18], ecx ; int
.text:00402E57                 mov     ecx, [esp+2Ch+arg_C]
.text:00402E5B                 mov     [esp+2Ch+var_1C], edx ; int
.text:00402E5F                 mov     edx, [esp+2Ch+arg_8]
.text:00402E63                 mov     [esp+2Ch+var_20], ecx ; int
.text:00402E67                 mov     ecx, [esp+2Ch+arg_4]
.text:00402E6B                 mov     [esp+2Ch+Str], edx ; Str
.text:00402E6F                 mov     edx, [esp+2Ch+arg_0]
.text:00402E73                 mov     [esp+2Ch+var_28], ecx ; int
.text:00402E77                 mov     [esp+2Ch+var_2C], edx ; int
.text:00402E7A                 call    sub_402290
.text:00402E7F                 mov     ecx, ds:dword_407050
.text:00402E85                 mov     dword_406010, ecx
.text:00402E8B                 mov     ecx, ds:dword_40705C
.text:00402E91                 mov     ds:dword_407200, ecx
.text:00402E97                 mov     ecx, ds:dword_407058
.text:00402E9D                 mov     dword_406018, ecx
.text:00402EA3                 add     esp, 2Ch
.text:00402EA6                 retn
.text:00402EA6 sub_402E20      endp
.text:00402EA6
.text:00402EA6 ; ---------------------------------------------------------------------------
.text:00402EA7                 align 10h
.text:00402EB0                 sub     esp, 2Ch
.text:00402EB3                 mov     edx, dword_406010
.text:00402EB9                 mov     dword ptr [esp+1Ch], offset dword_407050
.text:00402EC1                 mov     ecx, dword_406014
.text:00402EC7                 mov     dword ptr [esp+18h], 1
.text:00402ECF                 mov     ds:dword_407050, edx
.text:00402ED5                 mov     edx, [esp+38h]
.text:00402ED9                 mov     ds:dword_407054, ecx
.text:00402EDF                 mov     ecx, [esp+34h]
.text:00402EE3                 mov     [esp+8], edx
.text:00402EE7                 mov     edx, [esp+30h]
.text:00402EEB                 mov     [esp+4], ecx
.text:00402EEF                 mov     dword ptr [esp+14h], 0
.text:00402EF7                 mov     dword ptr [esp+10h], 0
.text:00402EFF                 mov     dword ptr [esp+0Ch], 0
.text:00402F07                 mov     [esp], edx
.text:00402F0A                 call    sub_402290
.text:00402F0F                 mov     ecx, ds:dword_407050
.text:00402F15                 mov     dword_406010, ecx
.text:00402F1B                 mov     ecx, ds:dword_40705C
.text:00402F21                 mov     ds:dword_407200, ecx
.text:00402F27                 mov     ecx, ds:dword_407058
.text:00402F2D                 mov     dword_406018, ecx
.text:00402F33                 add     esp, 2Ch
.text:00402F36                 retn
.text:00402F36 ; ---------------------------------------------------------------------------
.text:00402F37                 align 10h
.text:00402F40
.text:00402F40 ; =============== S U B R O U T I N E =======================================
.text:00402F40
.text:00402F40
.text:00402F40 sub_402F40      proc near               ; CODE XREF: sub_402290+113↑p
.text:00402F40                                         ; sub_402290+AB9↑p
.text:00402F40
.text:00402F40 var_2C          = dword ptr -2Ch
.text:00402F40 var_28          = dword ptr -28h
.text:00402F40 var_24          = dword ptr -24h
.text:00402F40 var_20          = dword ptr -20h
.text:00402F40 var_1C          = dword ptr -1Ch
.text:00402F40 var_18          = dword ptr -18h
.text:00402F40 var_14          = dword ptr -14h
.text:00402F40 arg_0           = dword ptr  4
.text:00402F40 arg_4           = dword ptr  8
.text:00402F40
.text:00402F40                 push    ebp
.text:00402F41                 push    edi
.text:00402F42                 push    esi
.text:00402F43                 push    ebx
.text:00402F44                 sub     esp, 1Ch
.text:00402F47                 mov     ecx, [esp+2Ch+arg_4]
.text:00402F4B                 mov     eax, [esp+2Ch+arg_4]
.text:00402F4F                 mov     ebx, [esp+2Ch+arg_4]
.text:00402F53                 mov     edx, [ecx+20h]
.text:00402F56                 mov     edi, [esp+2Ch+arg_0]
.text:00402F5A                 mov     ecx, [ebx]
.text:00402F5C                 mov     [esp+2Ch+var_2C], edx
.text:00402F5F                 mov     [esp+2Ch+var_14], edx
.text:00402F63                 mov     edx, [eax+24h]
.text:00402F66                 mov     [esp+2Ch+var_28], ecx
.text:00402F6A                 mov     [esp+2Ch+var_1C], ecx
.text:00402F6E                 cmp     ecx, edx
.text:00402F70                 mov     [esp+2Ch+var_18], edx
.text:00402F74                 jle     short loc_402FF0
.text:00402F76                 mov     esi, [esp+2Ch+var_2C]
.text:00402F79                 cmp     edx, esi
.text:00402F7B                 jle     short loc_402FF0
.text:00402F7D                 lea     esi, [esi+0]
.text:00402F80
.text:00402F80 loc_402F80:                             ; CODE XREF: sub_402F40+A1↓j
.text:00402F80                 mov     ebx, [esp+2Ch+var_1C]
.text:00402F84                 mov     edx, [esp+2Ch+var_18]
.text:00402F88                 mov     ebp, [esp+2Ch+var_18]
.text:00402F8C                 mov     eax, [esp+2Ch+var_14]
.text:00402F90                 sub     ebx, edx
.text:00402F92                 mov     [esp+2Ch+var_20], ebx
.text:00402F96                 sub     ebp, eax
.text:00402F98                 cmp     ebx, ebp
.text:00402F9A                 jle     short loc_403015
.text:00402F9C                 xor     esi, esi
.text:00402F9E                 cmp     esi, ebp
.text:00402FA0                 jge     short loc_402FCD
.text:00402FA2                 mov     ecx, [esp+2Ch+var_1C]
.text:00402FA6                 sub     ecx, ebp
.text:00402FA8                 mov     [esp+2Ch+var_24], ecx
.text:00402FAC                 lea     esi, [esi+0]
.text:00402FB0
.text:00402FB0 loc_402FB0:                             ; CODE XREF: sub_402F40+8B↓j
.text:00402FB0                 mov     ecx, [esp+2Ch+var_14]
.text:00402FB4                 mov     edx, [esp+2Ch+var_24]
.text:00402FB8                 add     ecx, esi
.text:00402FBA                 add     edx, esi
.text:00402FBC                 mov     ebx, [edi+ecx*4]
.text:00402FBF                 mov     eax, [edi+edx*4]
.text:00402FC2                 inc     esi
.text:00402FC3                 cmp     esi, ebp
.text:00402FC5                 mov     [edi+ecx*4], eax
.text:00402FC8                 mov     [edi+edx*4], ebx
.text:00402FCB                 jl      short loc_402FB0
.text:00402FCD
.text:00402FCD loc_402FCD:                             ; CODE XREF: sub_402F40+60↑j
.text:00402FCD                 sub     [esp+2Ch+var_1C], ebp
.text:00402FD1
.text:00402FD1 loc_402FD1:                             ; CODE XREF: sub_402F40+107↓j
.text:00402FD1                 mov     eax, [esp+2Ch+var_18]
.text:00402FD5                 cmp     [esp+2Ch+var_1C], eax
.text:00402FD9                 jle     short loc_402FF0
.text:00402FDB                 mov     ebp, [esp+2Ch+var_14]
.text:00402FDF                 cmp     eax, ebp
.text:00402FE1                 jg      short loc_402F80
.text:00402FE3                 lea     esi, [esi+0]
.text:00402FE9                 lea     edi, [edi+0]
.text:00402FF0
.text:00402FF0 loc_402FF0:                             ; CODE XREF: sub_402F40+34↑j
.text:00402FF0                                         ; sub_402F40+3B↑j ...
.text:00402FF0                 mov     esi, [esp+2Ch+var_28]
.text:00402FF4                 mov     ecx, [esp+2Ch+var_18]
.text:00402FF8                 mov     eax, [esp+2Ch+var_2C]
.text:00402FFB                 mov     edi, [esp+2Ch+arg_4]
.text:00402FFF                 mov     edx, [esp+2Ch+var_28]
.text:00403003                 sub     esi, ecx
.text:00403005                 add     esi, eax
.text:00403007                 mov     [edi+20h], esi
.text:0040300A                 mov     [edi+24h], edx
.text:0040300D                 add     esp, 1Ch
.text:00403010                 pop     ebx
.text:00403011                 pop     esi
.text:00403012                 pop     edi
.text:00403013                 pop     ebp
.text:00403014                 retn
.text:00403015 ; ---------------------------------------------------------------------------
.text:00403015
.text:00403015 loc_403015:                             ; CODE XREF: sub_402F40+5A↑j
.text:00403015                 xor     esi, esi
.text:00403017                 cmp     esi, [esp+2Ch+var_20]
.text:0040301B                 jge     short loc_40303F
.text:0040301D                 lea     esi, [esi+0]
.text:00403020
.text:00403020 loc_403020:                             ; CODE XREF: sub_402F40+FD↓j
.text:00403020                 mov     ebx, [esp+2Ch+var_14]
.text:00403024                 mov     ebp, [esp+2Ch+var_18]
.text:00403028                 add     ebx, esi
.text:0040302A                 add     ebp, esi
.text:0040302C                 mov     edx, [edi+ebx*4]
.text:0040302F                 inc     esi
.text:00403030                 cmp     esi, [esp+2Ch+var_20]
.text:00403034                 mov     ecx, [edi+ebp*4]
.text:00403037                 mov     [edi+ebx*4], ecx
.text:0040303A                 mov     [edi+ebp*4], edx
.text:0040303D                 jl      short loc_403020
.text:0040303F
.text:0040303F loc_40303F:                             ; CODE XREF: sub_402F40+DB↑j
.text:0040303F                 mov     esi, [esp+2Ch+var_20]
.text:00403043                 add     [esp+2Ch+var_14], esi
.text:00403047                 jmp     short loc_402FD1
.text:00403047 sub_402F40      endp
.text:00403047
.text:00403047 ; ---------------------------------------------------------------------------
.text:00403049                 align 20h
.text:00403060 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00403060                                         ; DATA XREF: .data:off_406020↓o
.text:00403092 ; const char Format[]
.text:00403092 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_403350+50↓o
.text:0040309E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040309E                                         ; DATA XREF: sub_403350:loc_4033F1↓o
.text:004030AE                 align 20h
.text:004030C0 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:004030C0                                         ; DATA XREF: sub_403350+100↓o
.text:004030C0                 db 'ere is NO',0Ah
.text:004030C0                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:004030C0                 db 'R PURPOSE.',0Ah,0
.text:00403158 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00403158                                         ; DATA XREF: sub_403350:loc_403491↓o
.text:0040316F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040316F                                         ; DATA XREF: sub_403350:loc_40349D↓o
.text:0040318B                 align 20h
.text:004031A0 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:004031A0                                         ; DATA XREF: sub_403350:loc_4034A9↓o
.text:004031A0                 db 'and %s.',0Ah,0
.text:004031C0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:004031C0                                         ; DATA XREF: sub_403350:loc_4034B5↓o
.text:004031C0                 db '%s, and %s.',0Ah,0
.text:004031E4                 align 20h
.text:00403200 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00403200                                         ; DATA XREF: sub_403350:loc_4034C1↓o
.text:00403200                 db '%s, %s, and %s.',0Ah,0
.text:00403228                 align 20h
.text:00403240 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00403240                                         ; DATA XREF: sub_403350:loc_4034CD↓o
.text:00403240                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040326C                 align 20h
.text:00403280 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00403280                                         ; DATA XREF: sub_403350:loc_4034D9↓o
.text:00403280                 db '%s, %s, %s, %s,',0Ah
.text:00403280                 db 'and %s.',0Ah,0
.text:004032B0                 align 20h
.text:004032C0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:004032C0                                         ; DATA XREF: sub_403350:loc_4034E5↓o
.text:004032C0                 db '%s, %s, %s, %s,',0Ah
.text:004032C0                 db '%s, and %s.',0Ah,0
.text:004032F4                 align 10h
.text:00403300 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00403300                                         ; DATA XREF: sub_403350:def_4033BD↓o
.text:00403300                 db '%s, %s, %s, %s,',0Ah
.text:00403300                 db '%s, %s, and others.',0Ah,0
.text:0040333C ; const char aSS[]
.text:0040333C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_403350+1B5↓o
.text:00403343                 align 10h
.text:00403350
.text:00403350 ; =============== S U B R O U T I N E =======================================
.text:00403350
.text:00403350
.text:00403350 ; int __cdecl sub_403350(FILE *, FILE *, int, int, va_list)
.text:00403350 sub_403350      proc near               ; CODE XREF: sub_403520+2A↓p
.text:00403350
.text:00403350 Stream          = dword ptr -2Ch
.text:00403350 Format          = dword ptr -28h
.text:00403350 ArgList         = dword ptr -24h
.text:00403350 var_20          = dword ptr -20h
.text:00403350 var_1C          = dword ptr -1Ch
.text:00403350 var_14          = dword ptr -14h
.text:00403350 arg_0           = dword ptr  4
.text:00403350 arg_4           = dword ptr  8
.text:00403350 arg_8           = dword ptr  0Ch
.text:00403350 arg_C           = dword ptr  10h
.text:00403350 arg_10          = dword ptr  14h
.text:00403350
.text:00403350                 push    ebp
.text:00403351                 push    edi
.text:00403352                 push    esi
.text:00403353                 push    ebx
.text:00403354                 sub     esp, 1Ch
.text:00403357                 xor     ebx, ebx
.text:00403359                 mov     edi, [esp+2Ch+arg_10]
.text:0040335D                 mov     edx, [esp+2Ch+arg_8]
.text:00403361                 mov     esi, [esp+2Ch+arg_0]
.text:00403365                 mov     eax, [edi]
.text:00403367                 mov     ecx, [esp+2Ch+arg_4]
.text:0040336B                 mov     [esp+2Ch+var_14], edx
.text:0040336F                 mov     ebp, [esp+2Ch+arg_C]
.text:00403373                 lea     edx, [edi+4]
.text:00403376                 test    eax, eax
.text:00403378                 jz      short loc_40338C
.text:0040337A                 lea     esi, [esi+0]
.text:00403380
.text:00403380 loc_403380:                             ; CODE XREF: sub_403350+3A↓j
.text:00403380                 mov     eax, edx
.text:00403382                 inc     ebx
.text:00403383                 mov     eax, [eax]
.text:00403385                 add     edx, 4
.text:00403388                 test    eax, eax
.text:0040338A                 jnz     short loc_403380
.text:0040338C
.text:0040338C loc_40338C:                             ; CODE XREF: sub_403350+28↑j
.text:0040338C                 test    ecx, ecx
.text:0040338E                 jz      loc_4034FD
.text:00403394                 mov     [esp+2Ch+var_1C], ebp
.text:00403398                 mov     edx, [esp+2Ch+var_14]
.text:0040339C                 mov     [esp+2Ch+ArgList], ecx
.text:004033A0                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:004033A8                 mov     [esp+2Ch+var_20], edx
.text:004033AC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004033AF                 call    fprintf
.text:004033B4
.text:004033B4 loc_4033B4:                             ; CODE XREF: sub_403350+1C9↓j
.text:004033B4                 cmp     ebx, 9          ; switch 10 cases
.text:004033B7                 ja      def_4033BD      ; jumptable 004033BD default case
.text:004033BD                 jmp     ds:jpt_4033BD[ebx*4] ; switch jump
.text:004033BD ; ---------------------------------------------------------------------------
.text:004033C4 jpt_4033BD      dd offset loc_4033EC    ; DATA XREF: sub_403350+6D↑r
.text:004033C4                 dd offset loc_4033F1    ; jump table for switch statement
.text:004033C4                 dd offset loc_403491
.text:004033C4                 dd offset loc_40349D
.text:004033C4                 dd offset loc_4034A9
.text:004033C4                 dd offset loc_4034B5
.text:004033C4                 dd offset loc_4034C1
.text:004033C4                 dd offset loc_4034CD
.text:004033C4                 dd offset loc_4034D9
.text:004033C4                 dd offset loc_4034E5
.text:004033EC ; ---------------------------------------------------------------------------
.text:004033EC
.text:004033EC loc_4033EC:                             ; CODE XREF: sub_403350+6D↑j
.text:004033EC                                         ; DATA XREF: sub_403350:jpt_4033BD↑o
.text:004033EC                 call    abort           ; jumptable 004033BD case 0
.text:004033F1 ; ---------------------------------------------------------------------------
.text:004033F1
.text:004033F1 loc_4033F1:                             ; CODE XREF: sub_403350+6D↑j
.text:004033F1                                         ; DATA XREF: sub_403350:jpt_4033BD↑o
.text:004033F1                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 004033BD case 1
.text:004033F8                 nop
.text:004033F9                 lea     esi, [esi+0]
.text:00403400
.text:00403400 loc_403400:                             ; CODE XREF: sub_403350+148↓j
.text:00403400                                         ; sub_403350+154↓j ...
.text:00403400                 call    ds:libintl_gettext
.text:00403406                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040340A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040340D                 mov     [esp+2Ch+Format], eax ; Format
.text:00403411                 call    vfprintf
.text:00403416                 mov     ebx, [esi+4]
.text:00403419                 dec     ebx
.text:0040341A                 test    ebx, ebx
.text:0040341C                 mov     [esi+4], ebx
.text:0040341F                 js      short loc_40347F
.text:00403421                 mov     edi, [esi]
.text:00403423                 mov     byte ptr [edi], 0Ah
.text:00403426                 inc     dword ptr [esi]
.text:00403428
.text:00403428 loc_403428:                             ; CODE XREF: sub_403350+13F↓j
.text:00403428                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040342C                 mov     edx, off_406020 ; "Copyright (C) 2005 Free Software Founda"...
.text:00403432                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00403435                 call    fputs
.text:0040343A                 mov     ebp, [esi+4]
.text:0040343D                 dec     ebp
.text:0040343E                 test    ebp, ebp
.text:00403440                 mov     [esi+4], ebp
.text:00403443                 js      short loc_40346D
.text:00403445                 mov     ecx, [esi]
.text:00403447                 mov     byte ptr [ecx], 0Ah
.text:0040344A                 inc     dword ptr [esi]
.text:0040344C
.text:0040344C loc_40344C:                             ; CODE XREF: sub_403350+12D↓j
.text:0040344C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00403450                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00403457                 call    ds:libintl_gettext
.text:0040345D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00403461                 add     esp, 1Ch
.text:00403464                 pop     ebx
.text:00403465                 pop     esi
.text:00403466                 pop     edi
.text:00403467                 pop     ebp
.text:00403468                 jmp     fputs
.text:0040346D ; ---------------------------------------------------------------------------
.text:0040346D
.text:0040346D loc_40346D:                             ; CODE XREF: sub_403350+F3↑j
.text:0040346D                 mov     [esp+2Ch+Format], esi ; File
.text:00403471                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00403478                 call    _flsbuf
.text:0040347D                 jmp     short loc_40344C
.text:0040347F ; ---------------------------------------------------------------------------
.text:0040347F
.text:0040347F loc_40347F:                             ; CODE XREF: sub_403350+CF↑j
.text:0040347F                 mov     [esp+2Ch+Format], esi ; File
.text:00403483                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040348A                 call    _flsbuf
.text:0040348F                 jmp     short loc_403428
.text:00403491 ; ---------------------------------------------------------------------------
.text:00403491
.text:00403491 loc_403491:                             ; CODE XREF: sub_403350+6D↑j
.text:00403491                                         ; DATA XREF: sub_403350:jpt_4033BD↑o
.text:00403491                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 004033BD case 2
.text:00403498                 jmp     loc_403400
.text:0040349D ; ---------------------------------------------------------------------------
.text:0040349D
.text:0040349D loc_40349D:                             ; CODE XREF: sub_403350+6D↑j
.text:0040349D                                         ; DATA XREF: sub_403350:jpt_4033BD↑o
.text:0040349D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 004033BD case 3
.text:004034A4                 jmp     loc_403400
.text:004034A9 ; ---------------------------------------------------------------------------
.text:004034A9
.text:004034A9 loc_4034A9:                             ; CODE XREF: sub_403350+6D↑j
.text:004034A9                                         ; DATA XREF: sub_403350:jpt_4033BD↑o
.text:004034A9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 004033BD case 4
.text:004034B0                 jmp     loc_403400
.text:004034B5 ; ---------------------------------------------------------------------------
.text:004034B5
.text:004034B5 loc_4034B5:                             ; CODE XREF: sub_403350+6D↑j
.text:004034B5                                         ; DATA XREF: sub_403350:jpt_4033BD↑o
.text:004034B5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 004033BD case 5
.text:004034BC                 jmp     loc_403400
.text:004034C1 ; ---------------------------------------------------------------------------
.text:004034C1
.text:004034C1 loc_4034C1:                             ; CODE XREF: sub_403350+6D↑j
.text:004034C1                                         ; DATA XREF: sub_403350:jpt_4033BD↑o
.text:004034C1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 004033BD case 6
.text:004034C8                 jmp     loc_403400
.text:004034CD ; ---------------------------------------------------------------------------
.text:004034CD
.text:004034CD loc_4034CD:                             ; CODE XREF: sub_403350+6D↑j
.text:004034CD                                         ; DATA XREF: sub_403350:jpt_4033BD↑o
.text:004034CD                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 004033BD case 7
.text:004034D4                 jmp     loc_403400
.text:004034D9 ; ---------------------------------------------------------------------------
.text:004034D9
.text:004034D9 loc_4034D9:                             ; CODE XREF: sub_403350+6D↑j
.text:004034D9                                         ; DATA XREF: sub_403350:jpt_4033BD↑o
.text:004034D9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 004033BD case 8
.text:004034E0                 jmp     loc_403400
.text:004034E5 ; ---------------------------------------------------------------------------
.text:004034E5
.text:004034E5 loc_4034E5:                             ; CODE XREF: sub_403350+6D↑j
.text:004034E5                                         ; DATA XREF: sub_403350:jpt_4033BD↑o
.text:004034E5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 004033BD case 9
.text:004034EC                 jmp     loc_403400
.text:004034F1 ; ---------------------------------------------------------------------------
.text:004034F1
.text:004034F1 def_4033BD:                             ; CODE XREF: sub_403350+67↑j
.text:004034F1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 004033BD default case
.text:004034F8                 jmp     loc_403400
.text:004034FD ; ---------------------------------------------------------------------------
.text:004034FD
.text:004034FD loc_4034FD:                             ; CODE XREF: sub_403350+3E↑j
.text:004034FD                 mov     [esp+2Ch+var_20], ebp
.text:00403501                 mov     ecx, [esp+2Ch+var_14]
.text:00403505                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:0040350D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403510                 mov     [esp+2Ch+ArgList], ecx
.text:00403514                 call    fprintf
.text:00403519                 jmp     loc_4033B4
.text:00403519 sub_403350      endp
.text:00403519
.text:00403519 ; ---------------------------------------------------------------------------
.text:0040351E                 align 10h
.text:00403520
.text:00403520 ; =============== S U B R O U T I N E =======================================
.text:00403520
.text:00403520
.text:00403520 ; int __cdecl sub_403520(FILE *, FILE *, int, int, char)
.text:00403520 sub_403520      proc near               ; CODE XREF: sub_401670+2F6↑p
.text:00403520
.text:00403520 var_1C          = dword ptr -1Ch
.text:00403520 var_18          = dword ptr -18h
.text:00403520 var_14          = dword ptr -14h
.text:00403520 var_10          = dword ptr -10h
.text:00403520 var_C           = dword ptr -0Ch
.text:00403520 arg_0           = dword ptr  4
.text:00403520 arg_4           = dword ptr  8
.text:00403520 arg_8           = dword ptr  0Ch
.text:00403520 arg_C           = dword ptr  10h
.text:00403520 arg_10          = byte ptr  14h
.text:00403520
.text:00403520                 sub     esp, 1Ch
.text:00403523                 mov     edx, [esp+1Ch+arg_C]
.text:00403527                 lea     ecx, [esp+1Ch+arg_10]
.text:0040352B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040352F                 mov     ecx, [esp+1Ch+arg_8]
.text:00403533                 mov     [esp+1Ch+var_10], edx ; int
.text:00403537                 mov     edx, [esp+1Ch+arg_4]
.text:0040353B                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040353F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00403543                 mov     edx, [esp+1Ch+arg_0]
.text:00403547                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:0040354A                 call    sub_403350
.text:0040354F                 add     esp, 1Ch
.text:00403552                 retn
.text:00403552 sub_403520      endp
.text:00403552
.text:00403552 ; ---------------------------------------------------------------------------
.text:00403553                 align 10h
.text:00403560 aCoreutils530Sr db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:00403560                                         ; DATA XREF: sub_4035D0+544↓o
.text:00403588                 align 20h
.text:004035A0 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.text:004035A0                                         ; DATA XREF: sub_4035D0+54C↓o
.text:004035C6                 align 10h
.text:004035D0
.text:004035D0 ; =============== S U B R O U T I N E =======================================
.text:004035D0
.text:004035D0
.text:004035D0 ; int __cdecl sub_4035D0(int, int, int, int, char *Str)
.text:004035D0 sub_4035D0      proc near               ; CODE XREF: sub_401670+12B↑p
.text:004035D0
.text:004035D0 C               = dword ptr -3Ch
.text:004035D0 Type            = dword ptr -38h
.text:004035D0 Radix           = dword ptr -34h
.text:004035D0 var_28          = dword ptr -28h
.text:004035D0 var_24          = dword ptr -24h
.text:004035D0 var_1D          = byte ptr -1Dh
.text:004035D0 var_1C          = dword ptr -1Ch
.text:004035D0 var_18          = dword ptr -18h
.text:004035D0 var_14          = byte ptr -14h
.text:004035D0 arg_0           = dword ptr  4
.text:004035D0 arg_4           = dword ptr  8
.text:004035D0 arg_8           = dword ptr  0Ch
.text:004035D0 arg_C           = dword ptr  10h
.text:004035D0 Str             = dword ptr  14h
.text:004035D0
.text:004035D0                 push    ebp
.text:004035D1                 push    edi
.text:004035D2                 push    esi
.text:004035D3                 push    ebx
.text:004035D4                 sub     esp, 2Ch
.text:004035D7                 mov     ebp, [esp+3Ch+arg_8]
.text:004035DB                 mov     [esp+3Ch+var_1C], 0
.text:004035E3                 mov     esi, [esp+3Ch+arg_0]
.text:004035E7                 cmp     ebp, 24h ; '$'
.text:004035EA                 ja      loc_403B0C
.text:004035F0                 mov     edi, [esp+3Ch+arg_4]
.text:004035F4                 test    edi, edi
.text:004035F6                 jz      loc_403B03
.text:004035FC
.text:004035FC loc_4035FC:                             ; CODE XREF: sub_4035D0+537↓j
.text:004035FC                 movzx   edx, byte ptr [esi]
.text:004035FF                 mov     ebx, esi
.text:00403601                 mov     [esp+3Ch+var_1D], dl
.text:00403605                 lea     esi, [esi+0]
.text:00403609                 lea     edi, [edi+0]
.text:00403610
.text:00403610 loc_403610:                             ; CODE XREF: sub_4035D0+70↓j
.text:00403610                 movzx   edx, [esp+3Ch+var_1D]
.text:00403615                 mov     ecx, ds:__mb_cur_max
.text:0040361B                 cmp     dword ptr [ecx], 1
.text:0040361E                 jz      loc_403AF0
.text:00403624                 mov     [esp+3Ch+Type], 8 ; Type
.text:0040362C                 mov     [esp+3Ch+C], edx ; C
.text:0040362F                 call    _isctype
.text:00403634
.text:00403634 loc_403634:                             ; CODE XREF: sub_4035D0+52E↓j
.text:00403634                 test    eax, eax
.text:00403636                 jz      short loc_403642
.text:00403638                 inc     ebx
.text:00403639                 movzx   eax, byte ptr [ebx]
.text:0040363C                 mov     [esp+3Ch+var_1D], al
.text:00403640                 jmp     short loc_403610
.text:00403642 ; ---------------------------------------------------------------------------
.text:00403642
.text:00403642 loc_403642:                             ; CODE XREF: sub_4035D0+66↑j
.text:00403642                 cmp     [esp+3Ch+var_1D], 2Dh ; '-'
.text:00403647                 mov     eax, 4
.text:0040364C                 jz      short loc_4036A5
.text:0040364E                 call    _errno
.text:00403653                 mov     dword ptr [eax], 0
.text:00403659                 mov     [esp+3Ch+Radix], ebp ; Radix
.text:0040365D                 mov     [esp+3Ch+Type], edi ; EndPtr
.text:00403661                 mov     [esp+3Ch+C], esi ; String
.text:00403664                 call    strtoul
.text:00403669                 mov     [esp+3Ch+var_18], eax
.text:0040366D                 mov     eax, [edi]
.text:0040366F                 cmp     eax, esi
.text:00403671                 jz      loc_403ABC
.text:00403677                 call    _errno
.text:0040367C                 mov     ebp, [eax]
.text:0040367E                 test    ebp, ebp
.text:00403680                 jnz     loc_403A9B
.text:00403686
.text:00403686 loc_403686:                             ; CODE XREF: sub_4035D0+4DD↓j
.text:00403686                                         ; sub_4035D0+51A↓j
.text:00403686                 mov     eax, [esp+3Ch+Str]
.text:0040368A                 test    eax, eax
.text:0040368C                 jz      short loc_403697
.text:0040368E                 mov     ecx, [edi]
.text:00403690                 movzx   eax, byte ptr [ecx]
.text:00403693                 test    al, al
.text:00403695                 jnz     short loc_4036AD
.text:00403697
.text:00403697 loc_403697:                             ; CODE XREF: sub_4035D0+BC↑j
.text:00403697                                         ; sub_4035D0+26C↓j ...
.text:00403697                 mov     edx, [esp+3Ch+var_18]
.text:0040369B                 mov     esi, [esp+3Ch+arg_C]
.text:0040369F                 mov     eax, [esp+3Ch+var_1C]
.text:004036A3                 mov     [esi], edx
.text:004036A5
.text:004036A5 loc_4036A5:                             ; CODE XREF: sub_4035D0+7C↑j
.text:004036A5                                         ; sub_4035D0+112↓j ...
.text:004036A5                 add     esp, 2Ch
.text:004036A8                 pop     ebx
.text:004036A9                 pop     esi
.text:004036AA                 pop     edi
.text:004036AB                 pop     ebp
.text:004036AC                 retn
.text:004036AD ; ---------------------------------------------------------------------------
.text:004036AD
.text:004036AD loc_4036AD:                             ; CODE XREF: sub_4035D0+C5↑j
.text:004036AD                 mov     [esp+3Ch+var_24], 1
.text:004036B5                 mov     edx, [esp+3Ch+Str]
.text:004036B9                 movsx   esi, al
.text:004036BC                 mov     [esp+3Ch+Type], esi ; Val
.text:004036C0                 mov     ebx, 400h
.text:004036C5                 mov     [esp+3Ch+C], edx ; Str
.text:004036C8                 call    strchr
.text:004036CD                 test    eax, eax
.text:004036CF                 jnz     short loc_4036E4
.text:004036D1
.text:004036D1 def_403734:                             ; CODE XREF: sub_4035D0+162↓j
.text:004036D1                                         ; sub_4035D0+164↓j
.text:004036D1                                         ; DATA XREF: ...
.text:004036D1                 mov     eax, [esp+3Ch+var_1C] ; jumptable 00403734 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:004036D5                 mov     ebx, [esp+3Ch+var_18]
.text:004036D9                 mov     edi, [esp+3Ch+arg_C]
.text:004036DD                 or      eax, 2
.text:004036E0                 mov     [edi], ebx
.text:004036E2                 jmp     short loc_4036A5
.text:004036E4 ; ---------------------------------------------------------------------------
.text:004036E4
.text:004036E4 loc_4036E4:                             ; CODE XREF: sub_4035D0+FF↑j
.text:004036E4                 mov     [esp+3Ch+Type], 30h ; '0' ; Val
.text:004036EC                 mov     ebp, [esp+3Ch+Str]
.text:004036F0                 mov     [esp+3Ch+C], ebp ; Str
.text:004036F3                 call    strchr
.text:004036F8                 test    eax, eax
.text:004036FA                 jz      loc_403A90
.text:00403700                 mov     ecx, [edi]
.text:00403702                 mov     [esp+3Ch+var_28], ecx
.text:00403706                 movsx   eax, byte ptr [ecx+1]
.text:0040370A                 cmp     eax, 44h ; 'D'
.text:0040370D                 jz      loc_403A59
.text:00403713                 cmp     eax, 44h ; 'D'
.text:00403716                 jg      loc_403A6B
.text:0040371C                 cmp     eax, 42h ; 'B'
.text:0040371F                 jz      loc_403A59
.text:00403725
.text:00403725 loc_403725:                             ; CODE XREF: sub_4035D0+496↓j
.text:00403725                                         ; sub_4035D0+49E↓j ...
.text:00403725                 mov     esi, [esp+3Ch+var_28]
.text:00403729                 movsx   eax, byte ptr [esi]
.text:0040372C                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:0040372F                 cmp     eax, 35h
.text:00403732                 ja      short def_403734 ; jumptable 00403734 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00403734                 jmp     ds:jpt_403734[eax*4] ; switch jump
.text:00403734 ; ---------------------------------------------------------------------------
.text:0040373B                 align 4
.text:0040373C jpt_403734      dd offset loc_40385B, offset def_403734, offset def_403734
.text:0040373C                                         ; DATA XREF: sub_4035D0+164↑r
.text:0040373C                 dd offset loc_40386B, offset def_403734, offset loc_40395C ; jump table for switch statement
.text:0040373C                 dd offset def_403734, offset def_403734, offset def_403734
.text:0040373C                 dd offset loc_403999, offset def_403734, offset loc_4039CB
.text:0040373C                 dd offset def_403734, offset def_403734, offset loc_4038A5
.text:0040373C                 dd offset def_403734, offset def_403734, offset def_403734
.text:0040373C                 dd offset loc_403A09, offset def_403734, offset def_403734
.text:0040373C                 dd offset def_403734, offset def_403734, offset loc_4038E2
.text:0040373C                 dd offset loc_40391F, offset def_403734, offset def_403734
.text:0040373C                 dd offset def_403734, offset def_403734, offset def_403734
.text:0040373C                 dd offset def_403734, offset def_403734, offset loc_403814
.text:0040373C                 dd offset loc_403826, offset def_403734, offset def_403734
.text:0040373C                 dd offset def_403734, offset loc_40395C, offset def_403734
.text:0040373C                 dd offset def_403734, offset def_403734, offset loc_403999
.text:0040373C                 dd offset def_403734, offset loc_4039CB, offset def_403734
.text:0040373C                 dd offset def_403734, offset def_403734, offset def_403734
.text:0040373C                 dd offset def_403734, offset def_403734, offset loc_403A09
.text:0040373C                 dd offset def_403734, offset def_403734, offset loc_403A46
.text:00403814 ; ---------------------------------------------------------------------------
.text:00403814
.text:00403814 loc_403814:                             ; CODE XREF: sub_4035D0+164↑j
.text:00403814                                         ; DATA XREF: sub_4035D0:jpt_403734↑o
.text:00403814                 mov     eax, [esp+3Ch+var_18] ; jumptable 00403734 case 98
.text:00403818                 cmp     eax, 7FFFFFh
.text:0040381D                 ja      short loc_40384C
.text:0040381F                 shl     eax, 9
.text:00403822
.text:00403822 loc_403822:                             ; CODE XREF: sub_4035D0+299↓j
.text:00403822                                         ; sub_4035D0+484↓j
.text:00403822                 mov     [esp+3Ch+var_18], eax
.text:00403826
.text:00403826 loc_403826:                             ; CODE XREF: sub_4035D0+164↑j
.text:00403826                                         ; DATA XREF: sub_4035D0:jpt_403734↑o
.text:00403826                 xor     eax, eax        ; jumptable 00403734 case 99
.text:00403828
.text:00403828 loc_403828:                             ; CODE XREF: sub_4035D0+289↓j
.text:00403828                                         ; sub_4035D0+2CA↓j ...
.text:00403828                 or      [esp+3Ch+var_1C], eax
.text:0040382C                 mov     ebp, [esp+3Ch+var_28]
.text:00403830                 mov     ecx, [esp+3Ch+var_24]
.text:00403834                 add     ebp, ecx
.text:00403836                 mov     [edi], ebp
.text:00403838                 cmp     byte ptr [ebp+0], 0
.text:0040383C                 jz      loc_403697
.text:00403842                 or      [esp+3Ch+var_1C], 2
.text:00403847                 jmp     loc_403697
.text:0040384C ; ---------------------------------------------------------------------------
.text:0040384C
.text:0040384C loc_40384C:                             ; CODE XREF: sub_4035D0+24D↑j
.text:0040384C                                         ; sub_4035D0+294↓j ...
.text:0040384C                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:00403854                 mov     eax, 1
.text:00403859                 jmp     short loc_403828
.text:0040385B ; ---------------------------------------------------------------------------
.text:0040385B
.text:0040385B loc_40385B:                             ; CODE XREF: sub_4035D0+164↑j
.text:0040385B                                         ; DATA XREF: sub_4035D0:jpt_403734↑o
.text:0040385B                 mov     eax, [esp+3Ch+var_18] ; jumptable 00403734 case 66
.text:0040385F                 cmp     eax, 3FFFFFh
.text:00403864                 ja      short loc_40384C
.text:00403866                 shl     eax, 0Ah
.text:00403869                 jmp     short loc_403822
.text:0040386B ; ---------------------------------------------------------------------------
.text:0040386B
.text:0040386B loc_40386B:                             ; CODE XREF: sub_4035D0+164↑j
.text:0040386B                                         ; DATA XREF: sub_4035D0:jpt_403734↑o
.text:0040386B                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00403734 case 69
.text:0040386F                 xor     ebp, ebp
.text:00403871                 mov     esi, 5
.text:00403876
.text:00403876 loc_403876:                             ; CODE XREF: sub_4035D0+2C8↓j
.text:00403876                 xor     edx, edx
.text:00403878                 mov     eax, 0FFFFFFFFh
.text:0040387D                 div     ebx
.text:0040387F                 mov     edx, [ecx]
.text:00403881                 cmp     eax, edx
.text:00403883                 jnb     short loc_40389C
.text:00403885                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040388B                 mov     eax, 1
.text:00403890
.text:00403890 loc_403890:                             ; CODE XREF: sub_4035D0+2D3↓j
.text:00403890                 dec     esi
.text:00403891                 or      ebp, eax
.text:00403893                 cmp     esi, 0FFFFFFFFh
.text:00403896                 mov     eax, ebp
.text:00403898                 jnz     short loc_403876
.text:0040389A                 jmp     short loc_403828
.text:0040389C ; ---------------------------------------------------------------------------
.text:0040389C
.text:0040389C loc_40389C:                             ; CODE XREF: sub_4035D0+2B3↑j
.text:0040389C                 imul    edx, ebx
.text:0040389F                 xor     eax, eax
.text:004038A1                 mov     [ecx], edx
.text:004038A3                 jmp     short loc_403890
.text:004038A5 ; ---------------------------------------------------------------------------
.text:004038A5
.text:004038A5 loc_4038A5:                             ; CODE XREF: sub_4035D0+164↑j
.text:004038A5                                         ; DATA XREF: sub_4035D0:jpt_403734↑o
.text:004038A5                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00403734 case 80
.text:004038A9                 xor     ebp, ebp
.text:004038AB                 mov     esi, 4
.text:004038B0
.text:004038B0 loc_4038B0:                             ; CODE XREF: sub_4035D0+302↓j
.text:004038B0                 xor     edx, edx
.text:004038B2                 mov     eax, 0FFFFFFFFh
.text:004038B7                 div     ebx
.text:004038B9                 mov     edx, [ecx]
.text:004038BB                 cmp     eax, edx
.text:004038BD                 jnb     short loc_4038D9
.text:004038BF                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:004038C5                 mov     eax, 1
.text:004038CA
.text:004038CA loc_4038CA:                             ; CODE XREF: sub_4035D0+310↓j
.text:004038CA                 dec     esi
.text:004038CB                 or      ebp, eax
.text:004038CD                 cmp     esi, 0FFFFFFFFh
.text:004038D0                 mov     eax, ebp
.text:004038D2                 jnz     short loc_4038B0
.text:004038D4                 jmp     loc_403828
.text:004038D9 ; ---------------------------------------------------------------------------
.text:004038D9
.text:004038D9 loc_4038D9:                             ; CODE XREF: sub_4035D0+2ED↑j
.text:004038D9                 imul    edx, ebx
.text:004038DC                 xor     eax, eax
.text:004038DE                 mov     [ecx], edx
.text:004038E0                 jmp     short loc_4038CA
.text:004038E2 ; ---------------------------------------------------------------------------
.text:004038E2
.text:004038E2 loc_4038E2:                             ; CODE XREF: sub_4035D0+164↑j
.text:004038E2                                         ; DATA XREF: sub_4035D0:jpt_403734↑o
.text:004038E2                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00403734 case 89
.text:004038E6                 xor     ebp, ebp
.text:004038E8                 mov     esi, 7
.text:004038ED
.text:004038ED loc_4038ED:                             ; CODE XREF: sub_4035D0+33F↓j
.text:004038ED                 xor     edx, edx
.text:004038EF                 mov     eax, 0FFFFFFFFh
.text:004038F4                 div     ebx
.text:004038F6                 mov     edx, [ecx]
.text:004038F8                 cmp     eax, edx
.text:004038FA                 jnb     short loc_403916
.text:004038FC                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00403902                 mov     eax, 1
.text:00403907
.text:00403907 loc_403907:                             ; CODE XREF: sub_4035D0+34D↓j
.text:00403907                 dec     esi
.text:00403908                 or      ebp, eax
.text:0040390A                 cmp     esi, 0FFFFFFFFh
.text:0040390D                 mov     eax, ebp
.text:0040390F                 jnz     short loc_4038ED
.text:00403911                 jmp     loc_403828
.text:00403916 ; ---------------------------------------------------------------------------
.text:00403916
.text:00403916 loc_403916:                             ; CODE XREF: sub_4035D0+32A↑j
.text:00403916                 imul    edx, ebx
.text:00403919                 xor     eax, eax
.text:0040391B                 mov     [ecx], edx
.text:0040391D                 jmp     short loc_403907
.text:0040391F ; ---------------------------------------------------------------------------
.text:0040391F
.text:0040391F loc_40391F:                             ; CODE XREF: sub_4035D0+164↑j
.text:0040391F                                         ; DATA XREF: sub_4035D0:jpt_403734↑o
.text:0040391F                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00403734 case 90
.text:00403923                 xor     ebp, ebp
.text:00403925                 mov     esi, 6
.text:0040392A
.text:0040392A loc_40392A:                             ; CODE XREF: sub_4035D0+37C↓j
.text:0040392A                 xor     edx, edx
.text:0040392C                 mov     eax, 0FFFFFFFFh
.text:00403931                 div     ebx
.text:00403933                 mov     edx, [ecx]
.text:00403935                 cmp     eax, edx
.text:00403937                 jnb     short loc_403953
.text:00403939                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040393F                 mov     eax, 1
.text:00403944
.text:00403944 loc_403944:                             ; CODE XREF: sub_4035D0+38A↓j
.text:00403944                 dec     esi
.text:00403945                 or      ebp, eax
.text:00403947                 cmp     esi, 0FFFFFFFFh
.text:0040394A                 mov     eax, ebp
.text:0040394C                 jnz     short loc_40392A
.text:0040394E                 jmp     loc_403828
.text:00403953 ; ---------------------------------------------------------------------------
.text:00403953
.text:00403953 loc_403953:                             ; CODE XREF: sub_4035D0+367↑j
.text:00403953                 imul    edx, ebx
.text:00403956                 xor     eax, eax
.text:00403958                 mov     [ecx], edx
.text:0040395A                 jmp     short loc_403944
.text:0040395C ; ---------------------------------------------------------------------------
.text:0040395C
.text:0040395C loc_40395C:                             ; CODE XREF: sub_4035D0+164↑j
.text:0040395C                                         ; DATA XREF: sub_4035D0:jpt_403734↑o
.text:0040395C                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00403734 cases 71,103
.text:00403960                 xor     ebp, ebp
.text:00403962                 mov     esi, 2
.text:00403967
.text:00403967 loc_403967:                             ; CODE XREF: sub_4035D0+3B9↓j
.text:00403967                 xor     edx, edx
.text:00403969                 mov     eax, 0FFFFFFFFh
.text:0040396E                 div     ebx
.text:00403970                 mov     edx, [ecx]
.text:00403972                 cmp     eax, edx
.text:00403974                 jnb     short loc_403990
.text:00403976                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0040397C                 mov     eax, 1
.text:00403981
.text:00403981 loc_403981:                             ; CODE XREF: sub_4035D0+3C7↓j
.text:00403981                 dec     esi
.text:00403982                 or      ebp, eax
.text:00403984                 cmp     esi, 0FFFFFFFFh
.text:00403987                 mov     eax, ebp
.text:00403989                 jnz     short loc_403967
.text:0040398B                 jmp     loc_403828
.text:00403990 ; ---------------------------------------------------------------------------
.text:00403990
.text:00403990 loc_403990:                             ; CODE XREF: sub_4035D0+3A4↑j
.text:00403990                 imul    edx, ebx
.text:00403993                 xor     eax, eax
.text:00403995                 mov     [ecx], edx
.text:00403997                 jmp     short loc_403981
.text:00403999 ; ---------------------------------------------------------------------------
.text:00403999
.text:00403999 loc_403999:                             ; CODE XREF: sub_4035D0+164↑j
.text:00403999                                         ; DATA XREF: sub_4035D0:jpt_403734↑o
.text:00403999                 xor     edx, edx        ; jumptable 00403734 cases 75,107
.text:0040399B                 mov     eax, 0FFFFFFFFh
.text:004039A0                 div     ebx
.text:004039A2                 mov     edx, [esp+3Ch+var_18]
.text:004039A6                 cmp     eax, edx
.text:004039A8                 jnb     short loc_4039C0
.text:004039AA                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:004039B2                 mov     edx, 1
.text:004039B7
.text:004039B7 loc_4039B7:                             ; CODE XREF: sub_4035D0+3F9↓j
.text:004039B7                 xor     eax, eax
.text:004039B9                 or      eax, edx
.text:004039BB                 jmp     loc_403828
.text:004039C0 ; ---------------------------------------------------------------------------
.text:004039C0
.text:004039C0 loc_4039C0:                             ; CODE XREF: sub_4035D0+3D8↑j
.text:004039C0                 imul    edx, ebx
.text:004039C3                 mov     [esp+3Ch+var_18], edx
.text:004039C7                 xor     edx, edx
.text:004039C9                 jmp     short loc_4039B7
.text:004039CB ; ---------------------------------------------------------------------------
.text:004039CB
.text:004039CB loc_4039CB:                             ; CODE XREF: sub_4035D0+164↑j
.text:004039CB                                         ; DATA XREF: sub_4035D0:jpt_403734↑o
.text:004039CB                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00403734 cases 77,109
.text:004039CF                 xor     ebp, ebp
.text:004039D1                 mov     esi, 1
.text:004039D6
.text:004039D6 loc_4039D6:                             ; CODE XREF: sub_4035D0+42E↓j
.text:004039D6                 xor     edx, edx
.text:004039D8                 mov     eax, 0FFFFFFFFh
.text:004039DD                 div     ebx
.text:004039DF                 mov     edx, [ecx]
.text:004039E1                 cmp     eax, edx
.text:004039E3                 jnb     short loc_403A00
.text:004039E5                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:004039EB                 mov     eax, 1
.text:004039F0
.text:004039F0 loc_4039F0:                             ; CODE XREF: sub_4035D0+437↓j
.text:004039F0                 dec     esi
.text:004039F1                 or      ebp, eax
.text:004039F3                 cmp     esi, 0FFFFFFFFh
.text:004039F6                 mov     eax, ebp
.text:004039F8                 jz      loc_403828
.text:004039FE                 jmp     short loc_4039D6
.text:00403A00 ; ---------------------------------------------------------------------------
.text:00403A00
.text:00403A00 loc_403A00:                             ; CODE XREF: sub_4035D0+413↑j
.text:00403A00                 imul    edx, ebx
.text:00403A03                 xor     eax, eax
.text:00403A05                 mov     [ecx], edx
.text:00403A07                 jmp     short loc_4039F0
.text:00403A09 ; ---------------------------------------------------------------------------
.text:00403A09
.text:00403A09 loc_403A09:                             ; CODE XREF: sub_4035D0+164↑j
.text:00403A09                                         ; DATA XREF: sub_4035D0:jpt_403734↑o
.text:00403A09                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00403734 cases 84,116
.text:00403A0D                 xor     ebp, ebp
.text:00403A0F                 mov     esi, 3
.text:00403A14
.text:00403A14 loc_403A14:                             ; CODE XREF: sub_4035D0+466↓j
.text:00403A14                 xor     edx, edx
.text:00403A16                 mov     eax, 0FFFFFFFFh
.text:00403A1B                 div     ebx
.text:00403A1D                 mov     edx, [ecx]
.text:00403A1F                 cmp     eax, edx
.text:00403A21                 jnb     short loc_403A3D
.text:00403A23                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00403A29                 mov     eax, 1
.text:00403A2E
.text:00403A2E loc_403A2E:                             ; CODE XREF: sub_4035D0+474↓j
.text:00403A2E                 dec     esi
.text:00403A2F                 or      ebp, eax
.text:00403A31                 cmp     esi, 0FFFFFFFFh
.text:00403A34                 mov     eax, ebp
.text:00403A36                 jnz     short loc_403A14
.text:00403A38                 jmp     loc_403828
.text:00403A3D ; ---------------------------------------------------------------------------
.text:00403A3D
.text:00403A3D loc_403A3D:                             ; CODE XREF: sub_4035D0+451↑j
.text:00403A3D                 imul    edx, ebx
.text:00403A40                 xor     eax, eax
.text:00403A42                 mov     [ecx], edx
.text:00403A44                 jmp     short loc_403A2E
.text:00403A46 ; ---------------------------------------------------------------------------
.text:00403A46
.text:00403A46 loc_403A46:                             ; CODE XREF: sub_4035D0+164↑j
.text:00403A46                                         ; DATA XREF: sub_4035D0:jpt_403734↑o
.text:00403A46                 mov     eax, [esp+3Ch+var_18] ; jumptable 00403734 case 119
.text:00403A4A                 test    eax, eax
.text:00403A4C                 js      loc_40384C
.text:00403A52                 add     eax, eax
.text:00403A54                 jmp     loc_403822
.text:00403A59 ; ---------------------------------------------------------------------------
.text:00403A59
.text:00403A59 loc_403A59:                             ; CODE XREF: sub_4035D0+13D↑j
.text:00403A59                                         ; sub_4035D0+14F↑j
.text:00403A59                 mov     [esp+3Ch+var_24], 2
.text:00403A61                 mov     ebx, 3E8h
.text:00403A66                 jmp     loc_403725
.text:00403A6B ; ---------------------------------------------------------------------------
.text:00403A6B
.text:00403A6B loc_403A6B:                             ; CODE XREF: sub_4035D0+146↑j
.text:00403A6B                 cmp     eax, 69h ; 'i'
.text:00403A6E                 jnz     loc_403725
.text:00403A74                 mov     edx, [esp+3Ch+var_28]
.text:00403A78                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:00403A7C                 jnz     loc_403725
.text:00403A82                 mov     [esp+3Ch+var_24], 3
.text:00403A8A                 jmp     loc_403725
.text:00403A8A ; ---------------------------------------------------------------------------
.text:00403A8F                 align 10h
.text:00403A90
.text:00403A90 loc_403A90:                             ; CODE XREF: sub_4035D0+12A↑j
.text:00403A90                 mov     eax, [edi]
.text:00403A92                 mov     [esp+3Ch+var_28], eax
.text:00403A96                 jmp     loc_403725
.text:00403A9B ; ---------------------------------------------------------------------------
.text:00403A9B
.text:00403A9B loc_403A9B:                             ; CODE XREF: sub_4035D0+B0↑j
.text:00403A9B                 call    _errno
.text:00403AA0                 cmp     dword ptr [eax], 22h ; '"'
.text:00403AA3                 jnz     short loc_403AB2
.text:00403AA5                 mov     [esp+3Ch+var_1C], 1
.text:00403AAD                 jmp     loc_403686
.text:00403AB2 ; ---------------------------------------------------------------------------
.text:00403AB2
.text:00403AB2 loc_403AB2:                             ; CODE XREF: sub_4035D0+4D3↑j
.text:00403AB2                                         ; sub_4035D0+4F2↓j ...
.text:00403AB2                 mov     eax, 4
.text:00403AB7                 jmp     loc_4036A5
.text:00403ABC ; ---------------------------------------------------------------------------
.text:00403ABC
.text:00403ABC loc_403ABC:                             ; CODE XREF: sub_4035D0+A1↑j
.text:00403ABC                 mov     edx, [esp+3Ch+Str]
.text:00403AC0                 test    edx, edx
.text:00403AC2                 jz      short loc_403AB2
.text:00403AC4                 movzx   eax, byte ptr [eax]
.text:00403AC7                 test    al, al
.text:00403AC9                 jz      short loc_403AB2
.text:00403ACB                 mov     ebx, [esp+3Ch+Str]
.text:00403ACF                 movsx   esi, al
.text:00403AD2                 mov     [esp+3Ch+Type], esi ; Val
.text:00403AD6                 mov     [esp+3Ch+C], ebx ; Str
.text:00403AD9                 call    strchr
.text:00403ADE                 test    eax, eax
.text:00403AE0                 jz      short loc_403AB2
.text:00403AE2                 mov     [esp+3Ch+var_18], 1
.text:00403AEA                 jmp     loc_403686
.text:00403AEA ; ---------------------------------------------------------------------------
.text:00403AEF                 align 10h
.text:00403AF0
.text:00403AF0 loc_403AF0:                             ; CODE XREF: sub_4035D0+4E↑j
.text:00403AF0                 mov     eax, ds:_pctype
.text:00403AF5                 mov     ecx, [eax]
.text:00403AF7                 movzx   eax, word ptr [ecx+edx*2]
.text:00403AFB                 and     eax, 8
.text:00403AFE                 jmp     loc_403634
.text:00403B03 ; ---------------------------------------------------------------------------
.text:00403B03
.text:00403B03 loc_403B03:                             ; CODE XREF: sub_4035D0+26↑j
.text:00403B03                 lea     edi, [esp+3Ch+var_14]
.text:00403B07                 jmp     loc_4035FC
.text:00403B0C ; ---------------------------------------------------------------------------
.text:00403B0C
.text:00403B0C loc_403B0C:                             ; CODE XREF: sub_4035D0+1A↑j
.text:00403B0C                 mov     [esp+3Ch+Radix], 70h ; 'p'
.text:00403B14                 mov     [esp+3Ch+Type], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:00403B1C                 mov     [esp+3Ch+C], offset a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:00403B23                 call    _assert
.text:00403B23 sub_4035D0      endp
.text:00403B23
.text:00403B23 ; ---------------------------------------------------------------------------
.text:00403B28                 align 20h
.text:00403B40
.text:00403B40 ; =============== S U B R O U T I N E =======================================
.text:00403B40
.text:00403B40
.text:00403B40 ; int __cdecl sub_403B40(int, int, char *, int, int)
.text:00403B40 sub_403B40      proc near               ; CODE XREF: sub_401670+D5↑p
.text:00403B40
.text:00403B40 var_1C          = dword ptr -1Ch
.text:00403B40 var_18          = dword ptr -18h
.text:00403B40 var_14          = dword ptr -14h
.text:00403B40 var_10          = dword ptr -10h
.text:00403B40 var_C           = dword ptr -0Ch
.text:00403B40 var_8           = dword ptr -8
.text:00403B40 var_4           = dword ptr -4
.text:00403B40 arg_0           = dword ptr  4
.text:00403B40 arg_4           = dword ptr  8
.text:00403B40 arg_8           = dword ptr  0Ch
.text:00403B40 arg_C           = dword ptr  10h
.text:00403B40 arg_10          = dword ptr  14h
.text:00403B40
.text:00403B40                 sub     esp, 1Ch
.text:00403B43                 mov     edx, [esp+1Ch+arg_C]
.text:00403B47                 mov     [esp+1Ch+var_4], 0 ; int
.text:00403B4F                 mov     ecx, [esp+1Ch+arg_10]
.text:00403B53                 mov     [esp+1Ch+var_8], 0 ; int
.text:00403B5B                 mov     [esp+1Ch+var_10], edx ; int
.text:00403B5F                 mov     edx, [esp+1Ch+arg_4]
.text:00403B63                 mov     [esp+1Ch+var_C], ecx ; int
.text:00403B67                 mov     ecx, [esp+1Ch+arg_8]
.text:00403B6B                 mov     [esp+1Ch+var_18], edx ; int
.text:00403B6F                 mov     edx, [esp+1Ch+arg_0]
.text:00403B73                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00403B77                 mov     [esp+1Ch+var_1C], edx ; int
.text:00403B7A                 call    sub_402E20
.text:00403B7F                 add     esp, 1Ch
.text:00403B82                 retn
.text:00403B82 sub_403B40      endp
.text:00403B82
.text:00403B82 ; ---------------------------------------------------------------------------
.text:00403B83                 align 10h
.text:00403B90                 sub     esp, 2Ch
.text:00403B93                 mov     edx, [esp+44h]
.text:00403B97                 mov     dword ptr [esp+18h], 0
.text:00403B9F                 mov     ecx, [esp+40h]
.text:00403BA3                 mov     dword ptr [esp+14h], 0
.text:00403BAB                 mov     [esp+1Ch], edx
.text:00403BAF                 mov     edx, [esp+3Ch]
.text:00403BB3                 mov     [esp+10h], ecx
.text:00403BB7                 mov     ecx, [esp+38h]
.text:00403BBB                 mov     [esp+0Ch], edx
.text:00403BBF                 mov     edx, [esp+34h]
.text:00403BC3                 mov     [esp+8], ecx
.text:00403BC7                 mov     [esp+4], edx
.text:00403BCB                 mov     edx, [esp+30h]
.text:00403BCF                 mov     [esp], edx
.text:00403BD2                 call    sub_402290
.text:00403BD7                 add     esp, 2Ch
.text:00403BDA                 retn
.text:00403BDA ; ---------------------------------------------------------------------------
.text:00403BDB                 align 10h
.text:00403BE0                 sub     esp, 1Ch
.text:00403BE3                 mov     edx, [esp+2Ch]
.text:00403BE7                 mov     dword ptr [esp+18h], 0
.text:00403BEF                 mov     ecx, [esp+30h]
.text:00403BF3                 mov     dword ptr [esp+14h], 1
.text:00403BFB                 mov     [esp+0Ch], edx
.text:00403BFF                 mov     edx, [esp+24h]
.text:00403C03                 mov     [esp+10h], ecx
.text:00403C07                 mov     ecx, [esp+28h]
.text:00403C0B                 mov     [esp+4], edx
.text:00403C0F                 mov     edx, [esp+20h]
.text:00403C13                 mov     [esp+8], ecx
.text:00403C17                 mov     [esp], edx
.text:00403C1A                 call    sub_402E20
.text:00403C1F                 add     esp, 1Ch
.text:00403C22                 retn
.text:00403C22 ; ---------------------------------------------------------------------------
.text:00403C23                 align 10h
.text:00403C30                 sub     esp, 2Ch
.text:00403C33                 mov     edx, [esp+44h]
.text:00403C37                 mov     dword ptr [esp+18h], 0
.text:00403C3F                 mov     ecx, [esp+40h]
.text:00403C43                 mov     dword ptr [esp+14h], 1
.text:00403C4B                 mov     [esp+1Ch], edx
.text:00403C4F                 mov     edx, [esp+3Ch]
.text:00403C53                 mov     [esp+10h], ecx
.text:00403C57                 mov     ecx, [esp+38h]
.text:00403C5B                 mov     [esp+0Ch], edx
.text:00403C5F                 mov     edx, [esp+34h]
.text:00403C63                 mov     [esp+8], ecx
.text:00403C67                 mov     [esp+4], edx
.text:00403C6B                 mov     edx, [esp+30h]
.text:00403C6F                 mov     [esp], edx
.text:00403C72                 call    sub_402290
.text:00403C77                 add     esp, 2Ch
.text:00403C7A                 retn
.text:00403C7A ; ---------------------------------------------------------------------------
.text:00403C7B                 align 10h
.text:00403C80 ; const char aPosix2Version[]
.text:00403C80 aPosix2Version  db '_POSIX2_VERSION',0  ; DATA XREF: sub_403C90+C↓o
.text:00403C90
.text:00403C90 ; =============== S U B R O U T I N E =======================================
.text:00403C90
.text:00403C90
.text:00403C90 sub_403C90      proc near               ; CODE XREF: sub_401670+41F↑p
.text:00403C90
.text:00403C90 VarName         = dword ptr -1Ch
.text:00403C90 EndPtr          = dword ptr -18h
.text:00403C90 Radix           = dword ptr -14h
.text:00403C90 var_8           = dword ptr -8
.text:00403C90 var_4           = dword ptr -4
.text:00403C90
.text:00403C90                 sub     esp, 1Ch
.text:00403C93                 mov     [esp+1Ch+var_4], ebx
.text:00403C97                 mov     ebx, 30A29h
.text:00403C9C                 mov     [esp+1Ch+VarName], offset aPosix2Version ; "_POSIX2_VERSION"
.text:00403CA3                 call    getenv
.text:00403CA8                 test    eax, eax
.text:00403CAA                 jz      short loc_403CB1
.text:00403CAC                 cmp     byte ptr [eax], 0
.text:00403CAF                 jnz     short loc_403CC0
.text:00403CB1
.text:00403CB1 loc_403CB1:                             ; CODE XREF: sub_403C90+1A↑j
.text:00403CB1                                         ; sub_403C90+4F↓j ...
.text:00403CB1                 mov     eax, ebx
.text:00403CB3                 mov     ebx, [esp+1Ch+var_4]
.text:00403CB7                 add     esp, 1Ch
.text:00403CBA                 retn
.text:00403CBA ; ---------------------------------------------------------------------------
.text:00403CBB                 align 10h
.text:00403CC0
.text:00403CC0 loc_403CC0:                             ; CODE XREF: sub_403C90+1F↑j
.text:00403CC0                 mov     [esp+1Ch+Radix], 0Ah ; Radix
.text:00403CC8                 lea     ecx, [esp+1Ch+var_8]
.text:00403CCC                 mov     [esp+1Ch+EndPtr], ecx ; EndPtr
.text:00403CD0                 mov     [esp+1Ch+VarName], eax ; String
.text:00403CD3                 call    strtol
.text:00403CD8                 mov     ecx, [esp+1Ch+var_8]
.text:00403CDC                 cmp     byte ptr [ecx], 0
.text:00403CDF                 jnz     short loc_403CB1
.text:00403CE1                 mov     ebx, eax
.text:00403CE3                 jmp     short loc_403CB1
.text:00403CE3 sub_403C90      endp
.text:00403CE3
.text:00403CE3 ; ---------------------------------------------------------------------------
.text:00403CE5                 align 10h
.text:00403CF0                 sub     esp, 0Ch
.text:00403CF3                 xor     edx, edx
.text:00403CF5                 mov     ecx, [esp+14h]
.text:00403CF9                 mov     [esp+8], ebx
.text:00403CFD                 mov     eax, 0FFFFFFFFh
.text:00403D02                 mov     ebx, [esp+10h]
.text:00403D06                 div     ecx
.text:00403D08                 cmp     eax, ebx
.text:00403D0A                 jb      short loc_403D29
.text:00403D0C                 mov     edx, ebx
.text:00403D0E                 imul    edx, ecx
.text:00403D11                 mov     [esp], edx
.text:00403D14                 call    malloc
.text:00403D19                 test    eax, eax
.text:00403D1B                 jz      short loc_403D25
.text:00403D1D
.text:00403D1D loc_403D1D:                             ; CODE XREF: .text:00403D27↓j
.text:00403D1D                 mov     ebx, [esp+8]
.text:00403D21                 add     esp, 0Ch
.text:00403D24                 retn
.text:00403D25 ; ---------------------------------------------------------------------------
.text:00403D25
.text:00403D25 loc_403D25:                             ; CODE XREF: .text:00403D1B↑j
.text:00403D25                 test    ebx, ebx
.text:00403D27                 jz      short loc_403D1D
.text:00403D29
.text:00403D29 loc_403D29:                             ; CODE XREF: .text:00403D0A↑j
.text:00403D29                 call    sub_4040F0
.text:00403D29 ; ---------------------------------------------------------------------------
.text:00403D2E                 align 10h
.text:00403D30
.text:00403D30 ; =============== S U B R O U T I N E =======================================
.text:00403D30
.text:00403D30
.text:00403D30 ; int __cdecl sub_403D30(size_t)
.text:00403D30 sub_403D30      proc near               ; CODE XREF: sub_401670+3EB↑p
.text:00403D30                                         ; .text:00404C39↓p ...
.text:00403D30
.text:00403D30 Size            = dword ptr -0Ch
.text:00403D30 var_4           = dword ptr -4
.text:00403D30 arg_0           = dword ptr  4
.text:00403D30
.text:00403D30                 sub     esp, 0Ch
.text:00403D33                 mov     [esp+0Ch+var_4], ebx
.text:00403D37                 mov     ebx, [esp+0Ch+arg_0]
.text:00403D3B                 mov     [esp+0Ch+Size], ebx ; Size
.text:00403D3E                 call    malloc
.text:00403D43                 test    eax, eax
.text:00403D45                 jz      short loc_403D50
.text:00403D47
.text:00403D47 loc_403D47:                             ; CODE XREF: sub_403D30+22↓j
.text:00403D47                 mov     ebx, [esp+0Ch+var_4]
.text:00403D4B                 add     esp, 0Ch
.text:00403D4E                 retn
.text:00403D4E ; ---------------------------------------------------------------------------
.text:00403D4F                 align 10h
.text:00403D50
.text:00403D50 loc_403D50:                             ; CODE XREF: sub_403D30+15↑j
.text:00403D50                 test    ebx, ebx
.text:00403D52                 jz      short loc_403D47
.text:00403D54                 call    sub_4040F0
.text:00403D54 sub_403D30      endp
.text:00403D54
.text:00403D54 ; ---------------------------------------------------------------------------
.text:00403D59                 align 10h
.text:00403D60                 sub     esp, 1Ch
.text:00403D63                 xor     edx, edx
.text:00403D65                 mov     eax, 0FFFFFFFFh
.text:00403D6A                 mov     [esp+14h], ebx
.text:00403D6E                 mov     ecx, [esp+20h]
.text:00403D72                 mov     ebx, [esp+28h]
.text:00403D76                 mov     [esp+18h], esi
.text:00403D7A                 mov     esi, [esp+24h]
.text:00403D7E                 div     ebx
.text:00403D80                 cmp     eax, esi
.text:00403D82                 jb      short loc_403DB4
.text:00403D84                 mov     [esp], ecx
.text:00403D87                 mov     edx, esi
.text:00403D89                 imul    edx, ebx
.text:00403D8C                 mov     [esp+4], edx
.text:00403D90                 call    realloc
.text:00403D95                 test    eax, eax
.text:00403D97                 mov     ecx, eax
.text:00403D99                 jz      short loc_403DB0
.text:00403D9B
.text:00403D9B loc_403D9B:                             ; CODE XREF: .text:00403DB2↓j
.text:00403D9B                 mov     ebx, [esp+14h]
.text:00403D9F                 mov     eax, ecx
.text:00403DA1                 mov     esi, [esp+18h]
.text:00403DA5                 add     esp, 1Ch
.text:00403DA8                 retn
.text:00403DA8 ; ---------------------------------------------------------------------------
.text:00403DA9                 align 10h
.text:00403DB0
.text:00403DB0 loc_403DB0:                             ; CODE XREF: .text:00403D99↑j
.text:00403DB0                 test    esi, esi
.text:00403DB2                 jz      short loc_403D9B
.text:00403DB4
.text:00403DB4 loc_403DB4:                             ; CODE XREF: .text:00403D82↑j
.text:00403DB4                 call    sub_4040F0
.text:00403DB4 ; ---------------------------------------------------------------------------
.text:00403DB9                 align 10h
.text:00403DC0
.text:00403DC0 ; =============== S U B R O U T I N E =======================================
.text:00403DC0
.text:00403DC0
.text:00403DC0 ; int __cdecl sub_403DC0(void *, size_t)
.text:00403DC0 sub_403DC0      proc near               ; CODE XREF: sub_405300+5B↓p
.text:00403DC0
.text:00403DC0 Block           = dword ptr -0Ch
.text:00403DC0 Size            = dword ptr -8
.text:00403DC0 var_4           = dword ptr -4
.text:00403DC0 arg_0           = dword ptr  4
.text:00403DC0 arg_4           = dword ptr  8
.text:00403DC0
.text:00403DC0                 sub     esp, 0Ch
.text:00403DC3                 mov     edx, [esp+0Ch+arg_0]
.text:00403DC7                 mov     [esp+0Ch+var_4], ebx
.text:00403DCB                 mov     ebx, [esp+0Ch+arg_4]
.text:00403DCF                 mov     [esp+0Ch+Block], edx ; Block
.text:00403DD2                 mov     [esp+0Ch+Size], ebx ; Size
.text:00403DD6                 call    realloc
.text:00403DDB                 test    eax, eax
.text:00403DDD                 jz      short loc_403DE7
.text:00403DDF
.text:00403DDF loc_403DDF:                             ; CODE XREF: sub_403DC0+29↓j
.text:00403DDF                 mov     ebx, [esp+0Ch+var_4]
.text:00403DE3                 add     esp, 0Ch
.text:00403DE6                 retn
.text:00403DE7 ; ---------------------------------------------------------------------------
.text:00403DE7
.text:00403DE7 loc_403DE7:                             ; CODE XREF: sub_403DC0+1D↑j
.text:00403DE7                 test    ebx, ebx
.text:00403DE9                 jz      short loc_403DDF
.text:00403DEB                 call    sub_4040F0
.text:00403DEB sub_403DC0      endp
.text:00403DEB
.text:00403DF0
.text:00403DF0 ; =============== S U B R O U T I N E =======================================
.text:00403DF0
.text:00403DF0 ; Attributes: thunk
.text:00403DF0
.text:00403DF0 ; int __cdecl sub_403DF0(void *, int, int)
.text:00403DF0 sub_403DF0      proc near               ; CODE XREF: sub_401C20+2F1↑p
.text:00403DF0                 jmp     sub_403F40
.text:00403DF0 sub_403DF0      endp
.text:00403DF0
.text:00403DF0 ; ---------------------------------------------------------------------------
.text:00403DF5                 align 10h
.text:00403E00                 sub     esp, 0Ch
.text:00403E03                 mov     edx, [esp+14h]
.text:00403E07                 mov     dword ptr [esp+8], 1
.text:00403E0F                 mov     [esp+4], edx
.text:00403E13                 mov     edx, [esp+10h]
.text:00403E17                 mov     [esp], edx
.text:00403E1A                 call    sub_403F40
.text:00403E1F                 add     esp, 0Ch
.text:00403E22                 retn
.text:00403E22 ; ---------------------------------------------------------------------------
.text:00403E23                 align 10h
.text:00403E30                 sub     esp, 1Ch
.text:00403E33                 mov     [esp+18h], ebx
.text:00403E37                 mov     ebx, [esp+20h]
.text:00403E3B                 mov     [esp], ebx
.text:00403E3E                 call    malloc
.text:00403E43                 test    eax, eax
.text:00403E45                 jz      short loc_403E63
.text:00403E47
.text:00403E47 loc_403E47:                             ; CODE XREF: .text:00403E65↓j
.text:00403E47                 mov     [esp+8], ebx
.text:00403E4B                 mov     dword ptr [esp+4], 0
.text:00403E53                 mov     [esp], eax
.text:00403E56                 call    memset
.text:00403E5B                 mov     ebx, [esp+18h]
.text:00403E5F                 add     esp, 1Ch
.text:00403E62                 retn
.text:00403E63 ; ---------------------------------------------------------------------------
.text:00403E63
.text:00403E63 loc_403E63:                             ; CODE XREF: .text:00403E45↑j
.text:00403E63                 test    ebx, ebx
.text:00403E65                 jz      short loc_403E47
.text:00403E67                 call    sub_4040F0
.text:00403E67 ; ---------------------------------------------------------------------------
.text:00403E6C                 align 10h
.text:00403E70                 sub     esp, 0Ch
.text:00403E73                 xor     edx, edx
.text:00403E75                 mov     ecx, [esp+14h]
.text:00403E79                 mov     [esp+8], ebx
.text:00403E7D                 mov     eax, 0FFFFFFFFh
.text:00403E82                 mov     ebx, [esp+10h]
.text:00403E86                 div     ecx
.text:00403E88                 cmp     eax, ebx
.text:00403E8A                 jb      short loc_403EA8
.text:00403E8C                 mov     [esp+4], ecx
.text:00403E90                 mov     [esp], ebx
.text:00403E93                 call    calloc
.text:00403E98                 test    eax, eax
.text:00403E9A                 jz      short loc_403EA4
.text:00403E9C
.text:00403E9C loc_403E9C:                             ; CODE XREF: .text:00403EA6↓j
.text:00403E9C                 mov     ebx, [esp+8]
.text:00403EA0                 add     esp, 0Ch
.text:00403EA3                 retn
.text:00403EA4 ; ---------------------------------------------------------------------------
.text:00403EA4
.text:00403EA4 loc_403EA4:                             ; CODE XREF: .text:00403E9A↑j
.text:00403EA4                 test    ebx, ebx
.text:00403EA6                 jz      short loc_403E9C
.text:00403EA8
.text:00403EA8 loc_403EA8:                             ; CODE XREF: .text:00403E8A↑j
.text:00403EA8                 call    sub_4040F0
.text:00403EA8 ; ---------------------------------------------------------------------------
.text:00403EAD                 align 10h
.text:00403EB0                 sub     esp, 1Ch
.text:00403EB3                 mov     [esp+18h], ebx
.text:00403EB7                 mov     ebx, [esp+24h]
.text:00403EBB                 mov     [esp], ebx
.text:00403EBE                 call    malloc
.text:00403EC3                 test    eax, eax
.text:00403EC5                 mov     edx, eax
.text:00403EC7                 jz      short loc_403EE5
.text:00403EC9
.text:00403EC9 loc_403EC9:                             ; CODE XREF: .text:00403EE7↓j
.text:00403EC9                 mov     [esp+8], ebx
.text:00403ECD                 mov     ecx, [esp+20h]
.text:00403ED1                 mov     [esp], edx
.text:00403ED4                 mov     [esp+4], ecx
.text:00403ED8                 call    memcpy
.text:00403EDD                 mov     ebx, [esp+18h]
.text:00403EE1                 add     esp, 1Ch
.text:00403EE4                 retn
.text:00403EE5 ; ---------------------------------------------------------------------------
.text:00403EE5
.text:00403EE5 loc_403EE5:                             ; CODE XREF: .text:00403EC7↑j
.text:00403EE5                 test    ebx, ebx
.text:00403EE7                 jz      short loc_403EC9
.text:00403EE9                 call    sub_4040F0
.text:00403EE9 ; ---------------------------------------------------------------------------
.text:00403EEE                 align 10h
.text:00403EF0                 sub     esp, 1Ch
.text:00403EF3                 mov     [esp+18h], esi
.text:00403EF7                 mov     esi, [esp+20h]
.text:00403EFB                 mov     [esp+14h], ebx
.text:00403EFF                 mov     [esp], esi
.text:00403F02                 call    strlen
.text:00403F07                 lea     ebx, [eax+1]
.text:00403F0A                 mov     [esp], ebx
.text:00403F0D                 call    malloc
.text:00403F12                 test    eax, eax
.text:00403F14                 jz      short loc_403F32
.text:00403F16
.text:00403F16 loc_403F16:                             ; CODE XREF: .text:00403F34↓j
.text:00403F16                 mov     [esp+8], ebx
.text:00403F1A                 mov     [esp+4], esi
.text:00403F1E                 mov     [esp], eax
.text:00403F21                 call    memcpy
.text:00403F26                 mov     ebx, [esp+14h]
.text:00403F2A                 mov     esi, [esp+18h]
.text:00403F2E                 add     esp, 1Ch
.text:00403F31                 retn
.text:00403F32 ; ---------------------------------------------------------------------------
.text:00403F32
.text:00403F32 loc_403F32:                             ; CODE XREF: .text:00403F14↑j
.text:00403F32                 test    ebx, ebx
.text:00403F34                 jz      short loc_403F16
.text:00403F36                 call    sub_4040F0
.text:00403F36 ; ---------------------------------------------------------------------------
.text:00403F3B                 align 10h
.text:00403F40
.text:00403F40 ; =============== S U B R O U T I N E =======================================
.text:00403F40
.text:00403F40
.text:00403F40 ; int __cdecl sub_403F40(void *, int, int)
.text:00403F40 sub_403F40      proc near               ; CODE XREF: sub_403DF0↑j
.text:00403F40                                         ; .text:00403E1A↑p
.text:00403F40
.text:00403F40 Block           = dword ptr -1Ch
.text:00403F40 Size            = dword ptr -18h
.text:00403F40 var_C           = dword ptr -0Ch
.text:00403F40 var_8           = dword ptr -8
.text:00403F40 var_4           = dword ptr -4
.text:00403F40 arg_0           = dword ptr  4
.text:00403F40 arg_4           = dword ptr  8
.text:00403F40 arg_8           = dword ptr  0Ch
.text:00403F40
.text:00403F40                 sub     esp, 1Ch
.text:00403F43                 mov     [esp+1Ch+var_8], esi
.text:00403F47                 mov     esi, [esp+1Ch+arg_0]
.text:00403F4B                 mov     [esp+1Ch+var_4], edi
.text:00403F4F                 mov     edi, [esp+1Ch+arg_4]
.text:00403F53                 test    esi, esi
.text:00403F55                 mov     [esp+1Ch+var_C], ebx
.text:00403F59                 mov     ecx, [edi]
.text:00403F5B                 mov     ebx, [esp+1Ch+arg_8]
.text:00403F5F                 jz      short loc_403FA0
.text:00403F61                 xor     edx, edx
.text:00403F63                 mov     eax, 7FFFFFFFh
.text:00403F68                 div     ebx
.text:00403F6A                 cmp     eax, ecx
.text:00403F6C                 jb      short loc_403F99
.text:00403F6E                 add     ecx, ecx
.text:00403F70
.text:00403F70 loc_403F70:                             ; CODE XREF: sub_403F40+62↓j
.text:00403F70                                         ; sub_403F40+71↓j ...
.text:00403F70                 mov     [edi], ecx
.text:00403F72                 imul    ebx, ecx
.text:00403F75                 mov     [esp+1Ch+Block], esi ; Block
.text:00403F78                 mov     [esp+1Ch+Size], ebx ; Size
.text:00403F7C                 call    realloc
.text:00403F81                 test    eax, eax
.text:00403F83                 jz      short loc_403F95
.text:00403F85
.text:00403F85 loc_403F85:                             ; CODE XREF: sub_403F40+57↓j
.text:00403F85                 mov     ebx, [esp+1Ch+var_C]
.text:00403F89                 mov     esi, [esp+1Ch+var_8]
.text:00403F8D                 mov     edi, [esp+1Ch+var_4]
.text:00403F91                 add     esp, 1Ch
.text:00403F94                 retn
.text:00403F95 ; ---------------------------------------------------------------------------
.text:00403F95
.text:00403F95 loc_403F95:                             ; CODE XREF: sub_403F40+43↑j
.text:00403F95                 test    ebx, ebx
.text:00403F97                 jz      short loc_403F85
.text:00403F99
.text:00403F99 loc_403F99:                             ; CODE XREF: sub_403F40+2C↑j
.text:00403F99                 call    sub_4040F0
.text:00403F99 ; ---------------------------------------------------------------------------
.text:00403F9E                 align 10h
.text:00403FA0
.text:00403FA0 loc_403FA0:                             ; CODE XREF: sub_403F40+1F↑j
.text:00403FA0                 test    ecx, ecx
.text:00403FA2                 jnz     short loc_403F70
.text:00403FA4                 xor     edx, edx
.text:00403FA6                 mov     eax, 40h ; '@'
.text:00403FAB                 div     ebx
.text:00403FAD                 test    eax, eax
.text:00403FAF                 mov     ecx, eax
.text:00403FB1                 jnz     short loc_403F70
.text:00403FB3                 mov     ecx, 1
.text:00403FB8                 jmp     short loc_403F70
.text:00403FB8 sub_403F40      endp
.text:00403FB8
.text:00403FB8 ; ---------------------------------------------------------------------------
.text:00403FBA                 align 10h
.text:00403FC0                 mov     edx, [esp+4]
.text:00403FC4                 mov     ds:dword_407080, edx
.text:00403FCA                 retn
.text:00403FCA ; ---------------------------------------------------------------------------
.text:00403FCB aWriteError     db 'write error',0      ; DATA XREF: sub_403FF0:loc_404039↓o
.text:00403FD7 ; const char aSS_0[]
.text:00403FD7 aSS_0           db '%s: %s',0           ; DATA XREF: sub_403FF0+77↓o
.text:00403FDE ; const char aS_2[]
.text:00403FDE aS_2            db '%s',0               ; DATA XREF: sub_403FF0+A0↓o
.text:00403FE1 ; ---------------------------------------------------------------------------
.text:00403FE1                 jmp     short sub_403FF0
.text:00403FE1 ; ---------------------------------------------------------------------------
.text:00403FE3                 align 10h
.text:00403FF0
.text:00403FF0 ; =============== S U B R O U T I N E =======================================
.text:00403FF0
.text:00403FF0
.text:00403FF0 ; void __cdecl sub_403FF0()
.text:00403FF0 sub_403FF0      proc near               ; CODE XREF: .text:00403FE1↑j
.text:00403FF0                                         ; DATA XREF: sub_401670+65↑o
.text:00403FF0
.text:00403FF0 Stream          = dword ptr -2Ch
.text:00403FF0 ErrorMessage    = dword ptr -28h
.text:00403FF0 var_24          = dword ptr -24h
.text:00403FF0 var_20          = byte ptr -20h
.text:00403FF0 var_1C          = dword ptr -1Ch
.text:00403FF0 var_9           = byte ptr -9
.text:00403FF0
.text:00403FF0                 push    esi
.text:00403FF1                 push    ebx
.text:00403FF2                 sub     esp, 24h
.text:00403FF5                 mov     edx, ds:_iob
.text:00403FFB                 mov     ecx, [edx+2Ch]
.text:00403FFE                 lea     esi, [edx+20h]
.text:00404001                 shr     ecx, 5
.text:00404004                 mov     bl, cl
.text:00404006                 mov     ecx, [edx+20h]
.text:00404009                 and     bl, 1
.text:0040400C                 cmp     ecx, [esi+8]
.text:0040400F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404012                 setz    [esp+2Ch+var_9]
.text:00404017                 call    fclose
.text:0040401C                 test    eax, eax
.text:0040401E                 setnz   al
.text:00404021                 test    bl, bl
.text:00404023                 jnz     loc_4040B3
.text:00404029                 test    al, al
.text:0040402B                 jz      short loc_404080
.text:0040402D
.text:0040402D loc_40402D:                             ; CODE XREF: sub_403FF0+CD↓j
.text:0040402D                 call    _errno
.text:00404032                 mov     esi, [eax]
.text:00404034
.text:00404034 loc_404034:                             ; CODE XREF: sub_403FF0+C7↓j
.text:00404034                 cmp     esi, 9
.text:00404037                 jz      short loc_4040A6
.text:00404039
.text:00404039 loc_404039:                             ; CODE XREF: sub_403FF0+B8↓j
.text:00404039                                         ; sub_403FF0+C1↓j
.text:00404039                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00404040                 call    ds:libintl_gettext
.text:00404046                 mov     ebx, eax
.text:00404048                 mov     eax, ds:dword_407080
.text:0040404D                 test    eax, eax
.text:0040404F                 jz      short loc_404086
.text:00404051                 mov     [esp+2Ch+Stream], eax ; char *
.text:00404054                 call    sub_405260
.text:00404059                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040405D                 mov     edx, Code
.text:00404063                 mov     [esp+2Ch+var_1C], ebx
.text:00404067                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:0040406F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00404073                 mov     [esp+2Ch+Stream], edx ; Code
.text:00404076                 call    sub_405520
.text:0040407B                 nop
.text:0040407C                 lea     esi, [esi+0]
.text:00404080
.text:00404080 loc_404080:                             ; CODE XREF: sub_403FF0+3B↑j
.text:00404080                                         ; sub_403FF0+B4↓j ...
.text:00404080                 add     esp, 24h
.text:00404083                 pop     ebx
.text:00404084                 pop     esi
.text:00404085                 retn
.text:00404086 ; ---------------------------------------------------------------------------
.text:00404086
.text:00404086 loc_404086:                             ; CODE XREF: sub_403FF0+5F↑j
.text:00404086                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040408A                 mov     ebx, Code
.text:00404090                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:00404098                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040409C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040409F                 call    sub_405520
.text:004040A4                 jmp     short loc_404080
.text:004040A6 ; ---------------------------------------------------------------------------
.text:004040A6
.text:004040A6 loc_4040A6:                             ; CODE XREF: sub_403FF0+47↑j
.text:004040A6                 test    bl, bl
.text:004040A8                 jnz     short loc_404039
.text:004040AA                 cmp     [esp+2Ch+var_9], 0
.text:004040AF                 jnz     short loc_404080
.text:004040B1                 jmp     short loc_404039
.text:004040B3 ; ---------------------------------------------------------------------------
.text:004040B3
.text:004040B3 loc_4040B3:                             ; CODE XREF: sub_403FF0+33↑j
.text:004040B3                 xor     esi, esi
.text:004040B5                 test    al, al
.text:004040B7                 jz      loc_404034
.text:004040BD                 jmp     loc_40402D
.text:004040BD sub_403FF0      endp
.text:004040BD
.text:004040BD ; ---------------------------------------------------------------------------
.text:004040C2                 align 10h
.text:004040D0 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_4040F0+3↓o
.text:004040E1 ; const char aS[]
.text:004040E1 aS              db '%s',0               ; DATA XREF: sub_4040F0+10↓o
.text:004040E4                 align 10h
.text:004040F0
.text:004040F0 ; =============== S U B R O U T I N E =======================================
.text:004040F0
.text:004040F0 ; Attributes: noreturn
.text:004040F0
.text:004040F0 sub_4040F0      proc near               ; CODE XREF: .text:loc_403D29↑p
.text:004040F0                                         ; sub_403D30+24↑p ...
.text:004040F0
.text:004040F0 Code            = dword ptr -1Ch
.text:004040F0 ErrorMessage    = dword ptr -18h
.text:004040F0 var_14          = dword ptr -14h
.text:004040F0 var_10          = byte ptr -10h
.text:004040F0
.text:004040F0                 sub     esp, 1Ch
.text:004040F3                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:004040FA                 call    ds:libintl_gettext
.text:00404100                 mov     [esp+1Ch+var_14], offset aS ; "%s"
.text:00404108                 mov     edx, Code
.text:0040410E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00404116                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040411A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040411D                 call    sub_405520
.text:00404122                 call    abort
.text:00404122 sub_4040F0      endp
.text:00404122
.text:00404122 ; ---------------------------------------------------------------------------
.text:00404127                 align 10h
.text:00404130 aLiteral        db 'literal',0          ; DATA XREF: .text:00404170↓o
.text:00404138 aShell          db 'shell',0            ; DATA XREF: .text:00404174↓o
.text:0040413E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00404178↓o
.text:0040414B aC              db 'c',0                ; DATA XREF: .text:0040417C↓o
.text:0040414D aEscape         db 'escape',0           ; DATA XREF: .text:00404180↓o
.text:00404154 aLocale         db 'locale',0           ; DATA XREF: .text:00404184↓o
.text:0040415B aClocale        db 'clocale',0          ; DATA XREF: .text:00404188↓o
.text:00404163                 align 10h
.text:00404170                 dd offset aLiteral      ; "literal"
.text:00404174                 dd offset aShell        ; "shell"
.text:00404178                 dd offset aShellAlways  ; "shell-always"
.text:0040417C                 dd offset aC            ; "c"
.text:00404180                 dd offset aEscape       ; "escape"
.text:00404184                 dd offset aLocale       ; "locale"
.text:00404188                 dd offset aClocale      ; "clocale"
.text:0040418C                 dd 2 dup(0)
.text:00404194                 dd 1, 2, 3, 4, 5, 6
.text:004041AC asc_4041AC:                             ; DATA XREF: sub_4041C0+7E↓o
.text:004041AC                                         ; sub_4041C0+A39↓o ...
.text:004041AC                 text "UTF-16LE", '"',27h,'`'
.text:004041B2                 align 10h
.text:004041C0
.text:004041C0 ; =============== S U B R O U T I N E =======================================
.text:004041C0
.text:004041C0
.text:004041C0 ; int __cdecl sub_4041C0(int, int, char *Str, int, int, int)
.text:004041C0 sub_4041C0      proc near               ; CODE XREF: sub_4041C0+43A↓p
.text:004041C0                                         ; .text:00404D83↓p ...
.text:004041C0
.text:004041C0 C               = dword ptr -4Ch
.text:004041C0 Type            = dword ptr -48h
.text:004041C0 SizeInBytes     = dword ptr -44h
.text:004041C0 State           = dword ptr -40h
.text:004041C0 var_3C          = dword ptr -3Ch
.text:004041C0 var_38          = dword ptr -38h
.text:004041C0 var_34          = dword ptr -34h
.text:004041C0 var_30          = dword ptr -30h
.text:004041C0 var_29          = byte ptr -29h
.text:004041C0 var_28          = dword ptr -28h
.text:004041C0 var_22          = byte ptr -22h
.text:004041C0 var_21          = byte ptr -21h
.text:004041C0 var_20          = dword ptr -20h
.text:004041C0 var_1C          = dword ptr -1Ch
.text:004041C0 var_18          = mbstate_t ptr -18h
.text:004041C0 arg_0           = dword ptr  4
.text:004041C0 arg_4           = dword ptr  8
.text:004041C0 Str             = dword ptr  0Ch
.text:004041C0 arg_C           = dword ptr  10h
.text:004041C0 arg_10          = dword ptr  14h
.text:004041C0 arg_14          = dword ptr  18h
.text:004041C0
.text:004041C0                 push    ebp
.text:004041C1                 push    edi
.text:004041C2                 push    esi
.text:004041C3                 push    ebx
.text:004041C4                 sub     esp, 3Ch
.text:004041C7                 mov     edx, ds:__mb_cur_max
.text:004041CD                 mov     [esp+4Ch+var_34], 0
.text:004041D5                 mov     [esp+4Ch+var_1C], 0
.text:004041DD                 cmp     dword ptr [edx], 1
.text:004041E0                 mov     [esp+4Ch+var_20], 0
.text:004041E8                 mov     [esp+4Ch+var_21], 0
.text:004041ED                 setz    [esp+4Ch+var_22]
.text:004041F2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:004041F7                 ja      short def_4041FD ; jumptable 004041FD default case, cases 0,1
.text:004041F9                 mov     edx, [esp+4Ch+arg_10]
.text:004041FD                 jmp     ds:jpt_4041FD[edx*4] ; switch jump
.text:004041FD ; ---------------------------------------------------------------------------
.text:00404204 jpt_4041FD      dd offset def_4041FD    ; DATA XREF: sub_4041C0+3D↑r
.text:00404204                 dd offset def_4041FD    ; jump table for switch statement
.text:00404204                 dd offset loc_404B45
.text:00404204                 dd offset loc_404220
.text:00404204                 dd offset loc_404B6B
.text:00404204                 dd offset loc_404B75
.text:00404204                 dd offset loc_404B75
.text:00404220 ; ---------------------------------------------------------------------------
.text:00404220
.text:00404220 loc_404220:                             ; CODE XREF: sub_4041C0+3D↑j
.text:00404220                                         ; DATA XREF: sub_4041C0:jpt_4041FD↑o
.text:00404220                 mov     eax, [esp+4Ch+arg_4] ; jumptable 004041FD case 3
.text:00404224                 cmp     [esp+4Ch+var_34], eax
.text:00404228                 jnb     short loc_404231
.text:0040422A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040422E                 mov     byte ptr [ebx], 22h ; '"'
.text:00404231
.text:00404231 loc_404231:                             ; CODE XREF: sub_4041C0+68↑j
.text:00404231                 mov     [esp+4Ch+var_34], 1
.text:00404239                 mov     [esp+4Ch+var_21], 1
.text:0040423E                 mov     [esp+4Ch+var_1C], offset asc_4041AC ; "\"'`"
.text:00404246
.text:00404246 loc_404246:                             ; CODE XREF: sub_4041C0+9A6↓j
.text:00404246                 mov     [esp+4Ch+var_20], 1
.text:0040424E
.text:0040424E def_4041FD:                             ; CODE XREF: sub_4041C0+37↑j
.text:0040424E                                         ; sub_4041C0+3D↑j ...
.text:0040424E                 xor     ebp, ebp        ; jumptable 004041FD default case, cases 0,1
.text:00404250
.text:00404250 loc_404250:                             ; CODE XREF: sub_4041C0+3DB↓j
.text:00404250                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404255                 jz      loc_404B37
.text:0040425B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040425F
.text:0040425F loc_40425F:                             ; CODE XREF: sub_4041C0+980↓j
.text:0040425F                 jz      loc_404ACE
.text:00404265                 cmp     [esp+4Ch+var_21], 0
.text:0040426A                 jz      short loc_4042B0
.text:0040426C                 mov     esi, [esp+4Ch+var_20]
.text:00404270                 test    esi, esi
.text:00404272                 jz      short loc_4042B0
.text:00404274                 mov     ecx, [esp+4Ch+var_20]
.text:00404278                 lea     edi, [ecx+ebp]
.text:0040427B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040427F                 ja      short loc_4042B0
.text:00404281                 cld
.text:00404282                 mov     ebx, [esp+4Ch+Str]
.text:00404286                 mov     edi, [esp+4Ch+var_1C]
.text:0040428A                 add     ebx, ebp
.text:0040428C                 mov     esi, ebx
.text:0040428E                 cmp     ecx, ecx
.text:00404290                 repe cmpsb
.text:00404292                 jnz     short loc_4042B0
.text:00404294                 mov     edx, [esp+4Ch+arg_4]
.text:00404298                 cmp     [esp+4Ch+var_34], edx
.text:0040429C                 jnb     short loc_4042AA
.text:0040429E                 mov     ecx, [esp+4Ch+arg_0]
.text:004042A2                 mov     eax, [esp+4Ch+var_34]
.text:004042A6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:004042AA
.text:004042AA loc_4042AA:                             ; CODE XREF: sub_4041C0+DC↑j
.text:004042AA                 inc     [esp+4Ch+var_34]
.text:004042AE                 mov     esi, esi
.text:004042B0
.text:004042B0 loc_4042B0:                             ; CODE XREF: sub_4041C0+AA↑j
.text:004042B0                                         ; sub_4041C0+B2↑j ...
.text:004042B0                 mov     edi, [esp+4Ch+Str]
.text:004042B4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:004042B9                 movzx   eax, bl
.text:004042BC                 cmp     eax, 7Eh        ; switch 127 cases
.text:004042BF                 ja      def_4042C5      ; jumptable 004042C5 default case, cases 1-6,14-31,64
.text:004042C5                 jmp     ds:jpt_4042C5[eax*4] ; switch jump
.text:004042C5 ; ---------------------------------------------------------------------------
.text:004042CC jpt_4042C5      dd offset loc_4044C8, offset def_4042C5, offset def_4042C5
.text:004042CC                                         ; DATA XREF: sub_4041C0+105↑r
.text:004042CC                 dd offset def_4042C5, offset def_4042C5, offset def_4042C5 ; jump table for switch statement
.text:004042CC                 dd offset def_4042C5, offset loc_4045A0, offset loc_4045BE
.text:004042CC                 dd offset loc_4045C2, offset loc_404607, offset loc_40460B
.text:004042CC                 dd offset loc_40460F, offset loc_404613, offset def_4042C5
.text:004042CC                 dd offset def_4042C5, offset def_4042C5, offset def_4042C5
.text:004042CC                 dd offset def_4042C5, offset def_4042C5, offset def_4042C5
.text:004042CC                 dd offset def_4042C5, offset def_4042C5, offset def_4042C5
.text:004042CC                 dd offset def_4042C5, offset def_4042C5, offset def_4042C5
.text:004042CC                 dd offset def_4042C5, offset def_4042C5, offset def_4042C5
.text:004042CC                 dd offset def_4042C5, offset def_4042C5, offset loc_404A98
.text:004042CC                 dd offset loc_404A98, offset loc_404A98, offset loc_404ABA
.text:004042CC                 dd offset loc_404A98, offset def_4046C2, offset loc_404A98
.text:004042CC                 dd offset loc_404617, offset loc_404A98, offset loc_404A98
.text:004042CC                 dd offset loc_404A98, offset def_4046C2, offset def_4046C2
.text:004042CC                 dd offset def_4046C2, offset def_4046C2, offset def_4046C2
.text:004042CC                 dd offset def_4046C2, offset def_4046C2, offset def_4046C2
.text:004042CC                 dd offset def_4046C2, offset def_4046C2, offset def_4046C2
.text:004042CC                 dd offset def_4046C2, offset def_4046C2, offset def_4046C2
.text:004042CC                 dd offset def_4046C2, offset def_4046C2, offset loc_404A98
.text:004042CC                 dd offset loc_404A98, offset loc_404A98, offset loc_404A98
.text:004042CC                 dd offset loc_40467C, offset def_4042C5, offset def_4046C2
.text:004042CC                 dd offset def_4046C2, offset def_4046C2, offset def_4046C2
.text:004042CC                 dd offset def_4046C2, offset def_4046C2, offset def_4046C2
.text:004042CC                 dd offset def_4046C2, offset def_4046C2, offset def_4046C2
.text:004042CC                 dd offset def_4046C2, offset def_4046C2, offset def_4046C2
.text:004042CC                 dd offset def_4046C2, offset def_4046C2, offset def_4046C2
.text:004042CC                 dd offset def_4046C2, offset def_4046C2, offset def_4046C2
.text:004042CC                 dd offset def_4046C2, offset def_4046C2, offset def_4046C2
.text:004042CC                 dd offset def_4046C2, offset def_4046C2, offset def_4046C2
.text:004042CC                 dd offset def_4046C2, offset loc_404A98, offset loc_404A91
.text:004042CC                 dd offset def_4046C2, offset loc_404A98, offset def_4046C2
.text:004042CC                 dd offset loc_404A98, offset def_4046C2, offset def_4046C2
.text:004042CC                 dd offset def_4046C2, offset def_4046C2, offset def_4046C2
.text:004042CC                 dd offset def_4046C2, offset def_4046C2, offset def_4046C2
.text:004042CC                 dd offset def_4046C2, offset def_4046C2, offset def_4046C2
.text:004042CC                 dd offset def_4046C2, offset def_4046C2, offset def_4046C2
.text:004042CC                 dd offset def_4046C2, offset def_4046C2, offset def_4046C2
.text:004042CC                 dd offset def_4046C2, offset def_4046C2, offset def_4046C2
.text:004042CC                 dd offset def_4046C2, offset def_4046C2, offset def_4046C2
.text:004042CC                 dd offset def_4046C2, offset def_4046C2, offset def_4046C2
.text:004042CC                 dd offset loc_404AA8, offset loc_404A98, offset loc_404AA8
.text:004042CC                 dd offset loc_404ABA
.text:004044C8 ; ---------------------------------------------------------------------------
.text:004044C8
.text:004044C8 loc_4044C8:                             ; CODE XREF: sub_4041C0+105↑j
.text:004044C8                                         ; DATA XREF: sub_4041C0:jpt_4042C5↑o
.text:004044C8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004042C5 case 0
.text:004044CD                 lea     eax, [ebp+1]
.text:004044D0                 jz      loc_404580
.text:004044D6                 mov     esi, [esp+4Ch+arg_4]
.text:004044DA                 cmp     [esp+4Ch+var_34], esi
.text:004044DE                 jnb     short loc_4044EC
.text:004044E0                 mov     eax, [esp+4Ch+arg_0]
.text:004044E4                 mov     ebx, [esp+4Ch+var_34]
.text:004044E8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:004044EC
.text:004044EC loc_4044EC:                             ; CODE XREF: sub_4041C0+31E↑j
.text:004044EC                 inc     [esp+4Ch+var_34]
.text:004044F0                 mov     edx, [esp+4Ch+arg_4]
.text:004044F4                 cmp     [esp+4Ch+var_34], edx
.text:004044F8                 jnb     short loc_404506
.text:004044FA                 mov     edi, [esp+4Ch+arg_0]
.text:004044FE                 mov     ecx, [esp+4Ch+var_34]
.text:00404502                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00404506
.text:00404506 loc_404506:                             ; CODE XREF: sub_4041C0+338↑j
.text:00404506                 inc     [esp+4Ch+var_34]
.text:0040450A                 mov     esi, [esp+4Ch+arg_4]
.text:0040450E                 cmp     [esp+4Ch+var_34], esi
.text:00404512                 jnb     short loc_404520
.text:00404514                 mov     ebx, [esp+4Ch+arg_0]
.text:00404518                 mov     eax, [esp+4Ch+var_34]
.text:0040451C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00404520
.text:00404520 loc_404520:                             ; CODE XREF: sub_4041C0+352↑j
.text:00404520                 inc     [esp+4Ch+var_34]
.text:00404524                 mov     bl, 30h ; '0'
.text:00404526                 lea     esi, [esi+0]
.text:00404529                 lea     edi, [edi+0]
.text:00404530
.text:00404530 def_4046C2:                             ; CODE XREF: sub_4041C0+105↑j
.text:00404530                                         ; sub_4041C0+463↓j ...
.text:00404530                 cmp     [esp+4Ch+var_21], 0 ; jumptable 004042C5 cases 37,43-58,65-90,93,95,97-122
.text:00404530                                         ; jumptable 004046C2 default case, cases 34-38,42-44,46,48-59
.text:00404535                 lea     eax, [ebp+1]
.text:00404538                 jz      short loc_404580
.text:0040453A                 mov     cl, bl
.text:0040453C                 mov     edi, [esp+4Ch+arg_14]
.text:00404540                 mov     esi, 1
.text:00404545                 shr     cl, 5
.text:00404548                 movzx   edx, cl
.text:0040454B                 mov     ecx, ebx
.text:0040454D                 and     ecx, 1Fh
.text:00404550                 shl     esi, cl
.text:00404552                 test    [edi+edx*4+4], esi
.text:00404556                 jz      short loc_404572
.text:00404558
.text:00404558 loc_404558:                             ; CODE XREF: sub_4041C0+3FC↓j
.text:00404558                 mov     edx, [esp+4Ch+arg_4]
.text:0040455C                 cmp     [esp+4Ch+var_34], edx
.text:00404560                 jnb     short loc_40456E
.text:00404562                 mov     edi, [esp+4Ch+arg_0]
.text:00404566                 mov     esi, [esp+4Ch+var_34]
.text:0040456A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040456E
.text:0040456E loc_40456E:                             ; CODE XREF: sub_4041C0+3A0↑j
.text:0040456E                 inc     [esp+4Ch+var_34]
.text:00404572
.text:00404572 loc_404572:                             ; CODE XREF: sub_4041C0+396↑j
.text:00404572                 lea     eax, [ebp+1]
.text:00404575                 lea     esi, [esi+0]
.text:00404579                 lea     edi, [edi+0]
.text:00404580
.text:00404580 loc_404580:                             ; CODE XREF: sub_4041C0+310↑j
.text:00404580                                         ; sub_4041C0+378↑j ...
.text:00404580                 mov     ebp, [esp+4Ch+arg_4]
.text:00404584                 cmp     [esp+4Ch+var_34], ebp
.text:00404588                 jnb     short loc_404595
.text:0040458A                 mov     edx, [esp+4Ch+arg_0]
.text:0040458E                 mov     ecx, [esp+4Ch+var_34]
.text:00404592                 mov     [ecx+edx], bl
.text:00404595
.text:00404595 loc_404595:                             ; CODE XREF: sub_4041C0+3C8↑j
.text:00404595                 inc     [esp+4Ch+var_34]
.text:00404599                 mov     ebp, eax
.text:0040459B                 jmp     loc_404250
.text:004045A0 ; ---------------------------------------------------------------------------
.text:004045A0
.text:004045A0 loc_4045A0:                             ; CODE XREF: sub_4041C0+105↑j
.text:004045A0                                         ; DATA XREF: sub_4041C0:jpt_4042C5↑o
.text:004045A0                 mov     dl, 61h ; 'a'   ; jumptable 004042C5 case 7
.text:004045A2                 lea     esi, [esi+0]
.text:004045A9                 lea     edi, [edi+0]
.text:004045B0
.text:004045B0 loc_4045B0:                             ; CODE XREF: sub_4041C0+400↓j
.text:004045B0                                         ; sub_4041C0+409↓j ...
.text:004045B0                 cmp     [esp+4Ch+var_21], 0
.text:004045B5                 lea     eax, [ebp+1]
.text:004045B8                 jz      short loc_404580
.text:004045BA                 mov     bl, dl
.text:004045BC                 jmp     short loc_404558
.text:004045BE ; ---------------------------------------------------------------------------
.text:004045BE
.text:004045BE loc_4045BE:                             ; CODE XREF: sub_4041C0+105↑j
.text:004045BE                                         ; DATA XREF: sub_4041C0:jpt_4042C5↑o
.text:004045BE                 mov     dl, 62h ; 'b'   ; jumptable 004042C5 case 8
.text:004045C0                 jmp     short loc_4045B0
.text:004045C2 ; ---------------------------------------------------------------------------
.text:004045C2
.text:004045C2 loc_4045C2:                             ; CODE XREF: sub_4041C0+105↑j
.text:004045C2                                         ; DATA XREF: sub_4041C0:jpt_4042C5↑o
.text:004045C2                 mov     dl, 74h ; 't'   ; jumptable 004042C5 case 9
.text:004045C4
.text:004045C4 loc_4045C4:                             ; CODE XREF: sub_4041C0+449↓j
.text:004045C4                                         ; sub_4041C0+455↓j ...
.text:004045C4                 cmp     [esp+4Ch+arg_10], 1
.text:004045C9                 jnz     short loc_4045B0
.text:004045CB
.text:004045CB loc_4045CB:                             ; CODE XREF: sub_4041C0+45C↓j
.text:004045CB                                         ; sub_4041C0+4C1↓j ...
.text:004045CB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00404992 cases 91,92,94,96,124
.text:004045D3                 mov     eax, [esp+4Ch+arg_14]
.text:004045D7                 mov     edx, [esp+4Ch+arg_C]
.text:004045DB                 mov     ecx, [esp+4Ch+Str]
.text:004045DF                 mov     ebx, [esp+4Ch+arg_4]
.text:004045E3                 mov     [esp+4Ch+var_38], eax ; int
.text:004045E7                 mov     ebp, [esp+4Ch+arg_0]
.text:004045EB                 mov     [esp+4Ch+State], edx ; int
.text:004045EF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:004045F3                 mov     [esp+4Ch+Type], ebx ; int
.text:004045F7                 mov     [esp+4Ch+C], ebp ; int
.text:004045FA                 call    sub_4041C0
.text:004045FF
.text:004045FF loc_4045FF:                             ; CODE XREF: sub_4041C0+972↓j
.text:004045FF                 add     esp, 3Ch
.text:00404602                 pop     ebx
.text:00404603                 pop     esi
.text:00404604                 pop     edi
.text:00404605                 pop     ebp
.text:00404606                 retn
.text:00404607 ; ---------------------------------------------------------------------------
.text:00404607
.text:00404607 loc_404607:                             ; CODE XREF: sub_4041C0+105↑j
.text:00404607                                         ; DATA XREF: sub_4041C0:jpt_4042C5↑o
.text:00404607                 mov     dl, 6Eh ; 'n'   ; jumptable 004042C5 case 10
.text:00404609                 jmp     short loc_4045C4
.text:0040460B ; ---------------------------------------------------------------------------
.text:0040460B
.text:0040460B loc_40460B:                             ; CODE XREF: sub_4041C0+105↑j
.text:0040460B                                         ; DATA XREF: sub_4041C0:jpt_4042C5↑o
.text:0040460B                 mov     dl, 76h ; 'v'   ; jumptable 004042C5 case 11
.text:0040460D                 jmp     short loc_4045B0
.text:0040460F ; ---------------------------------------------------------------------------
.text:0040460F
.text:0040460F loc_40460F:                             ; CODE XREF: sub_4041C0+105↑j
.text:0040460F                                         ; DATA XREF: sub_4041C0:jpt_4042C5↑o
.text:0040460F                 mov     dl, 66h ; 'f'   ; jumptable 004042C5 case 12
.text:00404611                 jmp     short loc_4045B0
.text:00404613 ; ---------------------------------------------------------------------------
.text:00404613
.text:00404613 loc_404613:                             ; CODE XREF: sub_4041C0+105↑j
.text:00404613                                         ; DATA XREF: sub_4041C0:jpt_4042C5↑o
.text:00404613                 mov     dl, 72h ; 'r'   ; jumptable 004042C5 case 13
.text:00404615                 jmp     short loc_4045C4
.text:00404617 ; ---------------------------------------------------------------------------
.text:00404617
.text:00404617 loc_404617:                             ; CODE XREF: sub_4041C0+105↑j
.text:00404617                                         ; DATA XREF: sub_4041C0:jpt_4042C5↑o
.text:00404617                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004042C5 case 39
.text:0040461C                 jz      short loc_4045CB ; jumptable 00404992 cases 91,92,94,96,124
.text:0040461E                 cmp     [esp+4Ch+arg_10], 2
.text:00404623                 jnz     def_4046C2      ; jumptable 004042C5 cases 37,43-58,65-90,93,95,97-122
.text:00404623                                         ; jumptable 004046C2 default case, cases 34-38,42-44,46,48-59
.text:00404629                 mov     edx, [esp+4Ch+arg_4]
.text:0040462D                 cmp     [esp+4Ch+var_34], edx
.text:00404631                 jnb     short loc_40463F
.text:00404633                 mov     ecx, [esp+4Ch+arg_0]
.text:00404637                 mov     edi, [esp+4Ch+var_34]
.text:0040463B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040463F
.text:0040463F loc_40463F:                             ; CODE XREF: sub_4041C0+471↑j
.text:0040463F                 inc     [esp+4Ch+var_34]
.text:00404643                 mov     eax, [esp+4Ch+arg_4]
.text:00404647                 cmp     [esp+4Ch+var_34], eax
.text:0040464B                 jnb     short loc_404659
.text:0040464D                 mov     esi, [esp+4Ch+arg_0]
.text:00404651                 mov     edx, [esp+4Ch+var_34]
.text:00404655                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00404659
.text:00404659 loc_404659:                             ; CODE XREF: sub_4041C0+48B↑j
.text:00404659                 inc     [esp+4Ch+var_34]
.text:0040465D                 mov     edi, [esp+4Ch+arg_4]
.text:00404661                 cmp     [esp+4Ch+var_34], edi
.text:00404665                 jnb     short loc_404673
.text:00404667                 mov     ecx, [esp+4Ch+arg_0]
.text:0040466B                 mov     eax, [esp+4Ch+var_34]
.text:0040466F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00404673
.text:00404673 loc_404673:                             ; CODE XREF: sub_4041C0+4A5↑j
.text:00404673                                         ; sub_4041C0+5C4↓j ...
.text:00404673                 inc     [esp+4Ch+var_34]
.text:00404677                 jmp     def_4046C2      ; jumptable 004042C5 cases 37,43-58,65-90,93,95,97-122
.text:00404677                                         ; jumptable 004046C2 default case, cases 34-38,42-44,46,48-59
.text:0040467C ; ---------------------------------------------------------------------------
.text:0040467C
.text:0040467C loc_40467C:                             ; CODE XREF: sub_4041C0+105↑j
.text:0040467C                                         ; DATA XREF: sub_4041C0:jpt_4042C5↑o
.text:0040467C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004042C5 case 63
.text:00404681                 jz      loc_4045CB      ; jumptable 00404992 cases 91,92,94,96,124
.text:00404687                 cmp     [esp+4Ch+arg_10], 3
.text:0040468C                 jnz     def_4046C2      ; jumptable 004042C5 cases 37,43-58,65-90,93,95,97-122
.text:0040468C                                         ; jumptable 004046C2 default case, cases 34-38,42-44,46,48-59
.text:00404692                 lea     edx, [ebp+2]
.text:00404695                 cmp     edx, [esp+4Ch+arg_C]
.text:00404699                 jnb     def_4046C2      ; jumptable 004042C5 cases 37,43-58,65-90,93,95,97-122
.text:00404699                                         ; jumptable 004046C2 default case, cases 34-38,42-44,46,48-59
.text:0040469F                 mov     esi, [esp+4Ch+Str]
.text:004046A3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:004046A8                 jnz     def_4046C2      ; jumptable 004042C5 cases 37,43-58,65-90,93,95,97-122
.text:004046A8                                         ; jumptable 004046C2 default case, cases 34-38,42-44,46,48-59
.text:004046AE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:004046B3                 movsx   eax, cl
.text:004046B6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:004046B9                 cmp     eax, 1Dh
.text:004046BC                 ja      def_4046C2      ; jumptable 004042C5 cases 37,43-58,65-90,93,95,97-122
.text:004046BC                                         ; jumptable 004046C2 default case, cases 34-38,42-44,46,48-59
.text:004046C2                 jmp     ds:jpt_4046C2[eax*4] ; switch jump
.text:004046C2 ; ---------------------------------------------------------------------------
.text:004046C9                 align 4
.text:004046CC jpt_4046C2      dd offset loc_404744    ; DATA XREF: sub_4041C0+502↑r
.text:004046CC                 dd offset def_4046C2    ; jump table for switch statement
.text:004046CC                 dd offset def_4046C2
.text:004046CC                 dd offset def_4046C2
.text:004046CC                 dd offset def_4046C2
.text:004046CC                 dd offset def_4046C2
.text:004046CC                 dd offset loc_404744
.text:004046CC                 dd offset loc_404744
.text:004046CC                 dd offset loc_404744
.text:004046CC                 dd offset def_4046C2
.text:004046CC                 dd offset def_4046C2
.text:004046CC                 dd offset def_4046C2
.text:004046CC                 dd offset loc_404744
.text:004046CC                 dd offset def_4046C2
.text:004046CC                 dd offset loc_404744
.text:004046CC                 dd offset def_4046C2
.text:004046CC                 dd offset def_4046C2
.text:004046CC                 dd offset def_4046C2
.text:004046CC                 dd offset def_4046C2
.text:004046CC                 dd offset def_4046C2
.text:004046CC                 dd offset def_4046C2
.text:004046CC                 dd offset def_4046C2
.text:004046CC                 dd offset def_4046C2
.text:004046CC                 dd offset def_4046C2
.text:004046CC                 dd offset def_4046C2
.text:004046CC                 dd offset def_4046C2
.text:004046CC                 dd offset def_4046C2
.text:004046CC                 dd offset loc_404744
.text:004046CC                 dd offset loc_404744
.text:004046CC                 dd offset loc_404744
.text:00404744 ; ---------------------------------------------------------------------------
.text:00404744
.text:00404744 loc_404744:                             ; CODE XREF: sub_4041C0+502↑j
.text:00404744                                         ; DATA XREF: sub_4041C0:jpt_4046C2↑o
.text:00404744                 mov     ebp, edx        ; jumptable 004046C2 cases 33,39-41,45,47,60-62
.text:00404746                 mov     bl, cl
.text:00404748                 mov     edx, [esp+4Ch+arg_4]
.text:0040474C                 cmp     [esp+4Ch+var_34], edx
.text:00404750                 jnb     short loc_40475E
.text:00404752                 mov     ecx, [esp+4Ch+arg_0]
.text:00404756                 mov     edi, [esp+4Ch+var_34]
.text:0040475A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040475E
.text:0040475E loc_40475E:                             ; CODE XREF: sub_4041C0+590↑j
.text:0040475E                 inc     [esp+4Ch+var_34]
.text:00404762                 mov     eax, [esp+4Ch+arg_4]
.text:00404766                 cmp     [esp+4Ch+var_34], eax
.text:0040476A                 jnb     short loc_404778
.text:0040476C                 mov     edx, [esp+4Ch+arg_0]
.text:00404770                 mov     esi, [esp+4Ch+var_34]
.text:00404774                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00404778
.text:00404778 loc_404778:                             ; CODE XREF: sub_4041C0+5AA↑j
.text:00404778                 inc     [esp+4Ch+var_34]
.text:0040477C                 mov     edi, [esp+4Ch+arg_4]
.text:00404780                 cmp     [esp+4Ch+var_34], edi
.text:00404784                 jnb     loc_404673
.text:0040478A                 mov     eax, [esp+4Ch+arg_0]
.text:0040478E                 mov     ecx, [esp+4Ch+var_34]
.text:00404792                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00404796                 jmp     loc_404673
.text:00404796 ; ---------------------------------------------------------------------------
.text:0040479B                 align 10h
.text:004047A0
.text:004047A0 def_4042C5:                             ; CODE XREF: sub_4041C0+FF↑j
.text:004047A0                                         ; sub_4041C0+105↑j
.text:004047A0                                         ; DATA XREF: ...
.text:004047A0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 004042C5 default case, cases 1-6,14-31,64
.text:004047A5                 jz      loc_4048D0
.text:004047AB                 mov     [esp+4Ch+var_28], 1
.text:004047B3                 mov     esi, ds:__mb_cur_max
.text:004047B9                 movzx   edx, bl
.text:004047BC                 cmp     dword ptr [esi], 1
.text:004047BF                 jz      loc_4048B4
.text:004047C5                 mov     [esp+4Ch+Type], 157h ; Type
.text:004047CD                 mov     [esp+4Ch+C], edx ; C
.text:004047D0                 call    _isctype
.text:004047D5
.text:004047D5 loc_4047D5:                             ; CODE XREF: sub_4041C0+705↓j
.text:004047D5                 test    eax, eax
.text:004047D7                 setnz   [esp+4Ch+var_29]
.text:004047DC
.text:004047DC loc_4047DC:                             ; CODE XREF: sub_4041C0+7A5↓j
.text:004047DC                 cmp     [esp+4Ch+var_21], 0
.text:004047E1                 lea     eax, [ebp+1]
.text:004047E4                 jz      loc_404580
.text:004047EA                 cmp     [esp+4Ch+var_29], 0
.text:004047EF                 jnz     def_4046C2      ; jumptable 004042C5 cases 37,43-58,65-90,93,95,97-122
.text:004047EF                                         ; jumptable 004046C2 default case, cases 34-38,42-44,46,48-59
.text:004047F5
.text:004047F5 loc_4047F5:                             ; CODE XREF: sub_4041C0+7AB↓j
.text:004047F5                 mov     eax, [esp+4Ch+var_28]
.text:004047F9                 lea     edx, [eax+ebp]
.text:004047FC                 lea     esi, [esi+0]
.text:00404800
.text:00404800 loc_404800:                             ; CODE XREF: sub_4041C0+6EF↓j
.text:00404800                 cmp     [esp+4Ch+var_21], 0
.text:00404805                 jz      short loc_404880
.text:00404807                 cmp     [esp+4Ch+var_29], 0
.text:0040480C                 jnz     short loc_404880
.text:0040480E                 mov     edi, [esp+4Ch+arg_4]
.text:00404812                 cmp     [esp+4Ch+var_34], edi
.text:00404816                 jnb     short loc_404824
.text:00404818                 mov     esi, [esp+4Ch+arg_0]
.text:0040481C                 mov     eax, [esp+4Ch+var_34]
.text:00404820                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00404824
.text:00404824 loc_404824:                             ; CODE XREF: sub_4041C0+656↑j
.text:00404824                 inc     [esp+4Ch+var_34]
.text:00404828                 mov     ecx, [esp+4Ch+arg_4]
.text:0040482C                 cmp     [esp+4Ch+var_34], ecx
.text:00404830                 jnb     short loc_404845
.text:00404832                 mov     cl, bl
.text:00404834                 mov     esi, [esp+4Ch+arg_0]
.text:00404838                 mov     edi, [esp+4Ch+var_34]
.text:0040483C                 shr     cl, 6
.text:0040483F                 add     cl, 30h ; '0'
.text:00404842                 mov     [edi+esi], cl
.text:00404845
.text:00404845 loc_404845:                             ; CODE XREF: sub_4041C0+670↑j
.text:00404845                 inc     [esp+4Ch+var_34]
.text:00404849                 mov     edi, [esp+4Ch+arg_4]
.text:0040484D                 cmp     [esp+4Ch+var_34], edi
.text:00404851                 jnb     short loc_404869
.text:00404853                 mov     cl, bl
.text:00404855                 mov     esi, [esp+4Ch+arg_0]
.text:00404859                 shr     cl, 3
.text:0040485C                 mov     edi, [esp+4Ch+var_34]
.text:00404860                 and     cl, 7
.text:00404863                 add     cl, 30h ; '0'
.text:00404866                 mov     [edi+esi], cl
.text:00404869
.text:00404869 loc_404869:                             ; CODE XREF: sub_4041C0+691↑j
.text:00404869                 inc     [esp+4Ch+var_34]
.text:0040486D                 and     bl, 7
.text:00404870                 add     bl, 30h ; '0'
.text:00404873                 lea     esi, [esi+0]
.text:00404879                 lea     edi, [edi+0]
.text:00404880
.text:00404880 loc_404880:                             ; CODE XREF: sub_4041C0+645↑j
.text:00404880                                         ; sub_4041C0+64C↑j
.text:00404880                 lea     eax, [ebp+1]
.text:00404883                 cmp     edx, eax
.text:00404885                 jbe     loc_404580
.text:0040488B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040488F                 cmp     [esp+4Ch+var_34], ebp
.text:00404893                 jnb     short loc_4048A0
.text:00404895                 mov     ecx, [esp+4Ch+arg_0]
.text:00404899                 mov     edi, [esp+4Ch+var_34]
.text:0040489D                 mov     [edi+ecx], bl
.text:004048A0
.text:004048A0 loc_4048A0:                             ; CODE XREF: sub_4041C0+6D3↑j
.text:004048A0                 inc     [esp+4Ch+var_34]
.text:004048A4                 mov     ebp, eax
.text:004048A6                 mov     eax, [esp+4Ch+Str]
.text:004048AA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:004048AF                 jmp     loc_404800
.text:004048B4 ; ---------------------------------------------------------------------------
.text:004048B4
.text:004048B4 loc_4048B4:                             ; CODE XREF: sub_4041C0+5FF↑j
.text:004048B4                 mov     ecx, ds:_pctype
.text:004048BA                 mov     edi, [ecx]
.text:004048BC                 movzx   eax, word ptr [edi+edx*2]
.text:004048C0                 and     eax, 157h
.text:004048C5                 jmp     loc_4047D5
.text:004048C5 ; ---------------------------------------------------------------------------
.text:004048CA                 align 10h
.text:004048D0
.text:004048D0 loc_4048D0:                             ; CODE XREF: sub_4041C0+5E5↑j
.text:004048D0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004048D5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:004048DD                 mov     [esp+4Ch+var_28], 0
.text:004048E5                 mov     [esp+4Ch+var_29], 1
.text:004048EA                 jz      loc_404A7C
.text:004048F0
.text:004048F0 loc_4048F0:                             ; CODE XREF: sub_4041C0+8CC↓j
.text:004048F0                 mov     ecx, [esp+4Ch+arg_C]
.text:004048F4                 lea     edx, [esp+4Ch+var_18]
.text:004048F8                 mov     edi, [esp+4Ch+Str]
.text:004048FC                 mov     [esp+4Ch+State], edx ; State
.text:00404900                 lea     esi, [esp+4Ch+var_18._State]
.text:00404904                 sub     ecx, ebp
.text:00404906                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040490A                 add     edi, ebp
.text:0040490C                 mov     [esp+4Ch+var_30], edi
.text:00404910                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00404914                 mov     [esp+4Ch+C], esi ; DstCh
.text:00404917                 call    mbrtowc
.text:0040491C                 test    eax, eax
.text:0040491E                 mov     edi, eax
.text:00404920                 jz      short loc_404960
.text:00404922                 cmp     eax, 0FFFFFFFFh
.text:00404925                 jz      loc_404A72
.text:0040492B                 cmp     eax, 0FFFFFFFEh
.text:0040492E                 jz      loc_404A32
.text:00404934                 cmp     [esp+4Ch+arg_10], 1
.text:00404939                 jz      short loc_404970
.text:0040493B
.text:0040493B loc_40493B:                             ; CODE XREF: sub_4041C0+7B9↓j
.text:0040493B                                         ; sub_4041C0+86D↓j
.text:0040493B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00404940                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404948                 mov     [esp+4Ch+C], ecx ; C
.text:0040494B                 call    iswctype
.text:00404950                 test    eax, eax
.text:00404952                 jnz     short loc_404959
.text:00404954                 mov     [esp+4Ch+var_29], 0
.text:00404959
.text:00404959 loc_404959:                             ; CODE XREF: sub_4041C0+792↑j
.text:00404959                 mov     [esp+4Ch+var_28], edi
.text:0040495D                 lea     esi, [esi+0]
.text:00404960
.text:00404960 loc_404960:                             ; CODE XREF: sub_4041C0+760↑j
.text:00404960                                         ; sub_4041C0+87B↓j ...
.text:00404960                 cmp     [esp+4Ch+var_28], 1
.text:00404965                 jbe     loc_4047DC
.text:0040496B                 jmp     loc_4047F5
.text:00404970 ; ---------------------------------------------------------------------------
.text:00404970
.text:00404970 loc_404970:                             ; CODE XREF: sub_4041C0+779↑j
.text:00404970                 cmp     [esp+4Ch+arg_10], eax
.text:00404974                 mov     edx, 1
.text:00404979                 jnb     short loc_40493B
.text:0040497B
.text:0040497B loc_40497B:                             ; CODE XREF: sub_4041C0+867↓j
.text:0040497B                 mov     ecx, [esp+4Ch+Str]
.text:0040497F                 lea     esi, [edx+ebp]
.text:00404982                 movsx   eax, byte ptr [esi+ecx]
.text:00404986                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00404989                 cmp     eax, 21h
.text:0040498C                 ja      def_404992      ; jumptable 00404992 default case, cases 93,95,97-123
.text:00404992                 jmp     ds:jpt_404992[eax*4] ; switch jump
.text:00404992 ; ---------------------------------------------------------------------------
.text:00404999                 align 4
.text:0040499C jpt_404992      dd offset loc_4045CB    ; DATA XREF: sub_4041C0+7D2↑r
.text:0040499C                 dd offset loc_4045CB    ; jump table for switch statement
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset loc_4045CB
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset loc_4045CB
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset def_404992
.text:0040499C                 dd offset loc_4045CB
.text:00404A24 ; ---------------------------------------------------------------------------
.text:00404A24
.text:00404A24 def_404992:                             ; CODE XREF: sub_4041C0+7CC↑j
.text:00404A24                                         ; sub_4041C0+7D2↑j
.text:00404A24                                         ; DATA XREF: ...
.text:00404A24                 inc     edx             ; jumptable 00404992 default case, cases 93,95,97-123
.text:00404A25                 cmp     edx, edi
.text:00404A27                 jb      loc_40497B
.text:00404A2D                 jmp     loc_40493B
.text:00404A32 ; ---------------------------------------------------------------------------
.text:00404A32
.text:00404A32 loc_404A32:                             ; CODE XREF: sub_4041C0+76E↑j
.text:00404A32                 cmp     ebp, [esp+4Ch+arg_C]
.text:00404A36                 mov     [esp+4Ch+var_29], 0
.text:00404A3B                 jnb     loc_404960
.text:00404A41                 mov     eax, [esp+4Ch+var_30]
.text:00404A45                 cmp     byte ptr [eax], 0
.text:00404A48                 jz      loc_404960
.text:00404A4E
.text:00404A4E loc_404A4E:                             ; CODE XREF: sub_4041C0+8AB↓j
.text:00404A4E                 inc     [esp+4Ch+var_28]
.text:00404A52                 mov     esi, [esp+4Ch+var_28]
.text:00404A56                 lea     eax, [esi+ebp]
.text:00404A59                 cmp     eax, [esp+4Ch+arg_C]
.text:00404A5D                 jnb     loc_404960
.text:00404A63                 mov     edi, [esp+4Ch+Str]
.text:00404A67                 cmp     byte ptr [eax+edi], 0
.text:00404A6B                 jnz     short loc_404A4E
.text:00404A6D                 jmp     loc_404960
.text:00404A72 ; ---------------------------------------------------------------------------
.text:00404A72
.text:00404A72 loc_404A72:                             ; CODE XREF: sub_4041C0+765↑j
.text:00404A72                 mov     [esp+4Ch+var_29], 0
.text:00404A77                 jmp     loc_404960
.text:00404A7C ; ---------------------------------------------------------------------------
.text:00404A7C
.text:00404A7C loc_404A7C:                             ; CODE XREF: sub_4041C0+72A↑j
.text:00404A7C                 mov     edx, [esp+4Ch+Str]
.text:00404A80                 mov     [esp+4Ch+C], edx ; Str
.text:00404A83                 call    strlen
.text:00404A88                 mov     [esp+4Ch+arg_C], eax
.text:00404A8C                 jmp     loc_4048F0
.text:00404A91 ; ---------------------------------------------------------------------------
.text:00404A91
.text:00404A91 loc_404A91:                             ; CODE XREF: sub_4041C0+105↑j
.text:00404A91                                         ; DATA XREF: sub_4041C0:jpt_4042C5↑o
.text:00404A91                 mov     dl, bl          ; jumptable 004042C5 case 92
.text:00404A93                 jmp     loc_4045C4
.text:00404A98 ; ---------------------------------------------------------------------------
.text:00404A98
.text:00404A98 loc_404A98:                             ; CODE XREF: sub_4041C0+105↑j
.text:00404A98                                         ; sub_4041C0+902↓j
.text:00404A98                                         ; DATA XREF: ...
.text:00404A98                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 004042C5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00404A9D                 jnz     def_4046C2      ; jumptable 004042C5 cases 37,43-58,65-90,93,95,97-122
.text:00404A9D                                         ; jumptable 004046C2 default case, cases 34-38,42-44,46,48-59
.text:00404AA3                 jmp     loc_4045CB      ; jumptable 00404992 cases 91,92,94,96,124
.text:00404AA8 ; ---------------------------------------------------------------------------
.text:00404AA8
.text:00404AA8 loc_404AA8:                             ; CODE XREF: sub_4041C0+105↑j
.text:00404AA8                                         ; DATA XREF: sub_4041C0:jpt_4042C5↑o
.text:00404AA8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 004042C5 cases 123,125
.text:00404AAD                 jz      short loc_404AC4
.text:00404AAF                 cmp     [esp+4Ch+arg_C], 1
.text:00404AB4
.text:00404AB4 loc_404AB4:                             ; CODE XREF: sub_4041C0+90C↓j
.text:00404AB4                 jnz     def_4046C2      ; jumptable 004042C5 cases 37,43-58,65-90,93,95,97-122
.text:00404AB4                                         ; jumptable 004046C2 default case, cases 34-38,42-44,46,48-59
.text:00404ABA
.text:00404ABA loc_404ABA:                             ; CODE XREF: sub_4041C0+105↑j
.text:00404ABA                                         ; DATA XREF: sub_4041C0:jpt_4042C5↑o
.text:00404ABA                 test    ebp, ebp        ; jumptable 004042C5 cases 35,126
.text:00404ABC                 jnz     def_4046C2      ; jumptable 004042C5 cases 37,43-58,65-90,93,95,97-122
.text:00404ABC                                         ; jumptable 004046C2 default case, cases 34-38,42-44,46,48-59
.text:00404AC2                 jmp     short loc_404A98 ; jumptable 004042C5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00404AC4 ; ---------------------------------------------------------------------------
.text:00404AC4
.text:00404AC4 loc_404AC4:                             ; CODE XREF: sub_4041C0+8ED↑j
.text:00404AC4                 mov     esi, [esp+4Ch+Str]
.text:00404AC8                 cmp     byte ptr [esi+1], 0
.text:00404ACC                 jmp     short loc_404AB4
.text:00404ACE ; ---------------------------------------------------------------------------
.text:00404ACE
.text:00404ACE loc_404ACE:                             ; CODE XREF: sub_4041C0:loc_40425F↑j
.text:00404ACE                 test    ebp, ebp
.text:00404AD0                 jnz     short loc_404ADD
.text:00404AD2                 cmp     [esp+4Ch+arg_10], 1
.text:00404AD7                 jz      loc_4045CB      ; jumptable 00404992 cases 91,92,94,96,124
.text:00404ADD
.text:00404ADD loc_404ADD:                             ; CODE XREF: sub_4041C0+910↑j
.text:00404ADD                 mov     esi, [esp+4Ch+var_1C]
.text:00404AE1                 test    esi, esi
.text:00404AE3                 jz      short loc_404B18
.text:00404AE5                 mov     edi, [esp+4Ch+var_1C]
.text:00404AE9                 movzx   eax, byte ptr [edi]
.text:00404AEC                 test    al, al
.text:00404AEE                 jz      short loc_404B18
.text:00404AF0
.text:00404AF0 loc_404AF0:                             ; CODE XREF: sub_4041C0+956↓j
.text:00404AF0                 mov     ebp, [esp+4Ch+arg_4]
.text:00404AF4                 cmp     [esp+4Ch+var_34], ebp
.text:00404AF8                 jnb     short loc_404B05
.text:00404AFA                 mov     ecx, [esp+4Ch+arg_0]
.text:00404AFE                 mov     ebx, [esp+4Ch+var_34]
.text:00404B02                 mov     [ebx+ecx], al
.text:00404B05
.text:00404B05 loc_404B05:                             ; CODE XREF: sub_4041C0+938↑j
.text:00404B05                 inc     [esp+4Ch+var_1C]
.text:00404B09                 inc     [esp+4Ch+var_34]
.text:00404B0D                 mov     edx, [esp+4Ch+var_1C]
.text:00404B11                 movzx   eax, byte ptr [edx]
.text:00404B14                 test    al, al
.text:00404B16                 jnz     short loc_404AF0
.text:00404B18
.text:00404B18 loc_404B18:                             ; CODE XREF: sub_4041C0+923↑j
.text:00404B18                                         ; sub_4041C0+92E↑j
.text:00404B18                 mov     eax, [esp+4Ch+arg_4]
.text:00404B1C                 cmp     [esp+4Ch+var_34], eax
.text:00404B20                 jnb     short loc_404B2E
.text:00404B22                 mov     edi, [esp+4Ch+arg_0]
.text:00404B26                 mov     esi, [esp+4Ch+var_34]
.text:00404B2A                 mov     byte ptr [esi+edi], 0
.text:00404B2E
.text:00404B2E loc_404B2E:                             ; CODE XREF: sub_4041C0+960↑j
.text:00404B2E                 mov     eax, [esp+4Ch+var_34]
.text:00404B32                 jmp     loc_4045FF
.text:00404B37 ; ---------------------------------------------------------------------------
.text:00404B37
.text:00404B37 loc_404B37:                             ; CODE XREF: sub_4041C0+95↑j
.text:00404B37                 mov     ebx, [esp+4Ch+Str]
.text:00404B3B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00404B40                 jmp     loc_40425F
.text:00404B45 ; ---------------------------------------------------------------------------
.text:00404B45
.text:00404B45 loc_404B45:                             ; CODE XREF: sub_4041C0+3D↑j
.text:00404B45                                         ; DATA XREF: sub_4041C0:jpt_4041FD↑o
.text:00404B45                 mov     edx, [esp+4Ch+arg_4] ; jumptable 004041FD case 2
.text:00404B49                 cmp     [esp+4Ch+var_34], edx
.text:00404B4D                 jnb     short loc_404B56
.text:00404B4F                 mov     ecx, [esp+4Ch+arg_0]
.text:00404B53                 mov     byte ptr [ecx], 27h ; '''
.text:00404B56
.text:00404B56 loc_404B56:                             ; CODE XREF: sub_4041C0+98D↑j
.text:00404B56                 mov     [esp+4Ch+var_34], 1
.text:00404B5E                 mov     [esp+4Ch+var_1C], 4041AEh
.text:00404B66                 jmp     loc_404246
.text:00404B6B ; ---------------------------------------------------------------------------
.text:00404B6B
.text:00404B6B loc_404B6B:                             ; CODE XREF: sub_4041C0+3D↑j
.text:00404B6B                                         ; DATA XREF: sub_4041C0:jpt_4041FD↑o
.text:00404B6B                 mov     [esp+4Ch+var_21], 1 ; jumptable 004041FD case 4
.text:00404B70                 jmp     def_4041FD      ; jumptable 004041FD default case, cases 0,1
.text:00404B75 ; ---------------------------------------------------------------------------
.text:00404B75
.text:00404B75 loc_404B75:                             ; CODE XREF: sub_4041C0+3D↑j
.text:00404B75                                         ; DATA XREF: sub_4041C0:jpt_4041FD↑o
.text:00404B75                 mov     [esp+4Ch+C], 4041B0h ; jumptable 004041FD cases 5,6
.text:00404B7C                 call    ds:libintl_gettext
.text:00404B82                 cmp     eax, 4041B0h
.text:00404B87                 mov     edi, eax
.text:00404B89                 jz      short loc_404C00
.text:00404B8B
.text:00404B8B loc_404B8B:                             ; CODE XREF: sub_4041C0+A45↓j
.text:00404B8B                                         ; sub_4041C0+A4C↓j
.text:00404B8B                 mov     [esp+4Ch+C], 4041AEh
.text:00404B92                 call    ds:libintl_gettext
.text:00404B98                 cmp     eax, 4041AEh
.text:00404B9D                 mov     edx, eax
.text:00404B9F                 jz      short loc_404BF2
.text:00404BA1
.text:00404BA1 loc_404BA1:                             ; CODE XREF: sub_4041C0+A37↓j
.text:00404BA1                                         ; sub_4041C0+A3E↓j
.text:00404BA1                 mov     [esp+4Ch+var_1C], edi
.text:00404BA5                 cmp     byte ptr [edi], 0
.text:00404BA8                 jz      short loc_404BD8
.text:00404BAA
.text:00404BAA loc_404BAA:                             ; CODE XREF: sub_4041C0+A16↓j
.text:00404BAA                 mov     ecx, [esp+4Ch+arg_4]
.text:00404BAE                 cmp     [esp+4Ch+var_34], ecx
.text:00404BB2                 jnb     short loc_404BC7
.text:00404BB4                 mov     ebp, [esp+4Ch+var_1C]
.text:00404BB8                 mov     edi, [esp+4Ch+arg_0]
.text:00404BBC                 mov     esi, [esp+4Ch+var_34]
.text:00404BC0                 movzx   ebx, byte ptr [ebp+0]
.text:00404BC4                 mov     [esi+edi], bl
.text:00404BC7
.text:00404BC7 loc_404BC7:                             ; CODE XREF: sub_4041C0+9F2↑j
.text:00404BC7                 inc     [esp+4Ch+var_1C]
.text:00404BCB                 inc     [esp+4Ch+var_34]
.text:00404BCF                 mov     eax, [esp+4Ch+var_1C]
.text:00404BD3                 cmp     byte ptr [eax], 0
.text:00404BD6                 jnz     short loc_404BAA
.text:00404BD8
.text:00404BD8 loc_404BD8:                             ; CODE XREF: sub_4041C0+9E8↑j
.text:00404BD8                 mov     [esp+4Ch+var_21], 1
.text:00404BDD                 mov     [esp+4Ch+var_1C], edx
.text:00404BE1                 mov     [esp+4Ch+C], edx ; Str
.text:00404BE4                 call    strlen
.text:00404BE9                 mov     [esp+4Ch+var_20], eax
.text:00404BED                 jmp     def_4041FD      ; jumptable 004041FD default case, cases 0,1
.text:00404BF2 ; ---------------------------------------------------------------------------
.text:00404BF2
.text:00404BF2 loc_404BF2:                             ; CODE XREF: sub_4041C0+9DF↑j
.text:00404BF2                 cmp     [esp+4Ch+arg_10], 6
.text:00404BF7                 jnz     short loc_404BA1
.text:00404BF9                 mov     edx, offset asc_4041AC ; "\"'`"
.text:00404BFE                 jmp     short loc_404BA1
.text:00404C00 ; ---------------------------------------------------------------------------
.text:00404C00
.text:00404C00 loc_404C00:                             ; CODE XREF: sub_4041C0+9C9↑j
.text:00404C00                 cmp     [esp+4Ch+arg_10], 6
.text:00404C05                 jnz     short loc_404B8B
.text:00404C07                 mov     edi, offset asc_4041AC ; "\"'`"
.text:00404C0C                 jmp     loc_404B8B
.text:00404C0C sub_4041C0      endp
.text:00404C0C
.text:00404C11 ; ---------------------------------------------------------------------------
.text:00404C11                 jmp     short loc_404C20
.text:00404C11 ; ---------------------------------------------------------------------------
.text:00404C13                 align 10h
.text:00404C20
.text:00404C20 loc_404C20:                             ; CODE XREF: .text:00404C11↑j
.text:00404C20                 sub     esp, 0Ch
.text:00404C23                 mov     [esp+4], ebx
.text:00404C27                 mov     [esp+8], esi
.text:00404C2B                 call    _errno
.text:00404C30                 mov     esi, [eax]
.text:00404C32                 mov     dword ptr [esp], 24h ; '$'
.text:00404C39                 call    sub_403D30
.text:00404C3E                 mov     edx, [esp+10h]
.text:00404C42                 mov     ebx, eax
.text:00404C44                 test    edx, edx
.text:00404C46                 jz      short loc_404C91
.text:00404C48
.text:00404C48 loc_404C48:                             ; CODE XREF: .text:00404C96↓j
.text:00404C48                 mov     ecx, [edx]
.text:00404C4A                 mov     [ebx], ecx
.text:00404C4C                 mov     ecx, [edx+4]
.text:00404C4F                 mov     [ebx+4], ecx
.text:00404C52                 mov     ecx, [edx+8]
.text:00404C55                 mov     [ebx+8], ecx
.text:00404C58                 mov     ecx, [edx+0Ch]
.text:00404C5B                 mov     [ebx+0Ch], ecx
.text:00404C5E                 mov     ecx, [edx+10h]
.text:00404C61                 mov     [ebx+10h], ecx
.text:00404C64                 mov     ecx, [edx+14h]
.text:00404C67                 mov     [ebx+14h], ecx
.text:00404C6A                 mov     ecx, [edx+18h]
.text:00404C6D                 mov     [ebx+18h], ecx
.text:00404C70                 mov     ecx, [edx+1Ch]
.text:00404C73                 mov     [ebx+1Ch], ecx
.text:00404C76                 mov     ecx, [edx+20h]
.text:00404C79                 mov     [ebx+20h], ecx
.text:00404C7C                 call    _errno
.text:00404C81                 mov     [eax], esi
.text:00404C83                 mov     esi, [esp+8]
.text:00404C87                 mov     eax, ebx
.text:00404C89                 mov     ebx, [esp+4]
.text:00404C8D                 add     esp, 0Ch
.text:00404C90                 retn
.text:00404C91 ; ---------------------------------------------------------------------------
.text:00404C91
.text:00404C91 loc_404C91:                             ; CODE XREF: .text:00404C46↑j
.text:00404C91                 mov     edx, offset dword_407190
.text:00404C96                 jmp     short loc_404C48
.text:00404C96 ; ---------------------------------------------------------------------------
.text:00404C98                 align 10h
.text:00404CA0                 mov     eax, [esp+4]
.text:00404CA4                 test    eax, eax
.text:00404CA6                 jz      short loc_404CB0
.text:00404CA8
.text:00404CA8 loc_404CA8:                             ; CODE XREF: .text:00404CB5↓j
.text:00404CA8                 mov     eax, [eax]
.text:00404CAA                 retn
.text:00404CAA ; ---------------------------------------------------------------------------
.text:00404CAB                 align 10h
.text:00404CB0
.text:00404CB0 loc_404CB0:                             ; CODE XREF: .text:00404CA6↑j
.text:00404CB0                 mov     eax, offset dword_407190
.text:00404CB5                 jmp     short loc_404CA8
.text:00404CB5 ; ---------------------------------------------------------------------------
.text:00404CB7                 align 10h
.text:00404CC0                 mov     edx, [esp+4]
.text:00404CC4                 test    edx, edx
.text:00404CC6                 jz      short loc_404CD0
.text:00404CC8
.text:00404CC8 loc_404CC8:                             ; CODE XREF: .text:00404CD5↓j
.text:00404CC8                 mov     ecx, [esp+8]
.text:00404CCC                 mov     [edx], ecx
.text:00404CCE                 retn
.text:00404CCE ; ---------------------------------------------------------------------------
.text:00404CCF                 align 10h
.text:00404CD0
.text:00404CD0 loc_404CD0:                             ; CODE XREF: .text:00404CC6↑j
.text:00404CD0                 mov     edx, offset dword_407190
.text:00404CD5                 jmp     short loc_404CC8
.text:00404CD5 ; ---------------------------------------------------------------------------
.text:00404CD7                 align 10h
.text:00404CE0                 sub     esp, 8
.text:00404CE3                 mov     eax, [esp+0Ch]
.text:00404CE7                 movzx   ecx, byte ptr [esp+10h]
.text:00404CEC                 mov     [esp], ebx
.text:00404CEF                 mov     ebx, [esp+14h]
.text:00404CF3                 mov     [esp+4], esi
.text:00404CF7                 mov     dl, cl
.text:00404CF9                 shr     dl, 5
.text:00404CFC                 movzx   edx, dl
.text:00404CFF                 shl     edx, 2
.text:00404D02                 test    eax, eax
.text:00404D04                 lea     esi, [edx+eax+4]
.text:00404D08                 jz      short loc_404D30
.text:00404D0A
.text:00404D0A loc_404D0A:                             ; CODE XREF: .text:00404D36↓j
.text:00404D0A                 mov     edx, [esi]
.text:00404D0C                 and     ecx, 1Fh
.text:00404D0F                 and     ebx, 1
.text:00404D12                 mov     eax, edx
.text:00404D14                 shr     eax, cl
.text:00404D16                 and     eax, 1
.text:00404D19                 xor     ebx, eax
.text:00404D1B                 shl     ebx, cl
.text:00404D1D                 xor     edx, ebx
.text:00404D1F                 mov     [esi], edx
.text:00404D21                 mov     ebx, [esp]
.text:00404D24                 mov     esi, [esp+4]
.text:00404D28                 add     esp, 8
.text:00404D2B                 retn
.text:00404D2B ; ---------------------------------------------------------------------------
.text:00404D2C                 align 10h
.text:00404D30
.text:00404D30 loc_404D30:                             ; CODE XREF: .text:00404D08↑j
.text:00404D30                 lea     esi, dword_407194[edx]
.text:00404D36                 jmp     short loc_404D0A
.text:00404D36 ; ---------------------------------------------------------------------------
.text:00404D38                 align 10h
.text:00404D40                 sub     esp, 2Ch
.text:00404D43                 mov     [esp+24h], ebx
.text:00404D47                 mov     ebx, [esp+40h]
.text:00404D4B                 mov     [esp+28h], esi
.text:00404D4F                 test    ebx, ebx
.text:00404D51                 jz      short loc_404DA0
.text:00404D53
.text:00404D53 loc_404D53:                             ; CODE XREF: .text:00404DA5↓j
.text:00404D53                 call    _errno
.text:00404D58                 mov     esi, [eax]
.text:00404D5A                 mov     [esp+14h], ebx
.text:00404D5E                 mov     edx, [ebx]
.text:00404D60                 mov     ecx, [esp+38h]
.text:00404D64                 mov     ebx, [esp+3Ch]
.text:00404D68                 mov     [esp+10h], edx
.text:00404D6C                 mov     edx, [esp+34h]
.text:00404D70                 mov     [esp+0Ch], ebx
.text:00404D74                 mov     [esp+8], ecx
.text:00404D78                 mov     [esp+4], edx
.text:00404D7C                 mov     edx, [esp+30h]
.text:00404D80                 mov     [esp], edx
.text:00404D83                 call    sub_4041C0
.text:00404D88                 mov     ebx, eax
.text:00404D8A                 call    _errno
.text:00404D8F                 mov     [eax], esi
.text:00404D91                 mov     esi, [esp+28h]
.text:00404D95                 mov     eax, ebx
.text:00404D97                 mov     ebx, [esp+24h]
.text:00404D9B                 add     esp, 2Ch
.text:00404D9E                 retn
.text:00404D9E ; ---------------------------------------------------------------------------
.text:00404D9F                 align 10h
.text:00404DA0
.text:00404DA0 loc_404DA0:                             ; CODE XREF: .text:00404D51↑j
.text:00404DA0                 mov     ebx, offset dword_407190
.text:00404DA5                 jmp     short loc_404D53
.text:00404DA5 ; ---------------------------------------------------------------------------
.text:00404DA7                 align 10h
.text:00404DB0                 push    ebp
.text:00404DB1                 push    edi
.text:00404DB2                 push    esi
.text:00404DB3                 push    ebx
.text:00404DB4                 sub     esp, 2Ch
.text:00404DB7                 mov     ebp, [esp+48h]
.text:00404DBB                 call    _errno
.text:00404DC0                 mov     edx, [eax]
.text:00404DC2                 test    ebp, ebp
.text:00404DC4                 mov     ebx, ebp
.text:00404DC6                 mov     [esp+28h], edx
.text:00404DCA                 jz      loc_404E80
.text:00404DD0
.text:00404DD0 loc_404DD0:                             ; CODE XREF: .text:00404E85↓j
.text:00404DD0                 call    _errno
.text:00404DD5                 mov     edi, [eax]
.text:00404DD7                 mov     esi, ebp
.text:00404DD9                 mov     [esp+14h], ebx
.text:00404DDD                 mov     ecx, [ebx]
.text:00404DDF                 mov     dword ptr [esp], 0
.text:00404DE6                 mov     edx, [esp+44h]
.text:00404DEA                 mov     dword ptr [esp+4], 0
.text:00404DF2                 mov     eax, [esp+40h]
.text:00404DF6                 mov     [esp+10h], ecx
.text:00404DFA                 mov     [esp+0Ch], edx
.text:00404DFE                 mov     [esp+8], eax
.text:00404E02                 call    sub_4041C0
.text:00404E07                 mov     ebx, eax
.text:00404E09                 call    _errno
.text:00404E0E                 mov     [eax], edi
.text:00404E10                 lea     edi, [ebx+1]
.text:00404E13                 mov     [esp], edi
.text:00404E16                 call    sub_403D30
.text:00404E1B                 mov     [esp+24h], eax
.text:00404E1F                 test    ebp, ebp
.text:00404E21                 jz      short loc_404E72
.text:00404E23
.text:00404E23 loc_404E23:                             ; CODE XREF: .text:00404E77↓j
.text:00404E23                 call    _errno
.text:00404E28                 mov     ebp, [eax]
.text:00404E2A                 mov     [esp+14h], esi
.text:00404E2E                 mov     ecx, [esi]
.text:00404E30                 mov     [esp+4], edi
.text:00404E34                 mov     edx, [esp+44h]
.text:00404E38                 mov     esi, [esp+24h]
.text:00404E3C                 mov     [esp+10h], ecx
.text:00404E40                 mov     eax, [esp+40h]
.text:00404E44                 mov     [esp+0Ch], edx
.text:00404E48                 mov     [esp], esi
.text:00404E4B                 mov     [esp+8], eax
.text:00404E4F                 call    sub_4041C0
.text:00404E54                 call    _errno
.text:00404E59                 mov     [eax], ebp
.text:00404E5B                 call    _errno
.text:00404E60                 mov     ebx, [esp+28h]
.text:00404E64                 mov     [eax], ebx
.text:00404E66                 mov     eax, [esp+24h]
.text:00404E6A                 add     esp, 2Ch
.text:00404E6D                 pop     ebx
.text:00404E6E                 pop     esi
.text:00404E6F                 pop     edi
.text:00404E70                 pop     ebp
.text:00404E71                 retn
.text:00404E72 ; ---------------------------------------------------------------------------
.text:00404E72
.text:00404E72 loc_404E72:                             ; CODE XREF: .text:00404E21↑j
.text:00404E72                 mov     esi, offset dword_407190
.text:00404E77                 jmp     short loc_404E23
.text:00404E77 ; ---------------------------------------------------------------------------
.text:00404E79                 align 10h
.text:00404E80
.text:00404E80 loc_404E80:                             ; CODE XREF: .text:00404DCA↑j
.text:00404E80                 mov     ebx, offset dword_407190
.text:00404E85                 jmp     loc_404DD0
.text:00404E85 ; ---------------------------------------------------------------------------
.text:00404E8A                 align 10h
.text:00404E90                 sub     esp, 1Ch
.text:00404E93                 mov     edx, [esp+24h]
.text:00404E97                 mov     dword ptr [esp+0Ch], offset dword_407190
.text:00404E9F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404EA7                 mov     [esp+4], edx
.text:00404EAB                 mov     edx, [esp+20h]
.text:00404EAF                 mov     [esp], edx
.text:00404EB2                 call    sub_405300
.text:00404EB7                 add     esp, 1Ch
.text:00404EBA                 retn
.text:00404EBA ; ---------------------------------------------------------------------------
.text:00404EBB                 align 10h
.text:00404EC0                 sub     esp, 1Ch
.text:00404EC3                 mov     edx, [esp+20h]
.text:00404EC7                 mov     dword ptr [esp+0Ch], offset dword_407190
.text:00404ECF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404ED7                 mov     [esp+4], edx
.text:00404EDB                 mov     dword ptr [esp], 0
.text:00404EE2                 call    sub_405300
.text:00404EE7                 add     esp, 1Ch
.text:00404EEA                 retn
.text:00404EEA ; ---------------------------------------------------------------------------
.text:00404EEB                 align 10h
.text:00404EF0                 push    ebp
.text:00404EF1                 xor     eax, eax
.text:00404EF3                 mov     ecx, 8
.text:00404EF8                 push    edi
.text:00404EF9                 push    esi
.text:00404EFA                 push    ebx
.text:00404EFB                 sub     esp, 0ACh
.text:00404F01                 mov     ebp, [esp+0C4h]
.text:00404F08                 cld
.text:00404F09                 lea     edi, [esp+14h]
.text:00404F0D                 mov     [esp+10h], ebp
.text:00404F11                 rep stosd
.text:00404F13                 mov     eax, [esp+30h]
.text:00404F17                 mov     edi, [esp+10h]
.text:00404F1B                 mov     esi, [esp+14h]
.text:00404F1F                 mov     [esp+60h], eax
.text:00404F23                 mov     ebp, [esp+18h]
.text:00404F27                 mov     eax, [esp+10h]
.text:00404F2B                 mov     [esp+40h], edi
.text:00404F2F                 mov     ecx, [esp+28h]
.text:00404F33                 mov     edi, [esp+1Ch]
.text:00404F37                 mov     [esp+44h], esi
.text:00404F3B                 mov     edx, [esp+2Ch]
.text:00404F3F                 mov     esi, [esp+20h]
.text:00404F43                 mov     [esp+70h], eax
.text:00404F47                 mov     ebx, [esp+24h]
.text:00404F4B                 mov     eax, [esp+14h]
.text:00404F4F                 mov     [esp+48h], ebp
.text:00404F53                 mov     [esp+4Ch], edi
.text:00404F57                 mov     [esp+50h], esi
.text:00404F5B                 mov     [esp+54h], ebx
.text:00404F5F                 mov     [esp+58h], ecx
.text:00404F63                 mov     [esp+5Ch], edx
.text:00404F67                 mov     [esp+74h], eax
.text:00404F6B                 mov     [esp+78h], ebp
.text:00404F6F                 mov     [esp+7Ch], edi
.text:00404F73                 mov     [esp+80h], esi
.text:00404F7A                 mov     [esp+84h], ebx
.text:00404F81                 mov     ebx, [esp+30h]
.text:00404F85                 mov     [esp+8Ch], edx
.text:00404F8C                 mov     edx, [esp+0C8h]
.text:00404F93                 mov     [esp+88h], ecx
.text:00404F9A                 lea     ecx, [esp+70h]
.text:00404F9E                 mov     [esp+4], edx
.text:00404FA2                 mov     edx, [esp+0C0h]
.text:00404FA9                 mov     [esp+90h], ebx
.text:00404FB0                 mov     [esp+0Ch], ecx
.text:00404FB4                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00404FBC                 mov     [esp], edx
.text:00404FBF                 call    sub_405300
.text:00404FC4                 add     esp, 0ACh
.text:00404FCA                 pop     ebx
.text:00404FCB                 pop     esi
.text:00404FCC                 pop     edi
.text:00404FCD                 pop     ebp
.text:00404FCE                 retn
.text:00404FCE ; ---------------------------------------------------------------------------
.text:00404FCF                 align 10h
.text:00404FD0                 push    ebp
.text:00404FD1                 xor     eax, eax
.text:00404FD3                 mov     ecx, 8
.text:00404FD8                 push    edi
.text:00404FD9                 push    esi
.text:00404FDA                 push    ebx
.text:00404FDB                 sub     esp, 0ACh
.text:00404FE1                 mov     edx, [esp+0C4h]
.text:00404FE8                 cld
.text:00404FE9                 lea     edi, [esp+14h]
.text:00404FED                 mov     [esp+10h], edx
.text:00404FF1                 rep stosd
.text:00404FF3                 mov     eax, [esp+30h]
.text:00404FF7                 mov     ebp, [esp+10h]
.text:00404FFB                 mov     edi, [esp+14h]
.text:00404FFF                 mov     [esp+60h], eax
.text:00405003                 mov     esi, [esp+20h]
.text:00405007                 mov     eax, [esp+10h]
.text:0040500B                 mov     [esp+40h], ebp
.text:0040500F                 mov     ecx, [esp+28h]
.text:00405013                 mov     ebp, [esp+18h]
.text:00405017                 mov     [esp+44h], edi
.text:0040501B                 mov     edx, [esp+2Ch]
.text:0040501F                 mov     edi, [esp+1Ch]
.text:00405023                 mov     [esp+70h], eax
.text:00405027                 mov     ebx, [esp+24h]
.text:0040502B                 mov     eax, [esp+14h]
.text:0040502F                 mov     [esp+48h], ebp
.text:00405033                 mov     [esp+4Ch], edi
.text:00405037                 mov     [esp+50h], esi
.text:0040503B                 mov     [esp+54h], ebx
.text:0040503F                 mov     [esp+58h], ecx
.text:00405043                 mov     [esp+5Ch], edx
.text:00405047                 mov     [esp+74h], eax
.text:0040504B                 mov     [esp+78h], ebp
.text:0040504F                 mov     [esp+7Ch], edi
.text:00405053                 mov     [esp+80h], esi
.text:0040505A                 mov     [esp+84h], ebx
.text:00405061                 mov     esi, [esp+30h]
.text:00405065                 lea     ebx, [esp+70h]
.text:00405069                 mov     [esp+8Ch], edx
.text:00405070                 mov     edx, [esp+0C8h]
.text:00405077                 mov     [esp+88h], ecx
.text:0040507E                 mov     ecx, [esp+0CCh]
.text:00405085                 mov     [esp+4], edx
.text:00405089                 mov     edx, [esp+0C0h]
.text:00405090                 mov     [esp+90h], esi
.text:00405097                 mov     [esp+0Ch], ebx
.text:0040509B                 mov     [esp+8], ecx
.text:0040509F                 mov     [esp], edx
.text:004050A2                 call    sub_405300
.text:004050A7                 add     esp, 0ACh
.text:004050AD                 pop     ebx
.text:004050AE                 pop     esi
.text:004050AF                 pop     edi
.text:004050B0                 pop     ebp
.text:004050B1                 retn
.text:004050B1 ; ---------------------------------------------------------------------------
.text:004050B2                 align 10h
.text:004050C0                 push    ebp
.text:004050C1                 xor     eax, eax
.text:004050C3                 mov     ecx, 8
.text:004050C8                 push    edi
.text:004050C9                 push    esi
.text:004050CA                 push    ebx
.text:004050CB                 sub     esp, 0ACh
.text:004050D1                 mov     edi, [esp+0C0h]
.text:004050D8                 cld
.text:004050D9                 mov     [esp+10h], edi
.text:004050DD                 lea     edi, [esp+14h]
.text:004050E1                 rep stosd
.text:004050E3                 mov     eax, [esp+30h]
.text:004050E7                 mov     esi, [esp+10h]
.text:004050EB                 mov     ebx, [esp+14h]
.text:004050EF                 mov     [esp+60h], eax
.text:004050F3                 mov     ebp, [esp+18h]
.text:004050F7                 mov     eax, [esp+10h]
.text:004050FB                 mov     [esp+40h], esi
.text:004050FF                 mov     edi, [esp+1Ch]
.text:00405103                 mov     esi, [esp+20h]
.text:00405107                 mov     [esp+44h], ebx
.text:0040510B                 mov     ecx, [esp+28h]
.text:0040510F                 mov     edx, [esp+2Ch]
.text:00405113                 mov     [esp+70h], eax
.text:00405117                 mov     ebx, [esp+24h]
.text:0040511B                 mov     eax, [esp+14h]
.text:0040511F                 mov     [esp+48h], ebp
.text:00405123                 mov     [esp+4Ch], edi
.text:00405127                 mov     [esp+50h], esi
.text:0040512B                 mov     [esp+54h], ebx
.text:0040512F                 mov     [esp+58h], ecx
.text:00405133                 mov     [esp+5Ch], edx
.text:00405137                 mov     [esp+74h], eax
.text:0040513B                 mov     [esp+78h], ebp
.text:0040513F                 mov     [esp+7Ch], edi
.text:00405143                 mov     [esp+80h], esi
.text:0040514A                 mov     [esp+84h], ebx
.text:00405151                 mov     [esp+8Ch], edx
.text:00405158                 lea     edx, [esp+70h]
.text:0040515C                 mov     [esp+88h], ecx
.text:00405163                 mov     ecx, [esp+30h]
.text:00405167                 mov     [esp+0Ch], edx
.text:0040516B                 mov     edx, [esp+0C4h]
.text:00405172                 mov     [esp+90h], ecx
.text:00405179                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00405181                 mov     [esp+4], edx
.text:00405185                 mov     dword ptr [esp], 0
.text:0040518C                 call    sub_405300
.text:00405191                 add     esp, 0ACh
.text:00405197                 pop     ebx
.text:00405198                 pop     esi
.text:00405199                 pop     edi
.text:0040519A                 pop     ebp
.text:0040519B                 retn
.text:0040519B ; ---------------------------------------------------------------------------
.text:0040519C                 align 10h
.text:004051A0                 push    edi
.text:004051A1                 push    esi
.text:004051A2                 push    ebx
.text:004051A3                 sub     esp, 40h
.text:004051A6                 mov     edx, ds:dword_40719C
.text:004051AC                 mov     ebx, ds:dword_407190
.text:004051B2                 mov     esi, ds:dword_407198
.text:004051B8                 mov     edi, ds:dword_407194
.text:004051BE                 mov     [esp+1Ch], edx
.text:004051C2                 mov     ecx, ds:dword_4071A0
.text:004051C8                 mov     edx, ds:dword_4071B0
.text:004051CE                 mov     [esp+10h], ebx
.text:004051D2                 mov     ebx, ds:dword_4071A4
.text:004051D8                 mov     [esp+30h], edx
.text:004051DC                 movzx   edx, byte ptr [esp+54h]
.text:004051E1                 mov     [esp+18h], esi
.text:004051E5                 mov     esi, ds:dword_4071AC
.text:004051EB                 mov     [esp+14h], edi
.text:004051EF                 mov     edi, ds:dword_4071A8
.text:004051F5                 mov     [esp+20h], ecx
.text:004051F9                 mov     cl, dl
.text:004051FB                 shr     cl, 5
.text:004051FE                 mov     [esp+24h], ebx
.text:00405202                 movzx   ebx, cl
.text:00405205                 mov     [esp+2Ch], esi
.text:00405209                 lea     esi, [esp+10h]
.text:0040520D                 mov     [esp+28h], edi
.text:00405211                 lea     edi, [esi+ebx*4]
.text:00405214                 mov     ebx, edx
.text:00405216                 mov     edx, [edi+4]
.text:00405219                 and     ebx, 1Fh
.text:0040521C                 mov     cl, bl
.text:0040521E                 mov     eax, edx
.text:00405220                 shr     eax, cl
.text:00405222                 and     eax, 1
.text:00405225                 xor     eax, 1
.text:00405228                 shl     eax, cl
.text:0040522A                 xor     edx, eax
.text:0040522C                 mov     [edi+4], edx
.text:0040522F                 mov     edx, [esp+50h]
.text:00405233                 mov     [esp+0Ch], esi
.text:00405237                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040523F                 mov     [esp+4], edx
.text:00405243                 mov     dword ptr [esp], 0
.text:0040524A                 call    sub_405300
.text:0040524F                 add     esp, 40h
.text:00405252                 pop     ebx
.text:00405253                 pop     esi
.text:00405254                 pop     edi
.text:00405255                 retn
.text:00405255 ; ---------------------------------------------------------------------------
.text:00405256                 align 10h
.text:00405260
.text:00405260 ; =============== S U B R O U T I N E =======================================
.text:00405260
.text:00405260
.text:00405260 ; int __cdecl sub_405260(char *)
.text:00405260 sub_405260      proc near               ; CODE XREF: sub_403FF0+64↑p
.text:00405260
.text:00405260 var_4C          = dword ptr -4Ch
.text:00405260 var_48          = dword ptr -48h
.text:00405260 var_44          = dword ptr -44h
.text:00405260 var_40          = dword ptr -40h
.text:00405260 var_3C          = dword ptr -3Ch
.text:00405260 var_38          = dword ptr -38h
.text:00405260 var_34          = dword ptr -34h
.text:00405260 var_30          = dword ptr -30h
.text:00405260 var_2C          = dword ptr -2Ch
.text:00405260 var_28          = dword ptr -28h
.text:00405260 var_24          = dword ptr -24h
.text:00405260 var_20          = dword ptr -20h
.text:00405260 var_1C          = dword ptr -1Ch
.text:00405260 arg_0           = dword ptr  4
.text:00405260
.text:00405260                 sub     esp, 4Ch
.text:00405263                 mov     ecx, ds:dword_407190
.text:00405269                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00405271                 mov     edx, ds:dword_407194
.text:00405277                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040527E                 mov     [esp+4Ch+var_3C], ecx
.text:00405282                 mov     ecx, ds:dword_40719C
.text:00405288                 mov     [esp+4Ch+var_38], edx
.text:0040528C                 mov     edx, ds:dword_407198
.text:00405292                 mov     [esp+4Ch+var_30], ecx
.text:00405296                 mov     ecx, ds:dword_4071A0
.text:0040529C                 mov     eax, edx
.text:0040529E                 shr     eax, 1Ah
.text:004052A1                 and     eax, 1
.text:004052A4                 xor     eax, 1
.text:004052A7                 mov     [esp+4Ch+var_2C], ecx
.text:004052AB                 shl     eax, 1Ah
.text:004052AE                 mov     ecx, ds:dword_4071A4
.text:004052B4                 xor     edx, eax
.text:004052B6                 mov     [esp+4Ch+var_34], edx
.text:004052BA                 mov     edx, [esp+4Ch+arg_0]
.text:004052BE                 mov     [esp+4Ch+var_28], ecx
.text:004052C2                 mov     ecx, ds:dword_4071A8
.text:004052C8                 mov     [esp+4Ch+var_48], edx ; char *
.text:004052CC                 mov     [esp+4Ch+var_24], ecx
.text:004052D0                 mov     ecx, ds:dword_4071AC
.text:004052D6                 mov     [esp+4Ch+var_20], ecx
.text:004052DA                 mov     ecx, ds:dword_4071B0
.text:004052E0                 mov     [esp+4Ch+var_1C], ecx
.text:004052E4                 lea     ecx, [esp+4Ch+var_3C]
.text:004052E8                 mov     [esp+4Ch+var_40], ecx ; int
.text:004052EC                 call    sub_405300
.text:004052F1                 add     esp, 4Ch
.text:004052F4                 retn
.text:004052F4 sub_405260      endp
.text:004052F4
.text:004052F4 ; ---------------------------------------------------------------------------
.text:004052F5                 align 10h
.text:00405300
.text:00405300 ; =============== S U B R O U T I N E =======================================
.text:00405300
.text:00405300
.text:00405300 ; int __cdecl sub_405300(int, char *, int, int)
.text:00405300 sub_405300      proc near               ; CODE XREF: .text:00404EB2↑p
.text:00405300                                         ; .text:00404EE2↑p ...
.text:00405300
.text:00405300 Block           = dword ptr -2Ch
.text:00405300 var_28          = dword ptr -28h
.text:00405300 Str             = dword ptr -24h
.text:00405300 var_20          = dword ptr -20h
.text:00405300 var_1C          = dword ptr -1Ch
.text:00405300 var_18          = dword ptr -18h
.text:00405300 var_14          = dword ptr -14h
.text:00405300 arg_0           = dword ptr  4
.text:00405300 arg_4           = dword ptr  8
.text:00405300 arg_8           = dword ptr  0Ch
.text:00405300 arg_C           = dword ptr  10h
.text:00405300
.text:00405300                 push    ebp
.text:00405301                 push    edi
.text:00405302                 push    esi
.text:00405303                 push    ebx
.text:00405304                 sub     esp, 1Ch
.text:00405307                 call    _errno
.text:0040530C                 mov     edx, [eax]
.text:0040530E                 mov     eax, [esp+2Ch+arg_0]
.text:00405312                 mov     [esp+2Ch+var_14], edx
.text:00405316                 test    eax, eax
.text:00405318                 js      loc_4054BA
.text:0040531E                 mov     eax, [esp+2Ch+arg_0]
.text:00405322                 cmp     dword_406040, eax
.text:00405328                 ja      short loc_4053A0
.text:0040532A                 mov     esi, eax
.text:0040532C                 inc     esi
.text:0040532D                 cmp     esi, 1FFFFFFFh
.text:00405333                 ja      loc_4054BF
.text:00405339                 mov     ebx, off_40604C
.text:0040533F                 cmp     ebx, offset dword_406044
.text:00405345                 jz      loc_405491
.text:0040534B
.text:0040534B loc_40534B:                             ; CODE XREF: sub_405300+1B5↓j
.text:0040534B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040534E                 lea     ecx, ds:0[esi*8]
.text:00405355                 mov     ebp, esi
.text:00405357                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040535B                 call    sub_403DC0
.text:00405360                 mov     off_40604C, eax
.text:00405365                 mov     ebx, dword_406040
.text:0040536B                 sub     ebp, ebx
.text:0040536D                 lea     edi, [eax+ebx*8]
.text:00405370                 lea     eax, ds:0[ebp*8]
.text:00405377                 cmp     eax, 7
.text:0040537A                 jbe     short loc_405390
.text:0040537C                 test    edi, 4
.text:00405382                 jz      short loc_405390
.text:00405384                 mov     dword ptr [edi], 0
.text:0040538A                 sub     eax, 4
.text:0040538D                 add     edi, 4
.text:00405390
.text:00405390 loc_405390:                             ; CODE XREF: sub_405300+7A↑j
.text:00405390                                         ; sub_405300+82↑j
.text:00405390                 cld
.text:00405391                 mov     ecx, eax
.text:00405393                 shr     ecx, 2
.text:00405396                 xor     eax, eax
.text:00405398                 rep stosd
.text:0040539A                 mov     dword_406040, esi
.text:004053A0
.text:004053A0 loc_4053A0:                             ; CODE XREF: sub_405300+28↑j
.text:004053A0                 mov     esi, off_40604C
.text:004053A6                 mov     eax, [esp+2Ch+arg_0]
.text:004053AA                 mov     ebp, [esi+eax*8]
.text:004053AD                 mov     edi, [esi+eax*8+4]
.text:004053B1                 mov     esi, [esp+2Ch+arg_C]
.text:004053B5                 test    esi, esi
.text:004053B7                 jz      loc_405487
.text:004053BD
.text:004053BD loc_4053BD:                             ; CODE XREF: sub_405300+18C↓j
.text:004053BD                 call    _errno
.text:004053C2                 mov     ebx, [eax]
.text:004053C4                 mov     [esp+2Ch+var_18], esi ; int
.text:004053C8                 mov     ecx, [esi]
.text:004053CA                 mov     [esp+2Ch+Block], edi ; int
.text:004053CD                 mov     edx, [esp+2Ch+arg_8]
.text:004053D1                 mov     [esp+2Ch+var_28], ebp ; int
.text:004053D5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004053D9                 mov     ecx, [esp+2Ch+arg_4]
.text:004053DD                 mov     [esp+2Ch+var_20], edx ; int
.text:004053E1                 mov     [esp+2Ch+Str], ecx ; Str
.text:004053E5                 call    sub_4041C0
.text:004053EA                 mov     esi, eax
.text:004053EC                 call    _errno
.text:004053F1                 mov     [eax], ebx
.text:004053F3                 cmp     ebp, esi
.text:004053F5                 ja      short loc_40546B
.text:004053F7                 lea     ebp, [esi+1]
.text:004053FA                 mov     ebx, off_40604C
.text:00405400                 cmp     edi, offset unk_407090
.text:00405406                 mov     esi, [esp+2Ch+arg_0]
.text:0040540A                 mov     [ebx+esi*8], ebp
.text:0040540D                 jz      short loc_40541D
.text:0040540F                 mov     [esp+2Ch+Block], edi ; Block
.text:00405412                 call    free
.text:00405417                 mov     ebx, off_40604C
.text:0040541D
.text:0040541D loc_40541D:                             ; CODE XREF: sub_405300+10D↑j
.text:0040541D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00405420                 call    sub_403D30
.text:00405425                 mov     esi, [esp+2Ch+arg_C]
.text:00405429                 mov     edi, eax
.text:0040542B                 mov     eax, [esp+2Ch+arg_0]
.text:0040542F                 test    esi, esi
.text:00405431                 mov     [ebx+eax*8+4], edi
.text:00405435                 jz      short loc_405480
.text:00405437
.text:00405437 loc_405437:                             ; CODE XREF: sub_405300+185↓j
.text:00405437                 call    _errno
.text:0040543C                 mov     ebx, [eax]
.text:0040543E                 mov     [esp+2Ch+var_18], esi ; int
.text:00405442                 mov     ecx, [esi]
.text:00405444                 mov     [esp+2Ch+Block], edi ; int
.text:00405447                 mov     edx, [esp+2Ch+arg_8]
.text:0040544B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040544F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00405453                 mov     ecx, [esp+2Ch+arg_4]
.text:00405457                 mov     [esp+2Ch+var_20], edx ; int
.text:0040545B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040545F                 call    sub_4041C0
.text:00405464                 call    _errno
.text:00405469                 mov     [eax], ebx
.text:0040546B
.text:0040546B loc_40546B:                             ; CODE XREF: sub_405300+F5↑j
.text:0040546B                 call    _errno
.text:00405470                 mov     ebp, [esp+2Ch+var_14]
.text:00405474                 mov     [eax], ebp
.text:00405476                 add     esp, 1Ch
.text:00405479                 mov     eax, edi
.text:0040547B                 pop     ebx
.text:0040547C                 pop     esi
.text:0040547D                 pop     edi
.text:0040547E                 pop     ebp
.text:0040547F                 retn
.text:00405480 ; ---------------------------------------------------------------------------
.text:00405480
.text:00405480 loc_405480:                             ; CODE XREF: sub_405300+135↑j
.text:00405480                 mov     esi, offset dword_407190
.text:00405485                 jmp     short loc_405437
.text:00405487 ; ---------------------------------------------------------------------------
.text:00405487
.text:00405487 loc_405487:                             ; CODE XREF: sub_405300+B7↑j
.text:00405487                 mov     esi, offset dword_407190
.text:0040548C                 jmp     loc_4053BD
.text:00405491 ; ---------------------------------------------------------------------------
.text:00405491
.text:00405491 loc_405491:                             ; CODE XREF: sub_405300+45↑j
.text:00405491                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00405498                 call    sub_403D30
.text:0040549D                 mov     off_40604C, eax
.text:004054A2                 mov     edi, dword_406044
.text:004054A8                 mov     ebx, eax
.text:004054AA                 mov     ecx, off_406048
.text:004054B0                 mov     [eax], edi
.text:004054B2                 mov     [eax+4], ecx
.text:004054B5                 jmp     loc_40534B
.text:004054BA ; ---------------------------------------------------------------------------
.text:004054BA
.text:004054BA loc_4054BA:                             ; CODE XREF: sub_405300+18↑j
.text:004054BA                 call    abort
.text:004054BF ; ---------------------------------------------------------------------------
.text:004054BF
.text:004054BF loc_4054BF:                             ; CODE XREF: sub_405300+33↑j
.text:004054BF                 call    sub_4040F0
.text:004054BF sub_405300      endp
.text:004054BF
.text:004054BF ; ---------------------------------------------------------------------------
.text:004054C4                 align 10h
.text:004054D0
.text:004054D0 ; =============== S U B R O U T I N E =======================================
.text:004054D0
.text:004054D0 ; Attributes: thunk
.text:004054D0
.text:004054D0 libintl_bindtextdomain proc near
.text:004054D0                 jmp     ds:__imp_libintl_bindtextdomain
.text:004054D0 libintl_bindtextdomain endp
.text:004054D0
.text:004054D0 ; ---------------------------------------------------------------------------
.text:004054D6                 align 10h
.text:004054E0                 jmp     ds:libintl_textdomain
.text:004054E0 ; ---------------------------------------------------------------------------
.text:004054E6                 align 10h
.text:004054F0                 jmp     ds:libintl_gettext
.text:004054F0 ; ---------------------------------------------------------------------------
.text:004054F6                 align 10h
.text:00405500 ; const char aS_0[]
.text:00405500 aS_0            db ': %s',0             ; DATA XREF: sub_405520+B8↓o
.text:00405500                                         ; sub_405624+122↓o
.text:00405505 aUnknownSystemE db 'Unknown system error',0
.text:00405505                                         ; DATA XREF: sub_405520:loc_4055ED↓o
.text:00405505                                         ; sub_405624:loc_40575E↓o
.text:0040551A ; const char aS_1[]
.text:0040551A aS_1            db '%s: ',0             ; DATA XREF: sub_405520:loc_4055F4↓o
.text:0040551F                 align 10h
.text:00405520
.text:00405520 ; =============== S U B R O U T I N E =======================================
.text:00405520
.text:00405520
.text:00405520 ; int __cdecl sub_405520(int Code, int ErrorMessage, char *, char)
.text:00405520 sub_405520      proc near               ; CODE XREF: sub_401670+16A↑p
.text:00405520                                         ; sub_401670+366↑p ...
.text:00405520
.text:00405520 Stream          = dword ptr -1Ch
.text:00405520 Format          = dword ptr -18h
.text:00405520 ArgList         = dword ptr -14h
.text:00405520 Code            = dword ptr  4
.text:00405520 ErrorMessage    = dword ptr  8
.text:00405520 arg_8           = dword ptr  0Ch
.text:00405520 arg_C           = byte ptr  10h
.text:00405520
.text:00405520                 push    esi
.text:00405521                 push    ebx
.text:00405522                 sub     esp, 14h
.text:00405525                 mov     edx, ds:_iob
.text:0040552B                 mov     esi, [esp+1Ch+Code]
.text:0040552F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00405533                 add     edx, 20h ; ' '
.text:00405536                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405539                 call    fflush
.text:0040553E                 mov     eax, ds:dword_407210
.text:00405543                 test    eax, eax
.text:00405545                 jz      loc_4055F4
.text:0040554B                 call    eax ; dword_407210
.text:0040554D
.text:0040554D loc_40554D:                             ; CODE XREF: sub_405520+F7↓j
.text:0040554D                 lea     edx, [esp+1Ch+arg_C]
.text:00405551                 mov     ecx, [esp+1Ch+arg_8]
.text:00405555                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00405559                 mov     edx, ds:_iob
.text:0040555F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00405563                 add     edx, 40h ; '@'
.text:00405566                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405569                 call    vfprintf
.text:0040556E                 inc     ds:dword_407220
.text:00405574                 test    ebx, ebx
.text:00405576                 jnz     short loc_4055C2
.text:00405578
.text:00405578 loc_405578:                             ; CODE XREF: sub_405520+CB↓j
.text:00405578                 mov     edx, ds:_iob
.text:0040557E                 lea     ecx, [edx+40h]
.text:00405581                 mov     ebx, [ecx+4]
.text:00405584                 dec     ebx
.text:00405585                 test    ebx, ebx
.text:00405587                 mov     [ecx+4], ebx
.text:0040558A                 js      short loc_4055B0
.text:0040558C                 mov     ecx, [edx+40h]
.text:0040558F                 mov     byte ptr [ecx], 0Ah
.text:00405592                 inc     dword ptr [edx+40h]
.text:00405595
.text:00405595 loc_405595:                             ; CODE XREF: sub_405520+A0↓j
.text:00405595                 mov     edx, ds:_iob
.text:0040559B                 add     edx, 40h ; '@'
.text:0040559E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004055A1                 call    fflush
.text:004055A6                 test    esi, esi
.text:004055A8                 jnz     short loc_40561C
.text:004055AA                 add     esp, 14h
.text:004055AD                 pop     ebx
.text:004055AE                 pop     esi
.text:004055AF                 retn
.text:004055B0 ; ---------------------------------------------------------------------------
.text:004055B0
.text:004055B0 loc_4055B0:                             ; CODE XREF: sub_405520+6A↑j
.text:004055B0                 mov     [esp+1Ch+Format], ecx ; File
.text:004055B4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:004055BB                 call    _flsbuf
.text:004055C0                 jmp     short loc_405595
.text:004055C2 ; ---------------------------------------------------------------------------
.text:004055C2
.text:004055C2 loc_4055C2:                             ; CODE XREF: sub_405520+56↑j
.text:004055C2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:004055C5                 call    strerror
.text:004055CA                 test    eax, eax
.text:004055CC                 jz      short loc_4055ED
.text:004055CE
.text:004055CE loc_4055CE:                             ; CODE XREF: sub_405520+D2↓j
.text:004055CE                 mov     [esp+1Ch+ArgList], eax
.text:004055D2                 mov     ebx, ds:_iob
.text:004055D8                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:004055E0                 add     ebx, 40h ; '@'
.text:004055E3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:004055E6                 call    fprintf
.text:004055EB                 jmp     short loc_405578
.text:004055ED ; ---------------------------------------------------------------------------
.text:004055ED
.text:004055ED loc_4055ED:                             ; CODE XREF: sub_405520+AC↑j
.text:004055ED                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004055F2                 jmp     short loc_4055CE
.text:004055F4 ; ---------------------------------------------------------------------------
.text:004055F4
.text:004055F4 loc_4055F4:                             ; CODE XREF: sub_405520+25↑j
.text:004055F4                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:004055FC                 mov     edx, ds:_iob
.text:00405602                 mov     ecx, ds:dword_4071E0
.text:00405608                 add     edx, 40h ; '@'
.text:0040560B                 mov     [esp+1Ch+ArgList], ecx
.text:0040560F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405612                 call    fprintf
.text:00405617                 jmp     loc_40554D
.text:0040561C ; ---------------------------------------------------------------------------
.text:0040561C
.text:0040561C loc_40561C:                             ; CODE XREF: sub_405520+88↑j
.text:0040561C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040561F                 call    exit
.text:0040561F sub_405520      endp
.text:0040561F
.text:00405624
.text:00405624 ; =============== S U B R O U T I N E =======================================
.text:00405624
.text:00405624
.text:00405624 ; int __cdecl sub_405624(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00405624 sub_405624      proc near               ; DATA XREF: sub_405624+77↓o
.text:00405624
.text:00405624 Stream          = dword ptr -28h
.text:00405624 Format          = dword ptr -24h
.text:00405624 ArgList         = dword ptr -20h
.text:00405624 var_1C          = dword ptr -1Ch
.text:00405624 Code            = dword ptr  8
.text:00405624 ErrorMessage    = dword ptr  0Ch
.text:00405624 Str2            = dword ptr  10h
.text:00405624 arg_10          = dword ptr  14h
.text:00405624 arg_14          = dword ptr  18h
.text:00405624 arg_18          = byte ptr  1Ch
.text:00405624
.text:00405624                 and     eax, 64253A73h
.text:00405629                 cmp     ah, [eax]
.text:0040562B
.text:0040562B loc_40562B:                             ; DATA XREF: sub_405624:loc_405765↓o
.text:0040562B                 add     ds:55003A73h, ah
.text:00405631                 push    edi
.text:00405632                 push    esi
.text:00405633                 push    ebx
.text:00405634                 sub     esp, 1Ch
.text:00405637                 mov     edx, ds:dword_407250
.text:0040563D                 mov     ebp, [esp+28h+Code]
.text:00405641                 mov     edi, [esp+28h+ErrorMessage]
.text:00405645                 test    edx, edx
.text:00405647                 mov     ebx, [esp+28h+Str2]
.text:0040564B                 mov     esi, [esp+28h+arg_10]
.text:0040564F                 jz      short loc_405669
.text:00405651                 cmp     ds:dword_4071D0, esi
.text:00405657                 jz      loc_405790
.text:0040565D
.text:0040565D loc_40565D:                             ; CODE XREF: sub_405624+18D↓j
.text:0040565D                 mov     ds:Str1, ebx
.text:00405663                 mov     ds:dword_4071D0, esi
.text:00405669
.text:00405669 loc_405669:                             ; CODE XREF: sub_405624+2B↑j
.text:00405669                 mov     edx, ds:_iob
.text:0040566F                 add     edx, 20h ; ' '
.text:00405672                 mov     [esp+28h+Stream], edx ; Stream
.text:00405675                 call    fflush
.text:0040567A                 mov     eax, ds:dword_407210
.text:0040567F                 test    eax, eax
.text:00405681                 jz      loc_405765
.text:00405687                 call    eax ; dword_407210
.text:00405689
.text:00405689 loc_405689:                             ; CODE XREF: sub_405624+164↓j
.text:00405689                 test    ebx, ebx
.text:0040568B                 jz      short loc_4056AE
.text:0040568D                 mov     [esp+28h+ArgList], ebx
.text:00405691                 mov     ebx, ds:_iob
.text:00405697                 mov     [esp+28h+var_1C], esi
.text:0040569B                 mov     [esp+28h+Format], offset sub_405624 ; Format
.text:004056A3                 add     ebx, 40h ; '@'
.text:004056A6                 mov     [esp+28h+Stream], ebx ; Stream
.text:004056A9                 call    fprintf
.text:004056AE
.text:004056AE loc_4056AE:                             ; CODE XREF: sub_405624+67↑j
.text:004056AE                 mov     esi, ds:_iob
.text:004056B4                 lea     edx, [esp+28h+arg_18]
.text:004056B8                 mov     ecx, [esp+28h+arg_14]
.text:004056BC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:004056C0                 add     esi, 40h ; '@'
.text:004056C3                 mov     [esp+28h+Format], ecx ; Format
.text:004056C7                 mov     [esp+28h+Stream], esi ; Stream
.text:004056CA                 call    vfprintf
.text:004056CF                 inc     ds:dword_407220
.text:004056D5                 test    edi, edi
.text:004056D7                 jnz     short loc_405730
.text:004056D9
.text:004056D9 loc_4056D9:                             ; CODE XREF: sub_405624+135↓j
.text:004056D9                 mov     edx, ds:_iob
.text:004056DF                 lea     ecx, [edx+40h]
.text:004056E2                 mov     ebx, [ecx+4]
.text:004056E5                 dec     ebx
.text:004056E6                 test    ebx, ebx
.text:004056E8                 mov     [ecx+4], ebx
.text:004056EB                 js      short loc_405717
.text:004056ED                 mov     esi, [edx+40h]
.text:004056F0                 mov     byte ptr [esi], 0Ah
.text:004056F3                 inc     dword ptr [edx+40h]
.text:004056F6
.text:004056F6 loc_4056F6:                             ; CODE XREF: sub_405624+103↓j
.text:004056F6                 mov     ecx, ds:_iob
.text:004056FC                 add     ecx, 40h ; '@'
.text:004056FF                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405702                 call    fflush
.text:00405707                 test    ebp, ebp
.text:00405709                 jnz     loc_4057B6
.text:0040570F
.text:0040570F loc_40570F:                             ; CODE XREF: sub_405624+173↓j
.text:0040570F                                         ; sub_405624+187↓j
.text:0040570F                 add     esp, 1Ch
.text:00405712                 pop     ebx
.text:00405713                 pop     esi
.text:00405714                 pop     edi
.text:00405715                 pop     ebp
.text:00405716                 retn
.text:00405717 ; ---------------------------------------------------------------------------
.text:00405717
.text:00405717 loc_405717:                             ; CODE XREF: sub_405624+C7↑j
.text:00405717                 mov     [esp+28h+Format], ecx ; File
.text:0040571B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00405722                 call    _flsbuf
.text:00405727                 jmp     short loc_4056F6
.text:00405727 ; ---------------------------------------------------------------------------
.text:00405729                 align 10h
.text:00405730
.text:00405730 loc_405730:                             ; CODE XREF: sub_405624+B3↑j
.text:00405730                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00405733                 call    strerror
.text:00405738                 test    eax, eax
.text:0040573A                 jz      short loc_40575E
.text:0040573C
.text:0040573C loc_40573C:                             ; CODE XREF: sub_405624+13F↓j
.text:0040573C                 mov     [esp+28h+ArgList], eax
.text:00405740                 mov     edi, ds:_iob
.text:00405746                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:0040574E                 add     edi, 40h ; '@'
.text:00405751                 mov     [esp+28h+Stream], edi ; Stream
.text:00405754                 call    fprintf
.text:00405759                 jmp     loc_4056D9
.text:0040575E ; ---------------------------------------------------------------------------
.text:0040575E
.text:0040575E loc_40575E:                             ; CODE XREF: sub_405624+116↑j
.text:0040575E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405763                 jmp     short loc_40573C
.text:00405765 ; ---------------------------------------------------------------------------
.text:00405765
.text:00405765 loc_405765:                             ; CODE XREF: sub_405624+5D↑j
.text:00405765                 mov     [esp+28h+Format], (offset loc_40562B+1) ; Format
.text:0040576D                 mov     ecx, ds:_iob
.text:00405773                 mov     edx, ds:dword_4071E0
.text:00405779                 add     ecx, 40h ; '@'
.text:0040577C                 mov     [esp+28h+ArgList], edx
.text:00405780                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405783                 call    fprintf
.text:00405788                 jmp     loc_405689
.text:00405788 ; ---------------------------------------------------------------------------
.text:0040578D                 align 10h
.text:00405790
.text:00405790 loc_405790:                             ; CODE XREF: sub_405624+33↑j
.text:00405790                 mov     eax, ds:Str1
.text:00405795                 cmp     ebx, eax
.text:00405797                 jz      loc_40570F
.text:0040579D                 mov     [esp+28h+Format], ebx ; Str2
.text:004057A1                 mov     [esp+28h+Stream], eax ; Str1
.text:004057A4                 call    strcmp
.text:004057A9                 test    eax, eax
.text:004057AB                 jz      loc_40570F
.text:004057B1                 jmp     loc_40565D
.text:004057B6 ; ---------------------------------------------------------------------------
.text:004057B6
.text:004057B6 loc_4057B6:                             ; CODE XREF: sub_405624+E5↑j
.text:004057B6                 mov     [esp+28h+Stream], ebp ; Code
.text:004057B9                 call    exit
.text:004057B9 sub_405624      endp ; sp-analysis failed
.text:004057B9
.text:004057B9 ; ---------------------------------------------------------------------------
.text:004057BE                 align 10h
.text:004057C0
.text:004057C0 ; =============== S U B R O U T I N E =======================================
.text:004057C0
.text:004057C0 ; Attributes: thunk
.text:004057C0
.text:004057C0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:004057C0 mbrtowc         proc near               ; CODE XREF: sub_4041C0+757↑p
.text:004057C0                 jmp     ds:__imp_mbrtowc
.text:004057C0 mbrtowc         endp
.text:004057C0
.text:004057C0 ; ---------------------------------------------------------------------------
.text:004057C6                 align 10h
.text:004057D0
.text:004057D0 ; =============== S U B R O U T I N E =======================================
.text:004057D0
.text:004057D0 ; Attributes: bp-based frame
.text:004057D0
.text:004057D0 sub_4057D0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:004057D0                 push    ebp
.text:004057D1                 mov     ecx, offset Buffer
.text:004057D6                 cmp     ecx, offset Buffer
.text:004057DC                 mov     ebp, esp
.text:004057DE                 jnb     short loc_4057F6
.text:004057E0
.text:004057E0 loc_4057E0:                             ; CODE XREF: sub_4057D0+24↓j
.text:004057E0                 mov     edx, [ecx+4]
.text:004057E3                 mov     eax, [ecx]
.text:004057E5                 add     ecx, 8
.text:004057E8                 add     [edx+400000h], eax
.text:004057EE                 cmp     ecx, offset Buffer
.text:004057F4                 jb      short loc_4057E0
.text:004057F6
.text:004057F6 loc_4057F6:                             ; CODE XREF: sub_4057D0+E↑j
.text:004057F6                 pop     ebp
.text:004057F7                 retn
.text:004057F7 sub_4057D0      endp
.text:004057F7
.text:004057F7 ; ---------------------------------------------------------------------------
.text:004057F8                 align 10h
.text:00405800
.text:00405800 ; =============== S U B R O U T I N E =======================================
.text:00405800
.text:00405800 ; Attributes: bp-based frame
.text:00405800
.text:00405800 sub_405800      proc near               ; CODE XREF: sub_401080+16↑p
.text:00405800                                         ; TopLevelExceptionFilter+D7↑p
.text:00405800                 push    ebp
.text:00405801                 mov     ebp, esp
.text:00405803                 fninit
.text:00405805                 pop     ebp
.text:00405806                 retn
.text:00405806 sub_405800      endp
.text:00405806
.text:00405806 ; ---------------------------------------------------------------------------
.text:00405807                 align 10h
.text:00405810
.text:00405810 ; =============== S U B R O U T I N E =======================================
.text:00405810
.text:00405810 ; Attributes: bp-based frame
.text:00405810
.text:00405810 ; void __cdecl sub_405810()
.text:00405810 sub_405810      proc near               ; DATA XREF: .text:loc_405859↓o
.text:00405810                                         ; sub_4058A0:loc_4058CE↓o
.text:00405810                 push    ebp
.text:00405811                 mov     ebp, esp
.text:00405813                 sub     esp, 8
.text:00405816                 mov     eax, off_406084
.text:0040581B                 mov     edx, [eax]
.text:0040581D                 test    edx, edx
.text:0040581F                 jnz     short loc_405825
.text:00405821
.text:00405821 loc_405821:                             ; CODE XREF: sub_405810+2C↓j
.text:00405821                 mov     esp, ebp
.text:00405823                 pop     ebp
.text:00405824                 retn
.text:00405825 ; ---------------------------------------------------------------------------
.text:00405825
.text:00405825 loc_405825:                             ; CODE XREF: sub_405810+F↑j
.text:00405825                                         ; sub_405810+2A↓j
.text:00405825                 call    dword ptr [eax]
.text:00405827                 mov     edx, off_406084
.text:0040582D                 mov     ecx, [edx+4]
.text:00405830                 lea     eax, [edx+4]
.text:00405833                 mov     off_406084, eax
.text:00405838                 test    ecx, ecx
.text:0040583A                 jnz     short loc_405825
.text:0040583C                 jmp     short loc_405821
.text:0040583C sub_405810      endp
.text:0040583C
.text:0040583C ; ---------------------------------------------------------------------------
.text:0040583E                 align 10h
.text:00405840                 push    ebp
.text:00405841                 mov     ebp, esp
.text:00405843                 sub     esp, 8
.text:00405846                 mov     [ebp-4], ebx
.text:00405849                 mov     eax, ds:dword_405BD0
.text:0040584E                 cmp     eax, 0FFFFFFFFh
.text:00405851                 jz      short loc_40587C
.text:00405853
.text:00405853 loc_405853:                             ; CODE XREF: .text:00405886↓j
.text:00405853                                         ; .text:00405899↓j
.text:00405853                 test    eax, eax
.text:00405855                 mov     ebx, eax
.text:00405857                 jnz     short loc_405870
.text:00405859
.text:00405859 loc_405859:                             ; CODE XREF: .text:0040587A↓j
.text:00405859                 mov     dword ptr [esp], offset sub_405810
.text:00405860                 call    sub_401040
.text:00405865                 mov     ebx, [ebp-4]
.text:00405868                 mov     esp, ebp
.text:0040586A                 pop     ebp
.text:0040586B                 retn
.text:0040586B ; ---------------------------------------------------------------------------
.text:0040586C                 align 10h
.text:00405870
.text:00405870 loc_405870:                             ; CODE XREF: .text:00405857↑j
.text:00405870                                         ; .text:00405878↓j
.text:00405870                 call    ds:dword_405BD0[ebx*4]
.text:00405877                 dec     ebx
.text:00405878                 jnz     short loc_405870
.text:0040587A                 jmp     short loc_405859
.text:0040587C ; ---------------------------------------------------------------------------
.text:0040587C
.text:0040587C loc_40587C:                             ; CODE XREF: .text:00405851↑j
.text:0040587C                 mov     ecx, ds:dword_405BD4
.text:00405882                 xor     eax, eax
.text:00405884                 test    ecx, ecx
.text:00405886                 jz      short loc_405853
.text:00405888                 mov     edx, offset dword_405BD0
.text:0040588D                 lea     esi, [esi+0]
.text:00405890
.text:00405890 loc_405890:                             ; CODE XREF: .text:00405897↓j
.text:00405890                 inc     eax
.text:00405891                 mov     ecx, [edx+eax*4+4]
.text:00405895                 test    ecx, ecx
.text:00405897                 jnz     short loc_405890
.text:00405899                 jmp     short loc_405853
.text:00405899 ; ---------------------------------------------------------------------------
.text:0040589B                 align 10h
.text:004058A0
.text:004058A0 ; =============== S U B R O U T I N E =======================================
.text:004058A0
.text:004058A0 ; Attributes: bp-based frame
.text:004058A0
.text:004058A0 sub_4058A0      proc near               ; CODE XREF: sub_401670+18↑p
.text:004058A0
.text:004058A0 var_8           = dword ptr -8
.text:004058A0 var_4           = dword ptr -4
.text:004058A0
.text:004058A0                 push    ebp
.text:004058A1                 mov     ebp, esp
.text:004058A3                 sub     esp, 8
.text:004058A6                 mov     [ebp+var_4], ebx
.text:004058A9                 mov     edx, dword_406080
.text:004058AF                 test    edx, edx
.text:004058B1                 jnz     short loc_4058DA
.text:004058B3                 mov     eax, ds:dword_405BD0
.text:004058B8                 mov     edx, 1
.text:004058BD                 mov     dword_406080, edx
.text:004058C3                 cmp     eax, 0FFFFFFFFh
.text:004058C6                 jz      short loc_4058ED
.text:004058C8
.text:004058C8 loc_4058C8:                             ; CODE XREF: sub_4058A0+57↓j
.text:004058C8                                         ; sub_4058A0+69↓j
.text:004058C8                 test    eax, eax
.text:004058CA                 mov     ebx, eax
.text:004058CC                 jnz     short loc_4058E1
.text:004058CE
.text:004058CE loc_4058CE:                             ; CODE XREF: sub_4058A0+4B↓j
.text:004058CE                 mov     [esp+8+var_8], offset sub_405810 ; void (__cdecl *)()
.text:004058D5                 call    sub_401040
.text:004058DA
.text:004058DA loc_4058DA:                             ; CODE XREF: sub_4058A0+11↑j
.text:004058DA                 mov     ebx, [ebp+var_4]
.text:004058DD                 mov     esp, ebp
.text:004058DF                 pop     ebp
.text:004058E0                 retn
.text:004058E1 ; ---------------------------------------------------------------------------
.text:004058E1
.text:004058E1 loc_4058E1:                             ; CODE XREF: sub_4058A0+2C↑j
.text:004058E1                                         ; sub_4058A0+49↓j
.text:004058E1                 call    ds:dword_405BD0[ebx*4]
.text:004058E8                 dec     ebx
.text:004058E9                 jnz     short loc_4058E1
.text:004058EB                 jmp     short loc_4058CE
.text:004058ED ; ---------------------------------------------------------------------------
.text:004058ED
.text:004058ED loc_4058ED:                             ; CODE XREF: sub_4058A0+26↑j
.text:004058ED                 mov     ecx, ds:dword_405BD4
.text:004058F3                 xor     eax, eax
.text:004058F5                 test    ecx, ecx
.text:004058F7                 jz      short loc_4058C8
.text:004058F9                 mov     edx, offset dword_405BD0
.text:004058FE                 mov     esi, esi
.text:00405900
.text:00405900 loc_405900:                             ; CODE XREF: sub_4058A0+67↓j
.text:00405900                 inc     eax
.text:00405901                 mov     ebx, [edx+eax*4+4]
.text:00405905                 test    ebx, ebx
.text:00405907                 jnz     short loc_405900
.text:00405909                 jmp     short loc_4058C8
.text:00405909 sub_4058A0      endp
.text:00405909
.text:00405909 ; ---------------------------------------------------------------------------
.text:0040590B                 align 10h
.text:00405910
.text:00405910 ; =============== S U B R O U T I N E =======================================
.text:00405910
.text:00405910 ; Attributes: info_from_lumina
.text:00405910
.text:00405910 ; void *__cdecl _alloca(size_t Size)
.text:00405910 __alloca        proc near               ; CODE XREF: sub_401670+13↑p
.text:00405910                 push    ecx
.text:00405911                 mov     ecx, esp
.text:00405913                 add     ecx, 8
.text:00405916
.text:00405916 loc_405916:                             ; CODE XREF: __alloca+1B↓j
.text:00405916                 cmp     eax, 1000h
.text:0040591B                 jb      short loc_40592D
.text:0040591D                 sub     ecx, 1000h
.text:00405923                 or      dword ptr [ecx], 0
.text:00405926                 sub     eax, 1000h
.text:0040592B                 jmp     short loc_405916
.text:0040592D ; ---------------------------------------------------------------------------
.text:0040592D
.text:0040592D loc_40592D:                             ; CODE XREF: __alloca+B↑j
.text:0040592D                 sub     ecx, eax
.text:0040592F                 or      dword ptr [ecx], 0
.text:00405932                 mov     eax, esp
.text:00405934                 mov     esp, ecx
.text:00405936                 mov     ecx, [eax]
.text:00405938                 mov     eax, [eax+4]
.text:0040593B                 jmp     eax
.text:0040593B __alloca        endp
.text:0040593B
.text:0040593B ; ---------------------------------------------------------------------------
.text:0040593D                 align 10h
.text:00405940                 jmp     ds:__set_app_type
.text:00405940 ; ---------------------------------------------------------------------------
.text:00405946                 align 10h
.text:00405950
.text:00405950 ; =============== S U B R O U T I N E =======================================
.text:00405950
.text:00405950 ; Attributes: thunk
.text:00405950
.text:00405950 ; void __cdecl cexit()
.text:00405950 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00405950                 jmp     ds:__imp__cexit
.text:00405950 _cexit          endp
.text:00405950
.text:00405950 ; ---------------------------------------------------------------------------
.text:00405956                 align 10h
.text:00405960
.text:00405960 ; =============== S U B R O U T I N E =======================================
.text:00405960
.text:00405960 ; Attributes: thunk
.text:00405960
.text:00405960 ; char ***__cdecl _p__environ()
.text:00405960 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00405960                 jmp     ds:__imp___p__environ
.text:00405960 __p__environ    endp
.text:00405960
.text:00405960 ; ---------------------------------------------------------------------------
.text:00405966                 align 10h
.text:00405970
.text:00405970 ; =============== S U B R O U T I N E =======================================
.text:00405970
.text:00405970 ; Attributes: thunk
.text:00405970
.text:00405970 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00405970 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00405970                                         ; TopLevelExceptionFilter+88↑p ...
.text:00405970
.text:00405970 Signal          = dword ptr  4
.text:00405970 Function        = dword ptr  8
.text:00405970
.text:00405970                 jmp     ds:__imp_signal
.text:00405970 signal          endp
.text:00405970
.text:00405970 ; ---------------------------------------------------------------------------
.text:00405976                 align 10h
.text:00405980
.text:00405980 ; =============== S U B R O U T I N E =======================================
.text:00405980
.text:00405980 ; Attributes: thunk
.text:00405980
.text:00405980 ; int *__cdecl _p__fmode()
.text:00405980 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00405980                 jmp     ds:__imp___p__fmode
.text:00405980 __p__fmode      endp
.text:00405980
.text:00405980 ; ---------------------------------------------------------------------------
.text:00405986                 align 10h
.text:00405990
.text:00405990 ; =============== S U B R O U T I N E =======================================
.text:00405990
.text:00405990 ; Attributes: thunk
.text:00405990
.text:00405990 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00405990 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00405990                                         ; sub_401080+90↑p ...
.text:00405990
.text:00405990 FileHandle      = dword ptr  4
.text:00405990 Mode            = dword ptr  8
.text:00405990
.text:00405990                 jmp     ds:__imp__setmode
.text:00405990 _setmode        endp
.text:00405990
.text:00405990 ; ---------------------------------------------------------------------------
.text:00405996                 align 10h
.text:004059A0
.text:004059A0 ; =============== S U B R O U T I N E =======================================
.text:004059A0
.text:004059A0 ; Attributes: thunk
.text:004059A0
.text:004059A0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:004059A0                 jmp     ds:__imp___getmainargs
.text:004059A0 __getmainargs   endp
.text:004059A0
.text:004059A0 ; ---------------------------------------------------------------------------
.text:004059A6                 align 10h
.text:004059B0
.text:004059B0 ; =============== S U B R O U T I N E =======================================
.text:004059B0
.text:004059B0 ; Attributes: thunk
.text:004059B0
.text:004059B0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:004059B0 memcpy          proc near               ; CODE XREF: sub_401670+411↑p
.text:004059B0                                         ; .text:00403ED8↑p ...
.text:004059B0
.text:004059B0 Src             = dword ptr  8
.text:004059B0 Size            = dword ptr  0Ch
.text:004059B0
.text:004059B0                 jmp     ds:__imp_memcpy
.text:004059B0 memcpy          endp
.text:004059B0
.text:004059B0 ; ---------------------------------------------------------------------------
.text:004059B6                 align 10h
.text:004059C0
.text:004059C0 ; =============== S U B R O U T I N E =======================================
.text:004059C0
.text:004059C0 ; Attributes: thunk
.text:004059C0
.text:004059C0 ; size_t __cdecl strlen(const char *Str)
.text:004059C0 strlen          proc near               ; CODE XREF: sub_401670+3DE↑p
.text:004059C0                                         ; sub_402290+2A9↑p ...
.text:004059C0
.text:004059C0 Str             = dword ptr  4
.text:004059C0
.text:004059C0                 jmp     ds:__imp_strlen
.text:004059C0 strlen          endp
.text:004059C0
.text:004059C0 ; ---------------------------------------------------------------------------
.text:004059C6                 align 10h
.text:004059D0
.text:004059D0 ; =============== S U B R O U T I N E =======================================
.text:004059D0
.text:004059D0 ; Attributes: thunk
.text:004059D0
.text:004059D0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:004059D0 setlocale       proc near               ; CODE XREF: sub_401670+3E↑p
.text:004059D0
.text:004059D0 Category        = dword ptr  4
.text:004059D0 Locale          = dword ptr  8
.text:004059D0
.text:004059D0                 jmp     ds:__imp_setlocale
.text:004059D0 setlocale       endp
.text:004059D0
.text:004059D0 ; ---------------------------------------------------------------------------
.text:004059D6                 align 10h
.text:004059E0
.text:004059E0 ; =============== S U B R O U T I N E =======================================
.text:004059E0
.text:004059E0 ; Attributes: thunk
.text:004059E0
.text:004059E0 ; int __cdecl fclose(FILE *Stream)
.text:004059E0 fclose          proc near               ; CODE XREF: sub_401670+344↑p
.text:004059E0                                         ; sub_401C20+344↑p ...
.text:004059E0
.text:004059E0 Stream          = dword ptr  4
.text:004059E0
.text:004059E0                 jmp     ds:__imp_fclose
.text:004059E0 fclose          endp
.text:004059E0
.text:004059E0 ; ---------------------------------------------------------------------------
.text:004059E6                 align 10h
.text:004059F0
.text:004059F0 ; =============== S U B R O U T I N E =======================================
.text:004059F0
.text:004059F0 ; Attributes: thunk
.text:004059F0
.text:004059F0 ; void *__cdecl memmove(void *, const void *Src, size_t Size)
.text:004059F0 memmove         proc near               ; CODE XREF: sub_401C20+17F↑p
.text:004059F0
.text:004059F0 Src             = dword ptr  8
.text:004059F0 Size            = dword ptr  0Ch
.text:004059F0
.text:004059F0                 jmp     ds:__imp_memmove
.text:004059F0 memmove         endp
.text:004059F0
.text:004059F0 ; ---------------------------------------------------------------------------
.text:004059F6                 align 10h
.text:00405A00
.text:00405A00 ; =============== S U B R O U T I N E =======================================
.text:00405A00
.text:00405A00 ; Attributes: thunk
.text:00405A00
.text:00405A00 ; size_t __cdecl fwrite(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:00405A00 fwrite          proc near               ; CODE XREF: sub_401C20+138↑p
.text:00405A00                                         ; sub_401C20+24C↑p ...
.text:00405A00
.text:00405A00 Buffer          = dword ptr  4
.text:00405A00 ElementSize     = dword ptr  8
.text:00405A00 ElementCount    = dword ptr  0Ch
.text:00405A00 Stream          = dword ptr  10h
.text:00405A00
.text:00405A00                 jmp     ds:__imp_fwrite
.text:00405A00 fwrite          endp
.text:00405A00
.text:00405A00 ; ---------------------------------------------------------------------------
.text:00405A06                 align 10h
.text:00405A10
.text:00405A10 ; =============== S U B R O U T I N E =======================================
.text:00405A10
.text:00405A10 ; Attributes: thunk
.text:00405A10
.text:00405A10 ; int *__cdecl errno()
.text:00405A10 _errno          proc near               ; CODE XREF: sub_401670+34C↑p
.text:00405A10                                         ; sub_401C20:loc_401F20↑p ...
.text:00405A10                 jmp     ds:__imp__errno
.text:00405A10 _errno          endp
.text:00405A10
.text:00405A10 ; ---------------------------------------------------------------------------
.text:00405A16                 align 10h
.text:00405A20
.text:00405A20 ; =============== S U B R O U T I N E =======================================
.text:00405A20
.text:00405A20 ; Attributes: noreturn thunk
.text:00405A20
.text:00405A20 ; void __cdecl __noreturn exit(int Code)
.text:00405A20 exit            proc near               ; CODE XREF: sub_401670:loc_40181D↑p
.text:00405A20                                         ; .text:00401B2B↑p ...
.text:00405A20
.text:00405A20 Code            = dword ptr  4
.text:00405A20
.text:00405A20                 jmp     ds:__imp_exit
.text:00405A20 exit            endp
.text:00405A20
.text:00405A20 ; ---------------------------------------------------------------------------
.text:00405A26                 align 10h
.text:00405A30
.text:00405A30 ; =============== S U B R O U T I N E =======================================
.text:00405A30
.text:00405A30 ; Attributes: thunk
.text:00405A30
.text:00405A30 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00405A30 fputs           proc near               ; CODE XREF: sub_401670+20C↑p
.text:00405A30                                         ; sub_401670+22E↑p ...
.text:00405A30
.text:00405A30 Buffer          = dword ptr  4
.text:00405A30 Stream          = dword ptr  8
.text:00405A30
.text:00405A30                 jmp     ds:__imp_fputs
.text:00405A30 fputs           endp
.text:00405A30
.text:00405A30 ; ---------------------------------------------------------------------------
.text:00405A36                 align 10h
.text:00405A40
.text:00405A40 ; =============== S U B R O U T I N E =======================================
.text:00405A40
.text:00405A40 ; Attributes: thunk
.text:00405A40
.text:00405A40 ; int printf(const char *const Format, ...)
.text:00405A40 printf          proc near               ; CODE XREF: sub_401670+1EA↑p
.text:00405A40                                         ; sub_401670+2B1↑p ...
.text:00405A40
.text:00405A40 Format          = dword ptr  4
.text:00405A40
.text:00405A40                 jmp     ds:__imp_printf
.text:00405A40 printf          endp
.text:00405A40
.text:00405A40 ; ---------------------------------------------------------------------------
.text:00405A46                 align 10h
.text:00405A50
.text:00405A50 ; =============== S U B R O U T I N E =======================================
.text:00405A50
.text:00405A50 ; Attributes: thunk
.text:00405A50
.text:00405A50 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00405A50 fprintf         proc near               ; CODE XREF: sub_401670+1A1↑p
.text:00405A50                                         ; .text:00401B23↑p ...
.text:00405A50
.text:00405A50 Stream          = dword ptr  4
.text:00405A50 Format          = dword ptr  8
.text:00405A50
.text:00405A50                 jmp     ds:__imp_fprintf
.text:00405A50 fprintf         endp
.text:00405A50
.text:00405A50 ; ---------------------------------------------------------------------------
.text:00405A56                 align 10h
.text:00405A60
.text:00405A60 ; =============== S U B R O U T I N E =======================================
.text:00405A60
.text:00405A60 ; Attributes: thunk
.text:00405A60
.text:00405A60 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:00405A60 fopen           proc near               ; CODE XREF: sub_401C20+408↑p
.text:00405A60
.text:00405A60 FileName        = dword ptr  4
.text:00405A60 Mode            = dword ptr  8
.text:00405A60
.text:00405A60                 jmp     ds:__imp_fopen
.text:00405A60 fopen           endp
.text:00405A60
.text:00405A60 ; ---------------------------------------------------------------------------
.text:00405A66                 align 10h
.text:00405A70
.text:00405A70 ; =============== S U B R O U T I N E =======================================
.text:00405A70
.text:00405A70 ; Attributes: thunk
.text:00405A70
.text:00405A70 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00405A70 _flsbuf         proc near               ; CODE XREF: sub_401C20+1F8↑p
.text:00405A70                                         ; sub_403350+128↑p ...
.text:00405A70
.text:00405A70 File            = dword ptr  8
.text:00405A70
.text:00405A70                 jmp     ds:__imp__flsbuf
.text:00405A70 _flsbuf         endp
.text:00405A70
.text:00405A70 ; ---------------------------------------------------------------------------
.text:00405A76                 align 10h
.text:00405A80
.text:00405A80 ; =============== S U B R O U T I N E =======================================
.text:00405A80
.text:00405A80 ; Attributes: thunk
.text:00405A80
.text:00405A80 ; int __cdecl filbuf(FILE *File)
.text:00405A80 _filbuf         proc near               ; CODE XREF: sub_401C20+3EF↑p
.text:00405A80
.text:00405A80 File            = dword ptr  4
.text:00405A80
.text:00405A80                 jmp     ds:__imp__filbuf
.text:00405A80 _filbuf         endp
.text:00405A80
.text:00405A80 ; ---------------------------------------------------------------------------
.text:00405A86                 align 10h
.text:00405A90
.text:00405A90 ; =============== S U B R O U T I N E =======================================
.text:00405A90
.text:00405A90 ; Attributes: thunk
.text:00405A90
.text:00405A90 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00405A90 strncmp         proc near               ; CODE XREF: sub_402290+23F↑p
.text:00405A90                                         ; sub_402290+699↑p
.text:00405A90
.text:00405A90 Str1            = dword ptr  4
.text:00405A90 Str2            = dword ptr  8
.text:00405A90 MaxCount        = dword ptr  0Ch
.text:00405A90
.text:00405A90                 jmp     ds:__imp_strncmp
.text:00405A90 strncmp         endp
.text:00405A90
.text:00405A90 ; ---------------------------------------------------------------------------
.text:00405A96                 align 10h
.text:00405AA0
.text:00405AA0 ; =============== S U B R O U T I N E =======================================
.text:00405AA0
.text:00405AA0 ; Attributes: thunk
.text:00405AA0
.text:00405AA0 ; char *__cdecl getenv(const char *VarName)
.text:00405AA0 getenv          proc near               ; CODE XREF: sub_402290+B57↑p
.text:00405AA0                                         ; sub_403C90+13↑p
.text:00405AA0
.text:00405AA0 VarName         = dword ptr  4
.text:00405AA0
.text:00405AA0                 jmp     ds:__imp_getenv
.text:00405AA0 getenv          endp
.text:00405AA0
.text:00405AA0 ; ---------------------------------------------------------------------------
.text:00405AA6                 align 10h
.text:00405AB0
.text:00405AB0 ; =============== S U B R O U T I N E =======================================
.text:00405AB0
.text:00405AB0 ; Attributes: thunk
.text:00405AB0
.text:00405AB0 ; char *__cdecl strchr(const char *Str, int Val)
.text:00405AB0 strchr          proc near               ; CODE XREF: sub_402290+469↑p
.text:00405AB0                                         ; sub_402290+53A↑p ...
.text:00405AB0
.text:00405AB0 Str             = dword ptr  4
.text:00405AB0 Val             = dword ptr  8
.text:00405AB0
.text:00405AB0                 jmp     ds:__imp_strchr
.text:00405AB0 strchr          endp
.text:00405AB0
.text:00405AB0 ; ---------------------------------------------------------------------------
.text:00405AB6                 align 10h
.text:00405AC0
.text:00405AC0 ; =============== S U B R O U T I N E =======================================
.text:00405AC0
.text:00405AC0 ; Attributes: thunk
.text:00405AC0
.text:00405AC0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00405AC0 vfprintf        proc near               ; CODE XREF: sub_403350+C1↑p
.text:00405AC0                                         ; sub_405520+49↑p ...
.text:00405AC0
.text:00405AC0 Stream          = dword ptr  4
.text:00405AC0 Format          = dword ptr  8
.text:00405AC0 ArgList         = dword ptr  0Ch
.text:00405AC0
.text:00405AC0                 jmp     ds:__imp_vfprintf
.text:00405AC0 vfprintf        endp
.text:00405AC0
.text:00405AC0 ; ---------------------------------------------------------------------------
.text:00405AC6                 align 10h
.text:00405AD0
.text:00405AD0 ; =============== S U B R O U T I N E =======================================
.text:00405AD0
.text:00405AD0 ; Attributes: noreturn thunk
.text:00405AD0
.text:00405AD0 ; void __cdecl __noreturn abort()
.text:00405AD0 abort           proc near               ; CODE XREF: sub_403350:loc_4033EC↑p
.text:00405AD0                                         ; sub_4040F0+32↑p ...
.text:00405AD0                 jmp     ds:__imp_abort
.text:00405AD0 abort           endp
.text:00405AD0
.text:00405AD0 ; ---------------------------------------------------------------------------
.text:00405AD6                 align 10h
.text:00405AE0
.text:00405AE0 ; =============== S U B R O U T I N E =======================================
.text:00405AE0
.text:00405AE0 ; Attributes: thunk
.text:00405AE0
.text:00405AE0 ; unsigned int __cdecl strtoul(const char *String, char **EndPtr, int Radix)
.text:00405AE0 strtoul         proc near               ; CODE XREF: sub_4035D0+94↑p
.text:00405AE0
.text:00405AE0 String          = dword ptr  4
.text:00405AE0 EndPtr          = dword ptr  8
.text:00405AE0 Radix           = dword ptr  0Ch
.text:00405AE0
.text:00405AE0                 jmp     ds:__imp_strtoul
.text:00405AE0 strtoul         endp
.text:00405AE0
.text:00405AE0 ; ---------------------------------------------------------------------------
.text:00405AE6                 align 10h
.text:00405AF0
.text:00405AF0 ; =============== S U B R O U T I N E =======================================
.text:00405AF0
.text:00405AF0 ; Attributes: noreturn thunk
.text:00405AF0
.text:00405AF0 _assert         proc near               ; CODE XREF: sub_4035D0+553↑p
.text:00405AF0                 jmp     ds:__imp__assert
.text:00405AF0 _assert         endp
.text:00405AF0
.text:00405AF0 ; ---------------------------------------------------------------------------
.text:00405AF6                 align 10h
.text:00405B00
.text:00405B00 ; =============== S U B R O U T I N E =======================================
.text:00405B00
.text:00405B00 ; Attributes: thunk
.text:00405B00
.text:00405B00 ; int __cdecl isctype(int C, int Type)
.text:00405B00 _isctype        proc near               ; CODE XREF: sub_4035D0+5F↑p
.text:00405B00                                         ; sub_4041C0+610↑p
.text:00405B00
.text:00405B00 C               = dword ptr  4
.text:00405B00 Type            = dword ptr  8
.text:00405B00
.text:00405B00                 jmp     ds:__imp__isctype
.text:00405B00 _isctype        endp
.text:00405B00
.text:00405B00 ; ---------------------------------------------------------------------------
.text:00405B06                 align 10h
.text:00405B10
.text:00405B10 ; =============== S U B R O U T I N E =======================================
.text:00405B10
.text:00405B10 ; Attributes: thunk
.text:00405B10
.text:00405B10 ; int __cdecl strtol(const char *String, char **EndPtr, int Radix)
.text:00405B10 strtol          proc near               ; CODE XREF: sub_403C90+43↑p
.text:00405B10
.text:00405B10 String          = dword ptr  4
.text:00405B10 EndPtr          = dword ptr  8
.text:00405B10 Radix           = dword ptr  0Ch
.text:00405B10
.text:00405B10                 jmp     ds:__imp_strtol
.text:00405B10 strtol          endp
.text:00405B10
.text:00405B10 ; ---------------------------------------------------------------------------
.text:00405B16                 align 10h
.text:00405B20
.text:00405B20 ; =============== S U B R O U T I N E =======================================
.text:00405B20
.text:00405B20 ; Attributes: thunk
.text:00405B20
.text:00405B20 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00405B20 memset          proc near               ; CODE XREF: .text:00403E56↑p
.text:00405B20
.text:00405B20 Val             = dword ptr  8
.text:00405B20 Size            = dword ptr  0Ch
.text:00405B20
.text:00405B20                 jmp     ds:__imp_memset
.text:00405B20 memset          endp
.text:00405B20
.text:00405B20 ; ---------------------------------------------------------------------------
.text:00405B26                 align 10h
.text:00405B30
.text:00405B30 ; =============== S U B R O U T I N E =======================================
.text:00405B30
.text:00405B30 ; Attributes: thunk
.text:00405B30
.text:00405B30 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00405B30 calloc          proc near               ; CODE XREF: .text:00403E93↑p
.text:00405B30
.text:00405B30 Count           = dword ptr  4
.text:00405B30 Size            = dword ptr  8
.text:00405B30
.text:00405B30                 jmp     ds:__imp_calloc
.text:00405B30 calloc          endp
.text:00405B30
.text:00405B30 ; ---------------------------------------------------------------------------
.text:00405B36                 align 10h
.text:00405B40
.text:00405B40 ; =============== S U B R O U T I N E =======================================
.text:00405B40
.text:00405B40 ; Attributes: thunk
.text:00405B40
.text:00405B40 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00405B40 realloc         proc near               ; CODE XREF: .text:00403D90↑p
.text:00405B40                                         ; sub_403DC0+16↑p ...
.text:00405B40
.text:00405B40 Block           = dword ptr  4
.text:00405B40 Size            = dword ptr  8
.text:00405B40
.text:00405B40                 jmp     ds:__imp_realloc
.text:00405B40 realloc         endp
.text:00405B40
.text:00405B40 ; ---------------------------------------------------------------------------
.text:00405B46                 align 10h
.text:00405B50
.text:00405B50 ; =============== S U B R O U T I N E =======================================
.text:00405B50
.text:00405B50 ; Attributes: thunk
.text:00405B50
.text:00405B50 ; void *__cdecl malloc(size_t Size)
.text:00405B50 malloc          proc near               ; CODE XREF: .text:00403D14↑p
.text:00405B50                                         ; sub_403D30+E↑p ...
.text:00405B50
.text:00405B50 Size            = dword ptr  4
.text:00405B50
.text:00405B50                 jmp     ds:__imp_malloc
.text:00405B50 malloc          endp
.text:00405B50
.text:00405B50 ; ---------------------------------------------------------------------------
.text:00405B56                 align 10h
.text:00405B60
.text:00405B60 ; =============== S U B R O U T I N E =======================================
.text:00405B60
.text:00405B60 ; Attributes: thunk
.text:00405B60
.text:00405B60 ; void __cdecl free(void *Block)
.text:00405B60 free            proc near               ; CODE XREF: sub_405300+112↑p
.text:00405B60
.text:00405B60 Block           = dword ptr  4
.text:00405B60
.text:00405B60                 jmp     ds:__imp_free
.text:00405B60 free            endp
.text:00405B60
.text:00405B60 ; ---------------------------------------------------------------------------
.text:00405B66                 align 10h
.text:00405B70
.text:00405B70 ; =============== S U B R O U T I N E =======================================
.text:00405B70
.text:00405B70 ; Attributes: thunk
.text:00405B70
.text:00405B70 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00405B70 iswctype        proc near               ; CODE XREF: sub_4041C0+78B↑p
.text:00405B70
.text:00405B70 C               = word ptr  4
.text:00405B70 Type            = word ptr  8
.text:00405B70
.text:00405B70                 jmp     ds:__imp_iswctype
.text:00405B70 iswctype        endp
.text:00405B70
.text:00405B70 ; ---------------------------------------------------------------------------
.text:00405B76                 align 10h
.text:00405B80
.text:00405B80 ; =============== S U B R O U T I N E =======================================
.text:00405B80
.text:00405B80 ; Attributes: thunk
.text:00405B80
.text:00405B80 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00405B80 strcmp          proc near               ; CODE XREF: sub_405624+180↑p
.text:00405B80
.text:00405B80 Str1            = dword ptr  4
.text:00405B80 Str2            = dword ptr  8
.text:00405B80
.text:00405B80                 jmp     ds:__imp_strcmp
.text:00405B80 strcmp          endp
.text:00405B80
.text:00405B80 ; ---------------------------------------------------------------------------
.text:00405B86                 align 10h
.text:00405B90
.text:00405B90 ; =============== S U B R O U T I N E =======================================
.text:00405B90
.text:00405B90 ; Attributes: thunk
.text:00405B90
.text:00405B90 ; int __cdecl fflush(FILE *Stream)
.text:00405B90 fflush          proc near               ; CODE XREF: sub_405520+19↑p
.text:00405B90                                         ; sub_405520+81↑p ...
.text:00405B90
.text:00405B90 Stream          = dword ptr  4
.text:00405B90
.text:00405B90                 jmp     ds:__imp_fflush
.text:00405B90 fflush          endp
.text:00405B90
.text:00405B90 ; ---------------------------------------------------------------------------
.text:00405B96                 align 10h
.text:00405BA0
.text:00405BA0 ; =============== S U B R O U T I N E =======================================
.text:00405BA0
.text:00405BA0 ; Attributes: thunk
.text:00405BA0
.text:00405BA0 ; char *__cdecl strerror(int ErrorMessage)
.text:00405BA0 strerror        proc near               ; CODE XREF: sub_405520+A5↑p
.text:00405BA0                                         ; sub_405624+10F↑p
.text:00405BA0
.text:00405BA0 ErrorMessage    = dword ptr  4
.text:00405BA0
.text:00405BA0                 jmp     ds:__imp_strerror
.text:00405BA0 strerror        endp
.text:00405BA0
.text:00405BA0 ; ---------------------------------------------------------------------------
.text:00405BA6                 align 10h
.text:00405BB0
.text:00405BB0 ; =============== S U B R O U T I N E =======================================
.text:00405BB0
.text:00405BB0 ; Attributes: thunk
.text:00405BB0
.text:00405BB0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00405BB0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00405BB0
.text:00405BB0 lpTopLevelExceptionFilter= dword ptr  4
.text:00405BB0
.text:00405BB0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00405BB0 SetUnhandledExceptionFilter endp
.text:00405BB0
.text:00405BB0 ; ---------------------------------------------------------------------------
.text:00405BB6                 align 10h
.text:00405BC0
.text:00405BC0 ; =============== S U B R O U T I N E =======================================
.text:00405BC0
.text:00405BC0 ; Attributes: noreturn thunk
.text:00405BC0
.text:00405BC0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00405BC0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00405BC0
.text:00405BC0 uExitCode       = dword ptr  4
.text:00405BC0
.text:00405BC0                 jmp     ds:__imp_ExitProcess
.text:00405BC0 ExitProcess     endp
.text:00405BC0
.text:00405BC0 ; ---------------------------------------------------------------------------
.text:00405BC6                 align 10h
.text:00405BD0 dword_405BD0    dd 0FFFFFFFFh           ; DATA XREF: .text:00405849↑r
.text:00405BD0                                         ; .text:loc_405870↑r ...
.text:00405BD4 dword_405BD4    dd 0                    ; DATA XREF: .text:loc_40587C↑r
.text:00405BD4                                         ; sub_4058A0:loc_4058ED↑r
.text:00405BD8                 dd 0FFFFFFFFh
.text:00405BDC dword_405BDC    dd 9 dup(0)             ; DATA XREF: .data:off_406084↓o
.text:00405C00                 dd 100h dup(?)
.text:00405C00 _text           ends
.text:00405C00
.data:00406000 ; Section 2. (virtual address 00006000)
.data:00406000 ; Virtual size                  : 000000A0 (    160.)
.data:00406000 ; Section size in file          : 00000200 (    512.)
.data:00406000 ; Offset to raw data for section: 00005000
.data:00406000 ; Flags C0000040: Data Readable Writable
.data:00406000 ; Alignment     : default
.data:00406000 ; ===========================================================================
.data:00406000
.data:00406000 ; Segment type: Pure data
.data:00406000 ; Segment permissions: Read/Write
.data:00406000 _data           segment para public 'DATA' use32
.data:00406000                 assume cs:_data
.data:00406000                 ;org 406000h
.data:00406000 dword_406000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00406000                                         ; sub_401080+CC↑r
.data:00406004 dword_406004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00406004                                         ; sub_401080+D4↑r
.data:00406008                 align 10h
.data:00406010 dword_406010    dd 1                    ; DATA XREF: sub_401670:loc_40197C↑r
.data:00406010                                         ; sub_402E20+3↑r ...
.data:00406014 dword_406014    dd 1                    ; DATA XREF: sub_402E20+11↑r
.data:00406014                                         ; .text:00402EC1↑r
.data:00406018 dword_406018    dd 3Fh                  ; DATA XREF: sub_402E20+7D↑w
.data:00406018                                         ; .text:00402F2D↑w
.data:0040601C                 align 10h
.data:00406020 ; char *off_406020
.data:00406020 off_406020      dd offset aCopyrightC2005
.data:00406020                                         ; DATA XREF: sub_403350+DC↑r
.data:00406020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00406024                 align 10h
.data:00406030 ; int Code
.data:00406030 Code            dd 1                    ; DATA XREF: sub_403FF0+6D↑r
.data:00406030                                         ; sub_403FF0+9A↑r ...
.data:00406034                 align 10h
.data:00406040 dword_406040    dd 1                    ; DATA XREF: sub_405300+22↑r
.data:00406040                                         ; sub_405300+65↑r ...
.data:00406044 dword_406044    dd 100h                 ; DATA XREF: sub_405300+3F↑o
.data:00406044                                         ; sub_405300+1A2↑r ...
.data:00406048 off_406048      dd offset unk_407090    ; DATA XREF: sub_405300+1AA↑r
.data:0040604C ; void *off_40604C
.data:0040604C off_40604C      dd offset dword_406044  ; DATA XREF: sub_405300+39↑r
.data:0040604C                                         ; sub_405300+60↑w ...
.data:00406050 dword_406050    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00406054                 align 10h
.data:00406060 ; int Mode
.data:00406060 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00406060                                         ; sub_401080+80↑r ...
.data:00406064                 align 10h
.data:00406070 dword_406070    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00406070                                         ; sub_401080+BA↑r
.data:00406074                 align 10h
.data:00406080 dword_406080    dd 0                    ; DATA XREF: sub_4058A0+9↑r
.data:00406080                                         ; sub_4058A0+1D↑w
.data:00406084 off_406084      dd offset dword_405BDC  ; DATA XREF: sub_405810+6↑r
.data:00406084                                         ; sub_405810+17↑r ...
.data:00406088                 align 1000h
.data:00406088 _data           ends
.data:00406088
.bss:00407000 ; Section 3. (virtual address 00007000)
.bss:00407000 ; Virtual size                  : 00000280 (    640.)
.bss:00407000 ; Section size in file          : 00000000 (      0.)
.bss:00407000 ; Offset to raw data for section: 00000000
.bss:00407000 ; Flags C0000080: Bss Readable Writable
.bss:00407000 ; Alignment     : default
.bss:00407000 ; ===========================================================================
.bss:00407000
.bss:00407000 ; Segment type: Uninitialized
.bss:00407000 ; Segment permissions: Read/Write
.bss:00407000 _bss            segment para public 'BSS' use32
.bss:00407000                 assume cs:_bss
.bss:00407000                 ;org 407000h
.bss:00407000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00407000 ; void *Buffer
.bss:00407000 Buffer          dd ?                    ; DATA XREF: sub_401C20+A1↑r
.bss:00407000                                         ; sub_401C20:loc_401D81↑r ...
.bss:00407004                 align 10h
.bss:00407010 dword_407010    dd ?                    ; DATA XREF: sub_401C20+83↑r
.bss:00407010                                         ; sub_401C20+2E6↑o
.bss:00407014                 align 10h
.bss:00407020 byte_407020     db ?                    ; DATA XREF: sub_401670+82↑w
.bss:00407020                                         ; sub_401670:loc_401822↑w ...
.bss:00407021                 align 10h
.bss:00407030 byte_407030     db ?                    ; DATA XREF: sub_401670+7B↑w
.bss:00407030                                         ; sub_401670:loc_401970↑w ...
.bss:00407031                 align 10h
.bss:00407040 byte_407040     db ?                    ; DATA XREF: sub_401670+74↑w
.bss:00407040                                         ; sub_401670:loc_401993↑r ...
.bss:00407041                 align 10h
.bss:00407050 dword_407050    dd ?                    ; DATA XREF: sub_402E20+9↑o
.bss:00407050                                         ; sub_402E20+17↑w ...
.bss:00407054 dword_407054    dd ?                    ; DATA XREF: sub_402E20+21↑w
.bss:00407054                                         ; .text:00402ED9↑w
.bss:00407058 dword_407058    dd ?                    ; DATA XREF: sub_402E20+77↑r
.bss:00407058                                         ; .text:00402F27↑r
.bss:0040705C dword_40705C    dd ?                    ; DATA XREF: sub_402E20+6B↑r
.bss:0040705C                                         ; .text:00402F1B↑r
.bss:00407060                 align 40h
.bss:00407080 ; char *dword_407080
.bss:00407080 dword_407080    dd ?                    ; DATA XREF: .text:00403FC4↑w
.bss:00407080                                         ; sub_403FF0+58↑r
.bss:00407084                 align 10h
.bss:00407090 unk_407090      db    ? ;               ; DATA XREF: sub_405300+100↑o
.bss:00407090                                         ; .data:off_406048↑o
.bss:00407091                 db    ? ;
.bss:00407092                 db    ? ;
.bss:00407093                 db    ? ;
.bss:00407094                 db    ? ;
.bss:00407095                 db    ? ;
.bss:00407096                 db    ? ;
.bss:00407097                 db    ? ;
.bss:00407098                 db    ? ;
.bss:00407099                 db    ? ;
.bss:0040709A                 db    ? ;
.bss:0040709B                 db    ? ;
.bss:0040709C                 db    ? ;
.bss:0040709D                 db    ? ;
.bss:0040709E                 db    ? ;
.bss:0040709F                 db    ? ;
.bss:004070A0                 db    ? ;
.bss:004070A1                 db    ? ;
.bss:004070A2                 db    ? ;
.bss:004070A3                 db    ? ;
.bss:004070A4                 db    ? ;
.bss:004070A5                 db    ? ;
.bss:004070A6                 db    ? ;
.bss:004070A7                 db    ? ;
.bss:004070A8                 db    ? ;
.bss:004070A9                 db    ? ;
.bss:004070AA                 db    ? ;
.bss:004070AB                 db    ? ;
.bss:004070AC                 db    ? ;
.bss:004070AD                 db    ? ;
.bss:004070AE                 db    ? ;
.bss:004070AF                 db    ? ;
.bss:004070B0                 db    ? ;
.bss:004070B1                 db    ? ;
.bss:004070B2                 db    ? ;
.bss:004070B3                 db    ? ;
.bss:004070B4                 db    ? ;
.bss:004070B5                 db    ? ;
.bss:004070B6                 db    ? ;
.bss:004070B7                 db    ? ;
.bss:004070B8                 db    ? ;
.bss:004070B9                 db    ? ;
.bss:004070BA                 db    ? ;
.bss:004070BB                 db    ? ;
.bss:004070BC                 db    ? ;
.bss:004070BD                 db    ? ;
.bss:004070BE                 db    ? ;
.bss:004070BF                 db    ? ;
.bss:004070C0                 db    ? ;
.bss:004070C1                 db    ? ;
.bss:004070C2                 db    ? ;
.bss:004070C3                 db    ? ;
.bss:004070C4                 db    ? ;
.bss:004070C5                 db    ? ;
.bss:004070C6                 db    ? ;
.bss:004070C7                 db    ? ;
.bss:004070C8                 db    ? ;
.bss:004070C9                 db    ? ;
.bss:004070CA                 db    ? ;
.bss:004070CB                 db    ? ;
.bss:004070CC                 db    ? ;
.bss:004070CD                 db    ? ;
.bss:004070CE                 db    ? ;
.bss:004070CF                 db    ? ;
.bss:004070D0                 db    ? ;
.bss:004070D1                 db    ? ;
.bss:004070D2                 db    ? ;
.bss:004070D3                 db    ? ;
.bss:004070D4                 db    ? ;
.bss:004070D5                 db    ? ;
.bss:004070D6                 db    ? ;
.bss:004070D7                 db    ? ;
.bss:004070D8                 db    ? ;
.bss:004070D9                 db    ? ;
.bss:004070DA                 db    ? ;
.bss:004070DB                 db    ? ;
.bss:004070DC                 db    ? ;
.bss:004070DD                 db    ? ;
.bss:004070DE                 db    ? ;
.bss:004070DF                 db    ? ;
.bss:004070E0                 db    ? ;
.bss:004070E1                 db    ? ;
.bss:004070E2                 db    ? ;
.bss:004070E3                 db    ? ;
.bss:004070E4                 db    ? ;
.bss:004070E5                 db    ? ;
.bss:004070E6                 db    ? ;
.bss:004070E7                 db    ? ;
.bss:004070E8                 db    ? ;
.bss:004070E9                 db    ? ;
.bss:004070EA                 db    ? ;
.bss:004070EB                 db    ? ;
.bss:004070EC                 db    ? ;
.bss:004070ED                 db    ? ;
.bss:004070EE                 db    ? ;
.bss:004070EF                 db    ? ;
.bss:004070F0                 db    ? ;
.bss:004070F1                 db    ? ;
.bss:004070F2                 db    ? ;
.bss:004070F3                 db    ? ;
.bss:004070F4                 db    ? ;
.bss:004070F5                 db    ? ;
.bss:004070F6                 db    ? ;
.bss:004070F7                 db    ? ;
.bss:004070F8                 db    ? ;
.bss:004070F9                 db    ? ;
.bss:004070FA                 db    ? ;
.bss:004070FB                 db    ? ;
.bss:004070FC                 db    ? ;
.bss:004070FD                 db    ? ;
.bss:004070FE                 db    ? ;
.bss:004070FF                 db    ? ;
.bss:00407100                 db    ? ;
.bss:00407101                 db    ? ;
.bss:00407102                 db    ? ;
.bss:00407103                 db    ? ;
.bss:00407104                 db    ? ;
.bss:00407105                 db    ? ;
.bss:00407106                 db    ? ;
.bss:00407107                 db    ? ;
.bss:00407108                 db    ? ;
.bss:00407109                 db    ? ;
.bss:0040710A                 db    ? ;
.bss:0040710B                 db    ? ;
.bss:0040710C                 db    ? ;
.bss:0040710D                 db    ? ;
.bss:0040710E                 db    ? ;
.bss:0040710F                 db    ? ;
.bss:00407110                 db    ? ;
.bss:00407111                 db    ? ;
.bss:00407112                 db    ? ;
.bss:00407113                 db    ? ;
.bss:00407114                 db    ? ;
.bss:00407115                 db    ? ;
.bss:00407116                 db    ? ;
.bss:00407117                 db    ? ;
.bss:00407118                 db    ? ;
.bss:00407119                 db    ? ;
.bss:0040711A                 db    ? ;
.bss:0040711B                 db    ? ;
.bss:0040711C                 db    ? ;
.bss:0040711D                 db    ? ;
.bss:0040711E                 db    ? ;
.bss:0040711F                 db    ? ;
.bss:00407120                 db    ? ;
.bss:00407121                 db    ? ;
.bss:00407122                 db    ? ;
.bss:00407123                 db    ? ;
.bss:00407124                 db    ? ;
.bss:00407125                 db    ? ;
.bss:00407126                 db    ? ;
.bss:00407127                 db    ? ;
.bss:00407128                 db    ? ;
.bss:00407129                 db    ? ;
.bss:0040712A                 db    ? ;
.bss:0040712B                 db    ? ;
.bss:0040712C                 db    ? ;
.bss:0040712D                 db    ? ;
.bss:0040712E                 db    ? ;
.bss:0040712F                 db    ? ;
.bss:00407130                 db    ? ;
.bss:00407131                 db    ? ;
.bss:00407132                 db    ? ;
.bss:00407133                 db    ? ;
.bss:00407134                 db    ? ;
.bss:00407135                 db    ? ;
.bss:00407136                 db    ? ;
.bss:00407137                 db    ? ;
.bss:00407138                 db    ? ;
.bss:00407139                 db    ? ;
.bss:0040713A                 db    ? ;
.bss:0040713B                 db    ? ;
.bss:0040713C                 db    ? ;
.bss:0040713D                 db    ? ;
.bss:0040713E                 db    ? ;
.bss:0040713F                 db    ? ;
.bss:00407140                 db    ? ;
.bss:00407141                 db    ? ;
.bss:00407142                 db    ? ;
.bss:00407143                 db    ? ;
.bss:00407144                 db    ? ;
.bss:00407145                 db    ? ;
.bss:00407146                 db    ? ;
.bss:00407147                 db    ? ;
.bss:00407148                 db    ? ;
.bss:00407149                 db    ? ;
.bss:0040714A                 db    ? ;
.bss:0040714B                 db    ? ;
.bss:0040714C                 db    ? ;
.bss:0040714D                 db    ? ;
.bss:0040714E                 db    ? ;
.bss:0040714F                 db    ? ;
.bss:00407150                 db    ? ;
.bss:00407151                 db    ? ;
.bss:00407152                 db    ? ;
.bss:00407153                 db    ? ;
.bss:00407154                 db    ? ;
.bss:00407155                 db    ? ;
.bss:00407156                 db    ? ;
.bss:00407157                 db    ? ;
.bss:00407158                 db    ? ;
.bss:00407159                 db    ? ;
.bss:0040715A                 db    ? ;
.bss:0040715B                 db    ? ;
.bss:0040715C                 db    ? ;
.bss:0040715D                 db    ? ;
.bss:0040715E                 db    ? ;
.bss:0040715F                 db    ? ;
.bss:00407160                 db    ? ;
.bss:00407161                 db    ? ;
.bss:00407162                 db    ? ;
.bss:00407163                 db    ? ;
.bss:00407164                 db    ? ;
.bss:00407165                 db    ? ;
.bss:00407166                 db    ? ;
.bss:00407167                 db    ? ;
.bss:00407168                 db    ? ;
.bss:00407169                 db    ? ;
.bss:0040716A                 db    ? ;
.bss:0040716B                 db    ? ;
.bss:0040716C                 db    ? ;
.bss:0040716D                 db    ? ;
.bss:0040716E                 db    ? ;
.bss:0040716F                 db    ? ;
.bss:00407170                 db    ? ;
.bss:00407171                 db    ? ;
.bss:00407172                 db    ? ;
.bss:00407173                 db    ? ;
.bss:00407174                 db    ? ;
.bss:00407175                 db    ? ;
.bss:00407176                 db    ? ;
.bss:00407177                 db    ? ;
.bss:00407178                 db    ? ;
.bss:00407179                 db    ? ;
.bss:0040717A                 db    ? ;
.bss:0040717B                 db    ? ;
.bss:0040717C                 db    ? ;
.bss:0040717D                 db    ? ;
.bss:0040717E                 db    ? ;
.bss:0040717F                 db    ? ;
.bss:00407180                 db    ? ;
.bss:00407181                 db    ? ;
.bss:00407182                 db    ? ;
.bss:00407183                 db    ? ;
.bss:00407184                 db    ? ;
.bss:00407185                 db    ? ;
.bss:00407186                 db    ? ;
.bss:00407187                 db    ? ;
.bss:00407188                 db    ? ;
.bss:00407189                 db    ? ;
.bss:0040718A                 db    ? ;
.bss:0040718B                 db    ? ;
.bss:0040718C                 db    ? ;
.bss:0040718D                 db    ? ;
.bss:0040718E                 db    ? ;
.bss:0040718F                 db    ? ;
.bss:00407190 dword_407190    dd ?                    ; DATA XREF: .text:loc_404C91↑o
.bss:00407190                                         ; .text:loc_404CB0↑o ...
.bss:00407194 dword_407194    dd ?                    ; DATA XREF: .text:loc_404D30↑o
.bss:00407194                                         ; .text:004051B8↑r ...
.bss:00407198 dword_407198    dd ?                    ; DATA XREF: .text:004051B2↑r
.bss:00407198                                         ; sub_405260+2C↑r
.bss:0040719C dword_40719C    dd ?                    ; DATA XREF: .text:004051A6↑r
.bss:0040719C                                         ; sub_405260+22↑r
.bss:004071A0 dword_4071A0    dd ?                    ; DATA XREF: .text:004051C2↑r
.bss:004071A0                                         ; sub_405260+36↑r
.bss:004071A4 dword_4071A4    dd ?                    ; DATA XREF: .text:004051D2↑r
.bss:004071A4                                         ; sub_405260+4E↑r
.bss:004071A8 dword_4071A8    dd ?                    ; DATA XREF: .text:004051EF↑r
.bss:004071A8                                         ; sub_405260+62↑r
.bss:004071AC dword_4071AC    dd ?                    ; DATA XREF: .text:004051E5↑r
.bss:004071AC                                         ; sub_405260+70↑r
.bss:004071B0 dword_4071B0    dd ?                    ; DATA XREF: .text:004051C8↑r
.bss:004071B0                                         ; sub_405260+7A↑r
.bss:004071B4                 align 10h
.bss:004071C0 ; char *Str1
.bss:004071C0 Str1            dd ?                    ; DATA XREF: sub_405624:loc_40565D↑w
.bss:004071C0                                         ; sub_405624:loc_405790↑r
.bss:004071C4                 align 10h
.bss:004071D0 dword_4071D0    dd ?                    ; DATA XREF: sub_405624+2D↑r
.bss:004071D0                                         ; sub_405624+3F↑w
.bss:004071D4                 align 10h
.bss:004071E0 dword_4071E0    dd ?                    ; DATA XREF: sub_401670+38↑w
.bss:004071E0                                         ; sub_401670+18D↑r ...
.bss:004071E4                 align 20h
.bss:00407200 ; char dword_407200[]
.bss:00407200 dword_407200    dd ?                    ; DATA XREF: sub_401670+10B↑r
.bss:00407200                                         ; sub_401670+155↑r ...
.bss:00407204                 align 10h
.bss:00407210 dword_407210    dd ?                    ; CODE XREF: sub_405624+63↑p
.bss:00407210                                         ; DATA XREF: sub_405520+1E↑r ...
.bss:00407214                 align 10h
.bss:00407220 dword_407220    dd ?                    ; DATA XREF: sub_405520+4E↑w
.bss:00407220                                         ; sub_405624+AB↑w
.bss:00407224                 db    ? ;
.bss:00407225                 db    ? ;
.bss:00407226                 db    ? ;
.bss:00407227                 db    ? ;
.bss:00407228                 db    ? ;
.bss:00407229                 db    ? ;
.bss:0040722A                 db    ? ;
.bss:0040722B                 db    ? ;
.bss:0040722C                 db    ? ;
.bss:0040722D                 db    ? ;
.bss:0040722E                 db    ? ;
.bss:0040722F                 db    ? ;
.bss:00407230                 db    ? ;
.bss:00407231                 db    ? ;
.bss:00407232                 db    ? ;
.bss:00407233                 db    ? ;
.bss:00407234                 db    ? ;
.bss:00407235                 db    ? ;
.bss:00407236                 db    ? ;
.bss:00407237                 db    ? ;
.bss:00407238                 db    ? ;
.bss:00407239                 db    ? ;
.bss:0040723A                 db    ? ;
.bss:0040723B                 db    ? ;
.bss:0040723C                 db    ? ;
.bss:0040723D                 db    ? ;
.bss:0040723E                 db    ? ;
.bss:0040723F                 db    ? ;
.bss:00407240                 db    ? ;
.bss:00407241                 db    ? ;
.bss:00407242                 db    ? ;
.bss:00407243                 db    ? ;
.bss:00407244                 db    ? ;
.bss:00407245                 db    ? ;
.bss:00407246                 db    ? ;
.bss:00407247                 db    ? ;
.bss:00407248                 db    ? ;
.bss:00407249                 db    ? ;
.bss:0040724A                 db    ? ;
.bss:0040724B                 db    ? ;
.bss:0040724C                 db    ? ;
.bss:0040724D                 db    ? ;
.bss:0040724E                 db    ? ;
.bss:0040724F                 db    ? ;
.bss:00407250 dword_407250    dd ?                    ; DATA XREF: sub_405624+13↑r
.bss:00407254                 align 1000h
.bss:00407254 _bss            ends
.bss:00407254
.idata:00408000 ; Section 4. (virtual address 00008000)
.idata:00408000 ; Virtual size                  : 000005C8 (   1480.)
.idata:00408000 ; Section size in file          : 00000600 (   1536.)
.idata:00408000 ; Offset to raw data for section: 00005200
.idata:00408000 ; Flags C0000040: Data Readable Writable
.idata:00408000 ; Alignment     : default
.idata:00408000 ; ===========================================================================
.idata:00408000
.idata:00408000 ; Segment type: Externs
.idata:00408000 ; _idata
.idata:00408000
.idata:00408001
.idata:00408150 ;
.idata:00408150 ; Imports from libintl3.dll
.idata:00408150 ;
.idata:00408150                 extrn __imp_libintl_bindtextdomain:dword
.idata:00408150                                         ; CODE XREF: sub_401670+52↑p
.idata:00408150                                         ; DATA XREF: sub_401670+52↑r ...
.idata:00408154                 extrn libintl_gettext:dword
.idata:00408154                                         ; CODE XREF: sub_401670+147↑p
.idata:00408154                                         ; sub_401670+181↑p ...
.idata:00408158                 extrn libintl_textdomain:dword
.idata:00408158                                         ; CODE XREF: sub_401670+5F↑p
.idata:00408158                                         ; DATA XREF: sub_401670+5F↑r ...
.idata:0040815C
.idata:00408164 ;
.idata:00408164 ; Imports from KERNEL32.dll
.idata:00408164 ;
.idata:00408164 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00408164                 extrn __imp_ExitProcess:dword
.idata:00408164                                         ; DATA XREF: ExitProcess↑r
.idata:00408168 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00408168                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00408168                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:0040816C
.idata:00408174 ;
.idata:00408174 ; Imports from MSVCP60.DLL
.idata:00408174 ;
.idata:00408174 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00408174                 extrn __imp_mbrtowc:dword
.idata:00408174                                         ; DATA XREF: mbrtowc↑r
.idata:00408178
.idata:00408180 ;
.idata:00408180 ; Imports from msvcrt.dll
.idata:00408180 ;
.idata:00408180                 extrn __imp___getmainargs:dword
.idata:00408180                                         ; DATA XREF: __getmainargs↑r
.idata:00408184 ; int _mb_cur_max
.idata:00408184                 extrn __mb_cur_max:dword
.idata:00408184                                         ; DATA XREF: sub_4035D0+45↑r
.idata:00408184                                         ; sub_4041C0+7↑r ...
.idata:00408188 ; char ***(__cdecl *__p__environ)()
.idata:00408188                 extrn __imp___p__environ:dword
.idata:00408188                                         ; DATA XREF: __p__environ↑r
.idata:0040818C ; int *(__cdecl *__p__fmode)()
.idata:0040818C                 extrn __imp___p__fmode:dword
.idata:0040818C                                         ; DATA XREF: __p__fmode↑r
.idata:00408190 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:00408190                 extrn __set_app_type:dword
.idata:00408190                                         ; CODE XREF: start+D↑p
.idata:00408190                                         ; .text:0040102D↑p
.idata:00408190                                         ; DATA XREF: ...
.idata:00408194                 extrn __imp__assert:dword
.idata:00408194                                         ; DATA XREF: _assert↑r
.idata:00408198 ; void (__cdecl *_cexit)()
.idata:00408198                 extrn __imp__cexit:dword
.idata:00408198                                         ; DATA XREF: _cexit↑r
.idata:0040819C ; int *(__cdecl *_errno)()
.idata:0040819C                 extrn __imp__errno:dword
.idata:0040819C                                         ; DATA XREF: _errno↑r
.idata:004081A0 ; int (__cdecl *_filbuf)(FILE *File)
.idata:004081A0                 extrn __imp__filbuf:dword
.idata:004081A0                                         ; DATA XREF: _filbuf↑r
.idata:004081A4 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004081A4                 extrn __imp__flsbuf:dword
.idata:004081A4                                         ; DATA XREF: _flsbuf↑r
.idata:004081A8 ; FILE iob[]
.idata:004081A8                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004081A8                                         ; sub_401080+75↑r ...
.idata:004081AC ; int (__cdecl *_isctype)(int C, int Type)
.idata:004081AC                 extrn __imp__isctype:dword
.idata:004081AC                                         ; DATA XREF: _isctype↑r
.idata:004081B0 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004081B0                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004081B0                                         ; DATA XREF: .text:0040106C↑r
.idata:004081B4 ; const unsigned __int16 *pctype
.idata:004081B4                 extrn _pctype:dword     ; DATA XREF: sub_4035D0:loc_403AF0↑r
.idata:004081B4                                         ; sub_4041C0:loc_4048B4↑r
.idata:004081B8 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004081B8                 extrn __imp__setmode:dword
.idata:004081B8                                         ; DATA XREF: _setmode↑r
.idata:004081BC ; void (__cdecl __noreturn *abort)()
.idata:004081BC                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004081C0 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004081C0                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004081C0                                         ; DATA XREF: sub_401040+C↑r
.idata:004081C4 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004081C4                 extrn __imp_calloc:dword
.idata:004081C4                                         ; DATA XREF: calloc↑r
.idata:004081C8 ; void (__cdecl __noreturn *exit)(int Code)
.idata:004081C8                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004081CC ; int (__cdecl *fclose)(FILE *Stream)
.idata:004081CC                 extrn __imp_fclose:dword
.idata:004081CC                                         ; DATA XREF: fclose↑r
.idata:004081D0 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004081D0                 extrn __imp_fflush:dword
.idata:004081D0                                         ; DATA XREF: fflush↑r
.idata:004081D4 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:004081D4                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:004081D8 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004081D8                 extrn __imp_fprintf:dword
.idata:004081D8                                         ; DATA XREF: fprintf↑r
.idata:004081DC ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004081DC                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004081E0 ; void (__cdecl *free)(void *Block)
.idata:004081E0                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004081E4 ; size_t (__cdecl *fwrite)(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:004081E4                 extrn __imp_fwrite:dword
.idata:004081E4                                         ; DATA XREF: fwrite↑r
.idata:004081E8 ; char *(__cdecl *getenv)(const char *VarName)
.idata:004081E8                 extrn __imp_getenv:dword
.idata:004081E8                                         ; DATA XREF: getenv↑r
.idata:004081EC ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004081EC                 extrn __imp_iswctype:dword
.idata:004081EC                                         ; DATA XREF: iswctype↑r
.idata:004081F0 ; void *(__cdecl *malloc)(size_t Size)
.idata:004081F0                 extrn __imp_malloc:dword
.idata:004081F0                                         ; DATA XREF: malloc↑r
.idata:004081F4 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004081F4                 extrn __imp_memcpy:dword
.idata:004081F4                                         ; DATA XREF: memcpy↑r
.idata:004081F8 ; void *(__cdecl *memmove)(void *, const void *Src, size_t Size)
.idata:004081F8                 extrn __imp_memmove:dword
.idata:004081F8                                         ; DATA XREF: memmove↑r
.idata:004081FC ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004081FC                 extrn __imp_memset:dword
.idata:004081FC                                         ; DATA XREF: memset↑r
.idata:00408200 ; int (*printf)(const char *const Format, ...)
.idata:00408200                 extrn __imp_printf:dword
.idata:00408200                                         ; DATA XREF: printf↑r
.idata:00408204 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00408204                 extrn __imp_realloc:dword
.idata:00408204                                         ; DATA XREF: realloc↑r
.idata:00408208 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00408208                 extrn __imp_setlocale:dword
.idata:00408208                                         ; DATA XREF: setlocale↑r
.idata:0040820C ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0040820C                 extrn __imp_signal:dword
.idata:0040820C                                         ; DATA XREF: signal↑r
.idata:00408210 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00408210                 extrn __imp_strchr:dword
.idata:00408210                                         ; DATA XREF: strchr↑r
.idata:00408214 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00408214                 extrn __imp_strcmp:dword
.idata:00408214                                         ; DATA XREF: strcmp↑r
.idata:00408218 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00408218                 extrn __imp_strerror:dword
.idata:00408218                                         ; DATA XREF: strerror↑r
.idata:0040821C ; size_t (__cdecl *strlen)(const char *Str)
.idata:0040821C                 extrn __imp_strlen:dword
.idata:0040821C                                         ; DATA XREF: strlen↑r
.idata:00408220 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00408220                 extrn __imp_strncmp:dword
.idata:00408220                                         ; DATA XREF: strncmp↑r
.idata:00408224 ; int (__cdecl *strtol)(const char *String, char **EndPtr, int Radix)
.idata:00408224                 extrn __imp_strtol:dword
.idata:00408224                                         ; DATA XREF: strtol↑r
.idata:00408228 ; unsigned int (__cdecl *strtoul)(const char *String, char **EndPtr, int Radix)
.idata:00408228                 extrn __imp_strtoul:dword
.idata:00408228                                         ; DATA XREF: strtoul↑r
.idata:0040822C ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0040822C                 extrn __imp_vfprintf:dword
.idata:0040822C                                         ; DATA XREF: vfprintf↑r
.idata:00408230
.idata:00408230
.idata:00408230
.idata:00408230                 end start
