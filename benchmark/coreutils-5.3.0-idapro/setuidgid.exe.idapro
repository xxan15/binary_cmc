.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 38D1BC282AA7C90109849C1DBF1CFE597EAD1DFDE53E110924CC8A3E4FBA5A4B
.text:00401000 ; Input MD5    : A240B174CCDC21C50060BDAA0D9D4F7B
.text:00401000 ; Input CRC32  : AED4127E
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/setuidgid.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A27B (Wed Apr 20 18:42:03 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00004690 (  18064.)
.text:00401000 ; Section size in file          : 00004800 (  18432.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_4013E0+6E↓p
.text:00401040                                         ; .text:00405350↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_4052F0
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_406000
.text:004010A2                 mov     edx, dword_406060
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_406004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_406080, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_406080
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_4052C0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_406000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_406004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_4013E0
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_4052F0
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; const char Locale
.text:00401280 Locale          db 0                    ; DATA XREF: sub_4013E0+20↓o
.text:00401281                 align 20h
.text:004012A0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004012A0                                         ; DATA XREF: sub_4013E0+3A↓o
.text:004012C3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_4013E0+42↓o
.text:004012C3                                         ; sub_4013E0+4F↓o
.text:004012CD aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: sub_4013E0+7B↓o
.text:004012DA a530            db '5.3.0',0            ; DATA XREF: sub_4013E0+8B↓o
.text:004012E0 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_4013E0+93↓o
.text:004012EE ; const FILE stru_4012EE
.text:004012EE stru_4012EE     FILE <75746573h, 69676469h, 2B0064h, 7373696Dh, 20676E69h, 7265706Fh, \
.text:004012EE                                         ; DATA XREF: sub_4013E0+9B↓o
.text:004012EE                                         ; sub_4013E0+BF↓o ...
.text:004012EE                       646E61h, 90909090h>
.text:0040130E                 db  90h
.text:0040130F                 db  90h
.text:00401310                 db  90h
.text:00401311                 db  90h
.text:00401312                 db  90h
.text:00401313                 db  90h
.text:00401314                 db  90h
.text:00401315                 db  90h
.text:00401316                 db  90h
.text:00401317                 db  90h
.text:00401318                 db  90h
.text:00401319                 db  90h
.text:0040131A                 db  90h
.text:0040131B                 db  90h
.text:0040131C                 db  90h
.text:0040131D                 db  90h
.text:0040131E                 db  90h
.text:0040131F                 db  90h
.text:00401320 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401320                                         ; DATA XREF: sub_4013E0:loc_4014EE↓o
.text:00401320                                         ; sub_401950+F↓o
.text:00401347 aMissingOperand_0 db 'missing operand after %s',0
.text:00401347                                         ; DATA XREF: sub_4013E0+151↓o
.text:00401360 aCannotRunComma db 'cannot run command %s',0
.text:00401360                                         ; DATA XREF: sub_4013E0+210↓o
.text:00401376 aCannotSetUserI db 'cannot set user-ID to %lu',0
.text:00401376                                         ; DATA XREF: sub_4013E0:loc_401628↓o
.text:00401390 aCannotSetGroup db 'cannot set group-ID to %lu',0
.text:00401390                                         ; DATA XREF: sub_4013E0:loc_401661↓o
.text:004013AB aCannotSetSuppl db 'cannot set supplemental group',0
.text:004013AB                                         ; DATA XREF: sub_4013E0:loc_40169A↓o
.text:004013C9 aUnknownUserIdS db 'unknown user-ID: %s',0
.text:004013C9                                         ; DATA XREF: sub_4013E0+2F1↓o
.text:004013DD                 align 10h
.text:004013E0
.text:004013E0 ; =============== S U B R O U T I N E =======================================
.text:004013E0
.text:004013E0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:004013E0
.text:004013E0 sub_4013E0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:004013E0
.text:004013E0 Category        = dword ptr -38h
.text:004013E0 Locale          = dword ptr -34h
.text:004013E0 var_30          = dword ptr -30h
.text:004013E0 var_2C          = byte ptr -2Ch
.text:004013E0 var_28          = dword ptr -28h
.text:004013E0 var_24          = dword ptr -24h
.text:004013E0 var_20          = byte ptr -20h
.text:004013E0 var_1C          = dword ptr -1Ch
.text:004013E0 var_10          = dword ptr -10h
.text:004013E0 arg_0           = dword ptr  8
.text:004013E0 arg_4           = dword ptr  0Ch
.text:004013E0
.text:004013E0                 push    ebp
.text:004013E1                 xor     eax, eax
.text:004013E3                 mov     ebp, esp
.text:004013E5                 push    edi
.text:004013E6                 push    esi
.text:004013E7                 push    ebx
.text:004013E8                 sub     esp, 2Ch
.text:004013EB                 mov     edi, [ebp+arg_4]
.text:004013EE                 and     esp, 0FFFFFFF0h
.text:004013F1                 mov     ebx, [ebp+arg_0]
.text:004013F4                 call    __alloca
.text:004013F9                 call    sub_405390
.text:004013FE                 mov     edx, [edi]
.text:00401400                 mov     [esp+38h+Locale], offset Locale ; Locale
.text:00401408                 mov     [esp+38h+Category], 0 ; Category
.text:0040140F                 mov     ds:dword_4076C0, edx
.text:00401415                 call    setlocale
.text:0040141A                 mov     [esp+38h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401422                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:00401429                 call    ds:__imp_libintl_bindtextdomain
.text:0040142F                 mov     [esp+38h+Category], offset aCoreutils ; "coreutils"
.text:00401436                 call    ds:libintl_textdomain
.text:0040143C                 mov     [esp+38h+Category], offset sub_402D50 ; void (__cdecl *)()
.text:00401443                 mov     edx, 6Fh ; 'o'
.text:00401448                 mov     Code, edx
.text:0040144E                 call    sub_401040
.text:00401453                 mov     [esp+38h+var_1C], 0
.text:0040145B                 mov     dword ptr [esp+38h+var_20], offset aJimMeyering ; "Jim Meyering"
.text:00401463                 mov     [esp+38h+var_24], offset sub_401950 ; int
.text:0040146B                 mov     [esp+38h+var_28], offset a530 ; "5.3.0"
.text:00401473                 mov     dword ptr [esp+38h+var_2C], offset aGnuCoreutils ; "GNU coreutils"
.text:0040147B                 mov     [esp+38h+var_30], offset stru_4012EE ; FILE *
.text:00401483                 mov     [esp+38h+Locale], edi ; int
.text:00401487                 mov     [esp+38h+Category], ebx ; int
.text:0040148A                 call    sub_402C60
.text:0040148F                 mov     [esp+38h+var_28], 0 ; int
.text:00401497                 mov     dword ptr [esp+38h+var_2C], 0 ; char
.text:0040149F                 mov     [esp+38h+var_30], (offset stru_4012EE._base+2) ; char *
.text:004014A7                 mov     [esp+38h+Locale], edi ; int
.text:004014AB                 mov     [esp+38h+Category], ebx ; int
.text:004014AE                 call    sub_402AC0
.text:004014B3                 inc     eax
.text:004014B4                 jnz     short loc_4014EE
.text:004014B6                 mov     edx, dword_406020
.text:004014BC                 lea     ecx, [edx+1]
.text:004014BF                 cmp     ebx, ecx
.text:004014C1                 jg      loc_40155E
.text:004014C7                 jge     short loc_401526
.text:004014C9                 mov     [esp+38h+Category], offset stru_4012EE._flag
.text:004014D0                 call    ds:libintl_gettext
.text:004014D6                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:004014DE                 mov     [esp+38h+Category], 0 ; Code
.text:004014E5                 mov     [esp+38h+var_30], eax ; char *
.text:004014E9                 call    sub_404A50
.text:004014EE
.text:004014EE loc_4014EE:                             ; CODE XREF: sub_4013E0+D4↑j
.text:004014EE                                         ; sub_4013E0+17C↓j
.text:004014EE                 mov     [esp+38h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004014F5                 call    ds:libintl_gettext
.text:004014FB                 mov     edi, ds:_iob
.text:00401501                 mov     ecx, ds:dword_4076C0
.text:00401507                 add     edi, 40h ; '@'
.text:0040150A                 mov     [esp+38h+var_30], ecx
.text:0040150E                 mov     [esp+38h+Locale], eax ; Format
.text:00401512                 mov     [esp+38h+Category], edi ; Stream
.text:00401515                 call    fprintf
.text:0040151A                 mov     [esp+38h+Category], 6Fh ; 'o' ; Code
.text:00401521
.text:00401521 loc_401521:                             ; CODE XREF: sub_4013E0+243↓j
.text:00401521                 call    exit
.text:00401526 ; ---------------------------------------------------------------------------
.text:00401526
.text:00401526 loc_401526:                             ; CODE XREF: sub_4013E0+E7↑j
.text:00401526                 mov     ebx, [edi+edx*4]
.text:00401529                 mov     [esp+38h+Category], ebx ; char *
.text:0040152C                 call    sub_402A90
.text:00401531                 mov     [esp+38h+Category], offset aMissingOperand_0 ; "missing operand after %s"
.text:00401538                 mov     esi, eax
.text:0040153A                 call    ds:libintl_gettext
.text:00401540                 mov     dword ptr [esp+38h+var_2C], esi ; char
.text:00401544                 mov     [esp+38h+Locale], 0 ; ErrorMessage
.text:0040154C                 mov     [esp+38h+Category], 0 ; Code
.text:00401553                 mov     [esp+38h+var_30], eax ; char *
.text:00401557                 call    sub_404A50
.text:0040155C                 jmp     short loc_4014EE
.text:0040155E ; ---------------------------------------------------------------------------
.text:0040155E
.text:0040155E loc_40155E:                             ; CODE XREF: sub_4013E0+E1↑j
.text:0040155E                 mov     ebx, [edi+edx*4]
.text:00401561                 mov     [esp+38h+Category], ebx ; char *
.text:00401564                 call    sub_404D30
.text:00401569                 mov     [ebp+var_10], eax
.text:0040156C                 test    eax, eax
.text:0040156E                 jz      loc_4016C9
.text:00401574
.text:00401574 loc_401574:                             ; CODE XREF: sub_4013E0+321↓j
.text:00401574                 mov     [esp+38h+Category], 1
.text:0040157B                 mov     esi, [ebp+var_10]
.text:0040157E                 add     esi, 0Ch
.text:00401581                 mov     [esp+38h+Locale], esi
.text:00401585                 call    sub_404D10
.text:0040158A                 test    eax, eax
.text:0040158C                 jnz     loc_40169A
.text:00401592
.text:00401592 loc_401592:                             ; CODE XREF: sub_4013E0+2E4↓j
.text:00401592                 mov     eax, [ebp+var_10]
.text:00401595                 mov     ecx, [eax+0Ch]
.text:00401598                 mov     [esp+38h+Category], ecx
.text:0040159B                 call    sub_404D00
.text:004015A0                 test    eax, eax
.text:004015A2                 jnz     loc_401661
.text:004015A8
.text:004015A8 loc_4015A8:                             ; CODE XREF: sub_4013E0+2B5↓j
.text:004015A8                 mov     eax, [ebp+var_10]
.text:004015AB                 mov     ecx, [eax+8]
.text:004015AE                 mov     [esp+38h+Category], ecx
.text:004015B1                 call    sub_404CF0
.text:004015B6                 test    eax, eax
.text:004015B8                 jnz     short loc_401628
.text:004015BA
.text:004015BA loc_4015BA:                             ; CODE XREF: sub_4013E0+27C↓j
.text:004015BA                 mov     eax, dword_406020
.text:004015BF                 lea     ebx, [edi+eax*4]
.text:004015C2                 lea     edi, [ebx+4]
.text:004015C5                 mov     [esp+38h+Locale], edi ; Arguments
.text:004015C9                 mov     esi, [ebx+4]
.text:004015CC                 mov     [esp+38h+Category], esi ; FileName
.text:004015CF                 call    _execvp
.text:004015D4                 call    _errno
.text:004015D9                 cmp     dword ptr [eax], 2
.text:004015DC                 mov     ecx, [ebx+4]
.text:004015DF                 setz    dl
.text:004015E2                 mov     [esp+38h+Category], ecx ; char *
.text:004015E5                 movzx   esi, dl
.text:004015E8                 add     esi, 7Eh ; '~'
.text:004015EB                 call    sub_402A90
.text:004015F0                 mov     [esp+38h+Category], offset aCannotRunComma ; "cannot run command %s"
.text:004015F7                 mov     edi, eax
.text:004015F9                 call    ds:libintl_gettext
.text:004015FF                 mov     ebx, eax
.text:00401601                 call    _errno
.text:00401606                 mov     dword ptr [esp+38h+var_2C], edi ; char
.text:0040160A                 mov     [esp+38h+var_30], ebx ; char *
.text:0040160E                 mov     edi, [eax]
.text:00401610                 mov     [esp+38h+Category], 0 ; Code
.text:00401617                 mov     [esp+38h+Locale], edi ; ErrorMessage
.text:0040161B                 call    sub_404A50
.text:00401620                 mov     [esp+38h+Category], esi
.text:00401623                 jmp     loc_401521
.text:00401628 ; ---------------------------------------------------------------------------
.text:00401628
.text:00401628 loc_401628:                             ; CODE XREF: sub_4013E0+1D8↑j
.text:00401628                 mov     [esp+38h+Category], offset aCannotSetUserI ; "cannot set user-ID to %lu"
.text:0040162F                 call    ds:libintl_gettext
.text:00401635                 mov     esi, eax
.text:00401637                 call    _errno
.text:0040163C                 mov     edx, [ebp+var_10]
.text:0040163F                 mov     ebx, [edx+8]
.text:00401642                 mov     [esp+38h+var_30], esi ; char *
.text:00401646                 mov     dword ptr [esp+38h+var_2C], ebx ; char
.text:0040164A                 mov     esi, [eax]
.text:0040164C                 mov     [esp+38h+Category], 6Fh ; 'o' ; Code
.text:00401653                 mov     [esp+38h+Locale], esi ; ErrorMessage
.text:00401657                 call    sub_404A50
.text:0040165C                 jmp     loc_4015BA
.text:00401661 ; ---------------------------------------------------------------------------
.text:00401661
.text:00401661 loc_401661:                             ; CODE XREF: sub_4013E0+1C2↑j
.text:00401661                 mov     [esp+38h+Category], offset aCannotSetGroup ; "cannot set group-ID to %lu"
.text:00401668                 call    ds:libintl_gettext
.text:0040166E                 mov     esi, eax
.text:00401670                 call    _errno
.text:00401675                 mov     edx, [ebp+var_10]
.text:00401678                 mov     ebx, [edx+0Ch]
.text:0040167B                 mov     [esp+38h+var_30], esi ; char *
.text:0040167F                 mov     dword ptr [esp+38h+var_2C], ebx ; char
.text:00401683                 mov     edx, [eax]
.text:00401685                 mov     [esp+38h+Category], 6Fh ; 'o' ; Code
.text:0040168C                 mov     [esp+38h+Locale], edx ; ErrorMessage
.text:00401690                 call    sub_404A50
.text:00401695                 jmp     loc_4015A8
.text:0040169A ; ---------------------------------------------------------------------------
.text:0040169A
.text:0040169A loc_40169A:                             ; CODE XREF: sub_4013E0+1AC↑j
.text:0040169A                 mov     [esp+38h+Category], offset aCannotSetSuppl ; "cannot set supplemental group"
.text:004016A1                 call    ds:libintl_gettext
.text:004016A7                 mov     esi, eax
.text:004016A9                 call    _errno
.text:004016AE                 mov     [esp+38h+var_30], esi ; char *
.text:004016B2                 mov     ebx, [eax]
.text:004016B4                 mov     [esp+38h+Category], 6Fh ; 'o' ; Code
.text:004016BB                 mov     [esp+38h+Locale], ebx ; ErrorMessage
.text:004016BF                 call    sub_404A50
.text:004016C4                 jmp     loc_401592
.text:004016C9 ; ---------------------------------------------------------------------------
.text:004016C9
.text:004016C9 loc_4016C9:                             ; CODE XREF: sub_4013E0+18E↑j
.text:004016C9                 mov     [esp+38h+Category], ebx ; char *
.text:004016CC                 call    sub_402A90
.text:004016D1                 mov     [esp+38h+Category], offset aUnknownUserIdS ; "unknown user-ID: %s"
.text:004016D8                 mov     esi, eax
.text:004016DA                 call    ds:libintl_gettext
.text:004016E0                 mov     ebx, eax
.text:004016E2                 call    _errno
.text:004016E7                 mov     dword ptr [esp+38h+var_2C], esi ; char
.text:004016EB                 mov     [esp+38h+var_30], ebx ; char *
.text:004016EF                 mov     edx, [eax]
.text:004016F1                 mov     [esp+38h+Category], 6Fh ; 'o' ; Code
.text:004016F8                 mov     [esp+38h+Locale], edx ; ErrorMessage
.text:004016FC                 call    sub_404A50
.text:00401701                 jmp     loc_401574
.text:00401701 sub_4013E0      endp
.text:00401701
.text:00401701 ; ---------------------------------------------------------------------------
.text:00401706                 align 20h
.text:00401720 aUsageSUsername db 'Usage: %s USERNAME COMMAND [ARGUMENT]...',0Ah
.text:00401720                                         ; DATA XREF: sub_401950:loc_401993↓o
.text:00401720                 db '  or:  %s OPTION',0Ah,0
.text:0040175B                 align 10h
.text:00401760 aDropAnySupplem db 'Drop any supplemental groups, assume the user-ID and group-ID of',0Ah
.text:00401760                                         ; DATA XREF: sub_401950+66↓o
.text:00401760                 db 'the specified USERNAME, and run COMMAND with any specified ARGUME'
.text:00401760                 db 'NTs.',0Ah
.text:00401760                 db 'Exit with status 111 if unable to assume the required UID and GID'
.text:00401760                 db '.',0Ah
.text:00401760                 db 'Otherwise, exit with the exit status of COMMAND.',0Ah
.text:00401760                 db 'This program is useful only when run by root (UID=0).',0Ah
.text:00401760                 db 0Ah,0
.text:00401893                 align 10h
.text:004018A0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004018A0                                         ; DATA XREF: sub_401950+88↓o
.text:004018CD                 align 20h
.text:004018E0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:004018E0                                         ; DATA XREF: sub_401950+AA↓o
.text:00401916 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401950+CC↓o
.text:00401916                 db 'Report bugs to <%s>.',0Ah,0
.text:0040192D aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:0040192D                                         ; DATA XREF: sub_401950+D9↓o
.text:00401943                 align 10h
.text:00401950
.text:00401950 ; =============== S U B R O U T I N E =======================================
.text:00401950
.text:00401950 ; Attributes: noreturn
.text:00401950
.text:00401950 ; void __cdecl __noreturn sub_401950(int Code)
.text:00401950 sub_401950      proc near               ; DATA XREF: sub_4013E0+83↑o
.text:00401950
.text:00401950 Stream          = dword ptr -1Ch
.text:00401950 Format          = dword ptr -18h
.text:00401950 var_14          = dword ptr -14h
.text:00401950 var_4           = dword ptr -4
.text:00401950 Code            = dword ptr  4
.text:00401950
.text:00401950                 sub     esp, 1Ch
.text:00401953                 mov     [esp+1Ch+var_4], ebx
.text:00401957                 mov     ebx, [esp+1Ch+Code]
.text:0040195B                 test    ebx, ebx
.text:0040195D                 jz      short loc_401993
.text:0040195F                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401966                 call    ds:libintl_gettext
.text:0040196C                 mov     edx, ds:_iob
.text:00401972                 mov     ecx, ds:dword_4076C0
.text:00401978                 add     edx, 40h ; '@'
.text:0040197B                 mov     [esp+1Ch+var_14], ecx
.text:0040197F                 mov     [esp+1Ch+Format], eax ; Format
.text:00401983                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00401986                 call    fprintf
.text:0040198B
.text:0040198B loc_40198B:                             ; CODE XREF: sub_401950+E9↓j
.text:0040198B                 mov     [esp+1Ch+Stream], ebx ; Code
.text:0040198E                 call    exit
.text:00401993 ; ---------------------------------------------------------------------------
.text:00401993
.text:00401993 loc_401993:                             ; CODE XREF: sub_401950+D↑j
.text:00401993                 mov     [esp+1Ch+Stream], offset aUsageSUsername ; "Usage: %s USERNAME COMMAND [ARGUMENT].."...
.text:0040199A                 call    ds:libintl_gettext
.text:004019A0                 mov     ecx, ds:dword_4076C0
.text:004019A6                 mov     [esp+1Ch+Stream], eax ; Format
.text:004019A9                 mov     [esp+1Ch+var_14], ecx
.text:004019AD                 mov     [esp+1Ch+Format], ecx
.text:004019B1                 call    printf
.text:004019B6                 mov     [esp+1Ch+Stream], offset aDropAnySupplem ; "Drop any supplemental groups, assume th"...
.text:004019BD                 call    ds:libintl_gettext
.text:004019C3                 mov     ecx, ds:_iob
.text:004019C9                 add     ecx, 20h ; ' '
.text:004019CC                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004019D0                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004019D3                 call    fputs
.text:004019D8                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:004019DF                 call    ds:libintl_gettext
.text:004019E5                 mov     ecx, ds:_iob
.text:004019EB                 add     ecx, 20h ; ' '
.text:004019EE                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004019F2                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004019F5                 call    fputs
.text:004019FA                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401A01                 call    ds:libintl_gettext
.text:00401A07                 mov     ecx, ds:_iob
.text:00401A0D                 add     ecx, 20h ; ' '
.text:00401A10                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00401A14                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00401A17                 call    fputs
.text:00401A1C                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401A23                 call    ds:libintl_gettext
.text:00401A29                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401A31                 mov     [esp+1Ch+Stream], eax ; Format
.text:00401A34                 call    printf
.text:00401A39                 jmp     loc_40198B
.text:00401A39 sub_401950      endp
.text:00401A39
.text:00401A39 ; ---------------------------------------------------------------------------
.text:00401A3E                 align 10h
.text:00401A40 dword_401A40    dd 90002D2Dh, 7 dup(90909090h)
.text:00401A40                                         ; DATA XREF: sub_401C90+E4↓o
.text:00401A60 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401A60                                         ; DATA XREF: sub_401C90+2FC↓o
.text:00401A8D                 align 20h
.text:00401AA0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401AA0                                         ; DATA XREF: sub_401C90:loc_401FF2↓o
.text:00401ACD                 align 20h
.text:00401AE0 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00401AE0                                         ; DATA XREF: sub_401C90:loc_402090↓o
.text:00401AE0                                         ; sub_401C90:loc_402457↓o
.text:00401B06                 align 20h
.text:00401B20 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00401B20                                         ; DATA XREF: sub_401C90+48E↓o
.text:00401B40 dword_401B40    dd 90909000h, 7 dup(90909090h)
.text:00401B40                                         ; DATA XREF: sub_401C90:loc_402161↓o
.text:00401B60 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00401B60                                         ; DATA XREF: sub_401C90:loc_40217A↓o
.text:00401B80 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00401B80                                         ; DATA XREF: sub_401C90:loc_40225F↓o
.text:00401B80                                         ; sub_401C90:loc_40258C↓o
.text:00401BA7                 align 20h
.text:00401BC0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00401BC0                                         ; DATA XREF: sub_401C90:loc_4023D3↓o
.text:00401BEE                 align 20h
.text:00401C00 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00401C00                                         ; DATA XREF: sub_401C90:loc_4024BF↓o
.text:00401C21 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00401C21                                         ; DATA XREF: sub_401C90+93F↓o
.text:00401C3B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00401C3B                                         ; DATA XREF: sub_401C90:loc_402607↓o
.text:00401C55 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00401C55                                         ; DATA XREF: sub_401C90:loc_40262E↓o
.text:00401C73 ; const char VarName[]
.text:00401C73 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_401C90:loc_4027E0↓o
.text:00401C83                 align 10h
.text:00401C90
.text:00401C90 ; =============== S U B R O U T I N E =======================================
.text:00401C90
.text:00401C90
.text:00401C90 ; int __cdecl sub_401C90(int, int, char *Str, int, int, int, int, int)
.text:00401C90 sub_401C90      proc near               ; CODE XREF: sub_402820+5A↓p
.text:00401C90                                         ; .text:0040290A↓p ...
.text:00401C90
.text:00401C90 Str1            = dword ptr -5Ch
.text:00401C90 Str2            = dword ptr -58h
.text:00401C90 MaxCount        = dword ptr -54h
.text:00401C90 var_50          = dword ptr -50h
.text:00401C90 var_4C          = dword ptr -4Ch
.text:00401C90 var_3C          = dword ptr -3Ch
.text:00401C90 var_38          = dword ptr -38h
.text:00401C90 var_34          = dword ptr -34h
.text:00401C90 var_30          = dword ptr -30h
.text:00401C90 var_2C          = dword ptr -2Ch
.text:00401C90 var_28          = dword ptr -28h
.text:00401C90 var_24          = dword ptr -24h
.text:00401C90 var_20          = dword ptr -20h
.text:00401C90 var_1C          = dword ptr -1Ch
.text:00401C90 var_18          = dword ptr -18h
.text:00401C90 var_14          = dword ptr -14h
.text:00401C90 arg_0           = dword ptr  4
.text:00401C90 arg_4           = dword ptr  8
.text:00401C90 Str             = dword ptr  0Ch
.text:00401C90 arg_C           = dword ptr  10h
.text:00401C90 arg_10          = dword ptr  14h
.text:00401C90 arg_14          = dword ptr  18h
.text:00401C90 arg_18          = dword ptr  1Ch
.text:00401C90 arg_1C          = dword ptr  20h
.text:00401C90
.text:00401C90                 push    ebp
.text:00401C91                 mov     eax, 0FFFFFFFFh
.text:00401C96                 push    edi
.text:00401C97                 push    esi
.text:00401C98                 push    ebx
.text:00401C99                 sub     esp, 4Ch
.text:00401C9C                 mov     esi, [esp+5Ch+Str]
.text:00401CA0                 mov     ebp, [esp+5Ch+arg_1C]
.text:00401CA4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00401CA7                 mov     ebx, [ebp+4]
.text:00401CAA                 setz    dl
.text:00401CAD                 movzx   ecx, dl
.text:00401CB0                 dec     ecx
.text:00401CB1                 and     ecx, ebx
.text:00401CB3                 mov     [esp+5Ch+var_14], ecx
.text:00401CB7                 mov     ecx, [esp+5Ch+arg_0]
.text:00401CBB                 test    ecx, ecx
.text:00401CBD                 jle     loc_401DE7
.text:00401CC3                 mov     dword ptr [ebp+0Ch], 0
.text:00401CCA                 mov     ebx, [ebp+0]
.text:00401CCD                 test    ebx, ebx
.text:00401CCF                 jz      loc_402800
.text:00401CD5                 mov     edi, [ebp+10h]
.text:00401CD8                 test    edi, edi
.text:00401CDA                 jnz     short loc_401D33
.text:00401CDC                 lea     esi, [esi+0]
.text:00401CE0
.text:00401CE0 loc_401CE0:                             ; CODE XREF: sub_401C90+B7C↓j
.text:00401CE0                 mov     [ebp+24h], ebx
.text:00401CE3                 mov     esi, [esp+5Ch+Str]
.text:00401CE7                 mov     [ebp+20h], ebx
.text:00401CEA                 mov     ecx, [esp+5Ch+arg_18]
.text:00401CEE                 xor     ebx, ebx
.text:00401CF0                 mov     dword ptr [ebp+14h], 0
.text:00401CF7                 test    ecx, ecx
.text:00401CF9                 jz      loc_4027E0
.text:00401CFF
.text:00401CFF loc_401CFF:                             ; CODE XREF: sub_401C90+B64↓j
.text:00401CFF                 mov     ebx, 1
.text:00401D04
.text:00401D04 loc_401D04:                             ; CODE XREF: sub_401C90+B5E↓j
.text:00401D04                 mov     [ebp+1Ch], ebx
.text:00401D07                 mov     ecx, [esp+5Ch+Str]
.text:00401D0B                 movzx   eax, byte ptr [ecx]
.text:00401D0E                 cmp     al, 2Dh ; '-'
.text:00401D10                 jz      loc_4027D0
.text:00401D16                 cmp     al, 2Bh ; '+'
.text:00401D18                 jz      loc_4027B9
.text:00401D1E                 xor     edx, edx
.text:00401D20                 test    ebx, ebx
.text:00401D22                 setz    dl
.text:00401D25                 mov     [ebp+18h], edx
.text:00401D28
.text:00401D28 loc_401D28:                             ; CODE XREF: sub_401C90+B35↓j
.text:00401D28                 mov     [esp+5Ch+Str], esi
.text:00401D2C                 mov     dword ptr [ebp+10h], 1
.text:00401D33
.text:00401D33 loc_401D33:                             ; CODE XREF: sub_401C90+4A↑j
.text:00401D33                 mov     eax, [ebp+14h]
.text:00401D36                 test    eax, eax
.text:00401D38                 jz      short loc_401D43
.text:00401D3A                 cmp     byte ptr [eax], 0
.text:00401D3D                 jnz     loc_401E20
.text:00401D43
.text:00401D43 loc_401D43:                             ; CODE XREF: sub_401C90+A8↑j
.text:00401D43                 mov     ebx, [ebp+0]
.text:00401D46                 cmp     [ebp+24h], ebx
.text:00401D49                 jle     short loc_401D4E
.text:00401D4B                 mov     [ebp+24h], ebx
.text:00401D4E
.text:00401D4E loc_401D4E:                             ; CODE XREF: sub_401C90+B9↑j
.text:00401D4E                 cmp     [ebp+20h], ebx
.text:00401D51                 jle     short loc_401D56
.text:00401D53                 mov     [ebp+20h], ebx
.text:00401D56
.text:00401D56 loc_401D56:                             ; CODE XREF: sub_401C90+C1↑j
.text:00401D56                 cmp     dword ptr [ebp+18h], 1
.text:00401D5A                 jz      loc_402730
.text:00401D60
.text:00401D60 loc_401D60:                             ; CODE XREF: sub_401C90+B13↓j
.text:00401D60                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401D64                 jz      loc_402714
.text:00401D6A                 cld
.text:00401D6B                 mov     ecx, [esp+5Ch+arg_4]
.text:00401D6F                 mov     edx, 3
.text:00401D74                 mov     edi, offset dword_401A40
.text:00401D79                 mov     esi, [ecx+ebx*4]
.text:00401D7C                 mov     ecx, edx
.text:00401D7E                 repe cmpsb
.text:00401D80                 jnz     short loc_401DBC
.text:00401D82                 mov     edx, [ebp+24h]
.text:00401D85                 lea     eax, [ebx+1]
.text:00401D88                 cmp     [ebp+20h], edx
.text:00401D8B                 mov     [ebp+0], eax
.text:00401D8E                 jz      loc_402728
.text:00401D94                 cmp     edx, eax
.text:00401D96                 jz      short loc_401DB0
.text:00401D98                 mov     [esp+5Ch+Str2], ebp
.text:00401D9C                 mov     ebx, [esp+5Ch+arg_4]
.text:00401DA0                 mov     [esp+5Ch+Str1], ebx
.text:00401DA3                 call    sub_402940
.text:00401DA8                 nop
.text:00401DA9                 lea     esi, [esi+0]
.text:00401DB0
.text:00401DB0 loc_401DB0:                             ; CODE XREF: sub_401C90+106↑j
.text:00401DB0                                         ; sub_401C90+A9B↓j
.text:00401DB0                 mov     eax, [esp+5Ch+arg_0]
.text:00401DB4                 mov     ebx, eax
.text:00401DB6                 mov     [ebp+24h], eax
.text:00401DB9                 mov     [ebp+0], eax
.text:00401DBC
.text:00401DBC loc_401DBC:                             ; CODE XREF: sub_401C90+F0↑j
.text:00401DBC                 cmp     ebx, [esp+5Ch+arg_0]
.text:00401DC0                 jz      loc_402714
.text:00401DC6                 mov     esi, [esp+5Ch+arg_4]
.text:00401DCA                 mov     eax, [esi+ebx*4]
.text:00401DCD                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00401DD0                 jz      short loc_401DF7
.text:00401DD2
.text:00401DD2 loc_401DD2:                             ; CODE XREF: sub_401C90+16D↓j
.text:00401DD2                 mov     edx, [ebp+18h]
.text:00401DD5                 test    edx, edx
.text:00401DD7                 jz      short loc_401DF0
.text:00401DD9                 mov     [ebp+0Ch], eax
.text:00401DDC                 lea     edi, [ebx+1]
.text:00401DDF                 mov     eax, 1
.text:00401DE4                 mov     [ebp+0], edi
.text:00401DE7
.text:00401DE7 loc_401DE7:                             ; CODE XREF: sub_401C90+2D↑j
.text:00401DE7                                         ; sub_401C90+165↓j ...
.text:00401DE7                 add     esp, 4Ch
.text:00401DEA                 pop     ebx
.text:00401DEB                 pop     esi
.text:00401DEC                 pop     edi
.text:00401DED                 pop     ebp
.text:00401DEE                 retn
.text:00401DEE ; ---------------------------------------------------------------------------
.text:00401DEF                 align 10h
.text:00401DF0
.text:00401DF0 loc_401DF0:                             ; CODE XREF: sub_401C90+147↑j
.text:00401DF0                                         ; sub_401C90+A8A↓j ...
.text:00401DF0                 mov     eax, 0FFFFFFFFh
.text:00401DF5                 jmp     short loc_401DE7
.text:00401DF7 ; ---------------------------------------------------------------------------
.text:00401DF7
.text:00401DF7 loc_401DF7:                             ; CODE XREF: sub_401C90+140↑j
.text:00401DF7                 movzx   edx, byte ptr [eax+1]
.text:00401DFB                 test    dl, dl
.text:00401DFD                 jz      short loc_401DD2
.text:00401DFF                 mov     ebx, [esp+5Ch+arg_C]
.text:00401E03                 xor     ecx, ecx
.text:00401E05                 test    ebx, ebx
.text:00401E07                 jz      short loc_401E12
.text:00401E09                 cmp     dl, 2Dh ; '-'
.text:00401E0C                 jz      loc_40270A
.text:00401E12
.text:00401E12 loc_401E12:                             ; CODE XREF: sub_401C90+177↑j
.text:00401E12                                         ; sub_401C90+A7F↓j
.text:00401E12                 lea     esi, [ecx+eax+1]
.text:00401E16                 mov     [ebp+14h], esi
.text:00401E19                 lea     esi, [esi+0]
.text:00401E20
.text:00401E20 loc_401E20:                             ; CODE XREF: sub_401C90+AD↑j
.text:00401E20                 mov     ecx, [esp+5Ch+arg_C]
.text:00401E24                 test    ecx, ecx
.text:00401E26                 jz      loc_4021B0
.text:00401E2C                 mov     edx, [ebp+0]
.text:00401E2F                 mov     edi, [esp+5Ch+arg_4]
.text:00401E33                 mov     eax, [edi+edx*4]
.text:00401E36                 movzx   edx, byte ptr [eax+1]
.text:00401E3A                 cmp     dl, 2Dh ; '-'
.text:00401E3D                 jz      short loc_401E55
.text:00401E3F                 mov     ebx, [esp+5Ch+arg_14]
.text:00401E43                 test    ebx, ebx
.text:00401E45                 jz      loc_4021B0
.text:00401E4B                 cmp     byte ptr [eax+2], 0
.text:00401E4F                 jz      loc_4026EA
.text:00401E55
.text:00401E55 loc_401E55:                             ; CODE XREF: sub_401C90+1AD↑j
.text:00401E55                                         ; sub_401C90+A75↓j
.text:00401E55                 mov     [esp+5Ch+var_18], 0
.text:00401E5D                 mov     ecx, [ebp+14h]
.text:00401E60                 mov     [esp+5Ch+var_1C], 0
.text:00401E68                 mov     [esp+5Ch+var_20], 0
.text:00401E70                 mov     edi, ecx
.text:00401E72                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00401E7A                 movzx   eax, byte ptr [ecx]
.text:00401E7D                 test    al, al
.text:00401E7F                 jz      short loc_401E9C
.text:00401E81                 cmp     al, 3Dh ; '='
.text:00401E83                 jz      short loc_401E9C
.text:00401E85                 lea     esi, [esi+0]
.text:00401E89                 lea     edi, [edi+0]
.text:00401E90
.text:00401E90 loc_401E90:                             ; CODE XREF: sub_401C90+20A↓j
.text:00401E90                 inc     edi
.text:00401E91                 movzx   eax, byte ptr [edi]
.text:00401E94                 test    al, al
.text:00401E96                 jz      short loc_401E9C
.text:00401E98                 cmp     al, 3Dh ; '='
.text:00401E9A                 jnz     short loc_401E90
.text:00401E9C
.text:00401E9C loc_401E9C:                             ; CODE XREF: sub_401C90+1EF↑j
.text:00401E9C                                         ; sub_401C90+1F3↑j ...
.text:00401E9C                 mov     [esp+5Ch+var_28], 0
.text:00401EA4                 mov     esi, [esp+5Ch+arg_C]
.text:00401EA8                 mov     ebx, [esi]
.text:00401EAA                 test    ebx, ebx
.text:00401EAC                 mov     edx, ebx
.text:00401EAE                 jz      loc_4020D0
.text:00401EB4                 lea     esi, [esi+0]
.text:00401EBA                 lea     edi, [edi+0]
.text:00401EC0
.text:00401EC0 loc_401EC0:                             ; CODE XREF: sub_401C90+25E↓j
.text:00401EC0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00401EC4                 mov     ebx, edi
.text:00401EC6                 sub     ebx, ecx
.text:00401EC8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00401ECC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00401ECF                 call    strncmp
.text:00401ED4                 test    eax, eax
.text:00401ED6                 jz      loc_402666
.text:00401EDC
.text:00401EDC loc_401EDC:                             ; CODE XREF: sub_401C90+A0F↓j
.text:00401EDC                                         ; sub_401C90+A24↓j ...
.text:00401EDC                 inc     [esp+5Ch+var_28]
.text:00401EE0                 add     esi, 10h
.text:00401EE3                 mov     ecx, [esi]
.text:00401EE5                 test    ecx, ecx
.text:00401EE7                 mov     edx, ecx
.text:00401EE9                 jz      short loc_401EF0
.text:00401EEB                 mov     ecx, [ebp+14h]
.text:00401EEE                 jmp     short loc_401EC0
.text:00401EF0 ; ---------------------------------------------------------------------------
.text:00401EF0
.text:00401EF0 loc_401EF0:                             ; CODE XREF: sub_401C90+259↑j
.text:00401EF0                                         ; sub_401C90+A55↓j
.text:00401EF0                 mov     esi, [esp+5Ch+var_20]
.text:00401EF4                 test    esi, esi
.text:00401EF6                 jz      short loc_401F04
.text:00401EF8                 mov     edx, [esp+5Ch+var_1C]
.text:00401EFC                 test    edx, edx
.text:00401EFE                 jz      loc_402610
.text:00401F04
.text:00401F04 loc_401F04:                             ; CODE XREF: sub_401C90+266↑j
.text:00401F04                 mov     eax, [esp+5Ch+var_18]
.text:00401F08                 test    eax, eax
.text:00401F0A                 jz      loc_4020D0
.text:00401F10                 mov     ecx, [ebp+0]
.text:00401F13                 lea     eax, [ecx+1]
.text:00401F16                 mov     [ebp+0], eax
.text:00401F19                 cmp     byte ptr [edi], 0
.text:00401F1C                 jz      loc_402030
.text:00401F22                 mov     ecx, [esp+5Ch+var_18]
.text:00401F26                 mov     esi, [ecx+4]
.text:00401F29                 test    esi, esi
.text:00401F2B                 jz      short loc_401F76
.text:00401F2D                 lea     ebx, [edi+1]
.text:00401F30                 mov     [ebp+0Ch], ebx
.text:00401F33
.text:00401F33 loc_401F33:                             ; CODE XREF: sub_401C90+3A8↓j
.text:00401F33                                         ; sub_401C90+3C4↓j
.text:00401F33                 mov     ebx, [ebp+14h]
.text:00401F36                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00401F39                 call    strlen
.text:00401F3E                 add     [ebp+14h], eax
.text:00401F41                 mov     esi, [esp+5Ch+arg_10]
.text:00401F45                 test    esi, esi
.text:00401F47                 jz      short loc_401F53
.text:00401F49                 mov     ebp, [esp+5Ch+var_24]
.text:00401F4D                 mov     ecx, [esp+5Ch+arg_10]
.text:00401F51                 mov     [ecx], ebp
.text:00401F53
.text:00401F53 loc_401F53:                             ; CODE XREF: sub_401C90+2B7↑j
.text:00401F53                 mov     eax, [esp+5Ch+var_18]
.text:00401F57                 mov     ecx, [eax+8]
.text:00401F5A                 test    ecx, ecx
.text:00401F5C                 jnz     short loc_401F6A
.text:00401F5E                 mov     ecx, [esp+5Ch+var_18]
.text:00401F62
.text:00401F62 loc_401F62:                             ; CODE XREF: sub_401C90+723↓j
.text:00401F62                 mov     eax, [ecx+0Ch]
.text:00401F65                 jmp     loc_401DE7
.text:00401F6A ; ---------------------------------------------------------------------------
.text:00401F6A
.text:00401F6A loc_401F6A:                             ; CODE XREF: sub_401C90+2CC↑j
.text:00401F6A                                         ; sub_401C90+719↓j
.text:00401F6A                 mov     esi, [eax+0Ch]
.text:00401F6D                 xor     eax, eax
.text:00401F6F                 mov     [ecx], esi
.text:00401F71                 jmp     loc_401DE7
.text:00401F76 ; ---------------------------------------------------------------------------
.text:00401F76
.text:00401F76 loc_401F76:                             ; CODE XREF: sub_401C90+29B↑j
.text:00401F76                 mov     edi, [esp+5Ch+var_14]
.text:00401F7A                 test    edi, edi
.text:00401F7C                 jz      short loc_401FD0
.text:00401F7E                 mov     esi, [esp+5Ch+arg_4]
.text:00401F82                 mov     edx, [esi+eax*4-4]
.text:00401F86                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00401F8A                 jz      short loc_401FF2
.text:00401F8C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00401F93                 call    ds:libintl_gettext
.text:00401F99                 mov     edx, [esp+5Ch+var_18]
.text:00401F9D                 mov     edi, [edx]
.text:00401F9F                 mov     [esp+5Ch+var_4C], edi
.text:00401FA3                 mov     ebx, [ebp+0]
.text:00401FA6                 mov     edi, [esp+5Ch+arg_4]
.text:00401FAA                 mov     ecx, [edi+ebx*4-4]
.text:00401FAE                 movsx   esi, byte ptr [ecx]
.text:00401FB1                 mov     ecx, ds:_iob
.text:00401FB7                 add     ecx, 40h ; '@'
.text:00401FBA                 mov     [esp+5Ch+var_50], esi
.text:00401FBE                 mov     ebx, [edi]
.text:00401FC0                 mov     [esp+5Ch+Str2], eax ; Format
.text:00401FC4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00401FC7                 mov     [esp+5Ch+MaxCount], ebx
.text:00401FCB                 call    fprintf
.text:00401FD0
.text:00401FD0 loc_401FD0:                             ; CODE XREF: sub_401C90+2EC↑j
.text:00401FD0                                         ; sub_401C90+398↓j
.text:00401FD0                 mov     ecx, [ebp+14h]
.text:00401FD3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00401FD6                 call    strlen
.text:00401FDB                 add     [ebp+14h], eax
.text:00401FDE                 mov     eax, [esp+5Ch+var_18]
.text:00401FE2                 mov     esi, [eax+0Ch]
.text:00401FE5                 mov     [ebp+8], esi
.text:00401FE8
.text:00401FE8 loc_401FE8:                             ; CODE XREF: sub_401C90+4E5↓j
.text:00401FE8                                         ; sub_401C90+73E↓j ...
.text:00401FE8                 mov     eax, 3Fh ; '?'
.text:00401FED                 jmp     loc_401DE7
.text:00401FF2 ; ---------------------------------------------------------------------------
.text:00401FF2
.text:00401FF2 loc_401FF2:                             ; CODE XREF: sub_401C90+2FA↑j
.text:00401FF2                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00401FF9                 call    ds:libintl_gettext
.text:00401FFF                 mov     edx, [esp+5Ch+var_18]
.text:00402003                 mov     edi, [esp+5Ch+arg_4]
.text:00402007                 mov     ecx, ds:_iob
.text:0040200D                 mov     esi, [edx]
.text:0040200F                 add     ecx, 40h ; '@'
.text:00402012                 mov     [esp+5Ch+var_50], esi
.text:00402016                 mov     ebx, [edi]
.text:00402018                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040201C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040201F                 mov     [esp+5Ch+MaxCount], ebx
.text:00402023                 call    fprintf
.text:00402028                 jmp     short loc_401FD0
.text:00402028 ; ---------------------------------------------------------------------------
.text:0040202A                 align 10h
.text:00402030
.text:00402030 loc_402030:                             ; CODE XREF: sub_401C90+28C↑j
.text:00402030                 mov     ebx, [esp+5Ch+var_18]
.text:00402034                 cmp     dword ptr [ebx+4], 1
.text:00402038                 jnz     loc_401F33
.text:0040203E                 cmp     eax, [esp+5Ch+arg_0]
.text:00402042                 jge     short loc_402059
.text:00402044                 mov     ebx, [esp+5Ch+arg_4]
.text:00402048                 lea     edi, [ecx+2]
.text:0040204B                 mov     [ebp+0], edi
.text:0040204E                 mov     esi, [ebx+eax*4]
.text:00402051                 mov     [ebp+0Ch], esi
.text:00402054                 jmp     loc_401F33
.text:00402059 ; ---------------------------------------------------------------------------
.text:00402059
.text:00402059 loc_402059:                             ; CODE XREF: sub_401C90+3B2↑j
.text:00402059                 mov     edx, [esp+5Ch+var_14]
.text:0040205D                 test    edx, edx
.text:0040205F                 jnz     short loc_402090
.text:00402061
.text:00402061 loc_402061:                             ; CODE XREF: sub_401C90+437↓j
.text:00402061                 mov     edx, [ebp+14h]
.text:00402064                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402067                 call    strlen
.text:0040206C                 add     [ebp+14h], eax
.text:0040206F                 mov     eax, [esp+5Ch+var_18]
.text:00402073                 mov     edi, [eax+0Ch]
.text:00402076                 mov     [ebp+8], edi
.text:00402079
.text:00402079 loc_402079:                             ; CODE XREF: sub_401C90+7C2↓j
.text:00402079                 mov     ebp, [esp+5Ch+Str]
.text:0040207D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402081                 setnz   bl
.text:00402084                 movzx   esi, bl
.text:00402087                 lea     eax, [esi+esi*4+3Ah]
.text:0040208B                 jmp     loc_401DE7
.text:00402090 ; ---------------------------------------------------------------------------
.text:00402090
.text:00402090 loc_402090:                             ; CODE XREF: sub_401C90+3CF↑j
.text:00402090                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00402097                 call    ds:libintl_gettext
.text:0040209D                 mov     ecx, [ebp+0]
.text:004020A0                 mov     esi, [esp+5Ch+arg_4]
.text:004020A4                 mov     ebx, [esi+ecx*4-4]
.text:004020A8                 mov     ecx, ds:_iob
.text:004020AE                 mov     [esp+5Ch+var_50], ebx
.text:004020B2                 mov     edi, [esi]
.text:004020B4                 add     ecx, 40h ; '@'
.text:004020B7                 mov     [esp+5Ch+Str2], eax ; Format
.text:004020BB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004020BE                 mov     [esp+5Ch+MaxCount], edi
.text:004020C2                 call    fprintf
.text:004020C7                 jmp     short loc_402061
.text:004020C7 ; ---------------------------------------------------------------------------
.text:004020C9                 align 10h
.text:004020D0
.text:004020D0 loc_4020D0:                             ; CODE XREF: sub_401C90+21E↑j
.text:004020D0                                         ; sub_401C90+27A↑j
.text:004020D0                 mov     eax, [esp+5Ch+arg_14]
.text:004020D4                 test    eax, eax
.text:004020D6                 jz      short loc_402106
.text:004020D8                 mov     ebx, [ebp+0]
.text:004020DB                 mov     esi, [esp+5Ch+arg_4]
.text:004020DF                 mov     edi, [esi+ebx*4]
.text:004020E2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004020E6                 jz      short loc_402109
.text:004020E8                 mov     ecx, [ebp+14h]
.text:004020EB                 mov     edx, [esp+5Ch+Str]
.text:004020EF                 movsx   ebx, byte ptr [ecx]
.text:004020F2                 mov     [esp+5Ch+Str1], edx ; Str
.text:004020F5                 mov     [esp+5Ch+Str2], ebx ; Val
.text:004020F9                 call    strchr
.text:004020FE                 test    eax, eax
.text:00402100                 jnz     loc_4021B0
.text:00402106
.text:00402106 loc_402106:                             ; CODE XREF: sub_401C90+446↑j
.text:00402106                 mov     ebx, [ebp+0]
.text:00402109
.text:00402109 loc_402109:                             ; CODE XREF: sub_401C90+456↑j
.text:00402109                 mov     eax, [esp+5Ch+var_14]
.text:0040210D                 test    eax, eax
.text:0040210F                 jz      short loc_402161
.text:00402111                 mov     esi, [esp+5Ch+arg_4]
.text:00402115                 mov     edi, [esi+ebx*4]
.text:00402118                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040211C                 jz      short loc_40217A
.text:0040211E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00402125                 call    ds:libintl_gettext
.text:0040212B                 mov     edi, [ebp+14h]
.text:0040212E                 mov     [esp+5Ch+var_4C], edi
.text:00402132                 mov     ebx, [ebp+0]
.text:00402135                 mov     edi, [esp+5Ch+arg_4]
.text:00402139                 mov     esi, [edi+ebx*4]
.text:0040213C                 movsx   ecx, byte ptr [esi]
.text:0040213F                 mov     esi, ds:_iob
.text:00402145                 add     esi, 40h ; '@'
.text:00402148                 mov     [esp+5Ch+var_50], ecx
.text:0040214C                 mov     ebx, [edi]
.text:0040214E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402152                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00402155                 mov     [esp+5Ch+MaxCount], ebx
.text:00402159                 call    fprintf
.text:0040215E
.text:0040215E loc_40215E:                             ; CODE XREF: sub_401C90+51D↓j
.text:0040215E                 mov     ebx, [ebp+0]
.text:00402161
.text:00402161 loc_402161:                             ; CODE XREF: sub_401C90+47F↑j
.text:00402161                 mov     dword ptr [ebp+14h], offset dword_401B40
.text:00402168                 lea     edx, [ebx+1]
.text:0040216B                 mov     [ebp+0], edx
.text:0040216E
.text:0040216E loc_40216E:                             ; CODE XREF: sub_401C90+999↓j
.text:0040216E                 mov     dword ptr [ebp+8], 0
.text:00402175                 jmp     loc_401FE8
.text:0040217A ; ---------------------------------------------------------------------------
.text:0040217A
.text:0040217A loc_40217A:                             ; CODE XREF: sub_401C90+48C↑j
.text:0040217A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00402181                 call    ds:libintl_gettext
.text:00402187                 mov     ecx, [ebp+14h]
.text:0040218A                 mov     edi, [esp+5Ch+arg_4]
.text:0040218E                 mov     edx, ds:_iob
.text:00402194                 mov     [esp+5Ch+var_50], ecx
.text:00402198                 mov     ebx, [edi]
.text:0040219A                 add     edx, 40h ; '@'
.text:0040219D                 mov     [esp+5Ch+Str2], eax ; Format
.text:004021A1                 mov     [esp+5Ch+MaxCount], ebx
.text:004021A5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004021A8                 call    fprintf
.text:004021AD                 jmp     short loc_40215E
.text:004021AD ; ---------------------------------------------------------------------------
.text:004021AF                 align 10h
.text:004021B0
.text:004021B0 loc_4021B0:                             ; CODE XREF: sub_401C90+196↑j
.text:004021B0                                         ; sub_401C90+1B5↑j ...
.text:004021B0                 mov     esi, [ebp+14h]
.text:004021B3                 movzx   ebx, byte ptr [esi]
.text:004021B6                 inc     esi
.text:004021B7                 mov     [ebp+14h], esi
.text:004021BA                 mov     ecx, [esp+5Ch+Str]
.text:004021BE                 movsx   esi, bl
.text:004021C1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004021C5                 mov     edi, esi
.text:004021C7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004021CA                 call    strchr
.text:004021CF                 mov     ecx, [ebp+14h]
.text:004021D2                 cmp     byte ptr [ecx], 0
.text:004021D5                 jnz     short loc_4021DA
.text:004021D7                 inc     dword ptr [ebp+0]
.text:004021DA
.text:004021DA loc_4021DA:                             ; CODE XREF: sub_401C90+545↑j
.text:004021DA                 test    eax, eax
.text:004021DC                 jz      loc_4025C0
.text:004021E2                 cmp     bl, 3Ah ; ':'
.text:004021E5                 jz      loc_4025C0
.text:004021EB                 cmp     byte ptr [eax], 57h ; 'W'
.text:004021EE                 jz      loc_4022A6
.text:004021F4                 movzx   edx, byte ptr [eax+1]
.text:004021F8
.text:004021F8 loc_4021F8:                             ; CODE XREF: sub_401C90+61D↓j
.text:004021F8                 cmp     dl, 3Ah ; ':'
.text:004021FB                 jz      short loc_402204
.text:004021FD
.text:004021FD loc_4021FD:                             ; CODE XREF: sub_401C90+590↓j
.text:004021FD                 mov     eax, esi
.text:004021FF                 jmp     loc_401DE7
.text:00402204 ; ---------------------------------------------------------------------------
.text:00402204
.text:00402204 loc_402204:                             ; CODE XREF: sub_401C90+56B↑j
.text:00402204                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00402208                 jz      loc_402291
.text:0040220E                 cmp     byte ptr [ecx], 0
.text:00402211                 jz      short loc_402222
.text:00402213
.text:00402213 loc_402213:                             ; CODE XREF: sub_401C90+604↓j
.text:00402213                 inc     dword ptr [ebp+0]
.text:00402216                 mov     [ebp+0Ch], ecx
.text:00402219
.text:00402219 loc_402219:                             ; CODE XREF: sub_401C90+5AB↓j
.text:00402219                                         ; sub_401C90+5C6↓j ...
.text:00402219                 mov     dword ptr [ebp+14h], 0
.text:00402220                 jmp     short loc_4021FD
.text:00402222 ; ---------------------------------------------------------------------------
.text:00402222
.text:00402222 loc_402222:                             ; CODE XREF: sub_401C90+581↑j
.text:00402222                 mov     ecx, [ebp+0]
.text:00402225                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402229                 jz      short loc_40223D
.text:0040222B                 mov     eax, [esp+5Ch+arg_4]
.text:0040222F                 lea     edx, [ecx+1]
.text:00402232                 mov     [ebp+0], edx
.text:00402235                 mov     ebx, [eax+ecx*4]
.text:00402238                 mov     [ebp+0Ch], ebx
.text:0040223B                 jmp     short loc_402219
.text:0040223D ; ---------------------------------------------------------------------------
.text:0040223D
.text:0040223D loc_40223D:                             ; CODE XREF: sub_401C90+599↑j
.text:0040223D                 mov     ecx, [esp+5Ch+var_14]
.text:00402241                 test    ecx, ecx
.text:00402243                 jnz     short loc_40225F
.text:00402245
.text:00402245 loc_402245:                             ; CODE XREF: sub_401C90+5FF↓j
.text:00402245                 mov     [ebp+8], edi
.text:00402248                 mov     edi, [esp+5Ch+Str]
.text:0040224C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040224F                 jz      short loc_402258
.text:00402251                 mov     esi, 3Fh ; '?'
.text:00402256                 jmp     short loc_402219
.text:00402258 ; ---------------------------------------------------------------------------
.text:00402258
.text:00402258 loc_402258:                             ; CODE XREF: sub_401C90+5BF↑j
.text:00402258                 mov     esi, 3Ah ; ':'
.text:0040225D                 jmp     short loc_402219
.text:0040225F ; ---------------------------------------------------------------------------
.text:0040225F
.text:0040225F loc_40225F:                             ; CODE XREF: sub_401C90+5B3↑j
.text:0040225F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402266                 call    ds:libintl_gettext
.text:0040226C                 mov     [esp+5Ch+var_50], edi
.text:00402270                 mov     ebx, [esp+5Ch+arg_4]
.text:00402274                 mov     edx, ds:_iob
.text:0040227A                 mov     esi, [ebx]
.text:0040227C                 add     edx, 40h ; '@'
.text:0040227F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402283                 mov     [esp+5Ch+MaxCount], esi
.text:00402287                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040228A                 call    fprintf
.text:0040228F                 jmp     short loc_402245
.text:00402291 ; ---------------------------------------------------------------------------
.text:00402291
.text:00402291 loc_402291:                             ; CODE XREF: sub_401C90+578↑j
.text:00402291                 cmp     byte ptr [ecx], 0
.text:00402294                 jnz     loc_402213
.text:0040229A                 mov     dword ptr [ebp+0Ch], 0
.text:004022A1                 jmp     loc_402219
.text:004022A6 ; ---------------------------------------------------------------------------
.text:004022A6
.text:004022A6 loc_4022A6:                             ; CODE XREF: sub_401C90+55E↑j
.text:004022A6                 movzx   edx, byte ptr [eax+1]
.text:004022AA                 cmp     dl, 3Bh ; ';'
.text:004022AD                 jnz     loc_4021F8
.text:004022B3                 mov     [esp+5Ch+var_2C], 0
.text:004022BB                 mov     [esp+5Ch+var_30], 0
.text:004022C3                 mov     [esp+5Ch+var_34], 0
.text:004022CB                 mov     [esp+5Ch+var_38], 0
.text:004022D3                 cmp     byte ptr [ecx], 0
.text:004022D6                 jz      loc_40254B
.text:004022DC                 inc     dword ptr [ebp+0]
.text:004022DF                 mov     [ebp+0Ch], ecx
.text:004022E2
.text:004022E2 loc_4022E2:                             ; CODE XREF: sub_401C90+8D4↓j
.text:004022E2                 mov     edi, [ebp+0Ch]
.text:004022E5                 mov     [ebp+14h], edi
.text:004022E8                 movzx   eax, byte ptr [edi]
.text:004022EB                 test    al, al
.text:004022ED                 jz      short loc_4022FF
.text:004022EF                 cmp     al, 3Dh ; '='
.text:004022F1                 jz      short loc_4022FF
.text:004022F3
.text:004022F3 loc_4022F3:                             ; CODE XREF: sub_401C90+66D↓j
.text:004022F3                 inc     edi
.text:004022F4                 movzx   eax, byte ptr [edi]
.text:004022F7                 test    al, al
.text:004022F9                 jz      short loc_4022FF
.text:004022FB                 cmp     al, 3Dh ; '='
.text:004022FD                 jnz     short loc_4022F3
.text:004022FF
.text:004022FF loc_4022FF:                             ; CODE XREF: sub_401C90+65D↑j
.text:004022FF                                         ; sub_401C90+661↑j ...
.text:004022FF                 mov     [esp+5Ch+var_3C], 0
.text:00402307                 mov     esi, [esp+5Ch+arg_C]
.text:0040230B                 mov     eax, [esi]
.text:0040230D                 test    eax, eax
.text:0040230F                 jz      loc_402490
.text:00402315                 mov     ecx, eax
.text:00402317
.text:00402317 loc_402317:                             ; CODE XREF: sub_401C90+6B3↓j
.text:00402317                 mov     ebx, [ebp+14h]
.text:0040231A                 mov     eax, edi
.text:0040231C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040231F                 sub     eax, ebx
.text:00402321                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00402325                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00402329                 call    strncmp
.text:0040232E                 test    eax, eax
.text:00402330                 jz      loc_4024F7
.text:00402336
.text:00402336 loc_402336:                             ; CODE XREF: sub_401C90+88C↓j
.text:00402336                                         ; sub_401C90+89D↓j
.text:00402336                 inc     [esp+5Ch+var_3C]
.text:0040233A                 add     esi, 10h
.text:0040233D                 mov     edx, [esi]
.text:0040233F                 test    edx, edx
.text:00402341                 mov     ecx, edx
.text:00402343                 jnz     short loc_402317
.text:00402345
.text:00402345 loc_402345:                             ; CODE XREF: sub_401C90+8B6↓j
.text:00402345                 mov     esi, [esp+5Ch+var_34]
.text:00402349                 test    esi, esi
.text:0040234B                 jz      short loc_402359
.text:0040234D                 mov     ebx, [esp+5Ch+var_30]
.text:00402351                 test    ebx, ebx
.text:00402353                 jz      loc_4024A1
.text:00402359
.text:00402359 loc_402359:                             ; CODE XREF: sub_401C90+6BB↑j
.text:00402359                 mov     esi, [esp+5Ch+var_2C]
.text:0040235D                 test    esi, esi
.text:0040235F                 jz      loc_402490
.text:00402365                 cmp     byte ptr [edi], 0
.text:00402368                 jz      loc_402410
.text:0040236E                 mov     ecx, [esp+5Ch+var_2C]
.text:00402372                 mov     ebx, [ecx+4]
.text:00402375                 test    ebx, ebx
.text:00402377                 jz      short loc_4023B8
.text:00402379                 lea     edx, [edi+1]
.text:0040237C                 mov     [ebp+0Ch], edx
.text:0040237F
.text:0040237F loc_40237F:                             ; CODE XREF: sub_401C90+788↓j
.text:0040237F                                         ; sub_401C90+7A7↓j
.text:0040237F                 mov     edi, [ebp+14h]
.text:00402382                 mov     [esp+5Ch+Str1], edi ; Str
.text:00402385                 call    strlen
.text:0040238A                 add     [ebp+14h], eax
.text:0040238D                 mov     eax, [esp+5Ch+arg_10]
.text:00402391                 test    eax, eax
.text:00402393                 jz      short loc_4023A0
.text:00402395                 mov     edx, [esp+5Ch+var_38]
.text:00402399                 mov     ebp, [esp+5Ch+arg_10]
.text:0040239D                 mov     [ebp+0], edx
.text:004023A0
.text:004023A0 loc_4023A0:                             ; CODE XREF: sub_401C90+703↑j
.text:004023A0                 mov     eax, [esp+5Ch+var_2C]
.text:004023A4                 mov     ecx, [eax+8]
.text:004023A7                 test    ecx, ecx
.text:004023A9                 jnz     loc_401F6A
.text:004023AF                 mov     ecx, [esp+5Ch+var_2C]
.text:004023B3                 jmp     loc_401F62
.text:004023B8 ; ---------------------------------------------------------------------------
.text:004023B8
.text:004023B8 loc_4023B8:                             ; CODE XREF: sub_401C90+6E7↑j
.text:004023B8                 mov     eax, [esp+5Ch+var_14]
.text:004023BC                 test    eax, eax
.text:004023BE                 jnz     short loc_4023D3
.text:004023C0
.text:004023C0 loc_4023C0:                             ; CODE XREF: sub_401C90+779↓j
.text:004023C0                 mov     ecx, [ebp+14h]
.text:004023C3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004023C6                 call    strlen
.text:004023CB                 add     [ebp+14h], eax
.text:004023CE                 jmp     loc_401FE8
.text:004023D3 ; ---------------------------------------------------------------------------
.text:004023D3
.text:004023D3 loc_4023D3:                             ; CODE XREF: sub_401C90+72E↑j
.text:004023D3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:004023DA                 call    ds:libintl_gettext
.text:004023E0                 mov     edx, [esp+5Ch+var_2C]
.text:004023E4                 mov     ebx, [esp+5Ch+arg_4]
.text:004023E8                 mov     edi, [edx]
.text:004023EA                 mov     [esp+5Ch+var_50], edi
.text:004023EE                 mov     edi, ds:_iob
.text:004023F4                 mov     esi, [ebx]
.text:004023F6                 mov     [esp+5Ch+Str2], eax ; Format
.text:004023FA                 add     edi, 40h ; '@'
.text:004023FD                 mov     [esp+5Ch+MaxCount], esi
.text:00402401                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00402404                 call    fprintf
.text:00402409                 jmp     short loc_4023C0
.text:00402409 ; ---------------------------------------------------------------------------
.text:0040240B                 align 10h
.text:00402410
.text:00402410 loc_402410:                             ; CODE XREF: sub_401C90+6D8↑j
.text:00402410                 mov     esi, [esp+5Ch+var_2C]
.text:00402414                 cmp     dword ptr [esi+4], 1
.text:00402418                 jnz     loc_40237F
.text:0040241E                 mov     ecx, [ebp+0]
.text:00402421                 cmp     ecx, [esp+5Ch+arg_0]
.text:00402425                 jge     short loc_40243C
.text:00402427                 mov     eax, [esp+5Ch+arg_4]
.text:0040242B                 lea     ebx, [ecx+1]
.text:0040242E                 mov     [ebp+0], ebx
.text:00402431                 mov     edi, [eax+ecx*4]
.text:00402434                 mov     [ebp+0Ch], edi
.text:00402437                 jmp     loc_40237F
.text:0040243C ; ---------------------------------------------------------------------------
.text:0040243C
.text:0040243C loc_40243C:                             ; CODE XREF: sub_401C90+795↑j
.text:0040243C                 mov     edx, [esp+5Ch+var_14]
.text:00402440                 test    edx, edx
.text:00402442                 jnz     short loc_402457
.text:00402444
.text:00402444 loc_402444:                             ; CODE XREF: sub_401C90+7FE↓j
.text:00402444                 mov     edx, [ebp+14h]
.text:00402447                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040244A                 call    strlen
.text:0040244F                 add     [ebp+14h], eax
.text:00402452                 jmp     loc_402079
.text:00402457 ; ---------------------------------------------------------------------------
.text:00402457
.text:00402457 loc_402457:                             ; CODE XREF: sub_401C90+7B2↑j
.text:00402457                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040245E                 call    ds:libintl_gettext
.text:00402464                 mov     ecx, [ebp+0]
.text:00402467                 mov     ebx, [esp+5Ch+arg_4]
.text:0040246B                 mov     edi, [ebx+ecx*4-4]
.text:0040246F                 mov     ecx, ds:_iob
.text:00402475                 mov     [esp+5Ch+var_50], edi
.text:00402479                 mov     esi, [ebx]
.text:0040247B                 add     ecx, 40h ; '@'
.text:0040247E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402482                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402485                 mov     [esp+5Ch+MaxCount], esi
.text:00402489                 call    fprintf
.text:0040248E                 jmp     short loc_402444
.text:00402490 ; ---------------------------------------------------------------------------
.text:00402490
.text:00402490 loc_402490:                             ; CODE XREF: sub_401C90+67F↑j
.text:00402490                                         ; sub_401C90+6CF↑j
.text:00402490                 mov     dword ptr [ebp+14h], 0
.text:00402497                 mov     eax, 57h ; 'W'
.text:0040249C                 jmp     loc_401DE7
.text:004024A1 ; ---------------------------------------------------------------------------
.text:004024A1
.text:004024A1 loc_4024A1:                             ; CODE XREF: sub_401C90+6C3↑j
.text:004024A1                 mov     edi, [esp+5Ch+var_14]
.text:004024A5                 test    edi, edi
.text:004024A7                 jnz     short loc_4024BF
.text:004024A9
.text:004024A9 loc_4024A9:                             ; CODE XREF: sub_401C90+865↓j
.text:004024A9                 mov     edx, [ebp+14h]
.text:004024AC                 mov     [esp+5Ch+Str1], edx ; Str
.text:004024AF                 call    strlen
.text:004024B4                 add     [ebp+14h], eax
.text:004024B7                 inc     dword ptr [ebp+0]
.text:004024BA                 jmp     loc_401FE8
.text:004024BF ; ---------------------------------------------------------------------------
.text:004024BF
.text:004024BF loc_4024BF:                             ; CODE XREF: sub_401C90+817↑j
.text:004024BF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:004024C6                 call    ds:libintl_gettext
.text:004024CC                 mov     ecx, [ebp+0]
.text:004024CF                 mov     ebx, [esp+5Ch+arg_4]
.text:004024D3                 mov     edi, [ebx+ecx*4]
.text:004024D6                 mov     ecx, ds:_iob
.text:004024DC                 mov     [esp+5Ch+var_50], edi
.text:004024E0                 mov     esi, [ebx]
.text:004024E2                 add     ecx, 40h ; '@'
.text:004024E5                 mov     [esp+5Ch+Str2], eax ; Format
.text:004024E9                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004024EC                 mov     [esp+5Ch+MaxCount], esi
.text:004024F0                 call    fprintf
.text:004024F5                 jmp     short loc_4024A9
.text:004024F7 ; ---------------------------------------------------------------------------
.text:004024F7
.text:004024F7 loc_4024F7:                             ; CODE XREF: sub_401C90+6A0↑j
.text:004024F7                 mov     edx, [ebp+14h]
.text:004024FA                 mov     ebx, edi
.text:004024FC                 mov     ecx, [esi]
.text:004024FE                 sub     ebx, edx
.text:00402500                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402503                 call    strlen
.text:00402508                 cmp     ebx, eax
.text:0040250A                 jz      short loc_402532
.text:0040250C                 mov     ebx, [esp+5Ch+var_2C]
.text:00402510                 test    ebx, ebx
.text:00402512                 jz      short loc_402521
.text:00402514                 mov     [esp+5Ch+var_34], 1
.text:0040251C                 jmp     loc_402336
.text:00402521 ; ---------------------------------------------------------------------------
.text:00402521
.text:00402521 loc_402521:                             ; CODE XREF: sub_401C90+882↑j
.text:00402521                 mov     [esp+5Ch+var_2C], esi
.text:00402525                 mov     ecx, [esp+5Ch+var_3C]
.text:00402529                 mov     [esp+5Ch+var_38], ecx
.text:0040252D                 jmp     loc_402336
.text:00402532 ; ---------------------------------------------------------------------------
.text:00402532
.text:00402532 loc_402532:                             ; CODE XREF: sub_401C90+87A↑j
.text:00402532                 mov     [esp+5Ch+var_2C], esi
.text:00402536                 mov     eax, [esp+5Ch+var_3C]
.text:0040253A                 mov     [esp+5Ch+var_30], 1
.text:00402542                 mov     [esp+5Ch+var_38], eax
.text:00402546                 jmp     loc_402345
.text:0040254B ; ---------------------------------------------------------------------------
.text:0040254B
.text:0040254B loc_40254B:                             ; CODE XREF: sub_401C90+646↑j
.text:0040254B                 mov     edx, [ebp+0]
.text:0040254E                 cmp     edx, [esp+5Ch+arg_0]
.text:00402552                 jz      short loc_402569
.text:00402554                 mov     ebx, [esp+5Ch+arg_4]
.text:00402558                 lea     esi, [edx+1]
.text:0040255B                 mov     [ebp+0], esi
.text:0040255E                 mov     edi, [ebx+edx*4]
.text:00402561                 mov     [ebp+0Ch], edi
.text:00402564                 jmp     loc_4022E2
.text:00402569 ; ---------------------------------------------------------------------------
.text:00402569
.text:00402569 loc_402569:                             ; CODE XREF: sub_401C90+8C2↑j
.text:00402569                 mov     edi, [esp+5Ch+var_14]
.text:0040256D                 test    edi, edi
.text:0040256F                 jnz     short loc_40258C
.text:00402571
.text:00402571 loc_402571:                             ; CODE XREF: sub_401C90+92C↓j
.text:00402571                 mov     [ebp+8], esi
.text:00402574                 mov     ebp, [esp+5Ch+Str]
.text:00402578                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040257C                 jz      short loc_402588
.text:0040257E                 mov     bl, 3Fh ; '?'
.text:00402580
.text:00402580 loc_402580:                             ; CODE XREF: sub_401C90+8FA↓j
.text:00402580                 movsx   eax, bl
.text:00402583                 jmp     loc_401DE7
.text:00402588 ; ---------------------------------------------------------------------------
.text:00402588
.text:00402588 loc_402588:                             ; CODE XREF: sub_401C90+8EC↑j
.text:00402588                 mov     bl, 3Ah ; ':'
.text:0040258A                 jmp     short loc_402580
.text:0040258C ; ---------------------------------------------------------------------------
.text:0040258C
.text:0040258C loc_40258C:                             ; CODE XREF: sub_401C90+8DF↑j
.text:0040258C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00402593                 call    ds:libintl_gettext
.text:00402599                 mov     [esp+5Ch+var_50], esi
.text:0040259D                 mov     edx, [esp+5Ch+arg_4]
.text:004025A1                 mov     ecx, ds:_iob
.text:004025A7                 mov     ebx, [edx]
.text:004025A9                 add     ecx, 40h ; '@'
.text:004025AC                 mov     [esp+5Ch+Str2], eax ; Format
.text:004025B0                 mov     [esp+5Ch+MaxCount], ebx
.text:004025B4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004025B7                 call    fprintf
.text:004025BC                 jmp     short loc_402571
.text:004025BC ; ---------------------------------------------------------------------------
.text:004025BE                 align 10h
.text:004025C0
.text:004025C0 loc_4025C0:                             ; CODE XREF: sub_401C90+54C↑j
.text:004025C0                                         ; sub_401C90+555↑j
.text:004025C0                 mov     eax, [esp+5Ch+var_14]
.text:004025C4                 test    eax, eax
.text:004025C6                 jz      short loc_4025FF
.text:004025C8                 mov     ebx, [ebp+1Ch]
.text:004025CB                 test    ebx, ebx
.text:004025CD                 jz      short loc_402607
.text:004025CF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:004025D6
.text:004025D6 loc_4025D6:                             ; CODE XREF: sub_401C90+97E↓j
.text:004025D6                 call    ds:libintl_gettext
.text:004025DC                 mov     [esp+5Ch+var_50], esi
.text:004025E0                 mov     ebx, [esp+5Ch+arg_4]
.text:004025E4                 mov     edx, ds:_iob
.text:004025EA                 mov     esi, [ebx]
.text:004025EC                 add     edx, 40h ; '@'
.text:004025EF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004025F3                 mov     [esp+5Ch+MaxCount], esi
.text:004025F7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004025FA                 call    fprintf
.text:004025FF
.text:004025FF loc_4025FF:                             ; CODE XREF: sub_401C90+936↑j
.text:004025FF                 mov     [ebp+8], edi
.text:00402602                 jmp     loc_401FE8
.text:00402607 ; ---------------------------------------------------------------------------
.text:00402607
.text:00402607 loc_402607:                             ; CODE XREF: sub_401C90+93D↑j
.text:00402607                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040260E                 jmp     short loc_4025D6
.text:00402610 ; ---------------------------------------------------------------------------
.text:00402610
.text:00402610 loc_402610:                             ; CODE XREF: sub_401C90+26E↑j
.text:00402610                 mov     edi, [esp+5Ch+var_14]
.text:00402614                 test    edi, edi
.text:00402616                 jnz     short loc_40262E
.text:00402618
.text:00402618 loc_402618:                             ; CODE XREF: sub_401C90+9D4↓j
.text:00402618                 mov     edx, [ebp+14h]
.text:0040261B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040261E                 call    strlen
.text:00402623                 add     [ebp+14h], eax
.text:00402626                 inc     dword ptr [ebp+0]
.text:00402629                 jmp     loc_40216E
.text:0040262E ; ---------------------------------------------------------------------------
.text:0040262E
.text:0040262E loc_40262E:                             ; CODE XREF: sub_401C90+986↑j
.text:0040262E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00402635                 call    ds:libintl_gettext
.text:0040263B                 mov     ebx, [ebp+0]
.text:0040263E                 mov     edi, [esp+5Ch+arg_4]
.text:00402642                 mov     ecx, [edi+ebx*4]
.text:00402645                 mov     ebx, ds:_iob
.text:0040264B                 mov     [esp+5Ch+var_50], ecx
.text:0040264F                 mov     esi, [edi]
.text:00402651                 add     ebx, 40h ; '@'
.text:00402654                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402658                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040265B                 mov     [esp+5Ch+MaxCount], esi
.text:0040265F                 call    fprintf
.text:00402664                 jmp     short loc_402618
.text:00402666 ; ---------------------------------------------------------------------------
.text:00402666
.text:00402666 loc_402666:                             ; CODE XREF: sub_401C90+246↑j
.text:00402666                 mov     ecx, [ebp+14h]
.text:00402669                 mov     ebx, edi
.text:0040266B                 mov     edx, [esi]
.text:0040266D                 sub     ebx, ecx
.text:0040266F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402672                 call    strlen
.text:00402677                 cmp     ebx, eax
.text:00402679                 jz      short loc_4026D1
.text:0040267B                 mov     ebx, [esp+5Ch+var_18]
.text:0040267F                 test    ebx, ebx
.text:00402681                 jz      short loc_4026C0
.text:00402683                 mov     edx, [esp+5Ch+arg_14]
.text:00402687                 test    edx, edx
.text:00402689                 jnz     short loc_402697
.text:0040268B                 mov     ecx, [esp+5Ch+var_18]
.text:0040268F                 mov     ebx, [esi+4]
.text:00402692                 cmp     [ecx+4], ebx
.text:00402695                 jz      short loc_4026A4
.text:00402697
.text:00402697 loc_402697:                             ; CODE XREF: sub_401C90+9F9↑j
.text:00402697                                         ; sub_401C90+A1A↓j ...
.text:00402697                 mov     [esp+5Ch+var_20], 1
.text:0040269F                 jmp     loc_401EDC
.text:004026A4 ; ---------------------------------------------------------------------------
.text:004026A4
.text:004026A4 loc_4026A4:                             ; CODE XREF: sub_401C90+A05↑j
.text:004026A4                 mov     edx, [esi+8]
.text:004026A7                 cmp     [ecx+8], edx
.text:004026AA                 jnz     short loc_402697
.text:004026AC                 mov     ebx, [esi+0Ch]
.text:004026AF                 cmp     [ecx+0Ch], ebx
.text:004026B2                 jnz     short loc_402697
.text:004026B4                 jmp     loc_401EDC
.text:004026B4 ; ---------------------------------------------------------------------------
.text:004026B9                 align 10h
.text:004026C0
.text:004026C0 loc_4026C0:                             ; CODE XREF: sub_401C90+9F1↑j
.text:004026C0                 mov     [esp+5Ch+var_18], esi
.text:004026C4                 mov     eax, [esp+5Ch+var_28]
.text:004026C8                 mov     [esp+5Ch+var_24], eax
.text:004026CC                 jmp     loc_401EDC
.text:004026D1 ; ---------------------------------------------------------------------------
.text:004026D1
.text:004026D1 loc_4026D1:                             ; CODE XREF: sub_401C90+9E9↑j
.text:004026D1                 mov     [esp+5Ch+var_18], esi
.text:004026D5                 mov     ecx, [esp+5Ch+var_28]
.text:004026D9                 mov     [esp+5Ch+var_1C], 1
.text:004026E1                 mov     [esp+5Ch+var_24], ecx
.text:004026E5                 jmp     loc_401EF0
.text:004026EA ; ---------------------------------------------------------------------------
.text:004026EA
.text:004026EA loc_4026EA:                             ; CODE XREF: sub_401C90+1BF↑j
.text:004026EA                 mov     eax, [esp+5Ch+Str]
.text:004026EE                 movsx   esi, dl
.text:004026F1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004026F5                 mov     [esp+5Ch+Str1], eax ; Str
.text:004026F8                 call    strchr
.text:004026FD                 test    eax, eax
.text:004026FF                 jnz     loc_4021B0
.text:00402705                 jmp     loc_401E55
.text:0040270A ; ---------------------------------------------------------------------------
.text:0040270A
.text:0040270A loc_40270A:                             ; CODE XREF: sub_401C90+17C↑j
.text:0040270A                 mov     ecx, 1
.text:0040270F                 jmp     loc_401E12
.text:00402714 ; ---------------------------------------------------------------------------
.text:00402714
.text:00402714 loc_402714:                             ; CODE XREF: sub_401C90+D4↑j
.text:00402714                                         ; sub_401C90+130↑j
.text:00402714                 mov     eax, [ebp+20h]
.text:00402717                 cmp     eax, [ebp+24h]
.text:0040271A                 jz      loc_401DF0
.text:00402720                 mov     [ebp+0], eax
.text:00402723                 jmp     loc_401DF0
.text:00402728 ; ---------------------------------------------------------------------------
.text:00402728
.text:00402728 loc_402728:                             ; CODE XREF: sub_401C90+FE↑j
.text:00402728                 mov     [ebp+20h], eax
.text:0040272B                 jmp     loc_401DB0
.text:00402730 ; ---------------------------------------------------------------------------
.text:00402730
.text:00402730 loc_402730:                             ; CODE XREF: sub_401C90+CA↑j
.text:00402730                 mov     edx, [ebp+20h]
.text:00402733                 mov     eax, [ebp+24h]
.text:00402736                 cmp     edx, eax
.text:00402738                 jz      short loc_4027B0
.text:0040273A                 cmp     eax, ebx
.text:0040273C                 jz      short loc_402751
.text:0040273E                 mov     [esp+5Ch+Str2], ebp
.text:00402742                 mov     ebx, [esp+5Ch+arg_4]
.text:00402746                 mov     [esp+5Ch+Str1], ebx
.text:00402749                 call    sub_402940
.text:0040274E                 mov     ebx, [ebp+0]
.text:00402751
.text:00402751 loc_402751:                             ; CODE XREF: sub_401C90+AAC↑j
.text:00402751                                         ; sub_401C90+B22↓j ...
.text:00402751                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402755                 jge     short loc_4027A0
.text:00402757                 mov     esi, [esp+5Ch+arg_4]
.text:0040275B                 mov     eax, [esi+ebx*4]
.text:0040275E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402761                 jz      short loc_4027A8
.text:00402763                 lea     esi, [esi+0]
.text:00402769                 lea     edi, [edi+0]
.text:00402770
.text:00402770 loc_402770:                             ; CODE XREF: sub_401C90+AFC↓j
.text:00402770                                         ; sub_401C90+B1C↓j
.text:00402770                 lea     eax, [ebx+1]
.text:00402773                 mov     ebx, eax
.text:00402775                 mov     [ebp+0], eax
.text:00402778                 cmp     eax, [esp+5Ch+arg_0]
.text:0040277C                 jge     short loc_4027A0
.text:0040277E                 mov     edi, [esp+5Ch+arg_4]
.text:00402782                 mov     edx, [edi+eax*4]
.text:00402785                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00402788                 jz      short loc_402790
.text:0040278A
.text:0040278A loc_40278A:                             ; CODE XREF: sub_401C90+B04↓j
.text:0040278A                 mov     ebx, eax
.text:0040278C                 jmp     short loc_402770
.text:0040278C ; ---------------------------------------------------------------------------
.text:0040278E                 align 10h
.text:00402790
.text:00402790 loc_402790:                             ; CODE XREF: sub_401C90+AF8↑j
.text:00402790                 cmp     byte ptr [edx+1], 0
.text:00402794                 jz      short loc_40278A
.text:00402796                 lea     esi, [esi+0]
.text:00402799                 lea     edi, [edi+0]
.text:004027A0
.text:004027A0 loc_4027A0:                             ; CODE XREF: sub_401C90+AC5↑j
.text:004027A0                                         ; sub_401C90+AEC↑j ...
.text:004027A0                 mov     [ebp+24h], ebx
.text:004027A3                 jmp     loc_401D60
.text:004027A8 ; ---------------------------------------------------------------------------
.text:004027A8
.text:004027A8 loc_4027A8:                             ; CODE XREF: sub_401C90+AD1↑j
.text:004027A8                 cmp     byte ptr [eax+1], 0
.text:004027AC                 jz      short loc_402770
.text:004027AE                 jmp     short loc_4027A0
.text:004027B0 ; ---------------------------------------------------------------------------
.text:004027B0
.text:004027B0 loc_4027B0:                             ; CODE XREF: sub_401C90+AA8↑j
.text:004027B0                 cmp     edx, ebx
.text:004027B2                 jz      short loc_402751
.text:004027B4                 mov     [ebp+20h], ebx
.text:004027B7                 jmp     short loc_402751
.text:004027B9 ; ---------------------------------------------------------------------------
.text:004027B9
.text:004027B9 loc_4027B9:                             ; CODE XREF: sub_401C90+88↑j
.text:004027B9                 mov     dword ptr [ebp+18h], 0
.text:004027C0                 mov     esi, [esp+5Ch+Str]
.text:004027C4
.text:004027C4 loc_4027C4:                             ; CODE XREF: sub_401C90+B49↓j
.text:004027C4                 inc     esi
.text:004027C5                 jmp     loc_401D28
.text:004027C5 ; ---------------------------------------------------------------------------
.text:004027CA                 align 10h
.text:004027D0
.text:004027D0 loc_4027D0:                             ; CODE XREF: sub_401C90+80↑j
.text:004027D0                 mov     dword ptr [ebp+18h], 2
.text:004027D7                 mov     esi, ecx
.text:004027D9                 jmp     short loc_4027C4
.text:004027D9 ; ---------------------------------------------------------------------------
.text:004027DB                 align 10h
.text:004027E0
.text:004027E0 loc_4027E0:                             ; CODE XREF: sub_401C90+69↑j
.text:004027E0                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:004027E7                 call    getenv
.text:004027EC                 test    eax, eax
.text:004027EE                 jz      loc_401D04
.text:004027F4                 jmp     loc_401CFF
.text:004027F4 ; ---------------------------------------------------------------------------
.text:004027F9                 align 10h
.text:00402800
.text:00402800 loc_402800:                             ; CODE XREF: sub_401C90+3F↑j
.text:00402800                 mov     dword ptr [ebp+0], 1
.text:00402807                 mov     ebx, 1
.text:0040280C                 jmp     loc_401CE0
.text:0040280C sub_401C90      endp
.text:0040280C
.text:00402811 ; ---------------------------------------------------------------------------
.text:00402811                 jmp     short sub_402820
.text:00402811 ; ---------------------------------------------------------------------------
.text:00402813                 align 10h
.text:00402820
.text:00402820 ; =============== S U B R O U T I N E =======================================
.text:00402820
.text:00402820
.text:00402820 ; int __cdecl sub_402820(int, int, char *, int, int, int, int)
.text:00402820 sub_402820      proc near               ; CODE XREF: .text:00402811↑j
.text:00402820                                         ; sub_402AC0+3A↓p ...
.text:00402820
.text:00402820 var_2C          = dword ptr -2Ch
.text:00402820 var_28          = dword ptr -28h
.text:00402820 Str             = dword ptr -24h
.text:00402820 var_20          = dword ptr -20h
.text:00402820 var_1C          = dword ptr -1Ch
.text:00402820 var_18          = dword ptr -18h
.text:00402820 var_14          = dword ptr -14h
.text:00402820 var_10          = dword ptr -10h
.text:00402820 arg_0           = dword ptr  4
.text:00402820 arg_4           = dword ptr  8
.text:00402820 arg_8           = dword ptr  0Ch
.text:00402820 arg_C           = dword ptr  10h
.text:00402820 arg_10          = dword ptr  14h
.text:00402820 arg_14          = dword ptr  18h
.text:00402820 arg_18          = dword ptr  1Ch
.text:00402820
.text:00402820                 sub     esp, 2Ch
.text:00402823                 mov     edx, dword_406020
.text:00402829                 mov     [esp+2Ch+var_10], offset dword_407000 ; int
.text:00402831                 mov     ecx, dword_406024
.text:00402837                 mov     ds:dword_407000, edx
.text:0040283D                 mov     edx, [esp+2Ch+arg_18]
.text:00402841                 mov     ds:dword_407004, ecx
.text:00402847                 mov     ecx, [esp+2Ch+arg_14]
.text:0040284B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040284F                 mov     edx, [esp+2Ch+arg_10]
.text:00402853                 mov     [esp+2Ch+var_18], ecx ; int
.text:00402857                 mov     ecx, [esp+2Ch+arg_C]
.text:0040285B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040285F                 mov     edx, [esp+2Ch+arg_8]
.text:00402863                 mov     [esp+2Ch+var_20], ecx ; int
.text:00402867                 mov     ecx, [esp+2Ch+arg_4]
.text:0040286B                 mov     [esp+2Ch+Str], edx ; Str
.text:0040286F                 mov     edx, [esp+2Ch+arg_0]
.text:00402873                 mov     [esp+2Ch+var_28], ecx ; int
.text:00402877                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040287A                 call    sub_401C90
.text:0040287F                 mov     ecx, ds:dword_407000
.text:00402885                 mov     dword_406020, ecx
.text:0040288B                 mov     ecx, ds:dword_40700C
.text:00402891                 mov     ds:dword_4076E0, ecx
.text:00402897                 mov     ecx, ds:dword_407008
.text:0040289D                 mov     dword_406028, ecx
.text:004028A3                 add     esp, 2Ch
.text:004028A6                 retn
.text:004028A6 sub_402820      endp
.text:004028A6
.text:004028A6 ; ---------------------------------------------------------------------------
.text:004028A7                 align 10h
.text:004028B0                 sub     esp, 2Ch
.text:004028B3                 mov     edx, dword_406020
.text:004028B9                 mov     dword ptr [esp+1Ch], offset dword_407000
.text:004028C1                 mov     ecx, dword_406024
.text:004028C7                 mov     dword ptr [esp+18h], 1
.text:004028CF                 mov     ds:dword_407000, edx
.text:004028D5                 mov     edx, [esp+38h]
.text:004028D9                 mov     ds:dword_407004, ecx
.text:004028DF                 mov     ecx, [esp+34h]
.text:004028E3                 mov     [esp+8], edx
.text:004028E7                 mov     edx, [esp+30h]
.text:004028EB                 mov     [esp+4], ecx
.text:004028EF                 mov     dword ptr [esp+14h], 0
.text:004028F7                 mov     dword ptr [esp+10h], 0
.text:004028FF                 mov     dword ptr [esp+0Ch], 0
.text:00402907                 mov     [esp], edx
.text:0040290A                 call    sub_401C90
.text:0040290F                 mov     ecx, ds:dword_407000
.text:00402915                 mov     dword_406020, ecx
.text:0040291B                 mov     ecx, ds:dword_40700C
.text:00402921                 mov     ds:dword_4076E0, ecx
.text:00402927                 mov     ecx, ds:dword_407008
.text:0040292D                 mov     dword_406028, ecx
.text:00402933                 add     esp, 2Ch
.text:00402936                 retn
.text:00402936 ; ---------------------------------------------------------------------------
.text:00402937                 align 10h
.text:00402940
.text:00402940 ; =============== S U B R O U T I N E =======================================
.text:00402940
.text:00402940
.text:00402940 sub_402940      proc near               ; CODE XREF: sub_401C90+113↑p
.text:00402940                                         ; sub_401C90+AB9↑p
.text:00402940
.text:00402940 var_2C          = dword ptr -2Ch
.text:00402940 var_28          = dword ptr -28h
.text:00402940 var_24          = dword ptr -24h
.text:00402940 var_20          = dword ptr -20h
.text:00402940 var_1C          = dword ptr -1Ch
.text:00402940 var_18          = dword ptr -18h
.text:00402940 var_14          = dword ptr -14h
.text:00402940 arg_0           = dword ptr  4
.text:00402940 arg_4           = dword ptr  8
.text:00402940
.text:00402940                 push    ebp
.text:00402941                 push    edi
.text:00402942                 push    esi
.text:00402943                 push    ebx
.text:00402944                 sub     esp, 1Ch
.text:00402947                 mov     ecx, [esp+2Ch+arg_4]
.text:0040294B                 mov     eax, [esp+2Ch+arg_4]
.text:0040294F                 mov     ebx, [esp+2Ch+arg_4]
.text:00402953                 mov     edx, [ecx+20h]
.text:00402956                 mov     edi, [esp+2Ch+arg_0]
.text:0040295A                 mov     ecx, [ebx]
.text:0040295C                 mov     [esp+2Ch+var_2C], edx
.text:0040295F                 mov     [esp+2Ch+var_14], edx
.text:00402963                 mov     edx, [eax+24h]
.text:00402966                 mov     [esp+2Ch+var_28], ecx
.text:0040296A                 mov     [esp+2Ch+var_1C], ecx
.text:0040296E                 cmp     ecx, edx
.text:00402970                 mov     [esp+2Ch+var_18], edx
.text:00402974                 jle     short loc_4029F0
.text:00402976                 mov     esi, [esp+2Ch+var_2C]
.text:00402979                 cmp     edx, esi
.text:0040297B                 jle     short loc_4029F0
.text:0040297D                 lea     esi, [esi+0]
.text:00402980
.text:00402980 loc_402980:                             ; CODE XREF: sub_402940+A1↓j
.text:00402980                 mov     ebx, [esp+2Ch+var_1C]
.text:00402984                 mov     edx, [esp+2Ch+var_18]
.text:00402988                 mov     ebp, [esp+2Ch+var_18]
.text:0040298C                 mov     eax, [esp+2Ch+var_14]
.text:00402990                 sub     ebx, edx
.text:00402992                 mov     [esp+2Ch+var_20], ebx
.text:00402996                 sub     ebp, eax
.text:00402998                 cmp     ebx, ebp
.text:0040299A                 jle     short loc_402A15
.text:0040299C                 xor     esi, esi
.text:0040299E                 cmp     esi, ebp
.text:004029A0                 jge     short loc_4029CD
.text:004029A2                 mov     ecx, [esp+2Ch+var_1C]
.text:004029A6                 sub     ecx, ebp
.text:004029A8                 mov     [esp+2Ch+var_24], ecx
.text:004029AC                 lea     esi, [esi+0]
.text:004029B0
.text:004029B0 loc_4029B0:                             ; CODE XREF: sub_402940+8B↓j
.text:004029B0                 mov     ecx, [esp+2Ch+var_14]
.text:004029B4                 mov     edx, [esp+2Ch+var_24]
.text:004029B8                 add     ecx, esi
.text:004029BA                 add     edx, esi
.text:004029BC                 mov     ebx, [edi+ecx*4]
.text:004029BF                 mov     eax, [edi+edx*4]
.text:004029C2                 inc     esi
.text:004029C3                 cmp     esi, ebp
.text:004029C5                 mov     [edi+ecx*4], eax
.text:004029C8                 mov     [edi+edx*4], ebx
.text:004029CB                 jl      short loc_4029B0
.text:004029CD
.text:004029CD loc_4029CD:                             ; CODE XREF: sub_402940+60↑j
.text:004029CD                 sub     [esp+2Ch+var_1C], ebp
.text:004029D1
.text:004029D1 loc_4029D1:                             ; CODE XREF: sub_402940+107↓j
.text:004029D1                 mov     eax, [esp+2Ch+var_18]
.text:004029D5                 cmp     [esp+2Ch+var_1C], eax
.text:004029D9                 jle     short loc_4029F0
.text:004029DB                 mov     ebp, [esp+2Ch+var_14]
.text:004029DF                 cmp     eax, ebp
.text:004029E1                 jg      short loc_402980
.text:004029E3                 lea     esi, [esi+0]
.text:004029E9                 lea     edi, [edi+0]
.text:004029F0
.text:004029F0 loc_4029F0:                             ; CODE XREF: sub_402940+34↑j
.text:004029F0                                         ; sub_402940+3B↑j ...
.text:004029F0                 mov     esi, [esp+2Ch+var_28]
.text:004029F4                 mov     ecx, [esp+2Ch+var_18]
.text:004029F8                 mov     eax, [esp+2Ch+var_2C]
.text:004029FB                 mov     edi, [esp+2Ch+arg_4]
.text:004029FF                 mov     edx, [esp+2Ch+var_28]
.text:00402A03                 sub     esi, ecx
.text:00402A05                 add     esi, eax
.text:00402A07                 mov     [edi+20h], esi
.text:00402A0A                 mov     [edi+24h], edx
.text:00402A0D                 add     esp, 1Ch
.text:00402A10                 pop     ebx
.text:00402A11                 pop     esi
.text:00402A12                 pop     edi
.text:00402A13                 pop     ebp
.text:00402A14                 retn
.text:00402A15 ; ---------------------------------------------------------------------------
.text:00402A15
.text:00402A15 loc_402A15:                             ; CODE XREF: sub_402940+5A↑j
.text:00402A15                 xor     esi, esi
.text:00402A17                 cmp     esi, [esp+2Ch+var_20]
.text:00402A1B                 jge     short loc_402A3F
.text:00402A1D                 lea     esi, [esi+0]
.text:00402A20
.text:00402A20 loc_402A20:                             ; CODE XREF: sub_402940+FD↓j
.text:00402A20                 mov     ebx, [esp+2Ch+var_14]
.text:00402A24                 mov     ebp, [esp+2Ch+var_18]
.text:00402A28                 add     ebx, esi
.text:00402A2A                 add     ebp, esi
.text:00402A2C                 mov     edx, [edi+ebx*4]
.text:00402A2F                 inc     esi
.text:00402A30                 cmp     esi, [esp+2Ch+var_20]
.text:00402A34                 mov     ecx, [edi+ebp*4]
.text:00402A37                 mov     [edi+ebx*4], ecx
.text:00402A3A                 mov     [edi+ebp*4], edx
.text:00402A3D                 jl      short loc_402A20
.text:00402A3F
.text:00402A3F loc_402A3F:                             ; CODE XREF: sub_402940+DB↑j
.text:00402A3F                 mov     esi, [esp+2Ch+var_20]
.text:00402A43                 add     [esp+2Ch+var_14], esi
.text:00402A47                 jmp     short loc_4029D1
.text:00402A47 sub_402940      endp
.text:00402A47
.text:00402A47 ; ---------------------------------------------------------------------------
.text:00402A49                 align 20h
.text:00402A60                 sub     esp, 0Ch
.text:00402A63                 mov     edx, [esp+14h]
.text:00402A67                 mov     dword ptr [esp+4], 5
.text:00402A6F                 mov     [esp+8], edx
.text:00402A73                 mov     edx, [esp+10h]
.text:00402A77                 mov     [esp], edx
.text:00402A7A                 call    sub_403BF0
.text:00402A7F                 add     esp, 0Ch
.text:00402A82                 retn
.text:00402A82 ; ---------------------------------------------------------------------------
.text:00402A83                 align 10h
.text:00402A90
.text:00402A90 ; =============== S U B R O U T I N E =======================================
.text:00402A90
.text:00402A90
.text:00402A90 ; int __cdecl sub_402A90(char *)
.text:00402A90 sub_402A90      proc near               ; CODE XREF: sub_4013E0+14C↑p
.text:00402A90                                         ; sub_4013E0+20B↑p ...
.text:00402A90
.text:00402A90 var_C           = dword ptr -0Ch
.text:00402A90 var_8           = dword ptr -8
.text:00402A90 var_4           = dword ptr -4
.text:00402A90 arg_0           = dword ptr  4
.text:00402A90
.text:00402A90                 sub     esp, 0Ch
.text:00402A93                 mov     edx, [esp+0Ch+arg_0]
.text:00402A97                 mov     [esp+0Ch+var_8], 5 ; int
.text:00402A9F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00402AA6                 mov     [esp+0Ch+var_4], edx ; char *
.text:00402AAA                 call    sub_403BF0
.text:00402AAF                 add     esp, 0Ch
.text:00402AB2                 retn
.text:00402AB2 sub_402A90      endp
.text:00402AB2
.text:00402AB2 ; ---------------------------------------------------------------------------
.text:00402AB3                 align 10h
.text:00402AC0
.text:00402AC0 ; =============== S U B R O U T I N E =======================================
.text:00402AC0
.text:00402AC0
.text:00402AC0 ; int __cdecl sub_402AC0(int, int, char *, int, int)
.text:00402AC0 sub_402AC0      proc near               ; CODE XREF: sub_4013E0+CE↑p
.text:00402AC0                                         ; sub_402C60+58↓p
.text:00402AC0
.text:00402AC0 var_1C          = dword ptr -1Ch
.text:00402AC0 var_18          = dword ptr -18h
.text:00402AC0 var_14          = dword ptr -14h
.text:00402AC0 var_10          = dword ptr -10h
.text:00402AC0 var_C           = dword ptr -0Ch
.text:00402AC0 var_8           = dword ptr -8
.text:00402AC0 var_4           = dword ptr -4
.text:00402AC0 arg_0           = dword ptr  4
.text:00402AC0 arg_4           = dword ptr  8
.text:00402AC0 arg_8           = dword ptr  0Ch
.text:00402AC0 arg_C           = dword ptr  10h
.text:00402AC0 arg_10          = dword ptr  14h
.text:00402AC0
.text:00402AC0                 sub     esp, 1Ch
.text:00402AC3                 mov     edx, [esp+1Ch+arg_C]
.text:00402AC7                 mov     [esp+1Ch+var_4], 0 ; int
.text:00402ACF                 mov     ecx, [esp+1Ch+arg_10]
.text:00402AD3                 mov     [esp+1Ch+var_8], 0 ; int
.text:00402ADB                 mov     [esp+1Ch+var_10], edx ; int
.text:00402ADF                 mov     edx, [esp+1Ch+arg_4]
.text:00402AE3                 mov     [esp+1Ch+var_C], ecx ; int
.text:00402AE7                 mov     ecx, [esp+1Ch+arg_8]
.text:00402AEB                 mov     [esp+1Ch+var_18], edx ; int
.text:00402AEF                 mov     edx, [esp+1Ch+arg_0]
.text:00402AF3                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00402AF7                 mov     [esp+1Ch+var_1C], edx ; int
.text:00402AFA                 call    sub_402820
.text:00402AFF                 add     esp, 1Ch
.text:00402B02                 retn
.text:00402B02 sub_402AC0      endp
.text:00402B02
.text:00402B02 ; ---------------------------------------------------------------------------
.text:00402B03                 align 10h
.text:00402B10                 sub     esp, 2Ch
.text:00402B13                 mov     edx, [esp+44h]
.text:00402B17                 mov     dword ptr [esp+18h], 0
.text:00402B1F                 mov     ecx, [esp+40h]
.text:00402B23                 mov     dword ptr [esp+14h], 0
.text:00402B2B                 mov     [esp+1Ch], edx
.text:00402B2F                 mov     edx, [esp+3Ch]
.text:00402B33                 mov     [esp+10h], ecx
.text:00402B37                 mov     ecx, [esp+38h]
.text:00402B3B                 mov     [esp+0Ch], edx
.text:00402B3F                 mov     edx, [esp+34h]
.text:00402B43                 mov     [esp+8], ecx
.text:00402B47                 mov     [esp+4], edx
.text:00402B4B                 mov     edx, [esp+30h]
.text:00402B4F                 mov     [esp], edx
.text:00402B52                 call    sub_401C90
.text:00402B57                 add     esp, 2Ch
.text:00402B5A                 retn
.text:00402B5A ; ---------------------------------------------------------------------------
.text:00402B5B                 align 10h
.text:00402B60                 sub     esp, 1Ch
.text:00402B63                 mov     edx, [esp+2Ch]
.text:00402B67                 mov     dword ptr [esp+18h], 0
.text:00402B6F                 mov     ecx, [esp+30h]
.text:00402B73                 mov     dword ptr [esp+14h], 1
.text:00402B7B                 mov     [esp+0Ch], edx
.text:00402B7F                 mov     edx, [esp+24h]
.text:00402B83                 mov     [esp+10h], ecx
.text:00402B87                 mov     ecx, [esp+28h]
.text:00402B8B                 mov     [esp+4], edx
.text:00402B8F                 mov     edx, [esp+20h]
.text:00402B93                 mov     [esp+8], ecx
.text:00402B97                 mov     [esp], edx
.text:00402B9A                 call    sub_402820
.text:00402B9F                 add     esp, 1Ch
.text:00402BA2                 retn
.text:00402BA2 ; ---------------------------------------------------------------------------
.text:00402BA3                 align 10h
.text:00402BB0                 sub     esp, 2Ch
.text:00402BB3                 mov     edx, [esp+44h]
.text:00402BB7                 mov     dword ptr [esp+18h], 0
.text:00402BBF                 mov     ecx, [esp+40h]
.text:00402BC3                 mov     dword ptr [esp+14h], 1
.text:00402BCB                 mov     [esp+1Ch], edx
.text:00402BCF                 mov     edx, [esp+3Ch]
.text:00402BD3                 mov     [esp+10h], ecx
.text:00402BD7                 mov     ecx, [esp+38h]
.text:00402BDB                 mov     [esp+0Ch], edx
.text:00402BDF                 mov     edx, [esp+34h]
.text:00402BE3                 mov     [esp+8], ecx
.text:00402BE7                 mov     [esp+4], edx
.text:00402BEB                 mov     edx, [esp+30h]
.text:00402BEF                 mov     [esp], edx
.text:00402BF2                 call    sub_401C90
.text:00402BF7                 add     esp, 2Ch
.text:00402BFA                 retn
.text:00402BFA ; ---------------------------------------------------------------------------
.text:00402BFB                 align 10h
.text:00402C00 aHelp           db 'help',0             ; DATA XREF: .text:off_402C20↓o
.text:00402C05 aVersion        db 'version',0          ; DATA XREF: .text:00402C30↓o
.text:00402C0D                 align 20h
.text:00402C20 off_402C20      dd offset aHelp         ; DATA XREF: sub_402C60+3D↓o
.text:00402C20                                         ; "help"
.text:00402C24                 dd 2 dup(0)
.text:00402C2C                 dd 68h
.text:00402C30                 dd offset aVersion      ; "version"
.text:00402C34                 dd 2 dup(0)
.text:00402C3C                 dd 76h, 4 dup(0)
.text:00402C50 ; ---------------------------------------------------------------------------
.text:00402C50
.text:00402C50 loc_402C50:                             ; DATA XREF: sub_402C60+45↓o
.text:00402C50                 sub     eax, [eax]
.text:00402C52                 lea     esi, [esi+0]
.text:00402C59                 lea     edi, [edi+0]
.text:00402C60
.text:00402C60 ; =============== S U B R O U T I N E =======================================
.text:00402C60
.text:00402C60
.text:00402C60 ; int __cdecl sub_402C60(int, int, FILE *, int, int, int, char)
.text:00402C60 sub_402C60      proc near               ; CODE XREF: sub_4013E0+AA↑p
.text:00402C60
.text:00402C60 Code            = dword ptr -1Ch
.text:00402C60 var_18          = dword ptr -18h
.text:00402C60 var_14          = dword ptr -14h
.text:00402C60 var_10          = dword ptr -10h
.text:00402C60 var_C           = dword ptr -0Ch
.text:00402C60 var_4           = dword ptr -4
.text:00402C60 arg_0           = dword ptr  4
.text:00402C60 arg_4           = dword ptr  8
.text:00402C60 arg_8           = dword ptr  0Ch
.text:00402C60 arg_C           = dword ptr  10h
.text:00402C60 arg_10          = dword ptr  14h
.text:00402C60 arg_14          = dword ptr  18h
.text:00402C60 arg_18          = byte ptr  1Ch
.text:00402C60
.text:00402C60                 sub     esp, 1Ch
.text:00402C63                 xor     eax, eax
.text:00402C65                 cmp     [esp+1Ch+arg_0], 2
.text:00402C6A                 mov     [esp+1Ch+var_4], ebx
.text:00402C6E                 mov     ebx, dword_406024
.text:00402C74                 mov     dword_406024, eax
.text:00402C79                 jz      short loc_402C91
.text:00402C7B
.text:00402C7B loc_402C7B:                             ; CODE XREF: sub_402C60+60↓j
.text:00402C7B                                         ; sub_402C60+6A↓j
.text:00402C7B                 mov     dword_406024, ebx
.text:00402C81                 xor     edx, edx
.text:00402C83                 mov     ebx, [esp+1Ch+var_4]
.text:00402C87                 mov     dword_406020, edx
.text:00402C8D                 add     esp, 1Ch
.text:00402C90                 retn
.text:00402C91 ; ---------------------------------------------------------------------------
.text:00402C91
.text:00402C91 loc_402C91:                             ; CODE XREF: sub_402C60+19↑j
.text:00402C91                 mov     [esp+1Ch+var_C], 0 ; int
.text:00402C99                 mov     edx, [esp+1Ch+arg_4]
.text:00402C9D                 mov     [esp+1Ch+var_10], offset off_402C20 ; int
.text:00402CA5                 mov     [esp+1Ch+var_14], offset loc_402C50 ; char *
.text:00402CAD                 mov     [esp+1Ch+var_18], edx ; int
.text:00402CB1                 mov     [esp+1Ch+Code], 2 ; int
.text:00402CB8                 call    sub_402AC0
.text:00402CBD                 cmp     eax, 0FFFFFFFFh
.text:00402CC0                 jz      short loc_402C7B
.text:00402CC2                 cmp     eax, 68h ; 'h'
.text:00402CC5                 jz      short loc_402CCE
.text:00402CC7                 cmp     eax, 76h ; 'v'
.text:00402CCA                 jnz     short loc_402C7B
.text:00402CCC                 jmp     short loc_402CD9
.text:00402CCE ; ---------------------------------------------------------------------------
.text:00402CCE
.text:00402CCE loc_402CCE:                             ; CODE XREF: sub_402C60+65↑j
.text:00402CCE                 mov     [esp+1Ch+Code], 0
.text:00402CD5                 call    [esp+1Ch+arg_14]
.text:00402CD9
.text:00402CD9 loc_402CD9:                             ; CODE XREF: sub_402C60+6C↑j
.text:00402CD9                 mov     ecx, [esp+1Ch+arg_10]
.text:00402CDD                 lea     ebx, [esp+1Ch+arg_18]
.text:00402CE1                 mov     edx, [esp+1Ch+arg_C]
.text:00402CE5                 mov     [esp+1Ch+var_C], ebx ; va_list
.text:00402CE9                 mov     ebx, [esp+1Ch+arg_8]
.text:00402CED                 mov     [esp+1Ch+var_10], ecx ; int
.text:00402CF1                 mov     ecx, ds:_iob
.text:00402CF7                 mov     [esp+1Ch+var_14], edx ; int
.text:00402CFB                 mov     [esp+1Ch+var_18], ebx ; FILE *
.text:00402CFF                 add     ecx, 20h ; ' '
.text:00402D02                 mov     [esp+1Ch+Code], ecx ; FILE *
.text:00402D05                 call    sub_4044C0
.text:00402D0A                 mov     [esp+1Ch+Code], 0 ; Code
.text:00402D11                 call    exit
.text:00402D11 sub_402C60      endp
.text:00402D11
.text:00402D11 ; ---------------------------------------------------------------------------
.text:00402D16                 align 10h
.text:00402D20                 mov     edx, [esp+4]
.text:00402D24                 mov     ds:dword_407030, edx
.text:00402D2A                 retn
.text:00402D2A ; ---------------------------------------------------------------------------
.text:00402D2B aWriteError     db 'write error',0      ; DATA XREF: sub_402D50:loc_402D99↓o
.text:00402D37 ; const char aSS[]
.text:00402D37 aSS             db '%s: %s',0           ; DATA XREF: sub_402D50+77↓o
.text:00402D3E ; const char aS_2[]
.text:00402D3E aS_2            db '%s',0               ; DATA XREF: sub_402D50+A0↓o
.text:00402D41 ; ---------------------------------------------------------------------------
.text:00402D41                 jmp     short sub_402D50
.text:00402D41 ; ---------------------------------------------------------------------------
.text:00402D43                 align 10h
.text:00402D50
.text:00402D50 ; =============== S U B R O U T I N E =======================================
.text:00402D50
.text:00402D50
.text:00402D50 ; void __cdecl sub_402D50()
.text:00402D50 sub_402D50      proc near               ; CODE XREF: .text:00402D41↑j
.text:00402D50                                         ; DATA XREF: sub_4013E0+5C↑o
.text:00402D50
.text:00402D50 Stream          = dword ptr -2Ch
.text:00402D50 ErrorMessage    = dword ptr -28h
.text:00402D50 var_24          = dword ptr -24h
.text:00402D50 var_20          = byte ptr -20h
.text:00402D50 var_1C          = dword ptr -1Ch
.text:00402D50 var_9           = byte ptr -9
.text:00402D50
.text:00402D50                 push    esi
.text:00402D51                 push    ebx
.text:00402D52                 sub     esp, 24h
.text:00402D55                 mov     edx, ds:_iob
.text:00402D5B                 mov     ecx, [edx+2Ch]
.text:00402D5E                 lea     esi, [edx+20h]
.text:00402D61                 shr     ecx, 5
.text:00402D64                 mov     bl, cl
.text:00402D66                 mov     ecx, [edx+20h]
.text:00402D69                 and     bl, 1
.text:00402D6C                 cmp     ecx, [esi+8]
.text:00402D6F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402D72                 setz    [esp+2Ch+var_9]
.text:00402D77                 call    fclose
.text:00402D7C                 test    eax, eax
.text:00402D7E                 setnz   al
.text:00402D81                 test    bl, bl
.text:00402D83                 jnz     loc_402E13
.text:00402D89                 test    al, al
.text:00402D8B                 jz      short loc_402DE0
.text:00402D8D
.text:00402D8D loc_402D8D:                             ; CODE XREF: sub_402D50+CD↓j
.text:00402D8D                 call    _errno
.text:00402D92                 mov     esi, [eax]
.text:00402D94
.text:00402D94 loc_402D94:                             ; CODE XREF: sub_402D50+C7↓j
.text:00402D94                 cmp     esi, 9
.text:00402D97                 jz      short loc_402E06
.text:00402D99
.text:00402D99 loc_402D99:                             ; CODE XREF: sub_402D50+B8↓j
.text:00402D99                                         ; sub_402D50+C1↓j
.text:00402D99                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00402DA0                 call    ds:libintl_gettext
.text:00402DA6                 mov     ebx, eax
.text:00402DA8                 mov     eax, ds:dword_407030
.text:00402DAD                 test    eax, eax
.text:00402DAF                 jz      short loc_402DE6
.text:00402DB1                 mov     [esp+2Ch+Stream], eax ; char *
.text:00402DB4                 call    sub_403F60
.text:00402DB9                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00402DBD                 mov     edx, Code
.text:00402DC3                 mov     [esp+2Ch+var_1C], ebx
.text:00402DC7                 mov     [esp+2Ch+var_24], offset aSS ; "%s: %s"
.text:00402DCF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00402DD3                 mov     [esp+2Ch+Stream], edx ; Code
.text:00402DD6                 call    sub_404A50
.text:00402DDB                 nop
.text:00402DDC                 lea     esi, [esi+0]
.text:00402DE0
.text:00402DE0 loc_402DE0:                             ; CODE XREF: sub_402D50+3B↑j
.text:00402DE0                                         ; sub_402D50+B4↓j ...
.text:00402DE0                 add     esp, 24h
.text:00402DE3                 pop     ebx
.text:00402DE4                 pop     esi
.text:00402DE5                 retn
.text:00402DE6 ; ---------------------------------------------------------------------------
.text:00402DE6
.text:00402DE6 loc_402DE6:                             ; CODE XREF: sub_402D50+5F↑j
.text:00402DE6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00402DEA                 mov     ebx, Code
.text:00402DF0                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:00402DF8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00402DFC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00402DFF                 call    sub_404A50
.text:00402E04                 jmp     short loc_402DE0
.text:00402E06 ; ---------------------------------------------------------------------------
.text:00402E06
.text:00402E06 loc_402E06:                             ; CODE XREF: sub_402D50+47↑j
.text:00402E06                 test    bl, bl
.text:00402E08                 jnz     short loc_402D99
.text:00402E0A                 cmp     [esp+2Ch+var_9], 0
.text:00402E0F                 jnz     short loc_402DE0
.text:00402E11                 jmp     short loc_402D99
.text:00402E13 ; ---------------------------------------------------------------------------
.text:00402E13
.text:00402E13 loc_402E13:                             ; CODE XREF: sub_402D50+33↑j
.text:00402E13                 xor     esi, esi
.text:00402E15                 test    al, al
.text:00402E17                 jz      loc_402D94
.text:00402E1D                 jmp     loc_402D8D
.text:00402E1D sub_402D50      endp
.text:00402E1D
.text:00402E1D ; ---------------------------------------------------------------------------
.text:00402E22                 align 10h
.text:00402E30 aLiteral        db 'literal',0          ; DATA XREF: .text:00402E70↓o
.text:00402E38 aShell_0        db 'shell',0            ; DATA XREF: .text:00402E74↓o
.text:00402E3E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00402E78↓o
.text:00402E4B aC_0            db 'c',0                ; DATA XREF: .text:00402E7C↓o
.text:00402E4D aEscape         db 'escape',0           ; DATA XREF: .text:00402E80↓o
.text:00402E54 aLocale         db 'locale',0           ; DATA XREF: .text:00402E84↓o
.text:00402E5B aClocale        db 'clocale',0          ; DATA XREF: .text:00402E88↓o
.text:00402E63                 align 10h
.text:00402E70                 dd offset aLiteral      ; "literal"
.text:00402E74                 dd offset aShell_0      ; "shell"
.text:00402E78                 dd offset aShellAlways  ; "shell-always"
.text:00402E7C                 dd offset aC_0          ; "c"
.text:00402E80                 dd offset aEscape       ; "escape"
.text:00402E84                 dd offset aLocale       ; "locale"
.text:00402E88                 dd offset aClocale      ; "clocale"
.text:00402E8C                 dd 2 dup(0)
.text:00402E94                 dd 1, 2, 3, 4, 5, 6
.text:00402EAC asc_402EAC:                             ; DATA XREF: sub_402EC0+7E↓o
.text:00402EAC                                         ; sub_402EC0+A39↓o ...
.text:00402EAC                 text "UTF-16LE", '"',27h,'`'
.text:00402EB2                 align 10h
.text:00402EC0
.text:00402EC0 ; =============== S U B R O U T I N E =======================================
.text:00402EC0
.text:00402EC0
.text:00402EC0 ; int __cdecl sub_402EC0(int, int, char *Str, int, int, int)
.text:00402EC0 sub_402EC0      proc near               ; CODE XREF: sub_402EC0+43A↓p
.text:00402EC0                                         ; .text:00403A83↓p ...
.text:00402EC0
.text:00402EC0 C               = dword ptr -4Ch
.text:00402EC0 Type            = dword ptr -48h
.text:00402EC0 SizeInBytes     = dword ptr -44h
.text:00402EC0 State           = dword ptr -40h
.text:00402EC0 var_3C          = dword ptr -3Ch
.text:00402EC0 var_38          = dword ptr -38h
.text:00402EC0 var_34          = dword ptr -34h
.text:00402EC0 var_30          = dword ptr -30h
.text:00402EC0 var_29          = byte ptr -29h
.text:00402EC0 var_28          = dword ptr -28h
.text:00402EC0 var_22          = byte ptr -22h
.text:00402EC0 var_21          = byte ptr -21h
.text:00402EC0 var_20          = dword ptr -20h
.text:00402EC0 var_1C          = dword ptr -1Ch
.text:00402EC0 var_18          = mbstate_t ptr -18h
.text:00402EC0 arg_0           = dword ptr  4
.text:00402EC0 arg_4           = dword ptr  8
.text:00402EC0 Str             = dword ptr  0Ch
.text:00402EC0 arg_C           = dword ptr  10h
.text:00402EC0 arg_10          = dword ptr  14h
.text:00402EC0 arg_14          = dword ptr  18h
.text:00402EC0
.text:00402EC0                 push    ebp
.text:00402EC1                 push    edi
.text:00402EC2                 push    esi
.text:00402EC3                 push    ebx
.text:00402EC4                 sub     esp, 3Ch
.text:00402EC7                 mov     edx, ds:__mb_cur_max
.text:00402ECD                 mov     [esp+4Ch+var_34], 0
.text:00402ED5                 mov     [esp+4Ch+var_1C], 0
.text:00402EDD                 cmp     dword ptr [edx], 1
.text:00402EE0                 mov     [esp+4Ch+var_20], 0
.text:00402EE8                 mov     [esp+4Ch+var_21], 0
.text:00402EED                 setz    [esp+4Ch+var_22]
.text:00402EF2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00402EF7                 ja      short def_402EFD ; jumptable 00402EFD default case, cases 0,1
.text:00402EF9                 mov     edx, [esp+4Ch+arg_10]
.text:00402EFD                 jmp     ds:jpt_402EFD[edx*4] ; switch jump
.text:00402EFD ; ---------------------------------------------------------------------------
.text:00402F04 jpt_402EFD      dd offset def_402EFD    ; DATA XREF: sub_402EC0+3D↑r
.text:00402F04                 dd offset def_402EFD    ; jump table for switch statement
.text:00402F04                 dd offset loc_403845
.text:00402F04                 dd offset loc_402F20
.text:00402F04                 dd offset loc_40386B
.text:00402F04                 dd offset loc_403875
.text:00402F04                 dd offset loc_403875
.text:00402F20 ; ---------------------------------------------------------------------------
.text:00402F20
.text:00402F20 loc_402F20:                             ; CODE XREF: sub_402EC0+3D↑j
.text:00402F20                                         ; DATA XREF: sub_402EC0:jpt_402EFD↑o
.text:00402F20                 mov     eax, [esp+4Ch+arg_4] ; jumptable 00402EFD case 3
.text:00402F24                 cmp     [esp+4Ch+var_34], eax
.text:00402F28                 jnb     short loc_402F31
.text:00402F2A                 mov     ebx, [esp+4Ch+arg_0]
.text:00402F2E                 mov     byte ptr [ebx], 22h ; '"'
.text:00402F31
.text:00402F31 loc_402F31:                             ; CODE XREF: sub_402EC0+68↑j
.text:00402F31                 mov     [esp+4Ch+var_34], 1
.text:00402F39                 mov     [esp+4Ch+var_21], 1
.text:00402F3E                 mov     [esp+4Ch+var_1C], offset asc_402EAC ; "\"'`"
.text:00402F46
.text:00402F46 loc_402F46:                             ; CODE XREF: sub_402EC0+9A6↓j
.text:00402F46                 mov     [esp+4Ch+var_20], 1
.text:00402F4E
.text:00402F4E def_402EFD:                             ; CODE XREF: sub_402EC0+37↑j
.text:00402F4E                                         ; sub_402EC0+3D↑j ...
.text:00402F4E                 xor     ebp, ebp        ; jumptable 00402EFD default case, cases 0,1
.text:00402F50
.text:00402F50 loc_402F50:                             ; CODE XREF: sub_402EC0+3DB↓j
.text:00402F50                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00402F55                 jz      loc_403837
.text:00402F5B                 cmp     ebp, [esp+4Ch+arg_C]
.text:00402F5F
.text:00402F5F loc_402F5F:                             ; CODE XREF: sub_402EC0+980↓j
.text:00402F5F                 jz      loc_4037CE
.text:00402F65                 cmp     [esp+4Ch+var_21], 0
.text:00402F6A                 jz      short loc_402FB0
.text:00402F6C                 mov     esi, [esp+4Ch+var_20]
.text:00402F70                 test    esi, esi
.text:00402F72                 jz      short loc_402FB0
.text:00402F74                 mov     ecx, [esp+4Ch+var_20]
.text:00402F78                 lea     edi, [ecx+ebp]
.text:00402F7B                 cmp     edi, [esp+4Ch+arg_C]
.text:00402F7F                 ja      short loc_402FB0
.text:00402F81                 cld
.text:00402F82                 mov     ebx, [esp+4Ch+Str]
.text:00402F86                 mov     edi, [esp+4Ch+var_1C]
.text:00402F8A                 add     ebx, ebp
.text:00402F8C                 mov     esi, ebx
.text:00402F8E                 cmp     ecx, ecx
.text:00402F90                 repe cmpsb
.text:00402F92                 jnz     short loc_402FB0
.text:00402F94                 mov     edx, [esp+4Ch+arg_4]
.text:00402F98                 cmp     [esp+4Ch+var_34], edx
.text:00402F9C                 jnb     short loc_402FAA
.text:00402F9E                 mov     ecx, [esp+4Ch+arg_0]
.text:00402FA2                 mov     eax, [esp+4Ch+var_34]
.text:00402FA6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:00402FAA
.text:00402FAA loc_402FAA:                             ; CODE XREF: sub_402EC0+DC↑j
.text:00402FAA                 inc     [esp+4Ch+var_34]
.text:00402FAE                 mov     esi, esi
.text:00402FB0
.text:00402FB0 loc_402FB0:                             ; CODE XREF: sub_402EC0+AA↑j
.text:00402FB0                                         ; sub_402EC0+B2↑j ...
.text:00402FB0                 mov     edi, [esp+4Ch+Str]
.text:00402FB4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00402FB9                 movzx   eax, bl
.text:00402FBC                 cmp     eax, 7Eh        ; switch 127 cases
.text:00402FBF                 ja      def_402FC5      ; jumptable 00402FC5 default case, cases 1-6,14-31,64
.text:00402FC5                 jmp     ds:jpt_402FC5[eax*4] ; switch jump
.text:00402FC5 ; ---------------------------------------------------------------------------
.text:00402FCC jpt_402FC5      dd offset loc_4031C8, offset def_402FC5, offset def_402FC5
.text:00402FCC                                         ; DATA XREF: sub_402EC0+105↑r
.text:00402FCC                 dd offset def_402FC5, offset def_402FC5, offset def_402FC5 ; jump table for switch statement
.text:00402FCC                 dd offset def_402FC5, offset loc_4032A0, offset loc_4032BE
.text:00402FCC                 dd offset loc_4032C2, offset loc_403307, offset loc_40330B
.text:00402FCC                 dd offset loc_40330F, offset loc_403313, offset def_402FC5
.text:00402FCC                 dd offset def_402FC5, offset def_402FC5, offset def_402FC5
.text:00402FCC                 dd offset def_402FC5, offset def_402FC5, offset def_402FC5
.text:00402FCC                 dd offset def_402FC5, offset def_402FC5, offset def_402FC5
.text:00402FCC                 dd offset def_402FC5, offset def_402FC5, offset def_402FC5
.text:00402FCC                 dd offset def_402FC5, offset def_402FC5, offset def_402FC5
.text:00402FCC                 dd offset def_402FC5, offset def_402FC5, offset loc_403798
.text:00402FCC                 dd offset loc_403798, offset loc_403798, offset loc_4037BA
.text:00402FCC                 dd offset loc_403798, offset def_4033C2, offset loc_403798
.text:00402FCC                 dd offset loc_403317, offset loc_403798, offset loc_403798
.text:00402FCC                 dd offset loc_403798, offset def_4033C2, offset def_4033C2
.text:00402FCC                 dd offset def_4033C2, offset def_4033C2, offset def_4033C2
.text:00402FCC                 dd offset def_4033C2, offset def_4033C2, offset def_4033C2
.text:00402FCC                 dd offset def_4033C2, offset def_4033C2, offset def_4033C2
.text:00402FCC                 dd offset def_4033C2, offset def_4033C2, offset def_4033C2
.text:00402FCC                 dd offset def_4033C2, offset def_4033C2, offset loc_403798
.text:00402FCC                 dd offset loc_403798, offset loc_403798, offset loc_403798
.text:00402FCC                 dd offset loc_40337C, offset def_402FC5, offset def_4033C2
.text:00402FCC                 dd offset def_4033C2, offset def_4033C2, offset def_4033C2
.text:00402FCC                 dd offset def_4033C2, offset def_4033C2, offset def_4033C2
.text:00402FCC                 dd offset def_4033C2, offset def_4033C2, offset def_4033C2
.text:00402FCC                 dd offset def_4033C2, offset def_4033C2, offset def_4033C2
.text:00402FCC                 dd offset def_4033C2, offset def_4033C2, offset def_4033C2
.text:00402FCC                 dd offset def_4033C2, offset def_4033C2, offset def_4033C2
.text:00402FCC                 dd offset def_4033C2, offset def_4033C2, offset def_4033C2
.text:00402FCC                 dd offset def_4033C2, offset def_4033C2, offset def_4033C2
.text:00402FCC                 dd offset def_4033C2, offset loc_403798, offset loc_403791
.text:00402FCC                 dd offset def_4033C2, offset loc_403798, offset def_4033C2
.text:00402FCC                 dd offset loc_403798, offset def_4033C2, offset def_4033C2
.text:00402FCC                 dd offset def_4033C2, offset def_4033C2, offset def_4033C2
.text:00402FCC                 dd offset def_4033C2, offset def_4033C2, offset def_4033C2
.text:00402FCC                 dd offset def_4033C2, offset def_4033C2, offset def_4033C2
.text:00402FCC                 dd offset def_4033C2, offset def_4033C2, offset def_4033C2
.text:00402FCC                 dd offset def_4033C2, offset def_4033C2, offset def_4033C2
.text:00402FCC                 dd offset def_4033C2, offset def_4033C2, offset def_4033C2
.text:00402FCC                 dd offset def_4033C2, offset def_4033C2, offset def_4033C2
.text:00402FCC                 dd offset def_4033C2, offset def_4033C2, offset def_4033C2
.text:00402FCC                 dd offset loc_4037A8, offset loc_403798, offset loc_4037A8
.text:00402FCC                 dd offset loc_4037BA
.text:004031C8 ; ---------------------------------------------------------------------------
.text:004031C8
.text:004031C8 loc_4031C8:                             ; CODE XREF: sub_402EC0+105↑j
.text:004031C8                                         ; DATA XREF: sub_402EC0:jpt_402FC5↑o
.text:004031C8                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00402FC5 case 0
.text:004031CD                 lea     eax, [ebp+1]
.text:004031D0                 jz      loc_403280
.text:004031D6                 mov     esi, [esp+4Ch+arg_4]
.text:004031DA                 cmp     [esp+4Ch+var_34], esi
.text:004031DE                 jnb     short loc_4031EC
.text:004031E0                 mov     eax, [esp+4Ch+arg_0]
.text:004031E4                 mov     ebx, [esp+4Ch+var_34]
.text:004031E8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:004031EC
.text:004031EC loc_4031EC:                             ; CODE XREF: sub_402EC0+31E↑j
.text:004031EC                 inc     [esp+4Ch+var_34]
.text:004031F0                 mov     edx, [esp+4Ch+arg_4]
.text:004031F4                 cmp     [esp+4Ch+var_34], edx
.text:004031F8                 jnb     short loc_403206
.text:004031FA                 mov     edi, [esp+4Ch+arg_0]
.text:004031FE                 mov     ecx, [esp+4Ch+var_34]
.text:00403202                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00403206
.text:00403206 loc_403206:                             ; CODE XREF: sub_402EC0+338↑j
.text:00403206                 inc     [esp+4Ch+var_34]
.text:0040320A                 mov     esi, [esp+4Ch+arg_4]
.text:0040320E                 cmp     [esp+4Ch+var_34], esi
.text:00403212                 jnb     short loc_403220
.text:00403214                 mov     ebx, [esp+4Ch+arg_0]
.text:00403218                 mov     eax, [esp+4Ch+var_34]
.text:0040321C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00403220
.text:00403220 loc_403220:                             ; CODE XREF: sub_402EC0+352↑j
.text:00403220                 inc     [esp+4Ch+var_34]
.text:00403224                 mov     bl, 30h ; '0'
.text:00403226                 lea     esi, [esi+0]
.text:00403229                 lea     edi, [edi+0]
.text:00403230
.text:00403230 def_4033C2:                             ; CODE XREF: sub_402EC0+105↑j
.text:00403230                                         ; sub_402EC0+463↓j ...
.text:00403230                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00402FC5 cases 37,43-58,65-90,93,95,97-122
.text:00403230                                         ; jumptable 004033C2 default case, cases 34-38,42-44,46,48-59
.text:00403235                 lea     eax, [ebp+1]
.text:00403238                 jz      short loc_403280
.text:0040323A                 mov     cl, bl
.text:0040323C                 mov     edi, [esp+4Ch+arg_14]
.text:00403240                 mov     esi, 1
.text:00403245                 shr     cl, 5
.text:00403248                 movzx   edx, cl
.text:0040324B                 mov     ecx, ebx
.text:0040324D                 and     ecx, 1Fh
.text:00403250                 shl     esi, cl
.text:00403252                 test    [edi+edx*4+4], esi
.text:00403256                 jz      short loc_403272
.text:00403258
.text:00403258 loc_403258:                             ; CODE XREF: sub_402EC0+3FC↓j
.text:00403258                 mov     edx, [esp+4Ch+arg_4]
.text:0040325C                 cmp     [esp+4Ch+var_34], edx
.text:00403260                 jnb     short loc_40326E
.text:00403262                 mov     edi, [esp+4Ch+arg_0]
.text:00403266                 mov     esi, [esp+4Ch+var_34]
.text:0040326A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040326E
.text:0040326E loc_40326E:                             ; CODE XREF: sub_402EC0+3A0↑j
.text:0040326E                 inc     [esp+4Ch+var_34]
.text:00403272
.text:00403272 loc_403272:                             ; CODE XREF: sub_402EC0+396↑j
.text:00403272                 lea     eax, [ebp+1]
.text:00403275                 lea     esi, [esi+0]
.text:00403279                 lea     edi, [edi+0]
.text:00403280
.text:00403280 loc_403280:                             ; CODE XREF: sub_402EC0+310↑j
.text:00403280                                         ; sub_402EC0+378↑j ...
.text:00403280                 mov     ebp, [esp+4Ch+arg_4]
.text:00403284                 cmp     [esp+4Ch+var_34], ebp
.text:00403288                 jnb     short loc_403295
.text:0040328A                 mov     edx, [esp+4Ch+arg_0]
.text:0040328E                 mov     ecx, [esp+4Ch+var_34]
.text:00403292                 mov     [ecx+edx], bl
.text:00403295
.text:00403295 loc_403295:                             ; CODE XREF: sub_402EC0+3C8↑j
.text:00403295                 inc     [esp+4Ch+var_34]
.text:00403299                 mov     ebp, eax
.text:0040329B                 jmp     loc_402F50
.text:004032A0 ; ---------------------------------------------------------------------------
.text:004032A0
.text:004032A0 loc_4032A0:                             ; CODE XREF: sub_402EC0+105↑j
.text:004032A0                                         ; DATA XREF: sub_402EC0:jpt_402FC5↑o
.text:004032A0                 mov     dl, 61h ; 'a'   ; jumptable 00402FC5 case 7
.text:004032A2                 lea     esi, [esi+0]
.text:004032A9                 lea     edi, [edi+0]
.text:004032B0
.text:004032B0 loc_4032B0:                             ; CODE XREF: sub_402EC0+400↓j
.text:004032B0                                         ; sub_402EC0+409↓j ...
.text:004032B0                 cmp     [esp+4Ch+var_21], 0
.text:004032B5                 lea     eax, [ebp+1]
.text:004032B8                 jz      short loc_403280
.text:004032BA                 mov     bl, dl
.text:004032BC                 jmp     short loc_403258
.text:004032BE ; ---------------------------------------------------------------------------
.text:004032BE
.text:004032BE loc_4032BE:                             ; CODE XREF: sub_402EC0+105↑j
.text:004032BE                                         ; DATA XREF: sub_402EC0:jpt_402FC5↑o
.text:004032BE                 mov     dl, 62h ; 'b'   ; jumptable 00402FC5 case 8
.text:004032C0                 jmp     short loc_4032B0
.text:004032C2 ; ---------------------------------------------------------------------------
.text:004032C2
.text:004032C2 loc_4032C2:                             ; CODE XREF: sub_402EC0+105↑j
.text:004032C2                                         ; DATA XREF: sub_402EC0:jpt_402FC5↑o
.text:004032C2                 mov     dl, 74h ; 't'   ; jumptable 00402FC5 case 9
.text:004032C4
.text:004032C4 loc_4032C4:                             ; CODE XREF: sub_402EC0+449↓j
.text:004032C4                                         ; sub_402EC0+455↓j ...
.text:004032C4                 cmp     [esp+4Ch+arg_10], 1
.text:004032C9                 jnz     short loc_4032B0
.text:004032CB
.text:004032CB loc_4032CB:                             ; CODE XREF: sub_402EC0+45C↓j
.text:004032CB                                         ; sub_402EC0+4C1↓j ...
.text:004032CB                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00403692 cases 91,92,94,96,124
.text:004032D3                 mov     eax, [esp+4Ch+arg_14]
.text:004032D7                 mov     edx, [esp+4Ch+arg_C]
.text:004032DB                 mov     ecx, [esp+4Ch+Str]
.text:004032DF                 mov     ebx, [esp+4Ch+arg_4]
.text:004032E3                 mov     [esp+4Ch+var_38], eax ; int
.text:004032E7                 mov     ebp, [esp+4Ch+arg_0]
.text:004032EB                 mov     [esp+4Ch+State], edx ; int
.text:004032EF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:004032F3                 mov     [esp+4Ch+Type], ebx ; int
.text:004032F7                 mov     [esp+4Ch+C], ebp ; int
.text:004032FA                 call    sub_402EC0
.text:004032FF
.text:004032FF loc_4032FF:                             ; CODE XREF: sub_402EC0+972↓j
.text:004032FF                 add     esp, 3Ch
.text:00403302                 pop     ebx
.text:00403303                 pop     esi
.text:00403304                 pop     edi
.text:00403305                 pop     ebp
.text:00403306                 retn
.text:00403307 ; ---------------------------------------------------------------------------
.text:00403307
.text:00403307 loc_403307:                             ; CODE XREF: sub_402EC0+105↑j
.text:00403307                                         ; DATA XREF: sub_402EC0:jpt_402FC5↑o
.text:00403307                 mov     dl, 6Eh ; 'n'   ; jumptable 00402FC5 case 10
.text:00403309                 jmp     short loc_4032C4
.text:0040330B ; ---------------------------------------------------------------------------
.text:0040330B
.text:0040330B loc_40330B:                             ; CODE XREF: sub_402EC0+105↑j
.text:0040330B                                         ; DATA XREF: sub_402EC0:jpt_402FC5↑o
.text:0040330B                 mov     dl, 76h ; 'v'   ; jumptable 00402FC5 case 11
.text:0040330D                 jmp     short loc_4032B0
.text:0040330F ; ---------------------------------------------------------------------------
.text:0040330F
.text:0040330F loc_40330F:                             ; CODE XREF: sub_402EC0+105↑j
.text:0040330F                                         ; DATA XREF: sub_402EC0:jpt_402FC5↑o
.text:0040330F                 mov     dl, 66h ; 'f'   ; jumptable 00402FC5 case 12
.text:00403311                 jmp     short loc_4032B0
.text:00403313 ; ---------------------------------------------------------------------------
.text:00403313
.text:00403313 loc_403313:                             ; CODE XREF: sub_402EC0+105↑j
.text:00403313                                         ; DATA XREF: sub_402EC0:jpt_402FC5↑o
.text:00403313                 mov     dl, 72h ; 'r'   ; jumptable 00402FC5 case 13
.text:00403315                 jmp     short loc_4032C4
.text:00403317 ; ---------------------------------------------------------------------------
.text:00403317
.text:00403317 loc_403317:                             ; CODE XREF: sub_402EC0+105↑j
.text:00403317                                         ; DATA XREF: sub_402EC0:jpt_402FC5↑o
.text:00403317                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402FC5 case 39
.text:0040331C                 jz      short loc_4032CB ; jumptable 00403692 cases 91,92,94,96,124
.text:0040331E                 cmp     [esp+4Ch+arg_10], 2
.text:00403323                 jnz     def_4033C2      ; jumptable 00402FC5 cases 37,43-58,65-90,93,95,97-122
.text:00403323                                         ; jumptable 004033C2 default case, cases 34-38,42-44,46,48-59
.text:00403329                 mov     edx, [esp+4Ch+arg_4]
.text:0040332D                 cmp     [esp+4Ch+var_34], edx
.text:00403331                 jnb     short loc_40333F
.text:00403333                 mov     ecx, [esp+4Ch+arg_0]
.text:00403337                 mov     edi, [esp+4Ch+var_34]
.text:0040333B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040333F
.text:0040333F loc_40333F:                             ; CODE XREF: sub_402EC0+471↑j
.text:0040333F                 inc     [esp+4Ch+var_34]
.text:00403343                 mov     eax, [esp+4Ch+arg_4]
.text:00403347                 cmp     [esp+4Ch+var_34], eax
.text:0040334B                 jnb     short loc_403359
.text:0040334D                 mov     esi, [esp+4Ch+arg_0]
.text:00403351                 mov     edx, [esp+4Ch+var_34]
.text:00403355                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00403359
.text:00403359 loc_403359:                             ; CODE XREF: sub_402EC0+48B↑j
.text:00403359                 inc     [esp+4Ch+var_34]
.text:0040335D                 mov     edi, [esp+4Ch+arg_4]
.text:00403361                 cmp     [esp+4Ch+var_34], edi
.text:00403365                 jnb     short loc_403373
.text:00403367                 mov     ecx, [esp+4Ch+arg_0]
.text:0040336B                 mov     eax, [esp+4Ch+var_34]
.text:0040336F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00403373
.text:00403373 loc_403373:                             ; CODE XREF: sub_402EC0+4A5↑j
.text:00403373                                         ; sub_402EC0+5C4↓j ...
.text:00403373                 inc     [esp+4Ch+var_34]
.text:00403377                 jmp     def_4033C2      ; jumptable 00402FC5 cases 37,43-58,65-90,93,95,97-122
.text:00403377                                         ; jumptable 004033C2 default case, cases 34-38,42-44,46,48-59
.text:0040337C ; ---------------------------------------------------------------------------
.text:0040337C
.text:0040337C loc_40337C:                             ; CODE XREF: sub_402EC0+105↑j
.text:0040337C                                         ; DATA XREF: sub_402EC0:jpt_402FC5↑o
.text:0040337C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402FC5 case 63
.text:00403381                 jz      loc_4032CB      ; jumptable 00403692 cases 91,92,94,96,124
.text:00403387                 cmp     [esp+4Ch+arg_10], 3
.text:0040338C                 jnz     def_4033C2      ; jumptable 00402FC5 cases 37,43-58,65-90,93,95,97-122
.text:0040338C                                         ; jumptable 004033C2 default case, cases 34-38,42-44,46,48-59
.text:00403392                 lea     edx, [ebp+2]
.text:00403395                 cmp     edx, [esp+4Ch+arg_C]
.text:00403399                 jnb     def_4033C2      ; jumptable 00402FC5 cases 37,43-58,65-90,93,95,97-122
.text:00403399                                         ; jumptable 004033C2 default case, cases 34-38,42-44,46,48-59
.text:0040339F                 mov     esi, [esp+4Ch+Str]
.text:004033A3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:004033A8                 jnz     def_4033C2      ; jumptable 00402FC5 cases 37,43-58,65-90,93,95,97-122
.text:004033A8                                         ; jumptable 004033C2 default case, cases 34-38,42-44,46,48-59
.text:004033AE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:004033B3                 movsx   eax, cl
.text:004033B6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:004033B9                 cmp     eax, 1Dh
.text:004033BC                 ja      def_4033C2      ; jumptable 00402FC5 cases 37,43-58,65-90,93,95,97-122
.text:004033BC                                         ; jumptable 004033C2 default case, cases 34-38,42-44,46,48-59
.text:004033C2                 jmp     ds:jpt_4033C2[eax*4] ; switch jump
.text:004033C2 ; ---------------------------------------------------------------------------
.text:004033C9                 align 4
.text:004033CC jpt_4033C2      dd offset loc_403444    ; DATA XREF: sub_402EC0+502↑r
.text:004033CC                 dd offset def_4033C2    ; jump table for switch statement
.text:004033CC                 dd offset def_4033C2
.text:004033CC                 dd offset def_4033C2
.text:004033CC                 dd offset def_4033C2
.text:004033CC                 dd offset def_4033C2
.text:004033CC                 dd offset loc_403444
.text:004033CC                 dd offset loc_403444
.text:004033CC                 dd offset loc_403444
.text:004033CC                 dd offset def_4033C2
.text:004033CC                 dd offset def_4033C2
.text:004033CC                 dd offset def_4033C2
.text:004033CC                 dd offset loc_403444
.text:004033CC                 dd offset def_4033C2
.text:004033CC                 dd offset loc_403444
.text:004033CC                 dd offset def_4033C2
.text:004033CC                 dd offset def_4033C2
.text:004033CC                 dd offset def_4033C2
.text:004033CC                 dd offset def_4033C2
.text:004033CC                 dd offset def_4033C2
.text:004033CC                 dd offset def_4033C2
.text:004033CC                 dd offset def_4033C2
.text:004033CC                 dd offset def_4033C2
.text:004033CC                 dd offset def_4033C2
.text:004033CC                 dd offset def_4033C2
.text:004033CC                 dd offset def_4033C2
.text:004033CC                 dd offset def_4033C2
.text:004033CC                 dd offset loc_403444
.text:004033CC                 dd offset loc_403444
.text:004033CC                 dd offset loc_403444
.text:00403444 ; ---------------------------------------------------------------------------
.text:00403444
.text:00403444 loc_403444:                             ; CODE XREF: sub_402EC0+502↑j
.text:00403444                                         ; DATA XREF: sub_402EC0:jpt_4033C2↑o
.text:00403444                 mov     ebp, edx        ; jumptable 004033C2 cases 33,39-41,45,47,60-62
.text:00403446                 mov     bl, cl
.text:00403448                 mov     edx, [esp+4Ch+arg_4]
.text:0040344C                 cmp     [esp+4Ch+var_34], edx
.text:00403450                 jnb     short loc_40345E
.text:00403452                 mov     ecx, [esp+4Ch+arg_0]
.text:00403456                 mov     edi, [esp+4Ch+var_34]
.text:0040345A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040345E
.text:0040345E loc_40345E:                             ; CODE XREF: sub_402EC0+590↑j
.text:0040345E                 inc     [esp+4Ch+var_34]
.text:00403462                 mov     eax, [esp+4Ch+arg_4]
.text:00403466                 cmp     [esp+4Ch+var_34], eax
.text:0040346A                 jnb     short loc_403478
.text:0040346C                 mov     edx, [esp+4Ch+arg_0]
.text:00403470                 mov     esi, [esp+4Ch+var_34]
.text:00403474                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00403478
.text:00403478 loc_403478:                             ; CODE XREF: sub_402EC0+5AA↑j
.text:00403478                 inc     [esp+4Ch+var_34]
.text:0040347C                 mov     edi, [esp+4Ch+arg_4]
.text:00403480                 cmp     [esp+4Ch+var_34], edi
.text:00403484                 jnb     loc_403373
.text:0040348A                 mov     eax, [esp+4Ch+arg_0]
.text:0040348E                 mov     ecx, [esp+4Ch+var_34]
.text:00403492                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00403496                 jmp     loc_403373
.text:00403496 ; ---------------------------------------------------------------------------
.text:0040349B                 align 10h
.text:004034A0
.text:004034A0 def_402FC5:                             ; CODE XREF: sub_402EC0+FF↑j
.text:004034A0                                         ; sub_402EC0+105↑j
.text:004034A0                                         ; DATA XREF: ...
.text:004034A0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00402FC5 default case, cases 1-6,14-31,64
.text:004034A5                 jz      loc_4035D0
.text:004034AB                 mov     [esp+4Ch+var_28], 1
.text:004034B3                 mov     esi, ds:__mb_cur_max
.text:004034B9                 movzx   edx, bl
.text:004034BC                 cmp     dword ptr [esi], 1
.text:004034BF                 jz      loc_4035B4
.text:004034C5                 mov     [esp+4Ch+Type], 157h ; Type
.text:004034CD                 mov     [esp+4Ch+C], edx ; C
.text:004034D0                 call    _isctype
.text:004034D5
.text:004034D5 loc_4034D5:                             ; CODE XREF: sub_402EC0+705↓j
.text:004034D5                 test    eax, eax
.text:004034D7                 setnz   [esp+4Ch+var_29]
.text:004034DC
.text:004034DC loc_4034DC:                             ; CODE XREF: sub_402EC0+7A5↓j
.text:004034DC                 cmp     [esp+4Ch+var_21], 0
.text:004034E1                 lea     eax, [ebp+1]
.text:004034E4                 jz      loc_403280
.text:004034EA                 cmp     [esp+4Ch+var_29], 0
.text:004034EF                 jnz     def_4033C2      ; jumptable 00402FC5 cases 37,43-58,65-90,93,95,97-122
.text:004034EF                                         ; jumptable 004033C2 default case, cases 34-38,42-44,46,48-59
.text:004034F5
.text:004034F5 loc_4034F5:                             ; CODE XREF: sub_402EC0+7AB↓j
.text:004034F5                 mov     eax, [esp+4Ch+var_28]
.text:004034F9                 lea     edx, [eax+ebp]
.text:004034FC                 lea     esi, [esi+0]
.text:00403500
.text:00403500 loc_403500:                             ; CODE XREF: sub_402EC0+6EF↓j
.text:00403500                 cmp     [esp+4Ch+var_21], 0
.text:00403505                 jz      short loc_403580
.text:00403507                 cmp     [esp+4Ch+var_29], 0
.text:0040350C                 jnz     short loc_403580
.text:0040350E                 mov     edi, [esp+4Ch+arg_4]
.text:00403512                 cmp     [esp+4Ch+var_34], edi
.text:00403516                 jnb     short loc_403524
.text:00403518                 mov     esi, [esp+4Ch+arg_0]
.text:0040351C                 mov     eax, [esp+4Ch+var_34]
.text:00403520                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00403524
.text:00403524 loc_403524:                             ; CODE XREF: sub_402EC0+656↑j
.text:00403524                 inc     [esp+4Ch+var_34]
.text:00403528                 mov     ecx, [esp+4Ch+arg_4]
.text:0040352C                 cmp     [esp+4Ch+var_34], ecx
.text:00403530                 jnb     short loc_403545
.text:00403532                 mov     cl, bl
.text:00403534                 mov     esi, [esp+4Ch+arg_0]
.text:00403538                 mov     edi, [esp+4Ch+var_34]
.text:0040353C                 shr     cl, 6
.text:0040353F                 add     cl, 30h ; '0'
.text:00403542                 mov     [edi+esi], cl
.text:00403545
.text:00403545 loc_403545:                             ; CODE XREF: sub_402EC0+670↑j
.text:00403545                 inc     [esp+4Ch+var_34]
.text:00403549                 mov     edi, [esp+4Ch+arg_4]
.text:0040354D                 cmp     [esp+4Ch+var_34], edi
.text:00403551                 jnb     short loc_403569
.text:00403553                 mov     cl, bl
.text:00403555                 mov     esi, [esp+4Ch+arg_0]
.text:00403559                 shr     cl, 3
.text:0040355C                 mov     edi, [esp+4Ch+var_34]
.text:00403560                 and     cl, 7
.text:00403563                 add     cl, 30h ; '0'
.text:00403566                 mov     [edi+esi], cl
.text:00403569
.text:00403569 loc_403569:                             ; CODE XREF: sub_402EC0+691↑j
.text:00403569                 inc     [esp+4Ch+var_34]
.text:0040356D                 and     bl, 7
.text:00403570                 add     bl, 30h ; '0'
.text:00403573                 lea     esi, [esi+0]
.text:00403579                 lea     edi, [edi+0]
.text:00403580
.text:00403580 loc_403580:                             ; CODE XREF: sub_402EC0+645↑j
.text:00403580                                         ; sub_402EC0+64C↑j
.text:00403580                 lea     eax, [ebp+1]
.text:00403583                 cmp     edx, eax
.text:00403585                 jbe     loc_403280
.text:0040358B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040358F                 cmp     [esp+4Ch+var_34], ebp
.text:00403593                 jnb     short loc_4035A0
.text:00403595                 mov     ecx, [esp+4Ch+arg_0]
.text:00403599                 mov     edi, [esp+4Ch+var_34]
.text:0040359D                 mov     [edi+ecx], bl
.text:004035A0
.text:004035A0 loc_4035A0:                             ; CODE XREF: sub_402EC0+6D3↑j
.text:004035A0                 inc     [esp+4Ch+var_34]
.text:004035A4                 mov     ebp, eax
.text:004035A6                 mov     eax, [esp+4Ch+Str]
.text:004035AA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:004035AF                 jmp     loc_403500
.text:004035B4 ; ---------------------------------------------------------------------------
.text:004035B4
.text:004035B4 loc_4035B4:                             ; CODE XREF: sub_402EC0+5FF↑j
.text:004035B4                 mov     ecx, ds:_pctype
.text:004035BA                 mov     edi, [ecx]
.text:004035BC                 movzx   eax, word ptr [edi+edx*2]
.text:004035C0                 and     eax, 157h
.text:004035C5                 jmp     loc_4034D5
.text:004035C5 ; ---------------------------------------------------------------------------
.text:004035CA                 align 10h
.text:004035D0
.text:004035D0 loc_4035D0:                             ; CODE XREF: sub_402EC0+5E5↑j
.text:004035D0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004035D5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:004035DD                 mov     [esp+4Ch+var_28], 0
.text:004035E5                 mov     [esp+4Ch+var_29], 1
.text:004035EA                 jz      loc_40377C
.text:004035F0
.text:004035F0 loc_4035F0:                             ; CODE XREF: sub_402EC0+8CC↓j
.text:004035F0                 mov     ecx, [esp+4Ch+arg_C]
.text:004035F4                 lea     edx, [esp+4Ch+var_18]
.text:004035F8                 mov     edi, [esp+4Ch+Str]
.text:004035FC                 mov     [esp+4Ch+State], edx ; State
.text:00403600                 lea     esi, [esp+4Ch+var_18._State]
.text:00403604                 sub     ecx, ebp
.text:00403606                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040360A                 add     edi, ebp
.text:0040360C                 mov     [esp+4Ch+var_30], edi
.text:00403610                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00403614                 mov     [esp+4Ch+C], esi ; DstCh
.text:00403617                 call    mbrtowc
.text:0040361C                 test    eax, eax
.text:0040361E                 mov     edi, eax
.text:00403620                 jz      short loc_403660
.text:00403622                 cmp     eax, 0FFFFFFFFh
.text:00403625                 jz      loc_403772
.text:0040362B                 cmp     eax, 0FFFFFFFEh
.text:0040362E                 jz      loc_403732
.text:00403634                 cmp     [esp+4Ch+arg_10], 1
.text:00403639                 jz      short loc_403670
.text:0040363B
.text:0040363B loc_40363B:                             ; CODE XREF: sub_402EC0+7B9↓j
.text:0040363B                                         ; sub_402EC0+86D↓j
.text:0040363B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00403640                 mov     [esp+4Ch+Type], 157h ; Type
.text:00403648                 mov     [esp+4Ch+C], ecx ; C
.text:0040364B                 call    iswctype
.text:00403650                 test    eax, eax
.text:00403652                 jnz     short loc_403659
.text:00403654                 mov     [esp+4Ch+var_29], 0
.text:00403659
.text:00403659 loc_403659:                             ; CODE XREF: sub_402EC0+792↑j
.text:00403659                 mov     [esp+4Ch+var_28], edi
.text:0040365D                 lea     esi, [esi+0]
.text:00403660
.text:00403660 loc_403660:                             ; CODE XREF: sub_402EC0+760↑j
.text:00403660                                         ; sub_402EC0+87B↓j ...
.text:00403660                 cmp     [esp+4Ch+var_28], 1
.text:00403665                 jbe     loc_4034DC
.text:0040366B                 jmp     loc_4034F5
.text:00403670 ; ---------------------------------------------------------------------------
.text:00403670
.text:00403670 loc_403670:                             ; CODE XREF: sub_402EC0+779↑j
.text:00403670                 cmp     [esp+4Ch+arg_10], eax
.text:00403674                 mov     edx, 1
.text:00403679                 jnb     short loc_40363B
.text:0040367B
.text:0040367B loc_40367B:                             ; CODE XREF: sub_402EC0+867↓j
.text:0040367B                 mov     ecx, [esp+4Ch+Str]
.text:0040367F                 lea     esi, [edx+ebp]
.text:00403682                 movsx   eax, byte ptr [esi+ecx]
.text:00403686                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00403689                 cmp     eax, 21h
.text:0040368C                 ja      def_403692      ; jumptable 00403692 default case, cases 93,95,97-123
.text:00403692                 jmp     ds:jpt_403692[eax*4] ; switch jump
.text:00403692 ; ---------------------------------------------------------------------------
.text:00403699                 align 4
.text:0040369C jpt_403692      dd offset loc_4032CB    ; DATA XREF: sub_402EC0+7D2↑r
.text:0040369C                 dd offset loc_4032CB    ; jump table for switch statement
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset loc_4032CB
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset loc_4032CB
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset def_403692
.text:0040369C                 dd offset loc_4032CB
.text:00403724 ; ---------------------------------------------------------------------------
.text:00403724
.text:00403724 def_403692:                             ; CODE XREF: sub_402EC0+7CC↑j
.text:00403724                                         ; sub_402EC0+7D2↑j
.text:00403724                                         ; DATA XREF: ...
.text:00403724                 inc     edx             ; jumptable 00403692 default case, cases 93,95,97-123
.text:00403725                 cmp     edx, edi
.text:00403727                 jb      loc_40367B
.text:0040372D                 jmp     loc_40363B
.text:00403732 ; ---------------------------------------------------------------------------
.text:00403732
.text:00403732 loc_403732:                             ; CODE XREF: sub_402EC0+76E↑j
.text:00403732                 cmp     ebp, [esp+4Ch+arg_C]
.text:00403736                 mov     [esp+4Ch+var_29], 0
.text:0040373B                 jnb     loc_403660
.text:00403741                 mov     eax, [esp+4Ch+var_30]
.text:00403745                 cmp     byte ptr [eax], 0
.text:00403748                 jz      loc_403660
.text:0040374E
.text:0040374E loc_40374E:                             ; CODE XREF: sub_402EC0+8AB↓j
.text:0040374E                 inc     [esp+4Ch+var_28]
.text:00403752                 mov     esi, [esp+4Ch+var_28]
.text:00403756                 lea     eax, [esi+ebp]
.text:00403759                 cmp     eax, [esp+4Ch+arg_C]
.text:0040375D                 jnb     loc_403660
.text:00403763                 mov     edi, [esp+4Ch+Str]
.text:00403767                 cmp     byte ptr [eax+edi], 0
.text:0040376B                 jnz     short loc_40374E
.text:0040376D                 jmp     loc_403660
.text:00403772 ; ---------------------------------------------------------------------------
.text:00403772
.text:00403772 loc_403772:                             ; CODE XREF: sub_402EC0+765↑j
.text:00403772                 mov     [esp+4Ch+var_29], 0
.text:00403777                 jmp     loc_403660
.text:0040377C ; ---------------------------------------------------------------------------
.text:0040377C
.text:0040377C loc_40377C:                             ; CODE XREF: sub_402EC0+72A↑j
.text:0040377C                 mov     edx, [esp+4Ch+Str]
.text:00403780                 mov     [esp+4Ch+C], edx ; Str
.text:00403783                 call    strlen
.text:00403788                 mov     [esp+4Ch+arg_C], eax
.text:0040378C                 jmp     loc_4035F0
.text:00403791 ; ---------------------------------------------------------------------------
.text:00403791
.text:00403791 loc_403791:                             ; CODE XREF: sub_402EC0+105↑j
.text:00403791                                         ; DATA XREF: sub_402EC0:jpt_402FC5↑o
.text:00403791                 mov     dl, bl          ; jumptable 00402FC5 case 92
.text:00403793                 jmp     loc_4032C4
.text:00403798 ; ---------------------------------------------------------------------------
.text:00403798
.text:00403798 loc_403798:                             ; CODE XREF: sub_402EC0+105↑j
.text:00403798                                         ; sub_402EC0+902↓j
.text:00403798                                         ; DATA XREF: ...
.text:00403798                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00402FC5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040379D                 jnz     def_4033C2      ; jumptable 00402FC5 cases 37,43-58,65-90,93,95,97-122
.text:0040379D                                         ; jumptable 004033C2 default case, cases 34-38,42-44,46,48-59
.text:004037A3                 jmp     loc_4032CB      ; jumptable 00403692 cases 91,92,94,96,124
.text:004037A8 ; ---------------------------------------------------------------------------
.text:004037A8
.text:004037A8 loc_4037A8:                             ; CODE XREF: sub_402EC0+105↑j
.text:004037A8                                         ; DATA XREF: sub_402EC0:jpt_402FC5↑o
.text:004037A8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00402FC5 cases 123,125
.text:004037AD                 jz      short loc_4037C4
.text:004037AF                 cmp     [esp+4Ch+arg_C], 1
.text:004037B4
.text:004037B4 loc_4037B4:                             ; CODE XREF: sub_402EC0+90C↓j
.text:004037B4                 jnz     def_4033C2      ; jumptable 00402FC5 cases 37,43-58,65-90,93,95,97-122
.text:004037B4                                         ; jumptable 004033C2 default case, cases 34-38,42-44,46,48-59
.text:004037BA
.text:004037BA loc_4037BA:                             ; CODE XREF: sub_402EC0+105↑j
.text:004037BA                                         ; DATA XREF: sub_402EC0:jpt_402FC5↑o
.text:004037BA                 test    ebp, ebp        ; jumptable 00402FC5 cases 35,126
.text:004037BC                 jnz     def_4033C2      ; jumptable 00402FC5 cases 37,43-58,65-90,93,95,97-122
.text:004037BC                                         ; jumptable 004033C2 default case, cases 34-38,42-44,46,48-59
.text:004037C2                 jmp     short loc_403798 ; jumptable 00402FC5 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004037C4 ; ---------------------------------------------------------------------------
.text:004037C4
.text:004037C4 loc_4037C4:                             ; CODE XREF: sub_402EC0+8ED↑j
.text:004037C4                 mov     esi, [esp+4Ch+Str]
.text:004037C8                 cmp     byte ptr [esi+1], 0
.text:004037CC                 jmp     short loc_4037B4
.text:004037CE ; ---------------------------------------------------------------------------
.text:004037CE
.text:004037CE loc_4037CE:                             ; CODE XREF: sub_402EC0:loc_402F5F↑j
.text:004037CE                 test    ebp, ebp
.text:004037D0                 jnz     short loc_4037DD
.text:004037D2                 cmp     [esp+4Ch+arg_10], 1
.text:004037D7                 jz      loc_4032CB      ; jumptable 00403692 cases 91,92,94,96,124
.text:004037DD
.text:004037DD loc_4037DD:                             ; CODE XREF: sub_402EC0+910↑j
.text:004037DD                 mov     esi, [esp+4Ch+var_1C]
.text:004037E1                 test    esi, esi
.text:004037E3                 jz      short loc_403818
.text:004037E5                 mov     edi, [esp+4Ch+var_1C]
.text:004037E9                 movzx   eax, byte ptr [edi]
.text:004037EC                 test    al, al
.text:004037EE                 jz      short loc_403818
.text:004037F0
.text:004037F0 loc_4037F0:                             ; CODE XREF: sub_402EC0+956↓j
.text:004037F0                 mov     ebp, [esp+4Ch+arg_4]
.text:004037F4                 cmp     [esp+4Ch+var_34], ebp
.text:004037F8                 jnb     short loc_403805
.text:004037FA                 mov     ecx, [esp+4Ch+arg_0]
.text:004037FE                 mov     ebx, [esp+4Ch+var_34]
.text:00403802                 mov     [ebx+ecx], al
.text:00403805
.text:00403805 loc_403805:                             ; CODE XREF: sub_402EC0+938↑j
.text:00403805                 inc     [esp+4Ch+var_1C]
.text:00403809                 inc     [esp+4Ch+var_34]
.text:0040380D                 mov     edx, [esp+4Ch+var_1C]
.text:00403811                 movzx   eax, byte ptr [edx]
.text:00403814                 test    al, al
.text:00403816                 jnz     short loc_4037F0
.text:00403818
.text:00403818 loc_403818:                             ; CODE XREF: sub_402EC0+923↑j
.text:00403818                                         ; sub_402EC0+92E↑j
.text:00403818                 mov     eax, [esp+4Ch+arg_4]
.text:0040381C                 cmp     [esp+4Ch+var_34], eax
.text:00403820                 jnb     short loc_40382E
.text:00403822                 mov     edi, [esp+4Ch+arg_0]
.text:00403826                 mov     esi, [esp+4Ch+var_34]
.text:0040382A                 mov     byte ptr [esi+edi], 0
.text:0040382E
.text:0040382E loc_40382E:                             ; CODE XREF: sub_402EC0+960↑j
.text:0040382E                 mov     eax, [esp+4Ch+var_34]
.text:00403832                 jmp     loc_4032FF
.text:00403837 ; ---------------------------------------------------------------------------
.text:00403837
.text:00403837 loc_403837:                             ; CODE XREF: sub_402EC0+95↑j
.text:00403837                 mov     ebx, [esp+4Ch+Str]
.text:0040383B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00403840                 jmp     loc_402F5F
.text:00403845 ; ---------------------------------------------------------------------------
.text:00403845
.text:00403845 loc_403845:                             ; CODE XREF: sub_402EC0+3D↑j
.text:00403845                                         ; DATA XREF: sub_402EC0:jpt_402EFD↑o
.text:00403845                 mov     edx, [esp+4Ch+arg_4] ; jumptable 00402EFD case 2
.text:00403849                 cmp     [esp+4Ch+var_34], edx
.text:0040384D                 jnb     short loc_403856
.text:0040384F                 mov     ecx, [esp+4Ch+arg_0]
.text:00403853                 mov     byte ptr [ecx], 27h ; '''
.text:00403856
.text:00403856 loc_403856:                             ; CODE XREF: sub_402EC0+98D↑j
.text:00403856                 mov     [esp+4Ch+var_34], 1
.text:0040385E                 mov     [esp+4Ch+var_1C], 402EAEh
.text:00403866                 jmp     loc_402F46
.text:0040386B ; ---------------------------------------------------------------------------
.text:0040386B
.text:0040386B loc_40386B:                             ; CODE XREF: sub_402EC0+3D↑j
.text:0040386B                                         ; DATA XREF: sub_402EC0:jpt_402EFD↑o
.text:0040386B                 mov     [esp+4Ch+var_21], 1 ; jumptable 00402EFD case 4
.text:00403870                 jmp     def_402EFD      ; jumptable 00402EFD default case, cases 0,1
.text:00403875 ; ---------------------------------------------------------------------------
.text:00403875
.text:00403875 loc_403875:                             ; CODE XREF: sub_402EC0+3D↑j
.text:00403875                                         ; DATA XREF: sub_402EC0:jpt_402EFD↑o
.text:00403875                 mov     [esp+4Ch+C], 402EB0h ; jumptable 00402EFD cases 5,6
.text:0040387C                 call    ds:libintl_gettext
.text:00403882                 cmp     eax, 402EB0h
.text:00403887                 mov     edi, eax
.text:00403889                 jz      short loc_403900
.text:0040388B
.text:0040388B loc_40388B:                             ; CODE XREF: sub_402EC0+A45↓j
.text:0040388B                                         ; sub_402EC0+A4C↓j
.text:0040388B                 mov     [esp+4Ch+C], 402EAEh
.text:00403892                 call    ds:libintl_gettext
.text:00403898                 cmp     eax, 402EAEh
.text:0040389D                 mov     edx, eax
.text:0040389F                 jz      short loc_4038F2
.text:004038A1
.text:004038A1 loc_4038A1:                             ; CODE XREF: sub_402EC0+A37↓j
.text:004038A1                                         ; sub_402EC0+A3E↓j
.text:004038A1                 mov     [esp+4Ch+var_1C], edi
.text:004038A5                 cmp     byte ptr [edi], 0
.text:004038A8                 jz      short loc_4038D8
.text:004038AA
.text:004038AA loc_4038AA:                             ; CODE XREF: sub_402EC0+A16↓j
.text:004038AA                 mov     ecx, [esp+4Ch+arg_4]
.text:004038AE                 cmp     [esp+4Ch+var_34], ecx
.text:004038B2                 jnb     short loc_4038C7
.text:004038B4                 mov     ebp, [esp+4Ch+var_1C]
.text:004038B8                 mov     edi, [esp+4Ch+arg_0]
.text:004038BC                 mov     esi, [esp+4Ch+var_34]
.text:004038C0                 movzx   ebx, byte ptr [ebp+0]
.text:004038C4                 mov     [esi+edi], bl
.text:004038C7
.text:004038C7 loc_4038C7:                             ; CODE XREF: sub_402EC0+9F2↑j
.text:004038C7                 inc     [esp+4Ch+var_1C]
.text:004038CB                 inc     [esp+4Ch+var_34]
.text:004038CF                 mov     eax, [esp+4Ch+var_1C]
.text:004038D3                 cmp     byte ptr [eax], 0
.text:004038D6                 jnz     short loc_4038AA
.text:004038D8
.text:004038D8 loc_4038D8:                             ; CODE XREF: sub_402EC0+9E8↑j
.text:004038D8                 mov     [esp+4Ch+var_21], 1
.text:004038DD                 mov     [esp+4Ch+var_1C], edx
.text:004038E1                 mov     [esp+4Ch+C], edx ; Str
.text:004038E4                 call    strlen
.text:004038E9                 mov     [esp+4Ch+var_20], eax
.text:004038ED                 jmp     def_402EFD      ; jumptable 00402EFD default case, cases 0,1
.text:004038F2 ; ---------------------------------------------------------------------------
.text:004038F2
.text:004038F2 loc_4038F2:                             ; CODE XREF: sub_402EC0+9DF↑j
.text:004038F2                 cmp     [esp+4Ch+arg_10], 6
.text:004038F7                 jnz     short loc_4038A1
.text:004038F9                 mov     edx, offset asc_402EAC ; "\"'`"
.text:004038FE                 jmp     short loc_4038A1
.text:00403900 ; ---------------------------------------------------------------------------
.text:00403900
.text:00403900 loc_403900:                             ; CODE XREF: sub_402EC0+9C9↑j
.text:00403900                 cmp     [esp+4Ch+arg_10], 6
.text:00403905                 jnz     short loc_40388B
.text:00403907                 mov     edi, offset asc_402EAC ; "\"'`"
.text:0040390C                 jmp     loc_40388B
.text:0040390C sub_402EC0      endp
.text:0040390C
.text:00403911 ; ---------------------------------------------------------------------------
.text:00403911                 jmp     short loc_403920
.text:00403911 ; ---------------------------------------------------------------------------
.text:00403913                 align 10h
.text:00403920
.text:00403920 loc_403920:                             ; CODE XREF: .text:00403911↑j
.text:00403920                 sub     esp, 0Ch
.text:00403923                 mov     [esp+4], ebx
.text:00403927                 mov     [esp+8], esi
.text:0040392B                 call    _errno
.text:00403930                 mov     esi, [eax]
.text:00403932                 mov     dword ptr [esp], 24h ; '$'
.text:00403939                 call    sub_404710
.text:0040393E                 mov     edx, [esp+10h]
.text:00403942                 mov     ebx, eax
.text:00403944                 test    edx, edx
.text:00403946                 jz      short loc_403991
.text:00403948
.text:00403948 loc_403948:                             ; CODE XREF: .text:00403996↓j
.text:00403948                 mov     ecx, [edx]
.text:0040394A                 mov     [ebx], ecx
.text:0040394C                 mov     ecx, [edx+4]
.text:0040394F                 mov     [ebx+4], ecx
.text:00403952                 mov     ecx, [edx+8]
.text:00403955                 mov     [ebx+8], ecx
.text:00403958                 mov     ecx, [edx+0Ch]
.text:0040395B                 mov     [ebx+0Ch], ecx
.text:0040395E                 mov     ecx, [edx+10h]
.text:00403961                 mov     [ebx+10h], ecx
.text:00403964                 mov     ecx, [edx+14h]
.text:00403967                 mov     [ebx+14h], ecx
.text:0040396A                 mov     ecx, [edx+18h]
.text:0040396D                 mov     [ebx+18h], ecx
.text:00403970                 mov     ecx, [edx+1Ch]
.text:00403973                 mov     [ebx+1Ch], ecx
.text:00403976                 mov     ecx, [edx+20h]
.text:00403979                 mov     [ebx+20h], ecx
.text:0040397C                 call    _errno
.text:00403981                 mov     [eax], esi
.text:00403983                 mov     esi, [esp+8]
.text:00403987                 mov     eax, ebx
.text:00403989                 mov     ebx, [esp+4]
.text:0040398D                 add     esp, 0Ch
.text:00403990                 retn
.text:00403991 ; ---------------------------------------------------------------------------
.text:00403991
.text:00403991 loc_403991:                             ; CODE XREF: .text:00403946↑j
.text:00403991                 mov     edx, offset dword_407140
.text:00403996                 jmp     short loc_403948
.text:00403996 ; ---------------------------------------------------------------------------
.text:00403998                 align 10h
.text:004039A0                 mov     eax, [esp+4]
.text:004039A4                 test    eax, eax
.text:004039A6                 jz      short loc_4039B0
.text:004039A8
.text:004039A8 loc_4039A8:                             ; CODE XREF: .text:004039B5↓j
.text:004039A8                 mov     eax, [eax]
.text:004039AA                 retn
.text:004039AA ; ---------------------------------------------------------------------------
.text:004039AB                 align 10h
.text:004039B0
.text:004039B0 loc_4039B0:                             ; CODE XREF: .text:004039A6↑j
.text:004039B0                 mov     eax, offset dword_407140
.text:004039B5                 jmp     short loc_4039A8
.text:004039B5 ; ---------------------------------------------------------------------------
.text:004039B7                 align 10h
.text:004039C0                 mov     edx, [esp+4]
.text:004039C4                 test    edx, edx
.text:004039C6                 jz      short loc_4039D0
.text:004039C8
.text:004039C8 loc_4039C8:                             ; CODE XREF: .text:004039D5↓j
.text:004039C8                 mov     ecx, [esp+8]
.text:004039CC                 mov     [edx], ecx
.text:004039CE                 retn
.text:004039CE ; ---------------------------------------------------------------------------
.text:004039CF                 align 10h
.text:004039D0
.text:004039D0 loc_4039D0:                             ; CODE XREF: .text:004039C6↑j
.text:004039D0                 mov     edx, offset dword_407140
.text:004039D5                 jmp     short loc_4039C8
.text:004039D5 ; ---------------------------------------------------------------------------
.text:004039D7                 align 10h
.text:004039E0                 sub     esp, 8
.text:004039E3                 mov     eax, [esp+0Ch]
.text:004039E7                 movzx   ecx, byte ptr [esp+10h]
.text:004039EC                 mov     [esp], ebx
.text:004039EF                 mov     ebx, [esp+14h]
.text:004039F3                 mov     [esp+4], esi
.text:004039F7                 mov     dl, cl
.text:004039F9                 shr     dl, 5
.text:004039FC                 movzx   edx, dl
.text:004039FF                 shl     edx, 2
.text:00403A02                 test    eax, eax
.text:00403A04                 lea     esi, [edx+eax+4]
.text:00403A08                 jz      short loc_403A30
.text:00403A0A
.text:00403A0A loc_403A0A:                             ; CODE XREF: .text:00403A36↓j
.text:00403A0A                 mov     edx, [esi]
.text:00403A0C                 and     ecx, 1Fh
.text:00403A0F                 and     ebx, 1
.text:00403A12                 mov     eax, edx
.text:00403A14                 shr     eax, cl
.text:00403A16                 and     eax, 1
.text:00403A19                 xor     ebx, eax
.text:00403A1B                 shl     ebx, cl
.text:00403A1D                 xor     edx, ebx
.text:00403A1F                 mov     [esi], edx
.text:00403A21                 mov     ebx, [esp]
.text:00403A24                 mov     esi, [esp+4]
.text:00403A28                 add     esp, 8
.text:00403A2B                 retn
.text:00403A2B ; ---------------------------------------------------------------------------
.text:00403A2C                 align 10h
.text:00403A30
.text:00403A30 loc_403A30:                             ; CODE XREF: .text:00403A08↑j
.text:00403A30                 lea     esi, dword_407144[edx]
.text:00403A36                 jmp     short loc_403A0A
.text:00403A36 ; ---------------------------------------------------------------------------
.text:00403A38                 align 10h
.text:00403A40                 sub     esp, 2Ch
.text:00403A43                 mov     [esp+24h], ebx
.text:00403A47                 mov     ebx, [esp+40h]
.text:00403A4B                 mov     [esp+28h], esi
.text:00403A4F                 test    ebx, ebx
.text:00403A51                 jz      short loc_403AA0
.text:00403A53
.text:00403A53 loc_403A53:                             ; CODE XREF: .text:00403AA5↓j
.text:00403A53                 call    _errno
.text:00403A58                 mov     esi, [eax]
.text:00403A5A                 mov     [esp+14h], ebx
.text:00403A5E                 mov     edx, [ebx]
.text:00403A60                 mov     ecx, [esp+38h]
.text:00403A64                 mov     ebx, [esp+3Ch]
.text:00403A68                 mov     [esp+10h], edx
.text:00403A6C                 mov     edx, [esp+34h]
.text:00403A70                 mov     [esp+0Ch], ebx
.text:00403A74                 mov     [esp+8], ecx
.text:00403A78                 mov     [esp+4], edx
.text:00403A7C                 mov     edx, [esp+30h]
.text:00403A80                 mov     [esp], edx
.text:00403A83                 call    sub_402EC0
.text:00403A88                 mov     ebx, eax
.text:00403A8A                 call    _errno
.text:00403A8F                 mov     [eax], esi
.text:00403A91                 mov     esi, [esp+28h]
.text:00403A95                 mov     eax, ebx
.text:00403A97                 mov     ebx, [esp+24h]
.text:00403A9B                 add     esp, 2Ch
.text:00403A9E                 retn
.text:00403A9E ; ---------------------------------------------------------------------------
.text:00403A9F                 align 10h
.text:00403AA0
.text:00403AA0 loc_403AA0:                             ; CODE XREF: .text:00403A51↑j
.text:00403AA0                 mov     ebx, offset dword_407140
.text:00403AA5                 jmp     short loc_403A53
.text:00403AA5 ; ---------------------------------------------------------------------------
.text:00403AA7                 align 10h
.text:00403AB0                 push    ebp
.text:00403AB1                 push    edi
.text:00403AB2                 push    esi
.text:00403AB3                 push    ebx
.text:00403AB4                 sub     esp, 2Ch
.text:00403AB7                 mov     ebp, [esp+48h]
.text:00403ABB                 call    _errno
.text:00403AC0                 mov     edx, [eax]
.text:00403AC2                 test    ebp, ebp
.text:00403AC4                 mov     ebx, ebp
.text:00403AC6                 mov     [esp+28h], edx
.text:00403ACA                 jz      loc_403B80
.text:00403AD0
.text:00403AD0 loc_403AD0:                             ; CODE XREF: .text:00403B85↓j
.text:00403AD0                 call    _errno
.text:00403AD5                 mov     edi, [eax]
.text:00403AD7                 mov     esi, ebp
.text:00403AD9                 mov     [esp+14h], ebx
.text:00403ADD                 mov     ecx, [ebx]
.text:00403ADF                 mov     dword ptr [esp], 0
.text:00403AE6                 mov     edx, [esp+44h]
.text:00403AEA                 mov     dword ptr [esp+4], 0
.text:00403AF2                 mov     eax, [esp+40h]
.text:00403AF6                 mov     [esp+10h], ecx
.text:00403AFA                 mov     [esp+0Ch], edx
.text:00403AFE                 mov     [esp+8], eax
.text:00403B02                 call    sub_402EC0
.text:00403B07                 mov     ebx, eax
.text:00403B09                 call    _errno
.text:00403B0E                 mov     [eax], edi
.text:00403B10                 lea     edi, [ebx+1]
.text:00403B13                 mov     [esp], edi
.text:00403B16                 call    sub_404710
.text:00403B1B                 mov     [esp+24h], eax
.text:00403B1F                 test    ebp, ebp
.text:00403B21                 jz      short loc_403B72
.text:00403B23
.text:00403B23 loc_403B23:                             ; CODE XREF: .text:00403B77↓j
.text:00403B23                 call    _errno
.text:00403B28                 mov     ebp, [eax]
.text:00403B2A                 mov     [esp+14h], esi
.text:00403B2E                 mov     ecx, [esi]
.text:00403B30                 mov     [esp+4], edi
.text:00403B34                 mov     edx, [esp+44h]
.text:00403B38                 mov     esi, [esp+24h]
.text:00403B3C                 mov     [esp+10h], ecx
.text:00403B40                 mov     eax, [esp+40h]
.text:00403B44                 mov     [esp+0Ch], edx
.text:00403B48                 mov     [esp], esi
.text:00403B4B                 mov     [esp+8], eax
.text:00403B4F                 call    sub_402EC0
.text:00403B54                 call    _errno
.text:00403B59                 mov     [eax], ebp
.text:00403B5B                 call    _errno
.text:00403B60                 mov     ebx, [esp+28h]
.text:00403B64                 mov     [eax], ebx
.text:00403B66                 mov     eax, [esp+24h]
.text:00403B6A                 add     esp, 2Ch
.text:00403B6D                 pop     ebx
.text:00403B6E                 pop     esi
.text:00403B6F                 pop     edi
.text:00403B70                 pop     ebp
.text:00403B71                 retn
.text:00403B72 ; ---------------------------------------------------------------------------
.text:00403B72
.text:00403B72 loc_403B72:                             ; CODE XREF: .text:00403B21↑j
.text:00403B72                 mov     esi, offset dword_407140
.text:00403B77                 jmp     short loc_403B23
.text:00403B77 ; ---------------------------------------------------------------------------
.text:00403B79                 align 10h
.text:00403B80
.text:00403B80 loc_403B80:                             ; CODE XREF: .text:00403ACA↑j
.text:00403B80                 mov     ebx, offset dword_407140
.text:00403B85                 jmp     loc_403AD0
.text:00403B85 ; ---------------------------------------------------------------------------
.text:00403B8A                 align 10h
.text:00403B90                 sub     esp, 1Ch
.text:00403B93                 mov     edx, [esp+24h]
.text:00403B97                 mov     dword ptr [esp+0Ch], offset dword_407140
.text:00403B9F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403BA7                 mov     [esp+4], edx
.text:00403BAB                 mov     edx, [esp+20h]
.text:00403BAF                 mov     [esp], edx
.text:00403BB2                 call    sub_404000
.text:00403BB7                 add     esp, 1Ch
.text:00403BBA                 retn
.text:00403BBA ; ---------------------------------------------------------------------------
.text:00403BBB                 align 10h
.text:00403BC0                 sub     esp, 1Ch
.text:00403BC3                 mov     edx, [esp+20h]
.text:00403BC7                 mov     dword ptr [esp+0Ch], offset dword_407140
.text:00403BCF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403BD7                 mov     [esp+4], edx
.text:00403BDB                 mov     dword ptr [esp], 0
.text:00403BE2                 call    sub_404000
.text:00403BE7                 add     esp, 1Ch
.text:00403BEA                 retn
.text:00403BEA ; ---------------------------------------------------------------------------
.text:00403BEB                 align 10h
.text:00403BF0
.text:00403BF0 ; =============== S U B R O U T I N E =======================================
.text:00403BF0
.text:00403BF0
.text:00403BF0 ; int __cdecl sub_403BF0(int, int, char *)
.text:00403BF0 sub_403BF0      proc near               ; CODE XREF: .text:00402A7A↑p
.text:00403BF0                                         ; sub_402A90+1A↑p
.text:00403BF0
.text:00403BF0 var_BC          = dword ptr -0BCh
.text:00403BF0 var_B8          = dword ptr -0B8h
.text:00403BF0 var_B4          = dword ptr -0B4h
.text:00403BF0 var_B0          = dword ptr -0B0h
.text:00403BF0 var_AC          = dword ptr -0ACh
.text:00403BF0 var_A8          = dword ptr -0A8h
.text:00403BF0 var_A4          = dword ptr -0A4h
.text:00403BF0 var_A0          = dword ptr -0A0h
.text:00403BF0 var_9C          = dword ptr -9Ch
.text:00403BF0 var_98          = dword ptr -98h
.text:00403BF0 var_94          = dword ptr -94h
.text:00403BF0 var_90          = dword ptr -90h
.text:00403BF0 var_8C          = dword ptr -8Ch
.text:00403BF0 var_7C          = dword ptr -7Ch
.text:00403BF0 var_78          = dword ptr -78h
.text:00403BF0 var_74          = dword ptr -74h
.text:00403BF0 var_70          = dword ptr -70h
.text:00403BF0 var_6C          = dword ptr -6Ch
.text:00403BF0 var_68          = dword ptr -68h
.text:00403BF0 var_64          = dword ptr -64h
.text:00403BF0 var_60          = dword ptr -60h
.text:00403BF0 var_5C          = dword ptr -5Ch
.text:00403BF0 var_4C          = dword ptr -4Ch
.text:00403BF0 var_48          = dword ptr -48h
.text:00403BF0 var_44          = dword ptr -44h
.text:00403BF0 var_40          = dword ptr -40h
.text:00403BF0 var_3C          = dword ptr -3Ch
.text:00403BF0 var_38          = dword ptr -38h
.text:00403BF0 var_34          = dword ptr -34h
.text:00403BF0 var_30          = dword ptr -30h
.text:00403BF0 var_2C          = dword ptr -2Ch
.text:00403BF0 arg_0           = dword ptr  4
.text:00403BF0 arg_4           = dword ptr  8
.text:00403BF0 arg_8           = dword ptr  0Ch
.text:00403BF0
.text:00403BF0                 push    ebp
.text:00403BF1                 xor     eax, eax
.text:00403BF3                 mov     ecx, 8
.text:00403BF8                 push    edi
.text:00403BF9                 push    esi
.text:00403BFA                 push    ebx
.text:00403BFB                 sub     esp, 0ACh
.text:00403C01                 mov     ebp, [esp+0BCh+arg_4]
.text:00403C08                 cld
.text:00403C09                 lea     edi, [esp+0BCh+var_A8]
.text:00403C0D                 mov     [esp+0BCh+var_AC], ebp
.text:00403C11                 rep stosd
.text:00403C13                 mov     eax, [esp+0BCh+var_8C]
.text:00403C17                 mov     edi, [esp+0BCh+var_AC]
.text:00403C1B                 mov     esi, [esp+0BCh+var_A8]
.text:00403C1F                 mov     [esp+0BCh+var_5C], eax
.text:00403C23                 mov     ebp, [esp+0BCh+var_A4]
.text:00403C27                 mov     eax, [esp+0BCh+var_AC]
.text:00403C2B                 mov     [esp+0BCh+var_7C], edi
.text:00403C2F                 mov     ecx, [esp+0BCh+var_94]
.text:00403C33                 mov     edi, [esp+0BCh+var_A0]
.text:00403C37                 mov     [esp+0BCh+var_78], esi
.text:00403C3B                 mov     edx, [esp+0BCh+var_90]
.text:00403C3F                 mov     esi, [esp+0BCh+var_9C]
.text:00403C43                 mov     [esp+0BCh+var_4C], eax
.text:00403C47                 mov     ebx, [esp+0BCh+var_98]
.text:00403C4B                 mov     eax, [esp+0BCh+var_A8]
.text:00403C4F                 mov     [esp+0BCh+var_74], ebp
.text:00403C53                 mov     [esp+0BCh+var_70], edi
.text:00403C57                 mov     [esp+0BCh+var_6C], esi
.text:00403C5B                 mov     [esp+0BCh+var_68], ebx
.text:00403C5F                 mov     [esp+0BCh+var_64], ecx
.text:00403C63                 mov     [esp+0BCh+var_60], edx
.text:00403C67                 mov     [esp+0BCh+var_48], eax
.text:00403C6B                 mov     [esp+0BCh+var_44], ebp
.text:00403C6F                 mov     [esp+0BCh+var_40], edi
.text:00403C73                 mov     [esp+0BCh+var_3C], esi
.text:00403C7A                 mov     [esp+0BCh+var_38], ebx
.text:00403C81                 mov     ebx, [esp+0BCh+var_8C]
.text:00403C85                 mov     [esp+0BCh+var_30], edx
.text:00403C8C                 mov     edx, [esp+0BCh+arg_8]
.text:00403C93                 mov     [esp+0BCh+var_34], ecx
.text:00403C9A                 lea     ecx, [esp+0BCh+var_4C]
.text:00403C9E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00403CA2                 mov     edx, [esp+0BCh+arg_0]
.text:00403CA9                 mov     [esp+0BCh+var_2C], ebx
.text:00403CB0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00403CB4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00403CBC                 mov     [esp+0BCh+var_BC], edx ; int
.text:00403CBF                 call    sub_404000
.text:00403CC4                 add     esp, 0ACh
.text:00403CCA                 pop     ebx
.text:00403CCB                 pop     esi
.text:00403CCC                 pop     edi
.text:00403CCD                 pop     ebp
.text:00403CCE                 retn
.text:00403CCE sub_403BF0      endp
.text:00403CCE
.text:00403CCE ; ---------------------------------------------------------------------------
.text:00403CCF                 align 10h
.text:00403CD0                 push    ebp
.text:00403CD1                 xor     eax, eax
.text:00403CD3                 mov     ecx, 8
.text:00403CD8                 push    edi
.text:00403CD9                 push    esi
.text:00403CDA                 push    ebx
.text:00403CDB                 sub     esp, 0ACh
.text:00403CE1                 mov     edx, [esp+0C4h]
.text:00403CE8                 cld
.text:00403CE9                 lea     edi, [esp+14h]
.text:00403CED                 mov     [esp+10h], edx
.text:00403CF1                 rep stosd
.text:00403CF3                 mov     eax, [esp+30h]
.text:00403CF7                 mov     ebp, [esp+10h]
.text:00403CFB                 mov     edi, [esp+14h]
.text:00403CFF                 mov     [esp+60h], eax
.text:00403D03                 mov     esi, [esp+20h]
.text:00403D07                 mov     eax, [esp+10h]
.text:00403D0B                 mov     [esp+40h], ebp
.text:00403D0F                 mov     ecx, [esp+28h]
.text:00403D13                 mov     ebp, [esp+18h]
.text:00403D17                 mov     [esp+44h], edi
.text:00403D1B                 mov     edx, [esp+2Ch]
.text:00403D1F                 mov     edi, [esp+1Ch]
.text:00403D23                 mov     [esp+70h], eax
.text:00403D27                 mov     ebx, [esp+24h]
.text:00403D2B                 mov     eax, [esp+14h]
.text:00403D2F                 mov     [esp+48h], ebp
.text:00403D33                 mov     [esp+4Ch], edi
.text:00403D37                 mov     [esp+50h], esi
.text:00403D3B                 mov     [esp+54h], ebx
.text:00403D3F                 mov     [esp+58h], ecx
.text:00403D43                 mov     [esp+5Ch], edx
.text:00403D47                 mov     [esp+74h], eax
.text:00403D4B                 mov     [esp+78h], ebp
.text:00403D4F                 mov     [esp+7Ch], edi
.text:00403D53                 mov     [esp+80h], esi
.text:00403D5A                 mov     [esp+84h], ebx
.text:00403D61                 mov     esi, [esp+30h]
.text:00403D65                 lea     ebx, [esp+70h]
.text:00403D69                 mov     [esp+8Ch], edx
.text:00403D70                 mov     edx, [esp+0C8h]
.text:00403D77                 mov     [esp+88h], ecx
.text:00403D7E                 mov     ecx, [esp+0CCh]
.text:00403D85                 mov     [esp+4], edx
.text:00403D89                 mov     edx, [esp+0C0h]
.text:00403D90                 mov     [esp+90h], esi
.text:00403D97                 mov     [esp+0Ch], ebx
.text:00403D9B                 mov     [esp+8], ecx
.text:00403D9F                 mov     [esp], edx
.text:00403DA2                 call    sub_404000
.text:00403DA7                 add     esp, 0ACh
.text:00403DAD                 pop     ebx
.text:00403DAE                 pop     esi
.text:00403DAF                 pop     edi
.text:00403DB0                 pop     ebp
.text:00403DB1                 retn
.text:00403DB1 ; ---------------------------------------------------------------------------
.text:00403DB2                 align 10h
.text:00403DC0                 push    ebp
.text:00403DC1                 xor     eax, eax
.text:00403DC3                 mov     ecx, 8
.text:00403DC8                 push    edi
.text:00403DC9                 push    esi
.text:00403DCA                 push    ebx
.text:00403DCB                 sub     esp, 0ACh
.text:00403DD1                 mov     edi, [esp+0C0h]
.text:00403DD8                 cld
.text:00403DD9                 mov     [esp+10h], edi
.text:00403DDD                 lea     edi, [esp+14h]
.text:00403DE1                 rep stosd
.text:00403DE3                 mov     eax, [esp+30h]
.text:00403DE7                 mov     esi, [esp+10h]
.text:00403DEB                 mov     ebx, [esp+14h]
.text:00403DEF                 mov     [esp+60h], eax
.text:00403DF3                 mov     ebp, [esp+18h]
.text:00403DF7                 mov     eax, [esp+10h]
.text:00403DFB                 mov     [esp+40h], esi
.text:00403DFF                 mov     edi, [esp+1Ch]
.text:00403E03                 mov     esi, [esp+20h]
.text:00403E07                 mov     [esp+44h], ebx
.text:00403E0B                 mov     ecx, [esp+28h]
.text:00403E0F                 mov     edx, [esp+2Ch]
.text:00403E13                 mov     [esp+70h], eax
.text:00403E17                 mov     ebx, [esp+24h]
.text:00403E1B                 mov     eax, [esp+14h]
.text:00403E1F                 mov     [esp+48h], ebp
.text:00403E23                 mov     [esp+4Ch], edi
.text:00403E27                 mov     [esp+50h], esi
.text:00403E2B                 mov     [esp+54h], ebx
.text:00403E2F                 mov     [esp+58h], ecx
.text:00403E33                 mov     [esp+5Ch], edx
.text:00403E37                 mov     [esp+74h], eax
.text:00403E3B                 mov     [esp+78h], ebp
.text:00403E3F                 mov     [esp+7Ch], edi
.text:00403E43                 mov     [esp+80h], esi
.text:00403E4A                 mov     [esp+84h], ebx
.text:00403E51                 mov     [esp+8Ch], edx
.text:00403E58                 lea     edx, [esp+70h]
.text:00403E5C                 mov     [esp+88h], ecx
.text:00403E63                 mov     ecx, [esp+30h]
.text:00403E67                 mov     [esp+0Ch], edx
.text:00403E6B                 mov     edx, [esp+0C4h]
.text:00403E72                 mov     [esp+90h], ecx
.text:00403E79                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403E81                 mov     [esp+4], edx
.text:00403E85                 mov     dword ptr [esp], 0
.text:00403E8C                 call    sub_404000
.text:00403E91                 add     esp, 0ACh
.text:00403E97                 pop     ebx
.text:00403E98                 pop     esi
.text:00403E99                 pop     edi
.text:00403E9A                 pop     ebp
.text:00403E9B                 retn
.text:00403E9B ; ---------------------------------------------------------------------------
.text:00403E9C                 align 10h
.text:00403EA0                 push    edi
.text:00403EA1                 push    esi
.text:00403EA2                 push    ebx
.text:00403EA3                 sub     esp, 40h
.text:00403EA6                 mov     edx, ds:dword_40714C
.text:00403EAC                 mov     ebx, ds:dword_407140
.text:00403EB2                 mov     esi, ds:dword_407148
.text:00403EB8                 mov     edi, ds:dword_407144
.text:00403EBE                 mov     [esp+1Ch], edx
.text:00403EC2                 mov     ecx, ds:dword_407150
.text:00403EC8                 mov     edx, ds:dword_407160
.text:00403ECE                 mov     [esp+10h], ebx
.text:00403ED2                 mov     ebx, ds:dword_407154
.text:00403ED8                 mov     [esp+30h], edx
.text:00403EDC                 movzx   edx, byte ptr [esp+54h]
.text:00403EE1                 mov     [esp+18h], esi
.text:00403EE5                 mov     esi, ds:dword_40715C
.text:00403EEB                 mov     [esp+14h], edi
.text:00403EEF                 mov     edi, ds:dword_407158
.text:00403EF5                 mov     [esp+20h], ecx
.text:00403EF9                 mov     cl, dl
.text:00403EFB                 shr     cl, 5
.text:00403EFE                 mov     [esp+24h], ebx
.text:00403F02                 movzx   ebx, cl
.text:00403F05                 mov     [esp+2Ch], esi
.text:00403F09                 lea     esi, [esp+10h]
.text:00403F0D                 mov     [esp+28h], edi
.text:00403F11                 lea     edi, [esi+ebx*4]
.text:00403F14                 mov     ebx, edx
.text:00403F16                 mov     edx, [edi+4]
.text:00403F19                 and     ebx, 1Fh
.text:00403F1C                 mov     cl, bl
.text:00403F1E                 mov     eax, edx
.text:00403F20                 shr     eax, cl
.text:00403F22                 and     eax, 1
.text:00403F25                 xor     eax, 1
.text:00403F28                 shl     eax, cl
.text:00403F2A                 xor     edx, eax
.text:00403F2C                 mov     [edi+4], edx
.text:00403F2F                 mov     edx, [esp+50h]
.text:00403F33                 mov     [esp+0Ch], esi
.text:00403F37                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00403F3F                 mov     [esp+4], edx
.text:00403F43                 mov     dword ptr [esp], 0
.text:00403F4A                 call    sub_404000
.text:00403F4F                 add     esp, 40h
.text:00403F52                 pop     ebx
.text:00403F53                 pop     esi
.text:00403F54                 pop     edi
.text:00403F55                 retn
.text:00403F55 ; ---------------------------------------------------------------------------
.text:00403F56                 align 10h
.text:00403F60
.text:00403F60 ; =============== S U B R O U T I N E =======================================
.text:00403F60
.text:00403F60
.text:00403F60 ; int __cdecl sub_403F60(char *)
.text:00403F60 sub_403F60      proc near               ; CODE XREF: sub_402D50+64↑p
.text:00403F60
.text:00403F60 var_4C          = dword ptr -4Ch
.text:00403F60 var_48          = dword ptr -48h
.text:00403F60 var_44          = dword ptr -44h
.text:00403F60 var_40          = dword ptr -40h
.text:00403F60 var_3C          = dword ptr -3Ch
.text:00403F60 var_38          = dword ptr -38h
.text:00403F60 var_34          = dword ptr -34h
.text:00403F60 var_30          = dword ptr -30h
.text:00403F60 var_2C          = dword ptr -2Ch
.text:00403F60 var_28          = dword ptr -28h
.text:00403F60 var_24          = dword ptr -24h
.text:00403F60 var_20          = dword ptr -20h
.text:00403F60 var_1C          = dword ptr -1Ch
.text:00403F60 arg_0           = dword ptr  4
.text:00403F60
.text:00403F60                 sub     esp, 4Ch
.text:00403F63                 mov     ecx, ds:dword_407140
.text:00403F69                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00403F71                 mov     edx, ds:dword_407144
.text:00403F77                 mov     [esp+4Ch+var_4C], 0 ; int
.text:00403F7E                 mov     [esp+4Ch+var_3C], ecx
.text:00403F82                 mov     ecx, ds:dword_40714C
.text:00403F88                 mov     [esp+4Ch+var_38], edx
.text:00403F8C                 mov     edx, ds:dword_407148
.text:00403F92                 mov     [esp+4Ch+var_30], ecx
.text:00403F96                 mov     ecx, ds:dword_407150
.text:00403F9C                 mov     eax, edx
.text:00403F9E                 shr     eax, 1Ah
.text:00403FA1                 and     eax, 1
.text:00403FA4                 xor     eax, 1
.text:00403FA7                 mov     [esp+4Ch+var_2C], ecx
.text:00403FAB                 shl     eax, 1Ah
.text:00403FAE                 mov     ecx, ds:dword_407154
.text:00403FB4                 xor     edx, eax
.text:00403FB6                 mov     [esp+4Ch+var_34], edx
.text:00403FBA                 mov     edx, [esp+4Ch+arg_0]
.text:00403FBE                 mov     [esp+4Ch+var_28], ecx
.text:00403FC2                 mov     ecx, ds:dword_407158
.text:00403FC8                 mov     [esp+4Ch+var_48], edx ; char *
.text:00403FCC                 mov     [esp+4Ch+var_24], ecx
.text:00403FD0                 mov     ecx, ds:dword_40715C
.text:00403FD6                 mov     [esp+4Ch+var_20], ecx
.text:00403FDA                 mov     ecx, ds:dword_407160
.text:00403FE0                 mov     [esp+4Ch+var_1C], ecx
.text:00403FE4                 lea     ecx, [esp+4Ch+var_3C]
.text:00403FE8                 mov     [esp+4Ch+var_40], ecx ; int
.text:00403FEC                 call    sub_404000
.text:00403FF1                 add     esp, 4Ch
.text:00403FF4                 retn
.text:00403FF4 sub_403F60      endp
.text:00403FF4
.text:00403FF4 ; ---------------------------------------------------------------------------
.text:00403FF5                 align 10h
.text:00404000
.text:00404000 ; =============== S U B R O U T I N E =======================================
.text:00404000
.text:00404000
.text:00404000 ; int __cdecl sub_404000(int, char *, int, int)
.text:00404000 sub_404000      proc near               ; CODE XREF: .text:00403BB2↑p
.text:00404000                                         ; .text:00403BE2↑p ...
.text:00404000
.text:00404000 Block           = dword ptr -2Ch
.text:00404000 var_28          = dword ptr -28h
.text:00404000 Str             = dword ptr -24h
.text:00404000 var_20          = dword ptr -20h
.text:00404000 var_1C          = dword ptr -1Ch
.text:00404000 var_18          = dword ptr -18h
.text:00404000 var_14          = dword ptr -14h
.text:00404000 arg_0           = dword ptr  4
.text:00404000 arg_4           = dword ptr  8
.text:00404000 arg_8           = dword ptr  0Ch
.text:00404000 arg_C           = dword ptr  10h
.text:00404000
.text:00404000                 push    ebp
.text:00404001                 push    edi
.text:00404002                 push    esi
.text:00404003                 push    ebx
.text:00404004                 sub     esp, 1Ch
.text:00404007                 call    _errno
.text:0040400C                 mov     edx, [eax]
.text:0040400E                 mov     eax, [esp+2Ch+arg_0]
.text:00404012                 mov     [esp+2Ch+var_14], edx
.text:00404016                 test    eax, eax
.text:00404018                 js      loc_4041BA
.text:0040401E                 mov     eax, [esp+2Ch+arg_0]
.text:00404022                 cmp     dword_406030, eax
.text:00404028                 ja      short loc_4040A0
.text:0040402A                 mov     esi, eax
.text:0040402C                 inc     esi
.text:0040402D                 cmp     esi, 1FFFFFFFh
.text:00404033                 ja      loc_4041BF
.text:00404039                 mov     ebx, off_40603C
.text:0040403F                 cmp     ebx, offset dword_406034
.text:00404045                 jz      loc_404191
.text:0040404B
.text:0040404B loc_40404B:                             ; CODE XREF: sub_404000+1B5↓j
.text:0040404B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040404E                 lea     ecx, ds:0[esi*8]
.text:00404055                 mov     ebp, esi
.text:00404057                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040405B                 call    sub_4047A0
.text:00404060                 mov     off_40603C, eax
.text:00404065                 mov     ebx, dword_406030
.text:0040406B                 sub     ebp, ebx
.text:0040406D                 lea     edi, [eax+ebx*8]
.text:00404070                 lea     eax, ds:0[ebp*8]
.text:00404077                 cmp     eax, 7
.text:0040407A                 jbe     short loc_404090
.text:0040407C                 test    edi, 4
.text:00404082                 jz      short loc_404090
.text:00404084                 mov     dword ptr [edi], 0
.text:0040408A                 sub     eax, 4
.text:0040408D                 add     edi, 4
.text:00404090
.text:00404090 loc_404090:                             ; CODE XREF: sub_404000+7A↑j
.text:00404090                                         ; sub_404000+82↑j
.text:00404090                 cld
.text:00404091                 mov     ecx, eax
.text:00404093                 shr     ecx, 2
.text:00404096                 xor     eax, eax
.text:00404098                 rep stosd
.text:0040409A                 mov     dword_406030, esi
.text:004040A0
.text:004040A0 loc_4040A0:                             ; CODE XREF: sub_404000+28↑j
.text:004040A0                 mov     esi, off_40603C
.text:004040A6                 mov     eax, [esp+2Ch+arg_0]
.text:004040AA                 mov     ebp, [esi+eax*8]
.text:004040AD                 mov     edi, [esi+eax*8+4]
.text:004040B1                 mov     esi, [esp+2Ch+arg_C]
.text:004040B5                 test    esi, esi
.text:004040B7                 jz      loc_404187
.text:004040BD
.text:004040BD loc_4040BD:                             ; CODE XREF: sub_404000+18C↓j
.text:004040BD                 call    _errno
.text:004040C2                 mov     ebx, [eax]
.text:004040C4                 mov     [esp+2Ch+var_18], esi ; int
.text:004040C8                 mov     ecx, [esi]
.text:004040CA                 mov     [esp+2Ch+Block], edi ; int
.text:004040CD                 mov     edx, [esp+2Ch+arg_8]
.text:004040D1                 mov     [esp+2Ch+var_28], ebp ; int
.text:004040D5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004040D9                 mov     ecx, [esp+2Ch+arg_4]
.text:004040DD                 mov     [esp+2Ch+var_20], edx ; int
.text:004040E1                 mov     [esp+2Ch+Str], ecx ; Str
.text:004040E5                 call    sub_402EC0
.text:004040EA                 mov     esi, eax
.text:004040EC                 call    _errno
.text:004040F1                 mov     [eax], ebx
.text:004040F3                 cmp     ebp, esi
.text:004040F5                 ja      short loc_40416B
.text:004040F7                 lea     ebp, [esi+1]
.text:004040FA                 mov     ebx, off_40603C
.text:00404100                 cmp     edi, offset unk_407040
.text:00404106                 mov     esi, [esp+2Ch+arg_0]
.text:0040410A                 mov     [ebx+esi*8], ebp
.text:0040410D                 jz      short loc_40411D
.text:0040410F                 mov     [esp+2Ch+Block], edi ; Block
.text:00404112                 call    free
.text:00404117                 mov     ebx, off_40603C
.text:0040411D
.text:0040411D loc_40411D:                             ; CODE XREF: sub_404000+10D↑j
.text:0040411D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00404120                 call    sub_404710
.text:00404125                 mov     esi, [esp+2Ch+arg_C]
.text:00404129                 mov     edi, eax
.text:0040412B                 mov     eax, [esp+2Ch+arg_0]
.text:0040412F                 test    esi, esi
.text:00404131                 mov     [ebx+eax*8+4], edi
.text:00404135                 jz      short loc_404180
.text:00404137
.text:00404137 loc_404137:                             ; CODE XREF: sub_404000+185↓j
.text:00404137                 call    _errno
.text:0040413C                 mov     ebx, [eax]
.text:0040413E                 mov     [esp+2Ch+var_18], esi ; int
.text:00404142                 mov     ecx, [esi]
.text:00404144                 mov     [esp+2Ch+Block], edi ; int
.text:00404147                 mov     edx, [esp+2Ch+arg_8]
.text:0040414B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040414F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00404153                 mov     ecx, [esp+2Ch+arg_4]
.text:00404157                 mov     [esp+2Ch+var_20], edx ; int
.text:0040415B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040415F                 call    sub_402EC0
.text:00404164                 call    _errno
.text:00404169                 mov     [eax], ebx
.text:0040416B
.text:0040416B loc_40416B:                             ; CODE XREF: sub_404000+F5↑j
.text:0040416B                 call    _errno
.text:00404170                 mov     ebp, [esp+2Ch+var_14]
.text:00404174                 mov     [eax], ebp
.text:00404176                 add     esp, 1Ch
.text:00404179                 mov     eax, edi
.text:0040417B                 pop     ebx
.text:0040417C                 pop     esi
.text:0040417D                 pop     edi
.text:0040417E                 pop     ebp
.text:0040417F                 retn
.text:00404180 ; ---------------------------------------------------------------------------
.text:00404180
.text:00404180 loc_404180:                             ; CODE XREF: sub_404000+135↑j
.text:00404180                 mov     esi, offset dword_407140
.text:00404185                 jmp     short loc_404137
.text:00404187 ; ---------------------------------------------------------------------------
.text:00404187
.text:00404187 loc_404187:                             ; CODE XREF: sub_404000+B7↑j
.text:00404187                 mov     esi, offset dword_407140
.text:0040418C                 jmp     loc_4040BD
.text:00404191 ; ---------------------------------------------------------------------------
.text:00404191
.text:00404191 loc_404191:                             ; CODE XREF: sub_404000+45↑j
.text:00404191                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00404198                 call    sub_404710
.text:0040419D                 mov     off_40603C, eax
.text:004041A2                 mov     edi, dword_406034
.text:004041A8                 mov     ebx, eax
.text:004041AA                 mov     ecx, off_406038
.text:004041B0                 mov     [eax], edi
.text:004041B2                 mov     [eax+4], ecx
.text:004041B5                 jmp     loc_40404B
.text:004041BA ; ---------------------------------------------------------------------------
.text:004041BA
.text:004041BA loc_4041BA:                             ; CODE XREF: sub_404000+18↑j
.text:004041BA                 call    abort
.text:004041BF ; ---------------------------------------------------------------------------
.text:004041BF
.text:004041BF loc_4041BF:                             ; CODE XREF: sub_404000+33↑j
.text:004041BF                 call    sub_4049C0
.text:004041BF sub_404000      endp
.text:004041BF
.text:004041BF ; ---------------------------------------------------------------------------
.text:004041C4                 align 10h
.text:004041D0 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:004041D0                                         ; DATA XREF: .data:Buffer↓o
.text:00404202 ; const char Format[12]
.text:00404202 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_4044C0+50↓o
.text:0040420E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040421E                 db 12h dup(90h)
.text:00404230
.text:00404230 ; =============== S U B R O U T I N E =======================================
.text:00404230
.text:00404230
.text:00404230 sub_404230      proc near               ; DATA XREF: sub_4044C0+100↓o
.text:00404230                 push    esp
.text:00404231                 push    69207369h
.text:00404236                 jnb     short loc_404258
.text:00404238                 db      66h
.text:00404238                 jb      short near ptr 42A0h
.text:0040423B                 and     gs:[ebx+6Fh], dh
.text:0040423F                 db      66h
.text:0040423F                 jz      short near ptr 42B9h
.text:00404242                 popa
.text:00404243                 jb      short loc_4042AA
.text:00404245                 cmp     esp, [eax]
.text:00404247                 jnb     short near ptr loc_4042AC+2
.text:00404249                 and     gs:[eax+ebp*2+65h], dh
.text:0040424E                 and     [ebx+6Fh], dh
.text:00404251                 jnz     short loc_4042C5
.text:00404253                 arpl    [ebp+20h], sp
.text:00404256                 outsw
.text:00404258
.text:00404258 loc_404258:                             ; CODE XREF: sub_404230+6↑j
.text:00404258                 jb      short loc_40427A
.text:0040425A                 arpl    [edi+70h], bp
.text:0040425D                 jns     short loc_4042C8
.text:0040425F                 outsb
.text:00404260                 and     [bp+di+6Fh], ah
.text:00404264                 outsb
.text:00404265                 imul    esi, fs:[ecx+ebp*2+6Fh], 202E736Eh
.text:0040426E                 and     [eax+ebp*2+65h], dl
.text:00404272                 jb      short near ptr loc_4042D8+1
.text:00404274                 and     [ecx+73h], ch
.text:00404277                 and     [esi+4Fh], cl
.text:0040427A
.text:0040427A loc_40427A:                             ; CODE XREF: sub_404230:loc_404258↑j
.text:0040427A                 or      dh, [edi+61h]
.text:0040427D                 jb      short loc_4042F1
.text:0040427F                 popa
.text:00404280                 outsb
.text:00404281                 jz      short loc_4042FC
.text:00404283                 cmp     esp, [eax]
.text:00404285                 outsb
.text:00404286                 outsd
.text:00404287                 jz      short loc_4042A9
.text:00404289                 db      65h
.text:00404289                 jbe     short loc_4042F1
.text:0040428C                 outsb
.text:0040428D                 and     [esi+6Fh], ah
.text:00404290                 jb      short near ptr loc_4042B0+2
.text:00404292                 dec     ebp
.text:00404293                 inc     ebp
.text:00404294                 push    edx
.text:00404295                 inc     ebx
.text:00404296                 dec     eax
.text:00404297                 inc     ecx
.text:00404298                 dec     esi
.text:00404299                 push    esp
.text:0040429A                 inc     ecx
.text:0040429B                 inc     edx
.text:0040429C                 dec     ecx
.text:0040429D                 dec     esp
.text:0040429E                 dec     ecx
.text:0040429F                 push    esp
.text:004042A0                 pop     ecx
.text:004042A1                 and     [edi+72h], ch
.text:004042A4                 and     [esi+49h], al
.text:004042A7                 push    esp
.text:004042A8                 dec     esi
.text:004042A9
.text:004042A9 loc_4042A9:                             ; CODE XREF: sub_404230+57↑j
.text:004042A9                 inc     ebp
.text:004042AA
.text:004042AA loc_4042AA:                             ; CODE XREF: sub_404230+13↑j
.text:004042AA                 push    ebx
.text:004042AB                 push    ebx
.text:004042AC
.text:004042AC loc_4042AC:                             ; CODE XREF: sub_404230+17↑j
.text:004042AC                 and     [esi+4Fh], al
.text:004042AF                 push    edx
.text:004042B0
.text:004042B0 loc_4042B0:                             ; CODE XREF: sub_404230+60↑j
.text:004042B0                 and     [ecx+20h], al
.text:004042B3                 push    eax
.text:004042B4                 inc     ecx
.text:004042B5                 push    edx
.text:004042B6                 push    esp
.text:004042B7                 dec     ecx
.text:004042B8                 inc     ebx
.text:004042B9                 push    ebp
.text:004042BA                 dec     esp
.text:004042BB                 inc     ecx
.text:004042BC                 push    edx
.text:004042BD                 and     [eax+55h], dl
.text:004042C0                 push    edx
.text:004042C1                 push    eax
.text:004042C2                 dec     edi
.text:004042C3                 push    ebx
.text:004042C4                 inc     ebp
.text:004042C5
.text:004042C5 loc_4042C5:                             ; CODE XREF: sub_404230+21↑j
.text:004042C5                 or      al, cs:[eax]
.text:004042C8
.text:004042C8 loc_4042C8:                             ; CODE XREF: sub_404230+2D↑j
.text:004042C8                                         ; DATA XREF: sub_4044C0:loc_404601↓o
.text:004042C8                 push    edi
.text:004042C9                 jb      short near ptr loc_404333+1
.text:004042CB                 jz      short near ptr loc_404340+1
.text:004042CD                 outs    dx, byte ptr gs:[esi]
.text:004042CF                 and     [edx+79h], ah
.text:004042D2                 and     ds:6E612073h, ah
.text:004042D8
.text:004042D8 loc_4042D8:                             ; CODE XREF: sub_404230+42↑j
.text:004042D8                 and     fs:0A2E73h, ah
.text:004042DF
.text:004042DF loc_4042DF:                             ; DATA XREF: sub_4044C0:loc_40460D↓o
.text:004042DF                 push    edi
.text:004042E0                 jb      short near ptr loc_40434A+1
.text:004042E2                 jz      short loc_404358
.text:004042E4                 outs    dx, byte ptr gs:[esi]
.text:004042E6                 and     [edx+79h], ah
.text:004042E9                 and     ds:25202C73h, ah
.text:004042EF                 jnb     short near ptr loc_40431A+3
.text:004042F1
.text:004042F1 loc_4042F1:                             ; CODE XREF: sub_404230+4D↑j
.text:004042F1                                         ; sub_404230+59↑j
.text:004042F1                 and     [ecx+6Eh], ah
.text:004042F4                 and     fs:0A2E73h, ah
.text:004042FB                 nop
.text:004042FC
.text:004042FC loc_4042FC:                             ; CODE XREF: sub_404230+51↑j
.text:004042FC                 nop
.text:004042FD                 nop
.text:004042FE                 nop
.text:004042FF                 nop
.text:00404300                 nop
.text:00404301                 nop
.text:00404302                 nop
.text:00404303                 nop
.text:00404304                 nop
.text:00404305                 nop
.text:00404306                 nop
.text:00404307                 nop
.text:00404308                 nop
.text:00404309                 nop
.text:0040430A                 nop
.text:0040430B                 nop
.text:0040430C                 nop
.text:0040430D                 nop
.text:0040430E                 nop
.text:0040430F                 nop
.text:0040430F sub_404230      endp ; sp-analysis failed
.text:0040430F
.text:00404310
.text:00404310 ; =============== S U B R O U T I N E =======================================
.text:00404310
.text:00404310
.text:00404310 sub_404310      proc near               ; DATA XREF: sub_4044C0:loc_404619↓o
.text:00404310                 push    edi
.text:00404311                 jb      short near ptr loc_40437A+2
.text:00404313                 jz      short near ptr loc_404388+1
.text:00404315                 outs    dx, byte ptr gs:[esi]
.text:00404317                 and     [edx+79h], ah
.text:0040431A
.text:0040431A loc_40431A:                             ; CODE XREF: sub_404230+BF↑j
.text:0040431A                 and     ds:25202C73h, ah
.text:00404320                 jnb     short near ptr loc_40434D+1
.text:00404322                 and     ds:610A2C73h, ah
.text:00404328                 outsb
.text:00404329                 and     fs:0A2E73h, ah
.text:00404330
.text:00404330 loc_404330:                             ; DATA XREF: sub_4044C0:loc_404625↓o
.text:00404330                 push    edi
.text:00404331                 jb      short loc_40439C
.text:00404333
.text:00404333 loc_404333:                             ; CODE XREF: sub_404230+99↑j
.text:00404333                 jz      short loc_4043A9
.text:00404335                 outs    dx, byte ptr gs:[esi]
.text:00404337                 and     [edx+79h], ah
.text:0040433A                 and     ds:25202C73h, ah
.text:00404340
.text:00404340 loc_404340:                             ; CODE XREF: sub_404230+9B↑j
.text:00404340                 jnb     short loc_40436E
.text:00404342                 and     ds:250A2C73h, ah
.text:00404348                 jnb     short near ptr loc_404375+1
.text:0040434A
.text:0040434A loc_40434A:                             ; CODE XREF: sub_404230+B0↑j
.text:0040434A                 and     [ecx+6Eh], ah
.text:0040434D
.text:0040434D loc_40434D:                             ; CODE XREF: sub_404310+10↑j
.text:0040434D                 and     fs:0A2E73h, ah
.text:00404354                 nop
.text:00404355                 nop
.text:00404356                 nop
.text:00404357                 nop
.text:00404358
.text:00404358 loc_404358:                             ; CODE XREF: sub_404230+B2↑j
.text:00404358                 nop
.text:00404359                 nop
.text:0040435A                 nop
.text:0040435B                 nop
.text:0040435C                 nop
.text:0040435D                 nop
.text:0040435E                 nop
.text:0040435F                 nop
.text:00404360                 nop
.text:00404361                 nop
.text:00404362                 nop
.text:00404363                 nop
.text:00404364                 nop
.text:00404365                 nop
.text:00404366                 nop
.text:00404367                 nop
.text:00404368                 nop
.text:00404369                 nop
.text:0040436A                 nop
.text:0040436B                 nop
.text:0040436C                 nop
.text:0040436D                 nop
.text:0040436E
.text:0040436E loc_40436E:                             ; CODE XREF: sub_404310:loc_404340↑j
.text:0040436E                 nop
.text:0040436F                 nop
.text:0040436F sub_404310      endp ; sp-analysis failed
.text:0040436F
.text:00404370
.text:00404370 ; =============== S U B R O U T I N E =======================================
.text:00404370
.text:00404370
.text:00404370 sub_404370      proc near               ; DATA XREF: sub_4044C0:loc_404631↓o
.text:00404370                 push    edi
.text:00404371                 jb      short loc_4043DC
.text:00404373                 jz      short loc_4043E9
.text:00404375
.text:00404375 loc_404375:                             ; CODE XREF: sub_404310+38↑j
.text:00404375                 outs    dx, byte ptr gs:[esi]
.text:00404377                 and     [edx+79h], ah
.text:0040437A
.text:0040437A loc_40437A:                             ; CODE XREF: sub_404310+1↑j
.text:0040437A                 and     ds:25202C73h, ah
.text:00404380                 jnb     short loc_4043AE
.text:00404382                 and     ds:250A2C73h, ah
.text:00404388
.text:00404388 loc_404388:                             ; CODE XREF: sub_404310+3↑j
.text:00404388                 jnb     short near ptr loc_4043B5+1
.text:0040438A                 and     ds:61202C73h, ah
.text:00404390                 outsb
.text:00404391                 and     fs:0A2E73h, ah
.text:00404398                 nop
.text:00404399                 nop
.text:0040439A                 nop
.text:0040439B                 nop
.text:0040439C
.text:0040439C loc_40439C:                             ; CODE XREF: sub_404310+21↑j
.text:0040439C                 nop
.text:0040439D                 nop
.text:0040439E                 nop
.text:0040439F                 nop
.text:004043A0                 nop
.text:004043A1                 nop
.text:004043A2                 nop
.text:004043A3                 nop
.text:004043A4                 nop
.text:004043A5                 nop
.text:004043A6                 nop
.text:004043A7                 nop
.text:004043A8                 nop
.text:004043A9
.text:004043A9 loc_4043A9:                             ; CODE XREF: sub_404310:loc_404333↑j
.text:004043A9                 nop
.text:004043AA                 nop
.text:004043AB                 nop
.text:004043AC                 nop
.text:004043AD                 nop
.text:004043AE
.text:004043AE loc_4043AE:                             ; CODE XREF: sub_404370+10↑j
.text:004043AE                 nop
.text:004043AF                 nop
.text:004043AF sub_404370      endp ; sp-analysis failed
.text:004043AF
.text:004043B0
.text:004043B0 ; =============== S U B R O U T I N E =======================================
.text:004043B0
.text:004043B0
.text:004043B0 sub_4043B0      proc near               ; DATA XREF: sub_4044C0:loc_40463D↓o
.text:004043B0                 push    edi
.text:004043B1                 jb      short near ptr loc_404419+3
.text:004043B3                 jz      short loc_404429
.text:004043B5
.text:004043B5 loc_4043B5:                             ; CODE XREF: sub_404370:loc_404388↑j
.text:004043B5                 outs    dx, byte ptr gs:[esi]
.text:004043B7                 and     [edx+79h], ah
.text:004043BA                 and     ds:25202C73h, ah
.text:004043C0                 jnb     short loc_4043EE
.text:004043C2                 and     ds:250A2C73h, ah
.text:004043C8                 jnb     short near ptr loc_4043F5+1
.text:004043CA                 and     ds:25202C73h, ah
.text:004043D0                 jnb     short near ptr loc_4043FA+4
.text:004043D2                 and     [ecx+6Eh], ah
.text:004043D5                 and     fs:0A2E73h, ah
.text:004043DC
.text:004043DC loc_4043DC:                             ; CODE XREF: sub_404370+1↑j
.text:004043DC                 nop
.text:004043DD                 nop
.text:004043DE                 nop
.text:004043DF                 nop
.text:004043E0                 nop
.text:004043E1                 nop
.text:004043E2                 nop
.text:004043E3                 nop
.text:004043E4                 nop
.text:004043E5                 nop
.text:004043E6                 nop
.text:004043E7                 nop
.text:004043E8                 nop
.text:004043E9
.text:004043E9 loc_4043E9:                             ; CODE XREF: sub_404370+3↑j
.text:004043E9                 nop
.text:004043EA                 nop
.text:004043EB                 nop
.text:004043EC                 nop
.text:004043ED                 nop
.text:004043EE
.text:004043EE loc_4043EE:                             ; CODE XREF: sub_4043B0+10↑j
.text:004043EE                 nop
.text:004043EF                 nop
.text:004043EF sub_4043B0      endp ; sp-analysis failed
.text:004043EF
.text:004043F0
.text:004043F0 ; =============== S U B R O U T I N E =======================================
.text:004043F0
.text:004043F0
.text:004043F0 sub_4043F0      proc near               ; DATA XREF: sub_4044C0:loc_404649↓o
.text:004043F0                 push    edi
.text:004043F1                 jb      short near ptr loc_40445A+2
.text:004043F3                 jz      short near ptr loc_404464+5
.text:004043F5
.text:004043F5 loc_4043F5:                             ; CODE XREF: sub_4043B0+18↑j
.text:004043F5                 outs    dx, byte ptr gs:[esi]
.text:004043F7                 and     [edx+79h], ah
.text:004043FA
.text:004043FA loc_4043FA:                             ; CODE XREF: sub_4043B0+20↑j
.text:004043FA                 and     ds:25202C73h, ah
.text:00404400                 jnb     short loc_40442E
.text:00404402                 and     ds:250A2C73h, ah
.text:00404408                 jnb     short near ptr loc_404435+1
.text:0040440A                 and     ds:25202C73h, ah
.text:00404410                 jnb     short near ptr loc_40443A+4
.text:00404412                 and     ds:610A2C73h, ah
.text:00404418                 outsb
.text:00404419
.text:00404419 loc_404419:                             ; CODE XREF: sub_4043B0+1↑j
.text:00404419                 and     fs:0A2E73h, ah
.text:00404420                 nop
.text:00404421                 nop
.text:00404422                 nop
.text:00404423                 nop
.text:00404424                 nop
.text:00404425                 nop
.text:00404426                 nop
.text:00404427                 nop
.text:00404428                 nop
.text:00404429
.text:00404429 loc_404429:                             ; CODE XREF: sub_4043B0+3↑j
.text:00404429                 nop
.text:0040442A                 nop
.text:0040442B                 nop
.text:0040442C                 nop
.text:0040442D                 nop
.text:0040442E
.text:0040442E loc_40442E:                             ; CODE XREF: sub_4043F0+10↑j
.text:0040442E                 nop
.text:0040442F                 nop
.text:0040442F sub_4043F0      endp ; sp-analysis failed
.text:0040442F
.text:00404430
.text:00404430 ; =============== S U B R O U T I N E =======================================
.text:00404430
.text:00404430
.text:00404430 sub_404430      proc near               ; DATA XREF: sub_4044C0:loc_404655↓o
.text:00404430                 push    edi
.text:00404431                 jb      short near ptr loc_40449A+2
.text:00404433                 jz      short near ptr loc_4044A5+4
.text:00404435
.text:00404435 loc_404435:                             ; CODE XREF: sub_4043F0+18↑j
.text:00404435                 outs    dx, byte ptr gs:[esi]
.text:00404437                 and     [edx+79h], ah
.text:0040443A
.text:0040443A loc_40443A:                             ; CODE XREF: sub_4043F0+20↑j
.text:0040443A                 and     ds:25202C73h, ah
.text:00404440                 jnb     short near ptr loc_40446A+4
.text:00404442                 and     ds:250A2C73h, ah
.text:00404448                 jnb     short near ptr loc_404475+1
.text:0040444A                 and     ds:25202C73h, ah
.text:00404450                 jnb     short near ptr loc_40447A+4
.text:00404452                 and     ds:250A2C73h, ah
.text:00404458                 jnb     short near ptr loc_404482+4
.text:0040445A
.text:0040445A loc_40445A:                             ; CODE XREF: sub_4043F0+1↑j
.text:0040445A                 and     [ecx+6Eh], ah
.text:0040445D                 and     fs:0A2E73h, ah
.text:00404464
.text:00404464 loc_404464:                             ; CODE XREF: sub_4043F0+3↑j
.text:00404464                 lea     esi, [esi+0]
.text:0040446A
.text:0040446A loc_40446A:                             ; CODE XREF: sub_404430+10↑j
.text:0040446A                 lea     edi, [edi+0]
.text:00404470
.text:00404470 loc_404470:                             ; DATA XREF: sub_4044C0:def_40452D↓o
.text:00404470                 push    edi
.text:00404471                 jb      short near ptr loc_4044DB+1
.text:00404473                 jz      short near ptr loc_4044E8+1
.text:00404475
.text:00404475 loc_404475:                             ; CODE XREF: sub_404430+18↑j
.text:00404475                 outs    dx, byte ptr gs:[esi]
.text:00404477                 and     [edx+79h], ah
.text:0040447A
.text:0040447A loc_40447A:                             ; CODE XREF: sub_404430+20↑j
.text:0040447A                 and     ds:25202C73h, ah
.text:00404480                 jnb     short near ptr loc_4044AC+2
.text:00404482
.text:00404482 loc_404482:                             ; CODE XREF: sub_404430+28↑j
.text:00404482                 and     ds:250A2C73h, ah
.text:00404488                 jnb     short near ptr loc_4044B3+3
.text:0040448A                 and     ds:25202C73h, ah
.text:00404490                 jnb     short near ptr loc_4044B9+5
.text:00404492                 and     ds:250A2C73h, ah
.text:00404498                 jnb     short near ptr loc_4044C4+2
.text:0040449A
.text:0040449A loc_40449A:                             ; CODE XREF: sub_404430+1↑j
.text:0040449A                 and     ds:61202C73h, ah
.text:004044A0                 outsb
.text:004044A1                 and     fs:[edi+74h], ch
.text:004044A5
.text:004044A5 loc_4044A5:                             ; CODE XREF: sub_404430+3↑j
.text:004044A5                 push    2E737265h
.text:004044AA                 or      al, [eax]
.text:004044AC
.text:004044AC loc_4044AC:                             ; CODE XREF: sub_404430+50↑j
.text:004044AC                                         ; DATA XREF: sub_4044C0+1B5↓o
.text:004044AC                 and     eax, 73252073h
.text:004044B1                 or      al, [eax]
.text:004044B3
.text:004044B3 loc_4044B3:                             ; CODE XREF: sub_404430+58↑j
.text:004044B3                 lea     esi, [esi+0]
.text:004044B9
.text:004044B9 loc_4044B9:                             ; CODE XREF: sub_404430+60↑j
.text:004044B9                 lea     edi, [edi+0]
.text:004044B9 sub_404430      endp ; sp-analysis failed
.text:004044B9
.text:004044C0
.text:004044C0 ; =============== S U B R O U T I N E =======================================
.text:004044C0
.text:004044C0
.text:004044C0 ; int __cdecl sub_4044C0(FILE *, FILE *, int, int, va_list)
.text:004044C0 sub_4044C0      proc near               ; CODE XREF: sub_402C60+A5↑p
.text:004044C0                                         ; .text:004046BA↓p
.text:004044C0
.text:004044C0 Stream          = dword ptr -2Ch
.text:004044C0 Format          = dword ptr -28h
.text:004044C0 ArgList         = dword ptr -24h
.text:004044C0 var_20          = dword ptr -20h
.text:004044C0 var_1C          = dword ptr -1Ch
.text:004044C0 var_14          = dword ptr -14h
.text:004044C0 arg_0           = dword ptr  4
.text:004044C0 arg_4           = dword ptr  8
.text:004044C0 arg_8           = dword ptr  0Ch
.text:004044C0 arg_C           = dword ptr  10h
.text:004044C0 arg_10          = dword ptr  14h
.text:004044C0
.text:004044C0                 push    ebp
.text:004044C1                 push    edi
.text:004044C2                 push    esi
.text:004044C3                 push    ebx
.text:004044C4
.text:004044C4 loc_4044C4:                             ; CODE XREF: sub_404430+68↑j
.text:004044C4                 sub     esp, 1Ch
.text:004044C7                 xor     ebx, ebx
.text:004044C9                 mov     edi, [esp+2Ch+arg_10]
.text:004044CD                 mov     edx, [esp+2Ch+arg_8]
.text:004044D1                 mov     esi, [esp+2Ch+arg_0]
.text:004044D5                 mov     eax, [edi]
.text:004044D7                 mov     ecx, [esp+2Ch+arg_4]
.text:004044DB
.text:004044DB loc_4044DB:                             ; CODE XREF: sub_404430+41↑j
.text:004044DB                 mov     [esp+2Ch+var_14], edx
.text:004044DF                 mov     ebp, [esp+2Ch+arg_C]
.text:004044E3                 lea     edx, [edi+4]
.text:004044E6                 test    eax, eax
.text:004044E8
.text:004044E8 loc_4044E8:                             ; CODE XREF: sub_404430+43↑j
.text:004044E8                 jz      short loc_4044FC
.text:004044EA                 lea     esi, [esi+0]
.text:004044F0
.text:004044F0 loc_4044F0:                             ; CODE XREF: sub_4044C0+3A↓j
.text:004044F0                 mov     eax, edx
.text:004044F2                 inc     ebx
.text:004044F3                 mov     eax, [eax]
.text:004044F5                 add     edx, 4
.text:004044F8                 test    eax, eax
.text:004044FA                 jnz     short loc_4044F0
.text:004044FC
.text:004044FC loc_4044FC:                             ; CODE XREF: sub_4044C0:loc_4044E8↑j
.text:004044FC                 test    ecx, ecx
.text:004044FE                 jz      loc_40466D
.text:00404504                 mov     [esp+2Ch+var_1C], ebp
.text:00404508                 mov     edx, [esp+2Ch+var_14]
.text:0040450C                 mov     [esp+2Ch+ArgList], ecx
.text:00404510                 mov     [esp+2Ch+Format], offset Format ; Format
.text:00404518                 mov     [esp+2Ch+var_20], edx
.text:0040451C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040451F                 call    fprintf
.text:00404524
.text:00404524 loc_404524:                             ; CODE XREF: sub_4044C0+1C9↓j
.text:00404524                 cmp     ebx, 9          ; switch 10 cases
.text:00404527                 ja      def_40452D      ; jumptable 0040452D default case
.text:0040452D                 jmp     ds:jpt_40452D[ebx*4] ; switch jump
.text:0040452D ; ---------------------------------------------------------------------------
.text:00404534 jpt_40452D      dd offset loc_40455C    ; DATA XREF: sub_4044C0+6D↑r
.text:00404534                 dd offset loc_404561    ; jump table for switch statement
.text:00404534                 dd offset loc_404601
.text:00404534                 dd offset loc_40460D
.text:00404534                 dd offset loc_404619
.text:00404534                 dd offset loc_404625
.text:00404534                 dd offset loc_404631
.text:00404534                 dd offset loc_40463D
.text:00404534                 dd offset loc_404649
.text:00404534                 dd offset loc_404655
.text:0040455C ; ---------------------------------------------------------------------------
.text:0040455C
.text:0040455C loc_40455C:                             ; CODE XREF: sub_4044C0+6D↑j
.text:0040455C                                         ; DATA XREF: sub_4044C0:jpt_40452D↑o
.text:0040455C                 call    abort           ; jumptable 0040452D case 0
.text:00404561 ; ---------------------------------------------------------------------------
.text:00404561
.text:00404561 loc_404561:                             ; CODE XREF: sub_4044C0+6D↑j
.text:00404561                                         ; DATA XREF: sub_4044C0:jpt_40452D↑o
.text:00404561                 mov     [esp+2Ch+Stream], 40420Eh ; jumptable 0040452D case 1
.text:00404568                 nop
.text:00404569                 lea     esi, [esi+0]
.text:00404570
.text:00404570 loc_404570:                             ; CODE XREF: sub_4044C0+148↓j
.text:00404570                                         ; sub_4044C0+154↓j ...
.text:00404570                 call    ds:libintl_gettext
.text:00404576                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040457A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040457D                 mov     [esp+2Ch+Format], eax ; Format
.text:00404581                 call    vfprintf
.text:00404586                 mov     ebx, [esi+4]
.text:00404589                 dec     ebx
.text:0040458A                 test    ebx, ebx
.text:0040458C                 mov     [esi+4], ebx
.text:0040458F                 js      short loc_4045EF
.text:00404591                 mov     edi, [esi]
.text:00404593                 mov     byte ptr [edi], 0Ah
.text:00404596                 inc     dword ptr [esi]
.text:00404598
.text:00404598 loc_404598:                             ; CODE XREF: sub_4044C0+13F↓j
.text:00404598                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040459C                 mov     edx, Buffer
.text:004045A2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:004045A5                 call    fputs
.text:004045AA                 mov     ebp, [esi+4]
.text:004045AD                 dec     ebp
.text:004045AE                 test    ebp, ebp
.text:004045B0                 mov     [esi+4], ebp
.text:004045B3                 js      short loc_4045DD
.text:004045B5                 mov     ecx, [esi]
.text:004045B7                 mov     byte ptr [ecx], 0Ah
.text:004045BA                 inc     dword ptr [esi]
.text:004045BC
.text:004045BC loc_4045BC:                             ; CODE XREF: sub_4044C0+12D↓j
.text:004045BC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:004045C0                 mov     [esp+2Ch+Stream], offset sub_404230
.text:004045C7                 call    ds:libintl_gettext
.text:004045CD                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:004045D1                 add     esp, 1Ch
.text:004045D4                 pop     ebx
.text:004045D5                 pop     esi
.text:004045D6                 pop     edi
.text:004045D7                 pop     ebp
.text:004045D8                 jmp     fputs
.text:004045DD ; ---------------------------------------------------------------------------
.text:004045DD
.text:004045DD loc_4045DD:                             ; CODE XREF: sub_4044C0+F3↑j
.text:004045DD                 mov     [esp+2Ch+Format], esi ; File
.text:004045E1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004045E8                 call    _flsbuf
.text:004045ED                 jmp     short loc_4045BC
.text:004045EF ; ---------------------------------------------------------------------------
.text:004045EF
.text:004045EF loc_4045EF:                             ; CODE XREF: sub_4044C0+CF↑j
.text:004045EF                 mov     [esp+2Ch+Format], esi ; File
.text:004045F3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004045FA                 call    _flsbuf
.text:004045FF                 jmp     short loc_404598
.text:00404601 ; ---------------------------------------------------------------------------
.text:00404601
.text:00404601 loc_404601:                             ; CODE XREF: sub_4044C0+6D↑j
.text:00404601                                         ; DATA XREF: sub_4044C0:jpt_40452D↑o
.text:00404601                 mov     [esp+2Ch+Stream], offset loc_4042C8 ; jumptable 0040452D case 2
.text:00404608                 jmp     loc_404570
.text:0040460D ; ---------------------------------------------------------------------------
.text:0040460D
.text:0040460D loc_40460D:                             ; CODE XREF: sub_4044C0+6D↑j
.text:0040460D                                         ; DATA XREF: sub_4044C0:jpt_40452D↑o
.text:0040460D                 mov     [esp+2Ch+Stream], offset loc_4042DF ; jumptable 0040452D case 3
.text:00404614                 jmp     loc_404570
.text:00404619 ; ---------------------------------------------------------------------------
.text:00404619
.text:00404619 loc_404619:                             ; CODE XREF: sub_4044C0+6D↑j
.text:00404619                                         ; DATA XREF: sub_4044C0:jpt_40452D↑o
.text:00404619                 mov     [esp+2Ch+Stream], offset sub_404310 ; jumptable 0040452D case 4
.text:00404620                 jmp     loc_404570
.text:00404625 ; ---------------------------------------------------------------------------
.text:00404625
.text:00404625 loc_404625:                             ; CODE XREF: sub_4044C0+6D↑j
.text:00404625                                         ; DATA XREF: sub_4044C0:jpt_40452D↑o
.text:00404625                 mov     [esp+2Ch+Stream], offset loc_404330 ; jumptable 0040452D case 5
.text:0040462C                 jmp     loc_404570
.text:00404631 ; ---------------------------------------------------------------------------
.text:00404631
.text:00404631 loc_404631:                             ; CODE XREF: sub_4044C0+6D↑j
.text:00404631                                         ; DATA XREF: sub_4044C0:jpt_40452D↑o
.text:00404631                 mov     [esp+2Ch+Stream], offset sub_404370 ; jumptable 0040452D case 6
.text:00404638                 jmp     loc_404570
.text:0040463D ; ---------------------------------------------------------------------------
.text:0040463D
.text:0040463D loc_40463D:                             ; CODE XREF: sub_4044C0+6D↑j
.text:0040463D                                         ; DATA XREF: sub_4044C0:jpt_40452D↑o
.text:0040463D                 mov     [esp+2Ch+Stream], offset sub_4043B0 ; jumptable 0040452D case 7
.text:00404644                 jmp     loc_404570
.text:00404649 ; ---------------------------------------------------------------------------
.text:00404649
.text:00404649 loc_404649:                             ; CODE XREF: sub_4044C0+6D↑j
.text:00404649                                         ; DATA XREF: sub_4044C0:jpt_40452D↑o
.text:00404649                 mov     [esp+2Ch+Stream], offset sub_4043F0 ; jumptable 0040452D case 8
.text:00404650                 jmp     loc_404570
.text:00404655 ; ---------------------------------------------------------------------------
.text:00404655
.text:00404655 loc_404655:                             ; CODE XREF: sub_4044C0+6D↑j
.text:00404655                                         ; DATA XREF: sub_4044C0:jpt_40452D↑o
.text:00404655                 mov     [esp+2Ch+Stream], offset sub_404430 ; jumptable 0040452D case 9
.text:0040465C                 jmp     loc_404570
.text:00404661 ; ---------------------------------------------------------------------------
.text:00404661
.text:00404661 def_40452D:                             ; CODE XREF: sub_4044C0+67↑j
.text:00404661                 mov     [esp+2Ch+Stream], offset loc_404470 ; jumptable 0040452D default case
.text:00404668                 jmp     loc_404570
.text:0040466D ; ---------------------------------------------------------------------------
.text:0040466D
.text:0040466D loc_40466D:                             ; CODE XREF: sub_4044C0+3E↑j
.text:0040466D                 mov     [esp+2Ch+var_20], ebp
.text:00404671                 mov     ecx, [esp+2Ch+var_14]
.text:00404675                 mov     [esp+2Ch+Format], offset loc_4044AC ; Format
.text:0040467D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404680                 mov     [esp+2Ch+ArgList], ecx
.text:00404684                 call    fprintf
.text:00404689                 jmp     loc_404524
.text:00404689 sub_4044C0      endp
.text:00404689
.text:00404689 ; ---------------------------------------------------------------------------
.text:0040468E                 align 10h
.text:00404690                 sub     esp, 1Ch
.text:00404693                 mov     edx, [esp+2Ch]
.text:00404697                 lea     ecx, [esp+30h]
.text:0040469B                 mov     [esp+10h], ecx
.text:0040469F                 mov     ecx, [esp+28h]
.text:004046A3                 mov     [esp+0Ch], edx
.text:004046A7                 mov     edx, [esp+24h]
.text:004046AB                 mov     [esp+8], ecx
.text:004046AF                 mov     [esp+4], edx
.text:004046B3                 mov     edx, [esp+20h]
.text:004046B7                 mov     [esp], edx
.text:004046BA                 call    sub_4044C0
.text:004046BF                 add     esp, 1Ch
.text:004046C2                 retn
.text:004046C2 ; ---------------------------------------------------------------------------
.text:004046C3                 align 10h
.text:004046D0                 sub     esp, 0Ch
.text:004046D3                 xor     edx, edx
.text:004046D5                 mov     ecx, [esp+14h]
.text:004046D9                 mov     [esp+8], ebx
.text:004046DD                 mov     eax, 0FFFFFFFFh
.text:004046E2                 mov     ebx, [esp+10h]
.text:004046E6                 div     ecx
.text:004046E8                 cmp     eax, ebx
.text:004046EA                 jb      short loc_404709
.text:004046EC                 mov     edx, ebx
.text:004046EE                 imul    edx, ecx
.text:004046F1                 mov     [esp], edx
.text:004046F4                 call    malloc
.text:004046F9                 test    eax, eax
.text:004046FB                 jz      short loc_404705
.text:004046FD
.text:004046FD loc_4046FD:                             ; CODE XREF: .text:00404707↓j
.text:004046FD                 mov     ebx, [esp+8]
.text:00404701                 add     esp, 0Ch
.text:00404704                 retn
.text:00404705 ; ---------------------------------------------------------------------------
.text:00404705
.text:00404705 loc_404705:                             ; CODE XREF: .text:004046FB↑j
.text:00404705                 test    ebx, ebx
.text:00404707                 jz      short loc_4046FD
.text:00404709
.text:00404709 loc_404709:                             ; CODE XREF: .text:004046EA↑j
.text:00404709                 call    sub_4049C0
.text:00404709 ; ---------------------------------------------------------------------------
.text:0040470E                 align 10h
.text:00404710
.text:00404710 ; =============== S U B R O U T I N E =======================================
.text:00404710
.text:00404710
.text:00404710 ; int __cdecl sub_404710(size_t)
.text:00404710 sub_404710      proc near               ; CODE XREF: .text:00403939↑p
.text:00404710                                         ; .text:00403B16↑p ...
.text:00404710
.text:00404710 Size            = dword ptr -0Ch
.text:00404710 var_4           = dword ptr -4
.text:00404710 arg_0           = dword ptr  4
.text:00404710
.text:00404710                 sub     esp, 0Ch
.text:00404713                 mov     [esp+0Ch+var_4], ebx
.text:00404717                 mov     ebx, [esp+0Ch+arg_0]
.text:0040471B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040471E                 call    malloc
.text:00404723                 test    eax, eax
.text:00404725                 jz      short loc_404730
.text:00404727
.text:00404727 loc_404727:                             ; CODE XREF: sub_404710+22↓j
.text:00404727                 mov     ebx, [esp+0Ch+var_4]
.text:0040472B                 add     esp, 0Ch
.text:0040472E                 retn
.text:0040472E ; ---------------------------------------------------------------------------
.text:0040472F                 align 10h
.text:00404730
.text:00404730 loc_404730:                             ; CODE XREF: sub_404710+15↑j
.text:00404730                 test    ebx, ebx
.text:00404732                 jz      short loc_404727
.text:00404734                 call    sub_4049C0
.text:00404734 sub_404710      endp
.text:00404734
.text:00404734 ; ---------------------------------------------------------------------------
.text:00404739                 align 10h
.text:00404740                 sub     esp, 1Ch
.text:00404743                 xor     edx, edx
.text:00404745                 mov     eax, 0FFFFFFFFh
.text:0040474A                 mov     [esp+14h], ebx
.text:0040474E                 mov     ecx, [esp+20h]
.text:00404752                 mov     ebx, [esp+28h]
.text:00404756                 mov     [esp+18h], esi
.text:0040475A                 mov     esi, [esp+24h]
.text:0040475E                 div     ebx
.text:00404760                 cmp     eax, esi
.text:00404762                 jb      short loc_404794
.text:00404764                 mov     [esp], ecx
.text:00404767                 mov     edx, esi
.text:00404769                 imul    edx, ebx
.text:0040476C                 mov     [esp+4], edx
.text:00404770                 call    realloc
.text:00404775                 test    eax, eax
.text:00404777                 mov     ecx, eax
.text:00404779                 jz      short loc_404790
.text:0040477B
.text:0040477B loc_40477B:                             ; CODE XREF: .text:00404792↓j
.text:0040477B                 mov     ebx, [esp+14h]
.text:0040477F                 mov     eax, ecx
.text:00404781                 mov     esi, [esp+18h]
.text:00404785                 add     esp, 1Ch
.text:00404788                 retn
.text:00404788 ; ---------------------------------------------------------------------------
.text:00404789                 align 10h
.text:00404790
.text:00404790 loc_404790:                             ; CODE XREF: .text:00404779↑j
.text:00404790                 test    esi, esi
.text:00404792                 jz      short loc_40477B
.text:00404794
.text:00404794 loc_404794:                             ; CODE XREF: .text:00404762↑j
.text:00404794                 call    sub_4049C0
.text:00404794 ; ---------------------------------------------------------------------------
.text:00404799                 align 10h
.text:004047A0
.text:004047A0 ; =============== S U B R O U T I N E =======================================
.text:004047A0
.text:004047A0
.text:004047A0 ; int __cdecl sub_4047A0(void *, size_t)
.text:004047A0 sub_4047A0      proc near               ; CODE XREF: sub_404000+5B↑p
.text:004047A0
.text:004047A0 Block           = dword ptr -0Ch
.text:004047A0 Size            = dword ptr -8
.text:004047A0 var_4           = dword ptr -4
.text:004047A0 arg_0           = dword ptr  4
.text:004047A0 arg_4           = dword ptr  8
.text:004047A0
.text:004047A0                 sub     esp, 0Ch
.text:004047A3                 mov     edx, [esp+0Ch+arg_0]
.text:004047A7                 mov     [esp+0Ch+var_4], ebx
.text:004047AB                 mov     ebx, [esp+0Ch+arg_4]
.text:004047AF                 mov     [esp+0Ch+Block], edx ; Block
.text:004047B2                 mov     [esp+0Ch+Size], ebx ; Size
.text:004047B6                 call    realloc
.text:004047BB                 test    eax, eax
.text:004047BD                 jz      short loc_4047C7
.text:004047BF
.text:004047BF loc_4047BF:                             ; CODE XREF: sub_4047A0+29↓j
.text:004047BF                 mov     ebx, [esp+0Ch+var_4]
.text:004047C3                 add     esp, 0Ch
.text:004047C6                 retn
.text:004047C7 ; ---------------------------------------------------------------------------
.text:004047C7
.text:004047C7 loc_4047C7:                             ; CODE XREF: sub_4047A0+1D↑j
.text:004047C7                 test    ebx, ebx
.text:004047C9                 jz      short loc_4047BF
.text:004047CB                 call    sub_4049C0
.text:004047CB sub_4047A0      endp
.text:004047CB
.text:004047D0 ; ---------------------------------------------------------------------------
.text:004047D0                 jmp     sub_404920
.text:004047D0 ; ---------------------------------------------------------------------------
.text:004047D5                 align 10h
.text:004047E0                 sub     esp, 0Ch
.text:004047E3                 mov     edx, [esp+14h]
.text:004047E7                 mov     dword ptr [esp+8], 1
.text:004047EF                 mov     [esp+4], edx
.text:004047F3                 mov     edx, [esp+10h]
.text:004047F7                 mov     [esp], edx
.text:004047FA                 call    sub_404920
.text:004047FF                 add     esp, 0Ch
.text:00404802                 retn
.text:00404802 ; ---------------------------------------------------------------------------
.text:00404803                 align 10h
.text:00404810                 sub     esp, 1Ch
.text:00404813                 mov     [esp+18h], ebx
.text:00404817                 mov     ebx, [esp+20h]
.text:0040481B                 mov     [esp], ebx
.text:0040481E                 call    malloc
.text:00404823                 test    eax, eax
.text:00404825                 jz      short loc_404843
.text:00404827
.text:00404827 loc_404827:                             ; CODE XREF: .text:00404845↓j
.text:00404827                 mov     [esp+8], ebx
.text:0040482B                 mov     dword ptr [esp+4], 0
.text:00404833                 mov     [esp], eax
.text:00404836                 call    memset
.text:0040483B                 mov     ebx, [esp+18h]
.text:0040483F                 add     esp, 1Ch
.text:00404842                 retn
.text:00404843 ; ---------------------------------------------------------------------------
.text:00404843
.text:00404843 loc_404843:                             ; CODE XREF: .text:00404825↑j
.text:00404843                 test    ebx, ebx
.text:00404845                 jz      short loc_404827
.text:00404847                 call    sub_4049C0
.text:00404847 ; ---------------------------------------------------------------------------
.text:0040484C                 align 10h
.text:00404850                 sub     esp, 0Ch
.text:00404853                 xor     edx, edx
.text:00404855                 mov     ecx, [esp+14h]
.text:00404859                 mov     [esp+8], ebx
.text:0040485D                 mov     eax, 0FFFFFFFFh
.text:00404862                 mov     ebx, [esp+10h]
.text:00404866                 div     ecx
.text:00404868                 cmp     eax, ebx
.text:0040486A                 jb      short loc_404888
.text:0040486C                 mov     [esp+4], ecx
.text:00404870                 mov     [esp], ebx
.text:00404873                 call    calloc
.text:00404878                 test    eax, eax
.text:0040487A                 jz      short loc_404884
.text:0040487C
.text:0040487C loc_40487C:                             ; CODE XREF: .text:00404886↓j
.text:0040487C                 mov     ebx, [esp+8]
.text:00404880                 add     esp, 0Ch
.text:00404883                 retn
.text:00404884 ; ---------------------------------------------------------------------------
.text:00404884
.text:00404884 loc_404884:                             ; CODE XREF: .text:0040487A↑j
.text:00404884                 test    ebx, ebx
.text:00404886                 jz      short loc_40487C
.text:00404888
.text:00404888 loc_404888:                             ; CODE XREF: .text:0040486A↑j
.text:00404888                 call    sub_4049C0
.text:00404888 ; ---------------------------------------------------------------------------
.text:0040488D                 align 10h
.text:00404890                 sub     esp, 1Ch
.text:00404893                 mov     [esp+18h], ebx
.text:00404897                 mov     ebx, [esp+24h]
.text:0040489B                 mov     [esp], ebx
.text:0040489E                 call    malloc
.text:004048A3                 test    eax, eax
.text:004048A5                 mov     edx, eax
.text:004048A7                 jz      short loc_4048C5
.text:004048A9
.text:004048A9 loc_4048A9:                             ; CODE XREF: .text:004048C7↓j
.text:004048A9                 mov     [esp+8], ebx
.text:004048AD                 mov     ecx, [esp+20h]
.text:004048B1                 mov     [esp], edx
.text:004048B4                 mov     [esp+4], ecx
.text:004048B8                 call    memcpy
.text:004048BD                 mov     ebx, [esp+18h]
.text:004048C1                 add     esp, 1Ch
.text:004048C4                 retn
.text:004048C5 ; ---------------------------------------------------------------------------
.text:004048C5
.text:004048C5 loc_4048C5:                             ; CODE XREF: .text:004048A7↑j
.text:004048C5                 test    ebx, ebx
.text:004048C7                 jz      short loc_4048A9
.text:004048C9                 call    sub_4049C0
.text:004048C9 ; ---------------------------------------------------------------------------
.text:004048CE                 align 10h
.text:004048D0                 sub     esp, 1Ch
.text:004048D3                 mov     [esp+18h], esi
.text:004048D7                 mov     esi, [esp+20h]
.text:004048DB                 mov     [esp+14h], ebx
.text:004048DF                 mov     [esp], esi
.text:004048E2                 call    strlen
.text:004048E7                 lea     ebx, [eax+1]
.text:004048EA                 mov     [esp], ebx
.text:004048ED                 call    malloc
.text:004048F2                 test    eax, eax
.text:004048F4                 jz      short loc_404912
.text:004048F6
.text:004048F6 loc_4048F6:                             ; CODE XREF: .text:00404914↓j
.text:004048F6                 mov     [esp+8], ebx
.text:004048FA                 mov     [esp+4], esi
.text:004048FE                 mov     [esp], eax
.text:00404901                 call    memcpy
.text:00404906                 mov     ebx, [esp+14h]
.text:0040490A                 mov     esi, [esp+18h]
.text:0040490E                 add     esp, 1Ch
.text:00404911                 retn
.text:00404912 ; ---------------------------------------------------------------------------
.text:00404912
.text:00404912 loc_404912:                             ; CODE XREF: .text:004048F4↑j
.text:00404912                 test    ebx, ebx
.text:00404914                 jz      short loc_4048F6
.text:00404916                 call    sub_4049C0
.text:00404916 ; ---------------------------------------------------------------------------
.text:0040491B                 align 10h
.text:00404920
.text:00404920 ; =============== S U B R O U T I N E =======================================
.text:00404920
.text:00404920
.text:00404920 ; int __cdecl sub_404920(void *, int, int)
.text:00404920 sub_404920      proc near               ; CODE XREF: .text:004047D0↑j
.text:00404920                                         ; .text:004047FA↑p
.text:00404920
.text:00404920 Block           = dword ptr -1Ch
.text:00404920 Size            = dword ptr -18h
.text:00404920 var_C           = dword ptr -0Ch
.text:00404920 var_8           = dword ptr -8
.text:00404920 var_4           = dword ptr -4
.text:00404920 arg_0           = dword ptr  4
.text:00404920 arg_4           = dword ptr  8
.text:00404920 arg_8           = dword ptr  0Ch
.text:00404920
.text:00404920                 sub     esp, 1Ch
.text:00404923                 mov     [esp+1Ch+var_8], esi
.text:00404927                 mov     esi, [esp+1Ch+arg_0]
.text:0040492B                 mov     [esp+1Ch+var_4], edi
.text:0040492F                 mov     edi, [esp+1Ch+arg_4]
.text:00404933                 test    esi, esi
.text:00404935                 mov     [esp+1Ch+var_C], ebx
.text:00404939                 mov     ecx, [edi]
.text:0040493B                 mov     ebx, [esp+1Ch+arg_8]
.text:0040493F                 jz      short loc_404980
.text:00404941                 xor     edx, edx
.text:00404943                 mov     eax, 7FFFFFFFh
.text:00404948                 div     ebx
.text:0040494A                 cmp     eax, ecx
.text:0040494C                 jb      short loc_404979
.text:0040494E                 add     ecx, ecx
.text:00404950
.text:00404950 loc_404950:                             ; CODE XREF: sub_404920+62↓j
.text:00404950                                         ; sub_404920+71↓j ...
.text:00404950                 mov     [edi], ecx
.text:00404952                 imul    ebx, ecx
.text:00404955                 mov     [esp+1Ch+Block], esi ; Block
.text:00404958                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040495C                 call    realloc
.text:00404961                 test    eax, eax
.text:00404963                 jz      short loc_404975
.text:00404965
.text:00404965 loc_404965:                             ; CODE XREF: sub_404920+57↓j
.text:00404965                 mov     ebx, [esp+1Ch+var_C]
.text:00404969                 mov     esi, [esp+1Ch+var_8]
.text:0040496D                 mov     edi, [esp+1Ch+var_4]
.text:00404971                 add     esp, 1Ch
.text:00404974                 retn
.text:00404975 ; ---------------------------------------------------------------------------
.text:00404975
.text:00404975 loc_404975:                             ; CODE XREF: sub_404920+43↑j
.text:00404975                 test    ebx, ebx
.text:00404977                 jz      short loc_404965
.text:00404979
.text:00404979 loc_404979:                             ; CODE XREF: sub_404920+2C↑j
.text:00404979                 call    sub_4049C0
.text:00404979 ; ---------------------------------------------------------------------------
.text:0040497E                 align 10h
.text:00404980
.text:00404980 loc_404980:                             ; CODE XREF: sub_404920+1F↑j
.text:00404980                 test    ecx, ecx
.text:00404982                 jnz     short loc_404950
.text:00404984                 xor     edx, edx
.text:00404986                 mov     eax, 40h ; '@'
.text:0040498B                 div     ebx
.text:0040498D                 test    eax, eax
.text:0040498F                 mov     ecx, eax
.text:00404991                 jnz     short loc_404950
.text:00404993                 mov     ecx, 1
.text:00404998                 jmp     short loc_404950
.text:00404998 sub_404920      endp
.text:00404998
.text:00404998 ; ---------------------------------------------------------------------------
.text:0040499A                 align 10h
.text:004049A0 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_4049C0+3↓o
.text:004049B1 ; const char aS[]
.text:004049B1 aS              db '%s',0               ; DATA XREF: sub_4049C0+10↓o
.text:004049B4                 align 10h
.text:004049C0
.text:004049C0 ; =============== S U B R O U T I N E =======================================
.text:004049C0
.text:004049C0 ; Attributes: noreturn
.text:004049C0
.text:004049C0 sub_4049C0      proc near               ; CODE XREF: sub_404000:loc_4041BF↑p
.text:004049C0                                         ; .text:loc_404709↑p ...
.text:004049C0
.text:004049C0 Code            = dword ptr -1Ch
.text:004049C0 ErrorMessage    = dword ptr -18h
.text:004049C0 var_14          = dword ptr -14h
.text:004049C0 var_10          = byte ptr -10h
.text:004049C0
.text:004049C0                 sub     esp, 1Ch
.text:004049C3                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:004049CA                 call    ds:libintl_gettext
.text:004049D0                 mov     [esp+1Ch+var_14], offset aS ; "%s"
.text:004049D8                 mov     edx, Code
.text:004049DE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:004049E6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:004049EA                 mov     [esp+1Ch+Code], edx ; Code
.text:004049ED                 call    sub_404A50
.text:004049F2                 call    abort
.text:004049F2 sub_4049C0      endp
.text:004049F2
.text:004049F2 ; ---------------------------------------------------------------------------
.text:004049F7                 align 10h
.text:00404A00
.text:00404A00 ; =============== S U B R O U T I N E =======================================
.text:00404A00
.text:00404A00 ; Attributes: thunk
.text:00404A00
.text:00404A00 libintl_bindtextdomain proc near
.text:00404A00                 jmp     ds:__imp_libintl_bindtextdomain
.text:00404A00 libintl_bindtextdomain endp
.text:00404A00
.text:00404A00 ; ---------------------------------------------------------------------------
.text:00404A06                 align 10h
.text:00404A10                 jmp     ds:libintl_textdomain
.text:00404A10 ; ---------------------------------------------------------------------------
.text:00404A16                 align 10h
.text:00404A20                 jmp     ds:libintl_gettext
.text:00404A20 ; ---------------------------------------------------------------------------
.text:00404A26                 align 10h
.text:00404A30 ; const char aS_0[]
.text:00404A30 aS_0            db ': %s',0             ; DATA XREF: sub_404A50+B8↓o
.text:00404A30                                         ; sub_404B54+122↓o
.text:00404A35 aUnknownSystemE db 'Unknown system error',0
.text:00404A35                                         ; DATA XREF: sub_404A50:loc_404B1D↓o
.text:00404A35                                         ; sub_404B54:loc_404C8E↓o
.text:00404A4A ; const char aS_1[]
.text:00404A4A aS_1            db '%s: ',0             ; DATA XREF: sub_404A50:loc_404B24↓o
.text:00404A4F                 align 10h
.text:00404A50
.text:00404A50 ; =============== S U B R O U T I N E =======================================
.text:00404A50
.text:00404A50
.text:00404A50 ; int __cdecl sub_404A50(int Code, int ErrorMessage, char *, char)
.text:00404A50 sub_404A50      proc near               ; CODE XREF: sub_4013E0+109↑p
.text:00404A50                                         ; sub_4013E0+177↑p ...
.text:00404A50
.text:00404A50 Stream          = dword ptr -1Ch
.text:00404A50 Format          = dword ptr -18h
.text:00404A50 ArgList         = dword ptr -14h
.text:00404A50 Code            = dword ptr  4
.text:00404A50 ErrorMessage    = dword ptr  8
.text:00404A50 arg_8           = dword ptr  0Ch
.text:00404A50 arg_C           = byte ptr  10h
.text:00404A50
.text:00404A50                 push    esi
.text:00404A51                 push    ebx
.text:00404A52                 sub     esp, 14h
.text:00404A55                 mov     edx, ds:_iob
.text:00404A5B                 mov     esi, [esp+1Ch+Code]
.text:00404A5F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00404A63                 add     edx, 20h ; ' '
.text:00404A66                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404A69                 call    fflush
.text:00404A6E                 mov     eax, ds:dword_4076F0
.text:00404A73                 test    eax, eax
.text:00404A75                 jz      loc_404B24
.text:00404A7B                 call    eax ; dword_4076F0
.text:00404A7D
.text:00404A7D loc_404A7D:                             ; CODE XREF: sub_404A50+F7↓j
.text:00404A7D                 lea     edx, [esp+1Ch+arg_C]
.text:00404A81                 mov     ecx, [esp+1Ch+arg_8]
.text:00404A85                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00404A89                 mov     edx, ds:_iob
.text:00404A8F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00404A93                 add     edx, 40h ; '@'
.text:00404A96                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404A99                 call    vfprintf
.text:00404A9E                 inc     ds:dword_407700
.text:00404AA4                 test    ebx, ebx
.text:00404AA6                 jnz     short loc_404AF2
.text:00404AA8
.text:00404AA8 loc_404AA8:                             ; CODE XREF: sub_404A50+CB↓j
.text:00404AA8                 mov     edx, ds:_iob
.text:00404AAE                 lea     ecx, [edx+40h]
.text:00404AB1                 mov     ebx, [ecx+4]
.text:00404AB4                 dec     ebx
.text:00404AB5                 test    ebx, ebx
.text:00404AB7                 mov     [ecx+4], ebx
.text:00404ABA                 js      short loc_404AE0
.text:00404ABC                 mov     ecx, [edx+40h]
.text:00404ABF                 mov     byte ptr [ecx], 0Ah
.text:00404AC2                 inc     dword ptr [edx+40h]
.text:00404AC5
.text:00404AC5 loc_404AC5:                             ; CODE XREF: sub_404A50+A0↓j
.text:00404AC5                 mov     edx, ds:_iob
.text:00404ACB                 add     edx, 40h ; '@'
.text:00404ACE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404AD1                 call    fflush
.text:00404AD6                 test    esi, esi
.text:00404AD8                 jnz     short loc_404B4C
.text:00404ADA                 add     esp, 14h
.text:00404ADD                 pop     ebx
.text:00404ADE                 pop     esi
.text:00404ADF                 retn
.text:00404AE0 ; ---------------------------------------------------------------------------
.text:00404AE0
.text:00404AE0 loc_404AE0:                             ; CODE XREF: sub_404A50+6A↑j
.text:00404AE0                 mov     [esp+1Ch+Format], ecx ; File
.text:00404AE4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:00404AEB                 call    _flsbuf
.text:00404AF0                 jmp     short loc_404AC5
.text:00404AF2 ; ---------------------------------------------------------------------------
.text:00404AF2
.text:00404AF2 loc_404AF2:                             ; CODE XREF: sub_404A50+56↑j
.text:00404AF2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00404AF5                 call    strerror
.text:00404AFA                 test    eax, eax
.text:00404AFC                 jz      short loc_404B1D
.text:00404AFE
.text:00404AFE loc_404AFE:                             ; CODE XREF: sub_404A50+D2↓j
.text:00404AFE                 mov     [esp+1Ch+ArgList], eax
.text:00404B02                 mov     ebx, ds:_iob
.text:00404B08                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:00404B10                 add     ebx, 40h ; '@'
.text:00404B13                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00404B16                 call    fprintf
.text:00404B1B                 jmp     short loc_404AA8
.text:00404B1D ; ---------------------------------------------------------------------------
.text:00404B1D
.text:00404B1D loc_404B1D:                             ; CODE XREF: sub_404A50+AC↑j
.text:00404B1D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404B22                 jmp     short loc_404AFE
.text:00404B24 ; ---------------------------------------------------------------------------
.text:00404B24
.text:00404B24 loc_404B24:                             ; CODE XREF: sub_404A50+25↑j
.text:00404B24                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:00404B2C                 mov     edx, ds:_iob
.text:00404B32                 mov     ecx, ds:dword_4076C0
.text:00404B38                 add     edx, 40h ; '@'
.text:00404B3B                 mov     [esp+1Ch+ArgList], ecx
.text:00404B3F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00404B42                 call    fprintf
.text:00404B47                 jmp     loc_404A7D
.text:00404B4C ; ---------------------------------------------------------------------------
.text:00404B4C
.text:00404B4C loc_404B4C:                             ; CODE XREF: sub_404A50+88↑j
.text:00404B4C                 mov     [esp+1Ch+Stream], esi ; Code
.text:00404B4F                 call    exit
.text:00404B4F sub_404A50      endp
.text:00404B4F
.text:00404B54
.text:00404B54 ; =============== S U B R O U T I N E =======================================
.text:00404B54
.text:00404B54
.text:00404B54 ; int __cdecl sub_404B54(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00404B54 sub_404B54      proc near               ; DATA XREF: sub_404B54+77↓o
.text:00404B54
.text:00404B54 Stream          = dword ptr -28h
.text:00404B54 Format          = dword ptr -24h
.text:00404B54 ArgList         = dword ptr -20h
.text:00404B54 var_1C          = dword ptr -1Ch
.text:00404B54 Code            = dword ptr  8
.text:00404B54 ErrorMessage    = dword ptr  0Ch
.text:00404B54 Str2            = dword ptr  10h
.text:00404B54 arg_10          = dword ptr  14h
.text:00404B54 arg_14          = dword ptr  18h
.text:00404B54 arg_18          = byte ptr  1Ch
.text:00404B54
.text:00404B54                 and     eax, 64253A73h
.text:00404B59                 cmp     ah, [eax]
.text:00404B5B
.text:00404B5B loc_404B5B:                             ; DATA XREF: sub_404B54:loc_404C95↓o
.text:00404B5B                 add     ds:55003A73h, ah
.text:00404B61                 push    edi
.text:00404B62                 push    esi
.text:00404B63                 push    ebx
.text:00404B64                 sub     esp, 1Ch
.text:00404B67                 mov     edx, ds:dword_407730
.text:00404B6D                 mov     ebp, [esp+28h+Code]
.text:00404B71                 mov     edi, [esp+28h+ErrorMessage]
.text:00404B75                 test    edx, edx
.text:00404B77                 mov     ebx, [esp+28h+Str2]
.text:00404B7B                 mov     esi, [esp+28h+arg_10]
.text:00404B7F                 jz      short loc_404B99
.text:00404B81                 cmp     ds:dword_407180, esi
.text:00404B87                 jz      loc_404CC0
.text:00404B8D
.text:00404B8D loc_404B8D:                             ; CODE XREF: sub_404B54+18D↓j
.text:00404B8D                 mov     ds:Str1, ebx
.text:00404B93                 mov     ds:dword_407180, esi
.text:00404B99
.text:00404B99 loc_404B99:                             ; CODE XREF: sub_404B54+2B↑j
.text:00404B99                 mov     edx, ds:_iob
.text:00404B9F                 add     edx, 20h ; ' '
.text:00404BA2                 mov     [esp+28h+Stream], edx ; Stream
.text:00404BA5                 call    fflush
.text:00404BAA                 mov     eax, ds:dword_4076F0
.text:00404BAF                 test    eax, eax
.text:00404BB1                 jz      loc_404C95
.text:00404BB7                 call    eax ; dword_4076F0
.text:00404BB9
.text:00404BB9 loc_404BB9:                             ; CODE XREF: sub_404B54+164↓j
.text:00404BB9                 test    ebx, ebx
.text:00404BBB                 jz      short loc_404BDE
.text:00404BBD                 mov     [esp+28h+ArgList], ebx
.text:00404BC1                 mov     ebx, ds:_iob
.text:00404BC7                 mov     [esp+28h+var_1C], esi
.text:00404BCB                 mov     [esp+28h+Format], offset sub_404B54 ; Format
.text:00404BD3                 add     ebx, 40h ; '@'
.text:00404BD6                 mov     [esp+28h+Stream], ebx ; Stream
.text:00404BD9                 call    fprintf
.text:00404BDE
.text:00404BDE loc_404BDE:                             ; CODE XREF: sub_404B54+67↑j
.text:00404BDE                 mov     esi, ds:_iob
.text:00404BE4                 lea     edx, [esp+28h+arg_18]
.text:00404BE8                 mov     ecx, [esp+28h+arg_14]
.text:00404BEC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00404BF0                 add     esi, 40h ; '@'
.text:00404BF3                 mov     [esp+28h+Format], ecx ; Format
.text:00404BF7                 mov     [esp+28h+Stream], esi ; Stream
.text:00404BFA                 call    vfprintf
.text:00404BFF                 inc     ds:dword_407700
.text:00404C05                 test    edi, edi
.text:00404C07                 jnz     short loc_404C60
.text:00404C09
.text:00404C09 loc_404C09:                             ; CODE XREF: sub_404B54+135↓j
.text:00404C09                 mov     edx, ds:_iob
.text:00404C0F                 lea     ecx, [edx+40h]
.text:00404C12                 mov     ebx, [ecx+4]
.text:00404C15                 dec     ebx
.text:00404C16                 test    ebx, ebx
.text:00404C18                 mov     [ecx+4], ebx
.text:00404C1B                 js      short loc_404C47
.text:00404C1D                 mov     esi, [edx+40h]
.text:00404C20                 mov     byte ptr [esi], 0Ah
.text:00404C23                 inc     dword ptr [edx+40h]
.text:00404C26
.text:00404C26 loc_404C26:                             ; CODE XREF: sub_404B54+103↓j
.text:00404C26                 mov     ecx, ds:_iob
.text:00404C2C                 add     ecx, 40h ; '@'
.text:00404C2F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404C32                 call    fflush
.text:00404C37                 test    ebp, ebp
.text:00404C39                 jnz     loc_404CE6
.text:00404C3F
.text:00404C3F loc_404C3F:                             ; CODE XREF: sub_404B54+173↓j
.text:00404C3F                                         ; sub_404B54+187↓j
.text:00404C3F                 add     esp, 1Ch
.text:00404C42                 pop     ebx
.text:00404C43                 pop     esi
.text:00404C44                 pop     edi
.text:00404C45                 pop     ebp
.text:00404C46                 retn
.text:00404C47 ; ---------------------------------------------------------------------------
.text:00404C47
.text:00404C47 loc_404C47:                             ; CODE XREF: sub_404B54+C7↑j
.text:00404C47                 mov     [esp+28h+Format], ecx ; File
.text:00404C4B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00404C52                 call    _flsbuf
.text:00404C57                 jmp     short loc_404C26
.text:00404C57 ; ---------------------------------------------------------------------------
.text:00404C59                 align 10h
.text:00404C60
.text:00404C60 loc_404C60:                             ; CODE XREF: sub_404B54+B3↑j
.text:00404C60                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00404C63                 call    strerror
.text:00404C68                 test    eax, eax
.text:00404C6A                 jz      short loc_404C8E
.text:00404C6C
.text:00404C6C loc_404C6C:                             ; CODE XREF: sub_404B54+13F↓j
.text:00404C6C                 mov     [esp+28h+ArgList], eax
.text:00404C70                 mov     edi, ds:_iob
.text:00404C76                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:00404C7E                 add     edi, 40h ; '@'
.text:00404C81                 mov     [esp+28h+Stream], edi ; Stream
.text:00404C84                 call    fprintf
.text:00404C89                 jmp     loc_404C09
.text:00404C8E ; ---------------------------------------------------------------------------
.text:00404C8E
.text:00404C8E loc_404C8E:                             ; CODE XREF: sub_404B54+116↑j
.text:00404C8E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00404C93                 jmp     short loc_404C6C
.text:00404C95 ; ---------------------------------------------------------------------------
.text:00404C95
.text:00404C95 loc_404C95:                             ; CODE XREF: sub_404B54+5D↑j
.text:00404C95                 mov     [esp+28h+Format], (offset loc_404B5B+1) ; Format
.text:00404C9D                 mov     ecx, ds:_iob
.text:00404CA3                 mov     edx, ds:dword_4076C0
.text:00404CA9                 add     ecx, 40h ; '@'
.text:00404CAC                 mov     [esp+28h+ArgList], edx
.text:00404CB0                 mov     [esp+28h+Stream], ecx ; Stream
.text:00404CB3                 call    fprintf
.text:00404CB8                 jmp     loc_404BB9
.text:00404CB8 ; ---------------------------------------------------------------------------
.text:00404CBD                 align 10h
.text:00404CC0
.text:00404CC0 loc_404CC0:                             ; CODE XREF: sub_404B54+33↑j
.text:00404CC0                 mov     eax, ds:Str1
.text:00404CC5                 cmp     ebx, eax
.text:00404CC7                 jz      loc_404C3F
.text:00404CCD                 mov     [esp+28h+Format], ebx ; Str2
.text:00404CD1                 mov     [esp+28h+Stream], eax ; Str1
.text:00404CD4                 call    strcmp
.text:00404CD9                 test    eax, eax
.text:00404CDB                 jz      loc_404C3F
.text:00404CE1                 jmp     loc_404B8D
.text:00404CE6 ; ---------------------------------------------------------------------------
.text:00404CE6
.text:00404CE6 loc_404CE6:                             ; CODE XREF: sub_404B54+E5↑j
.text:00404CE6                 mov     [esp+28h+Stream], ebp ; Code
.text:00404CE9                 call    exit
.text:00404CE9 sub_404B54      endp ; sp-analysis failed
.text:00404CE9
.text:00404CE9 ; ---------------------------------------------------------------------------
.text:00404CEE                 align 10h
.text:00404CF0
.text:00404CF0 ; =============== S U B R O U T I N E =======================================
.text:00404CF0
.text:00404CF0
.text:00404CF0 sub_404CF0      proc near               ; CODE XREF: sub_4013E0+1D1↑p
.text:00404CF0                 xor     eax, eax
.text:00404CF2                 retn
.text:00404CF2 sub_404CF0      endp
.text:00404CF2
.text:00404CF2 ; ---------------------------------------------------------------------------
.text:00404CF3                 align 10h
.text:00404D00
.text:00404D00 ; =============== S U B R O U T I N E =======================================
.text:00404D00
.text:00404D00
.text:00404D00 sub_404D00      proc near               ; CODE XREF: sub_4013E0+1BB↑p
.text:00404D00                 xor     eax, eax
.text:00404D02                 retn
.text:00404D02 sub_404D00      endp
.text:00404D02
.text:00404D02 ; ---------------------------------------------------------------------------
.text:00404D03                 align 10h
.text:00404D10
.text:00404D10 ; =============== S U B R O U T I N E =======================================
.text:00404D10
.text:00404D10
.text:00404D10 sub_404D10      proc near               ; CODE XREF: sub_4013E0+1A5↑p
.text:00404D10                 sub     esp, 0Ch
.text:00404D13                 call    _errno
.text:00404D18                 mov     dword ptr [eax], 28h ; '('
.text:00404D1E                 mov     eax, 0FFFFFFFFh
.text:00404D23                 add     esp, 0Ch
.text:00404D26                 retn
.text:00404D26 sub_404D10      endp
.text:00404D26
.text:00404D26 ; ---------------------------------------------------------------------------
.text:00404D27                 align 10h
.text:00404D30
.text:00404D30 ; =============== S U B R O U T I N E =======================================
.text:00404D30
.text:00404D30
.text:00404D30 ; int __cdecl sub_404D30(char *)
.text:00404D30 sub_404D30      proc near               ; CODE XREF: sub_4013E0+184↑p
.text:00404D30
.text:00404D30 var_1C          = dword ptr -1Ch
.text:00404D30 var_18          = dword ptr -18h
.text:00404D30 var_14          = dword ptr -14h
.text:00404D30 var_10          = dword ptr -10h
.text:00404D30 var_C           = dword ptr -0Ch
.text:00404D30 var_4           = dword ptr -4
.text:00404D30 arg_0           = dword ptr  4
.text:00404D30
.text:00404D30                 sub     esp, 1Ch
.text:00404D33                 mov     ecx, [esp+1Ch+arg_0]
.text:00404D37                 lea     edx, [esp+1Ch+var_4]
.text:00404D3B                 mov     [esp+1Ch+var_C], edx ; int
.text:00404D3F                 mov     [esp+1Ch+var_10], 400h ; int
.text:00404D47                 mov     [esp+1Ch+var_1C], ecx ; char *
.text:00404D4A                 mov     [esp+1Ch+var_14], offset byte_4071B0 ; char *
.text:00404D52                 mov     [esp+1Ch+var_18], offset unk_407190 ; int
.text:00404D5A                 call    sub_404DA0
.text:00404D5F                 test    eax, eax
.text:00404D61                 mov     ecx, [esp+1Ch+var_4]
.text:00404D65                 setnz   dl
.text:00404D68                 add     esp, 1Ch
.text:00404D6B                 movzx   eax, dl
.text:00404D6E                 dec     eax
.text:00404D6F                 and     eax, ecx
.text:00404D71                 retn
.text:00404D71 sub_404D30      endp
.text:00404D71
.text:00404D71 ; ---------------------------------------------------------------------------
.text:00404D72                 align 10h
.text:00404D80 byte_404D80     db 0                    ; DATA XREF: .data:Src↓o
.text:00404D81 byte_404D81     db 73h, 68h, 0          ; DATA XREF: .data:off_406054↓o
.text:00404D84 ; const char aHome[]
.text:00404D84 aHome           db 'HOME',0             ; DATA XREF: sub_404DA0+96↓o
.text:00404D89 ; const char aShell[]
.text:00404D89 aShell          db 'SHELL',0            ; DATA XREF: sub_404DA0+E2↓o
.text:00404D8F ; const char aComspec[]
.text:00404D8F aComspec        db 'COMSPEC',0          ; DATA XREF: sub_404DA0:loc_404F64↓o
.text:00404D97 aC              db 'C:/',0              ; DATA XREF: sub_404DA0:loc_404F85↓o
.text:00404D9B                 align 10h
.text:00404DA0
.text:00404DA0 ; =============== S U B R O U T I N E =======================================
.text:00404DA0
.text:00404DA0
.text:00404DA0 ; int __cdecl sub_404DA0(char *, int, char *, int, int)
.text:00404DA0 sub_404DA0      proc near               ; CODE XREF: sub_404D30+2A↑p
.text:00404DA0
.text:00404DA0 Str             = dword ptr -1Ch
.text:00404DA0 Src             = dword ptr -18h
.text:00404DA0 Size            = dword ptr -14h
.text:00404DA0 var_10          = dword ptr -10h
.text:00404DA0 var_C           = dword ptr -0Ch
.text:00404DA0 var_8           = dword ptr -8
.text:00404DA0 var_4           = dword ptr -4
.text:00404DA0 arg_0           = dword ptr  4
.text:00404DA0 arg_4           = dword ptr  8
.text:00404DA0 arg_8           = dword ptr  0Ch
.text:00404DA0 arg_C           = dword ptr  10h
.text:00404DA0 arg_10          = dword ptr  14h
.text:00404DA0
.text:00404DA0                 sub     esp, 1Ch
.text:00404DA3                 mov     eax, [esp+1Ch+arg_0]
.text:00404DA7                 mov     [esp+1Ch+var_10], ebx
.text:00404DAB                 mov     [esp+1Ch+var_C], esi
.text:00404DAF                 test    eax, eax
.text:00404DB1                 mov     [esp+1Ch+var_8], edi
.text:00404DB5                 mov     [esp+1Ch+var_4], ebp
.text:00404DB9                 jz      short loc_404DC8
.text:00404DBB                 cmp     byte ptr [eax], 0
.text:00404DBE                 jz      short loc_404DC8
.text:00404DC0                 mov     ecx, [esp+1Ch+arg_C]
.text:00404DC4                 test    ecx, ecx
.text:00404DC6                 jnz     short loc_404DF0
.text:00404DC8
.text:00404DC8 loc_404DC8:                             ; CODE XREF: sub_404DA0+19↑j
.text:00404DC8                                         ; sub_404DA0+1E↑j ...
.text:00404DC8                 call    _errno
.text:00404DCD                 mov     dword ptr [eax], 22h ; '"'
.text:00404DD3                 mov     eax, 0FFFFFFFFh
.text:00404DD8
.text:00404DD8 loc_404DD8:                             ; CODE XREF: sub_404DA0+1BF↓j
.text:00404DD8                 mov     ebx, [esp+1Ch+var_10]
.text:00404DDC                 mov     esi, [esp+1Ch+var_C]
.text:00404DE0                 mov     edi, [esp+1Ch+var_8]
.text:00404DE4                 mov     ebp, [esp+1Ch+var_4]
.text:00404DE8                 add     esp, 1Ch
.text:00404DEB                 retn
.text:00404DEB ; ---------------------------------------------------------------------------
.text:00404DEC                 align 10h
.text:00404DF0
.text:00404DF0 loc_404DF0:                             ; CODE XREF: sub_404DA0+26↑j
.text:00404DF0                 mov     [esp+1Ch+Str], eax ; Str
.text:00404DF3                 mov     ebx, eax
.text:00404DF5                 call    strlen
.text:00404DFA                 lea     esi, [eax+1]
.text:00404DFD                 cmp     esi, [esp+1Ch+arg_C]
.text:00404E01                 ja      short loc_404DC8
.text:00404E03                 mov     [esp+1Ch+Src], ebx ; Src
.text:00404E07                 mov     edx, [esp+1Ch+arg_8]
.text:00404E0B                 mov     [esp+1Ch+Size], esi ; Size
.text:00404E0F                 mov     [esp+1Ch+Str], edx ; void *
.text:00404E12                 call    memcpy
.text:00404E17                 mov     ebp, [esp+1Ch+arg_4]
.text:00404E1B                 mov     [ebp+0], eax
.text:00404E1E                 call    sub_404FF0
.text:00404E23                 mov     edi, [esp+1Ch+arg_4]
.text:00404E27                 mov     [edi+8], eax
.text:00404E2A                 call    sub_404FE0
.text:00404E2F                 mov     ebx, [esp+1Ch+arg_4]
.text:00404E33                 mov     [ebx+0Ch], eax
.text:00404E36                 mov     [esp+1Ch+Str], offset aHome ; "HOME"
.text:00404E3D                 call    getenv
.text:00404E42                 test    eax, eax
.text:00404E44                 mov     ebx, eax
.text:00404E46                 jz      loc_404F85
.text:00404E4C
.text:00404E4C loc_404E4C:                             ; CODE XREF: sub_404DA0+1EA↓j
.text:00404E4C                 mov     [esp+1Ch+Str], ebx ; Str
.text:00404E4F                 call    strlen
.text:00404E54                 lea     ebp, [eax+esi+1]
.text:00404E58                 cmp     ebp, [esp+1Ch+arg_C]
.text:00404E5C                 ja      loc_404DC8
.text:00404E62                 mov     [esp+1Ch+Src], ebx ; Src
.text:00404E66                 mov     ecx, [esp+1Ch+arg_8]
.text:00404E6A                 lea     edi, [eax+1]
.text:00404E6D                 mov     [esp+1Ch+Size], edi ; Size
.text:00404E71                 add     ecx, esi
.text:00404E73                 mov     [esp+1Ch+Str], ecx ; void *
.text:00404E76                 call    memcpy
.text:00404E7B                 mov     esi, [esp+1Ch+arg_4]
.text:00404E7F                 mov     [esi+14h], eax
.text:00404E82                 mov     [esp+1Ch+Str], offset aShell ; "SHELL"
.text:00404E89                 call    getenv
.text:00404E8E                 test    eax, eax
.text:00404E90                 mov     ebx, eax
.text:00404E92                 jz      loc_404F64
.text:00404E98
.text:00404E98 loc_404E98:                             ; CODE XREF: sub_404DA0+1D4↓j
.text:00404E98                                         ; sub_404DA0+1E0↓j
.text:00404E98                 mov     [esp+1Ch+Str], ebx ; Str
.text:00404E9B                 call    strlen
.text:00404EA0                 lea     edi, [eax+ebp+1]
.text:00404EA4                 cmp     edi, [esp+1Ch+arg_C]
.text:00404EA8                 ja      loc_404DC8
.text:00404EAE                 mov     [esp+1Ch+Src], ebx ; Src
.text:00404EB2                 mov     esi, [esp+1Ch+arg_8]
.text:00404EB6                 lea     ecx, [eax+1]
.text:00404EB9                 mov     [esp+1Ch+Size], ecx ; Size
.text:00404EBD                 add     esi, ebp
.text:00404EBF                 mov     [esp+1Ch+Str], esi ; void *
.text:00404EC2                 call    memcpy
.text:00404EC7                 mov     ebx, [esp+1Ch+arg_4]
.text:00404ECB                 mov     [ebx+18h], eax
.text:00404ECE                 call    sub_404F90
.text:00404ED3                 mov     [esp+1Ch+Str], eax ; Str
.text:00404ED6                 mov     ebx, eax
.text:00404ED8                 call    strlen
.text:00404EDD                 lea     esi, [eax+edi+1]
.text:00404EE1                 cmp     esi, [esp+1Ch+arg_C]
.text:00404EE5                 ja      loc_404DC8
.text:00404EEB                 mov     [esp+1Ch+Src], ebx ; Src
.text:00404EEF                 mov     ecx, [esp+1Ch+arg_8]
.text:00404EF3                 lea     ebp, [eax+1]
.text:00404EF6                 mov     [esp+1Ch+Size], ebp ; Size
.text:00404EFA                 add     ecx, edi
.text:00404EFC                 mov     [esp+1Ch+Str], ecx ; void *
.text:00404EFF                 call    memcpy
.text:00404F04                 mov     edi, [esp+1Ch+arg_4]
.text:00404F08                 mov     ebx, Src
.text:00404F0E                 mov     [edi+10h], eax
.text:00404F11                 mov     [esp+1Ch+Str], ebx ; Str
.text:00404F14                 call    strlen
.text:00404F19                 lea     ebp, [eax+esi+1]
.text:00404F1D                 cmp     ebp, [esp+1Ch+arg_C]
.text:00404F21                 ja      loc_404DC8
.text:00404F27                 mov     [esp+1Ch+Src], ebx ; Src
.text:00404F2B                 mov     edi, [esp+1Ch+arg_8]
.text:00404F2F                 lea     ecx, [eax+1]
.text:00404F32                 mov     [esp+1Ch+Size], ecx ; Size
.text:00404F36                 add     edi, esi
.text:00404F38                 mov     [esp+1Ch+Str], edi ; void *
.text:00404F3B                 call    memcpy
.text:00404F40                 mov     esi, [esp+1Ch+arg_4]
.text:00404F44                 mov     [esi+4], eax
.text:00404F47                 mov     edx, [esp+1Ch+arg_8]
.text:00404F4B                 mov     [esp+1Ch+Str], edx ; Str
.text:00404F4E                 call    strlen
.text:00404F53                 mov     eax, [esp+1Ch+arg_4]
.text:00404F57                 mov     ebx, [esp+1Ch+arg_10]
.text:00404F5B                 mov     [ebx], eax
.text:00404F5D                 xor     eax, eax
.text:00404F5F                 jmp     loc_404DD8
.text:00404F64 ; ---------------------------------------------------------------------------
.text:00404F64
.text:00404F64 loc_404F64:                             ; CODE XREF: sub_404DA0+F2↑j
.text:00404F64                 mov     [esp+1Ch+Str], offset aComspec ; "COMSPEC"
.text:00404F6B                 call    getenv
.text:00404F70                 test    eax, eax
.text:00404F72                 mov     ebx, eax
.text:00404F74                 jnz     loc_404E98
.text:00404F7A                 mov     ebx, off_406054
.text:00404F80                 jmp     loc_404E98
.text:00404F85 ; ---------------------------------------------------------------------------
.text:00404F85
.text:00404F85 loc_404F85:                             ; CODE XREF: sub_404DA0+A6↑j
.text:00404F85                 mov     ebx, offset aC  ; "C:/"
.text:00404F8A                 jmp     loc_404E4C
.text:00404F8A sub_404DA0      endp
.text:00404F8A
.text:00404F8A ; ---------------------------------------------------------------------------
.text:00404F8F                 align 10h
.text:00404F90
.text:00404F90 ; =============== S U B R O U T I N E =======================================
.text:00404F90
.text:00404F90
.text:00404F90 sub_404F90      proc near               ; CODE XREF: sub_404DA0+12E↑p
.text:00404F90
.text:00404F90 lpBuffer        = dword ptr -1Ch
.text:00404F90 pcbBuffer       = dword ptr -18h
.text:00404F90 var_8           = dword ptr -8
.text:00404F90 var_4           = dword ptr -4
.text:00404F90
.text:00404F90                 sub     esp, 1Ch
.text:00404F93                 lea     edx, [esp+1Ch+var_8]
.text:00404F97                 mov     [esp+1Ch+pcbBuffer], edx ; pcbBuffer
.text:00404F9B                 mov     [esp+1Ch+var_4], ebx
.text:00404F9F                 mov     [esp+1Ch+var_8], 101h
.text:00404FA7                 mov     [esp+1Ch+lpBuffer], offset byte_4075B0 ; lpBuffer
.text:00404FAE                 call    GetUserNameA
.text:00404FB3                 sub     esp, 8
.text:00404FB6                 mov     edx, offset byte_4075B0
.text:00404FBB                 test    eax, eax
.text:00404FBD                 jz      short loc_404FC9
.text:00404FBF
.text:00404FBF loc_404FBF:                             ; CODE XREF: sub_404F90+49↓j
.text:00404FBF                 mov     ebx, [esp+1Ch+var_4]
.text:00404FC3                 mov     eax, edx
.text:00404FC5                 add     esp, 1Ch
.text:00404FC8                 retn
.text:00404FC9 ; ---------------------------------------------------------------------------
.text:00404FC9
.text:00404FC9 loc_404FC9:                             ; CODE XREF: sub_404F90+2D↑j
.text:00404FC9                 call    sub_405290
.text:00404FCE                 mov     ebx, eax
.text:00404FD0                 call    _errno
.text:00404FD5                 mov     [eax], ebx
.text:00404FD7                 xor     edx, edx
.text:00404FD9                 jmp     short loc_404FBF
.text:00404FD9 sub_404F90      endp
.text:00404FD9
.text:00404FD9 ; ---------------------------------------------------------------------------
.text:00404FDB                 align 10h
.text:00404FE0
.text:00404FE0 ; =============== S U B R O U T I N E =======================================
.text:00404FE0
.text:00404FE0
.text:00404FE0 sub_404FE0      proc near               ; CODE XREF: sub_404DA0+8A↑p
.text:00404FE0                 xor     eax, eax
.text:00404FE2                 retn
.text:00404FE2 sub_404FE0      endp
.text:00404FE2
.text:00404FE2 ; ---------------------------------------------------------------------------
.text:00404FE3                 align 10h
.text:00404FF0
.text:00404FF0 ; =============== S U B R O U T I N E =======================================
.text:00404FF0
.text:00404FF0
.text:00404FF0 sub_404FF0      proc near               ; CODE XREF: sub_404DA0+7E↑p
.text:00404FF0                 xor     eax, eax
.text:00404FF2                 retn
.text:00404FF2 sub_404FF0      endp
.text:00404FF2
.text:00404FF2 ; ---------------------------------------------------------------------------
.text:00404FF3                 align 10h
.text:00405000
.text:00405000 ; =============== S U B R O U T I N E =======================================
.text:00405000
.text:00405000 ; Attributes: info_from_lumina
.text:00405000
.text:00405000 ___get_errno    proc near               ; CODE XREF: sub_405290+B↓p
.text:00405000
.text:00405000 arg_0           = dword ptr  4
.text:00405000
.text:00405000                 mov     eax, [esp+arg_0]
.text:00405004                 cmp     eax, 53h ; 'S'
.text:00405007                 jg      loc_405100
.text:0040500D                 cmp     eax, 52h ; 'R'
.text:00405010                 jge     short loc_405062
.text:00405012                 cmp     eax, 0Fh
.text:00405015                 jz      short loc_405030
.text:00405017                 cmp     eax, 0Fh
.text:0040501A                 jg      short loc_405090
.text:0040501C                 cmp     eax, 9
.text:0040501F                 jg      short loc_405070
.text:00405021                 cmp     eax, 7
.text:00405024                 jge     short loc_405069
.text:00405026                 cmp     eax, 3
.text:00405029                 jg      short loc_40504A
.text:0040502B                 cmp     eax, 2
.text:0040502E                 jl      short loc_405043
.text:00405030
.text:00405030 loc_405030:                             ; CODE XREF: ___get_errno+15↑j
.text:00405030                                         ; ___get_errno+9D↓j ...
.text:00405030                 mov     edx, 2
.text:00405035                 lea     esi, [esi+0]
.text:00405039                 lea     edi, [edi+0]
.text:00405040
.text:00405040 loc_405040:                             ; CODE XREF: ___get_errno+48↓j
.text:00405040                                         ; ___get_errno+59↓j ...
.text:00405040                 mov     eax, edx
.text:00405042                 retn
.text:00405043 ; ---------------------------------------------------------------------------
.text:00405043
.text:00405043 loc_405043:                             ; CODE XREF: ___get_errno+2E↑j
.text:00405043                                         ; ___get_errno+78↓j ...
.text:00405043                 mov     edx, 16h
.text:00405048                 jmp     short loc_405040
.text:0040504A ; ---------------------------------------------------------------------------
.text:0040504A
.text:0040504A loc_40504A:                             ; CODE XREF: ___get_errno+29↑j
.text:0040504A                 cmp     eax, 5
.text:0040504D                 jz      short loc_405062
.text:0040504F                 cmp     eax, 5
.text:00405052                 jg      short loc_40505B
.text:00405054                 mov     edx, 18h
.text:00405059                 jmp     short loc_405040
.text:0040505B ; ---------------------------------------------------------------------------
.text:0040505B
.text:0040505B loc_40505B:                             ; CODE XREF: ___get_errno+52↑j
.text:0040505B                                         ; ___get_errno+180↓j
.text:0040505B                 mov     edx, 9
.text:00405060                 jmp     short loc_405040
.text:00405062 ; ---------------------------------------------------------------------------
.text:00405062
.text:00405062 loc_405062:                             ; CODE XREF: ___get_errno+10↑j
.text:00405062                                         ; ___get_errno+4D↑j ...
.text:00405062                 mov     edx, 0Dh
.text:00405067                 jmp     short loc_405040
.text:00405069 ; ---------------------------------------------------------------------------
.text:00405069
.text:00405069 loc_405069:                             ; CODE XREF: ___get_errno+24↑j
.text:00405069                                         ; ___get_errno+73↓j ...
.text:00405069                 mov     edx, 0Ch
.text:0040506E                 jmp     short loc_405040
.text:00405070 ; ---------------------------------------------------------------------------
.text:00405070
.text:00405070 loc_405070:                             ; CODE XREF: ___get_errno+1F↑j
.text:00405070                 cmp     eax, 0Dh
.text:00405073                 jg      short loc_405069
.text:00405075                 cmp     eax, 0Ch
.text:00405078                 jge     short loc_405043
.text:0040507A                 cmp     eax, 0Ah
.text:0040507D                 mov     edx, 7
.text:00405082                 jz      short loc_405040
.text:00405084                 cmp     eax, 0Bh
.text:00405087                 jnz     short loc_405043
.text:00405089
.text:00405089 loc_405089:                             ; CODE XREF: ___get_errno+21A↓j
.text:00405089                 mov     edx, 8
.text:0040508E                 jmp     short loc_405040
.text:00405090 ; ---------------------------------------------------------------------------
.text:00405090
.text:00405090 loc_405090:                             ; CODE XREF: ___get_errno+1A↑j
.text:00405090                 cmp     eax, 22h ; '"'
.text:00405093                 jg      short loc_4050C4
.text:00405095                 cmp     eax, 16h
.text:00405098                 jge     short loc_405062
.text:0040509A                 cmp     eax, 12h
.text:0040509D                 jz      short loc_405030
.text:0040509F                 cmp     eax, 12h
.text:004050A2                 jg      short loc_4050B5
.text:004050A4                 cmp     eax, 10h
.text:004050A7                 jz      short loc_405062
.text:004050A9                 mov     edx, 12h
.text:004050AE                 cmp     eax, 11h
.text:004050B1
.text:004050B1 loc_4050B1:                             ; CODE XREF: ___get_errno+172↓j
.text:004050B1                                         ; ___get_errno+24C↓j ...
.text:004050B1                 jnz     short loc_405043
.text:004050B3                 jmp     short loc_405040
.text:004050B5 ; ---------------------------------------------------------------------------
.text:004050B5
.text:004050B5 loc_4050B5:                             ; CODE XREF: ___get_errno+A2↑j
.text:004050B5                 cmp     eax, 14h
.text:004050B8                 jle     short loc_405062
.text:004050BA
.text:004050BA loc_4050BA:                             ; CODE XREF: ___get_errno+1D7↓j
.text:004050BA                 mov     edx, 10h
.text:004050BF                 jmp     loc_405040
.text:004050C4 ; ---------------------------------------------------------------------------
.text:004050C4
.text:004050C4 loc_4050C4:                             ; CODE XREF: ___get_errno+93↑j
.text:004050C4                 cmp     eax, 41h ; 'A'
.text:004050C7                 jz      short loc_405062
.text:004050C9                 cmp     eax, 41h ; 'A'
.text:004050CC                 jg      short loc_4050E1
.text:004050CE                 cmp     eax, 24h ; '$'
.text:004050D1                 jz      short loc_405062
.text:004050D3                 cmp     eax, 35h ; '5'
.text:004050D6                 jnz     loc_405043
.text:004050DC                 jmp     loc_405030
.text:004050E1 ; ---------------------------------------------------------------------------
.text:004050E1
.text:004050E1 loc_4050E1:                             ; CODE XREF: ___get_errno+CC↑j
.text:004050E1                 cmp     eax, 43h ; 'C'
.text:004050E4                 jz      loc_405030
.text:004050EA                 cmp     eax, 50h ; 'P'
.text:004050ED                 jnz     loc_405043
.text:004050F3
.text:004050F3 loc_4050F3:                             ; CODE XREF: ___get_errno+1FB↓j
.text:004050F3                 mov     edx, 11h
.text:004050F8                 jmp     loc_405040
.text:004050F8 ; ---------------------------------------------------------------------------
.text:004050FD                 align 10h
.text:00405100
.text:00405100 loc_405100:                             ; CODE XREF: ___get_errno+7↑j
.text:00405100                 cmp     eax, 0A1h ; '¡'
.text:00405105                 jz      loc_405030
.text:0040510B                 cmp     eax, 0A1h ; '¡'
.text:00405110                 jg      loc_4051C0
.text:00405116                 cmp     eax, 81h
.text:0040511B                 jg      short loc_405185
.text:0040511D                 cmp     eax, 80h ; '€'
.text:00405122                 mov     edx, 0Ah
.text:00405127                 jge     loc_405040
.text:0040512D                 cmp     eax, 6Ch ; 'l'
.text:00405130                 jz      loc_405062
.text:00405136                 cmp     eax, 6Ch ; 'l'
.text:00405139                 jg      short loc_405157
.text:0040513B                 cmp     eax, 57h ; 'W'
.text:0040513E                 jz      loc_405043
.text:00405144                 cmp     eax, 59h ; 'Y'
.text:00405147                 jnz     loc_405043
.text:0040514D
.text:0040514D loc_40514D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0040514D                                         ; ___get_errno+23C↓j
.text:0040514D                 mov     edx, 0Bh
.text:00405152                 jmp     loc_405040
.text:00405157 ; ---------------------------------------------------------------------------
.text:00405157
.text:00405157 loc_405157:                             ; CODE XREF: ___get_errno+139↑j
.text:00405157                 cmp     eax, 70h ; 'p'
.text:0040515A                 mov     edx, 1Ch
.text:0040515F                 jz      loc_405040
.text:00405165                 cmp     eax, 70h ; 'p'
.text:00405168                 jg      short loc_405177
.text:0040516A                 mov     edx, 20h ; ' '
.text:0040516F                 cmp     eax, 6Dh ; 'm'
.text:00405172                 jmp     loc_4050B1
.text:00405177 ; ---------------------------------------------------------------------------
.text:00405177
.text:00405177 loc_405177:                             ; CODE XREF: ___get_errno+168↑j
.text:00405177                 cmp     eax, 72h ; 'r'
.text:0040517A
.text:0040517A loc_40517A:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040517A                 jnz     loc_405043
.text:00405180                 jmp     loc_40505B
.text:00405185 ; ---------------------------------------------------------------------------
.text:00405185
.text:00405185 loc_405185:                             ; CODE XREF: ___get_errno+11B↑j
.text:00405185                 cmp     eax, 84h ; '„'
.text:0040518A                 jz      loc_405062
.text:00405190                 cmp     eax, 84h ; '„'
.text:00405195                 jg      short loc_40519E
.text:00405197                 cmp     eax, 82h ; '‚'
.text:0040519C                 jmp     short loc_40517A
.text:0040519E ; ---------------------------------------------------------------------------
.text:0040519E
.text:0040519E loc_40519E:                             ; CODE XREF: ___get_errno+195↑j
.text:0040519E                 cmp     eax, 91h ; '‘'
.text:004051A3                 mov     edx, 29h ; ')'
.text:004051A8                 jz      loc_405040
.text:004051AE                 cmp     eax, 9Eh ; 'ž'
.text:004051B3
.text:004051B3 loc_4051B3:                             ; CODE XREF: ___get_errno+1F4↓j
.text:004051B3                 jnz     loc_405043
.text:004051B9                 jmp     loc_405062
.text:004051B9 ; ---------------------------------------------------------------------------
.text:004051BE                 align 10h
.text:004051C0
.text:004051C0 loc_4051C0:                             ; CODE XREF: ___get_errno+110↑j
.text:004051C0                 cmp     eax, 0CEh ; 'Î'
.text:004051C5                 jz      loc_405030
.text:004051CB                 cmp     eax, 0CEh ; 'Î'
.text:004051D0                 jg      short loc_405220
.text:004051D2                 cmp     eax, 0AAh ; 'ª'
.text:004051D7                 jz      loc_4050BA
.text:004051DD                 cmp     eax, 0AAh ; 'ª'
.text:004051E2                 jg      short loc_4051F6
.text:004051E4                 cmp     eax, 0A4h ; '¤'
.text:004051E9                 jz      loc_40514D
.text:004051EF                 cmp     eax, 0A7h ; '§'
.text:004051F4                 jmp     short loc_4051B3
.text:004051F6 ; ---------------------------------------------------------------------------
.text:004051F6
.text:004051F6 loc_4051F6:                             ; CODE XREF: ___get_errno+1E2↑j
.text:004051F6                 cmp     eax, 0B7h ; '·'
.text:004051FB                 jz      loc_4050F3
.text:00405201                 cmp     eax, 0B7h ; '·'
.text:00405206                 jl      loc_405043
.text:0040520C                 sub     eax, 0BCh ; '¼'
.text:00405211                 cmp     eax, 0Eh
.text:00405214                 ja      loc_405043
.text:0040521A                 jmp     loc_405089
.text:0040521A ; ---------------------------------------------------------------------------
.text:0040521F                 align 10h
.text:00405220
.text:00405220 loc_405220:                             ; CODE XREF: ___get_errno+1D0↑j
.text:00405220                 cmp     eax, 46Bh
.text:00405225                 mov     edx, 24h ; '$'
.text:0040522A                 jz      loc_405040
.text:00405230                 cmp     eax, 46Bh
.text:00405235                 jg      short loc_405251
.text:00405237                 cmp     eax, 0D7h ; '×'
.text:0040523C                 jz      loc_40514D
.text:00405242                 mov     edx, 5
.text:00405247                 cmp     eax, 45Dh
.text:0040524C                 jmp     loc_4050B1
.text:00405251 ; ---------------------------------------------------------------------------
.text:00405251
.text:00405251 loc_405251:                             ; CODE XREF: ___get_errno+235↑j
.text:00405251                 cmp     eax, 4D5h
.text:00405256                 mov     edx, 4
.text:0040525B                 jz      loc_405040
.text:00405261                 cmp     eax, 4D5h
.text:00405266                 jg      short loc_405277
.text:00405268                 mov     edx, 13h
.text:0040526D                 cmp     eax, 4B0h
.text:00405272                 jmp     loc_4050B1
.text:00405277 ; ---------------------------------------------------------------------------
.text:00405277
.text:00405277 loc_405277:                             ; CODE XREF: ___get_errno+266↑j
.text:00405277                 cmp     eax, 718h
.text:0040527C                 jnz     loc_405043
.text:00405282                 jmp     loc_405069
.text:00405282 ___get_errno    endp
.text:00405282
.text:00405282 ; ---------------------------------------------------------------------------
.text:00405287                 align 10h
.text:00405290
.text:00405290 ; =============== S U B R O U T I N E =======================================
.text:00405290
.text:00405290
.text:00405290 sub_405290      proc near               ; CODE XREF: sub_404F90:loc_404FC9↑p
.text:00405290
.text:00405290 var_C           = dword ptr -0Ch
.text:00405290
.text:00405290                 sub     esp, 0Ch
.text:00405293                 call    GetLastError
.text:00405298                 mov     [esp+0Ch+var_C], eax
.text:0040529B                 call    ___get_errno
.text:004052A0                 add     esp, 0Ch
.text:004052A3                 retn
.text:004052A3 sub_405290      endp
.text:004052A3
.text:004052A3 ; ---------------------------------------------------------------------------
.text:004052A4                 align 10h
.text:004052B0
.text:004052B0 ; =============== S U B R O U T I N E =======================================
.text:004052B0
.text:004052B0 ; Attributes: thunk
.text:004052B0
.text:004052B0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:004052B0 mbrtowc         proc near               ; CODE XREF: sub_402EC0+757↑p
.text:004052B0
.text:004052B0 DstCh           = dword ptr  4
.text:004052B0 SrcCh           = dword ptr  8
.text:004052B0 SizeInBytes     = dword ptr  0Ch
.text:004052B0 State           = dword ptr  10h
.text:004052B0
.text:004052B0                 jmp     ds:__imp_mbrtowc
.text:004052B0 mbrtowc         endp
.text:004052B0
.text:004052B0 ; ---------------------------------------------------------------------------
.text:004052B6                 align 10h
.text:004052C0
.text:004052C0 ; =============== S U B R O U T I N E =======================================
.text:004052C0
.text:004052C0 ; Attributes: bp-based frame
.text:004052C0
.text:004052C0 sub_4052C0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:004052C0                 push    ebp
.text:004052C1                 mov     ecx, offset dword_407000
.text:004052C6                 cmp     ecx, offset dword_407000
.text:004052CC                 mov     ebp, esp
.text:004052CE                 jnb     short loc_4052E6
.text:004052D0
.text:004052D0 loc_4052D0:                             ; CODE XREF: sub_4052C0+24↓j
.text:004052D0                 mov     edx, [ecx+4]
.text:004052D3                 mov     eax, [ecx]
.text:004052D5                 add     ecx, 8
.text:004052D8                 add     [edx+400000h], eax
.text:004052DE                 cmp     ecx, offset dword_407000
.text:004052E4                 jb      short loc_4052D0
.text:004052E6
.text:004052E6 loc_4052E6:                             ; CODE XREF: sub_4052C0+E↑j
.text:004052E6                 pop     ebp
.text:004052E7                 retn
.text:004052E7 sub_4052C0      endp
.text:004052E7
.text:004052E7 ; ---------------------------------------------------------------------------
.text:004052E8                 align 10h
.text:004052F0
.text:004052F0 ; =============== S U B R O U T I N E =======================================
.text:004052F0
.text:004052F0 ; Attributes: bp-based frame
.text:004052F0
.text:004052F0 sub_4052F0      proc near               ; CODE XREF: sub_401080+16↑p
.text:004052F0                                         ; TopLevelExceptionFilter+D7↑p
.text:004052F0                 push    ebp
.text:004052F1                 mov     ebp, esp
.text:004052F3                 fninit
.text:004052F5                 pop     ebp
.text:004052F6                 retn
.text:004052F6 sub_4052F0      endp
.text:004052F6
.text:004052F6 ; ---------------------------------------------------------------------------
.text:004052F7                 align 10h
.text:00405300
.text:00405300 ; =============== S U B R O U T I N E =======================================
.text:00405300
.text:00405300 ; Attributes: bp-based frame
.text:00405300
.text:00405300 ; void __cdecl sub_405300()
.text:00405300 sub_405300      proc near               ; DATA XREF: .text:loc_405349↓o
.text:00405300                                         ; sub_405390:loc_4053BE↓o
.text:00405300                 push    ebp
.text:00405301                 mov     ebp, esp
.text:00405303                 sub     esp, 8
.text:00405306                 mov     eax, off_406094
.text:0040530B                 mov     edx, [eax]
.text:0040530D                 test    edx, edx
.text:0040530F                 jnz     short loc_405315
.text:00405311
.text:00405311 loc_405311:                             ; CODE XREF: sub_405300+2C↓j
.text:00405311                 mov     esp, ebp
.text:00405313                 pop     ebp
.text:00405314                 retn
.text:00405315 ; ---------------------------------------------------------------------------
.text:00405315
.text:00405315 loc_405315:                             ; CODE XREF: sub_405300+F↑j
.text:00405315                                         ; sub_405300+2A↓j
.text:00405315                 call    dword ptr [eax]
.text:00405317                 mov     edx, off_406094
.text:0040531D                 mov     ecx, [edx+4]
.text:00405320                 lea     eax, [edx+4]
.text:00405323                 mov     off_406094, eax
.text:00405328                 test    ecx, ecx
.text:0040532A                 jnz     short loc_405315
.text:0040532C                 jmp     short loc_405311
.text:0040532C sub_405300      endp
.text:0040532C
.text:0040532C ; ---------------------------------------------------------------------------
.text:0040532E                 align 10h
.text:00405330                 push    ebp
.text:00405331                 mov     ebp, esp
.text:00405333                 sub     esp, 8
.text:00405336                 mov     [ebp-4], ebx
.text:00405339                 mov     eax, ds:dword_405680
.text:0040533E                 cmp     eax, 0FFFFFFFFh
.text:00405341                 jz      short loc_40536C
.text:00405343
.text:00405343 loc_405343:                             ; CODE XREF: .text:00405376↓j
.text:00405343                                         ; .text:00405389↓j
.text:00405343                 test    eax, eax
.text:00405345                 mov     ebx, eax
.text:00405347                 jnz     short loc_405360
.text:00405349
.text:00405349 loc_405349:                             ; CODE XREF: .text:0040536A↓j
.text:00405349                 mov     dword ptr [esp], offset sub_405300
.text:00405350                 call    sub_401040
.text:00405355                 mov     ebx, [ebp-4]
.text:00405358                 mov     esp, ebp
.text:0040535A                 pop     ebp
.text:0040535B                 retn
.text:0040535B ; ---------------------------------------------------------------------------
.text:0040535C                 align 10h
.text:00405360
.text:00405360 loc_405360:                             ; CODE XREF: .text:00405347↑j
.text:00405360                                         ; .text:00405368↓j
.text:00405360                 call    ds:dword_405680[ebx*4]
.text:00405367                 dec     ebx
.text:00405368                 jnz     short loc_405360
.text:0040536A                 jmp     short loc_405349
.text:0040536C ; ---------------------------------------------------------------------------
.text:0040536C
.text:0040536C loc_40536C:                             ; CODE XREF: .text:00405341↑j
.text:0040536C                 mov     ecx, ds:dword_405684
.text:00405372                 xor     eax, eax
.text:00405374                 test    ecx, ecx
.text:00405376                 jz      short loc_405343
.text:00405378                 mov     edx, offset dword_405680
.text:0040537D                 lea     esi, [esi+0]
.text:00405380
.text:00405380 loc_405380:                             ; CODE XREF: .text:00405387↓j
.text:00405380                 inc     eax
.text:00405381                 mov     ecx, [edx+eax*4+4]
.text:00405385                 test    ecx, ecx
.text:00405387                 jnz     short loc_405380
.text:00405389                 jmp     short loc_405343
.text:00405389 ; ---------------------------------------------------------------------------
.text:0040538B                 align 10h
.text:00405390
.text:00405390 ; =============== S U B R O U T I N E =======================================
.text:00405390
.text:00405390 ; Attributes: bp-based frame
.text:00405390
.text:00405390 sub_405390      proc near               ; CODE XREF: sub_4013E0+19↑p
.text:00405390
.text:00405390 var_8           = dword ptr -8
.text:00405390 var_4           = dword ptr -4
.text:00405390
.text:00405390                 push    ebp
.text:00405391                 mov     ebp, esp
.text:00405393                 sub     esp, 8
.text:00405396                 mov     [ebp+var_4], ebx
.text:00405399                 mov     edx, dword_406090
.text:0040539F                 test    edx, edx
.text:004053A1                 jnz     short loc_4053CA
.text:004053A3                 mov     eax, ds:dword_405680
.text:004053A8                 mov     edx, 1
.text:004053AD                 mov     dword_406090, edx
.text:004053B3                 cmp     eax, 0FFFFFFFFh
.text:004053B6                 jz      short loc_4053DD
.text:004053B8
.text:004053B8 loc_4053B8:                             ; CODE XREF: sub_405390+57↓j
.text:004053B8                                         ; sub_405390+69↓j
.text:004053B8                 test    eax, eax
.text:004053BA                 mov     ebx, eax
.text:004053BC                 jnz     short loc_4053D1
.text:004053BE
.text:004053BE loc_4053BE:                             ; CODE XREF: sub_405390+4B↓j
.text:004053BE                 mov     [esp+8+var_8], offset sub_405300 ; void (__cdecl *)()
.text:004053C5                 call    sub_401040
.text:004053CA
.text:004053CA loc_4053CA:                             ; CODE XREF: sub_405390+11↑j
.text:004053CA                 mov     ebx, [ebp+var_4]
.text:004053CD                 mov     esp, ebp
.text:004053CF                 pop     ebp
.text:004053D0                 retn
.text:004053D1 ; ---------------------------------------------------------------------------
.text:004053D1
.text:004053D1 loc_4053D1:                             ; CODE XREF: sub_405390+2C↑j
.text:004053D1                                         ; sub_405390+49↓j
.text:004053D1                 call    ds:dword_405680[ebx*4]
.text:004053D8                 dec     ebx
.text:004053D9                 jnz     short loc_4053D1
.text:004053DB                 jmp     short loc_4053BE
.text:004053DD ; ---------------------------------------------------------------------------
.text:004053DD
.text:004053DD loc_4053DD:                             ; CODE XREF: sub_405390+26↑j
.text:004053DD                 mov     ecx, ds:dword_405684
.text:004053E3                 xor     eax, eax
.text:004053E5                 test    ecx, ecx
.text:004053E7                 jz      short loc_4053B8
.text:004053E9                 mov     edx, offset dword_405680
.text:004053EE                 mov     esi, esi
.text:004053F0
.text:004053F0 loc_4053F0:                             ; CODE XREF: sub_405390+67↓j
.text:004053F0                 inc     eax
.text:004053F1                 mov     ebx, [edx+eax*4+4]
.text:004053F5                 test    ebx, ebx
.text:004053F7                 jnz     short loc_4053F0
.text:004053F9                 jmp     short loc_4053B8
.text:004053F9 sub_405390      endp
.text:004053F9
.text:004053F9 ; ---------------------------------------------------------------------------
.text:004053FB                 align 10h
.text:00405400
.text:00405400 ; =============== S U B R O U T I N E =======================================
.text:00405400
.text:00405400 ; Attributes: info_from_lumina
.text:00405400
.text:00405400 ; void *__cdecl _alloca(size_t Size)
.text:00405400 __alloca        proc near               ; CODE XREF: sub_4013E0+14↑p
.text:00405400                 push    ecx
.text:00405401                 mov     ecx, esp
.text:00405403                 add     ecx, 8
.text:00405406
.text:00405406 loc_405406:                             ; CODE XREF: __alloca+1B↓j
.text:00405406                 cmp     eax, 1000h
.text:0040540B                 jb      short loc_40541D
.text:0040540D                 sub     ecx, 1000h
.text:00405413                 or      dword ptr [ecx], 0
.text:00405416                 sub     eax, 1000h
.text:0040541B                 jmp     short loc_405406
.text:0040541D ; ---------------------------------------------------------------------------
.text:0040541D
.text:0040541D loc_40541D:                             ; CODE XREF: __alloca+B↑j
.text:0040541D                 sub     ecx, eax
.text:0040541F                 or      dword ptr [ecx], 0
.text:00405422                 mov     eax, esp
.text:00405424                 mov     esp, ecx
.text:00405426                 mov     ecx, [eax]
.text:00405428                 mov     eax, [eax+4]
.text:0040542B                 jmp     eax
.text:0040542B __alloca        endp
.text:0040542B
.text:0040542B ; ---------------------------------------------------------------------------
.text:0040542D                 align 10h
.text:00405430
.text:00405430 ; =============== S U B R O U T I N E =======================================
.text:00405430
.text:00405430 ; Attributes: thunk
.text:00405430
.text:00405430 ; intptr_t __cdecl execvp(const char *FileName, const char *const *Arguments)
.text:00405430 _execvp         proc near               ; CODE XREF: sub_4013E0+1EF↑p
.text:00405430
.text:00405430 FileName        = dword ptr  4
.text:00405430 Arguments       = dword ptr  8
.text:00405430
.text:00405430                 jmp     ds:__imp__execvp
.text:00405430 _execvp         endp
.text:00405430
.text:00405430 ; ---------------------------------------------------------------------------
.text:00405436                 align 10h
.text:00405440                 jmp     ds:__set_app_type
.text:00405440 ; ---------------------------------------------------------------------------
.text:00405446                 align 10h
.text:00405450
.text:00405450 ; =============== S U B R O U T I N E =======================================
.text:00405450
.text:00405450 ; Attributes: thunk
.text:00405450
.text:00405450 ; void __cdecl cexit()
.text:00405450 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00405450                 jmp     ds:__imp__cexit
.text:00405450 _cexit          endp
.text:00405450
.text:00405450 ; ---------------------------------------------------------------------------
.text:00405456                 align 10h
.text:00405460
.text:00405460 ; =============== S U B R O U T I N E =======================================
.text:00405460
.text:00405460 ; Attributes: thunk
.text:00405460
.text:00405460 ; char ***__cdecl _p__environ()
.text:00405460 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00405460                 jmp     ds:__imp___p__environ
.text:00405460 __p__environ    endp
.text:00405460
.text:00405460 ; ---------------------------------------------------------------------------
.text:00405466                 align 10h
.text:00405470
.text:00405470 ; =============== S U B R O U T I N E =======================================
.text:00405470
.text:00405470 ; Attributes: thunk
.text:00405470
.text:00405470 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00405470 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00405470                                         ; TopLevelExceptionFilter+88↑p ...
.text:00405470
.text:00405470 Signal          = dword ptr  4
.text:00405470 Function        = dword ptr  8
.text:00405470
.text:00405470                 jmp     ds:__imp_signal
.text:00405470 signal          endp
.text:00405470
.text:00405470 ; ---------------------------------------------------------------------------
.text:00405476                 align 10h
.text:00405480
.text:00405480 ; =============== S U B R O U T I N E =======================================
.text:00405480
.text:00405480 ; Attributes: thunk
.text:00405480
.text:00405480 ; int *__cdecl _p__fmode()
.text:00405480 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00405480                 jmp     ds:__imp___p__fmode
.text:00405480 __p__fmode      endp
.text:00405480
.text:00405480 ; ---------------------------------------------------------------------------
.text:00405486                 align 10h
.text:00405490
.text:00405490 ; =============== S U B R O U T I N E =======================================
.text:00405490
.text:00405490 ; Attributes: thunk
.text:00405490
.text:00405490 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00405490 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00405490                                         ; sub_401080+90↑p ...
.text:00405490
.text:00405490 FileHandle      = dword ptr  4
.text:00405490 Mode            = dword ptr  8
.text:00405490
.text:00405490                 jmp     ds:__imp__setmode
.text:00405490 _setmode        endp
.text:00405490
.text:00405490 ; ---------------------------------------------------------------------------
.text:00405496                 align 10h
.text:004054A0
.text:004054A0 ; =============== S U B R O U T I N E =======================================
.text:004054A0
.text:004054A0 ; Attributes: thunk
.text:004054A0
.text:004054A0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:004054A0                 jmp     ds:__imp___getmainargs
.text:004054A0 __getmainargs   endp
.text:004054A0
.text:004054A0 ; ---------------------------------------------------------------------------
.text:004054A6                 align 10h
.text:004054B0
.text:004054B0 ; =============== S U B R O U T I N E =======================================
.text:004054B0
.text:004054B0 ; Attributes: thunk
.text:004054B0
.text:004054B0 ; int *__cdecl errno()
.text:004054B0 _errno          proc near               ; CODE XREF: sub_4013E0+1F4↑p
.text:004054B0                                         ; sub_4013E0+221↑p ...
.text:004054B0                 jmp     ds:__imp__errno
.text:004054B0 _errno          endp
.text:004054B0
.text:004054B0 ; ---------------------------------------------------------------------------
.text:004054B6                 align 10h
.text:004054C0
.text:004054C0 ; =============== S U B R O U T I N E =======================================
.text:004054C0
.text:004054C0 ; Attributes: thunk
.text:004054C0
.text:004054C0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:004054C0 setlocale       proc near               ; CODE XREF: sub_4013E0+35↑p
.text:004054C0
.text:004054C0 Category        = dword ptr  4
.text:004054C0 Locale          = dword ptr  8
.text:004054C0
.text:004054C0                 jmp     ds:__imp_setlocale
.text:004054C0 setlocale       endp
.text:004054C0
.text:004054C0 ; ---------------------------------------------------------------------------
.text:004054C6                 align 10h
.text:004054D0
.text:004054D0 ; =============== S U B R O U T I N E =======================================
.text:004054D0
.text:004054D0 ; Attributes: noreturn thunk
.text:004054D0
.text:004054D0 ; void __cdecl __noreturn exit(int Code)
.text:004054D0 exit            proc near               ; CODE XREF: sub_4013E0:loc_401521↑p
.text:004054D0                                         ; sub_401950+3E↑p ...
.text:004054D0
.text:004054D0 Code            = dword ptr  4
.text:004054D0
.text:004054D0                 jmp     ds:__imp_exit
.text:004054D0 exit            endp
.text:004054D0
.text:004054D0 ; ---------------------------------------------------------------------------
.text:004054D6                 align 10h
.text:004054E0
.text:004054E0 ; =============== S U B R O U T I N E =======================================
.text:004054E0
.text:004054E0 ; Attributes: thunk
.text:004054E0
.text:004054E0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:004054E0 fputs           proc near               ; CODE XREF: sub_401950+83↑p
.text:004054E0                                         ; sub_401950+A5↑p ...
.text:004054E0
.text:004054E0 Buffer          = dword ptr  4
.text:004054E0 Stream          = dword ptr  8
.text:004054E0
.text:004054E0                 jmp     ds:__imp_fputs
.text:004054E0 fputs           endp
.text:004054E0
.text:004054E0 ; ---------------------------------------------------------------------------
.text:004054E6                 align 10h
.text:004054F0
.text:004054F0 ; =============== S U B R O U T I N E =======================================
.text:004054F0
.text:004054F0 ; Attributes: thunk
.text:004054F0
.text:004054F0 ; int printf(const char *const Format, ...)
.text:004054F0 printf          proc near               ; CODE XREF: sub_401950+61↑p
.text:004054F0                                         ; sub_401950+E4↑p
.text:004054F0
.text:004054F0 Format          = dword ptr  4
.text:004054F0
.text:004054F0                 jmp     ds:__imp_printf
.text:004054F0 printf          endp
.text:004054F0
.text:004054F0 ; ---------------------------------------------------------------------------
.text:004054F6                 align 10h
.text:00405500
.text:00405500 ; =============== S U B R O U T I N E =======================================
.text:00405500
.text:00405500 ; Attributes: thunk
.text:00405500
.text:00405500 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00405500 fprintf         proc near               ; CODE XREF: sub_4013E0+135↑p
.text:00405500                                         ; sub_401950+36↑p ...
.text:00405500
.text:00405500 Stream          = dword ptr  4
.text:00405500 Format          = dword ptr  8
.text:00405500
.text:00405500                 jmp     ds:__imp_fprintf
.text:00405500 fprintf         endp
.text:00405500
.text:00405500 ; ---------------------------------------------------------------------------
.text:00405506                 align 10h
.text:00405510
.text:00405510 ; =============== S U B R O U T I N E =======================================
.text:00405510
.text:00405510 ; Attributes: thunk
.text:00405510
.text:00405510 ; size_t __cdecl strlen(const char *Str)
.text:00405510 strlen          proc near               ; CODE XREF: sub_401C90+2A9↑p
.text:00405510                                         ; sub_401C90+346↑p ...
.text:00405510
.text:00405510 Str             = dword ptr  4
.text:00405510
.text:00405510                 jmp     ds:__imp_strlen
.text:00405510 strlen          endp
.text:00405510
.text:00405510 ; ---------------------------------------------------------------------------
.text:00405516                 align 10h
.text:00405520
.text:00405520 ; =============== S U B R O U T I N E =======================================
.text:00405520
.text:00405520 ; Attributes: thunk
.text:00405520
.text:00405520 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00405520 strncmp         proc near               ; CODE XREF: sub_401C90+23F↑p
.text:00405520                                         ; sub_401C90+699↑p
.text:00405520
.text:00405520 Str1            = dword ptr  4
.text:00405520 Str2            = dword ptr  8
.text:00405520 MaxCount        = dword ptr  0Ch
.text:00405520
.text:00405520                 jmp     ds:__imp_strncmp
.text:00405520 strncmp         endp
.text:00405520
.text:00405520 ; ---------------------------------------------------------------------------
.text:00405526                 align 10h
.text:00405530
.text:00405530 ; =============== S U B R O U T I N E =======================================
.text:00405530
.text:00405530 ; Attributes: thunk
.text:00405530
.text:00405530 ; char *__cdecl getenv(const char *VarName)
.text:00405530 getenv          proc near               ; CODE XREF: sub_401C90+B57↑p
.text:00405530                                         ; sub_404DA0+9D↑p ...
.text:00405530
.text:00405530 VarName         = dword ptr  4
.text:00405530
.text:00405530                 jmp     ds:__imp_getenv
.text:00405530 getenv          endp
.text:00405530
.text:00405530 ; ---------------------------------------------------------------------------
.text:00405536                 align 10h
.text:00405540
.text:00405540 ; =============== S U B R O U T I N E =======================================
.text:00405540
.text:00405540 ; Attributes: thunk
.text:00405540
.text:00405540 ; char *__cdecl strchr(const char *Str, int Val)
.text:00405540 strchr          proc near               ; CODE XREF: sub_401C90+469↑p
.text:00405540                                         ; sub_401C90+53A↑p ...
.text:00405540
.text:00405540 Str             = dword ptr  4
.text:00405540 Val             = dword ptr  8
.text:00405540
.text:00405540                 jmp     ds:__imp_strchr
.text:00405540 strchr          endp
.text:00405540
.text:00405540 ; ---------------------------------------------------------------------------
.text:00405546                 align 10h
.text:00405550
.text:00405550 ; =============== S U B R O U T I N E =======================================
.text:00405550
.text:00405550 ; Attributes: thunk
.text:00405550
.text:00405550 ; int __cdecl fclose(FILE *Stream)
.text:00405550 fclose          proc near               ; CODE XREF: sub_402D50+27↑p
.text:00405550
.text:00405550 Stream          = dword ptr  4
.text:00405550
.text:00405550                 jmp     ds:__imp_fclose
.text:00405550 fclose          endp
.text:00405550
.text:00405550 ; ---------------------------------------------------------------------------
.text:00405556                 align 10h
.text:00405560
.text:00405560 ; =============== S U B R O U T I N E =======================================
.text:00405560
.text:00405560 ; Attributes: thunk
.text:00405560
.text:00405560 ; void __cdecl free(void *Block)
.text:00405560 free            proc near               ; CODE XREF: sub_404000+112↑p
.text:00405560
.text:00405560 Block           = dword ptr  4
.text:00405560
.text:00405560                 jmp     ds:__imp_free
.text:00405560 free            endp
.text:00405560
.text:00405560 ; ---------------------------------------------------------------------------
.text:00405566                 align 10h
.text:00405570
.text:00405570 ; =============== S U B R O U T I N E =======================================
.text:00405570
.text:00405570 ; Attributes: noreturn thunk
.text:00405570
.text:00405570 ; void __cdecl __noreturn abort()
.text:00405570 abort           proc near               ; CODE XREF: sub_404000:loc_4041BA↑p
.text:00405570                                         ; sub_4044C0:loc_40455C↑p ...
.text:00405570                 jmp     ds:__imp_abort
.text:00405570 abort           endp
.text:00405570
.text:00405570 ; ---------------------------------------------------------------------------
.text:00405576                 align 10h
.text:00405580
.text:00405580 ; =============== S U B R O U T I N E =======================================
.text:00405580
.text:00405580 ; Attributes: thunk
.text:00405580
.text:00405580 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00405580 iswctype        proc near               ; CODE XREF: sub_402EC0+78B↑p
.text:00405580
.text:00405580 C               = word ptr  4
.text:00405580 Type            = word ptr  8
.text:00405580
.text:00405580                 jmp     ds:__imp_iswctype
.text:00405580 iswctype        endp
.text:00405580
.text:00405580 ; ---------------------------------------------------------------------------
.text:00405586                 align 10h
.text:00405590
.text:00405590 ; =============== S U B R O U T I N E =======================================
.text:00405590
.text:00405590 ; Attributes: thunk
.text:00405590
.text:00405590 ; int __cdecl isctype(int C, int Type)
.text:00405590 _isctype        proc near               ; CODE XREF: sub_402EC0+610↑p
.text:00405590
.text:00405590 C               = dword ptr  4
.text:00405590 Type            = dword ptr  8
.text:00405590
.text:00405590                 jmp     ds:__imp__isctype
.text:00405590 _isctype        endp
.text:00405590
.text:00405590 ; ---------------------------------------------------------------------------
.text:00405596                 align 10h
.text:004055A0
.text:004055A0 ; =============== S U B R O U T I N E =======================================
.text:004055A0
.text:004055A0 ; Attributes: thunk
.text:004055A0
.text:004055A0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:004055A0 vfprintf        proc near               ; CODE XREF: sub_4044C0+C1↑p
.text:004055A0                                         ; sub_404A50+49↑p ...
.text:004055A0
.text:004055A0 Stream          = dword ptr  4
.text:004055A0 Format          = dword ptr  8
.text:004055A0 ArgList         = dword ptr  0Ch
.text:004055A0
.text:004055A0                 jmp     ds:__imp_vfprintf
.text:004055A0 vfprintf        endp
.text:004055A0
.text:004055A0 ; ---------------------------------------------------------------------------
.text:004055A6                 align 10h
.text:004055B0
.text:004055B0 ; =============== S U B R O U T I N E =======================================
.text:004055B0
.text:004055B0 ; Attributes: thunk
.text:004055B0
.text:004055B0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:004055B0 _flsbuf         proc near               ; CODE XREF: sub_4044C0+128↑p
.text:004055B0                                         ; sub_4044C0+13A↑p ...
.text:004055B0
.text:004055B0 File            = dword ptr  8
.text:004055B0
.text:004055B0                 jmp     ds:__imp__flsbuf
.text:004055B0 _flsbuf         endp
.text:004055B0
.text:004055B0 ; ---------------------------------------------------------------------------
.text:004055B6                 align 10h
.text:004055C0
.text:004055C0 ; =============== S U B R O U T I N E =======================================
.text:004055C0
.text:004055C0 ; Attributes: thunk
.text:004055C0
.text:004055C0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:004055C0 memcpy          proc near               ; CODE XREF: .text:004048B8↑p
.text:004055C0                                         ; .text:00404901↑p ...
.text:004055C0
.text:004055C0 Src             = dword ptr  8
.text:004055C0 Size            = dword ptr  0Ch
.text:004055C0
.text:004055C0                 jmp     ds:__imp_memcpy
.text:004055C0 memcpy          endp
.text:004055C0
.text:004055C0 ; ---------------------------------------------------------------------------
.text:004055C6                 align 10h
.text:004055D0
.text:004055D0 ; =============== S U B R O U T I N E =======================================
.text:004055D0
.text:004055D0 ; Attributes: thunk
.text:004055D0
.text:004055D0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:004055D0 memset          proc near               ; CODE XREF: .text:00404836↑p
.text:004055D0
.text:004055D0 Val             = dword ptr  8
.text:004055D0 Size            = dword ptr  0Ch
.text:004055D0
.text:004055D0                 jmp     ds:__imp_memset
.text:004055D0 memset          endp
.text:004055D0
.text:004055D0 ; ---------------------------------------------------------------------------
.text:004055D6                 align 10h
.text:004055E0
.text:004055E0 ; =============== S U B R O U T I N E =======================================
.text:004055E0
.text:004055E0 ; Attributes: thunk
.text:004055E0
.text:004055E0 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:004055E0 calloc          proc near               ; CODE XREF: .text:00404873↑p
.text:004055E0
.text:004055E0 Count           = dword ptr  4
.text:004055E0 Size            = dword ptr  8
.text:004055E0
.text:004055E0                 jmp     ds:__imp_calloc
.text:004055E0 calloc          endp
.text:004055E0
.text:004055E0 ; ---------------------------------------------------------------------------
.text:004055E6                 align 10h
.text:004055F0
.text:004055F0 ; =============== S U B R O U T I N E =======================================
.text:004055F0
.text:004055F0 ; Attributes: thunk
.text:004055F0
.text:004055F0 ; void *__cdecl realloc(void *Block, size_t Size)
.text:004055F0 realloc         proc near               ; CODE XREF: .text:00404770↑p
.text:004055F0                                         ; sub_4047A0+16↑p ...
.text:004055F0
.text:004055F0 Block           = dword ptr  4
.text:004055F0 Size            = dword ptr  8
.text:004055F0
.text:004055F0                 jmp     ds:__imp_realloc
.text:004055F0 realloc         endp
.text:004055F0
.text:004055F0 ; ---------------------------------------------------------------------------
.text:004055F6                 align 10h
.text:00405600
.text:00405600 ; =============== S U B R O U T I N E =======================================
.text:00405600
.text:00405600 ; Attributes: thunk
.text:00405600
.text:00405600 ; void *__cdecl malloc(size_t Size)
.text:00405600 malloc          proc near               ; CODE XREF: .text:004046F4↑p
.text:00405600                                         ; sub_404710+E↑p ...
.text:00405600
.text:00405600 Size            = dword ptr  4
.text:00405600
.text:00405600                 jmp     ds:__imp_malloc
.text:00405600 malloc          endp
.text:00405600
.text:00405600 ; ---------------------------------------------------------------------------
.text:00405606                 align 10h
.text:00405610
.text:00405610 ; =============== S U B R O U T I N E =======================================
.text:00405610
.text:00405610 ; Attributes: thunk
.text:00405610
.text:00405610 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00405610 strcmp          proc near               ; CODE XREF: sub_404B54+180↑p
.text:00405610
.text:00405610 Str1            = dword ptr  4
.text:00405610 Str2            = dword ptr  8
.text:00405610
.text:00405610                 jmp     ds:__imp_strcmp
.text:00405610 strcmp          endp
.text:00405610
.text:00405610 ; ---------------------------------------------------------------------------
.text:00405616                 align 10h
.text:00405620
.text:00405620 ; =============== S U B R O U T I N E =======================================
.text:00405620
.text:00405620 ; Attributes: thunk
.text:00405620
.text:00405620 ; int __cdecl fflush(FILE *Stream)
.text:00405620 fflush          proc near               ; CODE XREF: sub_404A50+19↑p
.text:00405620                                         ; sub_404A50+81↑p ...
.text:00405620
.text:00405620 Stream          = dword ptr  4
.text:00405620
.text:00405620                 jmp     ds:__imp_fflush
.text:00405620 fflush          endp
.text:00405620
.text:00405620 ; ---------------------------------------------------------------------------
.text:00405626                 align 10h
.text:00405630
.text:00405630 ; =============== S U B R O U T I N E =======================================
.text:00405630
.text:00405630 ; Attributes: thunk
.text:00405630
.text:00405630 ; char *__cdecl strerror(int ErrorMessage)
.text:00405630 strerror        proc near               ; CODE XREF: sub_404A50+A5↑p
.text:00405630                                         ; sub_404B54+10F↑p
.text:00405630
.text:00405630 ErrorMessage    = dword ptr  4
.text:00405630
.text:00405630                 jmp     ds:__imp_strerror
.text:00405630 strerror        endp
.text:00405630
.text:00405630 ; ---------------------------------------------------------------------------
.text:00405636                 align 10h
.text:00405640
.text:00405640 ; =============== S U B R O U T I N E =======================================
.text:00405640
.text:00405640 ; Attributes: thunk
.text:00405640
.text:00405640 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00405640 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00405640
.text:00405640 lpTopLevelExceptionFilter= dword ptr  4
.text:00405640
.text:00405640                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00405640 SetUnhandledExceptionFilter endp
.text:00405640
.text:00405640 ; ---------------------------------------------------------------------------
.text:00405646                 align 10h
.text:00405650
.text:00405650 ; =============== S U B R O U T I N E =======================================
.text:00405650
.text:00405650 ; Attributes: noreturn thunk
.text:00405650
.text:00405650 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00405650 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00405650
.text:00405650 uExitCode       = dword ptr  4
.text:00405650
.text:00405650                 jmp     ds:__imp_ExitProcess
.text:00405650 ExitProcess     endp
.text:00405650
.text:00405650 ; ---------------------------------------------------------------------------
.text:00405656                 align 10h
.text:00405660
.text:00405660 ; =============== S U B R O U T I N E =======================================
.text:00405660
.text:00405660 ; Attributes: thunk
.text:00405660
.text:00405660 ; DWORD __stdcall GetLastError()
.text:00405660 GetLastError    proc near               ; CODE XREF: sub_405290+3↑p
.text:00405660                 jmp     ds:__imp_GetLastError
.text:00405660 GetLastError    endp
.text:00405660
.text:00405660 ; ---------------------------------------------------------------------------
.text:00405666                 align 10h
.text:00405670
.text:00405670 ; =============== S U B R O U T I N E =======================================
.text:00405670
.text:00405670 ; Attributes: thunk
.text:00405670
.text:00405670 ; BOOL __stdcall GetUserNameA(LPSTR lpBuffer, LPDWORD pcbBuffer)
.text:00405670 GetUserNameA    proc near               ; CODE XREF: sub_404F90+1E↑p
.text:00405670
.text:00405670 lpBuffer        = dword ptr  4
.text:00405670 pcbBuffer       = dword ptr  8
.text:00405670
.text:00405670                 jmp     ds:__imp_GetUserNameA
.text:00405670 GetUserNameA    endp
.text:00405670
.text:00405670 ; ---------------------------------------------------------------------------
.text:00405676                 align 10h
.text:00405680 dword_405680    dd 0FFFFFFFFh           ; DATA XREF: .text:00405339↑r
.text:00405680                                         ; .text:loc_405360↑r ...
.text:00405684 dword_405684    dd 0                    ; DATA XREF: .text:loc_40536C↑r
.text:00405684                                         ; sub_405390:loc_4053DD↑r
.text:00405688                 dd 0FFFFFFFFh
.text:0040568C dword_40568C    dd 5Dh dup(0)           ; DATA XREF: .data:off_406094↓o
.text:00405800                 dd 200h dup(?)
.text:00405800 _text           ends
.text:00405800
.data:00406000 ; Section 2. (virtual address 00006000)
.data:00406000 ; Virtual size                  : 000000B0 (    176.)
.data:00406000 ; Section size in file          : 00000200 (    512.)
.data:00406000 ; Offset to raw data for section: 00004C00
.data:00406000 ; Flags C0000040: Data Readable Writable
.data:00406000 ; Alignment     : default
.data:00406000 ; ===========================================================================
.data:00406000
.data:00406000 ; Segment type: Pure data
.data:00406000 ; Segment permissions: Read/Write
.data:00406000 _data           segment para public 'DATA' use32
.data:00406000                 assume cs:_data
.data:00406000                 ;org 406000h
.data:00406000 dword_406000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00406000                                         ; sub_401080+CC↑r
.data:00406004 dword_406004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00406004                                         ; sub_401080+D4↑r
.data:00406008                 align 10h
.data:00406010 ; int Code
.data:00406010 Code            dd 1                    ; DATA XREF: sub_4013E0+68↑w
.data:00406010                                         ; sub_402D50+6D↑r ...
.data:00406014                 align 10h
.data:00406020 dword_406020    dd 1                    ; DATA XREF: sub_4013E0+D6↑r
.data:00406020                                         ; sub_4013E0:loc_4015BA↑r ...
.data:00406024 dword_406024    dd 1                    ; DATA XREF: sub_402820+11↑r
.data:00406024                                         ; .text:004028C1↑r ...
.data:00406028 dword_406028    dd 3Fh                  ; DATA XREF: sub_402820+7D↑w
.data:00406028                                         ; .text:0040292D↑w
.data:0040602C                 align 10h
.data:00406030 dword_406030    dd 1                    ; DATA XREF: sub_404000+22↑r
.data:00406030                                         ; sub_404000+65↑r ...
.data:00406034 dword_406034    dd 100h                 ; DATA XREF: sub_404000+3F↑o
.data:00406034                                         ; sub_404000+1A2↑r ...
.data:00406038 off_406038      dd offset unk_407040    ; DATA XREF: sub_404000+1AA↑r
.data:0040603C ; void *off_40603C
.data:0040603C off_40603C      dd offset dword_406034  ; DATA XREF: sub_404000+39↑r
.data:0040603C                                         ; sub_404000+60↑w ...
.data:00406040 ; char *Buffer
.data:00406040 Buffer          dd offset aCopyrightC2005
.data:00406040                                         ; DATA XREF: sub_4044C0+DC↑r
.data:00406040                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00406044                 align 10h
.data:00406050 ; char *Src
.data:00406050 Src             dd offset byte_404D80   ; DATA XREF: sub_404DA0+168↑r
.data:00406054 off_406054      dd offset byte_404D81   ; DATA XREF: sub_404DA0+1DA↑r
.data:00406058                 align 10h
.data:00406060 dword_406060    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00406064                 align 10h
.data:00406070 ; int Mode
.data:00406070 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00406070                                         ; sub_401080+80↑r ...
.data:00406074                 align 10h
.data:00406080 dword_406080    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00406080                                         ; sub_401080+BA↑r
.data:00406084                 align 10h
.data:00406090 dword_406090    dd 0                    ; DATA XREF: sub_405390+9↑r
.data:00406090                                         ; sub_405390+1D↑w
.data:00406094 off_406094      dd offset dword_40568C  ; DATA XREF: sub_405300+6↑r
.data:00406094                                         ; sub_405300+17↑r ...
.data:00406098                 align 1000h
.data:00406098 _data           ends
.data:00406098
.bss:00407000 ; Section 3. (virtual address 00007000)
.bss:00407000 ; Virtual size                  : 00000760 (   1888.)
.bss:00407000 ; Section size in file          : 00000000 (      0.)
.bss:00407000 ; Offset to raw data for section: 00000000
.bss:00407000 ; Flags C0000080: Bss Readable Writable
.bss:00407000 ; Alignment     : default
.bss:00407000 ; ===========================================================================
.bss:00407000
.bss:00407000 ; Segment type: Uninitialized
.bss:00407000 ; Segment permissions: Read/Write
.bss:00407000 _bss            segment para public 'BSS' use32
.bss:00407000                 assume cs:_bss
.bss:00407000                 ;org 407000h
.bss:00407000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00407000 dword_407000    dd ?                    ; DATA XREF: sub_402820+9↑o
.bss:00407000                                         ; sub_402820+17↑w ...
.bss:00407004 dword_407004    dd ?                    ; DATA XREF: sub_402820+21↑w
.bss:00407004                                         ; .text:004028D9↑w
.bss:00407008 dword_407008    dd ?                    ; DATA XREF: sub_402820+77↑r
.bss:00407008                                         ; .text:00402927↑r
.bss:0040700C dword_40700C    dd ?                    ; DATA XREF: sub_402820+6B↑r
.bss:0040700C                                         ; .text:0040291B↑r
.bss:00407010                 db    ? ;
.bss:00407011                 db    ? ;
.bss:00407012                 db    ? ;
.bss:00407013                 db    ? ;
.bss:00407014                 db    ? ;
.bss:00407015                 db    ? ;
.bss:00407016                 db    ? ;
.bss:00407017                 db    ? ;
.bss:00407018                 db    ? ;
.bss:00407019                 db    ? ;
.bss:0040701A                 db    ? ;
.bss:0040701B                 db    ? ;
.bss:0040701C                 db    ? ;
.bss:0040701D                 db    ? ;
.bss:0040701E                 db    ? ;
.bss:0040701F                 db    ? ;
.bss:00407020                 db    ? ;
.bss:00407021                 db    ? ;
.bss:00407022                 db    ? ;
.bss:00407023                 db    ? ;
.bss:00407024                 db    ? ;
.bss:00407025                 db    ? ;
.bss:00407026                 db    ? ;
.bss:00407027                 db    ? ;
.bss:00407028                 db    ? ;
.bss:00407029                 db    ? ;
.bss:0040702A                 db    ? ;
.bss:0040702B                 db    ? ;
.bss:0040702C                 db    ? ;
.bss:0040702D                 db    ? ;
.bss:0040702E                 db    ? ;
.bss:0040702F                 db    ? ;
.bss:00407030 ; char *dword_407030
.bss:00407030 dword_407030    dd ?                    ; DATA XREF: .text:00402D24↑w
.bss:00407030                                         ; sub_402D50+58↑r
.bss:00407034                 align 10h
.bss:00407040 unk_407040      db    ? ;               ; DATA XREF: sub_404000+100↑o
.bss:00407040                                         ; .data:off_406038↑o
.bss:00407041                 db    ? ;
.bss:00407042                 db    ? ;
.bss:00407043                 db    ? ;
.bss:00407044                 db    ? ;
.bss:00407045                 db    ? ;
.bss:00407046                 db    ? ;
.bss:00407047                 db    ? ;
.bss:00407048                 db    ? ;
.bss:00407049                 db    ? ;
.bss:0040704A                 db    ? ;
.bss:0040704B                 db    ? ;
.bss:0040704C                 db    ? ;
.bss:0040704D                 db    ? ;
.bss:0040704E                 db    ? ;
.bss:0040704F                 db    ? ;
.bss:00407050                 db    ? ;
.bss:00407051                 db    ? ;
.bss:00407052                 db    ? ;
.bss:00407053                 db    ? ;
.bss:00407054                 db    ? ;
.bss:00407055                 db    ? ;
.bss:00407056                 db    ? ;
.bss:00407057                 db    ? ;
.bss:00407058                 db    ? ;
.bss:00407059                 db    ? ;
.bss:0040705A                 db    ? ;
.bss:0040705B                 db    ? ;
.bss:0040705C                 db    ? ;
.bss:0040705D                 db    ? ;
.bss:0040705E                 db    ? ;
.bss:0040705F                 db    ? ;
.bss:00407060                 db    ? ;
.bss:00407061                 db    ? ;
.bss:00407062                 db    ? ;
.bss:00407063                 db    ? ;
.bss:00407064                 db    ? ;
.bss:00407065                 db    ? ;
.bss:00407066                 db    ? ;
.bss:00407067                 db    ? ;
.bss:00407068                 db    ? ;
.bss:00407069                 db    ? ;
.bss:0040706A                 db    ? ;
.bss:0040706B                 db    ? ;
.bss:0040706C                 db    ? ;
.bss:0040706D                 db    ? ;
.bss:0040706E                 db    ? ;
.bss:0040706F                 db    ? ;
.bss:00407070                 db    ? ;
.bss:00407071                 db    ? ;
.bss:00407072                 db    ? ;
.bss:00407073                 db    ? ;
.bss:00407074                 db    ? ;
.bss:00407075                 db    ? ;
.bss:00407076                 db    ? ;
.bss:00407077                 db    ? ;
.bss:00407078                 db    ? ;
.bss:00407079                 db    ? ;
.bss:0040707A                 db    ? ;
.bss:0040707B                 db    ? ;
.bss:0040707C                 db    ? ;
.bss:0040707D                 db    ? ;
.bss:0040707E                 db    ? ;
.bss:0040707F                 db    ? ;
.bss:00407080                 db    ? ;
.bss:00407081                 db    ? ;
.bss:00407082                 db    ? ;
.bss:00407083                 db    ? ;
.bss:00407084                 db    ? ;
.bss:00407085                 db    ? ;
.bss:00407086                 db    ? ;
.bss:00407087                 db    ? ;
.bss:00407088                 db    ? ;
.bss:00407089                 db    ? ;
.bss:0040708A                 db    ? ;
.bss:0040708B                 db    ? ;
.bss:0040708C                 db    ? ;
.bss:0040708D                 db    ? ;
.bss:0040708E                 db    ? ;
.bss:0040708F                 db    ? ;
.bss:00407090                 db    ? ;
.bss:00407091                 db    ? ;
.bss:00407092                 db    ? ;
.bss:00407093                 db    ? ;
.bss:00407094                 db    ? ;
.bss:00407095                 db    ? ;
.bss:00407096                 db    ? ;
.bss:00407097                 db    ? ;
.bss:00407098                 db    ? ;
.bss:00407099                 db    ? ;
.bss:0040709A                 db    ? ;
.bss:0040709B                 db    ? ;
.bss:0040709C                 db    ? ;
.bss:0040709D                 db    ? ;
.bss:0040709E                 db    ? ;
.bss:0040709F                 db    ? ;
.bss:004070A0                 db    ? ;
.bss:004070A1                 db    ? ;
.bss:004070A2                 db    ? ;
.bss:004070A3                 db    ? ;
.bss:004070A4                 db    ? ;
.bss:004070A5                 db    ? ;
.bss:004070A6                 db    ? ;
.bss:004070A7                 db    ? ;
.bss:004070A8                 db    ? ;
.bss:004070A9                 db    ? ;
.bss:004070AA                 db    ? ;
.bss:004070AB                 db    ? ;
.bss:004070AC                 db    ? ;
.bss:004070AD                 db    ? ;
.bss:004070AE                 db    ? ;
.bss:004070AF                 db    ? ;
.bss:004070B0                 db    ? ;
.bss:004070B1                 db    ? ;
.bss:004070B2                 db    ? ;
.bss:004070B3                 db    ? ;
.bss:004070B4                 db    ? ;
.bss:004070B5                 db    ? ;
.bss:004070B6                 db    ? ;
.bss:004070B7                 db    ? ;
.bss:004070B8                 db    ? ;
.bss:004070B9                 db    ? ;
.bss:004070BA                 db    ? ;
.bss:004070BB                 db    ? ;
.bss:004070BC                 db    ? ;
.bss:004070BD                 db    ? ;
.bss:004070BE                 db    ? ;
.bss:004070BF                 db    ? ;
.bss:004070C0                 db    ? ;
.bss:004070C1                 db    ? ;
.bss:004070C2                 db    ? ;
.bss:004070C3                 db    ? ;
.bss:004070C4                 db    ? ;
.bss:004070C5                 db    ? ;
.bss:004070C6                 db    ? ;
.bss:004070C7                 db    ? ;
.bss:004070C8                 db    ? ;
.bss:004070C9                 db    ? ;
.bss:004070CA                 db    ? ;
.bss:004070CB                 db    ? ;
.bss:004070CC                 db    ? ;
.bss:004070CD                 db    ? ;
.bss:004070CE                 db    ? ;
.bss:004070CF                 db    ? ;
.bss:004070D0                 db    ? ;
.bss:004070D1                 db    ? ;
.bss:004070D2                 db    ? ;
.bss:004070D3                 db    ? ;
.bss:004070D4                 db    ? ;
.bss:004070D5                 db    ? ;
.bss:004070D6                 db    ? ;
.bss:004070D7                 db    ? ;
.bss:004070D8                 db    ? ;
.bss:004070D9                 db    ? ;
.bss:004070DA                 db    ? ;
.bss:004070DB                 db    ? ;
.bss:004070DC                 db    ? ;
.bss:004070DD                 db    ? ;
.bss:004070DE                 db    ? ;
.bss:004070DF                 db    ? ;
.bss:004070E0                 db    ? ;
.bss:004070E1                 db    ? ;
.bss:004070E2                 db    ? ;
.bss:004070E3                 db    ? ;
.bss:004070E4                 db    ? ;
.bss:004070E5                 db    ? ;
.bss:004070E6                 db    ? ;
.bss:004070E7                 db    ? ;
.bss:004070E8                 db    ? ;
.bss:004070E9                 db    ? ;
.bss:004070EA                 db    ? ;
.bss:004070EB                 db    ? ;
.bss:004070EC                 db    ? ;
.bss:004070ED                 db    ? ;
.bss:004070EE                 db    ? ;
.bss:004070EF                 db    ? ;
.bss:004070F0                 db    ? ;
.bss:004070F1                 db    ? ;
.bss:004070F2                 db    ? ;
.bss:004070F3                 db    ? ;
.bss:004070F4                 db    ? ;
.bss:004070F5                 db    ? ;
.bss:004070F6                 db    ? ;
.bss:004070F7                 db    ? ;
.bss:004070F8                 db    ? ;
.bss:004070F9                 db    ? ;
.bss:004070FA                 db    ? ;
.bss:004070FB                 db    ? ;
.bss:004070FC                 db    ? ;
.bss:004070FD                 db    ? ;
.bss:004070FE                 db    ? ;
.bss:004070FF                 db    ? ;
.bss:00407100                 db    ? ;
.bss:00407101                 db    ? ;
.bss:00407102                 db    ? ;
.bss:00407103                 db    ? ;
.bss:00407104                 db    ? ;
.bss:00407105                 db    ? ;
.bss:00407106                 db    ? ;
.bss:00407107                 db    ? ;
.bss:00407108                 db    ? ;
.bss:00407109                 db    ? ;
.bss:0040710A                 db    ? ;
.bss:0040710B                 db    ? ;
.bss:0040710C                 db    ? ;
.bss:0040710D                 db    ? ;
.bss:0040710E                 db    ? ;
.bss:0040710F                 db    ? ;
.bss:00407110                 db    ? ;
.bss:00407111                 db    ? ;
.bss:00407112                 db    ? ;
.bss:00407113                 db    ? ;
.bss:00407114                 db    ? ;
.bss:00407115                 db    ? ;
.bss:00407116                 db    ? ;
.bss:00407117                 db    ? ;
.bss:00407118                 db    ? ;
.bss:00407119                 db    ? ;
.bss:0040711A                 db    ? ;
.bss:0040711B                 db    ? ;
.bss:0040711C                 db    ? ;
.bss:0040711D                 db    ? ;
.bss:0040711E                 db    ? ;
.bss:0040711F                 db    ? ;
.bss:00407120                 db    ? ;
.bss:00407121                 db    ? ;
.bss:00407122                 db    ? ;
.bss:00407123                 db    ? ;
.bss:00407124                 db    ? ;
.bss:00407125                 db    ? ;
.bss:00407126                 db    ? ;
.bss:00407127                 db    ? ;
.bss:00407128                 db    ? ;
.bss:00407129                 db    ? ;
.bss:0040712A                 db    ? ;
.bss:0040712B                 db    ? ;
.bss:0040712C                 db    ? ;
.bss:0040712D                 db    ? ;
.bss:0040712E                 db    ? ;
.bss:0040712F                 db    ? ;
.bss:00407130                 db    ? ;
.bss:00407131                 db    ? ;
.bss:00407132                 db    ? ;
.bss:00407133                 db    ? ;
.bss:00407134                 db    ? ;
.bss:00407135                 db    ? ;
.bss:00407136                 db    ? ;
.bss:00407137                 db    ? ;
.bss:00407138                 db    ? ;
.bss:00407139                 db    ? ;
.bss:0040713A                 db    ? ;
.bss:0040713B                 db    ? ;
.bss:0040713C                 db    ? ;
.bss:0040713D                 db    ? ;
.bss:0040713E                 db    ? ;
.bss:0040713F                 db    ? ;
.bss:00407140 dword_407140    dd ?                    ; DATA XREF: .text:loc_403991↑o
.bss:00407140                                         ; .text:loc_4039B0↑o ...
.bss:00407144 dword_407144    dd ?                    ; DATA XREF: .text:loc_403A30↑o
.bss:00407144                                         ; .text:00403EB8↑r ...
.bss:00407148 dword_407148    dd ?                    ; DATA XREF: .text:00403EB2↑r
.bss:00407148                                         ; sub_403F60+2C↑r
.bss:0040714C dword_40714C    dd ?                    ; DATA XREF: .text:00403EA6↑r
.bss:0040714C                                         ; sub_403F60+22↑r
.bss:00407150 dword_407150    dd ?                    ; DATA XREF: .text:00403EC2↑r
.bss:00407150                                         ; sub_403F60+36↑r
.bss:00407154 dword_407154    dd ?                    ; DATA XREF: .text:00403ED2↑r
.bss:00407154                                         ; sub_403F60+4E↑r
.bss:00407158 dword_407158    dd ?                    ; DATA XREF: .text:00403EEF↑r
.bss:00407158                                         ; sub_403F60+62↑r
.bss:0040715C dword_40715C    dd ?                    ; DATA XREF: .text:00403EE5↑r
.bss:0040715C                                         ; sub_403F60+70↑r
.bss:00407160 dword_407160    dd ?                    ; DATA XREF: .text:00403EC8↑r
.bss:00407160                                         ; sub_403F60+7A↑r
.bss:00407164                 align 10h
.bss:00407170 ; char *Str1
.bss:00407170 Str1            dd ?                    ; DATA XREF: sub_404B54:loc_404B8D↑w
.bss:00407170                                         ; sub_404B54:loc_404CC0↑r
.bss:00407174                 align 10h
.bss:00407180 dword_407180    dd ?                    ; DATA XREF: sub_404B54+2D↑r
.bss:00407180                                         ; sub_404B54+3F↑w
.bss:00407184                 align 10h
.bss:00407190 unk_407190      db    ? ;               ; DATA XREF: sub_404D30+22↑o
.bss:00407191                 db    ? ;
.bss:00407192                 db    ? ;
.bss:00407193                 db    ? ;
.bss:00407194                 db    ? ;
.bss:00407195                 db    ? ;
.bss:00407196                 db    ? ;
.bss:00407197                 db    ? ;
.bss:00407198                 db    ? ;
.bss:00407199                 db    ? ;
.bss:0040719A                 db    ? ;
.bss:0040719B                 db    ? ;
.bss:0040719C                 db    ? ;
.bss:0040719D                 db    ? ;
.bss:0040719E                 db    ? ;
.bss:0040719F                 db    ? ;
.bss:004071A0                 db    ? ;
.bss:004071A1                 db    ? ;
.bss:004071A2                 db    ? ;
.bss:004071A3                 db    ? ;
.bss:004071A4                 db    ? ;
.bss:004071A5                 db    ? ;
.bss:004071A6                 db    ? ;
.bss:004071A7                 db    ? ;
.bss:004071A8                 db    ? ;
.bss:004071A9                 db    ? ;
.bss:004071AA                 db    ? ;
.bss:004071AB                 db    ? ;
.bss:004071AC                 db    ? ;
.bss:004071AD                 db    ? ;
.bss:004071AE                 db    ? ;
.bss:004071AF                 db    ? ;
.bss:004071B0 ; char byte_4071B0[1024]
.bss:004071B0 byte_4071B0     db 400h dup(?)          ; DATA XREF: sub_404D30+1A↑o
.bss:004075B0 ; CHAR byte_4075B0[272]
.bss:004075B0 byte_4075B0     db 110h dup(?)          ; DATA XREF: sub_404F90+17↑o
.bss:004075B0                                         ; sub_404F90+26↑o
.bss:004076C0 dword_4076C0    dd ?                    ; DATA XREF: sub_4013E0+2F↑w
.bss:004076C0                                         ; sub_4013E0+121↑r ...
.bss:004076C4                 align 20h
.bss:004076E0 dword_4076E0    dd ?                    ; DATA XREF: sub_402820+71↑w
.bss:004076E0                                         ; .text:00402921↑w
.bss:004076E4                 align 10h
.bss:004076F0 dword_4076F0    dd ?                    ; CODE XREF: sub_404B54+63↑p
.bss:004076F0                                         ; DATA XREF: sub_404A50+1E↑r ...
.bss:004076F4                 align 10h
.bss:00407700 dword_407700    dd ?                    ; DATA XREF: sub_404A50+4E↑w
.bss:00407700                                         ; sub_404B54+AB↑w
.bss:00407704                 db    ? ;
.bss:00407705                 db    ? ;
.bss:00407706                 db    ? ;
.bss:00407707                 db    ? ;
.bss:00407708                 db    ? ;
.bss:00407709                 db    ? ;
.bss:0040770A                 db    ? ;
.bss:0040770B                 db    ? ;
.bss:0040770C                 db    ? ;
.bss:0040770D                 db    ? ;
.bss:0040770E                 db    ? ;
.bss:0040770F                 db    ? ;
.bss:00407710                 db    ? ;
.bss:00407711                 db    ? ;
.bss:00407712                 db    ? ;
.bss:00407713                 db    ? ;
.bss:00407714                 db    ? ;
.bss:00407715                 db    ? ;
.bss:00407716                 db    ? ;
.bss:00407717                 db    ? ;
.bss:00407718                 db    ? ;
.bss:00407719                 db    ? ;
.bss:0040771A                 db    ? ;
.bss:0040771B                 db    ? ;
.bss:0040771C                 db    ? ;
.bss:0040771D                 db    ? ;
.bss:0040771E                 db    ? ;
.bss:0040771F                 db    ? ;
.bss:00407720                 db    ? ;
.bss:00407721                 db    ? ;
.bss:00407722                 db    ? ;
.bss:00407723                 db    ? ;
.bss:00407724                 db    ? ;
.bss:00407725                 db    ? ;
.bss:00407726                 db    ? ;
.bss:00407727                 db    ? ;
.bss:00407728                 db    ? ;
.bss:00407729                 db    ? ;
.bss:0040772A                 db    ? ;
.bss:0040772B                 db    ? ;
.bss:0040772C                 db    ? ;
.bss:0040772D                 db    ? ;
.bss:0040772E                 db    ? ;
.bss:0040772F                 db    ? ;
.bss:00407730 dword_407730    dd ?                    ; DATA XREF: sub_404B54+13↑r
.bss:00407734                 align 1000h
.bss:00407734 _bss            ends
.bss:00407734
.idata:00408000 ; Section 4. (virtual address 00008000)
.idata:00408000 ; Virtual size                  : 000005D8 (   1496.)
.idata:00408000 ; Section size in file          : 00000600 (   1536.)
.idata:00408000 ; Offset to raw data for section: 00004E00
.idata:00408000 ; Flags C0000040: Data Readable Writable
.idata:00408000 ; Alignment     : default
.idata:00408000 ; ===========================================================================
.idata:00408000
.idata:00408000 ; Segment type: Externs
.idata:00408000 ; _idata
.idata:00408000
.idata:00408001
.idata:00408178 ;
.idata:00408178 ; Imports from libintl3.dll
.idata:00408178 ;
.idata:00408178                 extrn __imp_libintl_bindtextdomain:dword
.idata:00408178                                         ; CODE XREF: sub_4013E0+49↑p
.idata:00408178                                         ; DATA XREF: sub_4013E0+49↑r ...
.idata:0040817C                 extrn libintl_gettext:dword
.idata:0040817C                                         ; CODE XREF: sub_4013E0+F0↑p
.idata:0040817C                                         ; sub_4013E0+115↑p ...
.idata:00408180                 extrn libintl_textdomain:dword
.idata:00408180                                         ; CODE XREF: sub_4013E0+56↑p
.idata:00408180                                         ; DATA XREF: sub_4013E0+56↑r ...
.idata:00408184
.idata:0040818C ;
.idata:0040818C ; Imports from ADVAPI32.DLL
.idata:0040818C ;
.idata:0040818C ; BOOL (__stdcall *GetUserNameA)(LPSTR lpBuffer, LPDWORD pcbBuffer)
.idata:0040818C                 extrn __imp_GetUserNameA:dword
.idata:0040818C                                         ; DATA XREF: GetUserNameA↑r
.idata:00408190
.idata:00408198 ;
.idata:00408198 ; Imports from KERNEL32.dll
.idata:00408198 ;
.idata:00408198 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00408198                 extrn __imp_ExitProcess:dword
.idata:00408198                                         ; DATA XREF: ExitProcess↑r
.idata:0040819C ; DWORD (__stdcall *GetLastError)()
.idata:0040819C                 extrn __imp_GetLastError:dword
.idata:0040819C                                         ; DATA XREF: GetLastError↑r
.idata:004081A0 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:004081A0                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:004081A0                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:004081A4
.idata:004081AC ;
.idata:004081AC ; Imports from msvcrt.dll
.idata:004081AC ;
.idata:004081AC ; intptr_t (__cdecl *_execvp)(const char *FileName, const char *const *Arguments)
.idata:004081AC                 extrn __imp__execvp:dword
.idata:004081AC                                         ; DATA XREF: _execvp↑r
.idata:004081B0
.idata:004081B8 ;
.idata:004081B8 ; Imports from MSVCP60.DLL
.idata:004081B8 ;
.idata:004081B8 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:004081B8                 extrn __imp_mbrtowc:dword
.idata:004081B8                                         ; DATA XREF: mbrtowc↑r
.idata:004081BC
.idata:004081C4 ;
.idata:004081C4 ; Imports from msvcrt.dll
.idata:004081C4 ;
.idata:004081C4                 extrn __imp___getmainargs:dword
.idata:004081C4                                         ; DATA XREF: __getmainargs↑r
.idata:004081C8 ; int _mb_cur_max
.idata:004081C8                 extrn __mb_cur_max:dword
.idata:004081C8                                         ; DATA XREF: sub_402EC0+7↑r
.idata:004081C8                                         ; sub_402EC0+5F3↑r
.idata:004081CC ; char ***(__cdecl *__p__environ)()
.idata:004081CC                 extrn __imp___p__environ:dword
.idata:004081CC                                         ; DATA XREF: __p__environ↑r
.idata:004081D0 ; int *(__cdecl *__p__fmode)()
.idata:004081D0                 extrn __imp___p__fmode:dword
.idata:004081D0                                         ; DATA XREF: __p__fmode↑r
.idata:004081D4 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004081D4                 extrn __set_app_type:dword
.idata:004081D4                                         ; CODE XREF: start+D↑p
.idata:004081D4                                         ; .text:0040102D↑p
.idata:004081D4                                         ; DATA XREF: ...
.idata:004081D8 ; void (__cdecl *_cexit)()
.idata:004081D8                 extrn __imp__cexit:dword
.idata:004081D8                                         ; DATA XREF: _cexit↑r
.idata:004081DC ; int *(__cdecl *_errno)()
.idata:004081DC                 extrn __imp__errno:dword
.idata:004081DC                                         ; DATA XREF: _errno↑r
.idata:004081E0 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004081E0                 extrn __imp__flsbuf:dword
.idata:004081E0                                         ; DATA XREF: _flsbuf↑r
.idata:004081E4 ; FILE iob[]
.idata:004081E4                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004081E4                                         ; sub_401080+75↑r ...
.idata:004081E8 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004081E8                 extrn __imp__isctype:dword
.idata:004081E8                                         ; DATA XREF: _isctype↑r
.idata:004081EC ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004081EC                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004081EC                                         ; DATA XREF: .text:0040106C↑r
.idata:004081F0 ; const unsigned __int16 *pctype
.idata:004081F0                 extrn _pctype:dword     ; DATA XREF: sub_402EC0:loc_4035B4↑r
.idata:004081F4 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004081F4                 extrn __imp__setmode:dword
.idata:004081F4                                         ; DATA XREF: _setmode↑r
.idata:004081F8 ; void (__cdecl __noreturn *abort)()
.idata:004081F8                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004081FC ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004081FC                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004081FC                                         ; DATA XREF: sub_401040+C↑r
.idata:00408200 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:00408200                 extrn __imp_calloc:dword
.idata:00408200                                         ; DATA XREF: calloc↑r
.idata:00408204 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00408204                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:00408208 ; int (__cdecl *fclose)(FILE *Stream)
.idata:00408208                 extrn __imp_fclose:dword
.idata:00408208                                         ; DATA XREF: fclose↑r
.idata:0040820C ; int (__cdecl *fflush)(FILE *Stream)
.idata:0040820C                 extrn __imp_fflush:dword
.idata:0040820C                                         ; DATA XREF: fflush↑r
.idata:00408210 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:00408210                 extrn __imp_fprintf:dword
.idata:00408210                                         ; DATA XREF: fprintf↑r
.idata:00408214 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:00408214                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00408218 ; void (__cdecl *free)(void *Block)
.idata:00408218                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0040821C ; char *(__cdecl *getenv)(const char *VarName)
.idata:0040821C                 extrn __imp_getenv:dword
.idata:0040821C                                         ; DATA XREF: getenv↑r
.idata:00408220 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:00408220                 extrn __imp_iswctype:dword
.idata:00408220                                         ; DATA XREF: iswctype↑r
.idata:00408224 ; void *(__cdecl *malloc)(size_t Size)
.idata:00408224                 extrn __imp_malloc:dword
.idata:00408224                                         ; DATA XREF: malloc↑r
.idata:00408228 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:00408228                 extrn __imp_memcpy:dword
.idata:00408228                                         ; DATA XREF: memcpy↑r
.idata:0040822C ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0040822C                 extrn __imp_memset:dword
.idata:0040822C                                         ; DATA XREF: memset↑r
.idata:00408230 ; int (*printf)(const char *const Format, ...)
.idata:00408230                 extrn __imp_printf:dword
.idata:00408230                                         ; DATA XREF: printf↑r
.idata:00408234 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00408234                 extrn __imp_realloc:dword
.idata:00408234                                         ; DATA XREF: realloc↑r
.idata:00408238 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00408238                 extrn __imp_setlocale:dword
.idata:00408238                                         ; DATA XREF: setlocale↑r
.idata:0040823C ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0040823C                 extrn __imp_signal:dword
.idata:0040823C                                         ; DATA XREF: signal↑r
.idata:00408240 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00408240                 extrn __imp_strchr:dword
.idata:00408240                                         ; DATA XREF: strchr↑r
.idata:00408244 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00408244                 extrn __imp_strcmp:dword
.idata:00408244                                         ; DATA XREF: strcmp↑r
.idata:00408248 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00408248                 extrn __imp_strerror:dword
.idata:00408248                                         ; DATA XREF: strerror↑r
.idata:0040824C ; size_t (__cdecl *strlen)(const char *Str)
.idata:0040824C                 extrn __imp_strlen:dword
.idata:0040824C                                         ; DATA XREF: strlen↑r
.idata:00408250 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00408250                 extrn __imp_strncmp:dword
.idata:00408250                                         ; DATA XREF: strncmp↑r
.idata:00408254 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00408254                 extrn __imp_vfprintf:dword
.idata:00408254                                         ; DATA XREF: vfprintf↑r
.idata:00408258
.idata:00408258
.idata:00408258
.idata:00408258                 end start
