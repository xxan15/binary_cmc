.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 6F3D13B75DF852FF66A9EC60C41EBFB15F3AE90B567D55CD33BC0F0FC71DC8BD
.text:00401000 ; Input MD5    : B6576F8D845C0C1855F5AC96383E8DEA
.text:00401000 ; Input CRC32  : 3D135091
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/stat.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A24F (Wed Apr 20 18:41:19 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00010030 (  65584.)
.text:00401000 ; Section size in file          : 00010200 (  66048.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401CD0+84↓p
.text:00401040                                         ; .text:0040FF30↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_40FED0
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_412000
.text:004010A2                 mov     edx, dword_4120A0
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_412004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_4120C0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_4120C0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_40FEA0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_412000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_412004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401CD0
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_40FED0
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aLink           db 'link',0             ; DATA XREF: .text:off_4012E0↓o
.text:00401285 aDereference    db 'dereference',0      ; DATA XREF: .text:004012F0↓o
.text:00401291 aFileSystem     db 'file-system',0      ; DATA XREF: .text:00401300↓o
.text:0040129D aFilesystem     db 'filesystem',0       ; DATA XREF: .text:00401310↓o
.text:004012A8 aFormat         db 'format',0           ; DATA XREF: .text:00401320↓o
.text:004012AF aTerse          db 'terse',0            ; DATA XREF: .text:00401330↓o
.text:004012B5 aHelp           db 'help',0             ; DATA XREF: .text:00401340↓o
.text:004012BA aVersion        db 'version',0          ; DATA XREF: .text:00401350↓o
.text:004012C2                 align 20h
.text:004012E0 off_4012E0      dd offset aLink         ; DATA XREF: sub_401CD0+98↓o
.text:004012E0                                         ; "link"
.text:004012E4                 dd 2 dup(0)
.text:004012EC                 dd 6Ch
.text:004012F0                 dd offset aDereference  ; "dereference"
.text:004012F4                 dd 2 dup(0)
.text:004012FC                 dd 4Ch
.text:00401300                 dd offset aFileSystem   ; "file-system"
.text:00401304                 dd 2 dup(0)
.text:0040130C                 dd 66h
.text:00401310                 dd offset aFilesystem   ; "filesystem"
.text:00401314                 dd 2 dup(0)
.text:0040131C                 dd 66h
.text:00401320                 dd offset aFormat       ; "format"
.text:00401324                 dd 1, 0
.text:0040132C                 dd 63h
.text:00401330                 dd offset aTerse        ; "terse"
.text:00401334                 dd 2 dup(0)
.text:0040133C                 dd 74h
.text:00401340                 dd offset aHelp         ; "help"
.text:00401344                 dd 2 dup(0)
.text:0040134C                 dd 0FFFFFF7Eh
.text:00401350                 dd offset aVersion      ; "version"
.text:00401354                 dd 2 dup(0)
.text:0040135C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401370 ; const char Locale
.text:00401370 Locale          db 0                    ; DATA XREF: sub_401CD0+47↓o
.text:00401371                 db 0EBh, 0Dh, 90h
.text:00401374                 align 10h
.text:00401380 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401380                                         ; DATA XREF: sub_401CD0+5B↓o
.text:004013A3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401CD0+63↓o
.text:004013A3                                         ; sub_401CD0+70↓o
.text:004013AD ; const char aCFllt[]
.text:004013AD aCFllt          db 'c:fLlt',0           ; DATA XREF: sub_401CD0+A0↓o
.text:004013B4                 align 10h
.text:004013C0 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:004013C0                                         ; DATA XREF: sub_401CD0:loc_401DBF↓o
.text:004013C0                                         ; .text:004021CC↓o
.text:004013E7 aMichaelMeskes  db 'Michael Meskes',0   ; DATA XREF: sub_401CD0+13C↓o
.text:004013F6 a530            db '5.3.0',0            ; DATA XREF: sub_401CD0+144↓o
.text:004013FC aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401CD0+14F↓o
.text:0040140A ; const FILE stru_40140A
.text:0040140A stru_40140A     FILE <74617473h, 61735500h, 203A6567h, 5B207325h, 4954504Fh, \
.text:0040140A                                         ; DATA XREF: sub_401CD0+157↓o
.text:0040140A                                         ; sub_401CD0:loc_401E40↓o ...
.text:0040140A                       205D4E4Fh, 454C4946h, 0A2E2E2Eh>
.text:0040142A                 db    0
.text:0040142B                 align 20h
.text:00401440 aDisplayFileOrF db 'Display file or file system status.',0Ah
.text:00401440                                         ; DATA XREF: sub_401CD0+18F↓o
.text:00401440                                         ; .text:0040221F↓o
.text:00401440                 db 0Ah
.text:00401440                 db '  -f, --file-system     display file system status instead of fil'
.text:00401440                 db 'e status',0Ah
.text:00401440                 db '  -c  --format=FORMAT   use the specified FORMAT instead of the d'
.text:00401440                 db 'efault',0Ah
.text:00401440                 db '  -L, --dereference     follow links',0Ah
.text:00401440                 db '  -t, --terse           print the information in terse form',0Ah,0
.text:00401559                 align 10h
.text:00401560 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401560                                         ; DATA XREF: sub_401CD0+1B1↓o
.text:00401560                                         ; .text:00402241↓o
.text:0040158D                 align 20h
.text:004015A0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:004015A0                                         ; DATA XREF: sub_401CD0+1D3↓o
.text:004015A0                                         ; .text:00402263↓o
.text:004015D6                 align 10h
.text:004015E0 aTheValidFormat db 0Ah                  ; DATA XREF: sub_401CD0+1F5↓o
.text:004015E0                                         ; .text:00402285↓o
.text:004015E0                 db 'The valid format sequences for files (without --file-system):',0Ah
.text:004015E0                 db 0Ah
.text:004015E0                 db '  %A   Access rights in human readable form',0Ah
.text:004015E0                 db '  %a   Access rights in octal',0Ah
.text:004015E0                 db '  %B   The size in bytes of each block reported by `%b',27h,0Ah
.text:004015E0                 db '  %b   Number of blocks allocated (see %B)',0Ah,0
.text:004016CE                 align 20h
.text:004016E0 aDDeviceNumberI db '  %D   Device number in hex',0Ah
.text:004016E0                                         ; DATA XREF: sub_401CD0+217↓o
.text:004016E0                                         ; .text:004022A7↓o
.text:004016E0                 db '  %d   Device number in decimal',0Ah
.text:004016E0                 db '  %F   File type',0Ah
.text:004016E0                 db '  %f   Raw mode in hex',0Ah
.text:004016E0                 db '  %G   Group name of owner',0Ah
.text:004016E0                 db '  %g   Group ID of owner',0Ah,0
.text:00401779                 align 10h
.text:00401780 aHNumberOfHardL db '  %h   Number of hard links',0Ah
.text:00401780                                         ; DATA XREF: sub_401CD0+239↓o
.text:00401780                                         ; .text:004022C9↓o
.text:00401780                 db '  %i   Inode number',0Ah
.text:00401780                 db '  %N   Quoted File name with dereference if symbolic link',0Ah
.text:00401780                 db '  %n   File name',0Ah
.text:00401780                 db '  %o   IO block size',0Ah
.text:00401780                 db '  %s   Total size, in bytes',0Ah
.text:00401780                 db '  %T   Minor device type in hex',0Ah
.text:00401780                 db '  %t   Major device type in hex',0Ah,0
.text:0040186D                 align 20h
.text:00401880 aUUserNameOfOwn db '  %U   User name of owner',0Ah
.text:00401880                                         ; DATA XREF: sub_401CD0+25B↓o
.text:00401880                                         ; .text:004022EB↓o
.text:00401880                 db '  %u   User ID of owner',0Ah
.text:00401880                 db '  %X   Time of last access as seconds since Epoch',0Ah
.text:00401880                 db '  %x   Time of last access',0Ah
.text:00401880                 db '  %Y   Time of last modification as seconds since Epoch',0Ah
.text:00401880                 db '  %y   Time of last modification',0Ah
.text:00401880                 db '  %Z   Time of last change as seconds since Epoch',0Ah
.text:00401880                 db '  %z   Time of last change',0Ah
.text:00401880                 db 0Ah,0
.text:004019A7                 align 20h
.text:004019C0 aValidFormatSeq db 'Valid format sequences for file systems:',0Ah
.text:004019C0                                         ; DATA XREF: sub_401CD0+27D↓o
.text:004019C0                                         ; .text:0040230D↓o
.text:004019C0                 db 0Ah
.text:004019C0                 db '  %a   Free blocks available to non-superuser',0Ah
.text:004019C0                 db '  %b   Total data blocks in file system',0Ah
.text:004019C0                 db '  %c   Total file nodes in file system',0Ah
.text:004019C0                 db '  %d   Free file nodes in file system',0Ah
.text:004019C0                 db '  %f   Free blocks in file system',0Ah,0
.text:00401AB0                 align 20h
.text:00401AC0 aIFileSystemIdI db '  %i   File System id in hex',0Ah
.text:00401AC0                                         ; DATA XREF: sub_401CD0+29F↓o
.text:00401AC0                                         ; .text:0040232F↓o
.text:00401AC0                 db '  %l   Maximum length of filenames',0Ah
.text:00401AC0                 db '  %n   File name',0Ah
.text:00401AC0                 db '  %s   Optimal transfer block size',0Ah
.text:00401AC0                 db '  %T   Type in human readable form',0Ah
.text:00401AC0                 db '  %t   Type in hex',0Ah,0
.text:00401B6B aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401CD0+2C1↓o
.text:00401B6B                                         ; .text:00402351↓o
.text:00401B6B                 db 'Report bugs to <%s>.',0Ah,0
.text:00401B82 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00401B82                                         ; DATA XREF: sub_401CD0+2CE↓o
.text:00401B82                                         ; .text:0040235E↓o
.text:00401B98                 align 10h
.text:00401BA0 aWarningLIsDepr db 'Warning: `-l',27h,' is deprecated; use `-L',27h,' instead',0
.text:00401BA0                                         ; DATA XREF: sub_401CD0:loc_401FDE↓o
.text:00401BCE aMissingOperand db 'missing operand',0  ; DATA XREF: sub_401CD0+34C↓o
.text:00401BDE                 align 10h
.text:00401BE0 aNILTBFASCD     db '%n %i %l %t %b %f %a %s %c %d',0Ah,0
.text:00401BE0                                         ; DATA XREF: sub_401CD0+43C↓o
.text:00401BFF                 align 10h
.text:00401C00 aFileNId8iNamel db '  File: "%n"',0Ah   ; DATA XREF: sub_401CD0+449↓o
.text:00401C00                 db '    ID: %-8i Namelen: %-7l Type: %T',0Ah
.text:00401C00                 db 'Blocks: Total: %-10b Free: %-10f Available: %-10a Size: %s',0Ah
.text:00401C00                 db 'Inodes: Total: %-10c Free: %-10d',0Ah,0
.text:00401C8E                 align 20h
.text:00401CA0 aCannotReadFile db 'cannot read file system information for %s',0
.text:00401CA0                                         ; DATA XREF: sub_401CD0+474↓o
.text:00401CCB                 align 10h
.text:00401CD0
.text:00401CD0 ; =============== S U B R O U T I N E =======================================
.text:00401CD0
.text:00401CD0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401CD0
.text:00401CD0 sub_401CD0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401CD0
.text:00401CD0 Category        = dword ptr -128h
.text:00401CD0 Locale          = dword ptr -124h
.text:00401CD0 var_120         = dword ptr -120h
.text:00401CD0 var_11C         = dword ptr -11Ch
.text:00401CD0 var_118         = byte ptr -118h
.text:00401CD0 var_114         = dword ptr -114h
.text:00401CD0 var_104         = dword ptr -104h
.text:00401CD0 var_100         = byte ptr -100h
.text:00401CD0 Block           = dword ptr -0FCh
.text:00401CD0 var_F8          = dword ptr -0F8h
.text:00401CD0 var_F4          = dword ptr -0F4h
.text:00401CD0 var_F0          = byte ptr -0F0h
.text:00401CD0 var_EF          = byte ptr -0EFh
.text:00401CD0 var_EE          = byte ptr -0EEh
.text:00401CD0 var_ED          = byte ptr -0EDh
.text:00401CD0 var_EC          = dword ptr -0ECh
.text:00401CD0 var_E8          = dword ptr -0E8h
.text:00401CD0 arg_0           = dword ptr  8
.text:00401CD0 arg_4           = dword ptr  0Ch
.text:00401CD0
.text:00401CD0                 push    ebp
.text:00401CD1                 xor     eax, eax
.text:00401CD3                 mov     ebp, esp
.text:00401CD5                 push    edi
.text:00401CD6                 push    esi
.text:00401CD7                 push    ebx
.text:00401CD8                 sub     esp, 11Ch
.text:00401CDE                 xor     ebx, ebx
.text:00401CE0                 mov     edi, [ebp+arg_4]
.text:00401CE3                 and     esp, 0FFFFFFF0h
.text:00401CE6                 mov     esi, [ebp+arg_0]
.text:00401CE9                 call    __alloca
.text:00401CEE                 call    sub_40FF70
.text:00401CF3                 mov     [ebp+var_ED], 0
.text:00401CFA                 mov     edx, [edi]
.text:00401CFC                 mov     [ebp+var_EE], 0
.text:00401D03                 mov     [ebp+var_EF], 0
.text:00401D0A                 mov     ds:dword_413B00, edx
.text:00401D10                 mov     [ebp+var_F0], 1
.text:00401D17                 mov     [esp+128h+Locale], offset Locale ; Locale
.text:00401D1F                 mov     [esp+128h+Category], 0 ; Category
.text:00401D26                 call    setlocale
.text:00401D2B                 mov     [esp+128h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401D33                 mov     [esp+128h+Category], offset aCoreutils ; "coreutils"
.text:00401D3A                 call    ds:__imp_libintl_bindtextdomain
.text:00401D40                 mov     [esp+128h+Category], offset aCoreutils ; "coreutils"
.text:00401D47                 call    ds:libintl_textdomain
.text:00401D4D                 mov     [esp+128h+Category], offset sub_4068F0 ; void (__cdecl *)()
.text:00401D54                 call    sub_401040
.text:00401D59                 lea     esi, [esi+0]
.text:00401D60
.text:00401D60 loc_401D60:                             ; CODE XREF: sub_401CD0+ED↓j
.text:00401D60                                         ; sub_401CD0:loc_401FC7↓j ...
.text:00401D60                 mov     dword ptr [esp+128h+var_118], 0 ; int
.text:00401D68                 mov     [esp+128h+var_11C], offset off_4012E0 ; char
.text:00401D70                 mov     [esp+128h+var_120], offset aCFllt ; "c:fLlt"
.text:00401D78                 mov     [esp+128h+Locale], edi ; int
.text:00401D7C                 mov     [esp+128h+Category], esi ; int
.text:00401D7F                 call    sub_406780
.text:00401D84                 cmp     eax, 0FFFFFFFFh
.text:00401D87                 jz      loc_402013
.text:00401D8D                 cmp     eax, 63h ; 'c'
.text:00401D90                 jz      loc_402008
.text:00401D96                 cmp     eax, 63h ; 'c'
.text:00401D99                 jg      loc_401FB3
.text:00401D9F                 cmp     eax, 0FFFFFF7Eh
.text:00401DA4                 jz      loc_401E40
.text:00401DAA                 cmp     eax, 0FFFFFF7Eh
.text:00401DAF                 jle     short loc_401DF7
.text:00401DB1                 cmp     eax, 4Ch ; 'L'
.text:00401DB4                 jnz     short loc_401DBF
.text:00401DB6
.text:00401DB6 loc_401DB6:                             ; CODE XREF: sub_401CD0+333↓j
.text:00401DB6                 mov     [ebp+var_ED], 1
.text:00401DBD                 jmp     short loc_401D60
.text:00401DBF ; ---------------------------------------------------------------------------
.text:00401DBF
.text:00401DBF loc_401DBF:                             ; CODE XREF: sub_401CD0+E4↑j
.text:00401DBF                                         ; sub_401CD0+12C↓j ...
.text:00401DBF                 mov     [esp+128h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401DC6                 call    ds:libintl_gettext
.text:00401DCC                 mov     esi, ds:_iob
.text:00401DD2                 mov     edi, ds:dword_413B00
.text:00401DD8                 add     esi, 40h ; '@'
.text:00401DDB                 mov     [esp+128h+var_120], edi
.text:00401DDF                 mov     [esp+128h+Locale], eax ; Format
.text:00401DE3                 mov     [esp+128h+Category], esi ; Stream
.text:00401DE6                 call    fprintf
.text:00401DEB                 mov     [esp+128h+Category], 1 ; Code
.text:00401DF2
.text:00401DF2 loc_401DF2:                             ; CODE XREF: sub_401CD0+16E↓j
.text:00401DF2                                         ; sub_401CD0+430↓j
.text:00401DF2                 call    exit
.text:00401DF7 ; ---------------------------------------------------------------------------
.text:00401DF7
.text:00401DF7 loc_401DF7:                             ; CODE XREF: sub_401CD0+DF↑j
.text:00401DF7                 cmp     eax, 0FFFFFF7Dh
.text:00401DFC                 jnz     short loc_401DBF
.text:00401DFE                 mov     [esp+128h+var_114], 0
.text:00401E06                 mov     edx, ds:_iob
.text:00401E0C                 mov     dword ptr [esp+128h+var_118], offset aMichaelMeskes ; "Michael Meskes"
.text:00401E14                 mov     [esp+128h+var_11C], offset a530 ; "5.3.0"
.text:00401E1C                 add     edx, 20h ; ' '
.text:00401E1F                 mov     [esp+128h+var_120], offset aGnuCoreutils ; "GNU coreutils"
.text:00401E27                 mov     [esp+128h+Locale], offset stru_40140A ; FILE *
.text:00401E2F                 mov     [esp+128h+Category], edx ; FILE *
.text:00401E32                 call    sub_406740
.text:00401E37
.text:00401E37 loc_401E37:                             ; CODE XREF: sub_401CD0+2DE↓j
.text:00401E37                 mov     [esp+128h+Category], 0
.text:00401E3E                 jmp     short loc_401DF2
.text:00401E40 ; ---------------------------------------------------------------------------
.text:00401E40
.text:00401E40 loc_401E40:                             ; CODE XREF: sub_401CD0+D4↑j
.text:00401E40                 mov     [esp+128h+Category], (offset stru_40140A._cnt+1)
.text:00401E47                 call    ds:libintl_gettext
.text:00401E4D                 mov     ebx, ds:dword_413B00
.text:00401E53                 mov     [esp+128h+Category], eax ; Format
.text:00401E56                 mov     [esp+128h+Locale], ebx
.text:00401E5A                 call    printf
.text:00401E5F                 mov     [esp+128h+Category], offset aDisplayFileOrF ; "Display file or file system status.\n\n"...
.text:00401E66                 call    ds:libintl_gettext
.text:00401E6C                 mov     ecx, ds:_iob
.text:00401E72                 add     ecx, 20h ; ' '
.text:00401E75                 mov     [esp+128h+Locale], ecx ; Stream
.text:00401E79                 mov     [esp+128h+Category], eax ; Buffer
.text:00401E7C                 call    fputs
.text:00401E81                 mov     [esp+128h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401E88                 call    ds:libintl_gettext
.text:00401E8E                 mov     edi, ds:_iob
.text:00401E94                 add     edi, 20h ; ' '
.text:00401E97                 mov     [esp+128h+Locale], edi ; Stream
.text:00401E9B                 mov     [esp+128h+Category], eax ; Buffer
.text:00401E9E                 call    fputs
.text:00401EA3                 mov     [esp+128h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401EAA                 call    ds:libintl_gettext
.text:00401EB0                 mov     esi, ds:_iob
.text:00401EB6                 add     esi, 20h ; ' '
.text:00401EB9                 mov     [esp+128h+Locale], esi ; Stream
.text:00401EBD                 mov     [esp+128h+Category], eax ; Buffer
.text:00401EC0                 call    fputs
.text:00401EC5                 mov     [esp+128h+Category], offset aTheValidFormat ; "\nThe valid format sequences for files "...
.text:00401ECC                 call    ds:libintl_gettext
.text:00401ED2                 mov     ebx, ds:_iob
.text:00401ED8                 add     ebx, 20h ; ' '
.text:00401EDB                 mov     [esp+128h+Locale], ebx ; Stream
.text:00401EDF                 mov     [esp+128h+Category], eax ; Buffer
.text:00401EE2                 call    fputs
.text:00401EE7                 mov     [esp+128h+Category], offset aDDeviceNumberI ; "  %D   Device number in hex\n  %d   Dev"...
.text:00401EEE                 call    ds:libintl_gettext
.text:00401EF4                 mov     ecx, ds:_iob
.text:00401EFA                 add     ecx, 20h ; ' '
.text:00401EFD                 mov     [esp+128h+Locale], ecx ; Stream
.text:00401F01                 mov     [esp+128h+Category], eax ; Buffer
.text:00401F04                 call    fputs
.text:00401F09                 mov     [esp+128h+Category], offset aHNumberOfHardL ; "  %h   Number of hard links\n  %i   Ino"...
.text:00401F10                 call    ds:libintl_gettext
.text:00401F16                 mov     edi, ds:_iob
.text:00401F1C                 add     edi, 20h ; ' '
.text:00401F1F                 mov     [esp+128h+Locale], edi ; Stream
.text:00401F23                 mov     [esp+128h+Category], eax ; Buffer
.text:00401F26                 call    fputs
.text:00401F2B                 mov     [esp+128h+Category], offset aUUserNameOfOwn ; "  %U   User name of owner\n  %u   User "...
.text:00401F32                 call    ds:libintl_gettext
.text:00401F38                 mov     esi, ds:_iob
.text:00401F3E                 add     esi, 20h ; ' '
.text:00401F41                 mov     [esp+128h+Locale], esi ; Stream
.text:00401F45                 mov     [esp+128h+Category], eax ; Buffer
.text:00401F48                 call    fputs
.text:00401F4D                 mov     [esp+128h+Category], offset aValidFormatSeq ; "Valid format sequences for file systems"...
.text:00401F54                 call    ds:libintl_gettext
.text:00401F5A                 mov     ebx, ds:_iob
.text:00401F60                 add     ebx, 20h ; ' '
.text:00401F63                 mov     [esp+128h+Locale], ebx ; Stream
.text:00401F67                 mov     [esp+128h+Category], eax ; Buffer
.text:00401F6A                 call    fputs
.text:00401F6F                 mov     [esp+128h+Category], offset aIFileSystemIdI ; "  %i   File System id in hex\n  %l   Ma"...
.text:00401F76                 call    ds:libintl_gettext
.text:00401F7C                 mov     ecx, ds:_iob
.text:00401F82                 add     ecx, 20h ; ' '
.text:00401F85                 mov     [esp+128h+Locale], ecx ; Stream
.text:00401F89                 mov     [esp+128h+Category], eax ; Buffer
.text:00401F8C                 call    fputs
.text:00401F91                 mov     [esp+128h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401F98                 call    ds:libintl_gettext
.text:00401F9E                 mov     [esp+128h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401FA6                 mov     [esp+128h+Category], eax ; Format
.text:00401FA9                 call    printf
.text:00401FAE                 jmp     loc_401E37
.text:00401FB3 ; ---------------------------------------------------------------------------
.text:00401FB3
.text:00401FB3 loc_401FB3:                             ; CODE XREF: sub_401CD0+C9↑j
.text:00401FB3                 cmp     eax, 6Ch ; 'l'
.text:00401FB6                 jz      short loc_401FDE
.text:00401FB8                 cmp     eax, 6Ch ; 'l'
.text:00401FBB                 jg      short loc_401FD2
.text:00401FBD                 mov     [ebp+var_EE], 1
.text:00401FC4                 cmp     eax, 66h ; 'f'
.text:00401FC7
.text:00401FC7 loc_401FC7:                             ; CODE XREF: sub_401CD0+30C↓j
.text:00401FC7                 jz      loc_401D60
.text:00401FCD                 jmp     loc_401DBF
.text:00401FD2 ; ---------------------------------------------------------------------------
.text:00401FD2
.text:00401FD2 loc_401FD2:                             ; CODE XREF: sub_401CD0+2EB↑j
.text:00401FD2                 mov     [ebp+var_EF], 1
.text:00401FD9                 cmp     eax, 74h ; 't'
.text:00401FDC                 jmp     short loc_401FC7
.text:00401FDE ; ---------------------------------------------------------------------------
.text:00401FDE
.text:00401FDE loc_401FDE:                             ; CODE XREF: sub_401CD0+2E6↑j
.text:00401FDE                 mov     [esp+128h+Category], offset aWarningLIsDepr ; "Warning: `-l' is deprecated; use `-L' i"...
.text:00401FE5                 call    ds:libintl_gettext
.text:00401FEB                 mov     [esp+128h+Locale], 0 ; ErrorMessage
.text:00401FF3                 mov     [esp+128h+Category], 0 ; Code
.text:00401FFA                 mov     [esp+128h+var_120], eax ; char *
.text:00401FFE                 call    sub_4083D0
.text:00402003                 jmp     loc_401DB6
.text:00402008 ; ---------------------------------------------------------------------------
.text:00402008
.text:00402008 loc_402008:                             ; CODE XREF: sub_401CD0+C0↑j
.text:00402008                 mov     ebx, ds:dword_413B20
.text:0040200E                 jmp     loc_401D60
.text:00402013 ; ---------------------------------------------------------------------------
.text:00402013
.text:00402013 loc_402013:                             ; CODE XREF: sub_401CD0+B7↑j
.text:00402013                 mov     eax, dword_412010
.text:00402018                 cmp     esi, eax
.text:0040201A                 jnz     short loc_402046
.text:0040201C                 mov     [esp+128h+Category], offset aMissingOperand ; "missing operand"
.text:00402023                 call    ds:libintl_gettext
.text:00402029                 mov     [esp+128h+Locale], 0 ; ErrorMessage
.text:00402031                 mov     [esp+128h+Category], 0 ; Code
.text:00402038                 mov     [esp+128h+var_120], eax ; char *
.text:0040203C                 call    sub_4083D0
.text:00402041                 jmp     loc_401DBF
.text:00402046 ; ---------------------------------------------------------------------------
.text:00402046
.text:00402046 loc_402046:                             ; CODE XREF: sub_401CD0+34A↑j
.text:00402046                 mov     [ebp+var_EC], eax
.text:0040204C                 cmp     eax, esi
.text:0040204E                 jge     loc_4020EF
.text:00402054
.text:00402054 loc_402054:                             ; CODE XREF: sub_401CD0+419↓j
.text:00402054                 movzx   ecx, [ebp+var_F0]
.text:0040205B                 cmp     [ebp+var_EE], 0
.text:00402062                 mov     [ebp+var_F4], ecx
.text:00402068                 jz      loc_402189
.text:0040206E                 mov     [ebp+Block], ebx
.text:00402074                 mov     eax, [ebp+var_EC]
.text:0040207A                 mov     ecx, [edi+eax*4]
.text:0040207D                 lea     eax, [ebp+var_E8]
.text:00402083                 mov     [esp+128h+Locale], eax ; int
.text:00402087                 mov     [ebp+var_F8], ecx
.text:0040208D                 mov     [esp+128h+Category], ecx ; LPCSTR
.text:00402090                 call    sub_408A40
.text:00402095                 test    eax, eax
.text:00402097                 jnz     loc_402130
.text:0040209D                 test    ebx, ebx
.text:0040209F                 jz      short loc_402105
.text:004020A1
.text:004020A1 loc_4020A1:                             ; CODE XREF: sub_401CD0+447↓j
.text:004020A1                                         ; sub_401CD0+454↓j
.text:004020A1                 mov     [esp+128h+var_120], offset sub_402390 ; int
.text:004020A9                 mov     eax, [ebp+var_F8]
.text:004020AF                 lea     edx, [ebp+var_E8]
.text:004020B5                 mov     [esp+128h+var_11C], edx ; int
.text:004020B9                 mov     ecx, [ebp+Block]
.text:004020BF                 mov     [esp+128h+Locale], eax ; int
.text:004020C3                 mov     [esp+128h+Category], ecx ; Block
.text:004020C6                 call    sub_402630
.text:004020CB                 mov     eax, 1
.text:004020D0
.text:004020D0 loc_4020D0:                             ; CODE XREF: sub_401CD0+4B4↓j
.text:004020D0                                         ; sub_401CD0+4E7↓j
.text:004020D0                 test    [ebp+var_F4], eax
.text:004020D6                 setnz   [ebp+var_F0]
.text:004020DD                 inc     [ebp+var_EC]
.text:004020E3                 cmp     [ebp+var_EC], esi
.text:004020E9                 jl      loc_402054
.text:004020EF
.text:004020EF loc_4020EF:                             ; CODE XREF: sub_401CD0+37E↑j
.text:004020EF                 xor     [ebp+var_F0], 1
.text:004020F6                 movzx   ebx, [ebp+var_F0]
.text:004020FD                 mov     [esp+128h+Category], ebx
.text:00402100                 jmp     loc_401DF2
.text:00402105 ; ---------------------------------------------------------------------------
.text:00402105
.text:00402105 loc_402105:                             ; CODE XREF: sub_401CD0+3CF↑j
.text:00402105                 cmp     [ebp+var_EF], 0
.text:0040210C                 mov     ecx, offset aNILTBFASCD ; "%n %i %l %t %b %f %a %s %c %d\n"
.text:00402111                 mov     [ebp+Block], ecx
.text:00402117                 jnz     short loc_4020A1
.text:00402119                 mov     edx, offset aFileNId8iNamel ; "  File: \"%n\"\n    ID: %-8i Namelen: %"...
.text:0040211E                 mov     [ebp+Block], edx
.text:00402124                 jmp     loc_4020A1
.text:00402124 ; ---------------------------------------------------------------------------
.text:00402129                 align 10h
.text:00402130
.text:00402130 loc_402130:                             ; CODE XREF: sub_401CD0+3C7↑j
.text:00402130                 mov     eax, [ebp+var_F8]
.text:00402136                 mov     [esp+128h+Category], eax ; char *
.text:00402139                 call    sub_406CD0
.text:0040213E                 mov     dword ptr [ebp+var_100], eax
.text:00402144                 mov     [esp+128h+Category], offset aCannotReadFile ; "cannot read file system information for"...
.text:0040214B                 call    ds:libintl_gettext
.text:00402151                 mov     [ebp+var_104], eax
.text:00402157                 call    _errno
.text:0040215C                 mov     ecx, dword ptr [ebp+var_100]
.text:00402162                 mov     [esp+128h+var_11C], ecx ; char
.text:00402166                 mov     ecx, [ebp+var_104]
.text:0040216C                 mov     [esp+128h+var_120], ecx ; char *
.text:00402170                 mov     edx, [eax]
.text:00402172                 mov     [esp+128h+Category], 0 ; Code
.text:00402179                 mov     [esp+128h+Locale], edx ; ErrorMessage
.text:0040217D                 call    sub_4083D0
.text:00402182                 xor     eax, eax
.text:00402184                 jmp     loc_4020D0
.text:00402189 ; ---------------------------------------------------------------------------
.text:00402189
.text:00402189 loc_402189:                             ; CODE XREF: sub_401CD0+398↑j
.text:00402189                 movzx   ecx, [ebp+var_EF]
.text:00402190                 mov     [esp+128h+var_11C], ebx ; Block
.text:00402194                 mov     eax, [ebp+var_EC]
.text:0040219A                 movzx   edx, [ebp+var_ED]
.text:004021A1                 mov     [esp+128h+var_120], ecx ; char
.text:004021A5                 mov     [esp+128h+Locale], edx ; char
.text:004021A9                 mov     ecx, [edi+eax*4]
.text:004021AC                 mov     [esp+128h+Category], ecx ; char *
.text:004021AF                 call    sub_402980
.text:004021B4                 movzx   eax, al
.text:004021B7                 jmp     loc_4020D0
.text:004021B7 sub_401CD0      endp
.text:004021B7
.text:004021B7 ; ---------------------------------------------------------------------------
.text:004021BC                 align 10h
.text:004021C0                 push    ebx
.text:004021C1                 sub     esp, 18h
.text:004021C4                 mov     ebx, [esp+20h]
.text:004021C8                 test    ebx, ebx
.text:004021CA                 jz      short loc_402200
.text:004021CC                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004021D3                 call    ds:libintl_gettext
.text:004021D9                 mov     edx, ds:_iob
.text:004021DF                 mov     ecx, ds:dword_413B00
.text:004021E5                 add     edx, 40h ; '@'
.text:004021E8                 mov     [esp+8], ecx
.text:004021EC                 mov     [esp+4], eax
.text:004021F0                 mov     [esp], edx
.text:004021F3                 call    fprintf
.text:004021F8
.text:004021F8 loc_4021F8:                             ; CODE XREF: .text:0040236E↓j
.text:004021F8                 mov     [esp], ebx
.text:004021FB                 call    exit
.text:00402200 ; ---------------------------------------------------------------------------
.text:00402200
.text:00402200 loc_402200:                             ; CODE XREF: .text:004021CA↑j
.text:00402200                 mov     dword ptr [esp], (offset stru_40140A._cnt+1)
.text:00402207                 call    ds:libintl_gettext
.text:0040220D                 mov     ecx, ds:dword_413B00
.text:00402213                 mov     [esp], eax
.text:00402216                 mov     [esp+4], ecx
.text:0040221A                 call    printf
.text:0040221F                 mov     dword ptr [esp], offset aDisplayFileOrF ; "Display file or file system status.\n\n"...
.text:00402226                 call    ds:libintl_gettext
.text:0040222C                 mov     ecx, ds:_iob
.text:00402232                 add     ecx, 20h ; ' '
.text:00402235                 mov     [esp+4], ecx
.text:00402239                 mov     [esp], eax
.text:0040223C                 call    fputs
.text:00402241                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00402248                 call    ds:libintl_gettext
.text:0040224E                 mov     ecx, ds:_iob
.text:00402254                 add     ecx, 20h ; ' '
.text:00402257                 mov     [esp+4], ecx
.text:0040225B                 mov     [esp], eax
.text:0040225E                 call    fputs
.text:00402263                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:0040226A                 call    ds:libintl_gettext
.text:00402270                 mov     ecx, ds:_iob
.text:00402276                 add     ecx, 20h ; ' '
.text:00402279                 mov     [esp+4], ecx
.text:0040227D                 mov     [esp], eax
.text:00402280                 call    fputs
.text:00402285                 mov     dword ptr [esp], offset aTheValidFormat ; "\nThe valid format sequences for files "...
.text:0040228C                 call    ds:libintl_gettext
.text:00402292                 mov     ecx, ds:_iob
.text:00402298                 add     ecx, 20h ; ' '
.text:0040229B                 mov     [esp+4], ecx
.text:0040229F                 mov     [esp], eax
.text:004022A2                 call    fputs
.text:004022A7                 mov     dword ptr [esp], offset aDDeviceNumberI ; "  %D   Device number in hex\n  %d   Dev"...
.text:004022AE                 call    ds:libintl_gettext
.text:004022B4                 mov     ecx, ds:_iob
.text:004022BA                 add     ecx, 20h ; ' '
.text:004022BD                 mov     [esp+4], ecx
.text:004022C1                 mov     [esp], eax
.text:004022C4                 call    fputs
.text:004022C9                 mov     dword ptr [esp], offset aHNumberOfHardL ; "  %h   Number of hard links\n  %i   Ino"...
.text:004022D0                 call    ds:libintl_gettext
.text:004022D6                 mov     ecx, ds:_iob
.text:004022DC                 add     ecx, 20h ; ' '
.text:004022DF                 mov     [esp+4], ecx
.text:004022E3                 mov     [esp], eax
.text:004022E6                 call    fputs
.text:004022EB                 mov     dword ptr [esp], offset aUUserNameOfOwn ; "  %U   User name of owner\n  %u   User "...
.text:004022F2                 call    ds:libintl_gettext
.text:004022F8                 mov     ecx, ds:_iob
.text:004022FE                 add     ecx, 20h ; ' '
.text:00402301                 mov     [esp+4], ecx
.text:00402305                 mov     [esp], eax
.text:00402308                 call    fputs
.text:0040230D                 mov     dword ptr [esp], offset aValidFormatSeq ; "Valid format sequences for file systems"...
.text:00402314                 call    ds:libintl_gettext
.text:0040231A                 mov     ecx, ds:_iob
.text:00402320                 add     ecx, 20h ; ' '
.text:00402323                 mov     [esp+4], ecx
.text:00402327                 mov     [esp], eax
.text:0040232A                 call    fputs
.text:0040232F                 mov     dword ptr [esp], offset aIFileSystemIdI ; "  %i   File System id in hex\n  %l   Ma"...
.text:00402336                 call    ds:libintl_gettext
.text:0040233C                 mov     ecx, ds:_iob
.text:00402342                 add     ecx, 20h ; ' '
.text:00402345                 mov     [esp+4], ecx
.text:00402349                 mov     [esp], eax
.text:0040234C                 call    fputs
.text:00402351                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00402358                 call    ds:libintl_gettext
.text:0040235E                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00402366                 mov     [esp], eax
.text:00402369                 call    printf
.text:0040236E                 jmp     loc_4021F8
.text:0040236E ; ---------------------------------------------------------------------------
.text:00402373 ; const char Source[2]
.text:00402373 Source          db 's',0                ; DATA XREF: sub_402390:loc_40244C↓o
.text:00402373                                         ; sub_402390:loc_40247C↓o ...
.text:00402375 ; const char aI64d[]
.text:00402375 aI64d           db 'I64d',0             ; DATA XREF: sub_402390:loc_402495↓o
.text:00402375                                         ; sub_402390:loc_4024D4↓o ...
.text:0040237A ; const char aX8x[]
.text:0040237A aX8x            db 'x %-8x',0           ; DATA XREF: sub_402390:loc_402537↓o
.text:00402381 ; const char aI64u[]
.text:00402381 aI64u           db 'I64u',0             ; DATA XREF: sub_402390:loc_40255A↓o
.text:00402381                                         ; sub_402AE0:loc_402E52↓o ...
.text:00402386 ; const char aC[]
.text:00402386 aC              db 'c',0                ; DATA XREF: sub_402390:def_4023C0↓o
.text:00402386                                         ; sub_402AE0:def_402B10↓o
.text:00402388 ; const char aLu[]
.text:00402388 aLu             db 'lu',0               ; DATA XREF: sub_402390:loc_402599↓o
.text:00402388                                         ; sub_402AE0:loc_402C70↓o ...
.text:0040238B                 align 10h
.text:00402390
.text:00402390 ; =============== S U B R O U T I N E =======================================
.text:00402390
.text:00402390
.text:00402390 ; int __cdecl sub_402390(char *Format, FILE *File, int, int)
.text:00402390 sub_402390      proc near               ; DATA XREF: sub_401CD0:loc_4020A1↑o
.text:00402390
.text:00402390 Destination     = dword ptr -1Ch
.text:00402390 Source          = dword ptr -18h
.text:00402390 var_10          = dword ptr -10h
.text:00402390 var_C           = dword ptr -0Ch
.text:00402390 var_8           = dword ptr -8
.text:00402390 var_4           = dword ptr -4
.text:00402390 Format          = dword ptr  4
.text:00402390 File            = dword ptr  8
.text:00402390 arg_8           = dword ptr  0Ch
.text:00402390 arg_C           = dword ptr  10h
.text:00402390
.text:00402390                 sub     esp, 1Ch
.text:00402393                 mov     [esp+1Ch+var_10], ebx
.text:00402397                 movsx   ebx, byte ptr [esp+1Ch+File]
.text:0040239C                 mov     [esp+1Ch+var_C], esi
.text:004023A0                 mov     esi, [esp+1Ch+Format]
.text:004023A4                 mov     [esp+1Ch+var_8], edi
.text:004023A8                 lea     eax, [ebx-54h]  ; switch 33 cases
.text:004023AB                 mov     edi, [esp+1Ch+arg_C]
.text:004023AF                 mov     [esp+1Ch+var_4], ebp
.text:004023B3                 cmp     eax, 20h
.text:004023B6                 mov     ebp, [esp+1Ch+arg_8]
.text:004023BA                 ja      def_4023C0      ; jumptable 004023C0 default case, cases 85-96,101,103,104,106,107,109,111-114
.text:004023C0                 jmp     ds:jpt_4023C0[eax*4] ; switch jump
.text:004023C0 ; ---------------------------------------------------------------------------
.text:004023C7                 align 4
.text:004023C8 jpt_4023C0      dd offset loc_40247C    ; DATA XREF: sub_402390+30↑r
.text:004023C8                 dd offset def_4023C0    ; jump table for switch statement
.text:004023C8                 dd offset def_4023C0
.text:004023C8                 dd offset def_4023C0
.text:004023C8                 dd offset def_4023C0
.text:004023C8                 dd offset def_4023C0
.text:004023C8                 dd offset def_4023C0
.text:004023C8                 dd offset def_4023C0
.text:004023C8                 dd offset def_4023C0
.text:004023C8                 dd offset def_4023C0
.text:004023C8                 dd offset def_4023C0
.text:004023C8                 dd offset def_4023C0
.text:004023C8                 dd offset def_4023C0
.text:004023C8                 dd offset loc_402495
.text:004023C8                 dd offset loc_4024D4
.text:004023C8                 dd offset loc_4024EC
.text:004023C8                 dd offset loc_402504
.text:004023C8                 dd offset def_4023C0
.text:004023C8                 dd offset loc_40251C
.text:004023C8                 dd offset def_4023C0
.text:004023C8                 dd offset def_4023C0
.text:004023C8                 dd offset loc_402537
.text:004023C8                 dd offset def_4023C0
.text:004023C8                 dd offset def_4023C0
.text:004023C8                 dd offset loc_40255A
.text:004023C8                 dd offset def_4023C0
.text:004023C8                 dd offset loc_40244C
.text:004023C8                 dd offset def_4023C0
.text:004023C8                 dd offset def_4023C0
.text:004023C8                 dd offset def_4023C0
.text:004023C8                 dd offset def_4023C0
.text:004023C8                 dd offset loc_402599
.text:004023C8                 dd offset loc_4025B0
.text:0040244C ; ---------------------------------------------------------------------------
.text:0040244C
.text:0040244C loc_40244C:                             ; CODE XREF: sub_402390+30↑j
.text:0040244C                                         ; DATA XREF: sub_402390:jpt_4023C0↑o
.text:0040244C                 mov     [esp+1Ch+Source], offset Source ; jumptable 004023C0 case 110
.text:00402454                 mov     [esp+1Ch+Destination], esi ; Destination
.text:00402457                 call    strcat
.text:0040245C                 mov     [esp+1Ch+File], ebp
.text:00402460
.text:00402460 loc_402460:                             ; CODE XREF: sub_402390+103↓j
.text:00402460                                         ; sub_402390+204↓j
.text:00402460                 mov     [esp+1Ch+Format], esi ; Format
.text:00402464                 mov     ebx, [esp+1Ch+var_10]
.text:00402468                 mov     esi, [esp+1Ch+var_C]
.text:0040246C                 mov     edi, [esp+1Ch+var_8]
.text:00402470                 mov     ebp, [esp+1Ch+var_4]
.text:00402474                 add     esp, 1Ch
.text:00402477                 jmp     printf
.text:0040247C ; ---------------------------------------------------------------------------
.text:0040247C
.text:0040247C loc_40247C:                             ; CODE XREF: sub_402390+30↑j
.text:0040247C                                         ; DATA XREF: sub_402390:jpt_4023C0↑o
.text:0040247C                 mov     [esp+1Ch+Source], offset Source ; jumptable 004023C0 case 84
.text:00402484                 mov     [esp+1Ch+Destination], esi ; Destination
.text:00402487                 call    strcat
.text:0040248C                 lea     eax, [edi+40h]
.text:0040248F
.text:0040248F loc_40248F:                             ; CODE XREF: sub_402390+21B↓j
.text:0040248F                 mov     [esp+1Ch+File], eax
.text:00402493                 jmp     short loc_402460
.text:00402495 ; ---------------------------------------------------------------------------
.text:00402495
.text:00402495 loc_402495:                             ; CODE XREF: sub_402390+30↑j
.text:00402495                                         ; DATA XREF: sub_402390:jpt_4023C0↑o
.text:00402495                 mov     [esp+1Ch+Source], offset aI64d ; jumptable 004023C0 case 97
.text:0040249D                 mov     [esp+1Ch+Destination], esi ; Destination
.text:004024A0                 call    strcat
.text:004024A5                 mov     eax, [edi+18h]
.text:004024A8                 mov     edx, [edi+1Ch]
.text:004024AB                 nop
.text:004024AC                 lea     esi, [esi+0]
.text:004024B0
.text:004024B0 loc_4024B0:                             ; CODE XREF: sub_402390+15A↓j
.text:004024B0                                         ; sub_402390+172↓j ...
.text:004024B0                 mov     [esp+1Ch+File], eax
.text:004024B4                 mov     [esp+1Ch+arg_8], edx
.text:004024B8
.text:004024B8 loc_4024B8:                             ; CODE XREF: sub_402390+1C5↓j
.text:004024B8                                         ; sub_402390+1E9↓j
.text:004024B8                 mov     [esp+1Ch+Format], esi ; Format
.text:004024BC                 mov     ebx, [esp+1Ch+var_10]
.text:004024C0                 mov     esi, [esp+1Ch+var_C]
.text:004024C4                 mov     edi, [esp+1Ch+var_8]
.text:004024C8                 mov     ebp, [esp+1Ch+var_4]
.text:004024CC                 add     esp, 1Ch
.text:004024CF                 jmp     printf
.text:004024D4 ; ---------------------------------------------------------------------------
.text:004024D4
.text:004024D4 loc_4024D4:                             ; CODE XREF: sub_402390+30↑j
.text:004024D4                                         ; DATA XREF: sub_402390:jpt_4023C0↑o
.text:004024D4                 mov     [esp+1Ch+Source], offset aI64d ; jumptable 004023C0 case 98
.text:004024DC                 mov     [esp+1Ch+Destination], esi ; Destination
.text:004024DF                 call    strcat
.text:004024E4                 mov     eax, [edi+8]
.text:004024E7                 mov     edx, [edi+0Ch]
.text:004024EA                 jmp     short loc_4024B0
.text:004024EC ; ---------------------------------------------------------------------------
.text:004024EC
.text:004024EC loc_4024EC:                             ; CODE XREF: sub_402390+30↑j
.text:004024EC                                         ; DATA XREF: sub_402390:jpt_4023C0↑o
.text:004024EC                 mov     [esp+1Ch+Source], offset aI64d ; jumptable 004023C0 case 99
.text:004024F4                 mov     [esp+1Ch+Destination], esi ; Destination
.text:004024F7                 call    strcat
.text:004024FC                 mov     eax, [edi+20h]
.text:004024FF                 mov     edx, [edi+24h]
.text:00402502                 jmp     short loc_4024B0
.text:00402504 ; ---------------------------------------------------------------------------
.text:00402504
.text:00402504 loc_402504:                             ; CODE XREF: sub_402390+30↑j
.text:00402504                                         ; DATA XREF: sub_402390:jpt_4023C0↑o
.text:00402504                 mov     [esp+1Ch+Source], offset aI64d ; jumptable 004023C0 case 100
.text:0040250C                 mov     [esp+1Ch+Destination], esi ; Destination
.text:0040250F                 call    strcat
.text:00402514                 mov     eax, [edi+28h]
.text:00402517                 mov     edx, [edi+2Ch]
.text:0040251A                 jmp     short loc_4024B0
.text:0040251C ; ---------------------------------------------------------------------------
.text:0040251C
.text:0040251C loc_40251C:                             ; CODE XREF: sub_402390+30↑j
.text:0040251C                                         ; DATA XREF: sub_402390:jpt_4023C0↑o
.text:0040251C                 mov     [esp+1Ch+Source], offset aI64d ; jumptable 004023C0 case 102
.text:00402524                 mov     [esp+1Ch+Destination], esi ; Destination
.text:00402527                 call    strcat
.text:0040252C                 mov     eax, [edi+10h]
.text:0040252F                 mov     edx, [edi+14h]
.text:00402532                 jmp     loc_4024B0
.text:00402537 ; ---------------------------------------------------------------------------
.text:00402537
.text:00402537 loc_402537:                             ; CODE XREF: sub_402390+30↑j
.text:00402537                                         ; DATA XREF: sub_402390:jpt_4023C0↑o
.text:00402537                 mov     [esp+1Ch+Source], offset aX8x ; jumptable 004023C0 case 105
.text:0040253F                 mov     [esp+1Ch+Destination], esi ; Destination
.text:00402542                 call    strcat
.text:00402547                 mov     edx, [edi+3Ch]
.text:0040254A                 mov     [esp+1Ch+arg_8], edx
.text:0040254E                 mov     edx, [edi+38h]
.text:00402551                 mov     [esp+1Ch+File], edx
.text:00402555                 jmp     loc_4024B8
.text:0040255A ; ---------------------------------------------------------------------------
.text:0040255A
.text:0040255A loc_40255A:                             ; CODE XREF: sub_402390+30↑j
.text:0040255A                                         ; DATA XREF: sub_402390:jpt_4023C0↑o
.text:0040255A                 mov     [esp+1Ch+Source], offset aI64u ; jumptable 004023C0 case 108
.text:00402562                 mov     [esp+1Ch+Destination], esi ; Destination
.text:00402565                 call    strcat
.text:0040256A                 mov     ecx, [edi+64h]
.text:0040256D                 mov     [esp+1Ch+arg_8], 0
.text:00402575                 mov     [esp+1Ch+File], ecx
.text:00402579                 jmp     loc_4024B8
.text:00402579 ; ---------------------------------------------------------------------------
.text:0040257E                 align 10h
.text:00402580
.text:00402580 def_4023C0:                             ; CODE XREF: sub_402390+2A↑j
.text:00402580                                         ; sub_402390+30↑j
.text:00402580                                         ; DATA XREF: ...
.text:00402580                 mov     [esp+1Ch+Source], offset aC ; jumptable 004023C0 default case, cases 85-96,101,103,104,106,107,109,111-114
.text:00402588                 mov     [esp+1Ch+Destination], esi ; Destination
.text:0040258B                 call    strcat
.text:00402590                 mov     [esp+1Ch+File], ebx
.text:00402594                 jmp     loc_402460
.text:00402599 ; ---------------------------------------------------------------------------
.text:00402599
.text:00402599 loc_402599:                             ; CODE XREF: sub_402390+30↑j
.text:00402599                                         ; DATA XREF: sub_402390:jpt_4023C0↑o
.text:00402599                 mov     [esp+1Ch+Source], offset aLu ; jumptable 004023C0 case 115
.text:004025A1                 mov     [esp+1Ch+Destination], esi ; Destination
.text:004025A4                 call    strcat
.text:004025A9                 mov     eax, [edi]
.text:004025AB                 jmp     loc_40248F
.text:004025B0 ; ---------------------------------------------------------------------------
.text:004025B0
.text:004025B0 loc_4025B0:                             ; CODE XREF: sub_402390+30↑j
.text:004025B0                                         ; DATA XREF: sub_402390:jpt_4023C0↑o
.text:004025B0                 mov     esi, ds:_iob    ; jumptable 004023C0 case 116
.text:004025B6                 mov     ebx, [esi+24h]
.text:004025B9                 dec     ebx
.text:004025BA                 mov     [esi+24h], ebx
.text:004025BD                 test    ebx, ebx
.text:004025BF                 js      short loc_4025E4
.text:004025C1                 mov     edi, ds:_iob
.text:004025C7                 mov     eax, [edi+20h]
.text:004025CA                 mov     byte ptr [eax], 2Ah ; '*'
.text:004025CD                 inc     dword ptr [edi+20h]
.text:004025D0                 mov     ebx, [esp+1Ch+var_10]
.text:004025D4                 mov     esi, [esp+1Ch+var_C]
.text:004025D8                 mov     edi, [esp+1Ch+var_8]
.text:004025DC                 mov     ebp, [esp+1Ch+var_4]
.text:004025E0                 add     esp, 1Ch
.text:004025E3                 retn
.text:004025E4 ; ---------------------------------------------------------------------------
.text:004025E4
.text:004025E4 loc_4025E4:                             ; CODE XREF: sub_402390+22F↑j
.text:004025E4                 mov     [esp+1Ch+Format], 2Ah ; '*' ; Ch
.text:004025EC                 mov     ebp, ds:_iob
.text:004025F2                 mov     ebx, [esp+1Ch+var_10]
.text:004025F6                 mov     esi, [esp+1Ch+var_C]
.text:004025FA                 add     ebp, 20h ; ' '
.text:004025FD                 mov     edi, [esp+1Ch+var_8]
.text:00402601                 mov     [esp+1Ch+File], ebp ; File
.text:00402605                 mov     ebp, [esp+1Ch+var_4]
.text:00402609                 add     esp, 1Ch
.text:0040260C                 jmp     _flsbuf
.text:0040260C sub_402390      endp
.text:0040260C
.text:0040260C ; ---------------------------------------------------------------------------
.text:00402611 ; const char Control[]
.text:00402611 Control         db '#-+.I 0123456789',0 ; DATA XREF: sub_402630+86↓o
.text:00402622                 align 10h
.text:00402630
.text:00402630 ; =============== S U B R O U T I N E =======================================
.text:00402630
.text:00402630
.text:00402630 ; int __cdecl sub_402630(void *Block, int, int, int)
.text:00402630 sub_402630      proc near               ; CODE XREF: sub_401CD0+3F6↑p
.text:00402630                                         ; sub_402980+70↓p
.text:00402630
.text:00402630 Str             = dword ptr -2Ch
.text:00402630 Val             = dword ptr -28h
.text:00402630 Size            = dword ptr -24h
.text:00402630 var_20          = dword ptr -20h
.text:00402630 var_1C          = dword ptr -1Ch
.text:00402630 var_18          = dword ptr -18h
.text:00402630 var_14          = dword ptr -14h
.text:00402630 Block           = dword ptr  4
.text:00402630 arg_4           = dword ptr  8
.text:00402630 arg_8           = dword ptr  0Ch
.text:00402630 arg_C           = dword ptr  10h
.text:00402630
.text:00402630                 push    ebp
.text:00402631                 push    edi
.text:00402632                 push    esi
.text:00402633                 push    ebx
.text:00402634                 sub     esp, 1Ch
.text:00402637                 mov     edx, [esp+2Ch+arg_C]
.text:0040263B                 mov     ecx, [esp+2Ch+arg_8]
.text:0040263F                 mov     ebx, [esp+2Ch+arg_4]
.text:00402643                 mov     [esp+2Ch+var_1C], edx
.text:00402647                 mov     edx, [esp+2Ch+Block]
.text:0040264B                 mov     [esp+2Ch+var_18], ecx
.text:0040264F                 mov     [esp+2Ch+var_14], ebx
.text:00402653                 mov     [esp+2Ch+Str], edx ; char *
.text:00402656                 call    sub_406BD0
.text:0040265B                 mov     [esp+2Ch+Str], eax ; Str
.text:0040265E                 mov     ebp, eax
.text:00402660                 mov     ebx, ebp
.text:00402662                 call    strlen
.text:00402667                 inc     eax
.text:00402668                 mov     [esp+2Ch+Str], eax ; size_t
.text:0040266B                 call    sub_406A10
.text:00402670                 test    ebp, ebp
.text:00402672                 mov     edi, eax
.text:00402674                 jz      loc_402728
.text:0040267A                 lea     esi, [esi+0]
.text:00402680
.text:00402680 loc_402680:                             ; CODE XREF: sub_402630+F2↓j
.text:00402680                 mov     [esp+2Ch+Val], 25h ; '%' ; Val
.text:00402688                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040268B                 call    strchr
.text:00402690                 test    eax, eax
.text:00402692                 mov     esi, eax
.text:00402694                 jz      loc_402784
.text:0040269A                 mov     byte ptr [eax], 0
.text:0040269D                 inc     esi
.text:0040269E                 mov     ecx, ds:_iob
.text:004026A4                 mov     [esp+2Ch+Str], ebx ; Buffer
.text:004026A7                 add     ecx, 20h ; ' '
.text:004026AA                 mov     [esp+2Ch+Val], ecx ; Stream
.text:004026AE                 call    fputs
.text:004026B3                 mov     [esp+2Ch+Str], esi ; Str
.text:004026B6                 mov     [esp+2Ch+Val], offset Control ; "#-+.I 0123456789"
.text:004026BE                 call    strspn
.text:004026C3                 mov     byte ptr [edi], 25h ; '%'
.text:004026C6                 mov     ebx, eax
.text:004026C8                 lea     edx, [edi+1]
.text:004026CB                 mov     [esp+2Ch+Val], esi ; Src
.text:004026CF                 add     esi, ebx
.text:004026D1                 mov     [esp+2Ch+Size], eax ; Size
.text:004026D5                 mov     [esp+2Ch+Str], edx ; void *
.text:004026D8                 call    memcpy
.text:004026DD                 mov     byte ptr [ebx+edi+1], 0
.text:004026E2                 lea     ebx, [esi+1]
.text:004026E5                 movsx   eax, byte ptr [esi]
.text:004026E8                 test    eax, eax
.text:004026EA                 jz      loc_402780
.text:004026F0                 cmp     eax, 25h ; '%'
.text:004026F3                 jz      short loc_402740
.text:004026F5                 mov     edx, [esp+2Ch+var_1C]
.text:004026F9                 mov     ecx, [esp+2Ch+var_14]
.text:004026FD                 mov     [esp+2Ch+var_20], edx
.text:00402701                 mov     [esp+2Ch+Size], ecx
.text:00402705                 movsx   edx, byte ptr [esi]
.text:00402708                 mov     [esp+2Ch+Str], edi
.text:0040270B                 mov     [esp+2Ch+Val], edx
.text:0040270F                 call    [esp+2Ch+var_18]
.text:00402713                 lea     esi, [esi+0]
.text:00402719                 lea     edi, [edi+0]
.text:00402720
.text:00402720 loc_402720:                             ; CODE XREF: sub_402630+130↓j
.text:00402720                                         ; sub_402630+14B↓j ...
.text:00402720                 test    ebx, ebx
.text:00402722                 jnz     loc_402680
.text:00402728
.text:00402728 loc_402728:                             ; CODE XREF: sub_402630+44↑j
.text:00402728                 mov     [esp+2Ch+Str], ebp ; Block
.text:0040272B                 call    free
.text:00402730                 mov     [esp+2Ch+Block], edi ; Block
.text:00402734                 add     esp, 1Ch
.text:00402737                 pop     ebx
.text:00402738                 pop     esi
.text:00402739                 pop     edi
.text:0040273A                 pop     ebp
.text:0040273B                 jmp     free
.text:00402740 ; ---------------------------------------------------------------------------
.text:00402740
.text:00402740 loc_402740:                             ; CODE XREF: sub_402630+C3↑j
.text:00402740                                         ; sub_402630+152↓j
.text:00402740                 mov     edx, ds:_iob
.text:00402746                 mov     esi, [edx+24h]
.text:00402749                 dec     esi
.text:0040274A                 mov     [edx+24h], esi
.text:0040274D                 test    esi, esi
.text:0040274F                 js      short loc_402762
.text:00402751                 mov     ecx, ds:_iob
.text:00402757                 mov     eax, [ecx+20h]
.text:0040275A                 mov     byte ptr [eax], 25h ; '%'
.text:0040275D                 inc     dword ptr [ecx+20h]
.text:00402760                 jmp     short loc_402720
.text:00402762 ; ---------------------------------------------------------------------------
.text:00402762
.text:00402762 loc_402762:                             ; CODE XREF: sub_402630+11F↑j
.text:00402762                 mov     [esp+2Ch+Str], 25h ; '%' ; Ch
.text:00402769                 mov     esi, ds:_iob
.text:0040276F                 add     esi, 20h ; ' '
.text:00402772                 mov     [esp+2Ch+Val], esi ; File
.text:00402776                 call    _flsbuf
.text:0040277B                 jmp     short loc_402720
.text:0040277B ; ---------------------------------------------------------------------------
.text:0040277D                 align 10h
.text:00402780
.text:00402780 loc_402780:                             ; CODE XREF: sub_402630+BA↑j
.text:00402780                 xor     ebx, ebx
.text:00402782                 jmp     short loc_402740
.text:00402784 ; ---------------------------------------------------------------------------
.text:00402784
.text:00402784 loc_402784:                             ; CODE XREF: sub_402630+64↑j
.text:00402784                 mov     [esp+2Ch+Str], ebx ; Buffer
.text:00402787                 mov     esi, ds:_iob
.text:0040278D                 xor     ebx, ebx
.text:0040278F                 add     esi, 20h ; ' '
.text:00402792                 mov     [esp+2Ch+Val], esi ; Stream
.text:00402796                 call    fputs
.text:0040279B                 jmp     short loc_402720
.text:0040279B sub_402630      endp
.text:0040279B
.text:0040279B ; ---------------------------------------------------------------------------
.text:0040279D                 align 10h
.text:004027A0 aNSBFUGDIHTTXYZ db '%n %s %b %f %u %g %D %i %h %t %T %X %Y %Z %o',0Ah,0
.text:004027A0                                         ; DATA XREF: sub_402980+9B↓o
.text:004027CE                 align 20h
.text:004027E0 aFileNSize10sBl db '  File: %N',0Ah     ; DATA XREF: sub_402980+B7↓o
.text:004027E0                 db '  Size: %-10s',9,'Blocks: %-10b IO Block: %-6o %F',0Ah
.text:004027E0                 db 'Device: %Dh/%dd',9,'Inode: %-10i  Links: %h',0Ah
.text:004027E0                 db 'Access: (%04a/%10.10A)  Uid: (%5u/%8U)   Gid: (%5g/%8G)',0Ah
.text:004027E0                 db 'Access: %x',0Ah
.text:004027E0                 db 'Modify: %y',0Ah
.text:004027E0                 db 'Change: %z',0Ah,0
.text:0040289B                 align 10h
.text:004028A0 aFileNSize10sBl_0 db '  File: %N',0Ah   ; DATA XREF: sub_402980:loc_402A3E↓o
.text:004028A0                 db '  Size: %-10s',9,'Blocks: %-10b IO Block: %-6o %F',0Ah
.text:004028A0                 db 'Device: %Dh/%dd',9,'Inode: %-10i  Links: %-5h Device type: %t,%T',0Ah
.text:004028A0                 db 'Access: (%04a/%10.10A)  Uid: (%5u/%8U)   Gid: (%5g/%8G)',0Ah
.text:004028A0                 db 'Access: %x',0Ah
.text:004028A0                 db 'Modify: %y',0Ah
.text:004028A0                 db 'Change: %z',0Ah,0
.text:00402970 aCannotStatS    db 'cannot stat %s',0   ; DATA XREF: sub_402980+CD↓o
.text:0040297F                 align 10h
.text:00402980
.text:00402980 ; =============== S U B R O U T I N E =======================================
.text:00402980
.text:00402980
.text:00402980 ; int __cdecl sub_402980(char *, char, char, void *Block)
.text:00402980 sub_402980      proc near               ; CODE XREF: sub_401CD0+4DF↑p
.text:00402980
.text:00402980 Code            = dword ptr -9Ch
.text:00402980 ErrorMessage    = dword ptr -98h
.text:00402980 var_94          = dword ptr -94h
.text:00402980 var_90          = byte ptr -90h
.text:00402980 var_7D          = byte ptr -7Dh
.text:00402980 var_7C          = dword ptr -7Ch
.text:00402980 var_C           = dword ptr -0Ch
.text:00402980 var_8           = dword ptr -8
.text:00402980 var_4           = dword ptr -4
.text:00402980 arg_0           = dword ptr  4
.text:00402980 arg_4           = byte ptr  8
.text:00402980 arg_8           = byte ptr  0Ch
.text:00402980 Block           = dword ptr  10h
.text:00402980
.text:00402980                 sub     esp, 9Ch
.text:00402986                 movzx   edx, [esp+9Ch+arg_8]
.text:0040298E                 cmp     [esp+9Ch+arg_4], 0
.text:00402996                 mov     [esp+9Ch+var_C], ebx
.text:0040299D                 mov     ebx, [esp+9Ch+Block]
.text:004029A4                 mov     [esp+9Ch+var_8], esi
.text:004029AB                 mov     esi, [esp+9Ch+arg_0]
.text:004029B2                 mov     [esp+9Ch+var_4], edi
.text:004029B9                 mov     [esp+9Ch+var_7D], dl
.text:004029BD                 jz      loc_402A84
.text:004029C3                 mov     eax, offset sub_408950
.text:004029C8
.text:004029C8 loc_4029C8:                             ; CODE XREF: sub_402980+109↓j
.text:004029C8                 mov     [esp+9Ch+Code], esi ; char *
.text:004029CB                 lea     edi, [esp+9Ch+var_7C]
.text:004029CF                 mov     [esp+9Ch+ErrorMessage], edi ; int
.text:004029D3                 call    eax ; sub_408950
.text:004029D5                 test    eax, eax
.text:004029D7                 jnz     short loc_402A45
.text:004029D9                 test    ebx, ebx
.text:004029DB                 jz      short loc_402A16
.text:004029DD
.text:004029DD loc_4029DD:                             ; CODE XREF: sub_402980+A0↓j
.text:004029DD                                         ; sub_402980+BC↓j ...
.text:004029DD                 mov     dword ptr [esp+9Ch+var_90], edi ; int
.text:004029E1                 mov     [esp+9Ch+var_94], offset sub_402AE0 ; int
.text:004029E9                 mov     [esp+9Ch+ErrorMessage], esi ; int
.text:004029ED                 mov     [esp+9Ch+Code], ebx ; Block
.text:004029F0                 call    sub_402630
.text:004029F5                 mov     eax, 1
.text:004029FA
.text:004029FA loc_4029FA:                             ; CODE XREF: sub_402980+FF↓j
.text:004029FA                 mov     ebx, [esp+9Ch+var_C]
.text:00402A01                 mov     esi, [esp+9Ch+var_8]
.text:00402A08                 mov     edi, [esp+9Ch+var_4]
.text:00402A0F                 add     esp, 9Ch
.text:00402A15                 retn
.text:00402A16 ; ---------------------------------------------------------------------------
.text:00402A16
.text:00402A16 loc_402A16:                             ; CODE XREF: sub_402980+5B↑j
.text:00402A16                 cmp     [esp+9Ch+var_7D], 0
.text:00402A1B                 mov     ebx, offset aNSBFUGDIHTTXYZ ; "%n %s %b %f %u %g %D %i %h %t %T %X %Y "...
.text:00402A20                 jnz     short loc_4029DD
.text:00402A22                 mov     eax, [esp+9Ch+var_7C]
.text:00402A26                 and     eax, 0F000h
.text:00402A2B                 cmp     eax, 6000h
.text:00402A30                 jz      short loc_402A3E
.text:00402A32                 cmp     eax, 2000h
.text:00402A37                 mov     ebx, offset aFileNSize10sBl ; "  File: %N\n  Size: %-10s\tBlocks: %-10"...
.text:00402A3C                 jnz     short loc_4029DD
.text:00402A3E
.text:00402A3E loc_402A3E:                             ; CODE XREF: sub_402980+B0↑j
.text:00402A3E                 mov     ebx, offset aFileNSize10sBl_0 ; "  File: %N\n  Size: %-10s\tBlocks: %-10"...
.text:00402A43                 jmp     short loc_4029DD
.text:00402A45 ; ---------------------------------------------------------------------------
.text:00402A45
.text:00402A45 loc_402A45:                             ; CODE XREF: sub_402980+57↑j
.text:00402A45                 mov     [esp+9Ch+Code], esi ; char *
.text:00402A48                 call    sub_406CD0
.text:00402A4D                 mov     [esp+9Ch+Code], offset aCannotStatS ; "cannot stat %s"
.text:00402A54                 mov     ebx, eax
.text:00402A56                 call    ds:libintl_gettext
.text:00402A5C                 mov     edi, eax
.text:00402A5E                 call    _errno
.text:00402A63                 mov     dword ptr [esp+9Ch+var_90], ebx ; char
.text:00402A67                 mov     [esp+9Ch+var_94], edi ; char *
.text:00402A6B                 mov     edx, [eax]
.text:00402A6D                 mov     [esp+9Ch+Code], 0 ; Code
.text:00402A74                 mov     [esp+9Ch+ErrorMessage], edx ; ErrorMessage
.text:00402A78                 call    sub_4083D0
.text:00402A7D                 xor     eax, eax
.text:00402A7F                 jmp     loc_4029FA
.text:00402A84 ; ---------------------------------------------------------------------------
.text:00402A84
.text:00402A84 loc_402A84:                             ; CODE XREF: sub_402980+3D↑j
.text:00402A84                 mov     eax, offset sub_408670
.text:00402A89                 jmp     loc_4029C8
.text:00402A89 sub_402980      endp
.text:00402A89
.text:00402A89 ; ---------------------------------------------------------------------------
.text:00402A8E ; const char aI64x[]
.text:00402A8E aI64x           db 'I64x',0             ; DATA XREF: sub_402AE0:loc_402C8A↓o
.text:00402A93 aUnknown        db 'UNKNOWN',0          ; DATA XREF: sub_402AE0+21B↓o
.text:00402A9B ; const char Format[]
.text:00402A9B Format          db ' -> ',0             ; DATA XREF: sub_402AE0+280↓o
.text:00402AA0 aCannotReadSymb db 'cannot read symbolic link %s',0
.text:00402AA0                                         ; DATA XREF: sub_402AE0+299↓o
.text:00402ABD ; const char aLx[]
.text:00402ABD aLx             db 'lx',0               ; DATA XREF: sub_402AE0:loc_402DB0↓o
.text:00402ABD                                         ; sub_402AE0:loc_402E7A↓o ...
.text:00402AC0 ; const char aLd[]
.text:00402AC0 aLd             db 'ld',0               ; DATA XREF: sub_402AE0:loc_402DEE↓o
.text:00402AC0                                         ; sub_402AE0:loc_402E06↓o ...
.text:00402AC3 ; const char aLo[]
.text:00402AC3 aLo             db 'lo',0               ; DATA XREF: sub_402AE0:loc_402E36↓o
.text:00402AC6 ; const char aYMDHMSNZ[]
.text:00402AC6 aYMDHMSNZ       db '%Y-%m-%d %H:%M:%S.%N %z',0
.text:00402AC6                                         ; DATA XREF: sub_402AE0+4B3↓o
.text:00402ADE                 align 10h
.text:00402AE0
.text:00402AE0 ; =============== S U B R O U T I N E =======================================
.text:00402AE0
.text:00402AE0
.text:00402AE0 ; int __cdecl sub_402AE0(char *Format, char, char *, int)
.text:00402AE0 sub_402AE0      proc near               ; DATA XREF: sub_402980+61↑o
.text:00402AE0
.text:00402AE0 Destination     = dword ptr -3Ch
.text:00402AE0 Source          = dword ptr -38h
.text:00402AE0 var_34          = dword ptr -34h
.text:00402AE0 var_30          = dword ptr -30h
.text:00402AE0 var_2C          = dword ptr -2Ch
.text:00402AE0 var_28          = dword ptr -28h
.text:00402AE0 var_1C          = dword ptr -1Ch
.text:00402AE0 var_18          = dword ptr -18h
.text:00402AE0 Time            = dword ptr -14h
.text:00402AE0 var_10          = dword ptr -10h
.text:00402AE0 var_C           = dword ptr -0Ch
.text:00402AE0 var_8           = dword ptr -8
.text:00402AE0 var_4           = dword ptr -4
.text:00402AE0 Format          = dword ptr  4
.text:00402AE0 arg_4           = byte ptr  8
.text:00402AE0 arg_8           = dword ptr  0Ch
.text:00402AE0 arg_C           = dword ptr  10h
.text:00402AE0
.text:00402AE0                 sub     esp, 3Ch
.text:00402AE3                 mov     [esp+3Ch+var_10], ebx
.text:00402AE7                 movsx   ebx, [esp+3Ch+arg_4]
.text:00402AEC                 mov     [esp+3Ch+var_C], esi
.text:00402AF0                 mov     esi, [esp+3Ch+arg_8]
.text:00402AF4                 mov     [esp+3Ch+var_8], edi
.text:00402AF8                 lea     eax, [ebx-41h]  ; switch 58 cases
.text:00402AFB                 mov     edi, [esp+3Ch+arg_C]
.text:00402AFF                 mov     [esp+3Ch+var_4], ebp
.text:00402B03                 cmp     eax, 39h
.text:00402B06                 mov     ebp, [esp+3Ch+Format]
.text:00402B0A                 ja      def_402B10      ; jumptable 00402B10 default case, cases 67,69,72-77,79-83,86,87,91-96,99,101,106-109,112-114,118,119
.text:00402B10                 jmp     ds:jpt_402B10[eax*4] ; switch jump
.text:00402B10 ; ---------------------------------------------------------------------------
.text:00402B17                 align 4
.text:00402B18 jpt_402B10      dd offset loc_402C3C, offset loc_402C70, offset def_402B10
.text:00402B18                                         ; DATA XREF: sub_402AE0+30↑r
.text:00402B18                 dd offset loc_402C8A, offset def_402B10, offset loc_402CB5 ; jump table for switch statement
.text:00402B18                 dd offset loc_402CD9, offset def_402B10, offset def_402B10
.text:00402B18                 dd offset def_402B10, offset def_402B10, offset def_402B10
.text:00402B18                 dd offset def_402B10, offset loc_402D0D, offset def_402B10
.text:00402B18                 dd offset def_402B10, offset def_402B10, offset def_402B10
.text:00402B18                 dd offset def_402B10, offset loc_402DB0, offset loc_402DC9
.text:00402B18                 dd offset def_402B10, offset def_402B10, offset loc_402DEE
.text:00402B18                 dd offset loc_402E06, offset loc_402E1E, offset def_402B10
.text:00402B18                 dd offset def_402B10, offset def_402B10, offset def_402B10
.text:00402B18                 dd offset def_402B10, offset def_402B10, offset loc_402E36
.text:00402B18                 dd offset loc_402E52, offset def_402B10, offset loc_402E6D
.text:00402B18                 dd offset def_402B10, offset loc_402E7A, offset loc_402E91
.text:00402B18                 dd offset loc_402EA9, offset loc_402EC1, offset def_402B10
.text:00402B18                 dd offset def_402B10, offset def_402B10, offset def_402B10
.text:00402B18                 dd offset loc_402C00, offset loc_402EDC, offset def_402B10
.text:00402B18                 dd offset def_402B10, offset def_402B10, offset loc_402EF4
.text:00402B18                 dd offset loc_402F0F, offset loc_402F28, offset def_402B10
.text:00402B18                 dd offset def_402B10, offset loc_402F59, offset loc_402FD7
.text:00402B18                 dd offset loc_40300F
.text:00402C00 ; ---------------------------------------------------------------------------
.text:00402C00
.text:00402C00 loc_402C00:                             ; CODE XREF: sub_402AE0+30↑j
.text:00402C00                                         ; DATA XREF: sub_402AE0:jpt_402B10↑o
.text:00402C00                 mov     [esp+3Ch+Source], offset Source ; jumptable 00402B10 case 110
.text:00402C08                 mov     [esp+3Ch+Destination], ebp ; Destination
.text:00402C0B                 call    strcat
.text:00402C10                 mov     [esp+3Ch+Source], esi
.text:00402C14                 lea     esi, [esi+0]
.text:00402C1A                 lea     edi, [edi+0]
.text:00402C20
.text:00402C20 loc_402C20:                             ; CODE XREF: sub_402AE0+18E↓j
.text:00402C20                                         ; sub_402AE0+1A8↓j ...
.text:00402C20                 mov     [esp+3Ch+Destination], ebp ; Format
.text:00402C23                 call    printf
.text:00402C28
.text:00402C28 loc_402C28:                             ; CODE XREF: sub_402AE0+1D0↓j
.text:00402C28                                         ; sub_402AE0+2C9↓j
.text:00402C28                 mov     ebx, [esp+3Ch+var_10]
.text:00402C2C                 mov     esi, [esp+3Ch+var_C]
.text:00402C30                 mov     edi, [esp+3Ch+var_8]
.text:00402C34                 mov     ebp, [esp+3Ch+var_4]
.text:00402C38                 add     esp, 3Ch
.text:00402C3B                 retn
.text:00402C3C ; ---------------------------------------------------------------------------
.text:00402C3C
.text:00402C3C loc_402C3C:                             ; CODE XREF: sub_402AE0+30↑j
.text:00402C3C                                         ; DATA XREF: sub_402AE0:jpt_402B10↑o
.text:00402C3C                 mov     [esp+3Ch+Source], offset Source ; jumptable 00402B10 case 65
.text:00402C44                 mov     [esp+3Ch+Destination], ebp ; Destination
.text:00402C47                 call    strcat
.text:00402C4C                 mov     [esp+3Ch+Source], offset unk_413000
.text:00402C54                 movzx   esi, word ptr [edi]
.text:00402C57                 mov     [esp+3Ch+Destination], esi
.text:00402C5A                 call    sub_404FC0
.text:00402C5F                 mov     ds:byte_41300A, 0
.text:00402C66                 mov     [esp+3Ch+Source], offset unk_413000
.text:00402C6E                 jmp     short loc_402C20
.text:00402C70 ; ---------------------------------------------------------------------------
.text:00402C70
.text:00402C70 loc_402C70:                             ; CODE XREF: sub_402AE0+30↑j
.text:00402C70                                         ; DATA XREF: sub_402AE0:jpt_402B10↑o
.text:00402C70                 mov     [esp+3Ch+Source], offset aLu ; jumptable 00402B10 case 66
.text:00402C78                 mov     [esp+3Ch+Destination], ebp ; Destination
.text:00402C7B                 call    strcat
.text:00402C80                 mov     [esp+3Ch+Source], 200h
.text:00402C88                 jmp     short loc_402C20
.text:00402C8A ; ---------------------------------------------------------------------------
.text:00402C8A
.text:00402C8A loc_402C8A:                             ; CODE XREF: sub_402AE0+30↑j
.text:00402C8A                                         ; DATA XREF: sub_402AE0:jpt_402B10↑o
.text:00402C8A                 mov     [esp+3Ch+Source], offset aI64x ; jumptable 00402B10 case 68
.text:00402C92
.text:00402C92 loc_402C92:                             ; CODE XREF: sub_402AE0+395↓j
.text:00402C92                 mov     [esp+3Ch+Destination], ebp ; Destination
.text:00402C95                 call    strcat
.text:00402C9A                 mov     eax, [edi+10h]
.text:00402C9D                 mov     edx, [edi+14h]
.text:00402CA0
.text:00402CA0 loc_402CA0:                             ; CODE XREF: sub_402AE0+388↓j
.text:00402CA0                                         ; sub_402AE0+3F7↓j ...
.text:00402CA0                 mov     [esp+3Ch+Source], eax
.text:00402CA4                 mov     [esp+3Ch+var_34], edx
.text:00402CA8                 mov     [esp+3Ch+Destination], ebp ; Format
.text:00402CAB                 call    printf
.text:00402CB0                 jmp     loc_402C28
.text:00402CB5 ; ---------------------------------------------------------------------------
.text:00402CB5
.text:00402CB5 loc_402CB5:                             ; CODE XREF: sub_402AE0+30↑j
.text:00402CB5                                         ; DATA XREF: sub_402AE0:jpt_402B10↑o
.text:00402CB5                 mov     [esp+3Ch+Source], offset Source ; jumptable 00402B10 case 70
.text:00402CBD                 mov     [esp+3Ch+Destination], ebp ; Destination
.text:00402CC0                 call    strcat
.text:00402CC5                 mov     [esp+3Ch+Destination], edi
.text:00402CC8                 call    sub_405190
.text:00402CCD                 lea     esi, [esi+0]
.text:00402CD0
.text:00402CD0 loc_402CD0:                             ; CODE XREF: sub_402AE0+255↓j
.text:00402CD0                                         ; sub_402AE0+2E4↓j ...
.text:00402CD0                 mov     [esp+3Ch+Source], eax
.text:00402CD4                 jmp     loc_402C20
.text:00402CD9 ; ---------------------------------------------------------------------------
.text:00402CD9
.text:00402CD9 loc_402CD9:                             ; CODE XREF: sub_402AE0+30↑j
.text:00402CD9                                         ; DATA XREF: sub_402AE0:jpt_402B10↑o
.text:00402CD9                 mov     [esp+3Ch+Source], offset Source ; jumptable 00402B10 case 71
.text:00402CE1                 mov     [esp+3Ch+Destination], ebp ; Destination
.text:00402CE4                 call    strcat
.text:00402CE9                 call    nullsub_1
.text:00402CEE                 mov     ecx, [edi+20h]
.text:00402CF1                 mov     [esp+3Ch+Destination], ecx
.text:00402CF4                 call    sub_408C20
.text:00402CF9
.text:00402CF9 loc_402CF9:                             ; CODE XREF: sub_402AE0+309↓j
.text:00402CF9                 test    eax, eax
.text:00402CFB                 mov     edx, offset aUnknown ; "UNKNOWN"
.text:00402D00                 jz      short loc_402D04
.text:00402D02                 mov     edx, [eax]
.text:00402D04
.text:00402D04 loc_402D04:                             ; CODE XREF: sub_402AE0+220↑j
.text:00402D04                 mov     [esp+3Ch+Source], edx
.text:00402D08                 jmp     loc_402C20
.text:00402D0D ; ---------------------------------------------------------------------------
.text:00402D0D
.text:00402D0D loc_402D0D:                             ; CODE XREF: sub_402AE0+30↑j
.text:00402D0D                                         ; DATA XREF: sub_402AE0:jpt_402B10↑o
.text:00402D0D                 mov     [esp+3Ch+Source], offset Source ; jumptable 00402B10 case 78
.text:00402D15                 mov     [esp+3Ch+Destination], ebp ; Destination
.text:00402D18                 call    strcat
.text:00402D1D                 mov     edx, [edi]
.text:00402D1F                 and     edx, 0F000h
.text:00402D25                 cmp     edx, 0A000h
.text:00402D2B                 jz      short loc_402D37
.text:00402D2D                 mov     [esp+3Ch+Destination], esi ; char *
.text:00402D30
.text:00402D30 loc_402D30:                             ; CODE XREF: sub_402AE0+28F↓j
.text:00402D30                 call    sub_406CD0
.text:00402D35                 jmp     short loc_402CD0
.text:00402D37 ; ---------------------------------------------------------------------------
.text:00402D37
.text:00402D37 loc_402D37:                             ; CODE XREF: sub_402AE0+24B↑j
.text:00402D37                 mov     edx, [edi+30h]
.text:00402D3A                 mov     [esp+3Ch+Destination], esi ; char *
.text:00402D3D                 mov     [esp+3Ch+Source], edx ; int
.text:00402D41                 call    sub_406D00
.text:00402D46                 test    eax, eax
.text:00402D48                 mov     ebx, eax
.text:00402D4A                 jz      short loc_402D71
.text:00402D4C                 mov     [esp+3Ch+Destination], esi ; char *
.text:00402D4F                 call    sub_406CD0
.text:00402D54                 mov     [esp+3Ch+Source], eax
.text:00402D58                 mov     [esp+3Ch+Destination], ebp ; Format
.text:00402D5B                 call    printf
.text:00402D60                 mov     [esp+3Ch+Destination], offset Format ; " -> "
.text:00402D67                 call    printf
.text:00402D6C                 mov     [esp+3Ch+Destination], ebx
.text:00402D6F                 jmp     short loc_402D30
.text:00402D71 ; ---------------------------------------------------------------------------
.text:00402D71
.text:00402D71 loc_402D71:                             ; CODE XREF: sub_402AE0+26A↑j
.text:00402D71                 mov     [esp+3Ch+Destination], esi ; char *
.text:00402D74                 call    sub_406CD0
.text:00402D79                 mov     [esp+3Ch+Destination], offset aCannotReadSymb ; "cannot read symbolic link %s"
.text:00402D80                 mov     ebx, eax
.text:00402D82                 call    ds:libintl_gettext
.text:00402D88                 mov     edi, eax
.text:00402D8A                 call    _errno
.text:00402D8F                 mov     [esp+3Ch+var_30], ebx ; char
.text:00402D93                 mov     [esp+3Ch+var_34], edi ; char *
.text:00402D97                 mov     ecx, [eax]
.text:00402D99                 mov     [esp+3Ch+Destination], 0 ; Code
.text:00402DA0                 mov     [esp+3Ch+Source], ecx ; ErrorMessage
.text:00402DA4                 call    sub_4083D0
.text:00402DA9                 jmp     loc_402C28
.text:00402DA9 ; ---------------------------------------------------------------------------
.text:00402DAE                 align 10h
.text:00402DB0
.text:00402DB0 loc_402DB0:                             ; CODE XREF: sub_402AE0+30↑j
.text:00402DB0                                         ; DATA XREF: sub_402AE0:jpt_402B10↑o
.text:00402DB0                 mov     [esp+3Ch+Source], offset aLx ; jumptable 00402B10 case 84
.text:00402DB8                 mov     [esp+3Ch+Destination], ebp ; Destination
.text:00402DBB                 call    strcat
.text:00402DC0                 movzx   eax, byte ptr [edi+28h]
.text:00402DC4                 jmp     loc_402CD0
.text:00402DC9 ; ---------------------------------------------------------------------------
.text:00402DC9
.text:00402DC9 loc_402DC9:                             ; CODE XREF: sub_402AE0+30↑j
.text:00402DC9                                         ; DATA XREF: sub_402AE0:jpt_402B10↑o
.text:00402DC9                 mov     [esp+3Ch+Source], offset Source ; jumptable 00402B10 case 85
.text:00402DD1                 mov     [esp+3Ch+Destination], ebp ; Destination
.text:00402DD4                 call    strcat
.text:00402DD9                 call    nullsub_2
.text:00402DDE                 mov     edx, [edi+1Ch]
.text:00402DE1                 mov     [esp+3Ch+Destination], edx
.text:00402DE4                 call    sub_408C40
.text:00402DE9                 jmp     loc_402CF9
.text:00402DEE ; ---------------------------------------------------------------------------
.text:00402DEE
.text:00402DEE loc_402DEE:                             ; CODE XREF: sub_402AE0+30↑j
.text:00402DEE                                         ; DATA XREF: sub_402AE0:jpt_402B10↑o
.text:00402DEE                 mov     [esp+3Ch+Source], offset aLd ; jumptable 00402B10 case 88
.text:00402DF6                 mov     [esp+3Ch+Destination], ebp ; Destination
.text:00402DF9                 call    strcat
.text:00402DFE                 mov     eax, [edi+38h]
.text:00402E01                 jmp     loc_402CD0
.text:00402E06 ; ---------------------------------------------------------------------------
.text:00402E06
.text:00402E06 loc_402E06:                             ; CODE XREF: sub_402AE0+30↑j
.text:00402E06                                         ; DATA XREF: sub_402AE0:jpt_402B10↑o
.text:00402E06                 mov     [esp+3Ch+Source], offset aLd ; jumptable 00402B10 case 89
.text:00402E0E                 mov     [esp+3Ch+Destination], ebp ; Destination
.text:00402E11                 call    strcat
.text:00402E16                 mov     eax, [edi+40h]
.text:00402E19                 jmp     loc_402CD0
.text:00402E1E ; ---------------------------------------------------------------------------
.text:00402E1E
.text:00402E1E loc_402E1E:                             ; CODE XREF: sub_402AE0+30↑j
.text:00402E1E                                         ; DATA XREF: sub_402AE0:jpt_402B10↑o
.text:00402E1E                 mov     [esp+3Ch+Source], offset aLd ; jumptable 00402B10 case 90
.text:00402E26                 mov     [esp+3Ch+Destination], ebp ; Destination
.text:00402E29                 call    strcat
.text:00402E2E                 mov     eax, [edi+48h]
.text:00402E31                 jmp     loc_402CD0
.text:00402E36 ; ---------------------------------------------------------------------------
.text:00402E36
.text:00402E36 loc_402E36:                             ; CODE XREF: sub_402AE0+30↑j
.text:00402E36                                         ; DATA XREF: sub_402AE0:jpt_402B10↑o
.text:00402E36                 mov     [esp+3Ch+Source], offset aLo ; jumptable 00402B10 case 97
.text:00402E3E                 mov     [esp+3Ch+Destination], ebp ; Destination
.text:00402E41                 call    strcat
.text:00402E46                 mov     eax, [edi]
.text:00402E48                 and     eax, 0FFFh
.text:00402E4D                 jmp     loc_402CD0
.text:00402E52 ; ---------------------------------------------------------------------------
.text:00402E52
.text:00402E52 loc_402E52:                             ; CODE XREF: sub_402AE0+30↑j
.text:00402E52                                         ; DATA XREF: sub_402AE0:jpt_402B10↑o
.text:00402E52                 mov     [esp+3Ch+Source], offset aI64u ; jumptable 00402B10 case 98
.text:00402E5A                 mov     [esp+3Ch+Destination], ebp ; Destination
.text:00402E5D                 call    strcat
.text:00402E62                 mov     eax, [edi+58h]
.text:00402E65                 mov     edx, [edi+5Ch]
.text:00402E68                 jmp     loc_402CA0
.text:00402E6D ; ---------------------------------------------------------------------------
.text:00402E6D
.text:00402E6D loc_402E6D:                             ; CODE XREF: sub_402AE0+30↑j
.text:00402E6D                                         ; DATA XREF: sub_402AE0:jpt_402B10↑o
.text:00402E6D                 mov     [esp+3Ch+Source], offset aI64u ; jumptable 00402B10 case 100
.text:00402E75                 jmp     loc_402C92
.text:00402E7A ; ---------------------------------------------------------------------------
.text:00402E7A
.text:00402E7A loc_402E7A:                             ; CODE XREF: sub_402AE0+30↑j
.text:00402E7A                                         ; DATA XREF: sub_402AE0:jpt_402B10↑o
.text:00402E7A                 mov     [esp+3Ch+Source], offset aLx ; jumptable 00402B10 case 102
.text:00402E82                 mov     [esp+3Ch+Destination], ebp ; Destination
.text:00402E85                 call    strcat
.text:00402E8A                 mov     eax, [edi]
.text:00402E8C                 jmp     loc_402CD0
.text:00402E91 ; ---------------------------------------------------------------------------
.text:00402E91
.text:00402E91 loc_402E91:                             ; CODE XREF: sub_402AE0+30↑j
.text:00402E91                                         ; DATA XREF: sub_402AE0:jpt_402B10↑o
.text:00402E91                 mov     [esp+3Ch+Source], offset aLu ; jumptable 00402B10 case 103
.text:00402E99                 mov     [esp+3Ch+Destination], ebp ; Destination
.text:00402E9C                 call    strcat
.text:00402EA1                 mov     eax, [edi+20h]
.text:00402EA4                 jmp     loc_402CD0
.text:00402EA9 ; ---------------------------------------------------------------------------
.text:00402EA9
.text:00402EA9 loc_402EA9:                             ; CODE XREF: sub_402AE0+30↑j
.text:00402EA9                                         ; DATA XREF: sub_402AE0:jpt_402B10↑o
.text:00402EA9                 mov     [esp+3Ch+Source], offset aLu ; jumptable 00402B10 case 104
.text:00402EB1                 mov     [esp+3Ch+Destination], ebp ; Destination
.text:00402EB4                 call    strcat
.text:00402EB9                 mov     eax, [edi+18h]
.text:00402EBC                 jmp     loc_402CD0
.text:00402EC1 ; ---------------------------------------------------------------------------
.text:00402EC1
.text:00402EC1 loc_402EC1:                             ; CODE XREF: sub_402AE0+30↑j
.text:00402EC1                                         ; DATA XREF: sub_402AE0:jpt_402B10↑o
.text:00402EC1                 mov     [esp+3Ch+Source], offset aI64u ; jumptable 00402B10 case 105
.text:00402EC9                 mov     [esp+3Ch+Destination], ebp ; Destination
.text:00402ECC                 call    strcat
.text:00402ED1                 mov     eax, [edi+8]
.text:00402ED4                 mov     edx, [edi+0Ch]
.text:00402ED7                 jmp     loc_402CA0
.text:00402EDC ; ---------------------------------------------------------------------------
.text:00402EDC
.text:00402EDC loc_402EDC:                             ; CODE XREF: sub_402AE0+30↑j
.text:00402EDC                                         ; DATA XREF: sub_402AE0:jpt_402B10↑o
.text:00402EDC                 mov     [esp+3Ch+Source], offset aLu ; jumptable 00402B10 case 111
.text:00402EE4                 mov     [esp+3Ch+Destination], ebp ; Destination
.text:00402EE7                 call    strcat
.text:00402EEC                 mov     eax, [edi+50h]
.text:00402EEF                 jmp     loc_402CD0
.text:00402EF4 ; ---------------------------------------------------------------------------
.text:00402EF4
.text:00402EF4 loc_402EF4:                             ; CODE XREF: sub_402AE0+30↑j
.text:00402EF4                                         ; DATA XREF: sub_402AE0:jpt_402B10↑o
.text:00402EF4                 mov     [esp+3Ch+Source], offset aI64u ; jumptable 00402B10 case 115
.text:00402EFC                 mov     [esp+3Ch+Destination], ebp ; Destination
.text:00402EFF                 call    strcat
.text:00402F04                 mov     eax, [edi+30h]
.text:00402F07                 mov     edx, [edi+34h]
.text:00402F0A                 jmp     loc_402CA0
.text:00402F0F ; ---------------------------------------------------------------------------
.text:00402F0F
.text:00402F0F loc_402F0F:                             ; CODE XREF: sub_402AE0+30↑j
.text:00402F0F                                         ; DATA XREF: sub_402AE0:jpt_402B10↑o
.text:00402F0F                 mov     [esp+3Ch+Source], offset aLx ; jumptable 00402B10 case 116
.text:00402F17                 mov     [esp+3Ch+Destination], ebp ; Destination
.text:00402F1A                 call    strcat
.text:00402F1F                 movzx   eax, byte ptr [edi+29h]
.text:00402F23                 jmp     loc_402CD0
.text:00402F28 ; ---------------------------------------------------------------------------
.text:00402F28
.text:00402F28 loc_402F28:                             ; CODE XREF: sub_402AE0+30↑j
.text:00402F28                                         ; DATA XREF: sub_402AE0:jpt_402B10↑o
.text:00402F28                 mov     [esp+3Ch+Source], offset aLu ; jumptable 00402B10 case 117
.text:00402F30                 mov     [esp+3Ch+Destination], ebp ; Destination
.text:00402F33                 call    strcat
.text:00402F38                 mov     eax, [edi+1Ch]
.text:00402F3B                 jmp     loc_402CD0
.text:00402F40 ; ---------------------------------------------------------------------------
.text:00402F40
.text:00402F40 def_402B10:                             ; CODE XREF: sub_402AE0+2A↑j
.text:00402F40                                         ; sub_402AE0+30↑j
.text:00402F40                                         ; DATA XREF: ...
.text:00402F40                 mov     [esp+3Ch+Source], offset aC ; jumptable 00402B10 default case, cases 67,69,72-77,79-83,86,87,91-96,99,101,106-109,112-114,118,119
.text:00402F48                 mov     [esp+3Ch+Destination], ebp ; Destination
.text:00402F4B                 call    strcat
.text:00402F50                 mov     [esp+3Ch+Source], ebx
.text:00402F54                 jmp     loc_402C20
.text:00402F59 ; ---------------------------------------------------------------------------
.text:00402F59
.text:00402F59 loc_402F59:                             ; CODE XREF: sub_402AE0+30↑j
.text:00402F59                                         ; DATA XREF: sub_402AE0:jpt_402B10↑o
.text:00402F59                 mov     [esp+3Ch+Source], offset Source ; jumptable 00402B10 case 120
.text:00402F61                 mov     [esp+3Ch+Destination], ebp ; Destination
.text:00402F64                 call    strcat
.text:00402F69                 mov     ebx, [edi+38h]
.text:00402F6C                 mov     [esp+3Ch+Time], ebx
.text:00402F70                 mov     ebx, [edi+3Ch]
.text:00402F73                 lea     edi, [esp+3Ch+Time]
.text:00402F77                 mov     [esp+3Ch+Destination], edi ; Time
.text:00402F7A                 call    localtime
.text:00402F7F                 test    eax, eax
.text:00402F81                 jz      short loc_402FB9
.text:00402F83
.text:00402F83 loc_402F83:                             ; CODE XREF: sub_402AE0+51F↓j
.text:00402F83                                         ; sub_402AE0+557↓j
.text:00402F83                 mov     [esp+3Ch+var_28], ebx ; int
.text:00402F87                 mov     [esp+3Ch+var_2C], 0 ; int
.text:00402F8F                 mov     [esp+3Ch+var_30], eax ; struct tm *
.text:00402F93                 mov     [esp+3Ch+var_34], offset aYMDHMSNZ ; "%Y-%m-%d %H:%M:%S.%N %z"
.text:00402F9B                 mov     [esp+3Ch+Source], 2Ch ; ',' ; int
.text:00402FA3                 mov     [esp+3Ch+Destination], offset unk_413010 ; int
.text:00402FAA                 call    sub_403090
.text:00402FAF                 mov     eax, offset unk_413010
.text:00402FB4                 jmp     loc_402CD0
.text:00402FB9 ; ---------------------------------------------------------------------------
.text:00402FB9
.text:00402FB9 loc_402FB9:                             ; CODE XREF: sub_402AE0+4A1↑j
.text:00402FB9                 mov     [esp+3Ch+var_34], offset unk_413010
.text:00402FC1                 mov     eax, [esp+3Ch+Time]
.text:00402FC5
.text:00402FC5 loc_402FC5:                             ; CODE XREF: sub_402AE0+52D↓j
.text:00402FC5                                         ; sub_402AE0+569↓j
.text:00402FC5                 mov     [esp+3Ch+Destination], eax
.text:00402FC8                 cdq
.text:00402FC9                 mov     [esp+3Ch+Source], edx
.text:00402FCD                 call    sub_406DA0
.text:00402FD2                 jmp     loc_402CD0
.text:00402FD7 ; ---------------------------------------------------------------------------
.text:00402FD7
.text:00402FD7 loc_402FD7:                             ; CODE XREF: sub_402AE0+30↑j
.text:00402FD7                                         ; DATA XREF: sub_402AE0:jpt_402B10↑o
.text:00402FD7                 mov     [esp+3Ch+Source], offset Source ; jumptable 00402B10 case 121
.text:00402FDF                 lea     esi, [esp+3Ch+var_18]
.text:00402FE3                 mov     [esp+3Ch+Destination], ebp ; Destination
.text:00402FE6                 call    strcat
.text:00402FEB                 mov     edx, [edi+40h]
.text:00402FEE                 mov     [esp+3Ch+var_18], edx
.text:00402FF2                 mov     ebx, [edi+44h]
.text:00402FF5                 mov     [esp+3Ch+Destination], esi ; Time
.text:00402FF8                 call    localtime
.text:00402FFD                 test    eax, eax
.text:00402FFF                 jnz     short loc_402F83
.text:00403001                 mov     [esp+3Ch+var_34], offset unk_413010
.text:00403009                 mov     eax, [esp+3Ch+var_18]
.text:0040300D                 jmp     short loc_402FC5
.text:0040300F ; ---------------------------------------------------------------------------
.text:0040300F
.text:0040300F loc_40300F:                             ; CODE XREF: sub_402AE0+30↑j
.text:0040300F                                         ; DATA XREF: sub_402AE0:jpt_402B10↑o
.text:0040300F                 mov     [esp+3Ch+Source], offset Source ; jumptable 00402B10 case 122
.text:00403017                 mov     [esp+3Ch+Destination], ebp ; Destination
.text:0040301A                 call    strcat
.text:0040301F                 mov     ebx, [edi+48h]
.text:00403022                 lea     ecx, [esp+3Ch+var_1C]
.text:00403026                 mov     [esp+3Ch+var_1C], ebx
.text:0040302A                 mov     ebx, [edi+4Ch]
.text:0040302D                 mov     [esp+3Ch+Destination], ecx ; Time
.text:00403030                 call    localtime
.text:00403035                 test    eax, eax
.text:00403037                 jnz     loc_402F83
.text:0040303D                 mov     [esp+3Ch+var_34], offset unk_413010
.text:00403045                 mov     eax, [esp+3Ch+var_1C]
.text:00403049                 jmp     loc_402FC5
.text:00403049 sub_402AE0      endp
.text:00403049
.text:00403049 ; ---------------------------------------------------------------------------
.text:0040304E                 align 20h
.text:00403060
.text:00403060 ; =============== S U B R O U T I N E =======================================
.text:00403060
.text:00403060
.text:00403060 sub_403060      proc near               ; DATA XREF: sub_403090+53↓o
.text:00403060                 inc     edi
.text:00403061                 dec     ebp
.text:00403062                 push    esp
.text:00403063
.text:00403063 loc_403063:                             ; DATA XREF: sub_403090:loc_403D23↓o
.text:00403063                 add     ds:64252F6Dh, ah
.text:00403069                 das
.text:0040306A
.text:0040306A loc_40306A:                             ; DATA XREF: sub_403090:loc_403EDE↓o
.text:0040306A                 and     eax, 59250079h
.text:0040306F                 sub     eax, 252D6D25h
.text:00403074
.text:00403074 loc_403074:                             ; DATA XREF: sub_403090:loc_40401A↓o
.text:00403074                 add     fs:4D253A48h, ah
.text:0040307B
.text:0040307B loc_40307B:                             ; DATA XREF: sub_403090:loc_404060↓o
.text:0040307B                 add     ds:4D253A48h, ah
.text:00403081
.text:00403081 loc_403081:                             ; DATA XREF: sub_403090:loc_404392↓o
.text:00403081                 cmp     ah, ds:8D000053h
.text:00403087                 jbe     short $+2
.text:00403089
.text:00403089 loc_403089:                             ; CODE XREF: sub_403060+27↑j
.text:00403089                 lea     edi, [edi+0]
.text:00403089 sub_403060      endp ; sp-analysis failed
.text:00403089
.text:00403090
.text:00403090 ; =============== S U B R O U T I N E =======================================
.text:00403090
.text:00403090
.text:00403090 ; int __cdecl sub_403090(int, int, char *, struct tm *, int, int)
.text:00403090 sub_403090      proc near               ; CODE XREF: sub_402AE0+4CA↑p
.text:00403090                                         ; sub_403090+CEB↓p ...
.text:00403090
.text:00403090 Str             = dword ptr -59Ch
.text:00403090 SizeInBytes     = dword ptr -598h
.text:00403090 State           = dword ptr -594h
.text:00403090 Tm              = dword ptr -590h
.text:00403090 var_58C         = dword ptr -58Ch
.text:00403090 var_588         = dword ptr -588h
.text:00403090 var_57C         = dword ptr -57Ch
.text:00403090 var_578         = dword ptr -578h
.text:00403090 var_570         = dword ptr -570h
.text:00403090 var_564         = dword ptr -564h
.text:00403090 var_560         = dword ptr -560h
.text:00403090 var_55C         = dword ptr -55Ch
.text:00403090 var_558         = dword ptr -558h
.text:00403090 var_554         = dword ptr -554h
.text:00403090 var_550         = dword ptr -550h
.text:00403090 var_54C         = dword ptr -54Ch
.text:00403090 var_548         = dword ptr -548h
.text:00403090 var_544         = dword ptr -544h
.text:00403090 var_540         = dword ptr -540h
.text:00403090 var_53C         = dword ptr -53Ch
.text:00403090 var_538         = dword ptr -538h
.text:00403090 Size            = dword ptr -534h
.text:00403090 var_530         = dword ptr -530h
.text:00403090 var_52C         = dword ptr -52Ch
.text:00403090 var_528         = dword ptr -528h
.text:00403090 var_524         = dword ptr -524h
.text:00403090 var_520         = dword ptr -520h
.text:00403090 var_51C         = dword ptr -51Ch
.text:00403090 var_518         = dword ptr -518h
.text:00403090 var_514         = dword ptr -514h
.text:00403090 var_510         = dword ptr -510h
.text:00403090 var_50C         = dword ptr -50Ch
.text:00403090 var_508         = dword ptr -508h
.text:00403090 var_504         = dword ptr -504h
.text:00403090 var_500         = dword ptr -500h
.text:00403090 var_4FC         = dword ptr -4FCh
.text:00403090 var_4F8         = dword ptr -4F8h
.text:00403090 Format          = byte ptr -4F4h
.text:00403090 var_4F3         = byte ptr -4F3h
.text:00403090 var_4F2         = byte ptr -4F2h
.text:00403090 var_4F0         = mbstate_t ptr -4F0h
.text:00403090 var_4E8         = dword ptr -4E8h
.text:00403090 var_4E4         = dword ptr -4E4h
.text:00403090 var_4E0         = dword ptr -4E0h
.text:00403090 var_4DC         = dword ptr -4DCh
.text:00403090 var_4D8         = dword ptr -4D8h
.text:00403090 var_4BC         = tm ptr -4BCh
.text:00403090 var_48C         = dword ptr -48Ch
.text:00403090 var_488         = dword ptr -488h
.text:00403090 var_484         = dword ptr -484h
.text:00403090 var_478         = dword ptr -478h
.text:00403090 var_470         = dword ptr -470h
.text:00403090 var_45C         = tm ptr -45Ch
.text:00403090 Buffer          = byte ptr -42Ch
.text:00403090 var_2C          = byte ptr -2Ch
.text:00403090 var_20          = byte ptr -20h
.text:00403090 arg_0           = dword ptr  4
.text:00403090 arg_4           = dword ptr  8
.text:00403090 arg_8           = dword ptr  0Ch
.text:00403090 arg_C           = dword ptr  10h
.text:00403090 arg_10          = dword ptr  14h
.text:00403090 arg_14          = dword ptr  18h
.text:00403090
.text:00403090                 push    ebp
.text:00403091                 xor     edx, edx
.text:00403093                 xor     ecx, ecx
.text:00403095                 push    edi
.text:00403096                 push    esi
.text:00403097                 push    ebx
.text:00403098                 sub     esp, 58Ch
.text:0040309E                 xor     ebx, ebx
.text:004030A0                 mov     [esp+59Ch+var_500], edx
.text:004030A7                 mov     edi, [esp+59Ch+arg_C]
.text:004030AE                 mov     edx, [esp+59Ch+arg_10]
.text:004030B5                 mov     [esp+59Ch+var_504], ebx
.text:004030BC                 mov     eax, [esp+59Ch+arg_0]
.text:004030C3                 mov     esi, [edi+8]
.text:004030C6                 mov     [esp+59Ch+var_50C], ecx
.text:004030CD                 test    edx, edx
.text:004030CF                 mov     [esp+59Ch+var_508], eax
.text:004030D6                 mov     [esp+59Ch+var_4FC], esi
.text:004030DD                 jz      loc_404FB0
.text:004030E3                 mov     ebp, offset sub_403060
.text:004030E8                 mov     [esp+59Ch+var_500], ebp
.text:004030EF
.text:004030EF loc_4030EF:                             ; CODE XREF: sub_403090+1F25↓j
.text:004030EF                 cmp     [esp+59Ch+var_4FC], 0Ch
.text:004030F7                 jle     loc_404F90
.text:004030FD                 sub     [esp+59Ch+var_4FC], 0Ch
.text:00403105
.text:00403105 loc_403105:                             ; CODE XREF: sub_403090+1F09↓j
.text:00403105                                         ; sub_403090+1F1B↓j
.text:00403105                 mov     ebp, [esp+59Ch+arg_8]
.text:0040310C                 movzx   eax, byte ptr [ebp+0]
.text:00403110                 test    al, al
.text:00403112                 jz      loc_4031C0
.text:00403118                 mov     cl, al
.text:0040311A
.text:0040311A loc_40311A:                             ; CODE XREF: sub_403090+123↓j
.text:0040311A                 mov     [esp+59Ch+var_524], 0
.text:00403122                 xor     eax, eax
.text:00403124                 xor     ebx, ebx
.text:00403126                 mov     [esp+59Ch+var_510], eax
.text:0040312D                 mov     edi, 0FFFFFFFFh
.text:00403132                 movsx   eax, cl
.text:00403135                 mov     [esp+59Ch+var_528], 0
.text:0040313D                 cmp     eax, 3Fh ; '?'
.text:00403140                 jg      loc_404F70
.text:00403146                 cmp     eax, 26h ; '&'
.text:00403149                 jge     short loc_403170
.text:0040314B                 cmp     eax, 23h ; '#'
.text:0040314E                 jg      loc_4032F8
.text:00403154                 cmp     eax, 20h ; ' '
.text:00403157                 jge     short loc_403170
.text:00403159                 sub     eax, 8
.text:0040315C                 cmp     eax, 5
.text:0040315F
.text:0040315F loc_40315F:                             ; CODE XREF: sub_403090+1EF8↓j
.text:0040315F                 ja      loc_4031F4
.text:00403165                 lea     esi, [esi+0]
.text:00403169                 lea     edi, [edi+0]
.text:00403170
.text:00403170 loc_403170:                             ; CODE XREF: sub_403090+B9↑j
.text:00403170                                         ; sub_403090+C7↑j ...
.text:00403170                 mov     ebx, [esp+59Ch+arg_4]
.text:00403177                 xor     edx, edx
.text:00403179                 mov     edi, [esp+59Ch+var_504]
.text:00403180                 sub     ebx, edi
.text:00403182                 cmp     ebx, 1
.text:00403185                 jbe     short loc_4031E7
.text:00403187                 mov     esi, [esp+59Ch+var_508]
.text:0040318E                 test    esi, esi
.text:00403190                 jz      short loc_4031A3
.text:00403192                 mov     edx, [esp+59Ch+var_508]
.text:00403199                 mov     [edx], cl
.text:0040319B                 inc     edx
.text:0040319C                 mov     [esp+59Ch+var_508], edx
.text:004031A3
.text:004031A3 loc_4031A3:                             ; CODE XREF: sub_403090+100↑j
.text:004031A3                 inc     [esp+59Ch+var_504]
.text:004031AA
.text:004031AA loc_4031AA:                             ; CODE XREF: sub_403090+23E↓j
.text:004031AA                                         ; sub_403090+5A2↓j ...
.text:004031AA                 inc     ebp
.text:004031AB                 movzx   edx, byte ptr [ebp+0]
.text:004031AF                 test    dl, dl
.text:004031B1                 mov     cl, dl
.text:004031B3                 jnz     loc_40311A
.text:004031B9                 lea     esi, [esi+0]
.text:004031C0
.text:004031C0 loc_4031C0:                             ; CODE XREF: sub_403090+82↑j
.text:004031C0                 mov     ebp, [esp+59Ch+var_508]
.text:004031C7                 test    ebp, ebp
.text:004031C9                 jz      short loc_4031E0
.text:004031CB                 mov     ecx, [esp+59Ch+arg_4]
.text:004031D2                 test    ecx, ecx
.text:004031D4                 jz      short loc_4031E0
.text:004031D6                 mov     edi, [esp+59Ch+var_508]
.text:004031DD                 mov     byte ptr [edi], 0
.text:004031E0
.text:004031E0 loc_4031E0:                             ; CODE XREF: sub_403090+139↑j
.text:004031E0                                         ; sub_403090+144↑j
.text:004031E0                 mov     edx, [esp+59Ch+var_504]
.text:004031E7
.text:004031E7 loc_4031E7:                             ; CODE XREF: sub_403090+F5↑j
.text:004031E7                                         ; sub_403090+1DE↓j ...
.text:004031E7                 add     esp, 58Ch
.text:004031ED                 mov     eax, edx
.text:004031EF                 pop     ebx
.text:004031F0                 pop     esi
.text:004031F1                 pop     edi
.text:004031F2                 pop     ebp
.text:004031F3                 retn
.text:004031F4 ; ---------------------------------------------------------------------------
.text:004031F4
.text:004031F4 loc_4031F4:                             ; CODE XREF: sub_403090:loc_40315F↑j
.text:004031F4                                         ; sub_403090+26B↓j ...
.text:004031F4                 mov     eax, [esp+59Ch+var_50C]
.text:004031FB                 xor     esi, esi
.text:004031FD                 mov     ecx, ds:dword_413040
.text:00403203                 test    eax, eax
.text:00403205                 mov     [esp+59Ch+var_4F0._Wchar], ecx
.text:0040320C                 jz      loc_4032E0
.text:00403212
.text:00403212 loc_403212:                             ; CODE XREF: sub_403090+263↓j
.text:00403212                 mov     edi, [esp+59Ch+var_50C]
.text:00403219                 sub     edi, ebp
.text:0040321B                 lea     edx, [esp+59Ch+var_4F0]
.text:00403222                 mov     [esp+59Ch+State], edx ; State
.text:00403226                 mov     [esp+59Ch+SizeInBytes], edi ; SizeInBytes
.text:0040322A                 mov     [esp+59Ch+Str], ebp ; Ch
.text:0040322D                 call    mbrlen
.text:00403232                 test    eax, eax
.text:00403234                 jz      short loc_40324B
.text:00403236                 cmp     eax, 0FFFFFFFEh
.text:00403239                 jz      loc_4032D3
.text:0040323F                 cmp     eax, 0FFFFFFFFh
.text:00403242                 mov     esi, 1
.text:00403247                 jz      short loc_40324B
.text:00403249
.text:00403249 loc_403249:                             ; CODE XREF: sub_403090+24B↓j
.text:00403249                 mov     esi, eax
.text:0040324B
.text:0040324B loc_40324B:                             ; CODE XREF: sub_403090+1A4↑j
.text:0040324B                                         ; sub_403090+1B7↑j
.text:0040324B                 mov     ebx, esi
.text:0040324D                 mov     ecx, [esp+59Ch+arg_4]
.text:00403254                 not     ebx
.text:00403256                 mov     edx, ebx
.text:00403258                 mov     eax, [esp+59Ch+var_504]
.text:0040325F                 shr     edx, 1Fh
.text:00403262                 dec     edx
.text:00403263                 and     edx, ebx
.text:00403265                 sub     ecx, eax
.text:00403267                 lea     edi, [edx+esi]
.text:0040326A                 xor     edx, edx
.text:0040326C                 cmp     edi, ecx
.text:0040326E                 jnb     loc_4031E7
.text:00403274                 mov     ecx, [esp+59Ch+var_508]
.text:0040327B                 test    ecx, ecx
.text:0040327D                 jz      short loc_4032C3
.text:0040327F                 test    ebx, ebx
.text:00403281                 jle     short loc_4032A5
.text:00403283                 mov     [esp+59Ch+State], ebx ; Size
.text:00403287                 mov     eax, [esp+59Ch+var_508]
.text:0040328E                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:00403296                 mov     [esp+59Ch+Str], eax ; void *
.text:00403299                 call    memset
.text:0040329E                 add     [esp+59Ch+var_508], ebx
.text:004032A5
.text:004032A5 loc_4032A5:                             ; CODE XREF: sub_403090+1F1↑j
.text:004032A5                 mov     [esp+59Ch+State], esi ; Size
.text:004032A9                 mov     ebx, [esp+59Ch+var_508]
.text:004032B0                 mov     [esp+59Ch+SizeInBytes], ebp ; Src
.text:004032B4                 mov     [esp+59Ch+Str], ebx ; void *
.text:004032B7                 call    memcpy
.text:004032BC                 add     [esp+59Ch+var_508], esi
.text:004032C3
.text:004032C3 loc_4032C3:                             ; CODE XREF: sub_403090+1ED↑j
.text:004032C3                 add     [esp+59Ch+var_504], edi
.text:004032CA                 lea     ebp, [esi+ebp-1]
.text:004032CE                 jmp     loc_4031AA
.text:004032D3 ; ---------------------------------------------------------------------------
.text:004032D3
.text:004032D3 loc_4032D3:                             ; CODE XREF: sub_403090+1A9↑j
.text:004032D3                 mov     [esp+59Ch+Str], ebp ; Str
.text:004032D6                 call    strlen
.text:004032DB                 jmp     loc_403249
.text:004032E0 ; ---------------------------------------------------------------------------
.text:004032E0
.text:004032E0 loc_4032E0:                             ; CODE XREF: sub_403090+17C↑j
.text:004032E0                 mov     [esp+59Ch+Str], ebp ; Str
.text:004032E3                 call    strlen
.text:004032E8                 lea     ebx, [eax+ebp+1]
.text:004032EC                 mov     [esp+59Ch+var_50C], ebx
.text:004032F3                 jmp     loc_403212
.text:004032F8 ; ---------------------------------------------------------------------------
.text:004032F8
.text:004032F8 loc_4032F8:                             ; CODE XREF: sub_403090+BE↑j
.text:004032F8                 cmp     eax, 25h ; '%'
.text:004032FB                 jnz     loc_4031F4
.text:00403301                 jmp     short loc_403310
.text:00403301 ; ---------------------------------------------------------------------------
.text:00403303                 align 10h
.text:00403310
.text:00403310 loc_403310:                             ; CODE XREF: sub_403090+271↑j
.text:00403310                                         ; sub_403090+2B0↓j ...
.text:00403310                 inc     ebp
.text:00403311                 movzx   ecx, byte ptr [ebp+0]
.text:00403315                 movsx   edx, cl
.text:00403318                 mov     al, cl
.text:0040331A                 cmp     edx, 30h ; '0'
.text:0040331D                 jz      short loc_403336
.text:0040331F                 cmp     edx, 30h ; '0'
.text:00403322                 jg      loc_404F50
.text:00403328                 cmp     edx, 23h ; '#'
.text:0040332B                 jz      loc_404F40
.text:00403331                 cmp     edx, 2Dh ; '-'
.text:00403334
.text:00403334 loc_403334:                             ; CODE XREF: sub_403090+1EC8↓j
.text:00403334                 jnz     short loc_403342
.text:00403336
.text:00403336 loc_403336:                             ; CODE XREF: sub_403090+28D↑j
.text:00403336                 movsx   esi, al
.text:00403339                 mov     [esp+59Ch+var_510], esi
.text:00403340                 jmp     short loc_403310
.text:00403342 ; ---------------------------------------------------------------------------
.text:00403342
.text:00403342 loc_403342:                             ; CODE XREF: sub_403090:loc_403334↑j
.text:00403342                 movsx   edx, al
.text:00403345                 sub     edx, 30h ; '0'
.text:00403348                 cmp     edx, 9
.text:0040334B                 ja      short loc_403381
.text:0040334D                 xor     edi, edi
.text:0040334F
.text:0040334F loc_40334F:                             ; CODE XREF: sub_403090+2EF↓j
.text:0040334F                 cmp     edi, 0CCCCCCCh
.text:00403355                 jg      loc_404F34
.text:0040335B                 cmp     edi, 0CCCCCCCh
.text:00403361                 jz      loc_404F25
.text:00403367
.text:00403367 loc_403367:                             ; CODE XREF: sub_403090+1E9E↓j
.text:00403367                 lea     eax, [edi+edi*4]
.text:0040336A                 movsx   esi, cl
.text:0040336D                 lea     edi, [esi+eax*2-30h]
.text:00403371
.text:00403371 loc_403371:                             ; CODE XREF: sub_403090+1EA9↓j
.text:00403371                 inc     ebp
.text:00403372                 movzx   ecx, byte ptr [ebp+0]
.text:00403376                 movsx   edx, cl
.text:00403379                 sub     edx, 30h ; '0'
.text:0040337C                 cmp     edx, 9
.text:0040337F                 jbe     short loc_40334F
.text:00403381
.text:00403381 loc_403381:                             ; CODE XREF: sub_403090+2BB↑j
.text:00403381                 movsx   eax, cl
.text:00403384                 cmp     eax, 45h ; 'E'
.text:00403387                 jz      loc_404F14
.text:0040338D                 xor     edx, edx
.text:0040338F                 cmp     eax, 4Fh ; 'O'
.text:00403392                 mov     [esp+59Ch+var_514], edx
.text:00403399                 jz      loc_404F14
.text:0040339F
.text:0040339F loc_40339F:                             ; CODE XREF: sub_403090+1E90↓j
.text:0040339F                 movsx   eax, cl
.text:004033A2                 cmp     eax, 7Ah        ; switch 123 cases
.text:004033A5                 mov     [esp+59Ch+var_52C], eax
.text:004033A9                 ja      def_4033AF      ; jumptable 004033AF default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:004033AF                 jmp     ds:jpt_4033AF[eax*4] ; switch jump
.text:004033AF ; ---------------------------------------------------------------------------
.text:004033B6                 align 4
.text:004033B8 jpt_4033AF      dd offset loc_403792, offset def_4033AF, offset def_4033AF
.text:004033B8                                         ; DATA XREF: sub_403090+31F↑r
.text:004033B8                 dd offset def_4033AF, offset def_4033AF, offset def_4033AF ; jump table for switch statement
.text:004033B8                 dd offset def_4033AF, offset def_4033AF, offset def_4033AF
.text:004033B8                 dd offset def_4033AF, offset def_4033AF, offset def_4033AF
.text:004033B8                 dd offset def_4033AF, offset def_4033AF, offset def_4033AF
.text:004033B8                 dd offset def_4033AF, offset def_4033AF, offset def_4033AF
.text:004033B8                 dd offset def_4033AF, offset def_4033AF, offset def_4033AF
.text:004033B8                 dd offset def_4033AF, offset def_4033AF, offset def_4033AF
.text:004033B8                 dd offset def_4033AF, offset def_4033AF, offset def_4033AF
.text:004033B8                 dd offset def_4033AF, offset def_4033AF, offset def_4033AF
.text:004033B8                 dd offset def_4033AF, offset def_4033AF, offset def_4033AF
.text:004033B8                 dd offset def_4033AF, offset def_4033AF, offset def_4033AF
.text:004033B8                 dd offset def_4033AF, offset loc_4035A4, offset def_4033AF
.text:004033B8                 dd offset def_4033AF, offset def_4033AF, offset def_4033AF
.text:004033B8                 dd offset def_4033AF, offset def_4033AF, offset def_4033AF
.text:004033B8                 dd offset def_4033AF, offset def_4033AF, offset def_4033AF
.text:004033B8                 dd offset def_4033AF, offset def_4033AF, offset def_4033AF
.text:004033B8                 dd offset def_4033AF, offset def_4033AF, offset def_4033AF
.text:004033B8                 dd offset def_4033AF, offset def_4033AF, offset def_4033AF
.text:004033B8                 dd offset def_4033AF, offset def_4033AF, offset def_4033AF
.text:004033B8                 dd offset def_4033AF, offset def_4033AF, offset def_4033AF
.text:004033B8                 dd offset def_4033AF, offset def_4033AF, offset loc_403798
.text:004033B8                 dd offset loc_403798, offset loc_4039E4, offset loc_403D23
.text:004033B8                 dd offset def_4033AF, offset loc_403EDE, offset loc_404440
.text:004033B8                 dd offset loc_403EEB, offset loc_403F22, offset def_4033AF
.text:004033B8                 dd offset def_4033AF, offset def_4033AF, offset loc_403F56
.text:004033B8                 dd offset loc_403F90, offset def_4033AF, offset loc_403FED
.text:004033B8                 dd offset def_4033AF, offset loc_40401A, offset loc_404027
.text:004033B8                 dd offset loc_404060, offset loc_40406D, offset loc_404440
.text:004033B8                 dd offset loc_4040C2, offset loc_404130, offset loc_404143
.text:004033B8                 dd offset loc_404190, offset def_4033AF, offset def_4033AF
.text:004033B8                 dd offset def_4033AF, offset def_4033AF, offset def_4033AF
.text:004033B8                 dd offset def_4033AF, offset loc_403798, offset loc_404710
.text:004033B8                 dd offset loc_404130, offset loc_4043A3, offset loc_4043E0
.text:004033B8                 dd offset def_4033AF, offset loc_404440, offset loc_404710
.text:004033B8                 dd offset def_4033AF, offset loc_404738, offset loc_40476E
.text:004033B8                 dd offset loc_4047A5, offset loc_4047E0, offset loc_404817
.text:004033B8                 dd offset def_4033AF, offset loc_403FFD, offset def_4033AF
.text:004033B8                 dd offset loc_4037BB, offset loc_4048A5, offset loc_40496B
.text:004033B8                 dd offset loc_404A00, offset def_4033AF, offset loc_404A4E
.text:004033B8                 dd offset loc_404130, offset loc_404A85, offset loc_404AE2
.text:004035A4 ; ---------------------------------------------------------------------------
.text:004035A4
.text:004035A4 loc_4035A4:                             ; CODE XREF: sub_403090+31F↑j
.text:004035A4                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:004035A4                 mov     esi, [esp+59Ch+var_514] ; jumptable 004033AF case 37
.text:004035AB                 test    esi, esi
.text:004035AD                 jnz     def_4033AF      ; jumptable 004033AF default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:004035B3                 lea     ebx, [edi-1]
.text:004035B6                 mov     eax, [esp+59Ch+var_504]
.text:004035BD                 mov     edx, ebx
.text:004035BF                 shr     edx, 1Fh
.text:004035C2                 mov     edi, [esp+59Ch+arg_4]
.text:004035C9                 dec     edx
.text:004035CA                 and     edx, ebx
.text:004035CC                 lea     esi, [edx+1]
.text:004035CF                 sub     edi, eax
.text:004035D1                 xor     edx, edx
.text:004035D3                 cmp     esi, edi
.text:004035D5                 jnb     loc_4031E7
.text:004035DB                 mov     eax, [esp+59Ch+var_508]
.text:004035E2                 test    eax, eax
.text:004035E4                 jz      short loc_40362B
.text:004035E6                 test    ebx, ebx
.text:004035E8                 jle     short loc_40361A
.text:004035EA                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:004035F2                 jz      short loc_403637
.text:004035F4                 mov     [esp+59Ch+State], ebx ; Size
.text:004035F8                 mov     edi, [esp+59Ch+var_508]
.text:004035FF                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:00403607                 mov     [esp+59Ch+Str], edi ; void *
.text:0040360A
.text:0040360A loc_40360A:                             ; CODE XREF: sub_403090+5BD↓j
.text:0040360A                 call    memset
.text:0040360F                 add     [esp+59Ch+var_508], ebx
.text:00403616                 movzx   ecx, byte ptr [ebp+0]
.text:0040361A
.text:0040361A loc_40361A:                             ; CODE XREF: sub_403090+558↑j
.text:0040361A                 mov     eax, [esp+59Ch+var_508]
.text:00403621                 mov     [eax], cl
.text:00403623
.text:00403623 loc_403623:                             ; CODE XREF: sub_403090+17F8↓j
.text:00403623                                         ; sub_403090+194C↓j
.text:00403623                 inc     eax
.text:00403624                 mov     [esp+59Ch+var_508], eax
.text:0040362B
.text:0040362B loc_40362B:                             ; CODE XREF: sub_403090+554↑j
.text:0040362B                                         ; sub_403090+6A5↓j ...
.text:0040362B                 add     [esp+59Ch+var_504], esi
.text:00403632                 jmp     loc_4031AA
.text:00403637 ; ---------------------------------------------------------------------------
.text:00403637
.text:00403637 loc_403637:                             ; CODE XREF: sub_403090+562↑j
.text:00403637                 mov     [esp+59Ch+State], ebx
.text:0040363B                 mov     ecx, [esp+59Ch+var_508]
.text:00403642                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:0040364A                 mov     [esp+59Ch+Str], ecx
.text:0040364D                 jmp     short loc_40360A
.text:0040364D ; ---------------------------------------------------------------------------
.text:0040364F                 align 10h
.text:00403650
.text:00403650 def_4033AF:                             ; CODE XREF: sub_403090+319↑j
.text:00403650                                         ; sub_403090+31F↑j ...
.text:00403650                 cmp     byte ptr [ebp+0], 25h ; '%' ; jumptable 004033AF default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:00403654                 mov     esi, 1
.text:00403659                 jz      short loc_403666
.text:0040365B
.text:0040365B loc_40365B:                             ; CODE XREF: sub_403090+5D4↓j
.text:0040365B                 inc     esi
.text:0040365C                 mov     edx, ebp
.text:0040365E                 sub     edx, esi
.text:00403660                 cmp     byte ptr [edx+1], 25h ; '%'
.text:00403664                 jnz     short loc_40365B
.text:00403666
.text:00403666 loc_403666:                             ; CODE XREF: sub_403090+5C9↑j
.text:00403666                 mov     ebx, edi
.text:00403668                 mov     ecx, [esp+59Ch+var_504]
.text:0040366F                 sub     ebx, esi
.text:00403671                 mov     edi, ebx
.text:00403673                 shr     edi, 1Fh
.text:00403676                 dec     edi
.text:00403677                 and     edi, ebx
.text:00403679                 lea     edx, [edi+esi]
.text:0040367C                 mov     edi, [esp+59Ch+arg_4]
.text:00403683                 mov     [esp+59Ch+var_560], edx
.text:00403687                 xor     edx, edx
.text:00403689                 sub     edi, ecx
.text:0040368B                 cmp     [esp+59Ch+var_560], edi
.text:0040368F                 jnb     loc_4031E7
.text:00403695                 mov     eax, [esp+59Ch+var_508]
.text:0040369C                 test    eax, eax
.text:0040369E                 jz      loc_403731
.text:004036A4                 test    ebx, ebx
.text:004036A6                 jle     short loc_4036D8
.text:004036A8                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:004036B0                 jz      loc_403777
.text:004036B6                 mov     [esp+59Ch+State], ebx ; Size
.text:004036BA                 mov     edx, [esp+59Ch+var_508]
.text:004036C1                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:004036C9                 mov     [esp+59Ch+Str], edx ; void *
.text:004036CC
.text:004036CC loc_4036CC:                             ; CODE XREF: sub_403090+6FD↓j
.text:004036CC                 call    memset
.text:004036D1                 add     [esp+59Ch+var_508], ebx
.text:004036D8
.text:004036D8 loc_4036D8:                             ; CODE XREF: sub_403090+616↑j
.text:004036D8                 mov     ebx, [esp+59Ch+var_528]
.text:004036DC                 test    ebx, ebx
.text:004036DE                 jz      short loc_403759
.text:004036E0                 mov     ecx, ebp
.text:004036E2                 lea     ebx, [esi-1]
.text:004036E5                 sub     ecx, esi
.text:004036E7                 test    esi, esi
.text:004036E9                 lea     edi, [ecx+1]
.text:004036EC                 jz      short loc_40372A
.text:004036EE
.text:004036EE loc_4036EE:                             ; CODE XREF: sub_403090+698↓j
.text:004036EE                 movzx   edx, byte ptr [ebx+edi]
.text:004036F2                 mov     eax, ds:__mb_cur_max
.text:004036F7                 movzx   ecx, dl
.text:004036FA                 cmp     dword ptr [eax], 1
.text:004036FD                 jz      short loc_403749
.text:004036FF                 mov     [esp+59Ch+SizeInBytes], 2 ; Type
.text:00403707                 mov     [esp+59Ch+Str], ecx ; C
.text:0040370A                 call    _isctype
.text:0040370F                 movzx   edx, byte ptr [ebx+edi]
.text:00403713
.text:00403713 loc_403713:                             ; CODE XREF: sub_403090+6C7↓j
.text:00403713                 test    eax, eax
.text:00403715                 mov     cl, dl
.text:00403717                 jnz     short loc_40373A
.text:00403719
.text:00403719 loc_403719:                             ; CODE XREF: sub_403090+6B7↓j
.text:00403719                 mov     edx, [esp+59Ch+var_508]
.text:00403720                 mov     [ebx+edx], cl
.text:00403723                 mov     edx, ebx
.text:00403725                 dec     ebx
.text:00403726                 test    edx, edx
.text:00403728                 jnz     short loc_4036EE
.text:0040372A
.text:0040372A loc_40372A:                             ; CODE XREF: sub_403090+65C↑j
.text:0040372A                                         ; sub_403090+6E5↓j
.text:0040372A                 add     [esp+59Ch+var_508], esi
.text:00403731
.text:00403731 loc_403731:                             ; CODE XREF: sub_403090+60E↑j
.text:00403731                 mov     esi, [esp+59Ch+var_560]
.text:00403735                 jmp     loc_40362B
.text:0040373A ; ---------------------------------------------------------------------------
.text:0040373A
.text:0040373A loc_40373A:                             ; CODE XREF: sub_403090+687↑j
.text:0040373A                 movzx   ecx, dl
.text:0040373D                 mov     [esp+59Ch+Str], ecx ; C
.text:00403740                 call    toupper
.text:00403745                 mov     cl, al
.text:00403747                 jmp     short loc_403719
.text:00403749 ; ---------------------------------------------------------------------------
.text:00403749
.text:00403749 loc_403749:                             ; CODE XREF: sub_403090+66D↑j
.text:00403749                 mov     eax, ds:_pctype
.text:0040374E                 mov     eax, [eax]
.text:00403750                 movzx   eax, word ptr [eax+ecx*2]
.text:00403754                 and     eax, 2
.text:00403757                 jmp     short loc_403713
.text:00403759 ; ---------------------------------------------------------------------------
.text:00403759
.text:00403759 loc_403759:                             ; CODE XREF: sub_403090+64E↑j
.text:00403759                 mov     [esp+59Ch+State], esi ; Size
.text:0040375D                 mov     ebx, ebp
.text:0040375F                 mov     edi, [esp+59Ch+var_508]
.text:00403766                 sub     ebx, esi
.text:00403768                 inc     ebx
.text:00403769                 mov     [esp+59Ch+SizeInBytes], ebx ; Src
.text:0040376D                 mov     [esp+59Ch+Str], edi ; void *
.text:00403770                 call    memcpy
.text:00403775                 jmp     short loc_40372A
.text:00403777 ; ---------------------------------------------------------------------------
.text:00403777
.text:00403777 loc_403777:                             ; CODE XREF: sub_403090+620↑j
.text:00403777                 mov     [esp+59Ch+State], ebx
.text:0040377B                 mov     ecx, [esp+59Ch+var_508]
.text:00403782                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:0040378A                 mov     [esp+59Ch+Str], ecx
.text:0040378D                 jmp     loc_4036CC
.text:00403792 ; ---------------------------------------------------------------------------
.text:00403792
.text:00403792 loc_403792:                             ; CODE XREF: sub_403090+31F↑j
.text:00403792                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:00403792                 dec     ebp             ; jumptable 004033AF case 0
.text:00403793                 jmp     def_4033AF      ; jumptable 004033AF default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:00403798 ; ---------------------------------------------------------------------------
.text:00403798
.text:00403798 loc_403798:                             ; CODE XREF: sub_403090+31F↑j
.text:00403798                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:00403798                 mov     edx, [esp+59Ch+var_514] ; jumptable 004033AF cases 65,66,97
.text:0040379F                 test    edx, edx
.text:004037A1                 jnz     def_4033AF      ; jumptable 004033AF default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:004037A7                 test    ebx, ebx
.text:004037A9                 jz      short loc_4037BB ; jumptable 004033AF case 114
.text:004037AB                 mov     [esp+59Ch+var_528], 1
.text:004037B3                 mov     [esp+59Ch+var_524], 0
.text:004037BB
.text:004037BB loc_4037BB:                             ; CODE XREF: sub_403090+31F↑j
.text:004037BB                                         ; sub_403090+719↑j ...
.text:004037BB                 mov     [esp+59Ch+Format], 25h ; '%' ; jumptable 004033AF case 114
.text:004037C3                 mov     esi, [esp+59Ch+var_514]
.text:004037CA                 lea     eax, [esp+59Ch+var_4F3]
.text:004037D1                 test    esi, esi
.text:004037D3                 jz      short loc_4037EB
.text:004037D5                 movzx   eax, byte ptr [esp+59Ch+var_514]
.text:004037DD                 mov     [esp+59Ch+var_4F3], al
.text:004037E4                 lea     eax, [esp+59Ch+var_4F2]
.text:004037EB
.text:004037EB loc_4037EB:                             ; CODE XREF: sub_403090+743↑j
.text:004037EB                 movzx   ebx, byte ptr [esp+59Ch+var_52C]
.text:004037F0                 lea     edx, [esp+59Ch+Format]
.text:004037F7                 mov     byte ptr [eax+1], 0
.text:004037FB                 mov     [eax], bl
.text:004037FD                 mov     ecx, [esp+59Ch+arg_C]
.text:00403804                 lea     ebx, [esp+59Ch+Buffer]
.text:0040380B                 mov     [esp+59Ch+State], edx ; Format
.text:0040380F                 mov     [esp+59Ch+SizeInBytes], 400h ; SizeInBytes
.text:00403817                 mov     [esp+59Ch+Tm], ecx ; Tm
.text:0040381B                 mov     [esp+59Ch+Str], ebx ; Buffer
.text:0040381E                 call    strftime
.text:00403823                 test    eax, eax
.text:00403825                 mov     esi, eax
.text:00403827                 jnz     short loc_403837
.text:00403829                 cmp     [esp+59Ch+Buffer], 0
.text:00403831                 jnz     loc_4039DD
.text:00403837
.text:00403837 loc_403837:                             ; CODE XREF: sub_403090+797↑j
.text:00403837                 mov     ebx, edi
.text:00403839                 mov     ecx, [esp+59Ch+arg_4]
.text:00403840                 sub     ebx, esi
.text:00403842                 mov     edx, ebx
.text:00403844                 mov     eax, [esp+59Ch+var_504]
.text:0040384B                 shr     edx, 1Fh
.text:0040384E                 dec     edx
.text:0040384F                 and     edx, ebx
.text:00403851                 sub     ecx, eax
.text:00403853                 lea     edi, [edx+esi]
.text:00403856                 xor     edx, edx
.text:00403858                 cmp     edi, ecx
.text:0040385A                 jnb     loc_4031E7
.text:00403860                 mov     ecx, [esp+59Ch+var_508]
.text:00403867                 test    ecx, ecx
.text:00403869                 jz      loc_4038FD
.text:0040386F                 test    ebx, ebx
.text:00403871                 jle     short loc_4038A3
.text:00403873                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:0040387B                 jz      loc_4039C2
.text:00403881                 mov     [esp+59Ch+State], ebx ; Size
.text:00403885                 mov     edx, [esp+59Ch+var_508]
.text:0040388C                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:00403894                 mov     [esp+59Ch+Str], edx ; void *
.text:00403897
.text:00403897 loc_403897:                             ; CODE XREF: sub_403090+948↓j
.text:00403897                 call    memset
.text:0040389C                 add     [esp+59Ch+var_508], ebx
.text:004038A3
.text:004038A3 loc_4038A3:                             ; CODE XREF: sub_403090+7E1↑j
.text:004038A3                 mov     ebx, [esp+59Ch+var_524]
.text:004038A7                 test    ebx, ebx
.text:004038A9                 jz      short loc_403928
.text:004038AB                 test    esi, esi
.text:004038AD                 lea     ebx, [esi-1]
.text:004038B0                 jz      short loc_4038F6
.text:004038B2
.text:004038B2 loc_4038B2:                             ; CODE XREF: sub_403090+864↓j
.text:004038B2                 movzx   edx, [esp+ebx+59Ch+Buffer]
.text:004038BA                 mov     eax, ds:__mb_cur_max
.text:004038BF                 movzx   ecx, dl
.text:004038C2                 cmp     dword ptr [eax], 1
.text:004038C5                 jz      short loc_403918
.text:004038C7                 mov     [esp+59Ch+SizeInBytes], 1 ; Type
.text:004038CF                 mov     [esp+59Ch+Str], ecx ; C
.text:004038D2                 call    _isctype
.text:004038D7                 movzx   edx, [esp+ebx+59Ch+Buffer]
.text:004038DF
.text:004038DF loc_4038DF:                             ; CODE XREF: sub_403090+896↓j
.text:004038DF                 test    eax, eax
.text:004038E1                 mov     cl, dl
.text:004038E3                 jnz     short loc_403909
.text:004038E5
.text:004038E5 loc_4038E5:                             ; CODE XREF: sub_403090+886↓j
.text:004038E5                 mov     eax, [esp+59Ch+var_508]
.text:004038EC                 mov     edx, ebx
.text:004038EE                 mov     [ebx+eax], cl
.text:004038F1                 dec     ebx
.text:004038F2                 test    edx, edx
.text:004038F4                 jnz     short loc_4038B2
.text:004038F6
.text:004038F6 loc_4038F6:                             ; CODE XREF: sub_403090+820↑j
.text:004038F6                                         ; sub_403090+8A5↓j ...
.text:004038F6                 add     [esp+59Ch+var_508], esi
.text:004038FD
.text:004038FD loc_4038FD:                             ; CODE XREF: sub_403090+7D9↑j
.text:004038FD                                         ; sub_403090+B10↓j ...
.text:004038FD                 add     [esp+59Ch+var_504], edi
.text:00403904                 jmp     loc_4031AA
.text:00403909 ; ---------------------------------------------------------------------------
.text:00403909
.text:00403909 loc_403909:                             ; CODE XREF: sub_403090+853↑j
.text:00403909                 movzx   ecx, dl
.text:0040390C                 mov     [esp+59Ch+Str], ecx ; C
.text:0040390F                 call    tolower
.text:00403914                 mov     cl, al
.text:00403916                 jmp     short loc_4038E5
.text:00403918 ; ---------------------------------------------------------------------------
.text:00403918
.text:00403918 loc_403918:                             ; CODE XREF: sub_403090+835↑j
.text:00403918                 mov     eax, ds:_pctype
.text:0040391D                 mov     eax, [eax]
.text:0040391F                 movzx   eax, word ptr [eax+ecx*2]
.text:00403923                 and     eax, 1
.text:00403926                 jmp     short loc_4038DF
.text:00403928 ; ---------------------------------------------------------------------------
.text:00403928
.text:00403928 loc_403928:                             ; CODE XREF: sub_403090+819↑j
.text:00403928                 mov     ebx, [esp+59Ch+var_528]
.text:0040392C                 test    ebx, ebx
.text:0040392E                 jz      short loc_40399F
.text:00403930                 test    esi, esi
.text:00403932                 lea     ebx, [esi-1]
.text:00403935                 jz      short loc_4038F6
.text:00403937
.text:00403937 loc_403937:                             ; CODE XREF: sub_403090+8E9↓j
.text:00403937                 movzx   edx, [esp+ebx+59Ch+Buffer]
.text:0040393F                 mov     eax, ds:__mb_cur_max
.text:00403944                 movzx   ecx, dl
.text:00403947                 cmp     dword ptr [eax], 1
.text:0040394A                 jz      short loc_40398F
.text:0040394C                 mov     [esp+59Ch+SizeInBytes], 2 ; Type
.text:00403954                 mov     [esp+59Ch+Str], ecx ; C
.text:00403957                 call    _isctype
.text:0040395C                 movzx   edx, [esp+ebx+59Ch+Buffer]
.text:00403964
.text:00403964 loc_403964:                             ; CODE XREF: sub_403090+90D↓j
.text:00403964                 test    eax, eax
.text:00403966                 mov     cl, dl
.text:00403968                 jnz     short loc_403980
.text:0040396A
.text:0040396A loc_40396A:                             ; CODE XREF: sub_403090+8FD↓j
.text:0040396A                 mov     edx, [esp+59Ch+var_508]
.text:00403971                 mov     [ebx+edx], cl
.text:00403974                 mov     edx, ebx
.text:00403976                 dec     ebx
.text:00403977                 test    edx, edx
.text:00403979                 jnz     short loc_403937
.text:0040397B                 jmp     loc_4038F6
.text:00403980 ; ---------------------------------------------------------------------------
.text:00403980
.text:00403980 loc_403980:                             ; CODE XREF: sub_403090+8D8↑j
.text:00403980                 movzx   ecx, dl
.text:00403983                 mov     [esp+59Ch+Str], ecx ; C
.text:00403986                 call    toupper
.text:0040398B                 mov     cl, al
.text:0040398D                 jmp     short loc_40396A
.text:0040398F ; ---------------------------------------------------------------------------
.text:0040398F
.text:0040398F loc_40398F:                             ; CODE XREF: sub_403090+8BA↑j
.text:0040398F                 mov     eax, ds:_pctype
.text:00403994                 mov     eax, [eax]
.text:00403996                 movzx   eax, word ptr [eax+ecx*2]
.text:0040399A                 and     eax, 2
.text:0040399D                 jmp     short loc_403964
.text:0040399F ; ---------------------------------------------------------------------------
.text:0040399F
.text:0040399F loc_40399F:                             ; CODE XREF: sub_403090+89E↑j
.text:0040399F                 mov     [esp+59Ch+State], esi ; Size
.text:004039A3                 lea     edx, [esp+59Ch+Buffer]
.text:004039AA
.text:004039AA loc_4039AA:                             ; CODE XREF: sub_403090+12E2↓j
.text:004039AA                 mov     [esp+59Ch+SizeInBytes], edx ; Src
.text:004039AE                 mov     ebx, [esp+59Ch+var_508]
.text:004039B5                 mov     [esp+59Ch+Str], ebx ; void *
.text:004039B8                 call    memcpy
.text:004039BD                 jmp     loc_4038F6
.text:004039C2 ; ---------------------------------------------------------------------------
.text:004039C2
.text:004039C2 loc_4039C2:                             ; CODE XREF: sub_403090+7EB↑j
.text:004039C2                 mov     [esp+59Ch+State], ebx
.text:004039C6                 mov     eax, [esp+59Ch+var_508]
.text:004039CD                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:004039D5                 mov     [esp+59Ch+Str], eax
.text:004039D8                 jmp     loc_403897
.text:004039DD ; ---------------------------------------------------------------------------
.text:004039DD
.text:004039DD loc_4039DD:                             ; CODE XREF: sub_403090+7A1↑j
.text:004039DD                 xor     edx, edx
.text:004039DF                 jmp     loc_4031E7
.text:004039E4 ; ---------------------------------------------------------------------------
.text:004039E4
.text:004039E4 loc_4039E4:                             ; CODE XREF: sub_403090+31F↑j
.text:004039E4                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:004039E4                 cmp     [esp+59Ch+var_514], 4Fh ; 'O' ; jumptable 004033AF case 67
.text:004039EC                 jz      def_4033AF      ; jumptable 004033AF default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:004039F2                 cmp     [esp+59Ch+var_514], 45h ; 'E'
.text:004039FA                 jz      loc_4037BB      ; jumptable 004033AF case 114
.text:00403A00                 mov     [esp+59Ch+var_518], edi
.text:00403A07                 mov     esi, [esp+59Ch+arg_C]
.text:00403A0E                 mov     ecx, [esi+14h]
.text:00403A11                 add     ecx, 76Ch
.text:00403A17                 cmp     edi, 1
.text:00403A1A                 jl      loc_403D12
.text:00403A20
.text:00403A20 loc_403A20:                             ; CODE XREF: sub_403090+C8E↓j
.text:00403A20                 mov     ebx, 51EB851Fh
.text:00403A25                 mov     eax, ecx
.text:00403A27                 mov     esi, ecx
.text:00403A29                 imul    ebx
.text:00403A2B                 sar     esi, 1Fh
.text:00403A2E                 sar     edx, 5
.text:00403A31                 sub     edx, esi
.text:00403A33                 lea     ebx, [edx+edx*4]
.text:00403A36                 lea     esi, [ebx+ebx*4]
.text:00403A39                 shl     esi, 2
.text:00403A3C                 sub     ecx, esi
.text:00403A3E                 shr     ecx, 1Fh
.text:00403A41                 sub     edx, ecx
.text:00403A43                 mov     ecx, edx
.text:00403A45
.text:00403A45 loc_403A45:                             ; CODE XREF: sub_403090+E7F↓j
.text:00403A45                                         ; sub_403090+EB3↓j ...
.text:00403A45                 cmp     [esp+59Ch+var_514], 4Fh ; 'O'
.text:00403A4D                 jz      loc_403D05
.text:00403A53
.text:00403A53 loc_403A53:                             ; CODE XREF: sub_403090+C7D↓j
.text:00403A53                 mov     eax, ecx
.text:00403A55                 mov     ebx, ecx
.text:00403A57                 shr     eax, 1Fh
.text:00403A5A                 mov     [esp+59Ch+var_51C], eax
.text:00403A61                 lea     esi, [esp+59Ch+var_20]
.text:00403A68                 jz      short loc_403A6C
.text:00403A6A                 neg     ebx
.text:00403A6C
.text:00403A6C loc_403A6C:                             ; CODE XREF: sub_403090+9D8↑j
.text:00403A6C                 mov     ecx, 0CCCCCCCDh
.text:00403A71
.text:00403A71 loc_403A71:                             ; CODE XREF: sub_403090+9FA↓j
.text:00403A71                 mov     eax, ebx
.text:00403A73                 dec     esi
.text:00403A74                 mul     ecx
.text:00403A76                 shr     edx, 3
.text:00403A79                 lea     eax, [edx+edx*4]
.text:00403A7C                 add     eax, eax
.text:00403A7E                 sub     ebx, eax
.text:00403A80                 mov     al, bl
.text:00403A82                 add     al, 30h ; '0'
.text:00403A84                 mov     ebx, edx
.text:00403A86                 test    edx, edx
.text:00403A88                 mov     [esi], al
.text:00403A8A                 jnz     short loc_403A71
.text:00403A8C
.text:00403A8C loc_403A8C:                             ; CODE XREF: sub_403090+18D6↓j
.text:00403A8C                 mov     ebx, [esp+59Ch+var_51C]
.text:00403A93                 test    ebx, ebx
.text:00403A95                 jz      short loc_403A9B
.text:00403A97                 dec     esi
.text:00403A98                 mov     byte ptr [esi], 2Dh ; '-'
.text:00403A9B
.text:00403A9B loc_403A9B:                             ; CODE XREF: sub_403090+A05↑j
.text:00403A9B                 cmp     [esp+59Ch+var_510], 2Dh ; '-'
.text:00403AA3                 jz      loc_403CF5
.text:00403AA9                 mov     edx, [esp+59Ch+var_518]
.text:00403AB0                 lea     ecx, [esp+59Ch+var_2C]
.text:00403AB7                 mov     eax, esi
.text:00403AB9                 mov     [esp+59Ch+var_564], ecx
.text:00403ABD                 sub     eax, ecx
.text:00403ABF                 lea     ebx, [eax+edx-0Ch]
.text:00403AC3                 test    ebx, ebx
.text:00403AC5                 jle     loc_403B5E
.text:00403ACB                 cmp     [esp+59Ch+var_510], 5Fh ; '_'
.text:00403AD3                 jz      loc_403C92
.text:00403AD9                 mov     edi, [esp+59Ch+arg_4]
.text:00403AE0                 xor     edx, edx
.text:00403AE2                 mov     eax, [esp+59Ch+var_504]
.text:00403AE9                 sub     edi, eax
.text:00403AEB                 cmp     [esp+59Ch+var_518], edi
.text:00403AF2                 jnb     loc_4031E7
.text:00403AF8                 mov     ecx, [esp+59Ch+var_51C]
.text:00403AFF                 test    ecx, ecx
.text:00403B01                 jz      short loc_403B28
.text:00403B03                 mov     edx, [esp+59Ch+var_508]
.text:00403B0A                 inc     esi
.text:00403B0B                 test    edx, edx
.text:00403B0D                 jz      short loc_403B21
.text:00403B0F                 mov     edi, [esp+59Ch+var_508]
.text:00403B16                 mov     byte ptr [edi], 2Dh ; '-'
.text:00403B19                 inc     edi
.text:00403B1A                 mov     [esp+59Ch+var_508], edi
.text:00403B21
.text:00403B21 loc_403B21:                             ; CODE XREF: sub_403090+A7D↑j
.text:00403B21                 inc     [esp+59Ch+var_504]
.text:00403B28
.text:00403B28 loc_403B28:                             ; CODE XREF: sub_403090+A71↑j
.text:00403B28                 mov     eax, [esp+59Ch+var_508]
.text:00403B2F                 test    eax, eax
.text:00403B31                 jz      short loc_403B55
.text:00403B33                 mov     [esp+59Ch+State], ebx ; Size
.text:00403B37                 mov     edx, [esp+59Ch+var_508]
.text:00403B3E                 mov     [esp+59Ch+SizeInBytes], 30h ; '0' ; Val
.text:00403B46                 mov     [esp+59Ch+Str], edx ; void *
.text:00403B49                 call    memset
.text:00403B4E                 add     [esp+59Ch+var_508], ebx
.text:00403B55
.text:00403B55 loc_403B55:                             ; CODE XREF: sub_403090+AA1↑j
.text:00403B55                 add     [esp+59Ch+var_504], ebx
.text:00403B5C                 xor     edi, edi
.text:00403B5E
.text:00403B5E loc_403B5E:                             ; CODE XREF: sub_403090+A35↑j
.text:00403B5E                                         ; sub_403090+C60↓j ...
.text:00403B5E                 sub     [esp+59Ch+var_564], esi
.text:00403B62                 mov     ebx, edi
.text:00403B64                 xor     edx, edx
.text:00403B66                 mov     eax, [esp+59Ch+var_564]
.text:00403B6A                 add     eax, 0Ch
.text:00403B6D                 sub     ebx, eax
.text:00403B6F                 mov     [esp+59Ch+Size], eax
.text:00403B73                 mov     ecx, ebx
.text:00403B75                 mov     edi, eax
.text:00403B77                 shr     ecx, 1Fh
.text:00403B7A                 mov     eax, [esp+59Ch+var_504]
.text:00403B81                 dec     ecx
.text:00403B82                 and     ecx, ebx
.text:00403B84                 add     edi, ecx
.text:00403B86                 mov     ecx, [esp+59Ch+arg_4]
.text:00403B8D                 sub     ecx, eax
.text:00403B8F                 cmp     edi, ecx
.text:00403B91                 jnb     loc_4031E7
.text:00403B97                 mov     edx, [esp+59Ch+var_508]
.text:00403B9E                 test    edx, edx
.text:00403BA0                 jz      loc_4038FD
.text:00403BA6                 test    ebx, ebx
.text:00403BA8                 jle     short loc_403BDA
.text:00403BAA                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:00403BB2                 jz      loc_403C77
.text:00403BB8                 mov     [esp+59Ch+State], ebx ; Size
.text:00403BBC                 mov     ecx, [esp+59Ch+var_508]
.text:00403BC3                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:00403BCB                 mov     [esp+59Ch+Str], ecx ; void *
.text:00403BCE
.text:00403BCE loc_403BCE:                             ; CODE XREF: sub_403090+BFD↓j
.text:00403BCE                 call    memset
.text:00403BD3                 add     [esp+59Ch+var_508], ebx
.text:00403BDA
.text:00403BDA loc_403BDA:                             ; CODE XREF: sub_403090+B18↑j
.text:00403BDA                 mov     edx, [esp+59Ch+var_528]
.text:00403BDE                 test    edx, edx
.text:00403BE0                 jz      short loc_403C5A
.text:00403BE2                 mov     ebx, [esp+59Ch+Size]
.text:00403BE6                 mov     eax, [esp+59Ch+Size]
.text:00403BEA                 dec     ebx
.text:00403BEB                 test    eax, eax
.text:00403BED                 jz      short loc_403C2B
.text:00403BEF
.text:00403BEF loc_403BEF:                             ; CODE XREF: sub_403090+B99↓j
.text:00403BEF                 movzx   edx, byte ptr [ebx+esi]
.text:00403BF3                 mov     eax, ds:__mb_cur_max
.text:00403BF8                 movzx   ecx, dl
.text:00403BFB                 cmp     dword ptr [eax], 1
.text:00403BFE                 jz      short loc_403C4A
.text:00403C00                 mov     [esp+59Ch+SizeInBytes], 2 ; Type
.text:00403C08                 mov     [esp+59Ch+Str], ecx ; C
.text:00403C0B                 call    _isctype
.text:00403C10                 movzx   edx, byte ptr [ebx+esi]
.text:00403C14
.text:00403C14 loc_403C14:                             ; CODE XREF: sub_403090+BC8↓j
.text:00403C14                 test    eax, eax
.text:00403C16                 mov     cl, dl
.text:00403C18                 jnz     short loc_403C3B
.text:00403C1A
.text:00403C1A loc_403C1A:                             ; CODE XREF: sub_403090+BB8↓j
.text:00403C1A                 mov     eax, [esp+59Ch+var_508]
.text:00403C21                 mov     edx, ebx
.text:00403C23                 mov     [ebx+eax], cl
.text:00403C26                 dec     ebx
.text:00403C27                 test    edx, edx
.text:00403C29                 jnz     short loc_403BEF
.text:00403C2B
.text:00403C2B loc_403C2B:                             ; CODE XREF: sub_403090+B5D↑j
.text:00403C2B                                         ; sub_403090+BE5↓j
.text:00403C2B                 mov     ecx, [esp+59Ch+Size]
.text:00403C2F                 add     [esp+59Ch+var_508], ecx
.text:00403C36                 jmp     loc_4038FD
.text:00403C3B ; ---------------------------------------------------------------------------
.text:00403C3B
.text:00403C3B loc_403C3B:                             ; CODE XREF: sub_403090+B88↑j
.text:00403C3B                 movzx   ecx, dl
.text:00403C3E                 mov     [esp+59Ch+Str], ecx ; C
.text:00403C41                 call    toupper
.text:00403C46                 mov     cl, al
.text:00403C48                 jmp     short loc_403C1A
.text:00403C4A ; ---------------------------------------------------------------------------
.text:00403C4A
.text:00403C4A loc_403C4A:                             ; CODE XREF: sub_403090+B6E↑j
.text:00403C4A                 mov     eax, ds:_pctype
.text:00403C4F                 mov     eax, [eax]
.text:00403C51                 movzx   eax, word ptr [eax+ecx*2]
.text:00403C55                 and     eax, 2
.text:00403C58                 jmp     short loc_403C14
.text:00403C5A ; ---------------------------------------------------------------------------
.text:00403C5A
.text:00403C5A loc_403C5A:                             ; CODE XREF: sub_403090+B50↑j
.text:00403C5A                 mov     [esp+59Ch+SizeInBytes], esi ; Src
.text:00403C5E                 mov     ebx, [esp+59Ch+Size]
.text:00403C62                 mov     esi, [esp+59Ch+var_508]
.text:00403C69                 mov     [esp+59Ch+State], ebx ; Size
.text:00403C6D                 mov     [esp+59Ch+Str], esi ; void *
.text:00403C70                 call    memcpy
.text:00403C75                 jmp     short loc_403C2B
.text:00403C77 ; ---------------------------------------------------------------------------
.text:00403C77
.text:00403C77 loc_403C77:                             ; CODE XREF: sub_403090+B22↑j
.text:00403C77                 mov     [esp+59Ch+State], ebx
.text:00403C7B                 mov     eax, [esp+59Ch+var_508]
.text:00403C82                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:00403C8A                 mov     [esp+59Ch+Str], eax
.text:00403C8D                 jmp     loc_403BCE
.text:00403C92 ; ---------------------------------------------------------------------------
.text:00403C92
.text:00403C92 loc_403C92:                             ; CODE XREF: sub_403090+A43↑j
.text:00403C92                 mov     ecx, [esp+59Ch+arg_4]
.text:00403C99                 xor     edx, edx
.text:00403C9B                 mov     eax, [esp+59Ch+var_504]
.text:00403CA2                 sub     ecx, eax
.text:00403CA4                 cmp     ebx, ecx
.text:00403CA6                 jnb     loc_4031E7
.text:00403CAC                 mov     edx, [esp+59Ch+var_508]
.text:00403CB3                 test    edx, edx
.text:00403CB5                 jz      short loc_403CD9
.text:00403CB7                 mov     [esp+59Ch+State], ebx ; Size
.text:00403CBB                 mov     ecx, [esp+59Ch+var_508]
.text:00403CC2                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:00403CCA                 mov     [esp+59Ch+Str], ecx ; void *
.text:00403CCD                 call    memset
.text:00403CD2                 add     [esp+59Ch+var_508], ebx
.text:00403CD9
.text:00403CD9 loc_403CD9:                             ; CODE XREF: sub_403090+C25↑j
.text:00403CD9                 add     [esp+59Ch+var_504], ebx
.text:00403CE0                 mov     ecx, edi
.text:00403CE2                 sub     ecx, ebx
.text:00403CE4                 xor     edx, edx
.text:00403CE6                 cmp     edi, ebx
.text:00403CE8                 setle   dl
.text:00403CEB                 lea     edi, [edx-1]
.text:00403CEE                 and     edi, ecx
.text:00403CF0                 jmp     loc_403B5E
.text:00403CF5 ; ---------------------------------------------------------------------------
.text:00403CF5
.text:00403CF5 loc_403CF5:                             ; CODE XREF: sub_403090+A13↑j
.text:00403CF5                 lea     ebx, [esp+59Ch+var_2C]
.text:00403CFC                 mov     [esp+59Ch+var_564], ebx
.text:00403D00                 jmp     loc_403B5E
.text:00403D05 ; ---------------------------------------------------------------------------
.text:00403D05
.text:00403D05 loc_403D05:                             ; CODE XREF: sub_403090+9BD↑j
.text:00403D05                 test    ecx, ecx
.text:00403D07                 jns     loc_4037BB      ; jumptable 004033AF case 114
.text:00403D0D                 jmp     loc_403A53
.text:00403D12 ; ---------------------------------------------------------------------------
.text:00403D12
.text:00403D12 loc_403D12:                             ; CODE XREF: sub_403090+98A↑j
.text:00403D12                 mov     ebx, 1
.text:00403D17                 mov     [esp+59Ch+var_518], ebx
.text:00403D1E                 jmp     loc_403A20
.text:00403D23 ; ---------------------------------------------------------------------------
.text:00403D23
.text:00403D23 loc_403D23:                             ; CODE XREF: sub_403090+31F↑j
.text:00403D23                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:00403D23                 mov     [esp+59Ch+var_520], (offset loc_403063+1) ; jumptable 004033AF case 68
.text:00403D2B
.text:00403D2B loc_403D2B:                             ; CODE XREF: sub_403090+E56↓j
.text:00403D2B                 mov     eax, [esp+59Ch+var_514]
.text:00403D32                 test    eax, eax
.text:00403D34                 jnz     def_4033AF      ; jumptable 004033AF default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:00403D3A
.text:00403D3A loc_403D3A:                             ; CODE XREF: sub_403090+F92↓j
.text:00403D3A                                         ; sub_403090+FD8↓j
.text:00403D3A                 mov     [esp+59Ch+SizeInBytes], 0FFFFFFFFh ; int
.text:00403D42                 mov     ebx, [esp+59Ch+arg_14]
.text:00403D49                 mov     ecx, [esp+59Ch+arg_C]
.text:00403D50                 mov     [esp+59Ch+Str], 0 ; int
.text:00403D57                 mov     eax, [esp+59Ch+arg_10]
.text:00403D5E                 mov     esi, [esp+59Ch+var_508]
.text:00403D65                 mov     [esp+59Ch+var_588], ebx ; int
.text:00403D69                 mov     ebx, [esp+59Ch+var_520]
.text:00403D6D                 mov     [esp+59Ch+Tm], ecx ; struct tm *
.text:00403D71                 mov     [esp+59Ch+var_58C], eax ; int
.text:00403D75                 mov     [esp+59Ch+State], ebx ; char *
.text:00403D79                 mov     ebx, edi
.text:00403D7B                 call    sub_403090
.text:00403D80                 mov     [esp+59Ch+var_530], eax
.text:00403D84                 sub     ebx, eax
.text:00403D86                 mov     ecx, [esp+59Ch+arg_4]
.text:00403D8D                 mov     edx, ebx
.text:00403D8F                 mov     edi, [esp+59Ch+var_530]
.text:00403D93                 shr     edx, 1Fh
.text:00403D96                 mov     eax, [esp+59Ch+var_504]
.text:00403D9D                 dec     edx
.text:00403D9E                 and     edx, ebx
.text:00403DA0                 add     edi, edx
.text:00403DA2                 sub     ecx, eax
.text:00403DA4                 xor     edx, edx
.text:00403DA6                 cmp     edi, ecx
.text:00403DA8                 jnb     loc_4031E7
.text:00403DAE                 mov     edx, [esp+59Ch+var_508]
.text:00403DB5                 test    edx, edx
.text:00403DB7                 jz      loc_403E48
.text:00403DBD                 test    ebx, ebx
.text:00403DBF                 jle     short loc_403DF1
.text:00403DC1                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:00403DC9                 jz      loc_403EC3
.text:00403DCF                 mov     [esp+59Ch+State], ebx ; Size
.text:00403DD3                 mov     ecx, [esp+59Ch+var_508]
.text:00403DDA                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:00403DE2                 mov     [esp+59Ch+Str], ecx ; void *
.text:00403DE5
.text:00403DE5 loc_403DE5:                             ; CODE XREF: sub_403090+E49↓j
.text:00403DE5                 call    memset
.text:00403DEA                 add     [esp+59Ch+var_508], ebx
.text:00403DF1
.text:00403DF1 loc_403DF1:                             ; CODE XREF: sub_403090+D2F↑j
.text:00403DF1                 mov     ecx, [esp+59Ch+arg_14]
.text:00403DF8                 mov     eax, [esp+59Ch+arg_10]
.text:00403DFF                 mov     edx, [esp+59Ch+arg_C]
.text:00403E06                 mov     [esp+59Ch+var_588], ecx ; int
.text:00403E0A                 mov     ebx, [esp+59Ch+var_520]
.text:00403E0E                 mov     ecx, [esp+59Ch+arg_4]
.text:00403E15                 mov     [esp+59Ch+var_58C], eax ; int
.text:00403E19                 mov     eax, [esp+59Ch+var_504]
.text:00403E20                 mov     [esp+59Ch+Tm], edx ; struct tm *
.text:00403E24                 mov     edx, [esp+59Ch+var_508]
.text:00403E2B                 sub     ecx, eax
.text:00403E2D                 mov     [esp+59Ch+State], ebx ; char *
.text:00403E31                 mov     [esp+59Ch+SizeInBytes], ecx ; int
.text:00403E35                 mov     [esp+59Ch+Str], edx ; int
.text:00403E38                 call    sub_403090
.text:00403E3D                 mov     ebx, [esp+59Ch+var_530]
.text:00403E41                 add     [esp+59Ch+var_508], ebx
.text:00403E48
.text:00403E48 loc_403E48:                             ; CODE XREF: sub_403090+D27↑j
.text:00403E48                 add     [esp+59Ch+var_504], edi
.text:00403E4F                 mov     edi, [esp+59Ch+var_528]
.text:00403E53                 test    edi, edi
.text:00403E55                 jz      loc_4031AA
.text:00403E5B                 cmp     esi, [esp+59Ch+var_508]
.text:00403E62                 jnb     loc_4031AA
.text:00403E68
.text:00403E68 loc_403E68:                             ; CODE XREF: sub_403090+E0C↓j
.text:00403E68                 movzx   edx, byte ptr [esi]
.text:00403E6B                 mov     ebx, ds:__mb_cur_max
.text:00403E71                 movzx   ecx, dl
.text:00403E74                 cmp     dword ptr [ebx], 1
.text:00403E77                 jz      short loc_403EB2
.text:00403E79                 mov     [esp+59Ch+SizeInBytes], 2 ; Type
.text:00403E81                 mov     [esp+59Ch+Str], ecx ; C
.text:00403E84                 call    _isctype
.text:00403E89                 movzx   edx, byte ptr [esi]
.text:00403E8C
.text:00403E8C loc_403E8C:                             ; CODE XREF: sub_403090+E31↓j
.text:00403E8C                 test    eax, eax
.text:00403E8E                 mov     cl, dl
.text:00403E90                 jnz     short loc_403EA3
.text:00403E92
.text:00403E92 loc_403E92:                             ; CODE XREF: sub_403090+E20↓j
.text:00403E92                 mov     [esi], cl
.text:00403E94                 inc     esi
.text:00403E95                 cmp     esi, [esp+59Ch+var_508]
.text:00403E9C                 jb      short loc_403E68
.text:00403E9E                 jmp     loc_4031AA
.text:00403EA3 ; ---------------------------------------------------------------------------
.text:00403EA3
.text:00403EA3 loc_403EA3:                             ; CODE XREF: sub_403090+E00↑j
.text:00403EA3                 movzx   ecx, dl
.text:00403EA6                 mov     [esp+59Ch+Str], ecx ; C
.text:00403EA9                 call    toupper
.text:00403EAE                 mov     cl, al
.text:00403EB0                 jmp     short loc_403E92
.text:00403EB2 ; ---------------------------------------------------------------------------
.text:00403EB2
.text:00403EB2 loc_403EB2:                             ; CODE XREF: sub_403090+DE7↑j
.text:00403EB2                 mov     ebx, ds:_pctype
.text:00403EB8                 mov     edi, [ebx]
.text:00403EBA                 movzx   eax, word ptr [edi+ecx*2]
.text:00403EBE                 and     eax, 2
.text:00403EC1                 jmp     short loc_403E8C
.text:00403EC3 ; ---------------------------------------------------------------------------
.text:00403EC3
.text:00403EC3 loc_403EC3:                             ; CODE XREF: sub_403090+D39↑j
.text:00403EC3                 mov     [esp+59Ch+State], ebx
.text:00403EC7                 mov     eax, [esp+59Ch+var_508]
.text:00403ECE                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:00403ED6                 mov     [esp+59Ch+Str], eax
.text:00403ED9                 jmp     loc_403DE5
.text:00403EDE ; ---------------------------------------------------------------------------
.text:00403EDE
.text:00403EDE loc_403EDE:                             ; CODE XREF: sub_403090+31F↑j
.text:00403EDE                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:00403EDE                 mov     [esp+59Ch+var_520], (offset loc_40306A+3) ; jumptable 004033AF case 70
.text:00403EE6                 jmp     loc_403D2B
.text:00403EEB ; ---------------------------------------------------------------------------
.text:00403EEB
.text:00403EEB loc_403EEB:                             ; CODE XREF: sub_403090+31F↑j
.text:00403EEB                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:00403EEB                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 004033AF case 72
.text:00403EF3                 jz      def_4033AF      ; jumptable 004033AF default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:00403EF9                 mov     [esp+59Ch+var_518], edi
.text:00403F00                 cmp     edi, 2
.text:00403F03                 jl      short loc_403F14
.text:00403F05
.text:00403F05 loc_403F05:                             ; CODE XREF: sub_403090+E90↓j
.text:00403F05                 mov     esi, [esp+59Ch+arg_C]
.text:00403F0C                 mov     ecx, [esi+8]
.text:00403F0F                 jmp     loc_403A45
.text:00403F14 ; ---------------------------------------------------------------------------
.text:00403F14
.text:00403F14 loc_403F14:                             ; CODE XREF: sub_403090+E73↑j
.text:00403F14                 mov     edx, 2
.text:00403F19                 mov     [esp+59Ch+var_518], edx
.text:00403F20                 jmp     short loc_403F05
.text:00403F22 ; ---------------------------------------------------------------------------
.text:00403F22
.text:00403F22 loc_403F22:                             ; CODE XREF: sub_403090+31F↑j
.text:00403F22                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:00403F22                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 004033AF case 73
.text:00403F2A                 jz      def_4033AF      ; jumptable 004033AF default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:00403F30                 mov     [esp+59Ch+var_518], edi
.text:00403F37                 cmp     edi, 2
.text:00403F3A                 jl      short loc_403F48
.text:00403F3C
.text:00403F3C loc_403F3C:                             ; CODE XREF: sub_403090+EC4↓j
.text:00403F3C                 mov     ecx, [esp+59Ch+var_4FC]
.text:00403F43                 jmp     loc_403A45
.text:00403F48 ; ---------------------------------------------------------------------------
.text:00403F48
.text:00403F48 loc_403F48:                             ; CODE XREF: sub_403090+EAA↑j
.text:00403F48                 mov     ebx, 2
.text:00403F4D                 mov     [esp+59Ch+var_518], ebx
.text:00403F54                 jmp     short loc_403F3C
.text:00403F56 ; ---------------------------------------------------------------------------
.text:00403F56
.text:00403F56 loc_403F56:                             ; CODE XREF: sub_403090+31F↑j
.text:00403F56                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:00403F56                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 004033AF case 77
.text:00403F5E                 jz      def_4033AF      ; jumptable 004033AF default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:00403F64                 mov     [esp+59Ch+var_518], edi
.text:00403F6B                 cmp     edi, 2
.text:00403F6E                 jl      short loc_403F7F
.text:00403F70
.text:00403F70 loc_403F70:                             ; CODE XREF: sub_403090+EFB↓j
.text:00403F70                 mov     eax, [esp+59Ch+arg_C]
.text:00403F77                 mov     ecx, [eax+4]
.text:00403F7A                 jmp     loc_403A45
.text:00403F7F ; ---------------------------------------------------------------------------
.text:00403F7F
.text:00403F7F loc_403F7F:                             ; CODE XREF: sub_403090+EDE↑j
.text:00403F7F                 mov     ecx, 2
.text:00403F84                 mov     [esp+59Ch+var_518], ecx
.text:00403F8B                 jmp     short loc_403F70
.text:00403F8B ; ---------------------------------------------------------------------------
.text:00403F8D                 align 10h
.text:00403F90
.text:00403F90 loc_403F90:                             ; CODE XREF: sub_403090+31F↑j
.text:00403F90                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:00403F90                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 004033AF case 78
.text:00403F98                 jz      def_4033AF      ; jumptable 004033AF default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:00403F9E                 cmp     edi, 0FFFFFFFFh
.text:00403FA1                 mov     ecx, [esp+59Ch+arg_14]
.text:00403FA8                 jz      short loc_403FCC
.text:00403FAA                 cmp     edi, 8
.text:00403FAD                 mov     ebx, edi
.text:00403FAF                 jg      short loc_403FCC
.text:00403FB1                 mov     esi, 66666667h
.text:00403FB6
.text:00403FB6 loc_403FB6:                             ; CODE XREF: sub_403090+F3A↓j
.text:00403FB6                 mov     eax, ecx
.text:00403FB8                 inc     ebx
.text:00403FB9                 imul    esi
.text:00403FBB                 mov     eax, ecx
.text:00403FBD                 sar     eax, 1Fh
.text:00403FC0                 sar     edx, 2
.text:00403FC3                 mov     ecx, edx
.text:00403FC5                 sub     ecx, eax
.text:00403FC7                 cmp     ebx, 8
.text:00403FCA                 jle     short loc_403FB6
.text:00403FCC
.text:00403FCC loc_403FCC:                             ; CODE XREF: sub_403090+F18↑j
.text:00403FCC                                         ; sub_403090+F1F↑j
.text:00403FCC                 mov     [esp+59Ch+var_518], edi
.text:00403FD3                 cmp     edi, 9
.text:00403FD6                 jge     loc_403A45
.text:00403FDC                 mov     eax, 9
.text:00403FE1                 mov     [esp+59Ch+var_518], eax
.text:00403FE8                 jmp     loc_403A45
.text:00403FED ; ---------------------------------------------------------------------------
.text:00403FED
.text:00403FED loc_403FED:                             ; CODE XREF: sub_403090+31F↑j
.text:00403FED                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:00403FED                 mov     [esp+59Ch+var_524], 1 ; jumptable 004033AF case 80
.text:00403FF5                 mov     [esp+59Ch+var_52C], 70h ; 'p'
.text:00403FFD
.text:00403FFD loc_403FFD:                             ; CODE XREF: sub_403090+31F↑j
.text:00403FFD                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:00403FFD                 test    ebx, ebx        ; jumptable 004033AF case 112
.text:00403FFF                 jz      loc_4037BB      ; jumptable 004033AF case 114
.text:00404005                 mov     [esp+59Ch+var_528], 0
.text:0040400D                 mov     [esp+59Ch+var_524], 1
.text:00404015                 jmp     loc_4037BB      ; jumptable 004033AF case 114
.text:0040401A ; ---------------------------------------------------------------------------
.text:0040401A
.text:0040401A loc_40401A:                             ; CODE XREF: sub_403090+31F↑j
.text:0040401A                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:0040401A                 mov     [esp+59Ch+var_520], (offset loc_403074+2) ; jumptable 004033AF case 82
.text:00404022                 jmp     loc_403D3A
.text:00404027 ; ---------------------------------------------------------------------------
.text:00404027
.text:00404027 loc_404027:                             ; CODE XREF: sub_403090+31F↑j
.text:00404027                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:00404027                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 004033AF case 83
.text:0040402F                 jz      def_4033AF      ; jumptable 004033AF default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:00404035                 mov     [esp+59Ch+var_518], edi
.text:0040403C                 cmp     edi, 2
.text:0040403F                 jl      short loc_40404F
.text:00404041
.text:00404041 loc_404041:                             ; CODE XREF: sub_403090+FCB↓j
.text:00404041                 mov     esi, [esp+59Ch+arg_C]
.text:00404048                 mov     ecx, [esi]
.text:0040404A                 jmp     loc_403A45
.text:0040404F ; ---------------------------------------------------------------------------
.text:0040404F
.text:0040404F loc_40404F:                             ; CODE XREF: sub_403090+FAF↑j
.text:0040404F                 mov     ebx, 2
.text:00404054                 mov     [esp+59Ch+var_518], ebx
.text:0040405B                 jmp     short loc_404041
.text:0040405B ; ---------------------------------------------------------------------------
.text:0040405D                 align 10h
.text:00404060
.text:00404060 loc_404060:                             ; CODE XREF: sub_403090+31F↑j
.text:00404060                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:00404060                 mov     [esp+59Ch+var_520], (offset loc_40307B+1) ; jumptable 004033AF case 84
.text:00404068                 jmp     loc_403D3A
.text:0040406D ; ---------------------------------------------------------------------------
.text:0040406D
.text:0040406D loc_40406D:                             ; CODE XREF: sub_403090+31F↑j
.text:0040406D                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:0040406D                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 004033AF case 85
.text:00404075                 jz      def_4033AF      ; jumptable 004033AF default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040407B                 mov     [esp+59Ch+var_518], edi
.text:00404082                 cmp     edi, 2
.text:00404085                 jl      short loc_4040B4
.text:00404087
.text:00404087 loc_404087:                             ; CODE XREF: sub_403090+1030↓j
.text:00404087                 mov     eax, [esp+59Ch+arg_C]
.text:0040408E                 mov     ebx, [eax+18h]
.text:00404091                 mov     esi, [eax+1Ch]
.text:00404094                 sub     esi, ebx
.text:00404096                 lea     ebx, [esi+7]
.text:00404099                 mov     eax, ebx
.text:0040409B                 mov     esi, 92492493h
.text:004040A0                 imul    esi
.text:004040A2
.text:004040A2 loc_4040A2:                             ; CODE XREF: sub_403090+108C↓j
.text:004040A2                 lea     ecx, [ebx+edx]
.text:004040A5                 mov     eax, ebx
.text:004040A7                 sar     ecx, 2
.text:004040AA                 sar     eax, 1Fh
.text:004040AD
.text:004040AD loc_4040AD:                             ; CODE XREF: sub_403090+1590↓j
.text:004040AD                 sub     ecx, eax
.text:004040AF                 jmp     loc_403A45
.text:004040B4 ; ---------------------------------------------------------------------------
.text:004040B4
.text:004040B4 loc_4040B4:                             ; CODE XREF: sub_403090+FF5↑j
.text:004040B4                 mov     edx, 2
.text:004040B9                 mov     [esp+59Ch+var_518], edx
.text:004040C0                 jmp     short loc_404087
.text:004040C2 ; ---------------------------------------------------------------------------
.text:004040C2
.text:004040C2 loc_4040C2:                             ; CODE XREF: sub_403090+31F↑j
.text:004040C2                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:004040C2                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 004033AF case 87
.text:004040CA                 jz      def_4033AF      ; jumptable 004033AF default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:004040D0                 mov     [esp+59Ch+var_518], edi
.text:004040D7                 cmp     edi, 2
.text:004040DA                 jl      short loc_40411E
.text:004040DC
.text:004040DC loc_4040DC:                             ; CODE XREF: sub_403090+109A↓j
.text:004040DC                 mov     ecx, [esp+59Ch+arg_C]
.text:004040E3                 mov     ebx, [ecx+18h]
.text:004040E6                 mov     ecx, 92492493h
.text:004040EB                 add     ebx, 6
.text:004040EE                 mov     eax, ebx
.text:004040F0                 mov     esi, ebx
.text:004040F2                 imul    ecx
.text:004040F4                 mov     eax, [esp+59Ch+arg_C]
.text:004040FB                 sar     esi, 1Fh
.text:004040FE                 add     edx, ebx
.text:00404100                 sar     edx, 2
.text:00404103                 sub     edx, esi
.text:00404105                 lea     esi, ds:0[edx*8]
.text:0040410C                 sub     esi, edx
.text:0040410E                 sub     ebx, esi
.text:00404110                 mov     esi, [eax+1Ch]
.text:00404113                 sub     esi, ebx
.text:00404115                 lea     ebx, [esi+7]
.text:00404118                 mov     eax, ebx
.text:0040411A                 imul    ecx
.text:0040411C                 jmp     short loc_4040A2
.text:0040411E ; ---------------------------------------------------------------------------
.text:0040411E
.text:0040411E loc_40411E:                             ; CODE XREF: sub_403090+104A↑j
.text:0040411E                 mov     edx, 2
.text:00404123                 mov     [esp+59Ch+var_518], edx
.text:0040412A                 jmp     short loc_4040DC
.text:0040412A ; ---------------------------------------------------------------------------
.text:0040412C                 align 10h
.text:00404130
.text:00404130 loc_404130:                             ; CODE XREF: sub_403090+31F↑j
.text:00404130                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:00404130                 cmp     [esp+59Ch+var_514], 4Fh ; 'O' ; jumptable 004033AF cases 88,99,120
.text:00404138                 jnz     loc_4037BB      ; jumptable 004033AF case 114
.text:0040413E                 jmp     def_4033AF      ; jumptable 004033AF default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:00404143 ; ---------------------------------------------------------------------------
.text:00404143
.text:00404143 loc_404143:                             ; CODE XREF: sub_403090+31F↑j
.text:00404143                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:00404143                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 004033AF case 89
.text:0040414B                 jz      loc_4037BB      ; jumptable 004033AF case 114
.text:00404151                 cmp     [esp+59Ch+var_514], 4Fh ; 'O'
.text:00404159                 jz      def_4033AF      ; jumptable 004033AF default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040415F                 mov     [esp+59Ch+var_518], edi
.text:00404166                 cmp     edi, 1
.text:00404169                 jl      short loc_404180
.text:0040416B
.text:0040416B loc_40416B:                             ; CODE XREF: sub_403090+10FC↓j
.text:0040416B                 mov     esi, [esp+59Ch+arg_C]
.text:00404172                 mov     ecx, [esi+14h]
.text:00404175                 add     ecx, 76Ch
.text:0040417B                 jmp     loc_403A45
.text:00404180 ; ---------------------------------------------------------------------------
.text:00404180
.text:00404180 loc_404180:                             ; CODE XREF: sub_403090+10D9↑j
.text:00404180                 mov     edx, 1
.text:00404185                 mov     [esp+59Ch+var_518], edx
.text:0040418C                 jmp     short loc_40416B
.text:0040418C ; ---------------------------------------------------------------------------
.text:0040418E                 align 10h
.text:00404190
.text:00404190 loc_404190:                             ; CODE XREF: sub_403090+31F↑j
.text:00404190                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:00404190                 test    ebx, ebx        ; jumptable 004033AF case 90
.text:00404192                 jz      short loc_4041A4
.text:00404194                 mov     [esp+59Ch+var_528], 0
.text:0040419C                 mov     [esp+59Ch+var_524], 1
.text:004041A4
.text:004041A4 loc_4041A4:                             ; CODE XREF: sub_403090+1102↑j
.text:004041A4                 mov     eax, [esp+59Ch+var_500]
.text:004041AB                 test    eax, eax
.text:004041AD                 jz      short loc_4041BB
.text:004041AF                 mov     esi, [esp+59Ch+var_500]
.text:004041B6                 cmp     byte ptr [esi], 0
.text:004041B9                 jnz     short loc_4041D9
.text:004041BB
.text:004041BB loc_4041BB:                             ; CODE XREF: sub_403090+111D↑j
.text:004041BB                 mov     ebx, [esp+59Ch+arg_C]
.text:004041C2                 mov     edx, [ebx+20h]
.text:004041C5                 test    edx, edx
.text:004041C7                 js      short loc_4041D9
.text:004041C9                 mov     esi, ds:_tzname
.text:004041CF                 mov     ecx, [esi+edx*4]
.text:004041D2                 mov     [esp+59Ch+var_500], ecx
.text:004041D9
.text:004041D9 loc_4041D9:                             ; CODE XREF: sub_403090+1129↑j
.text:004041D9                                         ; sub_403090+1137↑j
.text:004041D9                 mov     edx, [esp+59Ch+var_500]
.text:004041E0                 test    edx, edx
.text:004041E2                 jz      loc_404392
.text:004041E8
.text:004041E8 loc_4041E8:                             ; CODE XREF: sub_403090+130E↓j
.text:004041E8                 mov     ebx, [esp+59Ch+var_500]
.text:004041EF                 mov     [esp+59Ch+Str], ebx ; Str
.text:004041F2                 mov     ebx, edi
.text:004041F4                 call    strlen
.text:004041F9                 sub     ebx, eax
.text:004041FB                 mov     esi, eax
.text:004041FD                 mov     ecx, [esp+59Ch+arg_4]
.text:00404204                 mov     edx, ebx
.text:00404206                 shr     edx, 1Fh
.text:00404209                 dec     edx
.text:0040420A                 and     edx, ebx
.text:0040420C                 lea     edi, [edx+eax]
.text:0040420F                 mov     eax, [esp+59Ch+var_504]
.text:00404216                 xor     edx, edx
.text:00404218                 sub     ecx, eax
.text:0040421A                 cmp     edi, ecx
.text:0040421C                 jnb     loc_4031E7
.text:00404222                 mov     ecx, [esp+59Ch+var_508]
.text:00404229                 test    ecx, ecx
.text:0040422B                 jz      loc_4038FD
.text:00404231                 test    ebx, ebx
.text:00404233                 jle     short loc_404265
.text:00404235                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:0040423D                 jz      loc_404377
.text:00404243                 mov     [esp+59Ch+State], ebx ; Size
.text:00404247                 mov     edx, [esp+59Ch+var_508]
.text:0040424E                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:00404256                 mov     [esp+59Ch+Str], edx ; void *
.text:00404259
.text:00404259 loc_404259:                             ; CODE XREF: sub_403090+12FD↓j
.text:00404259                 call    memset
.text:0040425E                 add     [esp+59Ch+var_508], ebx
.text:00404265
.text:00404265 loc_404265:                             ; CODE XREF: sub_403090+11A3↑j
.text:00404265                 mov     ebx, [esp+59Ch+var_524]
.text:00404269                 test    ebx, ebx
.text:0040426B                 jz      short loc_4042E6
.text:0040426D                 test    esi, esi
.text:0040426F                 lea     ebx, [esi-1]
.text:00404272                 jz      loc_4038F6
.text:00404278
.text:00404278 loc_404278:                             ; CODE XREF: sub_403090+1230↓j
.text:00404278                 mov     ecx, [esp+59Ch+var_500]
.text:0040427F                 mov     eax, ds:__mb_cur_max
.text:00404284                 movzx   edx, byte ptr [ebx+ecx]
.text:00404288                 cmp     dword ptr [eax], 1
.text:0040428B                 movzx   ecx, dl
.text:0040428E                 jz      short loc_4042D6
.text:00404290                 mov     [esp+59Ch+Str], ecx ; C
.text:00404293                 mov     [esp+59Ch+SizeInBytes], 1 ; Type
.text:0040429B                 call    _isctype
.text:004042A0                 mov     ecx, [esp+59Ch+var_500]
.text:004042A7                 movzx   edx, byte ptr [ebx+ecx]
.text:004042AB
.text:004042AB loc_4042AB:                             ; CODE XREF: sub_403090+1254↓j
.text:004042AB                 test    eax, eax
.text:004042AD                 mov     cl, dl
.text:004042AF                 jnz     short loc_4042C7
.text:004042B1
.text:004042B1 loc_4042B1:                             ; CODE XREF: sub_403090+1244↓j
.text:004042B1                 mov     edx, [esp+59Ch+var_508]
.text:004042B8                 mov     [ebx+edx], cl
.text:004042BB                 mov     edx, ebx
.text:004042BD                 dec     ebx
.text:004042BE                 test    edx, edx
.text:004042C0                 jnz     short loc_404278
.text:004042C2                 jmp     loc_4038F6
.text:004042C7 ; ---------------------------------------------------------------------------
.text:004042C7
.text:004042C7 loc_4042C7:                             ; CODE XREF: sub_403090+121F↑j
.text:004042C7                 movzx   ecx, dl
.text:004042CA                 mov     [esp+59Ch+Str], ecx ; C
.text:004042CD                 call    tolower
.text:004042D2                 mov     cl, al
.text:004042D4                 jmp     short loc_4042B1
.text:004042D6 ; ---------------------------------------------------------------------------
.text:004042D6
.text:004042D6 loc_4042D6:                             ; CODE XREF: sub_403090+11FE↑j
.text:004042D6                 mov     eax, ds:_pctype
.text:004042DB                 mov     eax, [eax]
.text:004042DD                 movzx   eax, word ptr [eax+ecx*2]
.text:004042E1                 and     eax, 1
.text:004042E4                 jmp     short loc_4042AB
.text:004042E6 ; ---------------------------------------------------------------------------
.text:004042E6
.text:004042E6 loc_4042E6:                             ; CODE XREF: sub_403090+11DB↑j
.text:004042E6                 mov     eax, [esp+59Ch+var_528]
.text:004042EA                 test    eax, eax
.text:004042EC                 jz      short loc_404367
.text:004042EE                 test    esi, esi
.text:004042F0                 lea     ebx, [esi-1]
.text:004042F3                 jz      loc_4038F6
.text:004042F9
.text:004042F9 loc_4042F9:                             ; CODE XREF: sub_403090+12B1↓j
.text:004042F9                 mov     eax, [esp+59Ch+var_500]
.text:00404300                 movzx   edx, byte ptr [ebx+eax]
.text:00404304                 mov     eax, ds:__mb_cur_max
.text:00404309                 movzx   ecx, dl
.text:0040430C                 cmp     dword ptr [eax], 1
.text:0040430F                 jz      short loc_404357
.text:00404311                 mov     [esp+59Ch+Str], ecx ; C
.text:00404314                 mov     [esp+59Ch+SizeInBytes], 2 ; Type
.text:0040431C                 call    _isctype
.text:00404321                 mov     ecx, [esp+59Ch+var_500]
.text:00404328                 movzx   edx, byte ptr [ebx+ecx]
.text:0040432C
.text:0040432C loc_40432C:                             ; CODE XREF: sub_403090+12D5↓j
.text:0040432C                 test    eax, eax
.text:0040432E                 mov     cl, dl
.text:00404330                 jnz     short loc_404348
.text:00404332
.text:00404332 loc_404332:                             ; CODE XREF: sub_403090+12C5↓j
.text:00404332                 mov     edx, [esp+59Ch+var_508]
.text:00404339                 mov     [ebx+edx], cl
.text:0040433C                 mov     edx, ebx
.text:0040433E                 dec     ebx
.text:0040433F                 test    edx, edx
.text:00404341                 jnz     short loc_4042F9
.text:00404343                 jmp     loc_4038F6
.text:00404348 ; ---------------------------------------------------------------------------
.text:00404348
.text:00404348 loc_404348:                             ; CODE XREF: sub_403090+12A0↑j
.text:00404348                 movzx   ecx, dl
.text:0040434B                 mov     [esp+59Ch+Str], ecx ; C
.text:0040434E                 call    toupper
.text:00404353                 mov     cl, al
.text:00404355                 jmp     short loc_404332
.text:00404357 ; ---------------------------------------------------------------------------
.text:00404357
.text:00404357 loc_404357:                             ; CODE XREF: sub_403090+127F↑j
.text:00404357                 mov     eax, ds:_pctype
.text:0040435C                 mov     eax, [eax]
.text:0040435E                 movzx   eax, word ptr [eax+ecx*2]
.text:00404362                 and     eax, 2
.text:00404365                 jmp     short loc_40432C
.text:00404367 ; ---------------------------------------------------------------------------
.text:00404367
.text:00404367 loc_404367:                             ; CODE XREF: sub_403090+125C↑j
.text:00404367                 mov     [esp+59Ch+State], esi
.text:0040436B                 mov     edx, [esp+59Ch+var_500]
.text:00404372                 jmp     loc_4039AA
.text:00404377 ; ---------------------------------------------------------------------------
.text:00404377
.text:00404377 loc_404377:                             ; CODE XREF: sub_403090+11AD↑j
.text:00404377                 mov     [esp+59Ch+State], ebx
.text:0040437B                 mov     eax, [esp+59Ch+var_508]
.text:00404382                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:0040438A                 mov     [esp+59Ch+Str], eax
.text:0040438D                 jmp     loc_404259
.text:00404392 ; ---------------------------------------------------------------------------
.text:00404392
.text:00404392 loc_404392:                             ; CODE XREF: sub_403090+1152↑j
.text:00404392                 mov     eax, (offset loc_403081+4)
.text:00404397                 mov     [esp+59Ch+var_500], eax
.text:0040439E                 jmp     loc_4041E8
.text:004043A3 ; ---------------------------------------------------------------------------
.text:004043A3
.text:004043A3 loc_4043A3:                             ; CODE XREF: sub_403090+31F↑j
.text:004043A3                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:004043A3                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 004033AF case 100
.text:004043AB                 jz      def_4033AF      ; jumptable 004033AF default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:004043B1                 mov     [esp+59Ch+var_518], edi
.text:004043B8                 cmp     edi, 2
.text:004043BB                 jl      short loc_4043CC
.text:004043BD
.text:004043BD loc_4043BD:                             ; CODE XREF: sub_403090+1348↓j
.text:004043BD                 mov     eax, [esp+59Ch+arg_C]
.text:004043C4                 mov     ecx, [eax+0Ch]
.text:004043C7                 jmp     loc_403A45
.text:004043CC ; ---------------------------------------------------------------------------
.text:004043CC
.text:004043CC loc_4043CC:                             ; CODE XREF: sub_403090+132B↑j
.text:004043CC                 mov     ecx, 2
.text:004043D1                 mov     [esp+59Ch+var_518], ecx
.text:004043D8                 jmp     short loc_4043BD
.text:004043D8 ; ---------------------------------------------------------------------------
.text:004043DA                 align 10h
.text:004043E0
.text:004043E0 loc_4043E0:                             ; CODE XREF: sub_403090+31F↑j
.text:004043E0                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:004043E0                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 004033AF case 101
.text:004043E8                 jz      def_4033AF      ; jumptable 004033AF default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:004043EE                 mov     [esp+59Ch+var_518], edi
.text:004043F5                 cmp     edi, 2
.text:004043F8                 jl      short loc_404431
.text:004043FA
.text:004043FA loc_4043FA:                             ; CODE XREF: sub_403090+13AD↓j
.text:004043FA                 mov     esi, [esp+59Ch+arg_C]
.text:00404401                 mov     ecx, [esi+0Ch]
.text:00404404
.text:00404404 loc_404404:                             ; CODE XREF: sub_403090+1702↓j
.text:00404404                                         ; sub_403090+1736↓j
.text:00404404                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:0040440C                 jz      loc_403A45
.text:00404412                 cmp     [esp+59Ch+var_510], 2Dh ; '-'
.text:0040441A                 jz      loc_403A45
.text:00404420                 mov     eax, 5Fh ; '_'
.text:00404425                 mov     [esp+59Ch+var_510], eax
.text:0040442C                 jmp     loc_403A45
.text:00404431 ; ---------------------------------------------------------------------------
.text:00404431
.text:00404431 loc_404431:                             ; CODE XREF: sub_403090+1368↑j
.text:00404431                 mov     edx, 2
.text:00404436                 mov     [esp+59Ch+var_518], edx
.text:0040443D                 jmp     short loc_4043FA
.text:0040443D ; ---------------------------------------------------------------------------
.text:0040443F                 align 10h
.text:00404440
.text:00404440 loc_404440:                             ; CODE XREF: sub_403090+31F↑j
.text:00404440                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:00404440                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 004033AF cases 71,86,103
.text:00404448                 jz      def_4033AF      ; jumptable 004033AF default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040444E                 mov     edx, [esp+59Ch+arg_C]
.text:00404455                 mov     eax, [esp+59Ch+arg_C]
.text:0040445C                 mov     ebx, [edx+14h]
.text:0040445F                 mov     eax, [eax+18h]
.text:00404462                 lea     esi, [ebx+76Ch]
.text:00404468                 mov     [esp+59Ch+var_544], eax
.text:0040446C                 mov     [esp+59Ch+var_538], esi
.text:00404470                 mov     esi, [edx+1Ch]
.text:00404473                 mov     edx, [esp+59Ch+var_544]
.text:00404477                 mov     [esp+59Ch+var_540], esi
.text:0040447B                 mov     eax, esi
.text:0040447D                 sub     eax, edx
.text:0040447F                 lea     esi, [eax+17Eh]
.text:00404485                 mov     edx, 92492493h
.text:0040448A                 mov     eax, esi
.text:0040448C                 imul    edx
.text:0040448E                 mov     eax, esi
.text:00404490                 sar     eax, 1Fh
.text:00404493                 add     edx, esi
.text:00404495                 sar     edx, 2
.text:00404498                 sub     edx, eax
.text:0040449A                 lea     eax, ds:0[edx*8]
.text:004044A1                 sub     eax, edx
.text:004044A3                 mov     edx, [esp+59Ch+var_540]
.text:004044A7                 sub     esi, eax
.text:004044A9                 sub     edx, esi
.text:004044AB                 add     edx, 3
.text:004044AE                 mov     [esp+59Ch+var_53C], edx
.text:004044B2                 js      loc_404656
.text:004044B8                 test    byte ptr [esp+59Ch+var_538], 3
.text:004044BD                 mov     [esp+59Ch+var_54C], 0
.text:004044C5                 jnz     short loc_404519
.text:004044C7                 mov     eax, [esp+59Ch+var_538]
.text:004044CB                 mov     ebx, 51EB851Fh
.text:004044D0                 imul    ebx
.text:004044D2                 mov     eax, [esp+59Ch+var_538]
.text:004044D6                 mov     esi, edx
.text:004044D8                 sar     edx, 5
.text:004044DB                 mov     [esp+59Ch+var_570], edx
.text:004044DF                 cdq
.text:004044E0                 sub     [esp+59Ch+var_570], edx
.text:004044E4                 mov     ebx, [esp+59Ch+var_570]
.text:004044E8                 lea     eax, [ebx+ebx*4]
.text:004044EB                 lea     ebx, [eax+eax*4]
.text:004044EE                 mov     [esp+59Ch+var_57C], ebx
.text:004044F2                 shl     ebx, 2
.text:004044F5                 cmp     [esp+59Ch+var_538], ebx
.text:004044F9                 jnz     short loc_404511
.text:004044FB                 mov     ebx, esi
.text:004044FD                 sar     ebx, 7
.text:00404500                 sub     ebx, edx
.text:00404502                 lea     esi, [ebx+ebx*4]
.text:00404505                 lea     edx, [esi+esi*4]
.text:00404508                 shl     edx, 4
.text:0040450B                 cmp     [esp+59Ch+var_538], edx
.text:0040450F                 jnz     short loc_404519
.text:00404511
.text:00404511 loc_404511:                             ; CODE XREF: sub_403090+1469↑j
.text:00404511                 mov     [esp+59Ch+var_54C], 1
.text:00404519
.text:00404519 loc_404519:                             ; CODE XREF: sub_403090+1435↑j
.text:00404519                                         ; sub_403090+147F↑j
.text:00404519                 mov     esi, [esp+59Ch+var_54C]
.text:0040451D                 mov     eax, [esp+59Ch+var_544]
.text:00404521                 sub     [esp+59Ch+var_540], esi
.text:00404525                 mov     ebx, [esp+59Ch+var_540]
.text:00404529                 sub     ebx, 16Dh
.text:0040452F                 mov     edx, ebx
.text:00404531                 sub     edx, eax
.text:00404533                 lea     esi, [edx+17Eh]
.text:00404539                 mov     eax, 92492493h
.text:0040453E                 imul    esi
.text:00404540                 mov     eax, esi
.text:00404542                 sar     eax, 1Fh
.text:00404545                 lea     edx, [edx+esi]
.text:00404548                 sar     edx, 2
.text:0040454B                 sub     edx, eax
.text:0040454D                 lea     eax, ds:0[edx*8]
.text:00404554                 sub     eax, edx
.text:00404556                 sub     esi, eax
.text:00404558                 sub     ebx, esi
.text:0040455A                 mov     eax, ebx
.text:0040455C                 add     eax, 3
.text:0040455F                 js      short loc_404569
.text:00404561                 inc     [esp+59Ch+var_538]
.text:00404565                 mov     [esp+59Ch+var_53C], eax
.text:00404569
.text:00404569 loc_404569:                             ; CODE XREF: sub_403090+14CF↑j
.text:00404569                                         ; sub_403090+1674↓j
.text:00404569                 movsx   eax, cl
.text:0040456C                 cmp     eax, 47h ; 'G'
.text:0040456F                 jz      loc_404633
.text:00404575                 cmp     eax, 67h ; 'g'
.text:00404578                 jz      short loc_4045C0
.text:0040457A                 mov     [esp+59Ch+var_518], edi
.text:00404581                 cmp     edi, 2
.text:00404584                 jl      short loc_4045AB
.text:00404586
.text:00404586 loc_404586:                             ; CODE XREF: sub_403090+1527↓j
.text:00404586                 mov     eax, [esp+59Ch+var_53C]
.text:0040458A                 mov     ebx, 92492493h
.text:0040458F                 mov     esi, [esp+59Ch+var_53C]
.text:00404593                 mov     ecx, [esp+59Ch+var_53C]
.text:00404597                 imul    ebx
.text:00404599                 sar     ecx, 1Fh
.text:0040459C                 add     edx, esi
.text:0040459E                 sar     edx, 2
.text:004045A1                 sub     edx, ecx
.text:004045A3                 lea     ecx, [edx+1]
.text:004045A6                 jmp     loc_403A45
.text:004045AB ; ---------------------------------------------------------------------------
.text:004045AB
.text:004045AB loc_4045AB:                             ; CODE XREF: sub_403090+14F4↑j
.text:004045AB                 mov     ebx, 2
.text:004045B0                 mov     [esp+59Ch+var_518], ebx
.text:004045B7                 jmp     short loc_404586
.text:004045B7 ; ---------------------------------------------------------------------------
.text:004045B9                 align 10h
.text:004045C0
.text:004045C0 loc_4045C0:                             ; CODE XREF: sub_403090+14E8↑j
.text:004045C0                 mov     [esp+59Ch+var_518], edi
.text:004045C7                 cmp     edi, 2
.text:004045CA                 jl      short loc_404625
.text:004045CC
.text:004045CC loc_4045CC:                             ; CODE XREF: sub_403090+15A1↓j
.text:004045CC                 mov     eax, [esp+59Ch+var_538]
.text:004045D0                 mov     ebx, 51EB851Fh
.text:004045D5                 imul    ebx
.text:004045D7                 mov     eax, [esp+59Ch+var_538]
.text:004045DB                 mov     [esp+59Ch+var_578], edx
.text:004045DF                 mov     esi, [esp+59Ch+var_578]
.text:004045E3                 cdq
.text:004045E4                 sar     esi, 5
.text:004045E7                 sub     esi, edx
.text:004045E9                 lea     edx, [esi+esi*4]
.text:004045EC                 lea     ecx, [edx+edx*4]
.text:004045EF                 shl     ecx, 2
.text:004045F2                 sub     [esp+59Ch+var_538], ecx
.text:004045F6                 mov     esi, [esp+59Ch+var_538]
.text:004045FA
.text:004045FA loc_4045FA:                             ; CODE XREF: sub_403090+1A3F↓j
.text:004045FA                 add     esi, 64h ; 'd'
.text:004045FD                 mov     eax, esi
.text:004045FF                 imul    ebx
.text:00404601                 mov     [esp+59Ch+var_578], edx
.text:00404605                 mov     ecx, [esp+59Ch+var_578]
.text:00404609                 mov     [esp+59Ch+var_57C], eax
.text:0040460D                 mov     eax, esi
.text:0040460F                 cdq
.text:00404610                 sar     ecx, 5
.text:00404613                 sub     ecx, edx
.text:00404615                 lea     edx, [ecx+ecx*4]
.text:00404618                 lea     eax, [edx+edx*4]
.text:0040461B                 mov     ecx, esi
.text:0040461D                 shl     eax, 2
.text:00404620                 jmp     loc_4040AD
.text:00404625 ; ---------------------------------------------------------------------------
.text:00404625
.text:00404625 loc_404625:                             ; CODE XREF: sub_403090+153A↑j
.text:00404625                 mov     ebx, 2
.text:0040462A                 mov     [esp+59Ch+var_518], ebx
.text:00404631                 jmp     short loc_4045CC
.text:00404633 ; ---------------------------------------------------------------------------
.text:00404633
.text:00404633 loc_404633:                             ; CODE XREF: sub_403090+14DF↑j
.text:00404633                 mov     [esp+59Ch+var_518], edi
.text:0040463A                 cmp     edi, 1
.text:0040463D                 jl      short loc_404648
.text:0040463F
.text:0040463F loc_40463F:                             ; CODE XREF: sub_403090+15C4↓j
.text:0040463F                 mov     ecx, [esp+59Ch+var_538]
.text:00404643                 jmp     loc_403A45
.text:00404648 ; ---------------------------------------------------------------------------
.text:00404648
.text:00404648 loc_404648:                             ; CODE XREF: sub_403090+15AD↑j
.text:00404648                 mov     eax, 1
.text:0040464D                 mov     [esp+59Ch+var_518], eax
.text:00404654                 jmp     short loc_40463F
.text:00404656 ; ---------------------------------------------------------------------------
.text:00404656
.text:00404656 loc_404656:                             ; CODE XREF: sub_403090+1422↑j
.text:00404656                 mov     [esp+59Ch+var_548], 0
.text:0040465E                 add     ebx, 76Bh
.text:00404664                 mov     [esp+59Ch+var_538], ebx
.text:00404668                 test    byte ptr [esp+59Ch+var_538], 3
.text:0040466D                 jnz     short loc_4046BF
.text:0040466F                 mov     esi, 51EB851Fh
.text:00404674                 mov     eax, ebx
.text:00404676                 imul    esi
.text:00404678                 mov     eax, [esp+59Ch+var_538]
.text:0040467C                 mov     esi, edx
.text:0040467E                 sar     edx, 5
.text:00404681                 mov     [esp+59Ch+var_570], edx
.text:00404685                 cdq
.text:00404686                 sub     [esp+59Ch+var_570], edx
.text:0040468A                 mov     ebx, [esp+59Ch+var_570]
.text:0040468E                 lea     eax, [ebx+ebx*4]
.text:00404691                 lea     ebx, [eax+eax*4]
.text:00404694                 mov     [esp+59Ch+var_57C], ebx
.text:00404698                 shl     ebx, 2
.text:0040469B                 cmp     [esp+59Ch+var_538], ebx
.text:0040469F                 jnz     short loc_4046B7
.text:004046A1                 mov     ebx, esi
.text:004046A3                 sar     ebx, 7
.text:004046A6                 sub     ebx, edx
.text:004046A8                 lea     esi, [ebx+ebx*4]
.text:004046AB                 lea     edx, [esi+esi*4]
.text:004046AE                 shl     edx, 4
.text:004046B1                 cmp     [esp+59Ch+var_538], edx
.text:004046B5                 jnz     short loc_4046BF
.text:004046B7
.text:004046B7 loc_4046B7:                             ; CODE XREF: sub_403090+160F↑j
.text:004046B7                 mov     [esp+59Ch+var_548], 1
.text:004046BF
.text:004046BF loc_4046BF:                             ; CODE XREF: sub_403090+15DD↑j
.text:004046BF                                         ; sub_403090+1625↑j
.text:004046BF                 mov     eax, [esp+59Ch+var_540]
.text:004046C3                 mov     esi, [esp+59Ch+var_548]
.text:004046C7                 lea     ebx, [esi+eax+16Dh]
.text:004046CE                 mov     esi, [esp+59Ch+var_544]
.text:004046D2                 mov     eax, ebx
.text:004046D4                 sub     eax, esi
.text:004046D6                 lea     esi, [eax+17Eh]
.text:004046DC                 mov     eax, 92492493h
.text:004046E1                 imul    esi
.text:004046E3                 mov     eax, esi
.text:004046E5                 sar     eax, 1Fh
.text:004046E8                 lea     edx, [edx+esi]
.text:004046EB                 sar     edx, 2
.text:004046EE                 sub     edx, eax
.text:004046F0                 lea     eax, ds:0[edx*8]
.text:004046F7                 sub     eax, edx
.text:004046F9                 sub     esi, eax
.text:004046FB                 sub     ebx, esi
.text:004046FD                 add     ebx, 3
.text:00404700                 mov     [esp+59Ch+var_53C], ebx
.text:00404704                 jmp     loc_404569
.text:00404704 ; ---------------------------------------------------------------------------
.text:00404709                 align 10h
.text:00404710
.text:00404710 loc_404710:                             ; CODE XREF: sub_403090+31F↑j
.text:00404710                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:00404710                 test    ebx, ebx        ; jumptable 004033AF cases 98,104
.text:00404712                 jz      short loc_404724
.text:00404714                 mov     [esp+59Ch+var_528], 1
.text:0040471C                 mov     [esp+59Ch+var_524], 0
.text:00404724
.text:00404724 loc_404724:                             ; CODE XREF: sub_403090+1682↑j
.text:00404724                 mov     esi, [esp+59Ch+var_514]
.text:0040472B                 test    esi, esi
.text:0040472D                 jz      loc_4037BB      ; jumptable 004033AF case 114
.text:00404733                 jmp     def_4033AF      ; jumptable 004033AF default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:00404738 ; ---------------------------------------------------------------------------
.text:00404738
.text:00404738 loc_404738:                             ; CODE XREF: sub_403090+31F↑j
.text:00404738                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:00404738                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 004033AF case 106
.text:00404740                 jz      def_4033AF      ; jumptable 004033AF default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:00404746                 mov     [esp+59Ch+var_518], edi
.text:0040474D                 cmp     edi, 3
.text:00404750                 jge     short loc_40475E
.text:00404752                 mov     esi, 3
.text:00404757                 mov     [esp+59Ch+var_518], esi
.text:0040475E
.text:0040475E loc_40475E:                             ; CODE XREF: sub_403090+16C0↑j
.text:0040475E                 mov     ebx, [esp+59Ch+arg_C]
.text:00404765                 mov     ecx, [ebx+1Ch]
.text:00404768
.text:00404768 loc_404768:                             ; CODE XREF: sub_403090+1774↓j
.text:00404768                 inc     ecx
.text:00404769                 jmp     loc_403A45
.text:0040476E ; ---------------------------------------------------------------------------
.text:0040476E
.text:0040476E loc_40476E:                             ; CODE XREF: sub_403090+31F↑j
.text:0040476E                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:0040476E                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 004033AF case 107
.text:00404776                 jz      def_4033AF      ; jumptable 004033AF default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040477C                 mov     [esp+59Ch+var_518], edi
.text:00404783                 cmp     edi, 2
.text:00404786                 jl      short loc_404797
.text:00404788
.text:00404788 loc_404788:                             ; CODE XREF: sub_403090+1713↓j
.text:00404788                 mov     eax, [esp+59Ch+arg_C]
.text:0040478F                 mov     ecx, [eax+8]
.text:00404792                 jmp     loc_404404
.text:00404797 ; ---------------------------------------------------------------------------
.text:00404797
.text:00404797 loc_404797:                             ; CODE XREF: sub_403090+16F6↑j
.text:00404797                 mov     ecx, 2
.text:0040479C                 mov     [esp+59Ch+var_518], ecx
.text:004047A3                 jmp     short loc_404788
.text:004047A5 ; ---------------------------------------------------------------------------
.text:004047A5
.text:004047A5 loc_4047A5:                             ; CODE XREF: sub_403090+31F↑j
.text:004047A5                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:004047A5                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 004033AF case 108
.text:004047AD                 jz      def_4033AF      ; jumptable 004033AF default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:004047B3                 mov     [esp+59Ch+var_518], edi
.text:004047BA                 cmp     edi, 2
.text:004047BD                 jl      short loc_4047CB
.text:004047BF
.text:004047BF loc_4047BF:                             ; CODE XREF: sub_403090+1747↓j
.text:004047BF                 mov     ecx, [esp+59Ch+var_4FC]
.text:004047C6                 jmp     loc_404404
.text:004047CB ; ---------------------------------------------------------------------------
.text:004047CB
.text:004047CB loc_4047CB:                             ; CODE XREF: sub_403090+172D↑j
.text:004047CB                 mov     edx, 2
.text:004047D0                 mov     [esp+59Ch+var_518], edx
.text:004047D7                 jmp     short loc_4047BF
.text:004047D7 ; ---------------------------------------------------------------------------
.text:004047D9                 align 10h
.text:004047E0
.text:004047E0 loc_4047E0:                             ; CODE XREF: sub_403090+31F↑j
.text:004047E0                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:004047E0                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 004033AF case 109
.text:004047E8                 jz      def_4033AF      ; jumptable 004033AF default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:004047EE                 mov     [esp+59Ch+var_518], edi
.text:004047F5                 cmp     edi, 2
.text:004047F8                 jl      short loc_404809
.text:004047FA
.text:004047FA loc_4047FA:                             ; CODE XREF: sub_403090+1785↓j
.text:004047FA                 mov     esi, [esp+59Ch+arg_C]
.text:00404801                 mov     ecx, [esi+10h]
.text:00404804                 jmp     loc_404768
.text:00404809 ; ---------------------------------------------------------------------------
.text:00404809
.text:00404809 loc_404809:                             ; CODE XREF: sub_403090+1768↑j
.text:00404809                 mov     edx, 2
.text:0040480E                 mov     [esp+59Ch+var_518], edx
.text:00404815                 jmp     short loc_4047FA
.text:00404817 ; ---------------------------------------------------------------------------
.text:00404817
.text:00404817 loc_404817:                             ; CODE XREF: sub_403090+31F↑j
.text:00404817                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:00404817                 lea     ebx, [edi-1]    ; jumptable 004033AF case 110
.text:0040481A                 mov     edx, [esp+59Ch+var_504]
.text:00404821                 mov     ecx, ebx
.text:00404823                 shr     ecx, 1Fh
.text:00404826                 mov     edi, [esp+59Ch+arg_4]
.text:0040482D                 dec     ecx
.text:0040482E                 and     ecx, ebx
.text:00404830                 sub     edi, edx
.text:00404832                 lea     esi, [ecx+1]
.text:00404835                 xor     edx, edx
.text:00404837                 cmp     esi, edi
.text:00404839                 jnb     loc_4031E7
.text:0040483F                 mov     eax, [esp+59Ch+var_508]
.text:00404846                 test    eax, eax
.text:00404848                 jz      loc_40362B
.text:0040484E                 test    ebx, ebx
.text:00404850                 jle     short loc_40487E
.text:00404852                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:0040485A                 jz      short loc_40488D
.text:0040485C                 mov     [esp+59Ch+State], ebx ; Size
.text:00404860                 mov     edx, [esp+59Ch+var_508]
.text:00404867                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:0040486F                 mov     [esp+59Ch+Str], edx ; void *
.text:00404872
.text:00404872 loc_404872:                             ; CODE XREF: sub_403090+1813↓j
.text:00404872                 call    memset
.text:00404877                 add     [esp+59Ch+var_508], ebx
.text:0040487E
.text:0040487E loc_40487E:                             ; CODE XREF: sub_403090+17C0↑j
.text:0040487E                 mov     eax, [esp+59Ch+var_508]
.text:00404885                 mov     byte ptr [eax], 0Ah
.text:00404888                 jmp     loc_403623
.text:0040488D ; ---------------------------------------------------------------------------
.text:0040488D
.text:0040488D loc_40488D:                             ; CODE XREF: sub_403090+17CA↑j
.text:0040488D                 mov     [esp+59Ch+State], ebx
.text:00404891                 mov     edi, [esp+59Ch+var_508]
.text:00404898                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:004048A0                 mov     [esp+59Ch+Str], edi
.text:004048A3                 jmp     short loc_404872
.text:004048A5 ; ---------------------------------------------------------------------------
.text:004048A5
.text:004048A5 loc_4048A5:                             ; CODE XREF: sub_403090+31F↑j
.text:004048A5                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:004048A5                 mov     ebx, [esp+59Ch+arg_C] ; jumptable 004033AF case 115
.text:004048AC                 mov     ecx, [ebx]
.text:004048AE                 mov     [esp+59Ch+var_45C.tm_sec], ecx
.text:004048B5                 mov     esi, [ebx+4]
.text:004048B8                 mov     [esp+59Ch+var_45C.tm_min], esi
.text:004048BF                 mov     edx, [ebx+8]
.text:004048C2                 mov     [esp+59Ch+var_45C.tm_hour], edx
.text:004048C9                 mov     ecx, [ebx+0Ch]
.text:004048CC                 mov     [esp+59Ch+var_45C.tm_mday], ecx
.text:004048D3                 mov     esi, [ebx+10h]
.text:004048D6                 mov     [esp+59Ch+var_45C.tm_mon], esi
.text:004048DD                 mov     edx, [ebx+14h]
.text:004048E0                 mov     [esp+59Ch+var_45C.tm_year], edx
.text:004048E7                 mov     ecx, [ebx+18h]
.text:004048EA                 mov     [esp+59Ch+var_45C.tm_wday], ecx
.text:004048F1                 mov     esi, [ebx+1Ch]
.text:004048F4                 lea     ecx, [esp+59Ch+var_45C]
.text:004048FB                 mov     [esp+59Ch+var_45C.tm_yday], esi
.text:00404902                 mov     edx, [ebx+20h]
.text:00404905                 lea     esi, [esp+59Ch+var_20]
.text:0040490C                 mov     [esp+59Ch+Str], ecx ; Tm
.text:0040490F                 mov     ebx, 66666667h
.text:00404914                 mov     [esp+59Ch+var_45C.tm_isdst], edx
.text:0040491B                 call    mktime
.text:00404920                 mov     ecx, eax
.text:00404922                 shr     eax, 1Fh
.text:00404925                 mov     [esp+59Ch+var_51C], eax
.text:0040492C
.text:0040492C loc_40492C:                             ; CODE XREF: sub_403090+18D4↓j
.text:0040492C                 mov     eax, ecx
.text:0040492E                 imul    ebx
.text:00404930                 mov     eax, ecx
.text:00404932                 sar     eax, 1Fh
.text:00404935                 sar     edx, 2
.text:00404938                 sub     edx, eax
.text:0040493A                 lea     eax, [edx+edx*4]
.text:0040493D                 add     eax, eax
.text:0040493F                 sub     ecx, eax
.text:00404941                 mov     eax, ecx
.text:00404943                 cmp     [esp+59Ch+var_51C], 0
.text:0040494B                 mov     ecx, edx
.text:0040494D                 jz      short loc_404951
.text:0040494F                 neg     eax
.text:00404951
.text:00404951 loc_404951:                             ; CODE XREF: sub_403090+18BD↑j
.text:00404951                 add     al, 30h ; '0'
.text:00404953                 dec     esi
.text:00404954                 test    edx, edx
.text:00404956                 mov     [esi], al
.text:00404958                 mov     eax, 1
.text:0040495D                 mov     [esp+59Ch+var_518], eax
.text:00404964                 jnz     short loc_40492C
.text:00404966                 jmp     loc_403A8C
.text:0040496B ; ---------------------------------------------------------------------------
.text:0040496B
.text:0040496B loc_40496B:                             ; CODE XREF: sub_403090+31F↑j
.text:0040496B                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:0040496B                 lea     ebx, [edi-1]    ; jumptable 004033AF case 116
.text:0040496E                 mov     eax, [esp+59Ch+var_504]
.text:00404975                 mov     edx, ebx
.text:00404977                 shr     edx, 1Fh
.text:0040497A                 mov     edi, [esp+59Ch+arg_4]
.text:00404981                 dec     edx
.text:00404982                 and     edx, ebx
.text:00404984                 lea     esi, [edx+1]
.text:00404987                 sub     edi, eax
.text:00404989                 xor     edx, edx
.text:0040498B                 cmp     esi, edi
.text:0040498D                 jnb     loc_4031E7
.text:00404993                 mov     ecx, [esp+59Ch+var_508]
.text:0040499A                 test    ecx, ecx
.text:0040499C                 jz      loc_40362B
.text:004049A2                 test    ebx, ebx
.text:004049A4                 jle     short loc_4049D2
.text:004049A6                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:004049AE                 jz      short loc_4049E1
.text:004049B0                 mov     [esp+59Ch+State], ebx ; Size
.text:004049B4                 mov     eax, [esp+59Ch+var_508]
.text:004049BB                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:004049C3                 mov     [esp+59Ch+Str], eax ; void *
.text:004049C6
.text:004049C6 loc_4049C6:                             ; CODE XREF: sub_403090+1967↓j
.text:004049C6                 call    memset
.text:004049CB                 add     [esp+59Ch+var_508], ebx
.text:004049D2
.text:004049D2 loc_4049D2:                             ; CODE XREF: sub_403090+1914↑j
.text:004049D2                 mov     eax, [esp+59Ch+var_508]
.text:004049D9                 mov     byte ptr [eax], 9
.text:004049DC                 jmp     loc_403623
.text:004049E1 ; ---------------------------------------------------------------------------
.text:004049E1
.text:004049E1 loc_4049E1:                             ; CODE XREF: sub_403090+191E↑j
.text:004049E1                 mov     [esp+59Ch+State], ebx
.text:004049E5                 mov     edi, [esp+59Ch+var_508]
.text:004049EC                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:004049F4                 mov     [esp+59Ch+Str], edi
.text:004049F7                 jmp     short loc_4049C6
.text:004049F7 ; ---------------------------------------------------------------------------
.text:004049F9                 align 10h
.text:00404A00
.text:00404A00 loc_404A00:                             ; CODE XREF: sub_403090+31F↑j
.text:00404A00                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:00404A00                 mov     [esp+59Ch+var_518], edi ; jumptable 004033AF case 117
.text:00404A07                 cmp     edi, 1
.text:00404A0A                 jl      short loc_404A40
.text:00404A0C
.text:00404A0C loc_404A0C:                             ; CODE XREF: sub_403090+19BC↓j
.text:00404A0C                 mov     eax, [esp+59Ch+arg_C]
.text:00404A13                 mov     esi, [eax+18h]
.text:00404A16                 mov     eax, 92492493h
.text:00404A1B                 add     esi, 6
.text:00404A1E                 imul    esi
.text:00404A20                 mov     ebx, esi
.text:00404A22                 sar     ebx, 1Fh
.text:00404A25                 lea     ecx, [edx+esi]
.text:00404A28                 sar     ecx, 2
.text:00404A2B                 sub     ecx, ebx
.text:00404A2D                 lea     ebx, ds:0[ecx*8]
.text:00404A34                 sub     ebx, ecx
.text:00404A36                 sub     esi, ebx
.text:00404A38                 lea     ecx, [esi+1]
.text:00404A3B                 jmp     loc_403A45
.text:00404A40 ; ---------------------------------------------------------------------------
.text:00404A40
.text:00404A40 loc_404A40:                             ; CODE XREF: sub_403090+197A↑j
.text:00404A40                 mov     esi, 1
.text:00404A45                 mov     [esp+59Ch+var_518], esi
.text:00404A4C                 jmp     short loc_404A0C
.text:00404A4E ; ---------------------------------------------------------------------------
.text:00404A4E
.text:00404A4E loc_404A4E:                             ; CODE XREF: sub_403090+31F↑j
.text:00404A4E                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:00404A4E                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 004033AF case 119
.text:00404A56                 jz      def_4033AF      ; jumptable 004033AF default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:00404A5C                 mov     [esp+59Ch+var_518], edi
.text:00404A63                 cmp     edi, 1
.text:00404A66                 jl      short loc_404A77
.text:00404A68
.text:00404A68 loc_404A68:                             ; CODE XREF: sub_403090+19F3↓j
.text:00404A68                 mov     eax, [esp+59Ch+arg_C]
.text:00404A6F                 mov     ecx, [eax+18h]
.text:00404A72                 jmp     loc_403A45
.text:00404A77 ; ---------------------------------------------------------------------------
.text:00404A77
.text:00404A77 loc_404A77:                             ; CODE XREF: sub_403090+19D6↑j
.text:00404A77                 mov     ebx, 1
.text:00404A7C                 mov     [esp+59Ch+var_518], ebx
.text:00404A83                 jmp     short loc_404A68
.text:00404A85 ; ---------------------------------------------------------------------------
.text:00404A85
.text:00404A85 loc_404A85:                             ; CODE XREF: sub_403090+31F↑j
.text:00404A85                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:00404A85                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 004033AF case 121
.text:00404A8D                 jz      loc_4037BB      ; jumptable 004033AF case 114
.text:00404A93                 mov     [esp+59Ch+var_518], edi
.text:00404A9A                 cmp     edi, 2
.text:00404A9D                 jl      short loc_404AD4
.text:00404A9F
.text:00404A9F loc_404A9F:                             ; CODE XREF: sub_403090+1A50↓j
.text:00404A9F                 mov     ebx, [esp+59Ch+arg_C]
.text:00404AA6                 mov     esi, [ebx+14h]
.text:00404AA9                 mov     ebx, 51EB851Fh
.text:00404AAE                 mov     eax, esi
.text:00404AB0                 imul    ebx
.text:00404AB2                 mov     eax, esi
.text:00404AB4                 sar     edx, 5
.text:00404AB7                 mov     [esp+59Ch+var_57C], edx
.text:00404ABB                 cdq
.text:00404ABC                 sub     [esp+59Ch+var_57C], edx
.text:00404AC0                 mov     eax, [esp+59Ch+var_57C]
.text:00404AC4                 lea     ecx, [eax+eax*4]
.text:00404AC7                 lea     edx, [ecx+ecx*4]
.text:00404ACA                 shl     edx, 2
.text:00404ACD                 sub     esi, edx
.text:00404ACF                 jmp     loc_4045FA
.text:00404AD4 ; ---------------------------------------------------------------------------
.text:00404AD4
.text:00404AD4 loc_404AD4:                             ; CODE XREF: sub_403090+1A0D↑j
.text:00404AD4                 mov     ecx, 2
.text:00404AD9                 mov     [esp+59Ch+var_518], ecx
.text:00404AE0                 jmp     short loc_404A9F
.text:00404AE2 ; ---------------------------------------------------------------------------
.text:00404AE2
.text:00404AE2 loc_404AE2:                             ; CODE XREF: sub_403090+31F↑j
.text:00404AE2                                         ; DATA XREF: sub_403090:jpt_4033AF↑o
.text:00404AE2                 mov     eax, [esp+59Ch+arg_C] ; jumptable 004033AF case 122
.text:00404AE9                 mov     edx, [eax+20h]
.text:00404AEC                 test    edx, edx
.text:00404AEE                 js      loc_4031AA
.text:00404AF4                 mov     [esp+59Ch+var_550], 0
.text:00404AFC                 mov     esi, [esp+59Ch+arg_10]
.text:00404B03                 test    esi, esi
.text:00404B05                 jz      loc_404C08
.text:00404B0B
.text:00404B0B loc_404B0B:                             ; CODE XREF: sub_403090+1D33↓j
.text:00404B0B                 lea     ebx, [edi-1]
.text:00404B0E                 mov     ecx, [esp+59Ch+arg_4]
.text:00404B15                 mov     edx, ebx
.text:00404B17                 shr     edx, 1Fh
.text:00404B1A                 mov     eax, [esp+59Ch+var_504]
.text:00404B21                 dec     edx
.text:00404B22                 and     edx, ebx
.text:00404B24                 lea     esi, [edx+1]
.text:00404B27                 sub     ecx, eax
.text:00404B29                 xor     edx, edx
.text:00404B2B                 cmp     esi, ecx
.text:00404B2D                 jnb     loc_4031E7
.text:00404B33                 mov     ecx, [esp+59Ch+var_508]
.text:00404B3A                 test    ecx, ecx
.text:00404B3C                 jz      short loc_404B84
.text:00404B3E                 test    ebx, ebx
.text:00404B40                 jle     short loc_404B72
.text:00404B42                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:00404B4A                 jz      loc_404BED
.text:00404B50                 mov     [esp+59Ch+State], ebx ; Size
.text:00404B54                 mov     eax, [esp+59Ch+var_508]
.text:00404B5B                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:00404B63                 mov     [esp+59Ch+Str], eax ; void *
.text:00404B66
.text:00404B66 loc_404B66:                             ; CODE XREF: sub_403090+1B73↓j
.text:00404B66                 call    memset
.text:00404B6B                 add     [esp+59Ch+var_508], ebx
.text:00404B72
.text:00404B72 loc_404B72:                             ; CODE XREF: sub_403090+1AB0↑j
.text:00404B72                 mov     ebx, [esp+59Ch+var_508]
.text:00404B79                 mov     byte ptr [ebx], 2Bh ; '+'
.text:00404B7C                 inc     ebx
.text:00404B7D                 mov     [esp+59Ch+var_508], ebx
.text:00404B84
.text:00404B84 loc_404B84:                             ; CODE XREF: sub_403090+1AAC↑j
.text:00404B84                 add     [esp+59Ch+var_504], esi
.text:00404B8B
.text:00404B8B loc_404B8B:                             ; CODE XREF: sub_403090+1DB9↓j
.text:00404B8B                 mov     [esp+59Ch+var_518], edi
.text:00404B92                 mov     eax, [esp+59Ch+var_550]
.text:00404B96                 mov     ecx, 88888889h
.text:00404B9B                 mov     ebx, [esp+59Ch+var_550]
.text:00404B9F                 imul    ecx
.text:00404BA1                 lea     esi, [ebx+edx]
.text:00404BA4                 sar     esi, 5
.text:00404BA7                 sar     ebx, 1Fh
.text:00404BAA                 sub     esi, ebx
.text:00404BAC                 cmp     edi, 4
.text:00404BAF                 jge     short loc_404BBD
.text:00404BB1                 mov     edx, 4
.text:00404BB6                 mov     [esp+59Ch+var_518], edx
.text:00404BBD
.text:00404BBD loc_404BBD:                             ; CODE XREF: sub_403090+1B1F↑j
.text:00404BBD                 mov     eax, esi
.text:00404BBF                 mov     ebx, esi
.text:00404BC1                 sar     ebx, 1Fh
.text:00404BC4                 imul    ecx
.text:00404BC6                 add     edx, esi
.text:00404BC8                 sar     edx, 5
.text:00404BCB                 sub     edx, ebx
.text:00404BCD                 lea     eax, [edx+edx*4]
.text:00404BD0                 lea     ebx, [eax+eax*4]
.text:00404BD3                 mov     eax, edx
.text:00404BD5                 shl     eax, 4
.text:00404BD8                 sub     eax, edx
.text:00404BDA                 lea     ecx, ds:0[eax*4]
.text:00404BE1                 mov     eax, esi
.text:00404BE3                 sub     eax, ecx
.text:00404BE5                 lea     ecx, [eax+ebx*4]
.text:00404BE8                 jmp     loc_403A45
.text:00404BED ; ---------------------------------------------------------------------------
.text:00404BED
.text:00404BED loc_404BED:                             ; CODE XREF: sub_403090+1ABA↑j
.text:00404BED                 mov     [esp+59Ch+State], ebx
.text:00404BF1                 mov     edx, [esp+59Ch+var_508]
.text:00404BF8                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:00404C00                 mov     [esp+59Ch+Str], edx
.text:00404C03                 jmp     loc_404B66
.text:00404C08 ; ---------------------------------------------------------------------------
.text:00404C08
.text:00404C08 loc_404C08:                             ; CODE XREF: sub_403090+1A75↑j
.text:00404C08                 mov     ecx, [eax]
.text:00404C0A                 mov     [esp+59Ch+var_4BC.tm_sec], ecx
.text:00404C11                 mov     ebx, [eax+4]
.text:00404C14                 mov     [esp+59Ch+var_4BC.tm_min], ebx
.text:00404C1B                 mov     ecx, [eax+8]
.text:00404C1E                 mov     [esp+59Ch+var_4BC.tm_hour], ecx
.text:00404C25                 mov     ebx, [eax+0Ch]
.text:00404C28                 mov     [esp+59Ch+var_4BC.tm_mday], ebx
.text:00404C2F                 mov     ecx, [eax+10h]
.text:00404C32                 mov     [esp+59Ch+var_4BC.tm_mon], ecx
.text:00404C39                 mov     ebx, [eax+14h]
.text:00404C3C                 mov     [esp+59Ch+var_4BC.tm_year], ebx
.text:00404C43                 mov     ecx, [eax+18h]
.text:00404C46                 mov     [esp+59Ch+var_4BC.tm_wday], ecx
.text:00404C4D                 mov     ebx, [eax+1Ch]
.text:00404C50                 lea     ecx, [esp+59Ch+var_4BC]
.text:00404C57                 mov     [esp+59Ch+var_4BC.tm_isdst], edx
.text:00404C5E                 mov     [esp+59Ch+Str], ecx ; Tm
.text:00404C61                 mov     [esp+59Ch+var_4BC.tm_yday], ebx
.text:00404C68                 lea     ebx, [esp+59Ch+var_4F8]
.text:00404C6F                 call    mktime
.text:00404C74                 mov     [esp+59Ch+var_4F8], eax
.text:00404C7B                 inc     eax
.text:00404C7C                 jz      loc_404E84
.text:00404C82
.text:00404C82 loc_404C82:                             ; CODE XREF: sub_403090+1E7F↓j
.text:00404C82                 mov     [esp+59Ch+Str], ebx ; __time32_t *
.text:00404C85                 lea     esi, [esp+59Ch+var_48C]
.text:00404C8C                 mov     [esp+59Ch+SizeInBytes], esi ; int
.text:00404C90                 call    sub_406EC0
.text:00404C95                 test    eax, eax
.text:00404C97                 jz      loc_4031AA
.text:00404C9D                 mov     eax, [esp+59Ch+var_4BC.tm_year]
.text:00404CA4                 test    al, 3
.text:00404CA6                 jnz     loc_404E77
.text:00404CAC                 sar     eax, 2
.text:00404CAF                 add     eax, 1DAh
.text:00404CB4
.text:00404CB4 loc_404CB4:                             ; CODE XREF: sub_403090+1DEF↓j
.text:00404CB4                 mov     [esp+59Ch+var_554], eax
.text:00404CB8                 mov     ecx, [esp+59Ch+var_478]
.text:00404CBF                 test    cl, 3
.text:00404CC2                 mov     [esp+59Ch+var_55C], ecx
.text:00404CC6                 jnz     loc_404E66
.text:00404CCC                 mov     eax, ecx
.text:00404CCE                 sar     eax, 2
.text:00404CD1                 add     eax, 1DAh
.text:00404CD6
.text:00404CD6 loc_404CD6:                             ; CODE XREF: sub_403090+1DE2↓j
.text:00404CD6                 mov     [esp+59Ch+var_558], eax
.text:00404CDA                 mov     ecx, 51EB851Fh
.text:00404CDF                 mov     esi, [esp+59Ch+var_554]
.text:00404CE3                 mov     eax, [esp+59Ch+var_554]
.text:00404CE7                 sar     esi, 1Fh
.text:00404CEA                 imul    ecx
.text:00404CEC                 mov     eax, [esp+59Ch+var_558]
.text:00404CF0                 sar     edx, 3
.text:00404CF3                 sub     edx, esi
.text:00404CF5                 lea     ebx, [edx+edx*4]
.text:00404CF8                 lea     esi, [ebx+ebx*4]
.text:00404CFB                 mov     ebx, [esp+59Ch+var_554]
.text:00404CFF                 sub     ebx, esi
.text:00404D01                 shr     ebx, 1Fh
.text:00404D04                 sub     edx, ebx
.text:00404D06                 mov     esi, edx
.text:00404D08                 mov     ebx, [esp+59Ch+var_558]
.text:00404D0C                 imul    ecx
.text:00404D0E                 sar     ebx, 1Fh
.text:00404D11                 sar     edx, 3
.text:00404D14                 sub     edx, ebx
.text:00404D16                 lea     ecx, [edx+edx*4]
.text:00404D19                 lea     ebx, [ecx+ecx*4]
.text:00404D1C                 mov     ecx, [esp+59Ch+var_558]
.text:00404D20                 sub     ecx, ebx
.text:00404D22                 mov     ebx, ecx
.text:00404D24                 shr     ebx, 1Fh
.text:00404D27                 mov     ecx, [esp+59Ch+var_558]
.text:00404D2B                 sub     edx, ebx
.text:00404D2D                 sub     [esp+59Ch+var_554], ecx
.text:00404D31                 mov     eax, edx
.text:00404D33                 mov     ebx, esi
.text:00404D35                 sub     esi, eax
.text:00404D37                 sar     edx, 2
.text:00404D3A                 mov     eax, [esp+59Ch+var_4BC.tm_year]
.text:00404D41                 sub     [esp+59Ch+var_554], esi
.text:00404D45                 sar     ebx, 2
.text:00404D48                 sub     ebx, edx
.text:00404D4A                 mov     edx, [esp+59Ch+var_55C]
.text:00404D4E                 mov     ecx, [esp+59Ch+var_554]
.text:00404D52                 sub     eax, edx
.text:00404D54                 lea     esi, [eax+eax*8]
.text:00404D57                 add     ebx, ecx
.text:00404D59                 mov     edx, [esp+59Ch+var_470]
.text:00404D60                 lea     ecx, [eax+esi*8]
.text:00404D63                 lea     esi, [ecx+ecx*4]
.text:00404D66                 mov     eax, [esp+59Ch+var_488]
.text:00404D6D                 add     esi, ebx
.text:00404D6F                 mov     ebx, [esp+59Ch+var_4BC.tm_yday]
.text:00404D76                 sub     ebx, edx
.text:00404D78                 add     esi, ebx
.text:00404D7A                 mov     edx, [esp+59Ch+var_4BC.tm_hour]
.text:00404D81                 mov     ebx, [esp+59Ch+var_484]
.text:00404D88                 lea     ecx, [esi+esi*2]
.text:00404D8B                 sub     edx, ebx
.text:00404D8D                 lea     ebx, [edx+ecx*8]
.text:00404D90                 mov     edx, [esp+59Ch+var_4BC.tm_min]
.text:00404D97                 mov     esi, ebx
.text:00404D99                 shl     esi, 4
.text:00404D9C                 sub     esi, ebx
.text:00404D9E                 sub     edx, eax
.text:00404DA0                 mov     ebx, [esp+59Ch+var_4BC.tm_sec]
.text:00404DA7                 lea     ecx, [edx+esi*4]
.text:00404DAA                 mov     eax, [esp+59Ch+var_48C]
.text:00404DB1                 mov     esi, ecx
.text:00404DB3                 shl     esi, 4
.text:00404DB6                 sub     esi, ecx
.text:00404DB8                 sub     ebx, eax
.text:00404DBA                 lea     edx, [ebx+esi*4]
.text:00404DBD                 test    edx, edx
.text:00404DBF                 mov     [esp+59Ch+var_550], edx
.text:00404DC3                 jns     loc_404B0B
.text:00404DC9                 lea     ebx, [edi-1]
.text:00404DCC                 mov     ecx, [esp+59Ch+arg_4]
.text:00404DD3                 mov     edx, ebx
.text:00404DD5                 shr     edx, 1Fh
.text:00404DD8                 mov     eax, [esp+59Ch+var_504]
.text:00404DDF                 dec     edx
.text:00404DE0                 and     edx, ebx
.text:00404DE2                 lea     esi, [edx+1]
.text:00404DE5                 sub     ecx, eax
.text:00404DE7                 xor     edx, edx
.text:00404DE9                 cmp     esi, ecx
.text:00404DEB                 jnb     loc_4031E7
.text:00404DF1                 mov     eax, [esp+59Ch+var_508]
.text:00404DF8                 test    eax, eax
.text:00404DFA                 jz      short loc_404E3E
.text:00404DFC                 test    ebx, ebx
.text:00404DFE                 jle     short loc_404E2C
.text:00404E00                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:00404E08                 jz      short loc_404E4E
.text:00404E0A                 mov     [esp+59Ch+State], ebx ; Size
.text:00404E0E                 mov     eax, [esp+59Ch+var_508]
.text:00404E15                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:00404E1D                 mov     [esp+59Ch+Str], eax ; void *
.text:00404E20
.text:00404E20 loc_404E20:                             ; CODE XREF: sub_403090+1DD4↓j
.text:00404E20                 call    memset
.text:00404E25                 add     [esp+59Ch+var_508], ebx
.text:00404E2C
.text:00404E2C loc_404E2C:                             ; CODE XREF: sub_403090+1D6E↑j
.text:00404E2C                 mov     ebx, [esp+59Ch+var_508]
.text:00404E33                 mov     byte ptr [ebx], 2Dh ; '-'
.text:00404E36                 inc     ebx
.text:00404E37                 mov     [esp+59Ch+var_508], ebx
.text:00404E3E
.text:00404E3E loc_404E3E:                             ; CODE XREF: sub_403090+1D6A↑j
.text:00404E3E                 add     [esp+59Ch+var_504], esi
.text:00404E45                 neg     [esp+59Ch+var_550]
.text:00404E49                 jmp     loc_404B8B
.text:00404E4E ; ---------------------------------------------------------------------------
.text:00404E4E
.text:00404E4E loc_404E4E:                             ; CODE XREF: sub_403090+1D78↑j
.text:00404E4E                 mov     [esp+59Ch+State], ebx
.text:00404E52                 mov     ecx, [esp+59Ch+var_508]
.text:00404E59                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:00404E61                 mov     [esp+59Ch+Str], ecx
.text:00404E64                 jmp     short loc_404E20
.text:00404E66 ; ---------------------------------------------------------------------------
.text:00404E66
.text:00404E66 loc_404E66:                             ; CODE XREF: sub_403090+1C36↑j
.text:00404E66                 mov     eax, [esp+59Ch+var_55C]
.text:00404E6A                 sar     eax, 2
.text:00404E6D                 add     eax, 1DBh
.text:00404E72                 jmp     loc_404CD6
.text:00404E77 ; ---------------------------------------------------------------------------
.text:00404E77
.text:00404E77 loc_404E77:                             ; CODE XREF: sub_403090+1C16↑j
.text:00404E77                 sar     eax, 2
.text:00404E7A                 add     eax, 1DBh
.text:00404E7F                 jmp     loc_404CB4
.text:00404E84 ; ---------------------------------------------------------------------------
.text:00404E84
.text:00404E84 loc_404E84:                             ; CODE XREF: sub_403090+1BEC↑j
.text:00404E84                 mov     [esp+59Ch+Str], ebx ; __time32_t *
.text:00404E87                 lea     edx, [esp+59Ch+var_4F0._Byte]
.text:00404E8E                 mov     [esp+59Ch+SizeInBytes], edx ; int
.text:00404E92                 call    sub_406F20
.text:00404E97                 test    eax, eax
.text:00404E99                 jz      loc_4031AA
.text:00404E9F                 mov     ecx, [esp+59Ch+var_4BC.tm_sec]
.text:00404EA6                 mov     eax, [esp+59Ch+var_4BC.tm_min]
.text:00404EAD                 mov     edx, dword ptr [esp+59Ch+var_4F0._Byte]
.text:00404EB4                 mov     esi, [esp+59Ch+var_4E8]
.text:00404EBB                 xor     edx, ecx
.text:00404EBD                 xor     esi, eax
.text:00404EBF                 mov     ecx, [esp+59Ch+var_4E4]
.text:00404EC6                 or      edx, esi
.text:00404EC8                 mov     eax, [esp+59Ch+var_4BC.tm_hour]
.text:00404ECF                 mov     esi, [esp+59Ch+var_4E0]
.text:00404ED6                 xor     ecx, eax
.text:00404ED8                 mov     eax, [esp+59Ch+var_4BC.tm_mday]
.text:00404EDF                 or      edx, ecx
.text:00404EE1                 mov     ecx, [esp+59Ch+var_4DC]
.text:00404EE8                 xor     esi, eax
.text:00404EEA                 mov     eax, [esp+59Ch+var_4BC.tm_mon]
.text:00404EF1                 or      edx, esi
.text:00404EF3                 mov     esi, [esp+59Ch+var_4D8]
.text:00404EFA                 xor     ecx, eax
.text:00404EFC                 mov     eax, [esp+59Ch+var_4BC.tm_year]
.text:00404F03                 or      edx, ecx
.text:00404F05                 xor     esi, eax
.text:00404F07                 or      edx, esi
.text:00404F09                 jnz     loc_4031AA
.text:00404F0F                 jmp     loc_404C82
.text:00404F14 ; ---------------------------------------------------------------------------
.text:00404F14
.text:00404F14 loc_404F14:                             ; CODE XREF: sub_403090+2F7↑j
.text:00404F14                                         ; sub_403090+309↑j
.text:00404F14                 mov     [esp+59Ch+var_514], eax
.text:00404F1B                 inc     ebp
.text:00404F1C                 movzx   ecx, byte ptr [ebp+0]
.text:00404F20                 jmp     loc_40339F
.text:00404F25 ; ---------------------------------------------------------------------------
.text:00404F25
.text:00404F25 loc_404F25:                             ; CODE XREF: sub_403090+2D1↑j
.text:00404F25                 movsx   esi, cl
.text:00404F28                 sub     esi, 30h ; '0'
.text:00404F2B                 cmp     esi, 7
.text:00404F2E                 jle     loc_403367
.text:00404F34
.text:00404F34 loc_404F34:                             ; CODE XREF: sub_403090+2C5↑j
.text:00404F34                 mov     edi, 7FFFFFFFh
.text:00404F39                 jmp     loc_403371
.text:00404F39 ; ---------------------------------------------------------------------------
.text:00404F3E                 align 10h
.text:00404F40
.text:00404F40 loc_404F40:                             ; CODE XREF: sub_403090+29B↑j
.text:00404F40                 mov     ebx, 1
.text:00404F45                 jmp     loc_403310
.text:00404F45 ; ---------------------------------------------------------------------------
.text:00404F4A                 align 10h
.text:00404F50
.text:00404F50 loc_404F50:                             ; CODE XREF: sub_403090+292↑j
.text:00404F50                 cmp     edx, 5Eh ; '^'
.text:00404F53                 jz      short loc_404F60
.text:00404F55                 cmp     edx, 5Fh ; '_'
.text:00404F58                 jmp     loc_403334
.text:00404F58 ; ---------------------------------------------------------------------------
.text:00404F5D                 align 10h
.text:00404F60
.text:00404F60 loc_404F60:                             ; CODE XREF: sub_403090+1EC3↑j
.text:00404F60                 mov     [esp+59Ch+var_528], 1
.text:00404F68                 jmp     loc_403310
.text:00404F68 ; ---------------------------------------------------------------------------
.text:00404F6D                 align 10h
.text:00404F70
.text:00404F70 loc_404F70:                             ; CODE XREF: sub_403090+B0↑j
.text:00404F70                 cmp     eax, 41h ; 'A'
.text:00404F73                 jl      loc_4031F4
.text:00404F79                 cmp     eax, 5Fh ; '_'
.text:00404F7C                 jle     loc_403170
.text:00404F82                 sub     eax, 61h ; 'a'
.text:00404F85                 cmp     eax, 1Dh
.text:00404F88                 jmp     loc_40315F
.text:00404F88 ; ---------------------------------------------------------------------------
.text:00404F8D                 align 10h
.text:00404F90
.text:00404F90 loc_404F90:                             ; CODE XREF: sub_403090+67↑j
.text:00404F90                 mov     edx, [esp+59Ch+var_4FC]
.text:00404F97                 test    edx, edx
.text:00404F99                 jnz     loc_403105
.text:00404F9F                 mov     ecx, 0Ch
.text:00404FA4                 mov     [esp+59Ch+var_4FC], ecx
.text:00404FAB                 jmp     loc_403105
.text:00404FB0 ; ---------------------------------------------------------------------------
.text:00404FB0
.text:00404FB0 loc_404FB0:                             ; CODE XREF: sub_403090+4D↑j
.text:00404FB0                 call    _tzset
.text:00404FB5                 jmp     loc_4030EF
.text:00404FB5 sub_403090      endp
.text:00404FB5
.text:00404FB5 ; ---------------------------------------------------------------------------
.text:00404FBA                 align 10h
.text:00404FC0
.text:00404FC0 ; =============== S U B R O U T I N E =======================================
.text:00404FC0
.text:00404FC0
.text:00404FC0 sub_404FC0      proc near               ; CODE XREF: sub_402AE0+17A↑p
.text:00404FC0                                         ; .text:0040510B↓j
.text:00404FC0
.text:00404FC0 arg_0           = word ptr  4
.text:00404FC0 arg_4           = dword ptr  8
.text:00404FC0
.text:00404FC0                 push    ebx
.text:00404FC1                 mov     eax, 62h ; 'b'
.text:00404FC6                 mov     ebx, [esp+4+arg_4]
.text:00404FCA                 movzx   edx, [esp+4+arg_0]
.text:00404FCF                 mov     ecx, edx
.text:00404FD1                 and     ecx, 0F000h
.text:00404FD7                 cmp     ecx, 6000h
.text:00404FDD                 jz      short loc_405040
.text:00404FDF                 cmp     ecx, 2000h
.text:00404FE5                 mov     eax, 63h ; 'c'
.text:00404FEA                 jz      short loc_405040
.text:00404FEC                 cmp     ecx, 4000h
.text:00404FF2                 mov     eax, 64h ; 'd'
.text:00404FF7                 jz      short loc_405040
.text:00404FF9                 cmp     ecx, 8000h
.text:00404FFF                 mov     eax, 2Dh ; '-'
.text:00405004                 jz      short loc_405040
.text:00405006                 cmp     ecx, 1000h
.text:0040500C                 mov     eax, 70h ; 'p'
.text:00405011                 jz      short loc_405040
.text:00405013                 cmp     ecx, 0A000h
.text:00405019                 mov     eax, 6Ch ; 'l'
.text:0040501E                 jz      short loc_405040
.text:00405020                 xor     eax, eax
.text:00405022                 cmp     ecx, 0C000h
.text:00405028                 setz    al
.text:0040502B                 dec     eax
.text:0040502C                 and     eax, 0FFFFFFCCh
.text:0040502F                 add     eax, 73h ; 's'
.text:00405032                 lea     esi, [esi+0]
.text:00405039                 lea     edi, [edi+0]
.text:00405040
.text:00405040 loc_405040:                             ; CODE XREF: sub_404FC0+1D↑j
.text:00405040                                         ; sub_404FC0+2A↑j ...
.text:00405040                 mov     [ebx], al
.text:00405042                 test    dh, 1
.text:00405045                 mov     al, 72h ; 'r'
.text:00405047                 jnz     short loc_40504B
.text:00405049                 mov     al, 2Dh ; '-'
.text:0040504B
.text:0040504B loc_40504B:                             ; CODE XREF: sub_404FC0+87↑j
.text:0040504B                 mov     [ebx+1], al
.text:0040504E                 test    dl, dl
.text:00405050                 mov     al, 77h ; 'w'
.text:00405052                 js      short loc_405056
.text:00405054                 mov     al, 2Dh ; '-'
.text:00405056
.text:00405056 loc_405056:                             ; CODE XREF: sub_404FC0+92↑j
.text:00405056                 mov     [ebx+2], al
.text:00405059                 test    dl, 40h
.text:0040505C                 mov     al, 78h ; 'x'
.text:0040505E                 jnz     short loc_405062
.text:00405060                 mov     al, 2Dh ; '-'
.text:00405062
.text:00405062 loc_405062:                             ; CODE XREF: sub_404FC0+9E↑j
.text:00405062                 mov     [ebx+3], al
.text:00405065                 test    dl, 20h
.text:00405068                 mov     al, 72h ; 'r'
.text:0040506A                 jnz     short loc_40506E
.text:0040506C                 mov     al, 2Dh ; '-'
.text:0040506E
.text:0040506E loc_40506E:                             ; CODE XREF: sub_404FC0+AA↑j
.text:0040506E                 mov     [ebx+4], al
.text:00405071                 test    dl, 10h
.text:00405074                 mov     al, 77h ; 'w'
.text:00405076                 jnz     short loc_40507A
.text:00405078                 mov     al, 2Dh ; '-'
.text:0040507A
.text:0040507A loc_40507A:                             ; CODE XREF: sub_404FC0+B6↑j
.text:0040507A                 mov     [ebx+5], al
.text:0040507D                 test    dl, 8
.text:00405080                 mov     al, 78h ; 'x'
.text:00405082                 jnz     short loc_405086
.text:00405084                 mov     al, 2Dh ; '-'
.text:00405086
.text:00405086 loc_405086:                             ; CODE XREF: sub_404FC0+C2↑j
.text:00405086                 mov     [ebx+6], al
.text:00405089                 test    dl, 4
.text:0040508C                 mov     al, 72h ; 'r'
.text:0040508E                 jnz     short loc_405092
.text:00405090                 mov     al, 2Dh ; '-'
.text:00405092
.text:00405092 loc_405092:                             ; CODE XREF: sub_404FC0+CE↑j
.text:00405092                 mov     [ebx+7], al
.text:00405095                 test    dl, 2
.text:00405098                 mov     al, 77h ; 'w'
.text:0040509A                 jnz     short loc_40509E
.text:0040509C                 mov     al, 2Dh ; '-'
.text:0040509E
.text:0040509E loc_40509E:                             ; CODE XREF: sub_404FC0+DA↑j
.text:0040509E                 mov     [ebx+8], al
.text:004050A1                 test    dl, 1
.text:004050A4                 mov     al, 78h ; 'x'
.text:004050A6                 jnz     short loc_4050AA
.text:004050A8                 mov     al, 2Dh ; '-'
.text:004050AA
.text:004050AA loc_4050AA:                             ; CODE XREF: sub_404FC0+E6↑j
.text:004050AA                 mov     [ebx+9], al
.text:004050AD                 test    dh, 8
.text:004050B0                 jz      short loc_4050BC
.text:004050B2                 cmp     byte ptr [ebx+3], 78h ; 'x'
.text:004050B6                 jz      short loc_4050F0
.text:004050B8                 mov     byte ptr [ebx+3], 53h ; 'S'
.text:004050BC
.text:004050BC loc_4050BC:                             ; CODE XREF: sub_404FC0+F0↑j
.text:004050BC                                         ; sub_404FC0+134↓j
.text:004050BC                 test    dh, 4
.text:004050BF                 jz      short loc_4050CB
.text:004050C1                 cmp     byte ptr [ebx+6], 78h ; 'x'
.text:004050C5                 jz      short loc_4050E6
.text:004050C7                 mov     byte ptr [ebx+6], 53h ; 'S'
.text:004050CB
.text:004050CB loc_4050CB:                             ; CODE XREF: sub_404FC0+FF↑j
.text:004050CB                                         ; sub_404FC0+12A↓j
.text:004050CB                 test    dh, 2
.text:004050CE                 jz      short loc_4050DA
.text:004050D0                 cmp     byte ptr [ebx+9], 78h ; 'x'
.text:004050D4                 jz      short loc_4050E0
.text:004050D6                 mov     byte ptr [ebx+9], 54h ; 'T'
.text:004050DA
.text:004050DA loc_4050DA:                             ; CODE XREF: sub_404FC0+10E↑j
.text:004050DA                                         ; sub_404FC0+124↓j
.text:004050DA                 pop     ebx
.text:004050DB                 retn
.text:004050DB ; ---------------------------------------------------------------------------
.text:004050DC                 align 10h
.text:004050E0
.text:004050E0 loc_4050E0:                             ; CODE XREF: sub_404FC0+114↑j
.text:004050E0                 mov     byte ptr [ebx+9], 74h ; 't'
.text:004050E4                 jmp     short loc_4050DA
.text:004050E6 ; ---------------------------------------------------------------------------
.text:004050E6
.text:004050E6 loc_4050E6:                             ; CODE XREF: sub_404FC0+105↑j
.text:004050E6                 mov     byte ptr [ebx+6], 73h ; 's'
.text:004050EA                 jmp     short loc_4050CB
.text:004050EA ; ---------------------------------------------------------------------------
.text:004050EC                 align 10h
.text:004050F0
.text:004050F0 loc_4050F0:                             ; CODE XREF: sub_404FC0+F6↑j
.text:004050F0                 mov     byte ptr [ebx+3], 73h ; 's'
.text:004050F4                 jmp     short loc_4050BC
.text:004050F4 sub_404FC0      endp
.text:004050F4
.text:004050F4 ; ---------------------------------------------------------------------------
.text:004050F6                 align 10h
.text:00405100                 mov     ecx, [esp+4]
.text:00405104                 movzx   edx, word ptr [ecx]
.text:00405107                 mov     [esp+4], edx
.text:0040510B                 jmp     sub_404FC0
.text:0040510B ; ---------------------------------------------------------------------------
.text:00405110 aWeirdFile      db 'weird file',0       ; DATA XREF: sub_405190+43↓o
.text:0040511B aSocket         db 'socket',0           ; DATA XREF: sub_405190:loc_4051E9↓o
.text:00405122 aSymbolicLink   db 'symbolic link',0    ; DATA XREF: sub_405190:loc_4051F3↓o
.text:00405130 aFifo           db 'fifo',0             ; DATA XREF: sub_405190:loc_4051FD↓o
.text:00405135 aCharacterSpeci db 'character special file',0
.text:00405135                                         ; DATA XREF: sub_405190:loc_405207↓o
.text:0040514C aBlockSpecialFi db 'block special file',0
.text:0040514C                                         ; DATA XREF: sub_405190:loc_405211↓o
.text:0040515F aDirectory      db 'directory',0        ; DATA XREF: sub_405190:loc_405220↓o
.text:00405169 aRegularEmptyFi db 'regular empty file',0
.text:00405169                                         ; DATA XREF: sub_405190+AC↓o
.text:0040517C aRegularFile    db 'regular file',0     ; DATA XREF: sub_405190:loc_405250↓o
.text:00405189                 align 10h
.text:00405190
.text:00405190 ; =============== S U B R O U T I N E =======================================
.text:00405190
.text:00405190
.text:00405190 sub_405190      proc near               ; CODE XREF: sub_402AE0+1E8↑p
.text:00405190
.text:00405190 var_C           = dword ptr -0Ch
.text:00405190 arg_0           = dword ptr  4
.text:00405190
.text:00405190                 sub     esp, 0Ch
.text:00405193                 mov     edx, [esp+0Ch+arg_0]
.text:00405197                 mov     eax, [edx]
.text:00405199                 and     eax, 0F000h
.text:0040519E                 cmp     eax, 8000h
.text:004051A3                 jz      loc_405230
.text:004051A9                 cmp     eax, 4000h
.text:004051AE                 jz      short loc_405220
.text:004051B0                 cmp     eax, 6000h
.text:004051B5                 jz      short loc_405211
.text:004051B7                 cmp     eax, 2000h
.text:004051BC                 jz      short loc_405207
.text:004051BE                 cmp     eax, 1000h
.text:004051C3                 jz      short loc_4051FD
.text:004051C5                 cmp     eax, 0A000h
.text:004051CA                 jz      short loc_4051F3
.text:004051CC                 cmp     eax, 0C000h
.text:004051D1                 jz      short loc_4051E9
.text:004051D3                 mov     [esp+0Ch+arg_0], offset aWeirdFile ; "weird file"
.text:004051DB                 nop
.text:004051DC                 lea     esi, [esi+0]
.text:004051E0
.text:004051E0 loc_4051E0:                             ; CODE XREF: sub_405190+61↓j
.text:004051E0                                         ; sub_405190+6B↓j ...
.text:004051E0                 add     esp, 0Ch
.text:004051E3                 jmp     ds:libintl_gettext
.text:004051E9 ; ---------------------------------------------------------------------------
.text:004051E9
.text:004051E9 loc_4051E9:                             ; CODE XREF: sub_405190+41↑j
.text:004051E9                 mov     [esp+0Ch+arg_0], offset aSocket ; "socket"
.text:004051F1                 jmp     short loc_4051E0
.text:004051F3 ; ---------------------------------------------------------------------------
.text:004051F3
.text:004051F3 loc_4051F3:                             ; CODE XREF: sub_405190+3A↑j
.text:004051F3                 mov     [esp+0Ch+arg_0], offset aSymbolicLink ; "symbolic link"
.text:004051FB                 jmp     short loc_4051E0
.text:004051FD ; ---------------------------------------------------------------------------
.text:004051FD
.text:004051FD loc_4051FD:                             ; CODE XREF: sub_405190+33↑j
.text:004051FD                 mov     [esp+0Ch+arg_0], offset aFifo ; "fifo"
.text:00405205                 jmp     short loc_4051E0
.text:00405207 ; ---------------------------------------------------------------------------
.text:00405207
.text:00405207 loc_405207:                             ; CODE XREF: sub_405190+2C↑j
.text:00405207                 mov     [esp+0Ch+arg_0], offset aCharacterSpeci ; "character special file"
.text:0040520F                 jmp     short loc_4051E0
.text:00405211 ; ---------------------------------------------------------------------------
.text:00405211
.text:00405211 loc_405211:                             ; CODE XREF: sub_405190+25↑j
.text:00405211                 mov     [esp+0Ch+arg_0], offset aBlockSpecialFi ; "block special file"
.text:00405219                 jmp     short loc_4051E0
.text:00405219 ; ---------------------------------------------------------------------------
.text:0040521B                 align 10h
.text:00405220
.text:00405220 loc_405220:                             ; CODE XREF: sub_405190+1E↑j
.text:00405220                 mov     [esp+0Ch+arg_0], offset aDirectory ; "directory"
.text:00405228                 jmp     short loc_4051E0
.text:00405228 ; ---------------------------------------------------------------------------
.text:0040522A                 align 10h
.text:00405230
.text:00405230 loc_405230:                             ; CODE XREF: sub_405190+13↑j
.text:00405230                 mov     eax, [edx+30h]
.text:00405233                 mov     edx, [edx+34h]
.text:00405236                 mov     ecx, edx
.text:00405238                 or      ecx, eax
.text:0040523A                 jnz     short loc_405250
.text:0040523C                 mov     [esp+0Ch+var_C], offset aRegularEmptyFi ; "regular empty file"
.text:00405243
.text:00405243 loc_405243:                             ; CODE XREF: sub_405190+C7↓j
.text:00405243                 call    ds:libintl_gettext
.text:00405249                 add     esp, 0Ch
.text:0040524C                 retn
.text:0040524C ; ---------------------------------------------------------------------------
.text:0040524D                 align 10h
.text:00405250
.text:00405250 loc_405250:                             ; CODE XREF: sub_405190+AA↑j
.text:00405250                 mov     [esp+0Ch+var_C], offset aRegularFile ; "regular file"
.text:00405257                 jmp     short loc_405243
.text:00405257 sub_405190      endp
.text:00405257
.text:00405257 ; ---------------------------------------------------------------------------
.text:00405259                 align 10h
.text:00405260 dword_405260    dd 90002D2Dh, 7 dup(90909090h)
.text:00405260                                         ; DATA XREF: sub_4054B0+E4↓o
.text:00405280 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00405280                                         ; DATA XREF: sub_4054B0+2FC↓o
.text:004052AD                 align 20h
.text:004052C0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004052C0                                         ; DATA XREF: sub_4054B0:loc_405812↓o
.text:004052ED                 align 20h
.text:00405300 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00405300                                         ; DATA XREF: sub_4054B0:loc_4058B0↓o
.text:00405300                                         ; sub_4054B0:loc_405C77↓o
.text:00405326                 align 20h
.text:00405340 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00405340                                         ; DATA XREF: sub_4054B0+48E↓o
.text:00405360 dword_405360    dd 90909000h, 7 dup(90909090h)
.text:00405360                                         ; DATA XREF: sub_4054B0:loc_405981↓o
.text:00405380 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00405380                                         ; DATA XREF: sub_4054B0:loc_40599A↓o
.text:004053A0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:004053A0                                         ; DATA XREF: sub_4054B0:loc_405A7F↓o
.text:004053A0                                         ; sub_4054B0:loc_405DAC↓o
.text:004053C7                 align 20h
.text:004053E0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004053E0                                         ; DATA XREF: sub_4054B0:loc_405BF3↓o
.text:0040540E                 align 20h
.text:00405420 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00405420                                         ; DATA XREF: sub_4054B0:loc_405CDF↓o
.text:00405441 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00405441                                         ; DATA XREF: sub_4054B0+93F↓o
.text:0040545B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040545B                                         ; DATA XREF: sub_4054B0:loc_405E27↓o
.text:00405475 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00405475                                         ; DATA XREF: sub_4054B0:loc_405E4E↓o
.text:00405493 ; const char VarName[]
.text:00405493 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_4054B0:loc_406000↓o
.text:004054A3                 align 10h
.text:004054B0
.text:004054B0 ; =============== S U B R O U T I N E =======================================
.text:004054B0
.text:004054B0
.text:004054B0 ; int __cdecl sub_4054B0(int, int, char *Str, int, int, int, int, int)
.text:004054B0 sub_4054B0      proc near               ; CODE XREF: sub_406040+5A↓p
.text:004054B0                                         ; .text:0040612A↓p ...
.text:004054B0
.text:004054B0 Str1            = dword ptr -5Ch
.text:004054B0 Str2            = dword ptr -58h
.text:004054B0 MaxCount        = dword ptr -54h
.text:004054B0 var_50          = dword ptr -50h
.text:004054B0 var_4C          = dword ptr -4Ch
.text:004054B0 var_3C          = dword ptr -3Ch
.text:004054B0 var_38          = dword ptr -38h
.text:004054B0 var_34          = dword ptr -34h
.text:004054B0 var_30          = dword ptr -30h
.text:004054B0 var_2C          = dword ptr -2Ch
.text:004054B0 var_28          = dword ptr -28h
.text:004054B0 var_24          = dword ptr -24h
.text:004054B0 var_20          = dword ptr -20h
.text:004054B0 var_1C          = dword ptr -1Ch
.text:004054B0 var_18          = dword ptr -18h
.text:004054B0 var_14          = dword ptr -14h
.text:004054B0 arg_0           = dword ptr  4
.text:004054B0 arg_4           = dword ptr  8
.text:004054B0 Str             = dword ptr  0Ch
.text:004054B0 arg_C           = dword ptr  10h
.text:004054B0 arg_10          = dword ptr  14h
.text:004054B0 arg_14          = dword ptr  18h
.text:004054B0 arg_18          = dword ptr  1Ch
.text:004054B0 arg_1C          = dword ptr  20h
.text:004054B0
.text:004054B0                 push    ebp
.text:004054B1                 mov     eax, 0FFFFFFFFh
.text:004054B6                 push    edi
.text:004054B7                 push    esi
.text:004054B8                 push    ebx
.text:004054B9                 sub     esp, 4Ch
.text:004054BC                 mov     esi, [esp+5Ch+Str]
.text:004054C0                 mov     ebp, [esp+5Ch+arg_1C]
.text:004054C4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:004054C7                 mov     ebx, [ebp+4]
.text:004054CA                 setz    dl
.text:004054CD                 movzx   ecx, dl
.text:004054D0                 dec     ecx
.text:004054D1                 and     ecx, ebx
.text:004054D3                 mov     [esp+5Ch+var_14], ecx
.text:004054D7                 mov     ecx, [esp+5Ch+arg_0]
.text:004054DB                 test    ecx, ecx
.text:004054DD                 jle     loc_405607
.text:004054E3                 mov     dword ptr [ebp+0Ch], 0
.text:004054EA                 mov     ebx, [ebp+0]
.text:004054ED                 test    ebx, ebx
.text:004054EF                 jz      loc_406020
.text:004054F5                 mov     edi, [ebp+10h]
.text:004054F8                 test    edi, edi
.text:004054FA                 jnz     short loc_405553
.text:004054FC                 lea     esi, [esi+0]
.text:00405500
.text:00405500 loc_405500:                             ; CODE XREF: sub_4054B0+B7C↓j
.text:00405500                 mov     [ebp+24h], ebx
.text:00405503                 mov     esi, [esp+5Ch+Str]
.text:00405507                 mov     [ebp+20h], ebx
.text:0040550A                 mov     ecx, [esp+5Ch+arg_18]
.text:0040550E                 xor     ebx, ebx
.text:00405510                 mov     dword ptr [ebp+14h], 0
.text:00405517                 test    ecx, ecx
.text:00405519                 jz      loc_406000
.text:0040551F
.text:0040551F loc_40551F:                             ; CODE XREF: sub_4054B0+B64↓j
.text:0040551F                 mov     ebx, 1
.text:00405524
.text:00405524 loc_405524:                             ; CODE XREF: sub_4054B0+B5E↓j
.text:00405524                 mov     [ebp+1Ch], ebx
.text:00405527                 mov     ecx, [esp+5Ch+Str]
.text:0040552B                 movzx   eax, byte ptr [ecx]
.text:0040552E                 cmp     al, 2Dh ; '-'
.text:00405530                 jz      loc_405FF0
.text:00405536                 cmp     al, 2Bh ; '+'
.text:00405538                 jz      loc_405FD9
.text:0040553E                 xor     edx, edx
.text:00405540                 test    ebx, ebx
.text:00405542                 setz    dl
.text:00405545                 mov     [ebp+18h], edx
.text:00405548
.text:00405548 loc_405548:                             ; CODE XREF: sub_4054B0+B35↓j
.text:00405548                 mov     [esp+5Ch+Str], esi
.text:0040554C                 mov     dword ptr [ebp+10h], 1
.text:00405553
.text:00405553 loc_405553:                             ; CODE XREF: sub_4054B0+4A↑j
.text:00405553                 mov     eax, [ebp+14h]
.text:00405556                 test    eax, eax
.text:00405558                 jz      short loc_405563
.text:0040555A                 cmp     byte ptr [eax], 0
.text:0040555D                 jnz     loc_405640
.text:00405563
.text:00405563 loc_405563:                             ; CODE XREF: sub_4054B0+A8↑j
.text:00405563                 mov     ebx, [ebp+0]
.text:00405566                 cmp     [ebp+24h], ebx
.text:00405569                 jle     short loc_40556E
.text:0040556B                 mov     [ebp+24h], ebx
.text:0040556E
.text:0040556E loc_40556E:                             ; CODE XREF: sub_4054B0+B9↑j
.text:0040556E                 cmp     [ebp+20h], ebx
.text:00405571                 jle     short loc_405576
.text:00405573                 mov     [ebp+20h], ebx
.text:00405576
.text:00405576 loc_405576:                             ; CODE XREF: sub_4054B0+C1↑j
.text:00405576                 cmp     dword ptr [ebp+18h], 1
.text:0040557A                 jz      loc_405F50
.text:00405580
.text:00405580 loc_405580:                             ; CODE XREF: sub_4054B0+B13↓j
.text:00405580                 cmp     ebx, [esp+5Ch+arg_0]
.text:00405584                 jz      loc_405F34
.text:0040558A                 cld
.text:0040558B                 mov     ecx, [esp+5Ch+arg_4]
.text:0040558F                 mov     edx, 3
.text:00405594                 mov     edi, offset dword_405260
.text:00405599                 mov     esi, [ecx+ebx*4]
.text:0040559C                 mov     ecx, edx
.text:0040559E                 repe cmpsb
.text:004055A0                 jnz     short loc_4055DC
.text:004055A2                 mov     edx, [ebp+24h]
.text:004055A5                 lea     eax, [ebx+1]
.text:004055A8                 cmp     [ebp+20h], edx
.text:004055AB                 mov     [ebp+0], eax
.text:004055AE                 jz      loc_405F48
.text:004055B4                 cmp     edx, eax
.text:004055B6                 jz      short loc_4055D0
.text:004055B8                 mov     [esp+5Ch+Str2], ebp
.text:004055BC                 mov     ebx, [esp+5Ch+arg_4]
.text:004055C0                 mov     [esp+5Ch+Str1], ebx
.text:004055C3                 call    sub_406160
.text:004055C8                 nop
.text:004055C9                 lea     esi, [esi+0]
.text:004055D0
.text:004055D0 loc_4055D0:                             ; CODE XREF: sub_4054B0+106↑j
.text:004055D0                                         ; sub_4054B0+A9B↓j
.text:004055D0                 mov     eax, [esp+5Ch+arg_0]
.text:004055D4                 mov     ebx, eax
.text:004055D6                 mov     [ebp+24h], eax
.text:004055D9                 mov     [ebp+0], eax
.text:004055DC
.text:004055DC loc_4055DC:                             ; CODE XREF: sub_4054B0+F0↑j
.text:004055DC                 cmp     ebx, [esp+5Ch+arg_0]
.text:004055E0                 jz      loc_405F34
.text:004055E6                 mov     esi, [esp+5Ch+arg_4]
.text:004055EA                 mov     eax, [esi+ebx*4]
.text:004055ED                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004055F0                 jz      short loc_405617
.text:004055F2
.text:004055F2 loc_4055F2:                             ; CODE XREF: sub_4054B0+16D↓j
.text:004055F2                 mov     edx, [ebp+18h]
.text:004055F5                 test    edx, edx
.text:004055F7                 jz      short loc_405610
.text:004055F9                 mov     [ebp+0Ch], eax
.text:004055FC                 lea     edi, [ebx+1]
.text:004055FF                 mov     eax, 1
.text:00405604                 mov     [ebp+0], edi
.text:00405607
.text:00405607 loc_405607:                             ; CODE XREF: sub_4054B0+2D↑j
.text:00405607                                         ; sub_4054B0+165↓j ...
.text:00405607                 add     esp, 4Ch
.text:0040560A                 pop     ebx
.text:0040560B                 pop     esi
.text:0040560C                 pop     edi
.text:0040560D                 pop     ebp
.text:0040560E                 retn
.text:0040560E ; ---------------------------------------------------------------------------
.text:0040560F                 align 10h
.text:00405610
.text:00405610 loc_405610:                             ; CODE XREF: sub_4054B0+147↑j
.text:00405610                                         ; sub_4054B0+A8A↓j ...
.text:00405610                 mov     eax, 0FFFFFFFFh
.text:00405615                 jmp     short loc_405607
.text:00405617 ; ---------------------------------------------------------------------------
.text:00405617
.text:00405617 loc_405617:                             ; CODE XREF: sub_4054B0+140↑j
.text:00405617                 movzx   edx, byte ptr [eax+1]
.text:0040561B                 test    dl, dl
.text:0040561D                 jz      short loc_4055F2
.text:0040561F                 mov     ebx, [esp+5Ch+arg_C]
.text:00405623                 xor     ecx, ecx
.text:00405625                 test    ebx, ebx
.text:00405627                 jz      short loc_405632
.text:00405629                 cmp     dl, 2Dh ; '-'
.text:0040562C                 jz      loc_405F2A
.text:00405632
.text:00405632 loc_405632:                             ; CODE XREF: sub_4054B0+177↑j
.text:00405632                                         ; sub_4054B0+A7F↓j
.text:00405632                 lea     esi, [ecx+eax+1]
.text:00405636                 mov     [ebp+14h], esi
.text:00405639                 lea     esi, [esi+0]
.text:00405640
.text:00405640 loc_405640:                             ; CODE XREF: sub_4054B0+AD↑j
.text:00405640                 mov     ecx, [esp+5Ch+arg_C]
.text:00405644                 test    ecx, ecx
.text:00405646                 jz      loc_4059D0
.text:0040564C                 mov     edx, [ebp+0]
.text:0040564F                 mov     edi, [esp+5Ch+arg_4]
.text:00405653                 mov     eax, [edi+edx*4]
.text:00405656                 movzx   edx, byte ptr [eax+1]
.text:0040565A                 cmp     dl, 2Dh ; '-'
.text:0040565D                 jz      short loc_405675
.text:0040565F                 mov     ebx, [esp+5Ch+arg_14]
.text:00405663                 test    ebx, ebx
.text:00405665                 jz      loc_4059D0
.text:0040566B                 cmp     byte ptr [eax+2], 0
.text:0040566F                 jz      loc_405F0A
.text:00405675
.text:00405675 loc_405675:                             ; CODE XREF: sub_4054B0+1AD↑j
.text:00405675                                         ; sub_4054B0+A75↓j
.text:00405675                 mov     [esp+5Ch+var_18], 0
.text:0040567D                 mov     ecx, [ebp+14h]
.text:00405680                 mov     [esp+5Ch+var_1C], 0
.text:00405688                 mov     [esp+5Ch+var_20], 0
.text:00405690                 mov     edi, ecx
.text:00405692                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:0040569A                 movzx   eax, byte ptr [ecx]
.text:0040569D                 test    al, al
.text:0040569F                 jz      short loc_4056BC
.text:004056A1                 cmp     al, 3Dh ; '='
.text:004056A3                 jz      short loc_4056BC
.text:004056A5                 lea     esi, [esi+0]
.text:004056A9                 lea     edi, [edi+0]
.text:004056B0
.text:004056B0 loc_4056B0:                             ; CODE XREF: sub_4054B0+20A↓j
.text:004056B0                 inc     edi
.text:004056B1                 movzx   eax, byte ptr [edi]
.text:004056B4                 test    al, al
.text:004056B6                 jz      short loc_4056BC
.text:004056B8                 cmp     al, 3Dh ; '='
.text:004056BA                 jnz     short loc_4056B0
.text:004056BC
.text:004056BC loc_4056BC:                             ; CODE XREF: sub_4054B0+1EF↑j
.text:004056BC                                         ; sub_4054B0+1F3↑j ...
.text:004056BC                 mov     [esp+5Ch+var_28], 0
.text:004056C4                 mov     esi, [esp+5Ch+arg_C]
.text:004056C8                 mov     ebx, [esi]
.text:004056CA                 test    ebx, ebx
.text:004056CC                 mov     edx, ebx
.text:004056CE                 jz      loc_4058F0
.text:004056D4                 lea     esi, [esi+0]
.text:004056DA                 lea     edi, [edi+0]
.text:004056E0
.text:004056E0 loc_4056E0:                             ; CODE XREF: sub_4054B0+25E↓j
.text:004056E0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:004056E4                 mov     ebx, edi
.text:004056E6                 sub     ebx, ecx
.text:004056E8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:004056EC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:004056EF                 call    strncmp
.text:004056F4                 test    eax, eax
.text:004056F6                 jz      loc_405E86
.text:004056FC
.text:004056FC loc_4056FC:                             ; CODE XREF: sub_4054B0+A0F↓j
.text:004056FC                                         ; sub_4054B0+A24↓j ...
.text:004056FC                 inc     [esp+5Ch+var_28]
.text:00405700                 add     esi, 10h
.text:00405703                 mov     ecx, [esi]
.text:00405705                 test    ecx, ecx
.text:00405707                 mov     edx, ecx
.text:00405709                 jz      short loc_405710
.text:0040570B                 mov     ecx, [ebp+14h]
.text:0040570E                 jmp     short loc_4056E0
.text:00405710 ; ---------------------------------------------------------------------------
.text:00405710
.text:00405710 loc_405710:                             ; CODE XREF: sub_4054B0+259↑j
.text:00405710                                         ; sub_4054B0+A55↓j
.text:00405710                 mov     esi, [esp+5Ch+var_20]
.text:00405714                 test    esi, esi
.text:00405716                 jz      short loc_405724
.text:00405718                 mov     edx, [esp+5Ch+var_1C]
.text:0040571C                 test    edx, edx
.text:0040571E                 jz      loc_405E30
.text:00405724
.text:00405724 loc_405724:                             ; CODE XREF: sub_4054B0+266↑j
.text:00405724                 mov     eax, [esp+5Ch+var_18]
.text:00405728                 test    eax, eax
.text:0040572A                 jz      loc_4058F0
.text:00405730                 mov     ecx, [ebp+0]
.text:00405733                 lea     eax, [ecx+1]
.text:00405736                 mov     [ebp+0], eax
.text:00405739                 cmp     byte ptr [edi], 0
.text:0040573C                 jz      loc_405850
.text:00405742                 mov     ecx, [esp+5Ch+var_18]
.text:00405746                 mov     esi, [ecx+4]
.text:00405749                 test    esi, esi
.text:0040574B                 jz      short loc_405796
.text:0040574D                 lea     ebx, [edi+1]
.text:00405750                 mov     [ebp+0Ch], ebx
.text:00405753
.text:00405753 loc_405753:                             ; CODE XREF: sub_4054B0+3A8↓j
.text:00405753                                         ; sub_4054B0+3C4↓j
.text:00405753                 mov     ebx, [ebp+14h]
.text:00405756                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00405759                 call    strlen
.text:0040575E                 add     [ebp+14h], eax
.text:00405761                 mov     esi, [esp+5Ch+arg_10]
.text:00405765                 test    esi, esi
.text:00405767                 jz      short loc_405773
.text:00405769                 mov     ebp, [esp+5Ch+var_24]
.text:0040576D                 mov     ecx, [esp+5Ch+arg_10]
.text:00405771                 mov     [ecx], ebp
.text:00405773
.text:00405773 loc_405773:                             ; CODE XREF: sub_4054B0+2B7↑j
.text:00405773                 mov     eax, [esp+5Ch+var_18]
.text:00405777                 mov     ecx, [eax+8]
.text:0040577A                 test    ecx, ecx
.text:0040577C                 jnz     short loc_40578A
.text:0040577E                 mov     ecx, [esp+5Ch+var_18]
.text:00405782
.text:00405782 loc_405782:                             ; CODE XREF: sub_4054B0+723↓j
.text:00405782                 mov     eax, [ecx+0Ch]
.text:00405785                 jmp     loc_405607
.text:0040578A ; ---------------------------------------------------------------------------
.text:0040578A
.text:0040578A loc_40578A:                             ; CODE XREF: sub_4054B0+2CC↑j
.text:0040578A                                         ; sub_4054B0+719↓j
.text:0040578A                 mov     esi, [eax+0Ch]
.text:0040578D                 xor     eax, eax
.text:0040578F                 mov     [ecx], esi
.text:00405791                 jmp     loc_405607
.text:00405796 ; ---------------------------------------------------------------------------
.text:00405796
.text:00405796 loc_405796:                             ; CODE XREF: sub_4054B0+29B↑j
.text:00405796                 mov     edi, [esp+5Ch+var_14]
.text:0040579A                 test    edi, edi
.text:0040579C                 jz      short loc_4057F0
.text:0040579E                 mov     esi, [esp+5Ch+arg_4]
.text:004057A2                 mov     edx, [esi+eax*4-4]
.text:004057A6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:004057AA                 jz      short loc_405812
.text:004057AC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:004057B3                 call    ds:libintl_gettext
.text:004057B9                 mov     edx, [esp+5Ch+var_18]
.text:004057BD                 mov     edi, [edx]
.text:004057BF                 mov     [esp+5Ch+var_4C], edi
.text:004057C3                 mov     ebx, [ebp+0]
.text:004057C6                 mov     edi, [esp+5Ch+arg_4]
.text:004057CA                 mov     ecx, [edi+ebx*4-4]
.text:004057CE                 movsx   esi, byte ptr [ecx]
.text:004057D1                 mov     ecx, ds:_iob
.text:004057D7                 add     ecx, 40h ; '@'
.text:004057DA                 mov     [esp+5Ch+var_50], esi
.text:004057DE                 mov     ebx, [edi]
.text:004057E0                 mov     [esp+5Ch+Str2], eax ; Format
.text:004057E4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004057E7                 mov     [esp+5Ch+MaxCount], ebx
.text:004057EB                 call    fprintf
.text:004057F0
.text:004057F0 loc_4057F0:                             ; CODE XREF: sub_4054B0+2EC↑j
.text:004057F0                                         ; sub_4054B0+398↓j
.text:004057F0                 mov     ecx, [ebp+14h]
.text:004057F3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004057F6                 call    strlen
.text:004057FB                 add     [ebp+14h], eax
.text:004057FE                 mov     eax, [esp+5Ch+var_18]
.text:00405802                 mov     esi, [eax+0Ch]
.text:00405805                 mov     [ebp+8], esi
.text:00405808
.text:00405808 loc_405808:                             ; CODE XREF: sub_4054B0+4E5↓j
.text:00405808                                         ; sub_4054B0+73E↓j ...
.text:00405808                 mov     eax, 3Fh ; '?'
.text:0040580D                 jmp     loc_405607
.text:00405812 ; ---------------------------------------------------------------------------
.text:00405812
.text:00405812 loc_405812:                             ; CODE XREF: sub_4054B0+2FA↑j
.text:00405812                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00405819                 call    ds:libintl_gettext
.text:0040581F                 mov     edx, [esp+5Ch+var_18]
.text:00405823                 mov     edi, [esp+5Ch+arg_4]
.text:00405827                 mov     ecx, ds:_iob
.text:0040582D                 mov     esi, [edx]
.text:0040582F                 add     ecx, 40h ; '@'
.text:00405832                 mov     [esp+5Ch+var_50], esi
.text:00405836                 mov     ebx, [edi]
.text:00405838                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040583C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040583F                 mov     [esp+5Ch+MaxCount], ebx
.text:00405843                 call    fprintf
.text:00405848                 jmp     short loc_4057F0
.text:00405848 ; ---------------------------------------------------------------------------
.text:0040584A                 align 10h
.text:00405850
.text:00405850 loc_405850:                             ; CODE XREF: sub_4054B0+28C↑j
.text:00405850                 mov     ebx, [esp+5Ch+var_18]
.text:00405854                 cmp     dword ptr [ebx+4], 1
.text:00405858                 jnz     loc_405753
.text:0040585E                 cmp     eax, [esp+5Ch+arg_0]
.text:00405862                 jge     short loc_405879
.text:00405864                 mov     ebx, [esp+5Ch+arg_4]
.text:00405868                 lea     edi, [ecx+2]
.text:0040586B                 mov     [ebp+0], edi
.text:0040586E                 mov     esi, [ebx+eax*4]
.text:00405871                 mov     [ebp+0Ch], esi
.text:00405874                 jmp     loc_405753
.text:00405879 ; ---------------------------------------------------------------------------
.text:00405879
.text:00405879 loc_405879:                             ; CODE XREF: sub_4054B0+3B2↑j
.text:00405879                 mov     edx, [esp+5Ch+var_14]
.text:0040587D                 test    edx, edx
.text:0040587F                 jnz     short loc_4058B0
.text:00405881
.text:00405881 loc_405881:                             ; CODE XREF: sub_4054B0+437↓j
.text:00405881                 mov     edx, [ebp+14h]
.text:00405884                 mov     [esp+5Ch+Str1], edx ; Str
.text:00405887                 call    strlen
.text:0040588C                 add     [ebp+14h], eax
.text:0040588F                 mov     eax, [esp+5Ch+var_18]
.text:00405893                 mov     edi, [eax+0Ch]
.text:00405896                 mov     [ebp+8], edi
.text:00405899
.text:00405899 loc_405899:                             ; CODE XREF: sub_4054B0+7C2↓j
.text:00405899                 mov     ebp, [esp+5Ch+Str]
.text:0040589D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004058A1                 setnz   bl
.text:004058A4                 movzx   esi, bl
.text:004058A7                 lea     eax, [esi+esi*4+3Ah]
.text:004058AB                 jmp     loc_405607
.text:004058B0 ; ---------------------------------------------------------------------------
.text:004058B0
.text:004058B0 loc_4058B0:                             ; CODE XREF: sub_4054B0+3CF↑j
.text:004058B0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004058B7                 call    ds:libintl_gettext
.text:004058BD                 mov     ecx, [ebp+0]
.text:004058C0                 mov     esi, [esp+5Ch+arg_4]
.text:004058C4                 mov     ebx, [esi+ecx*4-4]
.text:004058C8                 mov     ecx, ds:_iob
.text:004058CE                 mov     [esp+5Ch+var_50], ebx
.text:004058D2                 mov     edi, [esi]
.text:004058D4                 add     ecx, 40h ; '@'
.text:004058D7                 mov     [esp+5Ch+Str2], eax ; Format
.text:004058DB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004058DE                 mov     [esp+5Ch+MaxCount], edi
.text:004058E2                 call    fprintf
.text:004058E7                 jmp     short loc_405881
.text:004058E7 ; ---------------------------------------------------------------------------
.text:004058E9                 align 10h
.text:004058F0
.text:004058F0 loc_4058F0:                             ; CODE XREF: sub_4054B0+21E↑j
.text:004058F0                                         ; sub_4054B0+27A↑j
.text:004058F0                 mov     eax, [esp+5Ch+arg_14]
.text:004058F4                 test    eax, eax
.text:004058F6                 jz      short loc_405926
.text:004058F8                 mov     ebx, [ebp+0]
.text:004058FB                 mov     esi, [esp+5Ch+arg_4]
.text:004058FF                 mov     edi, [esi+ebx*4]
.text:00405902                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00405906                 jz      short loc_405929
.text:00405908                 mov     ecx, [ebp+14h]
.text:0040590B                 mov     edx, [esp+5Ch+Str]
.text:0040590F                 movsx   ebx, byte ptr [ecx]
.text:00405912                 mov     [esp+5Ch+Str1], edx ; Str
.text:00405915                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00405919                 call    strchr
.text:0040591E                 test    eax, eax
.text:00405920                 jnz     loc_4059D0
.text:00405926
.text:00405926 loc_405926:                             ; CODE XREF: sub_4054B0+446↑j
.text:00405926                 mov     ebx, [ebp+0]
.text:00405929
.text:00405929 loc_405929:                             ; CODE XREF: sub_4054B0+456↑j
.text:00405929                 mov     eax, [esp+5Ch+var_14]
.text:0040592D                 test    eax, eax
.text:0040592F                 jz      short loc_405981
.text:00405931                 mov     esi, [esp+5Ch+arg_4]
.text:00405935                 mov     edi, [esi+ebx*4]
.text:00405938                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040593C                 jz      short loc_40599A
.text:0040593E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00405945                 call    ds:libintl_gettext
.text:0040594B                 mov     edi, [ebp+14h]
.text:0040594E                 mov     [esp+5Ch+var_4C], edi
.text:00405952                 mov     ebx, [ebp+0]
.text:00405955                 mov     edi, [esp+5Ch+arg_4]
.text:00405959                 mov     esi, [edi+ebx*4]
.text:0040595C                 movsx   ecx, byte ptr [esi]
.text:0040595F                 mov     esi, ds:_iob
.text:00405965                 add     esi, 40h ; '@'
.text:00405968                 mov     [esp+5Ch+var_50], ecx
.text:0040596C                 mov     ebx, [edi]
.text:0040596E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405972                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00405975                 mov     [esp+5Ch+MaxCount], ebx
.text:00405979                 call    fprintf
.text:0040597E
.text:0040597E loc_40597E:                             ; CODE XREF: sub_4054B0+51D↓j
.text:0040597E                 mov     ebx, [ebp+0]
.text:00405981
.text:00405981 loc_405981:                             ; CODE XREF: sub_4054B0+47F↑j
.text:00405981                 mov     dword ptr [ebp+14h], offset dword_405360
.text:00405988                 lea     edx, [ebx+1]
.text:0040598B                 mov     [ebp+0], edx
.text:0040598E
.text:0040598E loc_40598E:                             ; CODE XREF: sub_4054B0+999↓j
.text:0040598E                 mov     dword ptr [ebp+8], 0
.text:00405995                 jmp     loc_405808
.text:0040599A ; ---------------------------------------------------------------------------
.text:0040599A
.text:0040599A loc_40599A:                             ; CODE XREF: sub_4054B0+48C↑j
.text:0040599A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:004059A1                 call    ds:libintl_gettext
.text:004059A7                 mov     ecx, [ebp+14h]
.text:004059AA                 mov     edi, [esp+5Ch+arg_4]
.text:004059AE                 mov     edx, ds:_iob
.text:004059B4                 mov     [esp+5Ch+var_50], ecx
.text:004059B8                 mov     ebx, [edi]
.text:004059BA                 add     edx, 40h ; '@'
.text:004059BD                 mov     [esp+5Ch+Str2], eax ; Format
.text:004059C1                 mov     [esp+5Ch+MaxCount], ebx
.text:004059C5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004059C8                 call    fprintf
.text:004059CD                 jmp     short loc_40597E
.text:004059CD ; ---------------------------------------------------------------------------
.text:004059CF                 align 10h
.text:004059D0
.text:004059D0 loc_4059D0:                             ; CODE XREF: sub_4054B0+196↑j
.text:004059D0                                         ; sub_4054B0+1B5↑j ...
.text:004059D0                 mov     esi, [ebp+14h]
.text:004059D3                 movzx   ebx, byte ptr [esi]
.text:004059D6                 inc     esi
.text:004059D7                 mov     [ebp+14h], esi
.text:004059DA                 mov     ecx, [esp+5Ch+Str]
.text:004059DE                 movsx   esi, bl
.text:004059E1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004059E5                 mov     edi, esi
.text:004059E7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004059EA                 call    strchr
.text:004059EF                 mov     ecx, [ebp+14h]
.text:004059F2                 cmp     byte ptr [ecx], 0
.text:004059F5                 jnz     short loc_4059FA
.text:004059F7                 inc     dword ptr [ebp+0]
.text:004059FA
.text:004059FA loc_4059FA:                             ; CODE XREF: sub_4054B0+545↑j
.text:004059FA                 test    eax, eax
.text:004059FC                 jz      loc_405DE0
.text:00405A02                 cmp     bl, 3Ah ; ':'
.text:00405A05                 jz      loc_405DE0
.text:00405A0B                 cmp     byte ptr [eax], 57h ; 'W'
.text:00405A0E                 jz      loc_405AC6
.text:00405A14                 movzx   edx, byte ptr [eax+1]
.text:00405A18
.text:00405A18 loc_405A18:                             ; CODE XREF: sub_4054B0+61D↓j
.text:00405A18                 cmp     dl, 3Ah ; ':'
.text:00405A1B                 jz      short loc_405A24
.text:00405A1D
.text:00405A1D loc_405A1D:                             ; CODE XREF: sub_4054B0+590↓j
.text:00405A1D                 mov     eax, esi
.text:00405A1F                 jmp     loc_405607
.text:00405A24 ; ---------------------------------------------------------------------------
.text:00405A24
.text:00405A24 loc_405A24:                             ; CODE XREF: sub_4054B0+56B↑j
.text:00405A24                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00405A28                 jz      loc_405AB1
.text:00405A2E                 cmp     byte ptr [ecx], 0
.text:00405A31                 jz      short loc_405A42
.text:00405A33
.text:00405A33 loc_405A33:                             ; CODE XREF: sub_4054B0+604↓j
.text:00405A33                 inc     dword ptr [ebp+0]
.text:00405A36                 mov     [ebp+0Ch], ecx
.text:00405A39
.text:00405A39 loc_405A39:                             ; CODE XREF: sub_4054B0+5AB↓j
.text:00405A39                                         ; sub_4054B0+5C6↓j ...
.text:00405A39                 mov     dword ptr [ebp+14h], 0
.text:00405A40                 jmp     short loc_405A1D
.text:00405A42 ; ---------------------------------------------------------------------------
.text:00405A42
.text:00405A42 loc_405A42:                             ; CODE XREF: sub_4054B0+581↑j
.text:00405A42                 mov     ecx, [ebp+0]
.text:00405A45                 cmp     ecx, [esp+5Ch+arg_0]
.text:00405A49                 jz      short loc_405A5D
.text:00405A4B                 mov     eax, [esp+5Ch+arg_4]
.text:00405A4F                 lea     edx, [ecx+1]
.text:00405A52                 mov     [ebp+0], edx
.text:00405A55                 mov     ebx, [eax+ecx*4]
.text:00405A58                 mov     [ebp+0Ch], ebx
.text:00405A5B                 jmp     short loc_405A39
.text:00405A5D ; ---------------------------------------------------------------------------
.text:00405A5D
.text:00405A5D loc_405A5D:                             ; CODE XREF: sub_4054B0+599↑j
.text:00405A5D                 mov     ecx, [esp+5Ch+var_14]
.text:00405A61                 test    ecx, ecx
.text:00405A63                 jnz     short loc_405A7F
.text:00405A65
.text:00405A65 loc_405A65:                             ; CODE XREF: sub_4054B0+5FF↓j
.text:00405A65                 mov     [ebp+8], edi
.text:00405A68                 mov     edi, [esp+5Ch+Str]
.text:00405A6C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00405A6F                 jz      short loc_405A78
.text:00405A71                 mov     esi, 3Fh ; '?'
.text:00405A76                 jmp     short loc_405A39
.text:00405A78 ; ---------------------------------------------------------------------------
.text:00405A78
.text:00405A78 loc_405A78:                             ; CODE XREF: sub_4054B0+5BF↑j
.text:00405A78                 mov     esi, 3Ah ; ':'
.text:00405A7D                 jmp     short loc_405A39
.text:00405A7F ; ---------------------------------------------------------------------------
.text:00405A7F
.text:00405A7F loc_405A7F:                             ; CODE XREF: sub_4054B0+5B3↑j
.text:00405A7F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00405A86                 call    ds:libintl_gettext
.text:00405A8C                 mov     [esp+5Ch+var_50], edi
.text:00405A90                 mov     ebx, [esp+5Ch+arg_4]
.text:00405A94                 mov     edx, ds:_iob
.text:00405A9A                 mov     esi, [ebx]
.text:00405A9C                 add     edx, 40h ; '@'
.text:00405A9F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405AA3                 mov     [esp+5Ch+MaxCount], esi
.text:00405AA7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00405AAA                 call    fprintf
.text:00405AAF                 jmp     short loc_405A65
.text:00405AB1 ; ---------------------------------------------------------------------------
.text:00405AB1
.text:00405AB1 loc_405AB1:                             ; CODE XREF: sub_4054B0+578↑j
.text:00405AB1                 cmp     byte ptr [ecx], 0
.text:00405AB4                 jnz     loc_405A33
.text:00405ABA                 mov     dword ptr [ebp+0Ch], 0
.text:00405AC1                 jmp     loc_405A39
.text:00405AC6 ; ---------------------------------------------------------------------------
.text:00405AC6
.text:00405AC6 loc_405AC6:                             ; CODE XREF: sub_4054B0+55E↑j
.text:00405AC6                 movzx   edx, byte ptr [eax+1]
.text:00405ACA                 cmp     dl, 3Bh ; ';'
.text:00405ACD                 jnz     loc_405A18
.text:00405AD3                 mov     [esp+5Ch+var_2C], 0
.text:00405ADB                 mov     [esp+5Ch+var_30], 0
.text:00405AE3                 mov     [esp+5Ch+var_34], 0
.text:00405AEB                 mov     [esp+5Ch+var_38], 0
.text:00405AF3                 cmp     byte ptr [ecx], 0
.text:00405AF6                 jz      loc_405D6B
.text:00405AFC                 inc     dword ptr [ebp+0]
.text:00405AFF                 mov     [ebp+0Ch], ecx
.text:00405B02
.text:00405B02 loc_405B02:                             ; CODE XREF: sub_4054B0+8D4↓j
.text:00405B02                 mov     edi, [ebp+0Ch]
.text:00405B05                 mov     [ebp+14h], edi
.text:00405B08                 movzx   eax, byte ptr [edi]
.text:00405B0B                 test    al, al
.text:00405B0D                 jz      short loc_405B1F
.text:00405B0F                 cmp     al, 3Dh ; '='
.text:00405B11                 jz      short loc_405B1F
.text:00405B13
.text:00405B13 loc_405B13:                             ; CODE XREF: sub_4054B0+66D↓j
.text:00405B13                 inc     edi
.text:00405B14                 movzx   eax, byte ptr [edi]
.text:00405B17                 test    al, al
.text:00405B19                 jz      short loc_405B1F
.text:00405B1B                 cmp     al, 3Dh ; '='
.text:00405B1D                 jnz     short loc_405B13
.text:00405B1F
.text:00405B1F loc_405B1F:                             ; CODE XREF: sub_4054B0+65D↑j
.text:00405B1F                                         ; sub_4054B0+661↑j ...
.text:00405B1F                 mov     [esp+5Ch+var_3C], 0
.text:00405B27                 mov     esi, [esp+5Ch+arg_C]
.text:00405B2B                 mov     eax, [esi]
.text:00405B2D                 test    eax, eax
.text:00405B2F                 jz      loc_405CB0
.text:00405B35                 mov     ecx, eax
.text:00405B37
.text:00405B37 loc_405B37:                             ; CODE XREF: sub_4054B0+6B3↓j
.text:00405B37                 mov     ebx, [ebp+14h]
.text:00405B3A                 mov     eax, edi
.text:00405B3C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:00405B3F                 sub     eax, ebx
.text:00405B41                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00405B45                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00405B49                 call    strncmp
.text:00405B4E                 test    eax, eax
.text:00405B50                 jz      loc_405D17
.text:00405B56
.text:00405B56 loc_405B56:                             ; CODE XREF: sub_4054B0+88C↓j
.text:00405B56                                         ; sub_4054B0+89D↓j
.text:00405B56                 inc     [esp+5Ch+var_3C]
.text:00405B5A                 add     esi, 10h
.text:00405B5D                 mov     edx, [esi]
.text:00405B5F                 test    edx, edx
.text:00405B61                 mov     ecx, edx
.text:00405B63                 jnz     short loc_405B37
.text:00405B65
.text:00405B65 loc_405B65:                             ; CODE XREF: sub_4054B0+8B6↓j
.text:00405B65                 mov     esi, [esp+5Ch+var_34]
.text:00405B69                 test    esi, esi
.text:00405B6B                 jz      short loc_405B79
.text:00405B6D                 mov     ebx, [esp+5Ch+var_30]
.text:00405B71                 test    ebx, ebx
.text:00405B73                 jz      loc_405CC1
.text:00405B79
.text:00405B79 loc_405B79:                             ; CODE XREF: sub_4054B0+6BB↑j
.text:00405B79                 mov     esi, [esp+5Ch+var_2C]
.text:00405B7D                 test    esi, esi
.text:00405B7F                 jz      loc_405CB0
.text:00405B85                 cmp     byte ptr [edi], 0
.text:00405B88                 jz      loc_405C30
.text:00405B8E                 mov     ecx, [esp+5Ch+var_2C]
.text:00405B92                 mov     ebx, [ecx+4]
.text:00405B95                 test    ebx, ebx
.text:00405B97                 jz      short loc_405BD8
.text:00405B99                 lea     edx, [edi+1]
.text:00405B9C                 mov     [ebp+0Ch], edx
.text:00405B9F
.text:00405B9F loc_405B9F:                             ; CODE XREF: sub_4054B0+788↓j
.text:00405B9F                                         ; sub_4054B0+7A7↓j
.text:00405B9F                 mov     edi, [ebp+14h]
.text:00405BA2                 mov     [esp+5Ch+Str1], edi ; Str
.text:00405BA5                 call    strlen
.text:00405BAA                 add     [ebp+14h], eax
.text:00405BAD                 mov     eax, [esp+5Ch+arg_10]
.text:00405BB1                 test    eax, eax
.text:00405BB3                 jz      short loc_405BC0
.text:00405BB5                 mov     edx, [esp+5Ch+var_38]
.text:00405BB9                 mov     ebp, [esp+5Ch+arg_10]
.text:00405BBD                 mov     [ebp+0], edx
.text:00405BC0
.text:00405BC0 loc_405BC0:                             ; CODE XREF: sub_4054B0+703↑j
.text:00405BC0                 mov     eax, [esp+5Ch+var_2C]
.text:00405BC4                 mov     ecx, [eax+8]
.text:00405BC7                 test    ecx, ecx
.text:00405BC9                 jnz     loc_40578A
.text:00405BCF                 mov     ecx, [esp+5Ch+var_2C]
.text:00405BD3                 jmp     loc_405782
.text:00405BD8 ; ---------------------------------------------------------------------------
.text:00405BD8
.text:00405BD8 loc_405BD8:                             ; CODE XREF: sub_4054B0+6E7↑j
.text:00405BD8                 mov     eax, [esp+5Ch+var_14]
.text:00405BDC                 test    eax, eax
.text:00405BDE                 jnz     short loc_405BF3
.text:00405BE0
.text:00405BE0 loc_405BE0:                             ; CODE XREF: sub_4054B0+779↓j
.text:00405BE0                 mov     ecx, [ebp+14h]
.text:00405BE3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00405BE6                 call    strlen
.text:00405BEB                 add     [ebp+14h], eax
.text:00405BEE                 jmp     loc_405808
.text:00405BF3 ; ---------------------------------------------------------------------------
.text:00405BF3
.text:00405BF3 loc_405BF3:                             ; CODE XREF: sub_4054B0+72E↑j
.text:00405BF3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:00405BFA                 call    ds:libintl_gettext
.text:00405C00                 mov     edx, [esp+5Ch+var_2C]
.text:00405C04                 mov     ebx, [esp+5Ch+arg_4]
.text:00405C08                 mov     edi, [edx]
.text:00405C0A                 mov     [esp+5Ch+var_50], edi
.text:00405C0E                 mov     edi, ds:_iob
.text:00405C14                 mov     esi, [ebx]
.text:00405C16                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405C1A                 add     edi, 40h ; '@'
.text:00405C1D                 mov     [esp+5Ch+MaxCount], esi
.text:00405C21                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00405C24                 call    fprintf
.text:00405C29                 jmp     short loc_405BE0
.text:00405C29 ; ---------------------------------------------------------------------------
.text:00405C2B                 align 10h
.text:00405C30
.text:00405C30 loc_405C30:                             ; CODE XREF: sub_4054B0+6D8↑j
.text:00405C30                 mov     esi, [esp+5Ch+var_2C]
.text:00405C34                 cmp     dword ptr [esi+4], 1
.text:00405C38                 jnz     loc_405B9F
.text:00405C3E                 mov     ecx, [ebp+0]
.text:00405C41                 cmp     ecx, [esp+5Ch+arg_0]
.text:00405C45                 jge     short loc_405C5C
.text:00405C47                 mov     eax, [esp+5Ch+arg_4]
.text:00405C4B                 lea     ebx, [ecx+1]
.text:00405C4E                 mov     [ebp+0], ebx
.text:00405C51                 mov     edi, [eax+ecx*4]
.text:00405C54                 mov     [ebp+0Ch], edi
.text:00405C57                 jmp     loc_405B9F
.text:00405C5C ; ---------------------------------------------------------------------------
.text:00405C5C
.text:00405C5C loc_405C5C:                             ; CODE XREF: sub_4054B0+795↑j
.text:00405C5C                 mov     edx, [esp+5Ch+var_14]
.text:00405C60                 test    edx, edx
.text:00405C62                 jnz     short loc_405C77
.text:00405C64
.text:00405C64 loc_405C64:                             ; CODE XREF: sub_4054B0+7FE↓j
.text:00405C64                 mov     edx, [ebp+14h]
.text:00405C67                 mov     [esp+5Ch+Str1], edx ; Str
.text:00405C6A                 call    strlen
.text:00405C6F                 add     [ebp+14h], eax
.text:00405C72                 jmp     loc_405899
.text:00405C77 ; ---------------------------------------------------------------------------
.text:00405C77
.text:00405C77 loc_405C77:                             ; CODE XREF: sub_4054B0+7B2↑j
.text:00405C77                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00405C7E                 call    ds:libintl_gettext
.text:00405C84                 mov     ecx, [ebp+0]
.text:00405C87                 mov     ebx, [esp+5Ch+arg_4]
.text:00405C8B                 mov     edi, [ebx+ecx*4-4]
.text:00405C8F                 mov     ecx, ds:_iob
.text:00405C95                 mov     [esp+5Ch+var_50], edi
.text:00405C99                 mov     esi, [ebx]
.text:00405C9B                 add     ecx, 40h ; '@'
.text:00405C9E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405CA2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00405CA5                 mov     [esp+5Ch+MaxCount], esi
.text:00405CA9                 call    fprintf
.text:00405CAE                 jmp     short loc_405C64
.text:00405CB0 ; ---------------------------------------------------------------------------
.text:00405CB0
.text:00405CB0 loc_405CB0:                             ; CODE XREF: sub_4054B0+67F↑j
.text:00405CB0                                         ; sub_4054B0+6CF↑j
.text:00405CB0                 mov     dword ptr [ebp+14h], 0
.text:00405CB7                 mov     eax, 57h ; 'W'
.text:00405CBC                 jmp     loc_405607
.text:00405CC1 ; ---------------------------------------------------------------------------
.text:00405CC1
.text:00405CC1 loc_405CC1:                             ; CODE XREF: sub_4054B0+6C3↑j
.text:00405CC1                 mov     edi, [esp+5Ch+var_14]
.text:00405CC5                 test    edi, edi
.text:00405CC7                 jnz     short loc_405CDF
.text:00405CC9
.text:00405CC9 loc_405CC9:                             ; CODE XREF: sub_4054B0+865↓j
.text:00405CC9                 mov     edx, [ebp+14h]
.text:00405CCC                 mov     [esp+5Ch+Str1], edx ; Str
.text:00405CCF                 call    strlen
.text:00405CD4                 add     [ebp+14h], eax
.text:00405CD7                 inc     dword ptr [ebp+0]
.text:00405CDA                 jmp     loc_405808
.text:00405CDF ; ---------------------------------------------------------------------------
.text:00405CDF
.text:00405CDF loc_405CDF:                             ; CODE XREF: sub_4054B0+817↑j
.text:00405CDF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00405CE6                 call    ds:libintl_gettext
.text:00405CEC                 mov     ecx, [ebp+0]
.text:00405CEF                 mov     ebx, [esp+5Ch+arg_4]
.text:00405CF3                 mov     edi, [ebx+ecx*4]
.text:00405CF6                 mov     ecx, ds:_iob
.text:00405CFC                 mov     [esp+5Ch+var_50], edi
.text:00405D00                 mov     esi, [ebx]
.text:00405D02                 add     ecx, 40h ; '@'
.text:00405D05                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405D09                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00405D0C                 mov     [esp+5Ch+MaxCount], esi
.text:00405D10                 call    fprintf
.text:00405D15                 jmp     short loc_405CC9
.text:00405D17 ; ---------------------------------------------------------------------------
.text:00405D17
.text:00405D17 loc_405D17:                             ; CODE XREF: sub_4054B0+6A0↑j
.text:00405D17                 mov     edx, [ebp+14h]
.text:00405D1A                 mov     ebx, edi
.text:00405D1C                 mov     ecx, [esi]
.text:00405D1E                 sub     ebx, edx
.text:00405D20                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00405D23                 call    strlen
.text:00405D28                 cmp     ebx, eax
.text:00405D2A                 jz      short loc_405D52
.text:00405D2C                 mov     ebx, [esp+5Ch+var_2C]
.text:00405D30                 test    ebx, ebx
.text:00405D32                 jz      short loc_405D41
.text:00405D34                 mov     [esp+5Ch+var_34], 1
.text:00405D3C                 jmp     loc_405B56
.text:00405D41 ; ---------------------------------------------------------------------------
.text:00405D41
.text:00405D41 loc_405D41:                             ; CODE XREF: sub_4054B0+882↑j
.text:00405D41                 mov     [esp+5Ch+var_2C], esi
.text:00405D45                 mov     ecx, [esp+5Ch+var_3C]
.text:00405D49                 mov     [esp+5Ch+var_38], ecx
.text:00405D4D                 jmp     loc_405B56
.text:00405D52 ; ---------------------------------------------------------------------------
.text:00405D52
.text:00405D52 loc_405D52:                             ; CODE XREF: sub_4054B0+87A↑j
.text:00405D52                 mov     [esp+5Ch+var_2C], esi
.text:00405D56                 mov     eax, [esp+5Ch+var_3C]
.text:00405D5A                 mov     [esp+5Ch+var_30], 1
.text:00405D62                 mov     [esp+5Ch+var_38], eax
.text:00405D66                 jmp     loc_405B65
.text:00405D6B ; ---------------------------------------------------------------------------
.text:00405D6B
.text:00405D6B loc_405D6B:                             ; CODE XREF: sub_4054B0+646↑j
.text:00405D6B                 mov     edx, [ebp+0]
.text:00405D6E                 cmp     edx, [esp+5Ch+arg_0]
.text:00405D72                 jz      short loc_405D89
.text:00405D74                 mov     ebx, [esp+5Ch+arg_4]
.text:00405D78                 lea     esi, [edx+1]
.text:00405D7B                 mov     [ebp+0], esi
.text:00405D7E                 mov     edi, [ebx+edx*4]
.text:00405D81                 mov     [ebp+0Ch], edi
.text:00405D84                 jmp     loc_405B02
.text:00405D89 ; ---------------------------------------------------------------------------
.text:00405D89
.text:00405D89 loc_405D89:                             ; CODE XREF: sub_4054B0+8C2↑j
.text:00405D89                 mov     edi, [esp+5Ch+var_14]
.text:00405D8D                 test    edi, edi
.text:00405D8F                 jnz     short loc_405DAC
.text:00405D91
.text:00405D91 loc_405D91:                             ; CODE XREF: sub_4054B0+92C↓j
.text:00405D91                 mov     [ebp+8], esi
.text:00405D94                 mov     ebp, [esp+5Ch+Str]
.text:00405D98                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00405D9C                 jz      short loc_405DA8
.text:00405D9E                 mov     bl, 3Fh ; '?'
.text:00405DA0
.text:00405DA0 loc_405DA0:                             ; CODE XREF: sub_4054B0+8FA↓j
.text:00405DA0                 movsx   eax, bl
.text:00405DA3                 jmp     loc_405607
.text:00405DA8 ; ---------------------------------------------------------------------------
.text:00405DA8
.text:00405DA8 loc_405DA8:                             ; CODE XREF: sub_4054B0+8EC↑j
.text:00405DA8                 mov     bl, 3Ah ; ':'
.text:00405DAA                 jmp     short loc_405DA0
.text:00405DAC ; ---------------------------------------------------------------------------
.text:00405DAC
.text:00405DAC loc_405DAC:                             ; CODE XREF: sub_4054B0+8DF↑j
.text:00405DAC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00405DB3                 call    ds:libintl_gettext
.text:00405DB9                 mov     [esp+5Ch+var_50], esi
.text:00405DBD                 mov     edx, [esp+5Ch+arg_4]
.text:00405DC1                 mov     ecx, ds:_iob
.text:00405DC7                 mov     ebx, [edx]
.text:00405DC9                 add     ecx, 40h ; '@'
.text:00405DCC                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405DD0                 mov     [esp+5Ch+MaxCount], ebx
.text:00405DD4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00405DD7                 call    fprintf
.text:00405DDC                 jmp     short loc_405D91
.text:00405DDC ; ---------------------------------------------------------------------------
.text:00405DDE                 align 10h
.text:00405DE0
.text:00405DE0 loc_405DE0:                             ; CODE XREF: sub_4054B0+54C↑j
.text:00405DE0                                         ; sub_4054B0+555↑j
.text:00405DE0                 mov     eax, [esp+5Ch+var_14]
.text:00405DE4                 test    eax, eax
.text:00405DE6                 jz      short loc_405E1F
.text:00405DE8                 mov     ebx, [ebp+1Ch]
.text:00405DEB                 test    ebx, ebx
.text:00405DED                 jz      short loc_405E27
.text:00405DEF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00405DF6
.text:00405DF6 loc_405DF6:                             ; CODE XREF: sub_4054B0+97E↓j
.text:00405DF6                 call    ds:libintl_gettext
.text:00405DFC                 mov     [esp+5Ch+var_50], esi
.text:00405E00                 mov     ebx, [esp+5Ch+arg_4]
.text:00405E04                 mov     edx, ds:_iob
.text:00405E0A                 mov     esi, [ebx]
.text:00405E0C                 add     edx, 40h ; '@'
.text:00405E0F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405E13                 mov     [esp+5Ch+MaxCount], esi
.text:00405E17                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00405E1A                 call    fprintf
.text:00405E1F
.text:00405E1F loc_405E1F:                             ; CODE XREF: sub_4054B0+936↑j
.text:00405E1F                 mov     [ebp+8], edi
.text:00405E22                 jmp     loc_405808
.text:00405E27 ; ---------------------------------------------------------------------------
.text:00405E27
.text:00405E27 loc_405E27:                             ; CODE XREF: sub_4054B0+93D↑j
.text:00405E27                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:00405E2E                 jmp     short loc_405DF6
.text:00405E30 ; ---------------------------------------------------------------------------
.text:00405E30
.text:00405E30 loc_405E30:                             ; CODE XREF: sub_4054B0+26E↑j
.text:00405E30                 mov     edi, [esp+5Ch+var_14]
.text:00405E34                 test    edi, edi
.text:00405E36                 jnz     short loc_405E4E
.text:00405E38
.text:00405E38 loc_405E38:                             ; CODE XREF: sub_4054B0+9D4↓j
.text:00405E38                 mov     edx, [ebp+14h]
.text:00405E3B                 mov     [esp+5Ch+Str1], edx ; Str
.text:00405E3E                 call    strlen
.text:00405E43                 add     [ebp+14h], eax
.text:00405E46                 inc     dword ptr [ebp+0]
.text:00405E49                 jmp     loc_40598E
.text:00405E4E ; ---------------------------------------------------------------------------
.text:00405E4E
.text:00405E4E loc_405E4E:                             ; CODE XREF: sub_4054B0+986↑j
.text:00405E4E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00405E55                 call    ds:libintl_gettext
.text:00405E5B                 mov     ebx, [ebp+0]
.text:00405E5E                 mov     edi, [esp+5Ch+arg_4]
.text:00405E62                 mov     ecx, [edi+ebx*4]
.text:00405E65                 mov     ebx, ds:_iob
.text:00405E6B                 mov     [esp+5Ch+var_50], ecx
.text:00405E6F                 mov     esi, [edi]
.text:00405E71                 add     ebx, 40h ; '@'
.text:00405E74                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405E78                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:00405E7B                 mov     [esp+5Ch+MaxCount], esi
.text:00405E7F                 call    fprintf
.text:00405E84                 jmp     short loc_405E38
.text:00405E86 ; ---------------------------------------------------------------------------
.text:00405E86
.text:00405E86 loc_405E86:                             ; CODE XREF: sub_4054B0+246↑j
.text:00405E86                 mov     ecx, [ebp+14h]
.text:00405E89                 mov     ebx, edi
.text:00405E8B                 mov     edx, [esi]
.text:00405E8D                 sub     ebx, ecx
.text:00405E8F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00405E92                 call    strlen
.text:00405E97                 cmp     ebx, eax
.text:00405E99                 jz      short loc_405EF1
.text:00405E9B                 mov     ebx, [esp+5Ch+var_18]
.text:00405E9F                 test    ebx, ebx
.text:00405EA1                 jz      short loc_405EE0
.text:00405EA3                 mov     edx, [esp+5Ch+arg_14]
.text:00405EA7                 test    edx, edx
.text:00405EA9                 jnz     short loc_405EB7
.text:00405EAB                 mov     ecx, [esp+5Ch+var_18]
.text:00405EAF                 mov     ebx, [esi+4]
.text:00405EB2                 cmp     [ecx+4], ebx
.text:00405EB5                 jz      short loc_405EC4
.text:00405EB7
.text:00405EB7 loc_405EB7:                             ; CODE XREF: sub_4054B0+9F9↑j
.text:00405EB7                                         ; sub_4054B0+A1A↓j ...
.text:00405EB7                 mov     [esp+5Ch+var_20], 1
.text:00405EBF                 jmp     loc_4056FC
.text:00405EC4 ; ---------------------------------------------------------------------------
.text:00405EC4
.text:00405EC4 loc_405EC4:                             ; CODE XREF: sub_4054B0+A05↑j
.text:00405EC4                 mov     edx, [esi+8]
.text:00405EC7                 cmp     [ecx+8], edx
.text:00405ECA                 jnz     short loc_405EB7
.text:00405ECC                 mov     ebx, [esi+0Ch]
.text:00405ECF                 cmp     [ecx+0Ch], ebx
.text:00405ED2                 jnz     short loc_405EB7
.text:00405ED4                 jmp     loc_4056FC
.text:00405ED4 ; ---------------------------------------------------------------------------
.text:00405ED9                 align 10h
.text:00405EE0
.text:00405EE0 loc_405EE0:                             ; CODE XREF: sub_4054B0+9F1↑j
.text:00405EE0                 mov     [esp+5Ch+var_18], esi
.text:00405EE4                 mov     eax, [esp+5Ch+var_28]
.text:00405EE8                 mov     [esp+5Ch+var_24], eax
.text:00405EEC                 jmp     loc_4056FC
.text:00405EF1 ; ---------------------------------------------------------------------------
.text:00405EF1
.text:00405EF1 loc_405EF1:                             ; CODE XREF: sub_4054B0+9E9↑j
.text:00405EF1                 mov     [esp+5Ch+var_18], esi
.text:00405EF5                 mov     ecx, [esp+5Ch+var_28]
.text:00405EF9                 mov     [esp+5Ch+var_1C], 1
.text:00405F01                 mov     [esp+5Ch+var_24], ecx
.text:00405F05                 jmp     loc_405710
.text:00405F0A ; ---------------------------------------------------------------------------
.text:00405F0A
.text:00405F0A loc_405F0A:                             ; CODE XREF: sub_4054B0+1BF↑j
.text:00405F0A                 mov     eax, [esp+5Ch+Str]
.text:00405F0E                 movsx   esi, dl
.text:00405F11                 mov     [esp+5Ch+Str2], esi ; Val
.text:00405F15                 mov     [esp+5Ch+Str1], eax ; Str
.text:00405F18                 call    strchr
.text:00405F1D                 test    eax, eax
.text:00405F1F                 jnz     loc_4059D0
.text:00405F25                 jmp     loc_405675
.text:00405F2A ; ---------------------------------------------------------------------------
.text:00405F2A
.text:00405F2A loc_405F2A:                             ; CODE XREF: sub_4054B0+17C↑j
.text:00405F2A                 mov     ecx, 1
.text:00405F2F                 jmp     loc_405632
.text:00405F34 ; ---------------------------------------------------------------------------
.text:00405F34
.text:00405F34 loc_405F34:                             ; CODE XREF: sub_4054B0+D4↑j
.text:00405F34                                         ; sub_4054B0+130↑j
.text:00405F34                 mov     eax, [ebp+20h]
.text:00405F37                 cmp     eax, [ebp+24h]
.text:00405F3A                 jz      loc_405610
.text:00405F40                 mov     [ebp+0], eax
.text:00405F43                 jmp     loc_405610
.text:00405F48 ; ---------------------------------------------------------------------------
.text:00405F48
.text:00405F48 loc_405F48:                             ; CODE XREF: sub_4054B0+FE↑j
.text:00405F48                 mov     [ebp+20h], eax
.text:00405F4B                 jmp     loc_4055D0
.text:00405F50 ; ---------------------------------------------------------------------------
.text:00405F50
.text:00405F50 loc_405F50:                             ; CODE XREF: sub_4054B0+CA↑j
.text:00405F50                 mov     edx, [ebp+20h]
.text:00405F53                 mov     eax, [ebp+24h]
.text:00405F56                 cmp     edx, eax
.text:00405F58                 jz      short loc_405FD0
.text:00405F5A                 cmp     eax, ebx
.text:00405F5C                 jz      short loc_405F71
.text:00405F5E                 mov     [esp+5Ch+Str2], ebp
.text:00405F62                 mov     ebx, [esp+5Ch+arg_4]
.text:00405F66                 mov     [esp+5Ch+Str1], ebx
.text:00405F69                 call    sub_406160
.text:00405F6E                 mov     ebx, [ebp+0]
.text:00405F71
.text:00405F71 loc_405F71:                             ; CODE XREF: sub_4054B0+AAC↑j
.text:00405F71                                         ; sub_4054B0+B22↓j ...
.text:00405F71                 cmp     ebx, [esp+5Ch+arg_0]
.text:00405F75                 jge     short loc_405FC0
.text:00405F77                 mov     esi, [esp+5Ch+arg_4]
.text:00405F7B                 mov     eax, [esi+ebx*4]
.text:00405F7E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00405F81                 jz      short loc_405FC8
.text:00405F83                 lea     esi, [esi+0]
.text:00405F89                 lea     edi, [edi+0]
.text:00405F90
.text:00405F90 loc_405F90:                             ; CODE XREF: sub_4054B0+AFC↓j
.text:00405F90                                         ; sub_4054B0+B1C↓j
.text:00405F90                 lea     eax, [ebx+1]
.text:00405F93                 mov     ebx, eax
.text:00405F95                 mov     [ebp+0], eax
.text:00405F98                 cmp     eax, [esp+5Ch+arg_0]
.text:00405F9C                 jge     short loc_405FC0
.text:00405F9E                 mov     edi, [esp+5Ch+arg_4]
.text:00405FA2                 mov     edx, [edi+eax*4]
.text:00405FA5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00405FA8                 jz      short loc_405FB0
.text:00405FAA
.text:00405FAA loc_405FAA:                             ; CODE XREF: sub_4054B0+B04↓j
.text:00405FAA                 mov     ebx, eax
.text:00405FAC                 jmp     short loc_405F90
.text:00405FAC ; ---------------------------------------------------------------------------
.text:00405FAE                 align 10h
.text:00405FB0
.text:00405FB0 loc_405FB0:                             ; CODE XREF: sub_4054B0+AF8↑j
.text:00405FB0                 cmp     byte ptr [edx+1], 0
.text:00405FB4                 jz      short loc_405FAA
.text:00405FB6                 lea     esi, [esi+0]
.text:00405FB9                 lea     edi, [edi+0]
.text:00405FC0
.text:00405FC0 loc_405FC0:                             ; CODE XREF: sub_4054B0+AC5↑j
.text:00405FC0                                         ; sub_4054B0+AEC↑j ...
.text:00405FC0                 mov     [ebp+24h], ebx
.text:00405FC3                 jmp     loc_405580
.text:00405FC8 ; ---------------------------------------------------------------------------
.text:00405FC8
.text:00405FC8 loc_405FC8:                             ; CODE XREF: sub_4054B0+AD1↑j
.text:00405FC8                 cmp     byte ptr [eax+1], 0
.text:00405FCC                 jz      short loc_405F90
.text:00405FCE                 jmp     short loc_405FC0
.text:00405FD0 ; ---------------------------------------------------------------------------
.text:00405FD0
.text:00405FD0 loc_405FD0:                             ; CODE XREF: sub_4054B0+AA8↑j
.text:00405FD0                 cmp     edx, ebx
.text:00405FD2                 jz      short loc_405F71
.text:00405FD4                 mov     [ebp+20h], ebx
.text:00405FD7                 jmp     short loc_405F71
.text:00405FD9 ; ---------------------------------------------------------------------------
.text:00405FD9
.text:00405FD9 loc_405FD9:                             ; CODE XREF: sub_4054B0+88↑j
.text:00405FD9                 mov     dword ptr [ebp+18h], 0
.text:00405FE0                 mov     esi, [esp+5Ch+Str]
.text:00405FE4
.text:00405FE4 loc_405FE4:                             ; CODE XREF: sub_4054B0+B49↓j
.text:00405FE4                 inc     esi
.text:00405FE5                 jmp     loc_405548
.text:00405FE5 ; ---------------------------------------------------------------------------
.text:00405FEA                 align 10h
.text:00405FF0
.text:00405FF0 loc_405FF0:                             ; CODE XREF: sub_4054B0+80↑j
.text:00405FF0                 mov     dword ptr [ebp+18h], 2
.text:00405FF7                 mov     esi, ecx
.text:00405FF9                 jmp     short loc_405FE4
.text:00405FF9 ; ---------------------------------------------------------------------------
.text:00405FFB                 align 10h
.text:00406000
.text:00406000 loc_406000:                             ; CODE XREF: sub_4054B0+69↑j
.text:00406000                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00406007                 call    getenv
.text:0040600C                 test    eax, eax
.text:0040600E                 jz      loc_405524
.text:00406014                 jmp     loc_40551F
.text:00406014 ; ---------------------------------------------------------------------------
.text:00406019                 align 10h
.text:00406020
.text:00406020 loc_406020:                             ; CODE XREF: sub_4054B0+3F↑j
.text:00406020                 mov     dword ptr [ebp+0], 1
.text:00406027                 mov     ebx, 1
.text:0040602C                 jmp     loc_405500
.text:0040602C sub_4054B0      endp
.text:0040602C
.text:00406031 ; ---------------------------------------------------------------------------
.text:00406031                 jmp     short sub_406040
.text:00406031 ; ---------------------------------------------------------------------------
.text:00406033                 align 10h
.text:00406040
.text:00406040 ; =============== S U B R O U T I N E =======================================
.text:00406040
.text:00406040
.text:00406040 ; int __cdecl sub_406040(int, int, char *, int, int, int, int)
.text:00406040 sub_406040      proc near               ; CODE XREF: .text:00406031↑j
.text:00406040                                         ; sub_406780+3A↓p ...
.text:00406040
.text:00406040 var_2C          = dword ptr -2Ch
.text:00406040 var_28          = dword ptr -28h
.text:00406040 Str             = dword ptr -24h
.text:00406040 var_20          = dword ptr -20h
.text:00406040 var_1C          = dword ptr -1Ch
.text:00406040 var_18          = dword ptr -18h
.text:00406040 var_14          = dword ptr -14h
.text:00406040 var_10          = dword ptr -10h
.text:00406040 arg_0           = dword ptr  4
.text:00406040 arg_4           = dword ptr  8
.text:00406040 arg_8           = dword ptr  0Ch
.text:00406040 arg_C           = dword ptr  10h
.text:00406040 arg_10          = dword ptr  14h
.text:00406040 arg_14          = dword ptr  18h
.text:00406040 arg_18          = dword ptr  1Ch
.text:00406040
.text:00406040                 sub     esp, 2Ch
.text:00406043                 mov     edx, dword_412010
.text:00406049                 mov     [esp+2Ch+var_10], offset dword_413050 ; int
.text:00406051                 mov     ecx, dword_412014
.text:00406057                 mov     ds:dword_413050, edx
.text:0040605D                 mov     edx, [esp+2Ch+arg_18]
.text:00406061                 mov     ds:dword_413054, ecx
.text:00406067                 mov     ecx, [esp+2Ch+arg_14]
.text:0040606B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040606F                 mov     edx, [esp+2Ch+arg_10]
.text:00406073                 mov     [esp+2Ch+var_18], ecx ; int
.text:00406077                 mov     ecx, [esp+2Ch+arg_C]
.text:0040607B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040607F                 mov     edx, [esp+2Ch+arg_8]
.text:00406083                 mov     [esp+2Ch+var_20], ecx ; int
.text:00406087                 mov     ecx, [esp+2Ch+arg_4]
.text:0040608B                 mov     [esp+2Ch+Str], edx ; Str
.text:0040608F                 mov     edx, [esp+2Ch+arg_0]
.text:00406093                 mov     [esp+2Ch+var_28], ecx ; int
.text:00406097                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040609A                 call    sub_4054B0
.text:0040609F                 mov     ecx, ds:dword_413050
.text:004060A5                 mov     dword_412010, ecx
.text:004060AB                 mov     ecx, ds:dword_41305C
.text:004060B1                 mov     ds:dword_413B20, ecx
.text:004060B7                 mov     ecx, ds:dword_413058
.text:004060BD                 mov     dword_412018, ecx
.text:004060C3                 add     esp, 2Ch
.text:004060C6                 retn
.text:004060C6 sub_406040      endp
.text:004060C6
.text:004060C6 ; ---------------------------------------------------------------------------
.text:004060C7                 align 10h
.text:004060D0                 sub     esp, 2Ch
.text:004060D3                 mov     edx, dword_412010
.text:004060D9                 mov     dword ptr [esp+1Ch], offset dword_413050
.text:004060E1                 mov     ecx, dword_412014
.text:004060E7                 mov     dword ptr [esp+18h], 1
.text:004060EF                 mov     ds:dword_413050, edx
.text:004060F5                 mov     edx, [esp+38h]
.text:004060F9                 mov     ds:dword_413054, ecx
.text:004060FF                 mov     ecx, [esp+34h]
.text:00406103                 mov     [esp+8], edx
.text:00406107                 mov     edx, [esp+30h]
.text:0040610B                 mov     [esp+4], ecx
.text:0040610F                 mov     dword ptr [esp+14h], 0
.text:00406117                 mov     dword ptr [esp+10h], 0
.text:0040611F                 mov     dword ptr [esp+0Ch], 0
.text:00406127                 mov     [esp], edx
.text:0040612A                 call    sub_4054B0
.text:0040612F                 mov     ecx, ds:dword_413050
.text:00406135                 mov     dword_412010, ecx
.text:0040613B                 mov     ecx, ds:dword_41305C
.text:00406141                 mov     ds:dword_413B20, ecx
.text:00406147                 mov     ecx, ds:dword_413058
.text:0040614D                 mov     dword_412018, ecx
.text:00406153                 add     esp, 2Ch
.text:00406156                 retn
.text:00406156 ; ---------------------------------------------------------------------------
.text:00406157                 align 10h
.text:00406160
.text:00406160 ; =============== S U B R O U T I N E =======================================
.text:00406160
.text:00406160
.text:00406160 sub_406160      proc near               ; CODE XREF: sub_4054B0+113↑p
.text:00406160                                         ; sub_4054B0+AB9↑p
.text:00406160
.text:00406160 var_2C          = dword ptr -2Ch
.text:00406160 var_28          = dword ptr -28h
.text:00406160 var_24          = dword ptr -24h
.text:00406160 var_20          = dword ptr -20h
.text:00406160 var_1C          = dword ptr -1Ch
.text:00406160 var_18          = dword ptr -18h
.text:00406160 var_14          = dword ptr -14h
.text:00406160 arg_0           = dword ptr  4
.text:00406160 arg_4           = dword ptr  8
.text:00406160
.text:00406160                 push    ebp
.text:00406161                 push    edi
.text:00406162                 push    esi
.text:00406163                 push    ebx
.text:00406164                 sub     esp, 1Ch
.text:00406167                 mov     ecx, [esp+2Ch+arg_4]
.text:0040616B                 mov     eax, [esp+2Ch+arg_4]
.text:0040616F                 mov     ebx, [esp+2Ch+arg_4]
.text:00406173                 mov     edx, [ecx+20h]
.text:00406176                 mov     edi, [esp+2Ch+arg_0]
.text:0040617A                 mov     ecx, [ebx]
.text:0040617C                 mov     [esp+2Ch+var_2C], edx
.text:0040617F                 mov     [esp+2Ch+var_14], edx
.text:00406183                 mov     edx, [eax+24h]
.text:00406186                 mov     [esp+2Ch+var_28], ecx
.text:0040618A                 mov     [esp+2Ch+var_1C], ecx
.text:0040618E                 cmp     ecx, edx
.text:00406190                 mov     [esp+2Ch+var_18], edx
.text:00406194                 jle     short loc_406210
.text:00406196                 mov     esi, [esp+2Ch+var_2C]
.text:00406199                 cmp     edx, esi
.text:0040619B                 jle     short loc_406210
.text:0040619D                 lea     esi, [esi+0]
.text:004061A0
.text:004061A0 loc_4061A0:                             ; CODE XREF: sub_406160+A1↓j
.text:004061A0                 mov     ebx, [esp+2Ch+var_1C]
.text:004061A4                 mov     edx, [esp+2Ch+var_18]
.text:004061A8                 mov     ebp, [esp+2Ch+var_18]
.text:004061AC                 mov     eax, [esp+2Ch+var_14]
.text:004061B0                 sub     ebx, edx
.text:004061B2                 mov     [esp+2Ch+var_20], ebx
.text:004061B6                 sub     ebp, eax
.text:004061B8                 cmp     ebx, ebp
.text:004061BA                 jle     short loc_406235
.text:004061BC                 xor     esi, esi
.text:004061BE                 cmp     esi, ebp
.text:004061C0                 jge     short loc_4061ED
.text:004061C2                 mov     ecx, [esp+2Ch+var_1C]
.text:004061C6                 sub     ecx, ebp
.text:004061C8                 mov     [esp+2Ch+var_24], ecx
.text:004061CC                 lea     esi, [esi+0]
.text:004061D0
.text:004061D0 loc_4061D0:                             ; CODE XREF: sub_406160+8B↓j
.text:004061D0                 mov     ecx, [esp+2Ch+var_14]
.text:004061D4                 mov     edx, [esp+2Ch+var_24]
.text:004061D8                 add     ecx, esi
.text:004061DA                 add     edx, esi
.text:004061DC                 mov     ebx, [edi+ecx*4]
.text:004061DF                 mov     eax, [edi+edx*4]
.text:004061E2                 inc     esi
.text:004061E3                 cmp     esi, ebp
.text:004061E5                 mov     [edi+ecx*4], eax
.text:004061E8                 mov     [edi+edx*4], ebx
.text:004061EB                 jl      short loc_4061D0
.text:004061ED
.text:004061ED loc_4061ED:                             ; CODE XREF: sub_406160+60↑j
.text:004061ED                 sub     [esp+2Ch+var_1C], ebp
.text:004061F1
.text:004061F1 loc_4061F1:                             ; CODE XREF: sub_406160+107↓j
.text:004061F1                 mov     eax, [esp+2Ch+var_18]
.text:004061F5                 cmp     [esp+2Ch+var_1C], eax
.text:004061F9                 jle     short loc_406210
.text:004061FB                 mov     ebp, [esp+2Ch+var_14]
.text:004061FF                 cmp     eax, ebp
.text:00406201                 jg      short loc_4061A0
.text:00406203                 lea     esi, [esi+0]
.text:00406209                 lea     edi, [edi+0]
.text:00406210
.text:00406210 loc_406210:                             ; CODE XREF: sub_406160+34↑j
.text:00406210                                         ; sub_406160+3B↑j ...
.text:00406210                 mov     esi, [esp+2Ch+var_28]
.text:00406214                 mov     ecx, [esp+2Ch+var_18]
.text:00406218                 mov     eax, [esp+2Ch+var_2C]
.text:0040621B                 mov     edi, [esp+2Ch+arg_4]
.text:0040621F                 mov     edx, [esp+2Ch+var_28]
.text:00406223                 sub     esi, ecx
.text:00406225                 add     esi, eax
.text:00406227                 mov     [edi+20h], esi
.text:0040622A                 mov     [edi+24h], edx
.text:0040622D                 add     esp, 1Ch
.text:00406230                 pop     ebx
.text:00406231                 pop     esi
.text:00406232                 pop     edi
.text:00406233                 pop     ebp
.text:00406234                 retn
.text:00406235 ; ---------------------------------------------------------------------------
.text:00406235
.text:00406235 loc_406235:                             ; CODE XREF: sub_406160+5A↑j
.text:00406235                 xor     esi, esi
.text:00406237                 cmp     esi, [esp+2Ch+var_20]
.text:0040623B                 jge     short loc_40625F
.text:0040623D                 lea     esi, [esi+0]
.text:00406240
.text:00406240 loc_406240:                             ; CODE XREF: sub_406160+FD↓j
.text:00406240                 mov     ebx, [esp+2Ch+var_14]
.text:00406244                 mov     ebp, [esp+2Ch+var_18]
.text:00406248                 add     ebx, esi
.text:0040624A                 add     ebp, esi
.text:0040624C                 mov     edx, [edi+ebx*4]
.text:0040624F                 inc     esi
.text:00406250                 cmp     esi, [esp+2Ch+var_20]
.text:00406254                 mov     ecx, [edi+ebp*4]
.text:00406257                 mov     [edi+ebx*4], ecx
.text:0040625A                 mov     [edi+ebp*4], edx
.text:0040625D                 jl      short loc_406240
.text:0040625F
.text:0040625F loc_40625F:                             ; CODE XREF: sub_406160+DB↑j
.text:0040625F                 mov     esi, [esp+2Ch+var_20]
.text:00406263                 add     [esp+2Ch+var_14], esi
.text:00406267                 jmp     short loc_4061F1
.text:00406267 sub_406160      endp
.text:00406267
.text:00406267 ; ---------------------------------------------------------------------------
.text:00406269                 align 20h
.text:00406280 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00406280                                         ; DATA XREF: .data:Buffer↓o
.text:004062B2 ; const char aSSS[]
.text:004062B2 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_406570+50↓o
.text:004062BE aWrittenByS     db 'Written by %s.',0Ah,0
.text:004062BE                                         ; DATA XREF: sub_406570:loc_406611↓o
.text:004062CE                 align 20h
.text:004062E0 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:004062E0                                         ; DATA XREF: sub_406570+100↓o
.text:004062E0                 db 'ere is NO',0Ah
.text:004062E0                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:004062E0                 db 'R PURPOSE.',0Ah,0
.text:00406378 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00406378                                         ; DATA XREF: sub_406570:loc_4066B1↓o
.text:0040638F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040638F                                         ; DATA XREF: sub_406570:loc_4066BD↓o
.text:004063AB                 align 20h
.text:004063C0 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:004063C0                                         ; DATA XREF: sub_406570:loc_4066C9↓o
.text:004063C0                 db 'and %s.',0Ah,0
.text:004063E0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:004063E0                                         ; DATA XREF: sub_406570:loc_4066D5↓o
.text:004063E0                 db '%s, and %s.',0Ah,0
.text:00406404                 align 20h
.text:00406420 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00406420                                         ; DATA XREF: sub_406570:loc_4066E1↓o
.text:00406420                 db '%s, %s, and %s.',0Ah,0
.text:00406448                 align 20h
.text:00406460 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00406460                                         ; DATA XREF: sub_406570:loc_4066ED↓o
.text:00406460                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040648C                 align 20h
.text:004064A0 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:004064A0                                         ; DATA XREF: sub_406570:loc_4066F9↓o
.text:004064A0                 db '%s, %s, %s, %s,',0Ah
.text:004064A0                 db 'and %s.',0Ah,0
.text:004064D0                 align 20h
.text:004064E0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:004064E0                                         ; DATA XREF: sub_406570:loc_406705↓o
.text:004064E0                 db '%s, %s, %s, %s,',0Ah
.text:004064E0                 db '%s, and %s.',0Ah,0
.text:00406514                 align 10h
.text:00406520 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00406520                                         ; DATA XREF: sub_406570:def_4065DD↓o
.text:00406520                 db '%s, %s, %s, %s,',0Ah
.text:00406520                 db '%s, %s, and others.',0Ah,0
.text:0040655C ; const char aSS[]
.text:0040655C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_406570+1B5↓o
.text:00406563                 align 10h
.text:00406570
.text:00406570 ; =============== S U B R O U T I N E =======================================
.text:00406570
.text:00406570
.text:00406570 ; int __cdecl sub_406570(FILE *, FILE *, int, int, va_list)
.text:00406570 sub_406570      proc near               ; CODE XREF: sub_406740+2A↓p
.text:00406570
.text:00406570 Stream          = dword ptr -2Ch
.text:00406570 Format          = dword ptr -28h
.text:00406570 ArgList         = dword ptr -24h
.text:00406570 var_20          = dword ptr -20h
.text:00406570 var_1C          = dword ptr -1Ch
.text:00406570 var_14          = dword ptr -14h
.text:00406570 arg_0           = dword ptr  4
.text:00406570 arg_4           = dword ptr  8
.text:00406570 arg_8           = dword ptr  0Ch
.text:00406570 arg_C           = dword ptr  10h
.text:00406570 arg_10          = dword ptr  14h
.text:00406570
.text:00406570                 push    ebp
.text:00406571                 push    edi
.text:00406572                 push    esi
.text:00406573                 push    ebx
.text:00406574                 sub     esp, 1Ch
.text:00406577                 xor     ebx, ebx
.text:00406579                 mov     edi, [esp+2Ch+arg_10]
.text:0040657D                 mov     edx, [esp+2Ch+arg_8]
.text:00406581                 mov     esi, [esp+2Ch+arg_0]
.text:00406585                 mov     eax, [edi]
.text:00406587                 mov     ecx, [esp+2Ch+arg_4]
.text:0040658B                 mov     [esp+2Ch+var_14], edx
.text:0040658F                 mov     ebp, [esp+2Ch+arg_C]
.text:00406593                 lea     edx, [edi+4]
.text:00406596                 test    eax, eax
.text:00406598                 jz      short loc_4065AC
.text:0040659A                 lea     esi, [esi+0]
.text:004065A0
.text:004065A0 loc_4065A0:                             ; CODE XREF: sub_406570+3A↓j
.text:004065A0                 mov     eax, edx
.text:004065A2                 inc     ebx
.text:004065A3                 mov     eax, [eax]
.text:004065A5                 add     edx, 4
.text:004065A8                 test    eax, eax
.text:004065AA                 jnz     short loc_4065A0
.text:004065AC
.text:004065AC loc_4065AC:                             ; CODE XREF: sub_406570+28↑j
.text:004065AC                 test    ecx, ecx
.text:004065AE                 jz      loc_40671D
.text:004065B4                 mov     [esp+2Ch+var_1C], ebp
.text:004065B8                 mov     edx, [esp+2Ch+var_14]
.text:004065BC                 mov     [esp+2Ch+ArgList], ecx
.text:004065C0                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:004065C8                 mov     [esp+2Ch+var_20], edx
.text:004065CC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004065CF                 call    fprintf
.text:004065D4
.text:004065D4 loc_4065D4:                             ; CODE XREF: sub_406570+1C9↓j
.text:004065D4                 cmp     ebx, 9          ; switch 10 cases
.text:004065D7                 ja      def_4065DD      ; jumptable 004065DD default case
.text:004065DD                 jmp     ds:jpt_4065DD[ebx*4] ; switch jump
.text:004065DD ; ---------------------------------------------------------------------------
.text:004065E4 jpt_4065DD      dd offset loc_40660C    ; DATA XREF: sub_406570+6D↑r
.text:004065E4                 dd offset loc_406611    ; jump table for switch statement
.text:004065E4                 dd offset loc_4066B1
.text:004065E4                 dd offset loc_4066BD
.text:004065E4                 dd offset loc_4066C9
.text:004065E4                 dd offset loc_4066D5
.text:004065E4                 dd offset loc_4066E1
.text:004065E4                 dd offset loc_4066ED
.text:004065E4                 dd offset loc_4066F9
.text:004065E4                 dd offset loc_406705
.text:0040660C ; ---------------------------------------------------------------------------
.text:0040660C
.text:0040660C loc_40660C:                             ; CODE XREF: sub_406570+6D↑j
.text:0040660C                                         ; DATA XREF: sub_406570:jpt_4065DD↑o
.text:0040660C                 call    abort           ; jumptable 004065DD case 0
.text:00406611 ; ---------------------------------------------------------------------------
.text:00406611
.text:00406611 loc_406611:                             ; CODE XREF: sub_406570+6D↑j
.text:00406611                                         ; DATA XREF: sub_406570:jpt_4065DD↑o
.text:00406611                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 004065DD case 1
.text:00406618                 nop
.text:00406619                 lea     esi, [esi+0]
.text:00406620
.text:00406620 loc_406620:                             ; CODE XREF: sub_406570+148↓j
.text:00406620                                         ; sub_406570+154↓j ...
.text:00406620                 call    ds:libintl_gettext
.text:00406626                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040662A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040662D                 mov     [esp+2Ch+Format], eax ; Format
.text:00406631                 call    vfprintf
.text:00406636                 mov     ebx, [esi+4]
.text:00406639                 dec     ebx
.text:0040663A                 test    ebx, ebx
.text:0040663C                 mov     [esi+4], ebx
.text:0040663F                 js      short loc_40669F
.text:00406641                 mov     edi, [esi]
.text:00406643                 mov     byte ptr [edi], 0Ah
.text:00406646                 inc     dword ptr [esi]
.text:00406648
.text:00406648 loc_406648:                             ; CODE XREF: sub_406570+13F↓j
.text:00406648                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040664C                 mov     edx, Buffer
.text:00406652                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00406655                 call    fputs
.text:0040665A                 mov     ebp, [esi+4]
.text:0040665D                 dec     ebp
.text:0040665E                 test    ebp, ebp
.text:00406660                 mov     [esi+4], ebp
.text:00406663                 js      short loc_40668D
.text:00406665                 mov     ecx, [esi]
.text:00406667                 mov     byte ptr [ecx], 0Ah
.text:0040666A                 inc     dword ptr [esi]
.text:0040666C
.text:0040666C loc_40666C:                             ; CODE XREF: sub_406570+12D↓j
.text:0040666C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00406670                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00406677                 call    ds:libintl_gettext
.text:0040667D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00406681                 add     esp, 1Ch
.text:00406684                 pop     ebx
.text:00406685                 pop     esi
.text:00406686                 pop     edi
.text:00406687                 pop     ebp
.text:00406688                 jmp     fputs
.text:0040668D ; ---------------------------------------------------------------------------
.text:0040668D
.text:0040668D loc_40668D:                             ; CODE XREF: sub_406570+F3↑j
.text:0040668D                 mov     [esp+2Ch+Format], esi ; File
.text:00406691                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00406698                 call    _flsbuf
.text:0040669D                 jmp     short loc_40666C
.text:0040669F ; ---------------------------------------------------------------------------
.text:0040669F
.text:0040669F loc_40669F:                             ; CODE XREF: sub_406570+CF↑j
.text:0040669F                 mov     [esp+2Ch+Format], esi ; File
.text:004066A3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004066AA                 call    _flsbuf
.text:004066AF                 jmp     short loc_406648
.text:004066B1 ; ---------------------------------------------------------------------------
.text:004066B1
.text:004066B1 loc_4066B1:                             ; CODE XREF: sub_406570+6D↑j
.text:004066B1                                         ; DATA XREF: sub_406570:jpt_4065DD↑o
.text:004066B1                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 004065DD case 2
.text:004066B8                 jmp     loc_406620
.text:004066BD ; ---------------------------------------------------------------------------
.text:004066BD
.text:004066BD loc_4066BD:                             ; CODE XREF: sub_406570+6D↑j
.text:004066BD                                         ; DATA XREF: sub_406570:jpt_4065DD↑o
.text:004066BD                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 004065DD case 3
.text:004066C4                 jmp     loc_406620
.text:004066C9 ; ---------------------------------------------------------------------------
.text:004066C9
.text:004066C9 loc_4066C9:                             ; CODE XREF: sub_406570+6D↑j
.text:004066C9                                         ; DATA XREF: sub_406570:jpt_4065DD↑o
.text:004066C9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 004065DD case 4
.text:004066D0                 jmp     loc_406620
.text:004066D5 ; ---------------------------------------------------------------------------
.text:004066D5
.text:004066D5 loc_4066D5:                             ; CODE XREF: sub_406570+6D↑j
.text:004066D5                                         ; DATA XREF: sub_406570:jpt_4065DD↑o
.text:004066D5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 004065DD case 5
.text:004066DC                 jmp     loc_406620
.text:004066E1 ; ---------------------------------------------------------------------------
.text:004066E1
.text:004066E1 loc_4066E1:                             ; CODE XREF: sub_406570+6D↑j
.text:004066E1                                         ; DATA XREF: sub_406570:jpt_4065DD↑o
.text:004066E1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 004065DD case 6
.text:004066E8                 jmp     loc_406620
.text:004066ED ; ---------------------------------------------------------------------------
.text:004066ED
.text:004066ED loc_4066ED:                             ; CODE XREF: sub_406570+6D↑j
.text:004066ED                                         ; DATA XREF: sub_406570:jpt_4065DD↑o
.text:004066ED                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 004065DD case 7
.text:004066F4                 jmp     loc_406620
.text:004066F9 ; ---------------------------------------------------------------------------
.text:004066F9
.text:004066F9 loc_4066F9:                             ; CODE XREF: sub_406570+6D↑j
.text:004066F9                                         ; DATA XREF: sub_406570:jpt_4065DD↑o
.text:004066F9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 004065DD case 8
.text:00406700                 jmp     loc_406620
.text:00406705 ; ---------------------------------------------------------------------------
.text:00406705
.text:00406705 loc_406705:                             ; CODE XREF: sub_406570+6D↑j
.text:00406705                                         ; DATA XREF: sub_406570:jpt_4065DD↑o
.text:00406705                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 004065DD case 9
.text:0040670C                 jmp     loc_406620
.text:00406711 ; ---------------------------------------------------------------------------
.text:00406711
.text:00406711 def_4065DD:                             ; CODE XREF: sub_406570+67↑j
.text:00406711                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 004065DD default case
.text:00406718                 jmp     loc_406620
.text:0040671D ; ---------------------------------------------------------------------------
.text:0040671D
.text:0040671D loc_40671D:                             ; CODE XREF: sub_406570+3E↑j
.text:0040671D                 mov     [esp+2Ch+var_20], ebp
.text:00406721                 mov     ecx, [esp+2Ch+var_14]
.text:00406725                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:0040672D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00406730                 mov     [esp+2Ch+ArgList], ecx
.text:00406734                 call    fprintf
.text:00406739                 jmp     loc_4065D4
.text:00406739 sub_406570      endp
.text:00406739
.text:00406739 ; ---------------------------------------------------------------------------
.text:0040673E                 align 10h
.text:00406740
.text:00406740 ; =============== S U B R O U T I N E =======================================
.text:00406740
.text:00406740
.text:00406740 ; int __cdecl sub_406740(FILE *, FILE *, int, int, char)
.text:00406740 sub_406740      proc near               ; CODE XREF: sub_401CD0+162↑p
.text:00406740
.text:00406740 var_1C          = dword ptr -1Ch
.text:00406740 var_18          = dword ptr -18h
.text:00406740 var_14          = dword ptr -14h
.text:00406740 var_10          = dword ptr -10h
.text:00406740 var_C           = dword ptr -0Ch
.text:00406740 arg_0           = dword ptr  4
.text:00406740 arg_4           = dword ptr  8
.text:00406740 arg_8           = dword ptr  0Ch
.text:00406740 arg_C           = dword ptr  10h
.text:00406740 arg_10          = byte ptr  14h
.text:00406740
.text:00406740                 sub     esp, 1Ch
.text:00406743                 mov     edx, [esp+1Ch+arg_C]
.text:00406747                 lea     ecx, [esp+1Ch+arg_10]
.text:0040674B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040674F                 mov     ecx, [esp+1Ch+arg_8]
.text:00406753                 mov     [esp+1Ch+var_10], edx ; int
.text:00406757                 mov     edx, [esp+1Ch+arg_4]
.text:0040675B                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040675F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00406763                 mov     edx, [esp+1Ch+arg_0]
.text:00406767                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:0040676A                 call    sub_406570
.text:0040676F                 add     esp, 1Ch
.text:00406772                 retn
.text:00406772 sub_406740      endp
.text:00406772
.text:00406772 ; ---------------------------------------------------------------------------
.text:00406773                 align 10h
.text:00406780
.text:00406780 ; =============== S U B R O U T I N E =======================================
.text:00406780
.text:00406780
.text:00406780 ; int __cdecl sub_406780(int, int, char *, int, int)
.text:00406780 sub_406780      proc near               ; CODE XREF: sub_401CD0+AF↑p
.text:00406780
.text:00406780 var_1C          = dword ptr -1Ch
.text:00406780 var_18          = dword ptr -18h
.text:00406780 var_14          = dword ptr -14h
.text:00406780 var_10          = dword ptr -10h
.text:00406780 var_C           = dword ptr -0Ch
.text:00406780 var_8           = dword ptr -8
.text:00406780 var_4           = dword ptr -4
.text:00406780 arg_0           = dword ptr  4
.text:00406780 arg_4           = dword ptr  8
.text:00406780 arg_8           = dword ptr  0Ch
.text:00406780 arg_C           = dword ptr  10h
.text:00406780 arg_10          = dword ptr  14h
.text:00406780
.text:00406780                 sub     esp, 1Ch
.text:00406783                 mov     edx, [esp+1Ch+arg_C]
.text:00406787                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040678F                 mov     ecx, [esp+1Ch+arg_10]
.text:00406793                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040679B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040679F                 mov     edx, [esp+1Ch+arg_4]
.text:004067A3                 mov     [esp+1Ch+var_C], ecx ; int
.text:004067A7                 mov     ecx, [esp+1Ch+arg_8]
.text:004067AB                 mov     [esp+1Ch+var_18], edx ; int
.text:004067AF                 mov     edx, [esp+1Ch+arg_0]
.text:004067B3                 mov     [esp+1Ch+var_14], ecx ; char *
.text:004067B7                 mov     [esp+1Ch+var_1C], edx ; int
.text:004067BA                 call    sub_406040
.text:004067BF                 add     esp, 1Ch
.text:004067C2                 retn
.text:004067C2 sub_406780      endp
.text:004067C2
.text:004067C2 ; ---------------------------------------------------------------------------
.text:004067C3                 align 10h
.text:004067D0                 sub     esp, 2Ch
.text:004067D3                 mov     edx, [esp+44h]
.text:004067D7                 mov     dword ptr [esp+18h], 0
.text:004067DF                 mov     ecx, [esp+40h]
.text:004067E3                 mov     dword ptr [esp+14h], 0
.text:004067EB                 mov     [esp+1Ch], edx
.text:004067EF                 mov     edx, [esp+3Ch]
.text:004067F3                 mov     [esp+10h], ecx
.text:004067F7                 mov     ecx, [esp+38h]
.text:004067FB                 mov     [esp+0Ch], edx
.text:004067FF                 mov     edx, [esp+34h]
.text:00406803                 mov     [esp+8], ecx
.text:00406807                 mov     [esp+4], edx
.text:0040680B                 mov     edx, [esp+30h]
.text:0040680F                 mov     [esp], edx
.text:00406812                 call    sub_4054B0
.text:00406817                 add     esp, 2Ch
.text:0040681A                 retn
.text:0040681A ; ---------------------------------------------------------------------------
.text:0040681B                 align 10h
.text:00406820                 sub     esp, 1Ch
.text:00406823                 mov     edx, [esp+2Ch]
.text:00406827                 mov     dword ptr [esp+18h], 0
.text:0040682F                 mov     ecx, [esp+30h]
.text:00406833                 mov     dword ptr [esp+14h], 1
.text:0040683B                 mov     [esp+0Ch], edx
.text:0040683F                 mov     edx, [esp+24h]
.text:00406843                 mov     [esp+10h], ecx
.text:00406847                 mov     ecx, [esp+28h]
.text:0040684B                 mov     [esp+4], edx
.text:0040684F                 mov     edx, [esp+20h]
.text:00406853                 mov     [esp+8], ecx
.text:00406857                 mov     [esp], edx
.text:0040685A                 call    sub_406040
.text:0040685F                 add     esp, 1Ch
.text:00406862                 retn
.text:00406862 ; ---------------------------------------------------------------------------
.text:00406863                 align 10h
.text:00406870                 sub     esp, 2Ch
.text:00406873                 mov     edx, [esp+44h]
.text:00406877                 mov     dword ptr [esp+18h], 0
.text:0040687F                 mov     ecx, [esp+40h]
.text:00406883                 mov     dword ptr [esp+14h], 1
.text:0040688B                 mov     [esp+1Ch], edx
.text:0040688F                 mov     edx, [esp+3Ch]
.text:00406893                 mov     [esp+10h], ecx
.text:00406897                 mov     ecx, [esp+38h]
.text:0040689B                 mov     [esp+0Ch], edx
.text:0040689F                 mov     edx, [esp+34h]
.text:004068A3                 mov     [esp+8], ecx
.text:004068A7                 mov     [esp+4], edx
.text:004068AB                 mov     edx, [esp+30h]
.text:004068AF                 mov     [esp], edx
.text:004068B2                 call    sub_4054B0
.text:004068B7                 add     esp, 2Ch
.text:004068BA                 retn
.text:004068BA ; ---------------------------------------------------------------------------
.text:004068BB                 align 10h
.text:004068C0                 mov     edx, [esp+4]
.text:004068C4                 mov     ds:dword_413080, edx
.text:004068CA                 retn
.text:004068CA ; ---------------------------------------------------------------------------
.text:004068CB aWriteError     db 'write error',0      ; DATA XREF: sub_4068F0:loc_406939↓o
.text:004068D7 ; const char aSS_0[]
.text:004068D7 aSS_0           db '%s: %s',0           ; DATA XREF: sub_4068F0+77↓o
.text:004068DE ; const char aS_1[]
.text:004068DE aS_1            db '%s',0               ; DATA XREF: sub_4068F0+A0↓o
.text:004068E1 ; ---------------------------------------------------------------------------
.text:004068E1                 jmp     short sub_4068F0
.text:004068E1 ; ---------------------------------------------------------------------------
.text:004068E3                 align 10h
.text:004068F0
.text:004068F0 ; =============== S U B R O U T I N E =======================================
.text:004068F0
.text:004068F0
.text:004068F0 ; void __cdecl sub_4068F0()
.text:004068F0 sub_4068F0      proc near               ; CODE XREF: .text:004068E1↑j
.text:004068F0                                         ; DATA XREF: sub_401CD0+7D↑o
.text:004068F0
.text:004068F0 Stream          = dword ptr -2Ch
.text:004068F0 ErrorMessage    = dword ptr -28h
.text:004068F0 var_24          = dword ptr -24h
.text:004068F0 var_20          = byte ptr -20h
.text:004068F0 var_1C          = dword ptr -1Ch
.text:004068F0 var_9           = byte ptr -9
.text:004068F0
.text:004068F0                 push    esi
.text:004068F1                 push    ebx
.text:004068F2                 sub     esp, 24h
.text:004068F5                 mov     edx, ds:_iob
.text:004068FB                 mov     ecx, [edx+2Ch]
.text:004068FE                 lea     esi, [edx+20h]
.text:00406901                 shr     ecx, 5
.text:00406904                 mov     bl, cl
.text:00406906                 mov     ecx, [edx+20h]
.text:00406909                 and     bl, 1
.text:0040690C                 cmp     ecx, [esi+8]
.text:0040690F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00406912                 setz    [esp+2Ch+var_9]
.text:00406917                 call    fclose
.text:0040691C                 test    eax, eax
.text:0040691E                 setnz   al
.text:00406921                 test    bl, bl
.text:00406923                 jnz     loc_4069B3
.text:00406929                 test    al, al
.text:0040692B                 jz      short loc_406980
.text:0040692D
.text:0040692D loc_40692D:                             ; CODE XREF: sub_4068F0+CD↓j
.text:0040692D                 call    _errno
.text:00406932                 mov     esi, [eax]
.text:00406934
.text:00406934 loc_406934:                             ; CODE XREF: sub_4068F0+C7↓j
.text:00406934                 cmp     esi, 9
.text:00406937                 jz      short loc_4069A6
.text:00406939
.text:00406939 loc_406939:                             ; CODE XREF: sub_4068F0+B8↓j
.text:00406939                                         ; sub_4068F0+C1↓j
.text:00406939                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00406940                 call    ds:libintl_gettext
.text:00406946                 mov     ebx, eax
.text:00406948                 mov     eax, ds:dword_413080
.text:0040694D                 test    eax, eax
.text:0040694F                 jz      short loc_406986
.text:00406951                 mov     [esp+2Ch+Stream], eax ; char *
.text:00406954                 call    sub_4080B0
.text:00406959                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040695D                 mov     edx, Code
.text:00406963                 mov     [esp+2Ch+var_1C], ebx
.text:00406967                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:0040696F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00406973                 mov     [esp+2Ch+Stream], edx ; Code
.text:00406976                 call    sub_4083D0
.text:0040697B                 nop
.text:0040697C                 lea     esi, [esi+0]
.text:00406980
.text:00406980 loc_406980:                             ; CODE XREF: sub_4068F0+3B↑j
.text:00406980                                         ; sub_4068F0+B4↓j ...
.text:00406980                 add     esp, 24h
.text:00406983                 pop     ebx
.text:00406984                 pop     esi
.text:00406985                 retn
.text:00406986 ; ---------------------------------------------------------------------------
.text:00406986
.text:00406986 loc_406986:                             ; CODE XREF: sub_4068F0+5F↑j
.text:00406986                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040698A                 mov     ebx, Code
.text:00406990                 mov     [esp+2Ch+var_24], offset aS_1 ; "%s"
.text:00406998                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040699C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040699F                 call    sub_4083D0
.text:004069A4                 jmp     short loc_406980
.text:004069A6 ; ---------------------------------------------------------------------------
.text:004069A6
.text:004069A6 loc_4069A6:                             ; CODE XREF: sub_4068F0+47↑j
.text:004069A6                 test    bl, bl
.text:004069A8                 jnz     short loc_406939
.text:004069AA                 cmp     [esp+2Ch+var_9], 0
.text:004069AF                 jnz     short loc_406980
.text:004069B1                 jmp     short loc_406939
.text:004069B3 ; ---------------------------------------------------------------------------
.text:004069B3
.text:004069B3 loc_4069B3:                             ; CODE XREF: sub_4068F0+33↑j
.text:004069B3                 xor     esi, esi
.text:004069B5                 test    al, al
.text:004069B7                 jz      loc_406934
.text:004069BD                 jmp     loc_40692D
.text:004069BD sub_4068F0      endp
.text:004069BD
.text:004069BD ; ---------------------------------------------------------------------------
.text:004069C2                 align 10h
.text:004069D0                 sub     esp, 0Ch
.text:004069D3                 xor     edx, edx
.text:004069D5                 mov     ecx, [esp+14h]
.text:004069D9                 mov     [esp+8], ebx
.text:004069DD                 mov     eax, 0FFFFFFFFh
.text:004069E2                 mov     ebx, [esp+10h]
.text:004069E6                 div     ecx
.text:004069E8                 cmp     eax, ebx
.text:004069EA                 jb      short loc_406A09
.text:004069EC                 mov     edx, ebx
.text:004069EE                 imul    edx, ecx
.text:004069F1                 mov     [esp], edx
.text:004069F4                 call    malloc
.text:004069F9                 test    eax, eax
.text:004069FB                 jz      short loc_406A05
.text:004069FD
.text:004069FD loc_4069FD:                             ; CODE XREF: .text:00406A07↓j
.text:004069FD                 mov     ebx, [esp+8]
.text:00406A01                 add     esp, 0Ch
.text:00406A04                 retn
.text:00406A05 ; ---------------------------------------------------------------------------
.text:00406A05
.text:00406A05 loc_406A05:                             ; CODE XREF: .text:004069FB↑j
.text:00406A05                 test    ebx, ebx
.text:00406A07                 jz      short loc_4069FD
.text:00406A09
.text:00406A09 loc_406A09:                             ; CODE XREF: .text:004069EA↑j
.text:00406A09                 call    sub_408340
.text:00406A09 ; ---------------------------------------------------------------------------
.text:00406A0E                 align 10h
.text:00406A10
.text:00406A10 ; =============== S U B R O U T I N E =======================================
.text:00406A10
.text:00406A10
.text:00406A10 ; int __cdecl sub_406A10(size_t)
.text:00406A10 sub_406A10      proc near               ; CODE XREF: sub_402630+3B↑p
.text:00406A10                                         ; sub_406D00+23↓p ...
.text:00406A10
.text:00406A10 Size            = dword ptr -0Ch
.text:00406A10 var_4           = dword ptr -4
.text:00406A10 arg_0           = dword ptr  4
.text:00406A10
.text:00406A10                 sub     esp, 0Ch
.text:00406A13                 mov     [esp+0Ch+var_4], ebx
.text:00406A17                 mov     ebx, [esp+0Ch+arg_0]
.text:00406A1B                 mov     [esp+0Ch+Size], ebx ; Size
.text:00406A1E                 call    malloc
.text:00406A23                 test    eax, eax
.text:00406A25                 jz      short loc_406A30
.text:00406A27
.text:00406A27 loc_406A27:                             ; CODE XREF: sub_406A10+22↓j
.text:00406A27                 mov     ebx, [esp+0Ch+var_4]
.text:00406A2B                 add     esp, 0Ch
.text:00406A2E                 retn
.text:00406A2E ; ---------------------------------------------------------------------------
.text:00406A2F                 align 10h
.text:00406A30
.text:00406A30 loc_406A30:                             ; CODE XREF: sub_406A10+15↑j
.text:00406A30                 test    ebx, ebx
.text:00406A32                 jz      short loc_406A27
.text:00406A34                 call    sub_408340
.text:00406A34 sub_406A10      endp
.text:00406A34
.text:00406A34 ; ---------------------------------------------------------------------------
.text:00406A39                 align 10h
.text:00406A40                 sub     esp, 1Ch
.text:00406A43                 xor     edx, edx
.text:00406A45                 mov     eax, 0FFFFFFFFh
.text:00406A4A                 mov     [esp+14h], ebx
.text:00406A4E                 mov     ecx, [esp+20h]
.text:00406A52                 mov     ebx, [esp+28h]
.text:00406A56                 mov     [esp+18h], esi
.text:00406A5A                 mov     esi, [esp+24h]
.text:00406A5E                 div     ebx
.text:00406A60                 cmp     eax, esi
.text:00406A62                 jb      short loc_406A94
.text:00406A64                 mov     [esp], ecx
.text:00406A67                 mov     edx, esi
.text:00406A69                 imul    edx, ebx
.text:00406A6C                 mov     [esp+4], edx
.text:00406A70                 call    realloc
.text:00406A75                 test    eax, eax
.text:00406A77                 mov     ecx, eax
.text:00406A79                 jz      short loc_406A90
.text:00406A7B
.text:00406A7B loc_406A7B:                             ; CODE XREF: .text:00406A92↓j
.text:00406A7B                 mov     ebx, [esp+14h]
.text:00406A7F                 mov     eax, ecx
.text:00406A81                 mov     esi, [esp+18h]
.text:00406A85                 add     esp, 1Ch
.text:00406A88                 retn
.text:00406A88 ; ---------------------------------------------------------------------------
.text:00406A89                 align 10h
.text:00406A90
.text:00406A90 loc_406A90:                             ; CODE XREF: .text:00406A79↑j
.text:00406A90                 test    esi, esi
.text:00406A92                 jz      short loc_406A7B
.text:00406A94
.text:00406A94 loc_406A94:                             ; CODE XREF: .text:00406A62↑j
.text:00406A94                 call    sub_408340
.text:00406A94 ; ---------------------------------------------------------------------------
.text:00406A99                 align 10h
.text:00406AA0
.text:00406AA0 ; =============== S U B R O U T I N E =======================================
.text:00406AA0
.text:00406AA0
.text:00406AA0 ; int __cdecl sub_406AA0(void *, size_t)
.text:00406AA0 sub_406AA0      proc near               ; CODE XREF: sub_408150+5B↓p
.text:00406AA0
.text:00406AA0 Block           = dword ptr -0Ch
.text:00406AA0 Size            = dword ptr -8
.text:00406AA0 var_4           = dword ptr -4
.text:00406AA0 arg_0           = dword ptr  4
.text:00406AA0 arg_4           = dword ptr  8
.text:00406AA0
.text:00406AA0                 sub     esp, 0Ch
.text:00406AA3                 mov     edx, [esp+0Ch+arg_0]
.text:00406AA7                 mov     [esp+0Ch+var_4], ebx
.text:00406AAB                 mov     ebx, [esp+0Ch+arg_4]
.text:00406AAF                 mov     [esp+0Ch+Block], edx ; Block
.text:00406AB2                 mov     [esp+0Ch+Size], ebx ; Size
.text:00406AB6                 call    realloc
.text:00406ABB                 test    eax, eax
.text:00406ABD                 jz      short loc_406AC7
.text:00406ABF
.text:00406ABF loc_406ABF:                             ; CODE XREF: sub_406AA0+29↓j
.text:00406ABF                 mov     ebx, [esp+0Ch+var_4]
.text:00406AC3                 add     esp, 0Ch
.text:00406AC6                 retn
.text:00406AC7 ; ---------------------------------------------------------------------------
.text:00406AC7
.text:00406AC7 loc_406AC7:                             ; CODE XREF: sub_406AA0+1D↑j
.text:00406AC7                 test    ebx, ebx
.text:00406AC9                 jz      short loc_406ABF
.text:00406ACB                 call    sub_408340
.text:00406ACB sub_406AA0      endp
.text:00406ACB
.text:00406AD0 ; ---------------------------------------------------------------------------
.text:00406AD0                 jmp     sub_406C20
.text:00406AD0 ; ---------------------------------------------------------------------------
.text:00406AD5                 align 10h
.text:00406AE0                 sub     esp, 0Ch
.text:00406AE3                 mov     edx, [esp+14h]
.text:00406AE7                 mov     dword ptr [esp+8], 1
.text:00406AEF                 mov     [esp+4], edx
.text:00406AF3                 mov     edx, [esp+10h]
.text:00406AF7                 mov     [esp], edx
.text:00406AFA                 call    sub_406C20
.text:00406AFF                 add     esp, 0Ch
.text:00406B02                 retn
.text:00406B02 ; ---------------------------------------------------------------------------
.text:00406B03                 align 10h
.text:00406B10                 sub     esp, 1Ch
.text:00406B13                 mov     [esp+18h], ebx
.text:00406B17                 mov     ebx, [esp+20h]
.text:00406B1B                 mov     [esp], ebx
.text:00406B1E                 call    malloc
.text:00406B23                 test    eax, eax
.text:00406B25                 jz      short loc_406B43
.text:00406B27
.text:00406B27 loc_406B27:                             ; CODE XREF: .text:00406B45↓j
.text:00406B27                 mov     [esp+8], ebx
.text:00406B2B                 mov     dword ptr [esp+4], 0
.text:00406B33                 mov     [esp], eax
.text:00406B36                 call    memset
.text:00406B3B                 mov     ebx, [esp+18h]
.text:00406B3F                 add     esp, 1Ch
.text:00406B42                 retn
.text:00406B43 ; ---------------------------------------------------------------------------
.text:00406B43
.text:00406B43 loc_406B43:                             ; CODE XREF: .text:00406B25↑j
.text:00406B43                 test    ebx, ebx
.text:00406B45                 jz      short loc_406B27
.text:00406B47                 call    sub_408340
.text:00406B47 ; ---------------------------------------------------------------------------
.text:00406B4C                 align 10h
.text:00406B50                 sub     esp, 0Ch
.text:00406B53                 xor     edx, edx
.text:00406B55                 mov     ecx, [esp+14h]
.text:00406B59                 mov     [esp+8], ebx
.text:00406B5D                 mov     eax, 0FFFFFFFFh
.text:00406B62                 mov     ebx, [esp+10h]
.text:00406B66                 div     ecx
.text:00406B68                 cmp     eax, ebx
.text:00406B6A                 jb      short loc_406B88
.text:00406B6C                 mov     [esp+4], ecx
.text:00406B70                 mov     [esp], ebx
.text:00406B73                 call    calloc
.text:00406B78                 test    eax, eax
.text:00406B7A                 jz      short loc_406B84
.text:00406B7C
.text:00406B7C loc_406B7C:                             ; CODE XREF: .text:00406B86↓j
.text:00406B7C                 mov     ebx, [esp+8]
.text:00406B80                 add     esp, 0Ch
.text:00406B83                 retn
.text:00406B84 ; ---------------------------------------------------------------------------
.text:00406B84
.text:00406B84 loc_406B84:                             ; CODE XREF: .text:00406B7A↑j
.text:00406B84                 test    ebx, ebx
.text:00406B86                 jz      short loc_406B7C
.text:00406B88
.text:00406B88 loc_406B88:                             ; CODE XREF: .text:00406B6A↑j
.text:00406B88                 call    sub_408340
.text:00406B88 ; ---------------------------------------------------------------------------
.text:00406B8D                 align 10h
.text:00406B90                 sub     esp, 1Ch
.text:00406B93                 mov     [esp+18h], ebx
.text:00406B97                 mov     ebx, [esp+24h]
.text:00406B9B                 mov     [esp], ebx
.text:00406B9E                 call    malloc
.text:00406BA3                 test    eax, eax
.text:00406BA5                 mov     edx, eax
.text:00406BA7                 jz      short loc_406BC5
.text:00406BA9
.text:00406BA9 loc_406BA9:                             ; CODE XREF: .text:00406BC7↓j
.text:00406BA9                 mov     [esp+8], ebx
.text:00406BAD                 mov     ecx, [esp+20h]
.text:00406BB1                 mov     [esp], edx
.text:00406BB4                 mov     [esp+4], ecx
.text:00406BB8                 call    memcpy
.text:00406BBD                 mov     ebx, [esp+18h]
.text:00406BC1                 add     esp, 1Ch
.text:00406BC4                 retn
.text:00406BC5 ; ---------------------------------------------------------------------------
.text:00406BC5
.text:00406BC5 loc_406BC5:                             ; CODE XREF: .text:00406BA7↑j
.text:00406BC5                 test    ebx, ebx
.text:00406BC7                 jz      short loc_406BA9
.text:00406BC9                 call    sub_408340
.text:00406BC9 ; ---------------------------------------------------------------------------
.text:00406BCE                 align 10h
.text:00406BD0
.text:00406BD0 ; =============== S U B R O U T I N E =======================================
.text:00406BD0
.text:00406BD0
.text:00406BD0 ; int __cdecl sub_406BD0(char *)
.text:00406BD0 sub_406BD0      proc near               ; CODE XREF: sub_402630+26↑p
.text:00406BD0
.text:00406BD0 Str             = dword ptr -1Ch
.text:00406BD0 Src             = dword ptr -18h
.text:00406BD0 Size            = dword ptr -14h
.text:00406BD0 var_8           = dword ptr -8
.text:00406BD0 var_4           = dword ptr -4
.text:00406BD0 arg_0           = dword ptr  4
.text:00406BD0
.text:00406BD0                 sub     esp, 1Ch
.text:00406BD3                 mov     [esp+1Ch+var_4], esi
.text:00406BD7                 mov     esi, [esp+1Ch+arg_0]
.text:00406BDB                 mov     [esp+1Ch+var_8], ebx
.text:00406BDF                 mov     [esp+1Ch+Str], esi ; Str
.text:00406BE2                 call    strlen
.text:00406BE7                 lea     ebx, [eax+1]
.text:00406BEA                 mov     [esp+1Ch+Str], ebx ; Size
.text:00406BED                 call    malloc
.text:00406BF2                 test    eax, eax
.text:00406BF4                 jz      short loc_406C12
.text:00406BF6
.text:00406BF6 loc_406BF6:                             ; CODE XREF: sub_406BD0+44↓j
.text:00406BF6                 mov     [esp+1Ch+Size], ebx ; Size
.text:00406BFA                 mov     [esp+1Ch+Src], esi ; Src
.text:00406BFE                 mov     [esp+1Ch+Str], eax ; void *
.text:00406C01                 call    memcpy
.text:00406C06                 mov     ebx, [esp+1Ch+var_8]
.text:00406C0A                 mov     esi, [esp+1Ch+var_4]
.text:00406C0E                 add     esp, 1Ch
.text:00406C11                 retn
.text:00406C12 ; ---------------------------------------------------------------------------
.text:00406C12
.text:00406C12 loc_406C12:                             ; CODE XREF: sub_406BD0+24↑j
.text:00406C12                 test    ebx, ebx
.text:00406C14                 jz      short loc_406BF6
.text:00406C16                 call    sub_408340
.text:00406C16 sub_406BD0      endp
.text:00406C16
.text:00406C16 ; ---------------------------------------------------------------------------
.text:00406C1B                 align 10h
.text:00406C20
.text:00406C20 ; =============== S U B R O U T I N E =======================================
.text:00406C20
.text:00406C20
.text:00406C20 ; int __cdecl sub_406C20(void *, int, int)
.text:00406C20 sub_406C20      proc near               ; CODE XREF: .text:00406AD0↑j
.text:00406C20                                         ; .text:00406AFA↑p
.text:00406C20
.text:00406C20 Block           = dword ptr -1Ch
.text:00406C20 Size            = dword ptr -18h
.text:00406C20 var_C           = dword ptr -0Ch
.text:00406C20 var_8           = dword ptr -8
.text:00406C20 var_4           = dword ptr -4
.text:00406C20 arg_0           = dword ptr  4
.text:00406C20 arg_4           = dword ptr  8
.text:00406C20 arg_8           = dword ptr  0Ch
.text:00406C20
.text:00406C20                 sub     esp, 1Ch
.text:00406C23                 mov     [esp+1Ch+var_8], esi
.text:00406C27                 mov     esi, [esp+1Ch+arg_0]
.text:00406C2B                 mov     [esp+1Ch+var_4], edi
.text:00406C2F                 mov     edi, [esp+1Ch+arg_4]
.text:00406C33                 test    esi, esi
.text:00406C35                 mov     [esp+1Ch+var_C], ebx
.text:00406C39                 mov     ecx, [edi]
.text:00406C3B                 mov     ebx, [esp+1Ch+arg_8]
.text:00406C3F                 jz      short loc_406C80
.text:00406C41                 xor     edx, edx
.text:00406C43                 mov     eax, 7FFFFFFFh
.text:00406C48                 div     ebx
.text:00406C4A                 cmp     eax, ecx
.text:00406C4C                 jb      short loc_406C79
.text:00406C4E                 add     ecx, ecx
.text:00406C50
.text:00406C50 loc_406C50:                             ; CODE XREF: sub_406C20+62↓j
.text:00406C50                                         ; sub_406C20+71↓j ...
.text:00406C50                 mov     [edi], ecx
.text:00406C52                 imul    ebx, ecx
.text:00406C55                 mov     [esp+1Ch+Block], esi ; Block
.text:00406C58                 mov     [esp+1Ch+Size], ebx ; Size
.text:00406C5C                 call    realloc
.text:00406C61                 test    eax, eax
.text:00406C63                 jz      short loc_406C75
.text:00406C65
.text:00406C65 loc_406C65:                             ; CODE XREF: sub_406C20+57↓j
.text:00406C65                 mov     ebx, [esp+1Ch+var_C]
.text:00406C69                 mov     esi, [esp+1Ch+var_8]
.text:00406C6D                 mov     edi, [esp+1Ch+var_4]
.text:00406C71                 add     esp, 1Ch
.text:00406C74                 retn
.text:00406C75 ; ---------------------------------------------------------------------------
.text:00406C75
.text:00406C75 loc_406C75:                             ; CODE XREF: sub_406C20+43↑j
.text:00406C75                 test    ebx, ebx
.text:00406C77                 jz      short loc_406C65
.text:00406C79
.text:00406C79 loc_406C79:                             ; CODE XREF: sub_406C20+2C↑j
.text:00406C79                 call    sub_408340
.text:00406C79 ; ---------------------------------------------------------------------------
.text:00406C7E                 align 10h
.text:00406C80
.text:00406C80 loc_406C80:                             ; CODE XREF: sub_406C20+1F↑j
.text:00406C80                 test    ecx, ecx
.text:00406C82                 jnz     short loc_406C50
.text:00406C84                 xor     edx, edx
.text:00406C86                 mov     eax, 40h ; '@'
.text:00406C8B                 div     ebx
.text:00406C8D                 test    eax, eax
.text:00406C8F                 mov     ecx, eax
.text:00406C91                 jnz     short loc_406C50
.text:00406C93                 mov     ecx, 1
.text:00406C98                 jmp     short loc_406C50
.text:00406C98 sub_406C20      endp
.text:00406C98
.text:00406C98 ; ---------------------------------------------------------------------------
.text:00406C9A                 align 10h
.text:00406CA0                 sub     esp, 0Ch
.text:00406CA3                 mov     edx, [esp+14h]
.text:00406CA7                 mov     dword ptr [esp+4], 5
.text:00406CAF                 mov     [esp+8], edx
.text:00406CB3                 mov     edx, [esp+10h]
.text:00406CB7                 mov     [esp], edx
.text:00406CBA                 call    sub_407D40
.text:00406CBF                 add     esp, 0Ch
.text:00406CC2                 retn
.text:00406CC2 ; ---------------------------------------------------------------------------
.text:00406CC3                 align 10h
.text:00406CD0
.text:00406CD0 ; =============== S U B R O U T I N E =======================================
.text:00406CD0
.text:00406CD0
.text:00406CD0 ; int __cdecl sub_406CD0(char *)
.text:00406CD0 sub_406CD0      proc near               ; CODE XREF: sub_401CD0+469↑p
.text:00406CD0                                         ; sub_402980+C8↑p ...
.text:00406CD0
.text:00406CD0 var_C           = dword ptr -0Ch
.text:00406CD0 var_8           = dword ptr -8
.text:00406CD0 var_4           = dword ptr -4
.text:00406CD0 arg_0           = dword ptr  4
.text:00406CD0
.text:00406CD0                 sub     esp, 0Ch
.text:00406CD3                 mov     edx, [esp+0Ch+arg_0]
.text:00406CD7                 mov     [esp+0Ch+var_8], 5 ; int
.text:00406CDF                 mov     [esp+0Ch+var_C], 0 ; int
.text:00406CE6                 mov     [esp+0Ch+var_4], edx ; char *
.text:00406CEA                 call    sub_407D40
.text:00406CEF                 add     esp, 0Ch
.text:00406CF2                 retn
.text:00406CF2 sub_406CD0      endp
.text:00406CF2
.text:00406CF2 ; ---------------------------------------------------------------------------
.text:00406CF3                 align 10h
.text:00406D00
.text:00406D00 ; =============== S U B R O U T I N E =======================================
.text:00406D00
.text:00406D00
.text:00406D00 ; int __cdecl sub_406D00(char *, int)
.text:00406D00 sub_406D00      proc near               ; CODE XREF: sub_402AE0+261↑p
.text:00406D00
.text:00406D00 Block           = dword ptr -1Ch
.text:00406D00 lpString1       = dword ptr -18h
.text:00406D00 var_14          = dword ptr -14h
.text:00406D00 arg_0           = dword ptr  4
.text:00406D00 arg_4           = dword ptr  8
.text:00406D00
.text:00406D00                 push    ebp
.text:00406D01                 push    edi
.text:00406D02                 mov     edi, 7FFFFFFFh
.text:00406D07                 push    esi
.text:00406D08                 push    ebx
.text:00406D09                 sub     esp, 0Ch
.text:00406D0C                 mov     eax, [esp+1Ch+arg_4]
.text:00406D10                 mov     ebp, [esp+1Ch+arg_0]
.text:00406D14                 cmp     eax, 7FFFFFFEh
.text:00406D19                 ja      short loc_406D20
.text:00406D1B                 lea     edi, [eax+1]
.text:00406D1E                 mov     esi, esi
.text:00406D20
.text:00406D20 loc_406D20:                             ; CODE XREF: sub_406D00+19↑j
.text:00406D20                                         ; sub_406D00+56↓j ...
.text:00406D20                 mov     [esp+1Ch+Block], edi ; size_t
.text:00406D23                 call    sub_406A10
.text:00406D28                 mov     [esp+1Ch+lpString1], eax ; lpString1
.text:00406D2C                 mov     esi, eax
.text:00406D2E                 mov     [esp+1Ch+var_14], edi
.text:00406D32                 mov     [esp+1Ch+Block], ebp ; char *
.text:00406D35                 call    sub_408870
.text:00406D3A                 test    eax, eax
.text:00406D3C                 mov     ebx, eax
.text:00406D3E                 js      short loc_406D75
.text:00406D40
.text:00406D40 loc_406D40:                             ; CODE XREF: sub_406D00+7D↓j
.text:00406D40                 cmp     ebx, edi
.text:00406D42                 jb      short loc_406D67
.text:00406D44                 mov     [esp+1Ch+Block], esi ; Block
.text:00406D47                 call    free
.text:00406D4C                 cmp     edi, 3FFFFFFFh
.text:00406D52                 ja      short loc_406D58
.text:00406D54                 add     edi, edi
.text:00406D56                 jmp     short loc_406D20
.text:00406D58 ; ---------------------------------------------------------------------------
.text:00406D58
.text:00406D58 loc_406D58:                             ; CODE XREF: sub_406D00+52↑j
.text:00406D58                 cmp     edi, 7FFFFFFEh
.text:00406D5E                 ja      short loc_406D99
.text:00406D60                 mov     edi, 7FFFFFFFh
.text:00406D65                 jmp     short loc_406D20
.text:00406D67 ; ---------------------------------------------------------------------------
.text:00406D67
.text:00406D67 loc_406D67:                             ; CODE XREF: sub_406D00+42↑j
.text:00406D67                 mov     byte ptr [ebx+esi], 0
.text:00406D6B                 mov     eax, esi
.text:00406D6D
.text:00406D6D loc_406D6D:                             ; CODE XREF: sub_406D00+97↓j
.text:00406D6D                 add     esp, 0Ch
.text:00406D70                 pop     ebx
.text:00406D71                 pop     esi
.text:00406D72                 pop     edi
.text:00406D73                 pop     ebp
.text:00406D74                 retn
.text:00406D75 ; ---------------------------------------------------------------------------
.text:00406D75
.text:00406D75 loc_406D75:                             ; CODE XREF: sub_406D00+3E↑j
.text:00406D75                 call    _errno
.text:00406D7A                 cmp     dword ptr [eax], 22h ; '"'
.text:00406D7D                 jz      short loc_406D40
.text:00406D7F                 call    _errno
.text:00406D84                 mov     edi, [eax]
.text:00406D86                 mov     [esp+1Ch+Block], esi ; Block
.text:00406D89                 call    free
.text:00406D8E                 call    _errno
.text:00406D93                 mov     [eax], edi
.text:00406D95                 xor     eax, eax
.text:00406D97                 jmp     short loc_406D6D
.text:00406D99 ; ---------------------------------------------------------------------------
.text:00406D99
.text:00406D99 loc_406D99:                             ; CODE XREF: sub_406D00+5E↑j
.text:00406D99                 call    sub_408340
.text:00406D99 sub_406D00      endp
.text:00406D99
.text:00406D99 ; ---------------------------------------------------------------------------
.text:00406D9E                 align 10h
.text:00406DA0
.text:00406DA0 ; =============== S U B R O U T I N E =======================================
.text:00406DA0
.text:00406DA0
.text:00406DA0 sub_406DA0      proc near               ; CODE XREF: sub_402AE0+4ED↑p
.text:00406DA0
.text:00406DA0 var_1C          = dword ptr -1Ch
.text:00406DA0 var_18          = dword ptr -18h
.text:00406DA0 var_14          = dword ptr -14h
.text:00406DA0 var_10          = dword ptr -10h
.text:00406DA0 arg_0           = dword ptr  4
.text:00406DA0 arg_4           = dword ptr  8
.text:00406DA0 arg_8           = dword ptr  0Ch
.text:00406DA0
.text:00406DA0                 push    edi
.text:00406DA1                 push    esi
.text:00406DA2                 push    ebx
.text:00406DA3                 sub     esp, 10h
.text:00406DA6                 mov     esi, [esp+1Ch+arg_4]
.text:00406DAA                 mov     edx, [esp+1Ch+arg_8]
.text:00406DAE                 mov     ebx, [esp+1Ch+arg_0]
.text:00406DB2                 test    esi, esi
.text:00406DB4                 mov     byte ptr [edx+15h], 0
.text:00406DB8                 lea     edi, [edx+15h]
.text:00406DBB                 js      short loc_406E10
.text:00406DBD                 lea     esi, [esi+0]
.text:00406DC0
.text:00406DC0 loc_406DC0:                             ; CODE XREF: sub_406DA0+65↓j
.text:00406DC0                 mov     [esp+1Ch+var_1C], ebx
.text:00406DC3                 dec     edi
.text:00406DC4                 mov     [esp+1Ch+var_18], esi
.text:00406DC8                 mov     [esp+1Ch+var_14], 0Ah
.text:00406DD0                 mov     [esp+1Ch+var_10], 0
.text:00406DD8                 call    sub_410010
.text:00406DDD                 add     al, 30h ; '0'
.text:00406DDF                 mov     [edi], al
.text:00406DE1                 mov     [esp+1Ch+var_1C], ebx
.text:00406DE4                 mov     [esp+1Ch+var_18], esi
.text:00406DE8                 mov     [esp+1Ch+var_14], 0Ah
.text:00406DF0                 mov     [esp+1Ch+var_10], 0
.text:00406DF8                 call    sub_4101D0
.text:00406DFD                 mov     ebx, eax
.text:00406DFF                 mov     esi, edx
.text:00406E01                 mov     eax, edx
.text:00406E03                 or      eax, ebx
.text:00406E05                 jnz     short loc_406DC0
.text:00406E07
.text:00406E07 loc_406E07:                             ; CODE XREF: sub_406DA0+BB↓j
.text:00406E07                 add     esp, 10h
.text:00406E0A                 mov     eax, edi
.text:00406E0C                 pop     ebx
.text:00406E0D                 pop     esi
.text:00406E0E                 pop     edi
.text:00406E0F                 retn
.text:00406E10 ; ---------------------------------------------------------------------------
.text:00406E10
.text:00406E10 loc_406E10:                             ; CODE XREF: sub_406DA0+1B↑j
.text:00406E10                                         ; sub_406DA0+B5↓j
.text:00406E10                 mov     [esp+1Ch+var_1C], ebx
.text:00406E13                 dec     edi
.text:00406E14                 mov     [esp+1Ch+var_18], esi
.text:00406E18                 mov     [esp+1Ch+var_14], 0Ah
.text:00406E20                 mov     [esp+1Ch+var_10], 0
.text:00406E28                 call    sub_410010
.text:00406E2D                 mov     cl, 30h ; '0'
.text:00406E2F                 sub     cl, al
.text:00406E31                 mov     [edi], cl
.text:00406E33                 mov     [esp+1Ch+var_1C], ebx
.text:00406E36                 mov     [esp+1Ch+var_18], esi
.text:00406E3A                 mov     [esp+1Ch+var_14], 0Ah
.text:00406E42                 mov     [esp+1Ch+var_10], 0
.text:00406E4A                 call    sub_4101D0
.text:00406E4F                 mov     ebx, eax
.text:00406E51                 mov     esi, edx
.text:00406E53                 or      edx, ebx
.text:00406E55                 jnz     short loc_406E10
.text:00406E57                 dec     edi
.text:00406E58                 mov     byte ptr [edi], 2Dh ; '-'
.text:00406E5B                 jmp     short loc_406E07
.text:00406E5B sub_406DA0      endp
.text:00406E5B
.text:00406E5B ; ---------------------------------------------------------------------------
.text:00406E5D                 align 10h
.text:00406E60                 sub     esp, 0Ch
.text:00406E63                 mov     edx, [esp+10h]
.text:00406E67                 mov     [esp], edx
.text:00406E6A                 call    asctime
.text:00406E6F                 xor     edx, edx
.text:00406E71                 test    eax, eax
.text:00406E73                 jz      short loc_406E87
.text:00406E75                 mov     [esp+4], eax
.text:00406E79                 mov     edx, [esp+14h]
.text:00406E7D                 mov     [esp], edx
.text:00406E80                 call    strcpy
.text:00406E85                 mov     edx, eax
.text:00406E87
.text:00406E87 loc_406E87:                             ; CODE XREF: .text:00406E73↑j
.text:00406E87                 mov     eax, edx
.text:00406E89                 add     esp, 0Ch
.text:00406E8C                 retn
.text:00406E8C ; ---------------------------------------------------------------------------
.text:00406E8D                 align 10h
.text:00406E90                 sub     esp, 0Ch
.text:00406E93                 mov     edx, [esp+10h]
.text:00406E97                 mov     [esp], edx
.text:00406E9A                 call    ctime
.text:00406E9F                 xor     edx, edx
.text:00406EA1                 test    eax, eax
.text:00406EA3                 jz      short loc_406EB7
.text:00406EA5                 mov     [esp+4], eax
.text:00406EA9                 mov     edx, [esp+14h]
.text:00406EAD                 mov     [esp], edx
.text:00406EB0                 call    strcpy
.text:00406EB5                 mov     edx, eax
.text:00406EB7
.text:00406EB7 loc_406EB7:                             ; CODE XREF: .text:00406EA3↑j
.text:00406EB7                 mov     eax, edx
.text:00406EB9                 add     esp, 0Ch
.text:00406EBC                 retn
.text:00406EBC ; ---------------------------------------------------------------------------
.text:00406EBD                 align 10h
.text:00406EC0
.text:00406EC0 ; =============== S U B R O U T I N E =======================================
.text:00406EC0
.text:00406EC0
.text:00406EC0 ; int __cdecl sub_406EC0(__time32_t *, int)
.text:00406EC0 sub_406EC0      proc near               ; CODE XREF: sub_403090+1C00↑p
.text:00406EC0
.text:00406EC0 Time            = dword ptr -0Ch
.text:00406EC0 var_4           = dword ptr -4
.text:00406EC0 arg_0           = dword ptr  4
.text:00406EC0 arg_4           = dword ptr  8
.text:00406EC0
.text:00406EC0                 sub     esp, 0Ch
.text:00406EC3                 mov     edx, [esp+0Ch+arg_0]
.text:00406EC7                 mov     [esp+0Ch+var_4], ebx
.text:00406ECB                 mov     ebx, [esp+0Ch+arg_4]
.text:00406ECF                 mov     [esp+0Ch+Time], edx ; Time
.text:00406ED2                 call    gmtime
.text:00406ED7                 mov     edx, eax
.text:00406ED9                 xor     eax, eax
.text:00406EDB                 test    edx, edx
.text:00406EDD                 jz      short loc_406F15
.text:00406EDF                 mov     ecx, [edx]
.text:00406EE1                 mov     eax, ebx
.text:00406EE3                 mov     [ebx], ecx
.text:00406EE5                 mov     ecx, [edx+4]
.text:00406EE8                 mov     [ebx+4], ecx
.text:00406EEB                 mov     ecx, [edx+8]
.text:00406EEE                 mov     [ebx+8], ecx
.text:00406EF1                 mov     ecx, [edx+0Ch]
.text:00406EF4                 mov     [ebx+0Ch], ecx
.text:00406EF7                 mov     ecx, [edx+10h]
.text:00406EFA                 mov     [ebx+10h], ecx
.text:00406EFD                 mov     ecx, [edx+14h]
.text:00406F00                 mov     [ebx+14h], ecx
.text:00406F03                 mov     ecx, [edx+18h]
.text:00406F06                 mov     [ebx+18h], ecx
.text:00406F09                 mov     ecx, [edx+1Ch]
.text:00406F0C                 mov     [ebx+1Ch], ecx
.text:00406F0F                 mov     ecx, [edx+20h]
.text:00406F12                 mov     [ebx+20h], ecx
.text:00406F15
.text:00406F15 loc_406F15:                             ; CODE XREF: sub_406EC0+1D↑j
.text:00406F15                 mov     ebx, [esp+0Ch+var_4]
.text:00406F19                 add     esp, 0Ch
.text:00406F1C                 retn
.text:00406F1C sub_406EC0      endp
.text:00406F1C
.text:00406F1C ; ---------------------------------------------------------------------------
.text:00406F1D                 align 10h
.text:00406F20
.text:00406F20 ; =============== S U B R O U T I N E =======================================
.text:00406F20
.text:00406F20
.text:00406F20 ; int __cdecl sub_406F20(__time32_t *, int)
.text:00406F20 sub_406F20      proc near               ; CODE XREF: sub_403090+1E02↑p
.text:00406F20
.text:00406F20 Time            = dword ptr -0Ch
.text:00406F20 var_4           = dword ptr -4
.text:00406F20 arg_0           = dword ptr  4
.text:00406F20 arg_4           = dword ptr  8
.text:00406F20
.text:00406F20                 sub     esp, 0Ch
.text:00406F23                 mov     edx, [esp+0Ch+arg_0]
.text:00406F27                 mov     [esp+0Ch+var_4], ebx
.text:00406F2B                 mov     ebx, [esp+0Ch+arg_4]
.text:00406F2F                 mov     [esp+0Ch+Time], edx ; Time
.text:00406F32                 call    localtime
.text:00406F37                 mov     edx, eax
.text:00406F39                 xor     eax, eax
.text:00406F3B                 test    edx, edx
.text:00406F3D                 jz      short loc_406F75
.text:00406F3F                 mov     ecx, [edx]
.text:00406F41                 mov     eax, ebx
.text:00406F43                 mov     [ebx], ecx
.text:00406F45                 mov     ecx, [edx+4]
.text:00406F48                 mov     [ebx+4], ecx
.text:00406F4B                 mov     ecx, [edx+8]
.text:00406F4E                 mov     [ebx+8], ecx
.text:00406F51                 mov     ecx, [edx+0Ch]
.text:00406F54                 mov     [ebx+0Ch], ecx
.text:00406F57                 mov     ecx, [edx+10h]
.text:00406F5A                 mov     [ebx+10h], ecx
.text:00406F5D                 mov     ecx, [edx+14h]
.text:00406F60                 mov     [ebx+14h], ecx
.text:00406F63                 mov     ecx, [edx+18h]
.text:00406F66                 mov     [ebx+18h], ecx
.text:00406F69                 mov     ecx, [edx+1Ch]
.text:00406F6C                 mov     [ebx+1Ch], ecx
.text:00406F6F                 mov     ecx, [edx+20h]
.text:00406F72                 mov     [ebx+20h], ecx
.text:00406F75
.text:00406F75 loc_406F75:                             ; CODE XREF: sub_406F20+1D↑j
.text:00406F75                 mov     ebx, [esp+0Ch+var_4]
.text:00406F79                 add     esp, 0Ch
.text:00406F7C                 retn
.text:00406F7C sub_406F20      endp
.text:00406F7C
.text:00406F7C ; ---------------------------------------------------------------------------
.text:00406F7D                 align 10h
.text:00406F80 aLiteral        db 'literal',0          ; DATA XREF: .text:00406FC0↓o
.text:00406F88 aShell_0        db 'shell',0            ; DATA XREF: .text:00406FC4↓o
.text:00406F8E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00406FC8↓o
.text:00406F9B aC_1            db 'c',0                ; DATA XREF: .text:00406FCC↓o
.text:00406F9D aEscape         db 'escape',0           ; DATA XREF: .text:00406FD0↓o
.text:00406FA4 aLocale         db 'locale',0           ; DATA XREF: .text:00406FD4↓o
.text:00406FAB aClocale        db 'clocale',0          ; DATA XREF: .text:00406FD8↓o
.text:00406FB3                 align 10h
.text:00406FC0                 dd offset aLiteral      ; "literal"
.text:00406FC4                 dd offset aShell_0      ; "shell"
.text:00406FC8                 dd offset aShellAlways  ; "shell-always"
.text:00406FCC                 dd offset aC_1          ; "c"
.text:00406FD0                 dd offset aEscape       ; "escape"
.text:00406FD4                 dd offset aLocale       ; "locale"
.text:00406FD8                 dd offset aClocale      ; "clocale"
.text:00406FDC                 dd 2 dup(0)
.text:00406FE4                 dd 1, 2, 3, 4, 5, 6
.text:00406FFC asc_406FFC:                             ; DATA XREF: sub_407010+7E↓o
.text:00406FFC                                         ; sub_407010+A39↓o ...
.text:00406FFC                 text "UTF-16LE", '"',27h,'`'
.text:00407002                 align 10h
.text:00407010
.text:00407010 ; =============== S U B R O U T I N E =======================================
.text:00407010
.text:00407010
.text:00407010 ; int __cdecl sub_407010(int, int, char *Str, int, int, int)
.text:00407010 sub_407010      proc near               ; CODE XREF: sub_407010+43A↓p
.text:00407010                                         ; .text:00407BD3↓p ...
.text:00407010
.text:00407010 C               = dword ptr -4Ch
.text:00407010 Type            = dword ptr -48h
.text:00407010 SizeInBytes     = dword ptr -44h
.text:00407010 State           = dword ptr -40h
.text:00407010 var_3C          = dword ptr -3Ch
.text:00407010 var_38          = dword ptr -38h
.text:00407010 var_34          = dword ptr -34h
.text:00407010 var_30          = dword ptr -30h
.text:00407010 var_29          = byte ptr -29h
.text:00407010 var_28          = dword ptr -28h
.text:00407010 var_22          = byte ptr -22h
.text:00407010 var_21          = byte ptr -21h
.text:00407010 var_20          = dword ptr -20h
.text:00407010 var_1C          = dword ptr -1Ch
.text:00407010 var_18          = mbstate_t ptr -18h
.text:00407010 arg_0           = dword ptr  4
.text:00407010 arg_4           = dword ptr  8
.text:00407010 Str             = dword ptr  0Ch
.text:00407010 arg_C           = dword ptr  10h
.text:00407010 arg_10          = dword ptr  14h
.text:00407010 arg_14          = dword ptr  18h
.text:00407010
.text:00407010                 push    ebp
.text:00407011                 push    edi
.text:00407012                 push    esi
.text:00407013                 push    ebx
.text:00407014                 sub     esp, 3Ch
.text:00407017                 mov     edx, ds:__mb_cur_max
.text:0040701D                 mov     [esp+4Ch+var_34], 0
.text:00407025                 mov     [esp+4Ch+var_1C], 0
.text:0040702D                 cmp     dword ptr [edx], 1
.text:00407030                 mov     [esp+4Ch+var_20], 0
.text:00407038                 mov     [esp+4Ch+var_21], 0
.text:0040703D                 setz    [esp+4Ch+var_22]
.text:00407042                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00407047                 ja      short def_40704D ; jumptable 0040704D default case, cases 0,1
.text:00407049                 mov     edx, [esp+4Ch+arg_10]
.text:0040704D                 jmp     ds:jpt_40704D[edx*4] ; switch jump
.text:0040704D ; ---------------------------------------------------------------------------
.text:00407054 jpt_40704D      dd offset def_40704D    ; DATA XREF: sub_407010+3D↑r
.text:00407054                 dd offset def_40704D    ; jump table for switch statement
.text:00407054                 dd offset loc_407995
.text:00407054                 dd offset loc_407070
.text:00407054                 dd offset loc_4079BB
.text:00407054                 dd offset loc_4079C5
.text:00407054                 dd offset loc_4079C5
.text:00407070 ; ---------------------------------------------------------------------------
.text:00407070
.text:00407070 loc_407070:                             ; CODE XREF: sub_407010+3D↑j
.text:00407070                                         ; DATA XREF: sub_407010:jpt_40704D↑o
.text:00407070                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040704D case 3
.text:00407074                 cmp     [esp+4Ch+var_34], eax
.text:00407078                 jnb     short loc_407081
.text:0040707A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040707E                 mov     byte ptr [ebx], 22h ; '"'
.text:00407081
.text:00407081 loc_407081:                             ; CODE XREF: sub_407010+68↑j
.text:00407081                 mov     [esp+4Ch+var_34], 1
.text:00407089                 mov     [esp+4Ch+var_21], 1
.text:0040708E                 mov     [esp+4Ch+var_1C], offset asc_406FFC ; "\"'`"
.text:00407096
.text:00407096 loc_407096:                             ; CODE XREF: sub_407010+9A6↓j
.text:00407096                 mov     [esp+4Ch+var_20], 1
.text:0040709E
.text:0040709E def_40704D:                             ; CODE XREF: sub_407010+37↑j
.text:0040709E                                         ; sub_407010+3D↑j ...
.text:0040709E                 xor     ebp, ebp        ; jumptable 0040704D default case, cases 0,1
.text:004070A0
.text:004070A0 loc_4070A0:                             ; CODE XREF: sub_407010+3DB↓j
.text:004070A0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004070A5                 jz      loc_407987
.text:004070AB                 cmp     ebp, [esp+4Ch+arg_C]
.text:004070AF
.text:004070AF loc_4070AF:                             ; CODE XREF: sub_407010+980↓j
.text:004070AF                 jz      loc_40791E
.text:004070B5                 cmp     [esp+4Ch+var_21], 0
.text:004070BA                 jz      short loc_407100
.text:004070BC                 mov     esi, [esp+4Ch+var_20]
.text:004070C0                 test    esi, esi
.text:004070C2                 jz      short loc_407100
.text:004070C4                 mov     ecx, [esp+4Ch+var_20]
.text:004070C8                 lea     edi, [ecx+ebp]
.text:004070CB                 cmp     edi, [esp+4Ch+arg_C]
.text:004070CF                 ja      short loc_407100
.text:004070D1                 cld
.text:004070D2                 mov     ebx, [esp+4Ch+Str]
.text:004070D6                 mov     edi, [esp+4Ch+var_1C]
.text:004070DA                 add     ebx, ebp
.text:004070DC                 mov     esi, ebx
.text:004070DE                 cmp     ecx, ecx
.text:004070E0                 repe cmpsb
.text:004070E2                 jnz     short loc_407100
.text:004070E4                 mov     edx, [esp+4Ch+arg_4]
.text:004070E8                 cmp     [esp+4Ch+var_34], edx
.text:004070EC                 jnb     short loc_4070FA
.text:004070EE                 mov     ecx, [esp+4Ch+arg_0]
.text:004070F2                 mov     eax, [esp+4Ch+var_34]
.text:004070F6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:004070FA
.text:004070FA loc_4070FA:                             ; CODE XREF: sub_407010+DC↑j
.text:004070FA                 inc     [esp+4Ch+var_34]
.text:004070FE                 mov     esi, esi
.text:00407100
.text:00407100 loc_407100:                             ; CODE XREF: sub_407010+AA↑j
.text:00407100                                         ; sub_407010+B2↑j ...
.text:00407100                 mov     edi, [esp+4Ch+Str]
.text:00407104                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00407109                 movzx   eax, bl
.text:0040710C                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040710F                 ja      def_407115      ; jumptable 00407115 default case, cases 1-6,14-31,64
.text:00407115                 jmp     ds:jpt_407115[eax*4] ; switch jump
.text:00407115 ; ---------------------------------------------------------------------------
.text:0040711C jpt_407115      dd offset loc_407318, offset def_407115, offset def_407115
.text:0040711C                                         ; DATA XREF: sub_407010+105↑r
.text:0040711C                 dd offset def_407115, offset def_407115, offset def_407115 ; jump table for switch statement
.text:0040711C                 dd offset def_407115, offset loc_4073F0, offset loc_40740E
.text:0040711C                 dd offset loc_407412, offset loc_407457, offset loc_40745B
.text:0040711C                 dd offset loc_40745F, offset loc_407463, offset def_407115
.text:0040711C                 dd offset def_407115, offset def_407115, offset def_407115
.text:0040711C                 dd offset def_407115, offset def_407115, offset def_407115
.text:0040711C                 dd offset def_407115, offset def_407115, offset def_407115
.text:0040711C                 dd offset def_407115, offset def_407115, offset def_407115
.text:0040711C                 dd offset def_407115, offset def_407115, offset def_407115
.text:0040711C                 dd offset def_407115, offset def_407115, offset loc_4078E8
.text:0040711C                 dd offset loc_4078E8, offset loc_4078E8, offset loc_40790A
.text:0040711C                 dd offset loc_4078E8, offset def_407512, offset loc_4078E8
.text:0040711C                 dd offset loc_407467, offset loc_4078E8, offset loc_4078E8
.text:0040711C                 dd offset loc_4078E8, offset def_407512, offset def_407512
.text:0040711C                 dd offset def_407512, offset def_407512, offset def_407512
.text:0040711C                 dd offset def_407512, offset def_407512, offset def_407512
.text:0040711C                 dd offset def_407512, offset def_407512, offset def_407512
.text:0040711C                 dd offset def_407512, offset def_407512, offset def_407512
.text:0040711C                 dd offset def_407512, offset def_407512, offset loc_4078E8
.text:0040711C                 dd offset loc_4078E8, offset loc_4078E8, offset loc_4078E8
.text:0040711C                 dd offset loc_4074CC, offset def_407115, offset def_407512
.text:0040711C                 dd offset def_407512, offset def_407512, offset def_407512
.text:0040711C                 dd offset def_407512, offset def_407512, offset def_407512
.text:0040711C                 dd offset def_407512, offset def_407512, offset def_407512
.text:0040711C                 dd offset def_407512, offset def_407512, offset def_407512
.text:0040711C                 dd offset def_407512, offset def_407512, offset def_407512
.text:0040711C                 dd offset def_407512, offset def_407512, offset def_407512
.text:0040711C                 dd offset def_407512, offset def_407512, offset def_407512
.text:0040711C                 dd offset def_407512, offset def_407512, offset def_407512
.text:0040711C                 dd offset def_407512, offset loc_4078E8, offset loc_4078E1
.text:0040711C                 dd offset def_407512, offset loc_4078E8, offset def_407512
.text:0040711C                 dd offset loc_4078E8, offset def_407512, offset def_407512
.text:0040711C                 dd offset def_407512, offset def_407512, offset def_407512
.text:0040711C                 dd offset def_407512, offset def_407512, offset def_407512
.text:0040711C                 dd offset def_407512, offset def_407512, offset def_407512
.text:0040711C                 dd offset def_407512, offset def_407512, offset def_407512
.text:0040711C                 dd offset def_407512, offset def_407512, offset def_407512
.text:0040711C                 dd offset def_407512, offset def_407512, offset def_407512
.text:0040711C                 dd offset def_407512, offset def_407512, offset def_407512
.text:0040711C                 dd offset def_407512, offset def_407512, offset def_407512
.text:0040711C                 dd offset loc_4078F8, offset loc_4078E8, offset loc_4078F8
.text:0040711C                 dd offset loc_40790A
.text:00407318 ; ---------------------------------------------------------------------------
.text:00407318
.text:00407318 loc_407318:                             ; CODE XREF: sub_407010+105↑j
.text:00407318                                         ; DATA XREF: sub_407010:jpt_407115↑o
.text:00407318                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00407115 case 0
.text:0040731D                 lea     eax, [ebp+1]
.text:00407320                 jz      loc_4073D0
.text:00407326                 mov     esi, [esp+4Ch+arg_4]
.text:0040732A                 cmp     [esp+4Ch+var_34], esi
.text:0040732E                 jnb     short loc_40733C
.text:00407330                 mov     eax, [esp+4Ch+arg_0]
.text:00407334                 mov     ebx, [esp+4Ch+var_34]
.text:00407338                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040733C
.text:0040733C loc_40733C:                             ; CODE XREF: sub_407010+31E↑j
.text:0040733C                 inc     [esp+4Ch+var_34]
.text:00407340                 mov     edx, [esp+4Ch+arg_4]
.text:00407344                 cmp     [esp+4Ch+var_34], edx
.text:00407348                 jnb     short loc_407356
.text:0040734A                 mov     edi, [esp+4Ch+arg_0]
.text:0040734E                 mov     ecx, [esp+4Ch+var_34]
.text:00407352                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00407356
.text:00407356 loc_407356:                             ; CODE XREF: sub_407010+338↑j
.text:00407356                 inc     [esp+4Ch+var_34]
.text:0040735A                 mov     esi, [esp+4Ch+arg_4]
.text:0040735E                 cmp     [esp+4Ch+var_34], esi
.text:00407362                 jnb     short loc_407370
.text:00407364                 mov     ebx, [esp+4Ch+arg_0]
.text:00407368                 mov     eax, [esp+4Ch+var_34]
.text:0040736C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00407370
.text:00407370 loc_407370:                             ; CODE XREF: sub_407010+352↑j
.text:00407370                 inc     [esp+4Ch+var_34]
.text:00407374                 mov     bl, 30h ; '0'
.text:00407376                 lea     esi, [esi+0]
.text:00407379                 lea     edi, [edi+0]
.text:00407380
.text:00407380 def_407512:                             ; CODE XREF: sub_407010+105↑j
.text:00407380                                         ; sub_407010+463↓j ...
.text:00407380                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00407115 cases 37,43-58,65-90,93,95,97-122
.text:00407380                                         ; jumptable 00407512 default case, cases 34-38,42-44,46,48-59
.text:00407385                 lea     eax, [ebp+1]
.text:00407388                 jz      short loc_4073D0
.text:0040738A                 mov     cl, bl
.text:0040738C                 mov     edi, [esp+4Ch+arg_14]
.text:00407390                 mov     esi, 1
.text:00407395                 shr     cl, 5
.text:00407398                 movzx   edx, cl
.text:0040739B                 mov     ecx, ebx
.text:0040739D                 and     ecx, 1Fh
.text:004073A0                 shl     esi, cl
.text:004073A2                 test    [edi+edx*4+4], esi
.text:004073A6                 jz      short loc_4073C2
.text:004073A8
.text:004073A8 loc_4073A8:                             ; CODE XREF: sub_407010+3FC↓j
.text:004073A8                 mov     edx, [esp+4Ch+arg_4]
.text:004073AC                 cmp     [esp+4Ch+var_34], edx
.text:004073B0                 jnb     short loc_4073BE
.text:004073B2                 mov     edi, [esp+4Ch+arg_0]
.text:004073B6                 mov     esi, [esp+4Ch+var_34]
.text:004073BA                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:004073BE
.text:004073BE loc_4073BE:                             ; CODE XREF: sub_407010+3A0↑j
.text:004073BE                 inc     [esp+4Ch+var_34]
.text:004073C2
.text:004073C2 loc_4073C2:                             ; CODE XREF: sub_407010+396↑j
.text:004073C2                 lea     eax, [ebp+1]
.text:004073C5                 lea     esi, [esi+0]
.text:004073C9                 lea     edi, [edi+0]
.text:004073D0
.text:004073D0 loc_4073D0:                             ; CODE XREF: sub_407010+310↑j
.text:004073D0                                         ; sub_407010+378↑j ...
.text:004073D0                 mov     ebp, [esp+4Ch+arg_4]
.text:004073D4                 cmp     [esp+4Ch+var_34], ebp
.text:004073D8                 jnb     short loc_4073E5
.text:004073DA                 mov     edx, [esp+4Ch+arg_0]
.text:004073DE                 mov     ecx, [esp+4Ch+var_34]
.text:004073E2                 mov     [ecx+edx], bl
.text:004073E5
.text:004073E5 loc_4073E5:                             ; CODE XREF: sub_407010+3C8↑j
.text:004073E5                 inc     [esp+4Ch+var_34]
.text:004073E9                 mov     ebp, eax
.text:004073EB                 jmp     loc_4070A0
.text:004073F0 ; ---------------------------------------------------------------------------
.text:004073F0
.text:004073F0 loc_4073F0:                             ; CODE XREF: sub_407010+105↑j
.text:004073F0                                         ; DATA XREF: sub_407010:jpt_407115↑o
.text:004073F0                 mov     dl, 61h ; 'a'   ; jumptable 00407115 case 7
.text:004073F2                 lea     esi, [esi+0]
.text:004073F9                 lea     edi, [edi+0]
.text:00407400
.text:00407400 loc_407400:                             ; CODE XREF: sub_407010+400↓j
.text:00407400                                         ; sub_407010+409↓j ...
.text:00407400                 cmp     [esp+4Ch+var_21], 0
.text:00407405                 lea     eax, [ebp+1]
.text:00407408                 jz      short loc_4073D0
.text:0040740A                 mov     bl, dl
.text:0040740C                 jmp     short loc_4073A8
.text:0040740E ; ---------------------------------------------------------------------------
.text:0040740E
.text:0040740E loc_40740E:                             ; CODE XREF: sub_407010+105↑j
.text:0040740E                                         ; DATA XREF: sub_407010:jpt_407115↑o
.text:0040740E                 mov     dl, 62h ; 'b'   ; jumptable 00407115 case 8
.text:00407410                 jmp     short loc_407400
.text:00407412 ; ---------------------------------------------------------------------------
.text:00407412
.text:00407412 loc_407412:                             ; CODE XREF: sub_407010+105↑j
.text:00407412                                         ; DATA XREF: sub_407010:jpt_407115↑o
.text:00407412                 mov     dl, 74h ; 't'   ; jumptable 00407115 case 9
.text:00407414
.text:00407414 loc_407414:                             ; CODE XREF: sub_407010+449↓j
.text:00407414                                         ; sub_407010+455↓j ...
.text:00407414                 cmp     [esp+4Ch+arg_10], 1
.text:00407419                 jnz     short loc_407400
.text:0040741B
.text:0040741B loc_40741B:                             ; CODE XREF: sub_407010+45C↓j
.text:0040741B                                         ; sub_407010+4C1↓j ...
.text:0040741B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 004077E2 cases 91,92,94,96,124
.text:00407423                 mov     eax, [esp+4Ch+arg_14]
.text:00407427                 mov     edx, [esp+4Ch+arg_C]
.text:0040742B                 mov     ecx, [esp+4Ch+Str]
.text:0040742F                 mov     ebx, [esp+4Ch+arg_4]
.text:00407433                 mov     [esp+4Ch+var_38], eax ; int
.text:00407437                 mov     ebp, [esp+4Ch+arg_0]
.text:0040743B                 mov     [esp+4Ch+State], edx ; int
.text:0040743F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00407443                 mov     [esp+4Ch+Type], ebx ; int
.text:00407447                 mov     [esp+4Ch+C], ebp ; int
.text:0040744A                 call    sub_407010
.text:0040744F
.text:0040744F loc_40744F:                             ; CODE XREF: sub_407010+972↓j
.text:0040744F                 add     esp, 3Ch
.text:00407452                 pop     ebx
.text:00407453                 pop     esi
.text:00407454                 pop     edi
.text:00407455                 pop     ebp
.text:00407456                 retn
.text:00407457 ; ---------------------------------------------------------------------------
.text:00407457
.text:00407457 loc_407457:                             ; CODE XREF: sub_407010+105↑j
.text:00407457                                         ; DATA XREF: sub_407010:jpt_407115↑o
.text:00407457                 mov     dl, 6Eh ; 'n'   ; jumptable 00407115 case 10
.text:00407459                 jmp     short loc_407414
.text:0040745B ; ---------------------------------------------------------------------------
.text:0040745B
.text:0040745B loc_40745B:                             ; CODE XREF: sub_407010+105↑j
.text:0040745B                                         ; DATA XREF: sub_407010:jpt_407115↑o
.text:0040745B                 mov     dl, 76h ; 'v'   ; jumptable 00407115 case 11
.text:0040745D                 jmp     short loc_407400
.text:0040745F ; ---------------------------------------------------------------------------
.text:0040745F
.text:0040745F loc_40745F:                             ; CODE XREF: sub_407010+105↑j
.text:0040745F                                         ; DATA XREF: sub_407010:jpt_407115↑o
.text:0040745F                 mov     dl, 66h ; 'f'   ; jumptable 00407115 case 12
.text:00407461                 jmp     short loc_407400
.text:00407463 ; ---------------------------------------------------------------------------
.text:00407463
.text:00407463 loc_407463:                             ; CODE XREF: sub_407010+105↑j
.text:00407463                                         ; DATA XREF: sub_407010:jpt_407115↑o
.text:00407463                 mov     dl, 72h ; 'r'   ; jumptable 00407115 case 13
.text:00407465                 jmp     short loc_407414
.text:00407467 ; ---------------------------------------------------------------------------
.text:00407467
.text:00407467 loc_407467:                             ; CODE XREF: sub_407010+105↑j
.text:00407467                                         ; DATA XREF: sub_407010:jpt_407115↑o
.text:00407467                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00407115 case 39
.text:0040746C                 jz      short loc_40741B ; jumptable 004077E2 cases 91,92,94,96,124
.text:0040746E                 cmp     [esp+4Ch+arg_10], 2
.text:00407473                 jnz     def_407512      ; jumptable 00407115 cases 37,43-58,65-90,93,95,97-122
.text:00407473                                         ; jumptable 00407512 default case, cases 34-38,42-44,46,48-59
.text:00407479                 mov     edx, [esp+4Ch+arg_4]
.text:0040747D                 cmp     [esp+4Ch+var_34], edx
.text:00407481                 jnb     short loc_40748F
.text:00407483                 mov     ecx, [esp+4Ch+arg_0]
.text:00407487                 mov     edi, [esp+4Ch+var_34]
.text:0040748B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040748F
.text:0040748F loc_40748F:                             ; CODE XREF: sub_407010+471↑j
.text:0040748F                 inc     [esp+4Ch+var_34]
.text:00407493                 mov     eax, [esp+4Ch+arg_4]
.text:00407497                 cmp     [esp+4Ch+var_34], eax
.text:0040749B                 jnb     short loc_4074A9
.text:0040749D                 mov     esi, [esp+4Ch+arg_0]
.text:004074A1                 mov     edx, [esp+4Ch+var_34]
.text:004074A5                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:004074A9
.text:004074A9 loc_4074A9:                             ; CODE XREF: sub_407010+48B↑j
.text:004074A9                 inc     [esp+4Ch+var_34]
.text:004074AD                 mov     edi, [esp+4Ch+arg_4]
.text:004074B1                 cmp     [esp+4Ch+var_34], edi
.text:004074B5                 jnb     short loc_4074C3
.text:004074B7                 mov     ecx, [esp+4Ch+arg_0]
.text:004074BB                 mov     eax, [esp+4Ch+var_34]
.text:004074BF                 mov     byte ptr [eax+ecx], 27h ; '''
.text:004074C3
.text:004074C3 loc_4074C3:                             ; CODE XREF: sub_407010+4A5↑j
.text:004074C3                                         ; sub_407010+5C4↓j ...
.text:004074C3                 inc     [esp+4Ch+var_34]
.text:004074C7                 jmp     def_407512      ; jumptable 00407115 cases 37,43-58,65-90,93,95,97-122
.text:004074C7                                         ; jumptable 00407512 default case, cases 34-38,42-44,46,48-59
.text:004074CC ; ---------------------------------------------------------------------------
.text:004074CC
.text:004074CC loc_4074CC:                             ; CODE XREF: sub_407010+105↑j
.text:004074CC                                         ; DATA XREF: sub_407010:jpt_407115↑o
.text:004074CC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00407115 case 63
.text:004074D1                 jz      loc_40741B      ; jumptable 004077E2 cases 91,92,94,96,124
.text:004074D7                 cmp     [esp+4Ch+arg_10], 3
.text:004074DC                 jnz     def_407512      ; jumptable 00407115 cases 37,43-58,65-90,93,95,97-122
.text:004074DC                                         ; jumptable 00407512 default case, cases 34-38,42-44,46,48-59
.text:004074E2                 lea     edx, [ebp+2]
.text:004074E5                 cmp     edx, [esp+4Ch+arg_C]
.text:004074E9                 jnb     def_407512      ; jumptable 00407115 cases 37,43-58,65-90,93,95,97-122
.text:004074E9                                         ; jumptable 00407512 default case, cases 34-38,42-44,46,48-59
.text:004074EF                 mov     esi, [esp+4Ch+Str]
.text:004074F3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:004074F8                 jnz     def_407512      ; jumptable 00407115 cases 37,43-58,65-90,93,95,97-122
.text:004074F8                                         ; jumptable 00407512 default case, cases 34-38,42-44,46,48-59
.text:004074FE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00407503                 movsx   eax, cl
.text:00407506                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00407509                 cmp     eax, 1Dh
.text:0040750C                 ja      def_407512      ; jumptable 00407115 cases 37,43-58,65-90,93,95,97-122
.text:0040750C                                         ; jumptable 00407512 default case, cases 34-38,42-44,46,48-59
.text:00407512                 jmp     ds:jpt_407512[eax*4] ; switch jump
.text:00407512 ; ---------------------------------------------------------------------------
.text:00407519                 align 4
.text:0040751C jpt_407512      dd offset loc_407594    ; DATA XREF: sub_407010+502↑r
.text:0040751C                 dd offset def_407512    ; jump table for switch statement
.text:0040751C                 dd offset def_407512
.text:0040751C                 dd offset def_407512
.text:0040751C                 dd offset def_407512
.text:0040751C                 dd offset def_407512
.text:0040751C                 dd offset loc_407594
.text:0040751C                 dd offset loc_407594
.text:0040751C                 dd offset loc_407594
.text:0040751C                 dd offset def_407512
.text:0040751C                 dd offset def_407512
.text:0040751C                 dd offset def_407512
.text:0040751C                 dd offset loc_407594
.text:0040751C                 dd offset def_407512
.text:0040751C                 dd offset loc_407594
.text:0040751C                 dd offset def_407512
.text:0040751C                 dd offset def_407512
.text:0040751C                 dd offset def_407512
.text:0040751C                 dd offset def_407512
.text:0040751C                 dd offset def_407512
.text:0040751C                 dd offset def_407512
.text:0040751C                 dd offset def_407512
.text:0040751C                 dd offset def_407512
.text:0040751C                 dd offset def_407512
.text:0040751C                 dd offset def_407512
.text:0040751C                 dd offset def_407512
.text:0040751C                 dd offset def_407512
.text:0040751C                 dd offset loc_407594
.text:0040751C                 dd offset loc_407594
.text:0040751C                 dd offset loc_407594
.text:00407594 ; ---------------------------------------------------------------------------
.text:00407594
.text:00407594 loc_407594:                             ; CODE XREF: sub_407010+502↑j
.text:00407594                                         ; DATA XREF: sub_407010:jpt_407512↑o
.text:00407594                 mov     ebp, edx        ; jumptable 00407512 cases 33,39-41,45,47,60-62
.text:00407596                 mov     bl, cl
.text:00407598                 mov     edx, [esp+4Ch+arg_4]
.text:0040759C                 cmp     [esp+4Ch+var_34], edx
.text:004075A0                 jnb     short loc_4075AE
.text:004075A2                 mov     ecx, [esp+4Ch+arg_0]
.text:004075A6                 mov     edi, [esp+4Ch+var_34]
.text:004075AA                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:004075AE
.text:004075AE loc_4075AE:                             ; CODE XREF: sub_407010+590↑j
.text:004075AE                 inc     [esp+4Ch+var_34]
.text:004075B2                 mov     eax, [esp+4Ch+arg_4]
.text:004075B6                 cmp     [esp+4Ch+var_34], eax
.text:004075BA                 jnb     short loc_4075C8
.text:004075BC                 mov     edx, [esp+4Ch+arg_0]
.text:004075C0                 mov     esi, [esp+4Ch+var_34]
.text:004075C4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:004075C8
.text:004075C8 loc_4075C8:                             ; CODE XREF: sub_407010+5AA↑j
.text:004075C8                 inc     [esp+4Ch+var_34]
.text:004075CC                 mov     edi, [esp+4Ch+arg_4]
.text:004075D0                 cmp     [esp+4Ch+var_34], edi
.text:004075D4                 jnb     loc_4074C3
.text:004075DA                 mov     eax, [esp+4Ch+arg_0]
.text:004075DE                 mov     ecx, [esp+4Ch+var_34]
.text:004075E2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:004075E6                 jmp     loc_4074C3
.text:004075E6 ; ---------------------------------------------------------------------------
.text:004075EB                 align 10h
.text:004075F0
.text:004075F0 def_407115:                             ; CODE XREF: sub_407010+FF↑j
.text:004075F0                                         ; sub_407010+105↑j
.text:004075F0                                         ; DATA XREF: ...
.text:004075F0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00407115 default case, cases 1-6,14-31,64
.text:004075F5                 jz      loc_407720
.text:004075FB                 mov     [esp+4Ch+var_28], 1
.text:00407603                 mov     esi, ds:__mb_cur_max
.text:00407609                 movzx   edx, bl
.text:0040760C                 cmp     dword ptr [esi], 1
.text:0040760F                 jz      loc_407704
.text:00407615                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040761D                 mov     [esp+4Ch+C], edx ; C
.text:00407620                 call    _isctype
.text:00407625
.text:00407625 loc_407625:                             ; CODE XREF: sub_407010+705↓j
.text:00407625                 test    eax, eax
.text:00407627                 setnz   [esp+4Ch+var_29]
.text:0040762C
.text:0040762C loc_40762C:                             ; CODE XREF: sub_407010+7A5↓j
.text:0040762C                 cmp     [esp+4Ch+var_21], 0
.text:00407631                 lea     eax, [ebp+1]
.text:00407634                 jz      loc_4073D0
.text:0040763A                 cmp     [esp+4Ch+var_29], 0
.text:0040763F                 jnz     def_407512      ; jumptable 00407115 cases 37,43-58,65-90,93,95,97-122
.text:0040763F                                         ; jumptable 00407512 default case, cases 34-38,42-44,46,48-59
.text:00407645
.text:00407645 loc_407645:                             ; CODE XREF: sub_407010+7AB↓j
.text:00407645                 mov     eax, [esp+4Ch+var_28]
.text:00407649                 lea     edx, [eax+ebp]
.text:0040764C                 lea     esi, [esi+0]
.text:00407650
.text:00407650 loc_407650:                             ; CODE XREF: sub_407010+6EF↓j
.text:00407650                 cmp     [esp+4Ch+var_21], 0
.text:00407655                 jz      short loc_4076D0
.text:00407657                 cmp     [esp+4Ch+var_29], 0
.text:0040765C                 jnz     short loc_4076D0
.text:0040765E                 mov     edi, [esp+4Ch+arg_4]
.text:00407662                 cmp     [esp+4Ch+var_34], edi
.text:00407666                 jnb     short loc_407674
.text:00407668                 mov     esi, [esp+4Ch+arg_0]
.text:0040766C                 mov     eax, [esp+4Ch+var_34]
.text:00407670                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00407674
.text:00407674 loc_407674:                             ; CODE XREF: sub_407010+656↑j
.text:00407674                 inc     [esp+4Ch+var_34]
.text:00407678                 mov     ecx, [esp+4Ch+arg_4]
.text:0040767C                 cmp     [esp+4Ch+var_34], ecx
.text:00407680                 jnb     short loc_407695
.text:00407682                 mov     cl, bl
.text:00407684                 mov     esi, [esp+4Ch+arg_0]
.text:00407688                 mov     edi, [esp+4Ch+var_34]
.text:0040768C                 shr     cl, 6
.text:0040768F                 add     cl, 30h ; '0'
.text:00407692                 mov     [edi+esi], cl
.text:00407695
.text:00407695 loc_407695:                             ; CODE XREF: sub_407010+670↑j
.text:00407695                 inc     [esp+4Ch+var_34]
.text:00407699                 mov     edi, [esp+4Ch+arg_4]
.text:0040769D                 cmp     [esp+4Ch+var_34], edi
.text:004076A1                 jnb     short loc_4076B9
.text:004076A3                 mov     cl, bl
.text:004076A5                 mov     esi, [esp+4Ch+arg_0]
.text:004076A9                 shr     cl, 3
.text:004076AC                 mov     edi, [esp+4Ch+var_34]
.text:004076B0                 and     cl, 7
.text:004076B3                 add     cl, 30h ; '0'
.text:004076B6                 mov     [edi+esi], cl
.text:004076B9
.text:004076B9 loc_4076B9:                             ; CODE XREF: sub_407010+691↑j
.text:004076B9                 inc     [esp+4Ch+var_34]
.text:004076BD                 and     bl, 7
.text:004076C0                 add     bl, 30h ; '0'
.text:004076C3                 lea     esi, [esi+0]
.text:004076C9                 lea     edi, [edi+0]
.text:004076D0
.text:004076D0 loc_4076D0:                             ; CODE XREF: sub_407010+645↑j
.text:004076D0                                         ; sub_407010+64C↑j
.text:004076D0                 lea     eax, [ebp+1]
.text:004076D3                 cmp     edx, eax
.text:004076D5                 jbe     loc_4073D0
.text:004076DB                 mov     ebp, [esp+4Ch+arg_4]
.text:004076DF                 cmp     [esp+4Ch+var_34], ebp
.text:004076E3                 jnb     short loc_4076F0
.text:004076E5                 mov     ecx, [esp+4Ch+arg_0]
.text:004076E9                 mov     edi, [esp+4Ch+var_34]
.text:004076ED                 mov     [edi+ecx], bl
.text:004076F0
.text:004076F0 loc_4076F0:                             ; CODE XREF: sub_407010+6D3↑j
.text:004076F0                 inc     [esp+4Ch+var_34]
.text:004076F4                 mov     ebp, eax
.text:004076F6                 mov     eax, [esp+4Ch+Str]
.text:004076FA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:004076FF                 jmp     loc_407650
.text:00407704 ; ---------------------------------------------------------------------------
.text:00407704
.text:00407704 loc_407704:                             ; CODE XREF: sub_407010+5FF↑j
.text:00407704                 mov     ecx, ds:_pctype
.text:0040770A                 mov     edi, [ecx]
.text:0040770C                 movzx   eax, word ptr [edi+edx*2]
.text:00407710                 and     eax, 157h
.text:00407715                 jmp     loc_407625
.text:00407715 ; ---------------------------------------------------------------------------
.text:0040771A                 align 10h
.text:00407720
.text:00407720 loc_407720:                             ; CODE XREF: sub_407010+5E5↑j
.text:00407720                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00407725                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040772D                 mov     [esp+4Ch+var_28], 0
.text:00407735                 mov     [esp+4Ch+var_29], 1
.text:0040773A                 jz      loc_4078CC
.text:00407740
.text:00407740 loc_407740:                             ; CODE XREF: sub_407010+8CC↓j
.text:00407740                 mov     ecx, [esp+4Ch+arg_C]
.text:00407744                 lea     edx, [esp+4Ch+var_18]
.text:00407748                 mov     edi, [esp+4Ch+Str]
.text:0040774C                 mov     [esp+4Ch+State], edx ; State
.text:00407750                 lea     esi, [esp+4Ch+var_18._State]
.text:00407754                 sub     ecx, ebp
.text:00407756                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040775A                 add     edi, ebp
.text:0040775C                 mov     [esp+4Ch+var_30], edi
.text:00407760                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00407764                 mov     [esp+4Ch+C], esi ; DstCh
.text:00407767                 call    mbrtowc
.text:0040776C                 test    eax, eax
.text:0040776E                 mov     edi, eax
.text:00407770                 jz      short loc_4077B0
.text:00407772                 cmp     eax, 0FFFFFFFFh
.text:00407775                 jz      loc_4078C2
.text:0040777B                 cmp     eax, 0FFFFFFFEh
.text:0040777E                 jz      loc_407882
.text:00407784                 cmp     [esp+4Ch+arg_10], 1
.text:00407789                 jz      short loc_4077C0
.text:0040778B
.text:0040778B loc_40778B:                             ; CODE XREF: sub_407010+7B9↓j
.text:0040778B                                         ; sub_407010+86D↓j
.text:0040778B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00407790                 mov     [esp+4Ch+Type], 157h ; Type
.text:00407798                 mov     [esp+4Ch+C], ecx ; C
.text:0040779B                 call    iswctype
.text:004077A0                 test    eax, eax
.text:004077A2                 jnz     short loc_4077A9
.text:004077A4                 mov     [esp+4Ch+var_29], 0
.text:004077A9
.text:004077A9 loc_4077A9:                             ; CODE XREF: sub_407010+792↑j
.text:004077A9                 mov     [esp+4Ch+var_28], edi
.text:004077AD                 lea     esi, [esi+0]
.text:004077B0
.text:004077B0 loc_4077B0:                             ; CODE XREF: sub_407010+760↑j
.text:004077B0                                         ; sub_407010+87B↓j ...
.text:004077B0                 cmp     [esp+4Ch+var_28], 1
.text:004077B5                 jbe     loc_40762C
.text:004077BB                 jmp     loc_407645
.text:004077C0 ; ---------------------------------------------------------------------------
.text:004077C0
.text:004077C0 loc_4077C0:                             ; CODE XREF: sub_407010+779↑j
.text:004077C0                 cmp     [esp+4Ch+arg_10], eax
.text:004077C4                 mov     edx, 1
.text:004077C9                 jnb     short loc_40778B
.text:004077CB
.text:004077CB loc_4077CB:                             ; CODE XREF: sub_407010+867↓j
.text:004077CB                 mov     ecx, [esp+4Ch+Str]
.text:004077CF                 lea     esi, [edx+ebp]
.text:004077D2                 movsx   eax, byte ptr [esi+ecx]
.text:004077D6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:004077D9                 cmp     eax, 21h
.text:004077DC                 ja      def_4077E2      ; jumptable 004077E2 default case, cases 93,95,97-123
.text:004077E2                 jmp     ds:jpt_4077E2[eax*4] ; switch jump
.text:004077E2 ; ---------------------------------------------------------------------------
.text:004077E9                 align 4
.text:004077EC jpt_4077E2      dd offset loc_40741B    ; DATA XREF: sub_407010+7D2↑r
.text:004077EC                 dd offset loc_40741B    ; jump table for switch statement
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset loc_40741B
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset loc_40741B
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset def_4077E2
.text:004077EC                 dd offset loc_40741B
.text:00407874 ; ---------------------------------------------------------------------------
.text:00407874
.text:00407874 def_4077E2:                             ; CODE XREF: sub_407010+7CC↑j
.text:00407874                                         ; sub_407010+7D2↑j
.text:00407874                                         ; DATA XREF: ...
.text:00407874                 inc     edx             ; jumptable 004077E2 default case, cases 93,95,97-123
.text:00407875                 cmp     edx, edi
.text:00407877                 jb      loc_4077CB
.text:0040787D                 jmp     loc_40778B
.text:00407882 ; ---------------------------------------------------------------------------
.text:00407882
.text:00407882 loc_407882:                             ; CODE XREF: sub_407010+76E↑j
.text:00407882                 cmp     ebp, [esp+4Ch+arg_C]
.text:00407886                 mov     [esp+4Ch+var_29], 0
.text:0040788B                 jnb     loc_4077B0
.text:00407891                 mov     eax, [esp+4Ch+var_30]
.text:00407895                 cmp     byte ptr [eax], 0
.text:00407898                 jz      loc_4077B0
.text:0040789E
.text:0040789E loc_40789E:                             ; CODE XREF: sub_407010+8AB↓j
.text:0040789E                 inc     [esp+4Ch+var_28]
.text:004078A2                 mov     esi, [esp+4Ch+var_28]
.text:004078A6                 lea     eax, [esi+ebp]
.text:004078A9                 cmp     eax, [esp+4Ch+arg_C]
.text:004078AD                 jnb     loc_4077B0
.text:004078B3                 mov     edi, [esp+4Ch+Str]
.text:004078B7                 cmp     byte ptr [eax+edi], 0
.text:004078BB                 jnz     short loc_40789E
.text:004078BD                 jmp     loc_4077B0
.text:004078C2 ; ---------------------------------------------------------------------------
.text:004078C2
.text:004078C2 loc_4078C2:                             ; CODE XREF: sub_407010+765↑j
.text:004078C2                 mov     [esp+4Ch+var_29], 0
.text:004078C7                 jmp     loc_4077B0
.text:004078CC ; ---------------------------------------------------------------------------
.text:004078CC
.text:004078CC loc_4078CC:                             ; CODE XREF: sub_407010+72A↑j
.text:004078CC                 mov     edx, [esp+4Ch+Str]
.text:004078D0                 mov     [esp+4Ch+C], edx ; Str
.text:004078D3                 call    strlen
.text:004078D8                 mov     [esp+4Ch+arg_C], eax
.text:004078DC                 jmp     loc_407740
.text:004078E1 ; ---------------------------------------------------------------------------
.text:004078E1
.text:004078E1 loc_4078E1:                             ; CODE XREF: sub_407010+105↑j
.text:004078E1                                         ; DATA XREF: sub_407010:jpt_407115↑o
.text:004078E1                 mov     dl, bl          ; jumptable 00407115 case 92
.text:004078E3                 jmp     loc_407414
.text:004078E8 ; ---------------------------------------------------------------------------
.text:004078E8
.text:004078E8 loc_4078E8:                             ; CODE XREF: sub_407010+105↑j
.text:004078E8                                         ; sub_407010+902↓j
.text:004078E8                                         ; DATA XREF: ...
.text:004078E8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00407115 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:004078ED                 jnz     def_407512      ; jumptable 00407115 cases 37,43-58,65-90,93,95,97-122
.text:004078ED                                         ; jumptable 00407512 default case, cases 34-38,42-44,46,48-59
.text:004078F3                 jmp     loc_40741B      ; jumptable 004077E2 cases 91,92,94,96,124
.text:004078F8 ; ---------------------------------------------------------------------------
.text:004078F8
.text:004078F8 loc_4078F8:                             ; CODE XREF: sub_407010+105↑j
.text:004078F8                                         ; DATA XREF: sub_407010:jpt_407115↑o
.text:004078F8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00407115 cases 123,125
.text:004078FD                 jz      short loc_407914
.text:004078FF                 cmp     [esp+4Ch+arg_C], 1
.text:00407904
.text:00407904 loc_407904:                             ; CODE XREF: sub_407010+90C↓j
.text:00407904                 jnz     def_407512      ; jumptable 00407115 cases 37,43-58,65-90,93,95,97-122
.text:00407904                                         ; jumptable 00407512 default case, cases 34-38,42-44,46,48-59
.text:0040790A
.text:0040790A loc_40790A:                             ; CODE XREF: sub_407010+105↑j
.text:0040790A                                         ; DATA XREF: sub_407010:jpt_407115↑o
.text:0040790A                 test    ebp, ebp        ; jumptable 00407115 cases 35,126
.text:0040790C                 jnz     def_407512      ; jumptable 00407115 cases 37,43-58,65-90,93,95,97-122
.text:0040790C                                         ; jumptable 00407512 default case, cases 34-38,42-44,46,48-59
.text:00407912                 jmp     short loc_4078E8 ; jumptable 00407115 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00407914 ; ---------------------------------------------------------------------------
.text:00407914
.text:00407914 loc_407914:                             ; CODE XREF: sub_407010+8ED↑j
.text:00407914                 mov     esi, [esp+4Ch+Str]
.text:00407918                 cmp     byte ptr [esi+1], 0
.text:0040791C                 jmp     short loc_407904
.text:0040791E ; ---------------------------------------------------------------------------
.text:0040791E
.text:0040791E loc_40791E:                             ; CODE XREF: sub_407010:loc_4070AF↑j
.text:0040791E                 test    ebp, ebp
.text:00407920                 jnz     short loc_40792D
.text:00407922                 cmp     [esp+4Ch+arg_10], 1
.text:00407927                 jz      loc_40741B      ; jumptable 004077E2 cases 91,92,94,96,124
.text:0040792D
.text:0040792D loc_40792D:                             ; CODE XREF: sub_407010+910↑j
.text:0040792D                 mov     esi, [esp+4Ch+var_1C]
.text:00407931                 test    esi, esi
.text:00407933                 jz      short loc_407968
.text:00407935                 mov     edi, [esp+4Ch+var_1C]
.text:00407939                 movzx   eax, byte ptr [edi]
.text:0040793C                 test    al, al
.text:0040793E                 jz      short loc_407968
.text:00407940
.text:00407940 loc_407940:                             ; CODE XREF: sub_407010+956↓j
.text:00407940                 mov     ebp, [esp+4Ch+arg_4]
.text:00407944                 cmp     [esp+4Ch+var_34], ebp
.text:00407948                 jnb     short loc_407955
.text:0040794A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040794E                 mov     ebx, [esp+4Ch+var_34]
.text:00407952                 mov     [ebx+ecx], al
.text:00407955
.text:00407955 loc_407955:                             ; CODE XREF: sub_407010+938↑j
.text:00407955                 inc     [esp+4Ch+var_1C]
.text:00407959                 inc     [esp+4Ch+var_34]
.text:0040795D                 mov     edx, [esp+4Ch+var_1C]
.text:00407961                 movzx   eax, byte ptr [edx]
.text:00407964                 test    al, al
.text:00407966                 jnz     short loc_407940
.text:00407968
.text:00407968 loc_407968:                             ; CODE XREF: sub_407010+923↑j
.text:00407968                                         ; sub_407010+92E↑j
.text:00407968                 mov     eax, [esp+4Ch+arg_4]
.text:0040796C                 cmp     [esp+4Ch+var_34], eax
.text:00407970                 jnb     short loc_40797E
.text:00407972                 mov     edi, [esp+4Ch+arg_0]
.text:00407976                 mov     esi, [esp+4Ch+var_34]
.text:0040797A                 mov     byte ptr [esi+edi], 0
.text:0040797E
.text:0040797E loc_40797E:                             ; CODE XREF: sub_407010+960↑j
.text:0040797E                 mov     eax, [esp+4Ch+var_34]
.text:00407982                 jmp     loc_40744F
.text:00407987 ; ---------------------------------------------------------------------------
.text:00407987
.text:00407987 loc_407987:                             ; CODE XREF: sub_407010+95↑j
.text:00407987                 mov     ebx, [esp+4Ch+Str]
.text:0040798B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00407990                 jmp     loc_4070AF
.text:00407995 ; ---------------------------------------------------------------------------
.text:00407995
.text:00407995 loc_407995:                             ; CODE XREF: sub_407010+3D↑j
.text:00407995                                         ; DATA XREF: sub_407010:jpt_40704D↑o
.text:00407995                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040704D case 2
.text:00407999                 cmp     [esp+4Ch+var_34], edx
.text:0040799D                 jnb     short loc_4079A6
.text:0040799F                 mov     ecx, [esp+4Ch+arg_0]
.text:004079A3                 mov     byte ptr [ecx], 27h ; '''
.text:004079A6
.text:004079A6 loc_4079A6:                             ; CODE XREF: sub_407010+98D↑j
.text:004079A6                 mov     [esp+4Ch+var_34], 1
.text:004079AE                 mov     [esp+4Ch+var_1C], 406FFEh
.text:004079B6                 jmp     loc_407096
.text:004079BB ; ---------------------------------------------------------------------------
.text:004079BB
.text:004079BB loc_4079BB:                             ; CODE XREF: sub_407010+3D↑j
.text:004079BB                                         ; DATA XREF: sub_407010:jpt_40704D↑o
.text:004079BB                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040704D case 4
.text:004079C0                 jmp     def_40704D      ; jumptable 0040704D default case, cases 0,1
.text:004079C5 ; ---------------------------------------------------------------------------
.text:004079C5
.text:004079C5 loc_4079C5:                             ; CODE XREF: sub_407010+3D↑j
.text:004079C5                                         ; DATA XREF: sub_407010:jpt_40704D↑o
.text:004079C5                 mov     [esp+4Ch+C], 407000h ; jumptable 0040704D cases 5,6
.text:004079CC                 call    ds:libintl_gettext
.text:004079D2                 cmp     eax, 407000h
.text:004079D7                 mov     edi, eax
.text:004079D9                 jz      short loc_407A50
.text:004079DB
.text:004079DB loc_4079DB:                             ; CODE XREF: sub_407010+A45↓j
.text:004079DB                                         ; sub_407010+A4C↓j
.text:004079DB                 mov     [esp+4Ch+C], 406FFEh
.text:004079E2                 call    ds:libintl_gettext
.text:004079E8                 cmp     eax, 406FFEh
.text:004079ED                 mov     edx, eax
.text:004079EF                 jz      short loc_407A42
.text:004079F1
.text:004079F1 loc_4079F1:                             ; CODE XREF: sub_407010+A37↓j
.text:004079F1                                         ; sub_407010+A3E↓j
.text:004079F1                 mov     [esp+4Ch+var_1C], edi
.text:004079F5                 cmp     byte ptr [edi], 0
.text:004079F8                 jz      short loc_407A28
.text:004079FA
.text:004079FA loc_4079FA:                             ; CODE XREF: sub_407010+A16↓j
.text:004079FA                 mov     ecx, [esp+4Ch+arg_4]
.text:004079FE                 cmp     [esp+4Ch+var_34], ecx
.text:00407A02                 jnb     short loc_407A17
.text:00407A04                 mov     ebp, [esp+4Ch+var_1C]
.text:00407A08                 mov     edi, [esp+4Ch+arg_0]
.text:00407A0C                 mov     esi, [esp+4Ch+var_34]
.text:00407A10                 movzx   ebx, byte ptr [ebp+0]
.text:00407A14                 mov     [esi+edi], bl
.text:00407A17
.text:00407A17 loc_407A17:                             ; CODE XREF: sub_407010+9F2↑j
.text:00407A17                 inc     [esp+4Ch+var_1C]
.text:00407A1B                 inc     [esp+4Ch+var_34]
.text:00407A1F                 mov     eax, [esp+4Ch+var_1C]
.text:00407A23                 cmp     byte ptr [eax], 0
.text:00407A26                 jnz     short loc_4079FA
.text:00407A28
.text:00407A28 loc_407A28:                             ; CODE XREF: sub_407010+9E8↑j
.text:00407A28                 mov     [esp+4Ch+var_21], 1
.text:00407A2D                 mov     [esp+4Ch+var_1C], edx
.text:00407A31                 mov     [esp+4Ch+C], edx ; Str
.text:00407A34                 call    strlen
.text:00407A39                 mov     [esp+4Ch+var_20], eax
.text:00407A3D                 jmp     def_40704D      ; jumptable 0040704D default case, cases 0,1
.text:00407A42 ; ---------------------------------------------------------------------------
.text:00407A42
.text:00407A42 loc_407A42:                             ; CODE XREF: sub_407010+9DF↑j
.text:00407A42                 cmp     [esp+4Ch+arg_10], 6
.text:00407A47                 jnz     short loc_4079F1
.text:00407A49                 mov     edx, offset asc_406FFC ; "\"'`"
.text:00407A4E                 jmp     short loc_4079F1
.text:00407A50 ; ---------------------------------------------------------------------------
.text:00407A50
.text:00407A50 loc_407A50:                             ; CODE XREF: sub_407010+9C9↑j
.text:00407A50                 cmp     [esp+4Ch+arg_10], 6
.text:00407A55                 jnz     short loc_4079DB
.text:00407A57                 mov     edi, offset asc_406FFC ; "\"'`"
.text:00407A5C                 jmp     loc_4079DB
.text:00407A5C sub_407010      endp
.text:00407A5C
.text:00407A61 ; ---------------------------------------------------------------------------
.text:00407A61                 jmp     short loc_407A70
.text:00407A61 ; ---------------------------------------------------------------------------
.text:00407A63                 align 10h
.text:00407A70
.text:00407A70 loc_407A70:                             ; CODE XREF: .text:00407A61↑j
.text:00407A70                 sub     esp, 0Ch
.text:00407A73                 mov     [esp+4], ebx
.text:00407A77                 mov     [esp+8], esi
.text:00407A7B                 call    _errno
.text:00407A80                 mov     esi, [eax]
.text:00407A82                 mov     dword ptr [esp], 24h ; '$'
.text:00407A89                 call    sub_406A10
.text:00407A8E                 mov     edx, [esp+10h]
.text:00407A92                 mov     ebx, eax
.text:00407A94                 test    edx, edx
.text:00407A96                 jz      short loc_407AE1
.text:00407A98
.text:00407A98 loc_407A98:                             ; CODE XREF: .text:00407AE6↓j
.text:00407A98                 mov     ecx, [edx]
.text:00407A9A                 mov     [ebx], ecx
.text:00407A9C                 mov     ecx, [edx+4]
.text:00407A9F                 mov     [ebx+4], ecx
.text:00407AA2                 mov     ecx, [edx+8]
.text:00407AA5                 mov     [ebx+8], ecx
.text:00407AA8                 mov     ecx, [edx+0Ch]
.text:00407AAB                 mov     [ebx+0Ch], ecx
.text:00407AAE                 mov     ecx, [edx+10h]
.text:00407AB1                 mov     [ebx+10h], ecx
.text:00407AB4                 mov     ecx, [edx+14h]
.text:00407AB7                 mov     [ebx+14h], ecx
.text:00407ABA                 mov     ecx, [edx+18h]
.text:00407ABD                 mov     [ebx+18h], ecx
.text:00407AC0                 mov     ecx, [edx+1Ch]
.text:00407AC3                 mov     [ebx+1Ch], ecx
.text:00407AC6                 mov     ecx, [edx+20h]
.text:00407AC9                 mov     [ebx+20h], ecx
.text:00407ACC                 call    _errno
.text:00407AD1                 mov     [eax], esi
.text:00407AD3                 mov     esi, [esp+8]
.text:00407AD7                 mov     eax, ebx
.text:00407AD9                 mov     ebx, [esp+4]
.text:00407ADD                 add     esp, 0Ch
.text:00407AE0                 retn
.text:00407AE1 ; ---------------------------------------------------------------------------
.text:00407AE1
.text:00407AE1 loc_407AE1:                             ; CODE XREF: .text:00407A96↑j
.text:00407AE1                 mov     edx, offset dword_413190
.text:00407AE6                 jmp     short loc_407A98
.text:00407AE6 ; ---------------------------------------------------------------------------
.text:00407AE8                 align 10h
.text:00407AF0                 mov     eax, [esp+4]
.text:00407AF4                 test    eax, eax
.text:00407AF6                 jz      short loc_407B00
.text:00407AF8
.text:00407AF8 loc_407AF8:                             ; CODE XREF: .text:00407B05↓j
.text:00407AF8                 mov     eax, [eax]
.text:00407AFA                 retn
.text:00407AFA ; ---------------------------------------------------------------------------
.text:00407AFB                 align 10h
.text:00407B00
.text:00407B00 loc_407B00:                             ; CODE XREF: .text:00407AF6↑j
.text:00407B00                 mov     eax, offset dword_413190
.text:00407B05                 jmp     short loc_407AF8
.text:00407B05 ; ---------------------------------------------------------------------------
.text:00407B07                 align 10h
.text:00407B10                 mov     edx, [esp+4]
.text:00407B14                 test    edx, edx
.text:00407B16                 jz      short loc_407B20
.text:00407B18
.text:00407B18 loc_407B18:                             ; CODE XREF: .text:00407B25↓j
.text:00407B18                 mov     ecx, [esp+8]
.text:00407B1C                 mov     [edx], ecx
.text:00407B1E                 retn
.text:00407B1E ; ---------------------------------------------------------------------------
.text:00407B1F                 align 10h
.text:00407B20
.text:00407B20 loc_407B20:                             ; CODE XREF: .text:00407B16↑j
.text:00407B20                 mov     edx, offset dword_413190
.text:00407B25                 jmp     short loc_407B18
.text:00407B25 ; ---------------------------------------------------------------------------
.text:00407B27                 align 10h
.text:00407B30                 sub     esp, 8
.text:00407B33                 mov     eax, [esp+0Ch]
.text:00407B37                 movzx   ecx, byte ptr [esp+10h]
.text:00407B3C                 mov     [esp], ebx
.text:00407B3F                 mov     ebx, [esp+14h]
.text:00407B43                 mov     [esp+4], esi
.text:00407B47                 mov     dl, cl
.text:00407B49                 shr     dl, 5
.text:00407B4C                 movzx   edx, dl
.text:00407B4F                 shl     edx, 2
.text:00407B52                 test    eax, eax
.text:00407B54                 lea     esi, [edx+eax+4]
.text:00407B58                 jz      short loc_407B80
.text:00407B5A
.text:00407B5A loc_407B5A:                             ; CODE XREF: .text:00407B86↓j
.text:00407B5A                 mov     edx, [esi]
.text:00407B5C                 and     ecx, 1Fh
.text:00407B5F                 and     ebx, 1
.text:00407B62                 mov     eax, edx
.text:00407B64                 shr     eax, cl
.text:00407B66                 and     eax, 1
.text:00407B69                 xor     ebx, eax
.text:00407B6B                 shl     ebx, cl
.text:00407B6D                 xor     edx, ebx
.text:00407B6F                 mov     [esi], edx
.text:00407B71                 mov     ebx, [esp]
.text:00407B74                 mov     esi, [esp+4]
.text:00407B78                 add     esp, 8
.text:00407B7B                 retn
.text:00407B7B ; ---------------------------------------------------------------------------
.text:00407B7C                 align 10h
.text:00407B80
.text:00407B80 loc_407B80:                             ; CODE XREF: .text:00407B58↑j
.text:00407B80                 lea     esi, dword_413194[edx]
.text:00407B86                 jmp     short loc_407B5A
.text:00407B86 ; ---------------------------------------------------------------------------
.text:00407B88                 align 10h
.text:00407B90                 sub     esp, 2Ch
.text:00407B93                 mov     [esp+24h], ebx
.text:00407B97                 mov     ebx, [esp+40h]
.text:00407B9B                 mov     [esp+28h], esi
.text:00407B9F                 test    ebx, ebx
.text:00407BA1                 jz      short loc_407BF0
.text:00407BA3
.text:00407BA3 loc_407BA3:                             ; CODE XREF: .text:00407BF5↓j
.text:00407BA3                 call    _errno
.text:00407BA8                 mov     esi, [eax]
.text:00407BAA                 mov     [esp+14h], ebx
.text:00407BAE                 mov     edx, [ebx]
.text:00407BB0                 mov     ecx, [esp+38h]
.text:00407BB4                 mov     ebx, [esp+3Ch]
.text:00407BB8                 mov     [esp+10h], edx
.text:00407BBC                 mov     edx, [esp+34h]
.text:00407BC0                 mov     [esp+0Ch], ebx
.text:00407BC4                 mov     [esp+8], ecx
.text:00407BC8                 mov     [esp+4], edx
.text:00407BCC                 mov     edx, [esp+30h]
.text:00407BD0                 mov     [esp], edx
.text:00407BD3                 call    sub_407010
.text:00407BD8                 mov     ebx, eax
.text:00407BDA                 call    _errno
.text:00407BDF                 mov     [eax], esi
.text:00407BE1                 mov     esi, [esp+28h]
.text:00407BE5                 mov     eax, ebx
.text:00407BE7                 mov     ebx, [esp+24h]
.text:00407BEB                 add     esp, 2Ch
.text:00407BEE                 retn
.text:00407BEE ; ---------------------------------------------------------------------------
.text:00407BEF                 align 10h
.text:00407BF0
.text:00407BF0 loc_407BF0:                             ; CODE XREF: .text:00407BA1↑j
.text:00407BF0                 mov     ebx, offset dword_413190
.text:00407BF5                 jmp     short loc_407BA3
.text:00407BF5 ; ---------------------------------------------------------------------------
.text:00407BF7                 align 10h
.text:00407C00                 push    ebp
.text:00407C01                 push    edi
.text:00407C02                 push    esi
.text:00407C03                 push    ebx
.text:00407C04                 sub     esp, 2Ch
.text:00407C07                 mov     ebp, [esp+48h]
.text:00407C0B                 call    _errno
.text:00407C10                 mov     edx, [eax]
.text:00407C12                 test    ebp, ebp
.text:00407C14                 mov     ebx, ebp
.text:00407C16                 mov     [esp+28h], edx
.text:00407C1A                 jz      loc_407CD0
.text:00407C20
.text:00407C20 loc_407C20:                             ; CODE XREF: .text:00407CD5↓j
.text:00407C20                 call    _errno
.text:00407C25                 mov     edi, [eax]
.text:00407C27                 mov     esi, ebp
.text:00407C29                 mov     [esp+14h], ebx
.text:00407C2D                 mov     ecx, [ebx]
.text:00407C2F                 mov     dword ptr [esp], 0
.text:00407C36                 mov     edx, [esp+44h]
.text:00407C3A                 mov     dword ptr [esp+4], 0
.text:00407C42                 mov     eax, [esp+40h]
.text:00407C46                 mov     [esp+10h], ecx
.text:00407C4A                 mov     [esp+0Ch], edx
.text:00407C4E                 mov     [esp+8], eax
.text:00407C52                 call    sub_407010
.text:00407C57                 mov     ebx, eax
.text:00407C59                 call    _errno
.text:00407C5E                 mov     [eax], edi
.text:00407C60                 lea     edi, [ebx+1]
.text:00407C63                 mov     [esp], edi
.text:00407C66                 call    sub_406A10
.text:00407C6B                 mov     [esp+24h], eax
.text:00407C6F                 test    ebp, ebp
.text:00407C71                 jz      short loc_407CC2
.text:00407C73
.text:00407C73 loc_407C73:                             ; CODE XREF: .text:00407CC7↓j
.text:00407C73                 call    _errno
.text:00407C78                 mov     ebp, [eax]
.text:00407C7A                 mov     [esp+14h], esi
.text:00407C7E                 mov     ecx, [esi]
.text:00407C80                 mov     [esp+4], edi
.text:00407C84                 mov     edx, [esp+44h]
.text:00407C88                 mov     esi, [esp+24h]
.text:00407C8C                 mov     [esp+10h], ecx
.text:00407C90                 mov     eax, [esp+40h]
.text:00407C94                 mov     [esp+0Ch], edx
.text:00407C98                 mov     [esp], esi
.text:00407C9B                 mov     [esp+8], eax
.text:00407C9F                 call    sub_407010
.text:00407CA4                 call    _errno
.text:00407CA9                 mov     [eax], ebp
.text:00407CAB                 call    _errno
.text:00407CB0                 mov     ebx, [esp+28h]
.text:00407CB4                 mov     [eax], ebx
.text:00407CB6                 mov     eax, [esp+24h]
.text:00407CBA                 add     esp, 2Ch
.text:00407CBD                 pop     ebx
.text:00407CBE                 pop     esi
.text:00407CBF                 pop     edi
.text:00407CC0                 pop     ebp
.text:00407CC1                 retn
.text:00407CC2 ; ---------------------------------------------------------------------------
.text:00407CC2
.text:00407CC2 loc_407CC2:                             ; CODE XREF: .text:00407C71↑j
.text:00407CC2                 mov     esi, offset dword_413190
.text:00407CC7                 jmp     short loc_407C73
.text:00407CC7 ; ---------------------------------------------------------------------------
.text:00407CC9                 align 10h
.text:00407CD0
.text:00407CD0 loc_407CD0:                             ; CODE XREF: .text:00407C1A↑j
.text:00407CD0                 mov     ebx, offset dword_413190
.text:00407CD5                 jmp     loc_407C20
.text:00407CD5 ; ---------------------------------------------------------------------------
.text:00407CDA                 align 10h
.text:00407CE0                 sub     esp, 1Ch
.text:00407CE3                 mov     edx, [esp+24h]
.text:00407CE7                 mov     dword ptr [esp+0Ch], offset dword_413190
.text:00407CEF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00407CF7                 mov     [esp+4], edx
.text:00407CFB                 mov     edx, [esp+20h]
.text:00407CFF                 mov     [esp], edx
.text:00407D02                 call    sub_408150
.text:00407D07                 add     esp, 1Ch
.text:00407D0A                 retn
.text:00407D0A ; ---------------------------------------------------------------------------
.text:00407D0B                 align 10h
.text:00407D10                 sub     esp, 1Ch
.text:00407D13                 mov     edx, [esp+20h]
.text:00407D17                 mov     dword ptr [esp+0Ch], offset dword_413190
.text:00407D1F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00407D27                 mov     [esp+4], edx
.text:00407D2B                 mov     dword ptr [esp], 0
.text:00407D32                 call    sub_408150
.text:00407D37                 add     esp, 1Ch
.text:00407D3A                 retn
.text:00407D3A ; ---------------------------------------------------------------------------
.text:00407D3B                 align 10h
.text:00407D40
.text:00407D40 ; =============== S U B R O U T I N E =======================================
.text:00407D40
.text:00407D40
.text:00407D40 ; int __cdecl sub_407D40(int, int, char *)
.text:00407D40 sub_407D40      proc near               ; CODE XREF: .text:00406CBA↑p
.text:00407D40                                         ; sub_406CD0+1A↑p
.text:00407D40
.text:00407D40 var_BC          = dword ptr -0BCh
.text:00407D40 var_B8          = dword ptr -0B8h
.text:00407D40 var_B4          = dword ptr -0B4h
.text:00407D40 var_B0          = dword ptr -0B0h
.text:00407D40 var_AC          = dword ptr -0ACh
.text:00407D40 var_A8          = dword ptr -0A8h
.text:00407D40 var_A4          = dword ptr -0A4h
.text:00407D40 var_A0          = dword ptr -0A0h
.text:00407D40 var_9C          = dword ptr -9Ch
.text:00407D40 var_98          = dword ptr -98h
.text:00407D40 var_94          = dword ptr -94h
.text:00407D40 var_90          = dword ptr -90h
.text:00407D40 var_8C          = dword ptr -8Ch
.text:00407D40 var_7C          = dword ptr -7Ch
.text:00407D40 var_78          = dword ptr -78h
.text:00407D40 var_74          = dword ptr -74h
.text:00407D40 var_70          = dword ptr -70h
.text:00407D40 var_6C          = dword ptr -6Ch
.text:00407D40 var_68          = dword ptr -68h
.text:00407D40 var_64          = dword ptr -64h
.text:00407D40 var_60          = dword ptr -60h
.text:00407D40 var_5C          = dword ptr -5Ch
.text:00407D40 var_4C          = dword ptr -4Ch
.text:00407D40 var_48          = dword ptr -48h
.text:00407D40 var_44          = dword ptr -44h
.text:00407D40 var_40          = dword ptr -40h
.text:00407D40 var_3C          = dword ptr -3Ch
.text:00407D40 var_38          = dword ptr -38h
.text:00407D40 var_34          = dword ptr -34h
.text:00407D40 var_30          = dword ptr -30h
.text:00407D40 var_2C          = dword ptr -2Ch
.text:00407D40 arg_0           = dword ptr  4
.text:00407D40 arg_4           = dword ptr  8
.text:00407D40 arg_8           = dword ptr  0Ch
.text:00407D40
.text:00407D40                 push    ebp
.text:00407D41                 xor     eax, eax
.text:00407D43                 mov     ecx, 8
.text:00407D48                 push    edi
.text:00407D49                 push    esi
.text:00407D4A                 push    ebx
.text:00407D4B                 sub     esp, 0ACh
.text:00407D51                 mov     ebp, [esp+0BCh+arg_4]
.text:00407D58                 cld
.text:00407D59                 lea     edi, [esp+0BCh+var_A8]
.text:00407D5D                 mov     [esp+0BCh+var_AC], ebp
.text:00407D61                 rep stosd
.text:00407D63                 mov     eax, [esp+0BCh+var_8C]
.text:00407D67                 mov     edi, [esp+0BCh+var_AC]
.text:00407D6B                 mov     esi, [esp+0BCh+var_A8]
.text:00407D6F                 mov     [esp+0BCh+var_5C], eax
.text:00407D73                 mov     ebp, [esp+0BCh+var_A4]
.text:00407D77                 mov     eax, [esp+0BCh+var_AC]
.text:00407D7B                 mov     [esp+0BCh+var_7C], edi
.text:00407D7F                 mov     ecx, [esp+0BCh+var_94]
.text:00407D83                 mov     edi, [esp+0BCh+var_A0]
.text:00407D87                 mov     [esp+0BCh+var_78], esi
.text:00407D8B                 mov     edx, [esp+0BCh+var_90]
.text:00407D8F                 mov     esi, [esp+0BCh+var_9C]
.text:00407D93                 mov     [esp+0BCh+var_4C], eax
.text:00407D97                 mov     ebx, [esp+0BCh+var_98]
.text:00407D9B                 mov     eax, [esp+0BCh+var_A8]
.text:00407D9F                 mov     [esp+0BCh+var_74], ebp
.text:00407DA3                 mov     [esp+0BCh+var_70], edi
.text:00407DA7                 mov     [esp+0BCh+var_6C], esi
.text:00407DAB                 mov     [esp+0BCh+var_68], ebx
.text:00407DAF                 mov     [esp+0BCh+var_64], ecx
.text:00407DB3                 mov     [esp+0BCh+var_60], edx
.text:00407DB7                 mov     [esp+0BCh+var_48], eax
.text:00407DBB                 mov     [esp+0BCh+var_44], ebp
.text:00407DBF                 mov     [esp+0BCh+var_40], edi
.text:00407DC3                 mov     [esp+0BCh+var_3C], esi
.text:00407DCA                 mov     [esp+0BCh+var_38], ebx
.text:00407DD1                 mov     ebx, [esp+0BCh+var_8C]
.text:00407DD5                 mov     [esp+0BCh+var_30], edx
.text:00407DDC                 mov     edx, [esp+0BCh+arg_8]
.text:00407DE3                 mov     [esp+0BCh+var_34], ecx
.text:00407DEA                 lea     ecx, [esp+0BCh+var_4C]
.text:00407DEE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00407DF2                 mov     edx, [esp+0BCh+arg_0]
.text:00407DF9                 mov     [esp+0BCh+var_2C], ebx
.text:00407E00                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00407E04                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:00407E0C                 mov     [esp+0BCh+var_BC], edx ; int
.text:00407E0F                 call    sub_408150
.text:00407E14                 add     esp, 0ACh
.text:00407E1A                 pop     ebx
.text:00407E1B                 pop     esi
.text:00407E1C                 pop     edi
.text:00407E1D                 pop     ebp
.text:00407E1E                 retn
.text:00407E1E sub_407D40      endp
.text:00407E1E
.text:00407E1E ; ---------------------------------------------------------------------------
.text:00407E1F                 align 10h
.text:00407E20                 push    ebp
.text:00407E21                 xor     eax, eax
.text:00407E23                 mov     ecx, 8
.text:00407E28                 push    edi
.text:00407E29                 push    esi
.text:00407E2A                 push    ebx
.text:00407E2B                 sub     esp, 0ACh
.text:00407E31                 mov     edx, [esp+0C4h]
.text:00407E38                 cld
.text:00407E39                 lea     edi, [esp+14h]
.text:00407E3D                 mov     [esp+10h], edx
.text:00407E41                 rep stosd
.text:00407E43                 mov     eax, [esp+30h]
.text:00407E47                 mov     ebp, [esp+10h]
.text:00407E4B                 mov     edi, [esp+14h]
.text:00407E4F                 mov     [esp+60h], eax
.text:00407E53                 mov     esi, [esp+20h]
.text:00407E57                 mov     eax, [esp+10h]
.text:00407E5B                 mov     [esp+40h], ebp
.text:00407E5F                 mov     ecx, [esp+28h]
.text:00407E63                 mov     ebp, [esp+18h]
.text:00407E67                 mov     [esp+44h], edi
.text:00407E6B                 mov     edx, [esp+2Ch]
.text:00407E6F                 mov     edi, [esp+1Ch]
.text:00407E73                 mov     [esp+70h], eax
.text:00407E77                 mov     ebx, [esp+24h]
.text:00407E7B                 mov     eax, [esp+14h]
.text:00407E7F                 mov     [esp+48h], ebp
.text:00407E83                 mov     [esp+4Ch], edi
.text:00407E87                 mov     [esp+50h], esi
.text:00407E8B                 mov     [esp+54h], ebx
.text:00407E8F                 mov     [esp+58h], ecx
.text:00407E93                 mov     [esp+5Ch], edx
.text:00407E97                 mov     [esp+74h], eax
.text:00407E9B                 mov     [esp+78h], ebp
.text:00407E9F                 mov     [esp+7Ch], edi
.text:00407EA3                 mov     [esp+80h], esi
.text:00407EAA                 mov     [esp+84h], ebx
.text:00407EB1                 mov     esi, [esp+30h]
.text:00407EB5                 lea     ebx, [esp+70h]
.text:00407EB9                 mov     [esp+8Ch], edx
.text:00407EC0                 mov     edx, [esp+0C8h]
.text:00407EC7                 mov     [esp+88h], ecx
.text:00407ECE                 mov     ecx, [esp+0CCh]
.text:00407ED5                 mov     [esp+4], edx
.text:00407ED9                 mov     edx, [esp+0C0h]
.text:00407EE0                 mov     [esp+90h], esi
.text:00407EE7                 mov     [esp+0Ch], ebx
.text:00407EEB                 mov     [esp+8], ecx
.text:00407EEF                 mov     [esp], edx
.text:00407EF2                 call    sub_408150
.text:00407EF7                 add     esp, 0ACh
.text:00407EFD                 pop     ebx
.text:00407EFE                 pop     esi
.text:00407EFF                 pop     edi
.text:00407F00                 pop     ebp
.text:00407F01                 retn
.text:00407F01 ; ---------------------------------------------------------------------------
.text:00407F02                 align 10h
.text:00407F10                 push    ebp
.text:00407F11                 xor     eax, eax
.text:00407F13                 mov     ecx, 8
.text:00407F18                 push    edi
.text:00407F19                 push    esi
.text:00407F1A                 push    ebx
.text:00407F1B                 sub     esp, 0ACh
.text:00407F21                 mov     edi, [esp+0C0h]
.text:00407F28                 cld
.text:00407F29                 mov     [esp+10h], edi
.text:00407F2D                 lea     edi, [esp+14h]
.text:00407F31                 rep stosd
.text:00407F33                 mov     eax, [esp+30h]
.text:00407F37                 mov     esi, [esp+10h]
.text:00407F3B                 mov     ebx, [esp+14h]
.text:00407F3F                 mov     [esp+60h], eax
.text:00407F43                 mov     ebp, [esp+18h]
.text:00407F47                 mov     eax, [esp+10h]
.text:00407F4B                 mov     [esp+40h], esi
.text:00407F4F                 mov     edi, [esp+1Ch]
.text:00407F53                 mov     esi, [esp+20h]
.text:00407F57                 mov     [esp+44h], ebx
.text:00407F5B                 mov     ecx, [esp+28h]
.text:00407F5F                 mov     edx, [esp+2Ch]
.text:00407F63                 mov     [esp+70h], eax
.text:00407F67                 mov     ebx, [esp+24h]
.text:00407F6B                 mov     eax, [esp+14h]
.text:00407F6F                 mov     [esp+48h], ebp
.text:00407F73                 mov     [esp+4Ch], edi
.text:00407F77                 mov     [esp+50h], esi
.text:00407F7B                 mov     [esp+54h], ebx
.text:00407F7F                 mov     [esp+58h], ecx
.text:00407F83                 mov     [esp+5Ch], edx
.text:00407F87                 mov     [esp+74h], eax
.text:00407F8B                 mov     [esp+78h], ebp
.text:00407F8F                 mov     [esp+7Ch], edi
.text:00407F93                 mov     [esp+80h], esi
.text:00407F9A                 mov     [esp+84h], ebx
.text:00407FA1                 mov     [esp+8Ch], edx
.text:00407FA8                 lea     edx, [esp+70h]
.text:00407FAC                 mov     [esp+88h], ecx
.text:00407FB3                 mov     ecx, [esp+30h]
.text:00407FB7                 mov     [esp+0Ch], edx
.text:00407FBB                 mov     edx, [esp+0C4h]
.text:00407FC2                 mov     [esp+90h], ecx
.text:00407FC9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00407FD1                 mov     [esp+4], edx
.text:00407FD5                 mov     dword ptr [esp], 0
.text:00407FDC                 call    sub_408150
.text:00407FE1                 add     esp, 0ACh
.text:00407FE7                 pop     ebx
.text:00407FE8                 pop     esi
.text:00407FE9                 pop     edi
.text:00407FEA                 pop     ebp
.text:00407FEB                 retn
.text:00407FEB ; ---------------------------------------------------------------------------
.text:00407FEC                 align 10h
.text:00407FF0                 push    edi
.text:00407FF1                 push    esi
.text:00407FF2                 push    ebx
.text:00407FF3                 sub     esp, 40h
.text:00407FF6                 mov     edx, ds:dword_41319C
.text:00407FFC                 mov     ebx, ds:dword_413190
.text:00408002                 mov     esi, ds:dword_413198
.text:00408008                 mov     edi, ds:dword_413194
.text:0040800E                 mov     [esp+1Ch], edx
.text:00408012                 mov     ecx, ds:dword_4131A0
.text:00408018                 mov     edx, ds:dword_4131B0
.text:0040801E                 mov     [esp+10h], ebx
.text:00408022                 mov     ebx, ds:dword_4131A4
.text:00408028                 mov     [esp+30h], edx
.text:0040802C                 movzx   edx, byte ptr [esp+54h]
.text:00408031                 mov     [esp+18h], esi
.text:00408035                 mov     esi, ds:dword_4131AC
.text:0040803B                 mov     [esp+14h], edi
.text:0040803F                 mov     edi, ds:dword_4131A8
.text:00408045                 mov     [esp+20h], ecx
.text:00408049                 mov     cl, dl
.text:0040804B                 shr     cl, 5
.text:0040804E                 mov     [esp+24h], ebx
.text:00408052                 movzx   ebx, cl
.text:00408055                 mov     [esp+2Ch], esi
.text:00408059                 lea     esi, [esp+10h]
.text:0040805D                 mov     [esp+28h], edi
.text:00408061                 lea     edi, [esi+ebx*4]
.text:00408064                 mov     ebx, edx
.text:00408066                 mov     edx, [edi+4]
.text:00408069                 and     ebx, 1Fh
.text:0040806C                 mov     cl, bl
.text:0040806E                 mov     eax, edx
.text:00408070                 shr     eax, cl
.text:00408072                 and     eax, 1
.text:00408075                 xor     eax, 1
.text:00408078                 shl     eax, cl
.text:0040807A                 xor     edx, eax
.text:0040807C                 mov     [edi+4], edx
.text:0040807F                 mov     edx, [esp+50h]
.text:00408083                 mov     [esp+0Ch], esi
.text:00408087                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040808F                 mov     [esp+4], edx
.text:00408093                 mov     dword ptr [esp], 0
.text:0040809A                 call    sub_408150
.text:0040809F                 add     esp, 40h
.text:004080A2                 pop     ebx
.text:004080A3                 pop     esi
.text:004080A4                 pop     edi
.text:004080A5                 retn
.text:004080A5 ; ---------------------------------------------------------------------------
.text:004080A6                 align 10h
.text:004080B0
.text:004080B0 ; =============== S U B R O U T I N E =======================================
.text:004080B0
.text:004080B0
.text:004080B0 ; int __cdecl sub_4080B0(char *)
.text:004080B0 sub_4080B0      proc near               ; CODE XREF: sub_4068F0+64↑p
.text:004080B0
.text:004080B0 var_4C          = dword ptr -4Ch
.text:004080B0 var_48          = dword ptr -48h
.text:004080B0 var_44          = dword ptr -44h
.text:004080B0 var_40          = dword ptr -40h
.text:004080B0 var_3C          = dword ptr -3Ch
.text:004080B0 var_38          = dword ptr -38h
.text:004080B0 var_34          = dword ptr -34h
.text:004080B0 var_30          = dword ptr -30h
.text:004080B0 var_2C          = dword ptr -2Ch
.text:004080B0 var_28          = dword ptr -28h
.text:004080B0 var_24          = dword ptr -24h
.text:004080B0 var_20          = dword ptr -20h
.text:004080B0 var_1C          = dword ptr -1Ch
.text:004080B0 arg_0           = dword ptr  4
.text:004080B0
.text:004080B0                 sub     esp, 4Ch
.text:004080B3                 mov     ecx, ds:dword_413190
.text:004080B9                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:004080C1                 mov     edx, ds:dword_413194
.text:004080C7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:004080CE                 mov     [esp+4Ch+var_3C], ecx
.text:004080D2                 mov     ecx, ds:dword_41319C
.text:004080D8                 mov     [esp+4Ch+var_38], edx
.text:004080DC                 mov     edx, ds:dword_413198
.text:004080E2                 mov     [esp+4Ch+var_30], ecx
.text:004080E6                 mov     ecx, ds:dword_4131A0
.text:004080EC                 mov     eax, edx
.text:004080EE                 shr     eax, 1Ah
.text:004080F1                 and     eax, 1
.text:004080F4                 xor     eax, 1
.text:004080F7                 mov     [esp+4Ch+var_2C], ecx
.text:004080FB                 shl     eax, 1Ah
.text:004080FE                 mov     ecx, ds:dword_4131A4
.text:00408104                 xor     edx, eax
.text:00408106                 mov     [esp+4Ch+var_34], edx
.text:0040810A                 mov     edx, [esp+4Ch+arg_0]
.text:0040810E                 mov     [esp+4Ch+var_28], ecx
.text:00408112                 mov     ecx, ds:dword_4131A8
.text:00408118                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040811C                 mov     [esp+4Ch+var_24], ecx
.text:00408120                 mov     ecx, ds:dword_4131AC
.text:00408126                 mov     [esp+4Ch+var_20], ecx
.text:0040812A                 mov     ecx, ds:dword_4131B0
.text:00408130                 mov     [esp+4Ch+var_1C], ecx
.text:00408134                 lea     ecx, [esp+4Ch+var_3C]
.text:00408138                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040813C                 call    sub_408150
.text:00408141                 add     esp, 4Ch
.text:00408144                 retn
.text:00408144 sub_4080B0      endp
.text:00408144
.text:00408144 ; ---------------------------------------------------------------------------
.text:00408145                 align 10h
.text:00408150
.text:00408150 ; =============== S U B R O U T I N E =======================================
.text:00408150
.text:00408150
.text:00408150 ; int __cdecl sub_408150(int, char *, int, int)
.text:00408150 sub_408150      proc near               ; CODE XREF: .text:00407D02↑p
.text:00408150                                         ; .text:00407D32↑p ...
.text:00408150
.text:00408150 Block           = dword ptr -2Ch
.text:00408150 var_28          = dword ptr -28h
.text:00408150 Str             = dword ptr -24h
.text:00408150 var_20          = dword ptr -20h
.text:00408150 var_1C          = dword ptr -1Ch
.text:00408150 var_18          = dword ptr -18h
.text:00408150 var_14          = dword ptr -14h
.text:00408150 arg_0           = dword ptr  4
.text:00408150 arg_4           = dword ptr  8
.text:00408150 arg_8           = dword ptr  0Ch
.text:00408150 arg_C           = dword ptr  10h
.text:00408150
.text:00408150                 push    ebp
.text:00408151                 push    edi
.text:00408152                 push    esi
.text:00408153                 push    ebx
.text:00408154                 sub     esp, 1Ch
.text:00408157                 call    _errno
.text:0040815C                 mov     edx, [eax]
.text:0040815E                 mov     eax, [esp+2Ch+arg_0]
.text:00408162                 mov     [esp+2Ch+var_14], edx
.text:00408166                 test    eax, eax
.text:00408168                 js      loc_40830A
.text:0040816E                 mov     eax, [esp+2Ch+arg_0]
.text:00408172                 cmp     dword_412040, eax
.text:00408178                 ja      short loc_4081F0
.text:0040817A                 mov     esi, eax
.text:0040817C                 inc     esi
.text:0040817D                 cmp     esi, 1FFFFFFFh
.text:00408183                 ja      loc_40830F
.text:00408189                 mov     ebx, off_41204C
.text:0040818F                 cmp     ebx, offset dword_412044
.text:00408195                 jz      loc_4082E1
.text:0040819B
.text:0040819B loc_40819B:                             ; CODE XREF: sub_408150+1B5↓j
.text:0040819B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040819E                 lea     ecx, ds:0[esi*8]
.text:004081A5                 mov     ebp, esi
.text:004081A7                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:004081AB                 call    sub_406AA0
.text:004081B0                 mov     off_41204C, eax
.text:004081B5                 mov     ebx, dword_412040
.text:004081BB                 sub     ebp, ebx
.text:004081BD                 lea     edi, [eax+ebx*8]
.text:004081C0                 lea     eax, ds:0[ebp*8]
.text:004081C7                 cmp     eax, 7
.text:004081CA                 jbe     short loc_4081E0
.text:004081CC                 test    edi, 4
.text:004081D2                 jz      short loc_4081E0
.text:004081D4                 mov     dword ptr [edi], 0
.text:004081DA                 sub     eax, 4
.text:004081DD                 add     edi, 4
.text:004081E0
.text:004081E0 loc_4081E0:                             ; CODE XREF: sub_408150+7A↑j
.text:004081E0                                         ; sub_408150+82↑j
.text:004081E0                 cld
.text:004081E1                 mov     ecx, eax
.text:004081E3                 shr     ecx, 2
.text:004081E6                 xor     eax, eax
.text:004081E8                 rep stosd
.text:004081EA                 mov     dword_412040, esi
.text:004081F0
.text:004081F0 loc_4081F0:                             ; CODE XREF: sub_408150+28↑j
.text:004081F0                 mov     esi, off_41204C
.text:004081F6                 mov     eax, [esp+2Ch+arg_0]
.text:004081FA                 mov     ebp, [esi+eax*8]
.text:004081FD                 mov     edi, [esi+eax*8+4]
.text:00408201                 mov     esi, [esp+2Ch+arg_C]
.text:00408205                 test    esi, esi
.text:00408207                 jz      loc_4082D7
.text:0040820D
.text:0040820D loc_40820D:                             ; CODE XREF: sub_408150+18C↓j
.text:0040820D                 call    _errno
.text:00408212                 mov     ebx, [eax]
.text:00408214                 mov     [esp+2Ch+var_18], esi ; int
.text:00408218                 mov     ecx, [esi]
.text:0040821A                 mov     [esp+2Ch+Block], edi ; int
.text:0040821D                 mov     edx, [esp+2Ch+arg_8]
.text:00408221                 mov     [esp+2Ch+var_28], ebp ; int
.text:00408225                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00408229                 mov     ecx, [esp+2Ch+arg_4]
.text:0040822D                 mov     [esp+2Ch+var_20], edx ; int
.text:00408231                 mov     [esp+2Ch+Str], ecx ; Str
.text:00408235                 call    sub_407010
.text:0040823A                 mov     esi, eax
.text:0040823C                 call    _errno
.text:00408241                 mov     [eax], ebx
.text:00408243                 cmp     ebp, esi
.text:00408245                 ja      short loc_4082BB
.text:00408247                 lea     ebp, [esi+1]
.text:0040824A                 mov     ebx, off_41204C
.text:00408250                 cmp     edi, offset unk_413090
.text:00408256                 mov     esi, [esp+2Ch+arg_0]
.text:0040825A                 mov     [ebx+esi*8], ebp
.text:0040825D                 jz      short loc_40826D
.text:0040825F                 mov     [esp+2Ch+Block], edi ; Block
.text:00408262                 call    free
.text:00408267                 mov     ebx, off_41204C
.text:0040826D
.text:0040826D loc_40826D:                             ; CODE XREF: sub_408150+10D↑j
.text:0040826D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00408270                 call    sub_406A10
.text:00408275                 mov     esi, [esp+2Ch+arg_C]
.text:00408279                 mov     edi, eax
.text:0040827B                 mov     eax, [esp+2Ch+arg_0]
.text:0040827F                 test    esi, esi
.text:00408281                 mov     [ebx+eax*8+4], edi
.text:00408285                 jz      short loc_4082D0
.text:00408287
.text:00408287 loc_408287:                             ; CODE XREF: sub_408150+185↓j
.text:00408287                 call    _errno
.text:0040828C                 mov     ebx, [eax]
.text:0040828E                 mov     [esp+2Ch+var_18], esi ; int
.text:00408292                 mov     ecx, [esi]
.text:00408294                 mov     [esp+2Ch+Block], edi ; int
.text:00408297                 mov     edx, [esp+2Ch+arg_8]
.text:0040829B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040829F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004082A3                 mov     ecx, [esp+2Ch+arg_4]
.text:004082A7                 mov     [esp+2Ch+var_20], edx ; int
.text:004082AB                 mov     [esp+2Ch+Str], ecx ; Str
.text:004082AF                 call    sub_407010
.text:004082B4                 call    _errno
.text:004082B9                 mov     [eax], ebx
.text:004082BB
.text:004082BB loc_4082BB:                             ; CODE XREF: sub_408150+F5↑j
.text:004082BB                 call    _errno
.text:004082C0                 mov     ebp, [esp+2Ch+var_14]
.text:004082C4                 mov     [eax], ebp
.text:004082C6                 add     esp, 1Ch
.text:004082C9                 mov     eax, edi
.text:004082CB                 pop     ebx
.text:004082CC                 pop     esi
.text:004082CD                 pop     edi
.text:004082CE                 pop     ebp
.text:004082CF                 retn
.text:004082D0 ; ---------------------------------------------------------------------------
.text:004082D0
.text:004082D0 loc_4082D0:                             ; CODE XREF: sub_408150+135↑j
.text:004082D0                 mov     esi, offset dword_413190
.text:004082D5                 jmp     short loc_408287
.text:004082D7 ; ---------------------------------------------------------------------------
.text:004082D7
.text:004082D7 loc_4082D7:                             ; CODE XREF: sub_408150+B7↑j
.text:004082D7                 mov     esi, offset dword_413190
.text:004082DC                 jmp     loc_40820D
.text:004082E1 ; ---------------------------------------------------------------------------
.text:004082E1
.text:004082E1 loc_4082E1:                             ; CODE XREF: sub_408150+45↑j
.text:004082E1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:004082E8                 call    sub_406A10
.text:004082ED                 mov     off_41204C, eax
.text:004082F2                 mov     edi, dword_412044
.text:004082F8                 mov     ebx, eax
.text:004082FA                 mov     ecx, off_412048
.text:00408300                 mov     [eax], edi
.text:00408302                 mov     [eax+4], ecx
.text:00408305                 jmp     loc_40819B
.text:0040830A ; ---------------------------------------------------------------------------
.text:0040830A
.text:0040830A loc_40830A:                             ; CODE XREF: sub_408150+18↑j
.text:0040830A                 call    abort
.text:0040830F ; ---------------------------------------------------------------------------
.text:0040830F
.text:0040830F loc_40830F:                             ; CODE XREF: sub_408150+33↑j
.text:0040830F                 call    sub_408340
.text:0040830F sub_408150      endp
.text:0040830F
.text:0040830F ; ---------------------------------------------------------------------------
.text:00408314                 align 10h
.text:00408320
.text:00408320 loc_408320:                             ; DATA XREF: sub_408340+3↓o
.text:00408320                 insd
.text:00408321                 db      65h
.text:00408321                 insd
.text:00408323                 outsd
.text:00408324                 jb      short loc_40839F
.text:00408326                 and     [ebp+78h], ah
.text:00408329                 push    74737561h
.text:0040832E
.text:0040832E loc_40832E:                             ; DATA XREF: sub_408340+10↓o
.text:0040832E                 db      65h
.text:0040832E                 add     fs:0B68D0073h, ah
.text:0040832E ; ---------------------------------------------------------------------------
.text:00408336                 dw 0
.text:00408338                 align 10h
.text:00408340
.text:00408340 ; =============== S U B R O U T I N E =======================================
.text:00408340
.text:00408340 ; Attributes: noreturn
.text:00408340
.text:00408340 sub_408340      proc near               ; CODE XREF: .text:loc_406A09↑p
.text:00408340                                         ; sub_406A10+24↑p ...
.text:00408340
.text:00408340 Code            = dword ptr -1Ch
.text:00408340 ErrorMessage    = dword ptr -18h
.text:00408340 var_14          = dword ptr -14h
.text:00408340 var_10          = byte ptr -10h
.text:00408340
.text:00408340                 sub     esp, 1Ch
.text:00408343                 mov     [esp+1Ch+Code], offset loc_408320
.text:0040834A                 call    ds:libintl_gettext
.text:00408350                 mov     [esp+1Ch+var_14], (offset loc_40832E+3) ; char *
.text:00408358                 mov     edx, Code
.text:0040835E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00408366                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040836A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040836D                 call    sub_4083D0
.text:00408372                 call    abort
.text:00408372 sub_408340      endp
.text:00408372
.text:00408372 ; ---------------------------------------------------------------------------
.text:00408377                 align 10h
.text:00408380
.text:00408380 ; =============== S U B R O U T I N E =======================================
.text:00408380
.text:00408380 ; Attributes: thunk
.text:00408380
.text:00408380 libintl_bindtextdomain proc near
.text:00408380                 jmp     ds:__imp_libintl_bindtextdomain
.text:00408380 libintl_bindtextdomain endp
.text:00408380
.text:00408380 ; ---------------------------------------------------------------------------
.text:00408386                 align 10h
.text:00408390                 jmp     ds:libintl_textdomain
.text:00408390 ; ---------------------------------------------------------------------------
.text:00408396                 db 2 dup(90h)
.text:00408398                 dd 0
.text:0040839C                 db 3 dup(0)
.text:0040839F ; ---------------------------------------------------------------------------
.text:0040839F
.text:0040839F loc_40839F:                             ; CODE XREF: .text:00408324↑j
.text:0040839F                 add     bh, bh
.text:004083A1                 and     eax, offset libintl_gettext
.text:004083A6                 nop
.text:004083A7                 nop
.text:004083A7 ; ---------------------------------------------------------------------------
.text:004083A8                 dd 2 dup(0)
.text:004083B0 ; const char aS[]
.text:004083B0 aS              db ': %s',0             ; DATA XREF: sub_4083D0+B8↓o
.text:004083B0                                         ; sub_4084D4+122↓o
.text:004083B5 aUnknownSystemE db 'Unknown system error',0
.text:004083B5                                         ; DATA XREF: sub_4083D0:loc_40849D↓o
.text:004083B5                                         ; sub_4084D4:loc_40860E↓o
.text:004083CA ; const char aS_0[]
.text:004083CA aS_0            db '%s: ',0             ; DATA XREF: sub_4083D0:loc_4084A4↓o
.text:004083CF                 align 10h
.text:004083D0
.text:004083D0 ; =============== S U B R O U T I N E =======================================
.text:004083D0
.text:004083D0
.text:004083D0 ; int __cdecl sub_4083D0(int Code, int ErrorMessage, char *, char)
.text:004083D0 sub_4083D0      proc near               ; CODE XREF: sub_401CD0+32E↑p
.text:004083D0                                         ; sub_401CD0+36C↑p ...
.text:004083D0
.text:004083D0 Stream          = dword ptr -1Ch
.text:004083D0 Format          = dword ptr -18h
.text:004083D0 ArgList         = dword ptr -14h
.text:004083D0 Code            = dword ptr  4
.text:004083D0 ErrorMessage    = dword ptr  8
.text:004083D0 arg_8           = dword ptr  0Ch
.text:004083D0 arg_C           = byte ptr  10h
.text:004083D0
.text:004083D0                 push    esi
.text:004083D1                 push    ebx
.text:004083D2                 sub     esp, 14h
.text:004083D5                 mov     edx, ds:_iob
.text:004083DB                 mov     esi, [esp+1Ch+Code]
.text:004083DF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:004083E3                 add     edx, 20h ; ' '
.text:004083E6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004083E9                 call    fflush
.text:004083EE                 mov     eax, ds:dword_413B30
.text:004083F3                 test    eax, eax
.text:004083F5                 jz      loc_4084A4
.text:004083FB                 call    eax ; dword_413B30
.text:004083FD
.text:004083FD loc_4083FD:                             ; CODE XREF: sub_4083D0+F7↓j
.text:004083FD                 lea     edx, [esp+1Ch+arg_C]
.text:00408401                 mov     ecx, [esp+1Ch+arg_8]
.text:00408405                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00408409                 mov     edx, ds:_iob
.text:0040840F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00408413                 add     edx, 40h ; '@'
.text:00408416                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00408419                 call    vfprintf
.text:0040841E                 inc     ds:dword_413B40
.text:00408424                 test    ebx, ebx
.text:00408426                 jnz     short loc_408472
.text:00408428
.text:00408428 loc_408428:                             ; CODE XREF: sub_4083D0+CB↓j
.text:00408428                 mov     edx, ds:_iob
.text:0040842E                 lea     ecx, [edx+40h]
.text:00408431                 mov     ebx, [ecx+4]
.text:00408434                 dec     ebx
.text:00408435                 test    ebx, ebx
.text:00408437                 mov     [ecx+4], ebx
.text:0040843A                 js      short loc_408460
.text:0040843C                 mov     ecx, [edx+40h]
.text:0040843F                 mov     byte ptr [ecx], 0Ah
.text:00408442                 inc     dword ptr [edx+40h]
.text:00408445
.text:00408445 loc_408445:                             ; CODE XREF: sub_4083D0+A0↓j
.text:00408445                 mov     edx, ds:_iob
.text:0040844B                 add     edx, 40h ; '@'
.text:0040844E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00408451                 call    fflush
.text:00408456                 test    esi, esi
.text:00408458                 jnz     short loc_4084CC
.text:0040845A                 add     esp, 14h
.text:0040845D                 pop     ebx
.text:0040845E                 pop     esi
.text:0040845F                 retn
.text:00408460 ; ---------------------------------------------------------------------------
.text:00408460
.text:00408460 loc_408460:                             ; CODE XREF: sub_4083D0+6A↑j
.text:00408460                 mov     [esp+1Ch+Format], ecx ; File
.text:00408464                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040846B                 call    _flsbuf
.text:00408470                 jmp     short loc_408445
.text:00408472 ; ---------------------------------------------------------------------------
.text:00408472
.text:00408472 loc_408472:                             ; CODE XREF: sub_4083D0+56↑j
.text:00408472                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00408475                 call    strerror
.text:0040847A                 test    eax, eax
.text:0040847C                 jz      short loc_40849D
.text:0040847E
.text:0040847E loc_40847E:                             ; CODE XREF: sub_4083D0+D2↓j
.text:0040847E                 mov     [esp+1Ch+ArgList], eax
.text:00408482                 mov     ebx, ds:_iob
.text:00408488                 mov     [esp+1Ch+Format], offset aS ; ": %s"
.text:00408490                 add     ebx, 40h ; '@'
.text:00408493                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00408496                 call    fprintf
.text:0040849B                 jmp     short loc_408428
.text:0040849D ; ---------------------------------------------------------------------------
.text:0040849D
.text:0040849D loc_40849D:                             ; CODE XREF: sub_4083D0+AC↑j
.text:0040849D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004084A2                 jmp     short loc_40847E
.text:004084A4 ; ---------------------------------------------------------------------------
.text:004084A4
.text:004084A4 loc_4084A4:                             ; CODE XREF: sub_4083D0+25↑j
.text:004084A4                 mov     [esp+1Ch+Format], offset aS_0 ; "%s: "
.text:004084AC                 mov     edx, ds:_iob
.text:004084B2                 mov     ecx, ds:dword_413B00
.text:004084B8                 add     edx, 40h ; '@'
.text:004084BB                 mov     [esp+1Ch+ArgList], ecx
.text:004084BF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004084C2                 call    fprintf
.text:004084C7                 jmp     loc_4083FD
.text:004084CC ; ---------------------------------------------------------------------------
.text:004084CC
.text:004084CC loc_4084CC:                             ; CODE XREF: sub_4083D0+88↑j
.text:004084CC                 mov     [esp+1Ch+Stream], esi ; Code
.text:004084CF                 call    exit
.text:004084CF sub_4083D0      endp
.text:004084CF
.text:004084D4
.text:004084D4 ; =============== S U B R O U T I N E =======================================
.text:004084D4
.text:004084D4
.text:004084D4 ; int __cdecl sub_4084D4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:004084D4 sub_4084D4      proc near               ; DATA XREF: sub_4084D4+77↓o
.text:004084D4
.text:004084D4 Stream          = dword ptr -28h
.text:004084D4 Format          = dword ptr -24h
.text:004084D4 ArgList         = dword ptr -20h
.text:004084D4 var_1C          = dword ptr -1Ch
.text:004084D4 Code            = dword ptr  8
.text:004084D4 ErrorMessage    = dword ptr  0Ch
.text:004084D4 Str2            = dword ptr  10h
.text:004084D4 arg_10          = dword ptr  14h
.text:004084D4 arg_14          = dword ptr  18h
.text:004084D4 arg_18          = byte ptr  1Ch
.text:004084D4
.text:004084D4                 and     eax, 64253A73h
.text:004084D9                 cmp     ah, [eax]
.text:004084DB
.text:004084DB loc_4084DB:                             ; DATA XREF: sub_4084D4:loc_408615↓o
.text:004084DB                 add     ds:55003A73h, ah
.text:004084E1                 push    edi
.text:004084E2                 push    esi
.text:004084E3                 push    ebx
.text:004084E4                 sub     esp, 1Ch
.text:004084E7                 mov     edx, ds:dword_413B70
.text:004084ED                 mov     ebp, [esp+28h+Code]
.text:004084F1                 mov     edi, [esp+28h+ErrorMessage]
.text:004084F5                 test    edx, edx
.text:004084F7                 mov     ebx, [esp+28h+Str2]
.text:004084FB                 mov     esi, [esp+28h+arg_10]
.text:004084FF                 jz      short loc_408519
.text:00408501                 cmp     ds:dword_4131D0, esi
.text:00408507                 jz      loc_408640
.text:0040850D
.text:0040850D loc_40850D:                             ; CODE XREF: sub_4084D4+18D↓j
.text:0040850D                 mov     ds:Str1, ebx
.text:00408513                 mov     ds:dword_4131D0, esi
.text:00408519
.text:00408519 loc_408519:                             ; CODE XREF: sub_4084D4+2B↑j
.text:00408519                 mov     edx, ds:_iob
.text:0040851F                 add     edx, 20h ; ' '
.text:00408522                 mov     [esp+28h+Stream], edx ; Stream
.text:00408525                 call    fflush
.text:0040852A                 mov     eax, ds:dword_413B30
.text:0040852F                 test    eax, eax
.text:00408531                 jz      loc_408615
.text:00408537                 call    eax ; dword_413B30
.text:00408539
.text:00408539 loc_408539:                             ; CODE XREF: sub_4084D4+164↓j
.text:00408539                 test    ebx, ebx
.text:0040853B                 jz      short loc_40855E
.text:0040853D                 mov     [esp+28h+ArgList], ebx
.text:00408541                 mov     ebx, ds:_iob
.text:00408547                 mov     [esp+28h+var_1C], esi
.text:0040854B                 mov     [esp+28h+Format], offset sub_4084D4 ; Format
.text:00408553                 add     ebx, 40h ; '@'
.text:00408556                 mov     [esp+28h+Stream], ebx ; Stream
.text:00408559                 call    fprintf
.text:0040855E
.text:0040855E loc_40855E:                             ; CODE XREF: sub_4084D4+67↑j
.text:0040855E                 mov     esi, ds:_iob
.text:00408564                 lea     edx, [esp+28h+arg_18]
.text:00408568                 mov     ecx, [esp+28h+arg_14]
.text:0040856C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00408570                 add     esi, 40h ; '@'
.text:00408573                 mov     [esp+28h+Format], ecx ; Format
.text:00408577                 mov     [esp+28h+Stream], esi ; Stream
.text:0040857A                 call    vfprintf
.text:0040857F                 inc     ds:dword_413B40
.text:00408585                 test    edi, edi
.text:00408587                 jnz     short loc_4085E0
.text:00408589
.text:00408589 loc_408589:                             ; CODE XREF: sub_4084D4+135↓j
.text:00408589                 mov     edx, ds:_iob
.text:0040858F                 lea     ecx, [edx+40h]
.text:00408592                 mov     ebx, [ecx+4]
.text:00408595                 dec     ebx
.text:00408596                 test    ebx, ebx
.text:00408598                 mov     [ecx+4], ebx
.text:0040859B                 js      short loc_4085C7
.text:0040859D                 mov     esi, [edx+40h]
.text:004085A0                 mov     byte ptr [esi], 0Ah
.text:004085A3                 inc     dword ptr [edx+40h]
.text:004085A6
.text:004085A6 loc_4085A6:                             ; CODE XREF: sub_4084D4+103↓j
.text:004085A6                 mov     ecx, ds:_iob
.text:004085AC                 add     ecx, 40h ; '@'
.text:004085AF                 mov     [esp+28h+Stream], ecx ; Stream
.text:004085B2                 call    fflush
.text:004085B7                 test    ebp, ebp
.text:004085B9                 jnz     loc_408666
.text:004085BF
.text:004085BF loc_4085BF:                             ; CODE XREF: sub_4084D4+173↓j
.text:004085BF                                         ; sub_4084D4+187↓j
.text:004085BF                 add     esp, 1Ch
.text:004085C2                 pop     ebx
.text:004085C3                 pop     esi
.text:004085C4                 pop     edi
.text:004085C5                 pop     ebp
.text:004085C6                 retn
.text:004085C7 ; ---------------------------------------------------------------------------
.text:004085C7
.text:004085C7 loc_4085C7:                             ; CODE XREF: sub_4084D4+C7↑j
.text:004085C7                 mov     [esp+28h+Format], ecx ; File
.text:004085CB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:004085D2                 call    _flsbuf
.text:004085D7                 jmp     short loc_4085A6
.text:004085D7 ; ---------------------------------------------------------------------------
.text:004085D9                 align 10h
.text:004085E0
.text:004085E0 loc_4085E0:                             ; CODE XREF: sub_4084D4+B3↑j
.text:004085E0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:004085E3                 call    strerror
.text:004085E8                 test    eax, eax
.text:004085EA                 jz      short loc_40860E
.text:004085EC
.text:004085EC loc_4085EC:                             ; CODE XREF: sub_4084D4+13F↓j
.text:004085EC                 mov     [esp+28h+ArgList], eax
.text:004085F0                 mov     edi, ds:_iob
.text:004085F6                 mov     [esp+28h+Format], offset aS ; ": %s"
.text:004085FE                 add     edi, 40h ; '@'
.text:00408601                 mov     [esp+28h+Stream], edi ; Stream
.text:00408604                 call    fprintf
.text:00408609                 jmp     loc_408589
.text:0040860E ; ---------------------------------------------------------------------------
.text:0040860E
.text:0040860E loc_40860E:                             ; CODE XREF: sub_4084D4+116↑j
.text:0040860E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00408613                 jmp     short loc_4085EC
.text:00408615 ; ---------------------------------------------------------------------------
.text:00408615
.text:00408615 loc_408615:                             ; CODE XREF: sub_4084D4+5D↑j
.text:00408615                 mov     [esp+28h+Format], (offset loc_4084DB+1) ; Format
.text:0040861D                 mov     ecx, ds:_iob
.text:00408623                 mov     edx, ds:dword_413B00
.text:00408629                 add     ecx, 40h ; '@'
.text:0040862C                 mov     [esp+28h+ArgList], edx
.text:00408630                 mov     [esp+28h+Stream], ecx ; Stream
.text:00408633                 call    fprintf
.text:00408638                 jmp     loc_408539
.text:00408638 ; ---------------------------------------------------------------------------
.text:0040863D                 align 10h
.text:00408640
.text:00408640 loc_408640:                             ; CODE XREF: sub_4084D4+33↑j
.text:00408640                 mov     eax, ds:Str1
.text:00408645                 cmp     ebx, eax
.text:00408647                 jz      loc_4085BF
.text:0040864D                 mov     [esp+28h+Format], ebx ; Str2
.text:00408651                 mov     [esp+28h+Stream], eax ; Str1
.text:00408654                 call    strcmp
.text:00408659                 test    eax, eax
.text:0040865B                 jz      loc_4085BF
.text:00408661                 jmp     loc_40850D
.text:00408666 ; ---------------------------------------------------------------------------
.text:00408666
.text:00408666 loc_408666:                             ; CODE XREF: sub_4084D4+E5↑j
.text:00408666                 mov     [esp+28h+Stream], ebp ; Code
.text:00408669                 call    exit
.text:00408669 sub_4084D4      endp ; sp-analysis failed
.text:00408669
.text:00408669 ; ---------------------------------------------------------------------------
.text:0040866E                 align 10h
.text:00408670
.text:00408670 ; =============== S U B R O U T I N E =======================================
.text:00408670
.text:00408670
.text:00408670 sub_408670      proc near               ; DATA XREF: sub_402980:loc_402A84↑o
.text:00408670
.text:00408670 var_C           = dword ptr -0Ch
.text:00408670 var_8           = dword ptr -8
.text:00408670 var_4           = dword ptr -4
.text:00408670 arg_0           = dword ptr  4
.text:00408670 arg_4           = dword ptr  8
.text:00408670
.text:00408670                 sub     esp, 0Ch
.text:00408673                 mov     edx, [esp+0Ch+arg_4]
.text:00408677                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:0040867E                 mov     [esp+0Ch+var_4], edx ; int
.text:00408682                 mov     edx, [esp+0Ch+arg_0]
.text:00408686                 mov     [esp+0Ch+var_8], edx ; int
.text:0040868A                 call    sub_4086A0
.text:0040868F                 add     esp, 0Ch
.text:00408692                 retn
.text:00408692 sub_408670      endp
.text:00408692
.text:00408692 ; ---------------------------------------------------------------------------
.text:00408693                 align 10h
.text:004086A0
.text:004086A0 ; =============== S U B R O U T I N E =======================================
.text:004086A0
.text:004086A0
.text:004086A0 ; int __cdecl sub_4086A0(LPCSTR, int, int)
.text:004086A0 sub_4086A0      proc near               ; CODE XREF: sub_408670+1A↑p
.text:004086A0                                         ; sub_408980+42↓p ...
.text:004086A0
.text:004086A0 lpFileName      = dword ptr -2Ch
.text:004086A0 dwDesiredAccess = dword ptr -28h
.text:004086A0 dwShareMode     = dword ptr -24h
.text:004086A0 lpSecurityAttributes= dword ptr -20h
.text:004086A0 dwCreationDisposition= dword ptr -1Ch
.text:004086A0 dwFlagsAndAttributes= dword ptr -18h
.text:004086A0 hTemplateFile   = dword ptr -14h
.text:004086A0 var_10          = dword ptr -10h
.text:004086A0 var_C           = dword ptr -0Ch
.text:004086A0 var_8           = dword ptr -8
.text:004086A0 var_4           = dword ptr -4
.text:004086A0 arg_0           = dword ptr  4
.text:004086A0 arg_4           = dword ptr  8
.text:004086A0 arg_8           = dword ptr  0Ch
.text:004086A0
.text:004086A0 ; FUNCTION CHUNK AT .text:0040A690 SIZE 0000013A BYTES
.text:004086A0
.text:004086A0                 sub     esp, 0Ch
.text:004086A3                 mov     ecx, [esp+0Ch+arg_0]
.text:004086A7                 mov     edx, [esp+0Ch+arg_4]
.text:004086AB                 mov     eax, [esp+0Ch+arg_8]
.text:004086AF                 test    ecx, ecx
.text:004086B1                 jnz     short loc_4086D0
.text:004086B3                 test    edx, edx
.text:004086B5                 jz      short loc_4086D0
.text:004086B7                 test    eax, eax
.text:004086B9                 jz      short loc_4086D0
.text:004086BB                 mov     [esp+0Ch+arg_4], eax
.text:004086BF                 mov     [esp+0Ch+arg_0], edx
.text:004086C3                 add     esp, 0Ch
.text:004086C6                 jmp     loc_40A690
.text:004086C6 ; ---------------------------------------------------------------------------
.text:004086CB                 align 10h
.text:004086D0
.text:004086D0 loc_4086D0:                             ; CODE XREF: sub_4086A0+11↑j
.text:004086D0                                         ; sub_4086A0+15↑j ...
.text:004086D0                 call    _errno
.text:004086D5                 mov     dword ptr [eax], 16h
.text:004086DB                 mov     eax, 0FFFFFFFFh
.text:004086E0                 add     esp, 0Ch
.text:004086E3                 retn
.text:004086E3 sub_4086A0      endp
.text:004086E3
.text:004086E3 ; ---------------------------------------------------------------------------
.text:004086E4                 align 10h
.text:004086F0
.text:004086F0 ; =============== S U B R O U T I N E =======================================
.text:004086F0
.text:004086F0
.text:004086F0 ; int __cdecl sub_4086F0(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:004086F0 sub_4086F0      proc near               ; CODE XREF: sub_408870+93↓p
.text:004086F0
.text:004086F0 pvReserved      = dword ptr -35Ch
.text:004086F0 pUnkOuter       = dword ptr -358h
.text:004086F0 dwClsContext    = dword ptr -354h
.text:004086F0 riid            = dword ptr -350h
.text:004086F0 ppv             = dword ptr -34Ch
.text:004086F0 cchWideChar     = dword ptr -348h
.text:004086F0 var_334         = byte ptr -334h
.text:004086F0 var_330         = dword ptr -330h
.text:004086F0 String2         = byte ptr -32Ch
.text:004086F0 WideCharStr     = word ptr -21Ch
.text:004086F0 lpMultiByteStr  = dword ptr  4
.text:004086F0 lpString1       = dword ptr  8
.text:004086F0
.text:004086F0                 push    edi
.text:004086F1                 push    esi
.text:004086F2                 push    ebx
.text:004086F3                 sub     esp, 350h
.text:004086F9                 mov     edi, [esp+35Ch+lpString1]
.text:00408700                 mov     byte ptr [edi], 0
.text:00408703                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:0040870A                 call    OleInitialize
.text:0040870F                 sub     esp, 4
.text:00408712                 cmp     eax, 1
.text:00408715                 ja      loc_40884F
.text:0040871B                 mov     [esp+35Ch+riid], offset riid ; riid
.text:00408723                 lea     ecx, [esp+35Ch+var_330]
.text:00408727                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:0040872B                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:00408733                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:0040873B                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:00408742                 call    CoCreateInstance
.text:00408747                 sub     esp, 14h
.text:0040874A                 test    eax, eax
.text:0040874C                 js      loc_40884F
.text:00408752                 mov     ebx, [esp+35Ch+var_330]
.text:00408756                 lea     edx, [esp+35Ch+var_334]
.text:0040875A                 mov     esi, [ebx]
.text:0040875C                 mov     [esp+35Ch+dwClsContext], edx
.text:00408760                 mov     [esp+35Ch+pvReserved], ebx
.text:00408763                 xor     ebx, ebx
.text:00408765                 mov     [esp+35Ch+pUnkOuter], offset dword_40F7B0
.text:0040876D                 call    dword ptr [esi]
.text:0040876F                 sub     esp, 0Ch
.text:00408772                 lea     esi, [esp+35Ch+WideCharStr]
.text:00408779                 call    AreFileApisANSI
.text:0040877E                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:00408786                 test    eax, eax
.text:00408788                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:0040878F                 setz    bl
.text:00408792                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:00408796                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:0040879E                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:004087A2                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:004087AA                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:004087AD                 call    MultiByteToWideChar
.text:004087B2                 sub     esp, 18h
.text:004087B5                 test    eax, eax
.text:004087B7                 js      loc_40884F
.text:004087BD                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:004087C1                 mov     ebx, [edx]
.text:004087C3                 mov     [esp+35Ch+dwClsContext], 0
.text:004087CB                 mov     [esp+35Ch+pUnkOuter], esi
.text:004087CF                 mov     [esp+35Ch+pvReserved], edx
.text:004087D2                 call    dword ptr [ebx+14h]
.text:004087D5                 sub     esp, 0Ch
.text:004087D8                 test    eax, eax
.text:004087DA                 js      short loc_40884F
.text:004087DC                 mov     ebx, [esp+35Ch+var_330]
.text:004087E0                 lea     esi, [esp+35Ch+String2]
.text:004087E4                 mov     ecx, [ebx]
.text:004087E6                 mov     [esp+35Ch+pvReserved], ebx
.text:004087E9                 mov     [esp+35Ch+ppv], 0
.text:004087F1                 mov     [esp+35Ch+riid], 0
.text:004087F9                 mov     [esp+35Ch+dwClsContext], 104h
.text:00408801                 mov     [esp+35Ch+pUnkOuter], esi
.text:00408805                 call    dword ptr [ecx+0Ch]
.text:00408808                 sub     esp, 14h
.text:0040880B                 mov     ebx, eax
.text:0040880D                 test    eax, eax
.text:0040880F                 js      short loc_40884F
.text:00408811                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:00408815                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:00408818                 call    lstrcpyA
.text:0040881D                 sub     esp, 8
.text:00408820                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:00408824                 mov     ecx, [edi]
.text:00408826                 mov     [esp+35Ch+pvReserved], edi
.text:00408829                 call    dword ptr [ecx+8]
.text:0040882C                 sub     esp, 4
.text:0040882F                 mov     edx, [esp+35Ch+var_330]
.text:00408833                 mov     esi, [edx]
.text:00408835                 mov     [esp+35Ch+pvReserved], edx
.text:00408838                 call    dword ptr [esi+8]
.text:0040883B                 sub     esp, 4
.text:0040883E                 call    CoUninitialize
.text:00408843                 mov     eax, ebx
.text:00408845
.text:00408845 loc_408845:                             ; CODE XREF: sub_4086F0+177↓j
.text:00408845                 add     esp, 350h
.text:0040884B                 pop     ebx
.text:0040884C                 pop     esi
.text:0040884D                 pop     edi
.text:0040884E                 retn
.text:0040884F ; ---------------------------------------------------------------------------
.text:0040884F
.text:0040884F loc_40884F:                             ; CODE XREF: sub_4086F0+25↑j
.text:0040884F                                         ; sub_4086F0+5C↑j ...
.text:0040884F                 call    sub_40B2D0
.text:00408854                 mov     edi, eax
.text:00408856                 call    _errno
.text:0040885B                 mov     [eax], edi
.text:0040885D                 call    CoUninitialize
.text:00408862                 mov     eax, 0FFFFFFFFh
.text:00408867                 jmp     short loc_408845
.text:00408867 sub_4086F0      endp
.text:00408867
.text:00408867 ; ---------------------------------------------------------------------------
.text:00408869 ; const char aLnk[]
.text:00408869 aLnk            db '.lnk',0             ; DATA XREF: sub_408870+53↓o
.text:00408869                                         ; sub_408870:loc_4088D5↓o
.text:0040886E                 align 10h
.text:00408870
.text:00408870 ; =============== S U B R O U T I N E =======================================
.text:00408870
.text:00408870
.text:00408870 ; int __cdecl sub_408870(char *, LPSTR lpString1)
.text:00408870 sub_408870      proc near               ; CODE XREF: sub_406D00+35↑p
.text:00408870                                         ; sub_408980+96↓p
.text:00408870
.text:00408870 Str             = dword ptr -1Ch
.text:00408870 Source          = dword ptr -18h
.text:00408870 Destination     = dword ptr -14h
.text:00408870 arg_0           = dword ptr  4
.text:00408870 lpString1       = dword ptr  8
.text:00408870
.text:00408870                 push    ebp
.text:00408871                 push    edi
.text:00408872                 push    esi
.text:00408873                 push    ebx
.text:00408874                 sub     esp, 0Ch
.text:00408877                 mov     ebx, [esp+1Ch+arg_0]
.text:0040887B                 mov     ebp, [esp+1Ch+lpString1]
.text:0040887F                 mov     [esp+1Ch+Str], ebx ; Str
.text:00408882                 call    strlen
.text:00408887                 add     eax, 5
.text:0040888A                 mov     [esp+1Ch+Str], eax ; Size
.text:0040888D                 call    malloc
.text:00408892                 mov     [esp+1Ch+Destination], eax
.text:00408896                 test    eax, eax
.text:00408898                 jz      loc_408940
.text:0040889E                 mov     [esp+1Ch+Source], ebx ; Source
.text:004088A2                 mov     [esp+1Ch+Str], eax ; Destination
.text:004088A5                 call    strcpy
.text:004088AA                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:004088B2                 mov     eax, [esp+1Ch+Destination]
.text:004088B6                 mov     [esp+1Ch+Str], eax ; Str
.text:004088B9                 call    strrchr
.text:004088BE                 test    eax, eax
.text:004088C0                 jz      short loc_4088D5
.text:004088C2                 cld
.text:004088C3                 mov     ebx, offset aLnk ; ".lnk"
.text:004088C8                 mov     ecx, 5
.text:004088CD                 mov     esi, eax
.text:004088CF                 mov     edi, ebx
.text:004088D1                 repe cmpsb
.text:004088D3                 jz      short loc_4088E9
.text:004088D5
.text:004088D5 loc_4088D5:                             ; CODE XREF: sub_408870+50↑j
.text:004088D5                 mov     [esp+1Ch+Source], offset aLnk ; ".lnk"
.text:004088DD                 mov     edx, [esp+1Ch+Destination]
.text:004088E1                 mov     [esp+1Ch+Str], edx ; Destination
.text:004088E4                 call    strcat
.text:004088E9
.text:004088E9 loc_4088E9:                             ; CODE XREF: sub_408870+63↑j
.text:004088E9                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:004088F0                 call    SetErrorMode
.text:004088F5                 sub     esp, 4
.text:004088F8                 mov     ebx, [esp+1Ch+Destination]
.text:004088FC                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:00408900                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:00408903                 call    sub_4086F0
.text:00408908                 mov     [esp+1Ch+Str], ebx ; Block
.text:0040890B                 mov     esi, eax
.text:0040890D                 call    free
.text:00408912                 mov     [esp+1Ch+Str], 0 ; uMode
.text:00408919                 call    SetErrorMode
.text:0040891E                 sub     esp, 4
.text:00408921                 mov     [esp+1Ch+Str], ebp
.text:00408924                 call    sub_40ABA0
.text:00408929                 inc     esi
.text:0040892A                 jz      short loc_408940
.text:0040892C                 mov     [esp+1Ch+arg_0], ebp ; Str
.text:00408930                 add     esp, 0Ch
.text:00408933                 pop     ebx
.text:00408934                 pop     esi
.text:00408935                 pop     edi
.text:00408936                 pop     ebp
.text:00408937                 jmp     strlen
.text:00408937 ; ---------------------------------------------------------------------------
.text:0040893C                 align 10h
.text:00408940
.text:00408940 loc_408940:                             ; CODE XREF: sub_408870+28↑j
.text:00408940                                         ; sub_408870+BA↑j
.text:00408940                 add     esp, 0Ch
.text:00408943                 mov     eax, 0FFFFFFFFh
.text:00408948                 pop     ebx
.text:00408949                 pop     esi
.text:0040894A                 pop     edi
.text:0040894B                 pop     ebp
.text:0040894C                 retn
.text:0040894C sub_408870      endp
.text:0040894C
.text:0040894C ; ---------------------------------------------------------------------------
.text:0040894D                 align 10h
.text:00408950
.text:00408950 ; =============== S U B R O U T I N E =======================================
.text:00408950
.text:00408950
.text:00408950 ; int __cdecl sub_408950(char *, int)
.text:00408950 sub_408950      proc near               ; CODE XREF: sub_402980+53↑p
.text:00408950                                         ; DATA XREF: sub_402980+43↑o
.text:00408950
.text:00408950 var_C           = dword ptr -0Ch
.text:00408950 var_8           = dword ptr -8
.text:00408950 var_4           = dword ptr -4
.text:00408950 arg_0           = dword ptr  4
.text:00408950 arg_4           = dword ptr  8
.text:00408950
.text:00408950                 sub     esp, 0Ch
.text:00408953                 mov     edx, [esp+0Ch+arg_4]
.text:00408957                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:0040895E                 mov     [esp+0Ch+var_4], edx ; int
.text:00408962                 mov     edx, [esp+0Ch+arg_0]
.text:00408966                 mov     [esp+0Ch+var_8], edx ; char *
.text:0040896A                 call    sub_408980
.text:0040896F                 add     esp, 0Ch
.text:00408972                 retn
.text:00408972 sub_408950      endp
.text:00408972
.text:00408972 ; ---------------------------------------------------------------------------
.text:00408973                 align 10h
.text:00408980
.text:00408980 ; =============== S U B R O U T I N E =======================================
.text:00408980
.text:00408980
.text:00408980 ; int __cdecl sub_408980(LPCSTR, char *, int)
.text:00408980 sub_408980      proc near               ; CODE XREF: sub_408950+1A↑p
.text:00408980                                         ; sub_40DFD0+104↓p ...
.text:00408980
.text:00408980 var_13C         = dword ptr -13Ch
.text:00408980 lpString1       = dword ptr -138h
.text:00408980 var_134         = dword ptr -134h
.text:00408980 String1         = byte ptr -12Ch
.text:00408980 var_10          = dword ptr -10h
.text:00408980 var_C           = dword ptr -0Ch
.text:00408980 var_8           = dword ptr -8
.text:00408980 var_4           = dword ptr -4
.text:00408980 arg_0           = dword ptr  4
.text:00408980 arg_4           = dword ptr  8
.text:00408980 arg_8           = dword ptr  0Ch
.text:00408980
.text:00408980                 sub     esp, 13Ch
.text:00408986                 mov     [esp+13Ch+var_10], ebx
.text:0040898D                 mov     ebx, [esp+13Ch+arg_8]
.text:00408994                 mov     [esp+13Ch+var_C], esi
.text:0040899B                 mov     esi, [esp+13Ch+arg_4]
.text:004089A2                 mov     [esp+13Ch+var_8], edi
.text:004089A9                 mov     edi, [esp+13Ch+arg_0]
.text:004089B0                 mov     [esp+13Ch+var_4], ebp
.text:004089B7                 mov     [esp+13Ch+var_134], ebx ; int
.text:004089BB                 mov     [esp+13Ch+lpString1], esi ; int
.text:004089BF                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:004089C2                 call    sub_4086A0
.text:004089C7                 cmp     eax, 0FFFFFFFFh
.text:004089CA                 mov     edx, eax
.text:004089CC                 jz      short loc_4089DE
.text:004089CE                 mov     ecx, [ebx]
.text:004089D0                 and     ecx, 0F000h
.text:004089D6                 cmp     ecx, 0A000h
.text:004089DC                 jz      short loc_408A03
.text:004089DE
.text:004089DE loc_4089DE:                             ; CODE XREF: sub_408980+4C↑j
.text:004089DE                                         ; sub_408980+A1↓j ...
.text:004089DE                 mov     ebx, [esp+13Ch+var_10]
.text:004089E5                 mov     eax, edx
.text:004089E7                 mov     esi, [esp+13Ch+var_C]
.text:004089EE                 mov     edi, [esp+13Ch+var_8]
.text:004089F5                 mov     ebp, [esp+13Ch+var_4]
.text:004089FC                 add     esp, 13Ch
.text:00408A02                 retn
.text:00408A03 ; ---------------------------------------------------------------------------
.text:00408A03
.text:00408A03 loc_408A03:                             ; CODE XREF: sub_408980+5C↑j
.text:00408A03                 mov     [esp+13Ch+var_134], 104h
.text:00408A0B                 lea     ebp, [esp+13Ch+String1]
.text:00408A0F                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:00408A13                 mov     [esp+13Ch+var_13C], esi ; char *
.text:00408A16                 call    sub_408870
.text:00408A1B                 inc     eax
.text:00408A1C                 mov     edx, 0FFFFFFFFh
.text:00408A21                 jz      short loc_4089DE
.text:00408A23                 mov     [esp+13Ch+var_134], ebx ; int
.text:00408A27                 mov     [esp+13Ch+lpString1], ebp ; int
.text:00408A2B                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:00408A2E                 call    sub_4086A0
.text:00408A33                 mov     edx, eax
.text:00408A35                 jmp     short loc_4089DE
.text:00408A35 sub_408980      endp
.text:00408A35
.text:00408A35 ; ---------------------------------------------------------------------------
.text:00408A37                 align 10h
.text:00408A40
.text:00408A40 ; =============== S U B R O U T I N E =======================================
.text:00408A40
.text:00408A40
.text:00408A40 ; int __cdecl sub_408A40(LPCSTR, int)
.text:00408A40 sub_408A40      proc near               ; CODE XREF: sub_401CD0+3C0↑p
.text:00408A40
.text:00408A40 var_13C         = dword ptr -13Ch
.text:00408A40 var_138         = dword ptr -138h
.text:00408A40 var_12C         = dword ptr -12Ch
.text:00408A40 var_4           = dword ptr -4
.text:00408A40 arg_0           = dword ptr  4
.text:00408A40 arg_4           = dword ptr  8
.text:00408A40
.text:00408A40                 sub     esp, 13Ch
.text:00408A46                 mov     edx, [esp+13Ch+arg_0]
.text:00408A4D                 mov     [esp+13Ch+var_4], ebx
.text:00408A54                 lea     ebx, [esp+13Ch+var_12C]
.text:00408A58                 mov     [esp+13Ch+var_138], ebx ; int
.text:00408A5C                 mov     [esp+13Ch+var_13C], edx ; LPCSTR
.text:00408A5F                 call    sub_40B970
.text:00408A64                 test    eax, eax
.text:00408A66                 jz      short loc_408A76
.text:00408A68
.text:00408A68 loc_408A68:                             ; CODE XREF: sub_408A40+4B↓j
.text:00408A68                 mov     ebx, [esp+13Ch+var_4]
.text:00408A6F                 add     esp, 13Ch
.text:00408A75                 retn
.text:00408A76 ; ---------------------------------------------------------------------------
.text:00408A76
.text:00408A76 loc_408A76:                             ; CODE XREF: sub_408A40+26↑j
.text:00408A76                 mov     [esp+13Ch+var_13C], ebx
.text:00408A79                 mov     edx, [esp+13Ch+arg_4]
.text:00408A80                 mov     [esp+13Ch+var_138], edx
.text:00408A84                 call    sub_408A90
.text:00408A89                 xor     eax, eax
.text:00408A8B                 jmp     short loc_408A68
.text:00408A8B sub_408A40      endp
.text:00408A8B
.text:00408A8B ; ---------------------------------------------------------------------------
.text:00408A8D                 align 10h
.text:00408A90
.text:00408A90 ; =============== S U B R O U T I N E =======================================
.text:00408A90
.text:00408A90
.text:00408A90 sub_408A90      proc near               ; CODE XREF: sub_408A40+44↑p
.text:00408A90
.text:00408A90 Destination     = dword ptr -2Ch
.text:00408A90 Source          = dword ptr -28h
.text:00408A90 Count           = dword ptr -24h
.text:00408A90 var_1C          = dword ptr -1Ch
.text:00408A90 var_18          = dword ptr -18h
.text:00408A90 arg_0           = dword ptr  4
.text:00408A90 arg_4           = dword ptr  8
.text:00408A90
.text:00408A90                 push    ebp
.text:00408A91                 mov     ecx, 32h ; '2'
.text:00408A96                 push    edi
.text:00408A97                 push    esi
.text:00408A98                 mov     esi, offset unk_4131E0
.text:00408A9D                 push    ebx
.text:00408A9E                 sub     esp, 1Ch
.text:00408AA1                 mov     ebp, [esp+2Ch+arg_4]
.text:00408AA5                 cld
.text:00408AA6                 mov     edi, ebp
.text:00408AA8                 rep movsd
.text:00408AAA                 mov     ecx, [esp+2Ch+arg_0]
.text:00408AAE                 mov     edx, [ecx+48h]
.text:00408AB1                 mov     ebx, ecx
.text:00408AB3                 mov     edi, [ecx+20h]
.text:00408AB6                 mov     [ebp+60h], edx
.text:00408AB9                 mov     edx, [ecx+24h]
.text:00408ABC                 mov     [ebp+18h], edi
.text:00408ABF                 mov     [ebp+1Ch], edx
.text:00408AC2                 mov     ebx, [ebx+24h]
.text:00408AC5                 mov     ecx, [ecx+20h]
.text:00408AC8                 mov     eax, ebx
.text:00408ACA                 xor     eax, edx
.text:00408ACC                 xor     edi, ecx
.text:00408ACE                 or      eax, edi
.text:00408AD0                 jnz     loc_408C05
.text:00408AD6                 mov     esi, [esp+2Ch+arg_0]
.text:00408ADA                 mov     edi, [esi+18h]
.text:00408ADD                 mov     edx, [esi+1Ch]
.text:00408AE0                 mov     [ebp+10h], edi
.text:00408AE3                 mov     [ebp+14h], edx
.text:00408AE6                 mov     ebx, [esi+1Ch]
.text:00408AE9                 mov     ecx, [esi+18h]
.text:00408AEC                 mov     eax, ebx
.text:00408AEE                 xor     eax, edx
.text:00408AF0                 xor     edi, ecx
.text:00408AF2                 or      eax, edi
.text:00408AF4                 jnz     loc_408C05
.text:00408AFA                 mov     ebx, [esp+2Ch+arg_0]
.text:00408AFE                 mov     edi, [ebx+10h]
.text:00408B01                 mov     edx, [ebx+14h]
.text:00408B04                 mov     [ebp+8], edi
.text:00408B07                 mov     [ebp+0Ch], edx
.text:00408B0A                 mov     ecx, [ebx+10h]
.text:00408B0D                 mov     ebx, [ebx+14h]
.text:00408B10                 xor     edi, ecx
.text:00408B12                 mov     eax, ebx
.text:00408B14                 xor     eax, edx
.text:00408B16                 or      eax, edi
.text:00408B18                 jnz     loc_408C05
.text:00408B1E                 mov     edi, [esp+2Ch+arg_0]
.text:00408B22                 mov     edx, [esp+2Ch+arg_0]
.text:00408B26                 mov     esi, [edi+30h]
.text:00408B29                 mov     ebx, [edi+34h]
.text:00408B2C                 mov     [esp+2Ch+var_1C], esi
.text:00408B30                 mov     ecx, [esp+2Ch+var_1C]
.text:00408B34                 mov     [ebp+28h], esi
.text:00408B37                 mov     [ebp+2Ch], ebx
.text:00408B3A                 mov     esi, [edx+30h]
.text:00408B3D                 mov     [esp+2Ch+var_18], ebx
.text:00408B41                 mov     eax, [edx+34h]
.text:00408B44                 mov     edi, [esp+2Ch+var_18]
.text:00408B48                 xor     esi, ecx
.text:00408B4A                 xor     edi, eax
.text:00408B4C                 or      edi, esi
.text:00408B4E                 jnz     loc_408C05
.text:00408B54                 mov     ebx, [esp+2Ch+arg_0]
.text:00408B58                 mov     edi, [ebx+28h]
.text:00408B5B                 mov     ecx, [ebx+2Ch]
.text:00408B5E                 mov     [ebp+20h], edi
.text:00408B61                 mov     [ebp+24h], ecx
.text:00408B64                 mov     edx, [ebx+2Ch]
.text:00408B67                 mov     eax, [ebx+28h]
.text:00408B6A                 mov     esi, edx
.text:00408B6C                 xor     esi, ecx
.text:00408B6E                 xor     edi, eax
.text:00408B70                 or      esi, edi
.text:00408B72                 jnz     loc_408C05
.text:00408B78                 mov     ebx, [esp+2Ch+arg_0]
.text:00408B7C                 mov     edi, [esp+2Ch+var_1C]
.text:00408B80                 mov     edx, [ebx+0Ch]
.text:00408B83                 mov     [ebp+30h], edi
.text:00408B86                 mov     edi, [esp+2Ch+arg_0]
.text:00408B8A                 mov     [ebp+0], edx
.text:00408B8D                 mov     ecx, [ebx+4]
.text:00408B90                 mov     ebx, [esp+2Ch+var_18]
.text:00408B94                 mov     edx, [edi+3Ch]
.text:00408B97                 mov     [ebp+4], ecx
.text:00408B9A                 mov     ecx, [edi+40h]
.text:00408B9D                 mov     [ebp+34h], ebx
.text:00408BA0                 mov     ebx, edi
.text:00408BA2                 add     ebx, 4Ch ; 'L'
.text:00408BA5                 mov     [ebp+38h], edx
.text:00408BA8                 lea     edi, [ebp+40h]
.text:00408BAB                 mov     [ebp+3Ch], ecx
.text:00408BAE                 mov     [esp+2Ch+Source], ebx ; Source
.text:00408BB2                 mov     [esp+2Ch+Destination], edi ; Destination
.text:00408BB5                 lea     edi, [ebp+68h]
.text:00408BB8                 mov     [esp+2Ch+Count], 20h ; ' ' ; Count
.text:00408BC0                 call    strncpy
.text:00408BC5                 mov     ebx, [esp+2Ch+arg_0]
.text:00408BC9                 mov     edx, [ebx+110h]
.text:00408BCF                 mov     ecx, ebx
.text:00408BD1                 add     ecx, 5Ch ; '\'
.text:00408BD4                 mov     [ebp+64h], edx
.text:00408BD7                 mov     [esp+2Ch+Source], ecx ; Source
.text:00408BDB                 mov     [esp+2Ch+Destination], edi ; Destination
.text:00408BDE                 lea     edi, [ebp+88h]
.text:00408BE4                 mov     [esp+2Ch+Count], 20h ; ' ' ; Count
.text:00408BEC                 call    strncpy
.text:00408BF1                 cld
.text:00408BF2                 mov     eax, esi
.text:00408BF4                 mov     ecx, 10h
.text:00408BF9                 rep stosd
.text:00408BFB                 xor     eax, eax
.text:00408BFD
.text:00408BFD loc_408BFD:                             ; CODE XREF: sub_408A90+185↓j
.text:00408BFD                 add     esp, 1Ch
.text:00408C00                 pop     ebx
.text:00408C01                 pop     esi
.text:00408C02                 pop     edi
.text:00408C03                 pop     ebp
.text:00408C04                 retn
.text:00408C05 ; ---------------------------------------------------------------------------
.text:00408C05
.text:00408C05 loc_408C05:                             ; CODE XREF: sub_408A90+40↑j
.text:00408C05                                         ; sub_408A90+64↑j ...
.text:00408C05                 call    _errno
.text:00408C0A                 mov     dword ptr [eax], 73h ; 's'
.text:00408C10                 mov     eax, 0FFFFFFFFh
.text:00408C15                 jmp     short loc_408BFD
.text:00408C15 sub_408A90      endp
.text:00408C15
.text:00408C15 ; ---------------------------------------------------------------------------
.text:00408C17                 align 10h
.text:00408C20
.text:00408C20 ; =============== S U B R O U T I N E =======================================
.text:00408C20
.text:00408C20
.text:00408C20 sub_408C20      proc near               ; CODE XREF: sub_402AE0+214↑p
.text:00408C20                 xor     eax, eax
.text:00408C22                 retn
.text:00408C22 sub_408C20      endp
.text:00408C22
.text:00408C22 ; ---------------------------------------------------------------------------
.text:00408C23                 align 10h
.text:00408C30
.text:00408C30 ; =============== S U B R O U T I N E =======================================
.text:00408C30
.text:00408C30
.text:00408C30 nullsub_1       proc near               ; CODE XREF: sub_402AE0+209↑p
.text:00408C30                 retn
.text:00408C30 nullsub_1       endp
.text:00408C30
.text:00408C30 ; ---------------------------------------------------------------------------
.text:00408C31                 align 10h
.text:00408C40
.text:00408C40 ; =============== S U B R O U T I N E =======================================
.text:00408C40
.text:00408C40
.text:00408C40 sub_408C40      proc near               ; CODE XREF: sub_402AE0+304↑p
.text:00408C40
.text:00408C40 var_1C          = dword ptr -1Ch
.text:00408C40 var_18          = dword ptr -18h
.text:00408C40 var_14          = dword ptr -14h
.text:00408C40 var_10          = dword ptr -10h
.text:00408C40 var_C           = dword ptr -0Ch
.text:00408C40 var_4           = dword ptr -4
.text:00408C40 arg_0           = dword ptr  4
.text:00408C40
.text:00408C40                 sub     esp, 1Ch
.text:00408C43                 mov     ecx, [esp+1Ch+arg_0]
.text:00408C47                 lea     edx, [esp+1Ch+var_4]
.text:00408C4B                 mov     [esp+1Ch+var_C], edx ; int
.text:00408C4F                 mov     [esp+1Ch+var_10], 400h ; int
.text:00408C57                 mov     [esp+1Ch+var_1C], ecx ; int
.text:00408C5A                 mov     [esp+1Ch+var_14], offset byte_4132D0 ; char *
.text:00408C62                 mov     [esp+1Ch+var_18], offset unk_4132B0 ; int
.text:00408C6A                 call    sub_40BB70
.text:00408C6F                 test    eax, eax
.text:00408C71                 mov     ecx, [esp+1Ch+var_4]
.text:00408C75                 setnz   dl
.text:00408C78                 add     esp, 1Ch
.text:00408C7B                 movzx   eax, dl
.text:00408C7E                 dec     eax
.text:00408C7F                 and     eax, ecx
.text:00408C81                 retn
.text:00408C81 sub_408C40      endp
.text:00408C81
.text:00408C81 ; ---------------------------------------------------------------------------
.text:00408C82                 align 10h
.text:00408C90
.text:00408C90 ; =============== S U B R O U T I N E =======================================
.text:00408C90
.text:00408C90
.text:00408C90 nullsub_2       proc near               ; CODE XREF: sub_402AE0+2F9↑p
.text:00408C90                 retn
.text:00408C90 nullsub_2       endp
.text:00408C90
.text:00408C90 ; ---------------------------------------------------------------------------
.text:00408C91                 align 10h
.text:00408CA0 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:00408CA0                                         ; DATA XREF: .data:off_412054↓o
.text:00408CB4 ; const CHAR ModuleName[]
.text:00408CB4 ModuleName      db 'KERNEL32.DLL',0     ; DATA XREF: sub_408CE0+11↓o
.text:00408CB4                                         ; sub_408E50+C↓o ...
.text:00408CC1 ; const CHAR ProcName[]
.text:00408CC1 ProcName        db 'GetFileAttributesExA',0
.text:00408CC1                                         ; DATA XREF: sub_408CE0+28↓o
.text:00408CD6                 align 10h
.text:00408CE0
.text:00408CE0 ; =============== S U B R O U T I N E =======================================
.text:00408CE0
.text:00408CE0
.text:00408CE0 ; int __cdecl sub_408CE0(LPCSTR lpFileName, int)
.text:00408CE0 sub_408CE0      proc near               ; CODE XREF: .text:00409E84↓p
.text:00408CE0                                         ; sub_40A280+37↓p
.text:00408CE0
.text:00408CE0 lpModuleName    = dword ptr -18Ch
.text:00408CE0 lpProcName      = dword ptr -188h
.text:00408CE0 var_184         = dword ptr -184h
.text:00408CE0 var_170         = dword ptr -170h
.text:00408CE0 var_164         = dword ptr -164h
.text:00408CE0 hModule         = dword ptr -160h
.text:00408CE0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00408CE0 lpFileName      = dword ptr  4
.text:00408CE0 arg_4           = dword ptr  8
.text:00408CE0
.text:00408CE0                 push    ebp
.text:00408CE1                 push    edi
.text:00408CE2                 push    esi
.text:00408CE3                 push    ebx
.text:00408CE4                 sub     esp, 17Ch
.text:00408CEA                 mov     ebx, [esp+18Ch+arg_4]
.text:00408CF1                 mov     [esp+18Ch+lpModuleName], offset ModuleName ; "KERNEL32.DLL"
.text:00408CF8                 call    GetModuleHandleA
.text:00408CFD                 sub     esp, 4
.text:00408D00                 mov     [esp+18Ch+hModule], eax
.text:00408D04                 mov     edx, [esp+18Ch+hModule]
.text:00408D08                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:00408D10                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:00408D13                 call    GetProcAddress
.text:00408D18                 sub     esp, 8
.text:00408D1B                 mov     ebp, eax
.text:00408D1D                 mov     eax, [esp+18Ch+lpFileName]
.text:00408D24                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:00408D27                 call    GetFileAttributesA
.text:00408D2C                 sub     esp, 4
.text:00408D2F                 mov     [esp+18Ch+var_164], eax
.text:00408D33                 xor     eax, eax
.text:00408D35                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:00408D3A                 jz      short loc_408D91
.text:00408D3C                 cld
.text:00408D3D                 mov     ecx, 50h ; 'P'
.text:00408D42                 lea     esi, [esp+18Ch+FindFileData]
.text:00408D46                 mov     edi, esi
.text:00408D48                 test    ebp, ebp
.text:00408D4A                 rep stosd
.text:00408D4C                 mov     [esp+18Ch+var_170], 0
.text:00408D54                 jz      short loc_408D75
.text:00408D56                 mov     [esp+18Ch+var_184], ebx
.text:00408D5A                 mov     ecx, [esp+18Ch+lpFileName]
.text:00408D61                 mov     [esp+18Ch+lpProcName], 0
.text:00408D69                 mov     [esp+18Ch+lpModuleName], ecx
.text:00408D6C                 call    ebp
.text:00408D6E                 sub     esp, 0Ch
.text:00408D71                 mov     [esp+18Ch+var_170], eax
.text:00408D75
.text:00408D75 loc_408D75:                             ; CODE XREF: sub_408CE0+74↑j
.text:00408D75                 mov     eax, [esp+18Ch+var_170]
.text:00408D79                 test    eax, eax
.text:00408D7B                 jz      short loc_408DA0
.text:00408D7D
.text:00408D7D loc_408D7D:                             ; CODE XREF: sub_408CE0+131↓j
.text:00408D7D                                         ; sub_408CE0+14B↓j
.text:00408D7D                 mov     ebx, [esp+18Ch+hModule]
.text:00408D81                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:00408D84                 call    FreeLibrary
.text:00408D89                 sub     esp, 4
.text:00408D8C                 mov     eax, 1
.text:00408D91
.text:00408D91 loc_408D91:                             ; CODE XREF: sub_408CE0+5A↑j
.text:00408D91                 add     esp, 17Ch
.text:00408D97                 pop     ebx
.text:00408D98                 pop     esi
.text:00408D99                 pop     edi
.text:00408D9A                 pop     ebp
.text:00408D9B                 retn
.text:00408D9B ; ---------------------------------------------------------------------------
.text:00408D9C                 align 10h
.text:00408DA0
.text:00408DA0 loc_408DA0:                             ; CODE XREF: sub_408CE0+9B↑j
.text:00408DA0                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:00408DA4                 mov     edx, [esp+18Ch+lpFileName]
.text:00408DAB                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:00408DAE                 call    FindFirstFileA
.text:00408DB3                 sub     esp, 8
.text:00408DB6                 xor     ecx, ecx
.text:00408DB8                 cmp     eax, 0FFFFFFFFh
.text:00408DBB                 setnz   cl
.text:00408DBE                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:00408DC2                 mov     [ebx], edi
.text:00408DC4                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:00408DC8                 mov     [esp+18Ch+var_170], ecx
.text:00408DCC                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:00408DD0                 mov     [ebx+8], esi
.text:00408DD3                 mov     [ebx+4], ecx
.text:00408DD6                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:00408DDA                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:00408DDE                 mov     [ebx+0Ch], ebp
.text:00408DE1                 mov     [ebx+10h], edi
.text:00408DE4                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:00408DE8                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:00408DEC                 mov     [ebx+18h], esi
.text:00408DEF                 mov     [ebx+14h], ecx
.text:00408DF2                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:00408DF6                 mov     [ebx+1Ch], ebp
.text:00408DF9                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:00408DFD                 mov     [ebx+20h], edi
.text:00408E00                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:00408E03                 call    FindClose
.text:00408E08                 sub     esp, 4
.text:00408E0B                 mov     esi, [esp+18Ch+var_170]
.text:00408E0F                 test    esi, esi
.text:00408E11                 jnz     loc_408D7D
.text:00408E17                 cld
.text:00408E18                 mov     eax, [esp+18Ch+var_170]
.text:00408E1C                 mov     ecx, 9
.text:00408E21                 mov     edi, ebx
.text:00408E23                 rep stosd
.text:00408E25                 mov     ebp, [esp+18Ch+var_164]
.text:00408E29                 mov     [ebx], ebp
.text:00408E2B                 jmp     loc_408D7D
.text:00408E2B sub_408CE0      endp
.text:00408E2B
.text:00408E2B ; ---------------------------------------------------------------------------
.text:00408E30 ; const CHAR aFindfirstfilee[]
.text:00408E30 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_408E50+23↓o
.text:00408E41 ; const char asc_408E41[]
.text:00408E41 asc_408E41      db '\*',0               ; DATA XREF: sub_408E50:loc_408EDD↓o
.text:00408E44                 align 10h
.text:00408E50
.text:00408E50 ; =============== S U B R O U T I N E =======================================
.text:00408E50
.text:00408E50
.text:00408E50 ; int __cdecl sub_408E50(char *Str)
.text:00408E50 sub_408E50      proc near               ; CODE XREF: .text:00409F83↓p
.text:00408E50                                         ; sub_40A280+3FA↓p ...
.text:00408E50
.text:00408E50 lpLibFileName   = dword ptr -18Ch
.text:00408E50 lpProcName      = dword ptr -188h
.text:00408E50 var_184         = dword ptr -184h
.text:00408E50 var_180         = dword ptr -180h
.text:00408E50 var_17C         = dword ptr -17Ch
.text:00408E50 var_178         = dword ptr -178h
.text:00408E50 var_164         = dword ptr -164h
.text:00408E50 hModule         = dword ptr -160h
.text:00408E50 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00408E50 Str             = dword ptr  4
.text:00408E50
.text:00408E50                 push    ebp
.text:00408E51                 push    edi
.text:00408E52                 xor     edi, edi
.text:00408E54                 push    esi
.text:00408E55                 push    ebx
.text:00408E56                 sub     esp, 17Ch
.text:00408E5C                 mov     [esp+18Ch+lpLibFileName], offset ModuleName ; "KERNEL32.DLL"
.text:00408E63                 call    LoadLibraryA
.text:00408E68                 sub     esp, 4
.text:00408E6B                 mov     [esp+18Ch+hModule], eax
.text:00408E6F                 mov     ecx, [esp+18Ch+hModule]
.text:00408E73                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:00408E7B                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:00408E7E                 call    GetProcAddress
.text:00408E83                 sub     esp, 8
.text:00408E86                 mov     edx, [esp+18Ch+Str]
.text:00408E8D                 mov     [esp+18Ch+var_164], eax
.text:00408E91                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:00408E94                 call    strlen
.text:00408E99                 lea     edx, [eax+5]
.text:00408E9C                 mov     ebx, eax
.text:00408E9E                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:00408EA1                 call    malloc
.text:00408EA6                 mov     esi, eax
.text:00408EA8                 test    esi, esi
.text:00408EAA                 mov     eax, 1
.text:00408EAF                 jz      loc_408F8D
.text:00408EB5                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00408EB8                 mov     ebp, [esp+18Ch+Str]
.text:00408EBF                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:00408EC3                 call    strcpy
.text:00408EC8                 movzx   eax, byte ptr [ebx+esi-1]
.text:00408ECD                 cmp     al, 2Fh ; '/'
.text:00408ECF                 jz      loc_408FBB
.text:00408ED5                 cmp     al, 5Ch ; '\'
.text:00408ED7                 jz      loc_408FBB
.text:00408EDD
.text:00408EDD loc_408EDD:                             ; CODE XREF: sub_408E50+170↓j
.text:00408EDD                 mov     [esp+18Ch+lpProcName], offset asc_408E41 ; "\\*"
.text:00408EE5                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00408EE8                 call    strcat
.text:00408EED                 mov     eax, [esp+18Ch+var_164]
.text:00408EF1                 test    eax, eax
.text:00408EF3                 jz      loc_408FB5
.text:00408EF9                 mov     [esp+18Ch+var_178], 0
.text:00408F01                 lea     ebp, [esp+18Ch+FindFileData]
.text:00408F05                 mov     [esp+18Ch+var_17C], 0
.text:00408F0D                 mov     [esp+18Ch+var_180], 1
.text:00408F15                 mov     [esp+18Ch+var_184], ebp
.text:00408F19                 mov     [esp+18Ch+lpProcName], 0
.text:00408F21                 mov     [esp+18Ch+lpLibFileName], esi
.text:00408F24                 call    [esp+18Ch+var_164]
.text:00408F28                 sub     esp, 18h
.text:00408F2B                 mov     ebx, eax
.text:00408F2D                 cmp     eax, 0FFFFFFFFh
.text:00408F30                 jz      short loc_408F98
.text:00408F32                 lea     esi, [esi+0]
.text:00408F39                 lea     edi, [edi+0]
.text:00408F40
.text:00408F40 loc_408F40:                             ; CODE XREF: sub_408E50+109↓j
.text:00408F40                                         ; sub_408E50+161↓j
.text:00408F40                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:00408F45                 jz      short loc_408F48
.text:00408F47                 inc     edi
.text:00408F48
.text:00408F48 loc_408F48:                             ; CODE XREF: sub_408E50+F5↑j
.text:00408F48                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:00408F4C                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:00408F4F                 call    FindNextFileA
.text:00408F54                 sub     esp, 8
.text:00408F57                 test    eax, eax
.text:00408F59                 jnz     short loc_408F40
.text:00408F5B                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:00408F5E                 call    FindClose
.text:00408F63                 sub     esp, 4
.text:00408F66                 mov     esi, [esp+18Ch+hModule]
.text:00408F6A                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:00408F6D                 call    FreeLibrary
.text:00408F72                 sub     esp, 4
.text:00408F75                 mov     ebx, [esp+18Ch+Str]
.text:00408F7C                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:00408F7F                 call    sub_40C1F0
.text:00408F84                 test    eax, eax
.text:00408F86                 jz      short loc_408F8B
.text:00408F88                 add     edi, 2
.text:00408F8B
.text:00408F8B loc_408F8B:                             ; CODE XREF: sub_408E50+136↑j
.text:00408F8B                 mov     eax, edi
.text:00408F8D
.text:00408F8D loc_408F8D:                             ; CODE XREF: sub_408E50+5F↑j
.text:00408F8D                                         ; sub_408E50+163↓j
.text:00408F8D                 add     esp, 17Ch
.text:00408F93                 pop     ebx
.text:00408F94                 pop     esi
.text:00408F95                 pop     edi
.text:00408F96                 pop     ebp
.text:00408F97                 retn
.text:00408F98 ; ---------------------------------------------------------------------------
.text:00408F98
.text:00408F98 loc_408F98:                             ; CODE XREF: sub_408E50+E0↑j
.text:00408F98                                         ; sub_408E50+169↓j
.text:00408F98                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:00408F9C                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:00408F9F                 call    FindFirstFileA
.text:00408FA4                 mov     ebx, eax
.text:00408FA6                 sub     esp, 8
.text:00408FA9                 cmp     ebx, 0FFFFFFFFh
.text:00408FAC                 mov     eax, 2
.text:00408FB1                 jnz     short loc_408F40
.text:00408FB3                 jmp     short loc_408F8D
.text:00408FB5 ; ---------------------------------------------------------------------------
.text:00408FB5
.text:00408FB5 loc_408FB5:                             ; CODE XREF: sub_408E50+A3↑j
.text:00408FB5                 lea     ebp, [esp+18Ch+FindFileData]
.text:00408FB9                 jmp     short loc_408F98
.text:00408FBB ; ---------------------------------------------------------------------------
.text:00408FBB
.text:00408FBB loc_408FBB:                             ; CODE XREF: sub_408E50+7F↑j
.text:00408FBB                                         ; sub_408E50+87↑j
.text:00408FBB                 mov     byte ptr [ebx+esi-1], 0
.text:00408FC0                 jmp     loc_408EDD
.text:00408FC0 sub_408E50      endp
.text:00408FC0
.text:00408FC0 ; ---------------------------------------------------------------------------
.text:00408FC5                 align 10h
.text:00408FD0
.text:00408FD0 ; =============== S U B R O U T I N E =======================================
.text:00408FD0
.text:00408FD0
.text:00408FD0 ; int __cdecl sub_408FD0(HANDLE hNamedPipe, int)
.text:00408FD0 sub_408FD0      proc near               ; CODE XREF: sub_4086A0+20A7↓p
.text:00408FD0                                         ; sub_40DD20+52↓j
.text:00408FD0
.text:00408FD0 hFile           = dword ptr -0ECh
.text:00408FD0 lpFileInformation= dword ptr -0E8h
.text:00408FD0 nBufferSize     = dword ptr -0E4h
.text:00408FD0 lpBytesRead     = dword ptr -0E0h
.text:00408FD0 lpTotalBytesAvail= dword ptr -0DCh
.text:00408FD0 lpBytesLeftThisMessage= dword ptr -0D8h
.text:00408FD0 var_C4          = dword ptr -0C4h
.text:00408FD0 var_C0          = dword ptr -0C0h
.text:00408FD0 var_BC          = dword ptr -0BCh
.text:00408FD0 var_B8          = dword ptr -0B8h
.text:00408FD0 var_B4          = dword ptr -0B4h
.text:00408FD0 var_B0          = dword ptr -0B0h
.text:00408FD0 var_AC          = dword ptr -0ACh
.text:00408FD0 var_A8          = dword ptr -0A8h
.text:00408FD0 TotalBytesAvail = dword ptr -0A0h
.text:00408FD0 var_9C          = dword ptr -9Ch
.text:00408FD0 var_98          = dword ptr -98h
.text:00408FD0 var_94          = dword ptr -94h
.text:00408FD0 var_90          = dword ptr -90h
.text:00408FD0 var_8C          = dword ptr -8Ch
.text:00408FD0 var_88          = dword ptr -88h
.text:00408FD0 var_84          = dword ptr -84h
.text:00408FD0 var_80          = dword ptr -80h
.text:00408FD0 var_7C          = dword ptr -7Ch
.text:00408FD0 var_78          = dword ptr -78h
.text:00408FD0 var_74          = dword ptr -74h
.text:00408FD0 var_70          = dword ptr -70h
.text:00408FD0 var_6C          = dword ptr -6Ch
.text:00408FD0 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:00408FD0 hNamedPipe      = dword ptr  4
.text:00408FD0 arg_4           = dword ptr  8
.text:00408FD0
.text:00408FD0                 push    ebp
.text:00408FD1                 mov     eax, 0FFFFFFFFh
.text:00408FD6                 push    edi
.text:00408FD7                 push    esi
.text:00408FD8                 push    ebx
.text:00408FD9                 sub     esp, 0DCh
.text:00408FDF                 mov     esi, [esp+0ECh+hNamedPipe]
.text:00408FE6                 mov     ebp, [esp+0ECh+arg_4]
.text:00408FED                 cmp     esi, 0FFFFFFFFh
.text:00408FF0                 jz      loc_409371
.text:00408FF6                 cld
.text:00408FF7                 xor     eax, eax
.text:00408FF9                 lea     ebx, [esp+0ECh+FileInformation]
.text:00409000                 mov     ecx, 0Dh
.text:00409005                 mov     edi, ebx
.text:00409007                 rep stosd
.text:00409009                 mov     dword ptr [ebp+18h], 1
.text:00409010                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00409013                 call    GetFileType
.text:00409018                 sub     esp, 4
.text:0040901B                 xor     edx, edx
.text:0040901D                 cmp     eax, 2
.text:00409020                 jz      loc_409450
.text:00409026                 cmp     eax, 3
.text:00409029                 jz      loc_409440
.text:0040902F
.text:0040902F loc_40902F:                             ; CODE XREF: sub_408FD0+475↓j
.text:0040902F                                         ; sub_408FD0+485↓j
.text:0040902F                 or      [ebp+0], edx
.text:00409032                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:00409036                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00409039                 call    GetFileInformationByHandle
.text:0040903E                 sub     esp, 8
.text:00409041                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00409048                 test    ecx, ecx
.text:0040904A                 jnz     short loc_409080
.text:0040904C                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00409053                 test    edx, edx
.text:00409055                 jnz     short loc_409080
.text:00409057                 mov     edx, [ebp+0]
.text:0040905A                 and     edx, 0F000h
.text:00409060                 cmp     edx, 1000h
.text:00409066                 jz      loc_4093D6
.text:0040906C
.text:0040906C loc_40906C:                             ; CODE XREF: sub_408FD0+459↓j
.text:0040906C                                         ; sub_408FD0+465↓j
.text:0040906C                 test    ecx, ecx
.text:0040906E                 jnz     short loc_409080
.text:00409070                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00409077                 test    edx, edx
.text:00409079                 jz      loc_4093B4
.text:0040907F                 nop
.text:00409080
.text:00409080 loc_409080:                             ; CODE XREF: sub_408FD0+7A↑j
.text:00409080                                         ; sub_408FD0+85↑j ...
.text:00409080                 cld
.text:00409081                 mov     esi, ebx
.text:00409083                 mov     dword ptr [ebp+14h], 0
.text:0040908A                 lea     edi, [esp+0ECh+var_9C]
.text:0040908E                 mov     ecx, 0Dh
.text:00409093                 rep movsd
.text:00409095                 xor     ebx, ebx
.text:00409097                 xor     edi, edi
.text:00409099                 mov     edx, [esp+0ECh+var_6C]
.text:004090A0                 mov     esi, [esp+0ECh+var_70]
.text:004090A4                 or      edx, ebx
.text:004090A6                 mov     ebx, [esp+0ECh+var_9C]
.text:004090AA                 mov     [ebp+8], edx
.text:004090AD                 or      edi, esi
.text:004090AF                 xor     edx, edx
.text:004090B1                 mov     [ebp+0Ch], edi
.text:004090B4                 test    bl, 10h
.text:004090B7                 mov     esi, [esp+0ECh+var_80]
.text:004090BB                 setz    dl
.text:004090BE                 mov     [ebp+10h], esi
.text:004090C1                 dec     edx
.text:004090C2                 and     edx, 0FFFFC000h
.text:004090C8                 add     edx, 8000h
.text:004090CE                 or      edx, 124h
.text:004090D4                 test    bl, 1
.text:004090D7                 movzx   eax, dx
.text:004090DA                 jnz     short loc_4090E1
.text:004090DC                 or      eax, 92h
.text:004090E1
.text:004090E1 loc_4090E1:                             ; CODE XREF: sub_408FD0+10A↑j
.text:004090E1                 or      [ebp+0], eax
.text:004090E4                 xor     edx, edx
.text:004090E6                 mov     ebx, [esp+0ECh+var_7C]
.text:004090EA                 mov     ecx, [esp+0ECh+var_78]
.text:004090EE                 mov     eax, edx
.text:004090F0                 xor     esi, esi
.text:004090F2                 mov     edx, [esp+0ECh+var_8C]
.text:004090F6                 mov     edi, ebx
.text:004090F8                 or      eax, edi
.text:004090FA                 mov     [esp+0ECh+var_A8], eax
.text:004090FE                 mov     ebx, ecx
.text:00409100                 mov     edi, [esp+0ECh+var_74]
.text:00409104                 or      ebx, esi
.text:00409106                 mov     esi, [esp+0ECh+var_A8]
.text:0040910A                 mov     [esp+0ECh+var_AC], ebx
.text:0040910E                 xor     ebx, ebx
.text:00409110                 mov     ecx, [esp+0ECh+var_AC]
.text:00409114                 mov     [ebp+34h], esi
.text:00409117                 mov     esi, [esp+0ECh+var_90]
.text:0040911B                 mov     [ebp+18h], edi
.text:0040911E                 xor     edi, edi
.text:00409120                 or      esi, ebx
.text:00409122                 mov     [ebp+30h], ecx
.text:00409125                 or      edi, edx
.text:00409127                 mov     edx, esi
.text:00409129                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00409131                 sub     edx, 0D53E8000h
.text:00409137                 mov     ebx, edi
.text:00409139                 sbb     ebx, 19DB1DEh
.text:0040913F                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00409143                 mov     [esp+0ECh+lpBytesRead], 0
.text:0040914B                 mov     [esp+0ECh+hFile], edx
.text:0040914E                 call    sub_410330
.text:00409153                 mov     ecx, eax
.text:00409155                 shr     eax, 1Fh
.text:00409158                 dec     eax
.text:00409159                 and     ecx, eax
.text:0040915B                 mov     [ebp+38h], ecx
.text:0040915E                 mov     [esp+0ECh+hFile], esi
.text:00409161                 mov     [esp+0ECh+lpFileInformation], edi
.text:00409165                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040916D                 mov     [esp+0ECh+lpBytesRead], 0
.text:00409175                 call    sub_410450
.text:0040917A                 lea     ebx, [eax+eax*4]
.text:0040917D                 xor     ecx, ecx
.text:0040917F                 lea     esi, [ebx+ebx*4]
.text:00409182                 shl     esi, 2
.text:00409185                 mov     edi, esi
.text:00409187                 shr     edi, 1Fh
.text:0040918A                 dec     edi
.text:0040918B                 and     edi, esi
.text:0040918D                 mov     [ebp+3Ch], edi
.text:00409190                 mov     esi, [esp+0ECh+var_98]
.text:00409194                 xor     edi, edi
.text:00409196                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0040919E                 mov     edx, [esp+0ECh+var_94]
.text:004091A2                 mov     [esp+0ECh+lpBytesRead], 0
.text:004091AA                 or      esi, ecx
.text:004091AC                 or      edi, edx
.text:004091AE                 mov     edx, esi
.text:004091B0                 mov     ecx, edi
.text:004091B2                 sub     edx, 0D53E8000h
.text:004091B8                 sbb     ecx, 19DB1DEh
.text:004091BE                 mov     [esp+0ECh+lpFileInformation], ecx
.text:004091C2                 mov     [esp+0ECh+hFile], edx
.text:004091C5                 call    sub_410330
.text:004091CA                 mov     ebx, eax
.text:004091CC                 shr     eax, 1Fh
.text:004091CF                 dec     eax
.text:004091D0                 and     ebx, eax
.text:004091D2                 mov     [ebp+48h], ebx
.text:004091D5                 xor     ebx, ebx
.text:004091D7                 mov     [esp+0ECh+hFile], esi
.text:004091DA                 mov     [esp+0ECh+lpFileInformation], edi
.text:004091DE                 mov     [esp+0ECh+nBufferSize], 989680h
.text:004091E6                 mov     [esp+0ECh+lpBytesRead], 0
.text:004091EE                 call    sub_410450
.text:004091F3                 lea     ecx, [eax+eax*4]
.text:004091F6                 lea     esi, [ecx+ecx*4]
.text:004091F9                 shl     esi, 2
.text:004091FC                 mov     edi, esi
.text:004091FE                 shr     edi, 1Fh
.text:00409201                 dec     edi
.text:00409202                 and     edi, esi
.text:00409204                 mov     [ebp+4Ch], edi
.text:00409207                 mov     esi, [esp+0ECh+var_88]
.text:0040920B                 xor     edi, edi
.text:0040920D                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00409215                 mov     edx, [esp+0ECh+var_84]
.text:00409219                 mov     [esp+0ECh+lpBytesRead], 0
.text:00409221                 or      esi, ebx
.text:00409223                 or      edi, edx
.text:00409225                 mov     edx, esi
.text:00409227                 mov     ebx, edi
.text:00409229                 sub     edx, 0D53E8000h
.text:0040922F                 sbb     ebx, 19DB1DEh
.text:00409235                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00409239                 mov     [esp+0ECh+hFile], edx
.text:0040923C                 call    sub_410330
.text:00409241                 mov     ecx, eax
.text:00409243                 shr     eax, 1Fh
.text:00409246                 dec     eax
.text:00409247                 and     ecx, eax
.text:00409249                 mov     [ebp+40h], ecx
.text:0040924C                 mov     [esp+0ECh+lpFileInformation], edi
.text:00409250                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00409258                 mov     [esp+0ECh+lpBytesRead], 0
.text:00409260                 mov     [esp+0ECh+hFile], esi
.text:00409263                 call    sub_410450
.text:00409268                 mov     dword ptr [ebp+50h], 200h
.text:0040926F                 lea     ebx, [eax+eax*4]
.text:00409272                 mov     edi, [esp+0ECh+var_A8]
.text:00409276                 lea     edx, [ebx+ebx*4]
.text:00409279                 mov     eax, [esp+0ECh+var_AC]
.text:0040927D                 shl     edx, 2
.text:00409280                 mov     ecx, edx
.text:00409282                 shr     ecx, 1Fh
.text:00409285                 dec     ecx
.text:00409286                 and     ecx, edx
.text:00409288                 test    edi, edi
.text:0040928A                 mov     edx, [esp+0ECh+var_A8]
.text:0040928E                 mov     [ebp+44h], ecx
.text:00409291                 js      loc_4093A7
.text:00409297
.text:00409297 loc_409297:                             ; CODE XREF: sub_408FD0+3DF↓j
.text:00409297                 mov     edi, [esp+0ECh+var_AC]
.text:0040929B                 xor     esi, esi
.text:0040929D                 mov     ecx, eax
.text:0040929F                 shrd    ecx, edx, 9
.text:004092A3                 mov     ebx, edx
.text:004092A5                 mov     eax, esi
.text:004092A7                 and     edi, 1FFh
.text:004092AD                 sar     ebx, 9
.text:004092B0                 or      eax, edi
.text:004092B2                 jz      short loc_4092BA
.text:004092B4                 add     ecx, 1
.text:004092B7                 adc     ebx, 0
.text:004092BA
.text:004092BA loc_4092BA:                             ; CODE XREF: sub_408FD0+2E2↑j
.text:004092BA                 mov     [ebp+5Ch], ebx
.text:004092BD                 mov     esi, dword_412050
.text:004092C3                 xor     edi, edi
.text:004092C5                 mov     [ebp+58h], ecx
.text:004092C8                 mov     ebx, dword_412050
.text:004092CE                 mov     ecx, [esp+0ECh+var_A8]
.text:004092D2                 mov     edx, [esp+0ECh+var_AC]
.text:004092D6                 mov     [ebp+50h], ebx
.text:004092D9                 shr     ebx, 9
.text:004092DC                 mov     [esp+0ECh+lpBytesRead], edi
.text:004092E0                 mov     [esp+0ECh+lpFileInformation], ecx
.text:004092E4                 mov     [esp+0ECh+nBufferSize], esi
.text:004092E8                 mov     [esp+0ECh+hFile], edx
.text:004092EB                 call    sub_410330
.text:004092F0                 mov     [esp+0ECh+lpBytesRead], edi
.text:004092F4                 mov     ecx, [esp+0ECh+var_AC]
.text:004092F8                 mov     edi, [esp+0ECh+var_A8]
.text:004092FC                 mov     [esp+0ECh+var_BC], ebx
.text:00409300                 mov     [esp+0ECh+var_B4], eax
.text:00409304                 mov     [esp+0ECh+var_B0], edx
.text:00409308                 mov     [esp+0ECh+var_B8], 0
.text:00409310                 mov     [esp+0ECh+nBufferSize], esi
.text:00409314                 mov     [esp+0ECh+hFile], ecx
.text:00409317                 mov     [esp+0ECh+lpFileInformation], edi
.text:0040931B                 call    sub_410450
.text:00409320                 mov     ebx, edx
.text:00409322                 or      ebx, eax
.text:00409324                 jz      short loc_409380
.text:00409326                 mov     edi, [esp+0ECh+var_B4]
.text:0040932A                 mov     esi, [esp+0ECh+var_B0]
.text:0040932E                 mov     eax, [esp+0ECh+var_BC]
.text:00409332                 mov     [esp+0ECh+var_C4], edi
.text:00409336                 mov     ecx, [esp+0ECh+var_B8]
.text:0040933A                 add     [esp+0ECh+var_C4], 1
.text:0040933F                 mov     [esp+0ECh+var_C0], esi
.text:00409343                 adc     [esp+0ECh+var_C0], 0
.text:00409348                 mul     [esp+0ECh+var_C4]
.text:0040934C                 mov     edi, [esp+0ECh+var_C0]
.text:00409350                 mov     ebx, edx
.text:00409352                 mov     edx, [esp+0ECh+var_C4]
.text:00409356                 mov     esi, eax
.text:00409358                 mov     eax, ebx
.text:0040935A                 imul    ecx, edx
.text:0040935D                 mov     edx, [esp+0ECh+var_BC]
.text:00409361                 imul    edx, edi
.text:00409364                 add     eax, ecx
.text:00409366                 lea     edi, [edx+eax]
.text:00409369
.text:00409369 loc_409369:                             ; CODE XREF: sub_408FD0+3D5↓j
.text:00409369                 mov     [ebp+58h], esi
.text:0040936C                 xor     eax, eax
.text:0040936E                 mov     [ebp+5Ch], edi
.text:00409371
.text:00409371 loc_409371:                             ; CODE XREF: sub_408FD0+20↑j
.text:00409371                 add     esp, 0DCh
.text:00409377                 pop     ebx
.text:00409378                 pop     esi
.text:00409379                 pop     edi
.text:0040937A                 pop     ebp
.text:0040937B                 retn
.text:0040937B ; ---------------------------------------------------------------------------
.text:0040937C                 align 10h
.text:00409380
.text:00409380 loc_409380:                             ; CODE XREF: sub_408FD0+354↑j
.text:00409380                 mov     eax, [esp+0ECh+var_B4]
.text:00409384                 mov     edi, [esp+0ECh+var_B8]
.text:00409388                 mov     ebx, [esp+0ECh+var_B4]
.text:0040938C                 mul     [esp+0ECh+var_BC]
.text:00409390                 mov     ecx, [esp+0ECh+var_BC]
.text:00409394                 imul    ebx, edi
.text:00409397                 mov     esi, eax
.text:00409399                 mov     eax, [esp+0ECh+var_B0]
.text:0040939D                 add     edx, ebx
.text:0040939F                 imul    ecx, eax
.text:004093A2                 lea     edi, [ecx+edx]
.text:004093A5                 jmp     short loc_409369
.text:004093A7 ; ---------------------------------------------------------------------------
.text:004093A7
.text:004093A7 loc_4093A7:                             ; CODE XREF: sub_408FD0+2C1↑j
.text:004093A7                 add     eax, 1FFh
.text:004093AC                 adc     edx, 0
.text:004093AF                 jmp     loc_409297
.text:004093B4 ; ---------------------------------------------------------------------------
.text:004093B4
.text:004093B4 loc_4093B4:                             ; CODE XREF: sub_408FD0+A9↑j
.text:004093B4                 mov     [esp+0ECh+hFile], esi ; hFile
.text:004093B7                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:004093BE                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:004093C2                 call    GetFileSize
.text:004093C7                 sub     esp, 8
.text:004093CA                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:004093D1                 jmp     loc_409080
.text:004093D6 ; ---------------------------------------------------------------------------
.text:004093D6
.text:004093D6 loc_4093D6:                             ; CODE XREF: sub_408FD0+96↑j
.text:004093D6                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:004093DE                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:004093E2                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:004093EA                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:004093EE                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:004093F6                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:004093FE                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:00409406                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:00409409                 call    PeekNamedPipe
.text:0040940E                 sub     esp, 18h
.text:00409411                 test    eax, eax
.text:00409413                 jz      short loc_40942E
.text:00409415                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:00409419                 xor     eax, eax
.text:0040941B                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:00409422                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:00409429                 jmp     loc_40906C
.text:0040942E ; ---------------------------------------------------------------------------
.text:0040942E
.text:0040942E loc_40942E:                             ; CODE XREF: sub_408FD0+443↑j
.text:0040942E                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00409435                 jmp     loc_40906C
.text:00409435 ; ---------------------------------------------------------------------------
.text:0040943A                 align 10h
.text:00409440
.text:00409440 loc_409440:                             ; CODE XREF: sub_408FD0+59↑j
.text:00409440                 mov     edx, 1000h
.text:00409445                 jmp     loc_40902F
.text:00409445 ; ---------------------------------------------------------------------------
.text:0040944A                 align 10h
.text:00409450
.text:00409450 loc_409450:                             ; CODE XREF: sub_408FD0+50↑j
.text:00409450                 mov     edx, 2000h
.text:00409455                 jmp     loc_40902F
.text:00409455 sub_408FD0      endp
.text:00409455
.text:00409455 ; ---------------------------------------------------------------------------
.text:0040945A aLnk_0          db '.lnk',0             ; DATA XREF: sub_4094A0+E0↓o
.text:0040945A                                         ; .text:00409B4A↓o ...
.text:0040945F ; const CHAR aKernel32[]
.text:0040945F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_4094A0+12D↓o
.text:0040945F                                         ; .text:0040A1FB↓o
.text:00409468 ; const CHAR aGetcompressedf[]
.text:00409468 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:00409468                                         ; DATA XREF: sub_4094A0+13E↓o
.text:00409468                                         ; .text:0040A20C↓o
.text:0040947F ; const CHAR aGetbinarytypea[]
.text:0040947F aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_4094A0+333↓o
.text:0040947F                                         ; .text:00409BA6↓o ...
.text:0040948E ; const char aPathext[]
.text:0040948E aPathext        db 'PATHEXT',0          ; DATA XREF: sub_4094A0:loc_409887↓o
.text:0040948E                                         ; .text:loc_409C50↓o ...
.text:00409496                 align 10h
.text:004094A0
.text:004094A0 ; =============== S U B R O U T I N E =======================================
.text:004094A0
.text:004094A0
.text:004094A0 ; int __cdecl sub_4094A0(char *String1, int)
.text:004094A0 sub_4094A0      proc near               ; CODE XREF: sub_40A280+3CD↓p
.text:004094A0                                         ; sub_4086A0+20C5↓p
.text:004094A0
.text:004094A0 Str             = dword ptr -6Ch
.text:004094A0 lpProcName      = dword ptr -68h
.text:004094A0 var_64          = dword ptr -64h
.text:004094A0 var_60          = dword ptr -60h
.text:004094A0 var_5C          = dword ptr -5Ch
.text:004094A0 var_4C          = dword ptr -4Ch
.text:004094A0 var_48          = dword ptr -48h
.text:004094A0 var_44          = dword ptr -44h
.text:004094A0 var_40          = dword ptr -40h
.text:004094A0 var_3C          = dword ptr -3Ch
.text:004094A0 var_38          = dword ptr -38h
.text:004094A0 lpRootPathName  = dword ptr -30h
.text:004094A0 var_2C          = byte ptr -2Ch
.text:004094A0 var_28          = dword ptr -28h
.text:004094A0 var_24          = dword ptr -24h
.text:004094A0 var_20          = dword ptr -20h
.text:004094A0 var_1C          = dword ptr -1Ch
.text:004094A0 var_18          = byte ptr -18h
.text:004094A0 String1         = dword ptr  4
.text:004094A0 arg_4           = dword ptr  8
.text:004094A0
.text:004094A0                 push    ebp
.text:004094A1                 push    edi
.text:004094A2                 push    esi
.text:004094A3                 push    ebx
.text:004094A4                 sub     esp, 5Ch
.text:004094A7                 mov     edx, [esp+6Ch+String1]
.text:004094AB                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:004094AE                 call    sub_40BE20
.text:004094B3                 mov     [esp+6Ch+Str], eax
.text:004094B6                 call    sub_40AC20
.text:004094BB                 mov     [esp+6Ch+lpRootPathName], eax
.text:004094BF                 test    eax, eax
.text:004094C1                 jz      loc_4096F3
.text:004094C7                 mov     [esp+6Ch+Str], eax ; Str
.text:004094CA                 call    strlen
.text:004094CF                 mov     edx, [esp+6Ch+arg_4]
.text:004094D3                 mov     ebx, eax
.text:004094D5                 mov     esi, [edx+0Ch]
.text:004094D8                 mov     edi, [edx+8]
.text:004094DB                 mov     eax, esi
.text:004094DD                 or      eax, edi
.text:004094DF                 jz      loc_409900
.text:004094E5                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:004094E9                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:004094EC                 call    GetDriveTypeA
.text:004094F1                 sub     esp, 4
.text:004094F4                 cmp     eax, 4
.text:004094F7                 jz      loc_409900
.text:004094FD
.text:004094FD loc_4094FD:                             ; CODE XREF: sub_4094A0+48A↓j
.text:004094FD                                         ; sub_4094A0+4B2↓j
.text:004094FD                 mov     edx, [esp+6Ch+arg_4]
.text:00409501                 mov     esi, [edx+14h]
.text:00409504                 mov     edi, [edx+10h]
.text:00409507                 mov     ecx, esi
.text:00409509                 or      ecx, edi
.text:0040950B                 jnz     short loc_409535
.text:0040950D                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:00409511                 xor     esi, esi
.text:00409513                 xor     edi, edi
.text:00409515                 test    ebp, ebp
.text:00409517                 jz      short loc_409527
.text:00409519                 movzx   ebx, byte ptr [ebp+0]
.text:0040951D                 test    bl, bl
.text:0040951F                 mov     cl, bl
.text:00409521                 jnz     loc_4098B1
.text:00409527
.text:00409527 loc_409527:                             ; CODE XREF: sub_4094A0+77↑j
.text:00409527                 xor     eax, eax
.text:00409529                 xor     edx, edx
.text:0040952B
.text:0040952B loc_40952B:                             ; CODE XREF: sub_4094A0+458↓j
.text:0040952B                 mov     ebp, [esp+6Ch+arg_4]
.text:0040952F                 mov     [ebp+10h], eax
.text:00409532                 mov     [ebp+14h], edx
.text:00409535
.text:00409535 loc_409535:                             ; CODE XREF: sub_4094A0+6B↑j
.text:00409535                 mov     edi, [esp+6Ch+String1]
.text:00409539                 xor     ebx, ebx
.text:0040953B                 test    edi, edi
.text:0040953D                 jz      loc_4097B3
.text:00409543                 mov     esi, [esp+6Ch+String1]
.text:00409547                 cmp     byte ptr [esi], 0
.text:0040954A                 jnz     loc_4097C0
.text:00409550
.text:00409550 loc_409550:                             ; CODE XREF: sub_4094A0+38C↓j
.text:00409550                                         ; sub_4094A0+397↓j
.text:00409550                 mov     ebp, [esp+6Ch+String1]
.text:00409554                 test    ebp, ebp
.text:00409556                 jz      loc_4097B3
.text:0040955C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00409564                 mov     edi, [esp+6Ch+String1]
.text:00409568                 mov     [esp+6Ch+Str], edi ; Str
.text:0040956B                 call    strrchr
.text:00409570                 test    eax, eax
.text:00409572                 jz      loc_4097B3
.text:00409578                 cld
.text:00409579                 mov     ecx, 5
.text:0040957E                 mov     esi, eax
.text:00409580                 mov     edi, offset aLnk_0 ; ".lnk"
.text:00409585                 repe cmpsb
.text:00409587                 setz    cl
.text:0040958A                 movzx   eax, cl
.text:0040958D                 lea     esi, [esi+0]
.text:00409590
.text:00409590 loc_409590:                             ; CODE XREF: sub_4094A0+315↓j
.text:00409590                 test    eax, eax
.text:00409592                 jz      short loc_40959A
.text:00409594                 or      ebx, 0A000h
.text:0040959A
.text:0040959A loc_40959A:                             ; CODE XREF: sub_4094A0+F2↑j
.text:0040959A                 mov     esi, [esp+6Ch+arg_4]
.text:0040959E                 xor     ecx, ecx
.text:004095A0                 mov     edi, ds:dword_4136D0
.text:004095A6                 or      [esi], ebx
.text:004095A8                 mov     ebx, [esi+14h]
.text:004095AB                 mov     ebp, [esi+10h]
.text:004095AE                 mov     eax, ebx
.text:004095B0                 xor     eax, ecx
.text:004095B2                 xor     ebp, edi
.text:004095B4                 or      eax, ebp
.text:004095B6                 jnz     loc_409740
.text:004095BC
.text:004095BC loc_4095BC:                             ; CODE XREF: sub_4094A0+30E↓j
.text:004095BC                 mov     ecx, dword_412050
.text:004095C2                 xor     esi, esi
.text:004095C4                 xor     edi, edi
.text:004095C6                 mov     edx, [esp+6Ch+arg_4]
.text:004095CA                 mov     [edx+50h], ecx
.text:004095CD                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:004095D4                 call    LoadLibraryA
.text:004095D9                 sub     esp, 4
.text:004095DC                 mov     ebp, eax
.text:004095DE                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:004095E6                 mov     [esp+6Ch+Str], eax ; hModule
.text:004095E9                 call    GetProcAddress
.text:004095EE                 sub     esp, 8
.text:004095F1                 test    eax, eax
.text:004095F3                 jz      short loc_409628
.text:004095F5                 mov     ebx, [esp+6Ch+String1]
.text:004095F9                 lea     esi, [esp+6Ch+var_2C]
.text:004095FD                 mov     [esp+6Ch+lpProcName], esi
.text:00409601                 mov     [esp+6Ch+Str], ebx
.text:00409604                 call    eax
.text:00409606                 sub     esp, 8
.text:00409609                 mov     ebx, eax
.text:0040960B                 cmp     eax, 0FFFFFFFFh
.text:0040960E                 jz      loc_409729
.text:00409614
.text:00409614 loc_409614:                             ; CODE XREF: sub_4094A0+29A↓j
.text:00409614                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:00409618                 mov     ecx, ebx
.text:0040961A                 xor     edi, edi
.text:0040961C                 xor     ebx, ebx
.text:0040961E                 mov     edx, esi
.text:00409620                 mov     esi, ecx
.text:00409622                 or      esi, edi
.text:00409624                 mov     edi, ebx
.text:00409626                 or      edi, edx
.text:00409628
.text:00409628 loc_409628:                             ; CODE XREF: sub_4094A0+153↑j
.text:00409628                                         ; sub_4094A0+294↓j
.text:00409628                 test    ebp, ebp
.text:0040962A                 jz      short loc_409637
.text:0040962C                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:0040962F                 call    FreeLibrary
.text:00409634                 sub     esp, 4
.text:00409637
.text:00409637 loc_409637:                             ; CODE XREF: sub_4094A0+18A↑j
.text:00409637                 mov     ebp, edi
.text:00409639                 mov     edx, ebp
.text:0040963B                 mov     edi, esi
.text:0040963D                 or      edx, esi
.text:0040963F                 jnz     short loc_40964B
.text:00409641                 mov     eax, [esp+6Ch+arg_4]
.text:00409645                 mov     edi, [eax+30h]
.text:00409648                 mov     ebp, [eax+34h]
.text:0040964B
.text:0040964B loc_40964B:                             ; CODE XREF: sub_4094A0+19F↑j
.text:0040964B                 mov     [esp+6Ch+lpProcName], ebp
.text:0040964F                 mov     ebx, dword_412050
.text:00409655                 xor     esi, esi
.text:00409657                 mov     [esp+6Ch+var_60], esi
.text:0040965B                 mov     [esp+6Ch+Str], edi
.text:0040965E                 mov     [esp+6Ch+var_64], ebx
.text:00409662                 call    sub_410330
.text:00409667                 mov     [esp+6Ch+var_3C], eax
.text:0040966B                 mov     ecx, dword_412050
.text:00409671                 mov     [esp+6Ch+lpProcName], ebp
.text:00409675                 mov     [esp+6Ch+var_38], edx
.text:00409679                 shr     ecx, 9
.text:0040967C                 mov     [esp+6Ch+var_44], ecx
.text:00409680                 mov     [esp+6Ch+var_40], 0
.text:00409688                 mov     [esp+6Ch+var_64], ebx
.text:0040968C                 mov     [esp+6Ch+var_60], esi
.text:00409690                 mov     [esp+6Ch+Str], edi
.text:00409693                 call    sub_410450
.text:00409698                 mov     ebp, edx
.text:0040969A                 or      ebp, eax
.text:0040969C                 jz      short loc_409700
.text:0040969E                 mov     ebp, [esp+6Ch+var_3C]
.text:004096A2                 mov     esi, [esp+6Ch+var_38]
.text:004096A6                 mov     eax, [esp+6Ch+var_44]
.text:004096AA                 mov     [esp+6Ch+var_4C], ebp
.text:004096AE                 mov     ecx, [esp+6Ch+var_40]
.text:004096B2                 mov     ebx, [esp+6Ch+var_44]
.text:004096B6                 add     [esp+6Ch+var_4C], 1
.text:004096BB                 mov     [esp+6Ch+var_48], esi
.text:004096BF                 mov     edi, [esp+6Ch+var_4C]
.text:004096C3                 adc     [esp+6Ch+var_48], 0
.text:004096C8                 mul     [esp+6Ch+var_4C]
.text:004096CC                 imul    ecx, edi
.text:004096CF                 mov     esi, eax
.text:004096D1                 mov     eax, [esp+6Ch+var_48]
.text:004096D5                 add     edx, ecx
.text:004096D7                 imul    ebx, eax
.text:004096DA                 lea     edi, [ebx+edx]
.text:004096DD
.text:004096DD loc_4096DD:                             ; CODE XREF: sub_4094A0+287↓j
.text:004096DD                 mov     ebx, [esp+6Ch+arg_4]
.text:004096E1                 mov     [ebx+58h], esi
.text:004096E4                 mov     esi, [esp+6Ch+lpRootPathName]
.text:004096E8                 mov     [ebx+5Ch], edi
.text:004096EB                 mov     [esp+6Ch+Str], esi ; Block
.text:004096EE                 call    free
.text:004096F3
.text:004096F3 loc_4096F3:                             ; CODE XREF: sub_4094A0+21↑j
.text:004096F3                 add     esp, 5Ch
.text:004096F6                 xor     eax, eax
.text:004096F8                 pop     ebx
.text:004096F9                 pop     esi
.text:004096FA                 pop     edi
.text:004096FB                 pop     ebp
.text:004096FC                 retn
.text:004096FC ; ---------------------------------------------------------------------------
.text:004096FD                 align 10h
.text:00409700
.text:00409700 loc_409700:                             ; CODE XREF: sub_4094A0+1FC↑j
.text:00409700                 mov     eax, [esp+6Ch+var_3C]
.text:00409704                 mov     edi, [esp+6Ch+var_40]
.text:00409708                 mov     ecx, [esp+6Ch+var_3C]
.text:0040970C                 mul     [esp+6Ch+var_44]
.text:00409710                 mov     ebx, [esp+6Ch+var_44]
.text:00409714                 imul    ecx, edi
.text:00409717                 mov     ebp, edx
.text:00409719                 mov     esi, eax
.text:0040971B                 mov     edx, [esp+6Ch+var_38]
.text:0040971F                 add     ebp, ecx
.text:00409721                 imul    ebx, edx
.text:00409724                 lea     edi, [ebx+ebp]
.text:00409727                 jmp     short loc_4096DD
.text:00409729 ; ---------------------------------------------------------------------------
.text:00409729
.text:00409729 loc_409729:                             ; CODE XREF: sub_4094A0+16E↑j
.text:00409729                 call    GetLastError
.text:0040972E                 xor     esi, esi
.text:00409730                 xor     edi, edi
.text:00409732                 test    eax, eax
.text:00409734                 jnz     loc_409628
.text:0040973A                 jmp     loc_409614
.text:0040973A ; ---------------------------------------------------------------------------
.text:0040973F                 align 10h
.text:00409740
.text:00409740 loc_409740:                             ; CODE XREF: sub_4094A0+116↑j
.text:00409740                 mov     edx, [esp+6Ch+lpRootPathName]
.text:00409744                 lea     ecx, [esp+6Ch+var_20]
.text:00409748                 lea     ebx, [esp+6Ch+var_1C]
.text:0040974C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:00409750                 lea     edi, [esp+6Ch+var_24]
.text:00409754                 lea     ebp, [esp+6Ch+var_28]
.text:00409758                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:0040975C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:00409760                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:00409764                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:00409767                 call    sub_40B8D0
.text:0040976C                 test    eax, eax
.text:0040976E                 jnz     short loc_409790
.text:00409770                 mov     [esp+6Ch+var_28], 1
.text:00409778                 mov     [esp+6Ch+var_24], 200h
.text:00409780                 mov     [esp+6Ch+var_20], 0
.text:00409788                 mov     [esp+6Ch+var_1C], 0
.text:00409790
.text:00409790 loc_409790:                             ; CODE XREF: sub_4094A0+2CE↑j
.text:00409790                 mov     ebp, [esp+6Ch+var_24]
.text:00409794                 mov     edi, [esp+6Ch+var_28]
.text:00409798                 mov     eax, [esp+6Ch+arg_4]
.text:0040979C                 imul    ebp, edi
.text:0040979F                 mov     esi, [eax+10h]
.text:004097A2                 mov     dword_412050, ebp
.text:004097A8                 mov     ds:dword_4136D0, esi
.text:004097AE                 jmp     loc_4095BC
.text:004097B3 ; ---------------------------------------------------------------------------
.text:004097B3
.text:004097B3 loc_4097B3:                             ; CODE XREF: sub_4094A0+9D↑j
.text:004097B3                                         ; sub_4094A0+B6↑j ...
.text:004097B3                 xor     eax, eax
.text:004097B5                 jmp     loc_409590
.text:004097B5 ; ---------------------------------------------------------------------------
.text:004097BA                 align 10h
.text:004097C0
.text:004097C0 loc_4097C0:                             ; CODE XREF: sub_4094A0+AA↑j
.text:004097C0                 mov     [esp+6Ch+Str], offset ModuleName ; "KERNEL32.DLL"
.text:004097C7                 xor     ebp, ebp
.text:004097C9                 call    GetModuleHandleA
.text:004097CE                 sub     esp, 4
.text:004097D1                 mov     edi, eax
.text:004097D3                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:004097DB                 mov     [esp+6Ch+Str], eax ; hModule
.text:004097DE                 call    GetProcAddress
.text:004097E3                 sub     esp, 8
.text:004097E6                 mov     edx, eax
.text:004097E8                 test    eax, eax
.text:004097EA                 jz      short loc_409804
.text:004097EC                 mov     eax, [esp+6Ch+String1]
.text:004097F0                 lea     ecx, [esp+6Ch+var_18]
.text:004097F4                 mov     [esp+6Ch+lpProcName], ecx
.text:004097F8                 mov     [esp+6Ch+Str], eax
.text:004097FB                 call    edx
.text:004097FD                 sub     esp, 8
.text:00409800                 test    eax, eax
.text:00409802                 jnz     short loc_409868
.text:00409804
.text:00409804 loc_409804:                             ; CODE XREF: sub_4094A0+34A↑j
.text:00409804                 mov     edx, ds:Str
.text:0040980A                 test    edx, edx
.text:0040980C                 jz      short loc_409887
.text:0040980E
.text:0040980E loc_40980E:                             ; CODE XREF: sub_4094A0+3FA↓j
.text:0040980E                                         ; sub_4094A0+40C↓j
.text:0040980E                 mov     eax, [esp+6Ch+String1]
.text:00409812                 test    eax, eax
.text:00409814                 jz      short loc_40981F
.text:00409816                 mov     esi, [esp+6Ch+String1]
.text:0040981A                 cmp     byte ptr [esi], 0
.text:0040981D                 jnz     short loc_40983C
.text:0040981F
.text:0040981F loc_40981F:                             ; CODE XREF: sub_4094A0+374↑j
.text:0040981F                                         ; sub_4094A0+3B0↓j ...
.text:0040981F                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:00409822                 call    FreeLibrary
.text:00409827                 sub     esp, 4
.text:0040982A                 test    ebp, ebp
.text:0040982C                 jz      loc_409550
.text:00409832                 mov     ebx, 49h ; 'I'
.text:00409837                 jmp     loc_409550
.text:0040983C ; ---------------------------------------------------------------------------
.text:0040983C
.text:0040983C loc_40983C:                             ; CODE XREF: sub_4094A0+37D↑j
.text:0040983C                 mov     [esp+6Ch+Str], esi ; Str
.text:0040983F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00409847                 call    strrchr
.text:0040984C                 test    eax, eax
.text:0040984E                 mov     esi, eax
.text:00409850                 jz      short loc_40981F
.text:00409852                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:00409856                 mov     ecx, ds:Str
.text:0040985C                 mov     [esp+6Ch+Str], ecx ; Str
.text:0040985F                 call    strstr
.text:00409864                 test    eax, eax
.text:00409866                 jz      short loc_40986F
.text:00409868
.text:00409868 loc_409868:                             ; CODE XREF: sub_4094A0+362↑j
.text:00409868                                         ; sub_4094A0+3E5↓j
.text:00409868                 mov     ebp, 1
.text:0040986D                 jmp     short loc_40981F
.text:0040986F ; ---------------------------------------------------------------------------
.text:0040986F
.text:0040986F loc_40986F:                             ; CODE XREF: sub_4094A0+3C6↑j
.text:0040986F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:00409873                 mov     edx, off_412054 ; ".com;.exe;.bat;.cmd"
.text:00409879                 mov     [esp+6Ch+Str], edx ; Str
.text:0040987C                 call    strstr
.text:00409881                 test    eax, eax
.text:00409883                 jz      short loc_40981F
.text:00409885                 jmp     short loc_409868
.text:00409887 ; ---------------------------------------------------------------------------
.text:00409887
.text:00409887 loc_409887:                             ; CODE XREF: sub_4094A0+36C↑j
.text:00409887                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:0040988E                 call    getenv
.text:00409893                 mov     ds:Str, eax
.text:00409898                 test    eax, eax
.text:0040989A                 jnz     loc_40980E
.text:004098A0                 mov     esi, off_412054 ; ".com;.exe;.bat;.cmd"
.text:004098A6                 mov     ds:Str, esi
.text:004098AC                 jmp     loc_40980E
.text:004098B1 ; ---------------------------------------------------------------------------
.text:004098B1
.text:004098B1 loc_4098B1:                             ; CODE XREF: sub_4094A0+81↑j
.text:004098B1                                         ; sub_4094A0+452↓j
.text:004098B1                 shld    edi, esi, 8
.text:004098B5                 movsx   eax, cl
.text:004098B8                 shl     esi, 8
.text:004098BB                 cdq
.text:004098BC                 add     esi, eax
.text:004098BE                 adc     edi, edx
.text:004098C0                 mov     edx, edi
.text:004098C2                 xor     ebx, ebx
.text:004098C4                 and     edx, 0FF000000h
.text:004098CA                 mov     eax, edx
.text:004098CC                 or      eax, ebx
.text:004098CE                 jz      short loc_4098E9
.text:004098D0                 mov     ecx, edx
.text:004098D2                 xor     eax, eax
.text:004098D4                 shr     ecx, 10h
.text:004098D7                 mov     edx, esi
.text:004098D9                 xor     edx, ecx
.text:004098DB                 mov     ecx, edi
.text:004098DD                 xor     ecx, eax
.text:004098DF                 mov     esi, edx
.text:004098E1                 mov     edi, ecx
.text:004098E3                 and     edi, 0FFFFFFh
.text:004098E9
.text:004098E9 loc_4098E9:                             ; CODE XREF: sub_4094A0+42E↑j
.text:004098E9                 inc     ebp
.text:004098EA                 movzx   ebx, byte ptr [ebp+0]
.text:004098EE                 test    bl, bl
.text:004098F0                 mov     cl, bl
.text:004098F2                 jnz     short loc_4098B1
.text:004098F4                 mov     eax, esi
.text:004098F6                 mov     edx, edi
.text:004098F8                 jmp     loc_40952B
.text:004098F8 ; ---------------------------------------------------------------------------
.text:004098FD                 align 10h
.text:00409900
.text:00409900 loc_409900:                             ; CODE XREF: sub_4094A0+3F↑j
.text:00409900                                         ; sub_4094A0+57↑j
.text:00409900                 mov     edi, [esp+6Ch+lpRootPathName]
.text:00409904                 mov     ebp, [esp+6Ch+String1]
.text:00409908                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:0040990C                 mov     [esp+6Ch+Str], ebp ; String1
.text:0040990F                 call    _stricmp
.text:00409914                 test    eax, eax
.text:00409916                 jnz     short loc_409930
.text:00409918                 mov     ebx, [esp+6Ch+arg_4]
.text:0040991C                 mov     dword ptr [ebx+8], 5
.text:00409923                 mov     dword ptr [ebx+0Ch], 50000h
.text:0040992A                 jmp     loc_4094FD
.text:0040992A ; ---------------------------------------------------------------------------
.text:0040992F                 align 10h
.text:00409930
.text:00409930 loc_409930:                             ; CODE XREF: sub_4094A0+476↑j
.text:00409930                 mov     ebp, [esp+6Ch+String1]
.text:00409934                 xor     esi, esi
.text:00409936                 xor     edi, edi
.text:00409938                 add     ebp, ebx
.text:0040993A                 jz      short loc_409944
.text:0040993C                 movzx   ecx, byte ptr [ebp+0]
.text:00409940                 test    cl, cl
.text:00409942                 jnz     short loc_409957
.text:00409944
.text:00409944 loc_409944:                             ; CODE XREF: sub_4094A0+49A↑j
.text:00409944                 xor     eax, eax
.text:00409946                 xor     edx, edx
.text:00409948
.text:00409948 loc_409948:                             ; CODE XREF: sub_4094A0+4FE↓j
.text:00409948                 mov     ebp, [esp+6Ch+arg_4]
.text:0040994C                 mov     [ebp+8], eax
.text:0040994F                 mov     [ebp+0Ch], edx
.text:00409952                 jmp     loc_4094FD
.text:00409957 ; ---------------------------------------------------------------------------
.text:00409957
.text:00409957 loc_409957:                             ; CODE XREF: sub_4094A0+4A2↑j
.text:00409957                                         ; sub_4094A0+4F8↓j
.text:00409957                 shld    edi, esi, 8
.text:0040995B                 movsx   eax, cl
.text:0040995E                 shl     esi, 8
.text:00409961                 cdq
.text:00409962                 add     esi, eax
.text:00409964                 adc     edi, edx
.text:00409966                 mov     edx, edi
.text:00409968                 xor     ebx, ebx
.text:0040996A                 and     edx, 0FF000000h
.text:00409970                 mov     eax, edx
.text:00409972                 or      eax, ebx
.text:00409974                 jz      short loc_40998F
.text:00409976                 mov     ecx, edx
.text:00409978                 xor     eax, eax
.text:0040997A                 shr     ecx, 10h
.text:0040997D                 mov     edx, esi
.text:0040997F                 xor     edx, ecx
.text:00409981                 mov     ecx, edi
.text:00409983                 xor     ecx, eax
.text:00409985                 mov     esi, edx
.text:00409987                 mov     edi, ecx
.text:00409989                 and     edi, 0FFFFFFh
.text:0040998F
.text:0040998F loc_40998F:                             ; CODE XREF: sub_4094A0+4D4↑j
.text:0040998F                 inc     ebp
.text:00409990                 movzx   ebx, byte ptr [ebp+0]
.text:00409994                 test    bl, bl
.text:00409996                 mov     cl, bl
.text:00409998                 jnz     short loc_409957
.text:0040999A                 mov     eax, esi
.text:0040999C                 mov     edx, edi
.text:0040999E                 jmp     short loc_409948
.text:0040999E sub_4094A0      endp
.text:0040999E
.text:004099A0
.text:004099A0 ; =============== S U B R O U T I N E =======================================
.text:004099A0
.text:004099A0
.text:004099A0 ; int __cdecl sub_4099A0(LPCSTR)
.text:004099A0 sub_4099A0      proc near               ; CODE XREF: sub_40BF40+CA↓p
.text:004099A0
.text:004099A0 lpRootPathName  = dword ptr -83Ch
.text:004099A0 lpVolumeNameBuffer= dword ptr -838h
.text:004099A0 nVolumeNameSize = dword ptr -834h
.text:004099A0 lpVolumeSerialNumber= dword ptr -830h
.text:004099A0 lpMaximumComponentLength= dword ptr -82Ch
.text:004099A0 lpFileSystemFlags= dword ptr -828h
.text:004099A0 lpFileSystemNameBuffer= dword ptr -824h
.text:004099A0 nFileSystemNameSize= dword ptr -820h
.text:004099A0 VolumeSerialNumber= dword ptr -818h
.text:004099A0 MaximumComponentLength= dword ptr -814h
.text:004099A0 FileSystemFlags = dword ptr -810h
.text:004099A0 FileSystemNameBuffer= byte ptr -80Ch
.text:004099A0 VolumeNameBuffer= byte ptr -40Ch
.text:004099A0 var_4           = dword ptr -4
.text:004099A0 arg_0           = dword ptr  4
.text:004099A0
.text:004099A0                 sub     esp, 83Ch
.text:004099A6                 mov     [esp+83Ch+var_4], ebx
.text:004099AD                 mov     ebx, [esp+83Ch+arg_0]
.text:004099B4                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:004099B7                 call    sub_40BE20
.text:004099BC                 mov     [esp+83Ch+lpRootPathName], eax
.text:004099BF                 call    sub_40AC20
.text:004099C4                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:004099C7                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:004099CB                 mov     ebx, eax
.text:004099CD                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:004099D1                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:004099D5                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:004099D9                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:004099DD                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:004099E1                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:004099E5                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:004099EC                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:004099F0                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:004099F4                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:004099FC                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00409A04                 call    GetVolumeInformationA
.text:00409A09                 sub     esp, 20h
.text:00409A0C                 test    eax, eax
.text:00409A0E                 setz    cl
.text:00409A11                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:00409A14                 movzx   edx, cl
.text:00409A17                 dec     edx
.text:00409A18                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:00409A1C                 call    free
.text:00409A21                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:00409A25                 mov     ebx, [esp+83Ch+var_4]
.text:00409A2C                 add     esp, 83Ch
.text:00409A32                 retn
.text:00409A32 sub_4099A0      endp
.text:00409A32
.text:00409A32 ; ---------------------------------------------------------------------------
.text:00409A33                 align 10h
.text:00409A40                 push    ebp
.text:00409A41                 push    edi
.text:00409A42                 xor     edi, edi
.text:00409A44                 push    esi
.text:00409A45                 xor     esi, esi
.text:00409A47                 push    ebx
.text:00409A48                 mov     ebp, [esp+14h]
.text:00409A4C                 test    ebp, ebp
.text:00409A4E                 jz      short loc_409A58
.text:00409A50                 movzx   ecx, byte ptr [ebp+0]
.text:00409A54                 test    cl, cl
.text:00409A56                 jnz     short loc_409A61
.text:00409A58
.text:00409A58 loc_409A58:                             ; CODE XREF: .text:00409A4E↑j
.text:00409A58                 xor     eax, eax
.text:00409A5A                 xor     edx, edx
.text:00409A5C
.text:00409A5C loc_409A5C:                             ; CODE XREF: .text:00409AA8↓j
.text:00409A5C                 pop     ebx
.text:00409A5D                 pop     esi
.text:00409A5E                 pop     edi
.text:00409A5F                 pop     ebp
.text:00409A60                 retn
.text:00409A61 ; ---------------------------------------------------------------------------
.text:00409A61
.text:00409A61 loc_409A61:                             ; CODE XREF: .text:00409A56↑j
.text:00409A61                                         ; .text:00409AA2↓j
.text:00409A61                 shld    edi, esi, 8
.text:00409A65                 movsx   eax, cl
.text:00409A68                 shl     esi, 8
.text:00409A6B                 cdq
.text:00409A6C                 add     esi, eax
.text:00409A6E                 adc     edi, edx
.text:00409A70                 mov     edx, edi
.text:00409A72                 xor     ebx, ebx
.text:00409A74                 and     edx, 0FF000000h
.text:00409A7A                 mov     eax, edx
.text:00409A7C                 or      eax, ebx
.text:00409A7E                 jz      short loc_409A99
.text:00409A80                 mov     ecx, edx
.text:00409A82                 xor     eax, eax
.text:00409A84                 shr     ecx, 10h
.text:00409A87                 mov     edx, esi
.text:00409A89                 xor     edx, ecx
.text:00409A8B                 mov     ecx, edi
.text:00409A8D                 xor     ecx, eax
.text:00409A8F                 mov     esi, edx
.text:00409A91                 mov     edi, ecx
.text:00409A93                 and     edi, 0FFFFFFh
.text:00409A99
.text:00409A99 loc_409A99:                             ; CODE XREF: .text:00409A7E↑j
.text:00409A99                 inc     ebp
.text:00409A9A                 movzx   ebx, byte ptr [ebp+0]
.text:00409A9E                 test    bl, bl
.text:00409AA0                 mov     cl, bl
.text:00409AA2                 jnz     short loc_409A61
.text:00409AA4                 mov     eax, esi
.text:00409AA6                 mov     edx, edi
.text:00409AA8                 jmp     short loc_409A5C
.text:00409AA8 ; ---------------------------------------------------------------------------
.text:00409AAA                 align 10h
.text:00409AB0                 sub     esp, 2Ch
.text:00409AB3                 lea     edx, [esp+24h]
.text:00409AB7                 lea     ecx, [esp+28h]
.text:00409ABB                 mov     [esp+0Ch], edx
.text:00409ABF                 lea     edx, [esp+1Ch]
.text:00409AC3                 mov     [esp+4], edx
.text:00409AC7                 mov     edx, [esp+30h]
.text:00409ACB                 mov     [esp+10h], ecx
.text:00409ACF                 lea     ecx, [esp+20h]
.text:00409AD3                 mov     [esp+8], ecx
.text:00409AD7                 mov     [esp], edx
.text:00409ADA                 call    sub_40B8D0
.text:00409ADF                 test    eax, eax
.text:00409AE1                 jnz     short loc_409B03
.text:00409AE3                 mov     dword ptr [esp+1Ch], 1
.text:00409AEB                 mov     dword ptr [esp+20h], 200h
.text:00409AF3                 mov     dword ptr [esp+24h], 0
.text:00409AFB                 mov     dword ptr [esp+28h], 0
.text:00409B03
.text:00409B03 loc_409B03:                             ; CODE XREF: .text:00409AE1↑j
.text:00409B03                 mov     eax, [esp+20h]
.text:00409B07                 mov     ecx, [esp+1Ch]
.text:00409B0B                 add     esp, 2Ch
.text:00409B0E                 imul    eax, ecx
.text:00409B11                 retn
.text:00409B11 ; ---------------------------------------------------------------------------
.text:00409B12                 align 10h
.text:00409B20                 sub     esp, 1Ch
.text:00409B23                 mov     eax, [esp+20h]
.text:00409B27                 mov     [esp+14h], esi
.text:00409B2B                 mov     [esp+18h], edi
.text:00409B2F                 test    eax, eax
.text:00409B31                 jz      short loc_409B70
.text:00409B33                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00409B3B                 mov     [esp], eax
.text:00409B3E                 call    strrchr
.text:00409B43                 test    eax, eax
.text:00409B45                 jz      short loc_409B70
.text:00409B47                 cld
.text:00409B48                 mov     esi, eax
.text:00409B4A                 mov     edi, offset aLnk_0 ; ".lnk"
.text:00409B4F                 mov     ecx, 5
.text:00409B54                 repe cmpsb
.text:00409B56                 setz    dl
.text:00409B59                 movzx   eax, dl
.text:00409B5C                 lea     esi, [esi+0]
.text:00409B60
.text:00409B60 loc_409B60:                             ; CODE XREF: .text:00409B72↓j
.text:00409B60                 mov     esi, [esp+14h]
.text:00409B64                 mov     edi, [esp+18h]
.text:00409B68                 add     esp, 1Ch
.text:00409B6B                 retn
.text:00409B6B ; ---------------------------------------------------------------------------
.text:00409B6C                 align 10h
.text:00409B70
.text:00409B70 loc_409B70:                             ; CODE XREF: .text:00409B31↑j
.text:00409B70                                         ; .text:00409B45↑j
.text:00409B70                 xor     eax, eax
.text:00409B72                 jmp     short loc_409B60
.text:00409B72 ; ---------------------------------------------------------------------------
.text:00409B74                 align 10h
.text:00409B80                 sub     esp, 1Ch
.text:00409B83                 mov     [esp+10h], ebx
.text:00409B87                 mov     ebx, [esp+20h]
.text:00409B8B                 mov     [esp+14h], esi
.text:00409B8F                 mov     [esp+18h], edi
.text:00409B93                 xor     edi, edi
.text:00409B95                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:00409B9C                 call    GetModuleHandleA
.text:00409BA1                 sub     esp, 4
.text:00409BA4                 mov     esi, eax
.text:00409BA6                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00409BAE                 mov     [esp], eax
.text:00409BB1                 call    GetProcAddress
.text:00409BB6                 sub     esp, 8
.text:00409BB9                 test    eax, eax
.text:00409BBB                 jz      short loc_409BD1
.text:00409BBD                 mov     [esp], ebx
.text:00409BC0                 lea     ecx, [esp+0Ch]
.text:00409BC4                 mov     [esp+4], ecx
.text:00409BC8                 call    eax
.text:00409BCA                 sub     esp, 8
.text:00409BCD                 test    eax, eax
.text:00409BCF                 jnz     short loc_409C30
.text:00409BD1
.text:00409BD1 loc_409BD1:                             ; CODE XREF: .text:00409BBB↑j
.text:00409BD1                 mov     eax, ds:Str
.text:00409BD6                 test    eax, eax
.text:00409BD8                 jz      short loc_409C50
.text:00409BDA
.text:00409BDA loc_409BDA:                             ; CODE XREF: .text:00409C63↓j
.text:00409BDA                                         ; .text:00409C75↓j
.text:00409BDA                 test    ebx, ebx
.text:00409BDC                 jz      short loc_409BE3
.text:00409BDE                 cmp     byte ptr [ebx], 0
.text:00409BE1                 jnz     short loc_409C00
.text:00409BE3
.text:00409BE3 loc_409BE3:                             ; CODE XREF: .text:00409BDC↑j
.text:00409BE3                                         ; .text:00409C14↓j ...
.text:00409BE3                 mov     [esp], esi
.text:00409BE6                 call    FreeLibrary
.text:00409BEB                 sub     esp, 4
.text:00409BEE                 mov     eax, edi
.text:00409BF0                 mov     ebx, [esp+10h]
.text:00409BF4                 mov     esi, [esp+14h]
.text:00409BF8                 mov     edi, [esp+18h]
.text:00409BFC                 add     esp, 1Ch
.text:00409BFF                 retn
.text:00409C00 ; ---------------------------------------------------------------------------
.text:00409C00
.text:00409C00 loc_409C00:                             ; CODE XREF: .text:00409BE1↑j
.text:00409C00                 mov     [esp], ebx
.text:00409C03                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00409C0B                 call    strrchr
.text:00409C10                 test    eax, eax
.text:00409C12                 mov     ebx, eax
.text:00409C14                 jz      short loc_409BE3
.text:00409C16                 mov     [esp+4], eax
.text:00409C1A                 mov     ecx, ds:Str
.text:00409C20                 mov     [esp], ecx
.text:00409C23                 call    strstr
.text:00409C28                 test    eax, eax
.text:00409C2A                 jz      short loc_409C37
.text:00409C2C                 lea     esi, [esi+0]
.text:00409C30
.text:00409C30 loc_409C30:                             ; CODE XREF: .text:00409BCF↑j
.text:00409C30                                         ; .text:00409C4D↓j
.text:00409C30                 mov     edi, 1
.text:00409C35                 jmp     short loc_409BE3
.text:00409C37 ; ---------------------------------------------------------------------------
.text:00409C37
.text:00409C37 loc_409C37:                             ; CODE XREF: .text:00409C2A↑j
.text:00409C37                 mov     [esp+4], ebx
.text:00409C3B                 mov     ebx, off_412054 ; ".com;.exe;.bat;.cmd"
.text:00409C41                 mov     [esp], ebx
.text:00409C44                 call    strstr
.text:00409C49                 test    eax, eax
.text:00409C4B                 jz      short loc_409BE3
.text:00409C4D                 jmp     short loc_409C30
.text:00409C4D ; ---------------------------------------------------------------------------
.text:00409C4F                 align 10h
.text:00409C50
.text:00409C50 loc_409C50:                             ; CODE XREF: .text:00409BD8↑j
.text:00409C50                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00409C57                 call    getenv
.text:00409C5C                 mov     ds:Str, eax
.text:00409C61                 test    eax, eax
.text:00409C63                 jnz     loc_409BDA
.text:00409C69                 mov     edx, off_412054 ; ".com;.exe;.bat;.cmd"
.text:00409C6F                 mov     ds:Str, edx
.text:00409C75                 jmp     loc_409BDA
.text:00409C75 ; ---------------------------------------------------------------------------
.text:00409C7A                 align 10h
.text:00409C80                 sub     esp, 0Ch
.text:00409C83                 mov     edx, [esp+10h]
.text:00409C87                 mov     [esp], edx
.text:00409C8A                 call    GetFileType
.text:00409C8F                 sub     esp, 4
.text:00409C92                 xor     edx, edx
.text:00409C94                 cmp     eax, 2
.text:00409C97                 jz      short loc_409CB0
.text:00409C99                 cmp     eax, 3
.text:00409C9C                 jz      short loc_409CA4
.text:00409C9E
.text:00409C9E loc_409C9E:                             ; CODE XREF: .text:00409CA9↓j
.text:00409C9E                                         ; .text:00409CB5↓j
.text:00409C9E                 mov     eax, edx
.text:00409CA0                 add     esp, 0Ch
.text:00409CA3                 retn
.text:00409CA4 ; ---------------------------------------------------------------------------
.text:00409CA4
.text:00409CA4 loc_409CA4:                             ; CODE XREF: .text:00409C9C↑j
.text:00409CA4                 mov     edx, 1000h
.text:00409CA9                 jmp     short loc_409C9E
.text:00409CA9 ; ---------------------------------------------------------------------------
.text:00409CAB                 align 10h
.text:00409CB0
.text:00409CB0 loc_409CB0:                             ; CODE XREF: .text:00409C97↑j
.text:00409CB0                 mov     edx, 2000h
.text:00409CB5                 jmp     short loc_409C9E
.text:00409CB5 ; ---------------------------------------------------------------------------
.text:00409CB7                 align 10h
.text:00409CC0                 mov     ecx, [esp+4]
.text:00409CC4                 xor     edx, edx
.text:00409CC6                 test    cl, 10h
.text:00409CC9                 setz    dl
.text:00409CCC                 dec     edx
.text:00409CCD                 and     edx, 0FFFFC000h
.text:00409CD3                 add     edx, 8000h
.text:00409CD9                 or      edx, 124h
.text:00409CDF                 test    cl, 1
.text:00409CE2                 movzx   eax, dx
.text:00409CE5                 jnz     short locret_409CEC
.text:00409CE7                 or      eax, 92h
.text:00409CEC
.text:00409CEC locret_409CEC:                          ; CODE XREF: .text:00409CE5↑j
.text:00409CEC                 retn
.text:00409CEC ; ---------------------------------------------------------------------------
.text:00409CED                 align 10h
.text:00409CF0                 sub     esp, 2Ch
.text:00409CF3                 mov     [esp+20h], esi
.text:00409CF7                 mov     esi, [esp+30h]
.text:00409CFB                 mov     [esp+1Ch], ebx
.text:00409CFF                 xor     ebx, ebx
.text:00409D01                 test    esi, esi
.text:00409D03                 mov     [esp+24h], edi
.text:00409D07                 mov     [esp+28h], ebp
.text:00409D0B                 jz      short loc_409D60
.text:00409D0D                 cmp     byte ptr [esi], 0
.text:00409D10                 jnz     short loc_409D64
.text:00409D12
.text:00409D12 loc_409D12:                             ; CODE XREF: .text:00409DCC↓j
.text:00409D12                                         ; .text:00409DD7↓j
.text:00409D12                 test    esi, esi
.text:00409D14                 jz      short loc_409D60
.text:00409D16                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00409D1E                 mov     [esp], esi
.text:00409D21                 call    strrchr
.text:00409D26                 test    eax, eax
.text:00409D28                 jz      short loc_409D60
.text:00409D2A                 cld
.text:00409D2B                 mov     ecx, 5
.text:00409D30                 mov     esi, eax
.text:00409D32                 mov     edi, offset aLnk_0 ; ".lnk"
.text:00409D37                 repe cmpsb
.text:00409D39                 setz    cl
.text:00409D3C                 movzx   eax, cl
.text:00409D3F                 nop
.text:00409D40
.text:00409D40 loc_409D40:                             ; CODE XREF: .text:00409D62↓j
.text:00409D40                 test    eax, eax
.text:00409D42                 jz      short loc_409D4A
.text:00409D44                 or      ebx, 0A000h
.text:00409D4A
.text:00409D4A loc_409D4A:                             ; CODE XREF: .text:00409D42↑j
.text:00409D4A                 mov     eax, ebx
.text:00409D4C                 mov     esi, [esp+20h]
.text:00409D50                 mov     ebx, [esp+1Ch]
.text:00409D54                 mov     edi, [esp+24h]
.text:00409D58                 mov     ebp, [esp+28h]
.text:00409D5C                 add     esp, 2Ch
.text:00409D5F                 retn
.text:00409D60 ; ---------------------------------------------------------------------------
.text:00409D60
.text:00409D60 loc_409D60:                             ; CODE XREF: .text:00409D0B↑j
.text:00409D60                                         ; .text:00409D14↑j ...
.text:00409D60                 xor     eax, eax
.text:00409D62                 jmp     short loc_409D40
.text:00409D64 ; ---------------------------------------------------------------------------
.text:00409D64
.text:00409D64 loc_409D64:                             ; CODE XREF: .text:00409D10↑j
.text:00409D64                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:00409D6B                 call    GetModuleHandleA
.text:00409D70                 sub     esp, 4
.text:00409D73                 mov     ebp, eax
.text:00409D75                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00409D7D                 mov     [esp], eax
.text:00409D80                 call    GetProcAddress
.text:00409D85                 sub     esp, 8
.text:00409D88                 test    eax, eax
.text:00409D8A                 mov     dword ptr [esp+14h], 0
.text:00409D92                 jz      short loc_409DA8
.text:00409D94                 mov     [esp], esi
.text:00409D97                 lea     ecx, [esp+18h]
.text:00409D9B                 mov     [esp+4], ecx
.text:00409D9F                 call    eax
.text:00409DA1                 sub     esp, 8
.text:00409DA4                 test    eax, eax
.text:00409DA6                 jnz     short loc_409E08
.text:00409DA8
.text:00409DA8 loc_409DA8:                             ; CODE XREF: .text:00409D92↑j
.text:00409DA8                 mov     edx, ds:Str
.text:00409DAE                 test    edx, edx
.text:00409DB0                 jz      short loc_409E30
.text:00409DB2
.text:00409DB2 loc_409DB2:                             ; CODE XREF: .text:00409E43↓j
.text:00409DB2                                         ; .text:00409E55↓j
.text:00409DB2                 test    esi, esi
.text:00409DB4                 jz      short loc_409DBB
.text:00409DB6                 cmp     byte ptr [esi], 0
.text:00409DB9                 jnz     short loc_409DDC
.text:00409DBB
.text:00409DBB loc_409DBB:                             ; CODE XREF: .text:00409DB4↑j
.text:00409DBB                                         ; .text:00409DF0↓j ...
.text:00409DBB                 mov     [esp], ebp
.text:00409DBE                 call    FreeLibrary
.text:00409DC3                 sub     esp, 4
.text:00409DC6                 mov     eax, [esp+14h]
.text:00409DCA                 test    eax, eax
.text:00409DCC                 jz      loc_409D12
.text:00409DD2                 mov     ebx, 49h ; 'I'
.text:00409DD7                 jmp     loc_409D12
.text:00409DDC ; ---------------------------------------------------------------------------
.text:00409DDC
.text:00409DDC loc_409DDC:                             ; CODE XREF: .text:00409DB9↑j
.text:00409DDC                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00409DE4                 mov     [esp], esi
.text:00409DE7                 call    strrchr
.text:00409DEC                 test    eax, eax
.text:00409DEE                 mov     edi, eax
.text:00409DF0                 jz      short loc_409DBB
.text:00409DF2                 mov     [esp+4], eax
.text:00409DF6                 mov     edx, ds:Str
.text:00409DFC                 mov     [esp], edx
.text:00409DFF                 call    strstr
.text:00409E04                 test    eax, eax
.text:00409E06                 jz      short loc_409E12
.text:00409E08
.text:00409E08 loc_409E08:                             ; CODE XREF: .text:00409DA6↑j
.text:00409E08                                         ; .text:00409E28↓j
.text:00409E08                 mov     dword ptr [esp+14h], 1
.text:00409E10                 jmp     short loc_409DBB
.text:00409E12 ; ---------------------------------------------------------------------------
.text:00409E12
.text:00409E12 loc_409E12:                             ; CODE XREF: .text:00409E06↑j
.text:00409E12                 mov     [esp+4], edi
.text:00409E16                 mov     edi, off_412054 ; ".com;.exe;.bat;.cmd"
.text:00409E1C                 mov     [esp], edi
.text:00409E1F                 call    strstr
.text:00409E24                 test    eax, eax
.text:00409E26                 jz      short loc_409DBB
.text:00409E28                 jmp     short loc_409E08
.text:00409E28 ; ---------------------------------------------------------------------------
.text:00409E2A                 align 10h
.text:00409E30
.text:00409E30 loc_409E30:                             ; CODE XREF: .text:00409DB0↑j
.text:00409E30                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00409E37                 call    getenv
.text:00409E3C                 mov     ds:Str, eax
.text:00409E41                 test    eax, eax
.text:00409E43                 jnz     loc_409DB2
.text:00409E49                 mov     ecx, off_412054 ; ".com;.exe;.bat;.cmd"
.text:00409E4F                 mov     ds:Str, ecx
.text:00409E55                 jmp     loc_409DB2
.text:00409E55 ; ---------------------------------------------------------------------------
.text:00409E5A                 align 10h
.text:00409E60                 push    esi
.text:00409E61                 push    ebx
.text:00409E62                 sub     esp, 864h
.text:00409E68                 mov     ebx, [esp+870h]
.text:00409E6F                 lea     edx, [esp+830h]
.text:00409E76                 mov     esi, [esp+874h]
.text:00409E7D                 mov     [esp+4], edx
.text:00409E81                 mov     [esp], ebx
.text:00409E84                 call    sub_408CE0
.text:00409E89                 xor     edx, edx
.text:00409E8B                 test    eax, eax
.text:00409E8D                 jz      loc_409F75
.text:00409E93                 mov     ecx, [esp+830h]
.text:00409E9A                 test    cl, 10h
.text:00409E9D                 mov     [esi], ecx
.text:00409E9F                 mov     eax, [esp+834h]
.text:00409EA6                 mov     edx, [esp+838h]
.text:00409EAD                 mov     [esi+4], eax
.text:00409EB0                 mov     [esi+8], edx
.text:00409EB3                 mov     eax, [esp+83Ch]
.text:00409EBA                 mov     edx, [esp+840h]
.text:00409EC1                 mov     [esi+0Ch], eax
.text:00409EC4                 mov     [esi+10h], edx
.text:00409EC7                 mov     edx, [esp+848h]
.text:00409ECE                 mov     eax, [esp+844h]
.text:00409ED5                 mov     [esi+18h], edx
.text:00409ED8                 mov     [esi+14h], eax
.text:00409EDB                 mov     edx, [esp+84Ch]
.text:00409EE2                 mov     [esi+20h], edx
.text:00409EE5                 mov     edx, [esp+850h]
.text:00409EEC                 mov     [esi+24h], edx
.text:00409EEF                 jnz     loc_409F80
.text:00409EF5                 mov     dword ptr [esi+28h], 1
.text:00409EFC
.text:00409EFC loc_409EFC:                             ; CODE XREF: .text:00409F8B↓j
.text:00409EFC                 mov     [esp], ebx
.text:00409EFF                 call    sub_40BE20
.text:00409F04                 mov     [esp], eax
.text:00409F07                 call    sub_40AC20
.text:00409F0C                 mov     [esp], eax
.text:00409F0F                 lea     edx, [esp+30h]
.text:00409F13                 mov     ebx, eax
.text:00409F15                 mov     [esp+18h], edx
.text:00409F19                 lea     ecx, [esp+2Ch]
.text:00409F1D                 lea     edx, [esp+28h]
.text:00409F21                 mov     [esp+14h], ecx
.text:00409F25                 lea     ecx, [esp+24h]
.text:00409F29                 mov     [esp+10h], edx
.text:00409F2D                 lea     edx, [esp+430h]
.text:00409F34                 mov     [esp+0Ch], ecx
.text:00409F38                 mov     [esp+4], edx
.text:00409F3C                 mov     dword ptr [esp+1Ch], 400h
.text:00409F44                 mov     dword ptr [esp+8], 400h
.text:00409F4C                 call    GetVolumeInformationA
.text:00409F51                 sub     esp, 20h
.text:00409F54                 test    eax, eax
.text:00409F56                 setz    cl
.text:00409F59                 mov     [esp], ebx
.text:00409F5C                 movzx   edx, cl
.text:00409F5F                 dec     edx
.text:00409F60                 and     [esp+24h], edx
.text:00409F64                 call    free
.text:00409F69                 mov     ecx, [esp+24h]
.text:00409F6D                 mov     edx, 1
.text:00409F72                 mov     [esi+1Ch], ecx
.text:00409F75
.text:00409F75 loc_409F75:                             ; CODE XREF: .text:00409E8D↑j
.text:00409F75                 add     esp, 864h
.text:00409F7B                 mov     eax, edx
.text:00409F7D                 pop     ebx
.text:00409F7E                 pop     esi
.text:00409F7F                 retn
.text:00409F80 ; ---------------------------------------------------------------------------
.text:00409F80
.text:00409F80 loc_409F80:                             ; CODE XREF: .text:00409EEF↑j
.text:00409F80                 mov     [esp], ebx
.text:00409F83                 call    sub_408E50
.text:00409F88                 mov     [esi+28h], eax
.text:00409F8B                 jmp     loc_409EFC
.text:00409F90 ; ---------------------------------------------------------------------------
.text:00409F90                 push    ebp
.text:00409F91                 xor     edx, edx
.text:00409F93                 push    edi
.text:00409F94                 push    esi
.text:00409F95                 xor     esi, esi
.text:00409F97                 push    ebx
.text:00409F98                 sub     esp, 1Ch
.text:00409F9B                 mov     ebx, [esp+5Ch]
.text:00409F9F                 mov     ecx, [esp+30h]
.text:00409FA3                 mov     edi, [esp+60h]
.text:00409FA7                 or      esi, ebx
.text:00409FA9                 mov     eax, [esp+4Ch]
.text:00409FAD                 or      edi, edx
.text:00409FAF                 mov     ebx, [esp+64h]
.text:00409FB3                 xor     edx, edx
.text:00409FB5                 test    cl, 10h
.text:00409FB8                 setz    dl
.text:00409FBB                 mov     [ebx+10h], eax
.text:00409FBE                 mov     [ebx+8], edi
.text:00409FC1                 mov     [ebx+0Ch], esi
.text:00409FC4                 dec     edx
.text:00409FC5                 and     edx, 0FFFFC000h
.text:00409FCB                 mov     dword ptr [ebx+14h], 0
.text:00409FD2                 add     edx, 8000h
.text:00409FD8                 or      edx, 124h
.text:00409FDE                 test    cl, 1
.text:00409FE1                 movzx   eax, dx
.text:00409FE4                 jnz     short loc_409FEB
.text:00409FE6                 or      eax, 92h
.text:00409FEB
.text:00409FEB loc_409FEB:                             ; CODE XREF: .text:00409FE4↑j
.text:00409FEB                 mov     ebx, [esp+54h]
.text:00409FEF                 xor     edx, edx
.text:00409FF1                 xor     ebp, ebp
.text:00409FF3                 mov     edi, [esp+50h]
.text:00409FF7                 mov     ecx, [esp+64h]
.text:00409FFB                 mov     esi, edi
.text:00409FFD                 or      [ecx], eax
.text:00409FFF                 mov     edi, ebx
.text:0040A001                 or      edi, ebp
.text:0040A003                 mov     ebp, edx
.text:0040A005                 mov     ebx, [esp+64h]
.text:0040A009                 or      ebp, esi
.text:0040A00B                 mov     esi, [esp+58h]
.text:0040A00F                 mov     edx, [esp+40h]
.text:0040A013                 mov     [ebx+30h], edi
.text:0040A016                 mov     [ebx+18h], esi
.text:0040A019                 mov     ecx, edx
.text:0040A01B                 xor     esi, esi
.text:0040A01D                 mov     [ebx+34h], ebp
.text:0040A020                 xor     edx, edx
.text:0040A022                 or      esi, ecx
.text:0040A024                 mov     dword ptr [esp+8], 989680h
.text:0040A02C                 mov     ebx, [esp+3Ch]
.text:0040A030                 mov     ecx, esi
.text:0040A032                 mov     dword ptr [esp+0Ch], 0
.text:0040A03A                 or      ebx, edx
.text:0040A03C                 mov     edx, ebx
.text:0040A03E                 sub     edx, 0D53E8000h
.text:0040A044                 sbb     ecx, 19DB1DEh
.text:0040A04A                 mov     [esp+4], ecx
.text:0040A04E                 mov     [esp], edx
.text:0040A051                 call    sub_410330
.text:0040A056                 mov     edx, eax
.text:0040A058                 mov     ecx, [esp+64h]
.text:0040A05C                 shr     eax, 1Fh
.text:0040A05F                 dec     eax
.text:0040A060                 and     edx, eax
.text:0040A062                 mov     [ecx+38h], edx
.text:0040A065                 mov     [esp], ebx
.text:0040A068                 mov     [esp+4], esi
.text:0040A06C                 mov     dword ptr [esp+8], 989680h
.text:0040A074                 mov     dword ptr [esp+0Ch], 0
.text:0040A07C                 call    sub_410450
.text:0040A081                 lea     ecx, [eax+eax*4]
.text:0040A084                 lea     esi, [ecx+ecx*4]
.text:0040A087                 mov     eax, [esp+64h]
.text:0040A08B                 shl     esi, 2
.text:0040A08E                 mov     ebx, esi
.text:0040A090                 shr     ebx, 1Fh
.text:0040A093                 dec     ebx
.text:0040A094                 and     ebx, esi
.text:0040A096                 xor     esi, esi
.text:0040A098                 mov     [eax+3Ch], ebx
.text:0040A09B                 mov     edx, [esp+38h]
.text:0040A09F                 mov     dword ptr [esp+8], 989680h
.text:0040A0A7                 mov     ebx, [esp+34h]
.text:0040A0AB                 mov     dword ptr [esp+0Ch], 0
.text:0040A0B3                 mov     ecx, edx
.text:0040A0B5                 xor     edx, edx
.text:0040A0B7                 or      ebx, edx
.text:0040A0B9                 or      esi, ecx
.text:0040A0BB                 mov     edx, ebx
.text:0040A0BD                 sub     edx, 0D53E8000h
.text:0040A0C3                 mov     ecx, esi
.text:0040A0C5                 sbb     ecx, 19DB1DEh
.text:0040A0CB                 mov     [esp+4], ecx
.text:0040A0CF                 mov     [esp], edx
.text:0040A0D2                 call    sub_410330
.text:0040A0D7                 mov     edx, eax
.text:0040A0D9                 mov     ecx, [esp+64h]
.text:0040A0DD                 shr     eax, 1Fh
.text:0040A0E0                 dec     eax
.text:0040A0E1                 and     edx, eax
.text:0040A0E3                 mov     [ecx+48h], edx
.text:0040A0E6                 mov     [esp], ebx
.text:0040A0E9                 mov     [esp+4], esi
.text:0040A0ED                 mov     dword ptr [esp+8], 989680h
.text:0040A0F5                 mov     dword ptr [esp+0Ch], 0
.text:0040A0FD                 call    sub_410450
.text:0040A102                 lea     edx, [eax+eax*4]
.text:0040A105                 mov     ebx, [esp+64h]
.text:0040A109                 lea     ecx, [edx+edx*4]
.text:0040A10C                 shl     ecx, 2
.text:0040A10F                 mov     esi, ecx
.text:0040A111                 shr     esi, 1Fh
.text:0040A114                 dec     esi
.text:0040A115                 and     esi, ecx
.text:0040A117                 mov     [ebx+4Ch], esi
.text:0040A11A                 mov     edx, [esp+48h]
.text:0040A11E                 xor     esi, esi
.text:0040A120                 mov     dword ptr [esp+8], 989680h
.text:0040A128                 mov     ebx, [esp+44h]
.text:0040A12C                 mov     dword ptr [esp+0Ch], 0
.text:0040A134                 mov     ecx, edx
.text:0040A136                 xor     edx, edx
.text:0040A138                 or      ebx, edx
.text:0040A13A                 or      esi, ecx
.text:0040A13C                 mov     edx, ebx
.text:0040A13E                 sub     edx, 0D53E8000h
.text:0040A144                 mov     ecx, esi
.text:0040A146                 sbb     ecx, 19DB1DEh
.text:0040A14C                 mov     [esp+4], ecx
.text:0040A150                 mov     [esp], edx
.text:0040A153                 call    sub_410330
.text:0040A158                 mov     edx, eax
.text:0040A15A                 mov     ecx, [esp+64h]
.text:0040A15E                 shr     eax, 1Fh
.text:0040A161                 dec     eax
.text:0040A162                 and     edx, eax
.text:0040A164                 mov     [ecx+40h], edx
.text:0040A167                 mov     [esp+4], esi
.text:0040A16B                 mov     dword ptr [esp+8], 989680h
.text:0040A173                 mov     dword ptr [esp+0Ch], 0
.text:0040A17B                 mov     [esp], ebx
.text:0040A17E                 call    sub_410450
.text:0040A183                 lea     edx, [eax+eax*4]
.text:0040A186                 lea     esi, [edx+edx*4]
.text:0040A189                 mov     eax, [esp+64h]
.text:0040A18D                 shl     esi, 2
.text:0040A190                 mov     edx, ebp
.text:0040A192                 mov     ecx, esi
.text:0040A194                 mov     dword ptr [eax+50h], 200h
.text:0040A19B                 shr     ecx, 1Fh
.text:0040A19E                 dec     ecx
.text:0040A19F                 and     ecx, esi
.text:0040A1A1                 test    ebp, ebp
.text:0040A1A3                 mov     [eax+44h], ecx
.text:0040A1A6                 mov     eax, edi
.text:0040A1A8                 js      short loc_40A1E2
.text:0040A1AA
.text:0040A1AA loc_40A1AA:                             ; CODE XREF: .text:0040A1EA↓j
.text:0040A1AA                 xor     esi, esi
.text:0040A1AC                 mov     ebp, edi
.text:0040A1AE                 mov     ecx, eax
.text:0040A1B0                 shrd    ecx, edx, 9
.text:0040A1B4                 mov     ebx, edx
.text:0040A1B6                 and     ebp, 1FFh
.text:0040A1BC                 mov     eax, esi
.text:0040A1BE                 sar     ebx, 9
.text:0040A1C1                 or      eax, ebp
.text:0040A1C3                 jz      short loc_40A1CB
.text:0040A1C5                 add     ecx, 1
.text:0040A1C8                 adc     ebx, 0
.text:0040A1CB
.text:0040A1CB loc_40A1CB:                             ; CODE XREF: .text:0040A1C3↑j
.text:0040A1CB                 mov     edx, [esp+64h]
.text:0040A1CF                 mov     eax, 1
.text:0040A1D4                 mov     [edx+58h], ecx
.text:0040A1D7                 mov     [edx+5Ch], ebx
.text:0040A1DA                 add     esp, 1Ch
.text:0040A1DD                 pop     ebx
.text:0040A1DE                 pop     esi
.text:0040A1DF                 pop     edi
.text:0040A1E0                 pop     ebp
.text:0040A1E1                 retn
.text:0040A1E2 ; ---------------------------------------------------------------------------
.text:0040A1E2
.text:0040A1E2 loc_40A1E2:                             ; CODE XREF: .text:0040A1A8↑j
.text:0040A1E2                 add     eax, 1FFh
.text:0040A1E7                 adc     edx, 0
.text:0040A1EA                 jmp     short loc_40A1AA
.text:0040A1EA ; ---------------------------------------------------------------------------
.text:0040A1EC                 align 10h
.text:0040A1F0                 push    ebp
.text:0040A1F1                 push    edi
.text:0040A1F2                 xor     edi, edi
.text:0040A1F4                 push    esi
.text:0040A1F5                 xor     esi, esi
.text:0040A1F7                 push    ebx
.text:0040A1F8                 sub     esp, 0Ch
.text:0040A1FB                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:0040A202                 call    LoadLibraryA
.text:0040A207                 sub     esp, 4
.text:0040A20A                 mov     ebp, eax
.text:0040A20C                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:0040A214                 mov     [esp], eax
.text:0040A217                 call    GetProcAddress
.text:0040A21C                 sub     esp, 8
.text:0040A21F                 test    eax, eax
.text:0040A221                 jz      short loc_40A252
.text:0040A223                 lea     ecx, [esp+8]
.text:0040A227                 mov     [esp+4], ecx
.text:0040A22B                 mov     ecx, [esp+20h]
.text:0040A22F                 mov     [esp], ecx
.text:0040A232                 call    eax
.text:0040A234                 sub     esp, 8
.text:0040A237                 mov     ebx, eax
.text:0040A239                 cmp     eax, 0FFFFFFFFh
.text:0040A23C                 jz      short loc_40A26D
.text:0040A23E
.text:0040A23E loc_40A23E:                             ; CODE XREF: .text:0040A276↓j
.text:0040A23E                 mov     esi, [esp+8]
.text:0040A242                 mov     ecx, ebx
.text:0040A244                 xor     edi, edi
.text:0040A246                 xor     ebx, ebx
.text:0040A248                 mov     edx, esi
.text:0040A24A                 mov     esi, ecx
.text:0040A24C                 or      esi, edi
.text:0040A24E                 mov     edi, ebx
.text:0040A250                 or      edi, edx
.text:0040A252
.text:0040A252 loc_40A252:                             ; CODE XREF: .text:0040A221↑j
.text:0040A252                                         ; .text:0040A274↓j
.text:0040A252                 test    ebp, ebp
.text:0040A254                 jz      short loc_40A261
.text:0040A256                 mov     [esp], ebp
.text:0040A259                 call    FreeLibrary
.text:0040A25E                 sub     esp, 4
.text:0040A261
.text:0040A261 loc_40A261:                             ; CODE XREF: .text:0040A254↑j
.text:0040A261                 add     esp, 0Ch
.text:0040A264                 mov     eax, esi
.text:0040A266                 mov     edx, edi
.text:0040A268                 pop     ebx
.text:0040A269                 pop     esi
.text:0040A26A                 pop     edi
.text:0040A26B                 pop     ebp
.text:0040A26C                 retn
.text:0040A26D ; ---------------------------------------------------------------------------
.text:0040A26D
.text:0040A26D loc_40A26D:                             ; CODE XREF: .text:0040A23C↑j
.text:0040A26D                 call    GetLastError
.text:0040A272                 test    eax, eax
.text:0040A274                 jnz     short loc_40A252
.text:0040A276                 jmp     short loc_40A23E
.text:0040A276 ; ---------------------------------------------------------------------------
.text:0040A278                 align 10h
.text:0040A280
.text:0040A280 ; =============== S U B R O U T I N E =======================================
.text:0040A280
.text:0040A280
.text:0040A280 ; int __cdecl sub_40A280(LPCSTR lpFileName, int)
.text:0040A280 sub_40A280      proc near               ; CODE XREF: sub_4086A0+2121↓p
.text:0040A280
.text:0040A280 lpRootPathName  = dword ptr -8FCh
.text:0040A280 lpVolumeNameBuffer= dword ptr -8F8h
.text:0040A280 nVolumeNameSize = dword ptr -8F4h
.text:0040A280 lpVolumeSerialNumber= dword ptr -8F0h
.text:0040A280 lpMaximumComponentLength= dword ptr -8ECh
.text:0040A280 lpFileSystemFlags= dword ptr -8E8h
.text:0040A280 lpFileSystemNameBuffer= dword ptr -8E4h
.text:0040A280 nFileSystemNameSize= dword ptr -8E0h
.text:0040A280 VolumeSerialNumber= dword ptr -8D8h
.text:0040A280 MaximumComponentLength= dword ptr -8D4h
.text:0040A280 FileSystemFlags = dword ptr -8D0h
.text:0040A280 var_8CC         = dword ptr -8CCh
.text:0040A280 var_8C8         = dword ptr -8C8h
.text:0040A280 var_8C4         = dword ptr -8C4h
.text:0040A280 var_8C0         = dword ptr -8C0h
.text:0040A280 var_8BC         = dword ptr -8BCh
.text:0040A280 var_8B8         = dword ptr -8B8h
.text:0040A280 var_8B4         = dword ptr -8B4h
.text:0040A280 var_8B0         = dword ptr -8B0h
.text:0040A280 var_8AC         = dword ptr -8ACh
.text:0040A280 var_8A8         = dword ptr -8A8h
.text:0040A280 var_8A4         = dword ptr -8A4h
.text:0040A280 var_8A0         = dword ptr -8A0h
.text:0040A280 var_89C         = dword ptr -89Ch
.text:0040A280 FileSystemNameBuffer= byte ptr -88Ch
.text:0040A280 VolumeNameBuffer= byte ptr -48Ch
.text:0040A280 var_8C          = dword ptr -8Ch
.text:0040A280 var_88          = dword ptr -88h
.text:0040A280 var_84          = dword ptr -84h
.text:0040A280 var_80          = dword ptr -80h
.text:0040A280 var_7C          = dword ptr -7Ch
.text:0040A280 var_78          = dword ptr -78h
.text:0040A280 var_74          = dword ptr -74h
.text:0040A280 var_70          = dword ptr -70h
.text:0040A280 var_6C          = dword ptr -6Ch
.text:0040A280 var_5C          = dword ptr -5Ch
.text:0040A280 var_58          = dword ptr -58h
.text:0040A280 var_54          = dword ptr -54h
.text:0040A280 var_50          = dword ptr -50h
.text:0040A280 var_4C          = dword ptr -4Ch
.text:0040A280 var_48          = dword ptr -48h
.text:0040A280 var_44          = dword ptr -44h
.text:0040A280 var_3C          = dword ptr -3Ch
.text:0040A280 var_38          = dword ptr -38h
.text:0040A280 var_34          = dword ptr -34h
.text:0040A280 lpFileName      = dword ptr  4
.text:0040A280 arg_4           = dword ptr  8
.text:0040A280
.text:0040A280                 push    ebp
.text:0040A281                 xor     eax, eax
.text:0040A283                 mov     ecx, 0Dh
.text:0040A288                 push    edi
.text:0040A289                 push    esi
.text:0040A28A                 push    ebx
.text:0040A28B                 sub     esp, 8ECh
.text:0040A291                 lea     edi, [esp+8FCh+var_5C]
.text:0040A298                 cld
.text:0040A299                 lea     edx, [esp+8FCh+var_8C]
.text:0040A2A0                 rep stosd
.text:0040A2A2                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040A2A6                 lea     esi, [esp+8FCh+var_5C]
.text:0040A2AD                 mov     edx, [esp+8FCh+lpFileName]
.text:0040A2B4                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:0040A2B7                 call    sub_408CE0
.text:0040A2BC                 test    eax, eax
.text:0040A2BE                 mov     edx, 0FFFFFFFFh
.text:0040A2C3                 jz      loc_40A654
.text:0040A2C9                 mov     edx, [esp+8FCh+var_88]
.text:0040A2D0                 mov     ebp, [esp+8FCh+var_84]
.text:0040A2D7                 mov     edi, [esp+8FCh+var_80]
.text:0040A2DE                 mov     [esp+8FCh+var_58], edx
.text:0040A2E5                 mov     ecx, [esp+8FCh+var_7C]
.text:0040A2EC                 mov     ebx, [esp+8FCh+var_8C]
.text:0040A2F3                 mov     [esp+8FCh+var_54], ebp
.text:0040A2FA                 mov     edx, [esp+8FCh+var_78]
.text:0040A301                 mov     ebp, [esp+8FCh+var_74]
.text:0040A308                 mov     [esp+8FCh+var_50], edi
.text:0040A30F                 test    bl, 10h
.text:0040A312                 mov     edi, [esp+8FCh+var_70]
.text:0040A319                 mov     [esp+8FCh+var_4C], ecx
.text:0040A320                 mov     ecx, [esp+8FCh+var_6C]
.text:0040A327                 mov     [esp+8FCh+var_5C], ebx
.text:0040A32E                 mov     [esp+8FCh+var_48], edx
.text:0040A335                 mov     [esp+8FCh+var_44], ebp
.text:0040A33C                 mov     [esp+8FCh+var_3C], edi
.text:0040A343                 mov     [esp+8FCh+var_38], ecx
.text:0040A34A                 jnz     loc_40A670
.text:0040A350                 mov     ebx, 1
.text:0040A355                 mov     [esp+8FCh+var_34], ebx
.text:0040A35C
.text:0040A35C loc_40A35C:                             ; CODE XREF: sub_40A280+406↓j
.text:0040A35C                 mov     eax, [esp+8FCh+lpFileName]
.text:0040A363                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:0040A367                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:0040A36B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:0040A36E                 call    sub_40BE20
.text:0040A373                 mov     [esp+8FCh+lpRootPathName], eax
.text:0040A376                 call    sub_40AC20
.text:0040A37B                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:0040A37F                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040A383                 mov     ebp, eax
.text:0040A385                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:0040A389                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:0040A38D                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:0040A394                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:0040A398                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0040A39C                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:0040A3A0                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040A3A8                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040A3B0                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:0040A3B3                 call    GetVolumeInformationA
.text:0040A3B8                 sub     esp, 20h
.text:0040A3BB                 test    eax, eax
.text:0040A3BD                 lea     edi, [esp+8FCh+var_8CC]
.text:0040A3C1                 setz    bl
.text:0040A3C4                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:0040A3C7                 xor     ebp, ebp
.text:0040A3C9                 movzx   edx, bl
.text:0040A3CC                 dec     edx
.text:0040A3CD                 xor     ebx, ebx
.text:0040A3CF                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:0040A3D3                 call    free
.text:0040A3D8                 cld
.text:0040A3D9                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040A3DD                 mov     [esi+1Ch], ecx
.text:0040A3E0                 mov     ecx, 0Dh
.text:0040A3E5                 rep movsd
.text:0040A3E7                 mov     edi, [esp+8FCh+var_8A0]
.text:0040A3EB                 mov     edx, [esp+8FCh+var_89C]
.text:0040A3EF                 mov     ecx, [esp+8FCh+var_8CC]
.text:0040A3F3                 or      ebp, edi
.text:0040A3F5                 mov     esi, [esp+8FCh+var_8B0]
.text:0040A3F9                 mov     edi, [esp+8FCh+arg_4]
.text:0040A400                 or      edx, ebx
.text:0040A402                 mov     [edi+8], edx
.text:0040A405                 xor     edx, edx
.text:0040A407                 test    cl, 10h
.text:0040A40A                 setz    dl
.text:0040A40D                 mov     [edi+0Ch], ebp
.text:0040A410                 mov     [edi+10h], esi
.text:0040A413                 mov     dword ptr [edi+14h], 0
.text:0040A41A                 dec     edx
.text:0040A41B                 and     edx, 0FFFFC000h
.text:0040A421                 add     edx, 8000h
.text:0040A427                 or      edx, 124h
.text:0040A42D                 test    cl, 1
.text:0040A430                 movzx   eax, dx
.text:0040A433                 jnz     short loc_40A43A
.text:0040A435                 or      eax, 92h
.text:0040A43A
.text:0040A43A loc_40A43A:                             ; CODE XREF: sub_40A280+1B3↑j
.text:0040A43A                 mov     ebx, [esp+8FCh+var_8A8]
.text:0040A43E                 xor     edx, edx
.text:0040A440                 xor     ebp, ebp
.text:0040A442                 mov     edi, [esp+8FCh+var_8AC]
.text:0040A446                 mov     ecx, [esp+8FCh+arg_4]
.text:0040A44D                 mov     esi, edi
.text:0040A44F                 or      [ecx], eax
.text:0040A451                 mov     edi, ebx
.text:0040A453                 or      edi, ebp
.text:0040A455                 mov     ebp, edx
.text:0040A457                 mov     ebx, [esp+8FCh+var_8A4]
.text:0040A45B                 or      ebp, esi
.text:0040A45D                 mov     esi, [esp+8FCh+arg_4]
.text:0040A464                 mov     edx, [esp+8FCh+var_8BC]
.text:0040A468                 mov     [esi+18h], ebx
.text:0040A46B                 mov     ebx, [esp+8FCh+var_8C0]
.text:0040A46F                 mov     ecx, edx
.text:0040A471                 mov     [esi+30h], edi
.text:0040A474                 xor     edx, edx
.text:0040A476                 mov     [esi+34h], ebp
.text:0040A479                 or      ebx, edx
.text:0040A47B                 xor     esi, esi
.text:0040A47D                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040A485                 or      esi, ecx
.text:0040A487                 mov     edx, ebx
.text:0040A489                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040A491                 sub     edx, 0D53E8000h
.text:0040A497                 mov     ecx, esi
.text:0040A499                 sbb     ecx, 19DB1DEh
.text:0040A49F                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040A4A3                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040A4A6                 call    sub_410330
.text:0040A4AB                 mov     edx, eax
.text:0040A4AD                 mov     ecx, [esp+8FCh+arg_4]
.text:0040A4B4                 shr     eax, 1Fh
.text:0040A4B7                 dec     eax
.text:0040A4B8                 and     edx, eax
.text:0040A4BA                 mov     [ecx+38h], edx
.text:0040A4BD                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040A4C0                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040A4C4                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040A4CC                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040A4D4                 call    sub_410450
.text:0040A4D9                 lea     ecx, [eax+eax*4]
.text:0040A4DC                 lea     ebx, [ecx+ecx*4]
.text:0040A4DF                 mov     eax, [esp+8FCh+arg_4]
.text:0040A4E6                 shl     ebx, 2
.text:0040A4E9                 mov     esi, ebx
.text:0040A4EB                 shr     esi, 1Fh
.text:0040A4EE                 dec     esi
.text:0040A4EF                 and     esi, ebx
.text:0040A4F1                 mov     [eax+3Ch], esi
.text:0040A4F4                 mov     edx, [esp+8FCh+var_8C4]
.text:0040A4F8                 xor     esi, esi
.text:0040A4FA                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040A502                 mov     ebx, [esp+8FCh+var_8C8]
.text:0040A506                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040A50E                 mov     ecx, edx
.text:0040A510                 xor     edx, edx
.text:0040A512                 or      ebx, edx
.text:0040A514                 or      esi, ecx
.text:0040A516                 mov     edx, ebx
.text:0040A518                 sub     edx, 0D53E8000h
.text:0040A51E                 mov     ecx, esi
.text:0040A520                 sbb     ecx, 19DB1DEh
.text:0040A526                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040A52A                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040A52D                 call    sub_410330
.text:0040A532                 mov     edx, eax
.text:0040A534                 mov     ecx, [esp+8FCh+arg_4]
.text:0040A53B                 shr     eax, 1Fh
.text:0040A53E                 dec     eax
.text:0040A53F                 and     edx, eax
.text:0040A541                 mov     [ecx+48h], edx
.text:0040A544                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040A547                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040A54B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040A553                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040A55B                 call    sub_410450
.text:0040A560                 lea     ecx, [eax+eax*4]
.text:0040A563                 lea     ebx, [ecx+ecx*4]
.text:0040A566                 mov     eax, [esp+8FCh+arg_4]
.text:0040A56D                 shl     ebx, 2
.text:0040A570                 mov     esi, ebx
.text:0040A572                 shr     esi, 1Fh
.text:0040A575                 dec     esi
.text:0040A576                 and     esi, ebx
.text:0040A578                 mov     [eax+4Ch], esi
.text:0040A57B                 mov     edx, [esp+8FCh+var_8B4]
.text:0040A57F                 xor     esi, esi
.text:0040A581                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040A589                 mov     ebx, [esp+8FCh+var_8B8]
.text:0040A58D                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040A595                 mov     ecx, edx
.text:0040A597                 xor     edx, edx
.text:0040A599                 or      ebx, edx
.text:0040A59B                 or      esi, ecx
.text:0040A59D                 mov     edx, ebx
.text:0040A59F                 sub     edx, 0D53E8000h
.text:0040A5A5                 mov     ecx, esi
.text:0040A5A7                 sbb     ecx, 19DB1DEh
.text:0040A5AD                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040A5B1                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040A5B4                 call    sub_410330
.text:0040A5B9                 mov     edx, eax
.text:0040A5BB                 mov     ecx, [esp+8FCh+arg_4]
.text:0040A5C2                 shr     eax, 1Fh
.text:0040A5C5                 dec     eax
.text:0040A5C6                 and     edx, eax
.text:0040A5C8                 mov     [ecx+40h], edx
.text:0040A5CB                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040A5CE                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040A5D2                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040A5DA                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040A5E2                 call    sub_410450
.text:0040A5E7                 lea     ebx, [eax+eax*4]
.text:0040A5EA                 mov     esi, [esp+8FCh+arg_4]
.text:0040A5F1                 lea     edx, [ebx+ebx*4]
.text:0040A5F4                 shl     edx, 2
.text:0040A5F7                 mov     eax, edi
.text:0040A5F9                 mov     ecx, edx
.text:0040A5FB                 mov     dword ptr [esi+50h], 200h
.text:0040A602                 shr     ecx, 1Fh
.text:0040A605                 dec     ecx
.text:0040A606                 and     ecx, edx
.text:0040A608                 test    ebp, ebp
.text:0040A60A                 mov     edx, ebp
.text:0040A60C                 mov     [esi+44h], ecx
.text:0040A60F                 js      short loc_40A661
.text:0040A611
.text:0040A611 loc_40A611:                             ; CODE XREF: sub_40A280+3E9↓j
.text:0040A611                 xor     esi, esi
.text:0040A613                 mov     ebp, edi
.text:0040A615                 mov     ecx, eax
.text:0040A617                 shrd    ecx, edx, 9
.text:0040A61B                 mov     ebx, edx
.text:0040A61D                 and     ebp, 1FFh
.text:0040A623                 mov     eax, esi
.text:0040A625                 sar     ebx, 9
.text:0040A628                 or      eax, ebp
.text:0040A62A                 jz      short loc_40A632
.text:0040A62C                 add     ecx, 1
.text:0040A62F                 adc     ebx, 0
.text:0040A632
.text:0040A632 loc_40A632:                             ; CODE XREF: sub_40A280+3AA↑j
.text:0040A632                 mov     edx, [esp+8FCh+arg_4]
.text:0040A639                 mov     [edx+5Ch], ebx
.text:0040A63C                 mov     ebx, [esp+8FCh+lpFileName]
.text:0040A643                 mov     [edx+58h], ecx
.text:0040A646                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040A64A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0040A64D                 call    sub_4094A0
.text:0040A652                 xor     edx, edx
.text:0040A654
.text:0040A654 loc_40A654:                             ; CODE XREF: sub_40A280+43↑j
.text:0040A654                 add     esp, 8ECh
.text:0040A65A                 mov     eax, edx
.text:0040A65C                 pop     ebx
.text:0040A65D                 pop     esi
.text:0040A65E                 pop     edi
.text:0040A65F                 pop     ebp
.text:0040A660                 retn
.text:0040A661 ; ---------------------------------------------------------------------------
.text:0040A661
.text:0040A661 loc_40A661:                             ; CODE XREF: sub_40A280+38F↑j
.text:0040A661                 add     eax, 1FFh
.text:0040A666                 adc     edx, 0
.text:0040A669                 jmp     short loc_40A611
.text:0040A669 ; ---------------------------------------------------------------------------
.text:0040A66B                 align 10h
.text:0040A670
.text:0040A670 loc_40A670:                             ; CODE XREF: sub_40A280+CA↑j
.text:0040A670                 mov     eax, [esp+8FCh+lpFileName]
.text:0040A677                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:0040A67A                 call    sub_408E50
.text:0040A67F                 mov     [esp+8FCh+var_34], eax
.text:0040A686                 jmp     loc_40A35C
.text:0040A686 sub_40A280      endp
.text:0040A686
.text:0040A686 ; ---------------------------------------------------------------------------
.text:0040A68B                 align 10h
.text:0040A690 ; START OF FUNCTION CHUNK FOR sub_4086A0
.text:0040A690
.text:0040A690 loc_40A690:                             ; CODE XREF: sub_4086A0+26↑j
.text:0040A690                 cld
.text:0040A691                 sub     esp, 2Ch
.text:0040A694                 xor     eax, eax
.text:0040A696                 mov     [esp+2Ch+var_10], ebx
.text:0040A69A                 mov     ecx, 18h
.text:0040A69F                 mov     ebx, [esp+2Ch+arg_0]
.text:0040A6A3                 mov     [esp+2Ch+var_C], esi
.text:0040A6A7                 mov     esi, [esp+2Ch+arg_4]
.text:0040A6AB                 test    ebx, ebx
.text:0040A6AD                 mov     [esp+2Ch+var_8], edi
.text:0040A6B1                 mov     edi, esi
.text:0040A6B3                 mov     [esp+2Ch+var_4], ebp
.text:0040A6B7                 rep stosd
.text:0040A6B9                 jz      short loc_40A6C0
.text:0040A6BB                 cmp     byte ptr [ebx], 0
.text:0040A6BE                 jnz     short loc_40A6D8
.text:0040A6C0
.text:0040A6C0 loc_40A6C0:                             ; CODE XREF: sub_4086A0+2019↑j
.text:0040A6C0                 xor     edx, edx
.text:0040A6C2
.text:0040A6C2 loc_40A6C2:                             ; CODE XREF: sub_4086A0+204F↓j
.text:0040A6C2                                         ; sub_4086A0+20F8↓j
.text:0040A6C2                 mov     ebx, [esp+2Ch+var_10]
.text:0040A6C6                 mov     eax, edx
.text:0040A6C8                 mov     esi, [esp+2Ch+var_C]
.text:0040A6CC                 mov     edi, [esp+2Ch+var_8]
.text:0040A6D0                 mov     ebp, [esp+2Ch+var_4]
.text:0040A6D4                 add     esp, 2Ch
.text:0040A6D7                 retn
.text:0040A6D8 ; ---------------------------------------------------------------------------
.text:0040A6D8
.text:0040A6D8 loc_40A6D8:                             ; CODE XREF: sub_4086A0+201E↑j
.text:0040A6D8                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:0040A6E0                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:0040A6E3                 call    sub_40BD40
.text:0040A6E8                 test    eax, eax
.text:0040A6EA                 mov     edx, 0FFFFFFFFh
.text:0040A6EF                 jnz     short loc_40A6C2
.text:0040A6F1                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:0040A6F4                 call    sub_40BBF0
.text:0040A6F9                 mov     [esp+2Ch+lpFileName], eax
.text:0040A6FC                 call    sub_40AC20
.text:0040A701                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:0040A704                 mov     ebp, eax
.text:0040A706                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040A70E                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:0040A716                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0040A71E                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040A726                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0040A72E                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040A736                 call    CreateFileA
.text:0040A73B                 sub     esp, 1Ch
.text:0040A73E                 mov     ebx, eax
.text:0040A740                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040A744                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:0040A747                 call    sub_408FD0
.text:0040A74C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0040A74F                 mov     edi, eax
.text:0040A751                 call    CloseHandle
.text:0040A756                 sub     esp, 4
.text:0040A759                 cmp     edi, 0FFFFFFFFh
.text:0040A75C                 jz      short loc_40A7BA
.text:0040A75E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040A762                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:0040A765                 call    sub_4094A0
.text:0040A76A
.text:0040A76A loc_40A76A:                             ; CODE XREF: sub_4086A0+2128↓j
.text:0040A76A                 mov     edx, [esi]
.text:0040A76C                 and     edx, 0F000h
.text:0040A772                 cmp     edx, 4000h
.text:0040A778                 jz      short loc_40A7AD
.text:0040A77A
.text:0040A77A loc_40A77A:                             ; CODE XREF: sub_4086A0+2118↓j
.text:0040A77A                 cmp     edi, 0FFFFFFFFh
.text:0040A77D                 jz      short loc_40A79D
.text:0040A77F
.text:0040A77F loc_40A77F:                             ; CODE XREF: sub_4086A0+210B↓j
.text:0040A77F                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:0040A786                 call    SetErrorMode
.text:0040A78B                 sub     esp, 4
.text:0040A78E                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:0040A791                 call    free
.text:0040A796                 mov     edx, edi
.text:0040A798                 jmp     loc_40A6C2
.text:0040A79D ; ---------------------------------------------------------------------------
.text:0040A79D
.text:0040A79D loc_40A79D:                             ; CODE XREF: sub_4086A0+20DD↑j
.text:0040A79D                 call    sub_40B2D0
.text:0040A7A2                 mov     esi, eax
.text:0040A7A4                 call    _errno
.text:0040A7A9                 mov     [eax], esi
.text:0040A7AB                 jmp     short loc_40A77F
.text:0040A7AD ; ---------------------------------------------------------------------------
.text:0040A7AD
.text:0040A7AD loc_40A7AD:                             ; CODE XREF: sub_4086A0+20D8↑j
.text:0040A7AD                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:0040A7B0                 call    sub_408E50
.text:0040A7B5                 mov     [esi+18h], eax
.text:0040A7B8                 jmp     short loc_40A77A
.text:0040A7BA ; ---------------------------------------------------------------------------
.text:0040A7BA
.text:0040A7BA loc_40A7BA:                             ; CODE XREF: sub_4086A0+20BC↑j
.text:0040A7BA                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040A7BE                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:0040A7C1                 call    sub_40A280
.text:0040A7C6                 mov     edi, eax
.text:0040A7C8                 jmp     short loc_40A76A
.text:0040A7C8 ; END OF FUNCTION CHUNK FOR sub_4086A0
.text:0040A7C8 ; ---------------------------------------------------------------------------
.text:0040A7CA                 align 10h
.text:0040A7D0
.text:0040A7D0 ; =============== S U B R O U T I N E =======================================
.text:0040A7D0
.text:0040A7D0 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:0040A7D0
.text:0040A7D0 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:0040A7D0 _win32_longpath proc near               ; CODE XREF: .text:0040AF94↓p
.text:0040A7D0
.text:0040A7D0 C               = dword ptr -278h
.text:0040A7D0 lpFindFileData  = dword ptr -274h
.text:0040A7D0 Destination     = byte ptr -268h
.text:0040A7D0 var_267         = byte ptr -267h
.text:0040A7D0 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:0040A7D0 lpFileName      = dword ptr  8
.text:0040A7D0
.text:0040A7D0                 push    ebp
.text:0040A7D1                 xor     eax, eax
.text:0040A7D3                 push    edi
.text:0040A7D4                 push    esi
.text:0040A7D5                 push    ebx
.text:0040A7D6                 sub     esp, 26Ch
.text:0040A7DC                 mov     esi, [esp+278h+lpFileName]
.text:0040A7E3                 lea     ebp, [esp+278h+Destination]
.text:0040A7E7                 test    esi, esi
.text:0040A7E9                 jz      loc_40A947
.text:0040A7EF                 movsx   edx, byte ptr [esi]
.text:0040A7F2                 mov     [esp+278h+C], edx ; C
.text:0040A7F5                 call    isalpha
.text:0040A7FA                 test    eax, eax
.text:0040A7FC                 jz      short loc_40A80F
.text:0040A7FE                 mov     eax, [esp+278h+lpFileName]
.text:0040A805                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:0040A809                 jz      loc_40AB4B
.text:0040A80F
.text:0040A80F loc_40A80F:                             ; CODE XREF: _win32_longpath+2C↑j
.text:0040A80F                 mov     edx, [esp+278h+lpFileName]
.text:0040A816                 movzx   eax, byte ptr [edx]
.text:0040A819                 cmp     al, 2Fh ; '/'
.text:0040A81B                 jz      loc_40AA2B
.text:0040A821                 cmp     al, 5Ch ; '\'
.text:0040A823                 jz      loc_40AA2B
.text:0040A829
.text:0040A829 loc_40A829:                             ; CODE XREF: _win32_longpath+26E↓j
.text:0040A829                                         ; _win32_longpath+2B1↓j ...
.text:0040A829                 mov     [ebp+268h+Destination], 0
.text:0040A82D                 movzx   ebx, byte ptr [esi]
.text:0040A830                 test    bl, bl
.text:0040A832                 jz      loc_40A929
.text:0040A838                 nop
.text:0040A839                 lea     esi, [esi+0]
.text:0040A840
.text:0040A840 loc_40A840:                             ; CODE XREF: _win32_longpath+153↓j
.text:0040A840                 cmp     bl, 2Fh ; '/'
.text:0040A843                 jz      loc_40A9E0
.text:0040A849                 cmp     bl, 5Ch ; '\'
.text:0040A84C                 jz      loc_40A9E0
.text:0040A852
.text:0040A852 loc_40A852:                             ; CODE XREF: _win32_longpath+21E↓j
.text:0040A852                                         ; _win32_longpath+22C↓j ...
.text:0040A852                 cmp     bl, 2Eh ; '.'
.text:0040A855                 jz      loc_40A980
.text:0040A85B
.text:0040A85B loc_40A85B:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:0040A85B                                         ; _win32_longpath+203↓j
.text:0040A85B                 test    bl, bl
.text:0040A85D                 jz      loc_40A929
.text:0040A863                 cmp     bl, 2Fh ; '/'
.text:0040A866                 jz      short loc_40A882
.text:0040A868                 cmp     bl, 5Ch ; '\'
.text:0040A86B                 jz      short loc_40A882
.text:0040A86D                 lea     esi, [esi+0]
.text:0040A870
.text:0040A870 loc_40A870:                             ; CODE XREF: _win32_longpath+B0↓j
.text:0040A870                 inc     esi
.text:0040A871                 movzx   ebx, byte ptr [esi]
.text:0040A874                 test    bl, bl
.text:0040A876                 jz      short loc_40A882
.text:0040A878                 cmp     bl, 2Fh ; '/'
.text:0040A87B                 jz      short loc_40A882
.text:0040A87D                 cmp     bl, 5Ch ; '\'
.text:0040A880                 jnz     short loc_40A870
.text:0040A882
.text:0040A882 loc_40A882:                             ; CODE XREF: _win32_longpath+96↑j
.text:0040A882                                         ; _win32_longpath+9B↑j ...
.text:0040A882                 mov     byte ptr [esi], 0
.text:0040A885                 lea     edx, [esp+278h+FindFileData]
.text:0040A88C                 mov     eax, [esp+278h+lpFileName]
.text:0040A893                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:0040A897                 mov     [esp+278h+C], eax ; lpFileName
.text:0040A89A                 call    FindFirstFileA
.text:0040A89F                 mov     [esi], bl
.text:0040A8A1                 sub     esp, 8
.text:0040A8A4                 mov     edi, eax
.text:0040A8A6                 cmp     eax, 0FFFFFFFFh
.text:0040A8A9                 jz      loc_40A96C
.text:0040A8AF                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:0040A8B6                 mov     ecx, ebx
.text:0040A8B8                 nop
.text:0040A8B9                 lea     esi, [esi+0]
.text:0040A8C0
.text:0040A8C0 loc_40A8C0:                             ; CODE XREF: _win32_longpath+105↓j
.text:0040A8C0                 mov     eax, [ebx]
.text:0040A8C2                 add     ebx, 4
.text:0040A8C5                 lea     edx, [eax-1010101h]
.text:0040A8CB                 not     eax
.text:0040A8CD                 and     edx, eax
.text:0040A8CF                 and     edx, 80808080h
.text:0040A8D5                 jz      short loc_40A8C0
.text:0040A8D7                 test    edx, 8080h
.text:0040A8DD                 jnz     short loc_40A8E5
.text:0040A8DF                 shr     edx, 10h
.text:0040A8E2                 add     ebx, 2
.text:0040A8E5
.text:0040A8E5 loc_40A8E5:                             ; CODE XREF: _win32_longpath+10D↑j
.text:0040A8E5                 add     dl, dl
.text:0040A8E7                 sbb     ebx, 3
.text:0040A8EA                 sub     ebx, ecx
.text:0040A8EC                 lea     ecx, [esp+278h+Destination]
.text:0040A8F0                 sub     ecx, ebp
.text:0040A8F2                 add     ecx, 105h
.text:0040A8F8                 cmp     ecx, ebx
.text:0040A8FA                 jle     short loc_40A952
.text:0040A8FC                 mov     [esp+278h+C], ebp ; Destination
.text:0040A8FF                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:0040A906                 add     ebp, ebx
.text:0040A908                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:0040A90C                 call    strcpy
.text:0040A911                 mov     [esp+278h+C], edi ; hFindFile
.text:0040A914                 call    FindClose
.text:0040A919                 sub     esp, 4
.text:0040A91C
.text:0040A91C loc_40A91C:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:0040A91C                 movzx   ecx, byte ptr [esi]
.text:0040A91F                 test    cl, cl
.text:0040A921                 mov     bl, cl
.text:0040A923                 jnz     loc_40A840
.text:0040A929
.text:0040A929 loc_40A929:                             ; CODE XREF: _win32_longpath+62↑j
.text:0040A929                                         ; _win32_longpath+8D↑j
.text:0040A929                 mov     esi, [esp+278h+lpFileName]
.text:0040A930                 lea     ebp, [esp+278h+Destination]
.text:0040A934                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:0040A938                 mov     [esp+278h+C], esi ; Destination
.text:0040A93B                 call    strcpy
.text:0040A940                 mov     eax, [esp+278h+lpFileName]
.text:0040A947
.text:0040A947 loc_40A947:                             ; CODE XREF: _win32_longpath+19↑j
.text:0040A947                                         ; _win32_longpath+19A↓j
.text:0040A947                 add     esp, 26Ch
.text:0040A94D                 pop     ebx
.text:0040A94E                 pop     esi
.text:0040A94F                 pop     edi
.text:0040A950                 pop     ebp
.text:0040A951                 retn
.text:0040A952 ; ---------------------------------------------------------------------------
.text:0040A952
.text:0040A952 loc_40A952:                             ; CODE XREF: _win32_longpath+12A↑j
.text:0040A952                 mov     [esp+278h+C], edi ; hFindFile
.text:0040A955                 call    FindClose
.text:0040A95A                 sub     esp, 4
.text:0040A95D                 call    _errno
.text:0040A962                 mov     dword ptr [eax], 22h ; '"'
.text:0040A968
.text:0040A968 loc_40A968:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:0040A968                 xor     eax, eax
.text:0040A96A                 jmp     short loc_40A947
.text:0040A96C ; ---------------------------------------------------------------------------
.text:0040A96C
.text:0040A96C loc_40A96C:                             ; CODE XREF: _win32_longpath+D9↑j
.text:0040A96C                 call    _errno
.text:0040A971                 mov     dword ptr [eax], 16h
.text:0040A977                 jmp     short loc_40A968
.text:0040A977 ; ---------------------------------------------------------------------------
.text:0040A979                 align 10h
.text:0040A980
.text:0040A980 loc_40A980:                             ; CODE XREF: _win32_longpath+85↑j
.text:0040A980                 movzx   eax, byte ptr [esi+1]
.text:0040A984                 test    al, al
.text:0040A986                 jnz     short loc_40A9B5
.text:0040A988
.text:0040A988 loc_40A988:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:0040A988                                         ; _win32_longpath+1EB↓j ...
.text:0040A988                 test    bl, bl
.text:0040A98A                 jz      short loc_40A9AC
.text:0040A98C                 cmp     bl, 2Fh ; '/'
.text:0040A98F                 jz      short loc_40A9AC
.text:0040A991                 cmp     bl, 5Ch ; '\'
.text:0040A994                 jz      short loc_40A9AC
.text:0040A996
.text:0040A996 loc_40A996:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:0040A996                 mov     [ebp+268h+Destination], bl
.text:0040A999                 inc     esi
.text:0040A99A                 inc     ebp
.text:0040A99B                 movzx   ebx, byte ptr [esi]
.text:0040A99E                 test    bl, bl
.text:0040A9A0                 jz      short loc_40A9AC
.text:0040A9A2                 cmp     bl, 2Fh ; '/'
.text:0040A9A5                 jz      short loc_40A9AC
.text:0040A9A7                 cmp     bl, 5Ch ; '\'
.text:0040A9AA                 jnz     short loc_40A996
.text:0040A9AC
.text:0040A9AC loc_40A9AC:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:0040A9AC                                         ; _win32_longpath+1BF↑j ...
.text:0040A9AC                 mov     [ebp+268h+Destination], 0
.text:0040A9B0                 jmp     loc_40A91C
.text:0040A9B5 ; ---------------------------------------------------------------------------
.text:0040A9B5
.text:0040A9B5 loc_40A9B5:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:0040A9B5                 cmp     al, 2Fh ; '/'
.text:0040A9B7                 jz      short loc_40A988
.text:0040A9B9                 cmp     al, 5Ch ; '\'
.text:0040A9BB                 jz      short loc_40A988
.text:0040A9BD                 cmp     al, 2Eh ; '.'
.text:0040A9BF                 jnz     loc_40A85B
.text:0040A9C5                 movzx   eax, byte ptr [esi+2]
.text:0040A9C9                 test    al, al
.text:0040A9CB                 jz      short loc_40A988
.text:0040A9CD                 cmp     al, 2Fh ; '/'
.text:0040A9CF                 jz      short loc_40A988
.text:0040A9D1                 cmp     al, 5Ch ; '\'
.text:0040A9D3                 jnz     loc_40A85B
.text:0040A9D9                 jmp     short loc_40A988
.text:0040A9D9 ; ---------------------------------------------------------------------------
.text:0040A9DB                 align 10h
.text:0040A9E0
.text:0040A9E0 loc_40A9E0:                             ; CODE XREF: _win32_longpath+73↑j
.text:0040A9E0                                         ; _win32_longpath+7C↑j
.text:0040A9E0                 mov     [ebp+268h+Destination], bl
.text:0040A9E3                 inc     esi
.text:0040A9E4                 inc     ebp
.text:0040A9E5                 mov     [ebp+268h+Destination], 0
.text:0040A9E9                 movzx   ebx, byte ptr [esi]
.text:0040A9EC                 test    bl, bl
.text:0040A9EE                 jz      loc_40A852
.text:0040A9F4                 cmp     bl, 2Fh ; '/'
.text:0040A9F7                 jz      short loc_40AA10
.text:0040A9F9                 cmp     bl, 5Ch ; '\'
.text:0040A9FC                 jnz     loc_40A852
.text:0040AA02                 lea     esi, [esi+0]
.text:0040AA09                 lea     edi, [edi+0]
.text:0040AA10
.text:0040AA10 loc_40AA10:                             ; CODE XREF: _win32_longpath+227↑j
.text:0040AA10                                         ; _win32_longpath+24F↓j ...
.text:0040AA10                 inc     esi
.text:0040AA11                 movzx   ebx, byte ptr [esi]
.text:0040AA14                 test    bl, bl
.text:0040AA16                 jz      loc_40A852
.text:0040AA1C                 cmp     bl, 2Fh ; '/'
.text:0040AA1F                 jz      short loc_40AA10
.text:0040AA21                 cmp     bl, 5Ch ; '\'
.text:0040AA24                 jz      short loc_40AA10
.text:0040AA26                 jmp     loc_40A852
.text:0040AA2B ; ---------------------------------------------------------------------------
.text:0040AA2B
.text:0040AA2B loc_40AA2B:                             ; CODE XREF: _win32_longpath+4B↑j
.text:0040AA2B                                         ; _win32_longpath+53↑j
.text:0040AA2B                 mov     edi, [esp+278h+lpFileName]
.text:0040AA32                 movzx   edx, byte ptr [edi+1]
.text:0040AA36                 cmp     dl, 2Fh ; '/'
.text:0040AA39                 jz      short loc_40AA44
.text:0040AA3B                 cmp     dl, 5Ch ; '\'
.text:0040AA3E                 jnz     loc_40A829
.text:0040AA44
.text:0040AA44 loc_40AA44:                             ; CODE XREF: _win32_longpath+269↑j
.text:0040AA44                 mov     esi, [esp+278h+lpFileName]
.text:0040AA4B                 mov     [ebp+268h+Destination], al
.text:0040AA4E                 mov     ecx, [esp+278h+lpFileName]
.text:0040AA55                 inc     ebp
.text:0040AA56                 add     esi, 2
.text:0040AA59                 movzx   ebx, byte ptr [ecx+1]
.text:0040AA5D                 mov     [ebp+268h+Destination], bl
.text:0040AA60                 inc     ebp
.text:0040AA61                 movzx   eax, byte ptr [ecx+2]
.text:0040AA65                 test    al, al
.text:0040AA67                 jz      loc_40AB43
.text:0040AA6D                 cmp     al, 2Fh ; '/'
.text:0040AA6F                 jz      loc_40AB28
.text:0040AA75                 cmp     al, 5Ch ; '\'
.text:0040AA77                 mov     bl, al
.text:0040AA79                 jz      loc_40AB28
.text:0040AA7F
.text:0040AA7F loc_40AA7F:                             ; CODE XREF: _win32_longpath+36E↓j
.text:0040AA7F                                         ; _win32_longpath+376↓j
.text:0040AA7F                 test    bl, bl
.text:0040AA81                 jz      loc_40A829
.text:0040AA87                 cmp     bl, 2Fh ; '/'
.text:0040AA8A                 jz      short loc_40AAAB
.text:0040AA8C                 cmp     bl, 5Ch ; '\'
.text:0040AA8F                 jz      short loc_40AAAB
.text:0040AA91
.text:0040AA91 loc_40AA91:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:0040AA91                 mov     [ebp+268h+Destination], bl
.text:0040AA94                 inc     esi
.text:0040AA95                 inc     ebp
.text:0040AA96                 movzx   ebx, byte ptr [esi]
.text:0040AA99                 test    bl, bl
.text:0040AA9B                 jz      loc_40A829
.text:0040AAA1                 cmp     bl, 2Fh ; '/'
.text:0040AAA4                 jz      short loc_40AAAB
.text:0040AAA6                 cmp     bl, 5Ch ; '\'
.text:0040AAA9                 jnz     short loc_40AA91
.text:0040AAAB
.text:0040AAAB loc_40AAAB:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:0040AAAB                                         ; _win32_longpath+2BF↑j ...
.text:0040AAAB                 test    bl, bl
.text:0040AAAD                 jz      loc_40A829
.text:0040AAB3                 mov     [ebp+268h+Destination], bl
.text:0040AAB6                 inc     esi
.text:0040AAB7                 inc     ebp
.text:0040AAB8                 movzx   ebx, byte ptr [esi]
.text:0040AABB                 test    bl, bl
.text:0040AABD                 jz      loc_40A829
.text:0040AAC3                 cmp     bl, 2Fh ; '/'
.text:0040AAC6                 jz      short loc_40AB10
.text:0040AAC8                 cmp     bl, 5Ch ; '\'
.text:0040AACB                 jz      short loc_40AB10
.text:0040AACD
.text:0040AACD loc_40AACD:                             ; CODE XREF: _win32_longpath+356↓j
.text:0040AACD                 test    bl, bl
.text:0040AACF                 jz      loc_40A829
.text:0040AAD5                 cmp     bl, 2Fh ; '/'
.text:0040AAD8                 jz      loc_40A829
.text:0040AADE                 cmp     bl, 5Ch ; '\'
.text:0040AAE1                 jz      loc_40A829
.text:0040AAE7
.text:0040AAE7 loc_40AAE7:                             ; CODE XREF: _win32_longpath+333↓j
.text:0040AAE7                 mov     [ebp+268h+Destination], bl
.text:0040AAEA                 inc     esi
.text:0040AAEB                 inc     ebp
.text:0040AAEC                 movzx   ebx, byte ptr [esi]
.text:0040AAEF                 test    bl, bl
.text:0040AAF1                 jz      loc_40A829
.text:0040AAF7                 cmp     bl, 2Fh ; '/'
.text:0040AAFA                 jz      loc_40A829
.text:0040AB00                 cmp     bl, 5Ch ; '\'
.text:0040AB03                 jnz     short loc_40AAE7
.text:0040AB05                 jmp     loc_40A829
.text:0040AB05 ; ---------------------------------------------------------------------------
.text:0040AB0A                 align 10h
.text:0040AB10
.text:0040AB10 loc_40AB10:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:0040AB10                                         ; _win32_longpath+2FB↑j ...
.text:0040AB10                 inc     esi
.text:0040AB11                 movzx   ebx, byte ptr [esi]
.text:0040AB14                 test    bl, bl
.text:0040AB16                 jz      loc_40A829
.text:0040AB1C                 cmp     bl, 2Fh ; '/'
.text:0040AB1F                 jz      short loc_40AB10
.text:0040AB21                 cmp     bl, 5Ch ; '\'
.text:0040AB24                 jz      short loc_40AB10
.text:0040AB26                 jmp     short loc_40AACD
.text:0040AB28 ; ---------------------------------------------------------------------------
.text:0040AB28
.text:0040AB28 loc_40AB28:                             ; CODE XREF: _win32_longpath+29F↑j
.text:0040AB28                                         ; _win32_longpath+2A9↑j ...
.text:0040AB28                 inc     esi
.text:0040AB29                 movzx   ebx, byte ptr [esi]
.text:0040AB2C                 test    bl, bl
.text:0040AB2E                 jz      loc_40A829
.text:0040AB34                 cmp     bl, 2Fh ; '/'
.text:0040AB37                 jz      short loc_40AB28
.text:0040AB39                 cmp     bl, 5Ch ; '\'
.text:0040AB3C                 jz      short loc_40AB28
.text:0040AB3E                 jmp     loc_40AA7F
.text:0040AB43 ; ---------------------------------------------------------------------------
.text:0040AB43
.text:0040AB43 loc_40AB43:                             ; CODE XREF: _win32_longpath+297↑j
.text:0040AB43                 movzx   ebx, byte ptr [esi]
.text:0040AB46                 jmp     loc_40AA7F
.text:0040AB4B ; ---------------------------------------------------------------------------
.text:0040AB4B
.text:0040AB4B loc_40AB4B:                             ; CODE XREF: _win32_longpath+39↑j
.text:0040AB4B                 movzx   ecx, byte ptr [eax]
.text:0040AB4E                 mov     esi, eax
.text:0040AB50                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:0040AB55                 add     esi, 2
.text:0040AB58                 lea     ebp, [esp+12h]
.text:0040AB5C                 mov     [esp+278h+Destination], cl
.text:0040AB60                 jmp     loc_40A829
.text:0040AB60 _win32_longpath endp
.text:0040AB60
.text:0040AB60 ; ---------------------------------------------------------------------------
.text:0040AB65                 align 10h
.text:0040AB70                 sub     esp, 0Ch
.text:0040AB73                 mov     edx, [esp+10h]
.text:0040AB77                 mov     dword ptr [esp+4], 0
.text:0040AB7F                 mov     [esp], edx
.text:0040AB82                 call    sub_40BD40
.text:0040AB87                 inc     eax
.text:0040AB88                 setnz   dl
.text:0040AB8B                 add     esp, 0Ch
.text:0040AB8E                 movzx   eax, dl
.text:0040AB91                 retn
.text:0040AB91 ; ---------------------------------------------------------------------------
.text:0040AB92                 align 10h
.text:0040ABA0
.text:0040ABA0 ; =============== S U B R O U T I N E =======================================
.text:0040ABA0
.text:0040ABA0
.text:0040ABA0 sub_40ABA0      proc near               ; CODE XREF: sub_408870+B4↑p
.text:0040ABA0                                         ; sub_40BC10+AA↓p
.text:0040ABA0
.text:0040ABA0 arg_0           = dword ptr  4
.text:0040ABA0
.text:0040ABA0                 mov     ecx, [esp+arg_0]
.text:0040ABA4                 mov     edx, ecx
.text:0040ABA6                 movzx   eax, byte ptr [ecx]
.text:0040ABA9                 test    al, al
.text:0040ABAB                 jz      short loc_40ABBC
.text:0040ABAD                 lea     esi, [esi+0]
.text:0040ABB0
.text:0040ABB0 loc_40ABB0:                             ; CODE XREF: sub_40ABA0+1A↓j
.text:0040ABB0                 cmp     al, 5Ch ; '\'
.text:0040ABB2                 jz      short loc_40ABC0
.text:0040ABB4
.text:0040ABB4 loc_40ABB4:                             ; CODE XREF: sub_40ABA0+23↓j
.text:0040ABB4                 inc     edx
.text:0040ABB5                 movzx   eax, byte ptr [edx]
.text:0040ABB8                 test    al, al
.text:0040ABBA                 jnz     short loc_40ABB0
.text:0040ABBC
.text:0040ABBC loc_40ABBC:                             ; CODE XREF: sub_40ABA0+B↑j
.text:0040ABBC                 mov     eax, ecx
.text:0040ABBE                 retn
.text:0040ABBE ; ---------------------------------------------------------------------------
.text:0040ABBF                 align 10h
.text:0040ABC0
.text:0040ABC0 loc_40ABC0:                             ; CODE XREF: sub_40ABA0+12↑j
.text:0040ABC0                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040ABC3                 jmp     short loc_40ABB4
.text:0040ABC3 sub_40ABA0      endp
.text:0040ABC3
.text:0040ABC3 ; ---------------------------------------------------------------------------
.text:0040ABC5                 align 10h
.text:0040ABD0                 push    ebx
.text:0040ABD1                 sub     esp, 8
.text:0040ABD4                 mov     ebx, [esp+14h]
.text:0040ABD8                 mov     edx, [esp+10h]
.text:0040ABDC                 mov     [esp], ebx
.text:0040ABDF                 mov     [esp+4], edx
.text:0040ABE3                 call    strcpy
.text:0040ABE8                 movzx   eax, byte ptr [ebx]
.text:0040ABEB                 mov     edx, ebx
.text:0040ABED                 test    al, al
.text:0040ABEF                 jz      short loc_40AC0C
.text:0040ABF1                 jmp     short loc_40AC00
.text:0040ABF1 ; ---------------------------------------------------------------------------
.text:0040ABF3                 align 10h
.text:0040AC00
.text:0040AC00 loc_40AC00:                             ; CODE XREF: .text:0040ABF1↑j
.text:0040AC00                                         ; .text:0040AC0A↓j
.text:0040AC00                 cmp     al, 5Ch ; '\'
.text:0040AC02                 jz      short loc_40AC13
.text:0040AC04
.text:0040AC04 loc_40AC04:                             ; CODE XREF: .text:0040AC16↓j
.text:0040AC04                 inc     edx
.text:0040AC05                 movzx   eax, byte ptr [edx]
.text:0040AC08                 test    al, al
.text:0040AC0A                 jnz     short loc_40AC00
.text:0040AC0C
.text:0040AC0C loc_40AC0C:                             ; CODE XREF: .text:0040ABEF↑j
.text:0040AC0C                 add     esp, 8
.text:0040AC0F                 xor     eax, eax
.text:0040AC11                 pop     ebx
.text:0040AC12                 retn
.text:0040AC13 ; ---------------------------------------------------------------------------
.text:0040AC13
.text:0040AC13 loc_40AC13:                             ; CODE XREF: .text:0040AC02↑j
.text:0040AC13                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040AC16                 jmp     short loc_40AC04
.text:0040AC16 ; ---------------------------------------------------------------------------
.text:0040AC18                 align 10h
.text:0040AC20
.text:0040AC20 ; =============== S U B R O U T I N E =======================================
.text:0040AC20
.text:0040AC20
.text:0040AC20 sub_40AC20      proc near               ; CODE XREF: sub_4094A0+16↑p
.text:0040AC20                                         ; sub_4099A0+1F↑p ...
.text:0040AC20
.text:0040AC20 arg_0           = dword ptr  4
.text:0040AC20
.text:0040AC20                 mov     ecx, [esp+arg_0]
.text:0040AC24                 mov     edx, ecx
.text:0040AC26                 movzx   eax, byte ptr [ecx]
.text:0040AC29                 test    al, al
.text:0040AC2B                 jz      short loc_40AC3C
.text:0040AC2D                 lea     esi, [esi+0]
.text:0040AC30
.text:0040AC30 loc_40AC30:                             ; CODE XREF: sub_40AC20+1A↓j
.text:0040AC30                 cmp     al, 2Fh ; '/'
.text:0040AC32                 jz      short loc_40AC40
.text:0040AC34
.text:0040AC34 loc_40AC34:                             ; CODE XREF: sub_40AC20+23↓j
.text:0040AC34                 inc     edx
.text:0040AC35                 movzx   eax, byte ptr [edx]
.text:0040AC38                 test    al, al
.text:0040AC3A                 jnz     short loc_40AC30
.text:0040AC3C
.text:0040AC3C loc_40AC3C:                             ; CODE XREF: sub_40AC20+B↑j
.text:0040AC3C                 mov     eax, ecx
.text:0040AC3E                 retn
.text:0040AC3E ; ---------------------------------------------------------------------------
.text:0040AC3F                 align 10h
.text:0040AC40
.text:0040AC40 loc_40AC40:                             ; CODE XREF: sub_40AC20+12↑j
.text:0040AC40                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040AC43                 jmp     short loc_40AC34
.text:0040AC43 sub_40AC20      endp
.text:0040AC43
.text:0040AC43 ; ---------------------------------------------------------------------------
.text:0040AC45                 align 10h
.text:0040AC50                 push    ebx
.text:0040AC51                 sub     esp, 8
.text:0040AC54                 mov     ebx, [esp+14h]
.text:0040AC58                 mov     edx, [esp+10h]
.text:0040AC5C                 mov     [esp], ebx
.text:0040AC5F                 mov     [esp+4], edx
.text:0040AC63                 call    strcpy
.text:0040AC68                 movzx   eax, byte ptr [ebx]
.text:0040AC6B                 mov     edx, ebx
.text:0040AC6D                 test    al, al
.text:0040AC6F                 jz      short loc_40AC8C
.text:0040AC71                 jmp     short loc_40AC80
.text:0040AC71 ; ---------------------------------------------------------------------------
.text:0040AC73                 align 10h
.text:0040AC80
.text:0040AC80 loc_40AC80:                             ; CODE XREF: .text:0040AC71↑j
.text:0040AC80                                         ; .text:0040AC8A↓j
.text:0040AC80                 cmp     al, 2Fh ; '/'
.text:0040AC82                 jz      short loc_40AC93
.text:0040AC84
.text:0040AC84 loc_40AC84:                             ; CODE XREF: .text:0040AC96↓j
.text:0040AC84                 inc     edx
.text:0040AC85                 movzx   eax, byte ptr [edx]
.text:0040AC88                 test    al, al
.text:0040AC8A                 jnz     short loc_40AC80
.text:0040AC8C
.text:0040AC8C loc_40AC8C:                             ; CODE XREF: .text:0040AC6F↑j
.text:0040AC8C                 add     esp, 8
.text:0040AC8F                 xor     eax, eax
.text:0040AC91                 pop     ebx
.text:0040AC92                 retn
.text:0040AC93 ; ---------------------------------------------------------------------------
.text:0040AC93
.text:0040AC93 loc_40AC93:                             ; CODE XREF: .text:0040AC82↑j
.text:0040AC93                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040AC96                 jmp     short loc_40AC84
.text:0040AC96 ; ---------------------------------------------------------------------------
.text:0040AC98                 align 10h
.text:0040ACA0                 push    ebx
.text:0040ACA1                 sub     esp, 8
.text:0040ACA4                 mov     ebx, [esp+14h]
.text:0040ACA8                 mov     edx, [esp+10h]
.text:0040ACAC                 mov     [esp+4], ebx
.text:0040ACB0                 mov     [esp], edx
.text:0040ACB3                 call    sub_40BBC0
.text:0040ACB8                 movzx   eax, byte ptr [ebx]
.text:0040ACBB                 mov     edx, ebx
.text:0040ACBD                 test    al, al
.text:0040ACBF                 jz      short loc_40ACDC
.text:0040ACC1                 jmp     short loc_40ACD0
.text:0040ACC1 ; ---------------------------------------------------------------------------
.text:0040ACC3                 align 10h
.text:0040ACD0
.text:0040ACD0 loc_40ACD0:                             ; CODE XREF: .text:0040ACC1↑j
.text:0040ACD0                                         ; .text:0040ACDA↓j
.text:0040ACD0                 cmp     al, 2Fh ; '/'
.text:0040ACD2                 jz      short loc_40ACE3
.text:0040ACD4
.text:0040ACD4 loc_40ACD4:                             ; CODE XREF: .text:0040ACE6↓j
.text:0040ACD4                 inc     edx
.text:0040ACD5                 movzx   eax, byte ptr [edx]
.text:0040ACD8                 test    al, al
.text:0040ACDA                 jnz     short loc_40ACD0
.text:0040ACDC
.text:0040ACDC loc_40ACDC:                             ; CODE XREF: .text:0040ACBF↑j
.text:0040ACDC                 add     esp, 8
.text:0040ACDF                 xor     eax, eax
.text:0040ACE1                 pop     ebx
.text:0040ACE2                 retn
.text:0040ACE3 ; ---------------------------------------------------------------------------
.text:0040ACE3
.text:0040ACE3 loc_40ACE3:                             ; CODE XREF: .text:0040ACD2↑j
.text:0040ACE3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040ACE6                 jmp     short loc_40ACD4
.text:0040ACE6 ; ---------------------------------------------------------------------------
.text:0040ACE8                 align 10h
.text:0040ACF0                 push    ebx
.text:0040ACF1                 sub     esp, 8
.text:0040ACF4                 mov     ebx, [esp+14h]
.text:0040ACF8                 mov     edx, [esp+10h]
.text:0040ACFC                 mov     [esp], ebx
.text:0040ACFF                 mov     [esp+4], edx
.text:0040AD03                 call    sub_40BBC0
.text:0040AD08                 movzx   eax, byte ptr [ebx]
.text:0040AD0B                 mov     edx, ebx
.text:0040AD0D                 test    al, al
.text:0040AD0F                 jz      short loc_40AD2C
.text:0040AD11                 jmp     short loc_40AD20
.text:0040AD11 ; ---------------------------------------------------------------------------
.text:0040AD13                 align 10h
.text:0040AD20
.text:0040AD20 loc_40AD20:                             ; CODE XREF: .text:0040AD11↑j
.text:0040AD20                                         ; .text:0040AD2A↓j
.text:0040AD20                 cmp     al, 5Ch ; '\'
.text:0040AD22                 jz      short loc_40AD31
.text:0040AD24
.text:0040AD24 loc_40AD24:                             ; CODE XREF: .text:0040AD34↓j
.text:0040AD24                 inc     edx
.text:0040AD25                 movzx   eax, byte ptr [edx]
.text:0040AD28                 test    al, al
.text:0040AD2A                 jnz     short loc_40AD20
.text:0040AD2C
.text:0040AD2C loc_40AD2C:                             ; CODE XREF: .text:0040AD0F↑j
.text:0040AD2C                 add     esp, 8
.text:0040AD2F                 pop     ebx
.text:0040AD30                 retn
.text:0040AD31 ; ---------------------------------------------------------------------------
.text:0040AD31
.text:0040AD31 loc_40AD31:                             ; CODE XREF: .text:0040AD22↑j
.text:0040AD31                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040AD34                 jmp     short loc_40AD24
.text:0040AD34 ; ---------------------------------------------------------------------------
.text:0040AD36                 align 10h
.text:0040AD40
.text:0040AD40 ; =============== S U B R O U T I N E =======================================
.text:0040AD40
.text:0040AD40
.text:0040AD40 ; int __cdecl sub_40AD40(LPSTR)
.text:0040AD40 sub_40AD40      proc near               ; CODE XREF: .text:0040ADCE↓p
.text:0040AD40                                         ; .text:0040AE0E↓p ...
.text:0040AD40
.text:0040AD40 hModule         = dword ptr -1Ch
.text:0040AD40 lpFilename      = dword ptr -18h
.text:0040AD40 nSize           = dword ptr -14h
.text:0040AD40 arg_0           = dword ptr  4
.text:0040AD40
.text:0040AD40                 push    esi
.text:0040AD41                 push    ebx
.text:0040AD42                 sub     esp, 14h
.text:0040AD45                 mov     esi, [esp+1Ch+arg_0]
.text:0040AD49                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:0040AD51                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:0040AD58                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:0040AD5C                 call    GetModuleFileNameA
.text:0040AD61                 sub     esp, 0Ch
.text:0040AD64                 test    eax, eax
.text:0040AD66                 jz      short loc_40ADA8
.text:0040AD68                 cmp     eax, 104h
.text:0040AD6D                 jg      short loc_40AD99
.text:0040AD6F
.text:0040AD6F loc_40AD6F:                             ; CODE XREF: sub_40AD40+66↓j
.text:0040AD6F                                         ; sub_40AD40+78↓j
.text:0040AD6F                 movzx   eax, byte ptr [esi]
.text:0040AD72                 mov     edx, esi
.text:0040AD74                 test    al, al
.text:0040AD76                 jz      short loc_40AD8C
.text:0040AD78                 nop
.text:0040AD79                 lea     esi, [esi+0]
.text:0040AD80
.text:0040AD80 loc_40AD80:                             ; CODE XREF: sub_40AD40+4A↓j
.text:0040AD80                 cmp     al, 5Ch ; '\'
.text:0040AD82                 jz      short loc_40AD94
.text:0040AD84
.text:0040AD84 loc_40AD84:                             ; CODE XREF: sub_40AD40+57↓j
.text:0040AD84                 inc     edx
.text:0040AD85                 movzx   eax, byte ptr [edx]
.text:0040AD88                 test    al, al
.text:0040AD8A                 jnz     short loc_40AD80
.text:0040AD8C
.text:0040AD8C loc_40AD8C:                             ; CODE XREF: sub_40AD40+36↑j
.text:0040AD8C                 add     esp, 14h
.text:0040AD8F                 mov     eax, esi
.text:0040AD91                 pop     ebx
.text:0040AD92                 pop     esi
.text:0040AD93                 retn
.text:0040AD94 ; ---------------------------------------------------------------------------
.text:0040AD94
.text:0040AD94 loc_40AD94:                             ; CODE XREF: sub_40AD40+42↑j
.text:0040AD94                 mov     byte ptr [edx], 2Fh ; '/'
.text:0040AD97                 jmp     short loc_40AD84
.text:0040AD99 ; ---------------------------------------------------------------------------
.text:0040AD99
.text:0040AD99 loc_40AD99:                             ; CODE XREF: sub_40AD40+2D↑j
.text:0040AD99                 call    _errno
.text:0040AD9E                 mov     dword ptr [eax], 26h ; '&'
.text:0040ADA4                 xor     esi, esi
.text:0040ADA6                 jmp     short loc_40AD6F
.text:0040ADA8 ; ---------------------------------------------------------------------------
.text:0040ADA8
.text:0040ADA8 loc_40ADA8:                             ; CODE XREF: sub_40AD40+26↑j
.text:0040ADA8                 call    sub_40B2D0
.text:0040ADAD                 mov     ebx, eax
.text:0040ADAF                 xor     esi, esi
.text:0040ADB1                 call    _errno
.text:0040ADB6                 mov     [eax], ebx
.text:0040ADB8                 jmp     short loc_40AD6F
.text:0040ADB8 sub_40AD40      endp
.text:0040ADB8
.text:0040ADB8 ; ---------------------------------------------------------------------------
.text:0040ADBA                 align 10h
.text:0040ADC0                 sub     esp, 0Ch
.text:0040ADC3                 mov     [esp+8], ebx
.text:0040ADC7                 mov     ebx, [esp+10h]
.text:0040ADCB                 mov     [esp], ebx
.text:0040ADCE                 call    sub_40AD40
.text:0040ADD3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040ADDB                 mov     [esp], ebx
.text:0040ADDE                 call    strrchr
.text:0040ADE3                 test    eax, eax
.text:0040ADE5                 jz      short loc_40ADEA
.text:0040ADE7                 lea     ebx, [eax+1]
.text:0040ADEA
.text:0040ADEA loc_40ADEA:                             ; CODE XREF: .text:0040ADE5↑j
.text:0040ADEA                 mov     eax, ebx
.text:0040ADEC                 mov     ebx, [esp+8]
.text:0040ADF0                 add     esp, 0Ch
.text:0040ADF3                 retn
.text:0040ADF3 ; ---------------------------------------------------------------------------
.text:0040ADF4                 align 10h
.text:0040AE00                 sub     esp, 0Ch
.text:0040AE03                 mov     [esp+8], ebx
.text:0040AE07                 mov     ebx, [esp+10h]
.text:0040AE0B                 mov     [esp], ebx
.text:0040AE0E                 call    sub_40AD40
.text:0040AE13                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040AE1B                 mov     [esp], ebx
.text:0040AE1E                 call    strrchr
.text:0040AE23                 test    eax, eax
.text:0040AE25                 jz      short loc_40AE2A
.text:0040AE27                 mov     byte ptr [eax], 0
.text:0040AE2A
.text:0040AE2A loc_40AE2A:                             ; CODE XREF: .text:0040AE25↑j
.text:0040AE2A                 mov     eax, ebx
.text:0040AE2C                 mov     ebx, [esp+8]
.text:0040AE30                 add     esp, 0Ch
.text:0040AE33                 retn
.text:0040AE33 ; ---------------------------------------------------------------------------
.text:0040AE34                 align 10h
.text:0040AE40                 sub     esp, 0Ch
.text:0040AE43                 mov     [esp+8], ebx
.text:0040AE47                 mov     ebx, [esp+10h]
.text:0040AE4B                 mov     [esp], ebx
.text:0040AE4E                 call    sub_40AD40
.text:0040AE53                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040AE5B                 mov     [esp], ebx
.text:0040AE5E                 call    strrchr
.text:0040AE63                 test    eax, eax
.text:0040AE65                 jz      short loc_40AE6A
.text:0040AE67                 mov     byte ptr [eax], 0
.text:0040AE6A
.text:0040AE6A loc_40AE6A:                             ; CODE XREF: .text:0040AE65↑j
.text:0040AE6A                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040AE72                 mov     [esp], ebx
.text:0040AE75                 call    strrchr
.text:0040AE7A                 test    eax, eax
.text:0040AE7C                 jz      short loc_40AE81
.text:0040AE7E                 mov     byte ptr [eax], 0
.text:0040AE81
.text:0040AE81 loc_40AE81:                             ; CODE XREF: .text:0040AE7C↑j
.text:0040AE81                 mov     eax, ebx
.text:0040AE83                 mov     ebx, [esp+8]
.text:0040AE87                 add     esp, 0Ch
.text:0040AE8A                 retn
.text:0040AE8A ; ---------------------------------------------------------------------------
.text:0040AE8B                 align 10h
.text:0040AE90                 sub     esp, 1Ch
.text:0040AE93                 mov     edx, [esp+20h]
.text:0040AE97                 mov     [esp+10h], ebx
.text:0040AE9B                 xor     ebx, ebx
.text:0040AE9D                 mov     [esp+14h], esi
.text:0040AEA1                 mov     [esp+18h], edi
.text:0040AEA5                 mov     [esp], edx
.text:0040AEA8                 call    sub_40BBF0
.text:0040AEAD                 mov     edx, [esp+24h]
.text:0040AEB1                 mov     edi, eax
.text:0040AEB3                 mov     [esp], edx
.text:0040AEB6                 call    sub_40BBF0
.text:0040AEBB                 mov     [esp+4], eax
.text:0040AEBF                 mov     esi, eax
.text:0040AEC1                 mov     [esp], edi
.text:0040AEC4                 call    _stricmp_0
.text:0040AEC9                 mov     [esp], edi
.text:0040AECC                 test    eax, eax
.text:0040AECE                 setz    bl
.text:0040AED1                 call    free
.text:0040AED6                 mov     [esp], esi
.text:0040AED9                 call    free
.text:0040AEDE                 mov     eax, ebx
.text:0040AEE0                 mov     esi, [esp+14h]
.text:0040AEE4                 mov     ebx, [esp+10h]
.text:0040AEE8                 mov     edi, [esp+18h]
.text:0040AEEC                 add     esp, 1Ch
.text:0040AEEF                 retn
.text:0040AEF0 ; ---------------------------------------------------------------------------
.text:0040AEF0                 xor     eax, eax
.text:0040AEF2                 retn
.text:0040AEF2 ; ---------------------------------------------------------------------------
.text:0040AEF3 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:0040AF27↓o
.text:0040AF00 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:0040AF36↓o
.text:0040AF10 ; ---------------------------------------------------------------------------
.text:0040AF10                 sub     esp, 1Ch
.text:0040AF13                 mov     [esp+10h], ebx
.text:0040AF17                 mov     ebx, [esp+20h]
.text:0040AF1B                 mov     [esp+18h], edi
.text:0040AF1F                 mov     edi, [esp+24h]
.text:0040AF23                 mov     [esp+14h], esi
.text:0040AF27                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:0040AF2E                 call    GetModuleHandleA
.text:0040AF33                 sub     esp, 4
.text:0040AF36                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:0040AF3E                 mov     [esp], eax
.text:0040AF41                 call    GetProcAddress
.text:0040AF46                 sub     esp, 8
.text:0040AF49                 test    eax, eax
.text:0040AF4B                 jz      short loc_40AF63
.text:0040AF4D                 mov     dword ptr [esp+8], 104h
.text:0040AF55                 mov     [esp+4], ebx
.text:0040AF59                 mov     [esp], edi
.text:0040AF5C                 call    eax
.text:0040AF5E                 sub     esp, 0Ch
.text:0040AF61                 mov     esi, eax
.text:0040AF63
.text:0040AF63 loc_40AF63:                             ; CODE XREF: .text:0040AF4B↑j
.text:0040AF63                 test    esi, esi
.text:0040AF65                 jz      short loc_40AF80
.text:0040AF67
.text:0040AF67 loc_40AF67:                             ; CODE XREF: .text:0040AF9B↓j
.text:0040AF67                 mov     eax, ebx
.text:0040AF69                 mov     esi, [esp+14h]
.text:0040AF6D                 mov     ebx, [esp+10h]
.text:0040AF71                 mov     edi, [esp+18h]
.text:0040AF75                 add     esp, 1Ch
.text:0040AF78                 retn
.text:0040AF78 ; ---------------------------------------------------------------------------
.text:0040AF79                 align 10h
.text:0040AF80
.text:0040AF80 loc_40AF80:                             ; CODE XREF: .text:0040AF65↑j
.text:0040AF80                 call    sub_40CAD0
.text:0040AF85                 mov     [esp], ebx
.text:0040AF88                 mov     [esp+4], edi
.text:0040AF8C                 call    strcpy
.text:0040AF91                 mov     [esp], ebx
.text:0040AF94                 call    _win32_longpath
.text:0040AF99                 mov     ebx, eax
.text:0040AF9B                 jmp     short loc_40AF67
.text:0040AF9B ; ---------------------------------------------------------------------------
.text:0040AF9D                 align 10h
.text:0040AFA0                 sub     esp, 1Ch
.text:0040AFA3                 mov     [esp+18h], edi
.text:0040AFA7                 mov     edi, [esp+20h]
.text:0040AFAB                 mov     [esp+10h], ebx
.text:0040AFAF                 mov     [esp+14h], esi
.text:0040AFB3                 mov     dword ptr [esp+8], 0
.text:0040AFBB                 mov     dword ptr [esp+4], 0
.text:0040AFC3                 mov     [esp], edi
.text:0040AFC6                 call    GetShortPathNameA
.text:0040AFCB                 sub     esp, 0Ch
.text:0040AFCE                 mov     ebx, eax
.text:0040AFD0                 test    eax, eax
.text:0040AFD2                 jz      short loc_40B020
.text:0040AFD4                 lea     edx, [eax+1]
.text:0040AFD7                 mov     [esp], edx
.text:0040AFDA                 call    malloc
.text:0040AFDF                 test    eax, eax
.text:0040AFE1                 mov     esi, eax
.text:0040AFE3                 jz      short loc_40B020
.text:0040AFE5                 mov     [esp+8], ebx
.text:0040AFE9                 mov     [esp+4], eax
.text:0040AFED                 mov     [esp], edi
.text:0040AFF0                 call    GetShortPathNameA
.text:0040AFF5                 sub     esp, 0Ch
.text:0040AFF8                 mov     edx, esi
.text:0040AFFA                 test    eax, eax
.text:0040AFFC                 jz      short loc_40B012
.text:0040AFFE                 mov     esi, esi
.text:0040B000
.text:0040B000 loc_40B000:                             ; CODE XREF: .text:0040B030↓j
.text:0040B000                 mov     ebx, [esp+10h]
.text:0040B004                 mov     eax, edx
.text:0040B006                 mov     esi, [esp+14h]
.text:0040B00A                 mov     edi, [esp+18h]
.text:0040B00E                 add     esp, 1Ch
.text:0040B011                 retn
.text:0040B012 ; ---------------------------------------------------------------------------
.text:0040B012
.text:0040B012 loc_40B012:                             ; CODE XREF: .text:0040AFFC↑j
.text:0040B012                 mov     [esp], esi
.text:0040B015                 call    free
.text:0040B01A                 lea     esi, [esi+0]
.text:0040B020
.text:0040B020 loc_40B020:                             ; CODE XREF: .text:0040AFD2↑j
.text:0040B020                                         ; .text:0040AFE3↑j
.text:0040B020                 call    sub_40B2D0
.text:0040B025                 mov     esi, eax
.text:0040B027                 call    _errno
.text:0040B02C                 mov     [eax], esi
.text:0040B02E                 mov     edx, edi
.text:0040B030                 jmp     short loc_40B000
.text:0040B030 ; ---------------------------------------------------------------------------
.text:0040B032                 align 10h
.text:0040B040
.text:0040B040 ; =============== S U B R O U T I N E =======================================
.text:0040B040
.text:0040B040 ; Attributes: info_from_lumina
.text:0040B040
.text:0040B040 ___get_errno    proc near               ; CODE XREF: sub_40B2D0+B↓p
.text:0040B040
.text:0040B040 arg_0           = dword ptr  4
.text:0040B040
.text:0040B040                 mov     eax, [esp+arg_0]
.text:0040B044                 cmp     eax, 53h ; 'S'
.text:0040B047                 jg      loc_40B140
.text:0040B04D                 cmp     eax, 52h ; 'R'
.text:0040B050                 jge     short loc_40B0A2
.text:0040B052                 cmp     eax, 0Fh
.text:0040B055                 jz      short loc_40B070
.text:0040B057                 cmp     eax, 0Fh
.text:0040B05A                 jg      short loc_40B0D0
.text:0040B05C                 cmp     eax, 9
.text:0040B05F                 jg      short loc_40B0B0
.text:0040B061                 cmp     eax, 7
.text:0040B064                 jge     short loc_40B0A9
.text:0040B066                 cmp     eax, 3
.text:0040B069                 jg      short loc_40B08A
.text:0040B06B                 cmp     eax, 2
.text:0040B06E                 jl      short loc_40B083
.text:0040B070
.text:0040B070 loc_40B070:                             ; CODE XREF: ___get_errno+15↑j
.text:0040B070                                         ; ___get_errno+9D↓j ...
.text:0040B070                 mov     edx, 2
.text:0040B075                 lea     esi, [esi+0]
.text:0040B079                 lea     edi, [edi+0]
.text:0040B080
.text:0040B080 loc_40B080:                             ; CODE XREF: ___get_errno+48↓j
.text:0040B080                                         ; ___get_errno+59↓j ...
.text:0040B080                 mov     eax, edx
.text:0040B082                 retn
.text:0040B083 ; ---------------------------------------------------------------------------
.text:0040B083
.text:0040B083 loc_40B083:                             ; CODE XREF: ___get_errno+2E↑j
.text:0040B083                                         ; ___get_errno+78↓j ...
.text:0040B083                 mov     edx, 16h
.text:0040B088                 jmp     short loc_40B080
.text:0040B08A ; ---------------------------------------------------------------------------
.text:0040B08A
.text:0040B08A loc_40B08A:                             ; CODE XREF: ___get_errno+29↑j
.text:0040B08A                 cmp     eax, 5
.text:0040B08D                 jz      short loc_40B0A2
.text:0040B08F                 cmp     eax, 5
.text:0040B092                 jg      short loc_40B09B
.text:0040B094                 mov     edx, 18h
.text:0040B099                 jmp     short loc_40B080
.text:0040B09B ; ---------------------------------------------------------------------------
.text:0040B09B
.text:0040B09B loc_40B09B:                             ; CODE XREF: ___get_errno+52↑j
.text:0040B09B                                         ; ___get_errno+180↓j
.text:0040B09B                 mov     edx, 9
.text:0040B0A0                 jmp     short loc_40B080
.text:0040B0A2 ; ---------------------------------------------------------------------------
.text:0040B0A2
.text:0040B0A2 loc_40B0A2:                             ; CODE XREF: ___get_errno+10↑j
.text:0040B0A2                                         ; ___get_errno+4D↑j ...
.text:0040B0A2                 mov     edx, 0Dh
.text:0040B0A7                 jmp     short loc_40B080
.text:0040B0A9 ; ---------------------------------------------------------------------------
.text:0040B0A9
.text:0040B0A9 loc_40B0A9:                             ; CODE XREF: ___get_errno+24↑j
.text:0040B0A9                                         ; ___get_errno+73↓j ...
.text:0040B0A9                 mov     edx, 0Ch
.text:0040B0AE                 jmp     short loc_40B080
.text:0040B0B0 ; ---------------------------------------------------------------------------
.text:0040B0B0
.text:0040B0B0 loc_40B0B0:                             ; CODE XREF: ___get_errno+1F↑j
.text:0040B0B0                 cmp     eax, 0Dh
.text:0040B0B3                 jg      short loc_40B0A9
.text:0040B0B5                 cmp     eax, 0Ch
.text:0040B0B8                 jge     short loc_40B083
.text:0040B0BA                 cmp     eax, 0Ah
.text:0040B0BD                 mov     edx, 7
.text:0040B0C2                 jz      short loc_40B080
.text:0040B0C4                 cmp     eax, 0Bh
.text:0040B0C7                 jnz     short loc_40B083
.text:0040B0C9
.text:0040B0C9 loc_40B0C9:                             ; CODE XREF: ___get_errno+21A↓j
.text:0040B0C9                 mov     edx, 8
.text:0040B0CE                 jmp     short loc_40B080
.text:0040B0D0 ; ---------------------------------------------------------------------------
.text:0040B0D0
.text:0040B0D0 loc_40B0D0:                             ; CODE XREF: ___get_errno+1A↑j
.text:0040B0D0                 cmp     eax, 22h ; '"'
.text:0040B0D3                 jg      short loc_40B104
.text:0040B0D5                 cmp     eax, 16h
.text:0040B0D8                 jge     short loc_40B0A2
.text:0040B0DA                 cmp     eax, 12h
.text:0040B0DD                 jz      short loc_40B070
.text:0040B0DF                 cmp     eax, 12h
.text:0040B0E2                 jg      short loc_40B0F5
.text:0040B0E4                 cmp     eax, 10h
.text:0040B0E7                 jz      short loc_40B0A2
.text:0040B0E9                 mov     edx, 12h
.text:0040B0EE                 cmp     eax, 11h
.text:0040B0F1
.text:0040B0F1 loc_40B0F1:                             ; CODE XREF: ___get_errno+172↓j
.text:0040B0F1                                         ; ___get_errno+24C↓j ...
.text:0040B0F1                 jnz     short loc_40B083
.text:0040B0F3                 jmp     short loc_40B080
.text:0040B0F5 ; ---------------------------------------------------------------------------
.text:0040B0F5
.text:0040B0F5 loc_40B0F5:                             ; CODE XREF: ___get_errno+A2↑j
.text:0040B0F5                 cmp     eax, 14h
.text:0040B0F8                 jle     short loc_40B0A2
.text:0040B0FA
.text:0040B0FA loc_40B0FA:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0040B0FA                 mov     edx, 10h
.text:0040B0FF                 jmp     loc_40B080
.text:0040B104 ; ---------------------------------------------------------------------------
.text:0040B104
.text:0040B104 loc_40B104:                             ; CODE XREF: ___get_errno+93↑j
.text:0040B104                 cmp     eax, 41h ; 'A'
.text:0040B107                 jz      short loc_40B0A2
.text:0040B109                 cmp     eax, 41h ; 'A'
.text:0040B10C                 jg      short loc_40B121
.text:0040B10E                 cmp     eax, 24h ; '$'
.text:0040B111                 jz      short loc_40B0A2
.text:0040B113                 cmp     eax, 35h ; '5'
.text:0040B116                 jnz     loc_40B083
.text:0040B11C                 jmp     loc_40B070
.text:0040B121 ; ---------------------------------------------------------------------------
.text:0040B121
.text:0040B121 loc_40B121:                             ; CODE XREF: ___get_errno+CC↑j
.text:0040B121                 cmp     eax, 43h ; 'C'
.text:0040B124                 jz      loc_40B070
.text:0040B12A                 cmp     eax, 50h ; 'P'
.text:0040B12D                 jnz     loc_40B083
.text:0040B133
.text:0040B133 loc_40B133:                             ; CODE XREF: ___get_errno+1FB↓j
.text:0040B133                 mov     edx, 11h
.text:0040B138                 jmp     loc_40B080
.text:0040B138 ; ---------------------------------------------------------------------------
.text:0040B13D                 align 10h
.text:0040B140
.text:0040B140 loc_40B140:                             ; CODE XREF: ___get_errno+7↑j
.text:0040B140                 cmp     eax, 0A1h ; '¡'
.text:0040B145                 jz      loc_40B070
.text:0040B14B                 cmp     eax, 0A1h ; '¡'
.text:0040B150                 jg      loc_40B200
.text:0040B156                 cmp     eax, 81h
.text:0040B15B                 jg      short loc_40B1C5
.text:0040B15D                 cmp     eax, 80h ; '€'
.text:0040B162                 mov     edx, 0Ah
.text:0040B167                 jge     loc_40B080
.text:0040B16D                 cmp     eax, 6Ch ; 'l'
.text:0040B170                 jz      loc_40B0A2
.text:0040B176                 cmp     eax, 6Ch ; 'l'
.text:0040B179                 jg      short loc_40B197
.text:0040B17B                 cmp     eax, 57h ; 'W'
.text:0040B17E                 jz      loc_40B083
.text:0040B184                 cmp     eax, 59h ; 'Y'
.text:0040B187                 jnz     loc_40B083
.text:0040B18D
.text:0040B18D loc_40B18D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0040B18D                                         ; ___get_errno+23C↓j
.text:0040B18D                 mov     edx, 0Bh
.text:0040B192                 jmp     loc_40B080
.text:0040B197 ; ---------------------------------------------------------------------------
.text:0040B197
.text:0040B197 loc_40B197:                             ; CODE XREF: ___get_errno+139↑j
.text:0040B197                 cmp     eax, 70h ; 'p'
.text:0040B19A                 mov     edx, 1Ch
.text:0040B19F                 jz      loc_40B080
.text:0040B1A5                 cmp     eax, 70h ; 'p'
.text:0040B1A8                 jg      short loc_40B1B7
.text:0040B1AA                 mov     edx, 20h ; ' '
.text:0040B1AF                 cmp     eax, 6Dh ; 'm'
.text:0040B1B2                 jmp     loc_40B0F1
.text:0040B1B7 ; ---------------------------------------------------------------------------
.text:0040B1B7
.text:0040B1B7 loc_40B1B7:                             ; CODE XREF: ___get_errno+168↑j
.text:0040B1B7                 cmp     eax, 72h ; 'r'
.text:0040B1BA
.text:0040B1BA loc_40B1BA:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040B1BA                 jnz     loc_40B083
.text:0040B1C0                 jmp     loc_40B09B
.text:0040B1C5 ; ---------------------------------------------------------------------------
.text:0040B1C5
.text:0040B1C5 loc_40B1C5:                             ; CODE XREF: ___get_errno+11B↑j
.text:0040B1C5                 cmp     eax, 84h ; '„'
.text:0040B1CA                 jz      loc_40B0A2
.text:0040B1D0                 cmp     eax, 84h ; '„'
.text:0040B1D5                 jg      short loc_40B1DE
.text:0040B1D7                 cmp     eax, 82h ; '‚'
.text:0040B1DC                 jmp     short loc_40B1BA
.text:0040B1DE ; ---------------------------------------------------------------------------
.text:0040B1DE
.text:0040B1DE loc_40B1DE:                             ; CODE XREF: ___get_errno+195↑j
.text:0040B1DE                 cmp     eax, 91h ; '‘'
.text:0040B1E3                 mov     edx, 29h ; ')'
.text:0040B1E8                 jz      loc_40B080
.text:0040B1EE                 cmp     eax, 9Eh ; 'ž'
.text:0040B1F3
.text:0040B1F3 loc_40B1F3:                             ; CODE XREF: ___get_errno+1F4↓j
.text:0040B1F3                 jnz     loc_40B083
.text:0040B1F9                 jmp     loc_40B0A2
.text:0040B1F9 ; ---------------------------------------------------------------------------
.text:0040B1FE                 align 10h
.text:0040B200
.text:0040B200 loc_40B200:                             ; CODE XREF: ___get_errno+110↑j
.text:0040B200                 cmp     eax, 0CEh ; 'Î'
.text:0040B205                 jz      loc_40B070
.text:0040B20B                 cmp     eax, 0CEh ; 'Î'
.text:0040B210                 jg      short loc_40B260
.text:0040B212                 cmp     eax, 0AAh ; 'ª'
.text:0040B217                 jz      loc_40B0FA
.text:0040B21D                 cmp     eax, 0AAh ; 'ª'
.text:0040B222                 jg      short loc_40B236
.text:0040B224                 cmp     eax, 0A4h ; '¤'
.text:0040B229                 jz      loc_40B18D
.text:0040B22F                 cmp     eax, 0A7h ; '§'
.text:0040B234                 jmp     short loc_40B1F3
.text:0040B236 ; ---------------------------------------------------------------------------
.text:0040B236
.text:0040B236 loc_40B236:                             ; CODE XREF: ___get_errno+1E2↑j
.text:0040B236                 cmp     eax, 0B7h ; '·'
.text:0040B23B                 jz      loc_40B133
.text:0040B241                 cmp     eax, 0B7h ; '·'
.text:0040B246                 jl      loc_40B083
.text:0040B24C                 sub     eax, 0BCh ; '¼'
.text:0040B251                 cmp     eax, 0Eh
.text:0040B254                 ja      loc_40B083
.text:0040B25A                 jmp     loc_40B0C9
.text:0040B25A ; ---------------------------------------------------------------------------
.text:0040B25F                 align 10h
.text:0040B260
.text:0040B260 loc_40B260:                             ; CODE XREF: ___get_errno+1D0↑j
.text:0040B260                 cmp     eax, 46Bh
.text:0040B265                 mov     edx, 24h ; '$'
.text:0040B26A                 jz      loc_40B080
.text:0040B270                 cmp     eax, 46Bh
.text:0040B275                 jg      short loc_40B291
.text:0040B277                 cmp     eax, 0D7h ; '×'
.text:0040B27C                 jz      loc_40B18D
.text:0040B282                 mov     edx, 5
.text:0040B287                 cmp     eax, 45Dh
.text:0040B28C                 jmp     loc_40B0F1
.text:0040B291 ; ---------------------------------------------------------------------------
.text:0040B291
.text:0040B291 loc_40B291:                             ; CODE XREF: ___get_errno+235↑j
.text:0040B291                 cmp     eax, 4D5h
.text:0040B296                 mov     edx, 4
.text:0040B29B                 jz      loc_40B080
.text:0040B2A1                 cmp     eax, 4D5h
.text:0040B2A6                 jg      short loc_40B2B7
.text:0040B2A8                 mov     edx, 13h
.text:0040B2AD                 cmp     eax, 4B0h
.text:0040B2B2                 jmp     loc_40B0F1
.text:0040B2B7 ; ---------------------------------------------------------------------------
.text:0040B2B7
.text:0040B2B7 loc_40B2B7:                             ; CODE XREF: ___get_errno+266↑j
.text:0040B2B7                 cmp     eax, 718h
.text:0040B2BC                 jnz     loc_40B083
.text:0040B2C2                 jmp     loc_40B0A9
.text:0040B2C2 ___get_errno    endp
.text:0040B2C2
.text:0040B2C2 ; ---------------------------------------------------------------------------
.text:0040B2C7                 align 10h
.text:0040B2D0
.text:0040B2D0 ; =============== S U B R O U T I N E =======================================
.text:0040B2D0
.text:0040B2D0
.text:0040B2D0 sub_40B2D0      proc near               ; CODE XREF: sub_4086F0:loc_40884F↑p
.text:0040B2D0                                         ; sub_4086A0:loc_40A79D↑p ...
.text:0040B2D0
.text:0040B2D0 var_C           = dword ptr -0Ch
.text:0040B2D0
.text:0040B2D0                 sub     esp, 0Ch
.text:0040B2D3                 call    GetLastError
.text:0040B2D8                 mov     [esp+0Ch+var_C], eax
.text:0040B2DB                 call    ___get_errno
.text:0040B2E0                 add     esp, 0Ch
.text:0040B2E3                 retn
.text:0040B2E3 sub_40B2D0      endp
.text:0040B2E3
.text:0040B2E3 ; ---------------------------------------------------------------------------
.text:0040B2E4                 align 10h
.text:0040B2F0 ; const CHAR LibFileName[]
.text:0040B2F0 LibFileName     db 'KERNEL32',0         ; DATA XREF: sub_40B330+11↓o
.text:0040B2F9 ; const CHAR aGetdiskfreespa[]
.text:0040B2F9 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:0040B2F9                                         ; DATA XREF: sub_40B330+22↓o
.text:0040B30D ; const CHAR FileName[]
.text:0040B30D FileName        db '\\.\vwin32',0       ; DATA XREF: sub_40B330+16C↓o
.text:0040B30D                                         ; sub_40B9E0+6C↓o
.text:0040B318 ; const char String2[]
.text:0040B318 String2         db 'NTFS',0             ; DATA XREF: sub_40B330+282↓o
.text:0040B31D ; const char aFat32[]
.text:0040B31D aFat32          db 'FAT32',0            ; DATA XREF: sub_40B330:loc_40B780↓o
.text:0040B323 ; const char aFat[]
.text:0040B323 aFat            db 'FAT',0              ; DATA XREF: sub_40B330:loc_40B7AD↓o
.text:0040B327 ; const char aCdfs[]
.text:0040B327 aCdfs           db 'CDFS',0             ; DATA XREF: sub_40B330:loc_40B7DA↓o
.text:0040B32C                 align 10h
.text:0040B330
.text:0040B330 ; =============== S U B R O U T I N E =======================================
.text:0040B330
.text:0040B330
.text:0040B330 sub_40B330      proc near               ; CODE XREF: sub_40B970+61↓p
.text:0040B330
.text:0040B330 lpLibFileName   = dword ptr -8CCh
.text:0040B330 lpProcName      = dword ptr -8C8h
.text:0040B330 nVolumeNameSize = dword ptr -8C4h
.text:0040B330 lpVolumeSerialNumber= dword ptr -8C0h
.text:0040B330 lpMaximumComponentLength= dword ptr -8BCh
.text:0040B330 lpFileSystemFlags= dword ptr -8B8h
.text:0040B330 lpFileSystemNameBuffer= dword ptr -8B4h
.text:0040B330 nFileSystemNameSize= dword ptr -8B0h
.text:0040B330 var_8AC         = dword ptr -8ACh
.text:0040B330 BytesReturned   = dword ptr -8A8h
.text:0040B330 TotalNumberOfClusters= dword ptr -8A4h
.text:0040B330 NumberOfFreeClusters= dword ptr -8A0h
.text:0040B330 BytesPerSector  = dword ptr -89Ch
.text:0040B330 SectorsPerCluster= dword ptr -898h
.text:0040B330 var_894         = dword ptr -894h
.text:0040B330 var_890         = dword ptr -890h
.text:0040B330 var_88C         = byte ptr -88Ch
.text:0040B330 var_888         = word ptr -888h
.text:0040B330 var_884         = dword ptr -884h
.text:0040B330 var_880         = dword ptr -880h
.text:0040B330 VolumeSerialNumber= dword ptr -878h
.text:0040B330 MaximumComponentLength= dword ptr -874h
.text:0040B330 FileSystemFlags = dword ptr -870h
.text:0040B330 InBuffer        = dword ptr -86Ch
.text:0040B330 var_868         = dword ptr -868h
.text:0040B330 var_864         = dword ptr -864h
.text:0040B330 var_860         = dword ptr -860h
.text:0040B330 var_85C         = byte ptr -85Ch
.text:0040B330 var_854         = dword ptr -854h
.text:0040B330 var_84C         = dword ptr -84Ch
.text:0040B330 var_848         = dword ptr -848h
.text:0040B330 var_844         = dword ptr -844h
.text:0040B330 var_840         = dword ptr -840h
.text:0040B330 var_83C         = dword ptr -83Ch
.text:0040B330 FileSystemNameBuffer= byte ptr -81Ch
.text:0040B330 VolumeNameBuffer= byte ptr -41Ch
.text:0040B330 arg_0           = dword ptr  4
.text:0040B330 arg_4           = dword ptr  8
.text:0040B330
.text:0040B330                 push    ebp
.text:0040B331                 push    edi
.text:0040B332                 push    esi
.text:0040B333                 push    ebx
.text:0040B334                 sub     esp, 8BCh
.text:0040B33A                 mov     ebp, [esp+8CCh+arg_0]
.text:0040B341                 mov     [esp+8CCh+lpLibFileName], offset LibFileName ; "KERNEL32"
.text:0040B348                 call    LoadLibraryA
.text:0040B34D                 sub     esp, 4
.text:0040B350                 mov     edi, eax
.text:0040B352                 mov     [esp+8CCh+lpProcName], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:0040B35A                 mov     [esp+8CCh+lpLibFileName], eax ; hModule
.text:0040B35D                 call    GetProcAddress
.text:0040B362                 sub     esp, 8
.text:0040B365                 mov     esi, eax
.text:0040B367                 test    ebp, ebp
.text:0040B369                 mov     [esp+8CCh+var_8AC], 0
.text:0040B371                 jz      loc_40B8B1
.text:0040B377                 mov     [esp+8CCh+lpLibFileName], ebp
.text:0040B37A                 call    sub_40AC20
.text:0040B37F                 mov     [esp+8CCh+lpLibFileName], eax ; Str
.text:0040B382                 mov     ebp, eax
.text:0040B384                 call    strlen
.text:0040B389                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0040B38E                 mov     ebx, eax
.text:0040B390                 jz      short loc_40B3AC
.text:0040B392                 mov     [esp+8CCh+lpLibFileName], ebp ; Block
.text:0040B395                 lea     edx, [eax+1]
.text:0040B398                 mov     [esp+8CCh+lpProcName], edx ; Size
.text:0040B39C                 call    realloc
.text:0040B3A1                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040B3A5                 mov     ebp, eax
.text:0040B3A7                 mov     byte ptr [ebx+eax+1], 0
.text:0040B3AC
.text:0040B3AC loc_40B3AC:                             ; CODE XREF: sub_40B330+60↑j
.text:0040B3AC                 mov     [esp+8CCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:0040B3B4                 lea     edx, [esp+8CCh+FileSystemNameBuffer]
.text:0040B3BB                 lea     ebx, [esp+8CCh+FileSystemFlags]
.text:0040B3BF                 mov     [esp+8CCh+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:0040B3C3                 lea     ecx, [esp+8CCh+MaximumComponentLength]
.text:0040B3C7                 lea     edx, [esp+8CCh+VolumeSerialNumber]
.text:0040B3CB                 mov     [esp+8CCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:0040B3CF                 lea     eax, [esp+8CCh+VolumeNameBuffer]
.text:0040B3D6                 mov     [esp+8CCh+lpMaximumComponentLength], ecx ; lpMaximumComponentLength
.text:0040B3DA                 mov     [esp+8CCh+lpVolumeSerialNumber], edx ; lpVolumeSerialNumber
.text:0040B3DE                 mov     [esp+8CCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:0040B3E6                 mov     [esp+8CCh+lpProcName], eax ; lpVolumeNameBuffer
.text:0040B3EA                 mov     [esp+8CCh+lpLibFileName], ebp ; lpRootPathName
.text:0040B3ED                 call    GetVolumeInformationA
.text:0040B3F2                 sub     esp, 20h
.text:0040B3F5                 test    eax, eax
.text:0040B3F7                 jz      loc_40B88E
.text:0040B3FD                 test    esi, esi
.text:0040B3FF                 jz      short loc_40B425
.text:0040B401                 mov     [esp+8CCh+lpLibFileName], ebp
.text:0040B404                 lea     edx, [esp+8CCh+var_884]
.text:0040B408                 lea     ebx, [esp+8CCh+var_88C]
.text:0040B40C                 mov     [esp+8CCh+lpVolumeSerialNumber], edx
.text:0040B410                 lea     ecx, [esp+8CCh+var_894]
.text:0040B414                 mov     [esp+8CCh+nVolumeNameSize], ebx
.text:0040B418                 mov     [esp+8CCh+lpProcName], ecx
.text:0040B41C                 call    esi
.text:0040B41E                 sub     esp, 10h
.text:0040B421                 mov     [esp+8CCh+var_8AC], eax
.text:0040B425
.text:0040B425 loc_40B425:                             ; CODE XREF: sub_40B330+CF↑j
.text:0040B425                 test    edi, edi
.text:0040B427                 jz      short loc_40B434
.text:0040B429                 mov     [esp+8CCh+lpLibFileName], edi ; hLibModule
.text:0040B42C                 call    FreeLibrary
.text:0040B431                 sub     esp, 4
.text:0040B434
.text:0040B434 loc_40B434:                             ; CODE XREF: sub_40B330+F7↑j
.text:0040B434                 call    sub_40CAD0
.text:0040B439                 test    eax, eax
.text:0040B43B                 lea     esi, [esp+8CCh+TotalNumberOfClusters]
.text:0040B43F                 jz      loc_40B870
.text:0040B445                 call    sub_40CAD0
.text:0040B44A                 test    eax, eax
.text:0040B44C                 jz      short loc_40B45C
.text:0040B44E                 call    sub_40CA20
.text:0040B453                 cmp     eax, 0Bh
.text:0040B456                 jle     loc_40B844
.text:0040B45C
.text:0040B45C loc_40B45C:                             ; CODE XREF: sub_40B330+11C↑j
.text:0040B45C                 cld
.text:0040B45D                 xor     eax, eax
.text:0040B45F                 lea     ebx, [esp+8CCh+InBuffer]
.text:0040B463                 mov     ecx, 7
.text:0040B468                 mov     edi, ebx
.text:0040B46A                 rep stosd
.text:0040B46C                 mov     [esp+8CCh+lpFileSystemNameBuffer], 0 ; hTemplateFile
.text:0040B474                 mov     [esp+8CCh+lpFileSystemFlags], 4000000h ; dwFlagsAndAttributes
.text:0040B47C                 mov     [esp+8CCh+lpMaximumComponentLength], 0 ; dwCreationDisposition
.text:0040B484                 mov     [esp+8CCh+lpVolumeSerialNumber], 0 ; lpSecurityAttributes
.text:0040B48C                 mov     [esp+8CCh+nVolumeNameSize], 0 ; dwShareMode
.text:0040B494                 mov     [esp+8CCh+lpProcName], 0 ; dwDesiredAccess
.text:0040B49C                 mov     [esp+8CCh+lpLibFileName], offset FileName ; "\\\\.\\vwin32"
.text:0040B4A3                 call    CreateFileA
.text:0040B4A8                 sub     esp, 1Ch
.text:0040B4AB                 mov     edi, eax
.text:0040B4AD                 cmp     eax, 0FFFFFFFFh
.text:0040B4B0                 jz      short loc_40B530
.text:0040B4B2                 mov     [esp+8CCh+lpMaximumComponentLength], ebx ; lpOutBuffer
.text:0040B4B6                 lea     edx, [esp+8CCh+var_84C]
.text:0040B4BD                 lea     ecx, [esp+8CCh+BytesReturned]
.text:0040B4C1                 mov     dword ptr [esp+8CCh+var_85C], edx
.text:0040B4C5                 mov     [esp+8CCh+lpFileSystemNameBuffer], ecx ; lpBytesReturned
.text:0040B4C9                 mov     [esp+8CCh+nVolumeNameSize], ebx ; lpInBuffer
.text:0040B4CD                 mov     [esp+8CCh+var_860], 7303h
.text:0040B4D5                 mov     [esp+8CCh+var_864], 2Ch ; ','
.text:0040B4DD                 mov     [esp+8CCh+var_868], ebp
.text:0040B4E1                 mov     [esp+8CCh+var_854], 1
.text:0040B4E9                 mov     [esp+8CCh+nFileSystemNameSize], 0 ; lpOverlapped
.text:0040B4F1                 mov     [esp+8CCh+lpFileSystemFlags], 1Ch ; nOutBufferSize
.text:0040B4F9                 mov     [esp+8CCh+lpVolumeSerialNumber], 1Ch ; nInBufferSize
.text:0040B501                 mov     [esp+8CCh+lpProcName], 6 ; dwIoControlCode
.text:0040B509                 mov     [esp+8CCh+lpLibFileName], eax ; hDevice
.text:0040B50C                 call    DeviceIoControl
.text:0040B511                 sub     esp, 20h
.text:0040B514                 mov     ebx, eax
.text:0040B516                 mov     [esp+8CCh+lpLibFileName], edi ; hObject
.text:0040B519                 call    CloseHandle
.text:0040B51E                 sub     esp, 4
.text:0040B521                 test    ebx, ebx
.text:0040B523                 jz      short loc_40B530
.text:0040B525                 test    byte ptr [esp+8CCh+var_854], 1
.text:0040B52A                 jz      loc_40B810
.text:0040B530
.text:0040B530 loc_40B530:                             ; CODE XREF: sub_40B330+180↑j
.text:0040B530                                         ; sub_40B330+1F3↑j
.text:0040B530                 call    sub_40B2D0
.text:0040B535                 mov     edi, eax
.text:0040B537                 call    _errno
.text:0040B53C                 mov     [eax], edi
.text:0040B53E                 xor     eax, eax
.text:0040B540
.text:0040B540 loc_40B540:                             ; CODE XREF: sub_40B330+50F↓j
.text:0040B540                                         ; sub_40B330+53B↓j
.text:0040B540                 test    eax, eax
.text:0040B542                 jnz     short loc_40B564
.text:0040B544                 mov     [esp+8CCh+SectorsPerCluster], 1
.text:0040B54C                 mov     [esp+8CCh+BytesPerSector], 200h
.text:0040B554                 mov     [esp+8CCh+NumberOfFreeClusters], 0
.text:0040B55C                 mov     [esp+8CCh+TotalNumberOfClusters], 0
.text:0040B564
.text:0040B564 loc_40B564:                             ; CODE XREF: sub_40B330+212↑j
.text:0040B564                 mov     edx, [esp+8CCh+BytesPerSector]
.text:0040B568                 mov     edi, [esp+8CCh+SectorsPerCluster]
.text:0040B56C                 mov     ecx, [esp+8CCh+var_8AC]
.text:0040B570                 imul    edi, edx
.text:0040B573                 test    ecx, ecx
.text:0040B575                 jnz     short loc_40B59D
.text:0040B577                 mov     eax, [esp+8CCh+TotalNumberOfClusters]
.text:0040B57B                 mul     edi
.text:0040B57D                 mov     esi, eax
.text:0040B57F                 mov     eax, [esp+8CCh+NumberOfFreeClusters]
.text:0040B583                 mov     dword ptr [esp+8CCh+var_888], edx
.text:0040B587                 mov     dword ptr [esp+8CCh+var_88C], esi
.text:0040B58B                 mul     edi
.text:0040B58D                 mov     [esp+8CCh+var_884], eax
.text:0040B591                 mov     [esp+8CCh+var_880], edx
.text:0040B595                 mov     [esp+8CCh+var_894], eax
.text:0040B599                 mov     [esp+8CCh+var_890], edx
.text:0040B59D
.text:0040B59D loc_40B59D:                             ; CODE XREF: sub_40B330+245↑j
.text:0040B59D                 mov     ebx, [esp+8CCh+FileSystemFlags]
.text:0040B5A1                 lea     edx, [esp+8CCh+FileSystemNameBuffer]
.text:0040B5A8                 mov     ecx, [esp+8CCh+arg_4]
.text:0040B5AF                 mov     [ecx+48h], ebx
.text:0040B5B2                 mov     [esp+8CCh+lpProcName], offset String2 ; "NTFS"
.text:0040B5BA                 mov     [esp+8CCh+lpLibFileName], edx ; String1
.text:0040B5BD                 call    _stricmp
.text:0040B5C2                 test    eax, eax
.text:0040B5C4                 jnz     loc_40B780
.text:0040B5CA                 mov     esi, [esp+8CCh+arg_4]
.text:0040B5D1                 mov     dword ptr [esi], 5346544Eh
.text:0040B5D7
.text:0040B5D7 loc_40B5D7:                             ; CODE XREF: sub_40B330+478↓j
.text:0040B5D7                                         ; sub_40B330+4A5↓j ...
.text:0040B5D7                 mov     ebx, [esp+8CCh+BytesPerSector]
.text:0040B5DB                 mov     esi, [esp+8CCh+arg_4]
.text:0040B5E2                 mov     [esi+4], ebx
.text:0040B5E5                 mov     [esi+8], ebx
.text:0040B5E8                 mov     ebx, [esi+8]
.text:0040B5EB                 mov     [esi+0Ch], edi
.text:0040B5EE                 mov     ecx, dword ptr [esp+8CCh+var_888]
.text:0040B5F2                 xor     esi, esi
.text:0040B5F4                 mov     [esp+8CCh+nVolumeNameSize], ebx
.text:0040B5F8                 mov     edx, dword ptr [esp+8CCh+var_88C]
.text:0040B5FC                 mov     [esp+8CCh+lpVolumeSerialNumber], esi
.text:0040B600                 mov     [esp+8CCh+lpProcName], ecx
.text:0040B604                 mov     [esp+8CCh+lpLibFileName], edx
.text:0040B607                 call    sub_410330
.text:0040B60C                 mov     ecx, [esp+8CCh+arg_4]
.text:0040B613                 mov     [ecx+10h], eax
.text:0040B616                 mov     [ecx+14h], edx
.text:0040B619                 mov     ecx, [esp+8CCh+var_880]
.text:0040B61D                 mov     [esp+8CCh+nVolumeNameSize], ebx
.text:0040B621                 mov     edx, [esp+8CCh+var_884]
.text:0040B625                 mov     [esp+8CCh+lpVolumeSerialNumber], esi
.text:0040B629                 mov     [esp+8CCh+lpProcName], ecx
.text:0040B62D                 mov     [esp+8CCh+lpLibFileName], edx
.text:0040B630                 call    sub_410330
.text:0040B635                 mov     ecx, [esp+8CCh+arg_4]
.text:0040B63C                 mov     [ecx+18h], eax
.text:0040B63F                 mov     [ecx+1Ch], edx
.text:0040B642                 mov     ecx, [esp+8CCh+var_894]
.text:0040B646                 mov     [esp+8CCh+nVolumeNameSize], ebx
.text:0040B64A                 mov     ebx, [esp+8CCh+var_890]
.text:0040B64E                 mov     [esp+8CCh+lpVolumeSerialNumber], esi
.text:0040B652                 mov     [esp+8CCh+lpLibFileName], ecx
.text:0040B655                 mov     [esp+8CCh+lpProcName], ebx
.text:0040B659                 call    sub_410330
.text:0040B65E                 mov     esi, [esp+8CCh+arg_4]
.text:0040B665                 mov     [esi+20h], eax
.text:0040B668                 mov     [esi+24h], edx
.text:0040B66B                 mov     ecx, dword ptr [esp+8CCh+var_888]
.text:0040B66F                 mov     esi, edi
.text:0040B671                 mov     [esp+8CCh+nVolumeNameSize], esi
.text:0040B675                 mov     edx, dword ptr [esp+8CCh+var_88C]
.text:0040B679                 xor     edi, edi
.text:0040B67B                 mov     [esp+8CCh+lpVolumeSerialNumber], edi
.text:0040B67F                 mov     [esp+8CCh+lpProcName], ecx
.text:0040B683                 mov     [esp+8CCh+lpLibFileName], edx
.text:0040B686                 call    sub_410330
.text:0040B68B                 mov     ebx, [esp+8CCh+arg_4]
.text:0040B692                 mov     [ebx+28h], eax
.text:0040B695                 mov     [ebx+2Ch], edx
.text:0040B698                 mov     ecx, [esp+8CCh+var_880]
.text:0040B69C                 mov     [esp+8CCh+nVolumeNameSize], esi
.text:0040B6A0                 mov     edx, [esp+8CCh+var_884]
.text:0040B6A4                 mov     [esp+8CCh+lpVolumeSerialNumber], edi
.text:0040B6A8                 mov     [esp+8CCh+lpProcName], ecx
.text:0040B6AC                 mov     [esp+8CCh+lpLibFileName], edx
.text:0040B6AF                 call    sub_410330
.text:0040B6B4                 mov     ebx, [esp+8CCh+arg_4]
.text:0040B6BB                 mov     [ebx+30h], eax
.text:0040B6BE                 mov     [ebx+34h], edx
.text:0040B6C1                 mov     ecx, [esp+8CCh+var_890]
.text:0040B6C5                 mov     [esp+8CCh+nVolumeNameSize], esi
.text:0040B6C9                 mov     edx, [esp+8CCh+var_894]
.text:0040B6CD                 mov     [esp+8CCh+lpVolumeSerialNumber], edi
.text:0040B6D1                 mov     [esp+8CCh+lpProcName], ecx
.text:0040B6D5                 mov     [esp+8CCh+lpLibFileName], edx
.text:0040B6D8                 call    sub_410330
.text:0040B6DD                 mov     edx, [esp+8CCh+arg_4]
.text:0040B6E4                 lea     ecx, [esp+8CCh+FileSystemNameBuffer]
.text:0040B6EB                 mov     [edx+38h], eax
.text:0040B6EE                 mov     esi, [esp+8CCh+MaximumComponentLength]
.text:0040B6F2                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:0040B6F9                 mov     [edx+110h], esi
.text:0040B6FF                 mov     esi, edx
.text:0040B701                 add     esi, 4Ch ; 'L'
.text:0040B704                 movzx   ebx, word ptr [esp+8CCh+VolumeSerialNumber+2]
.text:0040B709                 movzx   edi, word ptr [esp+8CCh+VolumeSerialNumber]
.text:0040B70E                 mov     [edx+3Ch], ebx
.text:0040B711                 lea     ebx, [esp+8CCh+VolumeNameBuffer]
.text:0040B718                 mov     [edx+40h], edi
.text:0040B71B                 mov     [esp+8CCh+lpProcName], ecx ; Source
.text:0040B71F                 mov     [esp+8CCh+nVolumeNameSize], 10h ; Count
.text:0040B727                 mov     [esp+8CCh+lpLibFileName], esi ; Destination
.text:0040B72A                 call    strncpy
.text:0040B72F                 mov     [esp+8CCh+nVolumeNameSize], 5Ah ; 'Z' ; Count
.text:0040B737                 mov     edi, [esp+8CCh+arg_4]
.text:0040B73E                 mov     [esp+8CCh+lpProcName], ebx ; Source
.text:0040B742                 add     edi, 5Ch ; '\'
.text:0040B745                 mov     [esp+8CCh+lpLibFileName], edi ; Destination
.text:0040B748                 call    strncpy
.text:0040B74D                 mov     [esp+8CCh+lpProcName], ebp ; Source
.text:0040B751                 mov     ebp, [esp+8CCh+arg_4]
.text:0040B758                 mov     [esp+8CCh+nVolumeNameSize], 5Ah ; 'Z' ; Count
.text:0040B760                 add     ebp, 0B6h ; '¶'
.text:0040B766                 mov     [esp+8CCh+lpLibFileName], ebp ; Destination
.text:0040B769                 call    strncpy
.text:0040B76E                 xor     eax, eax
.text:0040B770
.text:0040B770 loc_40B770:                             ; CODE XREF: sub_40B330+57C↓j
.text:0040B770                 add     esp, 8BCh
.text:0040B776                 pop     ebx
.text:0040B777                 pop     esi
.text:0040B778                 pop     edi
.text:0040B779                 pop     ebp
.text:0040B77A                 retn
.text:0040B77A ; ---------------------------------------------------------------------------
.text:0040B77B                 align 10h
.text:0040B780
.text:0040B780 loc_40B780:                             ; CODE XREF: sub_40B330+294↑j
.text:0040B780                 mov     [esp+8CCh+lpProcName], offset aFat32 ; "FAT32"
.text:0040B788                 lea     eax, [esp+8CCh+FileSystemNameBuffer]
.text:0040B78F                 mov     [esp+8CCh+lpLibFileName], eax ; String1
.text:0040B792                 call    _stricmp
.text:0040B797                 test    eax, eax
.text:0040B799                 jnz     short loc_40B7AD
.text:0040B79B                 mov     edx, [esp+8CCh+arg_4]
.text:0040B7A2                 mov     dword ptr [edx], 4008h
.text:0040B7A8                 jmp     loc_40B5D7
.text:0040B7AD ; ---------------------------------------------------------------------------
.text:0040B7AD
.text:0040B7AD loc_40B7AD:                             ; CODE XREF: sub_40B330+469↑j
.text:0040B7AD                 mov     [esp+8CCh+lpProcName], offset aFat ; "FAT"
.text:0040B7B5                 lea     ecx, [esp+8CCh+FileSystemNameBuffer]
.text:0040B7BC                 mov     [esp+8CCh+lpLibFileName], ecx ; String1
.text:0040B7BF                 call    _stricmp
.text:0040B7C4                 test    eax, eax
.text:0040B7C6                 jnz     short loc_40B7DA
.text:0040B7C8                 mov     ebx, [esp+8CCh+arg_4]
.text:0040B7CF                 mov     dword ptr [ebx], 4006h
.text:0040B7D5                 jmp     loc_40B5D7
.text:0040B7DA ; ---------------------------------------------------------------------------
.text:0040B7DA
.text:0040B7DA loc_40B7DA:                             ; CODE XREF: sub_40B330+496↑j
.text:0040B7DA                 mov     [esp+8CCh+lpProcName], offset aCdfs ; "CDFS"
.text:0040B7E2                 lea     eax, [esp+8CCh+FileSystemNameBuffer]
.text:0040B7E9                 mov     [esp+8CCh+lpLibFileName], eax ; String1
.text:0040B7EC                 call    _stricmp
.text:0040B7F1                 test    eax, eax
.text:0040B7F3                 mov     esi, [esp+8CCh+arg_4]
.text:0040B7FA                 setnz   cl
.text:0040B7FD                 movzx   edx, cl
.text:0040B800                 dec     edx
.text:0040B801                 and     edx, 4000h
.text:0040B807                 mov     [esi], edx
.text:0040B809                 jmp     loc_40B5D7
.text:0040B809 ; ---------------------------------------------------------------------------
.text:0040B80E                 align 10h
.text:0040B810
.text:0040B810 loc_40B810:                             ; CODE XREF: sub_40B330+1FA↑j
.text:0040B810                 mov     edi, [esp+8CCh+var_848]
.text:0040B817                 mov     eax, 1
.text:0040B81C                 mov     edx, [esp+8CCh+var_844]
.text:0040B823                 mov     ecx, [esp+8CCh+var_840]
.text:0040B82A                 mov     ebx, [esp+8CCh+var_83C]
.text:0040B831                 mov     [esp+8CCh+SectorsPerCluster], edi
.text:0040B835                 mov     [esp+8CCh+BytesPerSector], edx
.text:0040B839                 mov     [esp+8CCh+NumberOfFreeClusters], ecx
.text:0040B83D                 mov     [esi], ebx
.text:0040B83F                 jmp     loc_40B540
.text:0040B844 ; ---------------------------------------------------------------------------
.text:0040B844
.text:0040B844 loc_40B844:                             ; CODE XREF: sub_40B330+126↑j
.text:0040B844                 mov     [esp+8CCh+lpMaximumComponentLength], esi ; lpTotalNumberOfClusters
.text:0040B848                 lea     eax, [esp+8CCh+NumberOfFreeClusters]
.text:0040B84C                 lea     esi, [esp+8CCh+BytesPerSector]
.text:0040B850                 mov     [esp+8CCh+lpVolumeSerialNumber], eax ; lpNumberOfFreeClusters
.text:0040B854                 lea     edi, [esp+8CCh+SectorsPerCluster]
.text:0040B858                 mov     [esp+8CCh+nVolumeNameSize], esi ; lpBytesPerSector
.text:0040B85C                 mov     [esp+8CCh+lpProcName], edi ; lpSectorsPerCluster
.text:0040B860
.text:0040B860 loc_40B860:                             ; CODE XREF: sub_40B330+55C↓j
.text:0040B860                 mov     [esp+8CCh+lpLibFileName], ebp ; lpRootPathName
.text:0040B863                 call    GetDiskFreeSpaceA
.text:0040B868                 sub     esp, 14h
.text:0040B86B                 jmp     loc_40B540
.text:0040B870 ; ---------------------------------------------------------------------------
.text:0040B870
.text:0040B870 loc_40B870:                             ; CODE XREF: sub_40B330+10F↑j
.text:0040B870                 mov     [esp+8CCh+lpMaximumComponentLength], esi
.text:0040B874                 lea     ebx, [esp+8CCh+NumberOfFreeClusters]
.text:0040B878                 lea     eax, [esp+8CCh+BytesPerSector]
.text:0040B87C                 mov     [esp+8CCh+lpVolumeSerialNumber], ebx
.text:0040B880                 lea     esi, [esp+8CCh+SectorsPerCluster]
.text:0040B884                 mov     [esp+8CCh+nVolumeNameSize], eax
.text:0040B888                 mov     [esp+8CCh+lpProcName], esi
.text:0040B88C                 jmp     short loc_40B860
.text:0040B88E ; ---------------------------------------------------------------------------
.text:0040B88E
.text:0040B88E loc_40B88E:                             ; CODE XREF: sub_40B330+C7↑j
.text:0040B88E                 mov     [esp+8CCh+lpLibFileName], edi ; hLibModule
.text:0040B891                 call    FreeLibrary
.text:0040B896                 sub     esp, 4
.text:0040B899                 call    sub_40B2D0
.text:0040B89E                 mov     esi, eax
.text:0040B8A0                 call    _errno
.text:0040B8A5                 mov     [eax], esi
.text:0040B8A7
.text:0040B8A7 loc_40B8A7:                             ; CODE XREF: sub_40B330+597↓j
.text:0040B8A7                 mov     eax, 0FFFFFFFFh
.text:0040B8AC                 jmp     loc_40B770
.text:0040B8B1 ; ---------------------------------------------------------------------------
.text:0040B8B1
.text:0040B8B1 loc_40B8B1:                             ; CODE XREF: sub_40B330+41↑j
.text:0040B8B1                 mov     [esp+8CCh+lpLibFileName], edi ; hLibModule
.text:0040B8B4                 call    FreeLibrary
.text:0040B8B9                 sub     esp, 4
.text:0040B8BC                 call    _errno
.text:0040B8C1                 mov     dword ptr [eax], 2
.text:0040B8C7                 jmp     short loc_40B8A7
.text:0040B8C7 sub_40B330      endp
.text:0040B8C7
.text:0040B8C7 ; ---------------------------------------------------------------------------
.text:0040B8C9                 align 10h
.text:0040B8D0
.text:0040B8D0 ; =============== S U B R O U T I N E =======================================
.text:0040B8D0
.text:0040B8D0
.text:0040B8D0 ; int __cdecl sub_40B8D0(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:0040B8D0 sub_40B8D0      proc near               ; CODE XREF: sub_4094A0+2C7↑p
.text:0040B8D0                                         ; .text:00409ADA↑p
.text:0040B8D0
.text:0040B8D0 lpRootPathName  = dword ptr -2Ch
.text:0040B8D0 lpSectorsPerCluster= dword ptr -28h
.text:0040B8D0 lpBytesPerSector= dword ptr -24h
.text:0040B8D0 lpNumberOfFreeClusters= dword ptr -20h
.text:0040B8D0 lpTotalNumberOfClusters= dword ptr -1Ch
.text:0040B8D0 var_14          = dword ptr -14h
.text:0040B8D0 var_10          = dword ptr -10h
.text:0040B8D0 var_C           = dword ptr -0Ch
.text:0040B8D0 var_8           = dword ptr -8
.text:0040B8D0 var_4           = dword ptr -4
.text:0040B8D0 arg_0           = dword ptr  4
.text:0040B8D0 arg_4           = dword ptr  8
.text:0040B8D0 arg_8           = dword ptr  0Ch
.text:0040B8D0 arg_C           = dword ptr  10h
.text:0040B8D0 arg_10          = dword ptr  14h
.text:0040B8D0
.text:0040B8D0                 sub     esp, 2Ch
.text:0040B8D3                 mov     edx, [esp+2Ch+arg_0]
.text:0040B8D7                 mov     [esp+2Ch+var_10], ebx
.text:0040B8DB                 mov     ebx, [esp+2Ch+arg_10]
.text:0040B8DF                 mov     [esp+2Ch+var_C], esi
.text:0040B8E3                 mov     esi, [esp+2Ch+arg_C]
.text:0040B8E7                 mov     [esp+2Ch+var_8], edi
.text:0040B8EB                 mov     edi, [esp+2Ch+arg_8]
.text:0040B8EF                 mov     [esp+2Ch+var_4], ebp
.text:0040B8F3                 mov     ebp, [esp+2Ch+arg_4]
.text:0040B8F7                 mov     [esp+2Ch+var_14], edx
.text:0040B8FB                 call    sub_40CAD0
.text:0040B900                 test    eax, eax
.text:0040B902                 jz      short loc_40B934
.text:0040B904                 mov     [esp+2Ch+arg_10], ebx ; lpTotalNumberOfClusters
.text:0040B908                 mov     edx, [esp+2Ch+var_14]
.text:0040B90C                 mov     ebx, [esp+2Ch+var_10]
.text:0040B910                 mov     [esp+2Ch+arg_C], esi ; lpNumberOfFreeClusters
.text:0040B914                 mov     esi, [esp+2Ch+var_C]
.text:0040B918                 mov     [esp+2Ch+arg_8], edi ; lpBytesPerSector
.text:0040B91C                 mov     edi, [esp+2Ch+var_8]
.text:0040B920                 mov     [esp+2Ch+arg_4], ebp ; lpSectorsPerCluster
.text:0040B924                 mov     ebp, [esp+2Ch+var_4]
.text:0040B928                 mov     [esp+2Ch+arg_0], edx ; lpRootPathName
.text:0040B92C                 add     esp, 2Ch
.text:0040B92F                 jmp     sub_40B9E0
.text:0040B934 ; ---------------------------------------------------------------------------
.text:0040B934
.text:0040B934 loc_40B934:                             ; CODE XREF: sub_40B8D0+32↑j
.text:0040B934                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:0040B938                 mov     ecx, [esp+2Ch+var_14]
.text:0040B93C                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:0040B940                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:0040B944                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:0040B948                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:0040B94B                 call    GetDiskFreeSpaceA
.text:0040B950                 sub     esp, 14h
.text:0040B953                 mov     ebx, [esp+2Ch+var_10]
.text:0040B957                 mov     esi, [esp+2Ch+var_C]
.text:0040B95B                 mov     edi, [esp+2Ch+var_8]
.text:0040B95F                 mov     ebp, [esp+2Ch+var_4]
.text:0040B963                 add     esp, 2Ch
.text:0040B966                 retn
.text:0040B966 sub_40B8D0      endp
.text:0040B966
.text:0040B966 ; ---------------------------------------------------------------------------
.text:0040B967                 align 10h
.text:0040B970
.text:0040B970 ; =============== S U B R O U T I N E =======================================
.text:0040B970
.text:0040B970
.text:0040B970 ; int __cdecl sub_40B970(LPCSTR, int)
.text:0040B970 sub_40B970      proc near               ; CODE XREF: sub_408A40+1F↑p
.text:0040B970                                         ; .text:0040D04D↓p
.text:0040B970
.text:0040B970 Block           = dword ptr -1Ch
.text:0040B970 var_18          = dword ptr -18h
.text:0040B970 var_8           = dword ptr -8
.text:0040B970 var_4           = dword ptr -4
.text:0040B970 arg_0           = dword ptr  4
.text:0040B970 arg_4           = dword ptr  8
.text:0040B970
.text:0040B970                 sub     esp, 1Ch
.text:0040B973                 mov     [esp+1Ch+var_4], esi
.text:0040B977                 mov     esi, [esp+1Ch+arg_0]
.text:0040B97B                 mov     [esp+1Ch+var_8], ebx
.text:0040B97F                 mov     [esp+1Ch+Block], esi ; LPCSTR
.text:0040B982                 call    sub_40BE20
.text:0040B987                 test    eax, eax
.text:0040B989                 mov     ebx, eax
.text:0040B98B                 jz      short loc_40B9A0
.text:0040B98D                 cmp     byte ptr [eax], 0
.text:0040B990                 jz      short loc_40B9A0
.text:0040B992                 test    esi, esi
.text:0040B994                 jz      short loc_40B9A0
.text:0040B996                 cmp     byte ptr [esi], 0
.text:0040B999                 jnz     short loc_40B9C6
.text:0040B99B                 nop
.text:0040B99C                 lea     esi, [esi+0]
.text:0040B9A0
.text:0040B9A0 loc_40B9A0:                             ; CODE XREF: sub_40B970+1B↑j
.text:0040B9A0                                         ; sub_40B970+20↑j ...
.text:0040B9A0                 call    _errno
.text:0040B9A5                 mov     dword ptr [eax], 2
.text:0040B9AB                 mov     esi, 0FFFFFFFFh
.text:0040B9B0
.text:0040B9B0 loc_40B9B0:                             ; CODE XREF: sub_40B970+68↓j
.text:0040B9B0                 mov     [esp+1Ch+Block], ebx ; Block
.text:0040B9B3                 call    free
.text:0040B9B8                 mov     eax, esi
.text:0040B9BA                 mov     ebx, [esp+1Ch+var_8]
.text:0040B9BE                 mov     esi, [esp+1Ch+var_4]
.text:0040B9C2                 add     esp, 1Ch
.text:0040B9C5                 retn
.text:0040B9C6 ; ---------------------------------------------------------------------------
.text:0040B9C6
.text:0040B9C6 loc_40B9C6:                             ; CODE XREF: sub_40B970+29↑j
.text:0040B9C6                 mov     [esp+1Ch+Block], eax
.text:0040B9C9                 mov     edx, [esp+1Ch+arg_4]
.text:0040B9CD                 mov     [esp+1Ch+var_18], edx
.text:0040B9D1                 call    sub_40B330
.text:0040B9D6                 mov     esi, eax
.text:0040B9D8                 jmp     short loc_40B9B0
.text:0040B9D8 sub_40B970      endp
.text:0040B9D8
.text:0040B9D8 ; ---------------------------------------------------------------------------
.text:0040B9DA                 align 10h
.text:0040B9E0
.text:0040B9E0 ; =============== S U B R O U T I N E =======================================
.text:0040B9E0
.text:0040B9E0
.text:0040B9E0 ; int __cdecl sub_40B9E0(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:0040B9E0 sub_40B9E0      proc near               ; CODE XREF: sub_40B8D0+5F↑j
.text:0040B9E0
.text:0040B9E0 lpFileName      = dword ptr -9Ch
.text:0040B9E0 dwDesiredAccess = dword ptr -98h
.text:0040B9E0 dwShareMode     = dword ptr -94h
.text:0040B9E0 lpSecurityAttributes= dword ptr -90h
.text:0040B9E0 dwCreationDisposition= dword ptr -8Ch
.text:0040B9E0 dwFlagsAndAttributes= dword ptr -88h
.text:0040B9E0 hTemplateFile   = dword ptr -84h
.text:0040B9E0 lpOverlapped    = dword ptr -80h
.text:0040B9E0 BytesReturned   = dword ptr -70h
.text:0040B9E0 InBuffer        = byte ptr -6Ch
.text:0040B9E0 var_68          = dword ptr -68h
.text:0040B9E0 var_64          = dword ptr -64h
.text:0040B9E0 var_60          = dword ptr -60h
.text:0040B9E0 var_5C          = dword ptr -5Ch
.text:0040B9E0 var_54          = dword ptr -54h
.text:0040B9E0 var_4C          = byte ptr -4Ch
.text:0040B9E0 var_48          = dword ptr -48h
.text:0040B9E0 var_44          = dword ptr -44h
.text:0040B9E0 var_40          = dword ptr -40h
.text:0040B9E0 var_3C          = dword ptr -3Ch
.text:0040B9E0 lpRootPathName  = dword ptr  4
.text:0040B9E0 lpSectorsPerCluster= dword ptr  8
.text:0040B9E0 lpBytesPerSector= dword ptr  0Ch
.text:0040B9E0 lpNumberOfFreeClusters= dword ptr  10h
.text:0040B9E0 lpTotalNumberOfClusters= dword ptr  14h
.text:0040B9E0
.text:0040B9E0                 push    ebp
.text:0040B9E1                 push    edi
.text:0040B9E2                 push    esi
.text:0040B9E3                 push    ebx
.text:0040B9E4                 sub     esp, 8Ch
.text:0040B9EA                 mov     ebp, [esp+9Ch+lpRootPathName]
.text:0040B9F1                 call    sub_40CAD0
.text:0040B9F6                 test    eax, eax
.text:0040B9F8                 jz      short loc_40BA08
.text:0040B9FA                 call    sub_40CA20
.text:0040B9FF                 cmp     eax, 0Bh
.text:0040BA02                 jle     loc_40BB30
.text:0040BA08
.text:0040BA08 loc_40BA08:                             ; CODE XREF: sub_40B9E0+18↑j
.text:0040BA08                 cld
.text:0040BA09                 xor     eax, eax
.text:0040BA0B                 lea     ebx, [esp+9Ch+InBuffer]
.text:0040BA0F                 mov     ecx, 7
.text:0040BA14                 mov     edi, ebx
.text:0040BA16                 lea     esi, [esp+9Ch+var_4C]
.text:0040BA1A                 rep stosd
.text:0040BA1C                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040BA24                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:0040BA2C                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:0040BA34                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040BA3C                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:0040BA44                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0040BA4C                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:0040BA53                 call    CreateFileA
.text:0040BA58                 sub     esp, 1Ch
.text:0040BA5B                 mov     edi, eax
.text:0040BA5D                 cmp     eax, 0FFFFFFFFh
.text:0040BA60                 jz      short loc_40BAD5
.text:0040BA62                 mov     [esp+9Ch+var_68], ebp
.text:0040BA66                 lea     ebp, [esp+9Ch+BytesReturned]
.text:0040BA6A                 mov     [esp+9Ch+var_5C], esi
.text:0040BA6E                 mov     [esp+9Ch+var_60], 7303h
.text:0040BA76                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:0040BA7E                 mov     [esp+9Ch+var_54], 1
.text:0040BA86                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:0040BA8E                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:0040BA92                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:0040BA9A                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:0040BA9E                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:0040BAA6                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:0040BAAA                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:0040BAB2                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:0040BAB5                 call    DeviceIoControl
.text:0040BABA                 sub     esp, 20h
.text:0040BABD                 mov     esi, eax
.text:0040BABF                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:0040BAC2                 call    CloseHandle
.text:0040BAC7                 sub     esp, 4
.text:0040BACA                 test    esi, esi
.text:0040BACC                 jz      short loc_40BAD5
.text:0040BACE                 test    byte ptr [esp+9Ch+var_54], 1
.text:0040BAD3                 jz      short loc_40BAF0
.text:0040BAD5
.text:0040BAD5 loc_40BAD5:                             ; CODE XREF: sub_40B9E0+80↑j
.text:0040BAD5                                         ; sub_40B9E0+EC↑j
.text:0040BAD5                 call    sub_40B2D0
.text:0040BADA                 mov     edi, eax
.text:0040BADC                 call    _errno
.text:0040BAE1                 mov     [eax], edi
.text:0040BAE3                 xor     eax, eax
.text:0040BAE5
.text:0040BAE5 loc_40BAE5:                             ; CODE XREF: sub_40B9E0+14A↓j
.text:0040BAE5                                         ; sub_40B9E0+187↓j
.text:0040BAE5                 add     esp, 8Ch
.text:0040BAEB                 pop     ebx
.text:0040BAEC                 pop     esi
.text:0040BAED                 pop     edi
.text:0040BAEE                 pop     ebp
.text:0040BAEF                 retn
.text:0040BAF0 ; ---------------------------------------------------------------------------
.text:0040BAF0
.text:0040BAF0 loc_40BAF0:                             ; CODE XREF: sub_40B9E0+F3↑j
.text:0040BAF0                 mov     edx, [esp+9Ch+var_48]
.text:0040BAF4                 mov     eax, 1
.text:0040BAF9                 mov     ebx, [esp+9Ch+lpSectorsPerCluster]
.text:0040BB00                 mov     ebp, [esp+9Ch+lpBytesPerSector]
.text:0040BB07                 mov     ecx, [esp+9Ch+lpNumberOfFreeClusters]
.text:0040BB0E                 mov     [ebx], edx
.text:0040BB10                 mov     edi, [esp+9Ch+var_44]
.text:0040BB14                 mov     ebx, [esp+9Ch+lpTotalNumberOfClusters]
.text:0040BB1B                 mov     [ebp+0], edi
.text:0040BB1E                 mov     esi, [esp+9Ch+var_40]
.text:0040BB22                 mov     [ecx], esi
.text:0040BB24                 mov     edx, [esp+9Ch+var_3C]
.text:0040BB28                 mov     [ebx], edx
.text:0040BB2A                 jmp     short loc_40BAE5
.text:0040BB2A ; ---------------------------------------------------------------------------
.text:0040BB2C                 align 10h
.text:0040BB30
.text:0040BB30 loc_40BB30:                             ; CODE XREF: sub_40B9E0+22↑j
.text:0040BB30                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:0040BB33                 mov     eax, [esp+9Ch+lpNumberOfFreeClusters]
.text:0040BB3A                 mov     ecx, [esp+9Ch+lpTotalNumberOfClusters]
.text:0040BB41                 mov     edx, [esp+9Ch+lpBytesPerSector]
.text:0040BB48                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:0040BB4C                 mov     eax, [esp+9Ch+lpSectorsPerCluster]
.text:0040BB53                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:0040BB57                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:0040BB5B                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:0040BB5F                 call    GetDiskFreeSpaceA
.text:0040BB64                 sub     esp, 14h
.text:0040BB67                 jmp     loc_40BAE5
.text:0040BB67 sub_40B9E0      endp
.text:0040BB67
.text:0040BB67 ; ---------------------------------------------------------------------------
.text:0040BB6C                 align 10h
.text:0040BB70
.text:0040BB70 ; =============== S U B R O U T I N E =======================================
.text:0040BB70
.text:0040BB70
.text:0040BB70 ; int __cdecl sub_40BB70(int, int, char *, int, int)
.text:0040BB70 sub_40BB70      proc near               ; CODE XREF: sub_408C40+2A↑p
.text:0040BB70
.text:0040BB70 var_1C          = dword ptr -1Ch
.text:0040BB70 var_18          = dword ptr -18h
.text:0040BB70 var_14          = dword ptr -14h
.text:0040BB70 var_10          = dword ptr -10h
.text:0040BB70 var_C           = dword ptr -0Ch
.text:0040BB70 var_4           = dword ptr -4
.text:0040BB70 arg_0           = dword ptr  4
.text:0040BB70 arg_4           = dword ptr  8
.text:0040BB70 arg_8           = dword ptr  0Ch
.text:0040BB70 arg_C           = dword ptr  10h
.text:0040BB70 arg_10          = dword ptr  14h
.text:0040BB70
.text:0040BB70                 sub     esp, 1Ch
.text:0040BB73                 mov     [esp+1Ch+var_4], ebx
.text:0040BB77                 mov     ebx, [esp+1Ch+arg_4]
.text:0040BB7B                 call    sub_40CF90
.text:0040BB80                 mov     [esp+1Ch+var_1C], eax ; char *
.text:0040BB83                 mov     ecx, [esp+1Ch+arg_10]
.text:0040BB87                 mov     [esp+1Ch+var_18], ebx ; int
.text:0040BB8B                 mov     [esp+1Ch+var_C], ecx ; int
.text:0040BB8F                 mov     ecx, [esp+1Ch+arg_C]
.text:0040BB93                 mov     [esp+1Ch+var_10], ecx ; int
.text:0040BB97                 mov     ecx, [esp+1Ch+arg_8]
.text:0040BB9B                 mov     [esp+1Ch+var_14], ecx ; char *
.text:0040BB9F                 call    sub_40CDA0
.text:0040BBA4                 mov     ecx, [esp+1Ch+arg_0]
.text:0040BBA8                 mov     [ebx+8], ecx
.text:0040BBAB                 mov     ebx, [esp+1Ch+var_4]
.text:0040BBAF                 add     esp, 1Ch
.text:0040BBB2                 retn
.text:0040BBB2 sub_40BB70      endp
.text:0040BBB2
.text:0040BBB2 ; ---------------------------------------------------------------------------
.text:0040BBB3                 align 10h
.text:0040BBC0
.text:0040BBC0 ; =============== S U B R O U T I N E =======================================
.text:0040BBC0
.text:0040BBC0
.text:0040BBC0 sub_40BBC0      proc near               ; CODE XREF: .text:0040ACB3↑p
.text:0040BBC0                                         ; .text:0040AD03↑p
.text:0040BBC0
.text:0040BBC0 arg_4           = dword ptr  8
.text:0040BBC0
.text:0040BBC0                 sub     esp, 0Ch
.text:0040BBC3                 mov     edx, [esp+0Ch+arg_4]
.text:0040BBC7                 test    edx, edx
.text:0040BBC9                 jz      short loc_40BBD0
.text:0040BBCB                 add     esp, 0Ch
.text:0040BBCE                 jmp     short sub_40BC10
.text:0040BBD0 ; ---------------------------------------------------------------------------
.text:0040BBD0
.text:0040BBD0 loc_40BBD0:                             ; CODE XREF: sub_40BBC0+9↑j
.text:0040BBD0                 call    _errno
.text:0040BBD5                 mov     dword ptr [eax], 16h
.text:0040BBDB                 xor     eax, eax
.text:0040BBDD                 add     esp, 0Ch
.text:0040BBE0                 retn
.text:0040BBE0 sub_40BBC0      endp
.text:0040BBE0
.text:0040BBE1 ; ---------------------------------------------------------------------------
.text:0040BBE1                 jmp     short sub_40BBF0
.text:0040BBE1 ; ---------------------------------------------------------------------------
.text:0040BBE3                 align 10h
.text:0040BBF0
.text:0040BBF0 ; =============== S U B R O U T I N E =======================================
.text:0040BBF0
.text:0040BBF0
.text:0040BBF0 ; int __cdecl sub_40BBF0(LPCSTR)
.text:0040BBF0 sub_40BBF0      proc near               ; CODE XREF: sub_4086A0+2054↑p
.text:0040BBF0                                         ; .text:0040AEA8↑p ...
.text:0040BBF0
.text:0040BBF0 lpFileName      = dword ptr -0Ch
.text:0040BBF0 Destination     = dword ptr -8
.text:0040BBF0 arg_0           = dword ptr  4
.text:0040BBF0
.text:0040BBF0                 sub     esp, 0Ch
.text:0040BBF3                 mov     edx, [esp+0Ch+arg_0]
.text:0040BBF7                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:0040BBFF                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:0040BC02                 call    sub_40BC10
.text:0040BC07                 add     esp, 0Ch
.text:0040BC0A                 retn
.text:0040BC0A sub_40BBF0      endp
.text:0040BC0A
.text:0040BC0A ; ---------------------------------------------------------------------------
.text:0040BC0B                 align 10h
.text:0040BC10
.text:0040BC10 ; =============== S U B R O U T I N E =======================================
.text:0040BC10
.text:0040BC10
.text:0040BC10 ; int __cdecl sub_40BC10(LPCSTR lpFileName, char *Destination)
.text:0040BC10 sub_40BC10      proc near               ; CODE XREF: sub_40BBC0+E↑j
.text:0040BC10                                         ; sub_40BBF0+12↑p
.text:0040BC10
.text:0040BC10 Size            = dword ptr -2Ch
.text:0040BC10 nBufferLength   = dword ptr -28h
.text:0040BC10 lpBuffer        = dword ptr -24h
.text:0040BC10 lpFilePart      = dword ptr -20h
.text:0040BC10 FilePart        = dword ptr -14h
.text:0040BC10 lpFileName      = dword ptr  4
.text:0040BC10 Destination     = dword ptr  8
.text:0040BC10
.text:0040BC10                 push    ebp
.text:0040BC11                 push    edi
.text:0040BC12                 push    esi
.text:0040BC13                 push    ebx
.text:0040BC14                 sub     esp, 1Ch
.text:0040BC17                 mov     edi, [esp+2Ch+lpFileName]
.text:0040BC1B                 mov     ebp, [esp+2Ch+Destination]
.text:0040BC1F                 test    edi, edi
.text:0040BC21                 jz      loc_40BD29
.text:0040BC27                 cmp     byte ptr [edi], 0
.text:0040BC2A                 jz      loc_40BD1C
.text:0040BC30                 mov     [esp+2Ch+Size], 104h ; Size
.text:0040BC37                 call    malloc
.text:0040BC3C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040BC40                 lea     edx, [esp+2Ch+FilePart]
.text:0040BC44                 mov     ebx, eax
.text:0040BC46                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040BC4A                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:0040BC52                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040BC55                 call    GetFullPathNameA
.text:0040BC5A                 sub     esp, 10h
.text:0040BC5D                 mov     esi, eax
.text:0040BC5F                 test    eax, eax
.text:0040BC61                 jz      loc_40BD0A
.text:0040BC67                 cmp     eax, 104h
.text:0040BC6C                 jle     short loc_40BC7D
.text:0040BC6E                 test    ebp, ebp
.text:0040BC70                 jz      short loc_40BCD9
.text:0040BC72                 call    _errno
.text:0040BC77                 mov     dword ptr [eax], 26h ; '&'
.text:0040BC7D
.text:0040BC7D loc_40BC7D:                             ; CODE XREF: sub_40BC10+5C↑j
.text:0040BC7D                                         ; sub_40BC10+F5↓j
.text:0040BC7D                 call    _errno
.text:0040BC82                 mov     edi, [eax]
.text:0040BC84                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0040BC8C                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0040BC8F                 call    sub_40BD40
.text:0040BC94                 test    eax, eax
.text:0040BC96                 jnz     short loc_40BCB0
.text:0040BC98                 movzx   eax, byte ptr [esi+ebx-1]
.text:0040BC9D                 cmp     al, 2Fh ; '/'
.text:0040BC9F                 jz      short loc_40BCB0
.text:0040BCA1                 cmp     al, 5Ch ; '\'
.text:0040BCA3                 jz      short loc_40BCB0
.text:0040BCA5                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:0040BCA9                 mov     byte ptr [esi+ebx+1], 0
.text:0040BCAE                 mov     esi, esi
.text:0040BCB0
.text:0040BCB0 loc_40BCB0:                             ; CODE XREF: sub_40BC10+86↑j
.text:0040BCB0                                         ; sub_40BC10+8F↑j ...
.text:0040BCB0                 call    _errno
.text:0040BCB5                 mov     [eax], edi
.text:0040BCB7                 mov     [esp+2Ch+Size], ebx
.text:0040BCBA                 call    sub_40ABA0
.text:0040BCBF                 test    ebp, ebp
.text:0040BCC1                 mov     eax, ebx
.text:0040BCC3                 jz      short loc_40BCD1
.text:0040BCC5                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:0040BCC9                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0040BCCC                 call    strcpy
.text:0040BCD1
.text:0040BCD1 loc_40BCD1:                             ; CODE XREF: sub_40BC10+B3↑j
.text:0040BCD1                                         ; sub_40BC10+10A↓j
.text:0040BCD1                 add     esp, 1Ch
.text:0040BCD4                 pop     ebx
.text:0040BCD5                 pop     esi
.text:0040BCD6                 pop     edi
.text:0040BCD7                 pop     ebp
.text:0040BCD8                 retn
.text:0040BCD9 ; ---------------------------------------------------------------------------
.text:0040BCD9
.text:0040BCD9 loc_40BCD9:                             ; CODE XREF: sub_40BC10+60↑j
.text:0040BCD9                 mov     [esp+2Ch+Size], ebx ; Block
.text:0040BCDC                 lea     ecx, [eax+2]
.text:0040BCDF                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:0040BCE3                 call    realloc
.text:0040BCE8                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0040BCEC                 lea     edx, [esp+2Ch+FilePart]
.text:0040BCF0                 mov     ebx, eax
.text:0040BCF2                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040BCF6                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0040BCFA                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0040BCFD                 call    GetFullPathNameA
.text:0040BD02                 sub     esp, 10h
.text:0040BD05                 jmp     loc_40BC7D
.text:0040BD0A ; ---------------------------------------------------------------------------
.text:0040BD0A
.text:0040BD0A loc_40BD0A:                             ; CODE XREF: sub_40BC10+51↑j
.text:0040BD0A                 call    sub_40B2D0
.text:0040BD0F                 mov     esi, eax
.text:0040BD11                 call    _errno
.text:0040BD16                 mov     [eax], esi
.text:0040BD18
.text:0040BD18 loc_40BD18:                             ; CODE XREF: sub_40BC10+117↓j
.text:0040BD18                                         ; sub_40BC10+124↓j
.text:0040BD18                 xor     eax, eax
.text:0040BD1A                 jmp     short loc_40BCD1
.text:0040BD1C ; ---------------------------------------------------------------------------
.text:0040BD1C
.text:0040BD1C loc_40BD1C:                             ; CODE XREF: sub_40BC10+1A↑j
.text:0040BD1C                 call    _errno
.text:0040BD21                 mov     dword ptr [eax], 2
.text:0040BD27                 jmp     short loc_40BD18
.text:0040BD29 ; ---------------------------------------------------------------------------
.text:0040BD29
.text:0040BD29 loc_40BD29:                             ; CODE XREF: sub_40BC10+11↑j
.text:0040BD29                 call    _errno
.text:0040BD2E                 mov     dword ptr [eax], 16h
.text:0040BD34                 jmp     short loc_40BD18
.text:0040BD34 sub_40BC10      endp
.text:0040BD34
.text:0040BD34 ; ---------------------------------------------------------------------------
.text:0040BD36                 align 10h
.text:0040BD40
.text:0040BD40 ; =============== S U B R O U T I N E =======================================
.text:0040BD40
.text:0040BD40
.text:0040BD40 ; int __cdecl sub_40BD40(LPCSTR lpFileName, int)
.text:0040BD40 sub_40BD40      proc near               ; CODE XREF: sub_4086A0+2043↑p
.text:0040BD40                                         ; .text:0040AB82↑p ...
.text:0040BD40
.text:0040BD40 uMode           = dword ptr -1Ch
.text:0040BD40 var_10          = dword ptr -10h
.text:0040BD40 var_C           = dword ptr -0Ch
.text:0040BD40 var_8           = dword ptr -8
.text:0040BD40 var_4           = dword ptr -4
.text:0040BD40 lpFileName      = dword ptr  4
.text:0040BD40 arg_4           = dword ptr  8
.text:0040BD40
.text:0040BD40                 sub     esp, 1Ch
.text:0040BD43                 mov     [esp+1Ch+var_10], ebx
.text:0040BD47                 mov     ebx, [esp+1Ch+lpFileName]
.text:0040BD4B                 mov     [esp+1Ch+var_4], ebp
.text:0040BD4F                 xor     ebp, ebp
.text:0040BD51                 test    ebx, ebx
.text:0040BD53                 mov     [esp+1Ch+var_C], esi
.text:0040BD57                 mov     esi, [esp+1Ch+arg_4]
.text:0040BD5B                 mov     [esp+1Ch+var_8], edi
.text:0040BD5F                 jz      short loc_40BD69
.text:0040BD61                 test    esi, 0FFFFFFE8h
.text:0040BD67                 jz      short loc_40BD90
.text:0040BD69
.text:0040BD69 loc_40BD69:                             ; CODE XREF: sub_40BD40+1F↑j
.text:0040BD69                 call    _errno
.text:0040BD6E                 mov     dword ptr [eax], 16h
.text:0040BD74
.text:0040BD74 loc_40BD74:                             ; CODE XREF: sub_40BD40+B1↓j
.text:0040BD74                 mov     eax, 0FFFFFFFFh
.text:0040BD79
.text:0040BD79 loc_40BD79:                             ; CODE XREF: sub_40BD40+86↓j
.text:0040BD79                                         ; sub_40BD40+A4↓j
.text:0040BD79                 mov     ebx, [esp+1Ch+var_10]
.text:0040BD7D                 mov     esi, [esp+1Ch+var_C]
.text:0040BD81                 mov     edi, [esp+1Ch+var_8]
.text:0040BD85                 mov     ebp, [esp+1Ch+var_4]
.text:0040BD89                 add     esp, 1Ch
.text:0040BD8C                 retn
.text:0040BD8C ; ---------------------------------------------------------------------------
.text:0040BD8D                 align 10h
.text:0040BD90
.text:0040BD90 loc_40BD90:                             ; CODE XREF: sub_40BD40+27↑j
.text:0040BD90                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:0040BD97                 call    SetErrorMode
.text:0040BD9C                 sub     esp, 4
.text:0040BD9F                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:0040BDA2                 call    GetFileAttributesA
.text:0040BDA7                 sub     esp, 4
.text:0040BDAA                 mov     edi, eax
.text:0040BDAC                 cmp     eax, 0FFFFFFFFh
.text:0040BDAF                 jz      short loc_40BDF3
.text:0040BDB1
.text:0040BDB1 loc_40BDB1:                             ; CODE XREF: sub_40BD40+C6↓j
.text:0040BDB1                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:0040BDB8                 call    SetErrorMode
.text:0040BDBD                 sub     esp, 4
.text:0040BDC0                 mov     eax, 0FFFFFFFFh
.text:0040BDC5                 inc     ebp
.text:0040BDC6                 jz      short loc_40BD79
.text:0040BDC8                 test    esi, 10h
.text:0040BDCE                 jz      short loc_40BDD8
.text:0040BDD0                 test    edi, 10h
.text:0040BDD6                 jz      short loc_40BDE6
.text:0040BDD8
.text:0040BDD8 loc_40BDD8:                             ; CODE XREF: sub_40BD40+8E↑j
.text:0040BDD8                 and     esi, 2
.text:0040BDDB                 jz      short loc_40BDE2
.text:0040BDDD                 and     edi, 1
.text:0040BDE0                 jnz     short loc_40BDE6
.text:0040BDE2
.text:0040BDE2 loc_40BDE2:                             ; CODE XREF: sub_40BD40+9B↑j
.text:0040BDE2                 xor     eax, eax
.text:0040BDE4                 jmp     short loc_40BD79
.text:0040BDE6 ; ---------------------------------------------------------------------------
.text:0040BDE6
.text:0040BDE6 loc_40BDE6:                             ; CODE XREF: sub_40BD40+96↑j
.text:0040BDE6                                         ; sub_40BD40+A0↑j
.text:0040BDE6                 call    _errno
.text:0040BDEB                 mov     dword ptr [eax], 0Dh
.text:0040BDF1                 jmp     short loc_40BD74
.text:0040BDF3 ; ---------------------------------------------------------------------------
.text:0040BDF3
.text:0040BDF3 loc_40BDF3:                             ; CODE XREF: sub_40BD40+6F↑j
.text:0040BDF3                 call    sub_40B2D0
.text:0040BDF8                 mov     ebp, eax
.text:0040BDFA                 call    _errno
.text:0040BDFF                 mov     [eax], ebp
.text:0040BE01                 mov     ebp, 0FFFFFFFFh
.text:0040BE06                 jmp     short loc_40BDB1
.text:0040BE06 sub_40BD40      endp
.text:0040BE06
.text:0040BE06 ; ---------------------------------------------------------------------------
.text:0040BE08                 align 10h
.text:0040BE10 ; const char String[4]
.text:0040BE10 String          db ' :/',0              ; DATA XREF: sub_40BE20+FA↓o
.text:0040BE14                 align 10h
.text:0040BE20
.text:0040BE20 ; =============== S U B R O U T I N E =======================================
.text:0040BE20
.text:0040BE20
.text:0040BE20 ; int __cdecl sub_40BE20(LPCSTR)
.text:0040BE20 sub_40BE20      proc near               ; CODE XREF: sub_4094A0+E↑p
.text:0040BE20                                         ; sub_4099A0+17↑p ...
.text:0040BE20
.text:0040BE20 Str             = dword ptr -1Ch
.text:0040BE20 Val             = dword ptr -18h
.text:0040BE20 Count           = dword ptr -14h
.text:0040BE20 var_10          = dword ptr -10h
.text:0040BE20 var_C           = dword ptr -0Ch
.text:0040BE20 var_8           = dword ptr -8
.text:0040BE20 var_4           = dword ptr -4
.text:0040BE20 arg_0           = dword ptr  4
.text:0040BE20
.text:0040BE20                 sub     esp, 1Ch
.text:0040BE23                 mov     edx, [esp+1Ch+arg_0]
.text:0040BE27                 mov     [esp+1Ch+var_8], edi
.text:0040BE2B                 mov     [esp+1Ch+var_10], ebx
.text:0040BE2F                 mov     [esp+1Ch+var_C], esi
.text:0040BE33                 mov     [esp+1Ch+var_4], ebp
.text:0040BE37                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:0040BE3A                 call    sub_40BBF0
.text:0040BE3F                 test    eax, eax
.text:0040BE41                 mov     edi, eax
.text:0040BE43                 jz      short loc_40BE80
.text:0040BE45                 mov     [esp+1Ch+Str], eax ; Str
.text:0040BE48                 call    strlen
.text:0040BE4D                 cmp     eax, 2
.text:0040BE50                 jbe     short loc_40BE5C
.text:0040BE52                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:0040BE56                 jz      loc_40BF10
.text:0040BE5C
.text:0040BE5C loc_40BE5C:                             ; CODE XREF: sub_40BE20+30↑j
.text:0040BE5C                                         ; sub_40BE20+F4↓j
.text:0040BE5C                 test    edi, edi
.text:0040BE5E                 jz      short loc_40BE80
.text:0040BE60                 mov     [esp+1Ch+Str], edi ; Str
.text:0040BE63                 call    strlen
.text:0040BE68                 cmp     eax, 4
.text:0040BE6B                 mov     ebp, eax
.text:0040BE6D                 jle     short loc_40BE80
.text:0040BE6F                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040BE72                 jz      short loc_40BEA0
.text:0040BE74                 lea     esi, [esi+0]
.text:0040BE7A                 lea     edi, [edi+0]
.text:0040BE80
.text:0040BE80 loc_40BE80:                             ; CODE XREF: sub_40BE20+23↑j
.text:0040BE80                                         ; sub_40BE20+3E↑j ...
.text:0040BE80                 xor     esi, esi
.text:0040BE82
.text:0040BE82 loc_40BE82:                             ; CODE XREF: sub_40BE20+CD↓j
.text:0040BE82                                         ; sub_40BE20+115↓j
.text:0040BE82                 mov     [esp+1Ch+Str], edi ; Block
.text:0040BE85                 call    free
.text:0040BE8A                 mov     eax, esi
.text:0040BE8C                 mov     ebx, [esp+1Ch+var_10]
.text:0040BE90                 mov     esi, [esp+1Ch+var_C]
.text:0040BE94                 mov     edi, [esp+1Ch+var_8]
.text:0040BE98                 mov     ebp, [esp+1Ch+var_4]
.text:0040BE9C                 add     esp, 1Ch
.text:0040BE9F                 retn
.text:0040BEA0 ; ---------------------------------------------------------------------------
.text:0040BEA0
.text:0040BEA0 loc_40BEA0:                             ; CODE XREF: sub_40BE20+52↑j
.text:0040BEA0                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:0040BEA4                 jnz     short loc_40BE80
.text:0040BEA6                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040BEAE                 lea     ecx, [edi+2]
.text:0040BEB1                 mov     [esp+1Ch+Str], ecx ; Str
.text:0040BEB4                 call    strchr
.text:0040BEB9                 test    eax, eax
.text:0040BEBB                 jnz     short loc_40BEEF
.text:0040BEBD
.text:0040BEBD loc_40BEBD:                             ; CODE XREF: sub_40BE20+E2↓j
.text:0040BEBD                 inc     ebp
.text:0040BEBE
.text:0040BEBE loc_40BEBE:                             ; CODE XREF: sub_40BE20+E9↓j
.text:0040BEBE                 mov     [esp+1Ch+Val], 1 ; Size
.text:0040BEC6                 lea     ebx, [ebp+1]
.text:0040BEC9                 mov     [esp+1Ch+Str], ebx ; Count
.text:0040BECC                 call    calloc
.text:0040BED1                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040BED4                 mov     esi, eax
.text:0040BED6                 mov     [esp+1Ch+Count], ebx ; Count
.text:0040BEDA                 mov     [esp+1Ch+Val], edi ; Source
.text:0040BEDE                 call    strncpy
.text:0040BEE3                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:0040BEE8                 mov     byte ptr [ebp+esi+0], 0
.text:0040BEED                 jmp     short loc_40BE82
.text:0040BEEF ; ---------------------------------------------------------------------------
.text:0040BEEF
.text:0040BEEF loc_40BEEF:                             ; CODE XREF: sub_40BE20+9B↑j
.text:0040BEEF                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040BEF7                 inc     eax
.text:0040BEF8                 mov     [esp+1Ch+Str], eax ; Str
.text:0040BEFB                 call    strchr
.text:0040BF00                 test    eax, eax
.text:0040BF02                 jz      short loc_40BEBD
.text:0040BF04                 sub     eax, edi
.text:0040BF06                 lea     ebp, [eax+1]
.text:0040BF09                 jmp     short loc_40BEBE
.text:0040BF09 ; ---------------------------------------------------------------------------
.text:0040BF0B                 align 10h
.text:0040BF10
.text:0040BF10 loc_40BF10:                             ; CODE XREF: sub_40BE20+36↑j
.text:0040BF10                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:0040BF14                 jnz     loc_40BE5C
.text:0040BF1A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:0040BF21                 call    _strdup
.text:0040BF26                 movsx   edx, byte ptr [edi]
.text:0040BF29                 mov     esi, eax
.text:0040BF2B                 mov     [esp+1Ch+Str], edx ; C
.text:0040BF2E                 call    toupper
.text:0040BF33                 mov     [esi], al
.text:0040BF35                 jmp     loc_40BE82
.text:0040BF35 sub_40BE20      endp
.text:0040BF35
.text:0040BF35 ; ---------------------------------------------------------------------------
.text:0040BF3A                 align 10h
.text:0040BF40
.text:0040BF40 ; =============== S U B R O U T I N E =======================================
.text:0040BF40
.text:0040BF40
.text:0040BF40 sub_40BF40      proc near               ; CODE XREF: .text:0040C094↓p
.text:0040BF40                                         ; .text:0040C178↓p
.text:0040BF40
.text:0040BF40 Str             = dword ptr -2Ch
.text:0040BF40 Val             = dword ptr -28h
.text:0040BF40 var_18          = dword ptr -18h
.text:0040BF40 var_11          = byte ptr -11h
.text:0040BF40 arg_0           = dword ptr  4
.text:0040BF40
.text:0040BF40                 push    ebp
.text:0040BF41                 push    edi
.text:0040BF42                 push    esi
.text:0040BF43                 push    ebx
.text:0040BF44                 sub     esp, 1Ch
.text:0040BF47                 mov     edx, [esp+2Ch+arg_0]
.text:0040BF4B                 cmp     edx, ds:dword_413700
.text:0040BF51                 mov     [esp+2Ch+var_11], 0
.text:0040BF56                 jz      loc_40C054
.text:0040BF5C                 mov     ebx, ds:dword_4136F0
.text:0040BF62                 test    ebx, ebx
.text:0040BF64                 jz      short loc_40BFD2
.text:0040BF66
.text:0040BF66 loc_40BF66:                             ; CODE XREF: sub_40BF40+10F↓j
.text:0040BF66                 mov     ebx, [esp+2Ch+arg_0]
.text:0040BF6A                 xor     edi, edi
.text:0040BF6C                 xor     esi, esi
.text:0040BF6E                 mov     ebp, offset dword_413718
.text:0040BF73                 lea     esi, [esi+0]
.text:0040BF79                 lea     edi, [edi+0]
.text:0040BF80
.text:0040BF80 loc_40BF80:                             ; CODE XREF: sub_40BF40+60↓j
.text:0040BF80                 mov     edx, [ebp+4]
.text:0040BF83                 mov     ecx, edi
.text:0040BF85                 mov     eax, [ebp+0]
.text:0040BF88                 shl     ecx, 4
.text:0040BF8B                 mov     [esp+2Ch+var_18], ecx
.text:0040BF8F                 mov     ecx, edx
.text:0040BF91                 xor     eax, ebx
.text:0040BF93                 xor     ecx, esi
.text:0040BF95                 or      ecx, eax
.text:0040BF97                 jz      short loc_40BFC1
.text:0040BF99                 inc     edi
.text:0040BF9A                 add     ebp, 10h
.text:0040BF9D                 cmp     edi, 20h ; ' '
.text:0040BFA0                 jle     short loc_40BF80
.text:0040BFA2
.text:0040BFA2 loc_40BFA2:                             ; CODE XREF: sub_40BF40+90↓j
.text:0040BFA2                 movzx   ebx, [esp+2Ch+var_11]
.text:0040BFA7                 mov     eax, [esp+2Ch+arg_0]
.text:0040BFAB                 mov     byte_412060, bl
.text:0040BFB1                 mov     ds:dword_413700, eax
.text:0040BFB6                 movsx   eax, bl
.text:0040BFB9
.text:0040BFB9 loc_40BFB9:                             ; CODE XREF: sub_40BF40+11B↓j
.text:0040BFB9                 add     esp, 1Ch
.text:0040BFBC                 pop     ebx
.text:0040BFBD                 pop     esi
.text:0040BFBE                 pop     edi
.text:0040BFBF                 pop     ebp
.text:0040BFC0                 retn
.text:0040BFC1 ; ---------------------------------------------------------------------------
.text:0040BFC1
.text:0040BFC1 loc_40BFC1:                             ; CODE XREF: sub_40BF40+57↑j
.text:0040BFC1                 mov     edx, [esp+2Ch+var_18]
.text:0040BFC5                 movzx   eax, byte ptr ds:dword_413710[edx]
.text:0040BFCC                 mov     [esp+2Ch+var_11], al
.text:0040BFD0                 jmp     short loc_40BFA2
.text:0040BFD2 ; ---------------------------------------------------------------------------
.text:0040BFD2
.text:0040BFD2 loc_40BFD2:                             ; CODE XREF: sub_40BF40+24↑j
.text:0040BFD2                 mov     [esp+2Ch+Str], 0
.text:0040BFD9                 call    sub_40DB10
.text:0040BFDE                 test    eax, eax
.text:0040BFE0                 mov     ebx, eax
.text:0040BFE2                 jz      short loc_40C03C
.text:0040BFE4                 movzx   ecx, byte ptr [eax]
.text:0040BFE7                 mov     esi, 0FFFFFFF0h
.text:0040BFEC                 test    cl, cl
.text:0040BFEE                 jz      short loc_40C03C
.text:0040BFF0
.text:0040BFF0 loc_40BFF0:                             ; CODE XREF: sub_40BF40+FA↓j
.text:0040BFF0                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:0040BFF3                 movsx   ebp, cl
.text:0040BFF6                 add     esi, 10h
.text:0040BFF9                 mov     ds:dword_413710[esi], ebp
.text:0040BFFF                 mov     edi, ebp
.text:0040C001                 sar     edi, 1Fh
.text:0040C004                 mov     ds:dword_413714[esi], edi
.text:0040C00A                 call    sub_4099A0
.text:0040C00F                 mov     ds:dword_413718[esi], eax
.text:0040C015                 xor     ecx, ecx
.text:0040C017                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040C01A                 mov     ds:dword_41371C[esi], ecx
.text:0040C020                 mov     [esp+2Ch+Val], 0 ; Val
.text:0040C028                 call    strchr
.text:0040C02D                 mov     ebx, eax
.text:0040C02F                 inc     ebx
.text:0040C030                 jz      short loc_40C03C
.text:0040C032                 movzx   edx, byte ptr [eax+1]
.text:0040C036                 test    dl, dl
.text:0040C038                 mov     cl, dl
.text:0040C03A                 jnz     short loc_40BFF0
.text:0040C03C
.text:0040C03C loc_40C03C:                             ; CODE XREF: sub_40BF40+A2↑j
.text:0040C03C                                         ; sub_40BF40+AE↑j ...
.text:0040C03C                 mov     [esp+2Ch+Str], ebx ; Block
.text:0040C03F                 mov     esi, 1
.text:0040C044                 mov     ds:dword_4136F0, esi
.text:0040C04A                 call    free
.text:0040C04F                 jmp     loc_40BF66
.text:0040C054 ; ---------------------------------------------------------------------------
.text:0040C054
.text:0040C054 loc_40C054:                             ; CODE XREF: sub_40BF40+16↑j
.text:0040C054                 movsx   eax, byte_412060
.text:0040C05B                 jmp     loc_40BFB9
.text:0040C05B sub_40BF40      endp
.text:0040C05B
.text:0040C05B ; ---------------------------------------------------------------------------
.text:0040C060 dword_40C060    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:0040C060                                         ; DATA XREF: .text:0040C083↓o
.text:0040C060                                         ; .text:0040C163↓o
.text:0040C070 ; ---------------------------------------------------------------------------
.text:0040C070                 sub     esp, 1Ch
.text:0040C073                 mov     [esp+14h], esi
.text:0040C077                 mov     esi, [esp+20h]
.text:0040C07B                 mov     [esp+18h], edi
.text:0040C07F                 mov     [esp+10h], ebx
.text:0040C083                 mov     dword ptr [esp], offset dword_40C060
.text:0040C08A                 call    _strdup
.text:0040C08F                 mov     [esp], esi
.text:0040C092                 mov     edi, eax
.text:0040C094                 call    sub_40BF40
.text:0040C099                 mov     [edi], al
.text:0040C09B                 test    al, al
.text:0040C09D                 jz      short loc_40C0B1
.text:0040C09F                 mov     eax, edi
.text:0040C0A1                 mov     ebx, [esp+10h]
.text:0040C0A5                 mov     esi, [esp+14h]
.text:0040C0A9                 mov     edi, [esp+18h]
.text:0040C0AD                 add     esp, 1Ch
.text:0040C0B0                 retn
.text:0040C0B1 ; ---------------------------------------------------------------------------
.text:0040C0B1
.text:0040C0B1 loc_40C0B1:                             ; CODE XREF: .text:0040C09D↑j
.text:0040C0B1                 mov     [esp], edi
.text:0040C0B4                 call    free
.text:0040C0B9                 mov     dword ptr [esp+4], 0
.text:0040C0C1                 mov     dword ptr [esp], 0
.text:0040C0C8                 call    GetCurrentDirectoryA
.text:0040C0CD                 sub     esp, 8
.text:0040C0D0                 lea     esi, [eax+1]
.text:0040C0D3                 mov     [esp], esi
.text:0040C0D6                 call    malloc
.text:0040C0DB                 mov     [esp+4], eax
.text:0040C0DF                 mov     edi, eax
.text:0040C0E1                 mov     [esp], esi
.text:0040C0E4                 call    GetCurrentDirectoryA
.text:0040C0E9                 sub     esp, 8
.text:0040C0EC                 test    eax, eax
.text:0040C0EE                 jnz     short loc_40C110
.text:0040C0F0                 mov     dword ptr [esp+20h], 40C064h
.text:0040C0F8                 mov     ebx, [esp+10h]
.text:0040C0FC                 mov     esi, [esp+14h]
.text:0040C100                 mov     edi, [esp+18h]
.text:0040C104                 add     esp, 1Ch
.text:0040C107                 jmp     _strdup
.text:0040C107 ; ---------------------------------------------------------------------------
.text:0040C10C                 align 10h
.text:0040C110
.text:0040C110 loc_40C110:                             ; CODE XREF: .text:0040C0EE↑j
.text:0040C110                 mov     [esp+20h], edi
.text:0040C114                 mov     ebx, [esp+10h]
.text:0040C118                 mov     esi, [esp+14h]
.text:0040C11C                 mov     edi, [esp+18h]
.text:0040C120                 add     esp, 1Ch
.text:0040C123                 jmp     sub_40BE20
.text:0040C123 ; ---------------------------------------------------------------------------
.text:0040C128                 align 10h
.text:0040C130                 sub     esp, 7Ch
.text:0040C133                 lea     edx, [esp+10h]
.text:0040C137                 mov     [esp+8], edx
.text:0040C13B                 mov     edx, [esp+80h]
.text:0040C142                 mov     [esp+70h], ebx
.text:0040C146                 mov     [esp+74h], esi
.text:0040C14A                 mov     [esp+4], edx
.text:0040C14E                 mov     [esp+78h], edi
.text:0040C152                 mov     dword ptr [esp], 0
.text:0040C159                 call    sub_40DD20
.text:0040C15E                 xor     edx, edx
.text:0040C160                 inc     eax
.text:0040C161                 jz      short loc_40C185
.text:0040C163                 mov     dword ptr [esp], offset dword_40C060
.text:0040C16A                 mov     esi, [esp+20h]
.text:0040C16E                 call    _strdup
.text:0040C173                 mov     edi, eax
.text:0040C175                 mov     [esp], esi
.text:0040C178                 call    sub_40BF40
.text:0040C17D                 mov     [edi], al
.text:0040C17F                 test    al, al
.text:0040C181                 mov     edx, edi
.text:0040C183                 jz      short loc_40C197
.text:0040C185
.text:0040C185 loc_40C185:                             ; CODE XREF: .text:0040C161↑j
.text:0040C185                                         ; .text:0040C1E4↓j
.text:0040C185                 mov     ebx, [esp+70h]
.text:0040C189                 mov     eax, edx
.text:0040C18B                 mov     esi, [esp+74h]
.text:0040C18F                 mov     edi, [esp+78h]
.text:0040C193                 add     esp, 7Ch
.text:0040C196                 retn
.text:0040C197 ; ---------------------------------------------------------------------------
.text:0040C197
.text:0040C197 loc_40C197:                             ; CODE XREF: .text:0040C183↑j
.text:0040C197                 mov     [esp], edi
.text:0040C19A                 call    free
.text:0040C19F                 mov     dword ptr [esp+4], 0
.text:0040C1A7                 mov     dword ptr [esp], 0
.text:0040C1AE                 call    GetCurrentDirectoryA
.text:0040C1B3                 sub     esp, 8
.text:0040C1B6                 lea     esi, [eax+1]
.text:0040C1B9                 mov     [esp], esi
.text:0040C1BC                 call    malloc
.text:0040C1C1                 mov     [esp+4], eax
.text:0040C1C5                 mov     edi, eax
.text:0040C1C7                 mov     [esp], esi
.text:0040C1CA                 call    GetCurrentDirectoryA
.text:0040C1CF                 sub     esp, 8
.text:0040C1D2                 test    eax, eax
.text:0040C1D4                 jnz     short loc_40C1E6
.text:0040C1D6                 mov     dword ptr [esp], 40C064h
.text:0040C1DD                 call    _strdup
.text:0040C1E2
.text:0040C1E2 loc_40C1E2:                             ; CODE XREF: .text:0040C1EE↓j
.text:0040C1E2                 mov     edx, eax
.text:0040C1E4                 jmp     short loc_40C185
.text:0040C1E6 ; ---------------------------------------------------------------------------
.text:0040C1E6
.text:0040C1E6 loc_40C1E6:                             ; CODE XREF: .text:0040C1D4↑j
.text:0040C1E6                 mov     [esp], edi
.text:0040C1E9                 call    sub_40BE20
.text:0040C1EE                 jmp     short loc_40C1E2
.text:0040C1F0
.text:0040C1F0 ; =============== S U B R O U T I N E =======================================
.text:0040C1F0
.text:0040C1F0
.text:0040C1F0 ; int __cdecl sub_40C1F0(LPCSTR)
.text:0040C1F0 sub_40C1F0      proc near               ; CODE XREF: sub_408E50+12F↑p
.text:0040C1F0
.text:0040C1F0 String1         = dword ptr -1Ch
.text:0040C1F0 String2         = dword ptr -18h
.text:0040C1F0 var_C           = dword ptr -0Ch
.text:0040C1F0 var_8           = dword ptr -8
.text:0040C1F0 var_4           = dword ptr -4
.text:0040C1F0 arg_0           = dword ptr  4
.text:0040C1F0
.text:0040C1F0                 sub     esp, 1Ch
.text:0040C1F3                 mov     [esp+1Ch+var_4], edi
.text:0040C1F7                 mov     edi, [esp+1Ch+arg_0]
.text:0040C1FB                 mov     [esp+1Ch+var_C], ebx
.text:0040C1FF                 mov     [esp+1Ch+var_8], esi
.text:0040C203                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040C206                 call    sub_40BBF0
.text:0040C20B                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040C20E                 mov     esi, eax
.text:0040C210                 call    sub_40BE20
.text:0040C215                 mov     [esp+1Ch+String2], eax ; String2
.text:0040C219                 mov     ebx, eax
.text:0040C21B                 mov     [esp+1Ch+String1], esi ; String1
.text:0040C21E                 call    _stricmp
.text:0040C223                 test    eax, eax
.text:0040C225                 setz    dl
.text:0040C228                 test    esi, esi
.text:0040C22A                 movzx   edi, dl
.text:0040C22D                 jz      short loc_40C237
.text:0040C22F                 mov     [esp+1Ch+String1], esi ; Block
.text:0040C232                 call    free
.text:0040C237
.text:0040C237 loc_40C237:                             ; CODE XREF: sub_40C1F0+3D↑j
.text:0040C237                 test    ebx, ebx
.text:0040C239                 jz      short loc_40C243
.text:0040C23B                 mov     [esp+1Ch+String1], ebx ; Block
.text:0040C23E                 call    free
.text:0040C243
.text:0040C243 loc_40C243:                             ; CODE XREF: sub_40C1F0+49↑j
.text:0040C243                 mov     eax, edi
.text:0040C245                 mov     ebx, [esp+1Ch+var_C]
.text:0040C249                 mov     esi, [esp+1Ch+var_8]
.text:0040C24D                 mov     edi, [esp+1Ch+var_4]
.text:0040C251                 add     esp, 1Ch
.text:0040C254                 retn
.text:0040C254 sub_40C1F0      endp
.text:0040C254
.text:0040C254 ; ---------------------------------------------------------------------------
.text:0040C255                 align 10h
.text:0040C260 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0040C47F↓o
.text:0040C26C aLu_0           db '%lu',0              ; DATA XREF: .text:0040C48F↓o
.text:0040C270 asc_40C270      db ' ',0                ; DATA XREF: .text:loc_40C578↓o
.text:0040C272                 align 10h
.text:0040C280 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:0040C280                                         ; DATA XREF: .text:0040C5AF↓o
.text:0040C2A0 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_40C5BD↓o
.text:0040C2AC aServer         db ' Server',0          ; DATA XREF: .text:0040C5E6↓o
.text:0040C2AC                                         ; .text:loc_40C75E↓o
.text:0040C2B4 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_40C5F8↓o
.text:0040C2C5 aDatacenterServ db ' Datacenter Server',0
.text:0040C2C5                                         ; DATA XREF: .text:loc_40C602↓o
.text:0040C2D8 aStandardEditio db ' Standard Edition',0
.text:0040C2D8                                         ; DATA XREF: .text:0040C62A↓o
.text:0040C2EA aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_40C634↓o
.text:0040C2F7 aEnterpriseEdit db ' Enterprise Edition',0
.text:0040C2F7                                         ; DATA XREF: .text:loc_40C63E↓o
.text:0040C30B aDatacenterEdit db ' Datacenter Edition',0
.text:0040C30B                                         ; DATA XREF: .text:loc_40C648↓o
.text:0040C31F aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0040C65B↓o
.text:0040C32D aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_40C665↓o
.text:0040C32D                                         ; .text:loc_40C770↓o
.text:0040C33B                 align 10h
.text:0040C340 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:0040C340                                         ; DATA XREF: .text:0040C692↓o
.text:0040C370 aProducttype    db 'ProductType',0      ; DATA XREF: .text:0040C6D9↓o
.text:0040C37C aWinnt          db 'WINNT',0            ; DATA XREF: .text:0040C714↓o
.text:0040C382 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:0040C72B↓o
.text:0040C38B aServernt       db 'SERVERNT',0         ; DATA XREF: .text:0040C742↓o
.text:0040C394                 align 10h
.text:0040C3A0 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:0040C3A0                                         ; DATA XREF: .text:0040C8B7↓o
.text:0040C3C3                 align 20h
.text:0040C3E0 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:0040C3E0                                         ; DATA XREF: .text:0040C916↓o
.text:0040C406 ; ---------------------------------------------------------------------------
.text:0040C406
.text:0040C406 loc_40C406:                             ; DATA XREF: .text:loc_40C981↓o
.text:0040C406                 and     [ebx+45h], dl
.text:0040C409                 add     [eax], ah
.text:0040C40B                 push    ebx
.text:0040C40C                 push    eax
.text:0040C40D                 xor     [eax], eax
.text:0040C40F
.text:0040C40F loc_40C40F:                             ; DATA XREF: .text:loc_40C9FB↓o
.text:0040C40F                 and     [edi+53h], cl
.text:0040C412                 push    edx
.text:0040C413                 xor     al, [eax]
.text:0040C415                 lea     esi, [esi+0]
.text:0040C419                 lea     edi, [edi+0]
.text:0040C420                 push    edi
.text:0040C421                 push    esi
.text:0040C422                 push    ebx
.text:0040C423                 sub     esp, 130h
.text:0040C429                 mov     ebx, [esp+140h]
.text:0040C430                 call    sub_40CB30
.text:0040C435                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040C43A                 cmp     eax, 1
.text:0040C43D                 jz      loc_40C8E0
.text:0040C443                 cmp     eax, 1
.text:0040C446                 jb      loc_40C8B6
.text:0040C44C                 cmp     eax, 2
.text:0040C44F                 jz      loc_40C500
.text:0040C455                 cmp     eax, 3
.text:0040C458                 jz      short loc_40C4BF
.text:0040C45A                 lea     esi, [esi+0]
.text:0040C460
.text:0040C460 loc_40C460:                             ; CODE XREF: .text:0040C4F5↓j
.text:0040C460                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040C466                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040C46C
.text:0040C46C loc_40C46C:                             ; CODE XREF: .text:0040C8FF↓j
.text:0040C46C                 mov     [esp+10h], edx
.text:0040C470                 mov     ebx, [esp+144h]
.text:0040C477                 mov     [esp+0Ch], ecx
.text:0040C47B                 mov     [esp+8], eax
.text:0040C47F                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:0040C487                 mov     [esp], ebx
.text:0040C48A                 call    sprintf
.text:0040C48F                 mov     dword ptr [esp+4], offset aLu_0 ; "%lu"
.text:0040C497                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0040C49D                 mov     ecx, [esp+148h]
.text:0040C4A4                 mov     [esp+8], edi
.text:0040C4A8                 mov     [esp], ecx
.text:0040C4AB                 call    sprintf
.text:0040C4B0                 mov     eax, 1
.text:0040C4B5
.text:0040C4B5 loc_40C4B5:                             ; CODE XREF: .text:0040C6AF↓j
.text:0040C4B5                                         ; .text:0040C6FC↓j
.text:0040C4B5                 add     esp, 130h
.text:0040C4BB                 pop     ebx
.text:0040C4BC                 pop     esi
.text:0040C4BD                 pop     edi
.text:0040C4BE                 retn
.text:0040C4BF ; ---------------------------------------------------------------------------
.text:0040C4BF
.text:0040C4BF loc_40C4BF:                             ; CODE XREF: .text:0040C458↑j
.text:0040C4BF                 mov     dword ptr [ebx], 7263694Dh
.text:0040C4C5                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040C4CC                 mov     dword ptr [ebx+8], 69572074h
.text:0040C4D3                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040C4DA                 mov     dword ptr [ebx+10h], 45432073h
.text:0040C4E1                 mov     word ptr [ebx+14h], 20h ; ' '
.text:0040C4E7                 mov     esi, esi
.text:0040C4E9                 lea     edi, [edi+0]
.text:0040C4F0
.text:0040C4F0 loc_40C4F0:                             ; CODE XREF: .text:0040C598↓j
.text:0040C4F0                                         ; .text:0040C8D9↓j ...
.text:0040C4F0                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040C4F5                 jmp     loc_40C460
.text:0040C4F5 ; ---------------------------------------------------------------------------
.text:0040C4FA                 align 10h
.text:0040C500
.text:0040C500 loc_40C500:                             ; CODE XREF: .text:0040C44F↑j
.text:0040C500                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:0040C506                 cmp     edx, 3
.text:0040C509                 mov     eax, edx
.text:0040C50B                 jz      loc_40C875
.text:0040C511
.text:0040C511 loc_40C511:                             ; CODE XREF: .text:0040C87C↓j
.text:0040C511                 cmp     eax, 4
.text:0040C514                 jz      loc_40C835
.text:0040C51A
.text:0040C51A loc_40C51A:                             ; CODE XREF: .text:0040C83D↓j
.text:0040C51A                 cmp     eax, 4
.text:0040C51D                 ja      loc_40C782
.text:0040C523                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040C529                 test    ecx, ecx
.text:0040C52B                 jnz     loc_40C782
.text:0040C531                 mov     dword ptr [ebx], 7263694Dh
.text:0040C537                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040C53E                 mov     dword ptr [ebx+8], 69572074h
.text:0040C545                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040C54C                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040C553
.text:0040C553 loc_40C553:                             ; CODE XREF: .text:0040C7F5↓j
.text:0040C553                 mov     byte ptr [ebx+14h], 0
.text:0040C557
.text:0040C557 loc_40C557:                             ; CODE XREF: .text:0040C785↓j
.text:0040C557                                         ; .text:0040C79C↓j ...
.text:0040C557                 mov     esi, dword_412070
.text:0040C55D                 test    esi, esi
.text:0040C55F                 jz      loc_40C672
.text:0040C565                 movzx   eax, ds:byte_4139BA
.text:0040C56C                 cmp     al, 1
.text:0040C56E                 jz      loc_40C652
.text:0040C574                 cmp     al, 3
.text:0040C576                 jz      short loc_40C59D
.text:0040C578
.text:0040C578 loc_40C578:                             ; CODE XREF: .text:0040C5BB↓j
.text:0040C578                                         ; .text:0040C5F6↓j ...
.text:0040C578                 mov     dword ptr [esp+4], offset asc_40C270 ; " "
.text:0040C580                 mov     [esp], ebx
.text:0040C583                 call    strcat
.text:0040C588                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:0040C590                 mov     [esp], ebx
.text:0040C593                 call    strcat
.text:0040C598                 jmp     loc_40C4F0
.text:0040C59D ; ---------------------------------------------------------------------------
.text:0040C59D
.text:0040C59D loc_40C59D:                             ; CODE XREF: .text:0040C576↑j
.text:0040C59D                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:0040C5A4                 jz      short loc_40C5C6
.text:0040C5A6
.text:0040C5A6 loc_40C5A6:                             ; CODE XREF: .text:0040C5D2↓j
.text:0040C5A6                 test    byte ptr ds:word_4139B8, 2
.text:0040C5AD                 jz      short loc_40C5BD
.text:0040C5AF                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:0040C5B6
.text:0040C5B6 loc_40C5B6:                             ; CODE XREF: .text:0040C5C4↓j
.text:0040C5B6                 call    printf
.text:0040C5BB                 jmp     short loc_40C578
.text:0040C5BD ; ---------------------------------------------------------------------------
.text:0040C5BD
.text:0040C5BD loc_40C5BD:                             ; CODE XREF: .text:0040C5AD↑j
.text:0040C5BD                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:0040C5C4                 jmp     short loc_40C5B6
.text:0040C5C6 ; ---------------------------------------------------------------------------
.text:0040C5C6
.text:0040C5C6 loc_40C5C6:                             ; CODE XREF: .text:0040C5A4↑j
.text:0040C5C6                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040C5CB                 cmp     eax, 2
.text:0040C5CE                 jz      short loc_40C610
.text:0040C5D0                 test    eax, eax
.text:0040C5D2                 jnz     short loc_40C5A6
.text:0040C5D4                 cmp     byte ptr ds:word_4139B8, 0
.text:0040C5DB                 js      short loc_40C602
.text:0040C5DD                 test    byte ptr ds:word_4139B8, 2
.text:0040C5E4                 jnz     short loc_40C5F8
.text:0040C5E6                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040C5EE
.text:0040C5EE loc_40C5EE:                             ; CODE XREF: .text:0040C600↓j
.text:0040C5EE                                         ; .text:0040C60A↓j ...
.text:0040C5EE                 mov     [esp], ebx
.text:0040C5F1                 call    strcat
.text:0040C5F6                 jmp     short loc_40C578
.text:0040C5F8 ; ---------------------------------------------------------------------------
.text:0040C5F8
.text:0040C5F8 loc_40C5F8:                             ; CODE XREF: .text:0040C5E4↑j
.text:0040C5F8                                         ; .text:0040C759↓j
.text:0040C5F8                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:0040C600                 jmp     short loc_40C5EE
.text:0040C602 ; ---------------------------------------------------------------------------
.text:0040C602
.text:0040C602 loc_40C602:                             ; CODE XREF: .text:0040C5DB↑j
.text:0040C602                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:0040C60A                 jmp     short loc_40C5EE
.text:0040C60A ; ---------------------------------------------------------------------------
.text:0040C60C                 align 10h
.text:0040C610
.text:0040C610 loc_40C610:                             ; CODE XREF: .text:0040C5CE↑j
.text:0040C610                 cmp     byte ptr ds:word_4139B8, 0
.text:0040C617                 js      short loc_40C648
.text:0040C619                 movzx   eax, ds:word_4139B8
.text:0040C620                 test    al, 2
.text:0040C622                 jnz     short loc_40C63E
.text:0040C624                 cmp     ax, 400h
.text:0040C628                 jz      short loc_40C634
.text:0040C62A                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:0040C632                 jmp     short loc_40C5EE
.text:0040C634 ; ---------------------------------------------------------------------------
.text:0040C634
.text:0040C634 loc_40C634:                             ; CODE XREF: .text:0040C628↑j
.text:0040C634                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:0040C63C                 jmp     short loc_40C5EE
.text:0040C63E ; ---------------------------------------------------------------------------
.text:0040C63E
.text:0040C63E loc_40C63E:                             ; CODE XREF: .text:0040C622↑j
.text:0040C63E                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:0040C646                 jmp     short loc_40C5EE
.text:0040C648 ; ---------------------------------------------------------------------------
.text:0040C648
.text:0040C648 loc_40C648:                             ; CODE XREF: .text:0040C617↑j
.text:0040C648                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:0040C650                 jmp     short loc_40C5EE
.text:0040C652 ; ---------------------------------------------------------------------------
.text:0040C652
.text:0040C652 loc_40C652:                             ; CODE XREF: .text:0040C56E↑j
.text:0040C652                 test    byte ptr ds:word_4139B8+1, 2
.text:0040C659                 jz      short loc_40C665
.text:0040C65B                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:0040C663                 jmp     short loc_40C5EE
.text:0040C665 ; ---------------------------------------------------------------------------
.text:0040C665
.text:0040C665 loc_40C665:                             ; CODE XREF: .text:0040C659↑j
.text:0040C665                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040C66D                 jmp     loc_40C5EE
.text:0040C672 ; ---------------------------------------------------------------------------
.text:0040C672
.text:0040C672 loc_40C672:                             ; CODE XREF: .text:0040C55F↑j
.text:0040C672                 mov     dword ptr [esp+28h], 0FFh
.text:0040C67A                 lea     edx, [esp+2Ch]
.text:0040C67E                 mov     [esp+10h], edx
.text:0040C682                 mov     dword ptr [esp+0Ch], 1
.text:0040C68A                 mov     dword ptr [esp+8], 0
.text:0040C692                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0040C69A                 mov     dword ptr [esp], 80000002h
.text:0040C6A1                 call    RegOpenKeyExA
.text:0040C6A6                 mov     edi, eax
.text:0040C6A8                 sub     esp, 14h
.text:0040C6AB                 xor     eax, eax
.text:0040C6AD                 test    edi, edi
.text:0040C6AF                 jnz     loc_40C4B5
.text:0040C6B5                 mov     dword ptr [esp+0Ch], 0
.text:0040C6BD                 mov     edi, [esp+2Ch]
.text:0040C6C1                 lea     esi, [esp+28h]
.text:0040C6C5                 mov     [esp+14h], esi
.text:0040C6C9                 lea     esi, [esp+30h]
.text:0040C6CD                 mov     [esp+10h], esi
.text:0040C6D1                 mov     dword ptr [esp+8], 0
.text:0040C6D9                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:0040C6E1                 mov     [esp], edi
.text:0040C6E4                 call    RegQueryValueExA
.text:0040C6E9                 sub     esp, 18h
.text:0040C6EC                 test    eax, eax
.text:0040C6EE                 jnz     short loc_40C6FA
.text:0040C6F0                 cmp     dword ptr [esp+28h], 0FFh
.text:0040C6F8                 jbe     short loc_40C701
.text:0040C6FA
.text:0040C6FA loc_40C6FA:                             ; CODE XREF: .text:0040C6EE↑j
.text:0040C6FA                 xor     eax, eax
.text:0040C6FC                 jmp     loc_40C4B5
.text:0040C701 ; ---------------------------------------------------------------------------
.text:0040C701
.text:0040C701 loc_40C701:                             ; CODE XREF: .text:0040C6F8↑j
.text:0040C701                 mov     edx, [esp+2Ch]
.text:0040C705                 mov     [esp], edx
.text:0040C708                 call    RegCloseKey
.text:0040C70D                 sub     esp, 4
.text:0040C710                 mov     [esp+4], esi
.text:0040C714                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:0040C71B                 call    lstrcmpiA
.text:0040C720                 sub     esp, 8
.text:0040C723                 test    eax, eax
.text:0040C725                 jz      short loc_40C770
.text:0040C727
.text:0040C727 loc_40C727:                             ; CODE XREF: .text:0040C780↓j
.text:0040C727                 mov     [esp+4], esi
.text:0040C72B                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:0040C732                 call    lstrcmpiA
.text:0040C737                 sub     esp, 8
.text:0040C73A                 test    eax, eax
.text:0040C73C                 jz      short loc_40C75E
.text:0040C73E
.text:0040C73E loc_40C73E:                             ; CODE XREF: .text:0040C76E↓j
.text:0040C73E                 mov     [esp+4], esi
.text:0040C742                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:0040C749                 call    lstrcmpiA
.text:0040C74E                 sub     esp, 8
.text:0040C751                 test    eax, eax
.text:0040C753                 jnz     loc_40C578
.text:0040C759                 jmp     loc_40C5F8
.text:0040C75E ; ---------------------------------------------------------------------------
.text:0040C75E
.text:0040C75E loc_40C75E:                             ; CODE XREF: .text:0040C73C↑j
.text:0040C75E                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040C766                 mov     [esp], ebx
.text:0040C769                 call    strcat
.text:0040C76E                 jmp     short loc_40C73E
.text:0040C770 ; ---------------------------------------------------------------------------
.text:0040C770
.text:0040C770 loc_40C770:                             ; CODE XREF: .text:0040C725↑j
.text:0040C770                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0040C778                 mov     [esp], ebx
.text:0040C77B                 call    strcat
.text:0040C780                 jmp     short loc_40C727
.text:0040C782 ; ---------------------------------------------------------------------------
.text:0040C782
.text:0040C782 loc_40C782:                             ; CODE XREF: .text:0040C51D↑j
.text:0040C782                                         ; .text:0040C52B↑j
.text:0040C782                 cmp     eax, 5
.text:0040C785                 jnz     loc_40C557
.text:0040C78B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040C790                 cmp     eax, 2
.text:0040C793                 jz      short loc_40C7FA
.text:0040C795                 cmp     eax, 1
.text:0040C798                 jz      short loc_40C7D3
.text:0040C79A                 test    eax, eax
.text:0040C79C                 jnz     loc_40C557
.text:0040C7A2                 mov     dword ptr [ebx], 7263694Dh
.text:0040C7A8                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040C7AF                 mov     dword ptr [ebx+8], 69572074h
.text:0040C7B6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040C7BD                 mov     dword ptr [ebx+10h], 30322073h
.text:0040C7C4                 mov     word ptr [ebx+14h], 3030h
.text:0040C7CA                 mov     byte ptr [ebx+16h], 0
.text:0040C7CE                 jmp     loc_40C557
.text:0040C7D3 ; ---------------------------------------------------------------------------
.text:0040C7D3
.text:0040C7D3 loc_40C7D3:                             ; CODE XREF: .text:0040C798↑j
.text:0040C7D3                 mov     dword ptr [ebx], 7263694Dh
.text:0040C7D9                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040C7E0                 mov     dword ptr [ebx+8], 69572074h
.text:0040C7E7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040C7EE                 mov     dword ptr [ebx+10h], 50582073h
.text:0040C7F5                 jmp     loc_40C553
.text:0040C7FA ; ---------------------------------------------------------------------------
.text:0040C7FA
.text:0040C7FA loc_40C7FA:                             ; CODE XREF: .text:0040C793↑j
.text:0040C7FA                 mov     dword ptr [ebx], 7263694Dh
.text:0040C800                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040C807                 mov     dword ptr [ebx+8], 69572074h
.text:0040C80E                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040C815                 mov     dword ptr [ebx+10h], 65532073h
.text:0040C81C                 mov     dword ptr [ebx+14h], 72657672h
.text:0040C823                 mov     dword ptr [ebx+18h], 30303220h
.text:0040C82A                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:0040C830                 jmp     loc_40C557
.text:0040C835 ; ---------------------------------------------------------------------------
.text:0040C835
.text:0040C835 loc_40C835:                             ; CODE XREF: .text:0040C514↑j
.text:0040C835                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040C83B                 test    edx, edx
.text:0040C83D                 jnz     loc_40C51A
.text:0040C843                 mov     dword ptr [ebx], 7263694Dh
.text:0040C849                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040C850                 mov     dword ptr [ebx+8], 69572074h
.text:0040C857                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040C85E                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040C865                 mov     dword ptr [ebx+14h], 302E3420h
.text:0040C86C                 mov     byte ptr [ebx+18h], 0
.text:0040C870                 jmp     loc_40C557
.text:0040C875 ; ---------------------------------------------------------------------------
.text:0040C875
.text:0040C875 loc_40C875:                             ; CODE XREF: .text:0040C50B↑j
.text:0040C875                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0040C87C                 jnz     loc_40C511
.text:0040C882                 mov     dword ptr [ebx], 7263694Dh
.text:0040C888                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040C88F                 mov     dword ptr [ebx+8], 69572074h
.text:0040C896                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040C89D                 mov     dword ptr [ebx+10h], 544E2073h
.text:0040C8A4                 mov     dword ptr [ebx+14h], 352E3320h
.text:0040C8AB                 mov     word ptr [ebx+18h], 31h ; '1'
.text:0040C8B1                 jmp     loc_40C557
.text:0040C8B6 ; ---------------------------------------------------------------------------
.text:0040C8B6
.text:0040C8B6 loc_40C8B6:                             ; CODE XREF: .text:0040C446↑j
.text:0040C8B6                 cld
.text:0040C8B7                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:0040C8BC                 mov     ecx, 8
.text:0040C8C1                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:0040C8C8                 mov     edi, ebx
.text:0040C8CA                 rep movsd
.text:0040C8CC                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:0040C8D3                 mov     [edi+2], dl
.text:0040C8D6                 mov     [edi], si
.text:0040C8D9                 jmp     loc_40C4F0
.text:0040C8D9 ; ---------------------------------------------------------------------------
.text:0040C8DE                 align 10h
.text:0040C8E0
.text:0040C8E0 loc_40C8E0:                             ; CODE XREF: .text:0040C43D↑j
.text:0040C8E0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040C8E6                 cmp     ecx, 4
.text:0040C8E9                 jz      loc_40C9A0
.text:0040C8EF
.text:0040C8EF loc_40C8EF:                             ; CODE XREF: .text:0040C9F6↓j
.text:0040C8EF                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040C8F5
.text:0040C8F5 loc_40C8F5:                             ; CODE XREF: .text:0040C9A8↓j
.text:0040C8F5                 cmp     ecx, 4
.text:0040C8F8                 jz      short loc_40C904
.text:0040C8FA
.text:0040C8FA loc_40C8FA:                             ; CODE XREF: .text:0040C90C↓j
.text:0040C8FA                                         ; .text:0040C911↓j
.text:0040C8FA                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040C8FF                 jmp     loc_40C46C
.text:0040C904 ; ---------------------------------------------------------------------------
.text:0040C904
.text:0040C904 loc_40C904:                             ; CODE XREF: .text:0040C8F8↑j
.text:0040C904                 cmp     edx, 0Ah
.text:0040C907                 jz      short loc_40C931
.text:0040C909
.text:0040C909 loc_40C909:                             ; CODE XREF: .text:0040C97F↓j
.text:0040C909                 cmp     ecx, 4
.text:0040C90C                 jnz     short loc_40C8FA
.text:0040C90E                 cmp     edx, 5Ah ; 'Z'
.text:0040C911                 jnz     short loc_40C8FA
.text:0040C913                 cld
.text:0040C914                 mov     edi, ebx
.text:0040C916                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:0040C91B                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:0040C922                 mov     ecx, 9
.text:0040C927                 rep movsd
.text:0040C929                 mov     [edi], bx
.text:0040C92C                 jmp     loc_40C4F0
.text:0040C931 ; ---------------------------------------------------------------------------
.text:0040C931
.text:0040C931 loc_40C931:                             ; CODE XREF: .text:0040C907↑j
.text:0040C931                 mov     dword ptr [ebx], 7263694Dh
.text:0040C937                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040C93E                 mov     dword ptr [ebx+8], 69572074h
.text:0040C945                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040C94C                 mov     dword ptr [ebx+10h], 38392073h
.text:0040C953                 mov     byte ptr [ebx+14h], 0
.text:0040C957                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040C95D                 lea     edi, [edx-7CFh]
.text:0040C963                 cmp     edi, 0B7h ; '·'
.text:0040C969                 jbe     short loc_40C993
.text:0040C96B                 cmp     edx, 886h
.text:0040C971                 ja      short loc_40C981
.text:0040C973
.text:0040C973 loc_40C973:                             ; CODE XREF: .text:0040C991↓j
.text:0040C973                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040C979                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040C97F                 jmp     short loc_40C909
.text:0040C981 ; ---------------------------------------------------------------------------
.text:0040C981
.text:0040C981 loc_40C981:                             ; CODE XREF: .text:0040C971↑j
.text:0040C981                 mov     dword ptr [esp+4], offset loc_40C406
.text:0040C989
.text:0040C989 loc_40C989:                             ; CODE XREF: .text:0040C99B↓j
.text:0040C989                 mov     [esp], ebx
.text:0040C98C                 call    strcat
.text:0040C991                 jmp     short loc_40C973
.text:0040C993 ; ---------------------------------------------------------------------------
.text:0040C993
.text:0040C993 loc_40C993:                             ; CODE XREF: .text:0040C969↑j
.text:0040C993                 mov     dword ptr [esp+4], 40C40Ah
.text:0040C99B                 jmp     short loc_40C989
.text:0040C99B ; ---------------------------------------------------------------------------
.text:0040C99D                 align 10h
.text:0040C9A0
.text:0040C9A0 loc_40C9A0:                             ; CODE XREF: .text:0040C8E9↑j
.text:0040C9A0                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0040C9A6                 test    edx, edx
.text:0040C9A8                 jnz     loc_40C8F5
.text:0040C9AE                 mov     dword ptr [ebx], 7263694Dh
.text:0040C9B4                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040C9BB                 mov     dword ptr [ebx+8], 69572074h
.text:0040C9C2                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040C9C9                 mov     dword ptr [ebx+10h], 35392073h
.text:0040C9D0                 mov     byte ptr [ebx+14h], 0
.text:0040C9D4                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040C9DA                 lea     ecx, [edx-3B7h]
.text:0040C9E0                 cmp     ecx, 81h
.text:0040C9E6                 jbe     short loc_40CA0D
.text:0040C9E8                 cmp     edx, 438h
.text:0040C9EE                 ja      short loc_40C9FB
.text:0040C9F0
.text:0040C9F0 loc_40C9F0:                             ; CODE XREF: .text:0040CA0B↓j
.text:0040C9F0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040C9F6                 jmp     loc_40C8EF
.text:0040C9FB ; ---------------------------------------------------------------------------
.text:0040C9FB
.text:0040C9FB loc_40C9FB:                             ; CODE XREF: .text:0040C9EE↑j
.text:0040C9FB                 mov     dword ptr [esp+4], offset loc_40C40F
.text:0040CA03
.text:0040CA03 loc_40CA03:                             ; CODE XREF: .text:0040CA15↓j
.text:0040CA03                 mov     [esp], ebx
.text:0040CA06                 call    strcat
.text:0040CA0B                 jmp     short loc_40C9F0
.text:0040CA0D ; ---------------------------------------------------------------------------
.text:0040CA0D
.text:0040CA0D loc_40CA0D:                             ; CODE XREF: .text:0040C9E6↑j
.text:0040CA0D                 mov     dword ptr [esp+4], 40C40Ah
.text:0040CA15                 jmp     short loc_40CA03
.text:0040CA15 ; ---------------------------------------------------------------------------
.text:0040CA17                 align 10h
.text:0040CA20
.text:0040CA20 ; =============== S U B R O U T I N E =======================================
.text:0040CA20
.text:0040CA20
.text:0040CA20 sub_40CA20      proc near               ; CODE XREF: sub_40B330+11E↑p
.text:0040CA20                                         ; sub_40B9E0+1A↑p
.text:0040CA20                 sub     esp, 0Ch
.text:0040CA23                 call    sub_40CB30
.text:0040CA28                 mov     eax, ds:dword_413910
.text:0040CA2D                 add     esp, 0Ch
.text:0040CA30                 retn
.text:0040CA30 sub_40CA20      endp
.text:0040CA30
.text:0040CA31 ; ---------------------------------------------------------------------------
.text:0040CA31                 jmp     short loc_40CA40
.text:0040CA31 ; ---------------------------------------------------------------------------
.text:0040CA33                 align 10h
.text:0040CA40
.text:0040CA40 loc_40CA40:                             ; CODE XREF: .text:0040CA31↑j
.text:0040CA40                 sub     esp, 0Ch
.text:0040CA43                 call    sub_40CB30
.text:0040CA48                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040CA4D                 add     esp, 0Ch
.text:0040CA50                 retn
.text:0040CA51 ; ---------------------------------------------------------------------------
.text:0040CA51                 jmp     short loc_40CA60
.text:0040CA51 ; ---------------------------------------------------------------------------
.text:0040CA53                 align 10h
.text:0040CA60
.text:0040CA60 loc_40CA60:                             ; CODE XREF: .text:0040CA51↑j
.text:0040CA60                 sub     esp, 0Ch
.text:0040CA63                 call    sub_40CB30
.text:0040CA68                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040CA6D                 add     esp, 0Ch
.text:0040CA70                 retn
.text:0040CA71 ; ---------------------------------------------------------------------------
.text:0040CA71                 jmp     short loc_40CA80
.text:0040CA71 ; ---------------------------------------------------------------------------
.text:0040CA73                 align 10h
.text:0040CA80
.text:0040CA80 loc_40CA80:                             ; CODE XREF: .text:0040CA71↑j
.text:0040CA80                 sub     esp, 0Ch
.text:0040CA83                 call    sub_40CB30
.text:0040CA88                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040CA8D                 add     esp, 0Ch
.text:0040CA90                 retn
.text:0040CA91 ; ---------------------------------------------------------------------------
.text:0040CA91                 jmp     short loc_40CAA0
.text:0040CA91 ; ---------------------------------------------------------------------------
.text:0040CA93                 align 10h
.text:0040CAA0
.text:0040CAA0 loc_40CAA0:                             ; CODE XREF: .text:0040CA91↑j
.text:0040CAA0                 sub     esp, 0Ch
.text:0040CAA3                 call    GetVersion
.text:0040CAA8                 shr     eax, 10h
.text:0040CAAB                 add     esp, 0Ch
.text:0040CAAE                 retn
.text:0040CAAE ; ---------------------------------------------------------------------------
.text:0040CAAF                 align 10h
.text:0040CAB0                 sub     esp, 0Ch
.text:0040CAB3                 call    sub_40CB30
.text:0040CAB8                 xor     eax, eax
.text:0040CABA                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:0040CAC1                 setz    al
.text:0040CAC4                 add     esp, 0Ch
.text:0040CAC7                 retn
.text:0040CAC7 ; ---------------------------------------------------------------------------
.text:0040CAC8                 align 10h
.text:0040CAD0
.text:0040CAD0 ; =============== S U B R O U T I N E =======================================
.text:0040CAD0
.text:0040CAD0
.text:0040CAD0 sub_40CAD0      proc near               ; CODE XREF: .text:loc_40AF80↑p
.text:0040CAD0                                         ; sub_40B330:loc_40B434↑p ...
.text:0040CAD0                 sub     esp, 0Ch
.text:0040CAD3                 call    sub_40CB30
.text:0040CAD8                 xor     eax, eax
.text:0040CADA                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:0040CAE1                 setz    al
.text:0040CAE4                 add     esp, 0Ch
.text:0040CAE7                 retn
.text:0040CAE7 sub_40CAD0      endp
.text:0040CAE7
.text:0040CAE7 ; ---------------------------------------------------------------------------
.text:0040CAE8                 align 10h
.text:0040CAF0                 sub     esp, 0Ch
.text:0040CAF3                 call    sub_40CB30
.text:0040CAF8                 xor     eax, eax
.text:0040CAFA                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:0040CB01                 setz    al
.text:0040CB04                 add     esp, 0Ch
.text:0040CB07                 retn
.text:0040CB07 ; ---------------------------------------------------------------------------
.text:0040CB08                 align 10h
.text:0040CB10                 sub     esp, 0Ch
.text:0040CB13                 call    sub_40CB30
.text:0040CB18                 xor     eax, eax
.text:0040CB1A                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:0040CB21                 setz    al
.text:0040CB24                 add     esp, 0Ch
.text:0040CB27                 retn
.text:0040CB27 ; ---------------------------------------------------------------------------
.text:0040CB28                 align 10h
.text:0040CB30
.text:0040CB30 ; =============== S U B R O U T I N E =======================================
.text:0040CB30
.text:0040CB30
.text:0040CB30 sub_40CB30      proc near               ; CODE XREF: .text:0040C430↑p
.text:0040CB30                                         ; sub_40CA20+3↑p ...
.text:0040CB30
.text:0040CB30 lpVersionInformation= dword ptr -0BCh
.text:0040CB30 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:0040CB30
.text:0040CB30                 sub     esp, 0BCh
.text:0040CB36                 mov     edx, ds:dword_4139C0
.text:0040CB3C                 test    edx, edx
.text:0040CB3E                 jz      short loc_40CB50
.text:0040CB40
.text:0040CB40 loc_40CB40:                             ; CODE XREF: sub_40CB30+7B↓j
.text:0040CB40                 mov     edx, 1
.text:0040CB45
.text:0040CB45 loc_40CB45:                             ; CODE XREF: sub_40CB30+217↓j
.text:0040CB45                 mov     eax, edx
.text:0040CB47                 add     esp, 0BCh
.text:0040CB4D                 retn
.text:0040CB4D ; ---------------------------------------------------------------------------
.text:0040CB4E                 align 10h
.text:0040CB50
.text:0040CB50 loc_40CB50:                             ; CODE XREF: sub_40CB30+E↑j
.text:0040CB50                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:0040CB57                 mov     edx, 9Ch ; 'œ'
.text:0040CB5C                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:0040CB62                 call    GetVersionExA
.text:0040CB67                 sub     esp, 4
.text:0040CB6A                 test    eax, eax
.text:0040CB6C                 jz      loc_40CD24
.text:0040CB72
.text:0040CB72 loc_40CB72:                             ; CODE XREF: sub_40CB30+245↓j
.text:0040CB72                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:0040CB79                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0040CB7E                 cmp     eax, 1
.text:0040CB81                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040CB87                 jz      loc_40CC70
.text:0040CB8D                 cmp     eax, 1
.text:0040CB90                 jb      loc_40CC60
.text:0040CB96                 cmp     eax, 2
.text:0040CB99                 jz      short loc_40CBBA
.text:0040CB9B                 cmp     eax, 3
.text:0040CB9E                 jz      short loc_40CBAD
.text:0040CBA0
.text:0040CBA0 loc_40CBA0:                             ; CODE XREF: sub_40CB30+88↓j
.text:0040CBA0                                         ; sub_40CB30+C0↓j ...
.text:0040CBA0                 mov     edx, 1
.text:0040CBA5                 mov     ds:dword_4139C0, edx
.text:0040CBAB                 jmp     short loc_40CB40
.text:0040CBAD ; ---------------------------------------------------------------------------
.text:0040CBAD
.text:0040CBAD loc_40CBAD:                             ; CODE XREF: sub_40CB30+6E↑j
.text:0040CBAD                 mov     ecx, 17h
.text:0040CBB2
.text:0040CBB2 loc_40CBB2:                             ; CODE XREF: sub_40CB30+1A7↓j
.text:0040CBB2                 mov     ds:dword_413910, ecx
.text:0040CBB8                 jmp     short loc_40CBA0
.text:0040CBBA ; ---------------------------------------------------------------------------
.text:0040CBBA
.text:0040CBBA loc_40CBBA:                             ; CODE XREF: sub_40CB30+69↑j
.text:0040CBBA                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0040CBBF                 cmp     eax, 3
.text:0040CBC2                 jz      short loc_40CC3B
.text:0040CBC4                 cmp     eax, 4
.text:0040CBC7                 jz      short loc_40CC2A
.text:0040CBC9
.text:0040CBC9 loc_40CBC9:                             ; CODE XREF: sub_40CB30+102↓j
.text:0040CBC9                 cmp     eax, 4
.text:0040CBCC                 ja      short loc_40CBF2
.text:0040CBCE                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040CBD4                 test    ecx, ecx
.text:0040CBD6                 jnz     short loc_40CBF2
.text:0040CBD8                 mov     edx, 1Eh
.text:0040CBDD
.text:0040CBDD loc_40CBDD:                             ; CODE XREF: sub_40CB30+DF↓j
.text:0040CBDD                 mov     ds:dword_413910, edx
.text:0040CBE3
.text:0040CBE3 loc_40CBE3:                             ; CODE XREF: sub_40CB30+C5↓j
.text:0040CBE3                                         ; sub_40CB30+D8↓j ...
.text:0040CBE3                 movzx   ecx, ds:word_4139B4
.text:0040CBEA                 add     ds:dword_413910, ecx
.text:0040CBF0                 jmp     short loc_40CBA0
.text:0040CBF2 ; ---------------------------------------------------------------------------
.text:0040CBF2
.text:0040CBF2 loc_40CBF2:                             ; CODE XREF: sub_40CB30+9C↑j
.text:0040CBF2                                         ; sub_40CB30+A6↑j
.text:0040CBF2                 cmp     eax, 5
.text:0040CBF5                 jnz     short loc_40CBE3
.text:0040CBF7                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040CBFC                 cmp     eax, 2
.text:0040CBFF                 jz      short loc_40CC1E
.text:0040CC01                 cmp     eax, 1
.text:0040CC04                 jz      short loc_40CC11
.text:0040CC06                 test    eax, eax
.text:0040CC08                 jnz     short loc_40CBE3
.text:0040CC0A                 mov     edx, 32h ; '2'
.text:0040CC0F                 jmp     short loc_40CBDD
.text:0040CC11 ; ---------------------------------------------------------------------------
.text:0040CC11
.text:0040CC11 loc_40CC11:                             ; CODE XREF: sub_40CB30+D4↑j
.text:0040CC11                 mov     ecx, 3Ch ; '<'
.text:0040CC16
.text:0040CC16 loc_40CC16:                             ; CODE XREF: sub_40CB30+122↓j
.text:0040CC16                 mov     ds:dword_413910, ecx
.text:0040CC1C                 jmp     short loc_40CBE3
.text:0040CC1E ; ---------------------------------------------------------------------------
.text:0040CC1E
.text:0040CC1E loc_40CC1E:                             ; CODE XREF: sub_40CB30+CF↑j
.text:0040CC1E                 mov     eax, 46h ; 'F'
.text:0040CC23
.text:0040CC23 loc_40CC23:                             ; CODE XREF: sub_40CB30+109↓j
.text:0040CC23                                         ; sub_40CB30+129↓j
.text:0040CC23                 mov     ds:dword_413910, eax
.text:0040CC28                 jmp     short loc_40CBE3
.text:0040CC2A ; ---------------------------------------------------------------------------
.text:0040CC2A
.text:0040CC2A loc_40CC2A:                             ; CODE XREF: sub_40CB30+97↑j
.text:0040CC2A                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0040CC30                 test    ecx, ecx
.text:0040CC32                 jnz     short loc_40CBC9
.text:0040CC34                 mov     eax, 28h ; '('
.text:0040CC39                 jmp     short loc_40CC23
.text:0040CC3B ; ---------------------------------------------------------------------------
.text:0040CC3B
.text:0040CC3B loc_40CC3B:                             ; CODE XREF: sub_40CB30+92↑j
.text:0040CC3B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040CC40                 cmp     eax, 33h ; '3'
.text:0040CC43                 jz      short loc_40CC54
.text:0040CC45                 cmp     eax, 5
.text:0040CC48                 setz    cl
.text:0040CC4B                 movzx   edx, cl
.text:0040CC4E                 lea     ecx, [edx+edx*4+1Eh]
.text:0040CC52                 jmp     short loc_40CC16
.text:0040CC54 ; ---------------------------------------------------------------------------
.text:0040CC54
.text:0040CC54 loc_40CC54:                             ; CODE XREF: sub_40CB30+113↑j
.text:0040CC54                 mov     eax, 24h ; '$'
.text:0040CC59                 jmp     short loc_40CC23
.text:0040CC59 ; ---------------------------------------------------------------------------
.text:0040CC5B                 align 10h
.text:0040CC60
.text:0040CC60 loc_40CC60:                             ; CODE XREF: sub_40CB30+60↑j
.text:0040CC60                 mov     edx, 2
.text:0040CC65                 mov     ds:dword_413910, edx
.text:0040CC6B                 jmp     loc_40CBA0
.text:0040CC70 ; ---------------------------------------------------------------------------
.text:0040CC70
.text:0040CC70 loc_40CC70:                             ; CODE XREF: sub_40CB30+57↑j
.text:0040CC70                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0040CC76                 cmp     ecx, 4
.text:0040CC79                 jnz     loc_40CBA0
.text:0040CC7F                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040CC84                 test    eax, eax
.text:0040CC86                 jnz     short loc_40CCAA
.text:0040CC88                 mov     eax, 0Ah
.text:0040CC8D                 mov     ds:dword_413910, eax
.text:0040CC92                 lea     eax, [edx-3B7h]
.text:0040CC98                 cmp     eax, 81h
.text:0040CC9D                 ja      short loc_40CD15
.text:0040CC9F                 mov     edx, 0Bh
.text:0040CCA4
.text:0040CCA4 loc_40CCA4:                             ; CODE XREF: sub_40CB30+1F2↓j
.text:0040CCA4                 mov     ds:dword_413910, edx
.text:0040CCAA
.text:0040CCAA loc_40CCAA:                             ; CODE XREF: sub_40CB30+156↑j
.text:0040CCAA                                         ; sub_40CB30+1EB↓j
.text:0040CCAA                 cmp     ecx, 4
.text:0040CCAD                 jnz     loc_40CBA0
.text:0040CCB3                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:0040CCBA                 jz      short loc_40CCDC
.text:0040CCBC
.text:0040CCBC loc_40CCBC:                             ; CODE XREF: sub_40CB30+1D4↓j
.text:0040CCBC                                         ; sub_40CB30+1DC↓j
.text:0040CCBC                 cmp     ecx, 4
.text:0040CCBF                 jnz     loc_40CBA0
.text:0040CCC5                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:0040CCCC                 jnz     loc_40CBA0
.text:0040CCD2                 mov     ecx, 12h
.text:0040CCD7                 jmp     loc_40CBB2
.text:0040CCDC ; ---------------------------------------------------------------------------
.text:0040CCDC
.text:0040CCDC loc_40CCDC:                             ; CODE XREF: sub_40CB30+18A↑j
.text:0040CCDC                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0040CCE2                 mov     eax, 0Eh
.text:0040CCE7                 mov     ds:dword_413910, eax
.text:0040CCEC                 lea     eax, [edx-7CFh]
.text:0040CCF2                 cmp     eax, 0B7h ; '·'
.text:0040CCF7                 ja      short loc_40CD06
.text:0040CCF9                 mov     edx, 0Fh
.text:0040CCFE
.text:0040CCFE loc_40CCFE:                             ; CODE XREF: sub_40CB30+1E3↓j
.text:0040CCFE                 mov     ds:dword_413910, edx
.text:0040CD04                 jmp     short loc_40CCBC
.text:0040CD06 ; ---------------------------------------------------------------------------
.text:0040CD06
.text:0040CD06 loc_40CD06:                             ; CODE XREF: sub_40CB30+1C7↑j
.text:0040CD06                 cmp     edx, 886h
.text:0040CD0C                 jbe     short loc_40CCBC
.text:0040CD0E                 mov     edx, 10h
.text:0040CD13                 jmp     short loc_40CCFE
.text:0040CD15 ; ---------------------------------------------------------------------------
.text:0040CD15
.text:0040CD15 loc_40CD15:                             ; CODE XREF: sub_40CB30+16D↑j
.text:0040CD15                 cmp     edx, 438h
.text:0040CD1B                 jbe     short loc_40CCAA
.text:0040CD1D                 mov     edx, 0Ch
.text:0040CD22                 jmp     short loc_40CCA4
.text:0040CD24 ; ---------------------------------------------------------------------------
.text:0040CD24
.text:0040CD24 loc_40CD24:                             ; CODE XREF: sub_40CB30+3C↑j
.text:0040CD24                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0040CD2C                 xor     edx, edx
.text:0040CD2E                 lea     ecx, [esp+0BCh+VersionInformation]
.text:0040CD32                 mov     dword_412070, edx
.text:0040CD38                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0040CD3B                 call    GetVersionExA
.text:0040CD40                 sub     esp, 4
.text:0040CD43                 xor     edx, edx
.text:0040CD45                 test    eax, eax
.text:0040CD47                 jz      loc_40CB45
.text:0040CD4D                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:0040CD51                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:0040CD55                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0040CD5B                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0040CD5F                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:0040CD65                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:0040CD69                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0040CD6F                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:0040CD75                 jmp     loc_40CB72
.text:0040CD75 sub_40CB30      endp
.text:0040CD75
.text:0040CD75 ; ---------------------------------------------------------------------------
.text:0040CD7A                 align 10h
.text:0040CD80 byte_40CD80     db 0                    ; DATA XREF: .data:Src↓o
.text:0040CD81 byte_40CD81     db 73h, 68h, 0          ; DATA XREF: .data:off_412084↓o
.text:0040CD84 ; const char aHome[]
.text:0040CD84 aHome           db 'HOME',0             ; DATA XREF: sub_40CDA0+96↓o
.text:0040CD89 ; const char aShell[]
.text:0040CD89 aShell          db 'SHELL',0            ; DATA XREF: sub_40CDA0+E2↓o
.text:0040CD8F ; const char aComspec[]
.text:0040CD8F aComspec        db 'COMSPEC',0          ; DATA XREF: sub_40CDA0:loc_40CF64↓o
.text:0040CD97 aC_0            db 'C:/',0              ; DATA XREF: sub_40CDA0:loc_40CF85↓o
.text:0040CD9B                 align 10h
.text:0040CDA0
.text:0040CDA0 ; =============== S U B R O U T I N E =======================================
.text:0040CDA0
.text:0040CDA0
.text:0040CDA0 ; int __cdecl sub_40CDA0(char *, int, char *, int, int)
.text:0040CDA0 sub_40CDA0      proc near               ; CODE XREF: sub_40BB70+2F↑p
.text:0040CDA0
.text:0040CDA0 Str             = dword ptr -1Ch
.text:0040CDA0 Src             = dword ptr -18h
.text:0040CDA0 Size            = dword ptr -14h
.text:0040CDA0 var_10          = dword ptr -10h
.text:0040CDA0 var_C           = dword ptr -0Ch
.text:0040CDA0 var_8           = dword ptr -8
.text:0040CDA0 var_4           = dword ptr -4
.text:0040CDA0 arg_0           = dword ptr  4
.text:0040CDA0 arg_4           = dword ptr  8
.text:0040CDA0 arg_8           = dword ptr  0Ch
.text:0040CDA0 arg_C           = dword ptr  10h
.text:0040CDA0 arg_10          = dword ptr  14h
.text:0040CDA0
.text:0040CDA0                 sub     esp, 1Ch
.text:0040CDA3                 mov     eax, [esp+1Ch+arg_0]
.text:0040CDA7                 mov     [esp+1Ch+var_10], ebx
.text:0040CDAB                 mov     [esp+1Ch+var_C], esi
.text:0040CDAF                 test    eax, eax
.text:0040CDB1                 mov     [esp+1Ch+var_8], edi
.text:0040CDB5                 mov     [esp+1Ch+var_4], ebp
.text:0040CDB9                 jz      short loc_40CDC8
.text:0040CDBB                 cmp     byte ptr [eax], 0
.text:0040CDBE                 jz      short loc_40CDC8
.text:0040CDC0                 mov     ecx, [esp+1Ch+arg_C]
.text:0040CDC4                 test    ecx, ecx
.text:0040CDC6                 jnz     short loc_40CDF0
.text:0040CDC8
.text:0040CDC8 loc_40CDC8:                             ; CODE XREF: sub_40CDA0+19↑j
.text:0040CDC8                                         ; sub_40CDA0+1E↑j ...
.text:0040CDC8                 call    _errno
.text:0040CDCD                 mov     dword ptr [eax], 22h ; '"'
.text:0040CDD3                 mov     eax, 0FFFFFFFFh
.text:0040CDD8
.text:0040CDD8 loc_40CDD8:                             ; CODE XREF: sub_40CDA0+1BF↓j
.text:0040CDD8                 mov     ebx, [esp+1Ch+var_10]
.text:0040CDDC                 mov     esi, [esp+1Ch+var_C]
.text:0040CDE0                 mov     edi, [esp+1Ch+var_8]
.text:0040CDE4                 mov     ebp, [esp+1Ch+var_4]
.text:0040CDE8                 add     esp, 1Ch
.text:0040CDEB                 retn
.text:0040CDEB ; ---------------------------------------------------------------------------
.text:0040CDEC                 align 10h
.text:0040CDF0
.text:0040CDF0 loc_40CDF0:                             ; CODE XREF: sub_40CDA0+26↑j
.text:0040CDF0                 mov     [esp+1Ch+Str], eax ; Str
.text:0040CDF3                 mov     ebx, eax
.text:0040CDF5                 call    strlen
.text:0040CDFA                 lea     esi, [eax+1]
.text:0040CDFD                 cmp     esi, [esp+1Ch+arg_C]
.text:0040CE01                 ja      short loc_40CDC8
.text:0040CE03                 mov     [esp+1Ch+Src], ebx ; Src
.text:0040CE07                 mov     edx, [esp+1Ch+arg_8]
.text:0040CE0B                 mov     [esp+1Ch+Size], esi ; Size
.text:0040CE0F                 mov     [esp+1Ch+Str], edx ; void *
.text:0040CE12                 call    memcpy
.text:0040CE17                 mov     ebp, [esp+1Ch+arg_4]
.text:0040CE1B                 mov     [ebp+0], eax
.text:0040CE1E                 call    sub_40DDE0
.text:0040CE23                 mov     edi, [esp+1Ch+arg_4]
.text:0040CE27                 mov     [edi+8], eax
.text:0040CE2A                 call    sub_40DDD0
.text:0040CE2F                 mov     ebx, [esp+1Ch+arg_4]
.text:0040CE33                 mov     [ebx+0Ch], eax
.text:0040CE36                 mov     [esp+1Ch+Str], offset aHome ; "HOME"
.text:0040CE3D                 call    getenv
.text:0040CE42                 test    eax, eax
.text:0040CE44                 mov     ebx, eax
.text:0040CE46                 jz      loc_40CF85
.text:0040CE4C
.text:0040CE4C loc_40CE4C:                             ; CODE XREF: sub_40CDA0+1EA↓j
.text:0040CE4C                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040CE4F                 call    strlen
.text:0040CE54                 lea     ebp, [eax+esi+1]
.text:0040CE58                 cmp     ebp, [esp+1Ch+arg_C]
.text:0040CE5C                 ja      loc_40CDC8
.text:0040CE62                 mov     [esp+1Ch+Src], ebx ; Src
.text:0040CE66                 mov     ecx, [esp+1Ch+arg_8]
.text:0040CE6A                 lea     edi, [eax+1]
.text:0040CE6D                 mov     [esp+1Ch+Size], edi ; Size
.text:0040CE71                 add     ecx, esi
.text:0040CE73                 mov     [esp+1Ch+Str], ecx ; void *
.text:0040CE76                 call    memcpy
.text:0040CE7B                 mov     esi, [esp+1Ch+arg_4]
.text:0040CE7F                 mov     [esi+14h], eax
.text:0040CE82                 mov     [esp+1Ch+Str], offset aShell ; "SHELL"
.text:0040CE89                 call    getenv
.text:0040CE8E                 test    eax, eax
.text:0040CE90                 mov     ebx, eax
.text:0040CE92                 jz      loc_40CF64
.text:0040CE98
.text:0040CE98 loc_40CE98:                             ; CODE XREF: sub_40CDA0+1D4↓j
.text:0040CE98                                         ; sub_40CDA0+1E0↓j
.text:0040CE98                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040CE9B                 call    strlen
.text:0040CEA0                 lea     edi, [eax+ebp+1]
.text:0040CEA4                 cmp     edi, [esp+1Ch+arg_C]
.text:0040CEA8                 ja      loc_40CDC8
.text:0040CEAE                 mov     [esp+1Ch+Src], ebx ; Src
.text:0040CEB2                 mov     esi, [esp+1Ch+arg_8]
.text:0040CEB6                 lea     ecx, [eax+1]
.text:0040CEB9                 mov     [esp+1Ch+Size], ecx ; Size
.text:0040CEBD                 add     esi, ebp
.text:0040CEBF                 mov     [esp+1Ch+Str], esi ; void *
.text:0040CEC2                 call    memcpy
.text:0040CEC7                 mov     ebx, [esp+1Ch+arg_4]
.text:0040CECB                 mov     [ebx+18h], eax
.text:0040CECE                 call    sub_40CF90
.text:0040CED3                 mov     [esp+1Ch+Str], eax ; Str
.text:0040CED6                 mov     ebx, eax
.text:0040CED8                 call    strlen
.text:0040CEDD                 lea     esi, [eax+edi+1]
.text:0040CEE1                 cmp     esi, [esp+1Ch+arg_C]
.text:0040CEE5                 ja      loc_40CDC8
.text:0040CEEB                 mov     [esp+1Ch+Src], ebx ; Src
.text:0040CEEF                 mov     ecx, [esp+1Ch+arg_8]
.text:0040CEF3                 lea     ebp, [eax+1]
.text:0040CEF6                 mov     [esp+1Ch+Size], ebp ; Size
.text:0040CEFA                 add     ecx, edi
.text:0040CEFC                 mov     [esp+1Ch+Str], ecx ; void *
.text:0040CEFF                 call    memcpy
.text:0040CF04                 mov     edi, [esp+1Ch+arg_4]
.text:0040CF08                 mov     ebx, Src
.text:0040CF0E                 mov     [edi+10h], eax
.text:0040CF11                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040CF14                 call    strlen
.text:0040CF19                 lea     ebp, [eax+esi+1]
.text:0040CF1D                 cmp     ebp, [esp+1Ch+arg_C]
.text:0040CF21                 ja      loc_40CDC8
.text:0040CF27                 mov     [esp+1Ch+Src], ebx ; Src
.text:0040CF2B                 mov     edi, [esp+1Ch+arg_8]
.text:0040CF2F                 lea     ecx, [eax+1]
.text:0040CF32                 mov     [esp+1Ch+Size], ecx ; Size
.text:0040CF36                 add     edi, esi
.text:0040CF38                 mov     [esp+1Ch+Str], edi ; void *
.text:0040CF3B                 call    memcpy
.text:0040CF40                 mov     esi, [esp+1Ch+arg_4]
.text:0040CF44                 mov     [esi+4], eax
.text:0040CF47                 mov     edx, [esp+1Ch+arg_8]
.text:0040CF4B                 mov     [esp+1Ch+Str], edx ; Str
.text:0040CF4E                 call    strlen
.text:0040CF53                 mov     eax, [esp+1Ch+arg_4]
.text:0040CF57                 mov     ebx, [esp+1Ch+arg_10]
.text:0040CF5B                 mov     [ebx], eax
.text:0040CF5D                 xor     eax, eax
.text:0040CF5F                 jmp     loc_40CDD8
.text:0040CF64 ; ---------------------------------------------------------------------------
.text:0040CF64
.text:0040CF64 loc_40CF64:                             ; CODE XREF: sub_40CDA0+F2↑j
.text:0040CF64                 mov     [esp+1Ch+Str], offset aComspec ; "COMSPEC"
.text:0040CF6B                 call    getenv
.text:0040CF70                 test    eax, eax
.text:0040CF72                 mov     ebx, eax
.text:0040CF74                 jnz     loc_40CE98
.text:0040CF7A                 mov     ebx, off_412084
.text:0040CF80                 jmp     loc_40CE98
.text:0040CF85 ; ---------------------------------------------------------------------------
.text:0040CF85
.text:0040CF85 loc_40CF85:                             ; CODE XREF: sub_40CDA0+A6↑j
.text:0040CF85                 mov     ebx, offset aC_0 ; "C:/"
.text:0040CF8A                 jmp     loc_40CE4C
.text:0040CF8A sub_40CDA0      endp
.text:0040CF8A
.text:0040CF8A ; ---------------------------------------------------------------------------
.text:0040CF8F                 align 10h
.text:0040CF90
.text:0040CF90 ; =============== S U B R O U T I N E =======================================
.text:0040CF90
.text:0040CF90
.text:0040CF90 sub_40CF90      proc near               ; CODE XREF: sub_40BB70+B↑p
.text:0040CF90                                         ; sub_40CDA0+12E↑p
.text:0040CF90
.text:0040CF90 lpBuffer        = dword ptr -1Ch
.text:0040CF90 pcbBuffer       = dword ptr -18h
.text:0040CF90 var_8           = dword ptr -8
.text:0040CF90 var_4           = dword ptr -4
.text:0040CF90
.text:0040CF90                 sub     esp, 1Ch
.text:0040CF93                 lea     edx, [esp+1Ch+var_8]
.text:0040CF97                 mov     [esp+1Ch+pcbBuffer], edx ; pcbBuffer
.text:0040CF9B                 mov     [esp+1Ch+var_4], ebx
.text:0040CF9F                 mov     [esp+1Ch+var_8], 101h
.text:0040CFA7                 mov     [esp+1Ch+lpBuffer], offset byte_4139D0 ; lpBuffer
.text:0040CFAE                 call    GetUserNameA
.text:0040CFB3                 sub     esp, 8
.text:0040CFB6                 mov     edx, offset byte_4139D0
.text:0040CFBB                 test    eax, eax
.text:0040CFBD                 jz      short loc_40CFC9
.text:0040CFBF
.text:0040CFBF loc_40CFBF:                             ; CODE XREF: sub_40CF90+49↓j
.text:0040CFBF                 mov     ebx, [esp+1Ch+var_4]
.text:0040CFC3                 mov     eax, edx
.text:0040CFC5                 add     esp, 1Ch
.text:0040CFC8                 retn
.text:0040CFC9 ; ---------------------------------------------------------------------------
.text:0040CFC9
.text:0040CFC9 loc_40CFC9:                             ; CODE XREF: sub_40CF90+2D↑j
.text:0040CFC9                 call    sub_40B2D0
.text:0040CFCE                 mov     ebx, eax
.text:0040CFD0                 call    _errno
.text:0040CFD5                 mov     [eax], ebx
.text:0040CFD7                 xor     edx, edx
.text:0040CFD9                 jmp     short loc_40CFBF
.text:0040CFD9 sub_40CF90      endp
.text:0040CFD9
.text:0040CFD9 ; ---------------------------------------------------------------------------
.text:0040CFDB                 align 10h
.text:0040CFE0 aNotset         db 'notset',0           ; DATA XREF: .data:off_412090↓o
.text:0040CFE0                                         ; .data:off_412094↓o
.text:0040CFE7 ; ---------------------------------------------------------------------------
.text:0040CFE7
.text:0040CFE7 loc_40CFE7:                             ; DATA XREF: .text:loc_40D085↓o
.text:0040CFE7                 jb      short loc_40D060
.text:0040CFE9                 add     [eax], ah
.text:0040CFEB                 or      [eax], eax
.text:0040CFED
.text:0040CFED loc_40CFED:                             ; DATA XREF: .text:0040D0D8↓o
.text:0040CFED                                         ; .text:0040D13E↓o ...
.text:0040CFED                 add     [eax], ah
.text:0040CFEF                 and     eax, 64252064h
.text:0040CFF4                 and     [eax], al
.text:0040CFF6                 lea     esi, [esi+0]
.text:0040CFF9                 lea     edi, [edi+0]
.text:0040D000                 push    ebp
.text:0040D001                 push    edi
.text:0040D002                 push    esi
.text:0040D003                 push    ebx
.text:0040D004                 sub     esp, 14Ch
.text:0040D00A                 mov     edx, off_412090 ; "notset"
.text:0040D010                 mov     edi, [esp+164h]
.text:0040D017                 mov     ebp, [esp+168h]
.text:0040D01E                 mov     [esp+4], edx
.text:0040D022                 mov     edx, off_412094 ; "notset"
.text:0040D028                 mov     [esp], edx
.text:0040D02B                 call    strcmp
.text:0040D030                 test    eax, eax
.text:0040D032                 jz      loc_40D420
.text:0040D038
.text:0040D038 loc_40D038:                             ; CODE XREF: .text:0040D46C↓j
.text:0040D038                 lea     ebx, [esp+20h]
.text:0040D03C                 lea     esi, [esi+0]
.text:0040D040
.text:0040D040 loc_40D040:                             ; CODE XREF: .text:0040D076↓j
.text:0040D040                 mov     [esp+4], ebx
.text:0040D044                 mov     ecx, off_412094 ; "notset"
.text:0040D04A                 mov     [esp], ecx
.text:0040D04D                 call    sub_40B970
.text:0040D052                 test    eax, eax
.text:0040D054                 jns     short loc_40D085
.text:0040D056                 mov     eax, off_412094 ; "notset"
.text:0040D05B                 cmp     byte ptr [eax], 0
.text:0040D05E                 jz      short loc_40D078
.text:0040D060
.text:0040D060 loc_40D060:                             ; CODE XREF: .text:loc_40CFE7↑j
.text:0040D060                 mov     dword ptr [esp+4], 0
.text:0040D068                 mov     [esp], eax
.text:0040D06B                 call    strchr
.text:0040D070                 inc     eax
.text:0040D071                 mov     off_412094, eax ; "notset"
.text:0040D076                 jmp     short loc_40D040
.text:0040D078 ; ---------------------------------------------------------------------------
.text:0040D078
.text:0040D078 loc_40D078:                             ; CODE XREF: .text:0040D05E↑j
.text:0040D078                 xor     eax, eax
.text:0040D07A
.text:0040D07A loc_40D07A:                             ; CODE XREF: .text:0040D23C↓j
.text:0040D07A                 add     esp, 14Ch
.text:0040D080                 pop     ebx
.text:0040D081                 pop     esi
.text:0040D082                 pop     edi
.text:0040D083                 pop     ebp
.text:0040D084                 retn
.text:0040D085 ; ---------------------------------------------------------------------------
.text:0040D085
.text:0040D085 loc_40D085:                             ; CODE XREF: .text:0040D054↑j
.text:0040D085                 mov     dword ptr [edi+0Ch], offset loc_40CFE7
.text:0040D08C                 lea     ecx, [esp+0D6h]
.text:0040D093                 lea     edx, [esp+6Ch]
.text:0040D097                 mov     [edi+4], ecx
.text:0040D09A                 lea     ebx, [esp+7Ch]
.text:0040D09E                 mov     [edi+8], edx
.text:0040D0A1                 mov     [edi], ebx
.text:0040D0A3                 mov     [esp], ebp
.text:0040D0A6                 mov     [esp+4], edi
.text:0040D0AA                 call    ___addmntentstr
.text:0040D0AF                 mov     [esp], ebp
.text:0040D0B2                 mov     dword ptr [esp+4], 40CFEAh
.text:0040D0BA                 call    strspn
.text:0040D0BF                 mov     dword ptr [esp+4], 0
.text:0040D0C7                 mov     ebx, off_412094 ; "notset"
.text:0040D0CD                 lea     esi, [eax+ebp]
.text:0040D0D0                 mov     [esp+1Ch], esi
.text:0040D0D4                 lea     ebp, [esp+1Ch]
.text:0040D0D8                 mov     esi, offset loc_40CFED
.text:0040D0DD                 mov     [esp], ebx
.text:0040D0E0                 call    strchr
.text:0040D0E5                 mov     dword ptr [esp+4], 40CFEAh
.text:0040D0ED                 inc     eax
.text:0040D0EE                 mov     off_412094, eax ; "notset"
.text:0040D0F3                 mov     [esp], ebp
.text:0040D0F6                 call    sub_40DE60
.text:0040D0FB                 test    eax, eax
.text:0040D0FD                 mov     ebx, eax
.text:0040D0FF                 jz      short loc_40D128
.text:0040D101                 mov     edx, eax
.text:0040D103                 mov     ecx, eax
.text:0040D105                 lea     esi, [esi+0]
.text:0040D109                 lea     edi, [edi+0]
.text:0040D110
.text:0040D110 loc_40D110:                             ; CODE XREF: .text:0040D126↓j
.text:0040D110                 movzx   eax, byte ptr [edx]
.text:0040D113                 cmp     al, 5Ch ; '\'
.text:0040D115                 jz      loc_40D3C4
.text:0040D11B
.text:0040D11B loc_40D11B:                             ; CODE XREF: .text:0040D3CC↓j
.text:0040D11B                                         ; .text:0040D3DA↓j ...
.text:0040D11B                 mov     [ecx], al
.text:0040D11D
.text:0040D11D loc_40D11D:                             ; CODE XREF: .text:0040D3EE↓j
.text:0040D11D                 inc     ecx
.text:0040D11E
.text:0040D11E loc_40D11E:                             ; CODE XREF: .text:0040D406↓j
.text:0040D11E                 movzx   eax, byte ptr [edx]
.text:0040D121                 mov     esi, ebx
.text:0040D123                 inc     edx
.text:0040D124                 test    al, al
.text:0040D126                 jnz     short loc_40D110
.text:0040D128
.text:0040D128 loc_40D128:                             ; CODE XREF: .text:0040D0FF↑j
.text:0040D128                 mov     [edi], esi
.text:0040D12A                 mov     eax, [esp+1Ch]
.text:0040D12E                 test    eax, eax
.text:0040D130                 jnz     loc_40D3AB
.text:0040D136
.text:0040D136 loc_40D136:                             ; CODE XREF: .text:0040D3BF↓j
.text:0040D136                 mov     dword ptr [esp+4], 40CFEAh
.text:0040D13E                 mov     esi, offset loc_40CFED
.text:0040D143                 mov     [esp], ebp
.text:0040D146                 call    sub_40DE60
.text:0040D14B                 test    eax, eax
.text:0040D14D                 mov     ebx, eax
.text:0040D14F                 jz      short loc_40D178
.text:0040D151                 mov     edx, eax
.text:0040D153                 mov     ecx, eax
.text:0040D155                 lea     esi, [esi+0]
.text:0040D159                 lea     edi, [edi+0]
.text:0040D160
.text:0040D160 loc_40D160:                             ; CODE XREF: .text:0040D176↓j
.text:0040D160                 movzx   eax, byte ptr [edx]
.text:0040D163                 cmp     al, 5Ch ; '\'
.text:0040D165                 jz      loc_40D353
.text:0040D16B
.text:0040D16B loc_40D16B:                             ; CODE XREF: .text:0040D35B↓j
.text:0040D16B                                         ; .text:0040D369↓j ...
.text:0040D16B                 mov     [ecx], al
.text:0040D16D
.text:0040D16D loc_40D16D:                             ; CODE XREF: .text:0040D37D↓j
.text:0040D16D                 inc     ecx
.text:0040D16E
.text:0040D16E loc_40D16E:                             ; CODE XREF: .text:0040D395↓j
.text:0040D16E                 movzx   eax, byte ptr [edx]
.text:0040D171                 mov     esi, ebx
.text:0040D173                 inc     edx
.text:0040D174                 test    al, al
.text:0040D176                 jnz     short loc_40D160
.text:0040D178
.text:0040D178 loc_40D178:                             ; CODE XREF: .text:0040D14F↑j
.text:0040D178                 mov     [edi+4], esi
.text:0040D17B                 mov     eax, [esp+1Ch]
.text:0040D17F                 test    eax, eax
.text:0040D181                 jnz     loc_40D33A
.text:0040D187
.text:0040D187 loc_40D187:                             ; CODE XREF: .text:0040D34E↓j
.text:0040D187                 mov     dword ptr [esp+4], 40CFEAh
.text:0040D18F                 mov     esi, offset loc_40CFED
.text:0040D194                 mov     [esp], ebp
.text:0040D197                 call    sub_40DE60
.text:0040D19C                 test    eax, eax
.text:0040D19E                 mov     ebx, eax
.text:0040D1A0                 jz      short loc_40D1C8
.text:0040D1A2                 mov     edx, eax
.text:0040D1A4                 mov     ecx, eax
.text:0040D1A6                 lea     esi, [esi+0]
.text:0040D1A9                 lea     edi, [edi+0]
.text:0040D1B0
.text:0040D1B0 loc_40D1B0:                             ; CODE XREF: .text:0040D1C6↓j
.text:0040D1B0                 movzx   eax, byte ptr [edx]
.text:0040D1B3                 cmp     al, 5Ch ; '\'
.text:0040D1B5                 jz      loc_40D2E2
.text:0040D1BB
.text:0040D1BB loc_40D1BB:                             ; CODE XREF: .text:0040D2EA↓j
.text:0040D1BB                                         ; .text:0040D2F8↓j ...
.text:0040D1BB                 mov     [ecx], al
.text:0040D1BD
.text:0040D1BD loc_40D1BD:                             ; CODE XREF: .text:0040D30C↓j
.text:0040D1BD                 inc     ecx
.text:0040D1BE
.text:0040D1BE loc_40D1BE:                             ; CODE XREF: .text:0040D324↓j
.text:0040D1BE                 movzx   eax, byte ptr [edx]
.text:0040D1C1                 mov     esi, ebx
.text:0040D1C3                 inc     edx
.text:0040D1C4                 test    al, al
.text:0040D1C6                 jnz     short loc_40D1B0
.text:0040D1C8
.text:0040D1C8 loc_40D1C8:                             ; CODE XREF: .text:0040D1A0↑j
.text:0040D1C8                 mov     [edi+8], esi
.text:0040D1CB                 mov     eax, [esp+1Ch]
.text:0040D1CF                 test    eax, eax
.text:0040D1D1                 jnz     loc_40D2C9
.text:0040D1D7
.text:0040D1D7 loc_40D1D7:                             ; CODE XREF: .text:0040D2DD↓j
.text:0040D1D7                 mov     dword ptr [esp+4], 40CFEAh
.text:0040D1DF                 mov     esi, offset loc_40CFED
.text:0040D1E4                 mov     [esp], ebp
.text:0040D1E7                 call    sub_40DE60
.text:0040D1EC                 test    eax, eax
.text:0040D1EE                 mov     ebx, eax
.text:0040D1F0                 jz      short loc_40D214
.text:0040D1F2                 mov     edx, eax
.text:0040D1F4                 mov     ecx, eax
.text:0040D1F6                 lea     esi, [esi+0]
.text:0040D1F9                 lea     edi, [edi+0]
.text:0040D200
.text:0040D200 loc_40D200:                             ; CODE XREF: .text:0040D212↓j
.text:0040D200                 movzx   eax, byte ptr [edx]
.text:0040D203                 cmp     al, 5Ch ; '\'
.text:0040D205                 jz      short loc_40D275
.text:0040D207
.text:0040D207 loc_40D207:                             ; CODE XREF: .text:0040D27D↓j
.text:0040D207                                         ; .text:0040D287↓j ...
.text:0040D207                 mov     [ecx], al
.text:0040D209
.text:0040D209 loc_40D209:                             ; CODE XREF: .text:0040D29B↓j
.text:0040D209                 inc     ecx
.text:0040D20A
.text:0040D20A loc_40D20A:                             ; CODE XREF: .text:0040D2B3↓j
.text:0040D20A                 movzx   eax, byte ptr [edx]
.text:0040D20D                 mov     esi, ebx
.text:0040D20F                 inc     edx
.text:0040D210                 test    al, al
.text:0040D212                 jnz     short loc_40D200
.text:0040D214
.text:0040D214 loc_40D214:                             ; CODE XREF: .text:0040D1F0↑j
.text:0040D214                 mov     [edi+0Ch], esi
.text:0040D217                 xor     eax, eax
.text:0040D219                 mov     edx, [esp+1Ch]
.text:0040D21D                 test    edx, edx
.text:0040D21F                 jnz     short loc_40D255
.text:0040D221
.text:0040D221 loc_40D221:                             ; CODE XREF: .text:0040D273↓j
.text:0040D221                 cmp     eax, 1
.text:0040D224                 jz      short loc_40D24C
.text:0040D226                 cmp     eax, 1
.text:0040D229                 jle     short loc_40D241
.text:0040D22B
.text:0040D22B loc_40D22B:                             ; CODE XREF: .text:0040D243↓j
.text:0040D22B                                         ; .text:0040D253↓j
.text:0040D22B                 mov     edx, [esp+160h]
.text:0040D232                 mov     [esp], edx
.text:0040D235                 call    sub_40DE00
.text:0040D23A                 mov     eax, edi
.text:0040D23C                 jmp     loc_40D07A
.text:0040D241 ; ---------------------------------------------------------------------------
.text:0040D241
.text:0040D241 loc_40D241:                             ; CODE XREF: .text:0040D229↑j
.text:0040D241                 test    eax, eax
.text:0040D243                 jnz     short loc_40D22B
.text:0040D245                 mov     dword ptr [edi+10h], 0
.text:0040D24C
.text:0040D24C loc_40D24C:                             ; CODE XREF: .text:0040D224↑j
.text:0040D24C                 mov     dword ptr [edi+14h], 0
.text:0040D253                 jmp     short loc_40D22B
.text:0040D255 ; ---------------------------------------------------------------------------
.text:0040D255
.text:0040D255 loc_40D255:                             ; CODE XREF: .text:0040D21F↑j
.text:0040D255                 mov     dword ptr [esp+4], 40CFEEh
.text:0040D25D                 lea     esi, [edi+14h]
.text:0040D260                 lea     ebp, [edi+10h]
.text:0040D263                 mov     [esp+0Ch], esi
.text:0040D267                 mov     [esp+8], ebp
.text:0040D26B                 mov     [esp], edx
.text:0040D26E                 call    sscanf
.text:0040D273                 jmp     short loc_40D221
.text:0040D275 ; ---------------------------------------------------------------------------
.text:0040D275
.text:0040D275 loc_40D275:                             ; CODE XREF: .text:0040D205↑j
.text:0040D275                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040D279                 jz      short loc_40D2B8
.text:0040D27B
.text:0040D27B loc_40D27B:                             ; CODE XREF: .text:0040D2BC↓j
.text:0040D27B                                         ; .text:0040D2C2↓j
.text:0040D27B                 cmp     al, 5Ch ; '\'
.text:0040D27D                 jnz     short loc_40D207
.text:0040D27F                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040D283                 jz      short loc_40D2A0
.text:0040D285
.text:0040D285 loc_40D285:                             ; CODE XREF: .text:0040D2A4↓j
.text:0040D285                                         ; .text:0040D2AA↓j
.text:0040D285                 cmp     al, 5Ch ; '\'
.text:0040D287                 jnz     loc_40D207
.text:0040D28D                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040D291                 jnz     loc_40D207
.text:0040D297                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040D29A                 inc     edx
.text:0040D29B                 jmp     loc_40D209
.text:0040D2A0 ; ---------------------------------------------------------------------------
.text:0040D2A0
.text:0040D2A0 loc_40D2A0:                             ; CODE XREF: .text:0040D283↑j
.text:0040D2A0                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040D2A4                 jnz     short loc_40D285
.text:0040D2A6                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040D2AA                 jnz     short loc_40D285
.text:0040D2AC                 mov     byte ptr [ecx], 9
.text:0040D2AF
.text:0040D2AF loc_40D2AF:                             ; CODE XREF: .text:0040D2C7↓j
.text:0040D2AF                 inc     ecx
.text:0040D2B0                 add     edx, 3
.text:0040D2B3                 jmp     loc_40D20A
.text:0040D2B8 ; ---------------------------------------------------------------------------
.text:0040D2B8
.text:0040D2B8 loc_40D2B8:                             ; CODE XREF: .text:0040D279↑j
.text:0040D2B8                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040D2BC                 jnz     short loc_40D27B
.text:0040D2BE                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040D2C2                 jnz     short loc_40D27B
.text:0040D2C4                 mov     byte ptr [ecx], 20h ; ' '
.text:0040D2C7                 jmp     short loc_40D2AF
.text:0040D2C9 ; ---------------------------------------------------------------------------
.text:0040D2C9
.text:0040D2C9 loc_40D2C9:                             ; CODE XREF: .text:0040D1D1↑j
.text:0040D2C9                 mov     dword ptr [esp+4], 40CFEAh
.text:0040D2D1                 mov     [esp], eax
.text:0040D2D4                 call    strspn
.text:0040D2D9                 add     [esp+1Ch], eax
.text:0040D2DD                 jmp     loc_40D1D7
.text:0040D2E2 ; ---------------------------------------------------------------------------
.text:0040D2E2
.text:0040D2E2 loc_40D2E2:                             ; CODE XREF: .text:0040D1B5↑j
.text:0040D2E2                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040D2E6                 jz      short loc_40D329
.text:0040D2E8
.text:0040D2E8 loc_40D2E8:                             ; CODE XREF: .text:0040D32D↓j
.text:0040D2E8                                         ; .text:0040D333↓j
.text:0040D2E8                 cmp     al, 5Ch ; '\'
.text:0040D2EA                 jnz     loc_40D1BB
.text:0040D2F0                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040D2F4                 jz      short loc_40D311
.text:0040D2F6
.text:0040D2F6 loc_40D2F6:                             ; CODE XREF: .text:0040D315↓j
.text:0040D2F6                                         ; .text:0040D31B↓j
.text:0040D2F6                 cmp     al, 5Ch ; '\'
.text:0040D2F8                 jnz     loc_40D1BB
.text:0040D2FE                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040D302                 jnz     loc_40D1BB
.text:0040D308                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040D30B                 inc     edx
.text:0040D30C                 jmp     loc_40D1BD
.text:0040D311 ; ---------------------------------------------------------------------------
.text:0040D311
.text:0040D311 loc_40D311:                             ; CODE XREF: .text:0040D2F4↑j
.text:0040D311                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040D315                 jnz     short loc_40D2F6
.text:0040D317                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040D31B                 jnz     short loc_40D2F6
.text:0040D31D                 mov     byte ptr [ecx], 9
.text:0040D320
.text:0040D320 loc_40D320:                             ; CODE XREF: .text:0040D338↓j
.text:0040D320                 inc     ecx
.text:0040D321                 add     edx, 3
.text:0040D324                 jmp     loc_40D1BE
.text:0040D329 ; ---------------------------------------------------------------------------
.text:0040D329
.text:0040D329 loc_40D329:                             ; CODE XREF: .text:0040D2E6↑j
.text:0040D329                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040D32D                 jnz     short loc_40D2E8
.text:0040D32F                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040D333                 jnz     short loc_40D2E8
.text:0040D335                 mov     byte ptr [ecx], 20h ; ' '
.text:0040D338                 jmp     short loc_40D320
.text:0040D33A ; ---------------------------------------------------------------------------
.text:0040D33A
.text:0040D33A loc_40D33A:                             ; CODE XREF: .text:0040D181↑j
.text:0040D33A                 mov     dword ptr [esp+4], 40CFEAh
.text:0040D342                 mov     [esp], eax
.text:0040D345                 call    strspn
.text:0040D34A                 add     [esp+1Ch], eax
.text:0040D34E                 jmp     loc_40D187
.text:0040D353 ; ---------------------------------------------------------------------------
.text:0040D353
.text:0040D353 loc_40D353:                             ; CODE XREF: .text:0040D165↑j
.text:0040D353                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040D357                 jz      short loc_40D39A
.text:0040D359
.text:0040D359 loc_40D359:                             ; CODE XREF: .text:0040D39E↓j
.text:0040D359                                         ; .text:0040D3A4↓j
.text:0040D359                 cmp     al, 5Ch ; '\'
.text:0040D35B                 jnz     loc_40D16B
.text:0040D361                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040D365                 jz      short loc_40D382
.text:0040D367
.text:0040D367 loc_40D367:                             ; CODE XREF: .text:0040D386↓j
.text:0040D367                                         ; .text:0040D38C↓j
.text:0040D367                 cmp     al, 5Ch ; '\'
.text:0040D369                 jnz     loc_40D16B
.text:0040D36F                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040D373                 jnz     loc_40D16B
.text:0040D379                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040D37C                 inc     edx
.text:0040D37D                 jmp     loc_40D16D
.text:0040D382 ; ---------------------------------------------------------------------------
.text:0040D382
.text:0040D382 loc_40D382:                             ; CODE XREF: .text:0040D365↑j
.text:0040D382                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040D386                 jnz     short loc_40D367
.text:0040D388                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040D38C                 jnz     short loc_40D367
.text:0040D38E                 mov     byte ptr [ecx], 9
.text:0040D391
.text:0040D391 loc_40D391:                             ; CODE XREF: .text:0040D3A9↓j
.text:0040D391                 inc     ecx
.text:0040D392                 add     edx, 3
.text:0040D395                 jmp     loc_40D16E
.text:0040D39A ; ---------------------------------------------------------------------------
.text:0040D39A
.text:0040D39A loc_40D39A:                             ; CODE XREF: .text:0040D357↑j
.text:0040D39A                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040D39E                 jnz     short loc_40D359
.text:0040D3A0                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040D3A4                 jnz     short loc_40D359
.text:0040D3A6                 mov     byte ptr [ecx], 20h ; ' '
.text:0040D3A9                 jmp     short loc_40D391
.text:0040D3AB ; ---------------------------------------------------------------------------
.text:0040D3AB
.text:0040D3AB loc_40D3AB:                             ; CODE XREF: .text:0040D130↑j
.text:0040D3AB                 mov     dword ptr [esp+4], 40CFEAh
.text:0040D3B3                 mov     [esp], eax
.text:0040D3B6                 call    strspn
.text:0040D3BB                 add     [esp+1Ch], eax
.text:0040D3BF                 jmp     loc_40D136
.text:0040D3C4 ; ---------------------------------------------------------------------------
.text:0040D3C4
.text:0040D3C4 loc_40D3C4:                             ; CODE XREF: .text:0040D115↑j
.text:0040D3C4                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040D3C8                 jz      short loc_40D40B
.text:0040D3CA
.text:0040D3CA loc_40D3CA:                             ; CODE XREF: .text:0040D40F↓j
.text:0040D3CA                                         ; .text:0040D415↓j
.text:0040D3CA                 cmp     al, 5Ch ; '\'
.text:0040D3CC                 jnz     loc_40D11B
.text:0040D3D2                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040D3D6                 jz      short loc_40D3F3
.text:0040D3D8
.text:0040D3D8 loc_40D3D8:                             ; CODE XREF: .text:0040D3F7↓j
.text:0040D3D8                                         ; .text:0040D3FD↓j
.text:0040D3D8                 cmp     al, 5Ch ; '\'
.text:0040D3DA                 jnz     loc_40D11B
.text:0040D3E0                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040D3E4                 jnz     loc_40D11B
.text:0040D3EA                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040D3ED                 inc     edx
.text:0040D3EE                 jmp     loc_40D11D
.text:0040D3F3 ; ---------------------------------------------------------------------------
.text:0040D3F3
.text:0040D3F3 loc_40D3F3:                             ; CODE XREF: .text:0040D3D6↑j
.text:0040D3F3                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040D3F7                 jnz     short loc_40D3D8
.text:0040D3F9                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040D3FD                 jnz     short loc_40D3D8
.text:0040D3FF                 mov     byte ptr [ecx], 9
.text:0040D402
.text:0040D402 loc_40D402:                             ; CODE XREF: .text:0040D41A↓j
.text:0040D402                 inc     ecx
.text:0040D403                 add     edx, 3
.text:0040D406                 jmp     loc_40D11E
.text:0040D40B ; ---------------------------------------------------------------------------
.text:0040D40B
.text:0040D40B loc_40D40B:                             ; CODE XREF: .text:0040D3C8↑j
.text:0040D40B                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040D40F                 jnz     short loc_40D3CA
.text:0040D411                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040D415                 jnz     short loc_40D3CA
.text:0040D417                 mov     byte ptr [ecx], 20h ; ' '
.text:0040D41A                 jmp     short loc_40D402
.text:0040D41A ; ---------------------------------------------------------------------------
.text:0040D41C                 align 10h
.text:0040D420
.text:0040D420 loc_40D420:                             ; CODE XREF: .text:0040D032↑j
.text:0040D420                 mov     dword ptr [esp+4], 0
.text:0040D428                 mov     dword ptr [esp], 0
.text:0040D42F                 call    GetLogicalDriveStringsA
.text:0040D434                 sub     esp, 8
.text:0040D437                 mov     ebx, eax
.text:0040D439                 call    GetProcessHeap
.text:0040D43E                 mov     [esp], eax
.text:0040D441                 mov     [esp+8], ebx
.text:0040D445                 mov     dword ptr [esp+4], 0
.text:0040D44D                 call    HeapAlloc
.text:0040D452                 sub     esp, 0Ch
.text:0040D455                 mov     esi, eax
.text:0040D457                 mov     [esp+4], eax
.text:0040D45B                 mov     [esp], ebx
.text:0040D45E                 call    GetLogicalDriveStringsA
.text:0040D463                 mov     off_412094, esi ; "notset"
.text:0040D469                 sub     esp, 8
.text:0040D46C                 jmp     loc_40D038
.text:0040D46C ; ---------------------------------------------------------------------------
.text:0040D471 ; const char aSSSSDD[]
.text:0040D471 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0040D471                                         ; DATA XREF: .text:0040D5B0↓o
.text:0040D471                                         ; ___addmntentstr+F0↓o
.text:0040D484                 align 10h
.text:0040D490                 push    esi
.text:0040D491                 push    ebx
.text:0040D492                 sub     esp, 44h
.text:0040D495                 mov     ebx, [esp+54h]
.text:0040D499                 mov     esi, [esp+50h]
.text:0040D49D                 mov     edx, [ebx]
.text:0040D49F                 mov     [esp+20h], edx
.text:0040D4A3                 mov     ecx, [ebx+4]
.text:0040D4A6                 mov     [esp+24h], ecx
.text:0040D4AA                 mov     edx, [ebx+8]
.text:0040D4AD                 mov     [esp+28h], edx
.text:0040D4B1                 mov     ecx, [ebx+0Ch]
.text:0040D4B4                 mov     [esp+2Ch], ecx
.text:0040D4B8                 mov     edx, [ebx+10h]
.text:0040D4BB                 mov     [esp+30h], edx
.text:0040D4BF                 mov     ecx, [ebx+14h]
.text:0040D4C2                 mov     dword ptr [esp+8], 2
.text:0040D4CA                 mov     dword ptr [esp+4], 0
.text:0040D4D2                 mov     [esp+34h], ecx
.text:0040D4D6                 mov     [esp], esi
.text:0040D4D9                 call    sub_40DDF0
.text:0040D4DE ; ---------------------------------------------------------------------------
.text:0040D4DE                 test    eax, eax
.text:0040D4E0                 mov     edx, 1
.text:0040D4E5                 jnz     loc_40D5E5
.text:0040D4EB                 mov     ebx, [esp+20h]
.text:0040D4EF                 mov     edx, ebx
.text:0040D4F1                 movzx   eax, byte ptr [ebx]
.text:0040D4F4                 test    al, al
.text:0040D4F6                 jz      short loc_40D520
.text:0040D4F8                 nop
.text:0040D4F9                 lea     esi, [esi+0]
.text:0040D500
.text:0040D500 loc_40D500:                             ; CODE XREF: .text:0040D51E↓j
.text:0040D500                 cmp     al, 20h ; ' '
.text:0040D502                 jz      loc_40D75A
.text:0040D508                 cmp     al, 9
.text:0040D50A                 jz      loc_40D75A
.text:0040D510                 cmp     al, 5Ch ; '\'
.text:0040D512                 jz      loc_40D75A
.text:0040D518                 inc     ebx
.text:0040D519                 movzx   eax, byte ptr [ebx]
.text:0040D51C                 test    al, al
.text:0040D51E                 jnz     short loc_40D500
.text:0040D520
.text:0040D520 loc_40D520:                             ; CODE XREF: .text:0040D4F6↑j
.text:0040D520                                         ; .text:0040D75C↓j ...
.text:0040D520                 mov     ebx, [esp+24h]
.text:0040D524                 mov     edx, ebx
.text:0040D526                 movzx   eax, byte ptr [ebx]
.text:0040D529                 test    al, al
.text:0040D52B                 jz      short loc_40D550
.text:0040D52D                 lea     esi, [esi+0]
.text:0040D530
.text:0040D530 loc_40D530:                             ; CODE XREF: .text:0040D54E↓j
.text:0040D530                 cmp     al, 20h ; ' '
.text:0040D532                 jz      loc_40D6DA
.text:0040D538                 cmp     al, 9
.text:0040D53A                 jz      loc_40D6DA
.text:0040D540                 cmp     al, 5Ch ; '\'
.text:0040D542                 jz      loc_40D6DA
.text:0040D548                 inc     ebx
.text:0040D549                 movzx   eax, byte ptr [ebx]
.text:0040D54C                 test    al, al
.text:0040D54E                 jnz     short loc_40D530
.text:0040D550
.text:0040D550 loc_40D550:                             ; CODE XREF: .text:0040D52B↑j
.text:0040D550                                         ; .text:0040D6DC↓j ...
.text:0040D550                 mov     ebx, [esp+28h]
.text:0040D554                 mov     edx, ebx
.text:0040D556                 movzx   eax, byte ptr [ebx]
.text:0040D559                 test    al, al
.text:0040D55B                 jz      short loc_40D580
.text:0040D55D                 lea     esi, [esi+0]
.text:0040D560
.text:0040D560 loc_40D560:                             ; CODE XREF: .text:0040D57E↓j
.text:0040D560                 cmp     al, 20h ; ' '
.text:0040D562                 jz      loc_40D65E
.text:0040D568                 cmp     al, 9
.text:0040D56A                 jz      loc_40D65E
.text:0040D570                 cmp     al, 5Ch ; '\'
.text:0040D572                 jz      loc_40D65E
.text:0040D578                 inc     ebx
.text:0040D579                 movzx   eax, byte ptr [ebx]
.text:0040D57C                 test    al, al
.text:0040D57E                 jnz     short loc_40D560
.text:0040D580
.text:0040D580 loc_40D580:                             ; CODE XREF: .text:0040D55B↑j
.text:0040D580                                         ; .text:0040D660↓j ...
.text:0040D580                 mov     edx, [esp+2Ch]
.text:0040D584                 mov     ebx, edx
.text:0040D586                 movzx   eax, byte ptr [edx]
.text:0040D589                 test    al, al
.text:0040D58B                 jz      short loc_40D5A4
.text:0040D58D                 lea     esi, [esi+0]
.text:0040D590
.text:0040D590 loc_40D590:                             ; CODE XREF: .text:0040D5A2↓j
.text:0040D590                 cmp     al, 20h ; ' '
.text:0040D592                 jz      short loc_40D5ED
.text:0040D594                 cmp     al, 9
.text:0040D596                 jz      short loc_40D5ED
.text:0040D598                 cmp     al, 5Ch ; '\'
.text:0040D59A                 jz      short loc_40D5ED
.text:0040D59C                 inc     ebx
.text:0040D59D                 movzx   eax, byte ptr [ebx]
.text:0040D5A0                 test    al, al
.text:0040D5A2                 jnz     short loc_40D590
.text:0040D5A4
.text:0040D5A4 loc_40D5A4:                             ; CODE XREF: .text:0040D58B↑j
.text:0040D5A4                                         ; .text:0040D5EF↓j ...
.text:0040D5A4                 mov     [esp+14h], edx
.text:0040D5A8                 mov     ecx, [esp+34h]
.text:0040D5AC                 mov     ebx, [esp+30h]
.text:0040D5B0                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040D5B8                 mov     edx, [esp+24h]
.text:0040D5BC                 mov     [esp+1Ch], ecx
.text:0040D5C0                 mov     ecx, [esp+28h]
.text:0040D5C4                 mov     [esp+18h], ebx
.text:0040D5C8                 mov     ebx, [esp+20h]
.text:0040D5CC                 mov     [esp+0Ch], edx
.text:0040D5D0                 mov     [esp+10h], ecx
.text:0040D5D4                 mov     [esp+8], ebx
.text:0040D5D8                 mov     [esp], esi
.text:0040D5DB                 call    fprintf
.text:0040D5E0                 mov     edx, eax
.text:0040D5E2                 shr     edx, 1Fh
.text:0040D5E5
.text:0040D5E5 loc_40D5E5:                             ; CODE XREF: .text:0040D4E5↑j
.text:0040D5E5                 add     esp, 44h
.text:0040D5E8                 mov     eax, edx
.text:0040D5EA                 pop     ebx
.text:0040D5EB                 pop     esi
.text:0040D5EC                 retn
.text:0040D5ED ; ---------------------------------------------------------------------------
.text:0040D5ED
.text:0040D5ED loc_40D5ED:                             ; CODE XREF: .text:0040D592↑j
.text:0040D5ED                                         ; .text:0040D596↑j ...
.text:0040D5ED                 test    al, al
.text:0040D5EF                 jz      short loc_40D5A4
.text:0040D5F1                 mov     [esp], edx
.text:0040D5F4                 mov     ebx, edx
.text:0040D5F6                 call    strlen
.text:0040D5FB                 lea     edx, ds:1[eax*4]
.text:0040D602                 mov     [esp], edx
.text:0040D605                 call    malloc
.text:0040D60A                 mov     [esp+2Ch], eax
.text:0040D60E                 mov     edx, eax
.text:0040D610
.text:0040D610 loc_40D610:                             ; CODE XREF: .text:0040D628↓j
.text:0040D610                 movzx   eax, byte ptr [ebx]
.text:0040D613                 cmp     al, 20h ; ' '
.text:0040D615                 jz      short loc_40D64D
.text:0040D617                 cmp     al, 9
.text:0040D619                 jz      short loc_40D63C
.text:0040D61B                 cmp     al, 5Ch ; '\'
.text:0040D61D                 jz      short loc_40D633
.text:0040D61F                 mov     [edx], al
.text:0040D621
.text:0040D621 loc_40D621:                             ; CODE XREF: .text:0040D63A↓j
.text:0040D621                                         ; .text:0040D64B↓j ...
.text:0040D621                 movzx   ecx, byte ptr [ebx]
.text:0040D624                 inc     edx
.text:0040D625                 inc     ebx
.text:0040D626                 test    cl, cl
.text:0040D628                 jnz     short loc_40D610
.text:0040D62A                 mov     edx, [esp+2Ch]
.text:0040D62E                 jmp     loc_40D5A4
.text:0040D633 ; ---------------------------------------------------------------------------
.text:0040D633
.text:0040D633 loc_40D633:                             ; CODE XREF: .text:0040D61D↑j
.text:0040D633                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D636                 inc     edx
.text:0040D637                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D63A                 jmp     short loc_40D621
.text:0040D63C ; ---------------------------------------------------------------------------
.text:0040D63C
.text:0040D63C loc_40D63C:                             ; CODE XREF: .text:0040D619↑j
.text:0040D63C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D63F                 inc     edx
.text:0040D640                 mov     byte ptr [edx], 30h ; '0'
.text:0040D643                 inc     edx
.text:0040D644                 mov     byte ptr [edx], 31h ; '1'
.text:0040D647                 inc     edx
.text:0040D648                 mov     byte ptr [edx], 32h ; '2'
.text:0040D64B                 jmp     short loc_40D621
.text:0040D64D ; ---------------------------------------------------------------------------
.text:0040D64D
.text:0040D64D loc_40D64D:                             ; CODE XREF: .text:0040D615↑j
.text:0040D64D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D650                 inc     edx
.text:0040D651                 mov     byte ptr [edx], 30h ; '0'
.text:0040D654                 inc     edx
.text:0040D655                 mov     byte ptr [edx], 34h ; '4'
.text:0040D658                 inc     edx
.text:0040D659                 mov     byte ptr [edx], 30h ; '0'
.text:0040D65C                 jmp     short loc_40D621
.text:0040D65E ; ---------------------------------------------------------------------------
.text:0040D65E
.text:0040D65E loc_40D65E:                             ; CODE XREF: .text:0040D562↑j
.text:0040D65E                                         ; .text:0040D56A↑j ...
.text:0040D65E                 test    al, al
.text:0040D660                 jz      loc_40D580
.text:0040D666                 mov     [esp], edx
.text:0040D669                 mov     ebx, edx
.text:0040D66B                 call    strlen
.text:0040D670                 lea     edx, ds:1[eax*4]
.text:0040D677                 mov     [esp], edx
.text:0040D67A                 call    malloc
.text:0040D67F                 mov     [esp+28h], eax
.text:0040D683                 mov     edx, eax
.text:0040D685                 lea     esi, [esi+0]
.text:0040D689                 lea     edi, [edi+0]
.text:0040D690
.text:0040D690 loc_40D690:                             ; CODE XREF: .text:0040D6A8↓j
.text:0040D690                 movzx   eax, byte ptr [ebx]
.text:0040D693                 cmp     al, 20h ; ' '
.text:0040D695                 jz      short loc_40D6C9
.text:0040D697                 cmp     al, 9
.text:0040D699                 jz      short loc_40D6B8
.text:0040D69B                 cmp     al, 5Ch ; '\'
.text:0040D69D                 jz      short loc_40D6AF
.text:0040D69F                 mov     [edx], al
.text:0040D6A1
.text:0040D6A1 loc_40D6A1:                             ; CODE XREF: .text:0040D6B6↓j
.text:0040D6A1                                         ; .text:0040D6C7↓j ...
.text:0040D6A1                 movzx   ecx, byte ptr [ebx]
.text:0040D6A4                 inc     edx
.text:0040D6A5                 inc     ebx
.text:0040D6A6                 test    cl, cl
.text:0040D6A8                 jnz     short loc_40D690
.text:0040D6AA                 jmp     loc_40D580
.text:0040D6AF ; ---------------------------------------------------------------------------
.text:0040D6AF
.text:0040D6AF loc_40D6AF:                             ; CODE XREF: .text:0040D69D↑j
.text:0040D6AF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D6B2                 inc     edx
.text:0040D6B3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D6B6                 jmp     short loc_40D6A1
.text:0040D6B8 ; ---------------------------------------------------------------------------
.text:0040D6B8
.text:0040D6B8 loc_40D6B8:                             ; CODE XREF: .text:0040D699↑j
.text:0040D6B8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D6BB                 inc     edx
.text:0040D6BC                 mov     byte ptr [edx], 30h ; '0'
.text:0040D6BF                 inc     edx
.text:0040D6C0                 mov     byte ptr [edx], 31h ; '1'
.text:0040D6C3                 inc     edx
.text:0040D6C4                 mov     byte ptr [edx], 32h ; '2'
.text:0040D6C7                 jmp     short loc_40D6A1
.text:0040D6C9 ; ---------------------------------------------------------------------------
.text:0040D6C9
.text:0040D6C9 loc_40D6C9:                             ; CODE XREF: .text:0040D695↑j
.text:0040D6C9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D6CC                 inc     edx
.text:0040D6CD                 mov     byte ptr [edx], 30h ; '0'
.text:0040D6D0                 inc     edx
.text:0040D6D1                 mov     byte ptr [edx], 34h ; '4'
.text:0040D6D4                 inc     edx
.text:0040D6D5                 mov     byte ptr [edx], 30h ; '0'
.text:0040D6D8                 jmp     short loc_40D6A1
.text:0040D6DA ; ---------------------------------------------------------------------------
.text:0040D6DA
.text:0040D6DA loc_40D6DA:                             ; CODE XREF: .text:0040D532↑j
.text:0040D6DA                                         ; .text:0040D53A↑j ...
.text:0040D6DA                 test    al, al
.text:0040D6DC                 jz      loc_40D550
.text:0040D6E2                 mov     [esp], edx
.text:0040D6E5                 mov     ebx, edx
.text:0040D6E7                 call    strlen
.text:0040D6EC                 lea     edx, ds:1[eax*4]
.text:0040D6F3                 mov     [esp], edx
.text:0040D6F6                 call    malloc
.text:0040D6FB                 mov     [esp+24h], eax
.text:0040D6FF                 mov     edx, eax
.text:0040D701                 jmp     short loc_40D710
.text:0040D701 ; ---------------------------------------------------------------------------
.text:0040D703                 align 10h
.text:0040D710
.text:0040D710 loc_40D710:                             ; CODE XREF: .text:0040D701↑j
.text:0040D710                                         ; .text:0040D728↓j
.text:0040D710                 movzx   eax, byte ptr [ebx]
.text:0040D713                 cmp     al, 20h ; ' '
.text:0040D715                 jz      short loc_40D749
.text:0040D717                 cmp     al, 9
.text:0040D719                 jz      short loc_40D738
.text:0040D71B                 cmp     al, 5Ch ; '\'
.text:0040D71D                 jz      short loc_40D72F
.text:0040D71F                 mov     [edx], al
.text:0040D721
.text:0040D721 loc_40D721:                             ; CODE XREF: .text:0040D736↓j
.text:0040D721                                         ; .text:0040D747↓j ...
.text:0040D721                 movzx   ecx, byte ptr [ebx]
.text:0040D724                 inc     edx
.text:0040D725                 inc     ebx
.text:0040D726                 test    cl, cl
.text:0040D728                 jnz     short loc_40D710
.text:0040D72A                 jmp     loc_40D550
.text:0040D72F ; ---------------------------------------------------------------------------
.text:0040D72F
.text:0040D72F loc_40D72F:                             ; CODE XREF: .text:0040D71D↑j
.text:0040D72F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D732                 inc     edx
.text:0040D733                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D736                 jmp     short loc_40D721
.text:0040D738 ; ---------------------------------------------------------------------------
.text:0040D738
.text:0040D738 loc_40D738:                             ; CODE XREF: .text:0040D719↑j
.text:0040D738                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D73B                 inc     edx
.text:0040D73C                 mov     byte ptr [edx], 30h ; '0'
.text:0040D73F                 inc     edx
.text:0040D740                 mov     byte ptr [edx], 31h ; '1'
.text:0040D743                 inc     edx
.text:0040D744                 mov     byte ptr [edx], 32h ; '2'
.text:0040D747                 jmp     short loc_40D721
.text:0040D749 ; ---------------------------------------------------------------------------
.text:0040D749
.text:0040D749 loc_40D749:                             ; CODE XREF: .text:0040D715↑j
.text:0040D749                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D74C                 inc     edx
.text:0040D74D                 mov     byte ptr [edx], 30h ; '0'
.text:0040D750                 inc     edx
.text:0040D751                 mov     byte ptr [edx], 34h ; '4'
.text:0040D754                 inc     edx
.text:0040D755                 mov     byte ptr [edx], 30h ; '0'
.text:0040D758                 jmp     short loc_40D721
.text:0040D75A ; ---------------------------------------------------------------------------
.text:0040D75A
.text:0040D75A loc_40D75A:                             ; CODE XREF: .text:0040D502↑j
.text:0040D75A                                         ; .text:0040D50A↑j ...
.text:0040D75A                 test    al, al
.text:0040D75C                 jz      loc_40D520
.text:0040D762                 mov     [esp], edx
.text:0040D765                 mov     ebx, edx
.text:0040D767                 call    strlen
.text:0040D76C                 lea     ecx, ds:1[eax*4]
.text:0040D773                 mov     [esp], ecx
.text:0040D776                 call    malloc
.text:0040D77B                 mov     [esp+20h], eax
.text:0040D77F                 mov     edx, eax
.text:0040D781                 jmp     short loc_40D790
.text:0040D781 ; ---------------------------------------------------------------------------
.text:0040D783                 align 10h
.text:0040D790
.text:0040D790 loc_40D790:                             ; CODE XREF: .text:0040D781↑j
.text:0040D790                                         ; .text:0040D7A8↓j
.text:0040D790                 movzx   eax, byte ptr [ebx]
.text:0040D793                 cmp     al, 20h ; ' '
.text:0040D795                 jz      short loc_40D7C9
.text:0040D797                 cmp     al, 9
.text:0040D799                 jz      short loc_40D7B8
.text:0040D79B                 cmp     al, 5Ch ; '\'
.text:0040D79D                 jz      short loc_40D7AF
.text:0040D79F                 mov     [edx], al
.text:0040D7A1
.text:0040D7A1 loc_40D7A1:                             ; CODE XREF: .text:0040D7B6↓j
.text:0040D7A1                                         ; .text:0040D7C7↓j ...
.text:0040D7A1                 movzx   ecx, byte ptr [ebx]
.text:0040D7A4                 inc     edx
.text:0040D7A5                 inc     ebx
.text:0040D7A6                 test    cl, cl
.text:0040D7A8                 jnz     short loc_40D790
.text:0040D7AA                 jmp     loc_40D520
.text:0040D7AF ; ---------------------------------------------------------------------------
.text:0040D7AF
.text:0040D7AF loc_40D7AF:                             ; CODE XREF: .text:0040D79D↑j
.text:0040D7AF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D7B2                 inc     edx
.text:0040D7B3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D7B6                 jmp     short loc_40D7A1
.text:0040D7B8 ; ---------------------------------------------------------------------------
.text:0040D7B8
.text:0040D7B8 loc_40D7B8:                             ; CODE XREF: .text:0040D799↑j
.text:0040D7B8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D7BB                 inc     edx
.text:0040D7BC                 mov     byte ptr [edx], 30h ; '0'
.text:0040D7BF                 inc     edx
.text:0040D7C0                 mov     byte ptr [edx], 31h ; '1'
.text:0040D7C3                 inc     edx
.text:0040D7C4                 mov     byte ptr [edx], 32h ; '2'
.text:0040D7C7                 jmp     short loc_40D7A1
.text:0040D7C9 ; ---------------------------------------------------------------------------
.text:0040D7C9
.text:0040D7C9 loc_40D7C9:                             ; CODE XREF: .text:0040D795↑j
.text:0040D7C9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D7CC                 inc     edx
.text:0040D7CD                 mov     byte ptr [edx], 30h ; '0'
.text:0040D7D0                 inc     edx
.text:0040D7D1                 mov     byte ptr [edx], 34h ; '4'
.text:0040D7D4                 inc     edx
.text:0040D7D5                 mov     byte ptr [edx], 30h ; '0'
.text:0040D7D8                 jmp     short loc_40D7A1
.text:0040D7D8 ; ---------------------------------------------------------------------------
.text:0040D7DA                 align 10h
.text:0040D7E0
.text:0040D7E0 ; =============== S U B R O U T I N E =======================================
.text:0040D7E0
.text:0040D7E0 ; Attributes: info_from_lumina
.text:0040D7E0
.text:0040D7E0 ; int __cdecl __addmntentstr(char *, int)
.text:0040D7E0 ___addmntentstr proc near               ; CODE XREF: .text:0040D0AA↑p
.text:0040D7E0
.text:0040D7E0 Buffer          = dword ptr -4Ch
.text:0040D7E0 Format          = dword ptr -48h
.text:0040D7E0 var_44          = dword ptr -44h
.text:0040D7E0 var_40          = dword ptr -40h
.text:0040D7E0 var_3C          = dword ptr -3Ch
.text:0040D7E0 var_38          = dword ptr -38h
.text:0040D7E0 var_34          = dword ptr -34h
.text:0040D7E0 var_30          = dword ptr -30h
.text:0040D7E0 var_2C          = dword ptr -2Ch
.text:0040D7E0 var_28          = dword ptr -28h
.text:0040D7E0 var_24          = dword ptr -24h
.text:0040D7E0 Str             = dword ptr -20h
.text:0040D7E0 var_1C          = dword ptr -1Ch
.text:0040D7E0 var_18          = dword ptr -18h
.text:0040D7E0 arg_0           = dword ptr  4
.text:0040D7E0 arg_4           = dword ptr  8
.text:0040D7E0
.text:0040D7E0                 push    ebx
.text:0040D7E1                 sub     esp, 48h
.text:0040D7E4                 mov     edx, [esp+4Ch+arg_4]
.text:0040D7E8                 mov     ecx, [edx]
.text:0040D7EA                 mov     [esp+4Ch+var_2C], ecx
.text:0040D7EE                 mov     ebx, [edx+4]
.text:0040D7F1                 mov     [esp+4Ch+var_28], ebx
.text:0040D7F5                 mov     ebx, [edx+8]
.text:0040D7F8                 mov     [esp+4Ch+var_24], ebx
.text:0040D7FC                 mov     ebx, [edx+0Ch]
.text:0040D7FF                 mov     [esp+4Ch+Str], ebx
.text:0040D803                 mov     ebx, [edx+10h]
.text:0040D806                 mov     [esp+4Ch+var_1C], ebx
.text:0040D80A                 mov     ebx, [edx+14h]
.text:0040D80D                 mov     [esp+4Ch+var_18], ebx
.text:0040D811                 mov     ebx, ecx
.text:0040D813                 movzx   eax, byte ptr [ecx]
.text:0040D816                 test    al, al
.text:0040D818                 jz      loc_40DB01
.text:0040D81E                 mov     esi, esi
.text:0040D820
.text:0040D820 loc_40D820:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0040D820                 cmp     al, 20h ; ' '
.text:0040D822                 jz      loc_40DA80
.text:0040D828                 cmp     al, 9
.text:0040D82A                 jz      loc_40DA80
.text:0040D830                 cmp     al, 5Ch ; '\'
.text:0040D832                 jz      loc_40DA80
.text:0040D838                 inc     ebx
.text:0040D839                 movzx   eax, byte ptr [ebx]
.text:0040D83C                 test    al, al
.text:0040D83E                 jnz     short loc_40D820
.text:0040D840
.text:0040D840 loc_40D840:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0040D840                                         ; ___addmntentstr+2EA↓j
.text:0040D840                 mov     ebx, [esp+4Ch+var_28]
.text:0040D844                 mov     edx, ebx
.text:0040D846                 movzx   eax, byte ptr [ebx]
.text:0040D849                 test    al, al
.text:0040D84B                 jz      short loc_40D870
.text:0040D84D                 lea     esi, [esi+0]
.text:0040D850
.text:0040D850 loc_40D850:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0040D850                 cmp     al, 20h ; ' '
.text:0040D852                 jz      loc_40D9FA
.text:0040D858                 cmp     al, 9
.text:0040D85A                 jz      loc_40D9FA
.text:0040D860                 cmp     al, 5Ch ; '\'
.text:0040D862                 jz      loc_40D9FA
.text:0040D868                 inc     ebx
.text:0040D869                 movzx   eax, byte ptr [ebx]
.text:0040D86C                 test    al, al
.text:0040D86E                 jnz     short loc_40D850
.text:0040D870
.text:0040D870 loc_40D870:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0040D870                                         ; ___addmntentstr+21C↓j ...
.text:0040D870                 mov     ebx, [esp+4Ch+var_24]
.text:0040D874                 mov     edx, ebx
.text:0040D876                 movzx   eax, byte ptr [ebx]
.text:0040D879                 test    al, al
.text:0040D87B                 jz      short loc_40D8A0
.text:0040D87D                 lea     esi, [esi+0]
.text:0040D880
.text:0040D880 loc_40D880:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0040D880                 cmp     al, 20h ; ' '
.text:0040D882                 jz      loc_40D97E
.text:0040D888                 cmp     al, 9
.text:0040D88A                 jz      loc_40D97E
.text:0040D890                 cmp     al, 5Ch ; '\'
.text:0040D892                 jz      loc_40D97E
.text:0040D898                 inc     ebx
.text:0040D899                 movzx   eax, byte ptr [ebx]
.text:0040D89C                 test    al, al
.text:0040D89E                 jnz     short loc_40D880
.text:0040D8A0
.text:0040D8A0 loc_40D8A0:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0040D8A0                                         ; ___addmntentstr+1A0↓j ...
.text:0040D8A0                 mov     edx, [esp+4Ch+Str]
.text:0040D8A4                 mov     ebx, edx
.text:0040D8A6                 movzx   eax, byte ptr [edx]
.text:0040D8A9                 test    al, al
.text:0040D8AB                 jz      short loc_40D8C4
.text:0040D8AD                 lea     esi, [esi+0]
.text:0040D8B0
.text:0040D8B0 loc_40D8B0:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0040D8B0                 cmp     al, 20h ; ' '
.text:0040D8B2                 jz      short loc_40D90C
.text:0040D8B4                 cmp     al, 9
.text:0040D8B6                 jz      short loc_40D90C
.text:0040D8B8                 cmp     al, 5Ch ; '\'
.text:0040D8BA                 jz      short loc_40D90C
.text:0040D8BC                 inc     ebx
.text:0040D8BD                 movzx   eax, byte ptr [ebx]
.text:0040D8C0                 test    al, al
.text:0040D8C2                 jnz     short loc_40D8B0
.text:0040D8C4
.text:0040D8C4 loc_40D8C4:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0040D8C4                                         ; ___addmntentstr+12E↓j ...
.text:0040D8C4                 mov     [esp+4Ch+var_38], edx
.text:0040D8C8                 mov     ebx, [esp+4Ch+var_18]
.text:0040D8CC                 mov     ecx, [esp+4Ch+var_1C]
.text:0040D8D0                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040D8D8                 mov     edx, [esp+4Ch+var_2C]
.text:0040D8DC                 mov     [esp+4Ch+var_30], ebx
.text:0040D8E0                 mov     ebx, [esp+4Ch+var_24]
.text:0040D8E4                 mov     [esp+4Ch+var_34], ecx
.text:0040D8E8                 mov     ecx, [esp+4Ch+var_28]
.text:0040D8EC                 mov     [esp+4Ch+var_3C], ebx
.text:0040D8F0                 mov     ebx, [esp+4Ch+arg_0]
.text:0040D8F4                 mov     [esp+4Ch+var_40], ecx
.text:0040D8F8                 mov     [esp+4Ch+var_44], edx
.text:0040D8FC                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0040D8FF                 call    sprintf
.text:0040D904                 add     esp, 48h
.text:0040D907                 shr     eax, 1Fh
.text:0040D90A                 pop     ebx
.text:0040D90B                 retn
.text:0040D90C ; ---------------------------------------------------------------------------
.text:0040D90C
.text:0040D90C loc_40D90C:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0040D90C                                         ; ___addmntentstr+D6↑j ...
.text:0040D90C                 test    al, al
.text:0040D90E                 jz      short loc_40D8C4
.text:0040D910                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040D913                 mov     ebx, edx
.text:0040D915                 call    strlen
.text:0040D91A                 lea     edx, ds:1[eax*4]
.text:0040D921                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040D924                 call    malloc
.text:0040D929                 mov     [esp+4Ch+Str], eax
.text:0040D92D                 mov     edx, eax
.text:0040D92F                 nop
.text:0040D930
.text:0040D930 loc_40D930:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0040D930                 movzx   eax, byte ptr [ebx]
.text:0040D933                 cmp     al, 20h ; ' '
.text:0040D935                 jz      short loc_40D96D
.text:0040D937                 cmp     al, 9
.text:0040D939                 jz      short loc_40D95C
.text:0040D93B                 cmp     al, 5Ch ; '\'
.text:0040D93D                 jz      short loc_40D953
.text:0040D93F                 mov     [edx], al
.text:0040D941
.text:0040D941 loc_40D941:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0040D941                                         ; ___addmntentstr+18B↓j ...
.text:0040D941                 movzx   ecx, byte ptr [ebx]
.text:0040D944                 inc     edx
.text:0040D945                 inc     ebx
.text:0040D946                 test    cl, cl
.text:0040D948                 jnz     short loc_40D930
.text:0040D94A                 mov     edx, [esp+4Ch+Str]
.text:0040D94E                 jmp     loc_40D8C4
.text:0040D953 ; ---------------------------------------------------------------------------
.text:0040D953
.text:0040D953 loc_40D953:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0040D953                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D956                 inc     edx
.text:0040D957                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D95A                 jmp     short loc_40D941
.text:0040D95C ; ---------------------------------------------------------------------------
.text:0040D95C
.text:0040D95C loc_40D95C:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0040D95C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D95F                 inc     edx
.text:0040D960                 mov     byte ptr [edx], 30h ; '0'
.text:0040D963                 inc     edx
.text:0040D964                 mov     byte ptr [edx], 31h ; '1'
.text:0040D967                 inc     edx
.text:0040D968                 mov     byte ptr [edx], 32h ; '2'
.text:0040D96B                 jmp     short loc_40D941
.text:0040D96D ; ---------------------------------------------------------------------------
.text:0040D96D
.text:0040D96D loc_40D96D:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0040D96D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D970                 inc     edx
.text:0040D971                 mov     byte ptr [edx], 30h ; '0'
.text:0040D974                 inc     edx
.text:0040D975                 mov     byte ptr [edx], 34h ; '4'
.text:0040D978                 inc     edx
.text:0040D979                 mov     byte ptr [edx], 30h ; '0'
.text:0040D97C                 jmp     short loc_40D941
.text:0040D97E ; ---------------------------------------------------------------------------
.text:0040D97E
.text:0040D97E loc_40D97E:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0040D97E                                         ; ___addmntentstr+AA↑j ...
.text:0040D97E                 test    al, al
.text:0040D980                 jz      loc_40D8A0
.text:0040D986                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040D989                 mov     ebx, edx
.text:0040D98B                 call    strlen
.text:0040D990                 lea     edx, ds:1[eax*4]
.text:0040D997                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040D99A                 call    malloc
.text:0040D99F                 mov     [esp+4Ch+var_24], eax
.text:0040D9A3                 mov     edx, eax
.text:0040D9A5                 lea     esi, [esi+0]
.text:0040D9A9                 lea     edi, [edi+0]
.text:0040D9B0
.text:0040D9B0 loc_40D9B0:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0040D9B0                 movzx   eax, byte ptr [ebx]
.text:0040D9B3                 cmp     al, 20h ; ' '
.text:0040D9B5                 jz      short loc_40D9E9
.text:0040D9B7                 cmp     al, 9
.text:0040D9B9                 jz      short loc_40D9D8
.text:0040D9BB                 cmp     al, 5Ch ; '\'
.text:0040D9BD                 jz      short loc_40D9CF
.text:0040D9BF                 mov     [edx], al
.text:0040D9C1
.text:0040D9C1 loc_40D9C1:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0040D9C1                                         ; ___addmntentstr+207↓j ...
.text:0040D9C1                 movzx   ecx, byte ptr [ebx]
.text:0040D9C4                 inc     edx
.text:0040D9C5                 inc     ebx
.text:0040D9C6                 test    cl, cl
.text:0040D9C8                 jnz     short loc_40D9B0
.text:0040D9CA                 jmp     loc_40D8A0
.text:0040D9CF ; ---------------------------------------------------------------------------
.text:0040D9CF
.text:0040D9CF loc_40D9CF:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0040D9CF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D9D2                 inc     edx
.text:0040D9D3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D9D6                 jmp     short loc_40D9C1
.text:0040D9D8 ; ---------------------------------------------------------------------------
.text:0040D9D8
.text:0040D9D8 loc_40D9D8:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0040D9D8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D9DB                 inc     edx
.text:0040D9DC                 mov     byte ptr [edx], 30h ; '0'
.text:0040D9DF                 inc     edx
.text:0040D9E0                 mov     byte ptr [edx], 31h ; '1'
.text:0040D9E3                 inc     edx
.text:0040D9E4                 mov     byte ptr [edx], 32h ; '2'
.text:0040D9E7                 jmp     short loc_40D9C1
.text:0040D9E9 ; ---------------------------------------------------------------------------
.text:0040D9E9
.text:0040D9E9 loc_40D9E9:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0040D9E9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040D9EC                 inc     edx
.text:0040D9ED                 mov     byte ptr [edx], 30h ; '0'
.text:0040D9F0                 inc     edx
.text:0040D9F1                 mov     byte ptr [edx], 34h ; '4'
.text:0040D9F4                 inc     edx
.text:0040D9F5                 mov     byte ptr [edx], 30h ; '0'
.text:0040D9F8                 jmp     short loc_40D9C1
.text:0040D9FA ; ---------------------------------------------------------------------------
.text:0040D9FA
.text:0040D9FA loc_40D9FA:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0040D9FA                                         ; ___addmntentstr+7A↑j ...
.text:0040D9FA                 test    al, al
.text:0040D9FC                 jz      loc_40D870
.text:0040DA02                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040DA05                 mov     ebx, edx
.text:0040DA07                 call    strlen
.text:0040DA0C                 lea     edx, ds:1[eax*4]
.text:0040DA13                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040DA16                 call    malloc
.text:0040DA1B                 mov     [esp+4Ch+var_28], eax
.text:0040DA1F                 mov     edx, eax
.text:0040DA21                 jmp     short loc_40DA30
.text:0040DA21 ; ---------------------------------------------------------------------------
.text:0040DA23                 align 10h
.text:0040DA30
.text:0040DA30 loc_40DA30:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0040DA30                                         ; ___addmntentstr+268↓j
.text:0040DA30                 movzx   eax, byte ptr [ebx]
.text:0040DA33                 cmp     al, 20h ; ' '
.text:0040DA35                 jz      short loc_40DA69
.text:0040DA37                 cmp     al, 9
.text:0040DA39                 jz      short loc_40DA58
.text:0040DA3B                 cmp     al, 5Ch ; '\'
.text:0040DA3D                 jz      short loc_40DA4F
.text:0040DA3F                 mov     [edx], al
.text:0040DA41
.text:0040DA41 loc_40DA41:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0040DA41                                         ; ___addmntentstr+287↓j ...
.text:0040DA41                 movzx   ecx, byte ptr [ebx]
.text:0040DA44                 inc     edx
.text:0040DA45                 inc     ebx
.text:0040DA46                 test    cl, cl
.text:0040DA48                 jnz     short loc_40DA30
.text:0040DA4A                 jmp     loc_40D870
.text:0040DA4F ; ---------------------------------------------------------------------------
.text:0040DA4F
.text:0040DA4F loc_40DA4F:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0040DA4F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040DA52                 inc     edx
.text:0040DA53                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040DA56                 jmp     short loc_40DA41
.text:0040DA58 ; ---------------------------------------------------------------------------
.text:0040DA58
.text:0040DA58 loc_40DA58:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0040DA58                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040DA5B                 inc     edx
.text:0040DA5C                 mov     byte ptr [edx], 30h ; '0'
.text:0040DA5F                 inc     edx
.text:0040DA60                 mov     byte ptr [edx], 31h ; '1'
.text:0040DA63                 inc     edx
.text:0040DA64                 mov     byte ptr [edx], 32h ; '2'
.text:0040DA67                 jmp     short loc_40DA41
.text:0040DA69 ; ---------------------------------------------------------------------------
.text:0040DA69
.text:0040DA69 loc_40DA69:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0040DA69                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040DA6C                 inc     edx
.text:0040DA6D                 mov     byte ptr [edx], 30h ; '0'
.text:0040DA70                 inc     edx
.text:0040DA71                 mov     byte ptr [edx], 34h ; '4'
.text:0040DA74                 inc     edx
.text:0040DA75                 mov     byte ptr [edx], 30h ; '0'
.text:0040DA78                 jmp     short loc_40DA41
.text:0040DA78 ; ---------------------------------------------------------------------------
.text:0040DA7A                 align 10h
.text:0040DA80
.text:0040DA80 loc_40DA80:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0040DA80                                         ; ___addmntentstr+4A↑j ...
.text:0040DA80                 test    al, al
.text:0040DA82                 jz      loc_40D840
.text:0040DA88                 mov     ebx, [esp+4Ch+var_2C]
.text:0040DA8C                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0040DA8F                 call    strlen
.text:0040DA94                 lea     edx, ds:1[eax*4]
.text:0040DA9B                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040DA9E                 call    malloc
.text:0040DAA3                 mov     [esp+4Ch+var_2C], eax
.text:0040DAA7                 mov     edx, eax
.text:0040DAA9                 lea     esi, [esi+0]
.text:0040DAB0
.text:0040DAB0 loc_40DAB0:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0040DAB0                 movzx   eax, byte ptr [ebx]
.text:0040DAB3                 cmp     al, 20h ; ' '
.text:0040DAB5                 jz      short loc_40DAF0
.text:0040DAB7                 cmp     al, 9
.text:0040DAB9                 jz      short loc_40DAD8
.text:0040DABB                 cmp     al, 5Ch ; '\'
.text:0040DABD                 jz      short loc_40DACF
.text:0040DABF                 mov     [edx], al
.text:0040DAC1
.text:0040DAC1 loc_40DAC1:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0040DAC1                                         ; ___addmntentstr+307↓j ...
.text:0040DAC1                 movzx   ecx, byte ptr [ebx]
.text:0040DAC4                 inc     edx
.text:0040DAC5                 inc     ebx
.text:0040DAC6                 test    cl, cl
.text:0040DAC8                 jnz     short loc_40DAB0
.text:0040DACA                 jmp     loc_40D840
.text:0040DACF ; ---------------------------------------------------------------------------
.text:0040DACF
.text:0040DACF loc_40DACF:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0040DACF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040DAD2                 inc     edx
.text:0040DAD3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040DAD6                 jmp     short loc_40DAC1
.text:0040DAD8 ; ---------------------------------------------------------------------------
.text:0040DAD8
.text:0040DAD8 loc_40DAD8:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0040DAD8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040DADB                 inc     edx
.text:0040DADC                 mov     byte ptr [edx], 30h ; '0'
.text:0040DADF                 inc     edx
.text:0040DAE0                 mov     byte ptr [edx], 31h ; '1'
.text:0040DAE3                 inc     edx
.text:0040DAE4                 mov     byte ptr [edx], 32h ; '2'
.text:0040DAE7                 jmp     short loc_40DAC1
.text:0040DAE7 ; ---------------------------------------------------------------------------
.text:0040DAE9                 align 10h
.text:0040DAF0
.text:0040DAF0 loc_40DAF0:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0040DAF0                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040DAF3                 inc     edx
.text:0040DAF4                 mov     byte ptr [edx], 30h ; '0'
.text:0040DAF7                 inc     edx
.text:0040DAF8                 mov     byte ptr [edx], 34h ; '4'
.text:0040DAFB                 inc     edx
.text:0040DAFC                 mov     byte ptr [edx], 30h ; '0'
.text:0040DAFF                 jmp     short loc_40DAC1
.text:0040DB01 ; ---------------------------------------------------------------------------
.text:0040DB01
.text:0040DB01 loc_40DB01:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0040DB01                 movzx   eax, byte ptr [ecx]
.text:0040DB04                 jmp     loc_40DA80
.text:0040DB04 ___addmntentstr endp
.text:0040DB04
.text:0040DB04 ; ---------------------------------------------------------------------------
.text:0040DB09                 align 10h
.text:0040DB10
.text:0040DB10 ; =============== S U B R O U T I N E =======================================
.text:0040DB10
.text:0040DB10
.text:0040DB10 sub_40DB10      proc near               ; CODE XREF: sub_40BF40+99↑p
.text:0040DB10
.text:0040DB10 nBufferLength   = dword ptr -1Ch
.text:0040DB10 lpBuffer        = dword ptr -18h
.text:0040DB10 dwBytes         = dword ptr -14h
.text:0040DB10 var_8           = dword ptr -8
.text:0040DB10 var_4           = dword ptr -4
.text:0040DB10
.text:0040DB10                 sub     esp, 1Ch
.text:0040DB13                 mov     [esp+1Ch+var_8], ebx
.text:0040DB17                 mov     [esp+1Ch+var_4], esi
.text:0040DB1B                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0040DB23                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0040DB2A                 call    GetLogicalDriveStringsA
.text:0040DB2F                 sub     esp, 8
.text:0040DB32                 mov     ebx, eax
.text:0040DB34                 call    GetProcessHeap
.text:0040DB39                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0040DB3C                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:0040DB40                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:0040DB48                 call    HeapAlloc
.text:0040DB4D                 sub     esp, 0Ch
.text:0040DB50                 mov     esi, eax
.text:0040DB52                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:0040DB55                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:0040DB59                 call    GetLogicalDriveStringsA
.text:0040DB5E                 sub     esp, 8
.text:0040DB61                 mov     eax, esi
.text:0040DB63                 mov     ebx, [esp+1Ch+var_8]
.text:0040DB67                 mov     esi, [esp+1Ch+var_4]
.text:0040DB6B                 add     esp, 1Ch
.text:0040DB6E                 retn
.text:0040DB6E sub_40DB10      endp
.text:0040DB6E
.text:0040DB6F
.text:0040DB6F ; =============== S U B R O U T I N E =======================================
.text:0040DB6F
.text:0040DB6F
.text:0040DB6F ; int __cdecl sub_40DB6F(char *, char *)
.text:0040DB6F sub_40DB6F      proc near               ; DATA XREF: sub_40DB6F:loc_40DBFD↓o
.text:0040DB6F
.text:0040DB6F FileName        = dword ptr -1Ch
.text:0040DB6F Mode            = dword ptr -18h
.text:0040DB6F dwBytes         = dword ptr -14h
.text:0040DB6F arg_0           = dword ptr  4
.text:0040DB6F arg_4           = dword ptr  8
.text:0040DB6F
.text:0040DB6F                 ja      short $+2
.text:0040DB71
.text:0040DB71 loc_40DB71:                             ; CODE XREF: sub_40DB6F↑j
.text:0040DB71                 jmp     short loc_40DB80
.text:0040DB71 ; ---------------------------------------------------------------------------
.text:0040DB73                 align 10h
.text:0040DB80
.text:0040DB80 loc_40DB80:                             ; CODE XREF: sub_40DB6F:loc_40DB71↑j
.text:0040DB80                 push    edi
.text:0040DB81                 push    esi
.text:0040DB82                 push    ebx
.text:0040DB83                 sub     esp, 10h
.text:0040DB86                 mov     ebx, [esp+1Ch+arg_0]
.text:0040DB8A                 mov     edx, [esp+1Ch+arg_4]
.text:0040DB8E                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040DB91                 mov     [esp+1Ch+Mode], edx ; Mode
.text:0040DB95                 call    fopen
.text:0040DB9A                 test    eax, eax
.text:0040DB9C                 mov     edi, eax
.text:0040DB9E                 jz      short loc_40DBFD
.text:0040DBA0
.text:0040DBA0 loc_40DBA0:                             ; CODE XREF: sub_40DB6F+A2↓j
.text:0040DBA0                                         ; sub_40DB6F+AB↓j
.text:0040DBA0                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:0040DBA8                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0040DBAF                 call    GetLogicalDriveStringsA
.text:0040DBB4                 sub     esp, 8
.text:0040DBB7                 mov     esi, eax
.text:0040DBB9                 call    GetProcessHeap
.text:0040DBBE                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:0040DBC1                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:0040DBC5                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0040DBCD                 call    HeapAlloc
.text:0040DBD2                 sub     esp, 0Ch
.text:0040DBD5                 mov     ebx, eax
.text:0040DBD7                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0040DBDA                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0040DBDE                 call    GetLogicalDriveStringsA
.text:0040DBE3                 mov     off_412094, ebx ; "notset"
.text:0040DBE9                 sub     esp, 8
.text:0040DBEC                 xor     eax, eax
.text:0040DBEE                 test    ebx, ebx
.text:0040DBF0                 setz    al
.text:0040DBF3                 add     esp, 10h
.text:0040DBF6                 pop     ebx
.text:0040DBF7                 dec     eax
.text:0040DBF8                 and     eax, edi
.text:0040DBFA                 pop     esi
.text:0040DBFB                 pop     edi
.text:0040DBFC                 retn
.text:0040DBFD ; ---------------------------------------------------------------------------
.text:0040DBFD
.text:0040DBFD loc_40DBFD:                             ; CODE XREF: sub_40DB6F+2F↑j
.text:0040DBFD                 mov     [esp+1Ch+Mode], offset sub_40DB6F ; Mode
.text:0040DC05                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040DC08                 call    fopen
.text:0040DC0D                 test    eax, eax
.text:0040DC0F                 mov     edi, eax
.text:0040DC11                 jnz     short loc_40DBA0
.text:0040DC13                 call    sub_40DF00
.text:0040DC18                 mov     edi, eax
.text:0040DC1A                 jmp     short loc_40DBA0
.text:0040DC1A sub_40DB6F      endp
.text:0040DC1A
.text:0040DC1A ; ---------------------------------------------------------------------------
.text:0040DC1C                 align 10h
.text:0040DC20                 sub     esp, 0Ch
.text:0040DC23                 mov     eax, [esp+10h]
.text:0040DC27                 test    eax, eax
.text:0040DC29                 jz      short loc_40DC33
.text:0040DC2B                 mov     [esp], eax
.text:0040DC2E                 call    fclose
.text:0040DC33
.text:0040DC33 loc_40DC33:                             ; CODE XREF: .text:0040DC29↑j
.text:0040DC33                 call    GetProcessHeap
.text:0040DC38                 mov     [esp], eax
.text:0040DC3B                 mov     ecx, off_412094 ; "notset"
.text:0040DC41                 mov     dword ptr [esp+4], 0
.text:0040DC49                 mov     [esp+8], ecx
.text:0040DC4D                 call    HeapFree
.text:0040DC52                 mov     edx, off_412090 ; "notset"
.text:0040DC58                 sub     esp, 0Ch
.text:0040DC5B                 mov     eax, 1
.text:0040DC60                 mov     off_412094, edx ; "notset"
.text:0040DC66                 add     esp, 0Ch
.text:0040DC69                 retn
.text:0040DC69 ; ---------------------------------------------------------------------------
.text:0040DC6A                 align 10h
.text:0040DC70                 push    edi
.text:0040DC71                 push    esi
.text:0040DC72                 push    ebx
.text:0040DC73                 sub     esp, 10h
.text:0040DC76                 mov     edi, [esp+24h]
.text:0040DC7A                 mov     [esp], edi
.text:0040DC7D                 call    strlen
.text:0040DC82                 mov     edx, [esp+20h]
.text:0040DC86                 mov     esi, eax
.text:0040DC88                 mov     ebx, [edx+0Ch]
.text:0040DC8B                 nop
.text:0040DC8C                 lea     esi, [esi+0]
.text:0040DC90
.text:0040DC90 loc_40DC90:                             ; CODE XREF: .text:0040DCC1↓j
.text:0040DC90                 mov     [esp+4], edi
.text:0040DC94                 mov     [esp], ebx
.text:0040DC97                 call    strstr
.text:0040DC9C                 test    eax, eax
.text:0040DC9E                 jz      short loc_40DCC3
.text:0040DCA0                 cmp     eax, ebx
.text:0040DCA2                 jz      short loc_40DCC5
.text:0040DCA4                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:0040DCA8                 jz      short loc_40DCD0
.text:0040DCAA
.text:0040DCAA loc_40DCAA:                             ; CODE XREF: .text:0040DCE0↓j
.text:0040DCAA                 mov     [esp], ebx
.text:0040DCAD                 mov     dword ptr [esp+4], 2Ch ; ','
.text:0040DCB5                 call    strchr
.text:0040DCBA                 test    eax, eax
.text:0040DCBC                 mov     ebx, eax
.text:0040DCBE                 jz      short loc_40DCC3
.text:0040DCC0                 inc     ebx
.text:0040DCC1                 jmp     short loc_40DC90
.text:0040DCC3 ; ---------------------------------------------------------------------------
.text:0040DCC3
.text:0040DCC3 loc_40DCC3:                             ; CODE XREF: .text:0040DC9E↑j
.text:0040DCC3                                         ; .text:0040DCBE↑j
.text:0040DCC3                 xor     eax, eax
.text:0040DCC5
.text:0040DCC5 loc_40DCC5:                             ; CODE XREF: .text:0040DCA2↑j
.text:0040DCC5                                         ; .text:0040DCD6↓j ...
.text:0040DCC5                 add     esp, 10h
.text:0040DCC8                 pop     ebx
.text:0040DCC9                 pop     esi
.text:0040DCCA                 pop     edi
.text:0040DCCB                 retn
.text:0040DCCB ; ---------------------------------------------------------------------------
.text:0040DCCC                 align 10h
.text:0040DCD0
.text:0040DCD0 loc_40DCD0:                             ; CODE XREF: .text:0040DCA8↑j
.text:0040DCD0                 movzx   edx, byte ptr [esi+eax]
.text:0040DCD4                 test    dl, dl
.text:0040DCD6                 jz      short loc_40DCC5
.text:0040DCD8                 cmp     dl, 3Dh ; '='
.text:0040DCDB                 jz      short loc_40DCC5
.text:0040DCDD                 cmp     dl, 2Ch ; ','
.text:0040DCE0                 jnz     short loc_40DCAA
.text:0040DCE2                 jmp     short loc_40DCC5
.text:0040DCE2 ; ---------------------------------------------------------------------------
.text:0040DCE4                 align 10h
.text:0040DCF0 ; const char aFxstat64BadFil[]
.text:0040DCF0 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:0040DCF0                                         ; DATA XREF: sub_40DD20+7B↓o
.text:0040DD14                 align 10h
.text:0040DD20
.text:0040DD20 ; =============== S U B R O U T I N E =======================================
.text:0040DD20
.text:0040DD20
.text:0040DD20 ; int __cdecl sub_40DD20(HANDLE hNamedPipe, int, int)
.text:0040DD20 sub_40DD20      proc near               ; CODE XREF: .text:0040C159↑p
.text:0040DD20
.text:0040DD20 FileHandle      = dword ptr -1Ch
.text:0040DD20 var_18          = dword ptr -18h
.text:0040DD20 var_C           = dword ptr -0Ch
.text:0040DD20 var_8           = dword ptr -8
.text:0040DD20 var_4           = dword ptr -4
.text:0040DD20 hNamedPipe      = dword ptr  4
.text:0040DD20 arg_4           = dword ptr  8
.text:0040DD20 arg_8           = dword ptr  0Ch
.text:0040DD20
.text:0040DD20                 sub     esp, 1Ch
.text:0040DD23                 mov     edx, [esp+1Ch+arg_4]
.text:0040DD27                 mov     [esp+1Ch+var_C], ebx
.text:0040DD2B                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0040DD2F                 mov     [esp+1Ch+var_8], esi
.text:0040DD33                 mov     esi, [esp+1Ch+arg_8]
.text:0040DD37                 test    ebx, ebx
.text:0040DD39                 mov     [esp+1Ch+var_4], edi
.text:0040DD3D                 jnz     short loc_40DD77
.text:0040DD3F                 test    edx, edx
.text:0040DD41                 js      short loc_40DD97
.text:0040DD43                 test    esi, esi
.text:0040DD45                 jz      short loc_40DD77
.text:0040DD47                 cld
.text:0040DD48                 mov     eax, ebx
.text:0040DD4A                 mov     edi, esi
.text:0040DD4C                 mov     ecx, 18h
.text:0040DD51                 rep stosd
.text:0040DD53                 mov     [esp+1Ch+arg_4], esi ; int
.text:0040DD57                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0040DD5A                 call    _get_osfhandle
.text:0040DD5F                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:0040DD63                 mov     ebx, [esp+1Ch+var_C]
.text:0040DD67                 mov     esi, [esp+1Ch+var_8]
.text:0040DD6B                 mov     edi, [esp+1Ch+var_4]
.text:0040DD6F                 add     esp, 1Ch
.text:0040DD72                 jmp     sub_408FD0
.text:0040DD77 ; ---------------------------------------------------------------------------
.text:0040DD77
.text:0040DD77 loc_40DD77:                             ; CODE XREF: sub_40DD20+1D↑j
.text:0040DD77                                         ; sub_40DD20+25↑j
.text:0040DD77                 call    _errno
.text:0040DD7C                 mov     dword ptr [eax], 16h
.text:0040DD82
.text:0040DD82 loc_40DD82:                             ; CODE XREF: sub_40DD20+92↓j
.text:0040DD82                 mov     ebx, [esp+1Ch+var_C]
.text:0040DD86                 mov     eax, 0FFFFFFFFh
.text:0040DD8B                 mov     esi, [esp+1Ch+var_8]
.text:0040DD8F                 mov     edi, [esp+1Ch+var_4]
.text:0040DD93                 add     esp, 1Ch
.text:0040DD96                 retn
.text:0040DD97 ; ---------------------------------------------------------------------------
.text:0040DD97
.text:0040DD97 loc_40DD97:                             ; CODE XREF: sub_40DD20+21↑j
.text:0040DD97                 mov     [esp+1Ch+var_18], edx
.text:0040DD9B                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:0040DDA2                 call    printf
.text:0040DDA7                 call    _errno
.text:0040DDAC                 mov     dword ptr [eax], 9
.text:0040DDB2                 jmp     short loc_40DD82
.text:0040DDB2 sub_40DD20      endp
.text:0040DDB2
.text:0040DDB2 ; ---------------------------------------------------------------------------
.text:0040DDB4                 db 1Ch dup(90h)
.text:0040DDD0
.text:0040DDD0 ; =============== S U B R O U T I N E =======================================
.text:0040DDD0
.text:0040DDD0
.text:0040DDD0 sub_40DDD0      proc near               ; CODE XREF: sub_40CDA0+8A↑p
.text:0040DDD0                                         ; .text:0040E9AB↓p
.text:0040DDD0                 xor     eax, eax
.text:0040DDD2                 retn
.text:0040DDD2 sub_40DDD0      endp
.text:0040DDD2
.text:0040DDD2 ; ---------------------------------------------------------------------------
.text:0040DDD3                 align 10h
.text:0040DDE0
.text:0040DDE0 ; =============== S U B R O U T I N E =======================================
.text:0040DDE0
.text:0040DDE0
.text:0040DDE0 sub_40DDE0      proc near               ; CODE XREF: sub_40CDA0+7E↑p
.text:0040DDE0                                         ; .text:0040E984↓p
.text:0040DDE0                 xor     eax, eax
.text:0040DDE2                 retn
.text:0040DDE2 sub_40DDE0      endp
.text:0040DDE2
.text:0040DDE2 ; ---------------------------------------------------------------------------
.text:0040DDE3                 align 10h
.text:0040DDF0
.text:0040DDF0 ; =============== S U B R O U T I N E =======================================
.text:0040DDF0
.text:0040DDF0 ; Attributes: noreturn
.text:0040DDF0
.text:0040DDF0 sub_40DDF0      proc near               ; CODE XREF: .text:0040D4D9↑p
.text:0040DDF0                                         ; sub_40DDF0↓j
.text:0040DDF0                 jmp     short sub_40DDF0
.text:0040DDF0 sub_40DDF0      endp
.text:0040DDF0
.text:0040DDF0 ; ---------------------------------------------------------------------------
.text:0040DDF2                 align 10h
.text:0040DE00
.text:0040DE00 ; =============== S U B R O U T I N E =======================================
.text:0040DE00
.text:0040DE00
.text:0040DE00 sub_40DE00      proc near               ; CODE XREF: .text:0040D235↑p
.text:0040DE00
.text:0040DE00 FileHandle      = dword ptr -1Ch
.text:0040DE00 dwFileOffsetLow = dword ptr -18h
.text:0040DE00 dwFileOffsetHigh= dword ptr -14h
.text:0040DE00 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:0040DE00 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:0040DE00 var_8           = dword ptr -8
.text:0040DE00 var_4           = dword ptr -4
.text:0040DE00 arg_0           = dword ptr  4
.text:0040DE00
.text:0040DE00                 sub     esp, 1Ch
.text:0040DE03                 mov     edx, [esp+1Ch+arg_0]
.text:0040DE07                 mov     [esp+1Ch+var_4], esi
.text:0040DE0B                 mov     [esp+1Ch+var_8], ebx
.text:0040DE0F                 mov     ebx, [edx+10h]
.text:0040DE12                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040DE15                 call    _get_osfhandle
.text:0040DE1A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040DE1D                 mov     esi, eax
.text:0040DE1F                 call    _filelengthi64
.text:0040DE24                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:0040DE28                 cdq
.text:0040DE29                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0040DE2C                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0040DE30                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:0040DE38                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:0040DE40                 call    UnlockFile
.text:0040DE45                 sub     esp, 14h
.text:0040DE48                 mov     ebx, [esp+1Ch+var_8]
.text:0040DE4C                 mov     esi, [esp+1Ch+var_4]
.text:0040DE50                 add     esp, 1Ch
.text:0040DE53                 retn
.text:0040DE53 sub_40DE00      endp
.text:0040DE53
.text:0040DE53 ; ---------------------------------------------------------------------------
.text:0040DE54                 align 10h
.text:0040DE60
.text:0040DE60 ; =============== S U B R O U T I N E =======================================
.text:0040DE60
.text:0040DE60
.text:0040DE60 ; int __cdecl sub_40DE60(int, char *Control)
.text:0040DE60 sub_40DE60      proc near               ; CODE XREF: .text:0040D0F6↑p
.text:0040DE60                                         ; .text:0040D146↑p ...
.text:0040DE60
.text:0040DE60 Str             = dword ptr -1Ch
.text:0040DE60 Val             = dword ptr -18h
.text:0040DE60 var_8           = dword ptr -8
.text:0040DE60 var_4           = dword ptr -4
.text:0040DE60 arg_0           = dword ptr  4
.text:0040DE60 Control         = dword ptr  8
.text:0040DE60
.text:0040DE60                 sub     esp, 1Ch
.text:0040DE63                 xor     eax, eax
.text:0040DE65                 mov     edx, [esp+1Ch+Control]
.text:0040DE69                 mov     [esp+1Ch+var_4], esi
.text:0040DE6D                 mov     esi, [esp+1Ch+arg_0]
.text:0040DE71                 mov     [esp+1Ch+var_8], ebx
.text:0040DE75                 mov     ebx, [esi]
.text:0040DE77                 test    ebx, ebx
.text:0040DE79                 jz      short loc_40DEA8
.text:0040DE7B                 movzx   eax, byte ptr [edx]
.text:0040DE7E                 test    al, al
.text:0040DE80                 jz      short loc_40DEA0
.text:0040DE82                 cmp     byte ptr [edx+1], 0
.text:0040DE86                 jnz     short loc_40DEE0
.text:0040DE88                 movzx   ecx, byte ptr [ebx]
.text:0040DE8B                 mov     edx, ebx
.text:0040DE8D                 cmp     cl, al
.text:0040DE8F                 jz      short loc_40DED2
.text:0040DE91                 test    cl, cl
.text:0040DE93                 jnz     short loc_40DEB4
.text:0040DE95                 lea     esi, [esi+0]
.text:0040DE99                 lea     edi, [edi+0]
.text:0040DEA0
.text:0040DEA0 loc_40DEA0:                             ; CODE XREF: sub_40DE60+20↑j
.text:0040DEA0                                         ; sub_40DE60+74↓j
.text:0040DEA0                 mov     dword ptr [esi], 0
.text:0040DEA6
.text:0040DEA6 loc_40DEA6:                             ; CODE XREF: sub_40DE60+7C↓j
.text:0040DEA6                 mov     eax, ebx
.text:0040DEA8
.text:0040DEA8 loc_40DEA8:                             ; CODE XREF: sub_40DE60+19↑j
.text:0040DEA8                 mov     ebx, [esp+1Ch+var_8]
.text:0040DEAC                 mov     esi, [esp+1Ch+var_4]
.text:0040DEB0                 add     esp, 1Ch
.text:0040DEB3                 retn
.text:0040DEB4 ; ---------------------------------------------------------------------------
.text:0040DEB4
.text:0040DEB4 loc_40DEB4:                             ; CODE XREF: sub_40DE60+33↑j
.text:0040DEB4                 movsx   edx, al
.text:0040DEB7                 mov     [esp+1Ch+Val], edx ; Val
.text:0040DEBB                 lea     edx, [ebx+1]
.text:0040DEBE                 mov     [esp+1Ch+Str], edx ; Str
.text:0040DEC1                 call    strchr
.text:0040DEC6                 lea     esi, [esi+0]
.text:0040DEC9                 lea     edi, [edi+0]
.text:0040DED0
.text:0040DED0 loc_40DED0:                             ; CODE XREF: sub_40DE60+8C↓j
.text:0040DED0                 mov     edx, eax
.text:0040DED2
.text:0040DED2 loc_40DED2:                             ; CODE XREF: sub_40DE60+2F↑j
.text:0040DED2                 test    edx, edx
.text:0040DED4                 jz      short loc_40DEA0
.text:0040DED6                 mov     byte ptr [edx], 0
.text:0040DED9                 inc     edx
.text:0040DEDA                 mov     [esi], edx
.text:0040DEDC                 jmp     short loc_40DEA6
.text:0040DEDC ; ---------------------------------------------------------------------------
.text:0040DEDE                 align 10h
.text:0040DEE0
.text:0040DEE0 loc_40DEE0:                             ; CODE XREF: sub_40DE60+26↑j
.text:0040DEE0                 mov     [esp+1Ch+Val], edx ; Control
.text:0040DEE4                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040DEE7                 call    strpbrk
.text:0040DEEC                 jmp     short loc_40DED0
.text:0040DEEC sub_40DE60      endp
.text:0040DEEC
.text:0040DEEC ; ---------------------------------------------------------------------------
.text:0040DEEE                 align 10h
.text:0040DEF0 ; const char aTmpf[]
.text:0040DEF0 aTmpf           db 'tmpf',0             ; DATA XREF: sub_40DF00+20↓o
.text:0040DEF5 ; const char aWBd[]
.text:0040DEF5 aWBd            db 'w+bD',0             ; DATA XREF: sub_40DF00+5E↓o
.text:0040DEFA                 align 10h
.text:0040DF00
.text:0040DF00 ; =============== S U B R O U T I N E =======================================
.text:0040DF00
.text:0040DF00
.text:0040DF00 sub_40DF00      proc near               ; CODE XREF: sub_40DB6F+A4↑p
.text:0040DF00
.text:0040DF00 FileHandle      = dword ptr -13Ch
.text:0040DF00 Format          = dword ptr -138h
.text:0040DF00 var_134         = dword ptr -134h
.text:0040DF00 var_130         = dword ptr -130h
.text:0040DF00 var_12C         = dword ptr -12Ch
.text:0040DF00 Buffer          = byte ptr -11Ch
.text:0040DF00 var_8           = dword ptr -8
.text:0040DF00 var_4           = dword ptr -4
.text:0040DF00
.text:0040DF00                 sub     esp, 13Ch
.text:0040DF06                 mov     [esp+13Ch+var_8], ebx
.text:0040DF0D                 lea     ebx, [esp+13Ch+Buffer]
.text:0040DF11                 mov     [esp+13Ch+var_4], esi
.text:0040DF18                 mov     [esp+13Ch+var_12C], 0 ; int
.text:0040DF20                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:0040DF28                 mov     [esp+13Ch+var_134], 0 ; char *
.text:0040DF30                 mov     [esp+13Ch+Format], 104h ; int
.text:0040DF38                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0040DF3B                 call    sub_40DFD0
.text:0040DF40                 xor     edx, edx
.text:0040DF42                 test    eax, eax
.text:0040DF44                 jnz     short loc_40DF76
.text:0040DF46                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:0040DF49                 mov     [esp+13Ch+Format], 0 ; int
.text:0040DF51                 call    sub_40E350
.text:0040DF56                 xor     edx, edx
.text:0040DF58                 mov     ebx, eax
.text:0040DF5A                 test    eax, eax
.text:0040DF5C                 js      short loc_40DF76
.text:0040DF5E                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:0040DF66                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:0040DF69                 call    _fdopen
.text:0040DF6E                 test    eax, eax
.text:0040DF70                 mov     esi, eax
.text:0040DF72                 jz      short loc_40DF8D
.text:0040DF74
.text:0040DF74 loc_40DF74:                             ; CODE XREF: sub_40DF00+95↓j
.text:0040DF74                 mov     edx, esi
.text:0040DF76
.text:0040DF76 loc_40DF76:                             ; CODE XREF: sub_40DF00+44↑j
.text:0040DF76                                         ; sub_40DF00+5C↑j
.text:0040DF76                 mov     ebx, [esp+13Ch+var_8]
.text:0040DF7D                 mov     eax, edx
.text:0040DF7F                 mov     esi, [esp+13Ch+var_4]
.text:0040DF86                 add     esp, 13Ch
.text:0040DF8C                 retn
.text:0040DF8D ; ---------------------------------------------------------------------------
.text:0040DF8D
.text:0040DF8D loc_40DF8D:                             ; CODE XREF: sub_40DF00+72↑j
.text:0040DF8D                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:0040DF90                 call    _close
.text:0040DF95                 jmp     short loc_40DF74
.text:0040DF95 sub_40DF00      endp
.text:0040DF95
.text:0040DF95 ; ---------------------------------------------------------------------------
.text:0040DF97                 align 10h
.text:0040DFA0 aFile           db 'file',0             ; DATA XREF: sub_40DFD0:loc_40DFFC↓o
.text:0040DFA5 ; const char aSSxxxxxx[]
.text:0040DFA5 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_40DFD0+9B↓o
.text:0040DFB5 ; const char aTemp[]
.text:0040DFB5 aTemp           db 'TEMP',0             ; DATA XREF: sub_40DFD0:loc_40E0B2↓o
.text:0040DFB5                                         ; sub_40DFD0:loc_40E0F2↓o ...
.text:0040DFBA ; const char aTmp[]
.text:0040DFBA aTmp            db '/tmp',0             ; DATA XREF: sub_40DFD0+12F↓o
.text:0040DFBA                                         ; sub_40DFD0+141↓o ...
.text:0040DFBF aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_40DFD0:loc_40E170↓o
.text:0040DFC6 aTmp_0          db 'TMP',0              ; DATA XREF: sub_40DFD0:loc_40E200↓o
.text:0040DFCA                 align 10h
.text:0040DFD0
.text:0040DFD0 ; =============== S U B R O U T I N E =======================================
.text:0040DFD0
.text:0040DFD0
.text:0040DFD0 ; int __cdecl sub_40DFD0(char *Buffer, int, char *, char *, int)
.text:0040DFD0 sub_40DFD0      proc near               ; CODE XREF: sub_40DF00+3B↑p
.text:0040DFD0
.text:0040DFD0 Str             = dword ptr -1BCh
.text:0040DFD0 Format          = dword ptr -1B8h
.text:0040DFD0 var_1B4         = dword ptr -1B4h
.text:0040DFD0 var_1B0         = dword ptr -1B0h
.text:0040DFD0 var_1AC         = dword ptr -1ACh
.text:0040DFD0 var_1A8         = dword ptr -1A8h
.text:0040DFD0 var_19C         = dword ptr -19Ch
.text:0040DFD0 var_13C         = dword ptr -13Ch
.text:0040DFD0 var_DC          = dword ptr -0DCh
.text:0040DFD0 var_7C          = dword ptr -7Ch
.text:0040DFD0 Buffer          = dword ptr  4
.text:0040DFD0 arg_4           = dword ptr  8
.text:0040DFD0 arg_8           = dword ptr  0Ch
.text:0040DFD0 arg_C           = dword ptr  10h
.text:0040DFD0 arg_10          = dword ptr  14h
.text:0040DFD0
.text:0040DFD0                 push    ebp
.text:0040DFD1                 push    edi
.text:0040DFD2                 push    esi
.text:0040DFD3                 push    ebx
.text:0040DFD4                 sub     esp, 1ACh
.text:0040DFDA                 mov     eax, [esp+1BCh+arg_C]
.text:0040DFE1                 mov     esi, [esp+1BCh+arg_8]
.text:0040DFE8                 test    eax, eax
.text:0040DFEA                 jz      short loc_40DFFC
.text:0040DFEC                 mov     edx, [esp+1BCh+arg_C]
.text:0040DFF3                 cmp     byte ptr [edx], 0
.text:0040DFF6                 jnz     loc_40E230
.text:0040DFFC
.text:0040DFFC loc_40DFFC:                             ; CODE XREF: sub_40DFD0+1A↑j
.text:0040DFFC                 mov     eax, offset aFile ; "file"
.text:0040E001                 mov     ebp, 4
.text:0040E006                 mov     [esp+1BCh+arg_C], eax
.text:0040E00D
.text:0040E00D loc_40E00D:                             ; CODE XREF: sub_40DFD0+274↓j
.text:0040E00D                                         ; sub_40DFD0+27F↓j
.text:0040E00D                 mov     ebx, [esp+1BCh+arg_10]
.text:0040E014                 test    ebx, ebx
.text:0040E016                 jnz     loc_40E170
.text:0040E01C
.text:0040E01C loc_40E01C:                             ; CODE XREF: sub_40DFD0+21C↓j
.text:0040E01C                                         ; sub_40DFD0+224↓j ...
.text:0040E01C                 test    esi, esi
.text:0040E01E                 jz      loc_40E0B2
.text:0040E024
.text:0040E024 loc_40E024:                             ; CODE XREF: sub_40DFD0+176↓j
.text:0040E024                                         ; sub_40DFD0+19A↓j
.text:0040E024                 mov     [esp+1BCh+Str], esi ; Str
.text:0040E027                 call    strlen
.text:0040E02C                 test    eax, eax
.text:0040E02E                 mov     edx, eax
.text:0040E030                 jz      short loc_40E040
.text:0040E032                 movzx   eax, byte ptr [eax+esi-1]
.text:0040E037                 cmp     al, 2Fh ; '/'
.text:0040E039                 jz      short loc_40E0A0
.text:0040E03B                 cmp     al, 5Ch ; '\'
.text:0040E03D                 jz      short loc_40E0A0
.text:0040E03F                 nop
.text:0040E040
.text:0040E040 loc_40E040:                             ; CODE XREF: sub_40DFD0+60↑j
.text:0040E040                                         ; sub_40DFD0+D1↓j ...
.text:0040E040                 lea     edi, [ebp+edx+8]
.text:0040E044                 cmp     [esp+1BCh+arg_4], edi
.text:0040E04B                 jb      short loc_40E088
.text:0040E04D                 mov     [esp+1BCh+var_1AC], ebp
.text:0040E051                 mov     ecx, [esp+1BCh+arg_C]
.text:0040E058                 mov     ebp, [esp+1BCh+Buffer]
.text:0040E05F                 mov     [esp+1BCh+var_1B0], esi
.text:0040E063                 mov     [esp+1BCh+var_1A8], ecx
.text:0040E067                 mov     [esp+1BCh+var_1B4], edx
.text:0040E06B                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:0040E073                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:0040E076                 call    sprintf
.text:0040E07B                 xor     eax, eax
.text:0040E07D
.text:0040E07D loc_40E07D:                             ; CODE XREF: sub_40DFD0+C8↓j
.text:0040E07D                 add     esp, 1ACh
.text:0040E083                 pop     ebx
.text:0040E084                 pop     esi
.text:0040E085                 pop     edi
.text:0040E086                 pop     ebp
.text:0040E087                 retn
.text:0040E088 ; ---------------------------------------------------------------------------
.text:0040E088
.text:0040E088 loc_40E088:                             ; CODE XREF: sub_40DFD0+7B↑j
.text:0040E088                 call    _errno
.text:0040E08D                 mov     dword ptr [eax], 16h
.text:0040E093
.text:0040E093 loc_40E093:                             ; CODE XREF: sub_40DFD0+187↓j
.text:0040E093                 mov     eax, 0FFFFFFFFh
.text:0040E098                 jmp     short loc_40E07D
.text:0040E098 ; ---------------------------------------------------------------------------
.text:0040E09A                 align 10h
.text:0040E0A0
.text:0040E0A0 loc_40E0A0:                             ; CODE XREF: sub_40DFD0+69↑j
.text:0040E0A0                                         ; sub_40DFD0+6D↑j ...
.text:0040E0A0                 dec     edx
.text:0040E0A1                 jz      short loc_40E040
.text:0040E0A3                 movzx   eax, byte ptr [edx+esi-1]
.text:0040E0A8                 cmp     al, 2Fh ; '/'
.text:0040E0AA                 jz      short loc_40E0A0
.text:0040E0AC                 cmp     al, 5Ch ; '\'
.text:0040E0AE                 jz      short loc_40E0A0
.text:0040E0B0                 jmp     short loc_40E040
.text:0040E0B2 ; ---------------------------------------------------------------------------
.text:0040E0B2
.text:0040E0B2 loc_40E0B2:                             ; CODE XREF: sub_40DFD0+4E↑j
.text:0040E0B2                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040E0B9                 lea     esi, [esp+1BCh+var_13C]
.text:0040E0C0                 call    getenv
.text:0040E0C5                 mov     [esp+1BCh+Format], eax ; char *
.text:0040E0C9                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0040E0CD                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040E0D4                 call    sub_408980
.text:0040E0D9                 test    eax, eax
.text:0040E0DB                 jnz     short loc_40E0F2
.text:0040E0DD                 mov     edi, [esp+1BCh+var_13C]
.text:0040E0E4                 and     edi, 0F000h
.text:0040E0EA                 cmp     edi, 4000h
.text:0040E0F0                 jz      short loc_40E15C
.text:0040E0F2
.text:0040E0F2 loc_40E0F2:                             ; CODE XREF: sub_40DFD0+10B↑j
.text:0040E0F2                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040E0F9                 call    getenv
.text:0040E0FE                 cld
.text:0040E0FF                 mov     edx, offset aTmp ; "/tmp"
.text:0040E104                 mov     esi, eax
.text:0040E106                 mov     ecx, 5
.text:0040E10B                 mov     edi, edx
.text:0040E10D                 repe cmpsb
.text:0040E10F                 jz      short loc_40E14C
.text:0040E111                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:0040E119                 lea     ecx, [esp+1BCh+var_19C]
.text:0040E11D                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040E121                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040E128                 call    sub_408980
.text:0040E12D                 test    eax, eax
.text:0040E12F                 jnz     short loc_40E14C
.text:0040E131                 mov     ebx, [esp+1BCh+var_19C]
.text:0040E135                 mov     esi, offset aTmp ; "/tmp"
.text:0040E13A                 and     ebx, 0F000h
.text:0040E140                 cmp     ebx, 4000h
.text:0040E146                 jz      loc_40E024
.text:0040E14C
.text:0040E14C loc_40E14C:                             ; CODE XREF: sub_40DFD0+13F↑j
.text:0040E14C                                         ; sub_40DFD0+15F↑j
.text:0040E14C                 call    _errno
.text:0040E151                 mov     dword ptr [eax], 2
.text:0040E157                 jmp     loc_40E093
.text:0040E15C ; ---------------------------------------------------------------------------
.text:0040E15C
.text:0040E15C loc_40E15C:                             ; CODE XREF: sub_40DFD0+120↑j
.text:0040E15C                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040E163                 call    getenv
.text:0040E168                 mov     esi, eax
.text:0040E16A                 jmp     loc_40E024
.text:0040E16A ; ---------------------------------------------------------------------------
.text:0040E16F                 align 10h
.text:0040E170
.text:0040E170 loc_40E170:                             ; CODE XREF: sub_40DFD0+46↑j
.text:0040E170                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:0040E177                 call    sub_40E860
.text:0040E17C                 test    eax, eax
.text:0040E17E                 mov     ebx, eax
.text:0040E180                 jz      short loc_40E200
.text:0040E182
.text:0040E182 loc_40E182:                             ; CODE XREF: sub_40DFD0+240↓j
.text:0040E182                                         ; sub_40DFD0+256↓j
.text:0040E182                 mov     [esp+1BCh+Format], ebx ; char *
.text:0040E186                 lea     edi, [esp+1BCh+var_7C]
.text:0040E18D                 mov     [esp+1BCh+var_1B4], edi ; int
.text:0040E191                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040E198                 call    sub_408980
.text:0040E19D                 test    eax, eax
.text:0040E19F                 jnz     short loc_40E1B6
.text:0040E1A1                 mov     edx, [esp+1BCh+var_7C]
.text:0040E1A8                 and     edx, 0F000h
.text:0040E1AE                 cmp     edx, 4000h
.text:0040E1B4                 jz      short loc_40E1F9
.text:0040E1B6
.text:0040E1B6 loc_40E1B6:                             ; CODE XREF: sub_40DFD0+1CF↑j
.text:0040E1B6                                         ; sub_40DFD0+25C↓j
.text:0040E1B6                 test    esi, esi
.text:0040E1B8                 jz      short loc_40E1F2
.text:0040E1BA                 mov     [esp+1BCh+Format], esi ; char *
.text:0040E1BE                 lea     ecx, [esp+1BCh+var_DC]
.text:0040E1C5                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040E1C9                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040E1D0                 call    sub_408980
.text:0040E1D5                 test    eax, eax
.text:0040E1D7                 jnz     short loc_40E1F2
.text:0040E1D9                 mov     ebx, [esp+1BCh+var_DC]
.text:0040E1E0                 and     ebx, 0F000h
.text:0040E1E6                 cmp     ebx, 4000h
.text:0040E1EC                 jz      loc_40E01C
.text:0040E1F2
.text:0040E1F2 loc_40E1F2:                             ; CODE XREF: sub_40DFD0+1E8↑j
.text:0040E1F2                                         ; sub_40DFD0+207↑j
.text:0040E1F2                 xor     esi, esi
.text:0040E1F4                 jmp     loc_40E01C
.text:0040E1F9 ; ---------------------------------------------------------------------------
.text:0040E1F9
.text:0040E1F9 loc_40E1F9:                             ; CODE XREF: sub_40DFD0+1E4↑j
.text:0040E1F9                 mov     esi, ebx
.text:0040E1FB                 jmp     loc_40E01C
.text:0040E200 ; ---------------------------------------------------------------------------
.text:0040E200
.text:0040E200 loc_40E200:                             ; CODE XREF: sub_40DFD0+1B0↑j
.text:0040E200                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:0040E207                 call    sub_40E860
.text:0040E20C                 test    eax, eax
.text:0040E20E                 mov     ebx, eax
.text:0040E210                 jnz     loc_40E182
.text:0040E216                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040E21D                 call    sub_40E860
.text:0040E222                 test    eax, eax
.text:0040E224                 mov     ebx, eax
.text:0040E226                 jnz     loc_40E182
.text:0040E22C                 jmp     short loc_40E1B6
.text:0040E22C ; ---------------------------------------------------------------------------
.text:0040E22E                 align 10h
.text:0040E230
.text:0040E230 loc_40E230:                             ; CODE XREF: sub_40DFD0+26↑j
.text:0040E230                 mov     ecx, [esp+1BCh+arg_C]
.text:0040E237                 mov     [esp+1BCh+Str], ecx ; Str
.text:0040E23A                 call    strlen
.text:0040E23F                 cmp     eax, 5
.text:0040E242                 mov     ebp, eax
.text:0040E244                 jbe     loc_40E00D
.text:0040E24A                 mov     ebp, 5
.text:0040E24F                 jmp     loc_40E00D
.text:0040E24F sub_40DFD0      endp
.text:0040E24F
.text:0040E24F ; ---------------------------------------------------------------------------
.text:0040E254                 align 10h
.text:0040E260 byte_40E260     db 61h                  ; DATA XREF: sub_40E350+DC↓r
.text:0040E260                                         ; sub_40E350+122↓r ...
.text:0040E261 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0040E29F aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_40E350+39↓o
.text:0040E2A6                 align 20h
.text:0040E2C0 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:0040E2C0                                         ; DATA XREF: sub_40E350:loc_40E5C8↓o
.text:0040E2DF                 align 10h
.text:0040E2E0 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:0040E2E0                                         ; DATA XREF: sub_40E350+405↓o
.text:0040E30B                 align 20h
.text:0040E320 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:0040E320                                         ; DATA XREF: sub_40E350+40D↓o
.text:0040E343                 align 10h
.text:0040E350
.text:0040E350 ; =============== S U B R O U T I N E =======================================
.text:0040E350
.text:0040E350
.text:0040E350 ; int __cdecl sub_40E350(char *FileName, int)
.text:0040E350 sub_40E350      proc near               ; CODE XREF: sub_40DF00+51↑p
.text:0040E350
.text:0040E350 Str             = dword ptr -9Ch
.text:0040E350 OpenFlag        = dword ptr -98h
.text:0040E350 var_94          = dword ptr -94h
.text:0040E350 var_90          = dword ptr -90h
.text:0040E350 var_8C          = dword ptr -8Ch
.text:0040E350 var_88          = dword ptr -88h
.text:0040E350 var_84          = dword ptr -84h
.text:0040E350 var_80          = dword ptr -80h
.text:0040E350 var_7C          = dword ptr -7Ch
.text:0040E350 FileName        = dword ptr  4
.text:0040E350 arg_4           = dword ptr  8
.text:0040E350
.text:0040E350                 push    ebp
.text:0040E351                 push    edi
.text:0040E352                 push    esi
.text:0040E353                 push    ebx
.text:0040E354                 sub     esp, 8Ch
.text:0040E35A                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:0040E362                 call    _errno
.text:0040E367                 mov     edx, [eax]
.text:0040E369                 mov     [esp+9Ch+var_8C], edx
.text:0040E36D                 mov     edx, [esp+9Ch+FileName]
.text:0040E374                 mov     [esp+9Ch+Str], edx ; Str
.text:0040E377                 call    strlen
.text:0040E37C                 cmp     eax, 5
.text:0040E37F                 jle     short loc_40E39D
.text:0040E381                 cld
.text:0040E382                 mov     ecx, [esp+9Ch+FileName]
.text:0040E389                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:0040E38E                 lea     esi, [eax+ecx-6]
.text:0040E392                 mov     ecx, 7
.text:0040E397                 mov     ebp, esi
.text:0040E399                 repe cmpsb
.text:0040E39B                 jz      short loc_40E3B8
.text:0040E39D
.text:0040E39D loc_40E39D:                             ; CODE XREF: sub_40E350+2F↑j
.text:0040E39D                 call    _errno
.text:0040E3A2                 mov     dword ptr [eax], 16h
.text:0040E3A8
.text:0040E3A8 loc_40E3A8:                             ; CODE XREF: sub_40E350+295↓j
.text:0040E3A8                                         ; sub_40E350+2D8↓j ...
.text:0040E3A8                 mov     eax, 0FFFFFFFFh
.text:0040E3AD
.text:0040E3AD loc_40E3AD:                             ; CODE XREF: sub_40E350+2EF↓j
.text:0040E3AD                                         ; sub_40E350+332↓j
.text:0040E3AD                 add     esp, 8Ch
.text:0040E3B3                 pop     ebx
.text:0040E3B4                 pop     esi
.text:0040E3B5                 pop     edi
.text:0040E3B6                 pop     ebp
.text:0040E3B7                 retn
.text:0040E3B8 ; ---------------------------------------------------------------------------
.text:0040E3B8
.text:0040E3B8 loc_40E3B8:                             ; CODE XREF: sub_40E350+4B↑j
.text:0040E3B8                 mov     ecx, dword ptr ds:byte_4139D0+114h
.text:0040E3BE                 mov     edi, dword ptr ds:byte_4139D0+110h
.text:0040E3C4                 mov     eax, ecx
.text:0040E3C6                 or      eax, edi
.text:0040E3C8                 jz      loc_40E703
.text:0040E3CE
.text:0040E3CE loc_40E3CE:                             ; CODE XREF: sub_40E350+3F8↓j
.text:0040E3CE                 rdtsc
.text:0040E3D0                 mov     edi, edx
.text:0040E3D2                 mov     esi, eax
.text:0040E3D4                 call    _getpid
.text:0040E3D9                 mov     ebx, eax
.text:0040E3DB                 mov     edx, esi
.text:0040E3DD                 sar     ebx, 1Fh
.text:0040E3E0                 xor     edx, eax
.text:0040E3E2                 mov     ecx, edi
.text:0040E3E4                 xor     ecx, ebx
.text:0040E3E6                 mov     ebx, edx
.text:0040E3E8                 mov     esi, ecx
.text:0040E3EA                 add     ebx, dword ptr ds:byte_4139D0+110h
.text:0040E3F0                 adc     esi, dword ptr ds:byte_4139D0+114h
.text:0040E3F6                 xor     edi, edi
.text:0040E3F8                 mov     dword ptr ds:byte_4139D0+110h, ebx
.text:0040E3FE                 mov     dword ptr ds:byte_4139D0+114h, esi
.text:0040E404                 lea     esi, [esi+0]
.text:0040E40A                 lea     edi, [edi+0]
.text:0040E410
.text:0040E410 loc_40E410:                             ; CODE XREF: sub_40E350+2C7↓j
.text:0040E410                 mov     [esp+9Ch+Str], ebx
.text:0040E413                 mov     [esp+9Ch+OpenFlag], esi
.text:0040E417                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040E41F                 mov     [esp+9Ch+var_90], 0
.text:0040E427                 call    sub_410450
.text:0040E42C                 movzx   ecx, ds:byte_40E260[eax]
.text:0040E433                 mov     [ebp+0], cl
.text:0040E436                 mov     [esp+9Ch+Str], ebx
.text:0040E439                 mov     [esp+9Ch+OpenFlag], esi
.text:0040E43D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040E445                 mov     [esp+9Ch+var_90], 0
.text:0040E44D                 call    sub_410330
.text:0040E452                 mov     [esp+9Ch+Str], eax
.text:0040E455                 mov     ebx, eax
.text:0040E457                 mov     esi, edx
.text:0040E459                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040E461                 mov     [esp+9Ch+var_90], 0
.text:0040E469                 mov     [esp+9Ch+OpenFlag], edx
.text:0040E46D                 call    sub_410450
.text:0040E472                 movzx   edx, ds:byte_40E260[eax]
.text:0040E479                 mov     [ebp+1], dl
.text:0040E47C                 mov     [esp+9Ch+Str], ebx
.text:0040E47F                 mov     [esp+9Ch+OpenFlag], esi
.text:0040E483                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040E48B                 mov     [esp+9Ch+var_90], 0
.text:0040E493                 call    sub_410330
.text:0040E498                 mov     [esp+9Ch+Str], eax
.text:0040E49B                 mov     ebx, eax
.text:0040E49D                 mov     esi, edx
.text:0040E49F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040E4A7                 mov     [esp+9Ch+var_90], 0
.text:0040E4AF                 mov     [esp+9Ch+OpenFlag], edx
.text:0040E4B3                 call    sub_410450
.text:0040E4B8                 movzx   ecx, ds:byte_40E260[eax]
.text:0040E4BF                 mov     [ebp+2], cl
.text:0040E4C2                 mov     [esp+9Ch+Str], ebx
.text:0040E4C5                 mov     [esp+9Ch+OpenFlag], esi
.text:0040E4C9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040E4D1                 mov     [esp+9Ch+var_90], 0
.text:0040E4D9                 call    sub_410330
.text:0040E4DE                 mov     [esp+9Ch+Str], eax
.text:0040E4E1                 mov     ebx, eax
.text:0040E4E3                 mov     esi, edx
.text:0040E4E5                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040E4ED                 mov     [esp+9Ch+var_90], 0
.text:0040E4F5                 mov     [esp+9Ch+OpenFlag], edx
.text:0040E4F9                 call    sub_410450
.text:0040E4FE                 movzx   edx, ds:byte_40E260[eax]
.text:0040E505                 mov     [ebp+3], dl
.text:0040E508                 mov     [esp+9Ch+Str], ebx
.text:0040E50B                 mov     [esp+9Ch+OpenFlag], esi
.text:0040E50F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040E517                 mov     [esp+9Ch+var_90], 0
.text:0040E51F                 call    sub_410330
.text:0040E524                 mov     [esp+9Ch+Str], eax
.text:0040E527                 mov     ebx, eax
.text:0040E529                 mov     esi, edx
.text:0040E52B                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040E533                 mov     [esp+9Ch+var_90], 0
.text:0040E53B                 mov     [esp+9Ch+OpenFlag], edx
.text:0040E53F                 call    sub_410450
.text:0040E544                 movzx   ecx, ds:byte_40E260[eax]
.text:0040E54B                 mov     [ebp+4], cl
.text:0040E54E                 mov     [esp+9Ch+Str], ebx
.text:0040E551                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040E559                 mov     [esp+9Ch+var_90], 0
.text:0040E561                 mov     [esp+9Ch+OpenFlag], esi
.text:0040E565                 call    sub_410330
.text:0040E56A                 mov     [esp+9Ch+Str], eax
.text:0040E56D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040E575                 mov     [esp+9Ch+var_90], 0
.text:0040E57D                 mov     [esp+9Ch+OpenFlag], edx
.text:0040E581                 call    sub_410450
.text:0040E586                 movzx   ebx, ds:byte_40E260[eax]
.text:0040E58D                 mov     [ebp+5], bl
.text:0040E590                 cmp     [esp+9Ch+arg_4], 1
.text:0040E598                 jz      loc_40E6E7
.text:0040E59E                 cmp     [esp+9Ch+arg_4], 1
.text:0040E5A6                 jle     loc_40E6B0
.text:0040E5AC                 cmp     [esp+9Ch+arg_4], 2
.text:0040E5B4                 jz      loc_40E687
.text:0040E5BA                 cmp     [esp+9Ch+arg_4], 3
.text:0040E5C2                 jz      loc_40E644
.text:0040E5C8
.text:0040E5C8 loc_40E5C8:                             ; CODE XREF: sub_40E350+369↓j
.text:0040E5C8                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0040E5CD                 test    ebx, ebx
.text:0040E5CF                 jnz     loc_40E74D
.text:0040E5D5
.text:0040E5D5 loc_40E5D5:                             ; CODE XREF: sub_40E350+354↓j
.text:0040E5D5                 mov     eax, [esp+9Ch+var_88]
.text:0040E5D9                 test    eax, eax
.text:0040E5DB                 jns     short loc_40E630
.text:0040E5DD                 call    _errno
.text:0040E5E2                 cmp     dword ptr [eax], 11h
.text:0040E5E5                 jnz     loc_40E3A8
.text:0040E5EB
.text:0040E5EB loc_40E5EB:                             ; CODE XREF: sub_40E350+315↓j
.text:0040E5EB                 mov     edx, dword ptr ds:byte_4139D0+110h
.text:0040E5F1                 mov     ecx, dword ptr ds:byte_4139D0+114h
.text:0040E5F7                 add     edx, 1E61h
.text:0040E5FD                 adc     ecx, 0
.text:0040E600                 mov     ebx, edx
.text:0040E602                 inc     edi
.text:0040E603                 mov     dword ptr ds:byte_4139D0+110h, edx
.text:0040E609                 cmp     edi, 3A2F8h
.text:0040E60F                 mov     esi, ecx
.text:0040E611                 mov     dword ptr ds:byte_4139D0+114h, ecx
.text:0040E617                 jb      loc_40E410
.text:0040E61D                 call    _errno
.text:0040E622                 mov     dword ptr [eax], 11h
.text:0040E628                 jmp     loc_40E3A8
.text:0040E628 ; ---------------------------------------------------------------------------
.text:0040E62D                 align 10h
.text:0040E630
.text:0040E630 loc_40E630:                             ; CODE XREF: sub_40E350+28B↑j
.text:0040E630                 call    _errno
.text:0040E635                 mov     esi, [esp+9Ch+var_8C]
.text:0040E639                 mov     [eax], esi
.text:0040E63B                 mov     eax, [esp+9Ch+var_88]
.text:0040E63F                 jmp     loc_40E3AD
.text:0040E644 ; ---------------------------------------------------------------------------
.text:0040E644
.text:0040E644 loc_40E644:                             ; CODE XREF: sub_40E350+272↑j
.text:0040E644                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0040E64B                 mov     ecx, [esp+9Ch+FileName]
.text:0040E652                 lea     esi, [esp+9Ch+var_7C]
.text:0040E656                 mov     [esp+9Ch+var_94], esi ; int
.text:0040E65A                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0040E65E                 call    sub_4086A0
.text:0040E663                 test    eax, eax
.text:0040E665                 jns     short loc_40E5EB
.text:0040E667                 call    _errno
.text:0040E66C                 cmp     dword ptr [eax], 2
.text:0040E66F                 jnz     loc_40E3A8
.text:0040E675                 call    _errno
.text:0040E67A                 mov     ebx, [esp+9Ch+var_8C]
.text:0040E67E                 mov     [eax], ebx
.text:0040E680                 xor     eax, eax
.text:0040E682                 jmp     loc_40E3AD
.text:0040E687 ; ---------------------------------------------------------------------------
.text:0040E687
.text:0040E687 loc_40E687:                             ; CODE XREF: sub_40E350+264↑j
.text:0040E687                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:0040E68F                 mov     edx, [esp+9Ch+FileName]
.text:0040E696                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:0040E699                 call    sub_40E780
.text:0040E69E                 mov     esi, esi
.text:0040E6A0
.text:0040E6A0 loc_40E6A0:                             ; CODE XREF: sub_40E350+395↓j
.text:0040E6A0                 mov     [esp+9Ch+var_88], eax
.text:0040E6A4                 jmp     loc_40E5D5
.text:0040E6A4 ; ---------------------------------------------------------------------------
.text:0040E6A9                 align 10h
.text:0040E6B0
.text:0040E6B0 loc_40E6B0:                             ; CODE XREF: sub_40E350+256↑j
.text:0040E6B0                 mov     eax, [esp+9Ch+arg_4]
.text:0040E6B7                 test    eax, eax
.text:0040E6B9                 jnz     loc_40E5C8
.text:0040E6BF                 mov     [esp+9Ch+var_94], 180h
.text:0040E6C7                 mov     esi, [esp+9Ch+FileName]
.text:0040E6CE                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:0040E6D6                 mov     [esp+9Ch+Str], esi ; FileName
.text:0040E6D9                 lea     esi, [esi+0]
.text:0040E6E0
.text:0040E6E0 loc_40E6E0:                             ; CODE XREF: sub_40E350+3B1↓j
.text:0040E6E0                 call    _open
.text:0040E6E5                 jmp     short loc_40E6A0
.text:0040E6E7 ; ---------------------------------------------------------------------------
.text:0040E6E7
.text:0040E6E7 loc_40E6E7:                             ; CODE XREF: sub_40E350+248↑j
.text:0040E6E7                 mov     [esp+9Ch+var_94], 180h
.text:0040E6EF                 mov     ebx, [esp+9Ch+FileName]
.text:0040E6F6                 mov     [esp+9Ch+OpenFlag], 8502h
.text:0040E6FE                 mov     [esp+9Ch+Str], ebx
.text:0040E701                 jmp     short loc_40E6E0
.text:0040E703 ; ---------------------------------------------------------------------------
.text:0040E703
.text:0040E703 loc_40E703:                             ; CODE XREF: sub_40E350+78↑j
.text:0040E703                 mov     [esp+9Ch+OpenFlag], 0
.text:0040E70B                 lea     ebx, [esp+9Ch+var_84]
.text:0040E70F                 mov     [esp+9Ch+Str], ebx
.text:0040E712                 call    sub_40E800
.text:0040E717                 mov     edi, [esp+9Ch+var_80]
.text:0040E71B                 mov     edx, [esp+9Ch+var_84]
.text:0040E71F                 mov     ecx, edi
.text:0040E721                 mov     ebx, edi
.text:0040E723                 shl     ecx, 10h
.text:0040E726                 sar     ebx, 1Fh
.text:0040E729                 shld    ebx, edi, 10h
.text:0040E72D                 mov     esi, edx
.text:0040E72F                 mov     edi, edx
.text:0040E731                 mov     edx, ecx
.text:0040E733                 sar     edi, 1Fh
.text:0040E736                 xor     edx, esi
.text:0040E738                 mov     dword ptr ds:byte_4139D0+110h, edx
.text:0040E73E                 mov     esi, ebx
.text:0040E740                 xor     esi, edi
.text:0040E742                 mov     dword ptr ds:byte_4139D0+114h, esi
.text:0040E748                 jmp     loc_40E3CE
.text:0040E74D ; ---------------------------------------------------------------------------
.text:0040E74D
.text:0040E74D loc_40E74D:                             ; CODE XREF: sub_40E350+27F↑j
.text:0040E74D                 mov     [esp+9Ch+var_94], 151h
.text:0040E755                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0040E75D                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:0040E764                 call    _assert
.text:0040E764 sub_40E350      endp
.text:0040E764
.text:0040E764 ; ---------------------------------------------------------------------------
.text:0040E769                 align 20h
.text:0040E780
.text:0040E780 ; =============== S U B R O U T I N E =======================================
.text:0040E780
.text:0040E780
.text:0040E780 ; int __cdecl sub_40E780(LPCSTR, int AccessMode)
.text:0040E780 sub_40E780      proc near               ; CODE XREF: sub_40E350+349↑p
.text:0040E780
.text:0040E780 lpPathName      = dword ptr -1Ch
.text:0040E780 lpSecurityAttributes= dword ptr -18h
.text:0040E780 var_8           = dword ptr -8
.text:0040E780 var_4           = dword ptr -4
.text:0040E780 arg_0           = dword ptr  4
.text:0040E780 AccessMode      = dword ptr  8
.text:0040E780
.text:0040E780                 sub     esp, 1Ch
.text:0040E783                 mov     [esp+1Ch+var_8], ebx
.text:0040E787                 mov     ebx, [esp+1Ch+arg_0]
.text:0040E78B                 mov     [esp+1Ch+var_4], esi
.text:0040E78F                 mov     esi, [esp+1Ch+AccessMode]
.text:0040E793                 test    ebx, ebx
.text:0040E795                 jz      short loc_40E7E5
.text:0040E797                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040E79F                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:0040E7A2                 call    CreateDirectoryA
.text:0040E7A7                 sub     esp, 8
.text:0040E7AA                 test    eax, eax
.text:0040E7AC                 jz      short loc_40E7C6
.text:0040E7AE                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:0040E7B2                 mov     esi, [esp+1Ch+var_4]
.text:0040E7B6                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:0040E7BA                 mov     ebx, [esp+1Ch+var_8]
.text:0040E7BE                 add     esp, 1Ch
.text:0040E7C1                 jmp     _chmod
.text:0040E7C6 ; ---------------------------------------------------------------------------
.text:0040E7C6
.text:0040E7C6 loc_40E7C6:                             ; CODE XREF: sub_40E780+2C↑j
.text:0040E7C6                 call    sub_40B2D0
.text:0040E7CB                 mov     esi, eax
.text:0040E7CD                 call    _errno
.text:0040E7D2                 mov     [eax], esi
.text:0040E7D4
.text:0040E7D4 loc_40E7D4:                             ; CODE XREF: sub_40E780+70↓j
.text:0040E7D4                 mov     ebx, [esp+1Ch+var_8]
.text:0040E7D8                 mov     eax, 0FFFFFFFFh
.text:0040E7DD                 mov     esi, [esp+1Ch+var_4]
.text:0040E7E1                 add     esp, 1Ch
.text:0040E7E4                 retn
.text:0040E7E5 ; ---------------------------------------------------------------------------
.text:0040E7E5
.text:0040E7E5 loc_40E7E5:                             ; CODE XREF: sub_40E780+15↑j
.text:0040E7E5                 call    _errno
.text:0040E7EA                 mov     dword ptr [eax], 16h
.text:0040E7F0                 jmp     short loc_40E7D4
.text:0040E7F0 sub_40E780      endp
.text:0040E7F0
.text:0040E7F0 ; ---------------------------------------------------------------------------
.text:0040E7F2                 align 10h
.text:0040E800
.text:0040E800 ; =============== S U B R O U T I N E =======================================
.text:0040E800
.text:0040E800
.text:0040E800 sub_40E800      proc near               ; CODE XREF: sub_40E350+3C2↑p
.text:0040E800
.text:0040E800 var_1C          = dword ptr -1Ch
.text:0040E800 var_18          = dword ptr -18h
.text:0040E800 var_C           = dword ptr -0Ch
.text:0040E800 var_8           = dword ptr -8
.text:0040E800 var_4           = dword ptr -4
.text:0040E800 arg_0           = dword ptr  4
.text:0040E800 arg_4           = dword ptr  8
.text:0040E800
.text:0040E800                 sub     esp, 1Ch
.text:0040E803                 mov     edx, [esp+1Ch+arg_4]
.text:0040E807                 mov     [esp+1Ch+var_4], ebx
.text:0040E80B                 mov     ebx, [esp+1Ch+arg_0]
.text:0040E80F                 mov     [esp+1Ch+var_18], edx
.text:0040E813                 lea     edx, [esp+1Ch+var_C]
.text:0040E817                 mov     [esp+1Ch+var_1C], edx
.text:0040E81A                 call    sub_40E880
.text:0040E81F                 test    eax, eax
.text:0040E821                 mov     edx, 0FFFFFFFFh
.text:0040E826                 jnz     short loc_40E84A
.text:0040E828                 mov     ecx, [esp+1Ch+var_C]
.text:0040E82C                 mov     edx, 10624DD3h
.text:0040E831                 mov     [ebx], ecx
.text:0040E833                 mov     ecx, [esp+1Ch+var_8]
.text:0040E837                 mov     eax, ecx
.text:0040E839                 imul    edx
.text:0040E83B                 mov     eax, ecx
.text:0040E83D                 sar     eax, 1Fh
.text:0040E840                 sar     edx, 6
.text:0040E843                 sub     edx, eax
.text:0040E845                 mov     [ebx+4], edx
.text:0040E848                 xor     edx, edx
.text:0040E84A
.text:0040E84A loc_40E84A:                             ; CODE XREF: sub_40E800+26↑j
.text:0040E84A                 mov     ebx, [esp+1Ch+var_4]
.text:0040E84E                 mov     eax, edx
.text:0040E850                 add     esp, 1Ch
.text:0040E853                 retn
.text:0040E853 sub_40E800      endp
.text:0040E853
.text:0040E853 ; ---------------------------------------------------------------------------
.text:0040E854                 align 10h
.text:0040E860
.text:0040E860 ; =============== S U B R O U T I N E =======================================
.text:0040E860
.text:0040E860
.text:0040E860 sub_40E860      proc near               ; CODE XREF: sub_40DFD0+1A7↑p
.text:0040E860                                         ; sub_40DFD0+237↑p ...
.text:0040E860                 mov     edx, dword ptr ds:byte_4139D0+120h
.text:0040E866                 test    edx, edx
.text:0040E868                 jnz     short loc_40E870
.text:0040E86A                 jmp     getenv
.text:0040E86A ; ---------------------------------------------------------------------------
.text:0040E86F                 align 10h
.text:0040E870
.text:0040E870 loc_40E870:                             ; CODE XREF: sub_40E860+8↑j
.text:0040E870                 xor     eax, eax
.text:0040E872                 retn
.text:0040E872 sub_40E860      endp
.text:0040E872
.text:0040E872 ; ---------------------------------------------------------------------------
.text:0040E873                 align 10h
.text:0040E880
.text:0040E880 ; =============== S U B R O U T I N E =======================================
.text:0040E880
.text:0040E880
.text:0040E880 sub_40E880      proc near               ; CODE XREF: sub_40E800+1A↑p
.text:0040E880
.text:0040E880 lpTimeZoneInformation= dword ptr -0DCh
.text:0040E880 var_D8          = dword ptr -0D8h
.text:0040E880 var_D4          = dword ptr -0D4h
.text:0040E880 var_D0          = dword ptr -0D0h
.text:0040E880 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:0040E880 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:0040E880 arg_0           = dword ptr  4
.text:0040E880 arg_4           = dword ptr  8
.text:0040E880
.text:0040E880                 push    edi
.text:0040E881                 push    esi
.text:0040E882                 push    ebx
.text:0040E883                 sub     esp, 0D0h
.text:0040E889                 mov     ebx, [esp+0DCh+arg_4]
.text:0040E890                 mov     edi, [esp+0DCh+arg_0]
.text:0040E897                 test    ebx, ebx
.text:0040E899                 jz      short loc_40E8C4
.text:0040E89B                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0040E89F                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:0040E8A2                 call    GetTimeZoneInformation
.text:0040E8A7                 sub     esp, 4
.text:0040E8AA                 cmp     eax, 0FFFFFFFFh
.text:0040E8AD                 jz      loc_40E945
.text:0040E8B3                 xor     ecx, ecx
.text:0040E8B5                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:0040E8B9                 cmp     eax, 2
.text:0040E8BC                 setz    cl
.text:0040E8BF                 mov     [ebx], esi
.text:0040E8C1                 mov     [ebx+4], ecx
.text:0040E8C4
.text:0040E8C4 loc_40E8C4:                             ; CODE XREF: sub_40E880+19↑j
.text:0040E8C4                                         ; sub_40E880+E0↓j
.text:0040E8C4                 test    edi, edi
.text:0040E8C6                 jz      short loc_40E939
.text:0040E8C8                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0040E8CC                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0040E8CF                 call    GetSystemTimeAsFileTime
.text:0040E8D4                 sub     esp, 4
.text:0040E8D7                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0040E8DB                 mov     [esp+0DCh+var_D4], 989680h
.text:0040E8E3                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:0040E8E7                 mov     [esp+0DCh+var_D0], 0
.text:0040E8EF                 add     ebx, 2AC18000h
.text:0040E8F5                 adc     esi, 0FE624E21h
.text:0040E8FB                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0040E8FF                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040E902                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:0040E906                 mov     [esp+0DCh+var_D8], esi
.text:0040E90A                 call    sub_410330
.text:0040E90F                 mov     [edi], eax
.text:0040E911                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040E914                 mov     [esp+0DCh+var_D4], 989680h
.text:0040E91C                 mov     [esp+0DCh+var_D0], 0
.text:0040E924                 mov     [esp+0DCh+var_D8], esi
.text:0040E928                 call    sub_410450
.text:0040E92D                 lea     ebx, [eax+eax*4]
.text:0040E930                 lea     edx, [ebx+ebx*4]
.text:0040E933                 shl     edx, 2
.text:0040E936                 mov     [edi+4], edx
.text:0040E939
.text:0040E939 loc_40E939:                             ; CODE XREF: sub_40E880+46↑j
.text:0040E939                 add     esp, 0D0h
.text:0040E93F                 xor     eax, eax
.text:0040E941                 pop     ebx
.text:0040E942                 pop     esi
.text:0040E943                 pop     edi
.text:0040E944                 retn
.text:0040E945 ; ---------------------------------------------------------------------------
.text:0040E945
.text:0040E945 loc_40E945:                             ; CODE XREF: sub_40E880+2D↑j
.text:0040E945                 mov     dword ptr [ebx], 0
.text:0040E94B                 mov     dword ptr [ebx+4], 0
.text:0040E952                 call    sub_40B2D0
.text:0040E957                 mov     esi, eax
.text:0040E959                 call    _errno
.text:0040E95E                 mov     [eax], esi
.text:0040E960                 jmp     loc_40E8C4
.text:0040E960 sub_40E880      endp
.text:0040E960
.text:0040E960 ; ---------------------------------------------------------------------------
.text:0040E965                 align 10h
.text:0040E970                 sub     esp, 0Ch
.text:0040E973                 mov     [esp+4], ebx
.text:0040E977                 mov     [esp+8], esi
.text:0040E97B                 xor     esi, esi
.text:0040E97D                 call    sub_40E9D0
.text:0040E982                 mov     ebx, eax
.text:0040E984                 call    sub_40DDE0
.text:0040E989                 cmp     ebx, eax
.text:0040E98B                 jz      short loc_40E9A4
.text:0040E98D
.text:0040E98D loc_40E98D:                             ; CODE XREF: .text:0040E9B2↓j
.text:0040E98D                 mov     esi, 1
.text:0040E992
.text:0040E992 loc_40E992:                             ; CODE XREF: .text:0040E9B4↓j
.text:0040E992                 mov     dword ptr ds:byte_4139D0+120h, esi
.text:0040E998                 mov     ebx, [esp+4]
.text:0040E99C                 mov     esi, [esp+8]
.text:0040E9A0                 add     esp, 0Ch
.text:0040E9A3                 retn
.text:0040E9A4 ; ---------------------------------------------------------------------------
.text:0040E9A4
.text:0040E9A4 loc_40E9A4:                             ; CODE XREF: .text:0040E98B↑j
.text:0040E9A4                 call    sub_40E9C0
.text:0040E9A9                 mov     ebx, eax
.text:0040E9AB                 call    sub_40DDD0
.text:0040E9B0                 cmp     ebx, eax
.text:0040E9B2                 jnz     short loc_40E98D
.text:0040E9B4                 jmp     short loc_40E992
.text:0040E9B4 ; ---------------------------------------------------------------------------
.text:0040E9B6                 align 10h
.text:0040E9C0
.text:0040E9C0 ; =============== S U B R O U T I N E =======================================
.text:0040E9C0
.text:0040E9C0
.text:0040E9C0 sub_40E9C0      proc near               ; CODE XREF: .text:loc_40E9A4↑p
.text:0040E9C0                 xor     eax, eax
.text:0040E9C2                 retn
.text:0040E9C2 sub_40E9C0      endp
.text:0040E9C2
.text:0040E9C2 ; ---------------------------------------------------------------------------
.text:0040E9C3                 align 10h
.text:0040E9D0
.text:0040E9D0 ; =============== S U B R O U T I N E =======================================
.text:0040E9D0
.text:0040E9D0
.text:0040E9D0 sub_40E9D0      proc near               ; CODE XREF: .text:0040E97D↑p
.text:0040E9D0                 xor     eax, eax
.text:0040E9D2                 retn
.text:0040E9D2 sub_40E9D0      endp
.text:0040E9D2
.text:0040E9D2 ; ---------------------------------------------------------------------------
.text:0040E9D3                 align 10h
.text:0040E9E0
.text:0040E9E0 ; =============== S U B R O U T I N E =======================================
.text:0040E9E0
.text:0040E9E0 ; Attributes: thunk
.text:0040E9E0
.text:0040E9E0 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:0040E9E0 OleInitialize   proc near               ; CODE XREF: sub_4086F0+1A↑p
.text:0040E9E0
.text:0040E9E0 pvReserved      = dword ptr  4
.text:0040E9E0
.text:0040E9E0                 jmp     ds:__imp_OleInitialize
.text:0040E9E0 OleInitialize   endp
.text:0040E9E0
.text:0040E9E0 ; ---------------------------------------------------------------------------
.text:0040E9E6                 align 10h
.text:0040E9F0
.text:0040E9F0 ; =============== S U B R O U T I N E =======================================
.text:0040E9F0
.text:0040E9F0 ; Attributes: thunk
.text:0040E9F0
.text:0040E9F0 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:0040E9F0 CoCreateInstance proc near              ; CODE XREF: sub_4086F0+52↑p
.text:0040E9F0
.text:0040E9F0 rclsid          = dword ptr  4
.text:0040E9F0 pUnkOuter       = dword ptr  8
.text:0040E9F0 dwClsContext    = dword ptr  0Ch
.text:0040E9F0 riid            = dword ptr  10h
.text:0040E9F0 ppv             = dword ptr  14h
.text:0040E9F0
.text:0040E9F0                 jmp     ds:__imp_CoCreateInstance
.text:0040E9F0 CoCreateInstance endp
.text:0040E9F0
.text:0040E9F0 ; ---------------------------------------------------------------------------
.text:0040E9F6                 align 10h
.text:0040EA00
.text:0040EA00 ; =============== S U B R O U T I N E =======================================
.text:0040EA00
.text:0040EA00 ; Attributes: thunk
.text:0040EA00
.text:0040EA00 ; void __stdcall CoUninitialize()
.text:0040EA00 CoUninitialize  proc near               ; CODE XREF: sub_4086F0+14E↑p
.text:0040EA00                                         ; sub_4086F0+16D↑p
.text:0040EA00                 jmp     ds:__imp_CoUninitialize
.text:0040EA00 CoUninitialize  endp
.text:0040EA00
.text:0040EA00 ; ---------------------------------------------------------------------------
.text:0040EA06                 align 10h
.text:0040EA10                 add     al, 0BAh ; 'º'
.text:0040EA12                 retf
.text:0040EA12 ; ---------------------------------------------------------------------------
.text:0040EA13                 db 7Eh
.text:0040EA14                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:0040EA14                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:0040EA14                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:0040EA14                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:0040EA14                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:0040EA14                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:0040EA14                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:0040EA14                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:0040EA14                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:0040EA14                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:0040EA14                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:0040EA14                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:0040EA14                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:0040EA14                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:0040EA14                 dd 0C4426C00h, 330h, 0
.text:0040EB48                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040EB48                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:0040EB48                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:0040EB48                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:0040EB98                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040EB98                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:0040EB98                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:0040EB98                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:0040EB98                 dd 0BA94B00h, 1Bh, 0
.text:0040EBF8                 dd 0C0h, 46000000h, 1Ch, 0
.text:0040EC08                 dd 0C0h, 46000000h, 331h, 0
.text:0040EC18                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040EC18                 dd 312h, 0
.text:0040EC38                 dd 0C0h, 46000000h, 30Eh, 0
.text:0040EC48                 dd 0C0h, 46000000h, 30Dh, 0
.text:0040EC58                 dd 0C0h, 46000000h, 311h, 0
.text:0040EC68                 dd 0C0h, 46000000h, 313h, 0
.text:0040EC78                 dd 0C0h, 46000000h, 30Ch, 0
.text:0040EC88                 dd 0C0h, 46000000h, 30Fh, 0
.text:0040EC98                 dd 0C0h, 46000000h, 310h, 0
.text:0040ECA8                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040ECA8                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:0040ECD8                 dd 0C0h, 46000000h, 319h, 0
.text:0040ECE8                 dd 0C0h, 46000000h, 315h, 0
.text:0040ECF8                 dd 0C0h, 46000000h, 316h, 0
.text:0040ED08                 dd 0C0h, 46000000h, 315h, 0
.text:0040ED18                 dd 0C0h, 46000000h, 2E005h, 0
.text:0040ED28                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040ED28                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:0040ED28                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:0040ED68                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040ED68                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:0040ED68                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:0040ED68                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:0040ED68                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:0040ED68                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:0040ED68                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:0040ED68                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:0040ED68                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:0040ED68                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:0040ED68                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:0040ED68                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040ED68                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:0040ED68                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:0040ED68                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:0040ED68                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040ED68                 dd 2DE81h, 0
.text:0040EEB8                 dd 0C0h, 46000000h, 4 dup(0)
.text:0040EED0                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:0040EED0                 dd 0
.text:0040EEE8                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040EEE8                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:0040EEE8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:0040EEE8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:0040EEE8                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040EEE8                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:0040EEE8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:0040EEE8                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:0040EEE8                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:0040EEE8                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:0040EEE8                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:0040EEE8                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:0040EEE8                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:0040EEE8                 dd 10Fh, 0
.text:0040EFF8                 dd 0C0h, 46000000h, 125h, 0
.text:0040F008                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040F008                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:0040F008                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:0040F048                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:0040F048                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040F048                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:0040F048                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:0040F048                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:0040F0A8                 dd 0C0h, 46000000h, 2E012h, 0
.text:0040F0B8                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:0040F0B8                 dd 140h, 0
.text:0040F0D8                 dd 0C0h, 46000000h, 1, 0
.text:0040F0E8                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:0040F0E8                 dd 71D3400h, 13Dh, 0
.text:0040F108                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040F108                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:0040F108                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:0040F108                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:0040F158                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:0040F158                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040F158                 dd 20405h, 0
.text:0040F188                 dd 0C0h, 46000000h, 2040Eh, 0
.text:0040F198                 dd 0C0h, 46000000h, 20406h, 0
.text:0040F1A8                 dd 0C0h, 46000000h, 2040Fh, 0
.text:0040F1B8                 dd 0C0h, 46000000h, 110h, 0
.text:0040F1C8                 dd 0C0h, 46000000h, 10Eh, 0
.text:0040F1D8                 dd 0C0h, 46000000h, 123h, 0
.text:0040F1E8                 dd 0C0h, 46000000h, 124h, 0
.text:0040F1F8                 dd 0C0h, 46000000h, 13h, 0
.text:0040F208                 dd 0C0h, 46000000h, 14h, 0
.text:0040F218                 dd 0C0h, 46000000h, 15h, 0
.text:0040F228                 dd 0C0h, 46000000h, 20400h, 0
.text:0040F238                 dd 0C0h, 46000000h, 121h, 0
.text:0040F248                 dd 0C0h, 46000000h, 122h, 0
.text:0040F258                 dd 0C0h, 46000000h, 2E011h, 0
.text:0040F268                 dd 0C0h, 46000000h, 108h, 0
.text:0040F278                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:0040F278                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040F278                 dd 103h, 0
.text:0040F2A8                 dd 0C0h, 46000000h, 2E000h, 0
.text:0040F2B8                 dd 0C0h, 46000000h, 106h, 0
.text:0040F2C8                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040F2C8                 dd 107h, 0
.text:0040F2E8                 dd 0C0h, 46000000h, 102h, 0
.text:0040F2F8                 dd 0C0h, 46000000h, 104h, 0
.text:0040F308                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:0040F308                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:0040F308                 dd 105h, 0
.text:0040F338                 dd 0C0h, 46000000h, 13Bh, 0
.text:0040F348                 dd 0C0h, 46000000h, 139h, 0
.text:0040F358                 dd 0C0h, 46000000h, 0Dh, 0
.text:0040F368                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040F368                 dd 101h, 0
.text:0040F388                 dd 0C0h, 46000000h, 100h, 0
.text:0040F398                 dd 0C0h, 46000000h, 20404h, 0
.text:0040F3A8                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040F3A8                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:0040F3D8                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:0040F3D8                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:0040F3D8                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:0040F3D8                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:0040F428                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040F428                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:0040F428                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:0040F428                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:0040F428                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040F428                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:0040F4A8                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:0040F4A8                 dd 0Ah, 0
.text:0040F4C8                 dd 0C0h, 46000000h, 2, 0
.text:0040F4D8                 dd 0C0h, 46000000h, 1Dh, 0
.text:0040F4E8                 dd 0C0h, 46000000h, 3, 0
.text:0040F4F8                 dd 0C0h, 46000000h, 16h, 0
.text:0040F508                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:0040F508                 dd 1608D74Fh, 0Fh, 0
.text:0040F528                 dd 0C0h, 46000000h, 20h, 0
.text:0040F538                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:0040F538                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:0040F538                 dd 0
.text:0040F568                 dd 0C0h, 46000000h, 11Eh, 0
.text:0040F578                 dd 0C0h, 46000000h, 128h, 0
.text:0040F588                 dd 0C0h, 46000000h, 129h, 0
.text:0040F598                 dd 0C0h, 46000000h, 118h, 0
.text:0040F5A8                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:0040F5A8                 dd 70474000h, 11Bh, 0
.text:0040F5C8                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:0040F5C8                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040F5C8                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:0040F5C8                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:0040F5C8                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:0040F628                 dd 0C0h, 46000000h, 116h, 0
.text:0040F638                 dd 0C0h, 46000000h, 113h, 0
.text:0040F648                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:0040F648                 dd 119h, 0
.text:0040F668                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:0040F668                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:0040F668                 dd 0
.text:0040F698                 dd 0C0h, 46000000h, 11Ch, 0
.text:0040F6A8                 dd 0C0h, 46000000h, 11Dh, 0
.text:0040F6B8                 dd 0C0h, 46000000h, 11Fh, 0
.text:0040F6C8                 dd 0C0h, 46000000h, 112h, 0
.text:0040F6D8                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:0040F6D8                 dd 18E6000h, 120h, 0
.text:0040F6F8                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:0040F6F8                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:0040F6F8                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:0040F738                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:0040F738                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:0040F768                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040F768                 dd 11Ah, 0
.text:0040F788                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:0040F788                 dd 10Ch, 0
.text:0040F7A8                 dd 0C0h, 46000000h
.text:0040F7B0 dword_40F7B0    dd 10Bh, 0              ; DATA XREF: sub_4086F0+75↑o
.text:0040F7B8                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:0040F7B8                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:0040F7B8                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:0040F7B8                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:0040F808                 dd 0C0h, 46000000h, 109h, 0
.text:0040F818                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:0040F818                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:0040F818                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:0040F818                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:0040F818                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:0040F818                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:0040F818                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:0040F818                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:0040F818                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040F818                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:0040F818                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:0040F8F8                 dd 0C0h, 46000000h, 138h, 0
.text:0040F908                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:0040F908                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:0040F908                 dd 27h, 0
.text:0040F938                 dd 0C0h, 46000000h, 8, 0
.text:0040F948                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:0040F948                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:0040F948                 dd 20D00h, 0
.text:0040F978                 dd 0C0h, 46000000h, 20D03h, 0
.text:0040F988                 dd 0C0h, 46000000h, 12h, 0
.text:0040F998                 dd 0C0h, 46000000h, 4, 0
.text:0040F9A8                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040F9A8                 dd 7, 0
.text:0040F9C8                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040F9C8                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:0040F9F8                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040F9F8                 dd 126h, 0
.text:0040FA18                 dd 0C0h, 46000000h, 10h, 0
.text:0040FA28                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:0040FA28                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:0040FA58                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:0040FA58                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:0040FA58                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:0040FA98                 dd 0C0h, 46000000h, 0Bh, 0
.text:0040FAA8                 dd 0C0h, 46000000h, 0Ch, 0
.text:0040FAB8                 dd 0C0h, 46000000h, 26h, 0
.text:0040FAC8                 dd 0C0h, 46000000h, 6, 0
.text:0040FAD8                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:0040FAD8                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:0040FAD8                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:0040FB18                 dd 0C0h, 46000000h, 20403h, 0
.text:0040FB28                 dd 0C0h, 46000000h, 20401h, 0
.text:0040FB38                 dd 0C0h, 46000000h, 20412h, 0
.text:0040FB48                 dd 0C0h, 46000000h, 20402h, 0
.text:0040FB58                 dd 0C0h, 46000000h, 20411h, 0
.text:0040FB68                 dd 0C0h, 46000000h, 2 dup(0)
.text:0040FB78                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040FB78                 dd 10Dh, 0
.text:0040FB98                 dd 0C0h, 46000000h, 127h, 0
.text:0040FBA8                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040FBA8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:0040FBA8                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:0040FBE8                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:0040FBE8                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:0040FBE8                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:0040FC28                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:0040FC38                 dd 0C0h, 46000000h, 2DE18h, 0
.text:0040FC48                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:0040FC58                 dd 0C0h, 46000000h, 2DE19h, 0
.text:0040FC68                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:0040FC78                 dd 0C0h, 46000000h, 2DE12h, 0
.text:0040FC88                 dd 0C0h, 46000000h, 2DE21h, 0
.text:0040FC98                 dd 0C0h, 46000000h, 2DE01h, 0
.text:0040FCA8                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:0040FCB8                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:0040FCC8                 dd 0C0h, 46000000h, 2DE02h, 0
.text:0040FCD8                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:0040FCE8                 dd 0C0h, 46000000h, 2DE04h, 0
.text:0040FCF8                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:0040FD08                 dd 0C0h, 46000000h, 2DE05h, 0
.text:0040FD18                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:0040FD28                 dd 0C0h, 46000000h, 2DE06h, 0
.text:0040FD38                 dd 0C0h, 46000000h, 2DE13h, 0
.text:0040FD48                 dd 0C0h, 46000000h, 2DE10h, 0
.text:0040FD58                 dd 0C0h, 46000000h, 2DE22h, 0
.text:0040FD68                 dd 0C0h, 46000000h, 2DE09h, 0
.text:0040FD78                 dd 0C0h, 46000000h, 2DE23h, 0
.text:0040FD88                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:0040FD98                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:0040FDA8                 dd 0C0h, 46000000h, 2DE11h, 0
.text:0040FDB8                 dd 0C0h, 46000000h, 2DE15h, 0
.text:0040FDC8                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:0040FDD8                 dd 0C0h, 46000000h, 2DE16h, 0
.text:0040FDE8                 dd 0C0h, 46000000h, 2DE20h, 0
.text:0040FDF8                 dd 0C0h, 46000000h, 2DE07h, 0
.text:0040FE08                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:0040FE18                 dd 0C0h, 46000000h, 2DE17h, 0
.text:0040FE28                 dd 0C0h, 46000000h, 2DE14h, 0
.text:0040FE38                 dd 0C0h, 46000000h, 2DE03h, 0
.text:0040FE48                 dd 0C0h, 46000000h, 2DE08h, 0
.text:0040FE58                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:0040FE58                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:0040FE80
.text:0040FE80 ; =============== S U B R O U T I N E =======================================
.text:0040FE80
.text:0040FE80 ; Attributes: thunk
.text:0040FE80
.text:0040FE80 ; size_t __cdecl mbrlen(const char *Ch, size_t SizeInBytes, mbstate_t *State)
.text:0040FE80 mbrlen          proc near               ; CODE XREF: sub_403090+19D↑p
.text:0040FE80
.text:0040FE80 SizeInBytes     = dword ptr  8
.text:0040FE80 State           = dword ptr  0Ch
.text:0040FE80
.text:0040FE80                 jmp     ds:__imp_mbrlen
.text:0040FE80 mbrlen          endp
.text:0040FE80
.text:0040FE80 ; ---------------------------------------------------------------------------
.text:0040FE86                 align 10h
.text:0040FE90
.text:0040FE90 ; =============== S U B R O U T I N E =======================================
.text:0040FE90
.text:0040FE90 ; Attributes: thunk
.text:0040FE90
.text:0040FE90 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:0040FE90 mbrtowc         proc near               ; CODE XREF: sub_407010+757↑p
.text:0040FE90
.text:0040FE90 DstCh           = dword ptr  4
.text:0040FE90 SrcCh           = dword ptr  8
.text:0040FE90 SizeInBytes     = dword ptr  0Ch
.text:0040FE90 State           = dword ptr  10h
.text:0040FE90
.text:0040FE90                 jmp     ds:__imp_mbrtowc
.text:0040FE90 mbrtowc         endp
.text:0040FE90
.text:0040FE90 ; ---------------------------------------------------------------------------
.text:0040FE96                 align 10h
.text:0040FEA0
.text:0040FEA0 ; =============== S U B R O U T I N E =======================================
.text:0040FEA0
.text:0040FEA0 ; Attributes: bp-based frame
.text:0040FEA0
.text:0040FEA0 sub_40FEA0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:0040FEA0                 push    ebp
.text:0040FEA1                 mov     ecx, offset unk_413000
.text:0040FEA6                 cmp     ecx, offset unk_413000
.text:0040FEAC                 mov     ebp, esp
.text:0040FEAE                 jnb     short loc_40FEC6
.text:0040FEB0
.text:0040FEB0 loc_40FEB0:                             ; CODE XREF: sub_40FEA0+24↓j
.text:0040FEB0                 mov     edx, [ecx+4]
.text:0040FEB3                 mov     eax, [ecx]
.text:0040FEB5                 add     ecx, 8
.text:0040FEB8                 add     [edx+400000h], eax
.text:0040FEBE                 cmp     ecx, offset unk_413000
.text:0040FEC4                 jb      short loc_40FEB0
.text:0040FEC6
.text:0040FEC6 loc_40FEC6:                             ; CODE XREF: sub_40FEA0+E↑j
.text:0040FEC6                 pop     ebp
.text:0040FEC7                 retn
.text:0040FEC7 sub_40FEA0      endp
.text:0040FEC7
.text:0040FEC7 ; ---------------------------------------------------------------------------
.text:0040FEC8                 align 10h
.text:0040FED0
.text:0040FED0 ; =============== S U B R O U T I N E =======================================
.text:0040FED0
.text:0040FED0 ; Attributes: bp-based frame
.text:0040FED0
.text:0040FED0 sub_40FED0      proc near               ; CODE XREF: sub_401080+16↑p
.text:0040FED0                                         ; TopLevelExceptionFilter+D7↑p
.text:0040FED0                 push    ebp
.text:0040FED1                 mov     ebp, esp
.text:0040FED3                 fninit
.text:0040FED5                 pop     ebp
.text:0040FED6                 retn
.text:0040FED6 sub_40FED0      endp
.text:0040FED6
.text:0040FED6 ; ---------------------------------------------------------------------------
.text:0040FED7                 align 10h
.text:0040FEE0
.text:0040FEE0 ; =============== S U B R O U T I N E =======================================
.text:0040FEE0
.text:0040FEE0 ; Attributes: bp-based frame
.text:0040FEE0
.text:0040FEE0 ; void __cdecl sub_40FEE0()
.text:0040FEE0 sub_40FEE0      proc near               ; DATA XREF: .text:loc_40FF29↓o
.text:0040FEE0                                         ; sub_40FF70:loc_40FF9E↓o
.text:0040FEE0                 push    ebp
.text:0040FEE1                 mov     ebp, esp
.text:0040FEE3                 sub     esp, 8
.text:0040FEE6                 mov     eax, off_4120D4
.text:0040FEEB                 mov     edx, [eax]
.text:0040FEED                 test    edx, edx
.text:0040FEEF                 jnz     short loc_40FEF5
.text:0040FEF1
.text:0040FEF1 loc_40FEF1:                             ; CODE XREF: sub_40FEE0+2C↓j
.text:0040FEF1                 mov     esp, ebp
.text:0040FEF3                 pop     ebp
.text:0040FEF4                 retn
.text:0040FEF5 ; ---------------------------------------------------------------------------
.text:0040FEF5
.text:0040FEF5 loc_40FEF5:                             ; CODE XREF: sub_40FEE0+F↑j
.text:0040FEF5                                         ; sub_40FEE0+2A↓j
.text:0040FEF5                 call    dword ptr [eax]
.text:0040FEF7                 mov     edx, off_4120D4
.text:0040FEFD                 mov     ecx, [edx+4]
.text:0040FF00                 lea     eax, [edx+4]
.text:0040FF03                 mov     off_4120D4, eax
.text:0040FF08                 test    ecx, ecx
.text:0040FF0A                 jnz     short loc_40FEF5
.text:0040FF0C                 jmp     short loc_40FEF1
.text:0040FF0C sub_40FEE0      endp
.text:0040FF0C
.text:0040FF0C ; ---------------------------------------------------------------------------
.text:0040FF0E                 align 10h
.text:0040FF10                 push    ebp
.text:0040FF11                 mov     ebp, esp
.text:0040FF13                 sub     esp, 8
.text:0040FF16                 mov     [ebp-4], ebx
.text:0040FF19                 mov     eax, ds:dword_411020
.text:0040FF1E                 cmp     eax, 0FFFFFFFFh
.text:0040FF21                 jz      short loc_40FF4C
.text:0040FF23
.text:0040FF23 loc_40FF23:                             ; CODE XREF: .text:0040FF56↓j
.text:0040FF23                                         ; .text:0040FF69↓j
.text:0040FF23                 test    eax, eax
.text:0040FF25                 mov     ebx, eax
.text:0040FF27                 jnz     short loc_40FF40
.text:0040FF29
.text:0040FF29 loc_40FF29:                             ; CODE XREF: .text:0040FF4A↓j
.text:0040FF29                 mov     dword ptr [esp], offset sub_40FEE0
.text:0040FF30                 call    sub_401040
.text:0040FF35                 mov     ebx, [ebp-4]
.text:0040FF38                 mov     esp, ebp
.text:0040FF3A                 pop     ebp
.text:0040FF3B                 retn
.text:0040FF3B ; ---------------------------------------------------------------------------
.text:0040FF3C                 align 10h
.text:0040FF40
.text:0040FF40 loc_40FF40:                             ; CODE XREF: .text:0040FF27↑j
.text:0040FF40                                         ; .text:0040FF48↓j
.text:0040FF40                 call    ds:dword_411020[ebx*4]
.text:0040FF47                 dec     ebx
.text:0040FF48                 jnz     short loc_40FF40
.text:0040FF4A                 jmp     short loc_40FF29
.text:0040FF4C ; ---------------------------------------------------------------------------
.text:0040FF4C
.text:0040FF4C loc_40FF4C:                             ; CODE XREF: .text:0040FF21↑j
.text:0040FF4C                 mov     ecx, ds:dword_411024
.text:0040FF52                 xor     eax, eax
.text:0040FF54                 test    ecx, ecx
.text:0040FF56                 jz      short loc_40FF23
.text:0040FF58                 mov     edx, offset dword_411020
.text:0040FF5D                 lea     esi, [esi+0]
.text:0040FF60
.text:0040FF60 loc_40FF60:                             ; CODE XREF: .text:0040FF67↓j
.text:0040FF60                 inc     eax
.text:0040FF61                 mov     ecx, [edx+eax*4+4]
.text:0040FF65                 test    ecx, ecx
.text:0040FF67                 jnz     short loc_40FF60
.text:0040FF69                 jmp     short loc_40FF23
.text:0040FF69 ; ---------------------------------------------------------------------------
.text:0040FF6B                 align 10h
.text:0040FF70
.text:0040FF70 ; =============== S U B R O U T I N E =======================================
.text:0040FF70
.text:0040FF70 ; Attributes: bp-based frame
.text:0040FF70
.text:0040FF70 sub_40FF70      proc near               ; CODE XREF: sub_401CD0+1E↑p
.text:0040FF70
.text:0040FF70 var_8           = dword ptr -8
.text:0040FF70 var_4           = dword ptr -4
.text:0040FF70
.text:0040FF70                 push    ebp
.text:0040FF71                 mov     ebp, esp
.text:0040FF73                 sub     esp, 8
.text:0040FF76                 mov     [ebp+var_4], ebx
.text:0040FF79                 mov     edx, dword_4120D0
.text:0040FF7F                 test    edx, edx
.text:0040FF81                 jnz     short loc_40FFAA
.text:0040FF83                 mov     eax, ds:dword_411020
.text:0040FF88                 mov     edx, 1
.text:0040FF8D                 mov     dword_4120D0, edx
.text:0040FF93                 cmp     eax, 0FFFFFFFFh
.text:0040FF96                 jz      short loc_40FFBD
.text:0040FF98
.text:0040FF98 loc_40FF98:                             ; CODE XREF: sub_40FF70+57↓j
.text:0040FF98                                         ; sub_40FF70+69↓j
.text:0040FF98                 test    eax, eax
.text:0040FF9A                 mov     ebx, eax
.text:0040FF9C                 jnz     short loc_40FFB1
.text:0040FF9E
.text:0040FF9E loc_40FF9E:                             ; CODE XREF: sub_40FF70+4B↓j
.text:0040FF9E                 mov     [esp+8+var_8], offset sub_40FEE0 ; void (__cdecl *)()
.text:0040FFA5                 call    sub_401040
.text:0040FFAA
.text:0040FFAA loc_40FFAA:                             ; CODE XREF: sub_40FF70+11↑j
.text:0040FFAA                 mov     ebx, [ebp+var_4]
.text:0040FFAD                 mov     esp, ebp
.text:0040FFAF                 pop     ebp
.text:0040FFB0                 retn
.text:0040FFB1 ; ---------------------------------------------------------------------------
.text:0040FFB1
.text:0040FFB1 loc_40FFB1:                             ; CODE XREF: sub_40FF70+2C↑j
.text:0040FFB1                                         ; sub_40FF70+49↓j
.text:0040FFB1                 call    ds:dword_411020[ebx*4]
.text:0040FFB8                 dec     ebx
.text:0040FFB9                 jnz     short loc_40FFB1
.text:0040FFBB                 jmp     short loc_40FF9E
.text:0040FFBD ; ---------------------------------------------------------------------------
.text:0040FFBD
.text:0040FFBD loc_40FFBD:                             ; CODE XREF: sub_40FF70+26↑j
.text:0040FFBD                 mov     ecx, ds:dword_411024
.text:0040FFC3                 xor     eax, eax
.text:0040FFC5                 test    ecx, ecx
.text:0040FFC7                 jz      short loc_40FF98
.text:0040FFC9                 mov     edx, offset dword_411020
.text:0040FFCE                 mov     esi, esi
.text:0040FFD0
.text:0040FFD0 loc_40FFD0:                             ; CODE XREF: sub_40FF70+67↓j
.text:0040FFD0                 inc     eax
.text:0040FFD1                 mov     ebx, [edx+eax*4+4]
.text:0040FFD5                 test    ebx, ebx
.text:0040FFD7                 jnz     short loc_40FFD0
.text:0040FFD9                 jmp     short loc_40FF98
.text:0040FFD9 sub_40FF70      endp
.text:0040FFD9
.text:0040FFD9 ; ---------------------------------------------------------------------------
.text:0040FFDB                 align 10h
.text:0040FFE0
.text:0040FFE0 ; =============== S U B R O U T I N E =======================================
.text:0040FFE0
.text:0040FFE0 ; Attributes: info_from_lumina
.text:0040FFE0
.text:0040FFE0 ; void *__cdecl _alloca(size_t Size)
.text:0040FFE0 __alloca        proc near               ; CODE XREF: sub_401CD0+19↑p
.text:0040FFE0                 push    ecx
.text:0040FFE1                 mov     ecx, esp
.text:0040FFE3                 add     ecx, 8
.text:0040FFE6
.text:0040FFE6 loc_40FFE6:                             ; CODE XREF: __alloca+1B↓j
.text:0040FFE6                 cmp     eax, 1000h
.text:0040FFEB                 jb      short loc_40FFFD
.text:0040FFED                 sub     ecx, 1000h
.text:0040FFF3                 or      dword ptr [ecx], 0
.text:0040FFF6                 sub     eax, 1000h
.text:0040FFFB                 jmp     short loc_40FFE6
.text:0040FFFD ; ---------------------------------------------------------------------------
.text:0040FFFD
.text:0040FFFD loc_40FFFD:                             ; CODE XREF: __alloca+B↑j
.text:0040FFFD                 sub     ecx, eax
.text:0040FFFF                 or      dword ptr [ecx], 0
.text:00410002                 mov     eax, esp
.text:00410004                 mov     esp, ecx
.text:00410006                 mov     ecx, [eax]
.text:00410008                 mov     eax, [eax+4]
.text:0041000B                 jmp     eax
.text:0041000B __alloca        endp
.text:0041000B
.text:0041000B ; ---------------------------------------------------------------------------
.text:0041000D                 align 10h
.text:00410010
.text:00410010 ; =============== S U B R O U T I N E =======================================
.text:00410010
.text:00410010 ; Attributes: bp-based frame
.text:00410010
.text:00410010 sub_410010      proc near               ; CODE XREF: sub_406DA0+38↑p
.text:00410010                                         ; sub_406DA0+88↑p
.text:00410010
.text:00410010 var_3C          = dword ptr -3Ch
.text:00410010 var_34          = dword ptr -34h
.text:00410010 var_30          = dword ptr -30h
.text:00410010 var_2C          = dword ptr -2Ch
.text:00410010 var_28          = dword ptr -28h
.text:00410010 var_24          = dword ptr -24h
.text:00410010 var_1C          = dword ptr -1Ch
.text:00410010 var_18          = dword ptr -18h
.text:00410010 var_14          = dword ptr -14h
.text:00410010 arg_0           = dword ptr  8
.text:00410010 arg_4           = dword ptr  0Ch
.text:00410010 arg_8           = dword ptr  10h
.text:00410010 arg_C           = dword ptr  14h
.text:00410010
.text:00410010                 push    ebp
.text:00410011                 mov     ebp, esp
.text:00410013                 push    edi
.text:00410014                 push    esi
.text:00410015                 push    ebx
.text:00410016                 sub     esp, 34h
.text:00410019                 mov     ebx, [ebp+arg_4]
.text:0041001C                 mov     [ebp+var_28], 0
.text:00410023                 mov     ecx, [ebp+arg_0]
.text:00410026                 mov     eax, [ebp+arg_8]
.text:00410029                 mov     [ebp+var_24], 0
.text:00410030                 test    ebx, ebx
.text:00410032                 mov     edx, [ebp+arg_C]
.text:00410035                 mov     [ebp+var_1C], 0
.text:0041003C                 js      loc_4101B4
.text:00410042
.text:00410042 loc_410042:                             ; CODE XREF: sub_410010+1B2↓j
.text:00410042                 test    edx, edx
.text:00410044                 js      loc_4101A8
.text:0041004A
.text:0041004A loc_41004A:                             ; CODE XREF: sub_410010+19F↓j
.text:0041004A                 mov     [ebp+var_2C], edx
.text:0041004D                 test    edx, edx
.text:0041004F                 mov     esi, eax
.text:00410051                 mov     [ebp+var_30], ecx
.text:00410054                 mov     edi, ebx
.text:00410056                 jnz     short loc_4100C1
.text:00410058                 cmp     eax, ebx
.text:0041005A                 jbe     short loc_4100A4
.text:0041005C                 mov     eax, ecx
.text:0041005E                 mov     edx, ebx
.text:00410060                 div     esi
.text:00410062
.text:00410062 loc_410062:                             ; CODE XREF: sub_410010+AF↓j
.text:00410062                 mov     [ebp+var_30], edx
.text:00410065                 lea     ecx, [ebp+var_18]
.text:00410068                 test    ecx, ecx
.text:0041006A                 jz      short loc_410085
.text:0041006C                 mov     [ebp+var_24], 0
.text:00410073
.text:00410073 loc_410073:                             ; CODE XREF: sub_410010+FE↓j
.text:00410073                 mov     eax, [ebp+var_30]
.text:00410076                 mov     [ebp+var_28], eax
.text:00410079                 mov     edx, [ebp+var_28]
.text:0041007C                 mov     ecx, [ebp+var_24]
.text:0041007F                 mov     [ebp+var_18], edx
.text:00410082                 mov     [ebp+var_14], ecx
.text:00410085
.text:00410085 loc_410085:                             ; CODE XREF: sub_410010+5A↑j
.text:00410085                                         ; sub_410010+C8↓j ...
.text:00410085                 mov     eax, [ebp+var_1C]
.text:00410088                 test    eax, eax
.text:0041008A                 jz      short loc_410096
.text:0041008C                 neg     [ebp+var_18]
.text:0041008F                 adc     [ebp+var_14], 0
.text:00410093                 neg     [ebp+var_14]
.text:00410096
.text:00410096 loc_410096:                             ; CODE XREF: sub_410010+7A↑j
.text:00410096                 mov     eax, [ebp+var_18]
.text:00410099                 mov     edx, [ebp+var_14]
.text:0041009C                 add     esp, 34h
.text:0041009F                 pop     ebx
.text:004100A0                 pop     esi
.text:004100A1                 pop     edi
.text:004100A2                 pop     ebp
.text:004100A3                 retn
.text:004100A4 ; ---------------------------------------------------------------------------
.text:004100A4
.text:004100A4 loc_4100A4:                             ; CODE XREF: sub_410010+4A↑j
.text:004100A4                 test    eax, eax
.text:004100A6                 jnz     short loc_4100B3
.text:004100A8                 mov     eax, 1
.text:004100AD                 xor     edx, edx
.text:004100AF                 div     esi
.text:004100B1                 mov     esi, eax
.text:004100B3
.text:004100B3 loc_4100B3:                             ; CODE XREF: sub_410010+96↑j
.text:004100B3                 mov     eax, edi
.text:004100B5                 mov     edx, [ebp+var_2C]
.text:004100B8                 div     esi
.text:004100BA                 mov     eax, [ebp+var_30]
.text:004100BD                 div     esi
.text:004100BF                 jmp     short loc_410062
.text:004100C1 ; ---------------------------------------------------------------------------
.text:004100C1
.text:004100C1 loc_4100C1:                             ; CODE XREF: sub_410010+46↑j
.text:004100C1                 cmp     [ebp+var_2C], ebx
.text:004100C4                 jbe     short loc_4100E0
.text:004100C6                 mov     [ebp+var_28], ecx
.text:004100C9
.text:004100C9 loc_4100C9:                             ; CODE XREF: sub_410010+17E↓j
.text:004100C9                 mov     [ebp+var_24], edi
.text:004100CC                 mov     eax, [ebp+var_28]
.text:004100CF                 mov     edx, [ebp+var_24]
.text:004100D2                 mov     [ebp+var_18], eax
.text:004100D5                 mov     [ebp+var_14], edx
.text:004100D8                 jmp     short loc_410085
.text:004100D8 ; ---------------------------------------------------------------------------
.text:004100DA                 align 10h
.text:004100E0
.text:004100E0 loc_4100E0:                             ; CODE XREF: sub_410010+B4↑j
.text:004100E0                 bsr     eax, [ebp+var_2C]
.text:004100E4                 mov     ebx, eax
.text:004100E6                 xor     ebx, 1Fh
.text:004100E9                 jnz     short loc_410113
.text:004100EB                 cmp     edi, [ebp+var_2C]
.text:004100EE                 ja      short loc_4100F5
.text:004100F0                 cmp     [ebp+var_30], esi
.text:004100F3                 jb      short loc_410100
.text:004100F5
.text:004100F5 loc_4100F5:                             ; CODE XREF: sub_410010+DE↑j
.text:004100F5                 mov     edx, [ebp+var_30]
.text:004100F8                 sub     edx, esi
.text:004100FA                 sbb     edi, [ebp+var_2C]
.text:004100FD                 mov     [ebp+var_30], edx
.text:00410100
.text:00410100 loc_410100:                             ; CODE XREF: sub_410010+E3↑j
.text:00410100                 lea     ecx, [ebp+var_18]
.text:00410103                 test    ecx, ecx
.text:00410105                 jz      loc_410085
.text:0041010B                 mov     [ebp+var_24], edi
.text:0041010E                 jmp     loc_410073
.text:00410113 ; ---------------------------------------------------------------------------
.text:00410113
.text:00410113 loc_410113:                             ; CODE XREF: sub_410010+D9↑j
.text:00410113                 mov     edx, [ebp+var_2C]
.text:00410116                 mov     eax, 20h ; ' '
.text:0041011B                 mov     cl, bl
.text:0041011D                 sub     eax, ebx
.text:0041011F                 mov     [ebp+var_34], eax
.text:00410122                 shl     edx, cl
.text:00410124                 mov     eax, esi
.text:00410126                 movzx   ecx, byte ptr [ebp+var_34]
.text:0041012A                 shr     eax, cl
.text:0041012C                 mov     cl, bl
.text:0041012E                 shl     esi, cl
.text:00410130                 or      edx, eax
.text:00410132                 mov     eax, [ebp+var_30]
.text:00410135                 movzx   ecx, byte ptr [ebp+var_34]
.text:00410139                 mov     [ebp+var_2C], edx
.text:0041013C                 mov     edx, edi
.text:0041013E                 shr     edx, cl
.text:00410140                 mov     cl, bl
.text:00410142                 shl     edi, cl
.text:00410144                 movzx   ecx, byte ptr [ebp+var_34]
.text:00410148                 shr     eax, cl
.text:0041014A                 or      edi, eax
.text:0041014C                 mov     eax, edi
.text:0041014E                 mov     cl, bl
.text:00410150                 div     [ebp+var_2C]
.text:00410153                 shl     [ebp+var_30], cl
.text:00410156                 mov     edi, edx
.text:00410158                 mul     esi
.text:0041015A                 mov     [ebp+var_3C], eax
.text:0041015D                 cmp     edx, edi
.text:0041015F                 ja      short loc_41019B
.text:00410161                 cmp     edx, edi
.text:00410163                 jz      short loc_410193
.text:00410165
.text:00410165 loc_410165:                             ; CODE XREF: sub_410010+189↓j
.text:00410165                                         ; sub_410010+196↓j
.text:00410165                 lea     eax, [ebp+var_18]
.text:00410168                 test    eax, eax
.text:0041016A                 jz      loc_410085
.text:00410170                 movzx   ecx, byte ptr [ebp+var_34]
.text:00410174                 mov     eax, [ebp+var_30]
.text:00410177                 sub     eax, [ebp+var_3C]
.text:0041017A                 sbb     edi, edx
.text:0041017C                 mov     [ebp+var_30], eax
.text:0041017F                 mov     edx, edi
.text:00410181                 shl     edx, cl
.text:00410183                 mov     cl, bl
.text:00410185                 shr     eax, cl
.text:00410187                 or      edx, eax
.text:00410189                 mov     [ebp+var_28], edx
.text:0041018C                 shr     edi, cl
.text:0041018E                 jmp     loc_4100C9
.text:00410193 ; ---------------------------------------------------------------------------
.text:00410193
.text:00410193 loc_410193:                             ; CODE XREF: sub_410010+153↑j
.text:00410193                 mov     eax, [ebp+var_30]
.text:00410196                 cmp     [ebp+var_3C], eax
.text:00410199                 jbe     short loc_410165
.text:0041019B
.text:0041019B loc_41019B:                             ; CODE XREF: sub_410010+14F↑j
.text:0041019B                 mov     ecx, [ebp+var_3C]
.text:0041019E                 sub     ecx, esi
.text:004101A0                 sbb     edx, [ebp+var_2C]
.text:004101A3                 mov     [ebp+var_3C], ecx
.text:004101A6                 jmp     short loc_410165
.text:004101A8 ; ---------------------------------------------------------------------------
.text:004101A8
.text:004101A8 loc_4101A8:                             ; CODE XREF: sub_410010+34↑j
.text:004101A8                 neg     eax
.text:004101AA                 adc     edx, 0
.text:004101AD                 neg     edx
.text:004101AF                 jmp     loc_41004A
.text:004101B4 ; ---------------------------------------------------------------------------
.text:004101B4
.text:004101B4 loc_4101B4:                             ; CODE XREF: sub_410010+2C↑j
.text:004101B4                 mov     [ebp+var_1C], 0FFFFFFFFh
.text:004101BB                 neg     ecx
.text:004101BD                 adc     ebx, 0
.text:004101C0                 neg     ebx
.text:004101C2                 jmp     loc_410042
.text:004101C2 sub_410010      endp
.text:004101C2
.text:004101C2 ; ---------------------------------------------------------------------------
.text:004101C7                 align 10h
.text:004101D0
.text:004101D0 ; =============== S U B R O U T I N E =======================================
.text:004101D0
.text:004101D0 ; Attributes: bp-based frame
.text:004101D0
.text:004101D0 sub_4101D0      proc near               ; CODE XREF: sub_406DA0+58↑p
.text:004101D0                                         ; sub_406DA0+AA↑p
.text:004101D0
.text:004101D0 var_2C          = dword ptr -2Ch
.text:004101D0 var_28          = dword ptr -28h
.text:004101D0 var_24          = dword ptr -24h
.text:004101D0 var_20          = dword ptr -20h
.text:004101D0 var_1C          = dword ptr -1Ch
.text:004101D0 var_14          = dword ptr -14h
.text:004101D0 arg_0           = dword ptr  8
.text:004101D0 arg_4           = dword ptr  0Ch
.text:004101D0 arg_8           = dword ptr  10h
.text:004101D0 arg_C           = dword ptr  14h
.text:004101D0
.text:004101D0                 push    ebp
.text:004101D1                 mov     ebp, esp
.text:004101D3                 push    edi
.text:004101D4                 push    esi
.text:004101D5                 push    ebx
.text:004101D6                 sub     esp, 24h
.text:004101D9                 mov     ebx, [ebp+arg_4]
.text:004101DC                 mov     [ebp+var_20], 0
.text:004101E3                 mov     ecx, [ebp+arg_0]
.text:004101E6                 mov     eax, [ebp+arg_8]
.text:004101E9                 mov     [ebp+var_1C], 0
.text:004101F0                 test    ebx, ebx
.text:004101F2                 mov     edx, [ebp+arg_C]
.text:004101F5                 mov     [ebp+var_14], 0
.text:004101FC                 js      loc_410310
.text:00410202
.text:00410202 loc_410202:                             ; CODE XREF: sub_4101D0+14E↓j
.text:00410202                 test    edx, edx
.text:00410204                 js      loc_410300
.text:0041020A
.text:0041020A loc_41020A:                             ; CODE XREF: sub_4101D0+13A↓j
.text:0041020A                 mov     [ebp+var_24], ecx
.text:0041020D                 test    edx, edx
.text:0041020F                 mov     esi, eax
.text:00410211                 jnz     short loc_410266
.text:00410213                 cmp     eax, ebx
.text:00410215                 jbe     short loc_410244
.text:00410217                 mov     eax, ecx
.text:00410219                 mov     edx, ebx
.text:0041021B                 div     esi
.text:0041021D                 mov     edi, eax
.text:0041021F                 nop
.text:00410220
.text:00410220 loc_410220:                             ; CODE XREF: sub_4101D0+9C↓j
.text:00410220                                         ; sub_4101D0+B4↓j ...
.text:00410220                 xor     ecx, ecx
.text:00410222
.text:00410222 loc_410222:                             ; CODE XREF: sub_4101D0+94↓j
.text:00410222                 mov     [ebp+var_1C], ecx
.text:00410225                 mov     ecx, [ebp+var_14]
.text:00410228                 mov     [ebp+var_20], edi
.text:0041022B                 mov     eax, [ebp+var_20]
.text:0041022E                 mov     edx, [ebp+var_1C]
.text:00410231                 test    ecx, ecx
.text:00410233                 jz      short loc_41023C
.text:00410235                 neg     eax
.text:00410237                 adc     edx, 0
.text:0041023A                 neg     edx
.text:0041023C
.text:0041023C loc_41023C:                             ; CODE XREF: sub_4101D0+63↑j
.text:0041023C                 add     esp, 24h
.text:0041023F                 pop     ebx
.text:00410240                 pop     esi
.text:00410241                 pop     edi
.text:00410242                 pop     ebp
.text:00410243                 retn
.text:00410244 ; ---------------------------------------------------------------------------
.text:00410244
.text:00410244 loc_410244:                             ; CODE XREF: sub_4101D0+45↑j
.text:00410244                 test    eax, eax
.text:00410246                 jnz     short loc_410255
.text:00410248                 mov     eax, 1
.text:0041024D                 xor     ecx, ecx
.text:0041024F                 xor     edx, edx
.text:00410251                 div     ecx
.text:00410253                 mov     esi, eax
.text:00410255
.text:00410255 loc_410255:                             ; CODE XREF: sub_4101D0+76↑j
.text:00410255                 mov     eax, ebx
.text:00410257                 xor     edx, edx
.text:00410259                 div     esi
.text:0041025B                 mov     ecx, eax
.text:0041025D                 mov     eax, [ebp+var_24]
.text:00410260                 div     esi
.text:00410262                 mov     edi, eax
.text:00410264                 jmp     short loc_410222
.text:00410266 ; ---------------------------------------------------------------------------
.text:00410266
.text:00410266 loc_410266:                             ; CODE XREF: sub_4101D0+41↑j
.text:00410266                 cmp     edx, ebx
.text:00410268                 jbe     short loc_410270
.text:0041026A                 xor     edi, edi
.text:0041026C                 jmp     short loc_410220
.text:0041026C ; ---------------------------------------------------------------------------
.text:0041026E                 align 10h
.text:00410270
.text:00410270 loc_410270:                             ; CODE XREF: sub_4101D0+98↑j
.text:00410270                 bsr     eax, edx
.text:00410273                 xor     eax, 1Fh
.text:00410276                 mov     [ebp+var_28], eax
.text:00410279                 jnz     short loc_410290
.text:0041027B                 cmp     ebx, edx
.text:0041027D                 ja      short loc_410286
.text:0041027F                 xor     edi, edi
.text:00410281                 cmp     [ebp+var_24], esi
.text:00410284                 jb      short loc_410220
.text:00410286
.text:00410286 loc_410286:                             ; CODE XREF: sub_4101D0+AD↑j
.text:00410286                 mov     edi, 1
.text:0041028B                 jmp     short loc_410220
.text:0041028B ; ---------------------------------------------------------------------------
.text:0041028D                 align 10h
.text:00410290
.text:00410290 loc_410290:                             ; CODE XREF: sub_4101D0+A9↑j
.text:00410290                 mov     eax, [ebp+var_28]
.text:00410293                 mov     ecx, 20h ; ' '
.text:00410298                 sub     ecx, eax
.text:0041029A                 mov     [ebp+var_2C], ecx
.text:0041029D                 mov     eax, esi
.text:0041029F                 movzx   ecx, byte ptr [ebp+var_28]
.text:004102A3                 shl     edx, cl
.text:004102A5                 mov     edi, edx
.text:004102A7                 movzx   ecx, byte ptr [ebp+var_2C]
.text:004102AB                 mov     edx, ebx
.text:004102AD                 shr     eax, cl
.text:004102AF                 movzx   ecx, byte ptr [ebp+var_28]
.text:004102B3                 or      edi, eax
.text:004102B5                 mov     eax, [ebp+var_24]
.text:004102B8                 shl     esi, cl
.text:004102BA                 movzx   ecx, byte ptr [ebp+var_2C]
.text:004102BE                 shr     edx, cl
.text:004102C0                 movzx   ecx, byte ptr [ebp+var_28]
.text:004102C4                 shl     ebx, cl
.text:004102C6                 movzx   ecx, byte ptr [ebp+var_2C]
.text:004102CA                 shr     eax, cl
.text:004102CC                 or      ebx, eax
.text:004102CE                 movzx   ecx, byte ptr [ebp+var_28]
.text:004102D2                 mov     eax, ebx
.text:004102D4                 div     edi
.text:004102D6                 mov     ebx, edx
.text:004102D8                 mov     edi, eax
.text:004102DA                 shl     [ebp+var_24], cl
.text:004102DD                 mul     esi
.text:004102DF                 cmp     edx, ebx
.text:004102E1                 ja      short loc_4102F4
.text:004102E3                 cmp     edx, ebx
.text:004102E5                 jnz     loc_410220
.text:004102EB                 cmp     eax, [ebp+var_24]
.text:004102EE                 jbe     loc_410220
.text:004102F4
.text:004102F4 loc_4102F4:                             ; CODE XREF: sub_4101D0+111↑j
.text:004102F4                 dec     edi
.text:004102F5                 jmp     loc_410220
.text:004102F5 ; ---------------------------------------------------------------------------
.text:004102FA                 align 10h
.text:00410300
.text:00410300 loc_410300:                             ; CODE XREF: sub_4101D0+34↑j
.text:00410300                 not     [ebp+var_14]
.text:00410303                 neg     eax
.text:00410305                 adc     edx, 0
.text:00410308                 neg     edx
.text:0041030A                 jmp     loc_41020A
.text:0041030A ; ---------------------------------------------------------------------------
.text:0041030F                 align 10h
.text:00410310
.text:00410310 loc_410310:                             ; CODE XREF: sub_4101D0+2C↑j
.text:00410310                 mov     [ebp+var_14], 0FFFFFFFFh
.text:00410317                 neg     ecx
.text:00410319                 adc     ebx, 0
.text:0041031C                 neg     ebx
.text:0041031E                 jmp     loc_410202
.text:0041031E sub_4101D0      endp
.text:0041031E
.text:0041031E ; ---------------------------------------------------------------------------
.text:00410323                 align 10h
.text:00410330
.text:00410330 ; =============== S U B R O U T I N E =======================================
.text:00410330
.text:00410330 ; Attributes: bp-based frame
.text:00410330
.text:00410330 sub_410330      proc near               ; CODE XREF: sub_408FD0+17E↑p
.text:00410330                                         ; sub_408FD0+1F5↑p ...
.text:00410330
.text:00410330 var_24          = dword ptr -24h
.text:00410330 var_20          = dword ptr -20h
.text:00410330 var_1C          = dword ptr -1Ch
.text:00410330 var_18          = dword ptr -18h
.text:00410330 var_14          = dword ptr -14h
.text:00410330 var_C           = dword ptr -0Ch
.text:00410330 var_8           = dword ptr -8
.text:00410330 var_4           = dword ptr -4
.text:00410330 arg_0           = dword ptr  8
.text:00410330 arg_4           = dword ptr  0Ch
.text:00410330 arg_8           = dword ptr  10h
.text:00410330 arg_C           = dword ptr  14h
.text:00410330
.text:00410330                 push    ebp
.text:00410331                 mov     ebp, esp
.text:00410333                 sub     esp, 28h
.text:00410336                 mov     [ebp+var_C], ebx
.text:00410339                 mov     edx, [ebp+arg_C]
.text:0041033C                 mov     ecx, [ebp+arg_0]
.text:0041033F                 mov     [ebp+var_8], esi
.text:00410342                 mov     eax, [ebp+arg_8]
.text:00410345                 test    edx, edx
.text:00410347                 mov     [ebp+var_4], edi
.text:0041034A                 mov     ebx, [ebp+arg_4]
.text:0041034D                 mov     esi, eax
.text:0041034F                 mov     [ebp+var_18], 0
.text:00410356                 mov     [ebp+var_14], 0
.text:0041035D                 mov     [ebp+var_1C], ecx
.text:00410360                 jnz     short loc_4103B2
.text:00410362                 cmp     eax, ebx
.text:00410364                 jbe     short loc_410390
.text:00410366                 mov     eax, ecx
.text:00410368                 mov     edx, ebx
.text:0041036A                 div     esi
.text:0041036C                 mov     edi, eax
.text:0041036E                 mov     esi, esi
.text:00410370
.text:00410370 loc_410370:                             ; CODE XREF: sub_410330+88↓j
.text:00410370                                         ; sub_410330+A4↓j ...
.text:00410370                 xor     ecx, ecx
.text:00410372
.text:00410372 loc_410372:                             ; CODE XREF: sub_410330+80↓j
.text:00410372                 mov     [ebp+var_18], edi
.text:00410375                 mov     ebx, [ebp+var_C]
.text:00410378                 mov     eax, [ebp+var_18]
.text:0041037B                 mov     [ebp+var_14], ecx
.text:0041037E                 mov     esi, [ebp+var_8]
.text:00410381                 mov     edx, [ebp+var_14]
.text:00410384                 mov     edi, [ebp+var_4]
.text:00410387                 mov     esp, ebp
.text:00410389                 pop     ebp
.text:0041038A                 retn
.text:0041038A ; ---------------------------------------------------------------------------
.text:0041038B                 align 10h
.text:00410390
.text:00410390 loc_410390:                             ; CODE XREF: sub_410330+34↑j
.text:00410390                 test    eax, eax
.text:00410392                 jnz     short loc_4103A1
.text:00410394                 mov     eax, 1
.text:00410399                 xor     ecx, ecx
.text:0041039B                 xor     edx, edx
.text:0041039D                 div     ecx
.text:0041039F                 mov     esi, eax
.text:004103A1
.text:004103A1 loc_4103A1:                             ; CODE XREF: sub_410330+62↑j
.text:004103A1                 mov     eax, ebx
.text:004103A3                 xor     edx, edx
.text:004103A5                 div     esi
.text:004103A7                 mov     ecx, eax
.text:004103A9                 mov     eax, [ebp+var_1C]
.text:004103AC                 div     esi
.text:004103AE                 mov     edi, eax
.text:004103B0                 jmp     short loc_410372
.text:004103B2 ; ---------------------------------------------------------------------------
.text:004103B2
.text:004103B2 loc_4103B2:                             ; CODE XREF: sub_410330+30↑j
.text:004103B2                 cmp     edx, ebx
.text:004103B4                 jbe     short loc_4103C0
.text:004103B6                 xor     edi, edi
.text:004103B8                 jmp     short loc_410370
.text:004103B8 ; ---------------------------------------------------------------------------
.text:004103BA                 align 10h
.text:004103C0
.text:004103C0 loc_4103C0:                             ; CODE XREF: sub_410330+84↑j
.text:004103C0                 bsr     eax, edx
.text:004103C3                 xor     eax, 1Fh
.text:004103C6                 mov     [ebp+var_20], eax
.text:004103C9                 jnz     short loc_4103E0
.text:004103CB                 cmp     ebx, edx
.text:004103CD                 ja      short loc_4103D6
.text:004103CF                 xor     edi, edi
.text:004103D1                 cmp     [ebp+var_1C], esi
.text:004103D4                 jb      short loc_410370
.text:004103D6
.text:004103D6 loc_4103D6:                             ; CODE XREF: sub_410330+9D↑j
.text:004103D6                 mov     edi, 1
.text:004103DB                 jmp     short loc_410370
.text:004103DB ; ---------------------------------------------------------------------------
.text:004103DD                 align 10h
.text:004103E0
.text:004103E0 loc_4103E0:                             ; CODE XREF: sub_410330+99↑j
.text:004103E0                 mov     eax, [ebp+var_20]
.text:004103E3                 mov     ecx, 20h ; ' '
.text:004103E8                 sub     ecx, eax
.text:004103EA                 mov     [ebp+var_24], ecx
.text:004103ED                 mov     eax, esi
.text:004103EF                 movzx   ecx, byte ptr [ebp+var_20]
.text:004103F3                 shl     edx, cl
.text:004103F5                 mov     edi, edx
.text:004103F7                 movzx   ecx, byte ptr [ebp+var_24]
.text:004103FB                 mov     edx, ebx
.text:004103FD                 shr     eax, cl
.text:004103FF                 movzx   ecx, byte ptr [ebp+var_20]
.text:00410403                 or      edi, eax
.text:00410405                 mov     eax, [ebp+var_1C]
.text:00410408                 shl     esi, cl
.text:0041040A                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041040E                 shr     edx, cl
.text:00410410                 movzx   ecx, byte ptr [ebp+var_20]
.text:00410414                 shl     ebx, cl
.text:00410416                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041041A                 shr     eax, cl
.text:0041041C                 or      ebx, eax
.text:0041041E                 movzx   ecx, byte ptr [ebp+var_20]
.text:00410422                 mov     eax, ebx
.text:00410424                 div     edi
.text:00410426                 mov     ebx, edx
.text:00410428                 mov     edi, eax
.text:0041042A                 shl     [ebp+var_1C], cl
.text:0041042D                 mul     esi
.text:0041042F                 cmp     edx, ebx
.text:00410431                 ja      short loc_410444
.text:00410433                 cmp     edx, ebx
.text:00410435                 jnz     loc_410370
.text:0041043B                 cmp     eax, [ebp+var_1C]
.text:0041043E                 jbe     loc_410370
.text:00410444
.text:00410444 loc_410444:                             ; CODE XREF: sub_410330+101↑j
.text:00410444                 dec     edi
.text:00410445                 jmp     loc_410370
.text:00410445 sub_410330      endp
.text:00410445
.text:00410445 ; ---------------------------------------------------------------------------
.text:0041044A                 align 10h
.text:00410450
.text:00410450 ; =============== S U B R O U T I N E =======================================
.text:00410450
.text:00410450 ; Attributes: bp-based frame
.text:00410450
.text:00410450 sub_410450      proc near               ; CODE XREF: sub_408FD0+1A5↑p
.text:00410450                                         ; sub_408FD0+21E↑p ...
.text:00410450
.text:00410450 var_34          = dword ptr -34h
.text:00410450 var_2C          = dword ptr -2Ch
.text:00410450 var_28          = dword ptr -28h
.text:00410450 var_24          = dword ptr -24h
.text:00410450 var_20          = dword ptr -20h
.text:00410450 var_1C          = dword ptr -1Ch
.text:00410450 var_18          = dword ptr -18h
.text:00410450 var_14          = dword ptr -14h
.text:00410450 arg_0           = dword ptr  8
.text:00410450 arg_4           = dword ptr  0Ch
.text:00410450 arg_8           = dword ptr  10h
.text:00410450 arg_C           = dword ptr  14h
.text:00410450
.text:00410450                 push    ebp
.text:00410451                 mov     ebp, esp
.text:00410453                 push    edi
.text:00410454                 push    esi
.text:00410455                 push    ebx
.text:00410456                 sub     esp, 2Ch
.text:00410459                 mov     edx, [ebp+arg_C]
.text:0041045C                 mov     [ebp+var_20], 0
.text:00410463                 mov     ecx, [ebp+arg_0]
.text:00410466                 mov     ebx, [ebp+arg_4]
.text:00410469                 mov     [ebp+var_1C], 0
.text:00410470                 mov     eax, [ebp+arg_8]
.text:00410473                 test    edx, edx
.text:00410475                 mov     [ebp+var_24], edx
.text:00410478                 mov     edi, ebx
.text:0041047A                 mov     esi, eax
.text:0041047C                 mov     [ebp+var_28], ecx
.text:0041047F                 jnz     short loc_4104E0
.text:00410481                 cmp     eax, ebx
.text:00410483                 jbe     short loc_4104C0
.text:00410485                 mov     eax, ecx
.text:00410487                 mov     edx, ebx
.text:00410489                 div     esi
.text:0041048B
.text:0041048B loc_41048B:                             ; CODE XREF: sub_410450+8B↓j
.text:0041048B                 mov     [ebp+var_28], edx
.text:0041048E                 lea     ecx, [ebp+var_18]
.text:00410491                 test    ecx, ecx
.text:00410493                 jz      short loc_4104AE
.text:00410495                 mov     [ebp+var_1C], 0
.text:0041049C
.text:0041049C loc_41049C:                             ; CODE XREF: sub_410450+DA↓j
.text:0041049C                 mov     eax, [ebp+var_28]
.text:0041049F                 mov     [ebp+var_20], eax
.text:004104A2                 mov     edx, [ebp+var_20]
.text:004104A5                 mov     ecx, [ebp+var_1C]
.text:004104A8                 mov     [ebp+var_18], edx
.text:004104AB                 mov     [ebp+var_14], ecx
.text:004104AE
.text:004104AE loc_4104AE:                             ; CODE XREF: sub_410450+43↑j
.text:004104AE                                         ; sub_410450+A7↓j ...
.text:004104AE                 mov     eax, [ebp+var_18]
.text:004104B1                 mov     edx, [ebp+var_14]
.text:004104B4                 add     esp, 2Ch
.text:004104B7                 pop     ebx
.text:004104B8                 pop     esi
.text:004104B9                 pop     edi
.text:004104BA                 pop     ebp
.text:004104BB                 retn
.text:004104BB ; ---------------------------------------------------------------------------
.text:004104BC                 align 10h
.text:004104C0
.text:004104C0 loc_4104C0:                             ; CODE XREF: sub_410450+33↑j
.text:004104C0                 test    eax, eax
.text:004104C2                 jnz     short loc_4104CF
.text:004104C4                 mov     eax, 1
.text:004104C9                 xor     edx, edx
.text:004104CB                 div     esi
.text:004104CD                 mov     esi, eax
.text:004104CF
.text:004104CF loc_4104CF:                             ; CODE XREF: sub_410450+72↑j
.text:004104CF                 mov     eax, edi
.text:004104D1                 mov     edx, [ebp+var_24]
.text:004104D4                 div     esi
.text:004104D6                 mov     eax, [ebp+var_28]
.text:004104D9                 div     esi
.text:004104DB                 jmp     short loc_41048B
.text:004104DB ; ---------------------------------------------------------------------------
.text:004104DD                 align 10h
.text:004104E0
.text:004104E0 loc_4104E0:                             ; CODE XREF: sub_410450+2F↑j
.text:004104E0                 cmp     [ebp+var_24], ebx
.text:004104E3                 jbe     short loc_410500
.text:004104E5                 mov     [ebp+var_20], ecx
.text:004104E8
.text:004104E8 loc_4104E8:                             ; CODE XREF: sub_410450+15B↓j
.text:004104E8                 mov     [ebp+var_1C], edi
.text:004104EB                 mov     eax, [ebp+var_20]
.text:004104EE                 mov     edx, [ebp+var_1C]
.text:004104F1                 mov     [ebp+var_18], eax
.text:004104F4                 mov     [ebp+var_14], edx
.text:004104F7                 jmp     short loc_4104AE
.text:004104F7 ; ---------------------------------------------------------------------------
.text:004104F9                 align 10h
.text:00410500
.text:00410500 loc_410500:                             ; CODE XREF: sub_410450+93↑j
.text:00410500                 bsr     eax, [ebp+var_24]
.text:00410504                 mov     ebx, eax
.text:00410506                 xor     ebx, 1Fh
.text:00410509                 jnz     short loc_410530
.text:0041050B                 cmp     edi, [ebp+var_24]
.text:0041050E                 ja      short loc_410515
.text:00410510                 cmp     [ebp+var_28], esi
.text:00410513                 jb      short loc_410520
.text:00410515
.text:00410515 loc_410515:                             ; CODE XREF: sub_410450+BE↑j
.text:00410515                 mov     edx, [ebp+var_28]
.text:00410518                 sub     edx, esi
.text:0041051A                 sbb     edi, [ebp+var_24]
.text:0041051D                 mov     [ebp+var_28], edx
.text:00410520
.text:00410520 loc_410520:                             ; CODE XREF: sub_410450+C3↑j
.text:00410520                 lea     ecx, [ebp+var_18]
.text:00410523                 test    ecx, ecx
.text:00410525                 jz      short loc_4104AE
.text:00410527                 mov     [ebp+var_1C], edi
.text:0041052A                 jmp     loc_41049C
.text:0041052A ; ---------------------------------------------------------------------------
.text:0041052F                 align 10h
.text:00410530
.text:00410530 loc_410530:                             ; CODE XREF: sub_410450+B9↑j
.text:00410530                 mov     edx, [ebp+var_24]
.text:00410533                 mov     eax, 20h ; ' '
.text:00410538                 mov     cl, bl
.text:0041053A                 sub     eax, ebx
.text:0041053C                 mov     [ebp+var_2C], eax
.text:0041053F                 shl     edx, cl
.text:00410541                 mov     eax, esi
.text:00410543                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00410547                 shr     eax, cl
.text:00410549                 mov     cl, bl
.text:0041054B                 shl     esi, cl
.text:0041054D                 or      edx, eax
.text:0041054F                 mov     eax, [ebp+var_28]
.text:00410552                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00410556                 mov     [ebp+var_24], edx
.text:00410559                 mov     edx, edi
.text:0041055B                 shr     edx, cl
.text:0041055D                 mov     cl, bl
.text:0041055F                 shl     edi, cl
.text:00410561                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00410565                 shr     eax, cl
.text:00410567                 or      edi, eax
.text:00410569                 mov     eax, edi
.text:0041056B                 mov     cl, bl
.text:0041056D                 div     [ebp+var_24]
.text:00410570                 shl     [ebp+var_28], cl
.text:00410573                 mov     edi, edx
.text:00410575                 mul     esi
.text:00410577                 mov     [ebp+var_34], eax
.text:0041057A                 cmp     edx, edi
.text:0041057C                 ja      short loc_4105B8
.text:0041057E                 cmp     edx, edi
.text:00410580                 jz      short loc_4105B0
.text:00410582
.text:00410582 loc_410582:                             ; CODE XREF: sub_410450+166↓j
.text:00410582                                         ; sub_410450+173↓j
.text:00410582                 lea     eax, [ebp+var_18]
.text:00410585                 test    eax, eax
.text:00410587                 jz      loc_4104AE
.text:0041058D                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00410591                 mov     eax, [ebp+var_28]
.text:00410594                 sub     eax, [ebp+var_34]
.text:00410597                 sbb     edi, edx
.text:00410599                 mov     [ebp+var_28], eax
.text:0041059C                 mov     edx, edi
.text:0041059E                 shl     edx, cl
.text:004105A0                 mov     cl, bl
.text:004105A2                 shr     eax, cl
.text:004105A4                 or      edx, eax
.text:004105A6                 mov     [ebp+var_20], edx
.text:004105A9                 shr     edi, cl
.text:004105AB                 jmp     loc_4104E8
.text:004105B0 ; ---------------------------------------------------------------------------
.text:004105B0
.text:004105B0 loc_4105B0:                             ; CODE XREF: sub_410450+130↑j
.text:004105B0                 mov     eax, [ebp+var_28]
.text:004105B3                 cmp     [ebp+var_34], eax
.text:004105B6                 jbe     short loc_410582
.text:004105B8
.text:004105B8 loc_4105B8:                             ; CODE XREF: sub_410450+12C↑j
.text:004105B8                 mov     ecx, [ebp+var_34]
.text:004105BB                 sub     ecx, esi
.text:004105BD                 sbb     edx, [ebp+var_24]
.text:004105C0                 mov     [ebp+var_34], ecx
.text:004105C3                 jmp     short loc_410582
.text:004105C3 sub_410450      endp
.text:004105C3
.text:004105C3 ; ---------------------------------------------------------------------------
.text:004105C5                 align 10h
.text:004105D0
.text:004105D0 ; =============== S U B R O U T I N E =======================================
.text:004105D0
.text:004105D0 ; Attributes: thunk
.text:004105D0
.text:004105D0 ; void __cdecl tzset()
.text:004105D0 _tzset          proc near               ; CODE XREF: sub_403090:loc_404FB0↑p
.text:004105D0                 jmp     ds:__imp__tzset
.text:004105D0 _tzset          endp
.text:004105D0
.text:004105D0 ; ---------------------------------------------------------------------------
.text:004105D6                 align 10h
.text:004105E0
.text:004105E0 ; =============== S U B R O U T I N E =======================================
.text:004105E0
.text:004105E0 ; Attributes: thunk
.text:004105E0
.text:004105E0 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:004105E0 _stricmp        proc near               ; CODE XREF: sub_4094A0+46F↑p
.text:004105E0                                         ; sub_40B330+28D↑p ...
.text:004105E0
.text:004105E0 String1         = dword ptr  4
.text:004105E0 String2         = dword ptr  8
.text:004105E0
.text:004105E0                 jmp     ds:__imp__stricmp
.text:004105E0 _stricmp        endp
.text:004105E0
.text:004105E0 ; ---------------------------------------------------------------------------
.text:004105E6                 align 10h
.text:004105F0
.text:004105F0 ; =============== S U B R O U T I N E =======================================
.text:004105F0
.text:004105F0 ; Attributes: thunk
.text:004105F0
.text:004105F0 ; char *__cdecl strdup(const char *String)
.text:004105F0 _strdup         proc near               ; CODE XREF: sub_40BE20+101↑p
.text:004105F0                                         ; .text:0040C08A↑p ...
.text:004105F0
.text:004105F0 String          = dword ptr  4
.text:004105F0
.text:004105F0                 jmp     ds:__imp__strdup
.text:004105F0 _strdup         endp
.text:004105F0
.text:004105F0 ; ---------------------------------------------------------------------------
.text:004105F6                 align 10h
.text:00410600
.text:00410600 ; =============== S U B R O U T I N E =======================================
.text:00410600
.text:00410600 ; Attributes: thunk
.text:00410600
.text:00410600 ; int __cdecl getpid()
.text:00410600 _getpid         proc near               ; CODE XREF: sub_40E350+84↑p
.text:00410600                 jmp     ds:__imp__getpid
.text:00410600 _getpid         endp
.text:00410600
.text:00410600 ; ---------------------------------------------------------------------------
.text:00410606                 align 10h
.text:00410610
.text:00410610 ; =============== S U B R O U T I N E =======================================
.text:00410610
.text:00410610 ; Attributes: thunk
.text:00410610
.text:00410610 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:00410610 _chmod          proc near               ; CODE XREF: sub_40E780+41↑j
.text:00410610
.text:00410610 FileName        = dword ptr  4
.text:00410610 AccessMode      = dword ptr  8
.text:00410610
.text:00410610                 jmp     ds:__imp__chmod
.text:00410610 _chmod          endp
.text:00410610
.text:00410610 ; ---------------------------------------------------------------------------
.text:00410616                 align 10h
.text:00410620                 jmp     ds:__set_app_type
.text:00410620 ; ---------------------------------------------------------------------------
.text:00410626                 align 10h
.text:00410630
.text:00410630 ; =============== S U B R O U T I N E =======================================
.text:00410630
.text:00410630 ; Attributes: thunk
.text:00410630
.text:00410630 ; void __cdecl cexit()
.text:00410630 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00410630                 jmp     ds:__imp__cexit
.text:00410630 _cexit          endp
.text:00410630
.text:00410630 ; ---------------------------------------------------------------------------
.text:00410636                 align 10h
.text:00410640
.text:00410640 ; =============== S U B R O U T I N E =======================================
.text:00410640
.text:00410640 ; Attributes: thunk
.text:00410640
.text:00410640 ; char ***__cdecl _p__environ()
.text:00410640 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00410640                 jmp     ds:__imp___p__environ
.text:00410640 __p__environ    endp
.text:00410640
.text:00410640 ; ---------------------------------------------------------------------------
.text:00410646                 align 10h
.text:00410650
.text:00410650 ; =============== S U B R O U T I N E =======================================
.text:00410650
.text:00410650 ; Attributes: thunk
.text:00410650
.text:00410650 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00410650 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00410650                                         ; TopLevelExceptionFilter+88↑p ...
.text:00410650
.text:00410650 Signal          = dword ptr  4
.text:00410650 Function        = dword ptr  8
.text:00410650
.text:00410650                 jmp     ds:__imp_signal
.text:00410650 signal          endp
.text:00410650
.text:00410650 ; ---------------------------------------------------------------------------
.text:00410656                 align 10h
.text:00410660
.text:00410660 ; =============== S U B R O U T I N E =======================================
.text:00410660
.text:00410660 ; Attributes: thunk
.text:00410660
.text:00410660 ; int *__cdecl _p__fmode()
.text:00410660 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00410660                 jmp     ds:__imp___p__fmode
.text:00410660 __p__fmode      endp
.text:00410660
.text:00410660 ; ---------------------------------------------------------------------------
.text:00410666                 align 10h
.text:00410670
.text:00410670 ; =============== S U B R O U T I N E =======================================
.text:00410670
.text:00410670 ; Attributes: thunk
.text:00410670
.text:00410670 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00410670 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00410670                                         ; sub_401080+90↑p ...
.text:00410670
.text:00410670 FileHandle      = dword ptr  4
.text:00410670 Mode            = dword ptr  8
.text:00410670
.text:00410670                 jmp     ds:__imp__setmode
.text:00410670 _setmode        endp
.text:00410670
.text:00410670 ; ---------------------------------------------------------------------------
.text:00410676                 align 10h
.text:00410680
.text:00410680 ; =============== S U B R O U T I N E =======================================
.text:00410680
.text:00410680 ; Attributes: thunk
.text:00410680
.text:00410680 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00410680                 jmp     ds:__imp___getmainargs
.text:00410680 __getmainargs   endp
.text:00410680
.text:00410680 ; ---------------------------------------------------------------------------
.text:00410686                 align 10h
.text:00410690
.text:00410690 ; =============== S U B R O U T I N E =======================================
.text:00410690
.text:00410690 ; Attributes: thunk
.text:00410690
.text:00410690 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00410690 setlocale       proc near               ; CODE XREF: sub_401CD0+56↑p
.text:00410690
.text:00410690 Category        = dword ptr  4
.text:00410690 Locale          = dword ptr  8
.text:00410690
.text:00410690                 jmp     ds:__imp_setlocale
.text:00410690 setlocale       endp
.text:00410690
.text:00410690 ; ---------------------------------------------------------------------------
.text:00410696                 align 10h
.text:004106A0
.text:004106A0 ; =============== S U B R O U T I N E =======================================
.text:004106A0
.text:004106A0 ; Attributes: noreturn thunk
.text:004106A0
.text:004106A0 ; void __cdecl __noreturn exit(int Code)
.text:004106A0 exit            proc near               ; CODE XREF: sub_401CD0:loc_401DF2↑p
.text:004106A0                                         ; .text:004021FB↑p ...
.text:004106A0
.text:004106A0 Code            = dword ptr  4
.text:004106A0
.text:004106A0                 jmp     ds:__imp_exit
.text:004106A0 exit            endp
.text:004106A0
.text:004106A0 ; ---------------------------------------------------------------------------
.text:004106A6                 align 10h
.text:004106B0
.text:004106B0 ; =============== S U B R O U T I N E =======================================
.text:004106B0
.text:004106B0 ; Attributes: thunk
.text:004106B0
.text:004106B0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:004106B0 fprintf         proc near               ; CODE XREF: sub_401CD0+116↑p
.text:004106B0                                         ; .text:004021F3↑p ...
.text:004106B0
.text:004106B0 Stream          = dword ptr  4
.text:004106B0 Format          = dword ptr  8
.text:004106B0
.text:004106B0                 jmp     ds:__imp_fprintf
.text:004106B0 fprintf         endp
.text:004106B0
.text:004106B0 ; ---------------------------------------------------------------------------
.text:004106B6                 align 10h
.text:004106C0
.text:004106C0 ; =============== S U B R O U T I N E =======================================
.text:004106C0
.text:004106C0 ; Attributes: thunk
.text:004106C0
.text:004106C0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:004106C0 memcpy          proc near               ; CODE XREF: sub_402630+A8↑p
.text:004106C0                                         ; sub_403090+227↑p ...
.text:004106C0
.text:004106C0 Src             = dword ptr  8
.text:004106C0 Size            = dword ptr  0Ch
.text:004106C0
.text:004106C0                 jmp     ds:__imp_memcpy
.text:004106C0 memcpy          endp
.text:004106C0
.text:004106C0 ; ---------------------------------------------------------------------------
.text:004106C6                 align 10h
.text:004106D0
.text:004106D0 ; =============== S U B R O U T I N E =======================================
.text:004106D0
.text:004106D0 ; Attributes: thunk
.text:004106D0
.text:004106D0 ; void __cdecl free(void *Block)
.text:004106D0 free            proc near               ; CODE XREF: sub_402630+FB↑p
.text:004106D0                                         ; sub_402630+10B↑j ...
.text:004106D0
.text:004106D0 Block           = dword ptr  4
.text:004106D0
.text:004106D0                 jmp     ds:__imp_free
.text:004106D0 free            endp
.text:004106D0
.text:004106D0 ; ---------------------------------------------------------------------------
.text:004106D6                 align 10h
.text:004106E0
.text:004106E0 ; =============== S U B R O U T I N E =======================================
.text:004106E0
.text:004106E0 ; Attributes: thunk
.text:004106E0
.text:004106E0 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:004106E0 strspn          proc near               ; CODE XREF: sub_402630+8E↑p
.text:004106E0                                         ; .text:0040D0BA↑p ...
.text:004106E0
.text:004106E0 Str             = dword ptr  4
.text:004106E0 Control         = dword ptr  8
.text:004106E0
.text:004106E0                 jmp     ds:__imp_strspn
.text:004106E0 strspn          endp
.text:004106E0
.text:004106E0 ; ---------------------------------------------------------------------------
.text:004106E6                 align 10h
.text:004106F0
.text:004106F0 ; =============== S U B R O U T I N E =======================================
.text:004106F0
.text:004106F0 ; Attributes: thunk
.text:004106F0
.text:004106F0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:004106F0 fputs           proc near               ; CODE XREF: sub_401CD0+1AC↑p
.text:004106F0                                         ; sub_401CD0+1CE↑p ...
.text:004106F0
.text:004106F0 Buffer          = dword ptr  4
.text:004106F0 Stream          = dword ptr  8
.text:004106F0
.text:004106F0                 jmp     ds:__imp_fputs
.text:004106F0 fputs           endp
.text:004106F0
.text:004106F0 ; ---------------------------------------------------------------------------
.text:004106F6                 align 10h
.text:00410700
.text:00410700 ; =============== S U B R O U T I N E =======================================
.text:00410700
.text:00410700 ; Attributes: thunk
.text:00410700
.text:00410700 ; size_t __cdecl strlen(const char *Str)
.text:00410700 strlen          proc near               ; CODE XREF: sub_402630+32↑p
.text:00410700                                         ; sub_403090+246↑p ...
.text:00410700
.text:00410700 Str             = dword ptr  4
.text:00410700
.text:00410700                 jmp     ds:__imp_strlen
.text:00410700 strlen          endp
.text:00410700
.text:00410700 ; ---------------------------------------------------------------------------
.text:00410706                 align 10h
.text:00410710
.text:00410710 ; =============== S U B R O U T I N E =======================================
.text:00410710
.text:00410710 ; Attributes: thunk
.text:00410710
.text:00410710 ; int *__cdecl errno()
.text:00410710 _errno          proc near               ; CODE XREF: sub_401CD0+487↑p
.text:00410710                                         ; sub_402980+DE↑p ...
.text:00410710                 jmp     ds:__imp__errno
.text:00410710 _errno          endp
.text:00410710
.text:00410710 ; ---------------------------------------------------------------------------
.text:00410716                 align 10h
.text:00410720
.text:00410720 ; =============== S U B R O U T I N E =======================================
.text:00410720
.text:00410720 ; Attributes: thunk
.text:00410720
.text:00410720 ; int printf(const char *const Format, ...)
.text:00410720 printf          proc near               ; CODE XREF: sub_401CD0+18A↑p
.text:00410720                                         ; sub_401CD0+2D9↑p ...
.text:00410720
.text:00410720 Format          = dword ptr  4
.text:00410720
.text:00410720                 jmp     ds:__imp_printf
.text:00410720 printf          endp
.text:00410720
.text:00410720 ; ---------------------------------------------------------------------------
.text:00410726                 align 10h
.text:00410730
.text:00410730 ; =============== S U B R O U T I N E =======================================
.text:00410730
.text:00410730 ; Attributes: thunk
.text:00410730
.text:00410730 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:00410730 strcat          proc near               ; CODE XREF: sub_402390+C7↑p
.text:00410730                                         ; sub_402390+F7↑p ...
.text:00410730
.text:00410730 Destination     = dword ptr  4
.text:00410730 Source          = dword ptr  8
.text:00410730
.text:00410730                 jmp     ds:__imp_strcat
.text:00410730 strcat          endp
.text:00410730
.text:00410730 ; ---------------------------------------------------------------------------
.text:00410736                 align 10h
.text:00410740
.text:00410740 ; =============== S U B R O U T I N E =======================================
.text:00410740
.text:00410740 ; Attributes: thunk
.text:00410740
.text:00410740 ; struct tm *__cdecl localtime(const __time32_t *const Time)
.text:00410740 localtime       proc near               ; CODE XREF: sub_402AE0+49A↑p
.text:00410740                                         ; sub_402AE0+518↑p ...
.text:00410740
.text:00410740 Time            = dword ptr  4
.text:00410740
.text:00410740                 jmp     ds:__imp_localtime
.text:00410740 localtime       endp
.text:00410740
.text:00410740 ; ---------------------------------------------------------------------------
.text:00410746                 align 10h
.text:00410750
.text:00410750 ; =============== S U B R O U T I N E =======================================
.text:00410750
.text:00410750 ; Attributes: thunk
.text:00410750
.text:00410750 ; char *__cdecl strchr(const char *Str, int Val)
.text:00410750 strchr          proc near               ; CODE XREF: sub_402630+5B↑p
.text:00410750                                         ; sub_4054B0+469↑p ...
.text:00410750
.text:00410750 Str             = dword ptr  4
.text:00410750 Val             = dword ptr  8
.text:00410750
.text:00410750                 jmp     ds:__imp_strchr
.text:00410750 strchr          endp
.text:00410750
.text:00410750 ; ---------------------------------------------------------------------------
.text:00410756                 align 10h
.text:00410760
.text:00410760 ; =============== S U B R O U T I N E =======================================
.text:00410760
.text:00410760 ; Attributes: thunk
.text:00410760
.text:00410760 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00410760 _flsbuf         proc near               ; CODE XREF: sub_402390+27C↑j
.text:00410760                                         ; sub_402630+146↑p ...
.text:00410760
.text:00410760 File            = dword ptr  8
.text:00410760
.text:00410760                 jmp     ds:__imp__flsbuf
.text:00410760 _flsbuf         endp
.text:00410760
.text:00410760 ; ---------------------------------------------------------------------------
.text:00410766                 align 10h
.text:00410770
.text:00410770 ; =============== S U B R O U T I N E =======================================
.text:00410770
.text:00410770 ; Attributes: thunk
.text:00410770
.text:00410770 ; __time32_t __cdecl mktime(struct tm *const Tm)
.text:00410770 mktime          proc near               ; CODE XREF: sub_403090+188B↑p
.text:00410770                                         ; sub_403090+1BDF↑p
.text:00410770
.text:00410770 Tm              = dword ptr  4
.text:00410770
.text:00410770                 jmp     ds:__imp_mktime
.text:00410770 mktime          endp
.text:00410770
.text:00410770 ; ---------------------------------------------------------------------------
.text:00410776                 align 10h
.text:00410780
.text:00410780 ; =============== S U B R O U T I N E =======================================
.text:00410780
.text:00410780 ; Attributes: thunk
.text:00410780
.text:00410780 ; size_t __cdecl strftime(char *Buffer, size_t SizeInBytes, const char *Format, const struct tm *Tm)
.text:00410780 strftime        proc near               ; CODE XREF: sub_403090+78E↑p
.text:00410780
.text:00410780 Buffer          = dword ptr  4
.text:00410780 SizeInBytes     = dword ptr  8
.text:00410780 Format          = dword ptr  0Ch
.text:00410780 Tm              = dword ptr  10h
.text:00410780
.text:00410780                 jmp     ds:__imp_strftime
.text:00410780 strftime        endp
.text:00410780
.text:00410780 ; ---------------------------------------------------------------------------
.text:00410786                 align 10h
.text:00410790
.text:00410790 ; =============== S U B R O U T I N E =======================================
.text:00410790
.text:00410790 ; Attributes: thunk
.text:00410790
.text:00410790 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00410790 memset          proc near               ; CODE XREF: sub_403090+209↑p
.text:00410790                                         ; sub_403090:loc_40360A↑p ...
.text:00410790
.text:00410790 Val             = dword ptr  8
.text:00410790 Size            = dword ptr  0Ch
.text:00410790
.text:00410790                 jmp     ds:__imp_memset
.text:00410790 memset          endp
.text:00410790
.text:00410790 ; ---------------------------------------------------------------------------
.text:00410796                 align 10h
.text:004107A0
.text:004107A0 ; =============== S U B R O U T I N E =======================================
.text:004107A0
.text:004107A0 ; Attributes: thunk
.text:004107A0
.text:004107A0 ; int __cdecl toupper(int C)
.text:004107A0 toupper         proc near               ; CODE XREF: sub_403090+6B0↑p
.text:004107A0                                         ; sub_403090+8F6↑p ...
.text:004107A0
.text:004107A0 C               = dword ptr  4
.text:004107A0
.text:004107A0                 jmp     ds:__imp_toupper
.text:004107A0 toupper         endp
.text:004107A0
.text:004107A0 ; ---------------------------------------------------------------------------
.text:004107A6                 align 10h
.text:004107B0
.text:004107B0 ; =============== S U B R O U T I N E =======================================
.text:004107B0
.text:004107B0 ; Attributes: thunk
.text:004107B0
.text:004107B0 ; int __cdecl tolower(int C)
.text:004107B0 tolower         proc near               ; CODE XREF: sub_403090+87F↑p
.text:004107B0                                         ; sub_403090+123D↑p
.text:004107B0
.text:004107B0 C               = dword ptr  4
.text:004107B0
.text:004107B0                 jmp     ds:__imp_tolower
.text:004107B0 tolower         endp
.text:004107B0
.text:004107B0 ; ---------------------------------------------------------------------------
.text:004107B6                 align 10h
.text:004107C0
.text:004107C0 ; =============== S U B R O U T I N E =======================================
.text:004107C0
.text:004107C0 ; Attributes: thunk
.text:004107C0
.text:004107C0 ; int __cdecl isctype(int C, int Type)
.text:004107C0 _isctype        proc near               ; CODE XREF: sub_403090+67A↑p
.text:004107C0                                         ; sub_403090+842↑p ...
.text:004107C0
.text:004107C0 C               = dword ptr  4
.text:004107C0 Type            = dword ptr  8
.text:004107C0
.text:004107C0                 jmp     ds:__imp__isctype
.text:004107C0 _isctype        endp
.text:004107C0
.text:004107C0 ; ---------------------------------------------------------------------------
.text:004107C6                 align 10h
.text:004107D0
.text:004107D0 ; =============== S U B R O U T I N E =======================================
.text:004107D0
.text:004107D0 ; Attributes: thunk
.text:004107D0
.text:004107D0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:004107D0 strncmp         proc near               ; CODE XREF: sub_4054B0+23F↑p
.text:004107D0                                         ; sub_4054B0+699↑p
.text:004107D0
.text:004107D0 Str1            = dword ptr  4
.text:004107D0 Str2            = dword ptr  8
.text:004107D0 MaxCount        = dword ptr  0Ch
.text:004107D0
.text:004107D0                 jmp     ds:__imp_strncmp
.text:004107D0 strncmp         endp
.text:004107D0
.text:004107D0 ; ---------------------------------------------------------------------------
.text:004107D6                 align 10h
.text:004107E0
.text:004107E0 ; =============== S U B R O U T I N E =======================================
.text:004107E0
.text:004107E0 ; Attributes: thunk
.text:004107E0
.text:004107E0 ; char *__cdecl getenv(const char *VarName)
.text:004107E0 getenv          proc near               ; CODE XREF: sub_4054B0+B57↑p
.text:004107E0                                         ; sub_4094A0+3EE↑p ...
.text:004107E0
.text:004107E0 VarName         = dword ptr  4
.text:004107E0
.text:004107E0                 jmp     ds:__imp_getenv
.text:004107E0 getenv          endp
.text:004107E0
.text:004107E0 ; ---------------------------------------------------------------------------
.text:004107E6                 align 10h
.text:004107F0
.text:004107F0 ; =============== S U B R O U T I N E =======================================
.text:004107F0
.text:004107F0 ; Attributes: thunk
.text:004107F0
.text:004107F0 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:004107F0 vfprintf        proc near               ; CODE XREF: sub_406570+C1↑p
.text:004107F0                                         ; sub_4083D0+49↑p ...
.text:004107F0
.text:004107F0 Stream          = dword ptr  4
.text:004107F0 Format          = dword ptr  8
.text:004107F0 ArgList         = dword ptr  0Ch
.text:004107F0
.text:004107F0                 jmp     ds:__imp_vfprintf
.text:004107F0 vfprintf        endp
.text:004107F0
.text:004107F0 ; ---------------------------------------------------------------------------
.text:004107F6                 align 10h
.text:00410800
.text:00410800 ; =============== S U B R O U T I N E =======================================
.text:00410800
.text:00410800 ; Attributes: noreturn thunk
.text:00410800
.text:00410800 ; void __cdecl __noreturn abort()
.text:00410800 abort           proc near               ; CODE XREF: sub_406570:loc_40660C↑p
.text:00410800                                         ; sub_408150:loc_40830A↑p ...
.text:00410800                 jmp     ds:__imp_abort
.text:00410800 abort           endp
.text:00410800
.text:00410800 ; ---------------------------------------------------------------------------
.text:00410806                 align 10h
.text:00410810
.text:00410810 ; =============== S U B R O U T I N E =======================================
.text:00410810
.text:00410810 ; Attributes: thunk
.text:00410810
.text:00410810 ; int __cdecl fclose(FILE *Stream)
.text:00410810 fclose          proc near               ; CODE XREF: sub_4068F0+27↑p
.text:00410810                                         ; .text:0040DC2E↑p
.text:00410810
.text:00410810 Stream          = dword ptr  4
.text:00410810
.text:00410810                 jmp     ds:__imp_fclose
.text:00410810 fclose          endp
.text:00410810
.text:00410810 ; ---------------------------------------------------------------------------
.text:00410816                 align 10h
.text:00410820
.text:00410820 ; =============== S U B R O U T I N E =======================================
.text:00410820
.text:00410820 ; Attributes: thunk
.text:00410820
.text:00410820 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00410820 calloc          proc near               ; CODE XREF: .text:00406B73↑p
.text:00410820                                         ; sub_40BE20+AC↑p
.text:00410820
.text:00410820 Count           = dword ptr  4
.text:00410820 Size            = dword ptr  8
.text:00410820
.text:00410820                 jmp     ds:__imp_calloc
.text:00410820 calloc          endp
.text:00410820
.text:00410820 ; ---------------------------------------------------------------------------
.text:00410826                 align 10h
.text:00410830
.text:00410830 ; =============== S U B R O U T I N E =======================================
.text:00410830
.text:00410830 ; Attributes: thunk
.text:00410830
.text:00410830 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00410830 realloc         proc near               ; CODE XREF: .text:00406A70↑p
.text:00410830                                         ; sub_406AA0+16↑p ...
.text:00410830
.text:00410830 Block           = dword ptr  4
.text:00410830 Size            = dword ptr  8
.text:00410830
.text:00410830                 jmp     ds:__imp_realloc
.text:00410830 realloc         endp
.text:00410830
.text:00410830 ; ---------------------------------------------------------------------------
.text:00410836                 align 10h
.text:00410840
.text:00410840 ; =============== S U B R O U T I N E =======================================
.text:00410840
.text:00410840 ; Attributes: thunk
.text:00410840
.text:00410840 ; void *__cdecl malloc(size_t Size)
.text:00410840 malloc          proc near               ; CODE XREF: .text:004069F4↑p
.text:00410840                                         ; sub_406A10+E↑p ...
.text:00410840
.text:00410840 Size            = dword ptr  4
.text:00410840
.text:00410840                 jmp     ds:__imp_malloc
.text:00410840 malloc          endp
.text:00410840
.text:00410840 ; ---------------------------------------------------------------------------
.text:00410846                 align 10h
.text:00410850
.text:00410850 ; =============== S U B R O U T I N E =======================================
.text:00410850
.text:00410850 ; Attributes: thunk
.text:00410850
.text:00410850 ; struct tm *__cdecl gmtime(const __time32_t *const Time)
.text:00410850 gmtime          proc near               ; CODE XREF: sub_406EC0+12↑p
.text:00410850
.text:00410850 Time            = dword ptr  4
.text:00410850
.text:00410850                 jmp     ds:__imp_gmtime
.text:00410850 gmtime          endp
.text:00410850
.text:00410850 ; ---------------------------------------------------------------------------
.text:00410856                 align 10h
.text:00410860
.text:00410860 ; =============== S U B R O U T I N E =======================================
.text:00410860
.text:00410860 ; Attributes: thunk
.text:00410860
.text:00410860 ; char *__cdecl ctime(const __time32_t *const Time)
.text:00410860 ctime           proc near               ; CODE XREF: .text:00406E9A↑p
.text:00410860
.text:00410860 Time            = dword ptr  4
.text:00410860
.text:00410860                 jmp     ds:__imp_ctime
.text:00410860 ctime           endp
.text:00410860
.text:00410860 ; ---------------------------------------------------------------------------
.text:00410866                 align 10h
.text:00410870
.text:00410870 ; =============== S U B R O U T I N E =======================================
.text:00410870
.text:00410870 ; Attributes: thunk
.text:00410870
.text:00410870 ; char *__cdecl asctime(const struct tm *Tm)
.text:00410870 asctime         proc near               ; CODE XREF: .text:00406E6A↑p
.text:00410870
.text:00410870 Tm              = dword ptr  4
.text:00410870
.text:00410870                 jmp     ds:__imp_asctime
.text:00410870 asctime         endp
.text:00410870
.text:00410870 ; ---------------------------------------------------------------------------
.text:00410876                 align 10h
.text:00410880
.text:00410880 ; =============== S U B R O U T I N E =======================================
.text:00410880
.text:00410880 ; Attributes: thunk
.text:00410880
.text:00410880 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:00410880 strcpy          proc near               ; CODE XREF: .text:00406E80↑p
.text:00410880                                         ; .text:00406EB0↑p ...
.text:00410880
.text:00410880 Destination     = dword ptr  4
.text:00410880 Source          = dword ptr  8
.text:00410880
.text:00410880                 jmp     ds:__imp_strcpy
.text:00410880 strcpy          endp
.text:00410880
.text:00410880 ; ---------------------------------------------------------------------------
.text:00410886                 align 10h
.text:00410890
.text:00410890 ; =============== S U B R O U T I N E =======================================
.text:00410890
.text:00410890 ; Attributes: thunk
.text:00410890
.text:00410890 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00410890 iswctype        proc near               ; CODE XREF: sub_407010+78B↑p
.text:00410890
.text:00410890 C               = word ptr  4
.text:00410890 Type            = word ptr  8
.text:00410890
.text:00410890                 jmp     ds:__imp_iswctype
.text:00410890 iswctype        endp
.text:00410890
.text:00410890 ; ---------------------------------------------------------------------------
.text:00410896                 align 10h
.text:004108A0
.text:004108A0 ; =============== S U B R O U T I N E =======================================
.text:004108A0
.text:004108A0 ; Attributes: thunk
.text:004108A0
.text:004108A0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:004108A0 strcmp          proc near               ; CODE XREF: sub_4084D4+180↑p
.text:004108A0                                         ; .text:0040D02B↑p
.text:004108A0
.text:004108A0 Str1            = dword ptr  4
.text:004108A0 Str2            = dword ptr  8
.text:004108A0
.text:004108A0                 jmp     ds:__imp_strcmp
.text:004108A0 strcmp          endp
.text:004108A0
.text:004108A0 ; ---------------------------------------------------------------------------
.text:004108A6                 align 10h
.text:004108B0
.text:004108B0 ; =============== S U B R O U T I N E =======================================
.text:004108B0
.text:004108B0 ; Attributes: thunk
.text:004108B0
.text:004108B0 ; int __cdecl fflush(FILE *Stream)
.text:004108B0 fflush          proc near               ; CODE XREF: sub_4083D0+19↑p
.text:004108B0                                         ; sub_4083D0+81↑p ...
.text:004108B0
.text:004108B0 Stream          = dword ptr  4
.text:004108B0
.text:004108B0                 jmp     ds:__imp_fflush
.text:004108B0 fflush          endp
.text:004108B0
.text:004108B0 ; ---------------------------------------------------------------------------
.text:004108B6                 align 10h
.text:004108C0
.text:004108C0 ; =============== S U B R O U T I N E =======================================
.text:004108C0
.text:004108C0 ; Attributes: thunk
.text:004108C0
.text:004108C0 ; char *__cdecl strerror(int ErrorMessage)
.text:004108C0 strerror        proc near               ; CODE XREF: sub_4083D0+A5↑p
.text:004108C0                                         ; sub_4084D4+10F↑p
.text:004108C0
.text:004108C0 ErrorMessage    = dword ptr  4
.text:004108C0
.text:004108C0                 jmp     ds:__imp_strerror
.text:004108C0 strerror        endp
.text:004108C0
.text:004108C0 ; ---------------------------------------------------------------------------
.text:004108C6                 align 10h
.text:004108D0
.text:004108D0 ; =============== S U B R O U T I N E =======================================
.text:004108D0
.text:004108D0 ; Attributes: thunk
.text:004108D0
.text:004108D0 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:004108D0 strrchr         proc near               ; CODE XREF: sub_408870+49↑p
.text:004108D0                                         ; sub_4094A0+CB↑p ...
.text:004108D0
.text:004108D0 Str             = dword ptr  4
.text:004108D0
.text:004108D0                 jmp     ds:__imp_strrchr
.text:004108D0 strrchr         endp
.text:004108D0
.text:004108D0 ; ---------------------------------------------------------------------------
.text:004108D6                 align 10h
.text:004108E0
.text:004108E0 ; =============== S U B R O U T I N E =======================================
.text:004108E0
.text:004108E0 ; Attributes: thunk
.text:004108E0
.text:004108E0 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:004108E0 strncpy         proc near               ; CODE XREF: sub_408A90+130↑p
.text:004108E0                                         ; sub_408A90+15C↑p ...
.text:004108E0
.text:004108E0 Destination     = dword ptr  4
.text:004108E0 Source          = dword ptr  8
.text:004108E0 Count           = dword ptr  0Ch
.text:004108E0
.text:004108E0                 jmp     ds:__imp_strncpy
.text:004108E0 strncpy         endp
.text:004108E0
.text:004108E0 ; ---------------------------------------------------------------------------
.text:004108E6                 align 10h
.text:004108F0
.text:004108F0 ; =============== S U B R O U T I N E =======================================
.text:004108F0
.text:004108F0 ; Attributes: thunk
.text:004108F0
.text:004108F0 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:004108F0 strstr          proc near               ; CODE XREF: sub_4094A0+3BF↑p
.text:004108F0                                         ; sub_4094A0+3DC↑p ...
.text:004108F0
.text:004108F0 Str             = dword ptr  4
.text:004108F0 SubStr          = dword ptr  8
.text:004108F0
.text:004108F0                 jmp     ds:__imp_strstr
.text:004108F0 strstr          endp
.text:004108F0
.text:004108F0 ; ---------------------------------------------------------------------------
.text:004108F6                 align 10h
.text:00410900
.text:00410900 ; =============== S U B R O U T I N E =======================================
.text:00410900
.text:00410900 ; Attributes: thunk
.text:00410900
.text:00410900 ; int __cdecl isalpha(int C)
.text:00410900 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:00410900
.text:00410900 C               = dword ptr  4
.text:00410900
.text:00410900                 jmp     ds:__imp_isalpha
.text:00410900 isalpha         endp
.text:00410900
.text:00410900 ; ---------------------------------------------------------------------------
.text:00410906                 align 10h
.text:00410910
.text:00410910 ; =============== S U B R O U T I N E =======================================
.text:00410910
.text:00410910 ; Attributes: thunk
.text:00410910
.text:00410910 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:00410910 _stricmp_0      proc near               ; CODE XREF: .text:0040AEC4↑p
.text:00410910
.text:00410910 String1         = dword ptr  4
.text:00410910 String2         = dword ptr  8
.text:00410910
.text:00410910                 jmp     ds:__imp__stricmp_0
.text:00410910 _stricmp_0      endp
.text:00410910
.text:00410910 ; ---------------------------------------------------------------------------
.text:00410916                 align 10h
.text:00410920
.text:00410920 ; =============== S U B R O U T I N E =======================================
.text:00410920
.text:00410920 ; Attributes: thunk
.text:00410920
.text:00410920 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:00410920 sprintf         proc near               ; CODE XREF: .text:0040C48A↑p
.text:00410920                                         ; .text:0040C4AB↑p ...
.text:00410920
.text:00410920 Buffer          = dword ptr  4
.text:00410920 Format          = dword ptr  8
.text:00410920
.text:00410920                 jmp     ds:__imp_sprintf
.text:00410920 sprintf         endp
.text:00410920
.text:00410920 ; ---------------------------------------------------------------------------
.text:00410926                 align 10h
.text:00410930
.text:00410930 ; =============== S U B R O U T I N E =======================================
.text:00410930
.text:00410930 ; Attributes: thunk
.text:00410930
.text:00410930 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:00410930 sscanf          proc near               ; CODE XREF: .text:0040D26E↑p
.text:00410930
.text:00410930 Buffer          = dword ptr  4
.text:00410930 Format          = dword ptr  8
.text:00410930
.text:00410930                 jmp     ds:__imp_sscanf
.text:00410930 sscanf          endp
.text:00410930
.text:00410930 ; ---------------------------------------------------------------------------
.text:00410936                 align 10h
.text:00410940
.text:00410940 ; =============== S U B R O U T I N E =======================================
.text:00410940
.text:00410940 ; Attributes: thunk
.text:00410940
.text:00410940 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:00410940 fopen           proc near               ; CODE XREF: sub_40DB6F+26↑p
.text:00410940                                         ; sub_40DB6F+99↑p
.text:00410940
.text:00410940 FileName        = dword ptr  4
.text:00410940 Mode            = dword ptr  8
.text:00410940
.text:00410940                 jmp     ds:__imp_fopen
.text:00410940 fopen           endp
.text:00410940
.text:00410940 ; ---------------------------------------------------------------------------
.text:00410946                 align 10h
.text:00410950
.text:00410950 ; =============== S U B R O U T I N E =======================================
.text:00410950
.text:00410950 ; Attributes: thunk
.text:00410950
.text:00410950 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:00410950 _get_osfhandle  proc near               ; CODE XREF: sub_40DD20+3A↑p
.text:00410950                                         ; sub_40DE00+15↑p
.text:00410950
.text:00410950 FileHandle      = dword ptr  4
.text:00410950
.text:00410950                 jmp     ds:__imp__get_osfhandle
.text:00410950 _get_osfhandle  endp
.text:00410950
.text:00410950 ; ---------------------------------------------------------------------------
.text:00410956                 align 10h
.text:00410960
.text:00410960 ; =============== S U B R O U T I N E =======================================
.text:00410960
.text:00410960 ; Attributes: thunk
.text:00410960
.text:00410960 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:00410960 _filelengthi64  proc near               ; CODE XREF: sub_40DE00+1F↑p
.text:00410960
.text:00410960 FileHandle      = dword ptr  4
.text:00410960
.text:00410960                 jmp     ds:__imp__filelengthi64
.text:00410960 _filelengthi64  endp
.text:00410960
.text:00410960 ; ---------------------------------------------------------------------------
.text:00410966                 align 10h
.text:00410970
.text:00410970 ; =============== S U B R O U T I N E =======================================
.text:00410970
.text:00410970 ; Attributes: thunk
.text:00410970
.text:00410970 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:00410970 strpbrk         proc near               ; CODE XREF: sub_40DE60+87↑p
.text:00410970
.text:00410970 Str             = dword ptr  4
.text:00410970 Control         = dword ptr  8
.text:00410970
.text:00410970                 jmp     ds:__imp_strpbrk
.text:00410970 strpbrk         endp
.text:00410970
.text:00410970 ; ---------------------------------------------------------------------------
.text:00410976                 align 10h
.text:00410980
.text:00410980 ; =============== S U B R O U T I N E =======================================
.text:00410980
.text:00410980 ; Attributes: thunk
.text:00410980
.text:00410980 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:00410980 _fdopen         proc near               ; CODE XREF: sub_40DF00+69↑p
.text:00410980
.text:00410980 FileHandle      = dword ptr  4
.text:00410980 Format          = dword ptr  8
.text:00410980
.text:00410980                 jmp     ds:__imp__fdopen
.text:00410980 _fdopen         endp
.text:00410980
.text:00410980 ; ---------------------------------------------------------------------------
.text:00410986                 align 10h
.text:00410990
.text:00410990 ; =============== S U B R O U T I N E =======================================
.text:00410990
.text:00410990 ; Attributes: thunk
.text:00410990
.text:00410990 ; int __cdecl close(int FileHandle)
.text:00410990 _close          proc near               ; CODE XREF: sub_40DF00+90↑p
.text:00410990
.text:00410990 FileHandle      = dword ptr  4
.text:00410990
.text:00410990                 jmp     ds:__imp__close
.text:00410990 _close          endp
.text:00410990
.text:00410990 ; ---------------------------------------------------------------------------
.text:00410996                 align 10h
.text:004109A0
.text:004109A0 ; =============== S U B R O U T I N E =======================================
.text:004109A0
.text:004109A0 ; Attributes: thunk
.text:004109A0
.text:004109A0 ; int open(const char *FileName, int OpenFlag, ...)
.text:004109A0 _open           proc near               ; CODE XREF: sub_40E350:loc_40E6E0↑p
.text:004109A0
.text:004109A0 FileName        = dword ptr  4
.text:004109A0 OpenFlag        = dword ptr  8
.text:004109A0
.text:004109A0                 jmp     ds:__imp__open
.text:004109A0 _open           endp
.text:004109A0
.text:004109A0 ; ---------------------------------------------------------------------------
.text:004109A6                 align 10h
.text:004109B0
.text:004109B0 ; =============== S U B R O U T I N E =======================================
.text:004109B0
.text:004109B0 ; Attributes: noreturn thunk
.text:004109B0
.text:004109B0 _assert         proc near               ; CODE XREF: sub_40E350+414↑p
.text:004109B0                 jmp     ds:__imp__assert
.text:004109B0 _assert         endp
.text:004109B0
.text:004109B0 ; ---------------------------------------------------------------------------
.text:004109B6                 align 10h
.text:004109C0
.text:004109C0 ; =============== S U B R O U T I N E =======================================
.text:004109C0
.text:004109C0 ; Attributes: thunk
.text:004109C0
.text:004109C0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:004109C0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:004109C0
.text:004109C0 lpTopLevelExceptionFilter= dword ptr  4
.text:004109C0
.text:004109C0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:004109C0 SetUnhandledExceptionFilter endp
.text:004109C0
.text:004109C0 ; ---------------------------------------------------------------------------
.text:004109C6                 align 10h
.text:004109D0
.text:004109D0 ; =============== S U B R O U T I N E =======================================
.text:004109D0
.text:004109D0 ; Attributes: noreturn thunk
.text:004109D0
.text:004109D0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:004109D0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:004109D0
.text:004109D0 uExitCode       = dword ptr  4
.text:004109D0
.text:004109D0                 jmp     ds:__imp_ExitProcess
.text:004109D0 ExitProcess     endp
.text:004109D0
.text:004109D0 ; ---------------------------------------------------------------------------
.text:004109D6                 align 10h
.text:004109E0
.text:004109E0 ; =============== S U B R O U T I N E =======================================
.text:004109E0
.text:004109E0 ; Attributes: thunk
.text:004109E0
.text:004109E0 ; BOOL __stdcall AreFileApisANSI()
.text:004109E0 AreFileApisANSI proc near               ; CODE XREF: sub_4086F0+89↑p
.text:004109E0                 jmp     ds:__imp_AreFileApisANSI
.text:004109E0 AreFileApisANSI endp
.text:004109E0
.text:004109E0 ; ---------------------------------------------------------------------------
.text:004109E6                 align 10h
.text:004109F0
.text:004109F0 ; =============== S U B R O U T I N E =======================================
.text:004109F0
.text:004109F0 ; Attributes: thunk
.text:004109F0
.text:004109F0 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:004109F0 MultiByteToWideChar proc near           ; CODE XREF: sub_4086F0+BD↑p
.text:004109F0
.text:004109F0 CodePage        = dword ptr  4
.text:004109F0 dwFlags         = dword ptr  8
.text:004109F0 lpMultiByteStr  = dword ptr  0Ch
.text:004109F0 cbMultiByte     = dword ptr  10h
.text:004109F0 lpWideCharStr   = dword ptr  14h
.text:004109F0 cchWideChar     = dword ptr  18h
.text:004109F0
.text:004109F0                 jmp     ds:__imp_MultiByteToWideChar
.text:004109F0 MultiByteToWideChar endp
.text:004109F0
.text:004109F0 ; ---------------------------------------------------------------------------
.text:004109F6                 align 10h
.text:00410A00
.text:00410A00 ; =============== S U B R O U T I N E =======================================
.text:00410A00
.text:00410A00 ; Attributes: thunk
.text:00410A00
.text:00410A00 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:00410A00 lstrcpyA        proc near               ; CODE XREF: sub_4086F0+128↑p
.text:00410A00
.text:00410A00 lpString1       = dword ptr  4
.text:00410A00 lpString2       = dword ptr  8
.text:00410A00
.text:00410A00                 jmp     ds:__imp_lstrcpyA
.text:00410A00 lstrcpyA        endp
.text:00410A00
.text:00410A00 ; ---------------------------------------------------------------------------
.text:00410A06                 align 10h
.text:00410A10
.text:00410A10 ; =============== S U B R O U T I N E =======================================
.text:00410A10
.text:00410A10 ; Attributes: thunk
.text:00410A10
.text:00410A10 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:00410A10 SetErrorMode    proc near               ; CODE XREF: sub_408870+80↑p
.text:00410A10                                         ; sub_408870+A9↑p ...
.text:00410A10
.text:00410A10 uMode           = dword ptr  4
.text:00410A10
.text:00410A10                 jmp     ds:__imp_SetErrorMode
.text:00410A10 SetErrorMode    endp
.text:00410A10
.text:00410A10 ; ---------------------------------------------------------------------------
.text:00410A16                 align 10h
.text:00410A20
.text:00410A20 ; =============== S U B R O U T I N E =======================================
.text:00410A20
.text:00410A20 ; Attributes: thunk
.text:00410A20
.text:00410A20 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:00410A20 GetModuleHandleA proc near              ; CODE XREF: sub_408CE0+18↑p
.text:00410A20                                         ; sub_4094A0+329↑p ...
.text:00410A20
.text:00410A20 lpModuleName    = dword ptr  4
.text:00410A20
.text:00410A20                 jmp     ds:__imp_GetModuleHandleA
.text:00410A20 GetModuleHandleA endp
.text:00410A20
.text:00410A20 ; ---------------------------------------------------------------------------
.text:00410A26                 align 10h
.text:00410A30
.text:00410A30 ; =============== S U B R O U T I N E =======================================
.text:00410A30
.text:00410A30 ; Attributes: thunk
.text:00410A30
.text:00410A30 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:00410A30 GetProcAddress  proc near               ; CODE XREF: sub_408CE0+33↑p
.text:00410A30                                         ; sub_408E50+2E↑p ...
.text:00410A30
.text:00410A30 hModule         = dword ptr  4
.text:00410A30 lpProcName      = dword ptr  8
.text:00410A30
.text:00410A30                 jmp     ds:__imp_GetProcAddress
.text:00410A30 GetProcAddress  endp
.text:00410A30
.text:00410A30 ; ---------------------------------------------------------------------------
.text:00410A36                 align 10h
.text:00410A40
.text:00410A40 ; =============== S U B R O U T I N E =======================================
.text:00410A40
.text:00410A40 ; Attributes: thunk
.text:00410A40
.text:00410A40 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:00410A40 GetFileAttributesA proc near            ; CODE XREF: sub_408CE0+47↑p
.text:00410A40                                         ; sub_40BD40+62↑p
.text:00410A40
.text:00410A40 lpFileName      = dword ptr  4
.text:00410A40
.text:00410A40                 jmp     ds:__imp_GetFileAttributesA
.text:00410A40 GetFileAttributesA endp
.text:00410A40
.text:00410A40 ; ---------------------------------------------------------------------------
.text:00410A46                 align 10h
.text:00410A50
.text:00410A50 ; =============== S U B R O U T I N E =======================================
.text:00410A50
.text:00410A50 ; Attributes: thunk
.text:00410A50
.text:00410A50 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:00410A50 FreeLibrary     proc near               ; CODE XREF: sub_408CE0+A4↑p
.text:00410A50                                         ; sub_408E50+11D↑p ...
.text:00410A50
.text:00410A50 hLibModule      = dword ptr  4
.text:00410A50
.text:00410A50                 jmp     ds:__imp_FreeLibrary
.text:00410A50 FreeLibrary     endp
.text:00410A50
.text:00410A50 ; ---------------------------------------------------------------------------
.text:00410A56                 align 10h
.text:00410A60
.text:00410A60 ; =============== S U B R O U T I N E =======================================
.text:00410A60
.text:00410A60 ; Attributes: thunk
.text:00410A60
.text:00410A60 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:00410A60 FindFirstFileA  proc near               ; CODE XREF: sub_408CE0+CE↑p
.text:00410A60                                         ; sub_408E50+14F↑p ...
.text:00410A60
.text:00410A60 lpFileName      = dword ptr  4
.text:00410A60 lpFindFileData  = dword ptr  8
.text:00410A60
.text:00410A60                 jmp     ds:__imp_FindFirstFileA
.text:00410A60 FindFirstFileA  endp
.text:00410A60
.text:00410A60 ; ---------------------------------------------------------------------------
.text:00410A66                 align 10h
.text:00410A70
.text:00410A70 ; =============== S U B R O U T I N E =======================================
.text:00410A70
.text:00410A70 ; Attributes: thunk
.text:00410A70
.text:00410A70 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:00410A70 FindClose       proc near               ; CODE XREF: sub_408CE0+123↑p
.text:00410A70                                         ; sub_408E50+10E↑p ...
.text:00410A70
.text:00410A70 hFindFile       = dword ptr  4
.text:00410A70
.text:00410A70                 jmp     ds:__imp_FindClose
.text:00410A70 FindClose       endp
.text:00410A70
.text:00410A70 ; ---------------------------------------------------------------------------
.text:00410A76                 align 10h
.text:00410A80
.text:00410A80 ; =============== S U B R O U T I N E =======================================
.text:00410A80
.text:00410A80 ; Attributes: thunk
.text:00410A80
.text:00410A80 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:00410A80 LoadLibraryA    proc near               ; CODE XREF: sub_408E50+13↑p
.text:00410A80                                         ; sub_4094A0+134↑p ...
.text:00410A80
.text:00410A80 lpLibFileName   = dword ptr  4
.text:00410A80
.text:00410A80                 jmp     ds:__imp_LoadLibraryA
.text:00410A80 LoadLibraryA    endp
.text:00410A80
.text:00410A80 ; ---------------------------------------------------------------------------
.text:00410A86                 align 10h
.text:00410A90
.text:00410A90 ; =============== S U B R O U T I N E =======================================
.text:00410A90
.text:00410A90 ; Attributes: thunk
.text:00410A90
.text:00410A90 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:00410A90 FindNextFileA   proc near               ; CODE XREF: sub_408E50+FF↑p
.text:00410A90
.text:00410A90 hFindFile       = dword ptr  4
.text:00410A90 lpFindFileData  = dword ptr  8
.text:00410A90
.text:00410A90                 jmp     ds:__imp_FindNextFileA
.text:00410A90 FindNextFileA   endp
.text:00410A90
.text:00410A90 ; ---------------------------------------------------------------------------
.text:00410A96                 align 10h
.text:00410AA0
.text:00410AA0 ; =============== S U B R O U T I N E =======================================
.text:00410AA0
.text:00410AA0 ; Attributes: thunk
.text:00410AA0
.text:00410AA0 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:00410AA0 GetFileType     proc near               ; CODE XREF: sub_408FD0+43↑p
.text:00410AA0                                         ; .text:00409C8A↑p
.text:00410AA0
.text:00410AA0 hFile           = dword ptr  4
.text:00410AA0
.text:00410AA0                 jmp     ds:__imp_GetFileType
.text:00410AA0 GetFileType     endp
.text:00410AA0
.text:00410AA0 ; ---------------------------------------------------------------------------
.text:00410AA6                 align 10h
.text:00410AB0
.text:00410AB0 ; =============== S U B R O U T I N E =======================================
.text:00410AB0
.text:00410AB0 ; Attributes: thunk
.text:00410AB0
.text:00410AB0 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:00410AB0 GetFileInformationByHandle proc near    ; CODE XREF: sub_408FD0+69↑p
.text:00410AB0
.text:00410AB0 hFile           = dword ptr  4
.text:00410AB0 lpFileInformation= dword ptr  8
.text:00410AB0
.text:00410AB0                 jmp     ds:__imp_GetFileInformationByHandle
.text:00410AB0 GetFileInformationByHandle endp
.text:00410AB0
.text:00410AB0 ; ---------------------------------------------------------------------------
.text:00410AB6                 align 10h
.text:00410AC0
.text:00410AC0 ; =============== S U B R O U T I N E =======================================
.text:00410AC0
.text:00410AC0 ; Attributes: thunk
.text:00410AC0
.text:00410AC0 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:00410AC0 GetFileSize     proc near               ; CODE XREF: sub_408FD0+3F2↑p
.text:00410AC0
.text:00410AC0 hFile           = dword ptr  4
.text:00410AC0 lpFileSizeHigh  = dword ptr  8
.text:00410AC0
.text:00410AC0                 jmp     ds:__imp_GetFileSize
.text:00410AC0 GetFileSize     endp
.text:00410AC0
.text:00410AC0 ; ---------------------------------------------------------------------------
.text:00410AC6                 align 10h
.text:00410AD0
.text:00410AD0 ; =============== S U B R O U T I N E =======================================
.text:00410AD0
.text:00410AD0 ; Attributes: thunk
.text:00410AD0
.text:00410AD0 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:00410AD0 PeekNamedPipe   proc near               ; CODE XREF: sub_408FD0+439↑p
.text:00410AD0
.text:00410AD0 hNamedPipe      = dword ptr  4
.text:00410AD0 lpBuffer        = dword ptr  8
.text:00410AD0 nBufferSize     = dword ptr  0Ch
.text:00410AD0 lpBytesRead     = dword ptr  10h
.text:00410AD0 lpTotalBytesAvail= dword ptr  14h
.text:00410AD0 lpBytesLeftThisMessage= dword ptr  18h
.text:00410AD0
.text:00410AD0                 jmp     ds:__imp_PeekNamedPipe
.text:00410AD0 PeekNamedPipe   endp
.text:00410AD0
.text:00410AD0 ; ---------------------------------------------------------------------------
.text:00410AD6                 align 10h
.text:00410AE0
.text:00410AE0 ; =============== S U B R O U T I N E =======================================
.text:00410AE0
.text:00410AE0 ; Attributes: thunk
.text:00410AE0
.text:00410AE0 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:00410AE0 GetDriveTypeA   proc near               ; CODE XREF: sub_4094A0+4C↑p
.text:00410AE0
.text:00410AE0 lpRootPathName  = dword ptr  4
.text:00410AE0
.text:00410AE0                 jmp     ds:__imp_GetDriveTypeA
.text:00410AE0 GetDriveTypeA   endp
.text:00410AE0
.text:00410AE0 ; ---------------------------------------------------------------------------
.text:00410AE6                 align 10h
.text:00410AF0
.text:00410AF0 ; =============== S U B R O U T I N E =======================================
.text:00410AF0
.text:00410AF0 ; Attributes: thunk
.text:00410AF0
.text:00410AF0 ; DWORD __stdcall GetLastError()
.text:00410AF0 GetLastError    proc near               ; CODE XREF: sub_4094A0:loc_409729↑p
.text:00410AF0                                         ; .text:loc_40A26D↑p ...
.text:00410AF0                 jmp     ds:__imp_GetLastError
.text:00410AF0 GetLastError    endp
.text:00410AF0
.text:00410AF0 ; ---------------------------------------------------------------------------
.text:00410AF6                 align 10h
.text:00410B00
.text:00410B00 ; =============== S U B R O U T I N E =======================================
.text:00410B00
.text:00410B00 ; Attributes: thunk
.text:00410B00
.text:00410B00 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:00410B00 GetVolumeInformationA proc near         ; CODE XREF: sub_4099A0+64↑p
.text:00410B00                                         ; .text:00409F4C↑p ...
.text:00410B00
.text:00410B00 lpRootPathName  = dword ptr  4
.text:00410B00 lpVolumeNameBuffer= dword ptr  8
.text:00410B00 nVolumeNameSize = dword ptr  0Ch
.text:00410B00 lpVolumeSerialNumber= dword ptr  10h
.text:00410B00 lpMaximumComponentLength= dword ptr  14h
.text:00410B00 lpFileSystemFlags= dword ptr  18h
.text:00410B00 lpFileSystemNameBuffer= dword ptr  1Ch
.text:00410B00 nFileSystemNameSize= dword ptr  20h
.text:00410B00
.text:00410B00                 jmp     ds:__imp_GetVolumeInformationA
.text:00410B00 GetVolumeInformationA endp
.text:00410B00
.text:00410B00 ; ---------------------------------------------------------------------------
.text:00410B06                 align 10h
.text:00410B10
.text:00410B10 ; =============== S U B R O U T I N E =======================================
.text:00410B10
.text:00410B10 ; Attributes: thunk
.text:00410B10
.text:00410B10 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:00410B10 CreateFileA     proc near               ; CODE XREF: sub_4086A0+2096↑p
.text:00410B10                                         ; sub_40B330+173↑p ...
.text:00410B10
.text:00410B10 lpFileName      = dword ptr  4
.text:00410B10 dwDesiredAccess = dword ptr  8
.text:00410B10 dwShareMode     = dword ptr  0Ch
.text:00410B10 lpSecurityAttributes= dword ptr  10h
.text:00410B10 dwCreationDisposition= dword ptr  14h
.text:00410B10 dwFlagsAndAttributes= dword ptr  18h
.text:00410B10 hTemplateFile   = dword ptr  1Ch
.text:00410B10
.text:00410B10                 jmp     ds:__imp_CreateFileA
.text:00410B10 CreateFileA     endp
.text:00410B10
.text:00410B10 ; ---------------------------------------------------------------------------
.text:00410B16                 align 10h
.text:00410B20
.text:00410B20 ; =============== S U B R O U T I N E =======================================
.text:00410B20
.text:00410B20 ; Attributes: thunk
.text:00410B20
.text:00410B20 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:00410B20 CloseHandle     proc near               ; CODE XREF: sub_4086A0+20B1↑p
.text:00410B20                                         ; sub_40B330+1E9↑p ...
.text:00410B20
.text:00410B20 hObject         = dword ptr  4
.text:00410B20
.text:00410B20                 jmp     ds:__imp_CloseHandle
.text:00410B20 CloseHandle     endp
.text:00410B20
.text:00410B20 ; ---------------------------------------------------------------------------
.text:00410B26                 align 10h
.text:00410B30
.text:00410B30 ; =============== S U B R O U T I N E =======================================
.text:00410B30
.text:00410B30 ; Attributes: thunk
.text:00410B30
.text:00410B30 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:00410B30 GetModuleFileNameA proc near            ; CODE XREF: sub_40AD40+1C↑p
.text:00410B30
.text:00410B30 hModule         = dword ptr  4
.text:00410B30 lpFilename      = dword ptr  8
.text:00410B30 nSize           = dword ptr  0Ch
.text:00410B30
.text:00410B30                 jmp     ds:__imp_GetModuleFileNameA
.text:00410B30 GetModuleFileNameA endp
.text:00410B30
.text:00410B30 ; ---------------------------------------------------------------------------
.text:00410B36                 align 10h
.text:00410B40
.text:00410B40 ; =============== S U B R O U T I N E =======================================
.text:00410B40
.text:00410B40 ; Attributes: thunk
.text:00410B40
.text:00410B40 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:00410B40 GetShortPathNameA proc near             ; CODE XREF: .text:0040AFC6↑p
.text:00410B40                                         ; .text:0040AFF0↑p
.text:00410B40
.text:00410B40 lpszLongPath    = dword ptr  4
.text:00410B40 lpszShortPath   = dword ptr  8
.text:00410B40 cchBuffer       = dword ptr  0Ch
.text:00410B40
.text:00410B40                 jmp     ds:__imp_GetShortPathNameA
.text:00410B40 GetShortPathNameA endp
.text:00410B40
.text:00410B40 ; ---------------------------------------------------------------------------
.text:00410B46                 align 10h
.text:00410B50
.text:00410B50 ; =============== S U B R O U T I N E =======================================
.text:00410B50
.text:00410B50 ; Attributes: thunk
.text:00410B50
.text:00410B50 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:00410B50 DeviceIoControl proc near               ; CODE XREF: sub_40B330+1DC↑p
.text:00410B50                                         ; sub_40B9E0+D5↑p
.text:00410B50
.text:00410B50 hDevice         = dword ptr  4
.text:00410B50 dwIoControlCode = dword ptr  8
.text:00410B50 lpInBuffer      = dword ptr  0Ch
.text:00410B50 nInBufferSize   = dword ptr  10h
.text:00410B50 lpOutBuffer     = dword ptr  14h
.text:00410B50 nOutBufferSize  = dword ptr  18h
.text:00410B50 lpBytesReturned = dword ptr  1Ch
.text:00410B50 lpOverlapped    = dword ptr  20h
.text:00410B50
.text:00410B50                 jmp     ds:__imp_DeviceIoControl
.text:00410B50 DeviceIoControl endp
.text:00410B50
.text:00410B50 ; ---------------------------------------------------------------------------
.text:00410B56                 align 10h
.text:00410B60
.text:00410B60 ; =============== S U B R O U T I N E =======================================
.text:00410B60
.text:00410B60 ; Attributes: thunk
.text:00410B60
.text:00410B60 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:00410B60 GetDiskFreeSpaceA proc near             ; CODE XREF: sub_40B330+533↑p
.text:00410B60                                         ; sub_40B8D0+7B↑p ...
.text:00410B60
.text:00410B60 lpRootPathName  = dword ptr  4
.text:00410B60 lpSectorsPerCluster= dword ptr  8
.text:00410B60 lpBytesPerSector= dword ptr  0Ch
.text:00410B60 lpNumberOfFreeClusters= dword ptr  10h
.text:00410B60 lpTotalNumberOfClusters= dword ptr  14h
.text:00410B60
.text:00410B60                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:00410B60 GetDiskFreeSpaceA endp
.text:00410B60
.text:00410B60 ; ---------------------------------------------------------------------------
.text:00410B66                 align 10h
.text:00410B70
.text:00410B70 ; =============== S U B R O U T I N E =======================================
.text:00410B70
.text:00410B70 ; Attributes: thunk
.text:00410B70
.text:00410B70 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:00410B70 GetFullPathNameA proc near              ; CODE XREF: sub_40BC10+45↑p
.text:00410B70                                         ; sub_40BC10+ED↑p
.text:00410B70
.text:00410B70 lpFileName      = dword ptr  4
.text:00410B70 nBufferLength   = dword ptr  8
.text:00410B70 lpBuffer        = dword ptr  0Ch
.text:00410B70 lpFilePart      = dword ptr  10h
.text:00410B70
.text:00410B70                 jmp     ds:__imp_GetFullPathNameA
.text:00410B70 GetFullPathNameA endp
.text:00410B70
.text:00410B70 ; ---------------------------------------------------------------------------
.text:00410B76                 align 10h
.text:00410B80
.text:00410B80 ; =============== S U B R O U T I N E =======================================
.text:00410B80
.text:00410B80 ; Attributes: thunk
.text:00410B80
.text:00410B80 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00410B80 GetCurrentDirectoryA proc near          ; CODE XREF: .text:0040C0C8↑p
.text:00410B80                                         ; .text:0040C0E4↑p ...
.text:00410B80
.text:00410B80 nBufferLength   = dword ptr  4
.text:00410B80 lpBuffer        = dword ptr  8
.text:00410B80
.text:00410B80                 jmp     ds:__imp_GetCurrentDirectoryA
.text:00410B80 GetCurrentDirectoryA endp
.text:00410B80
.text:00410B80 ; ---------------------------------------------------------------------------
.text:00410B86                 align 10h
.text:00410B90
.text:00410B90 ; =============== S U B R O U T I N E =======================================
.text:00410B90
.text:00410B90 ; Attributes: thunk
.text:00410B90
.text:00410B90 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:00410B90 lstrcmpiA       proc near               ; CODE XREF: .text:0040C71B↑p
.text:00410B90                                         ; .text:0040C732↑p ...
.text:00410B90
.text:00410B90 lpString1       = dword ptr  4
.text:00410B90 lpString2       = dword ptr  8
.text:00410B90
.text:00410B90                 jmp     ds:__imp_lstrcmpiA
.text:00410B90 lstrcmpiA       endp
.text:00410B90
.text:00410B90 ; ---------------------------------------------------------------------------
.text:00410B96                 align 10h
.text:00410BA0
.text:00410BA0 ; =============== S U B R O U T I N E =======================================
.text:00410BA0
.text:00410BA0 ; Attributes: thunk
.text:00410BA0
.text:00410BA0 ; DWORD __stdcall GetVersion()
.text:00410BA0 GetVersion      proc near               ; CODE XREF: .text:0040CAA3↑p
.text:00410BA0                 jmp     ds:__imp_GetVersion
.text:00410BA0 GetVersion      endp
.text:00410BA0
.text:00410BA0 ; ---------------------------------------------------------------------------
.text:00410BA6                 align 10h
.text:00410BB0
.text:00410BB0 ; =============== S U B R O U T I N E =======================================
.text:00410BB0
.text:00410BB0 ; Attributes: thunk
.text:00410BB0
.text:00410BB0 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:00410BB0 GetVersionExA   proc near               ; CODE XREF: sub_40CB30+32↑p
.text:00410BB0                                         ; sub_40CB30+20B↑p
.text:00410BB0
.text:00410BB0 lpVersionInformation= dword ptr  4
.text:00410BB0
.text:00410BB0                 jmp     ds:__imp_GetVersionExA
.text:00410BB0 GetVersionExA   endp
.text:00410BB0
.text:00410BB0 ; ---------------------------------------------------------------------------
.text:00410BB6                 align 10h
.text:00410BC0
.text:00410BC0 ; =============== S U B R O U T I N E =======================================
.text:00410BC0
.text:00410BC0 ; Attributes: thunk
.text:00410BC0
.text:00410BC0 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00410BC0 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0040D42F↑p
.text:00410BC0                                         ; .text:0040D45E↑p ...
.text:00410BC0
.text:00410BC0 nBufferLength   = dword ptr  4
.text:00410BC0 lpBuffer        = dword ptr  8
.text:00410BC0
.text:00410BC0                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:00410BC0 GetLogicalDriveStringsA endp
.text:00410BC0
.text:00410BC0 ; ---------------------------------------------------------------------------
.text:00410BC6                 align 10h
.text:00410BD0
.text:00410BD0 ; =============== S U B R O U T I N E =======================================
.text:00410BD0
.text:00410BD0 ; Attributes: thunk
.text:00410BD0
.text:00410BD0 ; HANDLE __stdcall GetProcessHeap()
.text:00410BD0 GetProcessHeap  proc near               ; CODE XREF: .text:0040D439↑p
.text:00410BD0                                         ; sub_40DB10+24↑p ...
.text:00410BD0                 jmp     ds:__imp_GetProcessHeap
.text:00410BD0 GetProcessHeap  endp
.text:00410BD0
.text:00410BD0 ; ---------------------------------------------------------------------------
.text:00410BD6                 align 10h
.text:00410BE0
.text:00410BE0 ; =============== S U B R O U T I N E =======================================
.text:00410BE0
.text:00410BE0 ; Attributes: thunk
.text:00410BE0
.text:00410BE0 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:00410BE0 HeapAlloc       proc near               ; CODE XREF: .text:0040D44D↑p
.text:00410BE0                                         ; sub_40DB10+38↑p ...
.text:00410BE0
.text:00410BE0 hHeap           = dword ptr  4
.text:00410BE0 dwFlags         = dword ptr  8
.text:00410BE0 dwBytes         = dword ptr  0Ch
.text:00410BE0
.text:00410BE0                 jmp     ds:__imp_HeapAlloc
.text:00410BE0 HeapAlloc       endp
.text:00410BE0
.text:00410BE0 ; ---------------------------------------------------------------------------
.text:00410BE6                 align 10h
.text:00410BF0
.text:00410BF0 ; =============== S U B R O U T I N E =======================================
.text:00410BF0
.text:00410BF0 ; Attributes: thunk
.text:00410BF0
.text:00410BF0 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:00410BF0 HeapFree        proc near               ; CODE XREF: .text:0040DC4D↑p
.text:00410BF0
.text:00410BF0 hHeap           = dword ptr  4
.text:00410BF0 dwFlags         = dword ptr  8
.text:00410BF0 lpMem           = dword ptr  0Ch
.text:00410BF0
.text:00410BF0                 jmp     ds:__imp_HeapFree
.text:00410BF0 HeapFree        endp
.text:00410BF0
.text:00410BF0 ; ---------------------------------------------------------------------------
.text:00410BF6                 align 10h
.text:00410C00
.text:00410C00 ; =============== S U B R O U T I N E =======================================
.text:00410C00
.text:00410C00 ; Attributes: thunk
.text:00410C00
.text:00410C00 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:00410C00 UnlockFile      proc near               ; CODE XREF: sub_40DE00+40↑p
.text:00410C00
.text:00410C00 hFile           = dword ptr  4
.text:00410C00 dwFileOffsetLow = dword ptr  8
.text:00410C00 dwFileOffsetHigh= dword ptr  0Ch
.text:00410C00 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:00410C00 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:00410C00
.text:00410C00                 jmp     ds:__imp_UnlockFile
.text:00410C00 UnlockFile      endp
.text:00410C00
.text:00410C00 ; ---------------------------------------------------------------------------
.text:00410C06                 align 10h
.text:00410C10
.text:00410C10 ; =============== S U B R O U T I N E =======================================
.text:00410C10
.text:00410C10 ; Attributes: thunk
.text:00410C10
.text:00410C10 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:00410C10 CreateDirectoryA proc near              ; CODE XREF: sub_40E780+22↑p
.text:00410C10
.text:00410C10 lpPathName      = dword ptr  4
.text:00410C10 lpSecurityAttributes= dword ptr  8
.text:00410C10
.text:00410C10                 jmp     ds:__imp_CreateDirectoryA
.text:00410C10 CreateDirectoryA endp
.text:00410C10
.text:00410C10 ; ---------------------------------------------------------------------------
.text:00410C16                 align 10h
.text:00410C20
.text:00410C20 ; =============== S U B R O U T I N E =======================================
.text:00410C20
.text:00410C20 ; Attributes: thunk
.text:00410C20
.text:00410C20 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:00410C20 GetTimeZoneInformation proc near        ; CODE XREF: sub_40E880+22↑p
.text:00410C20
.text:00410C20 lpTimeZoneInformation= dword ptr  4
.text:00410C20
.text:00410C20                 jmp     ds:__imp_GetTimeZoneInformation
.text:00410C20 GetTimeZoneInformation endp
.text:00410C20
.text:00410C20 ; ---------------------------------------------------------------------------
.text:00410C26                 align 10h
.text:00410C30
.text:00410C30 ; =============== S U B R O U T I N E =======================================
.text:00410C30
.text:00410C30 ; Attributes: thunk
.text:00410C30
.text:00410C30 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:00410C30 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_40E880+4F↑p
.text:00410C30
.text:00410C30 lpSystemTimeAsFileTime= dword ptr  4
.text:00410C30
.text:00410C30                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:00410C30 GetSystemTimeAsFileTime endp
.text:00410C30
.text:00410C30 ; ---------------------------------------------------------------------------
.text:00410C36                 align 10h
.text:00410C40
.text:00410C40 ; =============== S U B R O U T I N E =======================================
.text:00410C40
.text:00410C40 ; Attributes: thunk
.text:00410C40
.text:00410C40 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:00410C40 RegOpenKeyExA   proc near               ; CODE XREF: .text:0040C6A1↑p
.text:00410C40
.text:00410C40 hKey            = dword ptr  4
.text:00410C40 lpSubKey        = dword ptr  8
.text:00410C40 ulOptions       = dword ptr  0Ch
.text:00410C40 samDesired      = dword ptr  10h
.text:00410C40 phkResult       = dword ptr  14h
.text:00410C40
.text:00410C40                 jmp     ds:__imp_RegOpenKeyExA
.text:00410C40 RegOpenKeyExA   endp
.text:00410C40
.text:00410C40 ; ---------------------------------------------------------------------------
.text:00410C46                 align 10h
.text:00410C50
.text:00410C50 ; =============== S U B R O U T I N E =======================================
.text:00410C50
.text:00410C50 ; Attributes: thunk
.text:00410C50
.text:00410C50 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:00410C50 RegQueryValueExA proc near              ; CODE XREF: .text:0040C6E4↑p
.text:00410C50
.text:00410C50 hKey            = dword ptr  4
.text:00410C50 lpValueName     = dword ptr  8
.text:00410C50 lpReserved      = dword ptr  0Ch
.text:00410C50 lpType          = dword ptr  10h
.text:00410C50 lpData          = dword ptr  14h
.text:00410C50 lpcbData        = dword ptr  18h
.text:00410C50
.text:00410C50                 jmp     ds:__imp_RegQueryValueExA
.text:00410C50 RegQueryValueExA endp
.text:00410C50
.text:00410C50 ; ---------------------------------------------------------------------------
.text:00410C56                 align 10h
.text:00410C60
.text:00410C60 ; =============== S U B R O U T I N E =======================================
.text:00410C60
.text:00410C60 ; Attributes: thunk
.text:00410C60
.text:00410C60 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:00410C60 RegCloseKey     proc near               ; CODE XREF: .text:0040C708↑p
.text:00410C60
.text:00410C60 hKey            = dword ptr  4
.text:00410C60
.text:00410C60                 jmp     ds:__imp_RegCloseKey
.text:00410C60 RegCloseKey     endp
.text:00410C60
.text:00410C60 ; ---------------------------------------------------------------------------
.text:00410C66                 align 10h
.text:00410C70
.text:00410C70 ; =============== S U B R O U T I N E =======================================
.text:00410C70
.text:00410C70 ; Attributes: thunk
.text:00410C70
.text:00410C70 ; BOOL __stdcall GetUserNameA(LPSTR lpBuffer, LPDWORD pcbBuffer)
.text:00410C70 GetUserNameA    proc near               ; CODE XREF: sub_40CF90+1E↑p
.text:00410C70
.text:00410C70 lpBuffer        = dword ptr  4
.text:00410C70 pcbBuffer       = dword ptr  8
.text:00410C70
.text:00410C70                 jmp     ds:__imp_GetUserNameA
.text:00410C70 GetUserNameA    endp
.text:00410C70
.text:00410C70 ; ---------------------------------------------------------------------------
.text:00410C76                 db 2 dup(90h)
.text:00410C78                 dd 2 dup(0)
.text:00410C80                 dd 21400h, 0
.text:00410C88                 dd 0C0h, 46000000h
.text:00410C90 ; const IID rclsid
.text:00410C90 rclsid          dd 21401h               ; Data1
.text:00410C90                                         ; DATA XREF: sub_4086F0+4B↑o
.text:00410C90                 dw 0                    ; Data2
.text:00410C90                 dw 0                    ; Data3
.text:00410C90                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:00410CA0                 dd 214A0h, 0
.text:00410CA8                 dd 0C0h, 46000000h, 214A1h, 0
.text:00410CB8                 dd 0C0h, 46000000h, 214D0h, 0
.text:00410CC8                 dd 0C0h, 46000000h, 214D1h, 0
.text:00410CD8                 dd 0C0h, 46000000h, 214D2h, 0
.text:00410CE8                 dd 0C0h, 46000000h, 214E1h, 0
.text:00410CF8                 dd 0C0h, 46000000h, 214E2h, 0
.text:00410D08                 dd 0C0h, 46000000h, 214E3h, 0
.text:00410D18                 dd 0C0h, 46000000h, 214E4h, 0
.text:00410D28                 dd 0C0h, 46000000h, 21500h, 0
.text:00410D38                 dd 0C0h, 46000000h, 214E5h, 0
.text:00410D48                 dd 0C0h, 46000000h, 214E6h, 0
.text:00410D58                 dd 0C0h, 46000000h, 214E8h, 0
.text:00410D68                 dd 0C0h, 46000000h, 214E9h, 0
.text:00410D78                 dd 0C0h, 46000000h, 214EAh, 0
.text:00410D88                 dd 0C0h, 46000000h, 214EBh, 0
.text:00410D98                 dd 0C0h, 46000000h
.text:00410DA0 ; const IID riid
.text:00410DA0 riid            dd 214EEh               ; Data1
.text:00410DA0                                         ; DATA XREF: sub_4086F0+2B↑o
.text:00410DA0                 dw 0                    ; Data2
.text:00410DA0                 dw 0                    ; Data3
.text:00410DA0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:00410DB0                 dd 214EFh, 0
.text:00410DB8                 dd 0C0h, 46000000h, 214F0h, 0
.text:00410DC8                 dd 0C0h, 46000000h, 214F1h, 0
.text:00410DD8                 dd 0C0h, 46000000h, 214F2h, 0
.text:00410DE8                 dd 0C0h, 46000000h, 214F3h, 0
.text:00410DF8                 dd 0C0h, 46000000h, 214F4h, 0
.text:00410E08                 dd 0C0h, 46000000h, 214F5h, 0
.text:00410E18                 dd 0C0h, 46000000h, 214F6h, 0
.text:00410E28                 dd 0C0h, 46000000h, 214F7h, 0
.text:00410E38                 dd 0C0h, 46000000h, 214F8h, 0
.text:00410E48                 dd 0C0h, 46000000h, 214F9h, 0
.text:00410E58                 dd 0C0h, 46000000h, 214FAh, 0
.text:00410E68                 dd 0C0h, 46000000h, 214FBh, 0
.text:00410E78                 dd 0C0h, 46000000h, 214FCh, 0
.text:00410E88                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:00410E88                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:00410E88                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:00410E88                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:00410E88                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00410E88                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:00410E88                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:00410E88                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00410E88                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:00410E88                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:00410F58                 dd 0C0h, 46000000h, 2DF05h, 0
.text:00410F68                 dd 0C0h, 46000000h, 2DF06h, 0
.text:00410F78                 dd 0C0h, 46000000h, 2DF01h, 0
.text:00410F88                 dd 0C0h, 46000000h, 2DF09h, 0
.text:00410F98                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:00410F98                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:00410F98                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:00410F98                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:00410F98                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:00410F98                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:00410F98                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:00411020 dword_411020    dd 0FFFFFFFFh           ; DATA XREF: .text:0040FF19↑r
.text:00411020                                         ; .text:loc_40FF40↑r ...
.text:00411024 dword_411024    dd 0                    ; DATA XREF: .text:loc_40FF4C↑r
.text:00411024                                         ; sub_40FF70:loc_40FFBD↑r
.text:00411028                 dd 0FFFFFFFFh
.text:0041102C dword_41102C    dd 75h dup(0)           ; DATA XREF: .data:off_4120D4↓o
.text:00411200                 dd 380h dup(?)
.text:00411200 _text           ends
.text:00411200
.data:00412000 ; Section 2. (virtual address 00012000)
.data:00412000 ; Virtual size                  : 000000F0 (    240.)
.data:00412000 ; Section size in file          : 00000200 (    512.)
.data:00412000 ; Offset to raw data for section: 00010600
.data:00412000 ; Flags C0000040: Data Readable Writable
.data:00412000 ; Alignment     : default
.data:00412000 ; ===========================================================================
.data:00412000
.data:00412000 ; Segment type: Pure data
.data:00412000 ; Segment permissions: Read/Write
.data:00412000 _data           segment para public 'DATA' use32
.data:00412000                 assume cs:_data
.data:00412000                 ;org 412000h
.data:00412000 dword_412000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00412000                                         ; sub_401080+CC↑r
.data:00412004 dword_412004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00412004                                         ; sub_401080+D4↑r
.data:00412008                 align 10h
.data:00412010 dword_412010    dd 1                    ; DATA XREF: sub_401CD0:loc_402013↑r
.data:00412010                                         ; sub_406040+3↑r ...
.data:00412014 dword_412014    dd 1                    ; DATA XREF: sub_406040+11↑r
.data:00412014                                         ; .text:004060E1↑r
.data:00412018 dword_412018    dd 3Fh                  ; DATA XREF: sub_406040+7D↑w
.data:00412018                                         ; .text:0040614D↑w
.data:0041201C                 align 10h
.data:00412020 ; char *Buffer
.data:00412020 Buffer          dd offset aCopyrightC2005
.data:00412020                                         ; DATA XREF: sub_406570+DC↑r
.data:00412020                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00412024                 align 10h
.data:00412030 ; int Code
.data:00412030 Code            dd 1                    ; DATA XREF: sub_4068F0+6D↑r
.data:00412030                                         ; sub_4068F0+9A↑r ...
.data:00412034                 align 10h
.data:00412040 dword_412040    dd 1                    ; DATA XREF: sub_408150+22↑r
.data:00412040                                         ; sub_408150+65↑r ...
.data:00412044 dword_412044    dd 100h                 ; DATA XREF: sub_408150+3F↑o
.data:00412044                                         ; sub_408150+1A2↑r ...
.data:00412048 off_412048      dd offset unk_413090    ; DATA XREF: sub_408150+1AA↑r
.data:0041204C ; void *off_41204C
.data:0041204C off_41204C      dd offset dword_412044  ; DATA XREF: sub_408150+39↑r
.data:0041204C                                         ; sub_408150+60↑w ...
.data:00412050 dword_412050    dd 200h                 ; DATA XREF: sub_408FD0+2ED↑r
.data:00412050                                         ; sub_408FD0+2F8↑r ...
.data:00412054 ; char *off_412054
.data:00412054 off_412054      dd offset aComExeBatCmd ; DATA XREF: sub_4094A0+3D3↑r
.data:00412054                                         ; sub_4094A0+400↑r ...
.data:00412054                                         ; ".com;.exe;.bat;.cmd"
.data:00412058                 align 10h
.data:00412060 byte_412060     db 41h                  ; DATA XREF: sub_40BF40+6B↑w
.data:00412060                                         ; sub_40BF40:loc_40C054↑r
.data:00412061                 align 10h
.data:00412070 dword_412070    dd 1                    ; DATA XREF: .text:loc_40C557↑r
.data:00412070                                         ; sub_40CB30+202↑w
.data:00412074                 align 10h
.data:00412080 ; char *Src
.data:00412080 Src             dd offset byte_40CD80   ; DATA XREF: sub_40CDA0+168↑r
.data:00412084 off_412084      dd offset byte_40CD81   ; DATA XREF: sub_40CDA0+1DA↑r
.data:00412088                 align 10h
.data:00412090 off_412090      dd offset aNotset       ; DATA XREF: .text:0040D00A↑r
.data:00412090                                         ; .text:0040DC52↑r
.data:00412090                                         ; "notset"
.data:00412094 off_412094      dd offset aNotset       ; DATA XREF: .text:0040D022↑r
.data:00412094                                         ; .text:0040D044↑r ...
.data:00412094                                         ; "notset"
.data:00412098                 align 10h
.data:004120A0 dword_4120A0    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:004120A4                 align 10h
.data:004120B0 ; int Mode
.data:004120B0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:004120B0                                         ; sub_401080+80↑r ...
.data:004120B4                 align 10h
.data:004120C0 dword_4120C0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:004120C0                                         ; sub_401080+BA↑r
.data:004120C4                 align 10h
.data:004120D0 dword_4120D0    dd 0                    ; DATA XREF: sub_40FF70+9↑r
.data:004120D0                                         ; sub_40FF70+1D↑w
.data:004120D4 off_4120D4      dd offset dword_41102C  ; DATA XREF: sub_40FEE0+6↑r
.data:004120D4                                         ; sub_40FEE0+17↑r ...
.data:004120D8                 align 1000h
.data:004120D8 _data           ends
.data:004120D8
.bss:00413000 ; Section 3. (virtual address 00013000)
.bss:00413000 ; Virtual size                  : 00000BA0 (   2976.)
.bss:00413000 ; Section size in file          : 00000000 (      0.)
.bss:00413000 ; Offset to raw data for section: 00000000
.bss:00413000 ; Flags C0000080: Bss Readable Writable
.bss:00413000 ; Alignment     : default
.bss:00413000 ; ===========================================================================
.bss:00413000
.bss:00413000 ; Segment type: Uninitialized
.bss:00413000 ; Segment permissions: Read/Write
.bss:00413000 _bss            segment para public 'BSS' use32
.bss:00413000                 assume cs:_bss
.bss:00413000                 ;org 413000h
.bss:00413000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00413000 unk_413000      db    ? ;               ; DATA XREF: sub_402AE0+16C↑o
.bss:00413000                                         ; sub_402AE0+186↑o ...
.bss:00413001                 db    ? ;
.bss:00413002                 db    ? ;
.bss:00413003                 db    ? ;
.bss:00413004                 db    ? ;
.bss:00413005                 db    ? ;
.bss:00413006                 db    ? ;
.bss:00413007                 db    ? ;
.bss:00413008                 db    ? ;
.bss:00413009                 db    ? ;
.bss:0041300A byte_41300A     db ?                    ; DATA XREF: sub_402AE0+17F↑w
.bss:0041300B                 align 10h
.bss:00413010 unk_413010      db    ? ;               ; DATA XREF: sub_402AE0+4C3↑o
.bss:00413010                                         ; sub_402AE0+4CF↑o ...
.bss:00413011                 db    ? ;
.bss:00413012                 db    ? ;
.bss:00413013                 db    ? ;
.bss:00413014                 db    ? ;
.bss:00413015                 db    ? ;
.bss:00413016                 db    ? ;
.bss:00413017                 db    ? ;
.bss:00413018                 db    ? ;
.bss:00413019                 db    ? ;
.bss:0041301A                 db    ? ;
.bss:0041301B                 db    ? ;
.bss:0041301C                 db    ? ;
.bss:0041301D                 db    ? ;
.bss:0041301E                 db    ? ;
.bss:0041301F                 db    ? ;
.bss:00413020                 db    ? ;
.bss:00413021                 db    ? ;
.bss:00413022                 db    ? ;
.bss:00413023                 db    ? ;
.bss:00413024                 db    ? ;
.bss:00413025                 db    ? ;
.bss:00413026                 db    ? ;
.bss:00413027                 db    ? ;
.bss:00413028                 db    ? ;
.bss:00413029                 db    ? ;
.bss:0041302A                 db    ? ;
.bss:0041302B                 db    ? ;
.bss:0041302C                 db    ? ;
.bss:0041302D                 db    ? ;
.bss:0041302E                 db    ? ;
.bss:0041302F                 db    ? ;
.bss:00413030                 db    ? ;
.bss:00413031                 db    ? ;
.bss:00413032                 db    ? ;
.bss:00413033                 db    ? ;
.bss:00413034                 db    ? ;
.bss:00413035                 db    ? ;
.bss:00413036                 db    ? ;
.bss:00413037                 db    ? ;
.bss:00413038                 db    ? ;
.bss:00413039                 db    ? ;
.bss:0041303A                 db    ? ;
.bss:0041303B                 db    ? ;
.bss:0041303C                 db    ? ;
.bss:0041303D                 db    ? ;
.bss:0041303E                 db    ? ;
.bss:0041303F                 db    ? ;
.bss:00413040 dword_413040    dd ?                    ; DATA XREF: sub_403090+16D↑r
.bss:00413044                 align 10h
.bss:00413050 dword_413050    dd ?                    ; DATA XREF: sub_406040+9↑o
.bss:00413050                                         ; sub_406040+17↑w ...
.bss:00413054 dword_413054    dd ?                    ; DATA XREF: sub_406040+21↑w
.bss:00413054                                         ; .text:004060F9↑w
.bss:00413058 dword_413058    dd ?                    ; DATA XREF: sub_406040+77↑r
.bss:00413058                                         ; .text:00406147↑r
.bss:0041305C dword_41305C    dd ?                    ; DATA XREF: sub_406040+6B↑r
.bss:0041305C                                         ; .text:0040613B↑r
.bss:00413060                 align 40h
.bss:00413080 ; char *dword_413080
.bss:00413080 dword_413080    dd ?                    ; DATA XREF: .text:004068C4↑w
.bss:00413080                                         ; sub_4068F0+58↑r
.bss:00413084                 align 10h
.bss:00413090 unk_413090      db    ? ;               ; DATA XREF: sub_408150+100↑o
.bss:00413090                                         ; .data:off_412048↑o
.bss:00413091                 db    ? ;
.bss:00413092                 db    ? ;
.bss:00413093                 db    ? ;
.bss:00413094                 db    ? ;
.bss:00413095                 db    ? ;
.bss:00413096                 db    ? ;
.bss:00413097                 db    ? ;
.bss:00413098                 db    ? ;
.bss:00413099                 db    ? ;
.bss:0041309A                 db    ? ;
.bss:0041309B                 db    ? ;
.bss:0041309C                 db    ? ;
.bss:0041309D                 db    ? ;
.bss:0041309E                 db    ? ;
.bss:0041309F                 db    ? ;
.bss:004130A0                 db    ? ;
.bss:004130A1                 db    ? ;
.bss:004130A2                 db    ? ;
.bss:004130A3                 db    ? ;
.bss:004130A4                 db    ? ;
.bss:004130A5                 db    ? ;
.bss:004130A6                 db    ? ;
.bss:004130A7                 db    ? ;
.bss:004130A8                 db    ? ;
.bss:004130A9                 db    ? ;
.bss:004130AA                 db    ? ;
.bss:004130AB                 db    ? ;
.bss:004130AC                 db    ? ;
.bss:004130AD                 db    ? ;
.bss:004130AE                 db    ? ;
.bss:004130AF                 db    ? ;
.bss:004130B0                 db    ? ;
.bss:004130B1                 db    ? ;
.bss:004130B2                 db    ? ;
.bss:004130B3                 db    ? ;
.bss:004130B4                 db    ? ;
.bss:004130B5                 db    ? ;
.bss:004130B6                 db    ? ;
.bss:004130B7                 db    ? ;
.bss:004130B8                 db    ? ;
.bss:004130B9                 db    ? ;
.bss:004130BA                 db    ? ;
.bss:004130BB                 db    ? ;
.bss:004130BC                 db    ? ;
.bss:004130BD                 db    ? ;
.bss:004130BE                 db    ? ;
.bss:004130BF                 db    ? ;
.bss:004130C0                 db    ? ;
.bss:004130C1                 db    ? ;
.bss:004130C2                 db    ? ;
.bss:004130C3                 db    ? ;
.bss:004130C4                 db    ? ;
.bss:004130C5                 db    ? ;
.bss:004130C6                 db    ? ;
.bss:004130C7                 db    ? ;
.bss:004130C8                 db    ? ;
.bss:004130C9                 db    ? ;
.bss:004130CA                 db    ? ;
.bss:004130CB                 db    ? ;
.bss:004130CC                 db    ? ;
.bss:004130CD                 db    ? ;
.bss:004130CE                 db    ? ;
.bss:004130CF                 db    ? ;
.bss:004130D0                 db    ? ;
.bss:004130D1                 db    ? ;
.bss:004130D2                 db    ? ;
.bss:004130D3                 db    ? ;
.bss:004130D4                 db    ? ;
.bss:004130D5                 db    ? ;
.bss:004130D6                 db    ? ;
.bss:004130D7                 db    ? ;
.bss:004130D8                 db    ? ;
.bss:004130D9                 db    ? ;
.bss:004130DA                 db    ? ;
.bss:004130DB                 db    ? ;
.bss:004130DC                 db    ? ;
.bss:004130DD                 db    ? ;
.bss:004130DE                 db    ? ;
.bss:004130DF                 db    ? ;
.bss:004130E0                 db    ? ;
.bss:004130E1                 db    ? ;
.bss:004130E2                 db    ? ;
.bss:004130E3                 db    ? ;
.bss:004130E4                 db    ? ;
.bss:004130E5                 db    ? ;
.bss:004130E6                 db    ? ;
.bss:004130E7                 db    ? ;
.bss:004130E8                 db    ? ;
.bss:004130E9                 db    ? ;
.bss:004130EA                 db    ? ;
.bss:004130EB                 db    ? ;
.bss:004130EC                 db    ? ;
.bss:004130ED                 db    ? ;
.bss:004130EE                 db    ? ;
.bss:004130EF                 db    ? ;
.bss:004130F0                 db    ? ;
.bss:004130F1                 db    ? ;
.bss:004130F2                 db    ? ;
.bss:004130F3                 db    ? ;
.bss:004130F4                 db    ? ;
.bss:004130F5                 db    ? ;
.bss:004130F6                 db    ? ;
.bss:004130F7                 db    ? ;
.bss:004130F8                 db    ? ;
.bss:004130F9                 db    ? ;
.bss:004130FA                 db    ? ;
.bss:004130FB                 db    ? ;
.bss:004130FC                 db    ? ;
.bss:004130FD                 db    ? ;
.bss:004130FE                 db    ? ;
.bss:004130FF                 db    ? ;
.bss:00413100                 db    ? ;
.bss:00413101                 db    ? ;
.bss:00413102                 db    ? ;
.bss:00413103                 db    ? ;
.bss:00413104                 db    ? ;
.bss:00413105                 db    ? ;
.bss:00413106                 db    ? ;
.bss:00413107                 db    ? ;
.bss:00413108                 db    ? ;
.bss:00413109                 db    ? ;
.bss:0041310A                 db    ? ;
.bss:0041310B                 db    ? ;
.bss:0041310C                 db    ? ;
.bss:0041310D                 db    ? ;
.bss:0041310E                 db    ? ;
.bss:0041310F                 db    ? ;
.bss:00413110                 db    ? ;
.bss:00413111                 db    ? ;
.bss:00413112                 db    ? ;
.bss:00413113                 db    ? ;
.bss:00413114                 db    ? ;
.bss:00413115                 db    ? ;
.bss:00413116                 db    ? ;
.bss:00413117                 db    ? ;
.bss:00413118                 db    ? ;
.bss:00413119                 db    ? ;
.bss:0041311A                 db    ? ;
.bss:0041311B                 db    ? ;
.bss:0041311C                 db    ? ;
.bss:0041311D                 db    ? ;
.bss:0041311E                 db    ? ;
.bss:0041311F                 db    ? ;
.bss:00413120                 db    ? ;
.bss:00413121                 db    ? ;
.bss:00413122                 db    ? ;
.bss:00413123                 db    ? ;
.bss:00413124                 db    ? ;
.bss:00413125                 db    ? ;
.bss:00413126                 db    ? ;
.bss:00413127                 db    ? ;
.bss:00413128                 db    ? ;
.bss:00413129                 db    ? ;
.bss:0041312A                 db    ? ;
.bss:0041312B                 db    ? ;
.bss:0041312C                 db    ? ;
.bss:0041312D                 db    ? ;
.bss:0041312E                 db    ? ;
.bss:0041312F                 db    ? ;
.bss:00413130                 db    ? ;
.bss:00413131                 db    ? ;
.bss:00413132                 db    ? ;
.bss:00413133                 db    ? ;
.bss:00413134                 db    ? ;
.bss:00413135                 db    ? ;
.bss:00413136                 db    ? ;
.bss:00413137                 db    ? ;
.bss:00413138                 db    ? ;
.bss:00413139                 db    ? ;
.bss:0041313A                 db    ? ;
.bss:0041313B                 db    ? ;
.bss:0041313C                 db    ? ;
.bss:0041313D                 db    ? ;
.bss:0041313E                 db    ? ;
.bss:0041313F                 db    ? ;
.bss:00413140                 db    ? ;
.bss:00413141                 db    ? ;
.bss:00413142                 db    ? ;
.bss:00413143                 db    ? ;
.bss:00413144                 db    ? ;
.bss:00413145                 db    ? ;
.bss:00413146                 db    ? ;
.bss:00413147                 db    ? ;
.bss:00413148                 db    ? ;
.bss:00413149                 db    ? ;
.bss:0041314A                 db    ? ;
.bss:0041314B                 db    ? ;
.bss:0041314C                 db    ? ;
.bss:0041314D                 db    ? ;
.bss:0041314E                 db    ? ;
.bss:0041314F                 db    ? ;
.bss:00413150                 db    ? ;
.bss:00413151                 db    ? ;
.bss:00413152                 db    ? ;
.bss:00413153                 db    ? ;
.bss:00413154                 db    ? ;
.bss:00413155                 db    ? ;
.bss:00413156                 db    ? ;
.bss:00413157                 db    ? ;
.bss:00413158                 db    ? ;
.bss:00413159                 db    ? ;
.bss:0041315A                 db    ? ;
.bss:0041315B                 db    ? ;
.bss:0041315C                 db    ? ;
.bss:0041315D                 db    ? ;
.bss:0041315E                 db    ? ;
.bss:0041315F                 db    ? ;
.bss:00413160                 db    ? ;
.bss:00413161                 db    ? ;
.bss:00413162                 db    ? ;
.bss:00413163                 db    ? ;
.bss:00413164                 db    ? ;
.bss:00413165                 db    ? ;
.bss:00413166                 db    ? ;
.bss:00413167                 db    ? ;
.bss:00413168                 db    ? ;
.bss:00413169                 db    ? ;
.bss:0041316A                 db    ? ;
.bss:0041316B                 db    ? ;
.bss:0041316C                 db    ? ;
.bss:0041316D                 db    ? ;
.bss:0041316E                 db    ? ;
.bss:0041316F                 db    ? ;
.bss:00413170                 db    ? ;
.bss:00413171                 db    ? ;
.bss:00413172                 db    ? ;
.bss:00413173                 db    ? ;
.bss:00413174                 db    ? ;
.bss:00413175                 db    ? ;
.bss:00413176                 db    ? ;
.bss:00413177                 db    ? ;
.bss:00413178                 db    ? ;
.bss:00413179                 db    ? ;
.bss:0041317A                 db    ? ;
.bss:0041317B                 db    ? ;
.bss:0041317C                 db    ? ;
.bss:0041317D                 db    ? ;
.bss:0041317E                 db    ? ;
.bss:0041317F                 db    ? ;
.bss:00413180                 db    ? ;
.bss:00413181                 db    ? ;
.bss:00413182                 db    ? ;
.bss:00413183                 db    ? ;
.bss:00413184                 db    ? ;
.bss:00413185                 db    ? ;
.bss:00413186                 db    ? ;
.bss:00413187                 db    ? ;
.bss:00413188                 db    ? ;
.bss:00413189                 db    ? ;
.bss:0041318A                 db    ? ;
.bss:0041318B                 db    ? ;
.bss:0041318C                 db    ? ;
.bss:0041318D                 db    ? ;
.bss:0041318E                 db    ? ;
.bss:0041318F                 db    ? ;
.bss:00413190 dword_413190    dd ?                    ; DATA XREF: .text:loc_407AE1↑o
.bss:00413190                                         ; .text:loc_407B00↑o ...
.bss:00413194 dword_413194    dd ?                    ; DATA XREF: .text:loc_407B80↑o
.bss:00413194                                         ; .text:00408008↑r ...
.bss:00413198 dword_413198    dd ?                    ; DATA XREF: .text:00408002↑r
.bss:00413198                                         ; sub_4080B0+2C↑r
.bss:0041319C dword_41319C    dd ?                    ; DATA XREF: .text:00407FF6↑r
.bss:0041319C                                         ; sub_4080B0+22↑r
.bss:004131A0 dword_4131A0    dd ?                    ; DATA XREF: .text:00408012↑r
.bss:004131A0                                         ; sub_4080B0+36↑r
.bss:004131A4 dword_4131A4    dd ?                    ; DATA XREF: .text:00408022↑r
.bss:004131A4                                         ; sub_4080B0+4E↑r
.bss:004131A8 dword_4131A8    dd ?                    ; DATA XREF: .text:0040803F↑r
.bss:004131A8                                         ; sub_4080B0+62↑r
.bss:004131AC dword_4131AC    dd ?                    ; DATA XREF: .text:00408035↑r
.bss:004131AC                                         ; sub_4080B0+70↑r
.bss:004131B0 dword_4131B0    dd ?                    ; DATA XREF: .text:00408018↑r
.bss:004131B0                                         ; sub_4080B0+7A↑r
.bss:004131B4                 align 10h
.bss:004131C0 ; char *Str1
.bss:004131C0 Str1            dd ?                    ; DATA XREF: sub_4084D4:loc_40850D↑w
.bss:004131C0                                         ; sub_4084D4:loc_408640↑r
.bss:004131C4                 align 10h
.bss:004131D0 dword_4131D0    dd ?                    ; DATA XREF: sub_4084D4+2D↑r
.bss:004131D0                                         ; sub_4084D4+3F↑w
.bss:004131D4                 align 10h
.bss:004131E0 unk_4131E0      db    ? ;               ; DATA XREF: sub_408A90+8↑o
.bss:004131E1                 db    ? ;
.bss:004131E2                 db    ? ;
.bss:004131E3                 db    ? ;
.bss:004131E4                 db    ? ;
.bss:004131E5                 db    ? ;
.bss:004131E6                 db    ? ;
.bss:004131E7                 db    ? ;
.bss:004131E8                 db    ? ;
.bss:004131E9                 db    ? ;
.bss:004131EA                 db    ? ;
.bss:004131EB                 db    ? ;
.bss:004131EC                 db    ? ;
.bss:004131ED                 db    ? ;
.bss:004131EE                 db    ? ;
.bss:004131EF                 db    ? ;
.bss:004131F0                 db    ? ;
.bss:004131F1                 db    ? ;
.bss:004131F2                 db    ? ;
.bss:004131F3                 db    ? ;
.bss:004131F4                 db    ? ;
.bss:004131F5                 db    ? ;
.bss:004131F6                 db    ? ;
.bss:004131F7                 db    ? ;
.bss:004131F8                 db    ? ;
.bss:004131F9                 db    ? ;
.bss:004131FA                 db    ? ;
.bss:004131FB                 db    ? ;
.bss:004131FC                 db    ? ;
.bss:004131FD                 db    ? ;
.bss:004131FE                 db    ? ;
.bss:004131FF                 db    ? ;
.bss:00413200                 db    ? ;
.bss:00413201                 db    ? ;
.bss:00413202                 db    ? ;
.bss:00413203                 db    ? ;
.bss:00413204                 db    ? ;
.bss:00413205                 db    ? ;
.bss:00413206                 db    ? ;
.bss:00413207                 db    ? ;
.bss:00413208                 db    ? ;
.bss:00413209                 db    ? ;
.bss:0041320A                 db    ? ;
.bss:0041320B                 db    ? ;
.bss:0041320C                 db    ? ;
.bss:0041320D                 db    ? ;
.bss:0041320E                 db    ? ;
.bss:0041320F                 db    ? ;
.bss:00413210                 db    ? ;
.bss:00413211                 db    ? ;
.bss:00413212                 db    ? ;
.bss:00413213                 db    ? ;
.bss:00413214                 db    ? ;
.bss:00413215                 db    ? ;
.bss:00413216                 db    ? ;
.bss:00413217                 db    ? ;
.bss:00413218                 db    ? ;
.bss:00413219                 db    ? ;
.bss:0041321A                 db    ? ;
.bss:0041321B                 db    ? ;
.bss:0041321C                 db    ? ;
.bss:0041321D                 db    ? ;
.bss:0041321E                 db    ? ;
.bss:0041321F                 db    ? ;
.bss:00413220                 db    ? ;
.bss:00413221                 db    ? ;
.bss:00413222                 db    ? ;
.bss:00413223                 db    ? ;
.bss:00413224                 db    ? ;
.bss:00413225                 db    ? ;
.bss:00413226                 db    ? ;
.bss:00413227                 db    ? ;
.bss:00413228                 db    ? ;
.bss:00413229                 db    ? ;
.bss:0041322A                 db    ? ;
.bss:0041322B                 db    ? ;
.bss:0041322C                 db    ? ;
.bss:0041322D                 db    ? ;
.bss:0041322E                 db    ? ;
.bss:0041322F                 db    ? ;
.bss:00413230                 db    ? ;
.bss:00413231                 db    ? ;
.bss:00413232                 db    ? ;
.bss:00413233                 db    ? ;
.bss:00413234                 db    ? ;
.bss:00413235                 db    ? ;
.bss:00413236                 db    ? ;
.bss:00413237                 db    ? ;
.bss:00413238                 db    ? ;
.bss:00413239                 db    ? ;
.bss:0041323A                 db    ? ;
.bss:0041323B                 db    ? ;
.bss:0041323C                 db    ? ;
.bss:0041323D                 db    ? ;
.bss:0041323E                 db    ? ;
.bss:0041323F                 db    ? ;
.bss:00413240                 db    ? ;
.bss:00413241                 db    ? ;
.bss:00413242                 db    ? ;
.bss:00413243                 db    ? ;
.bss:00413244                 db    ? ;
.bss:00413245                 db    ? ;
.bss:00413246                 db    ? ;
.bss:00413247                 db    ? ;
.bss:00413248                 db    ? ;
.bss:00413249                 db    ? ;
.bss:0041324A                 db    ? ;
.bss:0041324B                 db    ? ;
.bss:0041324C                 db    ? ;
.bss:0041324D                 db    ? ;
.bss:0041324E                 db    ? ;
.bss:0041324F                 db    ? ;
.bss:00413250                 db    ? ;
.bss:00413251                 db    ? ;
.bss:00413252                 db    ? ;
.bss:00413253                 db    ? ;
.bss:00413254                 db    ? ;
.bss:00413255                 db    ? ;
.bss:00413256                 db    ? ;
.bss:00413257                 db    ? ;
.bss:00413258                 db    ? ;
.bss:00413259                 db    ? ;
.bss:0041325A                 db    ? ;
.bss:0041325B                 db    ? ;
.bss:0041325C                 db    ? ;
.bss:0041325D                 db    ? ;
.bss:0041325E                 db    ? ;
.bss:0041325F                 db    ? ;
.bss:00413260                 db    ? ;
.bss:00413261                 db    ? ;
.bss:00413262                 db    ? ;
.bss:00413263                 db    ? ;
.bss:00413264                 db    ? ;
.bss:00413265                 db    ? ;
.bss:00413266                 db    ? ;
.bss:00413267                 db    ? ;
.bss:00413268                 db    ? ;
.bss:00413269                 db    ? ;
.bss:0041326A                 db    ? ;
.bss:0041326B                 db    ? ;
.bss:0041326C                 db    ? ;
.bss:0041326D                 db    ? ;
.bss:0041326E                 db    ? ;
.bss:0041326F                 db    ? ;
.bss:00413270                 db    ? ;
.bss:00413271                 db    ? ;
.bss:00413272                 db    ? ;
.bss:00413273                 db    ? ;
.bss:00413274                 db    ? ;
.bss:00413275                 db    ? ;
.bss:00413276                 db    ? ;
.bss:00413277                 db    ? ;
.bss:00413278                 db    ? ;
.bss:00413279                 db    ? ;
.bss:0041327A                 db    ? ;
.bss:0041327B                 db    ? ;
.bss:0041327C                 db    ? ;
.bss:0041327D                 db    ? ;
.bss:0041327E                 db    ? ;
.bss:0041327F                 db    ? ;
.bss:00413280                 db    ? ;
.bss:00413281                 db    ? ;
.bss:00413282                 db    ? ;
.bss:00413283                 db    ? ;
.bss:00413284                 db    ? ;
.bss:00413285                 db    ? ;
.bss:00413286                 db    ? ;
.bss:00413287                 db    ? ;
.bss:00413288                 db    ? ;
.bss:00413289                 db    ? ;
.bss:0041328A                 db    ? ;
.bss:0041328B                 db    ? ;
.bss:0041328C                 db    ? ;
.bss:0041328D                 db    ? ;
.bss:0041328E                 db    ? ;
.bss:0041328F                 db    ? ;
.bss:00413290                 db    ? ;
.bss:00413291                 db    ? ;
.bss:00413292                 db    ? ;
.bss:00413293                 db    ? ;
.bss:00413294                 db    ? ;
.bss:00413295                 db    ? ;
.bss:00413296                 db    ? ;
.bss:00413297                 db    ? ;
.bss:00413298                 db    ? ;
.bss:00413299                 db    ? ;
.bss:0041329A                 db    ? ;
.bss:0041329B                 db    ? ;
.bss:0041329C                 db    ? ;
.bss:0041329D                 db    ? ;
.bss:0041329E                 db    ? ;
.bss:0041329F                 db    ? ;
.bss:004132A0                 db    ? ;
.bss:004132A1                 db    ? ;
.bss:004132A2                 db    ? ;
.bss:004132A3                 db    ? ;
.bss:004132A4                 db    ? ;
.bss:004132A5                 db    ? ;
.bss:004132A6                 db    ? ;
.bss:004132A7                 db    ? ;
.bss:004132A8                 db    ? ;
.bss:004132A9                 db    ? ;
.bss:004132AA                 db    ? ;
.bss:004132AB                 db    ? ;
.bss:004132AC                 db    ? ;
.bss:004132AD                 db    ? ;
.bss:004132AE                 db    ? ;
.bss:004132AF                 db    ? ;
.bss:004132B0 unk_4132B0      db    ? ;               ; DATA XREF: sub_408C40+22↑o
.bss:004132B1                 db    ? ;
.bss:004132B2                 db    ? ;
.bss:004132B3                 db    ? ;
.bss:004132B4                 db    ? ;
.bss:004132B5                 db    ? ;
.bss:004132B6                 db    ? ;
.bss:004132B7                 db    ? ;
.bss:004132B8                 db    ? ;
.bss:004132B9                 db    ? ;
.bss:004132BA                 db    ? ;
.bss:004132BB                 db    ? ;
.bss:004132BC                 db    ? ;
.bss:004132BD                 db    ? ;
.bss:004132BE                 db    ? ;
.bss:004132BF                 db    ? ;
.bss:004132C0                 db    ? ;
.bss:004132C1                 db    ? ;
.bss:004132C2                 db    ? ;
.bss:004132C3                 db    ? ;
.bss:004132C4                 db    ? ;
.bss:004132C5                 db    ? ;
.bss:004132C6                 db    ? ;
.bss:004132C7                 db    ? ;
.bss:004132C8                 db    ? ;
.bss:004132C9                 db    ? ;
.bss:004132CA                 db    ? ;
.bss:004132CB                 db    ? ;
.bss:004132CC                 db    ? ;
.bss:004132CD                 db    ? ;
.bss:004132CE                 db    ? ;
.bss:004132CF                 db    ? ;
.bss:004132D0 ; char byte_4132D0[1024]
.bss:004132D0 byte_4132D0     db 400h dup(?)          ; DATA XREF: sub_408C40+1A↑o
.bss:004136D0 dword_4136D0    dd ?                    ; DATA XREF: sub_4094A0+100↑r
.bss:004136D0                                         ; sub_4094A0+308↑w
.bss:004136D4                 align 10h
.bss:004136E0 ; char *Str
.bss:004136E0 Str             dd ?                    ; DATA XREF: sub_4094A0:loc_409804↑r
.bss:004136E0                                         ; sub_4094A0+3B6↑r ...
.bss:004136E4                 align 10h
.bss:004136F0 dword_4136F0    dd ?                    ; DATA XREF: sub_40BF40+1C↑r
.bss:004136F0                                         ; sub_40BF40+104↑w
.bss:004136F4                 align 10h
.bss:00413700 dword_413700    dd ?                    ; DATA XREF: sub_40BF40+B↑r
.bss:00413700                                         ; sub_40BF40+71↑w
.bss:00413704                 align 10h
.bss:00413710 dword_413710    dd ?                    ; DATA XREF: sub_40BF40+85↑r
.bss:00413710                                         ; sub_40BF40+B9↑w
.bss:00413714 dword_413714    dd ?                    ; DATA XREF: sub_40BF40+C4↑w
.bss:00413718 dword_413718    dd ?                    ; DATA XREF: sub_40BF40+2E↑o
.bss:00413718                                         ; sub_40BF40+CF↑w
.bss:0041371C dword_41371C    dd ?                    ; DATA XREF: sub_40BF40+DA↑w
.bss:00413720                 db    ? ;
.bss:00413721                 db    ? ;
.bss:00413722                 db    ? ;
.bss:00413723                 db    ? ;
.bss:00413724                 db    ? ;
.bss:00413725                 db    ? ;
.bss:00413726                 db    ? ;
.bss:00413727                 db    ? ;
.bss:00413728                 db    ? ;
.bss:00413729                 db    ? ;
.bss:0041372A                 db    ? ;
.bss:0041372B                 db    ? ;
.bss:0041372C                 db    ? ;
.bss:0041372D                 db    ? ;
.bss:0041372E                 db    ? ;
.bss:0041372F                 db    ? ;
.bss:00413730                 db    ? ;
.bss:00413731                 db    ? ;
.bss:00413732                 db    ? ;
.bss:00413733                 db    ? ;
.bss:00413734                 db    ? ;
.bss:00413735                 db    ? ;
.bss:00413736                 db    ? ;
.bss:00413737                 db    ? ;
.bss:00413738                 db    ? ;
.bss:00413739                 db    ? ;
.bss:0041373A                 db    ? ;
.bss:0041373B                 db    ? ;
.bss:0041373C                 db    ? ;
.bss:0041373D                 db    ? ;
.bss:0041373E                 db    ? ;
.bss:0041373F                 db    ? ;
.bss:00413740                 db    ? ;
.bss:00413741                 db    ? ;
.bss:00413742                 db    ? ;
.bss:00413743                 db    ? ;
.bss:00413744                 db    ? ;
.bss:00413745                 db    ? ;
.bss:00413746                 db    ? ;
.bss:00413747                 db    ? ;
.bss:00413748                 db    ? ;
.bss:00413749                 db    ? ;
.bss:0041374A                 db    ? ;
.bss:0041374B                 db    ? ;
.bss:0041374C                 db    ? ;
.bss:0041374D                 db    ? ;
.bss:0041374E                 db    ? ;
.bss:0041374F                 db    ? ;
.bss:00413750                 db    ? ;
.bss:00413751                 db    ? ;
.bss:00413752                 db    ? ;
.bss:00413753                 db    ? ;
.bss:00413754                 db    ? ;
.bss:00413755                 db    ? ;
.bss:00413756                 db    ? ;
.bss:00413757                 db    ? ;
.bss:00413758                 db    ? ;
.bss:00413759                 db    ? ;
.bss:0041375A                 db    ? ;
.bss:0041375B                 db    ? ;
.bss:0041375C                 db    ? ;
.bss:0041375D                 db    ? ;
.bss:0041375E                 db    ? ;
.bss:0041375F                 db    ? ;
.bss:00413760                 db    ? ;
.bss:00413761                 db    ? ;
.bss:00413762                 db    ? ;
.bss:00413763                 db    ? ;
.bss:00413764                 db    ? ;
.bss:00413765                 db    ? ;
.bss:00413766                 db    ? ;
.bss:00413767                 db    ? ;
.bss:00413768                 db    ? ;
.bss:00413769                 db    ? ;
.bss:0041376A                 db    ? ;
.bss:0041376B                 db    ? ;
.bss:0041376C                 db    ? ;
.bss:0041376D                 db    ? ;
.bss:0041376E                 db    ? ;
.bss:0041376F                 db    ? ;
.bss:00413770                 db    ? ;
.bss:00413771                 db    ? ;
.bss:00413772                 db    ? ;
.bss:00413773                 db    ? ;
.bss:00413774                 db    ? ;
.bss:00413775                 db    ? ;
.bss:00413776                 db    ? ;
.bss:00413777                 db    ? ;
.bss:00413778                 db    ? ;
.bss:00413779                 db    ? ;
.bss:0041377A                 db    ? ;
.bss:0041377B                 db    ? ;
.bss:0041377C                 db    ? ;
.bss:0041377D                 db    ? ;
.bss:0041377E                 db    ? ;
.bss:0041377F                 db    ? ;
.bss:00413780                 db    ? ;
.bss:00413781                 db    ? ;
.bss:00413782                 db    ? ;
.bss:00413783                 db    ? ;
.bss:00413784                 db    ? ;
.bss:00413785                 db    ? ;
.bss:00413786                 db    ? ;
.bss:00413787                 db    ? ;
.bss:00413788                 db    ? ;
.bss:00413789                 db    ? ;
.bss:0041378A                 db    ? ;
.bss:0041378B                 db    ? ;
.bss:0041378C                 db    ? ;
.bss:0041378D                 db    ? ;
.bss:0041378E                 db    ? ;
.bss:0041378F                 db    ? ;
.bss:00413790                 db    ? ;
.bss:00413791                 db    ? ;
.bss:00413792                 db    ? ;
.bss:00413793                 db    ? ;
.bss:00413794                 db    ? ;
.bss:00413795                 db    ? ;
.bss:00413796                 db    ? ;
.bss:00413797                 db    ? ;
.bss:00413798                 db    ? ;
.bss:00413799                 db    ? ;
.bss:0041379A                 db    ? ;
.bss:0041379B                 db    ? ;
.bss:0041379C                 db    ? ;
.bss:0041379D                 db    ? ;
.bss:0041379E                 db    ? ;
.bss:0041379F                 db    ? ;
.bss:004137A0                 db    ? ;
.bss:004137A1                 db    ? ;
.bss:004137A2                 db    ? ;
.bss:004137A3                 db    ? ;
.bss:004137A4                 db    ? ;
.bss:004137A5                 db    ? ;
.bss:004137A6                 db    ? ;
.bss:004137A7                 db    ? ;
.bss:004137A8                 db    ? ;
.bss:004137A9                 db    ? ;
.bss:004137AA                 db    ? ;
.bss:004137AB                 db    ? ;
.bss:004137AC                 db    ? ;
.bss:004137AD                 db    ? ;
.bss:004137AE                 db    ? ;
.bss:004137AF                 db    ? ;
.bss:004137B0                 db    ? ;
.bss:004137B1                 db    ? ;
.bss:004137B2                 db    ? ;
.bss:004137B3                 db    ? ;
.bss:004137B4                 db    ? ;
.bss:004137B5                 db    ? ;
.bss:004137B6                 db    ? ;
.bss:004137B7                 db    ? ;
.bss:004137B8                 db    ? ;
.bss:004137B9                 db    ? ;
.bss:004137BA                 db    ? ;
.bss:004137BB                 db    ? ;
.bss:004137BC                 db    ? ;
.bss:004137BD                 db    ? ;
.bss:004137BE                 db    ? ;
.bss:004137BF                 db    ? ;
.bss:004137C0                 db    ? ;
.bss:004137C1                 db    ? ;
.bss:004137C2                 db    ? ;
.bss:004137C3                 db    ? ;
.bss:004137C4                 db    ? ;
.bss:004137C5                 db    ? ;
.bss:004137C6                 db    ? ;
.bss:004137C7                 db    ? ;
.bss:004137C8                 db    ? ;
.bss:004137C9                 db    ? ;
.bss:004137CA                 db    ? ;
.bss:004137CB                 db    ? ;
.bss:004137CC                 db    ? ;
.bss:004137CD                 db    ? ;
.bss:004137CE                 db    ? ;
.bss:004137CF                 db    ? ;
.bss:004137D0                 db    ? ;
.bss:004137D1                 db    ? ;
.bss:004137D2                 db    ? ;
.bss:004137D3                 db    ? ;
.bss:004137D4                 db    ? ;
.bss:004137D5                 db    ? ;
.bss:004137D6                 db    ? ;
.bss:004137D7                 db    ? ;
.bss:004137D8                 db    ? ;
.bss:004137D9                 db    ? ;
.bss:004137DA                 db    ? ;
.bss:004137DB                 db    ? ;
.bss:004137DC                 db    ? ;
.bss:004137DD                 db    ? ;
.bss:004137DE                 db    ? ;
.bss:004137DF                 db    ? ;
.bss:004137E0                 db    ? ;
.bss:004137E1                 db    ? ;
.bss:004137E2                 db    ? ;
.bss:004137E3                 db    ? ;
.bss:004137E4                 db    ? ;
.bss:004137E5                 db    ? ;
.bss:004137E6                 db    ? ;
.bss:004137E7                 db    ? ;
.bss:004137E8                 db    ? ;
.bss:004137E9                 db    ? ;
.bss:004137EA                 db    ? ;
.bss:004137EB                 db    ? ;
.bss:004137EC                 db    ? ;
.bss:004137ED                 db    ? ;
.bss:004137EE                 db    ? ;
.bss:004137EF                 db    ? ;
.bss:004137F0                 db    ? ;
.bss:004137F1                 db    ? ;
.bss:004137F2                 db    ? ;
.bss:004137F3                 db    ? ;
.bss:004137F4                 db    ? ;
.bss:004137F5                 db    ? ;
.bss:004137F6                 db    ? ;
.bss:004137F7                 db    ? ;
.bss:004137F8                 db    ? ;
.bss:004137F9                 db    ? ;
.bss:004137FA                 db    ? ;
.bss:004137FB                 db    ? ;
.bss:004137FC                 db    ? ;
.bss:004137FD                 db    ? ;
.bss:004137FE                 db    ? ;
.bss:004137FF                 db    ? ;
.bss:00413800                 db    ? ;
.bss:00413801                 db    ? ;
.bss:00413802                 db    ? ;
.bss:00413803                 db    ? ;
.bss:00413804                 db    ? ;
.bss:00413805                 db    ? ;
.bss:00413806                 db    ? ;
.bss:00413807                 db    ? ;
.bss:00413808                 db    ? ;
.bss:00413809                 db    ? ;
.bss:0041380A                 db    ? ;
.bss:0041380B                 db    ? ;
.bss:0041380C                 db    ? ;
.bss:0041380D                 db    ? ;
.bss:0041380E                 db    ? ;
.bss:0041380F                 db    ? ;
.bss:00413810                 db    ? ;
.bss:00413811                 db    ? ;
.bss:00413812                 db    ? ;
.bss:00413813                 db    ? ;
.bss:00413814                 db    ? ;
.bss:00413815                 db    ? ;
.bss:00413816                 db    ? ;
.bss:00413817                 db    ? ;
.bss:00413818                 db    ? ;
.bss:00413819                 db    ? ;
.bss:0041381A                 db    ? ;
.bss:0041381B                 db    ? ;
.bss:0041381C                 db    ? ;
.bss:0041381D                 db    ? ;
.bss:0041381E                 db    ? ;
.bss:0041381F                 db    ? ;
.bss:00413820                 db    ? ;
.bss:00413821                 db    ? ;
.bss:00413822                 db    ? ;
.bss:00413823                 db    ? ;
.bss:00413824                 db    ? ;
.bss:00413825                 db    ? ;
.bss:00413826                 db    ? ;
.bss:00413827                 db    ? ;
.bss:00413828                 db    ? ;
.bss:00413829                 db    ? ;
.bss:0041382A                 db    ? ;
.bss:0041382B                 db    ? ;
.bss:0041382C                 db    ? ;
.bss:0041382D                 db    ? ;
.bss:0041382E                 db    ? ;
.bss:0041382F                 db    ? ;
.bss:00413830                 db    ? ;
.bss:00413831                 db    ? ;
.bss:00413832                 db    ? ;
.bss:00413833                 db    ? ;
.bss:00413834                 db    ? ;
.bss:00413835                 db    ? ;
.bss:00413836                 db    ? ;
.bss:00413837                 db    ? ;
.bss:00413838                 db    ? ;
.bss:00413839                 db    ? ;
.bss:0041383A                 db    ? ;
.bss:0041383B                 db    ? ;
.bss:0041383C                 db    ? ;
.bss:0041383D                 db    ? ;
.bss:0041383E                 db    ? ;
.bss:0041383F                 db    ? ;
.bss:00413840                 db    ? ;
.bss:00413841                 db    ? ;
.bss:00413842                 db    ? ;
.bss:00413843                 db    ? ;
.bss:00413844                 db    ? ;
.bss:00413845                 db    ? ;
.bss:00413846                 db    ? ;
.bss:00413847                 db    ? ;
.bss:00413848                 db    ? ;
.bss:00413849                 db    ? ;
.bss:0041384A                 db    ? ;
.bss:0041384B                 db    ? ;
.bss:0041384C                 db    ? ;
.bss:0041384D                 db    ? ;
.bss:0041384E                 db    ? ;
.bss:0041384F                 db    ? ;
.bss:00413850                 db    ? ;
.bss:00413851                 db    ? ;
.bss:00413852                 db    ? ;
.bss:00413853                 db    ? ;
.bss:00413854                 db    ? ;
.bss:00413855                 db    ? ;
.bss:00413856                 db    ? ;
.bss:00413857                 db    ? ;
.bss:00413858                 db    ? ;
.bss:00413859                 db    ? ;
.bss:0041385A                 db    ? ;
.bss:0041385B                 db    ? ;
.bss:0041385C                 db    ? ;
.bss:0041385D                 db    ? ;
.bss:0041385E                 db    ? ;
.bss:0041385F                 db    ? ;
.bss:00413860                 db    ? ;
.bss:00413861                 db    ? ;
.bss:00413862                 db    ? ;
.bss:00413863                 db    ? ;
.bss:00413864                 db    ? ;
.bss:00413865                 db    ? ;
.bss:00413866                 db    ? ;
.bss:00413867                 db    ? ;
.bss:00413868                 db    ? ;
.bss:00413869                 db    ? ;
.bss:0041386A                 db    ? ;
.bss:0041386B                 db    ? ;
.bss:0041386C                 db    ? ;
.bss:0041386D                 db    ? ;
.bss:0041386E                 db    ? ;
.bss:0041386F                 db    ? ;
.bss:00413870                 db    ? ;
.bss:00413871                 db    ? ;
.bss:00413872                 db    ? ;
.bss:00413873                 db    ? ;
.bss:00413874                 db    ? ;
.bss:00413875                 db    ? ;
.bss:00413876                 db    ? ;
.bss:00413877                 db    ? ;
.bss:00413878                 db    ? ;
.bss:00413879                 db    ? ;
.bss:0041387A                 db    ? ;
.bss:0041387B                 db    ? ;
.bss:0041387C                 db    ? ;
.bss:0041387D                 db    ? ;
.bss:0041387E                 db    ? ;
.bss:0041387F                 db    ? ;
.bss:00413880                 db    ? ;
.bss:00413881                 db    ? ;
.bss:00413882                 db    ? ;
.bss:00413883                 db    ? ;
.bss:00413884                 db    ? ;
.bss:00413885                 db    ? ;
.bss:00413886                 db    ? ;
.bss:00413887                 db    ? ;
.bss:00413888                 db    ? ;
.bss:00413889                 db    ? ;
.bss:0041388A                 db    ? ;
.bss:0041388B                 db    ? ;
.bss:0041388C                 db    ? ;
.bss:0041388D                 db    ? ;
.bss:0041388E                 db    ? ;
.bss:0041388F                 db    ? ;
.bss:00413890                 db    ? ;
.bss:00413891                 db    ? ;
.bss:00413892                 db    ? ;
.bss:00413893                 db    ? ;
.bss:00413894                 db    ? ;
.bss:00413895                 db    ? ;
.bss:00413896                 db    ? ;
.bss:00413897                 db    ? ;
.bss:00413898                 db    ? ;
.bss:00413899                 db    ? ;
.bss:0041389A                 db    ? ;
.bss:0041389B                 db    ? ;
.bss:0041389C                 db    ? ;
.bss:0041389D                 db    ? ;
.bss:0041389E                 db    ? ;
.bss:0041389F                 db    ? ;
.bss:004138A0                 db    ? ;
.bss:004138A1                 db    ? ;
.bss:004138A2                 db    ? ;
.bss:004138A3                 db    ? ;
.bss:004138A4                 db    ? ;
.bss:004138A5                 db    ? ;
.bss:004138A6                 db    ? ;
.bss:004138A7                 db    ? ;
.bss:004138A8                 db    ? ;
.bss:004138A9                 db    ? ;
.bss:004138AA                 db    ? ;
.bss:004138AB                 db    ? ;
.bss:004138AC                 db    ? ;
.bss:004138AD                 db    ? ;
.bss:004138AE                 db    ? ;
.bss:004138AF                 db    ? ;
.bss:004138B0                 db    ? ;
.bss:004138B1                 db    ? ;
.bss:004138B2                 db    ? ;
.bss:004138B3                 db    ? ;
.bss:004138B4                 db    ? ;
.bss:004138B5                 db    ? ;
.bss:004138B6                 db    ? ;
.bss:004138B7                 db    ? ;
.bss:004138B8                 db    ? ;
.bss:004138B9                 db    ? ;
.bss:004138BA                 db    ? ;
.bss:004138BB                 db    ? ;
.bss:004138BC                 db    ? ;
.bss:004138BD                 db    ? ;
.bss:004138BE                 db    ? ;
.bss:004138BF                 db    ? ;
.bss:004138C0                 db    ? ;
.bss:004138C1                 db    ? ;
.bss:004138C2                 db    ? ;
.bss:004138C3                 db    ? ;
.bss:004138C4                 db    ? ;
.bss:004138C5                 db    ? ;
.bss:004138C6                 db    ? ;
.bss:004138C7                 db    ? ;
.bss:004138C8                 db    ? ;
.bss:004138C9                 db    ? ;
.bss:004138CA                 db    ? ;
.bss:004138CB                 db    ? ;
.bss:004138CC                 db    ? ;
.bss:004138CD                 db    ? ;
.bss:004138CE                 db    ? ;
.bss:004138CF                 db    ? ;
.bss:004138D0                 db    ? ;
.bss:004138D1                 db    ? ;
.bss:004138D2                 db    ? ;
.bss:004138D3                 db    ? ;
.bss:004138D4                 db    ? ;
.bss:004138D5                 db    ? ;
.bss:004138D6                 db    ? ;
.bss:004138D7                 db    ? ;
.bss:004138D8                 db    ? ;
.bss:004138D9                 db    ? ;
.bss:004138DA                 db    ? ;
.bss:004138DB                 db    ? ;
.bss:004138DC                 db    ? ;
.bss:004138DD                 db    ? ;
.bss:004138DE                 db    ? ;
.bss:004138DF                 db    ? ;
.bss:004138E0                 db    ? ;
.bss:004138E1                 db    ? ;
.bss:004138E2                 db    ? ;
.bss:004138E3                 db    ? ;
.bss:004138E4                 db    ? ;
.bss:004138E5                 db    ? ;
.bss:004138E6                 db    ? ;
.bss:004138E7                 db    ? ;
.bss:004138E8                 db    ? ;
.bss:004138E9                 db    ? ;
.bss:004138EA                 db    ? ;
.bss:004138EB                 db    ? ;
.bss:004138EC                 db    ? ;
.bss:004138ED                 db    ? ;
.bss:004138EE                 db    ? ;
.bss:004138EF                 db    ? ;
.bss:004138F0                 db    ? ;
.bss:004138F1                 db    ? ;
.bss:004138F2                 db    ? ;
.bss:004138F3                 db    ? ;
.bss:004138F4                 db    ? ;
.bss:004138F5                 db    ? ;
.bss:004138F6                 db    ? ;
.bss:004138F7                 db    ? ;
.bss:004138F8                 db    ? ;
.bss:004138F9                 db    ? ;
.bss:004138FA                 db    ? ;
.bss:004138FB                 db    ? ;
.bss:004138FC                 db    ? ;
.bss:004138FD                 db    ? ;
.bss:004138FE                 db    ? ;
.bss:004138FF                 db    ? ;
.bss:00413900                 db    ? ;
.bss:00413901                 db    ? ;
.bss:00413902                 db    ? ;
.bss:00413903                 db    ? ;
.bss:00413904                 db    ? ;
.bss:00413905                 db    ? ;
.bss:00413906                 db    ? ;
.bss:00413907                 db    ? ;
.bss:00413908                 db    ? ;
.bss:00413909                 db    ? ;
.bss:0041390A                 db    ? ;
.bss:0041390B                 db    ? ;
.bss:0041390C                 db    ? ;
.bss:0041390D                 db    ? ;
.bss:0041390E                 db    ? ;
.bss:0041390F                 db    ? ;
.bss:00413910 dword_413910    dd ?                    ; DATA XREF: sub_40CA20+8↑r
.bss:00413910                                         ; sub_40CB30:loc_40CBB2↑w ...
.bss:00413914                 align 10h
.bss:00413920 ; struct _OSVERSIONINFOA VersionInformation
.bss:00413920 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_40CB30:loc_40CB50↑o
.bss:00413920                                         ; sub_40CB30+2C↑w ...
.bss:004139B4 word_4139B4     dw ?                    ; DATA XREF: sub_40CB30:loc_40CBE3↑r
.bss:004139B6                 align 4
.bss:004139B8 word_4139B8     dw ?                    ; DATA XREF: .text:loc_40C5A6↑r
.bss:004139B8                                         ; .text:0040C5D4↑r ...
.bss:004139BA byte_4139BA     db ?                    ; DATA XREF: .text:0040C565↑r
.bss:004139BB                 align 10h
.bss:004139C0 dword_4139C0    dd ?                    ; DATA XREF: sub_40CB30+6↑r
.bss:004139C0                                         ; sub_40CB30+75↑w
.bss:004139C4                 align 10h
.bss:004139D0 ; CHAR byte_4139D0[304]
.bss:004139D0 byte_4139D0     db 130h dup(?)          ; DATA XREF: sub_40CF90+17↑o
.bss:004139D0                                         ; sub_40CF90+26↑o
.bss:00413B00 dword_413B00    dd ?                    ; DATA XREF: sub_401CD0+3A↑w
.bss:00413B00                                         ; sub_401CD0+102↑r ...
.bss:00413B04                 align 20h
.bss:00413B20 dword_413B20    dd ?                    ; DATA XREF: sub_401CD0:loc_402008↑r
.bss:00413B20                                         ; sub_406040+71↑w ...
.bss:00413B24                 align 10h
.bss:00413B30 dword_413B30    dd ?                    ; CODE XREF: sub_4084D4+63↑p
.bss:00413B30                                         ; DATA XREF: sub_4083D0+1E↑r ...
.bss:00413B34                 align 10h
.bss:00413B40 dword_413B40    dd ?                    ; DATA XREF: sub_4083D0+4E↑w
.bss:00413B40                                         ; sub_4084D4+AB↑w
.bss:00413B44                 db    ? ;
.bss:00413B45                 db    ? ;
.bss:00413B46                 db    ? ;
.bss:00413B47                 db    ? ;
.bss:00413B48                 db    ? ;
.bss:00413B49                 db    ? ;
.bss:00413B4A                 db    ? ;
.bss:00413B4B                 db    ? ;
.bss:00413B4C                 db    ? ;
.bss:00413B4D                 db    ? ;
.bss:00413B4E                 db    ? ;
.bss:00413B4F                 db    ? ;
.bss:00413B50                 db    ? ;
.bss:00413B51                 db    ? ;
.bss:00413B52                 db    ? ;
.bss:00413B53                 db    ? ;
.bss:00413B54                 db    ? ;
.bss:00413B55                 db    ? ;
.bss:00413B56                 db    ? ;
.bss:00413B57                 db    ? ;
.bss:00413B58                 db    ? ;
.bss:00413B59                 db    ? ;
.bss:00413B5A                 db    ? ;
.bss:00413B5B                 db    ? ;
.bss:00413B5C                 db    ? ;
.bss:00413B5D                 db    ? ;
.bss:00413B5E                 db    ? ;
.bss:00413B5F                 db    ? ;
.bss:00413B60                 db    ? ;
.bss:00413B61                 db    ? ;
.bss:00413B62                 db    ? ;
.bss:00413B63                 db    ? ;
.bss:00413B64                 db    ? ;
.bss:00413B65                 db    ? ;
.bss:00413B66                 db    ? ;
.bss:00413B67                 db    ? ;
.bss:00413B68                 db    ? ;
.bss:00413B69                 db    ? ;
.bss:00413B6A                 db    ? ;
.bss:00413B6B                 db    ? ;
.bss:00413B6C                 db    ? ;
.bss:00413B6D                 db    ? ;
.bss:00413B6E                 db    ? ;
.bss:00413B6F                 db    ? ;
.bss:00413B70 dword_413B70    dd ?                    ; DATA XREF: sub_4084D4+13↑r
.bss:00413B74                 align 800h
.bss:00413B74 _bss            ends
.bss:00413B74
.idata:00414000 ; Section 4. (virtual address 00014000)
.idata:00414000 ; Virtual size                  : 00000E3C (   3644.)
.idata:00414000 ; Section size in file          : 00001000 (   4096.)
.idata:00414000 ; Offset to raw data for section: 00010800
.idata:00414000 ; Flags C0000040: Data Readable Writable
.idata:00414000 ; Alignment     : default
.idata:00414000 ; ===========================================================================
.idata:00414000
.idata:00414000 ; Segment type: Externs
.idata:00414000 ; _idata
.idata:00414000
.idata:00414001
.idata:004142C0 ;
.idata:004142C0 ; Imports from libintl3.dll
.idata:004142C0 ;
.idata:004142C0                 extrn __imp_libintl_bindtextdomain:dword
.idata:004142C0                                         ; CODE XREF: sub_401CD0+6A↑p
.idata:004142C0                                         ; DATA XREF: sub_401CD0+6A↑r ...
.idata:004142C4                 extrn libintl_gettext:dword
.idata:004142C4                                         ; CODE XREF: sub_401CD0+F6↑p
.idata:004142C4                                         ; sub_401CD0+177↑p ...
.idata:004142C8                 extrn libintl_textdomain:dword
.idata:004142C8                                         ; CODE XREF: sub_401CD0+77↑p
.idata:004142C8                                         ; DATA XREF: sub_401CD0+77↑r ...
.idata:004142CC
.idata:004142D4 ;
.idata:004142D4 ; Imports from ADVAPI32.DLL
.idata:004142D4 ;
.idata:004142D4 ; BOOL (__stdcall *GetUserNameA)(LPSTR lpBuffer, LPDWORD pcbBuffer)
.idata:004142D4                 extrn __imp_GetUserNameA:dword
.idata:004142D4                                         ; DATA XREF: GetUserNameA↑r
.idata:004142D8 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:004142D8                 extrn __imp_RegCloseKey:dword
.idata:004142D8                                         ; DATA XREF: RegCloseKey↑r
.idata:004142DC ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:004142DC                 extrn __imp_RegOpenKeyExA:dword
.idata:004142DC                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:004142E0 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:004142E0                 extrn __imp_RegQueryValueExA:dword
.idata:004142E0                                         ; DATA XREF: RegQueryValueExA↑r
.idata:004142E4
.idata:004142EC ;
.idata:004142EC ; Imports from KERNEL32.dll
.idata:004142EC ;
.idata:004142EC ; BOOL (__stdcall *AreFileApisANSI)()
.idata:004142EC                 extrn __imp_AreFileApisANSI:dword
.idata:004142EC                                         ; DATA XREF: AreFileApisANSI↑r
.idata:004142F0 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:004142F0                 extrn __imp_CloseHandle:dword
.idata:004142F0                                         ; DATA XREF: CloseHandle↑r
.idata:004142F4 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:004142F4                 extrn __imp_CreateDirectoryA:dword
.idata:004142F4                                         ; DATA XREF: CreateDirectoryA↑r
.idata:004142F8 ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:004142F8                 extrn __imp_CreateFileA:dword
.idata:004142F8                                         ; DATA XREF: CreateFileA↑r
.idata:004142FC ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:004142FC                 extrn __imp_DeviceIoControl:dword
.idata:004142FC                                         ; DATA XREF: DeviceIoControl↑r
.idata:00414300 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00414300                 extrn __imp_ExitProcess:dword
.idata:00414300                                         ; DATA XREF: ExitProcess↑r
.idata:00414304 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:00414304                 extrn __imp_FindClose:dword
.idata:00414304                                         ; DATA XREF: FindClose↑r
.idata:00414308 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:00414308                 extrn __imp_FindFirstFileA:dword
.idata:00414308                                         ; DATA XREF: FindFirstFileA↑r
.idata:0041430C ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:0041430C                 extrn __imp_FindNextFileA:dword
.idata:0041430C                                         ; DATA XREF: FindNextFileA↑r
.idata:00414310 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:00414310                 extrn __imp_FreeLibrary:dword
.idata:00414310                                         ; DATA XREF: FreeLibrary↑r
.idata:00414314 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00414314                 extrn __imp_GetCurrentDirectoryA:dword
.idata:00414314                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:00414318 ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:00414318                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:00414318                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:0041431C ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:0041431C                 extrn __imp_GetDriveTypeA:dword
.idata:0041431C                                         ; DATA XREF: GetDriveTypeA↑r
.idata:00414320 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:00414320                 extrn __imp_GetFileAttributesA:dword
.idata:00414320                                         ; DATA XREF: GetFileAttributesA↑r
.idata:00414324 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:00414324                 extrn __imp_GetFileInformationByHandle:dword
.idata:00414324                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:00414328 ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:00414328                 extrn __imp_GetFileSize:dword
.idata:00414328                                         ; DATA XREF: GetFileSize↑r
.idata:0041432C ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:0041432C                 extrn __imp_GetFileType:dword
.idata:0041432C                                         ; DATA XREF: GetFileType↑r
.idata:00414330 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:00414330                 extrn __imp_GetFullPathNameA:dword
.idata:00414330                                         ; DATA XREF: GetFullPathNameA↑r
.idata:00414334 ; DWORD (__stdcall *GetLastError)()
.idata:00414334                 extrn __imp_GetLastError:dword
.idata:00414334                                         ; DATA XREF: GetLastError↑r
.idata:00414338 ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00414338                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:00414338                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:0041433C ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:0041433C                 extrn __imp_GetModuleFileNameA:dword
.idata:0041433C                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:00414340 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:00414340                 extrn __imp_GetModuleHandleA:dword
.idata:00414340                                         ; DATA XREF: GetModuleHandleA↑r
.idata:00414344 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:00414344                 extrn __imp_GetProcAddress:dword
.idata:00414344                                         ; DATA XREF: GetProcAddress↑r
.idata:00414348 ; HANDLE (__stdcall *GetProcessHeap)()
.idata:00414348                 extrn __imp_GetProcessHeap:dword
.idata:00414348                                         ; DATA XREF: GetProcessHeap↑r
.idata:0041434C ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:0041434C                 extrn __imp_GetShortPathNameA:dword
.idata:0041434C                                         ; DATA XREF: GetShortPathNameA↑r
.idata:00414350 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:00414350                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:00414350                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:00414354 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:00414354                 extrn __imp_GetTimeZoneInformation:dword
.idata:00414354                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:00414358 ; DWORD (__stdcall *GetVersion)()
.idata:00414358                 extrn __imp_GetVersion:dword
.idata:00414358                                         ; DATA XREF: GetVersion↑r
.idata:0041435C ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:0041435C                 extrn __imp_GetVersionExA:dword
.idata:0041435C                                         ; DATA XREF: GetVersionExA↑r
.idata:00414360 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:00414360                 extrn __imp_GetVolumeInformationA:dword
.idata:00414360                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:00414364 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:00414364                 extrn __imp_HeapAlloc:dword
.idata:00414364                                         ; DATA XREF: HeapAlloc↑r
.idata:00414368 ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:00414368                 extrn __imp_HeapFree:dword
.idata:00414368                                         ; DATA XREF: HeapFree↑r
.idata:0041436C ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:0041436C                 extrn __imp_LoadLibraryA:dword
.idata:0041436C                                         ; DATA XREF: LoadLibraryA↑r
.idata:00414370 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:00414370                 extrn __imp_MultiByteToWideChar:dword
.idata:00414370                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:00414374 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:00414374                 extrn __imp_PeekNamedPipe:dword
.idata:00414374                                         ; DATA XREF: PeekNamedPipe↑r
.idata:00414378 ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:00414378                 extrn __imp_SetErrorMode:dword
.idata:00414378                                         ; DATA XREF: SetErrorMode↑r
.idata:0041437C ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0041437C                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0041437C                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00414380 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:00414380                 extrn __imp_UnlockFile:dword
.idata:00414380                                         ; DATA XREF: UnlockFile↑r
.idata:00414384 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:00414384                 extrn __imp_lstrcmpiA:dword
.idata:00414384                                         ; DATA XREF: lstrcmpiA↑r
.idata:00414388 ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:00414388                 extrn __imp_lstrcpyA:dword
.idata:00414388                                         ; DATA XREF: lstrcpyA↑r
.idata:0041438C
.idata:00414394 ;
.idata:00414394 ; Imports from msvcrt.dll
.idata:00414394 ;
.idata:00414394 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:00414394                 extrn __imp__chmod:dword
.idata:00414394                                         ; DATA XREF: _chmod↑r
.idata:00414398 ; int (__cdecl *_getpid)()
.idata:00414398                 extrn __imp__getpid:dword
.idata:00414398                                         ; DATA XREF: _getpid↑r
.idata:0041439C ; char *(__cdecl *_strdup)(const char *String)
.idata:0041439C                 extrn __imp__strdup:dword
.idata:0041439C                                         ; DATA XREF: _strdup↑r
.idata:004143A0 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:004143A0                 extrn __imp__stricmp:dword
.idata:004143A0                                         ; DATA XREF: _stricmp↑r
.idata:004143A4 ; char *tzname[2]
.idata:004143A4                 extrn _tzname:dword     ; DATA XREF: sub_403090+1139↑r
.idata:004143A8 ; void (__cdecl *_tzset)()
.idata:004143A8                 extrn __imp__tzset:dword
.idata:004143A8                                         ; DATA XREF: _tzset↑r
.idata:004143AC
.idata:004143B4 ;
.idata:004143B4 ; Imports from MSVCP60.DLL
.idata:004143B4 ;
.idata:004143B4 ; size_t (__cdecl *mbrlen)(const char *Ch, size_t SizeInBytes, mbstate_t *State)
.idata:004143B4                 extrn __imp_mbrlen:dword
.idata:004143B4                                         ; DATA XREF: mbrlen↑r
.idata:004143B8 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:004143B8                 extrn __imp_mbrtowc:dword
.idata:004143B8                                         ; DATA XREF: mbrtowc↑r
.idata:004143BC
.idata:004143C4 ;
.idata:004143C4 ; Imports from msvcrt.dll
.idata:004143C4 ;
.idata:004143C4                 extrn __imp___getmainargs:dword
.idata:004143C4                                         ; DATA XREF: __getmainargs↑r
.idata:004143C8 ; int _mb_cur_max
.idata:004143C8                 extrn __mb_cur_max:dword
.idata:004143C8                                         ; DATA XREF: sub_403090+662↑r
.idata:004143C8                                         ; sub_403090+82A↑r ...
.idata:004143CC ; char ***(__cdecl *__p__environ)()
.idata:004143CC                 extrn __imp___p__environ:dword
.idata:004143CC                                         ; DATA XREF: __p__environ↑r
.idata:004143D0 ; int *(__cdecl *__p__fmode)()
.idata:004143D0                 extrn __imp___p__fmode:dword
.idata:004143D0                                         ; DATA XREF: __p__fmode↑r
.idata:004143D4 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004143D4                 extrn __set_app_type:dword
.idata:004143D4                                         ; CODE XREF: start+D↑p
.idata:004143D4                                         ; .text:0040102D↑p
.idata:004143D4                                         ; DATA XREF: ...
.idata:004143D8                 extrn __imp__assert:dword
.idata:004143D8                                         ; DATA XREF: _assert↑r
.idata:004143DC ; void (__cdecl *_cexit)()
.idata:004143DC                 extrn __imp__cexit:dword
.idata:004143DC                                         ; DATA XREF: _cexit↑r
.idata:004143E0 ; int (__cdecl *_close)(int FileHandle)
.idata:004143E0                 extrn __imp__close:dword
.idata:004143E0                                         ; DATA XREF: _close↑r
.idata:004143E4 ; int *(__cdecl *_errno)()
.idata:004143E4                 extrn __imp__errno:dword
.idata:004143E4                                         ; DATA XREF: _errno↑r
.idata:004143E8 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:004143E8                 extrn __imp__fdopen:dword
.idata:004143E8                                         ; DATA XREF: _fdopen↑r
.idata:004143EC ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:004143EC                 extrn __imp__filelengthi64:dword
.idata:004143EC                                         ; DATA XREF: _filelengthi64↑r
.idata:004143F0 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004143F0                 extrn __imp__flsbuf:dword
.idata:004143F0                                         ; DATA XREF: _flsbuf↑r
.idata:004143F4 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:004143F4                 extrn __imp__get_osfhandle:dword
.idata:004143F4                                         ; DATA XREF: _get_osfhandle↑r
.idata:004143F8 ; FILE iob[]
.idata:004143F8                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004143F8                                         ; sub_401080+75↑r ...
.idata:004143FC ; int (__cdecl *_isctype)(int C, int Type)
.idata:004143FC                 extrn __imp__isctype:dword
.idata:004143FC                                         ; DATA XREF: _isctype↑r
.idata:00414400 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:00414400                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:00414400                                         ; DATA XREF: .text:0040106C↑r
.idata:00414404 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:00414404                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:00414408 ; const unsigned __int16 *pctype
.idata:00414408                 extrn _pctype:dword     ; DATA XREF: sub_403090:loc_403749↑r
.idata:00414408                                         ; sub_403090:loc_403918↑r ...
.idata:0041440C ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0041440C                 extrn __imp__setmode:dword
.idata:0041440C                                         ; DATA XREF: _setmode↑r
.idata:00414410 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:00414410                 extrn __imp__stricmp_0:dword
.idata:00414410                                         ; DATA XREF: _stricmp_0↑r
.idata:00414414 ; void (__cdecl __noreturn *abort)()
.idata:00414414                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:00414418 ; char *(__cdecl *asctime)(const struct tm *Tm)
.idata:00414418                 extrn __imp_asctime:dword
.idata:00414418                                         ; DATA XREF: asctime↑r
.idata:0041441C ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:0041441C                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:0041441C                                         ; DATA XREF: sub_401040+C↑r
.idata:00414420 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:00414420                 extrn __imp_calloc:dword
.idata:00414420                                         ; DATA XREF: calloc↑r
.idata:00414424 ; char *(__cdecl *ctime)(const __time32_t *const Time)
.idata:00414424                 extrn __imp_ctime:dword ; DATA XREF: ctime↑r
.idata:00414428 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00414428                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0041442C ; int (__cdecl *fclose)(FILE *Stream)
.idata:0041442C                 extrn __imp_fclose:dword
.idata:0041442C                                         ; DATA XREF: fclose↑r
.idata:00414430 ; int (__cdecl *fflush)(FILE *Stream)
.idata:00414430                 extrn __imp_fflush:dword
.idata:00414430                                         ; DATA XREF: fflush↑r
.idata:00414434 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:00414434                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:00414438 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:00414438                 extrn __imp_fprintf:dword
.idata:00414438                                         ; DATA XREF: fprintf↑r
.idata:0041443C ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0041443C                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00414440 ; void (__cdecl *free)(void *Block)
.idata:00414440                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:00414444 ; char *(__cdecl *getenv)(const char *VarName)
.idata:00414444                 extrn __imp_getenv:dword
.idata:00414444                                         ; DATA XREF: getenv↑r
.idata:00414448 ; struct tm *(__cdecl *gmtime)(const __time32_t *const Time)
.idata:00414448                 extrn __imp_gmtime:dword
.idata:00414448                                         ; DATA XREF: gmtime↑r
.idata:0041444C ; int (__cdecl *isalpha)(int C)
.idata:0041444C                 extrn __imp_isalpha:dword
.idata:0041444C                                         ; DATA XREF: isalpha↑r
.idata:00414450 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:00414450                 extrn __imp_iswctype:dword
.idata:00414450                                         ; DATA XREF: iswctype↑r
.idata:00414454 ; struct tm *(__cdecl *localtime)(const __time32_t *const Time)
.idata:00414454                 extrn __imp_localtime:dword
.idata:00414454                                         ; DATA XREF: localtime↑r
.idata:00414458 ; void *(__cdecl *malloc)(size_t Size)
.idata:00414458                 extrn __imp_malloc:dword
.idata:00414458                                         ; DATA XREF: malloc↑r
.idata:0041445C ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0041445C                 extrn __imp_memcpy:dword
.idata:0041445C                                         ; DATA XREF: memcpy↑r
.idata:00414460 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00414460                 extrn __imp_memset:dword
.idata:00414460                                         ; DATA XREF: memset↑r
.idata:00414464 ; __time32_t (__cdecl *mktime)(struct tm *const Tm)
.idata:00414464                 extrn __imp_mktime:dword
.idata:00414464                                         ; DATA XREF: mktime↑r
.idata:00414468 ; int (*printf)(const char *const Format, ...)
.idata:00414468                 extrn __imp_printf:dword
.idata:00414468                                         ; DATA XREF: printf↑r
.idata:0041446C ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:0041446C                 extrn __imp_realloc:dword
.idata:0041446C                                         ; DATA XREF: realloc↑r
.idata:00414470 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00414470                 extrn __imp_setlocale:dword
.idata:00414470                                         ; DATA XREF: setlocale↑r
.idata:00414474 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00414474                 extrn __imp_signal:dword
.idata:00414474                                         ; DATA XREF: signal↑r
.idata:00414478 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:00414478                 extrn __imp_sprintf:dword
.idata:00414478                                         ; DATA XREF: sprintf↑r
.idata:0041447C ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:0041447C                 extrn __imp_sscanf:dword
.idata:0041447C                                         ; DATA XREF: sscanf↑r
.idata:00414480 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:00414480                 extrn __imp_strcat:dword
.idata:00414480                                         ; DATA XREF: strcat↑r
.idata:00414484 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00414484                 extrn __imp_strchr:dword
.idata:00414484                                         ; DATA XREF: strchr↑r
.idata:00414488 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00414488                 extrn __imp_strcmp:dword
.idata:00414488                                         ; DATA XREF: strcmp↑r
.idata:0041448C ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:0041448C                 extrn __imp_strcpy:dword
.idata:0041448C                                         ; DATA XREF: strcpy↑r
.idata:00414490 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00414490                 extrn __imp_strerror:dword
.idata:00414490                                         ; DATA XREF: strerror↑r
.idata:00414494 ; size_t (__cdecl *strftime)(char *Buffer, size_t SizeInBytes, const char *Format, const struct tm *Tm)
.idata:00414494                 extrn __imp_strftime:dword
.idata:00414494                                         ; DATA XREF: strftime↑r
.idata:00414498 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00414498                 extrn __imp_strlen:dword
.idata:00414498                                         ; DATA XREF: strlen↑r
.idata:0041449C ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0041449C                 extrn __imp_strncmp:dword
.idata:0041449C                                         ; DATA XREF: strncmp↑r
.idata:004144A0 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:004144A0                 extrn __imp_strncpy:dword
.idata:004144A0                                         ; DATA XREF: strncpy↑r
.idata:004144A4 ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:004144A4                 extrn __imp_strpbrk:dword
.idata:004144A4                                         ; DATA XREF: strpbrk↑r
.idata:004144A8 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:004144A8                 extrn __imp_strrchr:dword
.idata:004144A8                                         ; DATA XREF: strrchr↑r
.idata:004144AC ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:004144AC                 extrn __imp_strspn:dword
.idata:004144AC                                         ; DATA XREF: strspn↑r
.idata:004144B0 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:004144B0                 extrn __imp_strstr:dword
.idata:004144B0                                         ; DATA XREF: strstr↑r
.idata:004144B4 ; int (__cdecl *tolower)(int C)
.idata:004144B4                 extrn __imp_tolower:dword
.idata:004144B4                                         ; DATA XREF: tolower↑r
.idata:004144B8 ; int (__cdecl *toupper)(int C)
.idata:004144B8                 extrn __imp_toupper:dword
.idata:004144B8                                         ; DATA XREF: toupper↑r
.idata:004144BC ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:004144BC                 extrn __imp_vfprintf:dword
.idata:004144BC                                         ; DATA XREF: vfprintf↑r
.idata:004144C0
.idata:004144C8 ;
.idata:004144C8 ; Imports from OLE32.dll
.idata:004144C8 ;
.idata:004144C8 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:004144C8                 extrn __imp_CoCreateInstance:dword
.idata:004144C8                                         ; DATA XREF: CoCreateInstance↑r
.idata:004144CC ; void (__stdcall *CoUninitialize)()
.idata:004144CC                 extrn __imp_CoUninitialize:dword
.idata:004144CC                                         ; DATA XREF: CoUninitialize↑r
.idata:004144D0 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:004144D0                 extrn __imp_OleInitialize:dword
.idata:004144D0                                         ; DATA XREF: OleInitialize↑r
.idata:004144D4
.idata:004144D4
.idata:004144D4
.idata:004144D4                 end start
