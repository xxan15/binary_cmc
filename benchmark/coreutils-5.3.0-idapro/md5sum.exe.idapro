.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 29B4AC595CB41546F2CE6061781F1699B50A009BADA377633827A027CB69AA7D
.text:00401000 ; Input MD5    : FA52DE2FE383CBD65744B8A9A8FBD7CF
.text:00401000 ; Input CRC32  : 6694A671
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/md5sum.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A258 (Wed Apr 20 18:41:28 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00008720 (  34592.)
.text:00401000 ; Section size in file          : 00008800 (  34816.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_4019A0+71↓p
.text:00401040                                         ; .text:004093B0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_409350
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_40A000
.text:004010A2                 mov     edx, dword_40A060
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_40A004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_40A080, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_40A080
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_409320
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_40A000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_40A004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_4019A0
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_409350
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aBinary         db 'binary',0           ; DATA XREF: .text:off_4012C0↓o
.text:00401287 aCheck          db 'check',0            ; DATA XREF: .text:004012D0↓o
.text:0040128D aStatus         db 'status',0           ; DATA XREF: .text:004012E0↓o
.text:00401294 aText           db 'text',0             ; DATA XREF: .text:004012F0↓o
.text:00401299 aWarn           db 'warn',0             ; DATA XREF: .text:00401300↓o
.text:0040129E aHelp           db 'help',0             ; DATA XREF: .text:00401310↓o
.text:004012A3 aVersion        db 'version',0          ; DATA XREF: .text:00401320↓o
.text:004012AB                 align 20h
.text:004012C0 off_4012C0      dd offset aBinary       ; DATA XREF: sub_4019A0+8B↓o
.text:004012C0                                         ; "binary"
.text:004012C4                 dd 2 dup(0)
.text:004012CC                 dd 62h
.text:004012D0                 dd offset aCheck        ; "check"
.text:004012D4                 dd 2 dup(0)
.text:004012DC                 dd 63h
.text:004012E0                 dd offset aStatus       ; "status"
.text:004012E4                 dd 2 dup(0)
.text:004012EC                 dd 80h
.text:004012F0                 dd offset aText         ; "text"
.text:004012F4                 dd 2 dup(0)
.text:004012FC                 dd 74h
.text:00401300                 dd offset aWarn         ; "warn"
.text:00401304                 dd 2 dup(0)
.text:0040130C                 dd 77h
.text:00401310                 dd offset aHelp         ; "help"
.text:00401314                 dd 2 dup(0)
.text:0040131C                 dd 0FFFFFF7Eh
.text:00401320                 dd offset aVersion      ; "version"
.text:00401324                 dd 2 dup(0)
.text:0040132C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401340 byte_401340     db 30h                  ; DATA XREF: sub_4025F0+473↓r
.text:00401340                                         ; sub_4025F0+497↓r
.text:00401341                 db 31h, 32h, 33h
.text:00401344                 dd 37363534h, 62613938h, 66656463h
.text:00401350 ; const char Locale
.text:00401350 Locale          db 0                    ; DATA XREF: sub_4019A0+2E↓o
.text:00401351                 db 0EBh, 0Dh, 90h
.text:00401354                 align 10h
.text:00401360 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401360                                         ; DATA XREF: sub_4019A0+48↓o
.text:00401383 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_4019A0+50↓o
.text:00401383                                         ; sub_4019A0+5D↓o
.text:0040138D ; const char aBctw[]
.text:0040138D aBctw           db 'bctw',0             ; DATA XREF: sub_4019A0+93↓o
.text:00401392                 align 10h
.text:004013A0 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:004013A0                                         ; DATA XREF: sub_4019A0:loc_401A81↓o
.text:004013A0                                         ; .text:0040214C↓o
.text:004013C7 aScottMiller    db 'Scott Miller',0     ; DATA XREF: sub_4019A0+12F↓o
.text:004013D4 aUlrichDrepper  db 'Ulrich Drepper',0   ; DATA XREF: sub_4019A0+137↓o
.text:004013E3 a530            db '5.3.0',0            ; DATA XREF: sub_4019A0+13F↓o
.text:004013E9 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_4019A0+147↓o
.text:004013F7 ; const FILE stru_4013F7
.text:004013F7 stru_4013F7     FILE <31616873h, 6D7573h, 7335646Dh, 90006D75h, 90909090h, 90909090h, \
.text:004013F7                                         ; DATA XREF: sub_4019A0+151↓o
.text:004013F7                                         ; sub_4019A0:loc_401B14↓o
.text:004013F7                       90909090h, 90909090h>
.text:00401417                 db  90h
.text:00401418                 db  90h
.text:00401419                 db  90h
.text:0040141A                 db  90h
.text:0040141B                 db  90h
.text:0040141C                 db  90h
.text:0040141D                 db  90h
.text:0040141E                 db  90h
.text:0040141F                 db  90h
.text:00401420 aUsageSOptionFi db 'Usage: %s [OPTION] [FILE]...',0Ah
.text:00401420                                         ; DATA XREF: sub_4019A0:loc_401B20↓o
.text:00401420                                         ; .text:loc_402180↓o
.text:00401420                 db '  or:  %s [OPTION] --check [FILE]',0Ah
.text:00401420                 db 'Print or check %s (%d-bit) checksums.',0Ah
.text:00401420                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.text:004014BC aMd5            db 'MD5',0              ; DATA XREF: sub_4019A0+19D↓o
.text:004014BC                                         ; sub_4019A0:loc_401C53↓o ...
.text:004014C0 ; const char Str[]
.text:004014C0 Str             db 'SHA1',0             ; DATA XREF: sub_4019A0+1B3↓o
.text:004014C0                                         ; sub_4019A0+1EC↓o ...
.text:004014C5                 align 20h
.text:004014E0 aBBinaryReadFil db 0Ah                  ; DATA XREF: sub_4019A0+1D2↓o
.text:004014E0                                         ; .text:004021D1↓o
.text:004014E0                 db '  -b, --binary            read files in binary mode (default on D'
.text:004014E0                 db 'OS/Windows)',0Ah
.text:004014E0                 db '  -c, --check             check %s sums against given list',0Ah
.text:004014E0                 db '  -t, --text              read files in text mode (default)',0Ah
.text:004014E0                 db 0Ah,0
.text:004015A7                 align 20h
.text:004015C0 aTheFollowingTw db 'The following two options are useful only when verifying checksum'
.text:004015C0                                         ; DATA XREF: sub_4019A0+1FD↓o
.text:004015C0                                         ; .text:004021FC↓o
.text:004015C0                 db 's:',0Ah
.text:004015C0                 db '      --status            don',27h,'t output anything, status cod'
.text:004015C0                 db 'e shows success',0Ah
.text:004015C0                 db '  -w, --warn              warn about improperly formated checksum'
.text:004015C0                 db ' lines',0Ah
.text:004015C0                 db 0Ah,0
.text:00401699                 align 10h
.text:004016A0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004016A0                                         ; DATA XREF: sub_4019A0+21F↓o
.text:004016A0                                         ; .text:0040221E↓o
.text:004016CD                 align 20h
.text:004016E0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:004016E0                                         ; DATA XREF: sub_4019A0+241↓o
.text:004016E0                                         ; .text:00402240↓o
.text:00401716                 align 10h
.text:00401720 aTheSumsAreComp db 0Ah                  ; DATA XREF: sub_4019A0+263↓o
.text:00401720                                         ; .text:00402262↓o
.text:00401720                 db 'The sums are computed as described in %s.  When checking, the inp'
.text:00401720                 db 'ut',0Ah
.text:00401720                 db 'should be a former output of this program.  The default mode is t'
.text:00401720                 db 'o print',0Ah
.text:00401720                 db 'a line with checksum, a character indicating type (`*',27h,' for '
.text:00401720                 db 'binary, ` ',27h,' for',0Ah
.text:00401720                 db 'text), and name for each FILE.',0Ah,0
.text:00401819 aFips1801       db 'FIPS-180-1',0       ; DATA XREF: sub_4019A0+279↓o
.text:00401819                                         ; .text:00402278↓o
.text:00401824 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4019A0+28A↓o
.text:00401824                                         ; .text:00402289↓o
.text:00401824                 db 'Report bugs to <%s>.',0Ah,0
.text:0040183B aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:0040183B                                         ; DATA XREF: sub_4019A0+297↓o
.text:0040183B                                         ; .text:00402296↓o
.text:00401851 aRfc1321        db 'RFC 1321',0         ; DATA XREF: sub_4019A0:loc_401C4C↓o
.text:00401851                                         ; .text:loc_4022B0↓o
.text:0040185A ; const char FileName[]
.text:0040185A FileName        db '-',0                ; DATA XREF: sub_4019A0+382↓o
.text:0040185A                                         ; sub_4019A0+77A↓o ...
.text:0040185C aStandardInput  db 'standard input',0   ; DATA XREF: sub_4019A0+3C5↓o
.text:0040185C                                         ; sub_4025F0+5B↓o
.text:0040186B aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: sub_4019A0+400↓o
.text:0040187C                 align 10h
.text:00401880 aOnlyOneOperand db 'Only one operand may be specified when using --check.',0
.text:00401880                                         ; DATA XREF: sub_4019A0+42B↓o
.text:004018B6 ; const char Format[]
.text:004018B6 Format          db '%s',0Ah,0           ; DATA XREF: sub_4019A0+438↓o
.text:004018BA                 align 10h
.text:004018C0 aTheBinaryAndTe db 'the --binary and --text options are meaningless when verifying ch'
.text:004018C0                                         ; DATA XREF: sub_4019A0:loc_401DFA↓o
.text:004018C0                 db 'ecksums',0
.text:00401909 asc_401909      db '\\',0               ; DATA XREF: sub_4019A0+624↓o
.text:0040190C aN              db '\n',0               ; DATA XREF: sub_4019A0+64F↓o
.text:0040190F ; const char a02x[]
.text:0040190F a02x            db '%02x',0             ; DATA XREF: sub_4019A0+71B↓o
.text:00401914                 align 10h
.text:00401920 aTheWarnOptionI db 'the --warn option is meaningful only when verifying checksums',0
.text:00401920                                         ; DATA XREF: sub_4019A0:loc_402127↓o
.text:0040195E                 align 10h
.text:00401960 aTheStatusOptio db 'the --status option is meaningful only when verifying checksums',0
.text:00401960                                         ; DATA XREF: sub_4019A0:loc_402133↓o
.text:004019A0
.text:004019A0 ; =============== S U B R O U T I N E =======================================
.text:004019A0
.text:004019A0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:004019A0
.text:004019A0 sub_4019A0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:004019A0
.text:004019A0 Category        = dword ptr -68h
.text:004019A0 Locale          = dword ptr -64h
.text:004019A0 ElementCount    = dword ptr -60h
.text:004019A0 Stream          = dword ptr -5Ch
.text:004019A0 var_58          = byte ptr -58h
.text:004019A0 var_54          = dword ptr -54h
.text:004019A0 var_50          = dword ptr -50h
.text:004019A0 var_3B          = byte ptr -3Bh
.text:004019A0 var_3A          = byte ptr -3Ah
.text:004019A0 var_39          = byte ptr -39h
.text:004019A0 var_38          = dword ptr -38h
.text:004019A0 arg_0           = dword ptr  8
.text:004019A0 arg_4           = dword ptr  0Ch
.text:004019A0
.text:004019A0                 push    ebp
.text:004019A1                 xor     eax, eax
.text:004019A3                 mov     ebp, esp
.text:004019A5                 push    edi
.text:004019A6                 push    esi
.text:004019A7                 push    ebx
.text:004019A8                 sub     esp, 5Ch
.text:004019AB                 xor     ebx, ebx
.text:004019AD                 and     esp, 0FFFFFFF0h
.text:004019B0                 mov     esi, [ebp+arg_0]
.text:004019B3                 call    __alloca
.text:004019B8                 call    sub_4093F0
.text:004019BD                 mov     [ebp+var_39], 0
.text:004019C1                 mov     eax, [ebp+arg_4]
.text:004019C4                 mov     [ebp+var_3A], 1
.text:004019C8                 mov     [ebp+var_3B], 1
.text:004019CC                 mov     ecx, [eax]
.text:004019CE                 mov     [esp+68h+Locale], offset Locale ; Locale
.text:004019D6                 mov     [esp+68h+Category], 0 ; Category
.text:004019DD                 mov     ds:dword_40B1E0, ecx
.text:004019E3                 call    setlocale
.text:004019E8                 mov     [esp+68h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:004019F0                 mov     [esp+68h+Category], offset aCoreutils ; "coreutils"
.text:004019F7                 call    ds:__imp_libintl_bindtextdomain
.text:004019FD                 mov     [esp+68h+Category], offset aCoreutils ; "coreutils"
.text:00401A04                 call    ds:libintl_textdomain
.text:00401A0A                 mov     [esp+68h+Category], offset sub_4076F0 ; void (__cdecl *)()
.text:00401A11                 call    sub_401040
.text:00401A16                 lea     esi, [esi+0]
.text:00401A19                 lea     edi, [edi+0]
.text:00401A20
.text:00401A20 loc_401A20:                             ; CODE XREF: sub_4019A0+DF↓j
.text:00401A20                                         ; sub_4019A0+2F7↓j ...
.text:00401A20                 mov     dword ptr [esp+68h+var_58], 0 ; int
.text:00401A28                 mov     eax, [ebp+arg_4]
.text:00401A2B                 mov     [esp+68h+Stream], offset off_4012C0 ; char
.text:00401A33                 mov     [esp+68h+ElementCount], offset aBctw ; "bctw"
.text:00401A3B                 mov     [esp+68h+Locale], eax ; int
.text:00401A3F                 mov     [esp+68h+Category], esi ; int
.text:00401A42                 call    sub_407580
.text:00401A47                 cmp     eax, 0FFFFFFFFh
.text:00401A4A                 jz      loc_401CBC
.text:00401A50                 cmp     eax, 63h ; 'c'
.text:00401A53                 jz      loc_401CB3
.text:00401A59                 cmp     eax, 63h ; 'c'
.text:00401A5C                 jg      loc_401C60
.text:00401A62                 cmp     eax, 0FFFFFF7Eh
.text:00401A67                 jz      loc_401B20
.text:00401A6D                 cmp     eax, 0FFFFFF7Eh
.text:00401A72                 jle     short loc_401AB9
.text:00401A74                 cmp     eax, 62h ; 'b'
.text:00401A77                 jnz     short loc_401A81
.text:00401A79                 mov     [ebp+var_3B], 1
.text:00401A7D
.text:00401A7D loc_401A7D:                             ; CODE XREF: sub_4019A0+2D7↓j
.text:00401A7D                 mov     bl, 1
.text:00401A7F                 jmp     short loc_401A20
.text:00401A81 ; ---------------------------------------------------------------------------
.text:00401A81
.text:00401A81 loc_401A81:                             ; CODE XREF: sub_4019A0+D7↑j
.text:00401A81                                         ; sub_4019A0+11E↓j ...
.text:00401A81                 mov     [esp+68h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401A88                 call    ds:libintl_gettext
.text:00401A8E                 mov     esi, ds:_iob
.text:00401A94                 mov     ebx, ds:dword_40B1E0
.text:00401A9A                 add     esi, 40h ; '@'
.text:00401A9D                 mov     [esp+68h+ElementCount], ebx
.text:00401AA1                 mov     [esp+68h+Locale], eax ; Format
.text:00401AA5                 mov     [esp+68h+Category], esi ; Stream
.text:00401AA8                 call    fprintf
.text:00401AAD                 mov     [esp+68h+Category], 1 ; Code
.text:00401AB4
.text:00401AB4 loc_401AB4:                             ; CODE XREF: sub_4019A0+172↓j
.text:00401AB4                                         ; sub_4019A0+3AF↓j
.text:00401AB4                 call    exit
.text:00401AB9 ; ---------------------------------------------------------------------------
.text:00401AB9
.text:00401AB9 loc_401AB9:                             ; CODE XREF: sub_4019A0+D2↑j
.text:00401AB9                 cmp     eax, 0FFFFFF7Dh
.text:00401ABE                 jnz     short loc_401A81
.text:00401AC0                 cmp     dword_40A010, 1
.text:00401AC7                 mov     [esp+68h+var_50], 0
.text:00401ACF                 mov     [esp+68h+var_54], offset aScottMiller ; "Scott Miller"
.text:00401AD7                 mov     dword ptr [esp+68h+var_58], offset aUlrichDrepper ; "Ulrich Drepper"
.text:00401ADF                 mov     [esp+68h+Stream], offset a530 ; "5.3.0"
.text:00401AE7                 mov     [esp+68h+ElementCount], offset aGnuCoreutils ; "GNU coreutils"
.text:00401AEF                 jz      short loc_401B14
.text:00401AF1                 mov     eax, offset stru_4013F7
.text:00401AF6
.text:00401AF6 loc_401AF6:                             ; CODE XREF: sub_4019A0+179↓j
.text:00401AF6                 mov     [esp+68h+Locale], eax ; FILE *
.text:00401AFA                 mov     edx, ds:_iob
.text:00401B00                 add     edx, 20h ; ' '
.text:00401B03                 mov     [esp+68h+Category], edx ; FILE *
.text:00401B06                 call    sub_407540
.text:00401B0B
.text:00401B0B loc_401B0B:                             ; CODE XREF: sub_4019A0+2A7↓j
.text:00401B0B                 mov     [esp+68h+Category], 0
.text:00401B12                 jmp     short loc_401AB4
.text:00401B14 ; ---------------------------------------------------------------------------
.text:00401B14
.text:00401B14 loc_401B14:                             ; CODE XREF: sub_4019A0+14F↑j
.text:00401B14                 mov     eax, offset stru_4013F7._base
.text:00401B19                 jmp     short loc_401AF6
.text:00401B19 ; ---------------------------------------------------------------------------
.text:00401B1B                 align 10h
.text:00401B20
.text:00401B20 loc_401B20:                             ; CODE XREF: sub_4019A0+C7↑j
.text:00401B20                 mov     [esp+68h+Category], offset aUsageSOptionFi ; "Usage: %s [OPTION] [FILE]...\n  or:  %s"...
.text:00401B27                 call    ds:libintl_gettext
.text:00401B2D                 mov     ebx, dword_40A010
.text:00401B33                 xor     edx, edx
.text:00401B35                 cmp     ebx, 1
.text:00401B38                 setnz   dl
.text:00401B3B                 mov     ecx, eax
.text:00401B3D                 mov     eax, offset aMd5 ; "MD5"
.text:00401B42                 dec     edx
.text:00401B43                 and     edx, 0FFFFFFE0h
.text:00401B46                 add     edx, 0A0h ; ' '
.text:00401B4C                 mov     dword ptr [esp+68h+var_58], edx
.text:00401B50                 dec     ebx
.text:00401B51                 jz      short loc_401B58
.text:00401B53                 mov     eax, offset Str ; "SHA1"
.text:00401B58
.text:00401B58 loc_401B58:                             ; CODE XREF: sub_4019A0+1B1↑j
.text:00401B58                 mov     [esp+68h+Category], ecx ; Format
.text:00401B5B                 mov     esi, ds:dword_40B1E0
.text:00401B61                 mov     [esp+68h+Stream], eax
.text:00401B65                 mov     [esp+68h+ElementCount], esi
.text:00401B69                 mov     [esp+68h+Locale], esi
.text:00401B6D                 call    printf
.text:00401B72                 mov     [esp+68h+Category], offset aBBinaryReadFil ; "\n  -b, --binary            read files "...
.text:00401B79                 call    ds:libintl_gettext
.text:00401B7F                 cmp     dword_40A010, 1
.text:00401B86                 jz      loc_401C53
.text:00401B8C                 mov     edx, offset Str ; "SHA1"
.text:00401B91
.text:00401B91 loc_401B91:                             ; CODE XREF: sub_4019A0+2B8↓j
.text:00401B91                 mov     [esp+68h+Locale], edx
.text:00401B95                 mov     [esp+68h+Category], eax ; Format
.text:00401B98                 call    printf
.text:00401B9D                 mov     [esp+68h+Category], offset aTheFollowingTw ; "The following two options are useful on"...
.text:00401BA4                 call    ds:libintl_gettext
.text:00401BAA                 mov     ebx, ds:_iob
.text:00401BB0                 add     ebx, 20h ; ' '
.text:00401BB3                 mov     [esp+68h+Locale], ebx ; Stream
.text:00401BB7                 mov     [esp+68h+Category], eax ; Buffer
.text:00401BBA                 call    fputs
.text:00401BBF                 mov     [esp+68h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401BC6                 call    ds:libintl_gettext
.text:00401BCC                 mov     edi, ds:_iob
.text:00401BD2                 add     edi, 20h ; ' '
.text:00401BD5                 mov     [esp+68h+Locale], edi ; Stream
.text:00401BD9                 mov     [esp+68h+Category], eax ; Buffer
.text:00401BDC                 call    fputs
.text:00401BE1                 mov     [esp+68h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401BE8                 call    ds:libintl_gettext
.text:00401BEE                 mov     ecx, ds:_iob
.text:00401BF4                 add     ecx, 20h ; ' '
.text:00401BF7                 mov     [esp+68h+Locale], ecx ; Stream
.text:00401BFB                 mov     [esp+68h+Category], eax ; Buffer
.text:00401BFE                 call    fputs
.text:00401C03                 mov     [esp+68h+Category], offset aTheSumsAreComp ; "\nThe sums are computed as described in"...
.text:00401C0A                 call    ds:libintl_gettext
.text:00401C10                 cmp     dword_40A010, 1
.text:00401C17                 jz      short loc_401C4C
.text:00401C19                 mov     edx, offset aFips1801 ; "FIPS-180-1"
.text:00401C1E
.text:00401C1E loc_401C1E:                             ; CODE XREF: sub_4019A0+2B1↓j
.text:00401C1E                 mov     [esp+68h+Locale], edx
.text:00401C22                 mov     [esp+68h+Category], eax ; Format
.text:00401C25                 call    printf
.text:00401C2A                 mov     [esp+68h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401C31                 call    ds:libintl_gettext
.text:00401C37                 mov     [esp+68h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401C3F                 mov     [esp+68h+Category], eax ; Format
.text:00401C42                 call    printf
.text:00401C47                 jmp     loc_401B0B
.text:00401C4C ; ---------------------------------------------------------------------------
.text:00401C4C
.text:00401C4C loc_401C4C:                             ; CODE XREF: sub_4019A0+277↑j
.text:00401C4C                 mov     edx, offset aRfc1321 ; "RFC 1321"
.text:00401C51                 jmp     short loc_401C1E
.text:00401C53 ; ---------------------------------------------------------------------------
.text:00401C53
.text:00401C53 loc_401C53:                             ; CODE XREF: sub_4019A0+1E6↑j
.text:00401C53                 mov     edx, offset aMd5 ; "MD5"
.text:00401C58                 jmp     loc_401B91
.text:00401C58 ; ---------------------------------------------------------------------------
.text:00401C5D                 align 10h
.text:00401C60
.text:00401C60 loc_401C60:                             ; CODE XREF: sub_4019A0+BC↑j
.text:00401C60                 cmp     eax, 77h ; 'w'
.text:00401C63                 jz      short loc_401CA0
.text:00401C65                 cmp     eax, 77h ; 'w'
.text:00401C68                 jg      short loc_401C80
.text:00401C6A                 cmp     eax, 74h ; 't'
.text:00401C6D                 jnz     loc_401A81
.text:00401C73                 mov     [ebp+var_3B], 0
.text:00401C77                 jmp     loc_401A7D
.text:00401C77 ; ---------------------------------------------------------------------------
.text:00401C7C                 align 10h
.text:00401C80
.text:00401C80 loc_401C80:                             ; CODE XREF: sub_4019A0+2C8↑j
.text:00401C80                 add     eax, 0FFFFFF80h
.text:00401C83                 jnz     loc_401A81
.text:00401C89                 mov     ds:byte_40B000, 1
.text:00401C90                 mov     ds:byte_40B010, 0
.text:00401C97                 jmp     loc_401A20
.text:00401C97 ; ---------------------------------------------------------------------------
.text:00401C9C                 align 10h
.text:00401CA0
.text:00401CA0 loc_401CA0:                             ; CODE XREF: sub_4019A0+2C3↑j
.text:00401CA0                 mov     ds:byte_40B000, 0
.text:00401CA7                 mov     ds:byte_40B010, 1
.text:00401CAE                 jmp     loc_401A20
.text:00401CB3 ; ---------------------------------------------------------------------------
.text:00401CB3
.text:00401CB3 loc_401CB3:                             ; CODE XREF: sub_4019A0+B3↑j
.text:00401CB3                 mov     [ebp+var_39], 1
.text:00401CB7                 jmp     loc_401A20
.text:00401CBC ; ---------------------------------------------------------------------------
.text:00401CBC
.text:00401CBC loc_401CBC:                             ; CODE XREF: sub_4019A0+AA↑j
.text:00401CBC                 mov     edx, dword_40A010
.text:00401CC2                 xor     ecx, ecx
.text:00401CC4                 cmp     edx, 1
.text:00401CC7                 setnz   cl
.text:00401CCA                 xor     eax, eax
.text:00401CCC                 cmp     edx, 1
.text:00401CCF                 setnz   al
.text:00401CD2                 lea     edi, ds:23h[ecx*8]
.text:00401CD9                 cmp     [ebp+var_39], 0
.text:00401CDD                 mov     ds:dword_40B030, edi
.text:00401CE3                 lea     ecx, ds:20h[eax*8]
.text:00401CEA                 mov     ds:dword_40B040, ecx
.text:00401CF0                 jz      loc_401E24
.text:00401CF6                 test    bl, bl
.text:00401CF8                 jnz     loc_401DFA
.text:00401CFE                 mov     ecx, dword_40A020
.text:00401D04                 lea     edi, [ecx+1]
.text:00401D07                 cmp     edi, esi
.text:00401D09                 jl      loc_401D91
.text:00401D0F                 dec     edx
.text:00401D10                 mov     eax, offset sub_4062C0
.text:00401D15                 jz      short loc_401D1C
.text:00401D17                 mov     eax, offset sub_403EA0
.text:00401D1C
.text:00401D1C loc_401D1C:                             ; CODE XREF: sub_4019A0+375↑j
.text:00401D1C                 mov     [esp+68h+Locale], eax ; int
.text:00401D20                 cmp     ecx, esi
.text:00401D22                 mov     eax, offset FileName ; "-"
.text:00401D27                 jz      short loc_401D2F
.text:00401D29                 mov     edi, [ebp+arg_4]
.text:00401D2C                 mov     eax, [edi+ecx*4]
.text:00401D2F
.text:00401D2F loc_401D2F:                             ; CODE XREF: sub_4019A0+387↑j
.text:00401D2F                 mov     [esp+68h+Category], eax ; FileName
.text:00401D32                 call    sub_4025F0
.text:00401D37                 mov     [ebp+var_3A], al
.text:00401D3A
.text:00401D3A loc_401D3A:                             ; CODE XREF: sub_4019A0+4AD↓j
.text:00401D3A                                         ; sub_4019A0+4F6↓j
.text:00401D3A                 cmp     ds:byte_40B020, 0
.text:00401D41                 jnz     short loc_401D54
.text:00401D43
.text:00401D43 loc_401D43:                             ; CODE XREF: sub_4019A0+3C3↓j
.text:00401D43                                         ; sub_4019A0+3EF↓j
.text:00401D43                 xor     ebx, ebx
.text:00401D45                 cmp     [ebp+var_3A], 0
.text:00401D49                 setz    bl
.text:00401D4C                 mov     [esp+68h+Category], ebx
.text:00401D4F                 jmp     loc_401AB4
.text:00401D54 ; ---------------------------------------------------------------------------
.text:00401D54
.text:00401D54 loc_401D54:                             ; CODE XREF: sub_4019A0+3A1↑j
.text:00401D54                 mov     esi, ds:_iob
.text:00401D5A                 mov     [esp+68h+Category], esi ; Stream
.text:00401D5D                 call    fclose
.text:00401D62                 inc     eax
.text:00401D63                 jnz     short loc_401D43
.text:00401D65                 mov     [esp+68h+Category], offset aStandardInput ; "standard input"
.text:00401D6C                 call    ds:libintl_gettext
.text:00401D72                 mov     esi, eax
.text:00401D74                 call    _errno
.text:00401D79                 mov     [esp+68h+ElementCount], esi ; char *
.text:00401D7D                 mov     edi, [eax]
.text:00401D7F                 mov     [esp+68h+Category], 1 ; Code
.text:00401D86                 mov     [esp+68h+Locale], edi ; ErrorMessage
.text:00401D8A                 call    sub_408F00
.text:00401D8F                 jmp     short loc_401D43
.text:00401D91 ; ---------------------------------------------------------------------------
.text:00401D91
.text:00401D91 loc_401D91:                             ; CODE XREF: sub_4019A0+369↑j
.text:00401D91                 mov     eax, [ebp+arg_4]
.text:00401D94                 mov     ebx, [eax+ecx*4+4]
.text:00401D98                 mov     [esp+68h+Category], ebx ; char *
.text:00401D9B                 call    sub_407050
.text:00401DA0                 mov     [esp+68h+Category], offset aExtraOperandS ; "extra operand %s"
.text:00401DA7                 mov     esi, eax
.text:00401DA9                 call    ds:libintl_gettext
.text:00401DAF                 mov     [esp+68h+Stream], esi ; char
.text:00401DB3                 mov     [esp+68h+Locale], 0 ; ErrorMessage
.text:00401DBB                 mov     [esp+68h+Category], 0 ; Code
.text:00401DC2                 mov     [esp+68h+ElementCount], eax ; char *
.text:00401DC6                 call    sub_408F00
.text:00401DCB                 mov     [esp+68h+Category], offset aOnlyOneOperand ; "Only one operand may be specified when "...
.text:00401DD2                 call    ds:libintl_gettext
.text:00401DD8                 mov     [esp+68h+Locale], offset Format ; "%s\n"
.text:00401DE0                 mov     edx, ds:_iob
.text:00401DE6                 add     edx, 40h ; '@'
.text:00401DE9                 mov     [esp+68h+ElementCount], eax
.text:00401DED                 mov     [esp+68h+Category], edx ; Stream
.text:00401DF0                 call    fprintf
.text:00401DF5                 jmp     loc_401A81
.text:00401DFA ; ---------------------------------------------------------------------------
.text:00401DFA
.text:00401DFA loc_401DFA:                             ; CODE XREF: sub_4019A0+358↑j
.text:00401DFA                 mov     [esp+68h+Category], offset aTheBinaryAndTe ; "the --binary and --text options are mea"...
.text:00401E01
.text:00401E01 loc_401E01:                             ; CODE XREF: sub_4019A0+78E↓j
.text:00401E01                                         ; sub_4019A0+79A↓j
.text:00401E01                 call    ds:libintl_gettext
.text:00401E07                 mov     [esp+68h+Locale], 0 ; ErrorMessage
.text:00401E0F                 mov     [esp+68h+Category], 0 ; Code
.text:00401E16                 mov     [esp+68h+ElementCount], eax ; char *
.text:00401E1A                 call    sub_408F00
.text:00401E1F                 jmp     loc_401A81
.text:00401E24 ; ---------------------------------------------------------------------------
.text:00401E24
.text:00401E24 loc_401E24:                             ; CODE XREF: sub_4019A0+350↑j
.text:00401E24                 cmp     ds:byte_40B000, 0
.text:00401E2B                 jnz     loc_402133
.text:00401E31                 cmp     ds:byte_40B010, 0
.text:00401E38                 jnz     loc_402127
.text:00401E3E                 mov     eax, dword_40A020
.text:00401E43                 cmp     eax, esi
.text:00401E45                 jz      loc_402117
.text:00401E4B
.text:00401E4B loc_401E4B:                             ; CODE XREF: sub_4019A0+782↓j
.text:00401E4B                 cmp     eax, esi
.text:00401E4D                 jge     loc_401D3A
.text:00401E53
.text:00401E53 loc_401E53:                             ; CODE XREF: sub_4019A0+502↓j
.text:00401E53                 mov     ebx, [ebp+arg_4]
.text:00401E56                 dec     edx
.text:00401E57                 mov     edi, [ebx+eax*4]
.text:00401E5A                 mov     eax, offset sub_4062C0
.text:00401E5F                 jz      short loc_401E66
.text:00401E61                 mov     eax, offset sub_403EA0
.text:00401E66
.text:00401E66 loc_401E66:                             ; CODE XREF: sub_4019A0+4BF↑j
.text:00401E66                 movzx   ecx, [ebp+var_3B]
.text:00401E6A                 lea     edx, [ebp+var_38]
.text:00401E6D                 mov     [esp+68h+Stream], eax ; int
.text:00401E71                 mov     [esp+68h+ElementCount], edx ; int
.text:00401E75                 mov     [esp+68h+Category], edi ; FileName
.text:00401E78                 mov     [esp+68h+Locale], ecx ; char
.text:00401E7C                 call    sub_4022D0
.text:00401E81                 test    al, al
.text:00401E83                 jnz     short loc_401EA4
.text:00401E85                 mov     [ebp+var_3A], 0
.text:00401E89
.text:00401E89 loc_401E89:                             ; CODE XREF: sub_4019A0+67F↓j
.text:00401E89                                         ; sub_4019A0+69D↓j
.text:00401E89                 mov     eax, dword_40A020
.text:00401E8E                 inc     eax
.text:00401E8F                 cmp     eax, esi
.text:00401E91                 mov     dword_40A020, eax
.text:00401E96                 jge     loc_401D3A
.text:00401E9C                 mov     edx, dword_40A010
.text:00401EA2                 jmp     short loc_401E53
.text:00401EA4 ; ---------------------------------------------------------------------------
.text:00401EA4
.text:00401EA4 loc_401EA4:                             ; CODE XREF: sub_4019A0+4E3↑j
.text:00401EA4                 mov     [esp+68h+Locale], 0Ah ; Val
.text:00401EAC                 mov     [esp+68h+Category], edi ; Str
.text:00401EAF                 call    strchr
.text:00401EB4                 test    eax, eax
.text:00401EB6                 jz      loc_4020FA
.text:00401EBC
.text:00401EBC loc_401EBC:                             ; CODE XREF: sub_4019A0+772↓j
.text:00401EBC                 mov     ecx, ds:_iob
.text:00401EC2                 mov     ebx, [ecx+24h]
.text:00401EC5                 dec     ebx
.text:00401EC6                 mov     [ecx+24h], ebx
.text:00401EC9                 test    ebx, ebx
.text:00401ECB                 js      loc_4020DC
.text:00401ED1                 mov     ebx, ds:_iob
.text:00401ED7                 mov     eax, [ebx+20h]
.text:00401EDA                 mov     byte ptr [eax], 5Ch ; '\'
.text:00401EDD                 inc     dword ptr [ebx+20h]
.text:00401EE0
.text:00401EE0 loc_401EE0:                             ; CODE XREF: sub_4019A0+755↓j
.text:00401EE0                                         ; sub_4019A0+76C↓j
.text:00401EE0                 mov     ecx, ds:dword_40B040
.text:00401EE6                 xor     ebx, ebx
.text:00401EE8                 shr     ecx, 1
.text:00401EEA                 cmp     ebx, ecx
.text:00401EEC                 jb      loc_4020B5
.text:00401EF2
.text:00401EF2 loc_401EF2:                             ; CODE XREF: sub_4019A0+737↓j
.text:00401EF2                 mov     edx, ds:_iob
.text:00401EF8                 mov     ebx, [edx+24h]
.text:00401EFB                 dec     ebx
.text:00401EFC                 mov     [edx+24h], ebx
.text:00401EFF                 test    ebx, ebx
.text:00401F01                 js      loc_402097
.text:00401F07                 mov     ecx, ds:_iob
.text:00401F0D                 mov     eax, [ecx+20h]
.text:00401F10                 mov     byte ptr [eax], 20h ; ' '
.text:00401F13                 inc     dword ptr [ecx+20h]
.text:00401F16
.text:00401F16 loc_401F16:                             ; CODE XREF: sub_4019A0+710↓j
.text:00401F16                 cmp     [ebp+var_3B], 0
.text:00401F1A                 jz      loc_402060
.text:00401F20                 mov     edx, ds:_iob
.text:00401F26                 mov     ecx, [edx+24h]
.text:00401F29                 dec     ecx
.text:00401F2A                 mov     [edx+24h], ecx
.text:00401F2D                 test    ecx, ecx
.text:00401F2F                 js      loc_402042
.text:00401F35                 mov     eax, ds:_iob
.text:00401F3A                 mov     ebx, [eax+20h]
.text:00401F3D                 mov     byte ptr [ebx], 2Ah ; '*'
.text:00401F40
.text:00401F40 loc_401F40:                             ; CODE XREF: sub_4019A0+6DC↓j
.text:00401F40                 inc     dword ptr [eax+20h]
.text:00401F43
.text:00401F43 loc_401F43:                             ; CODE XREF: sub_4019A0+6BB↓j
.text:00401F43                 xor     ebx, ebx
.text:00401F45                 lea     esi, [esi+0]
.text:00401F49                 lea     edi, [edi+0]
.text:00401F50
.text:00401F50 loc_401F50:                             ; CODE XREF: sub_4019A0+5F1↓j
.text:00401F50                 mov     [esp+68h+Category], edi ; Str
.text:00401F53                 call    strlen
.text:00401F58                 cmp     ebx, eax
.text:00401F5A                 jnb     loc_401FFF
.text:00401F60                 movsx   eax, byte ptr [ebx+edi]
.text:00401F64                 cmp     eax, 0Ah
.text:00401F67                 jz      short loc_401FD9
.text:00401F69                 cmp     eax, 5Ch ; '\'
.text:00401F6C                 jz      short loc_401FAE
.text:00401F6E                 mov     edx, ds:_iob
.text:00401F74                 mov     ecx, [edx+24h]
.text:00401F77                 dec     ecx
.text:00401F78                 mov     [edx+24h], ecx
.text:00401F7B                 test    ecx, ecx
.text:00401F7D                 js      short loc_401F93
.text:00401F7F                 movzx   edx, byte ptr [ebx+edi]
.text:00401F83                 mov     eax, ds:_iob
.text:00401F88                 mov     ecx, [eax+20h]
.text:00401F8B                 mov     [ecx], dl
.text:00401F8D                 inc     dword ptr [eax+20h]
.text:00401F90
.text:00401F90 loc_401F90:                             ; CODE XREF: sub_4019A0+60C↓j
.text:00401F90                                         ; sub_4019A0+637↓j
.text:00401F90                 inc     ebx
.text:00401F91                 jmp     short loc_401F50
.text:00401F93 ; ---------------------------------------------------------------------------
.text:00401F93
.text:00401F93 loc_401F93:                             ; CODE XREF: sub_4019A0+5DD↑j
.text:00401F93                 mov     edx, ds:_iob
.text:00401F99                 add     edx, 20h ; ' '
.text:00401F9C                 mov     [esp+68h+Locale], edx ; File
.text:00401FA0                 movsx   ecx, byte ptr [ebx+edi]
.text:00401FA4                 mov     [esp+68h+Category], ecx ; Ch
.text:00401FA7                 call    _flsbuf
.text:00401FAC                 jmp     short loc_401F90
.text:00401FAE ; ---------------------------------------------------------------------------
.text:00401FAE
.text:00401FAE loc_401FAE:                             ; CODE XREF: sub_4019A0+5CC↑j
.text:00401FAE                 mov     [esp+68h+ElementCount], 2 ; ElementCount
.text:00401FB6                 mov     ecx, ds:_iob
.text:00401FBC                 mov     [esp+68h+Locale], 1 ; ElementSize
.text:00401FC4                 mov     [esp+68h+Category], offset asc_401909 ; "\\\\"
.text:00401FCB                 add     ecx, 20h ; ' '
.text:00401FCE                 mov     [esp+68h+Stream], ecx ; Stream
.text:00401FD2
.text:00401FD2 loc_401FD2:                             ; CODE XREF: sub_4019A0+65D↓j
.text:00401FD2                 call    fwrite
.text:00401FD7                 jmp     short loc_401F90
.text:00401FD9 ; ---------------------------------------------------------------------------
.text:00401FD9
.text:00401FD9 loc_401FD9:                             ; CODE XREF: sub_4019A0+5C7↑j
.text:00401FD9                 mov     [esp+68h+ElementCount], 2
.text:00401FE1                 mov     edx, ds:_iob
.text:00401FE7                 mov     [esp+68h+Locale], 1
.text:00401FEF                 mov     [esp+68h+Category], offset aN ; "\\n"
.text:00401FF6                 add     edx, 20h ; ' '
.text:00401FF9                 mov     [esp+68h+Stream], edx
.text:00401FFD                 jmp     short loc_401FD2
.text:00401FFF ; ---------------------------------------------------------------------------
.text:00401FFF
.text:00401FFF loc_401FFF:                             ; CODE XREF: sub_4019A0+5BA↑j
.text:00401FFF                 mov     ebx, ds:_iob
.text:00402005                 mov     edi, [ebx+24h]
.text:00402008                 dec     edi
.text:00402009                 mov     [ebx+24h], edi
.text:0040200C                 test    edi, edi
.text:0040200E                 js      short loc_402024
.text:00402010                 mov     ecx, ds:_iob
.text:00402016                 mov     eax, [ecx+20h]
.text:00402019                 mov     byte ptr [eax], 0Ah
.text:0040201C                 inc     dword ptr [ecx+20h]
.text:0040201F                 jmp     loc_401E89
.text:00402024 ; ---------------------------------------------------------------------------
.text:00402024
.text:00402024 loc_402024:                             ; CODE XREF: sub_4019A0+66E↑j
.text:00402024                 mov     [esp+68h+Category], 0Ah ; Ch
.text:0040202B                 mov     edx, ds:_iob
.text:00402031                 add     edx, 20h ; ' '
.text:00402034                 mov     [esp+68h+Locale], edx ; File
.text:00402038                 call    _flsbuf
.text:0040203D                 jmp     loc_401E89
.text:00402042 ; ---------------------------------------------------------------------------
.text:00402042
.text:00402042 loc_402042:                             ; CODE XREF: sub_4019A0+58F↑j
.text:00402042                 mov     [esp+68h+Category], 2Ah ; '*' ; Ch
.text:00402049                 mov     ecx, ds:_iob
.text:0040204F                 add     ecx, 20h ; ' '
.text:00402052                 mov     [esp+68h+Locale], ecx ; File
.text:00402056
.text:00402056 loc_402056:                             ; CODE XREF: sub_4019A0+6F5↓j
.text:00402056                 call    _flsbuf
.text:0040205B                 jmp     loc_401F43
.text:00402060 ; ---------------------------------------------------------------------------
.text:00402060
.text:00402060 loc_402060:                             ; CODE XREF: sub_4019A0+57A↑j
.text:00402060                 mov     edx, ds:_iob
.text:00402066                 mov     ebx, [edx+24h]
.text:00402069                 dec     ebx
.text:0040206A                 mov     [edx+24h], ebx
.text:0040206D                 test    ebx, ebx
.text:0040206F                 js      short loc_402081
.text:00402071                 mov     eax, ds:_iob
.text:00402076                 mov     ecx, [eax+20h]
.text:00402079                 mov     byte ptr [ecx], 20h ; ' '
.text:0040207C                 jmp     loc_401F40
.text:00402081 ; ---------------------------------------------------------------------------
.text:00402081
.text:00402081 loc_402081:                             ; CODE XREF: sub_4019A0+6CF↑j
.text:00402081                 mov     [esp+68h+Category], 20h ; ' '
.text:00402088                 mov     ebx, ds:_iob
.text:0040208E                 add     ebx, 20h ; ' '
.text:00402091                 mov     [esp+68h+Locale], ebx
.text:00402095                 jmp     short loc_402056
.text:00402097 ; ---------------------------------------------------------------------------
.text:00402097
.text:00402097 loc_402097:                             ; CODE XREF: sub_4019A0+561↑j
.text:00402097                 mov     [esp+68h+Category], 20h ; ' ' ; Ch
.text:0040209E                 mov     ebx, ds:_iob
.text:004020A4                 add     ebx, 20h ; ' '
.text:004020A7                 mov     [esp+68h+Locale], ebx ; File
.text:004020AB                 call    _flsbuf
.text:004020B0                 jmp     loc_401F16
.text:004020B5 ; ---------------------------------------------------------------------------
.text:004020B5
.text:004020B5 loc_4020B5:                             ; CODE XREF: sub_4019A0+54C↑j
.text:004020B5                                         ; sub_4019A0+735↓j
.text:004020B5                 movzx   ecx, byte ptr [ebp+ebx+var_38]
.text:004020BA                 inc     ebx
.text:004020BB                 mov     [esp+68h+Category], offset a02x ; "%02x"
.text:004020C2                 mov     [esp+68h+Locale], ecx
.text:004020C6                 call    printf
.text:004020CB                 mov     edx, ds:dword_40B040
.text:004020D1                 shr     edx, 1
.text:004020D3                 cmp     ebx, edx
.text:004020D5                 jb      short loc_4020B5
.text:004020D7                 jmp     loc_401EF2
.text:004020DC ; ---------------------------------------------------------------------------
.text:004020DC
.text:004020DC loc_4020DC:                             ; CODE XREF: sub_4019A0+52B↑j
.text:004020DC                 mov     [esp+68h+Category], 5Ch ; '\' ; Ch
.text:004020E3                 mov     edx, ds:_iob
.text:004020E9                 add     edx, 20h ; ' '
.text:004020EC                 mov     [esp+68h+Locale], edx ; File
.text:004020F0                 call    _flsbuf
.text:004020F5                 jmp     loc_401EE0
.text:004020FA ; ---------------------------------------------------------------------------
.text:004020FA
.text:004020FA loc_4020FA:                             ; CODE XREF: sub_4019A0+516↑j
.text:004020FA                 mov     [esp+68h+Locale], 5Ch ; '\' ; Val
.text:00402102                 mov     [esp+68h+Category], edi ; Str
.text:00402105                 call    strchr
.text:0040210A                 test    eax, eax
.text:0040210C                 jz      loc_401EE0
.text:00402112                 jmp     loc_401EBC
.text:00402117 ; ---------------------------------------------------------------------------
.text:00402117
.text:00402117 loc_402117:                             ; CODE XREF: sub_4019A0+4A5↑j
.text:00402117                 mov     ebx, [ebp+arg_4]
.text:0040211A                 mov     dword ptr [ebx+esi*4], offset FileName ; "-"
.text:00402121                 inc     esi
.text:00402122                 jmp     loc_401E4B
.text:00402127 ; ---------------------------------------------------------------------------
.text:00402127
.text:00402127 loc_402127:                             ; CODE XREF: sub_4019A0+498↑j
.text:00402127                 mov     [esp+68h+Category], offset aTheWarnOptionI ; "the --warn option is meaningful only wh"...
.text:0040212E                 jmp     loc_401E01
.text:00402133 ; ---------------------------------------------------------------------------
.text:00402133
.text:00402133 loc_402133:                             ; CODE XREF: sub_4019A0+48B↑j
.text:00402133                 mov     [esp+68h+Category], offset aTheStatusOptio ; "the --status option is meaningful only "...
.text:0040213A                 jmp     loc_401E01
.text:0040213A sub_4019A0      endp
.text:0040213A
.text:0040213A ; ---------------------------------------------------------------------------
.text:0040213F                 align 10h
.text:00402140                 push    ebx
.text:00402141                 sub     esp, 18h
.text:00402144                 mov     ebx, [esp+20h]
.text:00402148                 test    ebx, ebx
.text:0040214A                 jz      short loc_402180
.text:0040214C                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402153                 call    ds:libintl_gettext
.text:00402159                 mov     edx, ds:_iob
.text:0040215F                 mov     ecx, ds:dword_40B1E0
.text:00402165                 add     edx, 40h ; '@'
.text:00402168                 mov     [esp+8], ecx
.text:0040216C                 mov     [esp+4], eax
.text:00402170                 mov     [esp], edx
.text:00402173                 call    fprintf
.text:00402178
.text:00402178 loc_402178:                             ; CODE XREF: .text:004022A6↓j
.text:00402178                 mov     [esp], ebx
.text:0040217B                 call    exit
.text:00402180 ; ---------------------------------------------------------------------------
.text:00402180
.text:00402180 loc_402180:                             ; CODE XREF: .text:0040214A↑j
.text:00402180                 mov     dword ptr [esp], offset aUsageSOptionFi ; "Usage: %s [OPTION] [FILE]...\n  or:  %s"...
.text:00402187                 call    ds:libintl_gettext
.text:0040218D                 mov     edx, dword_40A010
.text:00402193                 mov     ecx, eax
.text:00402195                 xor     eax, eax
.text:00402197                 cmp     edx, 1
.text:0040219A                 setnz   al
.text:0040219D                 dec     eax
.text:0040219E                 and     eax, 0FFFFFFE0h
.text:004021A1                 add     eax, 0A0h ; ' '
.text:004021A6                 dec     edx
.text:004021A7                 mov     [esp+10h], eax
.text:004021AB                 mov     eax, offset aMd5 ; "MD5"
.text:004021B0                 jz      short loc_4021B7
.text:004021B2                 mov     eax, offset Str ; "SHA1"
.text:004021B7
.text:004021B7 loc_4021B7:                             ; CODE XREF: .text:004021B0↑j
.text:004021B7                 mov     [esp], ecx
.text:004021BA                 mov     edx, ds:dword_40B1E0
.text:004021C0                 mov     [esp+0Ch], eax
.text:004021C4                 mov     [esp+8], edx
.text:004021C8                 mov     [esp+4], edx
.text:004021CC                 call    printf
.text:004021D1                 mov     dword ptr [esp], offset aBBinaryReadFil ; "\n  -b, --binary            read files "...
.text:004021D8                 call    ds:libintl_gettext
.text:004021DE                 cmp     dword_40A010, 1
.text:004021E5                 jz      loc_4022B7
.text:004021EB                 mov     edx, offset Str ; "SHA1"
.text:004021F0
.text:004021F0 loc_4021F0:                             ; CODE XREF: .text:004022BC↓j
.text:004021F0                 mov     [esp+4], edx
.text:004021F4                 mov     [esp], eax
.text:004021F7                 call    printf
.text:004021FC                 mov     dword ptr [esp], offset aTheFollowingTw ; "The following two options are useful on"...
.text:00402203                 call    ds:libintl_gettext
.text:00402209                 mov     ecx, ds:_iob
.text:0040220F                 add     ecx, 20h ; ' '
.text:00402212                 mov     [esp+4], ecx
.text:00402216                 mov     [esp], eax
.text:00402219                 call    fputs
.text:0040221E                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00402225                 call    ds:libintl_gettext
.text:0040222B                 mov     ecx, ds:_iob
.text:00402231                 add     ecx, 20h ; ' '
.text:00402234                 mov     [esp+4], ecx
.text:00402238                 mov     [esp], eax
.text:0040223B                 call    fputs
.text:00402240                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00402247                 call    ds:libintl_gettext
.text:0040224D                 mov     ecx, ds:_iob
.text:00402253                 add     ecx, 20h ; ' '
.text:00402256                 mov     [esp+4], ecx
.text:0040225A                 mov     [esp], eax
.text:0040225D                 call    fputs
.text:00402262                 mov     dword ptr [esp], offset aTheSumsAreComp ; "\nThe sums are computed as described in"...
.text:00402269                 call    ds:libintl_gettext
.text:0040226F                 cmp     dword_40A010, 1
.text:00402276                 jz      short loc_4022B0
.text:00402278                 mov     edx, offset aFips1801 ; "FIPS-180-1"
.text:0040227D
.text:0040227D loc_40227D:                             ; CODE XREF: .text:004022B5↓j
.text:0040227D                 mov     [esp+4], edx
.text:00402281                 mov     [esp], eax
.text:00402284                 call    printf
.text:00402289                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00402290                 call    ds:libintl_gettext
.text:00402296                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0040229E                 mov     [esp], eax
.text:004022A1                 call    printf
.text:004022A6                 jmp     loc_402178
.text:004022A6 ; ---------------------------------------------------------------------------
.text:004022AB                 align 10h
.text:004022B0
.text:004022B0 loc_4022B0:                             ; CODE XREF: .text:00402276↑j
.text:004022B0                 mov     edx, offset aRfc1321 ; "RFC 1321"
.text:004022B5                 jmp     short loc_40227D
.text:004022B7 ; ---------------------------------------------------------------------------
.text:004022B7
.text:004022B7 loc_4022B7:                             ; CODE XREF: .text:004021E5↑j
.text:004022B7                 mov     edx, offset aMd5 ; "MD5"
.text:004022BC                 jmp     loc_4021F0
.text:004022BC ; ---------------------------------------------------------------------------
.text:004022C1 ; const char byte_4022C1[]
.text:004022C1 byte_4022C1     db 25h, 73h, 0          ; DATA XREF: sub_4022D0+79↓o
.text:004022C1                                         ; sub_4022D0+AD↓o ...
.text:004022C4 ; const char aRb[3]
.text:004022C4 aRb             db 'rb',0               ; DATA XREF: sub_4022D0+113↓o
.text:004022C7 ; const char aR[2]
.text:004022C7 aR              db 'r',0                ; DATA XREF: sub_4022D0+11A↓o
.text:004022C7                                         ; sub_4025F0:loc_402B65↓o
.text:004022C9                 align 10h
.text:004022D0
.text:004022D0 ; =============== S U B R O U T I N E =======================================
.text:004022D0
.text:004022D0
.text:004022D0 ; int __cdecl sub_4022D0(char *FileName, char, int, int)
.text:004022D0 sub_4022D0      proc near               ; CODE XREF: sub_4019A0+4DC↑p
.text:004022D0                                         ; sub_4025F0+18F↓p
.text:004022D0
.text:004022D0 Stream          = dword ptr -2Ch
.text:004022D0 Mode            = dword ptr -28h
.text:004022D0 var_24          = dword ptr -24h
.text:004022D0 var_20          = byte ptr -20h
.text:004022D0 FileName        = dword ptr  4
.text:004022D0 arg_4           = byte ptr  8
.text:004022D0 arg_8           = dword ptr  0Ch
.text:004022D0 arg_C           = dword ptr  10h
.text:004022D0
.text:004022D0                 push    ebp
.text:004022D1                 mov     ecx, 2
.text:004022D6                 push    edi
.text:004022D7                 mov     edi, offset FileName ; "-"
.text:004022DC                 push    esi
.text:004022DD                 push    ebx
.text:004022DE                 sub     esp, 1Ch
.text:004022E1                 mov     ebp, [esp+2Ch+FileName]
.text:004022E5                 cld
.text:004022E6                 movzx   ebx, [esp+2Ch+arg_4]
.text:004022EB                 mov     esi, ebp
.text:004022ED                 repe cmpsb
.text:004022EF                 jnz     loc_4023E1
.text:004022F5                 mov     ds:byte_40B020, 1
.text:004022FC                 test    bl, bl
.text:004022FE                 mov     esi, ds:_iob
.text:00402304                 jnz     loc_4023B0
.text:0040230A
.text:0040230A loc_40230A:                             ; CODE XREF: sub_4022D0+ED↓j
.text:0040230A                                         ; sub_4022D0+10C↓j ...
.text:0040230A                 mov     [esp+2Ch+Stream], esi
.text:0040230D                 mov     ebx, [esp+2Ch+arg_8]
.text:00402311                 mov     [esp+2Ch+Mode], ebx
.text:00402315                 call    [esp+2Ch+arg_C]
.text:00402319                 test    eax, eax
.text:0040231B                 jnz     short loc_402374
.text:0040231D                 cmp     esi, ds:_iob
.text:00402323                 jz      short loc_402330
.text:00402325                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00402328                 call    fclose
.text:0040232D                 inc     eax
.text:0040232E                 jz      short loc_402340
.text:00402330
.text:00402330 loc_402330:                             ; CODE XREF: sub_4022D0+53↑j
.text:00402330                 mov     eax, 1
.text:00402335
.text:00402335 loc_402335:                             ; CODE XREF: sub_4022D0+A2↓j
.text:00402335                 add     esp, 1Ch
.text:00402338                 pop     ebx
.text:00402339                 pop     esi
.text:0040233A                 pop     edi
.text:0040233B                 pop     ebp
.text:0040233C                 retn
.text:0040233C ; ---------------------------------------------------------------------------
.text:0040233D                 align 10h
.text:00402340
.text:00402340 loc_402340:                             ; CODE XREF: sub_4022D0+5E↑j
.text:00402340                                         ; sub_4022D0+135↓j
.text:00402340                 call    _errno
.text:00402345                 mov     dword ptr [esp+2Ch+var_20], ebp ; char
.text:00402349                 mov     [esp+2Ch+var_24], offset byte_4022C1 ; char *
.text:00402351                 mov     esi, [eax]
.text:00402353                 mov     [esp+2Ch+Stream], 0 ; Code
.text:0040235A                 mov     [esp+2Ch+Mode], esi ; ErrorMessage
.text:0040235E                 call    sub_408F00
.text:00402363                 lea     esi, [esi+0]
.text:00402369                 lea     edi, [edi+0]
.text:00402370
.text:00402370 loc_402370:                             ; CODE XREF: sub_4022D0+CD↓j
.text:00402370                                         ; sub_4022D0+D7↓j
.text:00402370                 xor     eax, eax
.text:00402372                 jmp     short loc_402335
.text:00402374 ; ---------------------------------------------------------------------------
.text:00402374
.text:00402374 loc_402374:                             ; CODE XREF: sub_4022D0+4B↑j
.text:00402374                 call    _errno
.text:00402379                 mov     dword ptr [esp+2Ch+var_20], ebp ; char
.text:0040237D                 mov     [esp+2Ch+var_24], offset byte_4022C1 ; char *
.text:00402385                 mov     edi, [eax]
.text:00402387                 mov     [esp+2Ch+Stream], 0 ; Code
.text:0040238E                 mov     [esp+2Ch+Mode], edi ; ErrorMessage
.text:00402392                 call    sub_408F00
.text:00402397                 cmp     esi, ds:_iob
.text:0040239D                 jz      short loc_402370
.text:0040239F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004023A2                 call    fclose
.text:004023A7                 jmp     short loc_402370
.text:004023A7 ; ---------------------------------------------------------------------------
.text:004023A9                 align 10h
.text:004023B0
.text:004023B0 loc_4023B0:                             ; CODE XREF: sub_4022D0+34↑j
.text:004023B0                 mov     edx, [esi+10h]
.text:004023B3                 mov     [esp+2Ch+Stream], edx ; FileHandle
.text:004023B6                 call    _isatty
.text:004023BB                 test    eax, eax
.text:004023BD                 jnz     loc_40230A
.text:004023C3                 mov     [esp+2Ch+Mode], 8000h ; Mode
.text:004023CB                 mov     ecx, ds:_iob
.text:004023D1                 mov     edx, [ecx+10h]
.text:004023D4                 mov     [esp+2Ch+Stream], edx ; FileHandle
.text:004023D7                 call    _setmode
.text:004023DC                 jmp     loc_40230A
.text:004023E1 ; ---------------------------------------------------------------------------
.text:004023E1
.text:004023E1 loc_4023E1:                             ; CODE XREF: sub_4022D0+1F↑j
.text:004023E1                 test    bl, bl
.text:004023E3                 mov     eax, offset aRb ; "rb"
.text:004023E8                 jnz     short loc_4023EF
.text:004023EA                 mov     eax, offset aR  ; "r"
.text:004023EF
.text:004023EF loc_4023EF:                             ; CODE XREF: sub_4022D0+118↑j
.text:004023EF                 mov     [esp+2Ch+Mode], eax ; Mode
.text:004023F3                 mov     [esp+2Ch+Stream], ebp ; FileName
.text:004023F6                 call    fopen
.text:004023FB                 test    eax, eax
.text:004023FD                 mov     esi, eax
.text:004023FF                 jnz     loc_40230A
.text:00402405                 jmp     loc_402340
.text:00402405 sub_4022D0      endp
.text:00402405
.text:00402405 ; ---------------------------------------------------------------------------
.text:0040240A                 align 20h
.text:00402420 aWarningI64uOfI_2 db 'WARNING: %I64u of %I64u computed checksums did NOT match',0
.text:00402420                                         ; DATA XREF: sub_4025F0:loc_402846↓o
.text:00402459                 align 10h
.text:00402460 aWarningI64uOfI db 'WARNING: %I64u of %I64u computed checksum did NOT match',0
.text:00402460                                         ; DATA XREF: sub_4025F0+26A↓o
.text:00402498                 align 10h
.text:004024A0 aWarningI64uOfI_0 db 'WARNING: %I64u of %I64u listed files could not be read',0
.text:004024A0                                         ; DATA XREF: sub_4025F0:loc_4028A4↓o
.text:004024D7                 align 10h
.text:004024E0 aWarningI64uOfI_1 db 'WARNING: %I64u of %I64u listed file could not be read',0
.text:004024E0                                         ; DATA XREF: sub_4025F0+2C0↓o
.text:00402516                 align 10h
.text:00402520 aSNoProperlyFor db '%s: no properly formatted %s checksum lines found',0
.text:00402520                                         ; DATA XREF: sub_4025F0:loc_4028FE↓o
.text:00402552 aSReadError     db '%s: read error',0   ; DATA XREF: sub_4025F0:loc_40297D↓o
.text:00402561 aSFailedOpenOrR db '%s: FAILED open or read',0Ah,0
.text:00402561                                         ; DATA XREF: sub_4025F0:loc_4029B0↓o
.text:0040257A aFailed         db 'FAILED',0           ; DATA XREF: sub_4025F0+428↓o
.text:00402581 ; const char aSS[]
.text:00402581 aSS             db '%s: %s',0Ah,0       ; DATA XREF: sub_4025F0+435↓o
.text:00402589 aOk             db 'OK',0               ; DATA XREF: sub_4025F0:loc_402A3F↓o
.text:0040258C                 align 20h
.text:004025A0 aSI64uImproperl db '%s: %I64u: improperly formatted %s checksum line',0
.text:004025A0                                         ; DATA XREF: sub_4025F0+4BF↓o
.text:004025D1 aSTooManyChecks db '%s: too many checksum lines',0
.text:004025D1                                         ; DATA XREF: sub_4025F0:loc_402B30↓o
.text:004025ED                 align 10h
.text:004025F0
.text:004025F0 ; =============== S U B R O U T I N E =======================================
.text:004025F0
.text:004025F0
.text:004025F0 ; int __cdecl sub_4025F0(char *FileName, int)
.text:004025F0 sub_4025F0      proc near               ; CODE XREF: sub_4019A0+392↑p
.text:004025F0
.text:004025F0 FileHandle      = dword ptr -9Ch
.text:004025F0 Mode            = dword ptr -98h
.text:004025F0 File            = dword ptr -94h
.text:004025F0 var_90          = byte ptr -90h
.text:004025F0 var_8C          = dword ptr -8Ch
.text:004025F0 var_88          = dword ptr -88h
.text:004025F0 var_84          = dword ptr -84h
.text:004025F0 var_70          = dword ptr -70h
.text:004025F0 var_6C          = byte ptr -6Ch
.text:004025F0 var_68          = dword ptr -68h
.text:004025F0 var_64          = byte ptr -64h
.text:004025F0 var_60          = dword ptr -60h
.text:004025F0 var_5C          = dword ptr -5Ch
.text:004025F0 var_58          = dword ptr -58h
.text:004025F0 var_50          = dword ptr -50h
.text:004025F0 var_49          = byte ptr -49h
.text:004025F0 var_48          = dword ptr -48h
.text:004025F0 Block           = dword ptr -44h
.text:004025F0 var_40          = dword ptr -40h
.text:004025F0 var_3C          = dword ptr -3Ch
.text:004025F0 FileName        = dword ptr  4
.text:004025F0 arg_4           = dword ptr  8
.text:004025F0
.text:004025F0                 push    ebp
.text:004025F1                 mov     ecx, 2
.text:004025F6                 push    edi
.text:004025F7                 mov     edi, offset FileName ; "-"
.text:004025FC                 push    esi
.text:004025FD                 push    ebx
.text:004025FE                 sub     esp, 8Ch
.text:00402604                 mov     esi, [esp+9Ch+FileName]
.text:0040260B                 mov     [esp+9Ch+var_5C], 0
.text:00402613                 mov     [esp+9Ch+var_58], 0
.text:0040261B                 mov     dword ptr [esp+9Ch+var_64], 0
.text:00402623                 mov     [esp+9Ch+var_60], 0
.text:0040262B                 mov     dword ptr [esp+9Ch+var_6C], 0
.text:00402633                 mov     [esp+9Ch+var_68], 0
.text:0040263B                 cld
.text:0040263C                 repe cmpsb
.text:0040263E                 jnz     loc_402B65
.text:00402644                 mov     ds:byte_40B020, 1
.text:0040264B                 mov     [esp+9Ch+FileHandle], offset aStandardInput ; "standard input"
.text:00402652                 call    ds:libintl_gettext
.text:00402658                 mov     ebp, ds:_iob
.text:0040265E                 mov     [esp+9Ch+FileName], eax
.text:00402665
.text:00402665 loc_402665:                             ; CODE XREF: sub_4025F0+590↓j
.text:00402665                 mov     [esp+9Ch+Mode], 4000h ; Mode
.text:0040266D                 xor     esi, esi
.text:0040266F                 xor     edi, edi
.text:00402671                 mov     edx, [ebp+10h]
.text:00402674                 mov     [esp+9Ch+FileHandle], edx ; FileHandle
.text:00402677                 call    _setmode
.text:0040267C                 mov     [esp+9Ch+Block], 0
.text:00402684                 mov     [esp+9Ch+var_40], 0
.text:0040268C                 lea     esi, [esi+0]
.text:00402690
.text:00402690 loc_402690:                             ; CODE XREF: sub_4025F0+1C4↓j
.text:00402690                 add     esi, 1
.text:00402693                 adc     edi, 0
.text:00402696                 mov     eax, edi
.text:00402698                 or      eax, esi
.text:0040269A                 jz      loc_402B30
.text:004026A0
.text:004026A0 loc_4026A0:                             ; CODE XREF: sub_4025F0+570↓j
.text:004026A0                 mov     [esp+9Ch+File], ebp ; File
.text:004026A4                 lea     ecx, [esp+9Ch+Block]
.text:004026A8                 lea     edx, [esp+9Ch+var_40]
.text:004026AC                 mov     [esp+9Ch+FileHandle], ecx ; int
.text:004026AF                 mov     [esp+9Ch+Mode], edx ; int
.text:004026B3                 call    sub_4091A0
.text:004026B8                 test    eax, eax
.text:004026BA                 mov     ecx, eax
.text:004026BC                 jle     loc_4027BA
.text:004026C2                 mov     edx, [esp+9Ch+Block]
.text:004026C6                 cmp     byte ptr [edx], 23h ; '#'
.text:004026C9                 jz      loc_4027B0
.text:004026CF                 cmp     byte ptr [eax+edx-1], 0Ah
.text:004026D4                 jz      loc_402B20
.text:004026DA
.text:004026DA loc_4026DA:                             ; CODE XREF: sub_4025F0+539↓j
.text:004026DA                 mov     [esp+9Ch+Mode], ecx
.text:004026DE                 lea     ebx, [esp+9Ch+var_48]
.text:004026E2                 mov     [esp+9Ch+var_8C], ebx
.text:004026E6                 lea     ebx, [esp+9Ch+var_49]
.text:004026EA                 mov     dword ptr [esp+9Ch+var_90], ebx
.text:004026EE                 lea     ebx, [esp+9Ch+var_50]
.text:004026F2                 mov     [esp+9Ch+File], ebx
.text:004026F6                 mov     [esp+9Ch+FileHandle], edx
.text:004026F9                 call    sub_402BA0
.text:004026FE                 test    al, al
.text:00402700                 jz      loc_402AA2
.text:00402706                 mov     ebx, [esp+9Ch+var_50]
.text:0040270A                 movzx   eax, byte ptr [ebx]
.text:0040270D                 test    al, al
.text:0040270F                 jz      short loc_402752
.text:00402711                 jmp     short loc_402720
.text:00402711 ; ---------------------------------------------------------------------------
.text:00402713                 align 10h
.text:00402720
.text:00402720 loc_402720:                             ; CODE XREF: sub_4025F0+121↑j
.text:00402720                                         ; sub_4025F0+160↓j
.text:00402720                 mov     ecx, ds:__mb_cur_max
.text:00402726                 movzx   edx, al
.text:00402729                 cmp     dword ptr [ecx], 1
.text:0040272C                 jz      loc_402B05
.text:00402732                 mov     [esp+9Ch+Mode], 80h ; '€' ; Type
.text:0040273A                 mov     [esp+9Ch+FileHandle], edx ; C
.text:0040273D                 call    _isctype
.text:00402742
.text:00402742 loc_402742:                             ; CODE XREF: sub_4025F0+525↓j
.text:00402742                 test    eax, eax
.text:00402744                 jz      loc_402AA2
.text:0040274A                 inc     ebx
.text:0040274B                 movzx   eax, byte ptr [ebx]
.text:0040274E                 test    al, al
.text:00402750                 jnz     short loc_402720
.text:00402752
.text:00402752 loc_402752:                             ; CODE XREF: sub_4025F0+11F↑j
.text:00402752                 movzx   ecx, [esp+9Ch+var_49]
.text:00402757                 lea     ebx, [esp+9Ch+var_3C]
.text:0040275B                 mov     eax, [esp+9Ch+arg_4]
.text:00402762                 add     [esp+9Ch+var_5C], 1
.text:00402767                 mov     edx, [esp+9Ch+var_48]
.text:0040276B                 mov     dword ptr [esp+9Ch+var_90], eax ; int
.text:0040276F                 adc     [esp+9Ch+var_58], 0
.text:00402774                 mov     [esp+9Ch+File], ebx ; int
.text:00402778                 mov     [esp+9Ch+Mode], ecx ; char
.text:0040277C                 mov     [esp+9Ch+FileHandle], edx ; FileName
.text:0040277F                 call    sub_4022D0
.text:00402784                 test    al, al
.text:00402786                 jnz     loc_4029E3
.text:0040278C                 add     dword ptr [esp+9Ch+var_6C], 1
.text:00402791                 adc     [esp+9Ch+var_68], 0
.text:00402796                 cmp     ds:byte_40B000, 0
.text:0040279D                 jz      loc_4029B0
.text:004027A3                 lea     esi, [esi+0]
.text:004027A9                 lea     edi, [edi+0]
.text:004027B0
.text:004027B0 loc_4027B0:                             ; CODE XREF: sub_4025F0+D9↑j
.text:004027B0                                         ; sub_4025F0+3EE↓j ...
.text:004027B0                 test    byte ptr [ebp+0Ch], 30h
.text:004027B4                 jz      loc_402690
.text:004027BA
.text:004027BA loc_4027BA:                             ; CODE XREF: sub_4025F0+CC↑j
.text:004027BA                 mov     eax, [esp+9Ch+Block]
.text:004027BE                 test    eax, eax
.text:004027C0                 jnz     loc_4029A3
.text:004027C6
.text:004027C6 loc_4027C6:                             ; CODE XREF: sub_4025F0+3BB↓j
.text:004027C6                 test    byte ptr [ebp+0Ch], 20h
.text:004027CA                 jnz     loc_40297D
.text:004027D0                 cmp     ebp, ds:_iob
.text:004027D6                 jz      short loc_4027E7
.text:004027D8                 mov     [esp+9Ch+FileHandle], ebp ; Stream
.text:004027DB                 call    fclose
.text:004027E0                 inc     eax
.text:004027E1                 jz      loc_40294C
.text:004027E7
.text:004027E7 loc_4027E7:                             ; CODE XREF: sub_4025F0+1E6↑j
.text:004027E7                 mov     ecx, [esp+9Ch+var_58]
.text:004027EB                 or      ecx, [esp+9Ch+var_5C]
.text:004027EF                 jz      loc_4028FE
.text:004027F5                 cmp     ds:byte_40B000, 0
.text:004027FC                 jnz     short loc_402816
.text:004027FE                 mov     eax, [esp+9Ch+var_68]
.text:00402802                 or      eax, dword ptr [esp+9Ch+var_6C]
.text:00402806                 jnz     loc_4028A4
.text:0040280C
.text:0040280C loc_40280C:                             ; CODE XREF: sub_4025F0+309↓j
.text:0040280C                 mov     ebx, [esp+9Ch+var_60]
.text:00402810                 or      ebx, dword ptr [esp+9Ch+var_64]
.text:00402814                 jnz     short loc_402846
.text:00402816
.text:00402816 loc_402816:                             ; CODE XREF: sub_4025F0+20C↑j
.text:00402816                                         ; sub_4025F0+2AF↓j ...
.text:00402816                 mov     edx, [esp+9Ch+var_58]
.text:0040281A                 xor     eax, eax
.text:0040281C                 or      edx, [esp+9Ch+var_5C]
.text:00402820                 jz      short loc_402838
.text:00402822                 mov     ecx, [esp+9Ch+var_60]
.text:00402826                 or      ecx, dword ptr [esp+9Ch+var_64]
.text:0040282A                 jnz     short loc_402838
.text:0040282C                 mov     ebx, [esp+9Ch+var_68]
.text:00402830                 or      ebx, dword ptr [esp+9Ch+var_6C]
.text:00402834                 jnz     short loc_402838
.text:00402836                 mov     al, 1
.text:00402838
.text:00402838 loc_402838:                             ; CODE XREF: sub_4025F0+230↑j
.text:00402838                                         ; sub_4025F0+23A↑j ...
.text:00402838                 movzx   eax, al
.text:0040283B
.text:0040283B loc_40283B:                             ; CODE XREF: sub_4025F0+388↓j
.text:0040283B                 add     esp, 8Ch
.text:00402841                 pop     ebx
.text:00402842                 pop     esi
.text:00402843                 pop     edi
.text:00402844                 pop     ebp
.text:00402845                 retn
.text:00402846 ; ---------------------------------------------------------------------------
.text:00402846
.text:00402846 loc_402846:                             ; CODE XREF: sub_4025F0+224↑j
.text:00402846                 mov     [esp+9Ch+Mode], offset aWarningI64uOfI_2 ; "WARNING: %I64u of %I64u computed checks"...
.text:0040284E                 mov     esi, [esp+9Ch+var_5C]
.text:00402852                 mov     ebp, [esp+9Ch+var_58]
.text:00402856                 sub     esi, dword ptr [esp+9Ch+var_6C]
.text:0040285A                 mov     [esp+9Ch+FileHandle], offset aWarningI64uOfI ; "WARNING: %I64u of %I64u computed checks"...
.text:00402861                 sbb     ebp, [esp+9Ch+var_68]
.text:00402865                 mov     [esp+9Ch+File], esi
.text:00402869                 call    ds:libintl_ngettext
.text:0040286F                 mov     [esp+9Ch+var_88], esi
.text:00402873                 mov     edi, dword ptr [esp+9Ch+var_64]
.text:00402877                 mov     esi, [esp+9Ch+var_60]
.text:0040287B                 mov     [esp+9Ch+var_84], ebp
.text:0040287F                 mov     dword ptr [esp+9Ch+var_90], edi ; char
.text:00402883                 mov     [esp+9Ch+var_8C], esi
.text:00402887                 mov     [esp+9Ch+File], eax ; char *
.text:0040288B                 mov     [esp+9Ch+Mode], 0 ; ErrorMessage
.text:00402893                 mov     [esp+9Ch+FileHandle], 0 ; Code
.text:0040289A                 call    sub_408F00
.text:0040289F                 jmp     loc_402816
.text:004028A4 ; ---------------------------------------------------------------------------
.text:004028A4
.text:004028A4 loc_4028A4:                             ; CODE XREF: sub_4025F0+216↑j
.text:004028A4                 mov     [esp+9Ch+Mode], offset aWarningI64uOfI_0 ; "WARNING: %I64u of %I64u listed files co"...
.text:004028AC                 mov     edx, [esp+9Ch+var_5C]
.text:004028B0                 mov     [esp+9Ch+FileHandle], offset aWarningI64uOfI_1 ; "WARNING: %I64u of %I64u listed file cou"...
.text:004028B7                 mov     [esp+9Ch+File], edx
.text:004028BB                 call    ds:libintl_ngettext
.text:004028C1                 mov     [esp+9Ch+Mode], 0 ; ErrorMessage
.text:004028C9                 mov     ecx, [esp+9Ch+var_5C]
.text:004028CD                 mov     ebp, [esp+9Ch+var_58]
.text:004028D1                 mov     [esp+9Ch+FileHandle], 0 ; Code
.text:004028D8                 mov     edi, dword ptr [esp+9Ch+var_6C]
.text:004028DC                 mov     esi, [esp+9Ch+var_68]
.text:004028E0                 mov     [esp+9Ch+var_88], ecx
.text:004028E4                 mov     [esp+9Ch+var_84], ebp
.text:004028E8                 mov     dword ptr [esp+9Ch+var_90], edi ; char
.text:004028EC                 mov     [esp+9Ch+var_8C], esi
.text:004028F0                 mov     [esp+9Ch+File], eax ; char *
.text:004028F4                 call    sub_408F00
.text:004028F9                 jmp     loc_40280C
.text:004028FE ; ---------------------------------------------------------------------------
.text:004028FE
.text:004028FE loc_4028FE:                             ; CODE XREF: sub_4025F0+1FF↑j
.text:004028FE                 mov     [esp+9Ch+FileHandle], offset aSNoProperlyFor ; "%s: no properly formatted %s checksum l"...
.text:00402905                 call    ds:libintl_gettext
.text:0040290B                 cmp     dword_40A010, 1
.text:00402912                 jz      short loc_402945
.text:00402914                 mov     edx, offset Str ; "SHA1"
.text:00402919
.text:00402919 loc_402919:                             ; CODE XREF: sub_4025F0+35A↓j
.text:00402919                 mov     [esp+9Ch+var_8C], edx
.text:0040291D                 mov     ebx, [esp+9Ch+FileName]
.text:00402924                 mov     [esp+9Ch+File], eax ; char *
.text:00402928                 mov     [esp+9Ch+Mode], 0 ; ErrorMessage
.text:00402930                 mov     dword ptr [esp+9Ch+var_90], ebx ; char
.text:00402934                 mov     [esp+9Ch+FileHandle], 0 ; Code
.text:0040293B                 call    sub_408F00
.text:00402940                 jmp     loc_402816
.text:00402945 ; ---------------------------------------------------------------------------
.text:00402945
.text:00402945 loc_402945:                             ; CODE XREF: sub_4025F0+322↑j
.text:00402945                 mov     edx, offset aMd5 ; "MD5"
.text:0040294A                 jmp     short loc_402919
.text:0040294C ; ---------------------------------------------------------------------------
.text:0040294C
.text:0040294C loc_40294C:                             ; CODE XREF: sub_4025F0+1F1↑j
.text:0040294C                 call    _errno
.text:00402951                 mov     edi, [esp+9Ch+FileName]
.text:00402958                 mov     dword ptr [esp+9Ch+var_90], edi ; char
.text:0040295C
.text:0040295C loc_40295C:                             ; CODE XREF: sub_4025F0+5A6↓j
.text:0040295C                 mov     [esp+9Ch+File], offset byte_4022C1 ; char *
.text:00402964                 mov     ebp, [eax]
.text:00402966                 mov     [esp+9Ch+Mode], ebp ; ErrorMessage
.text:0040296A
.text:0040296A loc_40296A:                             ; CODE XREF: sub_4025F0+3B1↓j
.text:0040296A                 mov     [esp+9Ch+FileHandle], 0 ; Code
.text:00402971                 call    sub_408F00
.text:00402976                 xor     eax, eax
.text:00402978                 jmp     loc_40283B
.text:0040297D ; ---------------------------------------------------------------------------
.text:0040297D
.text:0040297D loc_40297D:                             ; CODE XREF: sub_4025F0+1DA↑j
.text:0040297D                 mov     [esp+9Ch+FileHandle], offset aSReadError ; "%s: read error"
.text:00402984                 call    ds:libintl_gettext
.text:0040298A                 mov     [esp+9Ch+Mode], 0
.text:00402992                 mov     esi, [esp+9Ch+FileName]
.text:00402999                 mov     [esp+9Ch+File], eax
.text:0040299D                 mov     dword ptr [esp+9Ch+var_90], esi
.text:004029A1                 jmp     short loc_40296A
.text:004029A3 ; ---------------------------------------------------------------------------
.text:004029A3
.text:004029A3 loc_4029A3:                             ; CODE XREF: sub_4025F0+1D0↑j
.text:004029A3                 mov     [esp+9Ch+FileHandle], eax ; Block
.text:004029A6                 call    free
.text:004029AB                 jmp     loc_4027C6
.text:004029B0 ; ---------------------------------------------------------------------------
.text:004029B0
.text:004029B0 loc_4029B0:                             ; CODE XREF: sub_4025F0+1AD↑j
.text:004029B0                 mov     [esp+9Ch+FileHandle], offset aSFailedOpenOrR ; "%s: FAILED open or read\n"
.text:004029B7                 call    ds:libintl_gettext
.text:004029BD                 mov     ecx, [esp+9Ch+var_48]
.text:004029C1                 mov     [esp+9Ch+FileHandle], eax ; Format
.text:004029C4                 mov     [esp+9Ch+Mode], ecx
.text:004029C8                 call    printf
.text:004029CD
.text:004029CD loc_4029CD:                             ; CODE XREF: sub_4025F0+44D↓j
.text:004029CD                 mov     edx, ds:_iob
.text:004029D3                 add     edx, 20h ; ' '
.text:004029D6                 mov     [esp+9Ch+FileHandle], edx ; Stream
.text:004029D9                 call    fflush
.text:004029DE                 jmp     loc_4027B0
.text:004029E3 ; ---------------------------------------------------------------------------
.text:004029E3
.text:004029E3 loc_4029E3:                             ; CODE XREF: sub_4025F0+196↑j
.text:004029E3                 mov     edx, ds:dword_40B040
.text:004029E9                 xor     ebx, ebx
.text:004029EB                 shr     edx, 1
.text:004029ED                 mov     [esp+9Ch+var_70], edx
.text:004029F1                 cmp     ebx, edx
.text:004029F3                 jb      short loc_402A48
.text:004029F5
.text:004029F5 loc_4029F5:                             ; CODE XREF: sub_4025F0+47C↓j
.text:004029F5                                         ; sub_4025F0+4A0↓j ...
.text:004029F5                 cmp     ebx, [esp+9Ch+var_70]
.text:004029F9                 jz      short loc_402A05
.text:004029FB                 add     dword ptr [esp+9Ch+var_64], 1
.text:00402A00                 adc     [esp+9Ch+var_60], 0
.text:00402A05
.text:00402A05 loc_402A05:                             ; CODE XREF: sub_4025F0+409↑j
.text:00402A05                 cmp     ds:byte_40B000, 0
.text:00402A0C                 jnz     loc_4027B0
.text:00402A12                 cmp     ebx, [esp+9Ch+var_70]
.text:00402A16                 jz      short loc_402A3F
.text:00402A18                 mov     [esp+9Ch+FileHandle], offset aFailed ; "FAILED"
.text:00402A1F
.text:00402A1F loc_402A1F:                             ; CODE XREF: sub_4025F0+456↓j
.text:00402A1F                 call    ds:libintl_gettext
.text:00402A25                 mov     [esp+9Ch+FileHandle], offset aSS ; "%s: %s\n"
.text:00402A2C                 mov     ebx, [esp+9Ch+var_48]
.text:00402A30                 mov     [esp+9Ch+File], eax
.text:00402A34                 mov     [esp+9Ch+Mode], ebx
.text:00402A38                 call    printf
.text:00402A3D                 jmp     short loc_4029CD
.text:00402A3F ; ---------------------------------------------------------------------------
.text:00402A3F
.text:00402A3F loc_402A3F:                             ; CODE XREF: sub_4025F0+426↑j
.text:00402A3F                 mov     [esp+9Ch+FileHandle], offset aOk ; "OK"
.text:00402A46                 jmp     short loc_402A1F
.text:00402A48 ; ---------------------------------------------------------------------------
.text:00402A48
.text:00402A48 loc_402A48:                             ; CODE XREF: sub_4025F0+403↑j
.text:00402A48                                         ; sub_4025F0+4AB↓j
.text:00402A48                 mov     ecx, [esp+9Ch+var_50]
.text:00402A4C                 movzx   edx, byte ptr [ecx+ebx*2]
.text:00402A50                 mov     [esp+9Ch+FileHandle], edx ; C
.text:00402A53                 call    tolower
.text:00402A58                 movzx   ecx, byte ptr [esp+ebx+9Ch+var_3C]
.text:00402A5D                 shr     cl, 4
.text:00402A60                 movzx   edx, cl
.text:00402A63                 movsx   ecx, ds:byte_401340[edx]
.text:00402A6A                 cmp     eax, ecx
.text:00402A6C                 jnz     short loc_4029F5
.text:00402A6E                 mov     ecx, [esp+9Ch+var_50]
.text:00402A72                 movzx   edx, byte ptr [ecx+ebx*2+1]
.text:00402A77                 mov     [esp+9Ch+FileHandle], edx ; C
.text:00402A7A                 call    tolower
.text:00402A7F                 movzx   edx, byte ptr [esp+ebx+9Ch+var_3C]
.text:00402A84                 and     edx, 0Fh
.text:00402A87                 movsx   ecx, ds:byte_401340[edx]
.text:00402A8E                 cmp     eax, ecx
.text:00402A90                 jnz     loc_4029F5
.text:00402A96                 inc     ebx
.text:00402A97                 cmp     ebx, [esp+9Ch+var_70]
.text:00402A9B                 jb      short loc_402A48
.text:00402A9D                 jmp     loc_4029F5
.text:00402AA2 ; ---------------------------------------------------------------------------
.text:00402AA2
.text:00402AA2 loc_402AA2:                             ; CODE XREF: sub_4025F0+110↑j
.text:00402AA2                                         ; sub_4025F0+154↑j
.text:00402AA2                 cmp     ds:byte_40B010, 0
.text:00402AA9                 jz      loc_4027B0
.text:00402AAF                 mov     [esp+9Ch+FileHandle], offset aSI64uImproperl ; "%s: %I64u: improperly formatted %s chec"...
.text:00402AB6                 call    ds:libintl_gettext
.text:00402ABC                 cmp     dword_40A010, 1
.text:00402AC3                 jz      short loc_402AFE
.text:00402AC5                 mov     edx, offset Str ; "SHA1"
.text:00402ACA
.text:00402ACA loc_402ACA:                             ; CODE XREF: sub_4025F0+513↓j
.text:00402ACA                 mov     [esp+9Ch+var_84], edx
.text:00402ACE                 mov     ebx, [esp+9Ch+FileName]
.text:00402AD5                 mov     [esp+9Ch+var_8C], esi
.text:00402AD9                 mov     [esp+9Ch+var_88], edi
.text:00402ADD                 mov     dword ptr [esp+9Ch+var_90], ebx ; char
.text:00402AE1                 mov     [esp+9Ch+File], eax ; char *
.text:00402AE5                 mov     [esp+9Ch+Mode], 0 ; ErrorMessage
.text:00402AED                 mov     [esp+9Ch+FileHandle], 0 ; Code
.text:00402AF4                 call    sub_408F00
.text:00402AF9                 jmp     loc_4027B0
.text:00402AFE ; ---------------------------------------------------------------------------
.text:00402AFE
.text:00402AFE loc_402AFE:                             ; CODE XREF: sub_4025F0+4D3↑j
.text:00402AFE                 mov     edx, offset aMd5 ; "MD5"
.text:00402B03                 jmp     short loc_402ACA
.text:00402B05 ; ---------------------------------------------------------------------------
.text:00402B05
.text:00402B05 loc_402B05:                             ; CODE XREF: sub_4025F0+13C↑j
.text:00402B05                 mov     eax, ds:_pctype
.text:00402B0A                 mov     ecx, [eax]
.text:00402B0C                 movzx   eax, word ptr [ecx+edx*2]
.text:00402B10                 and     eax, 80h
.text:00402B15                 jmp     loc_402742
.text:00402B15 ; ---------------------------------------------------------------------------
.text:00402B1A                 align 10h
.text:00402B20
.text:00402B20 loc_402B20:                             ; CODE XREF: sub_4025F0+E4↑j
.text:00402B20                 dec     ecx
.text:00402B21                 mov     byte ptr [ecx+edx], 0
.text:00402B25                 mov     edx, [esp+9Ch+Block]
.text:00402B29                 jmp     loc_4026DA
.text:00402B29 ; ---------------------------------------------------------------------------
.text:00402B2E                 align 10h
.text:00402B30
.text:00402B30 loc_402B30:                             ; CODE XREF: sub_4025F0+AA↑j
.text:00402B30                 mov     [esp+9Ch+FileHandle], offset aSTooManyChecks ; "%s: too many checksum lines"
.text:00402B37                 call    ds:libintl_gettext
.text:00402B3D                 mov     [esp+9Ch+Mode], 0 ; ErrorMessage
.text:00402B45                 mov     ebx, [esp+9Ch+FileName]
.text:00402B4C                 mov     [esp+9Ch+FileHandle], 1 ; Code
.text:00402B53                 mov     dword ptr [esp+9Ch+var_90], ebx ; char
.text:00402B57                 mov     [esp+9Ch+File], eax ; char *
.text:00402B5B                 call    sub_408F00
.text:00402B60                 jmp     loc_4026A0
.text:00402B65 ; ---------------------------------------------------------------------------
.text:00402B65
.text:00402B65 loc_402B65:                             ; CODE XREF: sub_4025F0+4E↑j
.text:00402B65                 mov     [esp+9Ch+Mode], offset aR ; "r"
.text:00402B6D                 mov     edx, [esp+9Ch+FileName]
.text:00402B74                 mov     [esp+9Ch+FileHandle], edx ; FileName
.text:00402B77                 call    fopen
.text:00402B7C                 test    eax, eax
.text:00402B7E                 mov     ebp, eax
.text:00402B80                 jnz     loc_402665
.text:00402B86                 call    _errno
.text:00402B8B                 mov     ecx, [esp+9Ch+FileName]
.text:00402B92                 mov     dword ptr [esp+9Ch+var_90], ecx
.text:00402B96                 jmp     loc_40295C
.text:00402B96 sub_4025F0      endp
.text:00402B96
.text:00402B96 ; ---------------------------------------------------------------------------
.text:00402B9B byte_402B9B     db 20h                  ; DATA XREF: sub_402BA0+78↓o
.text:00402B9C                 dd 0F6890028h
.text:00402BA0
.text:00402BA0 ; =============== S U B R O U T I N E =======================================
.text:00402BA0
.text:00402BA0
.text:00402BA0 sub_402BA0      proc near               ; CODE XREF: sub_4025F0+109↑p
.text:00402BA0
.text:00402BA0 Str             = dword ptr -2Ch
.text:00402BA0 Str2            = dword ptr -28h
.text:00402BA0 MaxCount        = dword ptr -24h
.text:00402BA0 var_1C          = dword ptr -1Ch
.text:00402BA0 var_18          = dword ptr -18h
.text:00402BA0 var_11          = byte ptr -11h
.text:00402BA0 arg_0           = dword ptr  4
.text:00402BA0 arg_4           = dword ptr  8
.text:00402BA0 arg_8           = dword ptr  0Ch
.text:00402BA0 arg_C           = dword ptr  10h
.text:00402BA0 arg_10          = dword ptr  14h
.text:00402BA0
.text:00402BA0                 push    ebp
.text:00402BA1                 push    edi
.text:00402BA2                 push    esi
.text:00402BA3                 push    ebx
.text:00402BA4                 sub     esp, 1Ch
.text:00402BA7                 xor     ebx, ebx
.text:00402BA9                 mov     [esp+2Ch+var_11], 0
.text:00402BAE                 mov     ecx, [esp+2Ch+arg_0]
.text:00402BB2                 movzx   eax, byte ptr [ecx]
.text:00402BB5                 cmp     al, 20h ; ' '
.text:00402BB7                 jz      loc_402E20
.text:00402BBD                 cmp     al, 9
.text:00402BBF                 jz      loc_402E20
.text:00402BC5
.text:00402BC5 loc_402BC5:                             ; CODE XREF: sub_402BA0+291↓j
.text:00402BC5                 cmp     dword_40A010, 1
.text:00402BCC                 jz      loc_402E11
.text:00402BD2                 mov     eax, offset Str ; "SHA1"
.text:00402BD7
.text:00402BD7 loc_402BD7:                             ; CODE XREF: sub_402BA0+276↓j
.text:00402BD7                 mov     [esp+2Ch+Str], eax ; Str
.text:00402BDA                 call    strlen
.text:00402BDF                 cmp     dword_40A010, 1
.text:00402BE6                 mov     [esp+2Ch+var_1C], eax
.text:00402BEA                 mov     [esp+2Ch+MaxCount], eax ; MaxCount
.text:00402BEE                 jz      loc_402E07
.text:00402BF4                 mov     eax, offset Str ; "SHA1"
.text:00402BF9
.text:00402BF9 loc_402BF9:                             ; CODE XREF: sub_402BA0+26C↓j
.text:00402BF9                 mov     [esp+2Ch+Str2], eax ; Str2
.text:00402BFD                 mov     ebp, [esp+2Ch+arg_0]
.text:00402C01                 add     ebp, ebx
.text:00402C03                 mov     [esp+2Ch+Str], ebp ; Str1
.text:00402C06                 call    strncmp
.text:00402C0B                 test    eax, eax
.text:00402C0D                 jnz     loc_402CEB
.text:00402C13                 cld
.text:00402C14                 mov     ecx, [esp+2Ch+var_1C]
.text:00402C18                 mov     edx, offset byte_402B9B
.text:00402C1D                 mov     edi, edx
.text:00402C1F                 lea     esi, [ecx+ebp]
.text:00402C22                 mov     ecx, 2
.text:00402C27                 mov     [esp+2Ch+var_18], esi
.text:00402C2B                 repe cmpsb
.text:00402C2D                 jnz     loc_402CEB
.text:00402C33                 mov     edi, [esp+2Ch+var_1C]
.text:00402C37                 mov     ecx, [esp+2Ch+var_18]
.text:00402C3B                 mov     eax, [esp+2Ch+arg_10]
.text:00402C3F                 lea     esi, [edi+ebx]
.text:00402C42                 mov     ebp, [esp+2Ch+arg_C]
.text:00402C46                 add     ecx, 2
.text:00402C49                 sub     [esp+2Ch+arg_4], esi
.text:00402C4D                 mov     [eax], ecx
.text:00402C4F                 mov     byte ptr [ebp+0], 0
.text:00402C53                 mov     eax, [esp+2Ch+arg_4]
.text:00402C57                 sub     eax, 3
.text:00402C5A                 jz      loc_402CE5
.text:00402C60                 cmp     byte ptr [eax+ecx], 29h ; ')'
.text:00402C64                 jz      short loc_402C6F
.text:00402C66
.text:00402C66 loc_402C66:                             ; CODE XREF: sub_402BA0+CD↓j
.text:00402C66                 dec     eax
.text:00402C67                 jz      short loc_402CD9
.text:00402C69                 cmp     byte ptr [eax+ecx], 29h ; ')'
.text:00402C6D                 jnz     short loc_402C66
.text:00402C6F
.text:00402C6F loc_402C6F:                             ; CODE XREF: sub_402BA0+C4↑j
.text:00402C6F                                         ; sub_402BA0+143↓j
.text:00402C6F                 mov     byte ptr [eax+ecx], 0
.text:00402C73                 inc     eax
.text:00402C74                 movzx   edx, byte ptr [eax+ecx]
.text:00402C78                 cmp     dl, 20h ; ' '
.text:00402C7B                 jz      short loc_402CC8
.text:00402C7D                 cmp     dl, 9
.text:00402C80                 jz      short loc_402CC8
.text:00402C82
.text:00402C82 loc_402C82:                             ; CODE XREF: sub_402BA0+137↓j
.text:00402C82                 xor     ebx, ebx
.text:00402C84                 cmp     dl, 3Dh ; '='
.text:00402C87                 jz      short loc_402C98
.text:00402C89
.text:00402C89 loc_402C89:                             ; CODE XREF: sub_402BA0+115↓j
.text:00402C89                                         ; sub_402BA0+141↓j
.text:00402C89                 movzx   eax, bl
.text:00402C8C                 lea     esi, [esi+0]
.text:00402C90
.text:00402C90 loc_402C90:                             ; CODE XREF: sub_402BA0+16C↓j
.text:00402C90                                         ; sub_402BA0+197↓j ...
.text:00402C90                 add     esp, 1Ch
.text:00402C93                 pop     ebx
.text:00402C94                 pop     esi
.text:00402C95                 pop     edi
.text:00402C96                 pop     ebp
.text:00402C97                 retn
.text:00402C98 ; ---------------------------------------------------------------------------
.text:00402C98
.text:00402C98 loc_402C98:                             ; CODE XREF: sub_402BA0+E7↑j
.text:00402C98                 inc     eax
.text:00402C99                 movzx   edx, byte ptr [eax+ecx]
.text:00402C9D                 cmp     dl, 20h ; ' '
.text:00402CA0                 jz      short loc_402CB7
.text:00402CA2                 cmp     dl, 9
.text:00402CA5                 jz      short loc_402CB7
.text:00402CA7
.text:00402CA7 loc_402CA7:                             ; CODE XREF: sub_402BA0+126↓j
.text:00402CA7                 mov     ebx, [esp+2Ch+arg_8]
.text:00402CAB                 lea     edx, [eax+ecx]
.text:00402CAE                 mov     [ebx], edx
.text:00402CB0                 mov     ebx, 1
.text:00402CB5                 jmp     short loc_402C89
.text:00402CB7 ; ---------------------------------------------------------------------------
.text:00402CB7
.text:00402CB7 loc_402CB7:                             ; CODE XREF: sub_402BA0+100↑j
.text:00402CB7                                         ; sub_402BA0+105↑j ...
.text:00402CB7                 inc     eax
.text:00402CB8                 movzx   edx, byte ptr [eax+ecx]
.text:00402CBC                 cmp     dl, 20h ; ' '
.text:00402CBF                 jz      short loc_402CB7
.text:00402CC1                 cmp     dl, 9
.text:00402CC4                 jz      short loc_402CB7
.text:00402CC6                 jmp     short loc_402CA7
.text:00402CC8 ; ---------------------------------------------------------------------------
.text:00402CC8
.text:00402CC8 loc_402CC8:                             ; CODE XREF: sub_402BA0+DB↑j
.text:00402CC8                                         ; sub_402BA0+E0↑j ...
.text:00402CC8                 inc     eax
.text:00402CC9                 movzx   edx, byte ptr [eax+ecx]
.text:00402CCD                 cmp     dl, 20h ; ' '
.text:00402CD0                 jz      short loc_402CC8
.text:00402CD2                 cmp     dl, 9
.text:00402CD5                 jz      short loc_402CC8
.text:00402CD7                 jmp     short loc_402C82
.text:00402CD9 ; ---------------------------------------------------------------------------
.text:00402CD9
.text:00402CD9 loc_402CD9:                             ; CODE XREF: sub_402BA0+C7↑j
.text:00402CD9                 movzx   edx, byte ptr [ecx]
.text:00402CDC
.text:00402CDC loc_402CDC:                             ; CODE XREF: sub_402BA0+149↓j
.text:00402CDC                 xor     ebx, ebx
.text:00402CDE                 cmp     dl, 29h ; ')'
.text:00402CE1                 jnz     short loc_402C89
.text:00402CE3                 jmp     short loc_402C6F
.text:00402CE5 ; ---------------------------------------------------------------------------
.text:00402CE5
.text:00402CE5 loc_402CE5:                             ; CODE XREF: sub_402BA0+BA↑j
.text:00402CE5                 movzx   edx, byte ptr [eax+ecx]
.text:00402CE9                 jmp     short loc_402CDC
.text:00402CEB ; ---------------------------------------------------------------------------
.text:00402CEB
.text:00402CEB loc_402CEB:                             ; CODE XREF: sub_402BA0+6D↑j
.text:00402CEB                                         ; sub_402BA0+8D↑j
.text:00402CEB                 mov     eax, [esp+2Ch+arg_0]
.text:00402CEF                 mov     edx, [esp+2Ch+arg_4]
.text:00402CF3                 movzx   ecx, byte ptr [ebx+eax]
.text:00402CF7                 sub     edx, ebx
.text:00402CF9                 cmp     cl, 5Ch ; '\'
.text:00402CFC                 jz      loc_402DF9
.text:00402D02                 cmp     edx, ds:dword_40B030
.text:00402D08
.text:00402D08 loc_402D08:                             ; CODE XREF: sub_402BA0+262↓j
.text:00402D08                 jnb     short loc_402D0E
.text:00402D0A                 xor     eax, eax
.text:00402D0C                 jmp     short loc_402C90
.text:00402D0E ; ---------------------------------------------------------------------------
.text:00402D0E
.text:00402D0E loc_402D0E:                             ; CODE XREF: sub_402BA0:loc_402D08↑j
.text:00402D0E                 cmp     cl, 5Ch ; '\'
.text:00402D11                 jz      loc_402DE7
.text:00402D17
.text:00402D17 loc_402D17:                             ; CODE XREF: sub_402BA0+254↓j
.text:00402D17                 mov     eax, [esp+2Ch+arg_8]
.text:00402D1B                 mov     edi, ds:dword_40B040
.text:00402D21                 mov     [eax], ebp
.text:00402D23                 mov     ebp, [esp+2Ch+arg_0]
.text:00402D27                 add     ebx, edi
.text:00402D29                 movzx   edx, byte ptr [ebx+ebp]
.text:00402D2D                 cmp     dl, 20h ; ' '
.text:00402D30                 jz      short loc_402D3D
.text:00402D32                 xor     eax, eax
.text:00402D34                 cmp     dl, 9
.text:00402D37                 jnz     loc_402C90
.text:00402D3D
.text:00402D3D loc_402D3D:                             ; CODE XREF: sub_402BA0+190↑j
.text:00402D3D                 mov     esi, [esp+2Ch+arg_0]
.text:00402D41                 mov     byte ptr [ebx+esi], 0
.text:00402D45                 inc     ebx
.text:00402D46                 movzx   edx, byte ptr [ebx+esi]
.text:00402D4A                 cmp     dl, 20h ; ' '
.text:00402D4D                 jz      short loc_402D5A
.text:00402D4F                 xor     eax, eax
.text:00402D51                 cmp     dl, 2Ah ; '*'
.text:00402D54                 jnz     loc_402C90
.text:00402D5A
.text:00402D5A loc_402D5A:                             ; CODE XREF: sub_402BA0+1AD↑j
.text:00402D5A                 mov     ebp, [esp+2Ch+arg_0]
.text:00402D5E                 mov     edi, ebx
.text:00402D60                 inc     ebx
.text:00402D61                 mov     edx, [esp+2Ch+arg_C]
.text:00402D65                 mov     ecx, [esp+2Ch+arg_10]
.text:00402D69                 mov     eax, ebp
.text:00402D6B                 cmp     byte ptr [edi+ebp], 2Ah ; '*'
.text:00402D6F                 setz    byte ptr [edx]
.text:00402D72                 add     eax, ebx
.text:00402D74                 cmp     [esp+2Ch+var_11], 0
.text:00402D79                 mov     [ecx], eax
.text:00402D7B                 jz      short loc_402DB1
.text:00402D7D                 cmp     ebx, [esp+2Ch+arg_4]
.text:00402D81                 mov     esi, eax
.text:00402D83                 jnb     short loc_402DAE
.text:00402D85                 mov     edi, [esp+2Ch+arg_4]
.text:00402D89                 dec     edi
.text:00402D8A
.text:00402D8A loc_402D8A:                             ; CODE XREF: sub_402BA0+20C↓j
.text:00402D8A                 mov     ebp, [esp+2Ch+arg_0]
.text:00402D8E                 xor     eax, eax
.text:00402D90                 movzx   ecx, byte ptr [ebx+ebp]
.text:00402D94                 movsx   edx, cl
.text:00402D97                 test    edx, edx
.text:00402D99                 jz      loc_402C90
.text:00402D9F                 cmp     edx, 5Ch ; '\'
.text:00402DA2                 jz      short loc_402DBB
.text:00402DA4                 mov     [esi], cl
.text:00402DA6                 inc     ebx
.text:00402DA7
.text:00402DA7 loc_402DA7:                             ; CODE XREF: sub_402BA0+240↓j
.text:00402DA7                                         ; sub_402BA0+245↓j
.text:00402DA7                 inc     esi
.text:00402DA8                 cmp     ebx, [esp+2Ch+arg_4]
.text:00402DAC                 jb      short loc_402D8A
.text:00402DAE
.text:00402DAE loc_402DAE:                             ; CODE XREF: sub_402BA0+1E3↑j
.text:00402DAE                 mov     byte ptr [esi], 0
.text:00402DB1
.text:00402DB1 loc_402DB1:                             ; CODE XREF: sub_402BA0+1DB↑j
.text:00402DB1                 mov     eax, 1
.text:00402DB6                 jmp     loc_402C90
.text:00402DBB ; ---------------------------------------------------------------------------
.text:00402DBB
.text:00402DBB loc_402DBB:                             ; CODE XREF: sub_402BA0+202↑j
.text:00402DBB                 cmp     ebx, edi
.text:00402DBD                 jz      loc_402C90
.text:00402DC3                 mov     ecx, [esp+2Ch+arg_0]
.text:00402DC7                 inc     ebx
.text:00402DC8                 movsx   edx, byte ptr [ebx+ecx]
.text:00402DCC                 inc     ebx
.text:00402DCD                 cmp     edx, 5Ch ; '\'
.text:00402DD0                 jz      short loc_402DE2
.text:00402DD2                 xor     eax, eax
.text:00402DD4                 cmp     edx, 6Eh ; 'n'
.text:00402DD7                 jnz     loc_402C90
.text:00402DDD                 mov     byte ptr [esi], 0Ah
.text:00402DE0                 jmp     short loc_402DA7
.text:00402DE2 ; ---------------------------------------------------------------------------
.text:00402DE2
.text:00402DE2 loc_402DE2:                             ; CODE XREF: sub_402BA0+230↑j
.text:00402DE2                 mov     byte ptr [esi], 5Ch ; '\'
.text:00402DE5                 jmp     short loc_402DA7
.text:00402DE7 ; ---------------------------------------------------------------------------
.text:00402DE7
.text:00402DE7 loc_402DE7:                             ; CODE XREF: sub_402BA0+171↑j
.text:00402DE7                 mov     [esp+2Ch+var_11], 1
.text:00402DEC                 mov     ecx, [esp+2Ch+arg_0]
.text:00402DF0                 inc     ebx
.text:00402DF1                 lea     ebp, [ebx+ecx]
.text:00402DF4                 jmp     loc_402D17
.text:00402DF9 ; ---------------------------------------------------------------------------
.text:00402DF9
.text:00402DF9 loc_402DF9:                             ; CODE XREF: sub_402BA0+15C↑j
.text:00402DF9                 mov     esi, ds:dword_40B030
.text:00402DFF                 inc     esi
.text:00402E00                 cmp     edx, esi
.text:00402E02                 jmp     loc_402D08
.text:00402E07 ; ---------------------------------------------------------------------------
.text:00402E07
.text:00402E07 loc_402E07:                             ; CODE XREF: sub_402BA0+4E↑j
.text:00402E07                 mov     eax, offset aMd5 ; "MD5"
.text:00402E0C                 jmp     loc_402BF9
.text:00402E11 ; ---------------------------------------------------------------------------
.text:00402E11
.text:00402E11 loc_402E11:                             ; CODE XREF: sub_402BA0+2C↑j
.text:00402E11                 mov     eax, offset aMd5 ; "MD5"
.text:00402E16                 jmp     loc_402BD7
.text:00402E16 ; ---------------------------------------------------------------------------
.text:00402E1B                 align 10h
.text:00402E20
.text:00402E20 loc_402E20:                             ; CODE XREF: sub_402BA0+17↑j
.text:00402E20                                         ; sub_402BA0+1F↑j ...
.text:00402E20                 mov     edx, [esp+2Ch+arg_0]
.text:00402E24                 inc     ebx
.text:00402E25                 movzx   eax, byte ptr [ebx+edx]
.text:00402E29                 cmp     al, 20h ; ' '
.text:00402E2B                 jz      short loc_402E20
.text:00402E2D                 cmp     al, 9
.text:00402E2F                 jz      short loc_402E20
.text:00402E31                 jmp     loc_402BC5
.text:00402E31 sub_402BA0      endp
.text:00402E31
.text:00402E31 ; ---------------------------------------------------------------------------
.text:00402E36                 align 10h
.text:00402E40 dword_402E40    dd 90002D2Dh, 7 dup(90909090h)
.text:00402E40                                         ; DATA XREF: sub_403090+E4↓o
.text:00402E60 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402E60                                         ; DATA XREF: sub_403090+2FC↓o
.text:00402E8D                 align 20h
.text:00402EA0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402EA0                                         ; DATA XREF: sub_403090:loc_4033F2↓o
.text:00402ECD                 align 20h
.text:00402EE0 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00402EE0                                         ; DATA XREF: sub_403090:loc_403490↓o
.text:00402EE0                                         ; sub_403090:loc_403857↓o
.text:00402F06                 align 20h
.text:00402F20 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00402F20                                         ; DATA XREF: sub_403090+48E↓o
.text:00402F40 dword_402F40    dd 90909000h, 7 dup(90909090h)
.text:00402F40                                         ; DATA XREF: sub_403090:loc_403561↓o
.text:00402F60 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00402F60                                         ; DATA XREF: sub_403090:loc_40357A↓o
.text:00402F80 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00402F80                                         ; DATA XREF: sub_403090:loc_40365F↓o
.text:00402F80                                         ; sub_403090:loc_40398C↓o
.text:00402FA7                 align 20h
.text:00402FC0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402FC0                                         ; DATA XREF: sub_403090:loc_4037D3↓o
.text:00402FEE                 align 20h
.text:00403000 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00403000                                         ; DATA XREF: sub_403090:loc_4038BF↓o
.text:00403021 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00403021                                         ; DATA XREF: sub_403090+93F↓o
.text:0040303B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0040303B                                         ; DATA XREF: sub_403090:loc_403A07↓o
.text:00403055 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00403055                                         ; DATA XREF: sub_403090:loc_403A2E↓o
.text:00403073 ; const char VarName[]
.text:00403073 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_403090:loc_403BE0↓o
.text:00403083                 align 10h
.text:00403090
.text:00403090 ; =============== S U B R O U T I N E =======================================
.text:00403090
.text:00403090
.text:00403090 ; int __cdecl sub_403090(int, int, char *Str, int, int, int, int, int)
.text:00403090 sub_403090      proc near               ; CODE XREF: sub_403C20+5A↓p
.text:00403090                                         ; .text:00403D0A↓p ...
.text:00403090
.text:00403090 Str1            = dword ptr -5Ch
.text:00403090 Str2            = dword ptr -58h
.text:00403090 MaxCount        = dword ptr -54h
.text:00403090 var_50          = dword ptr -50h
.text:00403090 var_4C          = dword ptr -4Ch
.text:00403090 var_3C          = dword ptr -3Ch
.text:00403090 var_38          = dword ptr -38h
.text:00403090 var_34          = dword ptr -34h
.text:00403090 var_30          = dword ptr -30h
.text:00403090 var_2C          = dword ptr -2Ch
.text:00403090 var_28          = dword ptr -28h
.text:00403090 var_24          = dword ptr -24h
.text:00403090 var_20          = dword ptr -20h
.text:00403090 var_1C          = dword ptr -1Ch
.text:00403090 var_18          = dword ptr -18h
.text:00403090 var_14          = dword ptr -14h
.text:00403090 arg_0           = dword ptr  4
.text:00403090 arg_4           = dword ptr  8
.text:00403090 Str             = dword ptr  0Ch
.text:00403090 arg_C           = dword ptr  10h
.text:00403090 arg_10          = dword ptr  14h
.text:00403090 arg_14          = dword ptr  18h
.text:00403090 arg_18          = dword ptr  1Ch
.text:00403090 arg_1C          = dword ptr  20h
.text:00403090
.text:00403090                 push    ebp
.text:00403091                 mov     eax, 0FFFFFFFFh
.text:00403096                 push    edi
.text:00403097                 push    esi
.text:00403098                 push    ebx
.text:00403099                 sub     esp, 4Ch
.text:0040309C                 mov     esi, [esp+5Ch+Str]
.text:004030A0                 mov     ebp, [esp+5Ch+arg_1C]
.text:004030A4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:004030A7                 mov     ebx, [ebp+4]
.text:004030AA                 setz    dl
.text:004030AD                 movzx   ecx, dl
.text:004030B0                 dec     ecx
.text:004030B1                 and     ecx, ebx
.text:004030B3                 mov     [esp+5Ch+var_14], ecx
.text:004030B7                 mov     ecx, [esp+5Ch+arg_0]
.text:004030BB                 test    ecx, ecx
.text:004030BD                 jle     loc_4031E7
.text:004030C3                 mov     dword ptr [ebp+0Ch], 0
.text:004030CA                 mov     ebx, [ebp+0]
.text:004030CD                 test    ebx, ebx
.text:004030CF                 jz      loc_403C00
.text:004030D5                 mov     edi, [ebp+10h]
.text:004030D8                 test    edi, edi
.text:004030DA                 jnz     short loc_403133
.text:004030DC                 lea     esi, [esi+0]
.text:004030E0
.text:004030E0 loc_4030E0:                             ; CODE XREF: sub_403090+B7C↓j
.text:004030E0                 mov     [ebp+24h], ebx
.text:004030E3                 mov     esi, [esp+5Ch+Str]
.text:004030E7                 mov     [ebp+20h], ebx
.text:004030EA                 mov     ecx, [esp+5Ch+arg_18]
.text:004030EE                 xor     ebx, ebx
.text:004030F0                 mov     dword ptr [ebp+14h], 0
.text:004030F7                 test    ecx, ecx
.text:004030F9                 jz      loc_403BE0
.text:004030FF
.text:004030FF loc_4030FF:                             ; CODE XREF: sub_403090+B64↓j
.text:004030FF                 mov     ebx, 1
.text:00403104
.text:00403104 loc_403104:                             ; CODE XREF: sub_403090+B5E↓j
.text:00403104                 mov     [ebp+1Ch], ebx
.text:00403107                 mov     ecx, [esp+5Ch+Str]
.text:0040310B                 movzx   eax, byte ptr [ecx]
.text:0040310E                 cmp     al, 2Dh ; '-'
.text:00403110                 jz      loc_403BD0
.text:00403116                 cmp     al, 2Bh ; '+'
.text:00403118                 jz      loc_403BB9
.text:0040311E                 xor     edx, edx
.text:00403120                 test    ebx, ebx
.text:00403122                 setz    dl
.text:00403125                 mov     [ebp+18h], edx
.text:00403128
.text:00403128 loc_403128:                             ; CODE XREF: sub_403090+B35↓j
.text:00403128                 mov     [esp+5Ch+Str], esi
.text:0040312C                 mov     dword ptr [ebp+10h], 1
.text:00403133
.text:00403133 loc_403133:                             ; CODE XREF: sub_403090+4A↑j
.text:00403133                 mov     eax, [ebp+14h]
.text:00403136                 test    eax, eax
.text:00403138                 jz      short loc_403143
.text:0040313A                 cmp     byte ptr [eax], 0
.text:0040313D                 jnz     loc_403220
.text:00403143
.text:00403143 loc_403143:                             ; CODE XREF: sub_403090+A8↑j
.text:00403143                 mov     ebx, [ebp+0]
.text:00403146                 cmp     [ebp+24h], ebx
.text:00403149                 jle     short loc_40314E
.text:0040314B                 mov     [ebp+24h], ebx
.text:0040314E
.text:0040314E loc_40314E:                             ; CODE XREF: sub_403090+B9↑j
.text:0040314E                 cmp     [ebp+20h], ebx
.text:00403151                 jle     short loc_403156
.text:00403153                 mov     [ebp+20h], ebx
.text:00403156
.text:00403156 loc_403156:                             ; CODE XREF: sub_403090+C1↑j
.text:00403156                 cmp     dword ptr [ebp+18h], 1
.text:0040315A                 jz      loc_403B30
.text:00403160
.text:00403160 loc_403160:                             ; CODE XREF: sub_403090+B13↓j
.text:00403160                 cmp     ebx, [esp+5Ch+arg_0]
.text:00403164                 jz      loc_403B14
.text:0040316A                 cld
.text:0040316B                 mov     ecx, [esp+5Ch+arg_4]
.text:0040316F                 mov     edx, 3
.text:00403174                 mov     edi, offset dword_402E40
.text:00403179                 mov     esi, [ecx+ebx*4]
.text:0040317C                 mov     ecx, edx
.text:0040317E                 repe cmpsb
.text:00403180                 jnz     short loc_4031BC
.text:00403182                 mov     edx, [ebp+24h]
.text:00403185                 lea     eax, [ebx+1]
.text:00403188                 cmp     [ebp+20h], edx
.text:0040318B                 mov     [ebp+0], eax
.text:0040318E                 jz      loc_403B28
.text:00403194                 cmp     edx, eax
.text:00403196                 jz      short loc_4031B0
.text:00403198                 mov     [esp+5Ch+Str2], ebp
.text:0040319C                 mov     ebx, [esp+5Ch+arg_4]
.text:004031A0                 mov     [esp+5Ch+Str1], ebx
.text:004031A3                 call    sub_403D40
.text:004031A8                 nop
.text:004031A9                 lea     esi, [esi+0]
.text:004031B0
.text:004031B0 loc_4031B0:                             ; CODE XREF: sub_403090+106↑j
.text:004031B0                                         ; sub_403090+A9B↓j
.text:004031B0                 mov     eax, [esp+5Ch+arg_0]
.text:004031B4                 mov     ebx, eax
.text:004031B6                 mov     [ebp+24h], eax
.text:004031B9                 mov     [ebp+0], eax
.text:004031BC
.text:004031BC loc_4031BC:                             ; CODE XREF: sub_403090+F0↑j
.text:004031BC                 cmp     ebx, [esp+5Ch+arg_0]
.text:004031C0                 jz      loc_403B14
.text:004031C6                 mov     esi, [esp+5Ch+arg_4]
.text:004031CA                 mov     eax, [esi+ebx*4]
.text:004031CD                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004031D0                 jz      short loc_4031F7
.text:004031D2
.text:004031D2 loc_4031D2:                             ; CODE XREF: sub_403090+16D↓j
.text:004031D2                 mov     edx, [ebp+18h]
.text:004031D5                 test    edx, edx
.text:004031D7                 jz      short loc_4031F0
.text:004031D9                 mov     [ebp+0Ch], eax
.text:004031DC                 lea     edi, [ebx+1]
.text:004031DF                 mov     eax, 1
.text:004031E4                 mov     [ebp+0], edi
.text:004031E7
.text:004031E7 loc_4031E7:                             ; CODE XREF: sub_403090+2D↑j
.text:004031E7                                         ; sub_403090+165↓j ...
.text:004031E7                 add     esp, 4Ch
.text:004031EA                 pop     ebx
.text:004031EB                 pop     esi
.text:004031EC                 pop     edi
.text:004031ED                 pop     ebp
.text:004031EE                 retn
.text:004031EE ; ---------------------------------------------------------------------------
.text:004031EF                 align 10h
.text:004031F0
.text:004031F0 loc_4031F0:                             ; CODE XREF: sub_403090+147↑j
.text:004031F0                                         ; sub_403090+A8A↓j ...
.text:004031F0                 mov     eax, 0FFFFFFFFh
.text:004031F5                 jmp     short loc_4031E7
.text:004031F7 ; ---------------------------------------------------------------------------
.text:004031F7
.text:004031F7 loc_4031F7:                             ; CODE XREF: sub_403090+140↑j
.text:004031F7                 movzx   edx, byte ptr [eax+1]
.text:004031FB                 test    dl, dl
.text:004031FD                 jz      short loc_4031D2
.text:004031FF                 mov     ebx, [esp+5Ch+arg_C]
.text:00403203                 xor     ecx, ecx
.text:00403205                 test    ebx, ebx
.text:00403207                 jz      short loc_403212
.text:00403209                 cmp     dl, 2Dh ; '-'
.text:0040320C                 jz      loc_403B0A
.text:00403212
.text:00403212 loc_403212:                             ; CODE XREF: sub_403090+177↑j
.text:00403212                                         ; sub_403090+A7F↓j
.text:00403212                 lea     esi, [ecx+eax+1]
.text:00403216                 mov     [ebp+14h], esi
.text:00403219                 lea     esi, [esi+0]
.text:00403220
.text:00403220 loc_403220:                             ; CODE XREF: sub_403090+AD↑j
.text:00403220                 mov     ecx, [esp+5Ch+arg_C]
.text:00403224                 test    ecx, ecx
.text:00403226                 jz      loc_4035B0
.text:0040322C                 mov     edx, [ebp+0]
.text:0040322F                 mov     edi, [esp+5Ch+arg_4]
.text:00403233                 mov     eax, [edi+edx*4]
.text:00403236                 movzx   edx, byte ptr [eax+1]
.text:0040323A                 cmp     dl, 2Dh ; '-'
.text:0040323D                 jz      short loc_403255
.text:0040323F                 mov     ebx, [esp+5Ch+arg_14]
.text:00403243                 test    ebx, ebx
.text:00403245                 jz      loc_4035B0
.text:0040324B                 cmp     byte ptr [eax+2], 0
.text:0040324F                 jz      loc_403AEA
.text:00403255
.text:00403255 loc_403255:                             ; CODE XREF: sub_403090+1AD↑j
.text:00403255                                         ; sub_403090+A75↓j
.text:00403255                 mov     [esp+5Ch+var_18], 0
.text:0040325D                 mov     ecx, [ebp+14h]
.text:00403260                 mov     [esp+5Ch+var_1C], 0
.text:00403268                 mov     [esp+5Ch+var_20], 0
.text:00403270                 mov     edi, ecx
.text:00403272                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:0040327A                 movzx   eax, byte ptr [ecx]
.text:0040327D                 test    al, al
.text:0040327F                 jz      short loc_40329C
.text:00403281                 cmp     al, 3Dh ; '='
.text:00403283                 jz      short loc_40329C
.text:00403285                 lea     esi, [esi+0]
.text:00403289                 lea     edi, [edi+0]
.text:00403290
.text:00403290 loc_403290:                             ; CODE XREF: sub_403090+20A↓j
.text:00403290                 inc     edi
.text:00403291                 movzx   eax, byte ptr [edi]
.text:00403294                 test    al, al
.text:00403296                 jz      short loc_40329C
.text:00403298                 cmp     al, 3Dh ; '='
.text:0040329A                 jnz     short loc_403290
.text:0040329C
.text:0040329C loc_40329C:                             ; CODE XREF: sub_403090+1EF↑j
.text:0040329C                                         ; sub_403090+1F3↑j ...
.text:0040329C                 mov     [esp+5Ch+var_28], 0
.text:004032A4                 mov     esi, [esp+5Ch+arg_C]
.text:004032A8                 mov     ebx, [esi]
.text:004032AA                 test    ebx, ebx
.text:004032AC                 mov     edx, ebx
.text:004032AE                 jz      loc_4034D0
.text:004032B4                 lea     esi, [esi+0]
.text:004032BA                 lea     edi, [edi+0]
.text:004032C0
.text:004032C0 loc_4032C0:                             ; CODE XREF: sub_403090+25E↓j
.text:004032C0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:004032C4                 mov     ebx, edi
.text:004032C6                 sub     ebx, ecx
.text:004032C8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:004032CC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:004032CF                 call    strncmp
.text:004032D4                 test    eax, eax
.text:004032D6                 jz      loc_403A66
.text:004032DC
.text:004032DC loc_4032DC:                             ; CODE XREF: sub_403090+A0F↓j
.text:004032DC                                         ; sub_403090+A24↓j ...
.text:004032DC                 inc     [esp+5Ch+var_28]
.text:004032E0                 add     esi, 10h
.text:004032E3                 mov     ecx, [esi]
.text:004032E5                 test    ecx, ecx
.text:004032E7                 mov     edx, ecx
.text:004032E9                 jz      short loc_4032F0
.text:004032EB                 mov     ecx, [ebp+14h]
.text:004032EE                 jmp     short loc_4032C0
.text:004032F0 ; ---------------------------------------------------------------------------
.text:004032F0
.text:004032F0 loc_4032F0:                             ; CODE XREF: sub_403090+259↑j
.text:004032F0                                         ; sub_403090+A55↓j
.text:004032F0                 mov     esi, [esp+5Ch+var_20]
.text:004032F4                 test    esi, esi
.text:004032F6                 jz      short loc_403304
.text:004032F8                 mov     edx, [esp+5Ch+var_1C]
.text:004032FC                 test    edx, edx
.text:004032FE                 jz      loc_403A10
.text:00403304
.text:00403304 loc_403304:                             ; CODE XREF: sub_403090+266↑j
.text:00403304                 mov     eax, [esp+5Ch+var_18]
.text:00403308                 test    eax, eax
.text:0040330A                 jz      loc_4034D0
.text:00403310                 mov     ecx, [ebp+0]
.text:00403313                 lea     eax, [ecx+1]
.text:00403316                 mov     [ebp+0], eax
.text:00403319                 cmp     byte ptr [edi], 0
.text:0040331C                 jz      loc_403430
.text:00403322                 mov     ecx, [esp+5Ch+var_18]
.text:00403326                 mov     esi, [ecx+4]
.text:00403329                 test    esi, esi
.text:0040332B                 jz      short loc_403376
.text:0040332D                 lea     ebx, [edi+1]
.text:00403330                 mov     [ebp+0Ch], ebx
.text:00403333
.text:00403333 loc_403333:                             ; CODE XREF: sub_403090+3A8↓j
.text:00403333                                         ; sub_403090+3C4↓j
.text:00403333                 mov     ebx, [ebp+14h]
.text:00403336                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00403339                 call    strlen
.text:0040333E                 add     [ebp+14h], eax
.text:00403341                 mov     esi, [esp+5Ch+arg_10]
.text:00403345                 test    esi, esi
.text:00403347                 jz      short loc_403353
.text:00403349                 mov     ebp, [esp+5Ch+var_24]
.text:0040334D                 mov     ecx, [esp+5Ch+arg_10]
.text:00403351                 mov     [ecx], ebp
.text:00403353
.text:00403353 loc_403353:                             ; CODE XREF: sub_403090+2B7↑j
.text:00403353                 mov     eax, [esp+5Ch+var_18]
.text:00403357                 mov     ecx, [eax+8]
.text:0040335A                 test    ecx, ecx
.text:0040335C                 jnz     short loc_40336A
.text:0040335E                 mov     ecx, [esp+5Ch+var_18]
.text:00403362
.text:00403362 loc_403362:                             ; CODE XREF: sub_403090+723↓j
.text:00403362                 mov     eax, [ecx+0Ch]
.text:00403365                 jmp     loc_4031E7
.text:0040336A ; ---------------------------------------------------------------------------
.text:0040336A
.text:0040336A loc_40336A:                             ; CODE XREF: sub_403090+2CC↑j
.text:0040336A                                         ; sub_403090+719↓j
.text:0040336A                 mov     esi, [eax+0Ch]
.text:0040336D                 xor     eax, eax
.text:0040336F                 mov     [ecx], esi
.text:00403371                 jmp     loc_4031E7
.text:00403376 ; ---------------------------------------------------------------------------
.text:00403376
.text:00403376 loc_403376:                             ; CODE XREF: sub_403090+29B↑j
.text:00403376                 mov     edi, [esp+5Ch+var_14]
.text:0040337A                 test    edi, edi
.text:0040337C                 jz      short loc_4033D0
.text:0040337E                 mov     esi, [esp+5Ch+arg_4]
.text:00403382                 mov     edx, [esi+eax*4-4]
.text:00403386                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:0040338A                 jz      short loc_4033F2
.text:0040338C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00403393                 call    ds:libintl_gettext
.text:00403399                 mov     edx, [esp+5Ch+var_18]
.text:0040339D                 mov     edi, [edx]
.text:0040339F                 mov     [esp+5Ch+var_4C], edi
.text:004033A3                 mov     ebx, [ebp+0]
.text:004033A6                 mov     edi, [esp+5Ch+arg_4]
.text:004033AA                 mov     ecx, [edi+ebx*4-4]
.text:004033AE                 movsx   esi, byte ptr [ecx]
.text:004033B1                 mov     ecx, ds:_iob
.text:004033B7                 add     ecx, 40h ; '@'
.text:004033BA                 mov     [esp+5Ch+var_50], esi
.text:004033BE                 mov     ebx, [edi]
.text:004033C0                 mov     [esp+5Ch+Str2], eax ; Format
.text:004033C4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004033C7                 mov     [esp+5Ch+MaxCount], ebx
.text:004033CB                 call    fprintf
.text:004033D0
.text:004033D0 loc_4033D0:                             ; CODE XREF: sub_403090+2EC↑j
.text:004033D0                                         ; sub_403090+398↓j
.text:004033D0                 mov     ecx, [ebp+14h]
.text:004033D3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004033D6                 call    strlen
.text:004033DB                 add     [ebp+14h], eax
.text:004033DE                 mov     eax, [esp+5Ch+var_18]
.text:004033E2                 mov     esi, [eax+0Ch]
.text:004033E5                 mov     [ebp+8], esi
.text:004033E8
.text:004033E8 loc_4033E8:                             ; CODE XREF: sub_403090+4E5↓j
.text:004033E8                                         ; sub_403090+73E↓j ...
.text:004033E8                 mov     eax, 3Fh ; '?'
.text:004033ED                 jmp     loc_4031E7
.text:004033F2 ; ---------------------------------------------------------------------------
.text:004033F2
.text:004033F2 loc_4033F2:                             ; CODE XREF: sub_403090+2FA↑j
.text:004033F2                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:004033F9                 call    ds:libintl_gettext
.text:004033FF                 mov     edx, [esp+5Ch+var_18]
.text:00403403                 mov     edi, [esp+5Ch+arg_4]
.text:00403407                 mov     ecx, ds:_iob
.text:0040340D                 mov     esi, [edx]
.text:0040340F                 add     ecx, 40h ; '@'
.text:00403412                 mov     [esp+5Ch+var_50], esi
.text:00403416                 mov     ebx, [edi]
.text:00403418                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040341C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040341F                 mov     [esp+5Ch+MaxCount], ebx
.text:00403423                 call    fprintf
.text:00403428                 jmp     short loc_4033D0
.text:00403428 ; ---------------------------------------------------------------------------
.text:0040342A                 align 10h
.text:00403430
.text:00403430 loc_403430:                             ; CODE XREF: sub_403090+28C↑j
.text:00403430                 mov     ebx, [esp+5Ch+var_18]
.text:00403434                 cmp     dword ptr [ebx+4], 1
.text:00403438                 jnz     loc_403333
.text:0040343E                 cmp     eax, [esp+5Ch+arg_0]
.text:00403442                 jge     short loc_403459
.text:00403444                 mov     ebx, [esp+5Ch+arg_4]
.text:00403448                 lea     edi, [ecx+2]
.text:0040344B                 mov     [ebp+0], edi
.text:0040344E                 mov     esi, [ebx+eax*4]
.text:00403451                 mov     [ebp+0Ch], esi
.text:00403454                 jmp     loc_403333
.text:00403459 ; ---------------------------------------------------------------------------
.text:00403459
.text:00403459 loc_403459:                             ; CODE XREF: sub_403090+3B2↑j
.text:00403459                 mov     edx, [esp+5Ch+var_14]
.text:0040345D                 test    edx, edx
.text:0040345F                 jnz     short loc_403490
.text:00403461
.text:00403461 loc_403461:                             ; CODE XREF: sub_403090+437↓j
.text:00403461                 mov     edx, [ebp+14h]
.text:00403464                 mov     [esp+5Ch+Str1], edx ; Str
.text:00403467                 call    strlen
.text:0040346C                 add     [ebp+14h], eax
.text:0040346F                 mov     eax, [esp+5Ch+var_18]
.text:00403473                 mov     edi, [eax+0Ch]
.text:00403476                 mov     [ebp+8], edi
.text:00403479
.text:00403479 loc_403479:                             ; CODE XREF: sub_403090+7C2↓j
.text:00403479                 mov     ebp, [esp+5Ch+Str]
.text:0040347D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00403481                 setnz   bl
.text:00403484                 movzx   esi, bl
.text:00403487                 lea     eax, [esi+esi*4+3Ah]
.text:0040348B                 jmp     loc_4031E7
.text:00403490 ; ---------------------------------------------------------------------------
.text:00403490
.text:00403490 loc_403490:                             ; CODE XREF: sub_403090+3CF↑j
.text:00403490                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00403497                 call    ds:libintl_gettext
.text:0040349D                 mov     ecx, [ebp+0]
.text:004034A0                 mov     esi, [esp+5Ch+arg_4]
.text:004034A4                 mov     ebx, [esi+ecx*4-4]
.text:004034A8                 mov     ecx, ds:_iob
.text:004034AE                 mov     [esp+5Ch+var_50], ebx
.text:004034B2                 mov     edi, [esi]
.text:004034B4                 add     ecx, 40h ; '@'
.text:004034B7                 mov     [esp+5Ch+Str2], eax ; Format
.text:004034BB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004034BE                 mov     [esp+5Ch+MaxCount], edi
.text:004034C2                 call    fprintf
.text:004034C7                 jmp     short loc_403461
.text:004034C7 ; ---------------------------------------------------------------------------
.text:004034C9                 align 10h
.text:004034D0
.text:004034D0 loc_4034D0:                             ; CODE XREF: sub_403090+21E↑j
.text:004034D0                                         ; sub_403090+27A↑j
.text:004034D0                 mov     eax, [esp+5Ch+arg_14]
.text:004034D4                 test    eax, eax
.text:004034D6                 jz      short loc_403506
.text:004034D8                 mov     ebx, [ebp+0]
.text:004034DB                 mov     esi, [esp+5Ch+arg_4]
.text:004034DF                 mov     edi, [esi+ebx*4]
.text:004034E2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:004034E6                 jz      short loc_403509
.text:004034E8                 mov     ecx, [ebp+14h]
.text:004034EB                 mov     edx, [esp+5Ch+Str]
.text:004034EF                 movsx   ebx, byte ptr [ecx]
.text:004034F2                 mov     [esp+5Ch+Str1], edx ; Str
.text:004034F5                 mov     [esp+5Ch+Str2], ebx ; Val
.text:004034F9                 call    strchr
.text:004034FE                 test    eax, eax
.text:00403500                 jnz     loc_4035B0
.text:00403506
.text:00403506 loc_403506:                             ; CODE XREF: sub_403090+446↑j
.text:00403506                 mov     ebx, [ebp+0]
.text:00403509
.text:00403509 loc_403509:                             ; CODE XREF: sub_403090+456↑j
.text:00403509                 mov     eax, [esp+5Ch+var_14]
.text:0040350D                 test    eax, eax
.text:0040350F                 jz      short loc_403561
.text:00403511                 mov     esi, [esp+5Ch+arg_4]
.text:00403515                 mov     edi, [esi+ebx*4]
.text:00403518                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040351C                 jz      short loc_40357A
.text:0040351E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00403525                 call    ds:libintl_gettext
.text:0040352B                 mov     edi, [ebp+14h]
.text:0040352E                 mov     [esp+5Ch+var_4C], edi
.text:00403532                 mov     ebx, [ebp+0]
.text:00403535                 mov     edi, [esp+5Ch+arg_4]
.text:00403539                 mov     esi, [edi+ebx*4]
.text:0040353C                 movsx   ecx, byte ptr [esi]
.text:0040353F                 mov     esi, ds:_iob
.text:00403545                 add     esi, 40h ; '@'
.text:00403548                 mov     [esp+5Ch+var_50], ecx
.text:0040354C                 mov     ebx, [edi]
.text:0040354E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403552                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00403555                 mov     [esp+5Ch+MaxCount], ebx
.text:00403559                 call    fprintf
.text:0040355E
.text:0040355E loc_40355E:                             ; CODE XREF: sub_403090+51D↓j
.text:0040355E                 mov     ebx, [ebp+0]
.text:00403561
.text:00403561 loc_403561:                             ; CODE XREF: sub_403090+47F↑j
.text:00403561                 mov     dword ptr [ebp+14h], offset dword_402F40
.text:00403568                 lea     edx, [ebx+1]
.text:0040356B                 mov     [ebp+0], edx
.text:0040356E
.text:0040356E loc_40356E:                             ; CODE XREF: sub_403090+999↓j
.text:0040356E                 mov     dword ptr [ebp+8], 0
.text:00403575                 jmp     loc_4033E8
.text:0040357A ; ---------------------------------------------------------------------------
.text:0040357A
.text:0040357A loc_40357A:                             ; CODE XREF: sub_403090+48C↑j
.text:0040357A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00403581                 call    ds:libintl_gettext
.text:00403587                 mov     ecx, [ebp+14h]
.text:0040358A                 mov     edi, [esp+5Ch+arg_4]
.text:0040358E                 mov     edx, ds:_iob
.text:00403594                 mov     [esp+5Ch+var_50], ecx
.text:00403598                 mov     ebx, [edi]
.text:0040359A                 add     edx, 40h ; '@'
.text:0040359D                 mov     [esp+5Ch+Str2], eax ; Format
.text:004035A1                 mov     [esp+5Ch+MaxCount], ebx
.text:004035A5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004035A8                 call    fprintf
.text:004035AD                 jmp     short loc_40355E
.text:004035AD ; ---------------------------------------------------------------------------
.text:004035AF                 align 10h
.text:004035B0
.text:004035B0 loc_4035B0:                             ; CODE XREF: sub_403090+196↑j
.text:004035B0                                         ; sub_403090+1B5↑j ...
.text:004035B0                 mov     esi, [ebp+14h]
.text:004035B3                 movzx   ebx, byte ptr [esi]
.text:004035B6                 inc     esi
.text:004035B7                 mov     [ebp+14h], esi
.text:004035BA                 mov     ecx, [esp+5Ch+Str]
.text:004035BE                 movsx   esi, bl
.text:004035C1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004035C5                 mov     edi, esi
.text:004035C7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004035CA                 call    strchr
.text:004035CF                 mov     ecx, [ebp+14h]
.text:004035D2                 cmp     byte ptr [ecx], 0
.text:004035D5                 jnz     short loc_4035DA
.text:004035D7                 inc     dword ptr [ebp+0]
.text:004035DA
.text:004035DA loc_4035DA:                             ; CODE XREF: sub_403090+545↑j
.text:004035DA                 test    eax, eax
.text:004035DC                 jz      loc_4039C0
.text:004035E2                 cmp     bl, 3Ah ; ':'
.text:004035E5                 jz      loc_4039C0
.text:004035EB                 cmp     byte ptr [eax], 57h ; 'W'
.text:004035EE                 jz      loc_4036A6
.text:004035F4                 movzx   edx, byte ptr [eax+1]
.text:004035F8
.text:004035F8 loc_4035F8:                             ; CODE XREF: sub_403090+61D↓j
.text:004035F8                 cmp     dl, 3Ah ; ':'
.text:004035FB                 jz      short loc_403604
.text:004035FD
.text:004035FD loc_4035FD:                             ; CODE XREF: sub_403090+590↓j
.text:004035FD                 mov     eax, esi
.text:004035FF                 jmp     loc_4031E7
.text:00403604 ; ---------------------------------------------------------------------------
.text:00403604
.text:00403604 loc_403604:                             ; CODE XREF: sub_403090+56B↑j
.text:00403604                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00403608                 jz      loc_403691
.text:0040360E                 cmp     byte ptr [ecx], 0
.text:00403611                 jz      short loc_403622
.text:00403613
.text:00403613 loc_403613:                             ; CODE XREF: sub_403090+604↓j
.text:00403613                 inc     dword ptr [ebp+0]
.text:00403616                 mov     [ebp+0Ch], ecx
.text:00403619
.text:00403619 loc_403619:                             ; CODE XREF: sub_403090+5AB↓j
.text:00403619                                         ; sub_403090+5C6↓j ...
.text:00403619                 mov     dword ptr [ebp+14h], 0
.text:00403620                 jmp     short loc_4035FD
.text:00403622 ; ---------------------------------------------------------------------------
.text:00403622
.text:00403622 loc_403622:                             ; CODE XREF: sub_403090+581↑j
.text:00403622                 mov     ecx, [ebp+0]
.text:00403625                 cmp     ecx, [esp+5Ch+arg_0]
.text:00403629                 jz      short loc_40363D
.text:0040362B                 mov     eax, [esp+5Ch+arg_4]
.text:0040362F                 lea     edx, [ecx+1]
.text:00403632                 mov     [ebp+0], edx
.text:00403635                 mov     ebx, [eax+ecx*4]
.text:00403638                 mov     [ebp+0Ch], ebx
.text:0040363B                 jmp     short loc_403619
.text:0040363D ; ---------------------------------------------------------------------------
.text:0040363D
.text:0040363D loc_40363D:                             ; CODE XREF: sub_403090+599↑j
.text:0040363D                 mov     ecx, [esp+5Ch+var_14]
.text:00403641                 test    ecx, ecx
.text:00403643                 jnz     short loc_40365F
.text:00403645
.text:00403645 loc_403645:                             ; CODE XREF: sub_403090+5FF↓j
.text:00403645                 mov     [ebp+8], edi
.text:00403648                 mov     edi, [esp+5Ch+Str]
.text:0040364C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040364F                 jz      short loc_403658
.text:00403651                 mov     esi, 3Fh ; '?'
.text:00403656                 jmp     short loc_403619
.text:00403658 ; ---------------------------------------------------------------------------
.text:00403658
.text:00403658 loc_403658:                             ; CODE XREF: sub_403090+5BF↑j
.text:00403658                 mov     esi, 3Ah ; ':'
.text:0040365D                 jmp     short loc_403619
.text:0040365F ; ---------------------------------------------------------------------------
.text:0040365F
.text:0040365F loc_40365F:                             ; CODE XREF: sub_403090+5B3↑j
.text:0040365F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00403666                 call    ds:libintl_gettext
.text:0040366C                 mov     [esp+5Ch+var_50], edi
.text:00403670                 mov     ebx, [esp+5Ch+arg_4]
.text:00403674                 mov     edx, ds:_iob
.text:0040367A                 mov     esi, [ebx]
.text:0040367C                 add     edx, 40h ; '@'
.text:0040367F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403683                 mov     [esp+5Ch+MaxCount], esi
.text:00403687                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040368A                 call    fprintf
.text:0040368F                 jmp     short loc_403645
.text:00403691 ; ---------------------------------------------------------------------------
.text:00403691
.text:00403691 loc_403691:                             ; CODE XREF: sub_403090+578↑j
.text:00403691                 cmp     byte ptr [ecx], 0
.text:00403694                 jnz     loc_403613
.text:0040369A                 mov     dword ptr [ebp+0Ch], 0
.text:004036A1                 jmp     loc_403619
.text:004036A6 ; ---------------------------------------------------------------------------
.text:004036A6
.text:004036A6 loc_4036A6:                             ; CODE XREF: sub_403090+55E↑j
.text:004036A6                 movzx   edx, byte ptr [eax+1]
.text:004036AA                 cmp     dl, 3Bh ; ';'
.text:004036AD                 jnz     loc_4035F8
.text:004036B3                 mov     [esp+5Ch+var_2C], 0
.text:004036BB                 mov     [esp+5Ch+var_30], 0
.text:004036C3                 mov     [esp+5Ch+var_34], 0
.text:004036CB                 mov     [esp+5Ch+var_38], 0
.text:004036D3                 cmp     byte ptr [ecx], 0
.text:004036D6                 jz      loc_40394B
.text:004036DC                 inc     dword ptr [ebp+0]
.text:004036DF                 mov     [ebp+0Ch], ecx
.text:004036E2
.text:004036E2 loc_4036E2:                             ; CODE XREF: sub_403090+8D4↓j
.text:004036E2                 mov     edi, [ebp+0Ch]
.text:004036E5                 mov     [ebp+14h], edi
.text:004036E8                 movzx   eax, byte ptr [edi]
.text:004036EB                 test    al, al
.text:004036ED                 jz      short loc_4036FF
.text:004036EF                 cmp     al, 3Dh ; '='
.text:004036F1                 jz      short loc_4036FF
.text:004036F3
.text:004036F3 loc_4036F3:                             ; CODE XREF: sub_403090+66D↓j
.text:004036F3                 inc     edi
.text:004036F4                 movzx   eax, byte ptr [edi]
.text:004036F7                 test    al, al
.text:004036F9                 jz      short loc_4036FF
.text:004036FB                 cmp     al, 3Dh ; '='
.text:004036FD                 jnz     short loc_4036F3
.text:004036FF
.text:004036FF loc_4036FF:                             ; CODE XREF: sub_403090+65D↑j
.text:004036FF                                         ; sub_403090+661↑j ...
.text:004036FF                 mov     [esp+5Ch+var_3C], 0
.text:00403707                 mov     esi, [esp+5Ch+arg_C]
.text:0040370B                 mov     eax, [esi]
.text:0040370D                 test    eax, eax
.text:0040370F                 jz      loc_403890
.text:00403715                 mov     ecx, eax
.text:00403717
.text:00403717 loc_403717:                             ; CODE XREF: sub_403090+6B3↓j
.text:00403717                 mov     ebx, [ebp+14h]
.text:0040371A                 mov     eax, edi
.text:0040371C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040371F                 sub     eax, ebx
.text:00403721                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00403725                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00403729                 call    strncmp
.text:0040372E                 test    eax, eax
.text:00403730                 jz      loc_4038F7
.text:00403736
.text:00403736 loc_403736:                             ; CODE XREF: sub_403090+88C↓j
.text:00403736                                         ; sub_403090+89D↓j
.text:00403736                 inc     [esp+5Ch+var_3C]
.text:0040373A                 add     esi, 10h
.text:0040373D                 mov     edx, [esi]
.text:0040373F                 test    edx, edx
.text:00403741                 mov     ecx, edx
.text:00403743                 jnz     short loc_403717
.text:00403745
.text:00403745 loc_403745:                             ; CODE XREF: sub_403090+8B6↓j
.text:00403745                 mov     esi, [esp+5Ch+var_34]
.text:00403749                 test    esi, esi
.text:0040374B                 jz      short loc_403759
.text:0040374D                 mov     ebx, [esp+5Ch+var_30]
.text:00403751                 test    ebx, ebx
.text:00403753                 jz      loc_4038A1
.text:00403759
.text:00403759 loc_403759:                             ; CODE XREF: sub_403090+6BB↑j
.text:00403759                 mov     esi, [esp+5Ch+var_2C]
.text:0040375D                 test    esi, esi
.text:0040375F                 jz      loc_403890
.text:00403765                 cmp     byte ptr [edi], 0
.text:00403768                 jz      loc_403810
.text:0040376E                 mov     ecx, [esp+5Ch+var_2C]
.text:00403772                 mov     ebx, [ecx+4]
.text:00403775                 test    ebx, ebx
.text:00403777                 jz      short loc_4037B8
.text:00403779                 lea     edx, [edi+1]
.text:0040377C                 mov     [ebp+0Ch], edx
.text:0040377F
.text:0040377F loc_40377F:                             ; CODE XREF: sub_403090+788↓j
.text:0040377F                                         ; sub_403090+7A7↓j
.text:0040377F                 mov     edi, [ebp+14h]
.text:00403782                 mov     [esp+5Ch+Str1], edi ; Str
.text:00403785                 call    strlen
.text:0040378A                 add     [ebp+14h], eax
.text:0040378D                 mov     eax, [esp+5Ch+arg_10]
.text:00403791                 test    eax, eax
.text:00403793                 jz      short loc_4037A0
.text:00403795                 mov     edx, [esp+5Ch+var_38]
.text:00403799                 mov     ebp, [esp+5Ch+arg_10]
.text:0040379D                 mov     [ebp+0], edx
.text:004037A0
.text:004037A0 loc_4037A0:                             ; CODE XREF: sub_403090+703↑j
.text:004037A0                 mov     eax, [esp+5Ch+var_2C]
.text:004037A4                 mov     ecx, [eax+8]
.text:004037A7                 test    ecx, ecx
.text:004037A9                 jnz     loc_40336A
.text:004037AF                 mov     ecx, [esp+5Ch+var_2C]
.text:004037B3                 jmp     loc_403362
.text:004037B8 ; ---------------------------------------------------------------------------
.text:004037B8
.text:004037B8 loc_4037B8:                             ; CODE XREF: sub_403090+6E7↑j
.text:004037B8                 mov     eax, [esp+5Ch+var_14]
.text:004037BC                 test    eax, eax
.text:004037BE                 jnz     short loc_4037D3
.text:004037C0
.text:004037C0 loc_4037C0:                             ; CODE XREF: sub_403090+779↓j
.text:004037C0                 mov     ecx, [ebp+14h]
.text:004037C3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004037C6                 call    strlen
.text:004037CB                 add     [ebp+14h], eax
.text:004037CE                 jmp     loc_4033E8
.text:004037D3 ; ---------------------------------------------------------------------------
.text:004037D3
.text:004037D3 loc_4037D3:                             ; CODE XREF: sub_403090+72E↑j
.text:004037D3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:004037DA                 call    ds:libintl_gettext
.text:004037E0                 mov     edx, [esp+5Ch+var_2C]
.text:004037E4                 mov     ebx, [esp+5Ch+arg_4]
.text:004037E8                 mov     edi, [edx]
.text:004037EA                 mov     [esp+5Ch+var_50], edi
.text:004037EE                 mov     edi, ds:_iob
.text:004037F4                 mov     esi, [ebx]
.text:004037F6                 mov     [esp+5Ch+Str2], eax ; Format
.text:004037FA                 add     edi, 40h ; '@'
.text:004037FD                 mov     [esp+5Ch+MaxCount], esi
.text:00403801                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00403804                 call    fprintf
.text:00403809                 jmp     short loc_4037C0
.text:00403809 ; ---------------------------------------------------------------------------
.text:0040380B                 align 10h
.text:00403810
.text:00403810 loc_403810:                             ; CODE XREF: sub_403090+6D8↑j
.text:00403810                 mov     esi, [esp+5Ch+var_2C]
.text:00403814                 cmp     dword ptr [esi+4], 1
.text:00403818                 jnz     loc_40377F
.text:0040381E                 mov     ecx, [ebp+0]
.text:00403821                 cmp     ecx, [esp+5Ch+arg_0]
.text:00403825                 jge     short loc_40383C
.text:00403827                 mov     eax, [esp+5Ch+arg_4]
.text:0040382B                 lea     ebx, [ecx+1]
.text:0040382E                 mov     [ebp+0], ebx
.text:00403831                 mov     edi, [eax+ecx*4]
.text:00403834                 mov     [ebp+0Ch], edi
.text:00403837                 jmp     loc_40377F
.text:0040383C ; ---------------------------------------------------------------------------
.text:0040383C
.text:0040383C loc_40383C:                             ; CODE XREF: sub_403090+795↑j
.text:0040383C                 mov     edx, [esp+5Ch+var_14]
.text:00403840                 test    edx, edx
.text:00403842                 jnz     short loc_403857
.text:00403844
.text:00403844 loc_403844:                             ; CODE XREF: sub_403090+7FE↓j
.text:00403844                 mov     edx, [ebp+14h]
.text:00403847                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040384A                 call    strlen
.text:0040384F                 add     [ebp+14h], eax
.text:00403852                 jmp     loc_403479
.text:00403857 ; ---------------------------------------------------------------------------
.text:00403857
.text:00403857 loc_403857:                             ; CODE XREF: sub_403090+7B2↑j
.text:00403857                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040385E                 call    ds:libintl_gettext
.text:00403864                 mov     ecx, [ebp+0]
.text:00403867                 mov     ebx, [esp+5Ch+arg_4]
.text:0040386B                 mov     edi, [ebx+ecx*4-4]
.text:0040386F                 mov     ecx, ds:_iob
.text:00403875                 mov     [esp+5Ch+var_50], edi
.text:00403879                 mov     esi, [ebx]
.text:0040387B                 add     ecx, 40h ; '@'
.text:0040387E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403882                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00403885                 mov     [esp+5Ch+MaxCount], esi
.text:00403889                 call    fprintf
.text:0040388E                 jmp     short loc_403844
.text:00403890 ; ---------------------------------------------------------------------------
.text:00403890
.text:00403890 loc_403890:                             ; CODE XREF: sub_403090+67F↑j
.text:00403890                                         ; sub_403090+6CF↑j
.text:00403890                 mov     dword ptr [ebp+14h], 0
.text:00403897                 mov     eax, 57h ; 'W'
.text:0040389C                 jmp     loc_4031E7
.text:004038A1 ; ---------------------------------------------------------------------------
.text:004038A1
.text:004038A1 loc_4038A1:                             ; CODE XREF: sub_403090+6C3↑j
.text:004038A1                 mov     edi, [esp+5Ch+var_14]
.text:004038A5                 test    edi, edi
.text:004038A7                 jnz     short loc_4038BF
.text:004038A9
.text:004038A9 loc_4038A9:                             ; CODE XREF: sub_403090+865↓j
.text:004038A9                 mov     edx, [ebp+14h]
.text:004038AC                 mov     [esp+5Ch+Str1], edx ; Str
.text:004038AF                 call    strlen
.text:004038B4                 add     [ebp+14h], eax
.text:004038B7                 inc     dword ptr [ebp+0]
.text:004038BA                 jmp     loc_4033E8
.text:004038BF ; ---------------------------------------------------------------------------
.text:004038BF
.text:004038BF loc_4038BF:                             ; CODE XREF: sub_403090+817↑j
.text:004038BF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:004038C6                 call    ds:libintl_gettext
.text:004038CC                 mov     ecx, [ebp+0]
.text:004038CF                 mov     ebx, [esp+5Ch+arg_4]
.text:004038D3                 mov     edi, [ebx+ecx*4]
.text:004038D6                 mov     ecx, ds:_iob
.text:004038DC                 mov     [esp+5Ch+var_50], edi
.text:004038E0                 mov     esi, [ebx]
.text:004038E2                 add     ecx, 40h ; '@'
.text:004038E5                 mov     [esp+5Ch+Str2], eax ; Format
.text:004038E9                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004038EC                 mov     [esp+5Ch+MaxCount], esi
.text:004038F0                 call    fprintf
.text:004038F5                 jmp     short loc_4038A9
.text:004038F7 ; ---------------------------------------------------------------------------
.text:004038F7
.text:004038F7 loc_4038F7:                             ; CODE XREF: sub_403090+6A0↑j
.text:004038F7                 mov     edx, [ebp+14h]
.text:004038FA                 mov     ebx, edi
.text:004038FC                 mov     ecx, [esi]
.text:004038FE                 sub     ebx, edx
.text:00403900                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00403903                 call    strlen
.text:00403908                 cmp     ebx, eax
.text:0040390A                 jz      short loc_403932
.text:0040390C                 mov     ebx, [esp+5Ch+var_2C]
.text:00403910                 test    ebx, ebx
.text:00403912                 jz      short loc_403921
.text:00403914                 mov     [esp+5Ch+var_34], 1
.text:0040391C                 jmp     loc_403736
.text:00403921 ; ---------------------------------------------------------------------------
.text:00403921
.text:00403921 loc_403921:                             ; CODE XREF: sub_403090+882↑j
.text:00403921                 mov     [esp+5Ch+var_2C], esi
.text:00403925                 mov     ecx, [esp+5Ch+var_3C]
.text:00403929                 mov     [esp+5Ch+var_38], ecx
.text:0040392D                 jmp     loc_403736
.text:00403932 ; ---------------------------------------------------------------------------
.text:00403932
.text:00403932 loc_403932:                             ; CODE XREF: sub_403090+87A↑j
.text:00403932                 mov     [esp+5Ch+var_2C], esi
.text:00403936                 mov     eax, [esp+5Ch+var_3C]
.text:0040393A                 mov     [esp+5Ch+var_30], 1
.text:00403942                 mov     [esp+5Ch+var_38], eax
.text:00403946                 jmp     loc_403745
.text:0040394B ; ---------------------------------------------------------------------------
.text:0040394B
.text:0040394B loc_40394B:                             ; CODE XREF: sub_403090+646↑j
.text:0040394B                 mov     edx, [ebp+0]
.text:0040394E                 cmp     edx, [esp+5Ch+arg_0]
.text:00403952                 jz      short loc_403969
.text:00403954                 mov     ebx, [esp+5Ch+arg_4]
.text:00403958                 lea     esi, [edx+1]
.text:0040395B                 mov     [ebp+0], esi
.text:0040395E                 mov     edi, [ebx+edx*4]
.text:00403961                 mov     [ebp+0Ch], edi
.text:00403964                 jmp     loc_4036E2
.text:00403969 ; ---------------------------------------------------------------------------
.text:00403969
.text:00403969 loc_403969:                             ; CODE XREF: sub_403090+8C2↑j
.text:00403969                 mov     edi, [esp+5Ch+var_14]
.text:0040396D                 test    edi, edi
.text:0040396F                 jnz     short loc_40398C
.text:00403971
.text:00403971 loc_403971:                             ; CODE XREF: sub_403090+92C↓j
.text:00403971                 mov     [ebp+8], esi
.text:00403974                 mov     ebp, [esp+5Ch+Str]
.text:00403978                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040397C                 jz      short loc_403988
.text:0040397E                 mov     bl, 3Fh ; '?'
.text:00403980
.text:00403980 loc_403980:                             ; CODE XREF: sub_403090+8FA↓j
.text:00403980                 movsx   eax, bl
.text:00403983                 jmp     loc_4031E7
.text:00403988 ; ---------------------------------------------------------------------------
.text:00403988
.text:00403988 loc_403988:                             ; CODE XREF: sub_403090+8EC↑j
.text:00403988                 mov     bl, 3Ah ; ':'
.text:0040398A                 jmp     short loc_403980
.text:0040398C ; ---------------------------------------------------------------------------
.text:0040398C
.text:0040398C loc_40398C:                             ; CODE XREF: sub_403090+8DF↑j
.text:0040398C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00403993                 call    ds:libintl_gettext
.text:00403999                 mov     [esp+5Ch+var_50], esi
.text:0040399D                 mov     edx, [esp+5Ch+arg_4]
.text:004039A1                 mov     ecx, ds:_iob
.text:004039A7                 mov     ebx, [edx]
.text:004039A9                 add     ecx, 40h ; '@'
.text:004039AC                 mov     [esp+5Ch+Str2], eax ; Format
.text:004039B0                 mov     [esp+5Ch+MaxCount], ebx
.text:004039B4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004039B7                 call    fprintf
.text:004039BC                 jmp     short loc_403971
.text:004039BC ; ---------------------------------------------------------------------------
.text:004039BE                 align 10h
.text:004039C0
.text:004039C0 loc_4039C0:                             ; CODE XREF: sub_403090+54C↑j
.text:004039C0                                         ; sub_403090+555↑j
.text:004039C0                 mov     eax, [esp+5Ch+var_14]
.text:004039C4                 test    eax, eax
.text:004039C6                 jz      short loc_4039FF
.text:004039C8                 mov     ebx, [ebp+1Ch]
.text:004039CB                 test    ebx, ebx
.text:004039CD                 jz      short loc_403A07
.text:004039CF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:004039D6
.text:004039D6 loc_4039D6:                             ; CODE XREF: sub_403090+97E↓j
.text:004039D6                 call    ds:libintl_gettext
.text:004039DC                 mov     [esp+5Ch+var_50], esi
.text:004039E0                 mov     ebx, [esp+5Ch+arg_4]
.text:004039E4                 mov     edx, ds:_iob
.text:004039EA                 mov     esi, [ebx]
.text:004039EC                 add     edx, 40h ; '@'
.text:004039EF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004039F3                 mov     [esp+5Ch+MaxCount], esi
.text:004039F7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004039FA                 call    fprintf
.text:004039FF
.text:004039FF loc_4039FF:                             ; CODE XREF: sub_403090+936↑j
.text:004039FF                 mov     [ebp+8], edi
.text:00403A02                 jmp     loc_4033E8
.text:00403A07 ; ---------------------------------------------------------------------------
.text:00403A07
.text:00403A07 loc_403A07:                             ; CODE XREF: sub_403090+93D↑j
.text:00403A07                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:00403A0E                 jmp     short loc_4039D6
.text:00403A10 ; ---------------------------------------------------------------------------
.text:00403A10
.text:00403A10 loc_403A10:                             ; CODE XREF: sub_403090+26E↑j
.text:00403A10                 mov     edi, [esp+5Ch+var_14]
.text:00403A14                 test    edi, edi
.text:00403A16                 jnz     short loc_403A2E
.text:00403A18
.text:00403A18 loc_403A18:                             ; CODE XREF: sub_403090+9D4↓j
.text:00403A18                 mov     edx, [ebp+14h]
.text:00403A1B                 mov     [esp+5Ch+Str1], edx ; Str
.text:00403A1E                 call    strlen
.text:00403A23                 add     [ebp+14h], eax
.text:00403A26                 inc     dword ptr [ebp+0]
.text:00403A29                 jmp     loc_40356E
.text:00403A2E ; ---------------------------------------------------------------------------
.text:00403A2E
.text:00403A2E loc_403A2E:                             ; CODE XREF: sub_403090+986↑j
.text:00403A2E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00403A35                 call    ds:libintl_gettext
.text:00403A3B                 mov     ebx, [ebp+0]
.text:00403A3E                 mov     edi, [esp+5Ch+arg_4]
.text:00403A42                 mov     ecx, [edi+ebx*4]
.text:00403A45                 mov     ebx, ds:_iob
.text:00403A4B                 mov     [esp+5Ch+var_50], ecx
.text:00403A4F                 mov     esi, [edi]
.text:00403A51                 add     ebx, 40h ; '@'
.text:00403A54                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403A58                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:00403A5B                 mov     [esp+5Ch+MaxCount], esi
.text:00403A5F                 call    fprintf
.text:00403A64                 jmp     short loc_403A18
.text:00403A66 ; ---------------------------------------------------------------------------
.text:00403A66
.text:00403A66 loc_403A66:                             ; CODE XREF: sub_403090+246↑j
.text:00403A66                 mov     ecx, [ebp+14h]
.text:00403A69                 mov     ebx, edi
.text:00403A6B                 mov     edx, [esi]
.text:00403A6D                 sub     ebx, ecx
.text:00403A6F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00403A72                 call    strlen
.text:00403A77                 cmp     ebx, eax
.text:00403A79                 jz      short loc_403AD1
.text:00403A7B                 mov     ebx, [esp+5Ch+var_18]
.text:00403A7F                 test    ebx, ebx
.text:00403A81                 jz      short loc_403AC0
.text:00403A83                 mov     edx, [esp+5Ch+arg_14]
.text:00403A87                 test    edx, edx
.text:00403A89                 jnz     short loc_403A97
.text:00403A8B                 mov     ecx, [esp+5Ch+var_18]
.text:00403A8F                 mov     ebx, [esi+4]
.text:00403A92                 cmp     [ecx+4], ebx
.text:00403A95                 jz      short loc_403AA4
.text:00403A97
.text:00403A97 loc_403A97:                             ; CODE XREF: sub_403090+9F9↑j
.text:00403A97                                         ; sub_403090+A1A↓j ...
.text:00403A97                 mov     [esp+5Ch+var_20], 1
.text:00403A9F                 jmp     loc_4032DC
.text:00403AA4 ; ---------------------------------------------------------------------------
.text:00403AA4
.text:00403AA4 loc_403AA4:                             ; CODE XREF: sub_403090+A05↑j
.text:00403AA4                 mov     edx, [esi+8]
.text:00403AA7                 cmp     [ecx+8], edx
.text:00403AAA                 jnz     short loc_403A97
.text:00403AAC                 mov     ebx, [esi+0Ch]
.text:00403AAF                 cmp     [ecx+0Ch], ebx
.text:00403AB2                 jnz     short loc_403A97
.text:00403AB4                 jmp     loc_4032DC
.text:00403AB4 ; ---------------------------------------------------------------------------
.text:00403AB9                 align 10h
.text:00403AC0
.text:00403AC0 loc_403AC0:                             ; CODE XREF: sub_403090+9F1↑j
.text:00403AC0                 mov     [esp+5Ch+var_18], esi
.text:00403AC4                 mov     eax, [esp+5Ch+var_28]
.text:00403AC8                 mov     [esp+5Ch+var_24], eax
.text:00403ACC                 jmp     loc_4032DC
.text:00403AD1 ; ---------------------------------------------------------------------------
.text:00403AD1
.text:00403AD1 loc_403AD1:                             ; CODE XREF: sub_403090+9E9↑j
.text:00403AD1                 mov     [esp+5Ch+var_18], esi
.text:00403AD5                 mov     ecx, [esp+5Ch+var_28]
.text:00403AD9                 mov     [esp+5Ch+var_1C], 1
.text:00403AE1                 mov     [esp+5Ch+var_24], ecx
.text:00403AE5                 jmp     loc_4032F0
.text:00403AEA ; ---------------------------------------------------------------------------
.text:00403AEA
.text:00403AEA loc_403AEA:                             ; CODE XREF: sub_403090+1BF↑j
.text:00403AEA                 mov     eax, [esp+5Ch+Str]
.text:00403AEE                 movsx   esi, dl
.text:00403AF1                 mov     [esp+5Ch+Str2], esi ; Val
.text:00403AF5                 mov     [esp+5Ch+Str1], eax ; Str
.text:00403AF8                 call    strchr
.text:00403AFD                 test    eax, eax
.text:00403AFF                 jnz     loc_4035B0
.text:00403B05                 jmp     loc_403255
.text:00403B0A ; ---------------------------------------------------------------------------
.text:00403B0A
.text:00403B0A loc_403B0A:                             ; CODE XREF: sub_403090+17C↑j
.text:00403B0A                 mov     ecx, 1
.text:00403B0F                 jmp     loc_403212
.text:00403B14 ; ---------------------------------------------------------------------------
.text:00403B14
.text:00403B14 loc_403B14:                             ; CODE XREF: sub_403090+D4↑j
.text:00403B14                                         ; sub_403090+130↑j
.text:00403B14                 mov     eax, [ebp+20h]
.text:00403B17                 cmp     eax, [ebp+24h]
.text:00403B1A                 jz      loc_4031F0
.text:00403B20                 mov     [ebp+0], eax
.text:00403B23                 jmp     loc_4031F0
.text:00403B28 ; ---------------------------------------------------------------------------
.text:00403B28
.text:00403B28 loc_403B28:                             ; CODE XREF: sub_403090+FE↑j
.text:00403B28                 mov     [ebp+20h], eax
.text:00403B2B                 jmp     loc_4031B0
.text:00403B30 ; ---------------------------------------------------------------------------
.text:00403B30
.text:00403B30 loc_403B30:                             ; CODE XREF: sub_403090+CA↑j
.text:00403B30                 mov     edx, [ebp+20h]
.text:00403B33                 mov     eax, [ebp+24h]
.text:00403B36                 cmp     edx, eax
.text:00403B38                 jz      short loc_403BB0
.text:00403B3A                 cmp     eax, ebx
.text:00403B3C                 jz      short loc_403B51
.text:00403B3E                 mov     [esp+5Ch+Str2], ebp
.text:00403B42                 mov     ebx, [esp+5Ch+arg_4]
.text:00403B46                 mov     [esp+5Ch+Str1], ebx
.text:00403B49                 call    sub_403D40
.text:00403B4E                 mov     ebx, [ebp+0]
.text:00403B51
.text:00403B51 loc_403B51:                             ; CODE XREF: sub_403090+AAC↑j
.text:00403B51                                         ; sub_403090+B22↓j ...
.text:00403B51                 cmp     ebx, [esp+5Ch+arg_0]
.text:00403B55                 jge     short loc_403BA0
.text:00403B57                 mov     esi, [esp+5Ch+arg_4]
.text:00403B5B                 mov     eax, [esi+ebx*4]
.text:00403B5E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00403B61                 jz      short loc_403BA8
.text:00403B63                 lea     esi, [esi+0]
.text:00403B69                 lea     edi, [edi+0]
.text:00403B70
.text:00403B70 loc_403B70:                             ; CODE XREF: sub_403090+AFC↓j
.text:00403B70                                         ; sub_403090+B1C↓j
.text:00403B70                 lea     eax, [ebx+1]
.text:00403B73                 mov     ebx, eax
.text:00403B75                 mov     [ebp+0], eax
.text:00403B78                 cmp     eax, [esp+5Ch+arg_0]
.text:00403B7C                 jge     short loc_403BA0
.text:00403B7E                 mov     edi, [esp+5Ch+arg_4]
.text:00403B82                 mov     edx, [edi+eax*4]
.text:00403B85                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00403B88                 jz      short loc_403B90
.text:00403B8A
.text:00403B8A loc_403B8A:                             ; CODE XREF: sub_403090+B04↓j
.text:00403B8A                 mov     ebx, eax
.text:00403B8C                 jmp     short loc_403B70
.text:00403B8C ; ---------------------------------------------------------------------------
.text:00403B8E                 align 10h
.text:00403B90
.text:00403B90 loc_403B90:                             ; CODE XREF: sub_403090+AF8↑j
.text:00403B90                 cmp     byte ptr [edx+1], 0
.text:00403B94                 jz      short loc_403B8A
.text:00403B96                 lea     esi, [esi+0]
.text:00403B99                 lea     edi, [edi+0]
.text:00403BA0
.text:00403BA0 loc_403BA0:                             ; CODE XREF: sub_403090+AC5↑j
.text:00403BA0                                         ; sub_403090+AEC↑j ...
.text:00403BA0                 mov     [ebp+24h], ebx
.text:00403BA3                 jmp     loc_403160
.text:00403BA8 ; ---------------------------------------------------------------------------
.text:00403BA8
.text:00403BA8 loc_403BA8:                             ; CODE XREF: sub_403090+AD1↑j
.text:00403BA8                 cmp     byte ptr [eax+1], 0
.text:00403BAC                 jz      short loc_403B70
.text:00403BAE                 jmp     short loc_403BA0
.text:00403BB0 ; ---------------------------------------------------------------------------
.text:00403BB0
.text:00403BB0 loc_403BB0:                             ; CODE XREF: sub_403090+AA8↑j
.text:00403BB0                 cmp     edx, ebx
.text:00403BB2                 jz      short loc_403B51
.text:00403BB4                 mov     [ebp+20h], ebx
.text:00403BB7                 jmp     short loc_403B51
.text:00403BB9 ; ---------------------------------------------------------------------------
.text:00403BB9
.text:00403BB9 loc_403BB9:                             ; CODE XREF: sub_403090+88↑j
.text:00403BB9                 mov     dword ptr [ebp+18h], 0
.text:00403BC0                 mov     esi, [esp+5Ch+Str]
.text:00403BC4
.text:00403BC4 loc_403BC4:                             ; CODE XREF: sub_403090+B49↓j
.text:00403BC4                 inc     esi
.text:00403BC5                 jmp     loc_403128
.text:00403BC5 ; ---------------------------------------------------------------------------
.text:00403BCA                 align 10h
.text:00403BD0
.text:00403BD0 loc_403BD0:                             ; CODE XREF: sub_403090+80↑j
.text:00403BD0                 mov     dword ptr [ebp+18h], 2
.text:00403BD7                 mov     esi, ecx
.text:00403BD9                 jmp     short loc_403BC4
.text:00403BD9 ; ---------------------------------------------------------------------------
.text:00403BDB                 align 10h
.text:00403BE0
.text:00403BE0 loc_403BE0:                             ; CODE XREF: sub_403090+69↑j
.text:00403BE0                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00403BE7                 call    getenv
.text:00403BEC                 test    eax, eax
.text:00403BEE                 jz      loc_403104
.text:00403BF4                 jmp     loc_4030FF
.text:00403BF4 ; ---------------------------------------------------------------------------
.text:00403BF9                 align 10h
.text:00403C00
.text:00403C00 loc_403C00:                             ; CODE XREF: sub_403090+3F↑j
.text:00403C00                 mov     dword ptr [ebp+0], 1
.text:00403C07                 mov     ebx, 1
.text:00403C0C                 jmp     loc_4030E0
.text:00403C0C sub_403090      endp
.text:00403C0C
.text:00403C11 ; ---------------------------------------------------------------------------
.text:00403C11                 jmp     short sub_403C20
.text:00403C11 ; ---------------------------------------------------------------------------
.text:00403C13                 align 10h
.text:00403C20
.text:00403C20 ; =============== S U B R O U T I N E =======================================
.text:00403C20
.text:00403C20
.text:00403C20 ; int __cdecl sub_403C20(int, int, char *, int, int, int, int)
.text:00403C20 sub_403C20      proc near               ; CODE XREF: .text:00403C11↑j
.text:00403C20                                         ; sub_407580+3A↓p ...
.text:00403C20
.text:00403C20 var_2C          = dword ptr -2Ch
.text:00403C20 var_28          = dword ptr -28h
.text:00403C20 Str             = dword ptr -24h
.text:00403C20 var_20          = dword ptr -20h
.text:00403C20 var_1C          = dword ptr -1Ch
.text:00403C20 var_18          = dword ptr -18h
.text:00403C20 var_14          = dword ptr -14h
.text:00403C20 var_10          = dword ptr -10h
.text:00403C20 arg_0           = dword ptr  4
.text:00403C20 arg_4           = dword ptr  8
.text:00403C20 arg_8           = dword ptr  0Ch
.text:00403C20 arg_C           = dword ptr  10h
.text:00403C20 arg_10          = dword ptr  14h
.text:00403C20 arg_14          = dword ptr  18h
.text:00403C20 arg_18          = dword ptr  1Ch
.text:00403C20
.text:00403C20                 sub     esp, 2Ch
.text:00403C23                 mov     edx, dword_40A020
.text:00403C29                 mov     [esp+2Ch+var_10], offset dword_40B050 ; int
.text:00403C31                 mov     ecx, dword_40A024
.text:00403C37                 mov     ds:dword_40B050, edx
.text:00403C3D                 mov     edx, [esp+2Ch+arg_18]
.text:00403C41                 mov     ds:dword_40B054, ecx
.text:00403C47                 mov     ecx, [esp+2Ch+arg_14]
.text:00403C4B                 mov     [esp+2Ch+var_14], edx ; int
.text:00403C4F                 mov     edx, [esp+2Ch+arg_10]
.text:00403C53                 mov     [esp+2Ch+var_18], ecx ; int
.text:00403C57                 mov     ecx, [esp+2Ch+arg_C]
.text:00403C5B                 mov     [esp+2Ch+var_1C], edx ; int
.text:00403C5F                 mov     edx, [esp+2Ch+arg_8]
.text:00403C63                 mov     [esp+2Ch+var_20], ecx ; int
.text:00403C67                 mov     ecx, [esp+2Ch+arg_4]
.text:00403C6B                 mov     [esp+2Ch+Str], edx ; Str
.text:00403C6F                 mov     edx, [esp+2Ch+arg_0]
.text:00403C73                 mov     [esp+2Ch+var_28], ecx ; int
.text:00403C77                 mov     [esp+2Ch+var_2C], edx ; int
.text:00403C7A                 call    sub_403090
.text:00403C7F                 mov     ecx, ds:dword_40B050
.text:00403C85                 mov     dword_40A020, ecx
.text:00403C8B                 mov     ecx, ds:dword_40B05C
.text:00403C91                 mov     ds:dword_40B200, ecx
.text:00403C97                 mov     ecx, ds:dword_40B058
.text:00403C9D                 mov     dword_40A028, ecx
.text:00403CA3                 add     esp, 2Ch
.text:00403CA6                 retn
.text:00403CA6 sub_403C20      endp
.text:00403CA6
.text:00403CA6 ; ---------------------------------------------------------------------------
.text:00403CA7                 align 10h
.text:00403CB0                 sub     esp, 2Ch
.text:00403CB3                 mov     edx, dword_40A020
.text:00403CB9                 mov     dword ptr [esp+1Ch], offset dword_40B050
.text:00403CC1                 mov     ecx, dword_40A024
.text:00403CC7                 mov     dword ptr [esp+18h], 1
.text:00403CCF                 mov     ds:dword_40B050, edx
.text:00403CD5                 mov     edx, [esp+38h]
.text:00403CD9                 mov     ds:dword_40B054, ecx
.text:00403CDF                 mov     ecx, [esp+34h]
.text:00403CE3                 mov     [esp+8], edx
.text:00403CE7                 mov     edx, [esp+30h]
.text:00403CEB                 mov     [esp+4], ecx
.text:00403CEF                 mov     dword ptr [esp+14h], 0
.text:00403CF7                 mov     dword ptr [esp+10h], 0
.text:00403CFF                 mov     dword ptr [esp+0Ch], 0
.text:00403D07                 mov     [esp], edx
.text:00403D0A                 call    sub_403090
.text:00403D0F                 mov     ecx, ds:dword_40B050
.text:00403D15                 mov     dword_40A020, ecx
.text:00403D1B                 mov     ecx, ds:dword_40B05C
.text:00403D21                 mov     ds:dword_40B200, ecx
.text:00403D27                 mov     ecx, ds:dword_40B058
.text:00403D2D                 mov     dword_40A028, ecx
.text:00403D33                 add     esp, 2Ch
.text:00403D36                 retn
.text:00403D36 ; ---------------------------------------------------------------------------
.text:00403D37                 align 10h
.text:00403D40
.text:00403D40 ; =============== S U B R O U T I N E =======================================
.text:00403D40
.text:00403D40
.text:00403D40 sub_403D40      proc near               ; CODE XREF: sub_403090+113↑p
.text:00403D40                                         ; sub_403090+AB9↑p
.text:00403D40
.text:00403D40 var_2C          = dword ptr -2Ch
.text:00403D40 var_28          = dword ptr -28h
.text:00403D40 var_24          = dword ptr -24h
.text:00403D40 var_20          = dword ptr -20h
.text:00403D40 var_1C          = dword ptr -1Ch
.text:00403D40 var_18          = dword ptr -18h
.text:00403D40 var_14          = dword ptr -14h
.text:00403D40 arg_0           = dword ptr  4
.text:00403D40 arg_4           = dword ptr  8
.text:00403D40
.text:00403D40                 push    ebp
.text:00403D41                 push    edi
.text:00403D42                 push    esi
.text:00403D43                 push    ebx
.text:00403D44                 sub     esp, 1Ch
.text:00403D47                 mov     ecx, [esp+2Ch+arg_4]
.text:00403D4B                 mov     eax, [esp+2Ch+arg_4]
.text:00403D4F                 mov     ebx, [esp+2Ch+arg_4]
.text:00403D53                 mov     edx, [ecx+20h]
.text:00403D56                 mov     edi, [esp+2Ch+arg_0]
.text:00403D5A                 mov     ecx, [ebx]
.text:00403D5C                 mov     [esp+2Ch+var_2C], edx
.text:00403D5F                 mov     [esp+2Ch+var_14], edx
.text:00403D63                 mov     edx, [eax+24h]
.text:00403D66                 mov     [esp+2Ch+var_28], ecx
.text:00403D6A                 mov     [esp+2Ch+var_1C], ecx
.text:00403D6E                 cmp     ecx, edx
.text:00403D70                 mov     [esp+2Ch+var_18], edx
.text:00403D74                 jle     short loc_403DF0
.text:00403D76                 mov     esi, [esp+2Ch+var_2C]
.text:00403D79                 cmp     edx, esi
.text:00403D7B                 jle     short loc_403DF0
.text:00403D7D                 lea     esi, [esi+0]
.text:00403D80
.text:00403D80 loc_403D80:                             ; CODE XREF: sub_403D40+A1↓j
.text:00403D80                 mov     ebx, [esp+2Ch+var_1C]
.text:00403D84                 mov     edx, [esp+2Ch+var_18]
.text:00403D88                 mov     ebp, [esp+2Ch+var_18]
.text:00403D8C                 mov     eax, [esp+2Ch+var_14]
.text:00403D90                 sub     ebx, edx
.text:00403D92                 mov     [esp+2Ch+var_20], ebx
.text:00403D96                 sub     ebp, eax
.text:00403D98                 cmp     ebx, ebp
.text:00403D9A                 jle     short loc_403E15
.text:00403D9C                 xor     esi, esi
.text:00403D9E                 cmp     esi, ebp
.text:00403DA0                 jge     short loc_403DCD
.text:00403DA2                 mov     ecx, [esp+2Ch+var_1C]
.text:00403DA6                 sub     ecx, ebp
.text:00403DA8                 mov     [esp+2Ch+var_24], ecx
.text:00403DAC                 lea     esi, [esi+0]
.text:00403DB0
.text:00403DB0 loc_403DB0:                             ; CODE XREF: sub_403D40+8B↓j
.text:00403DB0                 mov     ecx, [esp+2Ch+var_14]
.text:00403DB4                 mov     edx, [esp+2Ch+var_24]
.text:00403DB8                 add     ecx, esi
.text:00403DBA                 add     edx, esi
.text:00403DBC                 mov     ebx, [edi+ecx*4]
.text:00403DBF                 mov     eax, [edi+edx*4]
.text:00403DC2                 inc     esi
.text:00403DC3                 cmp     esi, ebp
.text:00403DC5                 mov     [edi+ecx*4], eax
.text:00403DC8                 mov     [edi+edx*4], ebx
.text:00403DCB                 jl      short loc_403DB0
.text:00403DCD
.text:00403DCD loc_403DCD:                             ; CODE XREF: sub_403D40+60↑j
.text:00403DCD                 sub     [esp+2Ch+var_1C], ebp
.text:00403DD1
.text:00403DD1 loc_403DD1:                             ; CODE XREF: sub_403D40+107↓j
.text:00403DD1                 mov     eax, [esp+2Ch+var_18]
.text:00403DD5                 cmp     [esp+2Ch+var_1C], eax
.text:00403DD9                 jle     short loc_403DF0
.text:00403DDB                 mov     ebp, [esp+2Ch+var_14]
.text:00403DDF                 cmp     eax, ebp
.text:00403DE1                 jg      short loc_403D80
.text:00403DE3                 lea     esi, [esi+0]
.text:00403DE9                 lea     edi, [edi+0]
.text:00403DF0
.text:00403DF0 loc_403DF0:                             ; CODE XREF: sub_403D40+34↑j
.text:00403DF0                                         ; sub_403D40+3B↑j ...
.text:00403DF0                 mov     esi, [esp+2Ch+var_28]
.text:00403DF4                 mov     ecx, [esp+2Ch+var_18]
.text:00403DF8                 mov     eax, [esp+2Ch+var_2C]
.text:00403DFB                 mov     edi, [esp+2Ch+arg_4]
.text:00403DFF                 mov     edx, [esp+2Ch+var_28]
.text:00403E03                 sub     esi, ecx
.text:00403E05                 add     esi, eax
.text:00403E07                 mov     [edi+20h], esi
.text:00403E0A                 mov     [edi+24h], edx
.text:00403E0D                 add     esp, 1Ch
.text:00403E10                 pop     ebx
.text:00403E11                 pop     esi
.text:00403E12                 pop     edi
.text:00403E13                 pop     ebp
.text:00403E14                 retn
.text:00403E15 ; ---------------------------------------------------------------------------
.text:00403E15
.text:00403E15 loc_403E15:                             ; CODE XREF: sub_403D40+5A↑j
.text:00403E15                 xor     esi, esi
.text:00403E17                 cmp     esi, [esp+2Ch+var_20]
.text:00403E1B                 jge     short loc_403E3F
.text:00403E1D                 lea     esi, [esi+0]
.text:00403E20
.text:00403E20 loc_403E20:                             ; CODE XREF: sub_403D40+FD↓j
.text:00403E20                 mov     ebx, [esp+2Ch+var_14]
.text:00403E24                 mov     ebp, [esp+2Ch+var_18]
.text:00403E28                 add     ebx, esi
.text:00403E2A                 add     ebp, esi
.text:00403E2C                 mov     edx, [edi+ebx*4]
.text:00403E2F                 inc     esi
.text:00403E30                 cmp     esi, [esp+2Ch+var_20]
.text:00403E34                 mov     ecx, [edi+ebp*4]
.text:00403E37                 mov     [edi+ebx*4], ecx
.text:00403E3A                 mov     [edi+ebp*4], edx
.text:00403E3D                 jl      short loc_403E20
.text:00403E3F
.text:00403E3F loc_403E3F:                             ; CODE XREF: sub_403D40+DB↑j
.text:00403E3F                 mov     esi, [esp+2Ch+var_20]
.text:00403E43                 add     [esp+2Ch+var_14], esi
.text:00403E47                 jmp     short loc_403DD1
.text:00403E47 sub_403D40      endp
.text:00403E47
.text:00403E47 ; ---------------------------------------------------------------------------
.text:00403E49                 align 20h
.text:00403E60 dword_403E60    dd 80h, 0Fh dup(0)      ; DATA XREF: sub_403EA0:loc_403F9E↓o
.text:00403E60                                         ; .text:loc_405EF0↓o ...
.text:00403EA0
.text:00403EA0 ; =============== S U B R O U T I N E =======================================
.text:00403EA0
.text:00403EA0
.text:00403EA0 sub_403EA0      proc near               ; DATA XREF: sub_4019A0+377↑o
.text:00403EA0                                         ; sub_4019A0+4C1↑o
.text:00403EA0
.text:00403EA0 Buffer          = dword ptr -111Ch
.text:00403EA0 ElementSize     = dword ptr -1118h
.text:00403EA0 ElementCount    = dword ptr -1114h
.text:00403EA0 Stream          = dword ptr -1110h
.text:00403EA0 var_110C        = byte ptr -110Ch
.text:00403EA0 var_BC          = dword ptr -0BCh
.text:00403EA0 var_B8          = dword ptr -0B8h
.text:00403EA0 var_B4          = dword ptr -0B4h
.text:00403EA0 var_B0          = dword ptr -0B0h
.text:00403EA0 var_AC          = dword ptr -0ACh
.text:00403EA0 var_A8          = dword ptr -0A8h
.text:00403EA0 var_A4          = dword ptr -0A4h
.text:00403EA0 var_A0          = dword ptr -0A0h
.text:00403EA0 arg_0           = dword ptr  4
.text:00403EA0 arg_4           = dword ptr  8
.text:00403EA0
.text:00403EA0                 push    ebp
.text:00403EA1                 mov     eax, 110Ch
.text:00403EA6                 push    edi
.text:00403EA7                 push    esi
.text:00403EA8                 push    ebx             ; Size
.text:00403EA9                 call    __alloca
.text:00403EAE                 mov     edx, 67452301h
.text:00403EB3                 mov     esi, [esp+111Ch+arg_0]
.text:00403EBA                 mov     edi, 98BADCFEh
.text:00403EBF                 mov     [esp+111Ch+var_BC], edx
.text:00403EC6                 mov     ebp, 0EFCDAB89h
.text:00403ECB                 mov     ebx, 10325476h
.text:00403ED0                 mov     [esp+111Ch+var_B4], edi
.text:00403ED7                 xor     edx, edx
.text:00403ED9                 mov     ecx, 0C3D2E1F0h
.text:00403EDE                 mov     [esp+111Ch+var_A4], edx
.text:00403EE5                 xor     eax, eax
.text:00403EE7                 lea     edi, [esp+111Ch+var_110C]
.text:00403EEB                 mov     [esp+111Ch+var_B8], ebp
.text:00403EF2                 xor     edx, edx
.text:00403EF4                 mov     [esp+111Ch+var_B0], ebx
.text:00403EFB                 mov     [esp+111Ch+var_AC], ecx
.text:00403F02                 mov     [esp+111Ch+var_A8], eax
.text:00403F09                 mov     [esp+111Ch+var_A0], edx
.text:00403F10
.text:00403F10 loc_403F10:                             ; CODE XREF: sub_403EA0+2D9↓j
.text:00403F10                 xor     ebx, ebx
.text:00403F12                 lea     esi, [esi+0]
.text:00403F19                 lea     edi, [edi+0]
.text:00403F20
.text:00403F20 loc_403F20:                             ; CODE XREF: sub_403EA0+BC↓j
.text:00403F20                 mov     [esp+111Ch+Stream], esi ; Stream
.text:00403F24                 mov     ebp, 1000h
.text:00403F29                 lea     ecx, [ebx+edi]
.text:00403F2C                 mov     [esp+111Ch+ElementSize], 1 ; ElementSize
.text:00403F34                 sub     ebp, ebx
.text:00403F36                 mov     [esp+111Ch+ElementCount], ebp ; ElementCount
.text:00403F3A                 mov     [esp+111Ch+Buffer], ecx ; Buffer
.text:00403F3D                 call    fread
.text:00403F42                 add     ebx, eax
.text:00403F44                 cmp     ebx, 1000h
.text:00403F4A                 jz      loc_40415E
.text:00403F50                 test    eax, eax
.text:00403F52                 jz      loc_40414D
.text:00403F58                 test    byte ptr [esi+0Ch], 10h
.text:00403F5C                 jz      short loc_403F20
.text:00403F5E
.text:00403F5E loc_403F5E:                             ; CODE XREF: sub_403EA0+2B1↓j
.text:00403F5E                 test    ebx, ebx
.text:00403F60                 lea     ebp, [esp+111Ch+var_BC]
.text:00403F67                 jnz     loc_404138
.text:00403F6D
.text:00403F6D loc_403F6D:                             ; CODE XREF: sub_403EA0+2A8↓j
.text:00403F6D                 mov     ebx, [esp+111Ch+var_A0]
.text:00403F74                 mov     esi, [esp+111Ch+var_A8]
.text:00403F7B                 add     esi, ebx
.text:00403F7D                 mov     [esp+111Ch+var_A8], esi
.text:00403F84                 cmp     esi, ebx
.text:00403F86                 jnb     short loc_403F8F
.text:00403F88                 inc     [esp+111Ch+var_A4]
.text:00403F8F
.text:00403F8F loc_403F8F:                             ; CODE XREF: sub_403EA0+E6↑j
.text:00403F8F                 cmp     ebx, 37h ; '7'
.text:00403F92                 mov     esi, 78h ; 'x'
.text:00403F97                 ja      short loc_403F9E
.text:00403F99                 mov     esi, 38h ; '8'
.text:00403F9E
.text:00403F9E loc_403F9E:                             ; CODE XREF: sub_403EA0+F7↑j
.text:00403F9E                 mov     [esp+111Ch+ElementSize], offset dword_403E60 ; Src
.text:00403FA6                 sub     esi, ebx
.text:00403FA8                 lea     edi, [ebx+ebp+20h]
.text:00403FAC                 mov     [esp+111Ch+ElementCount], esi ; Size
.text:00403FB0                 add     ebx, esi
.text:00403FB2                 mov     [esp+111Ch+Buffer], edi ; void *
.text:00403FB5                 lea     edi, [ebx+ebp]
.text:00403FB8                 add     ebx, 8
.text:00403FBB                 call    memcpy
.text:00403FC0                 mov     esi, [ebp+14h]
.text:00403FC3                 lea     ecx, ds:0[esi*8]
.text:00403FCA                 mov     edx, ecx
.text:00403FCC                 and     edx, 0FF00h
.text:00403FD2                 shl     esi, 1Bh
.text:00403FD5                 shl     edx, 8
.text:00403FD8                 shr     ecx, 8
.text:00403FDB                 or      esi, edx
.text:00403FDD                 mov     edx, ecx
.text:00403FDF                 and     edx, 0FF00h
.text:00403FE5                 shr     ecx, 10h
.text:00403FE8                 or      esi, edx
.text:00403FEA                 or      esi, ecx
.text:00403FEC                 mov     [edi+24h], esi
.text:00403FEF                 mov     ecx, [ebp+18h]
.text:00403FF2                 mov     esi, [ebp+14h]
.text:00403FF5                 shl     ecx, 3
.text:00403FF8                 shr     esi, 1Dh
.text:00403FFB                 or      ecx, esi
.text:00403FFD                 mov     edx, ecx
.text:00403FFF                 mov     esi, ecx
.text:00404001                 and     edx, 0FF00h
.text:00404007                 shl     edx, 8
.text:0040400A                 shr     ecx, 8
.text:0040400D                 shl     esi, 18h
.text:00404010                 or      esi, edx
.text:00404012                 mov     edx, ecx
.text:00404014                 and     edx, 0FF00h
.text:0040401A                 or      esi, edx
.text:0040401C                 shr     ecx, 10h
.text:0040401F                 or      esi, ecx
.text:00404021                 mov     [edi+20h], esi
.text:00404024                 lea     esi, [ebp+20h]
.text:00404027                 mov     [esp+111Ch+ElementCount], ebp
.text:0040402B                 mov     [esp+111Ch+ElementSize], ebx
.text:0040402F                 mov     [esp+111Ch+Buffer], esi
.text:00404032                 call    sub_404370
.text:00404037                 mov     edi, [ebp+0]
.text:0040403A                 mov     esi, [esp+111Ch+arg_4]
.text:00404041                 mov     edx, edi
.text:00404043                 mov     ebx, edi
.text:00404045                 and     edx, 0FF00h
.text:0040404B                 shr     edi, 8
.text:0040404E                 shl     edx, 8
.text:00404051                 mov     ecx, edi
.text:00404053                 shl     ebx, 18h
.text:00404056                 or      ebx, edx
.text:00404058                 and     ecx, 0FF00h
.text:0040405E                 or      ebx, ecx
.text:00404060                 shr     edi, 10h
.text:00404063                 or      ebx, edi
.text:00404065                 mov     [esi], ebx
.text:00404067                 mov     edi, [ebp+4]
.text:0040406A                 mov     esi, [esp+111Ch+arg_4]
.text:00404071                 mov     edx, edi
.text:00404073                 mov     ebx, edi
.text:00404075                 and     edx, 0FF00h
.text:0040407B                 shr     edi, 8
.text:0040407E                 shl     edx, 8
.text:00404081                 mov     ecx, edi
.text:00404083                 shl     ebx, 18h
.text:00404086                 and     ecx, 0FF00h
.text:0040408C                 or      ebx, edx
.text:0040408E                 or      ebx, ecx
.text:00404090                 shr     edi, 10h
.text:00404093                 or      ebx, edi
.text:00404095                 mov     [esi+4], ebx
.text:00404098                 mov     edi, [ebp+8]
.text:0040409B                 mov     esi, [esp+111Ch+arg_4]
.text:004040A2                 mov     edx, edi
.text:004040A4                 mov     ebx, edi
.text:004040A6                 and     edx, 0FF00h
.text:004040AC                 shr     edi, 8
.text:004040AF                 shl     edx, 8
.text:004040B2                 mov     ecx, edi
.text:004040B4                 shl     ebx, 18h
.text:004040B7                 and     ecx, 0FF00h
.text:004040BD                 or      ebx, edx
.text:004040BF                 or      ebx, ecx
.text:004040C1                 shr     edi, 10h
.text:004040C4                 or      ebx, edi
.text:004040C6                 mov     [esi+8], ebx
.text:004040C9                 mov     edi, [ebp+0Ch]
.text:004040CC                 mov     esi, [esp+111Ch+arg_4]
.text:004040D3                 mov     edx, edi
.text:004040D5                 mov     ebx, edi
.text:004040D7                 and     edx, 0FF00h
.text:004040DD                 shr     edi, 8
.text:004040E0                 shl     edx, 8
.text:004040E3                 mov     ecx, edi
.text:004040E5                 shl     ebx, 18h
.text:004040E8                 and     ecx, 0FF00h
.text:004040EE                 or      ebx, edx
.text:004040F0                 or      ebx, ecx
.text:004040F2                 shr     edi, 10h
.text:004040F5                 or      ebx, edi
.text:004040F7                 mov     [esi+0Ch], ebx
.text:004040FA                 mov     ecx, [ebp+10h]
.text:004040FD                 mov     ebx, [esp+111Ch+arg_4]
.text:00404104                 mov     ebp, ecx
.text:00404106                 mov     edi, ecx
.text:00404108                 and     ebp, 0FF00h
.text:0040410E                 shl     edi, 18h
.text:00404111                 shl     ebp, 8
.text:00404114                 or      edi, ebp
.text:00404116                 shr     ecx, 8
.text:00404119                 mov     edx, ecx
.text:0040411B                 xor     eax, eax
.text:0040411D                 and     edx, 0FF00h
.text:00404123                 shr     ecx, 10h
.text:00404126                 or      edi, edx
.text:00404128                 or      edi, ecx
.text:0040412A                 mov     [ebx+10h], edi
.text:0040412D
.text:0040412D loc_40412D:                             ; CODE XREF: sub_403EA0+2BC↓j
.text:0040412D                 add     esp, 110Ch
.text:00404133                 pop     ebx
.text:00404134                 pop     esi
.text:00404135                 pop     edi
.text:00404136                 pop     ebp
.text:00404137                 retn
.text:00404138 ; ---------------------------------------------------------------------------
.text:00404138
.text:00404138 loc_404138:                             ; CODE XREF: sub_403EA0+C7↑j
.text:00404138                 mov     [esp+111Ch+ElementCount], ebp ; int
.text:0040413C                 mov     [esp+111Ch+ElementSize], ebx ; size_t
.text:00404140                 mov     [esp+111Ch+Buffer], edi ; void *
.text:00404143                 call    sub_404180
.text:00404148                 jmp     loc_403F6D
.text:0040414D ; ---------------------------------------------------------------------------
.text:0040414D
.text:0040414D loc_40414D:                             ; CODE XREF: sub_403EA0+B2↑j
.text:0040414D                 test    byte ptr [esi+0Ch], 20h
.text:00404151                 jz      loc_403F5E
.text:00404157                 mov     eax, 1
.text:0040415C                 jmp     short loc_40412D
.text:0040415E ; ---------------------------------------------------------------------------
.text:0040415E
.text:0040415E loc_40415E:                             ; CODE XREF: sub_403EA0+AA↑j
.text:0040415E                 mov     [esp+111Ch+ElementSize], 1000h
.text:00404166                 lea     eax, [esp+111Ch+var_BC]
.text:0040416D                 mov     [esp+111Ch+ElementCount], eax
.text:00404171                 mov     [esp+111Ch+Buffer], edi
.text:00404174                 call    sub_404370
.text:00404179                 jmp     loc_403F10
.text:00404179 sub_403EA0      endp
.text:00404179
.text:00404179 ; ---------------------------------------------------------------------------
.text:0040417E                 align 10h
.text:00404180
.text:00404180 ; =============== S U B R O U T I N E =======================================
.text:00404180
.text:00404180
.text:00404180 ; int __cdecl sub_404180(void *, size_t, int)
.text:00404180 sub_404180      proc near               ; CODE XREF: sub_403EA0+2A3↑p
.text:00404180                                         ; .text:004060CE↓p
.text:00404180
.text:00404180 var_2C          = dword ptr -2Ch
.text:00404180 Src             = dword ptr -28h
.text:00404180 Size            = dword ptr -24h
.text:00404180 var_14          = dword ptr -14h
.text:00404180 arg_0           = dword ptr  4
.text:00404180 arg_4           = dword ptr  8
.text:00404180 arg_8           = dword ptr  0Ch
.text:00404180
.text:00404180                 push    ebp
.text:00404181                 push    edi
.text:00404182                 push    esi
.text:00404183                 push    ebx
.text:00404184                 sub     esp, 1Ch
.text:00404187                 mov     edx, [esp+2Ch+arg_8]
.text:0040418B                 mov     esi, [esp+2Ch+arg_0]
.text:0040418F                 mov     edi, [esp+2Ch+arg_4]
.text:00404193                 mov     ebx, [edx+1Ch]
.text:00404196                 test    ebx, ebx
.text:00404198                 jz      short loc_4041F1
.text:0040419A                 mov     [esp+2Ch+var_14], 80h ; '€'
.text:004041A2                 sub     [esp+2Ch+var_14], ebx
.text:004041A6                 cmp     [esp+2Ch+var_14], edi
.text:004041AA                 jbe     short loc_4041B0
.text:004041AC                 mov     [esp+2Ch+var_14], edi
.text:004041B0
.text:004041B0 loc_4041B0:                             ; CODE XREF: sub_404180+2A↑j
.text:004041B0                 mov     [esp+2Ch+Src], esi ; Src
.text:004041B4                 mov     ecx, [esp+2Ch+arg_8]
.text:004041B8                 mov     eax, [esp+2Ch+var_14]
.text:004041BC                 lea     ebp, [ebx+ecx+20h]
.text:004041C0                 mov     [esp+2Ch+var_2C], ebp ; void *
.text:004041C3                 mov     [esp+2Ch+Size], eax ; Size
.text:004041C7                 call    memcpy
.text:004041CC                 mov     edx, [esp+2Ch+arg_8]
.text:004041D0                 mov     eax, [esp+2Ch+var_14]
.text:004041D4                 mov     ebp, [edx+1Ch]
.text:004041D7                 add     eax, ebp
.text:004041D9                 cmp     eax, 40h ; '@'
.text:004041DC                 mov     [edx+1Ch], eax
.text:004041DF                 ja      loc_404320
.text:004041E5
.text:004041E5 loc_4041E5:                             ; CODE XREF: sub_404180+1E7↓j
.text:004041E5                 mov     ecx, [esp+2Ch+var_14]
.text:004041E9                 mov     ebp, [esp+2Ch+var_14]
.text:004041ED                 add     esi, ecx
.text:004041EF                 sub     edi, ebp
.text:004041F1
.text:004041F1 loc_4041F1:                             ; CODE XREF: sub_404180+18↑j
.text:004041F1                 cmp     edi, 3Fh ; '?'
.text:004041F4                 jbe     short loc_404250
.text:004041F6                 test    esi, 3
.text:004041FC                 jz      loc_4042FD
.text:00404202                 cmp     edi, 40h ; '@'
.text:00404205                 jbe     short loc_404250
.text:00404207                 mov     ebx, [esp+2Ch+arg_8]
.text:0040420B                 lea     ebp, [ebx+20h]
.text:0040420E                 mov     esi, esi
.text:00404210
.text:00404210 loc_404210:                             ; CODE XREF: sub_404180+C5↓j
.text:00404210                 mov     [esp+2Ch+Src], esi ; Src
.text:00404214                 sub     edi, 40h ; '@'
.text:00404217                 add     esi, 40h ; '@'
.text:0040421A                 mov     [esp+2Ch+Size], 40h ; '@' ; Size
.text:00404222                 mov     [esp+2Ch+var_2C], ebp ; void *
.text:00404225                 call    memcpy
.text:0040422A                 mov     [esp+2Ch+var_2C], eax
.text:0040422D                 mov     ecx, [esp+2Ch+arg_8]
.text:00404231                 mov     [esp+2Ch+Src], 40h ; '@'
.text:00404239                 mov     [esp+2Ch+Size], ecx
.text:0040423D                 call    sub_404370
.text:00404242                 cmp     edi, 40h ; '@'
.text:00404245                 ja      short loc_404210
.text:00404247                 mov     esi, esi
.text:00404249                 lea     edi, [edi+0]
.text:00404250
.text:00404250 loc_404250:                             ; CODE XREF: sub_404180+74↑j
.text:00404250                                         ; sub_404180+85↑j ...
.text:00404250                 test    edi, edi
.text:00404252                 jnz     short loc_404260
.text:00404254
.text:00404254 loc_404254:                             ; CODE XREF: sub_404180+109↓j
.text:00404254                 add     esp, 1Ch
.text:00404257                 pop     ebx
.text:00404258                 pop     esi
.text:00404259                 pop     edi
.text:0040425A                 pop     ebp
.text:0040425B                 retn
.text:0040425B ; ---------------------------------------------------------------------------
.text:0040425C                 align 10h
.text:00404260
.text:00404260 loc_404260:                             ; CODE XREF: sub_404180+D2↑j
.text:00404260                 mov     ecx, [esp+2Ch+arg_8]
.text:00404264                 mov     ebx, [ecx+1Ch]
.text:00404267                 mov     [esp+2Ch+Size], edi ; Size
.text:0040426B                 mov     [esp+2Ch+Src], esi ; Src
.text:0040426F                 lea     edx, [ebx+ecx+20h]
.text:00404273                 add     ebx, edi
.text:00404275                 mov     [esp+2Ch+var_2C], edx ; void *
.text:00404278                 call    memcpy
.text:0040427D                 cmp     ebx, 3Fh ; '?'
.text:00404280                 ja      short loc_40428B
.text:00404282
.text:00404282 loc_404282:                             ; CODE XREF: sub_404180+174↓j
.text:00404282                                         ; sub_404180+17B↓j
.text:00404282                 mov     esi, [esp+2Ch+arg_8]
.text:00404286                 mov     [esi+1Ch], ebx
.text:00404289                 jmp     short loc_404254
.text:0040428B ; ---------------------------------------------------------------------------
.text:0040428B
.text:0040428B loc_40428B:                             ; CODE XREF: sub_404180+100↑j
.text:0040428B                 mov     [esp+2Ch+Src], 40h ; '@'
.text:00404293                 mov     esi, [esp+2Ch+arg_8]
.text:00404297                 sub     ebx, 40h ; '@'
.text:0040429A                 mov     [esp+2Ch+Size], esi
.text:0040429E                 mov     edi, esi
.text:004042A0                 add     edi, 20h ; ' '
.text:004042A3                 mov     [esp+2Ch+var_2C], edi
.text:004042A6                 call    sub_404370
.text:004042AB                 mov     esi, [esp+2Ch+arg_8]
.text:004042AF                 mov     edx, ebx
.text:004042B1                 add     esi, 60h ; '`'
.text:004042B4                 cmp     ebx, 7
.text:004042B7                 jbe     short loc_4042D8
.text:004042B9                 test    edi, 4
.text:004042BF                 jz      short loc_4042D8
.text:004042C1                 mov     ebp, [esp+2Ch+arg_8]
.text:004042C5                 lea     edx, [ebx-4]
.text:004042C8                 mov     edi, [ebp+60h]
.text:004042CB                 mov     esi, ebp
.text:004042CD                 add     esi, 64h ; 'd'
.text:004042D0                 mov     [ebp+20h], edi
.text:004042D3                 mov     edi, ebp
.text:004042D5                 add     edi, 24h ; '$'
.text:004042D8
.text:004042D8 loc_4042D8:                             ; CODE XREF: sub_404180+137↑j
.text:004042D8                                         ; sub_404180+13F↑j
.text:004042D8                 cld
.text:004042D9                 mov     ecx, edx
.text:004042DB                 shr     ecx, 2
.text:004042DE                 test    dl, 2
.text:004042E1                 rep movsd
.text:004042E3                 jz      short loc_4042F1
.text:004042E5                 movzx   ecx, word ptr [esi]
.text:004042E8                 add     esi, 2
.text:004042EB                 mov     [edi], cx
.text:004042EE                 add     edi, 2
.text:004042F1
.text:004042F1 loc_4042F1:                             ; CODE XREF: sub_404180+163↑j
.text:004042F1                 test    dl, 1
.text:004042F4                 jz      short loc_404282
.text:004042F6                 movzx   edx, byte ptr [esi]
.text:004042F9                 mov     [edi], dl
.text:004042FB                 jmp     short loc_404282
.text:004042FD ; ---------------------------------------------------------------------------
.text:004042FD
.text:004042FD loc_4042FD:                             ; CODE XREF: sub_404180+7C↑j
.text:004042FD                 mov     [esp+2Ch+var_2C], esi
.text:00404300                 mov     eax, [esp+2Ch+arg_8]
.text:00404304                 mov     ebp, edi
.text:00404306                 and     ebp, 0FFFFFFC0h
.text:00404309                 and     edi, 3Fh
.text:0040430C                 add     esi, ebp
.text:0040430E                 mov     [esp+2Ch+Size], eax
.text:00404312                 mov     [esp+2Ch+Src], ebp
.text:00404316                 call    sub_404370
.text:0040431B                 jmp     loc_404250
.text:00404320 ; ---------------------------------------------------------------------------
.text:00404320
.text:00404320 loc_404320:                             ; CODE XREF: sub_404180+5F↑j
.text:00404320                 mov     [esp+2Ch+Size], edx
.text:00404324                 mov     ebp, edx
.text:00404326                 and     eax, 0FFFFFFC0h
.text:00404329                 mov     [esp+2Ch+Src], eax
.text:0040432D                 add     ebp, 20h ; ' '
.text:00404330                 mov     [esp+2Ch+var_2C], ebp
.text:00404333                 call    sub_404370
.text:00404338                 mov     edx, [esp+2Ch+arg_8]
.text:0040433C                 mov     ecx, [esp+2Ch+var_14]
.text:00404340                 mov     eax, [edx+1Ch]
.text:00404343                 and     eax, 3Fh
.text:00404346                 mov     [edx+1Ch], eax
.text:00404349                 lea     edx, [ecx+ebx]
.text:0040434C                 mov     ecx, [esp+2Ch+arg_8]
.text:00404350                 mov     [esp+2Ch+Size], eax ; Size
.text:00404354                 and     edx, 0FFFFFFC0h
.text:00404357                 mov     [esp+2Ch+var_2C], ebp ; void *
.text:0040435A                 lea     ebx, [edx+ecx+20h]
.text:0040435E                 mov     [esp+2Ch+Src], ebx ; Src
.text:00404362                 call    memcpy
.text:00404367                 jmp     loc_4041E5
.text:00404367 sub_404180      endp
.text:00404367
.text:00404367 ; ---------------------------------------------------------------------------
.text:0040436C                 align 10h
.text:00404370
.text:00404370 ; =============== S U B R O U T I N E =======================================
.text:00404370
.text:00404370
.text:00404370 sub_404370      proc near               ; CODE XREF: sub_403EA0+192↑p
.text:00404370                                         ; sub_403EA0+2D4↑p ...
.text:00404370
.text:00404370 var_170         = dword ptr -170h
.text:00404370 var_168         = dword ptr -168h
.text:00404370 var_164         = dword ptr -164h
.text:00404370 var_160         = dword ptr -160h
.text:00404370 var_15C         = dword ptr -15Ch
.text:00404370 var_158         = dword ptr -158h
.text:00404370 var_154         = dword ptr -154h
.text:00404370 var_150         = dword ptr -150h
.text:00404370 var_14C         = dword ptr -14Ch
.text:00404370 var_148         = dword ptr -148h
.text:00404370 var_144         = dword ptr -144h
.text:00404370 var_140         = dword ptr -140h
.text:00404370 var_13C         = dword ptr -13Ch
.text:00404370 var_138         = dword ptr -138h
.text:00404370 var_134         = dword ptr -134h
.text:00404370 var_130         = dword ptr -130h
.text:00404370 var_12C         = dword ptr -12Ch
.text:00404370 var_128         = dword ptr -128h
.text:00404370 var_124         = dword ptr -124h
.text:00404370 var_120         = dword ptr -120h
.text:00404370 var_11C         = dword ptr -11Ch
.text:00404370 var_118         = dword ptr -118h
.text:00404370 var_114         = dword ptr -114h
.text:00404370 var_110         = dword ptr -110h
.text:00404370 var_10C         = dword ptr -10Ch
.text:00404370 var_108         = dword ptr -108h
.text:00404370 var_104         = dword ptr -104h
.text:00404370 var_100         = dword ptr -100h
.text:00404370 var_FC          = dword ptr -0FCh
.text:00404370 var_F8          = dword ptr -0F8h
.text:00404370 var_F4          = dword ptr -0F4h
.text:00404370 var_F0          = dword ptr -0F0h
.text:00404370 var_EC          = dword ptr -0ECh
.text:00404370 var_E8          = dword ptr -0E8h
.text:00404370 var_E4          = dword ptr -0E4h
.text:00404370 var_E0          = dword ptr -0E0h
.text:00404370 var_DC          = dword ptr -0DCh
.text:00404370 var_D8          = dword ptr -0D8h
.text:00404370 var_D4          = dword ptr -0D4h
.text:00404370 var_D0          = dword ptr -0D0h
.text:00404370 var_CC          = dword ptr -0CCh
.text:00404370 var_C8          = dword ptr -0C8h
.text:00404370 var_C4          = dword ptr -0C4h
.text:00404370 var_C0          = dword ptr -0C0h
.text:00404370 var_BC          = dword ptr -0BCh
.text:00404370 var_B8          = dword ptr -0B8h
.text:00404370 var_B4          = dword ptr -0B4h
.text:00404370 var_B0          = dword ptr -0B0h
.text:00404370 var_AC          = dword ptr -0ACh
.text:00404370 var_A8          = dword ptr -0A8h
.text:00404370 var_A4          = dword ptr -0A4h
.text:00404370 var_A0          = dword ptr -0A0h
.text:00404370 var_9C          = dword ptr -9Ch
.text:00404370 var_98          = dword ptr -98h
.text:00404370 var_94          = dword ptr -94h
.text:00404370 var_90          = dword ptr -90h
.text:00404370 var_8C          = dword ptr -8Ch
.text:00404370 var_88          = dword ptr -88h
.text:00404370 var_84          = dword ptr -84h
.text:00404370 var_80          = dword ptr -80h
.text:00404370 var_7C          = dword ptr -7Ch
.text:00404370 var_78          = dword ptr -78h
.text:00404370 var_74          = dword ptr -74h
.text:00404370 var_70          = dword ptr -70h
.text:00404370 var_6C          = dword ptr -6Ch
.text:00404370 var_68          = dword ptr -68h
.text:00404370 var_64          = dword ptr -64h
.text:00404370 var_60          = dword ptr -60h
.text:00404370 var_5C          = dword ptr -5Ch
.text:00404370 var_58          = dword ptr -58h
.text:00404370 var_54          = dword ptr -54h
.text:00404370 var_50          = dword ptr -50h
.text:00404370 var_4C          = dword ptr -4Ch
.text:00404370 var_48          = dword ptr -48h
.text:00404370 var_44          = dword ptr -44h
.text:00404370 var_40          = dword ptr -40h
.text:00404370 var_3C          = dword ptr -3Ch
.text:00404370 var_38          = dword ptr -38h
.text:00404370 var_34          = dword ptr -34h
.text:00404370 var_30          = dword ptr -30h
.text:00404370 var_2C          = dword ptr -2Ch
.text:00404370 var_28          = dword ptr -28h
.text:00404370 var_24          = dword ptr -24h
.text:00404370 var_20          = dword ptr -20h
.text:00404370 arg_0           = dword ptr  4
.text:00404370 arg_4           = dword ptr  8
.text:00404370 arg_8           = dword ptr  0Ch
.text:00404370
.text:00404370                 push    ebp
.text:00404371                 push    edi
.text:00404372                 push    esi
.text:00404373                 push    ebx
.text:00404374                 sub     esp, 16Ch
.text:0040437A                 mov     ebx, [esp+17Ch+arg_0]
.text:00404381                 mov     eax, [esp+17Ch+arg_4]
.text:00404388                 mov     edi, [esp+17Ch+arg_8]
.text:0040438F                 mov     ecx, [esp+17Ch+arg_8]
.text:00404396                 mov     [esp+17Ch+var_60], ebx
.text:0040439D                 mov     ebp, eax
.text:0040439F                 mov     edx, [esp+17Ch+var_60]
.text:004043A6                 mov     ebx, [esp+17Ch+arg_8]
.text:004043AD                 and     ebp, 0FFFFFFFCh
.text:004043B0                 mov     esi, [edi]
.text:004043B2                 add     ebp, edx
.text:004043B4                 mov     edi, [ebx+0Ch]
.text:004043B7                 mov     [esp+17Ch+var_64], ebp
.text:004043BE                 mov     edx, [ecx+4]
.text:004043C1                 mov     [esp+17Ch+var_68], esi
.text:004043C8                 mov     ebp, [ebx+10h]
.text:004043CB                 mov     ecx, ebx
.text:004043CD                 mov     [esp+17Ch+var_158], esi
.text:004043D1                 mov     esi, [ebx+8]
.text:004043D4                 mov     ebx, [ebx+14h]
.text:004043D7                 mov     [esp+17Ch+var_6C], edx
.text:004043DE                 mov     [esp+17Ch+var_15C], edx
.text:004043E2                 add     ebx, eax
.text:004043E4                 cmp     ebx, eax
.text:004043E6                 mov     [esp+17Ch+var_160], esi
.text:004043EA                 mov     [esp+17Ch+var_164], edi
.text:004043EE                 mov     [esp+17Ch+var_168], ebp
.text:004043F2                 mov     [ecx+14h], ebx
.text:004043F5                 jnb     short loc_4043FA
.text:004043F7                 inc     dword ptr [ecx+18h]
.text:004043FA
.text:004043FA loc_4043FA:                             ; CODE XREF: sub_404370+85↑j
.text:004043FA                 mov     ecx, [esp+17Ch+var_64]
.text:00404401                 cmp     [esp+17Ch+var_60], ecx
.text:00404408                 jnb     loc_405D93
.text:0040440E
.text:0040440E loc_40440E:                             ; CODE XREF: sub_404370+1A1E↓j
.text:0040440E                 xor     ebx, ebx
.text:00404410
.text:00404410 loc_404410:                             ; CODE XREF: sub_404370+DE↓j
.text:00404410                 mov     eax, [esp+17Ch+var_60]
.text:00404417                 add     [esp+17Ch+var_60], 4
.text:0040441F                 mov     edx, [eax]
.text:00404421                 mov     eax, edx
.text:00404423                 mov     ecx, edx
.text:00404425                 and     eax, 0FF00h
.text:0040442A                 shl     eax, 8
.text:0040442D                 shr     edx, 8
.text:00404430                 shl     ecx, 18h
.text:00404433                 or      ecx, eax
.text:00404435                 mov     eax, edx
.text:00404437                 and     eax, 0FF00h
.text:0040443C                 shr     edx, 10h
.text:0040443F                 or      ecx, eax
.text:00404441                 or      ecx, edx
.text:00404443                 mov     [esp+ebx*4+17Ch+var_5C], ecx
.text:0040444A                 inc     ebx
.text:0040444B                 cmp     ebx, 0Fh
.text:0040444E                 jle     short loc_404410
.text:00404450                 mov     eax, [esp+17Ch+var_6C]
.text:00404457                 mov     ebx, esi
.text:00404459                 mov     edx, [esp+17Ch+var_68]
.text:00404460                 rol     [esp+17Ch+var_6C], 1Eh
.text:00404468                 xor     ebx, edi
.text:0040446A                 and     ebx, eax
.text:0040446C                 mov     ecx, [esp+17Ch+var_5C]
.text:00404473                 xor     ebx, edi
.text:00404475                 rol     edx, 5
.text:00404478                 add     edx, ebx
.text:0040447A                 mov     eax, [esp+17Ch+var_68]
.text:00404481                 rol     [esp+17Ch+var_68], 1Eh
.text:00404489                 add     edx, ecx
.text:0040448B                 lea     ebp, [edx+ebp+5A827999h]
.text:00404492                 mov     edx, [esp+17Ch+var_6C]
.text:00404499                 mov     ebx, ebp
.text:0040449B                 rol     ebx, 5
.text:0040449E                 mov     ecx, [esp+17Ch+var_6C]
.text:004044A5                 xor     edx, esi
.text:004044A7                 and     edx, eax
.text:004044A9                 xor     edx, esi
.text:004044AB                 mov     eax, [esp+17Ch+var_68]
.text:004044B2                 add     ebx, edx
.text:004044B4                 mov     edx, [esp+17Ch+var_58]
.text:004044BB                 xor     eax, ecx
.text:004044BD                 and     eax, ebp
.text:004044BF                 add     ebx, edx
.text:004044C1                 mov     ecx, [esp+17Ch+var_54]
.text:004044C8                 rol     ebp, 1Eh
.text:004044CB                 lea     edi, [ebx+edi+5A827999h]
.text:004044D2                 mov     ebx, [esp+17Ch+var_6C]
.text:004044D9                 mov     edx, edi
.text:004044DB                 rol     edx, 5
.text:004044DE                 xor     eax, ebx
.text:004044E0                 add     edx, eax
.text:004044E2                 mov     eax, [esp+17Ch+var_68]
.text:004044E9                 add     edx, ecx
.text:004044EB                 mov     ebx, [esp+17Ch+var_68]
.text:004044F2                 lea     esi, [edx+esi+5A827999h]
.text:004044F9                 xor     eax, ebp
.text:004044FB                 mov     edx, esi
.text:004044FD                 and     eax, edi
.text:004044FF                 rol     edx, 5
.text:00404502                 xor     eax, ebx
.text:00404504                 mov     ebx, [esp+17Ch+var_50]
.text:0040450B                 add     edx, eax
.text:0040450D                 rol     edi, 1Eh
.text:00404510                 mov     eax, [esp+17Ch+var_6C]
.text:00404517                 add     edx, ebx
.text:00404519                 lea     ebx, [edx+eax+5A827999h]
.text:00404520                 mov     [esp+17Ch+var_6C], ebx
.text:00404527                 mov     edx, ebx
.text:00404529                 mov     eax, [esp+17Ch+var_68]
.text:00404530                 mov     ebx, edi
.text:00404532                 rol     edx, 5
.text:00404535                 xor     ebx, ebp
.text:00404537                 and     ebx, esi
.text:00404539                 xor     ebx, ebp
.text:0040453B                 add     edx, ebx
.text:0040453D                 mov     ebx, [esp+17Ch+var_4C]
.text:00404544                 add     edx, ebx
.text:00404546                 lea     ebx, [edx+eax+5A827999h]
.text:0040454D                 mov     [esp+17Ch+var_68], ebx
.text:00404554                 rol     esi, 1Eh
.text:00404557                 mov     edx, ebx
.text:00404559                 mov     ebx, [esp+17Ch+var_6C]
.text:00404560                 mov     eax, esi
.text:00404562                 rol     edx, 5
.text:00404565                 rol     [esp+17Ch+var_6C], 1Eh
.text:0040456D                 xor     eax, edi
.text:0040456F                 and     eax, ebx
.text:00404571                 mov     ebx, [esp+17Ch+var_48]
.text:00404578                 xor     eax, edi
.text:0040457A                 add     edx, eax
.text:0040457C                 mov     eax, [esp+17Ch+var_6C]
.text:00404583                 add     edx, ebx
.text:00404585                 mov     ebx, [esp+17Ch+var_68]
.text:0040458C                 rol     [esp+17Ch+var_68], 1Eh
.text:00404594                 xor     eax, esi
.text:00404596                 lea     ebp, [edx+ebp+5A827999h]
.text:0040459D                 and     eax, ebx
.text:0040459F                 mov     edx, ebp
.text:004045A1                 mov     ebx, [esp+17Ch+var_44]
.text:004045A8                 xor     eax, esi
.text:004045AA                 rol     edx, 5
.text:004045AD                 add     edx, eax
.text:004045AF                 add     edx, ebx
.text:004045B1                 mov     eax, [esp+17Ch+var_68]
.text:004045B8                 mov     ebx, [esp+17Ch+var_6C]
.text:004045BF                 lea     edi, [edx+edi+5A827999h]
.text:004045C6                 mov     edx, edi
.text:004045C8                 xor     eax, ebx
.text:004045CA                 mov     ebx, [esp+17Ch+var_6C]
.text:004045D1                 and     eax, ebp
.text:004045D3                 rol     edx, 5
.text:004045D6                 rol     ebp, 1Eh
.text:004045D9                 xor     eax, ebx
.text:004045DB                 mov     ebx, [esp+17Ch+var_40]
.text:004045E2                 add     edx, eax
.text:004045E4                 mov     eax, [esp+17Ch+var_68]
.text:004045EB                 add     edx, ebx
.text:004045ED                 mov     ebx, [esp+17Ch+var_68]
.text:004045F4                 lea     esi, [edx+esi+5A827999h]
.text:004045FB                 xor     eax, ebp
.text:004045FD                 and     eax, edi
.text:004045FF                 mov     edx, esi
.text:00404601                 xor     eax, ebx
.text:00404603                 rol     edx, 5
.text:00404606                 mov     ebx, [esp+17Ch+var_3C]
.text:0040460D                 add     edx, eax
.text:0040460F                 mov     eax, [esp+17Ch+var_6C]
.text:00404616                 rol     edi, 1Eh
.text:00404619                 add     edx, ebx
.text:0040461B                 lea     ebx, [edx+eax+5A827999h]
.text:00404622                 mov     edx, ebx
.text:00404624                 rol     edx, 5
.text:00404627                 mov     [esp+17Ch+var_6C], ebx
.text:0040462E                 mov     ebx, edi
.text:00404630                 mov     eax, [esp+17Ch+var_68]
.text:00404637                 xor     ebx, ebp
.text:00404639                 and     ebx, esi
.text:0040463B                 xor     ebx, ebp
.text:0040463D                 add     edx, ebx
.text:0040463F                 rol     esi, 1Eh
.text:00404642                 mov     ebx, [esp+17Ch+var_38]
.text:00404649                 add     edx, ebx
.text:0040464B                 lea     ebx, [edx+eax+5A827999h]
.text:00404652                 mov     edx, ebx
.text:00404654                 mov     [esp+17Ch+var_68], ebx
.text:0040465B                 mov     eax, esi
.text:0040465D                 rol     edx, 5
.text:00404660                 mov     ebx, [esp+17Ch+var_6C]
.text:00404667                 xor     eax, edi
.text:00404669                 rol     [esp+17Ch+var_6C], 1Eh
.text:00404671                 and     eax, ebx
.text:00404673                 mov     ebx, [esp+17Ch+var_34]
.text:0040467A                 xor     eax, edi
.text:0040467C                 add     edx, eax
.text:0040467E                 mov     eax, [esp+17Ch+var_6C]
.text:00404685                 add     edx, ebx
.text:00404687                 mov     ebx, [esp+17Ch+var_68]
.text:0040468E                 lea     ebp, [edx+ebp+5A827999h]
.text:00404695                 rol     [esp+17Ch+var_68], 1Eh
.text:0040469D                 xor     eax, esi
.text:0040469F                 mov     edx, ebp
.text:004046A1                 and     eax, ebx
.text:004046A3                 rol     edx, 5
.text:004046A6                 mov     ebx, [esp+17Ch+var_30]
.text:004046AD                 xor     eax, esi
.text:004046AF                 add     edx, eax
.text:004046B1                 add     edx, ebx
.text:004046B3                 mov     eax, [esp+17Ch+var_68]
.text:004046BA                 lea     edi, [edx+edi+5A827999h]
.text:004046C1                 mov     ebx, [esp+17Ch+var_6C]
.text:004046C8                 mov     edx, edi
.text:004046CA                 rol     edx, 5
.text:004046CD                 xor     eax, ebx
.text:004046CF                 mov     ebx, [esp+17Ch+var_6C]
.text:004046D6                 and     eax, ebp
.text:004046D8                 rol     ebp, 1Eh
.text:004046DB                 xor     eax, ebx
.text:004046DD                 mov     ebx, [esp+17Ch+var_2C]
.text:004046E4                 add     edx, eax
.text:004046E6                 mov     eax, [esp+17Ch+var_68]
.text:004046ED                 add     edx, ebx
.text:004046EF                 mov     ebx, [esp+17Ch+var_68]
.text:004046F6                 lea     esi, [edx+esi+5A827999h]
.text:004046FD                 xor     eax, ebp
.text:004046FF                 and     eax, edi
.text:00404701                 mov     edx, esi
.text:00404703                 xor     eax, ebx
.text:00404705                 mov     ebx, [esp+17Ch+var_28]
.text:0040470C                 rol     edx, 5
.text:0040470F                 add     edx, eax
.text:00404711                 rol     edi, 1Eh
.text:00404714                 mov     eax, [esp+17Ch+var_6C]
.text:0040471B                 add     edx, ebx
.text:0040471D                 lea     eax, [edx+eax+5A827999h]
.text:00404724                 mov     [esp+17Ch+var_6C], eax
.text:0040472B                 mov     edx, eax
.text:0040472D                 mov     eax, edi
.text:0040472F                 rol     edx, 5
.text:00404732                 xor     eax, ebp
.text:00404734                 and     eax, esi
.text:00404736                 xor     eax, ebp
.text:00404738                 rol     esi, 1Eh
.text:0040473B                 add     edx, eax
.text:0040473D                 mov     eax, [esp+17Ch+var_24]
.text:00404744                 add     edx, eax
.text:00404746                 mov     eax, [esp+17Ch+var_68]
.text:0040474D                 lea     eax, [edx+eax+5A827999h]
.text:00404754                 mov     edx, eax
.text:00404756                 rol     edx, 5
.text:00404759                 mov     [esp+17Ch+var_68], eax
.text:00404760                 mov     eax, esi
.text:00404762                 xor     eax, edi
.text:00404764                 and     eax, [esp+17Ch+var_6C]
.text:0040476B                 rol     [esp+17Ch+var_6C], 1Eh
.text:00404773                 xor     eax, edi
.text:00404775                 add     edx, eax
.text:00404777                 mov     eax, [esp+17Ch+var_20]
.text:0040477E                 add     edx, eax
.text:00404780                 mov     eax, [esp+17Ch+var_6C]
.text:00404787                 lea     ebp, [edx+ebp+5A827999h]
.text:0040478E                 mov     edx, ebp
.text:00404790                 xor     eax, esi
.text:00404792                 and     eax, [esp+17Ch+var_68]
.text:00404799                 rol     edx, 5
.text:0040479C                 xor     eax, esi
.text:0040479E                 add     edx, eax
.text:004047A0                 mov     eax, [esp+17Ch+var_5C]
.text:004047A7                 xor     eax, ecx
.text:004047A9                 mov     [esp+17Ch+var_70], eax
.text:004047B0                 mov     eax, [esp+17Ch+var_3C]
.text:004047B7                 xor     [esp+17Ch+var_70], eax
.text:004047BE                 xor     [esp+17Ch+var_70], ebx
.text:004047C5                 rol     [esp+17Ch+var_68], 1Eh
.text:004047CD                 rol     [esp+17Ch+var_70], 1
.text:004047D4                 mov     eax, [esp+17Ch+var_70]
.text:004047DB                 add     edx, eax
.text:004047DD                 mov     eax, [esp+17Ch+var_68]
.text:004047E4                 lea     edi, [edx+edi+5A827999h]
.text:004047EB                 mov     edx, edi
.text:004047ED                 xor     eax, [esp+17Ch+var_6C]
.text:004047F4                 rol     edx, 5
.text:004047F7                 and     eax, ebp
.text:004047F9                 xor     eax, [esp+17Ch+var_6C]
.text:00404800                 add     edx, eax
.text:00404802                 mov     eax, [esp+17Ch+var_58]
.text:00404809                 xor     eax, [esp+17Ch+var_50]
.text:00404810                 mov     [esp+17Ch+var_74], eax
.text:00404817                 mov     eax, [esp+17Ch+var_38]
.text:0040481E                 xor     [esp+17Ch+var_74], eax
.text:00404825                 mov     eax, [esp+17Ch+var_24]
.text:0040482C                 xor     [esp+17Ch+var_74], eax
.text:00404833                 rol     [esp+17Ch+var_74], 1
.text:0040483A                 mov     eax, [esp+17Ch+var_74]
.text:00404841                 add     edx, eax
.text:00404843                 mov     eax, [esp+17Ch+var_68]
.text:0040484A                 rol     ebp, 1Eh
.text:0040484D                 lea     esi, [edx+esi+5A827999h]
.text:00404854                 mov     edx, esi
.text:00404856                 xor     eax, ebp
.text:00404858                 rol     edx, 5
.text:0040485B                 and     eax, edi
.text:0040485D                 rol     edi, 1Eh
.text:00404860                 xor     eax, [esp+17Ch+var_68]
.text:00404867                 add     edx, eax
.text:00404869                 mov     eax, [esp+17Ch+var_4C]
.text:00404870                 xor     ecx, eax
.text:00404872                 mov     eax, [esp+17Ch+var_34]
.text:00404879                 xor     ecx, eax
.text:0040487B                 mov     eax, [esp+17Ch+var_20]
.text:00404882                 xor     ecx, eax
.text:00404884                 rol     ecx, 1
.text:00404886                 mov     [esp+17Ch+var_78], ecx
.text:0040488D                 add     edx, ecx
.text:0040488F                 mov     ecx, [esp+17Ch+var_6C]
.text:00404896                 lea     eax, [edx+ecx+5A827999h]
.text:0040489D                 mov     ecx, edi
.text:0040489F                 mov     edx, eax
.text:004048A1                 mov     [esp+17Ch+var_6C], eax
.text:004048A8                 xor     ecx, ebp
.text:004048AA                 rol     edx, 5
.text:004048AD                 and     ecx, esi
.text:004048AF                 mov     eax, [esp+17Ch+var_48]
.text:004048B6                 xor     ecx, ebp
.text:004048B8                 add     edx, ecx
.text:004048BA                 rol     esi, 1Eh
.text:004048BD                 mov     ecx, [esp+17Ch+var_50]
.text:004048C4                 xor     ecx, eax
.text:004048C6                 mov     eax, [esp+17Ch+var_30]
.text:004048CD                 xor     ecx, eax
.text:004048CF                 mov     eax, [esp+17Ch+var_70]
.text:004048D6                 xor     ecx, eax
.text:004048D8                 mov     eax, [esp+17Ch+var_68]
.text:004048DF                 rol     ecx, 1
.text:004048E1                 add     edx, ecx
.text:004048E3                 lea     eax, [edx+eax+5A827999h]
.text:004048EA                 mov     [esp+17Ch+var_68], eax
.text:004048F1                 mov     edx, eax
.text:004048F3                 mov     eax, [esp+17Ch+var_6C]
.text:004048FA                 rol     edx, 5
.text:004048FD                 xor     eax, esi
.text:004048FF                 xor     eax, edi
.text:00404901                 add     edx, eax
.text:00404903                 mov     eax, [esp+17Ch+var_4C]
.text:0040490A                 xor     eax, [esp+17Ch+var_44]
.text:00404911                 mov     [esp+17Ch+var_7C], eax
.text:00404918                 mov     eax, [esp+17Ch+var_2C]
.text:0040491F                 xor     [esp+17Ch+var_7C], eax
.text:00404926                 mov     eax, [esp+17Ch+var_74]
.text:0040492D                 xor     [esp+17Ch+var_7C], eax
.text:00404934                 rol     [esp+17Ch+var_7C], 1
.text:0040493B                 mov     eax, [esp+17Ch+var_7C]
.text:00404942                 add     edx, eax
.text:00404944                 rol     [esp+17Ch+var_6C], 1Eh
.text:0040494C                 mov     eax, [esp+17Ch+var_68]
.text:00404953                 lea     ebp, [edx+ebp+6ED9EBA1h]
.text:0040495A                 rol     [esp+17Ch+var_68], 1Eh
.text:00404962                 mov     edx, ebp
.text:00404964                 rol     edx, 5
.text:00404967                 xor     eax, [esp+17Ch+var_6C]
.text:0040496E                 xor     eax, esi
.text:00404970                 add     edx, eax
.text:00404972                 mov     eax, [esp+17Ch+var_48]
.text:00404979                 xor     eax, [esp+17Ch+var_40]
.text:00404980                 xor     eax, ebx
.text:00404982                 mov     [esp+17Ch+var_80], eax
.text:00404989                 mov     eax, [esp+17Ch+var_78]
.text:00404990                 xor     [esp+17Ch+var_80], eax
.text:00404997                 rol     [esp+17Ch+var_80], 1
.text:0040499E                 mov     eax, [esp+17Ch+var_80]
.text:004049A5                 add     edx, eax
.text:004049A7                 mov     eax, [esp+17Ch+var_68]
.text:004049AE                 lea     edi, [edx+edi+6ED9EBA1h]
.text:004049B5                 mov     edx, edi
.text:004049B7                 rol     edx, 5
.text:004049BA                 xor     eax, ebp
.text:004049BC                 rol     ebp, 1Eh
.text:004049BF                 xor     eax, [esp+17Ch+var_6C]
.text:004049C6                 add     edx, eax
.text:004049C8                 mov     eax, [esp+17Ch+var_44]
.text:004049CF                 xor     eax, [esp+17Ch+var_3C]
.text:004049D6                 mov     [esp+17Ch+var_84], eax
.text:004049DD                 mov     eax, [esp+17Ch+var_24]
.text:004049E4                 xor     [esp+17Ch+var_84], eax
.text:004049EB                 xor     [esp+17Ch+var_84], ecx
.text:004049F2                 rol     [esp+17Ch+var_84], 1
.text:004049F9                 mov     eax, [esp+17Ch+var_84]
.text:00404A00                 add     edx, eax
.text:00404A02                 mov     eax, edi
.text:00404A04                 lea     esi, [edx+esi+6ED9EBA1h]
.text:00404A0B                 xor     eax, ebp
.text:00404A0D                 xor     eax, [esp+17Ch+var_68]
.text:00404A14                 mov     edx, esi
.text:00404A16                 rol     edx, 5
.text:00404A19                 rol     edi, 1Eh
.text:00404A1C                 add     edx, eax
.text:00404A1E                 mov     eax, [esp+17Ch+var_40]
.text:00404A25                 xor     eax, [esp+17Ch+var_38]
.text:00404A2C                 mov     [esp+17Ch+var_88], eax
.text:00404A33                 mov     eax, [esp+17Ch+var_20]
.text:00404A3A                 xor     [esp+17Ch+var_88], eax
.text:00404A41                 mov     eax, [esp+17Ch+var_7C]
.text:00404A48                 xor     [esp+17Ch+var_88], eax
.text:00404A4F                 rol     [esp+17Ch+var_88], 1
.text:00404A56                 mov     eax, [esp+17Ch+var_88]
.text:00404A5D                 add     edx, eax
.text:00404A5F                 mov     eax, [esp+17Ch+var_6C]
.text:00404A66                 lea     eax, [edx+eax+6ED9EBA1h]
.text:00404A6D                 mov     edx, eax
.text:00404A6F                 mov     [esp+17Ch+var_6C], eax
.text:00404A76                 rol     edx, 5
.text:00404A79                 mov     eax, esi
.text:00404A7B                 xor     eax, edi
.text:00404A7D                 xor     eax, ebp
.text:00404A7F                 add     edx, eax
.text:00404A81                 mov     eax, [esp+17Ch+var_3C]
.text:00404A88                 rol     esi, 1Eh
.text:00404A8B                 xor     eax, [esp+17Ch+var_34]
.text:00404A92                 mov     [esp+17Ch+var_8C], eax
.text:00404A99                 mov     eax, [esp+17Ch+var_70]
.text:00404AA0                 xor     [esp+17Ch+var_8C], eax
.text:00404AA7                 mov     eax, [esp+17Ch+var_80]
.text:00404AAE                 xor     [esp+17Ch+var_8C], eax
.text:00404AB5                 rol     [esp+17Ch+var_8C], 1
.text:00404ABC                 mov     eax, [esp+17Ch+var_8C]
.text:00404AC3                 add     edx, eax
.text:00404AC5                 mov     eax, [esp+17Ch+var_68]
.text:00404ACC                 lea     eax, [edx+eax+6ED9EBA1h]
.text:00404AD3                 mov     edx, eax
.text:00404AD5                 mov     [esp+17Ch+var_68], eax
.text:00404ADC                 rol     edx, 5
.text:00404ADF                 mov     eax, [esp+17Ch+var_6C]
.text:00404AE6                 rol     [esp+17Ch+var_6C], 1Eh
.text:00404AEE                 xor     eax, esi
.text:00404AF0                 xor     eax, edi
.text:00404AF2                 add     edx, eax
.text:00404AF4                 mov     eax, [esp+17Ch+var_38]
.text:00404AFB                 xor     eax, [esp+17Ch+var_30]
.text:00404B02                 mov     [esp+17Ch+var_90], eax
.text:00404B09                 mov     eax, [esp+17Ch+var_74]
.text:00404B10                 xor     [esp+17Ch+var_90], eax
.text:00404B17                 mov     eax, [esp+17Ch+var_84]
.text:00404B1E                 xor     [esp+17Ch+var_90], eax
.text:00404B25                 rol     [esp+17Ch+var_90], 1
.text:00404B2C                 mov     eax, [esp+17Ch+var_90]
.text:00404B33                 add     edx, eax
.text:00404B35                 mov     eax, [esp+17Ch+var_68]
.text:00404B3C                 lea     ebp, [edx+ebp+6ED9EBA1h]
.text:00404B43                 mov     edx, ebp
.text:00404B45                 xor     eax, [esp+17Ch+var_6C]
.text:00404B4C                 rol     edx, 5
.text:00404B4F                 rol     [esp+17Ch+var_68], 1Eh
.text:00404B57                 xor     eax, esi
.text:00404B59                 add     edx, eax
.text:00404B5B                 mov     eax, [esp+17Ch+var_34]
.text:00404B62                 xor     eax, [esp+17Ch+var_2C]
.text:00404B69                 mov     [esp+17Ch+var_94], eax
.text:00404B70                 mov     eax, [esp+17Ch+var_78]
.text:00404B77                 xor     [esp+17Ch+var_94], eax
.text:00404B7E                 mov     eax, [esp+17Ch+var_88]
.text:00404B85                 xor     [esp+17Ch+var_94], eax
.text:00404B8C                 rol     [esp+17Ch+var_94], 1
.text:00404B93                 mov     eax, [esp+17Ch+var_94]
.text:00404B9A                 add     edx, eax
.text:00404B9C                 mov     eax, [esp+17Ch+var_68]
.text:00404BA3                 lea     edi, [edx+edi+6ED9EBA1h]
.text:00404BAA                 mov     edx, edi
.text:00404BAC                 rol     edx, 5
.text:00404BAF                 xor     eax, ebp
.text:00404BB1                 xor     eax, [esp+17Ch+var_6C]
.text:00404BB8                 add     edx, eax
.text:00404BBA                 mov     eax, [esp+17Ch+var_30]
.text:00404BC1                 xor     eax, ebx
.text:00404BC3                 xor     eax, ecx
.text:00404BC5                 rol     ebp, 1Eh
.text:00404BC8                 mov     [esp+17Ch+var_98], eax
.text:00404BCF                 mov     eax, [esp+17Ch+var_8C]
.text:00404BD6                 xor     [esp+17Ch+var_98], eax
.text:00404BDD                 rol     [esp+17Ch+var_98], 1
.text:00404BE4                 mov     eax, [esp+17Ch+var_98]
.text:00404BEB                 add     edx, eax
.text:00404BED                 mov     eax, edi
.text:00404BEF                 lea     esi, [edx+esi+6ED9EBA1h]
.text:00404BF6                 xor     eax, ebp
.text:00404BF8                 xor     eax, [esp+17Ch+var_68]
.text:00404BFF                 mov     edx, esi
.text:00404C01                 rol     edx, 5
.text:00404C04                 rol     edi, 1Eh
.text:00404C07                 add     edx, eax
.text:00404C09                 mov     eax, [esp+17Ch+var_2C]
.text:00404C10                 xor     eax, [esp+17Ch+var_24]
.text:00404C17                 mov     [esp+17Ch+var_9C], eax
.text:00404C1E                 mov     eax, [esp+17Ch+var_7C]
.text:00404C25                 xor     [esp+17Ch+var_9C], eax
.text:00404C2C                 mov     eax, [esp+17Ch+var_90]
.text:00404C33                 xor     [esp+17Ch+var_9C], eax
.text:00404C3A                 rol     [esp+17Ch+var_9C], 1
.text:00404C41                 mov     eax, [esp+17Ch+var_9C]
.text:00404C48                 add     edx, eax
.text:00404C4A                 mov     eax, [esp+17Ch+var_6C]
.text:00404C51                 lea     eax, [edx+eax+6ED9EBA1h]
.text:00404C58                 mov     edx, eax
.text:00404C5A                 mov     [esp+17Ch+var_6C], eax
.text:00404C61                 rol     edx, 5
.text:00404C64                 mov     eax, esi
.text:00404C66                 xor     eax, edi
.text:00404C68                 rol     esi, 1Eh
.text:00404C6B                 xor     eax, ebp
.text:00404C6D                 add     edx, eax
.text:00404C6F                 mov     eax, [esp+17Ch+var_20]
.text:00404C76                 xor     ebx, eax
.text:00404C78                 mov     eax, [esp+17Ch+var_80]
.text:00404C7F                 xor     ebx, eax
.text:00404C81                 mov     eax, [esp+17Ch+var_94]
.text:00404C88                 xor     ebx, eax
.text:00404C8A                 mov     eax, [esp+17Ch+var_68]
.text:00404C91                 rol     ebx, 1
.text:00404C93                 add     edx, ebx
.text:00404C95                 lea     eax, [edx+eax+6ED9EBA1h]
.text:00404C9C                 mov     edx, eax
.text:00404C9E                 mov     [esp+17Ch+var_68], eax
.text:00404CA5                 rol     edx, 5
.text:00404CA8                 mov     eax, [esp+17Ch+var_6C]
.text:00404CAF                 xor     eax, esi
.text:00404CB1                 xor     eax, edi
.text:00404CB3                 add     edx, eax
.text:00404CB5                 mov     eax, [esp+17Ch+var_24]
.text:00404CBC                 xor     eax, [esp+17Ch+var_70]
.text:00404CC3                 mov     [esp+17Ch+var_A0], eax
.text:00404CCA                 mov     eax, [esp+17Ch+var_84]
.text:00404CD1                 xor     [esp+17Ch+var_A0], eax
.text:00404CD8                 mov     eax, [esp+17Ch+var_98]
.text:00404CDF                 xor     [esp+17Ch+var_A0], eax
.text:00404CE6                 rol     [esp+17Ch+var_A0], 1
.text:00404CED                 mov     eax, [esp+17Ch+var_A0]
.text:00404CF4                 add     edx, eax
.text:00404CF6                 rol     [esp+17Ch+var_6C], 1Eh
.text:00404CFE                 mov     eax, [esp+17Ch+var_68]
.text:00404D05                 lea     ebp, [edx+ebp+6ED9EBA1h]
.text:00404D0C                 rol     [esp+17Ch+var_68], 1Eh
.text:00404D14                 mov     edx, ebp
.text:00404D16                 rol     edx, 5
.text:00404D19                 xor     eax, [esp+17Ch+var_6C]
.text:00404D20                 xor     eax, esi
.text:00404D22                 add     edx, eax
.text:00404D24                 mov     eax, [esp+17Ch+var_20]
.text:00404D2B                 xor     eax, [esp+17Ch+var_74]
.text:00404D32                 mov     [esp+17Ch+var_A4], eax
.text:00404D39                 mov     eax, [esp+17Ch+var_88]
.text:00404D40                 xor     [esp+17Ch+var_A4], eax
.text:00404D47                 mov     eax, [esp+17Ch+var_9C]
.text:00404D4E                 xor     [esp+17Ch+var_A4], eax
.text:00404D55                 rol     [esp+17Ch+var_A4], 1
.text:00404D5C                 mov     eax, [esp+17Ch+var_A4]
.text:00404D63                 add     edx, eax
.text:00404D65                 mov     eax, [esp+17Ch+var_68]
.text:00404D6C                 lea     edi, [edx+edi+6ED9EBA1h]
.text:00404D73                 mov     edx, edi
.text:00404D75                 rol     edx, 5
.text:00404D78                 xor     eax, ebp
.text:00404D7A                 rol     ebp, 1Eh
.text:00404D7D                 xor     eax, [esp+17Ch+var_6C]
.text:00404D84                 add     edx, eax
.text:00404D86                 mov     eax, [esp+17Ch+var_70]
.text:00404D8D                 xor     eax, [esp+17Ch+var_78]
.text:00404D94                 mov     [esp+17Ch+var_A8], eax
.text:00404D9B                 mov     eax, [esp+17Ch+var_8C]
.text:00404DA2                 xor     [esp+17Ch+var_A8], eax
.text:00404DA9                 xor     [esp+17Ch+var_A8], ebx
.text:00404DB0                 rol     [esp+17Ch+var_A8], 1
.text:00404DB7                 mov     eax, [esp+17Ch+var_A8]
.text:00404DBE                 add     edx, eax
.text:00404DC0                 mov     eax, edi
.text:00404DC2                 lea     esi, [edx+esi+6ED9EBA1h]
.text:00404DC9                 xor     eax, ebp
.text:00404DCB                 xor     eax, [esp+17Ch+var_68]
.text:00404DD2                 mov     edx, esi
.text:00404DD4                 rol     edx, 5
.text:00404DD7                 rol     edi, 1Eh
.text:00404DDA                 add     edx, eax
.text:00404DDC                 mov     eax, [esp+17Ch+var_74]
.text:00404DE3                 xor     eax, ecx
.text:00404DE5                 mov     [esp+17Ch+var_AC], eax
.text:00404DEC                 mov     eax, [esp+17Ch+var_90]
.text:00404DF3                 xor     [esp+17Ch+var_AC], eax
.text:00404DFA                 mov     eax, [esp+17Ch+var_A0]
.text:00404E01                 xor     [esp+17Ch+var_AC], eax
.text:00404E08                 rol     [esp+17Ch+var_AC], 1
.text:00404E0F                 mov     eax, [esp+17Ch+var_AC]
.text:00404E16                 add     edx, eax
.text:00404E18                 mov     eax, [esp+17Ch+var_6C]
.text:00404E1F                 lea     eax, [edx+eax+6ED9EBA1h]
.text:00404E26                 mov     edx, eax
.text:00404E28                 mov     [esp+17Ch+var_6C], eax
.text:00404E2F                 rol     edx, 5
.text:00404E32                 mov     eax, esi
.text:00404E34                 xor     eax, edi
.text:00404E36                 xor     eax, ebp
.text:00404E38                 rol     esi, 1Eh
.text:00404E3B                 add     edx, eax
.text:00404E3D                 mov     eax, [esp+17Ch+var_78]
.text:00404E44                 xor     eax, [esp+17Ch+var_7C]
.text:00404E4B                 mov     [esp+17Ch+var_B0], eax
.text:00404E52                 mov     eax, [esp+17Ch+var_94]
.text:00404E59                 xor     [esp+17Ch+var_B0], eax
.text:00404E60                 mov     eax, [esp+17Ch+var_A4]
.text:00404E67                 xor     [esp+17Ch+var_B0], eax
.text:00404E6E                 rol     [esp+17Ch+var_B0], 1
.text:00404E75                 mov     eax, [esp+17Ch+var_B0]
.text:00404E7C                 add     edx, eax
.text:00404E7E                 mov     eax, [esp+17Ch+var_68]
.text:00404E85                 lea     eax, [edx+eax+6ED9EBA1h]
.text:00404E8C                 mov     edx, eax
.text:00404E8E                 mov     [esp+17Ch+var_68], eax
.text:00404E95                 rol     edx, 5
.text:00404E98                 mov     eax, [esp+17Ch+var_6C]
.text:00404E9F                 rol     [esp+17Ch+var_6C], 1Eh
.text:00404EA7                 xor     eax, esi
.text:00404EA9                 xor     eax, edi
.text:00404EAB                 add     edx, eax
.text:00404EAD                 mov     eax, [esp+17Ch+var_80]
.text:00404EB4                 xor     ecx, eax
.text:00404EB6                 mov     eax, [esp+17Ch+var_98]
.text:00404EBD                 xor     ecx, eax
.text:00404EBF                 mov     eax, [esp+17Ch+var_A8]
.text:00404EC6                 xor     ecx, eax
.text:00404EC8                 rol     ecx, 1
.text:00404ECA                 mov     eax, [esp+17Ch+var_68]
.text:00404ED1                 mov     [esp+17Ch+var_B4], ecx
.text:00404ED8                 add     edx, ecx
.text:00404EDA                 mov     ecx, [esp+17Ch+var_6C]
.text:00404EE1                 lea     ebp, [edx+ebp+6ED9EBA1h]
.text:00404EE8                 mov     edx, ebp
.text:00404EEA                 xor     eax, ecx
.text:00404EEC                 xor     eax, esi
.text:00404EEE                 rol     edx, 5
.text:00404EF1                 mov     ecx, [esp+17Ch+var_7C]
.text:00404EF8                 add     edx, eax
.text:00404EFA                 mov     eax, [esp+17Ch+var_84]
.text:00404F01                 xor     ecx, eax
.text:00404F03                 mov     eax, [esp+17Ch+var_9C]
.text:00404F0A                 xor     ecx, eax
.text:00404F0C                 mov     eax, [esp+17Ch+var_AC]
.text:00404F13                 xor     ecx, eax
.text:00404F15                 rol     ecx, 1
.text:00404F17                 add     edx, ecx
.text:00404F19                 mov     [esp+17Ch+var_B8], ecx
.text:00404F20                 lea     edi, [edx+edi+6ED9EBA1h]
.text:00404F27                 mov     ecx, [esp+17Ch+var_6C]
.text:00404F2E                 rol     [esp+17Ch+var_68], 1Eh
.text:00404F36                 mov     edx, edi
.text:00404F38                 rol     edx, 5
.text:00404F3B                 mov     eax, [esp+17Ch+var_68]
.text:00404F42                 xor     eax, ebp
.text:00404F44                 xor     eax, ecx
.text:00404F46                 add     edx, eax
.text:00404F48                 mov     ecx, [esp+17Ch+var_80]
.text:00404F4F                 mov     eax, [esp+17Ch+var_88]
.text:00404F56                 xor     ecx, eax
.text:00404F58                 mov     eax, [esp+17Ch+var_B0]
.text:00404F5F                 xor     ecx, ebx
.text:00404F61                 rol     ebp, 1Eh
.text:00404F64                 xor     ecx, eax
.text:00404F66                 rol     ecx, 1
.text:00404F68                 mov     [esp+17Ch+var_BC], ecx
.text:00404F6F                 add     edx, ecx
.text:00404F71                 mov     eax, edi
.text:00404F73                 mov     ecx, [esp+17Ch+var_68]
.text:00404F7A                 lea     esi, [edx+esi+6ED9EBA1h]
.text:00404F81                 xor     eax, ebp
.text:00404F83                 mov     edx, esi
.text:00404F85                 rol     edi, 1Eh
.text:00404F88                 rol     edx, 5
.text:00404F8B                 xor     eax, ecx
.text:00404F8D                 add     edx, eax
.text:00404F8F                 mov     ecx, [esp+17Ch+var_84]
.text:00404F96                 mov     eax, [esp+17Ch+var_8C]
.text:00404F9D                 xor     ecx, eax
.text:00404F9F                 mov     eax, [esp+17Ch+var_A0]
.text:00404FA6                 xor     ecx, eax
.text:00404FA8                 mov     eax, [esp+17Ch+var_B4]
.text:00404FAF                 xor     ecx, eax
.text:00404FB1                 rol     ecx, 1
.text:00404FB3                 add     edx, ecx
.text:00404FB5                 mov     [esp+17Ch+var_C0], ecx
.text:00404FBC                 mov     ecx, [esp+17Ch+var_6C]
.text:00404FC3                 lea     eax, [edx+ecx+6ED9EBA1h]
.text:00404FCA                 mov     [esp+17Ch+var_6C], eax
.text:00404FD1                 mov     ecx, esi
.text:00404FD3                 mov     edx, eax
.text:00404FD5                 xor     ecx, edi
.text:00404FD7                 rol     edx, 5
.text:00404FDA                 mov     eax, [esp+17Ch+var_88]
.text:00404FE1                 xor     ecx, ebp
.text:00404FE3                 rol     esi, 1Eh
.text:00404FE6                 add     edx, ecx
.text:00404FE8                 mov     ecx, [esp+17Ch+var_90]
.text:00404FEF                 xor     eax, ecx
.text:00404FF1                 mov     ecx, [esp+17Ch+var_A4]
.text:00404FF8                 xor     eax, ecx
.text:00404FFA                 mov     ecx, [esp+17Ch+var_B8]
.text:00405001                 xor     eax, ecx
.text:00405003                 mov     ecx, [esp+17Ch+var_68]
.text:0040500A                 rol     eax, 1
.text:0040500C                 add     edx, eax
.text:0040500E                 mov     [esp+17Ch+var_C4], eax
.text:00405015                 lea     eax, [edx+ecx+6ED9EBA1h]
.text:0040501C                 mov     ecx, eax
.text:0040501E                 mov     [esp+17Ch+var_68], eax
.text:00405025                 mov     edx, [esp+17Ch+var_6C]
.text:0040502C                 rol     ecx, 5
.text:0040502F                 mov     eax, [esp+17Ch+var_6C]
.text:00405036                 and     edx, esi
.text:00405038                 or      eax, esi
.text:0040503A                 and     eax, edi
.text:0040503C                 or      edx, eax
.text:0040503E                 add     ecx, edx
.text:00405040                 mov     eax, [esp+17Ch+var_94]
.text:00405047                 mov     edx, [esp+17Ch+var_8C]
.text:0040504E                 xor     edx, eax
.text:00405050                 mov     eax, [esp+17Ch+var_A8]
.text:00405057                 xor     edx, eax
.text:00405059                 mov     eax, [esp+17Ch+var_BC]
.text:00405060                 rol     [esp+17Ch+var_6C], 1Eh
.text:00405068                 xor     edx, eax
.text:0040506A                 rol     edx, 1
.text:0040506C                 mov     [esp+17Ch+var_C8], edx
.text:00405073                 add     ecx, edx
.text:00405075                 mov     eax, [esp+17Ch+var_6C]
.text:0040507C                 mov     edx, [esp+17Ch+var_68]
.text:00405083                 lea     ebp, [ecx+ebp-70E44324h]
.text:0040508A                 mov     ecx, ebp
.text:0040508C                 rol     ecx, 5
.text:0040508F                 and     edx, eax
.text:00405091                 mov     eax, [esp+17Ch+var_68]
.text:00405098                 or      eax, [esp+17Ch+var_6C]
.text:0040509F                 and     eax, esi
.text:004050A1                 or      edx, eax
.text:004050A3                 add     ecx, edx
.text:004050A5                 mov     eax, [esp+17Ch+var_98]
.text:004050AC                 mov     edx, [esp+17Ch+var_90]
.text:004050B3                 xor     edx, eax
.text:004050B5                 mov     eax, [esp+17Ch+var_AC]
.text:004050BC                 xor     edx, eax
.text:004050BE                 mov     eax, [esp+17Ch+var_C0]
.text:004050C5                 xor     edx, eax
.text:004050C7                 rol     edx, 1
.text:004050C9                 mov     [esp+17Ch+var_CC], edx
.text:004050D0                 add     ecx, edx
.text:004050D2                 lea     edi, [ecx+edi-70E44324h]
.text:004050D9                 rol     [esp+17Ch+var_68], 1Eh
.text:004050E1                 mov     ecx, edi
.text:004050E3                 rol     ecx, 5
.text:004050E6                 mov     eax, [esp+17Ch+var_68]
.text:004050ED                 mov     edx, [esp+17Ch+var_68]
.text:004050F4                 or      eax, ebp
.text:004050F6                 and     eax, [esp+17Ch+var_6C]
.text:004050FD                 and     edx, ebp
.text:004050FF                 rol     ebp, 1Eh
.text:00405102                 or      edx, eax
.text:00405104                 add     ecx, edx
.text:00405106                 mov     eax, [esp+17Ch+var_9C]
.text:0040510D                 mov     edx, [esp+17Ch+var_94]
.text:00405114                 xor     edx, eax
.text:00405116                 mov     eax, [esp+17Ch+var_B0]
.text:0040511D                 xor     edx, eax
.text:0040511F                 mov     eax, [esp+17Ch+var_C4]
.text:00405126                 xor     edx, eax
.text:00405128                 mov     eax, edi
.text:0040512A                 rol     edx, 1
.text:0040512C                 or      eax, ebp
.text:0040512E                 and     eax, [esp+17Ch+var_68]
.text:00405135                 add     ecx, edx
.text:00405137                 lea     esi, [ecx+esi-70E44324h]
.text:0040513E                 mov     [esp+17Ch+var_D0], edx
.text:00405145                 mov     ecx, esi
.text:00405147                 mov     edx, edi
.text:00405149                 and     edx, ebp
.text:0040514B                 rol     ecx, 5
.text:0040514E                 or      edx, eax
.text:00405150                 add     ecx, edx
.text:00405152                 mov     eax, [esp+17Ch+var_B4]
.text:00405159                 rol     edi, 1Eh
.text:0040515C                 mov     edx, [esp+17Ch+var_98]
.text:00405163                 xor     edx, ebx
.text:00405165                 xor     edx, eax
.text:00405167                 mov     eax, [esp+17Ch+var_C8]
.text:0040516E                 xor     edx, eax
.text:00405170                 rol     edx, 1
.text:00405172                 mov     [esp+17Ch+var_D4], edx
.text:00405179                 add     ecx, edx
.text:0040517B                 mov     edx, [esp+17Ch+var_6C]
.text:00405182                 lea     eax, [ecx+edx-70E44324h]
.text:00405189                 mov     ecx, eax
.text:0040518B                 mov     edx, esi
.text:0040518D                 mov     [esp+17Ch+var_6C], eax
.text:00405194                 and     edx, edi
.text:00405196                 rol     ecx, 5
.text:00405199                 mov     eax, esi
.text:0040519B                 or      eax, edi
.text:0040519D                 rol     esi, 1Eh
.text:004051A0                 and     eax, ebp
.text:004051A2                 or      edx, eax
.text:004051A4                 add     ecx, edx
.text:004051A6                 mov     eax, [esp+17Ch+var_9C]
.text:004051AD                 mov     edx, [esp+17Ch+var_A0]
.text:004051B4                 xor     eax, edx
.text:004051B6                 mov     edx, [esp+17Ch+var_B8]
.text:004051BD                 xor     eax, edx
.text:004051BF                 mov     edx, [esp+17Ch+var_CC]
.text:004051C6                 xor     eax, edx
.text:004051C8                 rol     eax, 1
.text:004051CA                 add     ecx, eax
.text:004051CC                 mov     [esp+17Ch+var_D8], eax
.text:004051D3                 mov     eax, [esp+17Ch+var_68]
.text:004051DA                 lea     edx, [ecx+eax-70E44324h]
.text:004051E1                 mov     [esp+17Ch+var_68], edx
.text:004051E8                 mov     eax, [esp+17Ch+var_6C]
.text:004051EF                 mov     ecx, edx
.text:004051F1                 mov     edx, [esp+17Ch+var_6C]
.text:004051F8                 rol     ecx, 5
.text:004051FB                 rol     [esp+17Ch+var_6C], 1Eh
.text:00405203                 or      eax, esi
.text:00405205                 and     eax, edi
.text:00405207                 and     edx, esi
.text:00405209                 or      edx, eax
.text:0040520B                 add     ecx, edx
.text:0040520D                 mov     edx, [esp+17Ch+var_A4]
.text:00405214                 mov     eax, [esp+17Ch+var_D0]
.text:0040521B                 xor     ebx, edx
.text:0040521D                 mov     edx, [esp+17Ch+var_BC]
.text:00405224                 xor     ebx, edx
.text:00405226                 xor     ebx, eax
.text:00405228                 rol     ebx, 1
.text:0040522A                 mov     edx, [esp+17Ch+var_68]
.text:00405231                 add     ecx, ebx
.text:00405233                 mov     eax, [esp+17Ch+var_6C]
.text:0040523A                 lea     ebp, [ecx+ebp-70E44324h]
.text:00405241                 mov     ecx, ebp
.text:00405243                 rol     ecx, 5
.text:00405246                 and     edx, eax
.text:00405248                 mov     eax, [esp+17Ch+var_68]
.text:0040524F                 or      eax, [esp+17Ch+var_6C]
.text:00405256                 and     eax, esi
.text:00405258                 or      edx, eax
.text:0040525A                 add     ecx, edx
.text:0040525C                 mov     eax, [esp+17Ch+var_A8]
.text:00405263                 mov     edx, [esp+17Ch+var_A0]
.text:0040526A                 xor     edx, eax
.text:0040526C                 mov     eax, [esp+17Ch+var_C0]
.text:00405273                 xor     edx, eax
.text:00405275                 mov     eax, [esp+17Ch+var_D4]
.text:0040527C                 xor     edx, eax
.text:0040527E                 rol     edx, 1
.text:00405280                 mov     [esp+17Ch+var_DC], edx
.text:00405287                 add     ecx, edx
.text:00405289                 lea     edi, [ecx+edi-70E44324h]
.text:00405290                 rol     [esp+17Ch+var_68], 1Eh
.text:00405298                 mov     ecx, edi
.text:0040529A                 rol     ecx, 5
.text:0040529D                 mov     eax, [esp+17Ch+var_68]
.text:004052A4                 mov     edx, [esp+17Ch+var_68]
.text:004052AB                 or      eax, ebp
.text:004052AD                 and     eax, [esp+17Ch+var_6C]
.text:004052B4                 and     edx, ebp
.text:004052B6                 rol     ebp, 1Eh
.text:004052B9                 or      edx, eax
.text:004052BB                 add     ecx, edx
.text:004052BD                 mov     eax, [esp+17Ch+var_AC]
.text:004052C4                 mov     edx, [esp+17Ch+var_A4]
.text:004052CB                 xor     edx, eax
.text:004052CD                 mov     eax, [esp+17Ch+var_C4]
.text:004052D4                 xor     edx, eax
.text:004052D6                 mov     eax, [esp+17Ch+var_D8]
.text:004052DD                 xor     edx, eax
.text:004052DF                 mov     eax, edi
.text:004052E1                 rol     edx, 1
.text:004052E3                 or      eax, ebp
.text:004052E5                 and     eax, [esp+17Ch+var_68]
.text:004052EC                 add     ecx, edx
.text:004052EE                 lea     esi, [ecx+esi-70E44324h]
.text:004052F5                 mov     [esp+17Ch+var_E0], edx
.text:004052FC                 mov     ecx, esi
.text:004052FE                 mov     edx, edi
.text:00405300                 and     edx, ebp
.text:00405302                 rol     ecx, 5
.text:00405305                 or      edx, eax
.text:00405307                 add     ecx, edx
.text:00405309                 mov     eax, [esp+17Ch+var_B0]
.text:00405310                 mov     edx, [esp+17Ch+var_A8]
.text:00405317                 xor     edx, eax
.text:00405319                 mov     eax, [esp+17Ch+var_C8]
.text:00405320                 xor     edx, eax
.text:00405322                 xor     edx, ebx
.text:00405324                 rol     edx, 1
.text:00405326                 add     ecx, edx
.text:00405328                 mov     [esp+17Ch+var_E4], edx
.text:0040532F                 rol     edi, 1Eh
.text:00405332                 mov     edx, [esp+17Ch+var_6C]
.text:00405339                 lea     eax, [ecx+edx-70E44324h]
.text:00405340                 mov     ecx, eax
.text:00405342                 mov     edx, esi
.text:00405344                 mov     [esp+17Ch+var_6C], eax
.text:0040534B                 and     edx, edi
.text:0040534D                 rol     ecx, 5
.text:00405350                 mov     eax, esi
.text:00405352                 or      eax, edi
.text:00405354                 rol     esi, 1Eh
.text:00405357                 and     eax, ebp
.text:00405359                 or      edx, eax
.text:0040535B                 add     ecx, edx
.text:0040535D                 mov     eax, [esp+17Ch+var_AC]
.text:00405364                 mov     edx, [esp+17Ch+var_B4]
.text:0040536B                 xor     eax, edx
.text:0040536D                 mov     edx, [esp+17Ch+var_CC]
.text:00405374                 xor     eax, edx
.text:00405376                 mov     edx, [esp+17Ch+var_DC]
.text:0040537D                 xor     eax, edx
.text:0040537F                 rol     eax, 1
.text:00405381                 add     ecx, eax
.text:00405383                 mov     [esp+17Ch+var_E8], eax
.text:0040538A                 mov     eax, [esp+17Ch+var_68]
.text:00405391                 lea     edx, [ecx+eax-70E44324h]
.text:00405398                 mov     [esp+17Ch+var_68], edx
.text:0040539F                 mov     eax, [esp+17Ch+var_6C]
.text:004053A6                 mov     ecx, edx
.text:004053A8                 mov     edx, [esp+17Ch+var_6C]
.text:004053AF                 rol     ecx, 5
.text:004053B2                 rol     [esp+17Ch+var_6C], 1Eh
.text:004053BA                 or      eax, esi
.text:004053BC                 and     eax, edi
.text:004053BE                 and     edx, esi
.text:004053C0                 or      edx, eax
.text:004053C2                 add     ecx, edx
.text:004053C4                 mov     eax, [esp+17Ch+var_B8]
.text:004053CB                 mov     edx, [esp+17Ch+var_B0]
.text:004053D2                 xor     edx, eax
.text:004053D4                 mov     eax, [esp+17Ch+var_D0]
.text:004053DB                 xor     edx, eax
.text:004053DD                 mov     eax, [esp+17Ch+var_E0]
.text:004053E4                 xor     edx, eax
.text:004053E6                 rol     edx, 1
.text:004053E8                 mov     eax, [esp+17Ch+var_6C]
.text:004053EF                 mov     [esp+17Ch+var_EC], edx
.text:004053F6                 add     ecx, edx
.text:004053F8                 mov     edx, [esp+17Ch+var_68]
.text:004053FF                 lea     ebp, [ecx+ebp-70E44324h]
.text:00405406                 mov     ecx, ebp
.text:00405408                 and     edx, eax
.text:0040540A                 mov     eax, [esp+17Ch+var_68]
.text:00405411                 rol     ecx, 5
.text:00405414                 or      eax, [esp+17Ch+var_6C]
.text:0040541B                 and     eax, esi
.text:0040541D                 or      edx, eax
.text:0040541F                 add     ecx, edx
.text:00405421                 mov     eax, [esp+17Ch+var_BC]
.text:00405428                 mov     edx, [esp+17Ch+var_B4]
.text:0040542F                 xor     edx, eax
.text:00405431                 mov     eax, [esp+17Ch+var_D4]
.text:00405438                 xor     edx, eax
.text:0040543A                 mov     eax, [esp+17Ch+var_E4]
.text:00405441                 xor     edx, eax
.text:00405443                 rol     edx, 1
.text:00405445                 mov     [esp+17Ch+var_F0], edx
.text:0040544C                 add     ecx, edx
.text:0040544E                 lea     edi, [ecx+edi-70E44324h]
.text:00405455                 rol     [esp+17Ch+var_68], 1Eh
.text:0040545D                 mov     ecx, edi
.text:0040545F                 rol     ecx, 5
.text:00405462                 mov     eax, [esp+17Ch+var_68]
.text:00405469                 mov     edx, [esp+17Ch+var_68]
.text:00405470                 or      eax, ebp
.text:00405472                 and     eax, [esp+17Ch+var_6C]
.text:00405479                 and     edx, ebp
.text:0040547B                 rol     ebp, 1Eh
.text:0040547E                 or      edx, eax
.text:00405480                 add     ecx, edx
.text:00405482                 mov     eax, [esp+17Ch+var_C0]
.text:00405489                 mov     edx, [esp+17Ch+var_B8]
.text:00405490                 xor     edx, eax
.text:00405492                 mov     eax, [esp+17Ch+var_D8]
.text:00405499                 xor     edx, eax
.text:0040549B                 mov     eax, [esp+17Ch+var_E8]
.text:004054A2                 xor     edx, eax
.text:004054A4                 mov     eax, edi
.text:004054A6                 rol     edx, 1
.text:004054A8                 or      eax, ebp
.text:004054AA                 and     eax, [esp+17Ch+var_68]
.text:004054B1                 add     ecx, edx
.text:004054B3                 lea     esi, [ecx+esi-70E44324h]
.text:004054BA                 mov     [esp+17Ch+var_F4], edx
.text:004054C1                 mov     ecx, esi
.text:004054C3                 mov     edx, edi
.text:004054C5                 and     edx, ebp
.text:004054C7                 rol     ecx, 5
.text:004054CA                 or      edx, eax
.text:004054CC                 add     ecx, edx
.text:004054CE                 mov     eax, [esp+17Ch+var_C4]
.text:004054D5                 rol     edi, 1Eh
.text:004054D8                 mov     edx, [esp+17Ch+var_BC]
.text:004054DF                 xor     edx, eax
.text:004054E1                 mov     eax, [esp+17Ch+var_EC]
.text:004054E8                 xor     edx, ebx
.text:004054EA                 xor     edx, eax
.text:004054EC                 rol     edx, 1
.text:004054EE                 mov     [esp+17Ch+var_F8], edx
.text:004054F5                 add     ecx, edx
.text:004054F7                 mov     edx, [esp+17Ch+var_6C]
.text:004054FE                 lea     eax, [ecx+edx-70E44324h]
.text:00405505                 mov     ecx, eax
.text:00405507                 mov     edx, esi
.text:00405509                 mov     [esp+17Ch+var_6C], eax
.text:00405510                 and     edx, edi
.text:00405512                 rol     ecx, 5
.text:00405515                 mov     eax, esi
.text:00405517                 or      eax, edi
.text:00405519                 and     eax, ebp
.text:0040551B                 or      edx, eax
.text:0040551D                 add     ecx, edx
.text:0040551F                 mov     eax, [esp+17Ch+var_C0]
.text:00405526                 mov     edx, [esp+17Ch+var_C8]
.text:0040552D                 rol     esi, 1Eh
.text:00405530                 xor     eax, edx
.text:00405532                 mov     edx, [esp+17Ch+var_DC]
.text:00405539                 xor     eax, edx
.text:0040553B                 mov     edx, [esp+17Ch+var_F0]
.text:00405542                 xor     eax, edx
.text:00405544                 rol     eax, 1
.text:00405546                 add     ecx, eax
.text:00405548                 mov     [esp+17Ch+var_FC], eax
.text:0040554F                 mov     eax, [esp+17Ch+var_68]
.text:00405556                 lea     edx, [ecx+eax-70E44324h]
.text:0040555D                 mov     [esp+17Ch+var_68], edx
.text:00405564                 mov     eax, [esp+17Ch+var_6C]
.text:0040556B                 mov     ecx, edx
.text:0040556D                 mov     edx, [esp+17Ch+var_6C]
.text:00405574                 rol     ecx, 5
.text:00405577                 rol     [esp+17Ch+var_6C], 1Eh
.text:0040557F                 or      eax, esi
.text:00405581                 and     eax, edi
.text:00405583                 and     edx, esi
.text:00405585                 or      edx, eax
.text:00405587                 add     ecx, edx
.text:00405589                 mov     eax, [esp+17Ch+var_CC]
.text:00405590                 mov     edx, [esp+17Ch+var_C4]
.text:00405597                 xor     edx, eax
.text:00405599                 mov     eax, [esp+17Ch+var_E0]
.text:004055A0                 xor     edx, eax
.text:004055A2                 mov     eax, [esp+17Ch+var_F4]
.text:004055A9                 xor     edx, eax
.text:004055AB                 rol     edx, 1
.text:004055AD                 mov     eax, [esp+17Ch+var_6C]
.text:004055B4                 mov     [esp+17Ch+var_100], edx
.text:004055B8                 add     ecx, edx
.text:004055BA                 mov     edx, [esp+17Ch+var_68]
.text:004055C1                 lea     ebp, [ecx+ebp-70E44324h]
.text:004055C8                 mov     ecx, ebp
.text:004055CA                 and     edx, eax
.text:004055CC                 mov     eax, [esp+17Ch+var_68]
.text:004055D3                 rol     ecx, 5
.text:004055D6                 or      eax, [esp+17Ch+var_6C]
.text:004055DD                 and     eax, esi
.text:004055DF                 or      edx, eax
.text:004055E1                 add     ecx, edx
.text:004055E3                 mov     eax, [esp+17Ch+var_D0]
.text:004055EA                 mov     edx, [esp+17Ch+var_C8]
.text:004055F1                 xor     edx, eax
.text:004055F3                 mov     eax, [esp+17Ch+var_E4]
.text:004055FA                 xor     edx, eax
.text:004055FC                 mov     eax, [esp+17Ch+var_F8]
.text:00405603                 xor     edx, eax
.text:00405605                 rol     edx, 1
.text:00405607                 mov     [esp+17Ch+var_104], edx
.text:0040560B                 add     ecx, edx
.text:0040560D                 lea     edi, [ecx+edi-70E44324h]
.text:00405614                 rol     [esp+17Ch+var_68], 1Eh
.text:0040561C                 mov     ecx, edi
.text:0040561E                 rol     ecx, 5
.text:00405621                 mov     edx, [esp+17Ch+var_68]
.text:00405628                 mov     eax, [esp+17Ch+var_68]
.text:0040562F                 and     edx, ebp
.text:00405631                 or      eax, ebp
.text:00405633                 rol     ebp, 1Eh
.text:00405636                 and     eax, [esp+17Ch+var_6C]
.text:0040563D                 or      edx, eax
.text:0040563F                 add     ecx, edx
.text:00405641                 mov     eax, [esp+17Ch+var_D4]
.text:00405648                 mov     edx, [esp+17Ch+var_CC]
.text:0040564F                 xor     edx, eax
.text:00405651                 mov     eax, [esp+17Ch+var_E8]
.text:00405658                 xor     edx, eax
.text:0040565A                 mov     eax, [esp+17Ch+var_FC]
.text:00405661                 xor     edx, eax
.text:00405663                 mov     eax, edi
.text:00405665                 rol     edx, 1
.text:00405667                 mov     [esp+17Ch+var_108], edx
.text:0040566B                 or      eax, ebp
.text:0040566D                 add     ecx, edx
.text:0040566F                 and     eax, [esp+17Ch+var_68]
.text:00405676                 lea     esi, [ecx+esi-70E44324h]
.text:0040567D                 mov     edx, edi
.text:0040567F                 and     edx, ebp
.text:00405681                 mov     ecx, esi
.text:00405683                 rol     ecx, 5
.text:00405686                 or      edx, eax
.text:00405688                 rol     edi, 1Eh
.text:0040568B                 add     ecx, edx
.text:0040568D                 mov     eax, [esp+17Ch+var_D8]
.text:00405694                 mov     edx, [esp+17Ch+var_D0]
.text:0040569B                 xor     edx, eax
.text:0040569D                 mov     eax, [esp+17Ch+var_EC]
.text:004056A4                 xor     edx, eax
.text:004056A6                 mov     eax, [esp+17Ch+var_100]
.text:004056AA                 xor     edx, eax
.text:004056AC                 rol     edx, 1
.text:004056AE                 add     ecx, edx
.text:004056B0                 mov     [esp+17Ch+var_10C], edx
.text:004056B4                 mov     edx, [esp+17Ch+var_6C]
.text:004056BB                 lea     eax, [ecx+edx-70E44324h]
.text:004056C2                 mov     [esp+17Ch+var_6C], eax
.text:004056C9                 mov     ecx, eax
.text:004056CB                 mov     edx, esi
.text:004056CD                 mov     eax, esi
.text:004056CF                 and     edx, edi
.text:004056D1                 or      eax, edi
.text:004056D3                 and     eax, ebp
.text:004056D5                 rol     ecx, 5
.text:004056D8                 or      edx, eax
.text:004056DA                 mov     eax, [esp+17Ch+var_D4]
.text:004056E1                 add     ecx, edx
.text:004056E3                 mov     edx, [esp+17Ch+var_F0]
.text:004056EA                 xor     eax, ebx
.text:004056EC                 xor     eax, edx
.text:004056EE                 mov     edx, [esp+17Ch+var_104]
.text:004056F2                 xor     eax, edx
.text:004056F4                 mov     edx, [esp+17Ch+var_68]
.text:004056FB                 rol     eax, 1
.text:004056FD                 mov     [esp+17Ch+var_110], eax
.text:00405701                 add     ecx, eax
.text:00405703                 rol     esi, 1Eh
.text:00405706                 lea     eax, [ecx+edx-70E44324h]
.text:0040570D                 mov     ecx, [esp+17Ch+var_6C]
.text:00405714                 mov     edx, eax
.text:00405716                 mov     [esp+17Ch+var_68], eax
.text:0040571D                 rol     edx, 5
.text:00405720                 mov     eax, [esp+17Ch+var_DC]
.text:00405727                 rol     [esp+17Ch+var_6C], 1Eh
.text:0040572F                 xor     ecx, esi
.text:00405731                 xor     ecx, edi
.text:00405733                 add     edx, ecx
.text:00405735                 mov     ecx, [esp+17Ch+var_D8]
.text:0040573C                 xor     ecx, eax
.text:0040573E                 mov     eax, [esp+17Ch+var_F4]
.text:00405745                 xor     ecx, eax
.text:00405747                 mov     eax, [esp+17Ch+var_108]
.text:0040574B                 xor     ecx, eax
.text:0040574D                 rol     ecx, 1
.text:0040574F                 mov     eax, [esp+17Ch+var_68]
.text:00405756                 mov     [esp+17Ch+var_114], ecx
.text:0040575A                 add     edx, ecx
.text:0040575C                 mov     ecx, [esp+17Ch+var_6C]
.text:00405763                 lea     ebp, [edx+ebp-359D3E2Ah]
.text:0040576A                 mov     edx, ebp
.text:0040576C                 xor     eax, ecx
.text:0040576E                 mov     ecx, [esp+17Ch+var_E0]
.text:00405775                 xor     eax, esi
.text:00405777                 rol     edx, 5
.text:0040577A                 add     edx, eax
.text:0040577C                 xor     ebx, ecx
.text:0040577E                 mov     ecx, [esp+17Ch+var_F8]
.text:00405785                 xor     ebx, ecx
.text:00405787                 mov     ecx, [esp+17Ch+var_10C]
.text:0040578B                 rol     [esp+17Ch+var_68], 1Eh
.text:00405793                 mov     eax, [esp+17Ch+var_68]
.text:0040579A                 xor     ebx, ecx
.text:0040579C                 rol     ebx, 1
.text:0040579E                 mov     ecx, [esp+17Ch+var_6C]
.text:004057A5                 add     edx, ebx
.text:004057A7                 lea     edi, [edx+edi-359D3E2Ah]
.text:004057AE                 xor     eax, ebp
.text:004057B0                 mov     edx, edi
.text:004057B2                 xor     eax, ecx
.text:004057B4                 rol     edx, 5
.text:004057B7                 mov     ecx, [esp+17Ch+var_DC]
.text:004057BE                 add     edx, eax
.text:004057C0                 rol     ebp, 1Eh
.text:004057C3                 mov     eax, [esp+17Ch+var_E4]
.text:004057CA                 xor     ecx, eax
.text:004057CC                 mov     eax, [esp+17Ch+var_FC]
.text:004057D3                 xor     ecx, eax
.text:004057D5                 mov     eax, [esp+17Ch+var_110]
.text:004057D9                 xor     ecx, eax
.text:004057DB                 rol     ecx, 1
.text:004057DD                 mov     [esp+17Ch+var_118], ecx
.text:004057E1                 add     edx, ecx
.text:004057E3                 mov     eax, edi
.text:004057E5                 mov     ecx, [esp+17Ch+var_68]
.text:004057EC                 lea     esi, [edx+esi-359D3E2Ah]
.text:004057F3                 mov     edx, esi
.text:004057F5                 rol     edx, 5
.text:004057F8                 xor     eax, ebp
.text:004057FA                 xor     eax, ecx
.text:004057FC                 add     edx, eax
.text:004057FE                 mov     ecx, [esp+17Ch+var_E0]
.text:00405805                 rol     edi, 1Eh
.text:00405808                 mov     eax, [esp+17Ch+var_E8]
.text:0040580F                 xor     ecx, eax
.text:00405811                 mov     eax, [esp+17Ch+var_100]
.text:00405815                 xor     ecx, eax
.text:00405817                 mov     eax, [esp+17Ch+var_114]
.text:0040581B                 xor     ecx, eax
.text:0040581D                 rol     ecx, 1
.text:0040581F                 add     edx, ecx
.text:00405821                 mov     [esp+17Ch+var_11C], ecx
.text:00405825                 mov     ecx, [esp+17Ch+var_6C]
.text:0040582C                 lea     eax, [edx+ecx-359D3E2Ah]
.text:00405833                 mov     [esp+17Ch+var_6C], eax
.text:0040583A                 mov     ecx, esi
.text:0040583C                 mov     edx, eax
.text:0040583E                 xor     ecx, edi
.text:00405840                 rol     edx, 5
.text:00405843                 mov     eax, [esp+17Ch+var_E4]
.text:0040584A                 xor     ecx, ebp
.text:0040584C                 rol     esi, 1Eh
.text:0040584F                 add     edx, ecx
.text:00405851                 mov     ecx, [esp+17Ch+var_EC]
.text:00405858                 xor     eax, ecx
.text:0040585A                 mov     ecx, [esp+17Ch+var_104]
.text:0040585E                 xor     eax, ecx
.text:00405860                 xor     eax, ebx
.text:00405862                 rol     eax, 1
.text:00405864                 mov     [esp+17Ch+var_120], eax
.text:00405868                 add     edx, eax
.text:0040586A                 mov     [esp+17Ch+var_5C], eax
.text:00405871                 mov     eax, [esp+17Ch+var_68]
.text:00405878                 lea     ecx, [edx+eax-359D3E2Ah]
.text:0040587F                 mov     [esp+17Ch+var_68], ecx
.text:00405886                 mov     edx, ecx
.text:00405888                 mov     eax, [esp+17Ch+var_F0]
.text:0040588F                 mov     ecx, [esp+17Ch+var_6C]
.text:00405896                 rol     edx, 5
.text:00405899                 rol     [esp+17Ch+var_6C], 1Eh
.text:004058A1                 xor     ecx, esi
.text:004058A3                 xor     ecx, edi
.text:004058A5                 add     edx, ecx
.text:004058A7                 mov     ecx, [esp+17Ch+var_E8]
.text:004058AE                 xor     ecx, eax
.text:004058B0                 mov     eax, [esp+17Ch+var_108]
.text:004058B4                 xor     ecx, eax
.text:004058B6                 mov     eax, [esp+17Ch+var_118]
.text:004058BA                 xor     ecx, eax
.text:004058BC                 rol     ecx, 1
.text:004058BE                 mov     eax, [esp+17Ch+var_68]
.text:004058C5                 mov     [esp+17Ch+var_124], ecx
.text:004058C9                 add     edx, ecx
.text:004058CB                 lea     ebp, [edx+ebp-359D3E2Ah]
.text:004058D2                 mov     [esp+17Ch+var_58], ecx
.text:004058D9                 mov     edx, ebp
.text:004058DB                 mov     ecx, [esp+17Ch+var_6C]
.text:004058E2                 rol     edx, 5
.text:004058E5                 xor     eax, ecx
.text:004058E7                 xor     eax, esi
.text:004058E9                 add     edx, eax
.text:004058EB                 mov     ecx, [esp+17Ch+var_EC]
.text:004058F2                 mov     eax, [esp+17Ch+var_F4]
.text:004058F9                 xor     ecx, eax
.text:004058FB                 mov     eax, [esp+17Ch+var_10C]
.text:004058FF                 xor     ecx, eax
.text:00405901                 mov     eax, [esp+17Ch+var_11C]
.text:00405905                 xor     ecx, eax
.text:00405907                 rol     ecx, 1
.text:00405909                 mov     [esp+17Ch+var_128], ecx
.text:0040590D                 add     edx, ecx
.text:0040590F                 lea     edi, [edx+edi-359D3E2Ah]
.text:00405916                 rol     [esp+17Ch+var_68], 1Eh
.text:0040591E                 mov     edx, edi
.text:00405920                 rol     edx, 5
.text:00405923                 mov     [esp+17Ch+var_54], ecx
.text:0040592A                 mov     eax, [esp+17Ch+var_68]
.text:00405931                 mov     ecx, [esp+17Ch+var_6C]
.text:00405938                 xor     eax, ebp
.text:0040593A                 xor     eax, ecx
.text:0040593C                 rol     ebp, 1Eh
.text:0040593F                 add     edx, eax
.text:00405941                 mov     ecx, [esp+17Ch+var_F0]
.text:00405948                 mov     eax, [esp+17Ch+var_F8]
.text:0040594F                 xor     ecx, eax
.text:00405951                 mov     eax, [esp+17Ch+var_110]
.text:00405955                 xor     ecx, eax
.text:00405957                 mov     eax, [esp+17Ch+var_120]
.text:0040595B                 xor     ecx, eax
.text:0040595D                 rol     ecx, 1
.text:0040595F                 mov     [esp+17Ch+var_12C], ecx
.text:00405963                 add     edx, ecx
.text:00405965                 mov     eax, edi
.text:00405967                 mov     [esp+17Ch+var_50], ecx
.text:0040596E                 lea     esi, [edx+esi-359D3E2Ah]
.text:00405975                 xor     eax, ebp
.text:00405977                 mov     ecx, [esp+17Ch+var_68]
.text:0040597E                 mov     edx, esi
.text:00405980                 rol     edi, 1Eh
.text:00405983                 rol     edx, 5
.text:00405986                 xor     eax, ecx
.text:00405988                 add     edx, eax
.text:0040598A                 mov     ecx, [esp+17Ch+var_F4]
.text:00405991                 mov     eax, [esp+17Ch+var_FC]
.text:00405998                 xor     ecx, eax
.text:0040599A                 mov     eax, [esp+17Ch+var_114]
.text:0040599E                 xor     ecx, eax
.text:004059A0                 mov     eax, [esp+17Ch+var_124]
.text:004059A4                 xor     ecx, eax
.text:004059A6                 rol     ecx, 1
.text:004059A8                 add     edx, ecx
.text:004059AA                 mov     [esp+17Ch+var_130], ecx
.text:004059AE                 mov     [esp+17Ch+var_4C], ecx
.text:004059B5                 mov     ecx, [esp+17Ch+var_6C]
.text:004059BC                 lea     eax, [edx+ecx-359D3E2Ah]
.text:004059C3                 mov     [esp+17Ch+var_6C], eax
.text:004059CA                 mov     ecx, esi
.text:004059CC                 mov     edx, eax
.text:004059CE                 xor     ecx, edi
.text:004059D0                 rol     edx, 5
.text:004059D3                 mov     eax, [esp+17Ch+var_F8]
.text:004059DA                 xor     ecx, ebp
.text:004059DC                 add     edx, ecx
.text:004059DE                 mov     ecx, [esp+17Ch+var_100]
.text:004059E2                 xor     eax, ecx
.text:004059E4                 mov     ecx, [esp+17Ch+var_128]
.text:004059E8                 xor     eax, ebx
.text:004059EA                 xor     eax, ecx
.text:004059EC                 rol     eax, 1
.text:004059EE                 add     edx, eax
.text:004059F0                 mov     [esp+17Ch+var_134], eax
.text:004059F4                 rol     esi, 1Eh
.text:004059F7                 mov     [esp+17Ch+var_48], eax
.text:004059FE                 mov     eax, [esp+17Ch+var_68]
.text:00405A05                 lea     ecx, [edx+eax-359D3E2Ah]
.text:00405A0C                 mov     [esp+17Ch+var_68], ecx
.text:00405A13                 mov     edx, ecx
.text:00405A15                 mov     eax, [esp+17Ch+var_104]
.text:00405A19                 mov     ecx, [esp+17Ch+var_6C]
.text:00405A20                 rol     edx, 5
.text:00405A23                 xor     ecx, esi
.text:00405A25                 xor     ecx, edi
.text:00405A27                 add     edx, ecx
.text:00405A29                 mov     ecx, [esp+17Ch+var_FC]
.text:00405A30                 xor     ecx, eax
.text:00405A32                 mov     eax, [esp+17Ch+var_118]
.text:00405A36                 xor     ecx, eax
.text:00405A38                 mov     eax, [esp+17Ch+var_12C]
.text:00405A3C                 xor     ecx, eax
.text:00405A3E                 rol     ecx, 1
.text:00405A40                 mov     [esp+17Ch+var_138], ecx
.text:00405A44                 add     edx, ecx
.text:00405A46                 lea     ebp, [edx+ebp-359D3E2Ah]
.text:00405A4D                 mov     [esp+17Ch+var_44], ecx
.text:00405A54                 mov     edx, ebp
.text:00405A56                 mov     eax, [esp+17Ch+var_68]
.text:00405A5D                 rol     [esp+17Ch+var_6C], 1Eh
.text:00405A65                 rol     edx, 5
.text:00405A68                 rol     [esp+17Ch+var_68], 1Eh
.text:00405A70                 mov     ecx, [esp+17Ch+var_6C]
.text:00405A77                 xor     eax, ecx
.text:00405A79                 xor     eax, esi
.text:00405A7B                 mov     ecx, [esp+17Ch+var_100]
.text:00405A7F                 add     edx, eax
.text:00405A81                 mov     eax, [esp+17Ch+var_108]
.text:00405A85                 xor     ecx, eax
.text:00405A87                 mov     eax, [esp+17Ch+var_11C]
.text:00405A8B                 xor     ecx, eax
.text:00405A8D                 mov     eax, [esp+17Ch+var_130]
.text:00405A91                 xor     ecx, eax
.text:00405A93                 rol     ecx, 1
.text:00405A95                 mov     eax, [esp+17Ch+var_68]
.text:00405A9C                 add     edx, ecx
.text:00405A9E                 mov     [esp+17Ch+var_13C], ecx
.text:00405AA2                 lea     edi, [edx+edi-359D3E2Ah]
.text:00405AA9                 xor     eax, ebp
.text:00405AAB                 mov     [esp+17Ch+var_40], ecx
.text:00405AB2                 mov     edx, edi
.text:00405AB4                 rol     ebp, 1Eh
.text:00405AB7                 mov     ecx, [esp+17Ch+var_6C]
.text:00405ABE                 rol     edx, 5
.text:00405AC1                 xor     eax, ecx
.text:00405AC3                 add     edx, eax
.text:00405AC5                 mov     ecx, [esp+17Ch+var_104]
.text:00405AC9                 mov     eax, [esp+17Ch+var_10C]
.text:00405ACD                 xor     ecx, eax
.text:00405ACF                 mov     eax, [esp+17Ch+var_120]
.text:00405AD3                 xor     ecx, eax
.text:00405AD5                 mov     eax, [esp+17Ch+var_134]
.text:00405AD9                 xor     ecx, eax
.text:00405ADB                 rol     ecx, 1
.text:00405ADD                 mov     [esp+17Ch+var_3C], ecx
.text:00405AE4                 add     edx, ecx
.text:00405AE6                 mov     eax, edi
.text:00405AE8                 lea     esi, [edx+esi-359D3E2Ah]
.text:00405AEF                 mov     edx, esi
.text:00405AF1                 rol     edx, 5
.text:00405AF4                 xor     eax, ebp
.text:00405AF6                 rol     edi, 1Eh
.text:00405AF9                 xor     eax, [esp+17Ch+var_68]
.text:00405B00                 add     edx, eax
.text:00405B02                 mov     eax, [esp+17Ch+var_108]
.text:00405B06                 xor     eax, [esp+17Ch+var_110]
.text:00405B0A                 mov     [esp+17Ch+var_140], eax
.text:00405B0E                 mov     eax, [esp+17Ch+var_124]
.text:00405B12                 xor     [esp+17Ch+var_140], eax
.text:00405B16                 mov     eax, [esp+17Ch+var_138]
.text:00405B1A                 xor     [esp+17Ch+var_140], eax
.text:00405B1E                 rol     [esp+17Ch+var_140], 1
.text:00405B22                 mov     eax, [esp+17Ch+var_140]
.text:00405B26                 add     edx, eax
.text:00405B28                 mov     [esp+17Ch+var_38], eax
.text:00405B2F                 mov     eax, [esp+17Ch+var_6C]
.text:00405B36                 lea     eax, [edx+eax-359D3E2Ah]
.text:00405B3D                 mov     [esp+17Ch+var_6C], eax
.text:00405B44                 mov     edx, eax
.text:00405B46                 mov     eax, esi
.text:00405B48                 xor     eax, edi
.text:00405B4A                 rol     edx, 5
.text:00405B4D                 xor     eax, ebp
.text:00405B4F                 add     edx, eax
.text:00405B51                 rol     esi, 1Eh
.text:00405B54                 mov     eax, [esp+17Ch+var_10C]
.text:00405B58                 xor     eax, [esp+17Ch+var_114]
.text:00405B5C                 mov     [esp+17Ch+var_144], eax
.text:00405B60                 mov     eax, [esp+17Ch+var_128]
.text:00405B64                 xor     [esp+17Ch+var_144], eax
.text:00405B68                 mov     eax, [esp+17Ch+var_13C]
.text:00405B6C                 xor     [esp+17Ch+var_144], eax
.text:00405B70                 rol     [esp+17Ch+var_144], 1
.text:00405B74                 mov     eax, [esp+17Ch+var_144]
.text:00405B78                 add     edx, eax
.text:00405B7A                 mov     [esp+17Ch+var_34], eax
.text:00405B81                 mov     eax, [esp+17Ch+var_68]
.text:00405B88                 lea     eax, [edx+eax-359D3E2Ah]
.text:00405B8F                 mov     [esp+17Ch+var_68], eax
.text:00405B96                 mov     edx, eax
.text:00405B98                 mov     eax, [esp+17Ch+var_6C]
.text:00405B9F                 rol     [esp+17Ch+var_6C], 1Eh
.text:00405BA7                 rol     edx, 5
.text:00405BAA                 xor     eax, esi
.text:00405BAC                 xor     eax, edi
.text:00405BAE                 add     edx, eax
.text:00405BB0                 mov     eax, [esp+17Ch+var_110]
.text:00405BB4                 xor     eax, ebx
.text:00405BB6                 mov     [esp+17Ch+var_148], eax
.text:00405BBA                 mov     eax, [esp+17Ch+var_12C]
.text:00405BBE                 xor     [esp+17Ch+var_148], eax
.text:00405BC2                 xor     [esp+17Ch+var_148], ecx
.text:00405BC6                 mov     ecx, [esp+17Ch+var_6C]
.text:00405BCD                 rol     [esp+17Ch+var_148], 1
.text:00405BD1                 mov     eax, [esp+17Ch+var_148]
.text:00405BD5                 add     edx, eax
.text:00405BD7                 mov     [esp+17Ch+var_30], eax
.text:00405BDE                 lea     ebp, [edx+ebp-359D3E2Ah]
.text:00405BE5                 mov     eax, [esp+17Ch+var_68]
.text:00405BEC                 mov     edx, ebp
.text:00405BEE                 rol     edx, 5
.text:00405BF1                 xor     eax, ecx
.text:00405BF3                 xor     eax, esi
.text:00405BF5                 mov     ecx, [esp+17Ch+var_114]
.text:00405BF9                 add     edx, eax
.text:00405BFB                 mov     eax, [esp+17Ch+var_118]
.text:00405BFF                 xor     ecx, eax
.text:00405C01                 mov     eax, [esp+17Ch+var_130]
.text:00405C05                 xor     ecx, eax
.text:00405C07                 mov     eax, [esp+17Ch+var_140]
.text:00405C0B                 xor     ecx, eax
.text:00405C0D                 rol     ecx, 1
.text:00405C0F                 add     edx, ecx
.text:00405C11                 lea     edi, [edx+edi-359D3E2Ah]
.text:00405C18                 mov     [esp+17Ch+var_2C], ecx
.text:00405C1F                 mov     edx, edi
.text:00405C21                 rol     edx, 5
.text:00405C24                 rol     [esp+17Ch+var_68], 1Eh
.text:00405C2C                 mov     eax, [esp+17Ch+var_68]
.text:00405C33                 xor     eax, ebp
.text:00405C35                 xor     eax, [esp+17Ch+var_6C]
.text:00405C3C                 rol     ebp, 1Eh
.text:00405C3F                 add     edx, eax
.text:00405C41                 mov     eax, [esp+17Ch+var_11C]
.text:00405C45                 xor     ebx, eax
.text:00405C47                 mov     eax, [esp+17Ch+var_134]
.text:00405C4B                 xor     ebx, eax
.text:00405C4D                 mov     eax, [esp+17Ch+var_144]
.text:00405C51                 xor     ebx, eax
.text:00405C53                 rol     ebx, 1
.text:00405C55                 mov     eax, edi
.text:00405C57                 add     edx, ebx
.text:00405C59                 mov     [esp+17Ch+var_28], ebx
.text:00405C60                 lea     esi, [edx+esi-359D3E2Ah]
.text:00405C67                 xor     eax, ebp
.text:00405C69                 mov     ebx, [esp+17Ch+var_68]
.text:00405C70                 mov     edx, esi
.text:00405C72                 rol     edi, 1Eh
.text:00405C75                 rol     edx, 5
.text:00405C78                 xor     eax, ebx
.text:00405C7A                 add     edx, eax
.text:00405C7C                 mov     ebx, [esp+17Ch+var_120]
.text:00405C80                 mov     eax, [esp+17Ch+var_118]
.text:00405C84                 xor     eax, ebx
.text:00405C86                 mov     [esp+17Ch+var_14C], eax
.text:00405C8A                 mov     ebx, [esp+17Ch+var_138]
.text:00405C8E                 mov     eax, [esp+17Ch+var_6C]
.text:00405C95                 xor     [esp+17Ch+var_14C], ebx
.text:00405C99                 mov     ebx, [esp+17Ch+var_148]
.text:00405C9D                 xor     [esp+17Ch+var_14C], ebx
.text:00405CA1                 rol     [esp+17Ch+var_14C], 1
.text:00405CA5                 mov     ebx, [esp+17Ch+var_14C]
.text:00405CA9                 add     edx, ebx
.text:00405CAB                 mov     [esp+17Ch+var_24], ebx
.text:00405CB2                 lea     ebx, [edx+eax-359D3E2Ah]
.text:00405CB9                 mov     edx, ebx
.text:00405CBB                 mov     [esp+17Ch+var_6C], ebx
.text:00405CC2                 rol     edx, 5
.text:00405CC5                 mov     eax, [esp+17Ch+var_11C]
.text:00405CC9                 mov     ebx, esi
.text:00405CCB                 xor     ebx, edi
.text:00405CCD                 xor     ebx, ebp
.text:00405CCF                 add     edx, ebx
.text:00405CD1                 mov     ebx, [esp+17Ch+var_124]
.text:00405CD5                 xor     eax, ebx
.text:00405CD7                 mov     [esp+17Ch+var_150], eax
.text:00405CDB                 mov     ebx, [esp+17Ch+var_13C]
.text:00405CDF                 xor     [esp+17Ch+var_150], ebx
.text:00405CE3                 xor     [esp+17Ch+var_150], ecx
.text:00405CE7                 rol     esi, 1Eh
.text:00405CEA                 rol     [esp+17Ch+var_150], 1
.text:00405CEE                 mov     eax, [esp+17Ch+var_150]
.text:00405CF2                 add     edx, eax
.text:00405CF4                 mov     [esp+17Ch+var_20], eax
.text:00405CFB                 mov     ebx, [esp+17Ch+var_68]
.text:00405D02                 mov     eax, [esp+17Ch+arg_8]
.text:00405D09                 add     ebp, [esp+17Ch+var_168]
.text:00405D0D                 lea     ecx, [edx+ebx-359D3E2Ah]
.text:00405D14                 mov     ebx, [esp+17Ch+var_158]
.text:00405D18                 mov     edx, [esp+17Ch+var_6C]
.text:00405D1F                 mov     [eax+10h], ebp
.text:00405D22                 add     ebx, ecx
.text:00405D24                 mov     ecx, [esp+17Ch+arg_8]
.text:00405D2B                 mov     [esp+17Ch+var_154], ebx
.text:00405D2F                 mov     [esp+17Ch+var_68], ebx
.text:00405D36                 mov     [ecx], ebx
.text:00405D38                 mov     ebx, [esp+17Ch+var_15C]
.text:00405D3C                 mov     [esp+17Ch+var_170], ebp
.text:00405D40                 add     ebx, edx
.text:00405D42                 mov     edx, [esp+17Ch+var_164]
.text:00405D46                 mov     [ecx+4], ebx
.text:00405D49                 mov     ecx, [esp+17Ch+var_160]
.text:00405D4D                 add     edx, edi
.text:00405D4F                 mov     [eax+0Ch], edx
.text:00405D52                 mov     edi, edx
.text:00405D54                 add     ecx, esi
.text:00405D56                 mov     [eax+8], ecx
.text:00405D59                 mov     esi, ecx
.text:00405D5B                 mov     eax, [esp+17Ch+var_64]
.text:00405D62                 cmp     [esp+17Ch+var_60], eax
.text:00405D69                 mov     [esp+17Ch+var_6C], ebx
.text:00405D70                 jnb     short loc_405D93
.text:00405D72                 mov     [esp+17Ch+var_15C], ebx
.text:00405D76                 mov     eax, [esp+17Ch+var_154]
.text:00405D7A                 mov     [esp+17Ch+var_160], ecx
.text:00405D7E                 mov     [esp+17Ch+var_164], edx
.text:00405D82                 mov     [esp+17Ch+var_158], eax
.text:00405D86                 mov     eax, [esp+17Ch+var_170]
.text:00405D8A                 mov     [esp+17Ch+var_168], eax
.text:00405D8E                 jmp     loc_40440E
.text:00405D93 ; ---------------------------------------------------------------------------
.text:00405D93
.text:00405D93 loc_405D93:                             ; CODE XREF: sub_404370+98↑j
.text:00405D93                                         ; sub_404370+1A00↑j
.text:00405D93                 add     esp, 16Ch
.text:00405D99                 pop     ebx
.text:00405D9A                 pop     esi
.text:00405D9B                 pop     edi
.text:00405D9C                 pop     ebp
.text:00405D9D                 retn
.text:00405D9D sub_404370      endp
.text:00405D9D
.text:00405D9D ; ---------------------------------------------------------------------------
.text:00405D9E                 align 10h
.text:00405DA0                 mov     edx, [esp+4]
.text:00405DA4                 mov     dword ptr [edx], 67452301h
.text:00405DAA                 mov     dword ptr [edx+4], 0EFCDAB89h
.text:00405DB1                 mov     dword ptr [edx+8], 98BADCFEh
.text:00405DB8                 mov     dword ptr [edx+0Ch], 10325476h
.text:00405DBF                 mov     dword ptr [edx+10h], 0C3D2E1F0h
.text:00405DC6                 mov     dword ptr [edx+18h], 0
.text:00405DCD                 mov     dword ptr [edx+14h], 0
.text:00405DD4                 mov     dword ptr [edx+1Ch], 0
.text:00405DDB                 retn
.text:00405DDB ; ---------------------------------------------------------------------------
.text:00405DDC                 align 10h
.text:00405DE0                 push    esi
.text:00405DE1                 push    ebx
.text:00405DE2                 mov     esi, [esp+0Ch]
.text:00405DE6                 mov     eax, [esp+10h]
.text:00405DEA                 mov     ecx, [esi]
.text:00405DEC                 mov     edx, ecx
.text:00405DEE                 mov     ebx, ecx
.text:00405DF0                 and     edx, 0FF00h
.text:00405DF6                 shl     ebx, 18h
.text:00405DF9                 shl     edx, 8
.text:00405DFC                 shr     ecx, 8
.text:00405DFF                 or      ebx, edx
.text:00405E01                 mov     edx, ecx
.text:00405E03                 and     edx, 0FF00h
.text:00405E09                 shr     ecx, 10h
.text:00405E0C                 or      ebx, edx
.text:00405E0E                 or      ebx, ecx
.text:00405E10                 mov     [eax], ebx
.text:00405E12                 mov     ecx, [esi+4]
.text:00405E15                 mov     edx, ecx
.text:00405E17                 mov     ebx, ecx
.text:00405E19                 and     edx, 0FF00h
.text:00405E1F                 shl     edx, 8
.text:00405E22                 shr     ecx, 8
.text:00405E25                 shl     ebx, 18h
.text:00405E28                 or      ebx, edx
.text:00405E2A                 mov     edx, ecx
.text:00405E2C                 and     edx, 0FF00h
.text:00405E32                 shr     ecx, 10h
.text:00405E35                 or      ebx, edx
.text:00405E37                 or      ebx, ecx
.text:00405E39                 mov     [eax+4], ebx
.text:00405E3C                 mov     ecx, [esi+8]
.text:00405E3F                 mov     edx, ecx
.text:00405E41                 mov     ebx, ecx
.text:00405E43                 and     edx, 0FF00h
.text:00405E49                 shl     edx, 8
.text:00405E4C                 shr     ecx, 8
.text:00405E4F                 shl     ebx, 18h
.text:00405E52                 or      ebx, edx
.text:00405E54                 mov     edx, ecx
.text:00405E56                 and     edx, 0FF00h
.text:00405E5C                 shr     ecx, 10h
.text:00405E5F                 or      ebx, edx
.text:00405E61                 or      ebx, ecx
.text:00405E63                 mov     [eax+8], ebx
.text:00405E66                 mov     ecx, [esi+0Ch]
.text:00405E69                 mov     edx, ecx
.text:00405E6B                 mov     ebx, ecx
.text:00405E6D                 and     edx, 0FF00h
.text:00405E73                 shl     edx, 8
.text:00405E76                 shr     ecx, 8
.text:00405E79                 shl     ebx, 18h
.text:00405E7C                 or      ebx, edx
.text:00405E7E                 mov     edx, ecx
.text:00405E80                 and     edx, 0FF00h
.text:00405E86                 or      ebx, edx
.text:00405E88                 shr     ecx, 10h
.text:00405E8B                 or      ebx, ecx
.text:00405E8D                 mov     [eax+0Ch], ebx
.text:00405E90                 mov     ebx, [esi+10h]
.text:00405E93                 mov     ecx, ebx
.text:00405E95                 mov     esi, ebx
.text:00405E97                 and     ecx, 0FF00h
.text:00405E9D                 shl     ecx, 8
.text:00405EA0                 shr     ebx, 8
.text:00405EA3                 shl     esi, 18h
.text:00405EA6                 or      esi, ecx
.text:00405EA8                 mov     ecx, ebx
.text:00405EAA                 and     ecx, 0FF00h
.text:00405EB0                 shr     ebx, 10h
.text:00405EB3                 or      esi, ecx
.text:00405EB5                 or      esi, ebx
.text:00405EB7                 mov     [eax+10h], esi
.text:00405EBA                 pop     ebx
.text:00405EBB                 pop     esi
.text:00405EBC                 retn
.text:00405EBC ; ---------------------------------------------------------------------------
.text:00405EBD                 align 10h
.text:00405EC0                 push    ebp
.text:00405EC1                 push    edi
.text:00405EC2                 push    esi
.text:00405EC3                 push    ebx
.text:00405EC4                 sub     esp, 0Ch
.text:00405EC7                 mov     edi, [esp+20h]
.text:00405ECB                 mov     ebp, [esp+24h]
.text:00405ECF                 mov     ebx, [edi+1Ch]
.text:00405ED2                 mov     edx, [edi+14h]
.text:00405ED5                 add     edx, ebx
.text:00405ED7                 cmp     edx, ebx
.text:00405ED9                 mov     [edi+14h], edx
.text:00405EDC                 jnb     short loc_405EE1
.text:00405EDE                 inc     dword ptr [edi+18h]
.text:00405EE1
.text:00405EE1 loc_405EE1:                             ; CODE XREF: .text:00405EDC↑j
.text:00405EE1                 cmp     ebx, 37h ; '7'
.text:00405EE4                 mov     esi, 78h ; 'x'
.text:00405EE9                 ja      short loc_405EF0
.text:00405EEB                 mov     esi, 38h ; '8'
.text:00405EF0
.text:00405EF0 loc_405EF0:                             ; CODE XREF: .text:00405EE9↑j
.text:00405EF0                 mov     dword ptr [esp+4], offset dword_403E60
.text:00405EF8                 lea     edx, [ebx+edi+20h]
.text:00405EFC                 sub     esi, ebx
.text:00405EFE                 mov     [esp+8], esi
.text:00405F02                 add     ebx, esi
.text:00405F04                 lea     esi, [ebx+edi]
.text:00405F07                 mov     [esp], edx
.text:00405F0A                 add     ebx, 8
.text:00405F0D                 call    memcpy
.text:00405F12                 mov     ecx, [edi+14h]
.text:00405F15                 lea     edx, ds:0[ecx*8]
.text:00405F1C                 mov     eax, edx
.text:00405F1E                 and     eax, 0FF00h
.text:00405F23                 shl     ecx, 1Bh
.text:00405F26                 shl     eax, 8
.text:00405F29                 shr     edx, 8
.text:00405F2C                 or      ecx, eax
.text:00405F2E                 mov     eax, edx
.text:00405F30                 and     eax, 0FF00h
.text:00405F35                 shr     edx, 10h
.text:00405F38                 or      ecx, eax
.text:00405F3A                 or      ecx, edx
.text:00405F3C                 mov     [esi+24h], ecx
.text:00405F3F                 mov     edx, [edi+18h]
.text:00405F42                 mov     ecx, [edi+14h]
.text:00405F45                 shl     edx, 3
.text:00405F48                 shr     ecx, 1Dh
.text:00405F4B                 or      edx, ecx
.text:00405F4D                 mov     eax, edx
.text:00405F4F                 mov     ecx, edx
.text:00405F51                 and     eax, 0FF00h
.text:00405F56                 shl     eax, 8
.text:00405F59                 shr     edx, 8
.text:00405F5C                 shl     ecx, 18h
.text:00405F5F                 or      ecx, eax
.text:00405F61                 mov     eax, edx
.text:00405F63                 and     eax, 0FF00h
.text:00405F68                 or      ecx, eax
.text:00405F6A                 shr     edx, 10h
.text:00405F6D                 or      ecx, edx
.text:00405F6F                 mov     [esi+20h], ecx
.text:00405F72                 mov     [esp+4], ebx
.text:00405F76                 lea     ebx, [edi+20h]
.text:00405F79                 mov     [esp+8], edi
.text:00405F7D                 mov     [esp], ebx
.text:00405F80                 call    sub_404370
.text:00405F85                 mov     ecx, [edi]
.text:00405F87                 mov     eax, ebp
.text:00405F89                 mov     esi, ecx
.text:00405F8B                 mov     ebx, ecx
.text:00405F8D                 and     esi, 0FF00h
.text:00405F93                 shr     ecx, 8
.text:00405F96                 shl     esi, 8
.text:00405F99                 mov     edx, ecx
.text:00405F9B                 shl     ebx, 18h
.text:00405F9E                 and     edx, 0FF00h
.text:00405FA4                 or      ebx, esi
.text:00405FA6                 or      ebx, edx
.text:00405FA8                 shr     ecx, 10h
.text:00405FAB                 or      ebx, ecx
.text:00405FAD                 mov     [ebp+0], ebx
.text:00405FB0                 mov     ecx, [edi+4]
.text:00405FB3                 mov     esi, ecx
.text:00405FB5                 mov     ebx, ecx
.text:00405FB7                 and     esi, 0FF00h
.text:00405FBD                 shr     ecx, 8
.text:00405FC0                 shl     esi, 8
.text:00405FC3                 mov     edx, ecx
.text:00405FC5                 shl     ebx, 18h
.text:00405FC8                 or      ebx, esi
.text:00405FCA                 and     edx, 0FF00h
.text:00405FD0                 or      ebx, edx
.text:00405FD2                 shr     ecx, 10h
.text:00405FD5                 or      ebx, ecx
.text:00405FD7                 mov     [ebp+4], ebx
.text:00405FDA                 mov     ecx, [edi+8]
.text:00405FDD                 mov     esi, ecx
.text:00405FDF                 mov     ebx, ecx
.text:00405FE1                 and     esi, 0FF00h
.text:00405FE7                 shr     ecx, 8
.text:00405FEA                 shl     esi, 8
.text:00405FED                 mov     edx, ecx
.text:00405FEF                 shl     ebx, 18h
.text:00405FF2                 or      ebx, esi
.text:00405FF4                 and     edx, 0FF00h
.text:00405FFA                 or      ebx, edx
.text:00405FFC                 shr     ecx, 10h
.text:00405FFF                 or      ebx, ecx
.text:00406001                 mov     [ebp+8], ebx
.text:00406004                 mov     ecx, [edi+0Ch]
.text:00406007                 mov     esi, ecx
.text:00406009                 mov     ebx, ecx
.text:0040600B                 and     esi, 0FF00h
.text:00406011                 shr     ecx, 8
.text:00406014                 shl     esi, 8
.text:00406017                 mov     edx, ecx
.text:00406019                 shl     ebx, 18h
.text:0040601C                 or      ebx, esi
.text:0040601E                 and     edx, 0FF00h
.text:00406024                 or      ebx, edx
.text:00406026                 shr     ecx, 10h
.text:00406029                 or      ebx, ecx
.text:0040602B                 mov     [ebp+0Ch], ebx
.text:0040602E                 mov     ecx, [edi+10h]
.text:00406031                 mov     esi, ecx
.text:00406033                 mov     ebx, ecx
.text:00406035                 and     esi, 0FF00h
.text:0040603B                 shl     esi, 8
.text:0040603E                 shl     ebx, 18h
.text:00406041                 or      ebx, esi
.text:00406043                 shr     ecx, 8
.text:00406046                 mov     edx, ecx
.text:00406048                 and     edx, 0FF00h
.text:0040604E                 shr     ecx, 10h
.text:00406051                 or      ebx, edx
.text:00406053                 or      ebx, ecx
.text:00406055                 mov     [ebp+10h], ebx
.text:00406058                 add     esp, 0Ch
.text:0040605B                 pop     ebx
.text:0040605C                 pop     esi
.text:0040605D                 pop     edi
.text:0040605E                 pop     ebp
.text:0040605F                 retn
.text:00406060 ; ---------------------------------------------------------------------------
.text:00406060                 push    ebp
.text:00406061                 push    edi
.text:00406062                 push    esi
.text:00406063                 push    ebx
.text:00406064                 sub     esp, 0BCh
.text:0040606A                 mov     edx, [esp+0D0h]
.text:00406071                 mov     dword ptr [esp+10h], 67452301h
.text:00406079                 mov     ecx, [esp+0D4h]
.text:00406080                 lea     edi, [esp+10h]
.text:00406084                 mov     dword ptr [esp+14h], 0EFCDAB89h
.text:0040608C                 mov     ebp, [esp+0D8h]
.text:00406093                 mov     [esp], edx
.text:00406096                 mov     dword ptr [esp+18h], 98BADCFEh
.text:0040609E                 mov     dword ptr [esp+1Ch], 10325476h
.text:004060A6                 mov     dword ptr [esp+20h], 0C3D2E1F0h
.text:004060AE                 mov     dword ptr [esp+28h], 0
.text:004060B6                 mov     dword ptr [esp+24h], 0
.text:004060BE                 mov     dword ptr [esp+2Ch], 0
.text:004060C6                 mov     [esp+8], edi
.text:004060CA                 mov     [esp+4], ecx
.text:004060CE                 call    sub_404180
.text:004060D3                 mov     ebx, [esp+2Ch]
.text:004060D7                 mov     edx, [esp+24h]
.text:004060DB                 add     edx, ebx
.text:004060DD                 mov     [esp+24h], edx
.text:004060E1                 cmp     edx, ebx
.text:004060E3                 jnb     short loc_4060E9
.text:004060E5                 inc     dword ptr [esp+28h]
.text:004060E9
.text:004060E9 loc_4060E9:                             ; CODE XREF: .text:004060E3↑j
.text:004060E9                 cmp     ebx, 37h ; '7'
.text:004060EC                 mov     esi, 78h ; 'x'
.text:004060F1                 ja      short loc_4060F8
.text:004060F3                 mov     esi, 38h ; '8'
.text:004060F8
.text:004060F8 loc_4060F8:                             ; CODE XREF: .text:004060F1↑j
.text:004060F8                 mov     dword ptr [esp+4], offset dword_403E60
.text:00406100                 lea     edx, [ebx+edi+20h]
.text:00406104                 sub     esi, ebx
.text:00406106                 mov     [esp+8], esi
.text:0040610A                 add     ebx, esi
.text:0040610C                 lea     esi, [ebx+edi]
.text:0040610F                 mov     [esp], edx
.text:00406112                 add     ebx, 8
.text:00406115                 call    memcpy
.text:0040611A                 mov     ecx, [edi+14h]
.text:0040611D                 lea     edx, ds:0[ecx*8]
.text:00406124                 mov     eax, edx
.text:00406126                 and     eax, 0FF00h
.text:0040612B                 shl     ecx, 1Bh
.text:0040612E                 shl     eax, 8
.text:00406131                 shr     edx, 8
.text:00406134                 or      ecx, eax
.text:00406136                 mov     eax, edx
.text:00406138                 and     eax, 0FF00h
.text:0040613D                 shr     edx, 10h
.text:00406140                 or      ecx, eax
.text:00406142                 or      ecx, edx
.text:00406144                 mov     [esi+24h], ecx
.text:00406147                 mov     edx, [edi+18h]
.text:0040614A                 mov     ecx, [edi+14h]
.text:0040614D                 shl     edx, 3
.text:00406150                 shr     ecx, 1Dh
.text:00406153                 or      edx, ecx
.text:00406155                 mov     eax, edx
.text:00406157                 mov     ecx, edx
.text:00406159                 and     eax, 0FF00h
.text:0040615E                 shl     eax, 8
.text:00406161                 shr     edx, 8
.text:00406164                 shl     ecx, 18h
.text:00406167                 or      ecx, eax
.text:00406169                 mov     eax, edx
.text:0040616B                 and     eax, 0FF00h
.text:00406170                 or      ecx, eax
.text:00406172                 shr     edx, 10h
.text:00406175                 or      ecx, edx
.text:00406177                 mov     [esi+20h], ecx
.text:0040617A                 mov     [esp+4], ebx
.text:0040617E                 lea     ebx, [edi+20h]
.text:00406181                 mov     [esp+8], edi
.text:00406185                 mov     [esp], ebx
.text:00406188                 call    sub_404370
.text:0040618D                 mov     ecx, [edi]
.text:0040618F                 mov     eax, ebp
.text:00406191                 mov     edx, ecx
.text:00406193                 mov     ebx, ecx
.text:00406195                 and     edx, 0FF00h
.text:0040619B                 shr     ecx, 8
.text:0040619E                 shl     edx, 8
.text:004061A1                 mov     esi, ecx
.text:004061A3                 shl     ebx, 18h
.text:004061A6                 and     esi, 0FF00h
.text:004061AC                 or      ebx, edx
.text:004061AE                 or      ebx, esi
.text:004061B0                 shr     ecx, 10h
.text:004061B3                 or      ebx, ecx
.text:004061B5                 mov     [ebp+0], ebx
.text:004061B8                 mov     ecx, [edi+4]
.text:004061BB                 mov     edx, ecx
.text:004061BD                 mov     ebx, ecx
.text:004061BF                 and     edx, 0FF00h
.text:004061C5                 shr     ecx, 8
.text:004061C8                 shl     edx, 8
.text:004061CB                 mov     esi, ecx
.text:004061CD                 shl     ebx, 18h
.text:004061D0                 or      ebx, edx
.text:004061D2                 and     esi, 0FF00h
.text:004061D8                 or      ebx, esi
.text:004061DA                 shr     ecx, 10h
.text:004061DD                 or      ebx, ecx
.text:004061DF                 mov     [ebp+4], ebx
.text:004061E2                 mov     ecx, [edi+8]
.text:004061E5                 mov     edx, ecx
.text:004061E7                 mov     ebx, ecx
.text:004061E9                 and     edx, 0FF00h
.text:004061EF                 shr     ecx, 8
.text:004061F2                 shl     edx, 8
.text:004061F5                 mov     esi, ecx
.text:004061F7                 shl     ebx, 18h
.text:004061FA                 or      ebx, edx
.text:004061FC                 and     esi, 0FF00h
.text:00406202                 or      ebx, esi
.text:00406204                 shr     ecx, 10h
.text:00406207                 or      ebx, ecx
.text:00406209                 mov     [ebp+8], ebx
.text:0040620C                 mov     ecx, [edi+0Ch]
.text:0040620F                 mov     edx, ecx
.text:00406211                 mov     ebx, ecx
.text:00406213                 and     edx, 0FF00h
.text:00406219                 shr     ecx, 8
.text:0040621C                 shl     edx, 8
.text:0040621F                 mov     esi, ecx
.text:00406221                 shl     ebx, 18h
.text:00406224                 or      ebx, edx
.text:00406226                 and     esi, 0FF00h
.text:0040622C                 or      ebx, esi
.text:0040622E                 shr     ecx, 10h
.text:00406231                 or      ebx, ecx
.text:00406233                 mov     [ebp+0Ch], ebx
.text:00406236                 mov     esi, [edi+10h]
.text:00406239                 mov     edx, esi
.text:0040623B                 mov     ebx, esi
.text:0040623D                 and     edx, 0FF00h
.text:00406243                 shl     ebx, 18h
.text:00406246                 shl     edx, 8
.text:00406249                 or      ebx, edx
.text:0040624B                 shr     esi, 8
.text:0040624E                 mov     edi, esi
.text:00406250                 and     edi, 0FF00h
.text:00406256                 shr     esi, 10h
.text:00406259                 or      ebx, edi
.text:0040625B                 or      ebx, esi
.text:0040625D                 mov     [ebp+10h], ebx
.text:00406260                 add     esp, 0BCh
.text:00406266                 pop     ebx
.text:00406267                 pop     esi
.text:00406268                 pop     edi
.text:00406269                 pop     ebp
.text:0040626A                 retn
.text:0040626A ; ---------------------------------------------------------------------------
.text:0040626B                 align 20h
.text:00406280 dword_406280    dd 80h, 0Fh dup(0)      ; DATA XREF: sub_4062C0:loc_4063AE↓o
.text:00406280                                         ; .text:loc_406E80↓o ...
.text:004062C0
.text:004062C0 ; =============== S U B R O U T I N E =======================================
.text:004062C0
.text:004062C0
.text:004062C0 sub_4062C0      proc near               ; DATA XREF: sub_4019A0+370↑o
.text:004062C0                                         ; sub_4019A0+4BA↑o
.text:004062C0
.text:004062C0 Buffer          = dword ptr -111Ch
.text:004062C0 ElementSize     = dword ptr -1118h
.text:004062C0 ElementCount    = dword ptr -1114h
.text:004062C0 Stream          = dword ptr -1110h
.text:004062C0 var_110C        = byte ptr -110Ch
.text:004062C0 var_BC          = dword ptr -0BCh
.text:004062C0 var_B8          = dword ptr -0B8h
.text:004062C0 var_B4          = dword ptr -0B4h
.text:004062C0 var_B0          = dword ptr -0B0h
.text:004062C0 var_AC          = dword ptr -0ACh
.text:004062C0 var_A8          = dword ptr -0A8h
.text:004062C0 var_A4          = dword ptr -0A4h
.text:004062C0 arg_0           = dword ptr  4
.text:004062C0 arg_4           = dword ptr  8
.text:004062C0
.text:004062C0                 push    ebp
.text:004062C1                 mov     eax, 110Ch
.text:004062C6                 push    edi
.text:004062C7                 push    esi
.text:004062C8                 push    ebx             ; Size
.text:004062C9                 call    __alloca
.text:004062CE                 mov     esi, [esp+111Ch+arg_0]
.text:004062D5                 xor     edx, edx
.text:004062D7                 mov     edi, 0EFCDAB89h
.text:004062DC                 mov     [esp+111Ch+var_A8], edx
.text:004062E3                 mov     ebp, 67452301h
.text:004062E8                 mov     ebx, 98BADCFEh
.text:004062ED                 mov     [esp+111Ch+var_B8], edi
.text:004062F4                 mov     ecx, 10325476h
.text:004062F9                 xor     eax, eax
.text:004062FB                 mov     [esp+111Ch+var_BC], ebp
.text:00406302                 xor     edx, edx
.text:00406304                 lea     edi, [esp+111Ch+var_110C]
.text:00406308                 mov     [esp+111Ch+var_B4], ebx
.text:0040630F                 mov     [esp+111Ch+var_B0], ecx
.text:00406316                 mov     [esp+111Ch+var_AC], eax
.text:0040631D                 mov     [esp+111Ch+var_A4], edx
.text:00406324
.text:00406324 loc_406324:                             ; CODE XREF: sub_4062C0+1AA↓j
.text:00406324                 xor     ebx, ebx
.text:00406326                 lea     esi, [esi+0]
.text:00406329                 lea     edi, [edi+0]
.text:00406330
.text:00406330 loc_406330:                             ; CODE XREF: sub_4062C0+AC↓j
.text:00406330                 mov     [esp+111Ch+Stream], esi ; Stream
.text:00406334                 mov     ecx, 1000h
.text:00406339                 lea     edx, [ebx+edi]
.text:0040633C                 mov     [esp+111Ch+ElementSize], 1 ; ElementSize
.text:00406344                 sub     ecx, ebx
.text:00406346                 mov     [esp+111Ch+ElementCount], ecx ; ElementCount
.text:0040634A                 mov     [esp+111Ch+Buffer], edx ; Buffer
.text:0040634D                 call    fread
.text:00406352                 add     ebx, eax
.text:00406354                 cmp     ebx, 1000h
.text:0040635A                 jz      loc_40644F
.text:00406360                 test    eax, eax
.text:00406362                 jz      loc_40643E
.text:00406368                 test    byte ptr [esi+0Ch], 10h
.text:0040636C                 jz      short loc_406330
.text:0040636E
.text:0040636E loc_40636E:                             ; CODE XREF: sub_4062C0+182↓j
.text:0040636E                 test    ebx, ebx
.text:00406370                 lea     ebp, [esp+111Ch+var_BC]
.text:00406377                 jnz     loc_406429
.text:0040637D
.text:0040637D loc_40637D:                             ; CODE XREF: sub_4062C0+179↓j
.text:0040637D                 mov     ebx, [esp+111Ch+var_A4]
.text:00406384                 mov     esi, [esp+111Ch+var_AC]
.text:0040638B                 add     esi, ebx
.text:0040638D                 mov     [esp+111Ch+var_AC], esi
.text:00406394                 cmp     esi, ebx
.text:00406396                 jnb     short loc_40639F
.text:00406398                 inc     [esp+111Ch+var_A8]
.text:0040639F
.text:0040639F loc_40639F:                             ; CODE XREF: sub_4062C0+D6↑j
.text:0040639F                 cmp     ebx, 37h ; '7'
.text:004063A2                 mov     esi, 78h ; 'x'
.text:004063A7                 ja      short loc_4063AE
.text:004063A9                 mov     esi, 38h ; '8'
.text:004063AE
.text:004063AE loc_4063AE:                             ; CODE XREF: sub_4062C0+E7↑j
.text:004063AE                 mov     [esp+111Ch+ElementSize], offset dword_406280 ; Src
.text:004063B6                 sub     esi, ebx
.text:004063B8                 lea     edi, [ebx+ebp+1Ch]
.text:004063BC                 mov     [esp+111Ch+ElementCount], esi ; Size
.text:004063C0                 mov     [esp+111Ch+Buffer], edi ; void *
.text:004063C3                 lea     edi, [esi+ebx]
.text:004063C6                 call    memcpy
.text:004063CB                 mov     ebx, [ebp+10h]
.text:004063CE                 lea     ecx, [edi+ebp]
.text:004063D1                 add     edi, 8
.text:004063D4                 shl     ebx, 3
.text:004063D7                 mov     [ecx+1Ch], ebx
.text:004063DA                 mov     esi, [ebp+14h]
.text:004063DD                 lea     ebx, [ebp+1Ch]
.text:004063E0                 mov     edx, [ebp+10h]
.text:004063E3                 shl     esi, 3
.text:004063E6                 shr     edx, 1Dh
.text:004063E9                 or      esi, edx
.text:004063EB                 mov     [ecx+20h], esi
.text:004063EE                 mov     [esp+111Ch+ElementSize], edi
.text:004063F2                 mov     [esp+111Ch+Buffer], ebx
.text:004063F5                 mov     [esp+111Ch+ElementCount], ebp
.text:004063F9                 call    sub_406660
.text:004063FE                 mov     esi, [ebp+0]
.text:00406401                 xor     eax, eax
.text:00406403                 mov     ebx, [esp+111Ch+arg_4]
.text:0040640A                 mov     [ebx], esi
.text:0040640C                 mov     ecx, [ebp+4]
.text:0040640F                 mov     [ebx+4], ecx
.text:00406412                 mov     edx, [ebp+8]
.text:00406415                 mov     [ebx+8], edx
.text:00406418                 mov     edi, [ebp+0Ch]
.text:0040641B                 mov     [ebx+0Ch], edi
.text:0040641E
.text:0040641E loc_40641E:                             ; CODE XREF: sub_4062C0+18D↓j
.text:0040641E                 add     esp, 110Ch
.text:00406424                 pop     ebx
.text:00406425                 pop     esi
.text:00406426                 pop     edi
.text:00406427                 pop     ebp
.text:00406428                 retn
.text:00406429 ; ---------------------------------------------------------------------------
.text:00406429
.text:00406429 loc_406429:                             ; CODE XREF: sub_4062C0+B7↑j
.text:00406429                 mov     [esp+111Ch+ElementCount], ebp ; int
.text:0040642D                 mov     [esp+111Ch+ElementSize], ebx ; size_t
.text:00406431                 mov     [esp+111Ch+Buffer], edi ; void *
.text:00406434                 call    sub_406470
.text:00406439                 jmp     loc_40637D
.text:0040643E ; ---------------------------------------------------------------------------
.text:0040643E
.text:0040643E loc_40643E:                             ; CODE XREF: sub_4062C0+A2↑j
.text:0040643E                 test    byte ptr [esi+0Ch], 20h
.text:00406442                 jz      loc_40636E
.text:00406448                 mov     eax, 1
.text:0040644D                 jmp     short loc_40641E
.text:0040644F ; ---------------------------------------------------------------------------
.text:0040644F
.text:0040644F loc_40644F:                             ; CODE XREF: sub_4062C0+9A↑j
.text:0040644F                 mov     [esp+111Ch+ElementSize], 1000h
.text:00406457                 lea     eax, [esp+111Ch+var_BC]
.text:0040645E                 mov     [esp+111Ch+ElementCount], eax
.text:00406462                 mov     [esp+111Ch+Buffer], edi
.text:00406465                 call    sub_406660
.text:0040646A                 jmp     loc_406324
.text:0040646A sub_4062C0      endp
.text:0040646A
.text:0040646A ; ---------------------------------------------------------------------------
.text:0040646F                 align 10h
.text:00406470
.text:00406470 ; =============== S U B R O U T I N E =======================================
.text:00406470
.text:00406470
.text:00406470 ; int __cdecl sub_406470(void *, size_t, int)
.text:00406470 sub_406470      proc near               ; CODE XREF: sub_4062C0+174↑p
.text:00406470                                         ; .text:00406F66↓p
.text:00406470
.text:00406470 var_2C          = dword ptr -2Ch
.text:00406470 Src             = dword ptr -28h
.text:00406470 Size            = dword ptr -24h
.text:00406470 var_14          = dword ptr -14h
.text:00406470 arg_0           = dword ptr  4
.text:00406470 arg_4           = dword ptr  8
.text:00406470 arg_8           = dword ptr  0Ch
.text:00406470
.text:00406470                 push    ebp
.text:00406471                 push    edi
.text:00406472                 push    esi
.text:00406473                 push    ebx
.text:00406474                 sub     esp, 1Ch
.text:00406477                 mov     edx, [esp+2Ch+arg_8]
.text:0040647B                 mov     esi, [esp+2Ch+arg_0]
.text:0040647F                 mov     edi, [esp+2Ch+arg_4]
.text:00406483                 mov     ebx, [edx+18h]
.text:00406486                 test    ebx, ebx
.text:00406488                 jz      short loc_4064E1
.text:0040648A                 mov     [esp+2Ch+var_14], 80h ; '€'
.text:00406492                 sub     [esp+2Ch+var_14], ebx
.text:00406496                 cmp     [esp+2Ch+var_14], edi
.text:0040649A                 jbe     short loc_4064A0
.text:0040649C                 mov     [esp+2Ch+var_14], edi
.text:004064A0
.text:004064A0 loc_4064A0:                             ; CODE XREF: sub_406470+2A↑j
.text:004064A0                 mov     [esp+2Ch+Src], esi ; Src
.text:004064A4                 mov     ecx, [esp+2Ch+arg_8]
.text:004064A8                 mov     eax, [esp+2Ch+var_14]
.text:004064AC                 lea     ebp, [ebx+ecx+1Ch]
.text:004064B0                 mov     [esp+2Ch+var_2C], ebp ; void *
.text:004064B3                 mov     [esp+2Ch+Size], eax ; Size
.text:004064B7                 call    memcpy
.text:004064BC                 mov     edx, [esp+2Ch+arg_8]
.text:004064C0                 mov     eax, [esp+2Ch+var_14]
.text:004064C4                 mov     ebp, [edx+18h]
.text:004064C7                 add     eax, ebp
.text:004064C9                 cmp     eax, 40h ; '@'
.text:004064CC                 mov     [edx+18h], eax
.text:004064CF                 ja      loc_406610
.text:004064D5
.text:004064D5 loc_4064D5:                             ; CODE XREF: sub_406470+1E7↓j
.text:004064D5                 mov     ecx, [esp+2Ch+var_14]
.text:004064D9                 mov     ebp, [esp+2Ch+var_14]
.text:004064DD                 add     esi, ecx
.text:004064DF                 sub     edi, ebp
.text:004064E1
.text:004064E1 loc_4064E1:                             ; CODE XREF: sub_406470+18↑j
.text:004064E1                 cmp     edi, 3Fh ; '?'
.text:004064E4                 jbe     short loc_406540
.text:004064E6                 test    esi, 3
.text:004064EC                 jz      loc_4065ED
.text:004064F2                 cmp     edi, 40h ; '@'
.text:004064F5                 jbe     short loc_406540
.text:004064F7                 mov     ebx, [esp+2Ch+arg_8]
.text:004064FB                 lea     ebp, [ebx+1Ch]
.text:004064FE                 mov     esi, esi
.text:00406500
.text:00406500 loc_406500:                             ; CODE XREF: sub_406470+C5↓j
.text:00406500                 mov     [esp+2Ch+Src], esi ; Src
.text:00406504                 sub     edi, 40h ; '@'
.text:00406507                 add     esi, 40h ; '@'
.text:0040650A                 mov     [esp+2Ch+Size], 40h ; '@' ; Size
.text:00406512                 mov     [esp+2Ch+var_2C], ebp ; void *
.text:00406515                 call    memcpy
.text:0040651A                 mov     [esp+2Ch+var_2C], eax
.text:0040651D                 mov     ecx, [esp+2Ch+arg_8]
.text:00406521                 mov     [esp+2Ch+Src], 40h ; '@'
.text:00406529                 mov     [esp+2Ch+Size], ecx
.text:0040652D                 call    sub_406660
.text:00406532                 cmp     edi, 40h ; '@'
.text:00406535                 ja      short loc_406500
.text:00406537                 mov     esi, esi
.text:00406539                 lea     edi, [edi+0]
.text:00406540
.text:00406540 loc_406540:                             ; CODE XREF: sub_406470+74↑j
.text:00406540                                         ; sub_406470+85↑j ...
.text:00406540                 test    edi, edi
.text:00406542                 jnz     short loc_406550
.text:00406544
.text:00406544 loc_406544:                             ; CODE XREF: sub_406470+109↓j
.text:00406544                 add     esp, 1Ch
.text:00406547                 pop     ebx
.text:00406548                 pop     esi
.text:00406549                 pop     edi
.text:0040654A                 pop     ebp
.text:0040654B                 retn
.text:0040654B ; ---------------------------------------------------------------------------
.text:0040654C                 align 10h
.text:00406550
.text:00406550 loc_406550:                             ; CODE XREF: sub_406470+D2↑j
.text:00406550                 mov     ecx, [esp+2Ch+arg_8]
.text:00406554                 mov     ebx, [ecx+18h]
.text:00406557                 mov     [esp+2Ch+Size], edi ; Size
.text:0040655B                 mov     [esp+2Ch+Src], esi ; Src
.text:0040655F                 lea     edx, [ebx+ecx+1Ch]
.text:00406563                 add     ebx, edi
.text:00406565                 mov     [esp+2Ch+var_2C], edx ; void *
.text:00406568                 call    memcpy
.text:0040656D                 cmp     ebx, 3Fh ; '?'
.text:00406570                 ja      short loc_40657B
.text:00406572
.text:00406572 loc_406572:                             ; CODE XREF: sub_406470+174↓j
.text:00406572                                         ; sub_406470+17B↓j
.text:00406572                 mov     esi, [esp+2Ch+arg_8]
.text:00406576                 mov     [esi+18h], ebx
.text:00406579                 jmp     short loc_406544
.text:0040657B ; ---------------------------------------------------------------------------
.text:0040657B
.text:0040657B loc_40657B:                             ; CODE XREF: sub_406470+100↑j
.text:0040657B                 mov     [esp+2Ch+Src], 40h ; '@'
.text:00406583                 mov     esi, [esp+2Ch+arg_8]
.text:00406587                 sub     ebx, 40h ; '@'
.text:0040658A                 mov     [esp+2Ch+Size], esi
.text:0040658E                 mov     edi, esi
.text:00406590                 add     edi, 1Ch
.text:00406593                 mov     [esp+2Ch+var_2C], edi
.text:00406596                 call    sub_406660
.text:0040659B                 mov     esi, [esp+2Ch+arg_8]
.text:0040659F                 mov     edx, ebx
.text:004065A1                 add     esi, 5Ch ; '\'
.text:004065A4                 cmp     ebx, 7
.text:004065A7                 jbe     short loc_4065C8
.text:004065A9                 test    edi, 4
.text:004065AF                 jz      short loc_4065C8
.text:004065B1                 mov     ebp, [esp+2Ch+arg_8]
.text:004065B5                 lea     edx, [ebx-4]
.text:004065B8                 mov     edi, [ebp+5Ch]
.text:004065BB                 mov     esi, ebp
.text:004065BD                 add     esi, 60h ; '`'
.text:004065C0                 mov     [ebp+1Ch], edi
.text:004065C3                 mov     edi, ebp
.text:004065C5                 add     edi, 20h ; ' '
.text:004065C8
.text:004065C8 loc_4065C8:                             ; CODE XREF: sub_406470+137↑j
.text:004065C8                                         ; sub_406470+13F↑j
.text:004065C8                 cld
.text:004065C9                 mov     ecx, edx
.text:004065CB                 shr     ecx, 2
.text:004065CE                 test    dl, 2
.text:004065D1                 rep movsd
.text:004065D3                 jz      short loc_4065E1
.text:004065D5                 movzx   ecx, word ptr [esi]
.text:004065D8                 add     esi, 2
.text:004065DB                 mov     [edi], cx
.text:004065DE                 add     edi, 2
.text:004065E1
.text:004065E1 loc_4065E1:                             ; CODE XREF: sub_406470+163↑j
.text:004065E1                 test    dl, 1
.text:004065E4                 jz      short loc_406572
.text:004065E6                 movzx   edx, byte ptr [esi]
.text:004065E9                 mov     [edi], dl
.text:004065EB                 jmp     short loc_406572
.text:004065ED ; ---------------------------------------------------------------------------
.text:004065ED
.text:004065ED loc_4065ED:                             ; CODE XREF: sub_406470+7C↑j
.text:004065ED                 mov     [esp+2Ch+var_2C], esi
.text:004065F0                 mov     eax, [esp+2Ch+arg_8]
.text:004065F4                 mov     ebp, edi
.text:004065F6                 and     ebp, 0FFFFFFC0h
.text:004065F9                 and     edi, 3Fh
.text:004065FC                 add     esi, ebp
.text:004065FE                 mov     [esp+2Ch+Size], eax
.text:00406602                 mov     [esp+2Ch+Src], ebp
.text:00406606                 call    sub_406660
.text:0040660B                 jmp     loc_406540
.text:00406610 ; ---------------------------------------------------------------------------
.text:00406610
.text:00406610 loc_406610:                             ; CODE XREF: sub_406470+5F↑j
.text:00406610                 mov     [esp+2Ch+Size], edx
.text:00406614                 mov     ebp, edx
.text:00406616                 and     eax, 0FFFFFFC0h
.text:00406619                 mov     [esp+2Ch+Src], eax
.text:0040661D                 add     ebp, 1Ch
.text:00406620                 mov     [esp+2Ch+var_2C], ebp
.text:00406623                 call    sub_406660
.text:00406628                 mov     edx, [esp+2Ch+arg_8]
.text:0040662C                 mov     ecx, [esp+2Ch+var_14]
.text:00406630                 mov     eax, [edx+18h]
.text:00406633                 and     eax, 3Fh
.text:00406636                 mov     [edx+18h], eax
.text:00406639                 lea     edx, [ecx+ebx]
.text:0040663C                 mov     ecx, [esp+2Ch+arg_8]
.text:00406640                 mov     [esp+2Ch+Size], eax ; Size
.text:00406644                 and     edx, 0FFFFFFC0h
.text:00406647                 mov     [esp+2Ch+var_2C], ebp ; void *
.text:0040664A                 lea     ebx, [edx+ecx+1Ch]
.text:0040664E                 mov     [esp+2Ch+Src], ebx ; Src
.text:00406652                 call    memcpy
.text:00406657                 jmp     loc_4064D5
.text:00406657 sub_406470      endp
.text:00406657
.text:00406657 ; ---------------------------------------------------------------------------
.text:0040665C                 align 10h
.text:00406660
.text:00406660 ; =============== S U B R O U T I N E =======================================
.text:00406660
.text:00406660
.text:00406660 sub_406660      proc near               ; CODE XREF: sub_4062C0+139↑p
.text:00406660                                         ; sub_4062C0+1A5↑p ...
.text:00406660
.text:00406660 var_B4          = dword ptr -0B4h
.text:00406660 var_B0          = dword ptr -0B0h
.text:00406660 var_AC          = dword ptr -0ACh
.text:00406660 var_A8          = dword ptr -0A8h
.text:00406660 var_A4          = dword ptr -0A4h
.text:00406660 var_A0          = dword ptr -0A0h
.text:00406660 var_9C          = dword ptr -9Ch
.text:00406660 var_98          = dword ptr -98h
.text:00406660 var_94          = dword ptr -94h
.text:00406660 var_90          = dword ptr -90h
.text:00406660 var_8C          = dword ptr -8Ch
.text:00406660 var_88          = dword ptr -88h
.text:00406660 var_84          = dword ptr -84h
.text:00406660 var_80          = dword ptr -80h
.text:00406660 var_7C          = dword ptr -7Ch
.text:00406660 var_78          = dword ptr -78h
.text:00406660 var_74          = dword ptr -74h
.text:00406660 var_70          = dword ptr -70h
.text:00406660 var_6C          = dword ptr -6Ch
.text:00406660 var_60          = dword ptr -60h
.text:00406660 var_5C          = dword ptr -5Ch
.text:00406660 var_58          = dword ptr -58h
.text:00406660 var_54          = dword ptr -54h
.text:00406660 var_50          = dword ptr -50h
.text:00406660 var_4C          = dword ptr -4Ch
.text:00406660 var_48          = dword ptr -48h
.text:00406660 var_44          = dword ptr -44h
.text:00406660 var_40          = dword ptr -40h
.text:00406660 var_3C          = dword ptr -3Ch
.text:00406660 var_38          = dword ptr -38h
.text:00406660 var_34          = dword ptr -34h
.text:00406660 var_30          = dword ptr -30h
.text:00406660 var_2C          = dword ptr -2Ch
.text:00406660 var_28          = dword ptr -28h
.text:00406660 var_24          = dword ptr -24h
.text:00406660 var_20          = dword ptr -20h
.text:00406660 arg_0           = dword ptr  4
.text:00406660 arg_4           = dword ptr  8
.text:00406660 arg_8           = dword ptr  0Ch
.text:00406660
.text:00406660                 push    ebp
.text:00406661                 push    edi
.text:00406662                 push    esi
.text:00406663                 push    ebx
.text:00406664                 sub     esp, 0ACh
.text:0040666A                 mov     edx, [esp+0BCh+arg_4]
.text:00406671                 mov     ecx, [esp+0BCh+arg_0]
.text:00406678                 mov     eax, [esp+0BCh+arg_4]
.text:0040667F                 and     edx, 0FFFFFFFCh
.text:00406682                 add     edx, ecx
.text:00406684                 mov     [esp+0BCh+var_60], edx
.text:00406688                 mov     edx, [esp+0BCh+arg_8]
.text:0040668F                 mov     edi, [edx]
.text:00406691                 add     eax, [edx+10h]
.text:00406694                 mov     ebp, [edx+4]
.text:00406697                 mov     esi, [edx+8]
.text:0040669A                 mov     ebx, [edx+0Ch]
.text:0040669D                 mov     [edx+10h], eax
.text:004066A0                 mov     edx, [esp+0BCh+arg_4]
.text:004066A7                 cmp     eax, edx
.text:004066A9                 jnb     short loc_4066B5
.text:004066AB                 mov     edx, [esp+0BCh+arg_8]
.text:004066B2                 inc     dword ptr [edx+14h]
.text:004066B5
.text:004066B5 loc_4066B5:                             ; CODE XREF: sub_406660+49↑j
.text:004066B5                 cmp     ecx, [esp+0BCh+var_60]
.text:004066B9                 jnb     loc_406DCC
.text:004066BF                 nop
.text:004066C0
.text:004066C0 loc_4066C0:                             ; CODE XREF: sub_406660+6D2↓j
.text:004066C0                 mov     [esp+0BCh+var_6C], edi
.text:004066C4                 mov     eax, esi
.text:004066C6                 mov     edx, [ecx]
.text:004066C8                 mov     [esp+0BCh+var_78], ebx
.text:004066CC                 xor     eax, ebx
.text:004066CE                 add     ecx, 4
.text:004066D1                 mov     [esp+0BCh+var_74], esi
.text:004066D5                 and     eax, ebp
.text:004066D7                 xor     eax, ebx
.text:004066D9                 mov     [esp+0BCh+var_7C], edx
.text:004066DD                 add     eax, edx
.text:004066DF                 lea     edi, [eax+edi-28955B88h]
.text:004066E6                 mov     [esp+0BCh+var_70], ebp
.text:004066EA                 rol     edi, 7
.text:004066ED                 mov     eax, ebp
.text:004066EF                 add     edi, ebp
.text:004066F1                 mov     edx, [ecx]
.text:004066F3                 xor     eax, esi
.text:004066F5                 and     eax, edi
.text:004066F7                 add     ecx, 4
.text:004066FA                 xor     eax, esi
.text:004066FC                 mov     [esp+0BCh+var_80], edx
.text:00406700                 add     eax, edx
.text:00406702                 lea     ebx, [eax+ebx-173848AAh]
.text:00406709                 rol     ebx, 0Ch
.text:0040670C                 mov     eax, edi
.text:0040670E                 mov     edx, [ecx]
.text:00406710                 add     ebx, edi
.text:00406712                 xor     eax, ebp
.text:00406714                 and     eax, ebx
.text:00406716                 mov     [esp+0BCh+var_84], edx
.text:0040671A                 xor     eax, ebp
.text:0040671C                 add     ecx, 4
.text:0040671F                 add     eax, edx
.text:00406721                 lea     esi, [eax+esi+242070DBh]
.text:00406728                 mov     edx, [ecx]
.text:0040672A                 rol     esi, 11h
.text:0040672D                 mov     eax, ebx
.text:0040672F                 add     esi, ebx
.text:00406731                 mov     [esp+0BCh+var_88], edx
.text:00406735                 xor     eax, edi
.text:00406737                 add     ecx, 4
.text:0040673A                 and     eax, esi
.text:0040673C                 xor     eax, edi
.text:0040673E                 add     eax, edx
.text:00406740                 lea     ebp, [eax+ebp-3E423112h]
.text:00406747                 mov     edx, [ecx]
.text:00406749                 rol     ebp, 16h
.text:0040674C                 mov     eax, esi
.text:0040674E                 add     ebp, esi
.text:00406750                 xor     eax, ebx
.text:00406752                 mov     [esp+0BCh+var_8C], edx
.text:00406756                 and     eax, ebp
.text:00406758                 add     ecx, 4
.text:0040675B                 xor     eax, ebx
.text:0040675D                 add     eax, edx
.text:0040675F                 lea     edi, [eax+edi-0A83F051h]
.text:00406766                 rol     edi, 7
.text:00406769                 mov     eax, ebp
.text:0040676B                 mov     edx, [ecx]
.text:0040676D                 add     edi, ebp
.text:0040676F                 xor     eax, esi
.text:00406771                 and     eax, edi
.text:00406773                 mov     [esp+0BCh+var_90], edx
.text:00406777                 xor     eax, esi
.text:00406779                 add     ecx, 4
.text:0040677C                 add     eax, edx
.text:0040677E                 lea     ebx, [eax+ebx+4787C62Ah]
.text:00406785                 mov     edx, [ecx]
.text:00406787                 rol     ebx, 0Ch
.text:0040678A                 mov     eax, edi
.text:0040678C                 add     ebx, edi
.text:0040678E                 mov     [esp+0BCh+var_94], edx
.text:00406792                 xor     eax, ebp
.text:00406794                 add     ecx, 4
.text:00406797                 and     eax, ebx
.text:00406799                 xor     eax, ebp
.text:0040679B                 add     eax, edx
.text:0040679D                 lea     esi, [eax+esi-57CFB9EDh]
.text:004067A4                 mov     edx, [ecx]
.text:004067A6                 rol     esi, 11h
.text:004067A9                 mov     eax, ebx
.text:004067AB                 add     esi, ebx
.text:004067AD                 xor     eax, edi
.text:004067AF                 mov     [esp+0BCh+var_98], edx
.text:004067B3                 and     eax, esi
.text:004067B5                 add     ecx, 4
.text:004067B8                 xor     eax, edi
.text:004067BA                 add     eax, edx
.text:004067BC                 lea     ebp, [eax+ebp-2B96AFFh]
.text:004067C3                 rol     ebp, 16h
.text:004067C6                 mov     eax, esi
.text:004067C8                 mov     edx, [ecx]
.text:004067CA                 add     ebp, esi
.text:004067CC                 xor     eax, ebx
.text:004067CE                 and     eax, ebp
.text:004067D0                 mov     [esp+0BCh+var_9C], edx
.text:004067D4                 xor     eax, ebx
.text:004067D6                 add     ecx, 4
.text:004067D9                 add     eax, edx
.text:004067DB                 lea     edi, [eax+edi+698098D8h]
.text:004067E2                 mov     edx, [ecx]
.text:004067E4                 rol     edi, 7
.text:004067E7                 mov     eax, ebp
.text:004067E9                 add     edi, ebp
.text:004067EB                 mov     [esp+0BCh+var_A0], edx
.text:004067EF                 xor     eax, esi
.text:004067F1                 and     eax, edi
.text:004067F3                 xor     eax, esi
.text:004067F5                 add     eax, edx
.text:004067F7                 lea     ebx, [eax+ebx-74BB0851h]
.text:004067FE                 add     ecx, 4
.text:00406801                 rol     ebx, 0Ch
.text:00406804                 mov     eax, edi
.text:00406806                 add     ebx, edi
.text:00406808                 mov     edx, [ecx]
.text:0040680A                 xor     eax, ebp
.text:0040680C                 and     eax, ebx
.text:0040680E                 add     ecx, 4
.text:00406811                 xor     eax, ebp
.text:00406813                 mov     [esp+0BCh+var_A4], edx
.text:00406817                 add     eax, edx
.text:00406819                 lea     esi, [eax+esi-0A44Fh]
.text:00406820                 rol     esi, 11h
.text:00406823                 mov     eax, ebx
.text:00406825                 mov     edx, [ecx]
.text:00406827                 add     esi, ebx
.text:00406829                 xor     eax, edi
.text:0040682B                 and     eax, esi
.text:0040682D                 mov     [esp+0BCh+var_A8], edx
.text:00406831                 xor     eax, edi
.text:00406833                 add     ecx, 4
.text:00406836                 add     eax, edx
.text:00406838                 lea     ebp, [eax+ebp-76A32842h]
.text:0040683F                 mov     edx, [ecx]
.text:00406841                 rol     ebp, 16h
.text:00406844                 mov     eax, esi
.text:00406846                 add     ebp, esi
.text:00406848                 mov     [esp+0BCh+var_AC], edx
.text:0040684C                 xor     eax, ebx
.text:0040684E                 add     ecx, 4
.text:00406851                 and     eax, ebp
.text:00406853                 xor     eax, ebx
.text:00406855                 add     eax, edx
.text:00406857                 lea     edi, [eax+edi+6B901122h]
.text:0040685E                 mov     edx, [ecx]
.text:00406860                 rol     edi, 7
.text:00406863                 mov     eax, ebp
.text:00406865                 add     edi, ebp
.text:00406867                 xor     eax, esi
.text:00406869                 mov     [esp+0BCh+var_B0], edx
.text:0040686D                 and     eax, edi
.text:0040686F                 add     ecx, 4
.text:00406872                 xor     eax, esi
.text:00406874                 add     eax, edx
.text:00406876                 lea     ebx, [eax+ebx-2678E6Dh]
.text:0040687D                 rol     ebx, 0Ch
.text:00406880                 mov     eax, edi
.text:00406882                 mov     edx, [ecx]
.text:00406884                 add     ebx, edi
.text:00406886                 xor     eax, ebp
.text:00406888                 and     eax, ebx
.text:0040688A                 mov     [esp+0BCh+var_B4], edx
.text:0040688E                 xor     eax, ebp
.text:00406890                 add     ecx, 4
.text:00406893                 add     eax, edx
.text:00406895                 lea     esi, [eax+esi-5986BC72h]
.text:0040689C                 mov     edx, [ecx]
.text:0040689E                 rol     esi, 11h
.text:004068A1                 mov     eax, ebx
.text:004068A3                 add     esi, ebx
.text:004068A5                 xor     eax, edi
.text:004068A7                 add     ecx, 4
.text:004068AA                 and     eax, esi
.text:004068AC                 xor     eax, edi
.text:004068AE                 add     eax, edx
.text:004068B0                 lea     ebp, [eax+ebp+49B40821h]
.text:004068B7                 rol     ebp, 16h
.text:004068BA                 add     ebp, esi
.text:004068BC                 mov     eax, ebp
.text:004068BE                 xor     eax, esi
.text:004068C0                 and     eax, ebx
.text:004068C2                 xor     eax, esi
.text:004068C4                 add     eax, [esp+0BCh+var_80]
.text:004068C8                 lea     edi, [eax+edi-9E1DA9Eh]
.text:004068CF                 rol     edi, 5
.text:004068D2                 add     edi, ebp
.text:004068D4                 mov     eax, edi
.text:004068D6                 xor     eax, ebp
.text:004068D8                 and     eax, esi
.text:004068DA                 xor     eax, ebp
.text:004068DC                 add     eax, [esp+0BCh+var_94]
.text:004068E0                 lea     ebx, [eax+ebx-3FBF4CC0h]
.text:004068E7                 rol     ebx, 9
.text:004068EA                 add     ebx, edi
.text:004068EC                 mov     eax, ebx
.text:004068EE                 xor     eax, edi
.text:004068F0                 and     eax, ebp
.text:004068F2                 xor     eax, edi
.text:004068F4                 add     eax, [esp+0BCh+var_A8]
.text:004068F8                 lea     esi, [eax+esi+265E5A51h]
.text:004068FF                 rol     esi, 0Eh
.text:00406902                 add     esi, ebx
.text:00406904                 mov     eax, esi
.text:00406906                 xor     eax, ebx
.text:00406908                 and     eax, edi
.text:0040690A                 xor     eax, ebx
.text:0040690C                 add     eax, [esp+0BCh+var_7C]
.text:00406910                 lea     ebp, [eax+ebp-16493856h]
.text:00406917                 rol     ebp, 14h
.text:0040691A                 add     ebp, esi
.text:0040691C                 mov     eax, ebp
.text:0040691E                 xor     eax, esi
.text:00406920                 and     eax, ebx
.text:00406922                 xor     eax, esi
.text:00406924                 add     eax, [esp+0BCh+var_90]
.text:00406928                 lea     edi, [eax+edi-29D0EFA3h]
.text:0040692F                 rol     edi, 5
.text:00406932                 add     edi, ebp
.text:00406934                 mov     eax, edi
.text:00406936                 xor     eax, ebp
.text:00406938                 and     eax, esi
.text:0040693A                 xor     eax, ebp
.text:0040693C                 add     eax, [esp+0BCh+var_A4]
.text:00406940                 lea     ebx, [eax+ebx+2441453h]
.text:00406947                 rol     ebx, 9
.text:0040694A                 add     ebx, edi
.text:0040694C                 mov     eax, ebx
.text:0040694E                 xor     eax, edi
.text:00406950                 and     eax, ebp
.text:00406952                 xor     eax, edi
.text:00406954                 add     eax, edx
.text:00406956                 lea     esi, [eax+esi-275E197Fh]
.text:0040695D                 rol     esi, 0Eh
.text:00406960                 add     esi, ebx
.text:00406962                 mov     eax, esi
.text:00406964                 xor     eax, ebx
.text:00406966                 and     eax, edi
.text:00406968                 xor     eax, ebx
.text:0040696A                 add     eax, [esp+0BCh+var_8C]
.text:0040696E                 lea     ebp, [eax+ebp-182C0438h]
.text:00406975                 rol     ebp, 14h
.text:00406978                 add     ebp, esi
.text:0040697A                 mov     eax, ebp
.text:0040697C                 xor     eax, esi
.text:0040697E                 and     eax, ebx
.text:00406980                 xor     eax, esi
.text:00406982                 add     eax, [esp+0BCh+var_A0]
.text:00406986                 lea     edi, [eax+edi+21E1CDE6h]
.text:0040698D                 rol     edi, 5
.text:00406990                 add     edi, ebp
.text:00406992                 mov     eax, edi
.text:00406994                 xor     eax, ebp
.text:00406996                 and     eax, esi
.text:00406998                 xor     eax, ebp
.text:0040699A                 add     eax, [esp+0BCh+var_B4]
.text:0040699E                 lea     ebx, [eax+ebx-3CC8F82Ah]
.text:004069A5                 rol     ebx, 9
.text:004069A8                 add     ebx, edi
.text:004069AA                 mov     eax, ebx
.text:004069AC                 xor     eax, edi
.text:004069AE                 and     eax, ebp
.text:004069B0                 xor     eax, edi
.text:004069B2                 add     eax, [esp+0BCh+var_88]
.text:004069B6                 lea     esi, [eax+esi-0B2AF279h]
.text:004069BD                 rol     esi, 0Eh
.text:004069C0                 add     esi, ebx
.text:004069C2                 mov     eax, esi
.text:004069C4                 xor     eax, ebx
.text:004069C6                 and     eax, edi
.text:004069C8                 xor     eax, ebx
.text:004069CA                 add     eax, [esp+0BCh+var_9C]
.text:004069CE                 lea     ebp, [eax+ebp+455A14EDh]
.text:004069D5                 rol     ebp, 14h
.text:004069D8                 add     ebp, esi
.text:004069DA                 mov     eax, ebp
.text:004069DC                 xor     eax, esi
.text:004069DE                 and     eax, ebx
.text:004069E0                 xor     eax, esi
.text:004069E2                 add     eax, [esp+0BCh+var_B0]
.text:004069E6                 lea     edi, [eax+edi-561C16FBh]
.text:004069ED                 rol     edi, 5
.text:004069F0                 add     edi, ebp
.text:004069F2                 mov     eax, edi
.text:004069F4                 xor     eax, ebp
.text:004069F6                 and     eax, esi
.text:004069F8                 xor     eax, ebp
.text:004069FA                 add     eax, [esp+0BCh+var_84]
.text:004069FE                 lea     ebx, [eax+ebx-3105C08h]
.text:00406A05                 rol     ebx, 9
.text:00406A08                 add     ebx, edi
.text:00406A0A                 mov     eax, ebx
.text:00406A0C                 xor     eax, edi
.text:00406A0E                 and     eax, ebp
.text:00406A10                 xor     eax, edi
.text:00406A12                 add     eax, [esp+0BCh+var_98]
.text:00406A16                 lea     esi, [eax+esi+676F02D9h]
.text:00406A1D                 rol     esi, 0Eh
.text:00406A20                 add     esi, ebx
.text:00406A22                 mov     eax, esi
.text:00406A24                 xor     eax, ebx
.text:00406A26                 and     eax, edi
.text:00406A28                 xor     eax, ebx
.text:00406A2A                 add     eax, [esp+0BCh+var_AC]
.text:00406A2E                 lea     ebp, [eax+ebp-72D5B376h]
.text:00406A35                 rol     ebp, 14h
.text:00406A38                 add     ebp, esi
.text:00406A3A                 mov     eax, ebp
.text:00406A3C                 xor     eax, esi
.text:00406A3E                 xor     eax, ebx
.text:00406A40                 add     eax, [esp+0BCh+var_90]
.text:00406A44                 lea     edi, [eax+edi-5C6BEh]
.text:00406A4B                 rol     edi, 4
.text:00406A4E                 add     edi, ebp
.text:00406A50                 mov     eax, edi
.text:00406A52                 xor     eax, ebp
.text:00406A54                 xor     eax, esi
.text:00406A56                 add     eax, [esp+0BCh+var_9C]
.text:00406A5A                 lea     ebx, [eax+ebx-788E097Fh]
.text:00406A61                 rol     ebx, 0Bh
.text:00406A64                 add     ebx, edi
.text:00406A66                 mov     eax, ebx
.text:00406A68                 xor     eax, edi
.text:00406A6A                 xor     eax, ebp
.text:00406A6C                 add     eax, [esp+0BCh+var_A8]
.text:00406A70                 lea     esi, [eax+esi+6D9D6122h]
.text:00406A77                 rol     esi, 10h
.text:00406A7A                 add     esi, ebx
.text:00406A7C                 mov     eax, esi
.text:00406A7E                 xor     eax, ebx
.text:00406A80                 xor     eax, edi
.text:00406A82                 add     eax, [esp+0BCh+var_B4]
.text:00406A86                 lea     ebp, [eax+ebp-21AC7F4h]
.text:00406A8D                 rol     ebp, 17h
.text:00406A90                 add     ebp, esi
.text:00406A92                 mov     eax, ebp
.text:00406A94                 xor     eax, esi
.text:00406A96                 xor     eax, ebx
.text:00406A98                 add     eax, [esp+0BCh+var_80]
.text:00406A9C                 lea     edi, [eax+edi-5B4115BCh]
.text:00406AA3                 rol     edi, 4
.text:00406AA6                 add     edi, ebp
.text:00406AA8                 mov     eax, edi
.text:00406AAA                 xor     eax, ebp
.text:00406AAC                 xor     eax, esi
.text:00406AAE                 add     eax, [esp+0BCh+var_8C]
.text:00406AB2                 lea     ebx, [eax+ebx+4BDECFA9h]
.text:00406AB9                 rol     ebx, 0Bh
.text:00406ABC                 add     ebx, edi
.text:00406ABE                 mov     eax, ebx
.text:00406AC0                 xor     eax, edi
.text:00406AC2                 xor     eax, ebp
.text:00406AC4                 add     eax, [esp+0BCh+var_98]
.text:00406AC8                 lea     esi, [eax+esi-944B4A0h]
.text:00406ACF                 rol     esi, 10h
.text:00406AD2                 add     esi, ebx
.text:00406AD4                 mov     eax, esi
.text:00406AD6                 xor     eax, ebx
.text:00406AD8                 xor     eax, edi
.text:00406ADA                 add     eax, [esp+0BCh+var_A4]
.text:00406ADE                 lea     ebp, [eax+ebp-41404390h]
.text:00406AE5                 rol     ebp, 17h
.text:00406AE8                 add     ebp, esi
.text:00406AEA                 mov     eax, ebp
.text:00406AEC                 xor     eax, esi
.text:00406AEE                 xor     eax, ebx
.text:00406AF0                 add     eax, [esp+0BCh+var_B0]
.text:00406AF4                 lea     edi, [eax+edi+289B7EC6h]
.text:00406AFB                 rol     edi, 4
.text:00406AFE                 add     edi, ebp
.text:00406B00                 mov     eax, edi
.text:00406B02                 xor     eax, ebp
.text:00406B04                 xor     eax, esi
.text:00406B06                 add     eax, [esp+0BCh+var_7C]
.text:00406B0A                 lea     ebx, [eax+ebx-155ED806h]
.text:00406B11                 rol     ebx, 0Bh
.text:00406B14                 add     ebx, edi
.text:00406B16                 mov     eax, ebx
.text:00406B18                 xor     eax, edi
.text:00406B1A                 xor     eax, ebp
.text:00406B1C                 add     eax, [esp+0BCh+var_88]
.text:00406B20                 lea     esi, [eax+esi-2B10CF7Bh]
.text:00406B27                 rol     esi, 10h
.text:00406B2A                 add     esi, ebx
.text:00406B2C                 mov     eax, esi
.text:00406B2E                 xor     eax, ebx
.text:00406B30                 xor     eax, edi
.text:00406B32                 add     eax, [esp+0BCh+var_94]
.text:00406B36                 lea     ebp, [eax+ebp+4881D05h]
.text:00406B3D                 rol     ebp, 17h
.text:00406B40                 add     ebp, esi
.text:00406B42                 mov     eax, ebp
.text:00406B44                 xor     eax, esi
.text:00406B46                 xor     eax, ebx
.text:00406B48                 add     eax, [esp+0BCh+var_A0]
.text:00406B4C                 lea     edi, [eax+edi-262B2FC7h]
.text:00406B53                 rol     edi, 4
.text:00406B56                 add     edi, ebp
.text:00406B58                 mov     eax, edi
.text:00406B5A                 xor     eax, ebp
.text:00406B5C                 xor     eax, esi
.text:00406B5E                 add     eax, [esp+0BCh+var_AC]
.text:00406B62                 lea     ebx, [eax+ebx-1924661Bh]
.text:00406B69                 rol     ebx, 0Bh
.text:00406B6C                 add     ebx, edi
.text:00406B6E                 mov     eax, ebx
.text:00406B70                 xor     eax, edi
.text:00406B72                 xor     eax, ebp
.text:00406B74                 add     eax, edx
.text:00406B76                 lea     esi, [eax+esi+1FA27CF8h]
.text:00406B7D                 rol     esi, 10h
.text:00406B80                 add     esi, ebx
.text:00406B82                 mov     eax, esi
.text:00406B84                 xor     eax, ebx
.text:00406B86                 xor     eax, edi
.text:00406B88                 add     eax, [esp+0BCh+var_84]
.text:00406B8C                 lea     ebp, [eax+ebp-3B53A99Bh]
.text:00406B93                 rol     ebp, 17h
.text:00406B96                 mov     eax, ebx
.text:00406B98                 add     ebp, esi
.text:00406B9A                 not     eax
.text:00406B9C                 or      eax, ebp
.text:00406B9E                 xor     eax, esi
.text:00406BA0                 add     eax, [esp+0BCh+var_7C]
.text:00406BA4                 lea     edi, [eax+edi-0BD6DDBCh]
.text:00406BAB                 rol     edi, 6
.text:00406BAE                 mov     eax, esi
.text:00406BB0                 add     edi, ebp
.text:00406BB2                 not     eax
.text:00406BB4                 or      eax, edi
.text:00406BB6                 xor     eax, ebp
.text:00406BB8                 add     eax, [esp+0BCh+var_98]
.text:00406BBC                 lea     ebx, [eax+ebx+432AFF97h]
.text:00406BC3                 rol     ebx, 0Ah
.text:00406BC6                 mov     eax, ebp
.text:00406BC8                 add     ebx, edi
.text:00406BCA                 not     eax
.text:00406BCC                 or      eax, ebx
.text:00406BCE                 xor     eax, edi
.text:00406BD0                 add     eax, [esp+0BCh+var_B4]
.text:00406BD4                 lea     esi, [eax+esi-546BDC59h]
.text:00406BDB                 rol     esi, 0Fh
.text:00406BDE                 mov     eax, edi
.text:00406BE0                 add     esi, ebx
.text:00406BE2                 not     eax
.text:00406BE4                 or      eax, esi
.text:00406BE6                 xor     eax, ebx
.text:00406BE8                 add     eax, [esp+0BCh+var_90]
.text:00406BEC                 lea     ebp, [eax+ebp-36C5FC7h]
.text:00406BF3                 rol     ebp, 15h
.text:00406BF6                 mov     eax, ebx
.text:00406BF8                 add     ebp, esi
.text:00406BFA                 not     eax
.text:00406BFC                 or      eax, ebp
.text:00406BFE                 xor     eax, esi
.text:00406C00                 add     eax, [esp+0BCh+var_AC]
.text:00406C04                 lea     edi, [eax+edi+655B59C3h]
.text:00406C0B                 rol     edi, 6
.text:00406C0E                 mov     eax, esi
.text:00406C10                 add     edi, ebp
.text:00406C12                 not     eax
.text:00406C14                 or      eax, edi
.text:00406C16                 xor     eax, ebp
.text:00406C18                 add     eax, [esp+0BCh+var_88]
.text:00406C1C                 lea     ebx, [eax+ebx-70F3336Eh]
.text:00406C23                 rol     ebx, 0Ah
.text:00406C26                 mov     eax, ebp
.text:00406C28                 add     ebx, edi
.text:00406C2A                 not     eax
.text:00406C2C                 or      eax, ebx
.text:00406C2E                 xor     eax, edi
.text:00406C30                 add     eax, [esp+0BCh+var_A4]
.text:00406C34                 lea     esi, [eax+esi-100B83h]
.text:00406C3B                 rol     esi, 0Fh
.text:00406C3E                 mov     eax, edi
.text:00406C40                 add     esi, ebx
.text:00406C42                 not     eax
.text:00406C44                 or      eax, esi
.text:00406C46                 xor     eax, ebx
.text:00406C48                 add     eax, [esp+0BCh+var_80]
.text:00406C4C                 lea     ebp, [eax+ebp-7A7BA22Fh]
.text:00406C53                 rol     ebp, 15h
.text:00406C56                 mov     eax, ebx
.text:00406C58                 add     ebp, esi
.text:00406C5A                 not     eax
.text:00406C5C                 or      eax, ebp
.text:00406C5E                 xor     eax, esi
.text:00406C60                 add     eax, [esp+0BCh+var_9C]
.text:00406C64                 lea     edi, [eax+edi+6FA87E4Fh]
.text:00406C6B                 rol     edi, 6
.text:00406C6E                 mov     eax, esi
.text:00406C70                 add     edi, ebp
.text:00406C72                 not     eax
.text:00406C74                 or      eax, edi
.text:00406C76                 xor     eax, ebp
.text:00406C78                 add     eax, edx
.text:00406C7A                 lea     ebx, [eax+ebx-1D31920h]
.text:00406C81                 rol     ebx, 0Ah
.text:00406C84                 mov     eax, ebp
.text:00406C86                 add     ebx, edi
.text:00406C88                 not     eax
.text:00406C8A                 or      eax, ebx
.text:00406C8C                 xor     eax, edi
.text:00406C8E                 add     eax, [esp+0BCh+var_94]
.text:00406C92                 lea     esi, [eax+esi-5CFEBCECh]
.text:00406C99                 rol     esi, 0Fh
.text:00406C9C                 mov     eax, edi
.text:00406C9E                 add     esi, ebx
.text:00406CA0                 not     eax
.text:00406CA2                 or      eax, esi
.text:00406CA4                 xor     eax, ebx
.text:00406CA6                 add     eax, [esp+0BCh+var_B0]
.text:00406CAA                 lea     ebp, [eax+ebp+4E0811A1h]
.text:00406CB1                 rol     ebp, 15h
.text:00406CB4                 mov     eax, ebx
.text:00406CB6                 add     ebp, esi
.text:00406CB8                 not     eax
.text:00406CBA                 or      eax, ebp
.text:00406CBC                 xor     eax, esi
.text:00406CBE                 add     eax, [esp+0BCh+var_8C]
.text:00406CC2                 lea     edi, [eax+edi-8AC817Eh]
.text:00406CC9                 rol     edi, 6
.text:00406CCC                 mov     eax, esi
.text:00406CCE                 add     edi, ebp
.text:00406CD0                 not     eax
.text:00406CD2                 or      eax, edi
.text:00406CD4                 xor     eax, ebp
.text:00406CD6                 add     eax, [esp+0BCh+var_A8]
.text:00406CDA                 lea     ebx, [eax+ebx-42C50DCBh]
.text:00406CE1                 rol     ebx, 0Ah
.text:00406CE4                 mov     eax, ebp
.text:00406CE6                 add     ebx, edi
.text:00406CE8                 not     eax
.text:00406CEA                 or      eax, ebx
.text:00406CEC                 xor     eax, edi
.text:00406CEE                 add     eax, [esp+0BCh+var_84]
.text:00406CF2                 lea     esi, [eax+esi+2AD7D2BBh]
.text:00406CF9                 rol     esi, 0Fh
.text:00406CFC                 mov     eax, edi
.text:00406CFE                 add     esi, ebx
.text:00406D00                 not     eax
.text:00406D02                 or      eax, esi
.text:00406D04                 xor     eax, ebx
.text:00406D06                 add     eax, [esp+0BCh+var_A0]
.text:00406D0A                 lea     ebp, [eax+ebp-14792C6Fh]
.text:00406D11                 mov     eax, [esp+0BCh+var_6C]
.text:00406D15                 rol     ebp, 15h
.text:00406D18                 add     ebp, esi
.text:00406D1A                 add     edi, eax
.text:00406D1C                 mov     eax, [esp+0BCh+var_70]
.text:00406D20                 add     ebp, eax
.text:00406D22                 mov     eax, [esp+0BCh+var_74]
.text:00406D26                 add     esi, eax
.text:00406D28                 mov     eax, [esp+0BCh+var_78]
.text:00406D2C                 add     ebx, eax
.text:00406D2E                 cmp     ecx, [esp+0BCh+var_60]
.text:00406D32                 jb      loc_4066C0
.text:00406D38                 mov     [esp+0BCh+var_20], edx
.text:00406D3F                 mov     eax, [esp+0BCh+var_B0]
.text:00406D43                 mov     edx, [esp+0BCh+var_B4]
.text:00406D47                 mov     ecx, [esp+0BCh+var_AC]
.text:00406D4B                 mov     [esp+0BCh+var_28], eax
.text:00406D52                 mov     eax, [esp+0BCh+var_A8]
.text:00406D56                 mov     [esp+0BCh+var_24], edx
.text:00406D5D                 mov     edx, [esp+0BCh+var_A4]
.text:00406D61                 mov     [esp+0BCh+var_2C], ecx
.text:00406D68                 mov     ecx, [esp+0BCh+var_A0]
.text:00406D6C                 mov     [esp+0BCh+var_30], eax
.text:00406D73                 mov     eax, [esp+0BCh+var_98]
.text:00406D77                 mov     [esp+0BCh+var_34], edx
.text:00406D7E                 mov     edx, [esp+0BCh+var_9C]
.text:00406D82                 mov     [esp+0BCh+var_38], ecx
.text:00406D89                 mov     ecx, [esp+0BCh+var_94]
.text:00406D8D                 mov     [esp+0BCh+var_3C], edx
.text:00406D94                 mov     edx, [esp+0BCh+var_8C]
.text:00406D98                 mov     [esp+0BCh+var_40], eax
.text:00406D9C                 mov     eax, [esp+0BCh+var_90]
.text:00406DA0                 mov     [esp+0BCh+var_44], ecx
.text:00406DA4                 mov     ecx, [esp+0BCh+var_88]
.text:00406DA8                 mov     [esp+0BCh+var_48], eax
.text:00406DAC                 mov     eax, [esp+0BCh+var_80]
.text:00406DB0                 mov     [esp+0BCh+var_4C], edx
.text:00406DB4                 mov     edx, [esp+0BCh+var_84]
.text:00406DB8                 mov     [esp+0BCh+var_50], ecx
.text:00406DBC                 mov     ecx, [esp+0BCh+var_7C]
.text:00406DC0                 mov     [esp+0BCh+var_54], edx
.text:00406DC4                 mov     [esp+0BCh+var_58], eax
.text:00406DC8                 mov     [esp+0BCh+var_5C], ecx
.text:00406DCC
.text:00406DCC loc_406DCC:                             ; CODE XREF: sub_406660+59↑j
.text:00406DCC                 mov     ecx, [esp+0BCh+arg_8]
.text:00406DD3                 mov     [ecx], edi
.text:00406DD5                 mov     [ecx+4], ebp
.text:00406DD8                 mov     [ecx+8], esi
.text:00406DDB                 mov     [ecx+0Ch], ebx
.text:00406DDE                 add     esp, 0ACh
.text:00406DE4                 pop     ebx
.text:00406DE5                 pop     esi
.text:00406DE6                 pop     edi
.text:00406DE7                 pop     ebp
.text:00406DE8                 retn
.text:00406DE8 sub_406660      endp
.text:00406DE8
.text:00406DE8 ; ---------------------------------------------------------------------------
.text:00406DE9                 align 10h
.text:00406DF0                 mov     edx, [esp+4]
.text:00406DF4                 mov     dword ptr [edx], 67452301h
.text:00406DFA                 mov     dword ptr [edx+4], 0EFCDAB89h
.text:00406E01                 mov     dword ptr [edx+8], 98BADCFEh
.text:00406E08                 mov     dword ptr [edx+0Ch], 10325476h
.text:00406E0F                 mov     dword ptr [edx+14h], 0
.text:00406E16                 mov     dword ptr [edx+10h], 0
.text:00406E1D                 mov     dword ptr [edx+18h], 0
.text:00406E24                 retn
.text:00406E24 ; ---------------------------------------------------------------------------
.text:00406E25                 align 10h
.text:00406E30                 mov     ecx, [esp+4]
.text:00406E34                 mov     eax, [esp+8]
.text:00406E38                 mov     edx, [ecx]
.text:00406E3A                 mov     [eax], edx
.text:00406E3C                 mov     edx, [ecx+4]
.text:00406E3F                 mov     [eax+4], edx
.text:00406E42                 mov     edx, [ecx+8]
.text:00406E45                 mov     [eax+8], edx
.text:00406E48                 mov     edx, [ecx+0Ch]
.text:00406E4B                 mov     [eax+0Ch], edx
.text:00406E4E                 retn
.text:00406E4E ; ---------------------------------------------------------------------------
.text:00406E4F                 align 10h
.text:00406E50                 push    ebp
.text:00406E51                 push    edi
.text:00406E52                 push    esi
.text:00406E53                 push    ebx
.text:00406E54                 sub     esp, 0Ch
.text:00406E57                 mov     esi, [esp+20h]
.text:00406E5B                 mov     ebp, [esp+24h]
.text:00406E5F                 mov     ebx, [esi+18h]
.text:00406E62                 mov     edx, [esi+10h]
.text:00406E65                 add     edx, ebx
.text:00406E67                 cmp     edx, ebx
.text:00406E69                 mov     [esi+10h], edx
.text:00406E6C                 jnb     short loc_406E71
.text:00406E6E                 inc     dword ptr [esi+14h]
.text:00406E71
.text:00406E71 loc_406E71:                             ; CODE XREF: .text:00406E6C↑j
.text:00406E71                 cmp     ebx, 37h ; '7'
.text:00406E74                 mov     edi, 78h ; 'x'
.text:00406E79                 ja      short loc_406E80
.text:00406E7B                 mov     edi, 38h ; '8'
.text:00406E80
.text:00406E80 loc_406E80:                             ; CODE XREF: .text:00406E79↑j
.text:00406E80                 mov     dword ptr [esp+4], offset dword_406280
.text:00406E88                 lea     ecx, [ebx+esi+1Ch]
.text:00406E8C                 sub     edi, ebx
.text:00406E8E                 mov     [esp+8], edi
.text:00406E92                 mov     [esp], ecx
.text:00406E95                 call    memcpy
.text:00406E9A                 lea     ecx, [edi+ebx]
.text:00406E9D                 mov     ebx, [esi+10h]
.text:00406EA0                 lea     edi, [ecx+esi]
.text:00406EA3                 add     ecx, 8
.text:00406EA6                 shl     ebx, 3
.text:00406EA9                 mov     [edi+1Ch], ebx
.text:00406EAC                 mov     ebx, [esi+14h]
.text:00406EAF                 mov     edx, [esi+10h]
.text:00406EB2                 shl     ebx, 3
.text:00406EB5                 shr     edx, 1Dh
.text:00406EB8                 or      ebx, edx
.text:00406EBA                 mov     [edi+20h], ebx
.text:00406EBD                 lea     edx, [esi+1Ch]
.text:00406EC0                 mov     [esp+8], esi
.text:00406EC4                 mov     [esp+4], ecx
.text:00406EC8                 mov     [esp], edx
.text:00406ECB                 call    sub_406660
.text:00406ED0                 mov     edi, [esi]
.text:00406ED2                 mov     eax, ebp
.text:00406ED4                 mov     [ebp+0], edi
.text:00406ED7                 mov     ebx, [esi+4]
.text:00406EDA                 mov     [ebp+4], ebx
.text:00406EDD                 mov     ecx, [esi+8]
.text:00406EE0                 mov     [ebp+8], ecx
.text:00406EE3                 mov     edx, [esi+0Ch]
.text:00406EE6                 mov     [ebp+0Ch], edx
.text:00406EE9                 add     esp, 0Ch
.text:00406EEC                 pop     ebx
.text:00406EED                 pop     esi
.text:00406EEE                 pop     edi
.text:00406EEF                 pop     ebp
.text:00406EF0                 retn
.text:00406EF1 ; ---------------------------------------------------------------------------
.text:00406EF1                 jmp     short loc_406F00
.text:00406EF1 ; ---------------------------------------------------------------------------
.text:00406EF3                 align 10h
.text:00406F00
.text:00406F00 loc_406F00:                             ; CODE XREF: .text:00406EF1↑j
.text:00406F00                 push    ebp
.text:00406F01                 push    edi
.text:00406F02                 push    esi
.text:00406F03                 push    ebx
.text:00406F04                 sub     esp, 0BCh
.text:00406F0A                 mov     edx, [esp+0D0h]
.text:00406F11                 mov     dword ptr [esp+10h], 67452301h
.text:00406F19                 mov     ecx, [esp+0D4h]
.text:00406F20                 lea     edi, [esp+10h]
.text:00406F24                 mov     dword ptr [esp+14h], 0EFCDAB89h
.text:00406F2C                 mov     ebp, [esp+0D8h]
.text:00406F33                 mov     [esp], edx
.text:00406F36                 mov     dword ptr [esp+18h], 98BADCFEh
.text:00406F3E                 mov     dword ptr [esp+1Ch], 10325476h
.text:00406F46                 mov     dword ptr [esp+24h], 0
.text:00406F4E                 mov     dword ptr [esp+20h], 0
.text:00406F56                 mov     dword ptr [esp+28h], 0
.text:00406F5E                 mov     [esp+8], edi
.text:00406F62                 mov     [esp+4], ecx
.text:00406F66                 call    sub_406470
.text:00406F6B                 mov     ebx, [esp+28h]
.text:00406F6F                 mov     edx, [esp+20h]
.text:00406F73                 add     edx, ebx
.text:00406F75                 mov     [esp+20h], edx
.text:00406F79                 cmp     edx, ebx
.text:00406F7B                 jnb     short loc_406F81
.text:00406F7D                 inc     dword ptr [esp+24h]
.text:00406F81
.text:00406F81 loc_406F81:                             ; CODE XREF: .text:00406F7B↑j
.text:00406F81                 cmp     ebx, 37h ; '7'
.text:00406F84                 mov     esi, 78h ; 'x'
.text:00406F89                 ja      short loc_406F90
.text:00406F8B                 mov     esi, 38h ; '8'
.text:00406F90
.text:00406F90 loc_406F90:                             ; CODE XREF: .text:00406F89↑j
.text:00406F90                 mov     dword ptr [esp+4], offset dword_406280
.text:00406F98                 lea     ecx, [ebx+edi+1Ch]
.text:00406F9C                 sub     esi, ebx
.text:00406F9E                 mov     [esp+8], esi
.text:00406FA2                 mov     [esp], ecx
.text:00406FA5                 call    memcpy
.text:00406FAA                 lea     ecx, [esi+ebx]
.text:00406FAD                 mov     ebx, [edi+10h]
.text:00406FB0                 lea     esi, [ecx+edi]
.text:00406FB3                 add     ecx, 8
.text:00406FB6                 shl     ebx, 3
.text:00406FB9                 mov     [esi+1Ch], ebx
.text:00406FBC                 mov     ebx, [edi+14h]
.text:00406FBF                 mov     edx, [edi+10h]
.text:00406FC2                 shl     ebx, 3
.text:00406FC5                 shr     edx, 1Dh
.text:00406FC8                 or      ebx, edx
.text:00406FCA                 mov     [esi+20h], ebx
.text:00406FCD                 lea     ebx, [edi+1Ch]
.text:00406FD0                 mov     [esp+8], edi
.text:00406FD4                 mov     [esp+4], ecx
.text:00406FD8                 mov     [esp], ebx
.text:00406FDB                 call    sub_406660
.text:00406FE0                 mov     ecx, [edi]
.text:00406FE2                 mov     eax, ebp
.text:00406FE4                 mov     [ebp+0], ecx
.text:00406FE7                 mov     edx, [edi+4]
.text:00406FEA                 mov     [ebp+4], edx
.text:00406FED                 mov     esi, [edi+8]
.text:00406FF0                 mov     [ebp+8], esi
.text:00406FF3                 mov     ebx, [edi+0Ch]
.text:00406FF6                 mov     [ebp+0Ch], ebx
.text:00406FF9                 add     esp, 0BCh
.text:00406FFF                 pop     ebx
.text:00407000                 pop     esi
.text:00407001                 pop     edi
.text:00407002                 pop     ebp
.text:00407003                 retn
.text:00407003 ; ---------------------------------------------------------------------------
.text:00407004                 align 20h
.text:00407020                 sub     esp, 0Ch
.text:00407023                 mov     edx, [esp+14h]
.text:00407027                 mov     dword ptr [esp+4], 5
.text:0040702F                 mov     [esp+8], edx
.text:00407033                 mov     edx, [esp+10h]
.text:00407037                 mov     [esp], edx
.text:0040703A                 call    sub_408590
.text:0040703F                 add     esp, 0Ch
.text:00407042                 retn
.text:00407042 ; ---------------------------------------------------------------------------
.text:00407043                 align 10h
.text:00407050
.text:00407050 ; =============== S U B R O U T I N E =======================================
.text:00407050
.text:00407050
.text:00407050 ; int __cdecl sub_407050(char *)
.text:00407050 sub_407050      proc near               ; CODE XREF: sub_4019A0+3FB↑p
.text:00407050
.text:00407050 var_C           = dword ptr -0Ch
.text:00407050 var_8           = dword ptr -8
.text:00407050 var_4           = dword ptr -4
.text:00407050 arg_0           = dword ptr  4
.text:00407050
.text:00407050                 sub     esp, 0Ch
.text:00407053                 mov     edx, [esp+0Ch+arg_0]
.text:00407057                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040705F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00407066                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040706A                 call    sub_408590
.text:0040706F                 add     esp, 0Ch
.text:00407072                 retn
.text:00407072 sub_407050      endp
.text:00407072
.text:00407072 ; ---------------------------------------------------------------------------
.text:00407073                 align 10h
.text:00407080 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00407080                                         ; DATA XREF: .data:Buffer↓o
.text:004070B2 ; const char aSSS[]
.text:004070B2 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_407370+50↓o
.text:004070BE aWrittenByS     db 'Written by %s.',0Ah,0
.text:004070BE                                         ; DATA XREF: sub_407370:loc_407411↓o
.text:004070CE                 align 20h
.text:004070E0 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:004070E0                                         ; DATA XREF: sub_407370+100↓o
.text:004070E0                 db 'ere is NO',0Ah
.text:004070E0                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:004070E0                 db 'R PURPOSE.',0Ah,0
.text:00407178 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00407178                                         ; DATA XREF: sub_407370:loc_4074B1↓o
.text:0040718F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040718F                                         ; DATA XREF: sub_407370:loc_4074BD↓o
.text:004071AB                 align 20h
.text:004071C0 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:004071C0                                         ; DATA XREF: sub_407370:loc_4074C9↓o
.text:004071C0                 db 'and %s.',0Ah,0
.text:004071E0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:004071E0                                         ; DATA XREF: sub_407370:loc_4074D5↓o
.text:004071E0                 db '%s, and %s.',0Ah,0
.text:00407204                 align 20h
.text:00407220 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00407220                                         ; DATA XREF: sub_407370:loc_4074E1↓o
.text:00407220                 db '%s, %s, and %s.',0Ah,0
.text:00407248                 align 20h
.text:00407260 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00407260                                         ; DATA XREF: sub_407370:loc_4074ED↓o
.text:00407260                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040728C                 align 20h
.text:004072A0 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:004072A0                                         ; DATA XREF: sub_407370:loc_4074F9↓o
.text:004072A0                 db '%s, %s, %s, %s,',0Ah
.text:004072A0                 db 'and %s.',0Ah,0
.text:004072D0                 align 20h
.text:004072E0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:004072E0                                         ; DATA XREF: sub_407370:loc_407505↓o
.text:004072E0                 db '%s, %s, %s, %s,',0Ah
.text:004072E0                 db '%s, and %s.',0Ah,0
.text:00407314                 align 10h
.text:00407320 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00407320                                         ; DATA XREF: sub_407370:def_4073DD↓o
.text:00407320                 db '%s, %s, %s, %s,',0Ah
.text:00407320                 db '%s, %s, and others.',0Ah,0
.text:0040735C ; const char aSS_0[]
.text:0040735C aSS_0           db '%s %s',0Ah,0        ; DATA XREF: sub_407370+1B5↓o
.text:00407363                 align 10h
.text:00407370
.text:00407370 ; =============== S U B R O U T I N E =======================================
.text:00407370
.text:00407370
.text:00407370 ; int __cdecl sub_407370(FILE *, FILE *, int, int, va_list)
.text:00407370 sub_407370      proc near               ; CODE XREF: sub_407540+2A↓p
.text:00407370
.text:00407370 Stream          = dword ptr -2Ch
.text:00407370 Format          = dword ptr -28h
.text:00407370 ArgList         = dword ptr -24h
.text:00407370 var_20          = dword ptr -20h
.text:00407370 var_1C          = dword ptr -1Ch
.text:00407370 var_14          = dword ptr -14h
.text:00407370 arg_0           = dword ptr  4
.text:00407370 arg_4           = dword ptr  8
.text:00407370 arg_8           = dword ptr  0Ch
.text:00407370 arg_C           = dword ptr  10h
.text:00407370 arg_10          = dword ptr  14h
.text:00407370
.text:00407370                 push    ebp
.text:00407371                 push    edi
.text:00407372                 push    esi
.text:00407373                 push    ebx
.text:00407374                 sub     esp, 1Ch
.text:00407377                 xor     ebx, ebx
.text:00407379                 mov     edi, [esp+2Ch+arg_10]
.text:0040737D                 mov     edx, [esp+2Ch+arg_8]
.text:00407381                 mov     esi, [esp+2Ch+arg_0]
.text:00407385                 mov     eax, [edi]
.text:00407387                 mov     ecx, [esp+2Ch+arg_4]
.text:0040738B                 mov     [esp+2Ch+var_14], edx
.text:0040738F                 mov     ebp, [esp+2Ch+arg_C]
.text:00407393                 lea     edx, [edi+4]
.text:00407396                 test    eax, eax
.text:00407398                 jz      short loc_4073AC
.text:0040739A                 lea     esi, [esi+0]
.text:004073A0
.text:004073A0 loc_4073A0:                             ; CODE XREF: sub_407370+3A↓j
.text:004073A0                 mov     eax, edx
.text:004073A2                 inc     ebx
.text:004073A3                 mov     eax, [eax]
.text:004073A5                 add     edx, 4
.text:004073A8                 test    eax, eax
.text:004073AA                 jnz     short loc_4073A0
.text:004073AC
.text:004073AC loc_4073AC:                             ; CODE XREF: sub_407370+28↑j
.text:004073AC                 test    ecx, ecx
.text:004073AE                 jz      loc_40751D
.text:004073B4                 mov     [esp+2Ch+var_1C], ebp
.text:004073B8                 mov     edx, [esp+2Ch+var_14]
.text:004073BC                 mov     [esp+2Ch+ArgList], ecx
.text:004073C0                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:004073C8                 mov     [esp+2Ch+var_20], edx
.text:004073CC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004073CF                 call    fprintf
.text:004073D4
.text:004073D4 loc_4073D4:                             ; CODE XREF: sub_407370+1C9↓j
.text:004073D4                 cmp     ebx, 9          ; switch 10 cases
.text:004073D7                 ja      def_4073DD      ; jumptable 004073DD default case
.text:004073DD                 jmp     ds:jpt_4073DD[ebx*4] ; switch jump
.text:004073DD ; ---------------------------------------------------------------------------
.text:004073E4 jpt_4073DD      dd offset loc_40740C    ; DATA XREF: sub_407370+6D↑r
.text:004073E4                 dd offset loc_407411    ; jump table for switch statement
.text:004073E4                 dd offset loc_4074B1
.text:004073E4                 dd offset loc_4074BD
.text:004073E4                 dd offset loc_4074C9
.text:004073E4                 dd offset loc_4074D5
.text:004073E4                 dd offset loc_4074E1
.text:004073E4                 dd offset loc_4074ED
.text:004073E4                 dd offset loc_4074F9
.text:004073E4                 dd offset loc_407505
.text:0040740C ; ---------------------------------------------------------------------------
.text:0040740C
.text:0040740C loc_40740C:                             ; CODE XREF: sub_407370+6D↑j
.text:0040740C                                         ; DATA XREF: sub_407370:jpt_4073DD↑o
.text:0040740C                 call    abort           ; jumptable 004073DD case 0
.text:00407411 ; ---------------------------------------------------------------------------
.text:00407411
.text:00407411 loc_407411:                             ; CODE XREF: sub_407370+6D↑j
.text:00407411                                         ; DATA XREF: sub_407370:jpt_4073DD↑o
.text:00407411                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 004073DD case 1
.text:00407418                 nop
.text:00407419                 lea     esi, [esi+0]
.text:00407420
.text:00407420 loc_407420:                             ; CODE XREF: sub_407370+148↓j
.text:00407420                                         ; sub_407370+154↓j ...
.text:00407420                 call    ds:libintl_gettext
.text:00407426                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040742A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040742D                 mov     [esp+2Ch+Format], eax ; Format
.text:00407431                 call    vfprintf
.text:00407436                 mov     ebx, [esi+4]
.text:00407439                 dec     ebx
.text:0040743A                 test    ebx, ebx
.text:0040743C                 mov     [esi+4], ebx
.text:0040743F                 js      short loc_40749F
.text:00407441                 mov     edi, [esi]
.text:00407443                 mov     byte ptr [edi], 0Ah
.text:00407446                 inc     dword ptr [esi]
.text:00407448
.text:00407448 loc_407448:                             ; CODE XREF: sub_407370+13F↓j
.text:00407448                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040744C                 mov     edx, Buffer
.text:00407452                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00407455                 call    fputs
.text:0040745A                 mov     ebp, [esi+4]
.text:0040745D                 dec     ebp
.text:0040745E                 test    ebp, ebp
.text:00407460                 mov     [esi+4], ebp
.text:00407463                 js      short loc_40748D
.text:00407465                 mov     ecx, [esi]
.text:00407467                 mov     byte ptr [ecx], 0Ah
.text:0040746A                 inc     dword ptr [esi]
.text:0040746C
.text:0040746C loc_40746C:                             ; CODE XREF: sub_407370+12D↓j
.text:0040746C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00407470                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00407477                 call    ds:libintl_gettext
.text:0040747D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00407481                 add     esp, 1Ch
.text:00407484                 pop     ebx
.text:00407485                 pop     esi
.text:00407486                 pop     edi
.text:00407487                 pop     ebp
.text:00407488                 jmp     fputs
.text:0040748D ; ---------------------------------------------------------------------------
.text:0040748D
.text:0040748D loc_40748D:                             ; CODE XREF: sub_407370+F3↑j
.text:0040748D                 mov     [esp+2Ch+Format], esi ; File
.text:00407491                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00407498                 call    _flsbuf
.text:0040749D                 jmp     short loc_40746C
.text:0040749F ; ---------------------------------------------------------------------------
.text:0040749F
.text:0040749F loc_40749F:                             ; CODE XREF: sub_407370+CF↑j
.text:0040749F                 mov     [esp+2Ch+Format], esi ; File
.text:004074A3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:004074AA                 call    _flsbuf
.text:004074AF                 jmp     short loc_407448
.text:004074B1 ; ---------------------------------------------------------------------------
.text:004074B1
.text:004074B1 loc_4074B1:                             ; CODE XREF: sub_407370+6D↑j
.text:004074B1                                         ; DATA XREF: sub_407370:jpt_4073DD↑o
.text:004074B1                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 004073DD case 2
.text:004074B8                 jmp     loc_407420
.text:004074BD ; ---------------------------------------------------------------------------
.text:004074BD
.text:004074BD loc_4074BD:                             ; CODE XREF: sub_407370+6D↑j
.text:004074BD                                         ; DATA XREF: sub_407370:jpt_4073DD↑o
.text:004074BD                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 004073DD case 3
.text:004074C4                 jmp     loc_407420
.text:004074C9 ; ---------------------------------------------------------------------------
.text:004074C9
.text:004074C9 loc_4074C9:                             ; CODE XREF: sub_407370+6D↑j
.text:004074C9                                         ; DATA XREF: sub_407370:jpt_4073DD↑o
.text:004074C9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 004073DD case 4
.text:004074D0                 jmp     loc_407420
.text:004074D5 ; ---------------------------------------------------------------------------
.text:004074D5
.text:004074D5 loc_4074D5:                             ; CODE XREF: sub_407370+6D↑j
.text:004074D5                                         ; DATA XREF: sub_407370:jpt_4073DD↑o
.text:004074D5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 004073DD case 5
.text:004074DC                 jmp     loc_407420
.text:004074E1 ; ---------------------------------------------------------------------------
.text:004074E1
.text:004074E1 loc_4074E1:                             ; CODE XREF: sub_407370+6D↑j
.text:004074E1                                         ; DATA XREF: sub_407370:jpt_4073DD↑o
.text:004074E1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 004073DD case 6
.text:004074E8                 jmp     loc_407420
.text:004074ED ; ---------------------------------------------------------------------------
.text:004074ED
.text:004074ED loc_4074ED:                             ; CODE XREF: sub_407370+6D↑j
.text:004074ED                                         ; DATA XREF: sub_407370:jpt_4073DD↑o
.text:004074ED                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 004073DD case 7
.text:004074F4                 jmp     loc_407420
.text:004074F9 ; ---------------------------------------------------------------------------
.text:004074F9
.text:004074F9 loc_4074F9:                             ; CODE XREF: sub_407370+6D↑j
.text:004074F9                                         ; DATA XREF: sub_407370:jpt_4073DD↑o
.text:004074F9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 004073DD case 8
.text:00407500                 jmp     loc_407420
.text:00407505 ; ---------------------------------------------------------------------------
.text:00407505
.text:00407505 loc_407505:                             ; CODE XREF: sub_407370+6D↑j
.text:00407505                                         ; DATA XREF: sub_407370:jpt_4073DD↑o
.text:00407505                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 004073DD case 9
.text:0040750C                 jmp     loc_407420
.text:00407511 ; ---------------------------------------------------------------------------
.text:00407511
.text:00407511 def_4073DD:                             ; CODE XREF: sub_407370+67↑j
.text:00407511                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 004073DD default case
.text:00407518                 jmp     loc_407420
.text:0040751D ; ---------------------------------------------------------------------------
.text:0040751D
.text:0040751D loc_40751D:                             ; CODE XREF: sub_407370+3E↑j
.text:0040751D                 mov     [esp+2Ch+var_20], ebp
.text:00407521                 mov     ecx, [esp+2Ch+var_14]
.text:00407525                 mov     [esp+2Ch+Format], offset aSS_0 ; "%s %s\n"
.text:0040752D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00407530                 mov     [esp+2Ch+ArgList], ecx
.text:00407534                 call    fprintf
.text:00407539                 jmp     loc_4073D4
.text:00407539 sub_407370      endp
.text:00407539
.text:00407539 ; ---------------------------------------------------------------------------
.text:0040753E                 align 10h
.text:00407540
.text:00407540 ; =============== S U B R O U T I N E =======================================
.text:00407540
.text:00407540
.text:00407540 ; int __cdecl sub_407540(FILE *, FILE *, int, int, char)
.text:00407540 sub_407540      proc near               ; CODE XREF: sub_4019A0+166↑p
.text:00407540
.text:00407540 var_1C          = dword ptr -1Ch
.text:00407540 var_18          = dword ptr -18h
.text:00407540 var_14          = dword ptr -14h
.text:00407540 var_10          = dword ptr -10h
.text:00407540 var_C           = dword ptr -0Ch
.text:00407540 arg_0           = dword ptr  4
.text:00407540 arg_4           = dword ptr  8
.text:00407540 arg_8           = dword ptr  0Ch
.text:00407540 arg_C           = dword ptr  10h
.text:00407540 arg_10          = byte ptr  14h
.text:00407540
.text:00407540                 sub     esp, 1Ch
.text:00407543                 mov     edx, [esp+1Ch+arg_C]
.text:00407547                 lea     ecx, [esp+1Ch+arg_10]
.text:0040754B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040754F                 mov     ecx, [esp+1Ch+arg_8]
.text:00407553                 mov     [esp+1Ch+var_10], edx ; int
.text:00407557                 mov     edx, [esp+1Ch+arg_4]
.text:0040755B                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040755F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00407563                 mov     edx, [esp+1Ch+arg_0]
.text:00407567                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:0040756A                 call    sub_407370
.text:0040756F                 add     esp, 1Ch
.text:00407572                 retn
.text:00407572 sub_407540      endp
.text:00407572
.text:00407572 ; ---------------------------------------------------------------------------
.text:00407573                 align 10h
.text:00407580
.text:00407580 ; =============== S U B R O U T I N E =======================================
.text:00407580
.text:00407580
.text:00407580 ; int __cdecl sub_407580(int, int, char *, int, int)
.text:00407580 sub_407580      proc near               ; CODE XREF: sub_4019A0+A2↑p
.text:00407580
.text:00407580 var_1C          = dword ptr -1Ch
.text:00407580 var_18          = dword ptr -18h
.text:00407580 var_14          = dword ptr -14h
.text:00407580 var_10          = dword ptr -10h
.text:00407580 var_C           = dword ptr -0Ch
.text:00407580 var_8           = dword ptr -8
.text:00407580 var_4           = dword ptr -4
.text:00407580 arg_0           = dword ptr  4
.text:00407580 arg_4           = dword ptr  8
.text:00407580 arg_8           = dword ptr  0Ch
.text:00407580 arg_C           = dword ptr  10h
.text:00407580 arg_10          = dword ptr  14h
.text:00407580
.text:00407580                 sub     esp, 1Ch
.text:00407583                 mov     edx, [esp+1Ch+arg_C]
.text:00407587                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040758F                 mov     ecx, [esp+1Ch+arg_10]
.text:00407593                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040759B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040759F                 mov     edx, [esp+1Ch+arg_4]
.text:004075A3                 mov     [esp+1Ch+var_C], ecx ; int
.text:004075A7                 mov     ecx, [esp+1Ch+arg_8]
.text:004075AB                 mov     [esp+1Ch+var_18], edx ; int
.text:004075AF                 mov     edx, [esp+1Ch+arg_0]
.text:004075B3                 mov     [esp+1Ch+var_14], ecx ; char *
.text:004075B7                 mov     [esp+1Ch+var_1C], edx ; int
.text:004075BA                 call    sub_403C20
.text:004075BF                 add     esp, 1Ch
.text:004075C2                 retn
.text:004075C2 sub_407580      endp
.text:004075C2
.text:004075C2 ; ---------------------------------------------------------------------------
.text:004075C3                 align 10h
.text:004075D0                 sub     esp, 2Ch
.text:004075D3                 mov     edx, [esp+44h]
.text:004075D7                 mov     dword ptr [esp+18h], 0
.text:004075DF                 mov     ecx, [esp+40h]
.text:004075E3                 mov     dword ptr [esp+14h], 0
.text:004075EB                 mov     [esp+1Ch], edx
.text:004075EF                 mov     edx, [esp+3Ch]
.text:004075F3                 mov     [esp+10h], ecx
.text:004075F7                 mov     ecx, [esp+38h]
.text:004075FB                 mov     [esp+0Ch], edx
.text:004075FF                 mov     edx, [esp+34h]
.text:00407603                 mov     [esp+8], ecx
.text:00407607                 mov     [esp+4], edx
.text:0040760B                 mov     edx, [esp+30h]
.text:0040760F                 mov     [esp], edx
.text:00407612                 call    sub_403090
.text:00407617                 add     esp, 2Ch
.text:0040761A                 retn
.text:0040761A ; ---------------------------------------------------------------------------
.text:0040761B                 align 10h
.text:00407620                 sub     esp, 1Ch
.text:00407623                 mov     edx, [esp+2Ch]
.text:00407627                 mov     dword ptr [esp+18h], 0
.text:0040762F                 mov     ecx, [esp+30h]
.text:00407633                 mov     dword ptr [esp+14h], 1
.text:0040763B                 mov     [esp+0Ch], edx
.text:0040763F                 mov     edx, [esp+24h]
.text:00407643                 mov     [esp+10h], ecx
.text:00407647                 mov     ecx, [esp+28h]
.text:0040764B                 mov     [esp+4], edx
.text:0040764F                 mov     edx, [esp+20h]
.text:00407653                 mov     [esp+8], ecx
.text:00407657                 mov     [esp], edx
.text:0040765A                 call    sub_403C20
.text:0040765F                 add     esp, 1Ch
.text:00407662                 retn
.text:00407662 ; ---------------------------------------------------------------------------
.text:00407663                 align 10h
.text:00407670                 sub     esp, 2Ch
.text:00407673                 mov     edx, [esp+44h]
.text:00407677                 mov     dword ptr [esp+18h], 0
.text:0040767F                 mov     ecx, [esp+40h]
.text:00407683                 mov     dword ptr [esp+14h], 1
.text:0040768B                 mov     [esp+1Ch], edx
.text:0040768F                 mov     edx, [esp+3Ch]
.text:00407693                 mov     [esp+10h], ecx
.text:00407697                 mov     ecx, [esp+38h]
.text:0040769B                 mov     [esp+0Ch], edx
.text:0040769F                 mov     edx, [esp+34h]
.text:004076A3                 mov     [esp+8], ecx
.text:004076A7                 mov     [esp+4], edx
.text:004076AB                 mov     edx, [esp+30h]
.text:004076AF                 mov     [esp], edx
.text:004076B2                 call    sub_403090
.text:004076B7                 add     esp, 2Ch
.text:004076BA                 retn
.text:004076BA ; ---------------------------------------------------------------------------
.text:004076BB                 align 10h
.text:004076C0                 mov     edx, [esp+4]
.text:004076C4                 mov     ds:dword_40B080, edx
.text:004076CA                 retn
.text:004076CA ; ---------------------------------------------------------------------------
.text:004076CB aWriteError     db 'write error',0      ; DATA XREF: sub_4076F0:loc_407739↓o
.text:004076D7 ; const char aSS_1[]
.text:004076D7 aSS_1           db '%s: %s',0           ; DATA XREF: sub_4076F0+77↓o
.text:004076DE ; const char aS_3[]
.text:004076DE aS_3            db '%s',0               ; DATA XREF: sub_4076F0+A0↓o
.text:004076E1 ; ---------------------------------------------------------------------------
.text:004076E1                 jmp     short sub_4076F0
.text:004076E1 ; ---------------------------------------------------------------------------
.text:004076E3                 align 10h
.text:004076F0
.text:004076F0 ; =============== S U B R O U T I N E =======================================
.text:004076F0
.text:004076F0
.text:004076F0 ; void __cdecl sub_4076F0()
.text:004076F0 sub_4076F0      proc near               ; CODE XREF: .text:004076E1↑j
.text:004076F0                                         ; DATA XREF: sub_4019A0+6A↑o
.text:004076F0
.text:004076F0 Stream          = dword ptr -2Ch
.text:004076F0 ErrorMessage    = dword ptr -28h
.text:004076F0 var_24          = dword ptr -24h
.text:004076F0 var_20          = byte ptr -20h
.text:004076F0 var_1C          = dword ptr -1Ch
.text:004076F0 var_9           = byte ptr -9
.text:004076F0
.text:004076F0                 push    esi
.text:004076F1                 push    ebx
.text:004076F2                 sub     esp, 24h
.text:004076F5                 mov     edx, ds:_iob
.text:004076FB                 mov     ecx, [edx+2Ch]
.text:004076FE                 lea     esi, [edx+20h]
.text:00407701                 shr     ecx, 5
.text:00407704                 mov     bl, cl
.text:00407706                 mov     ecx, [edx+20h]
.text:00407709                 and     bl, 1
.text:0040770C                 cmp     ecx, [esi+8]
.text:0040770F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00407712                 setz    [esp+2Ch+var_9]
.text:00407717                 call    fclose
.text:0040771C                 test    eax, eax
.text:0040771E                 setnz   al
.text:00407721                 test    bl, bl
.text:00407723                 jnz     loc_4077B3
.text:00407729                 test    al, al
.text:0040772B                 jz      short loc_407780
.text:0040772D
.text:0040772D loc_40772D:                             ; CODE XREF: sub_4076F0+CD↓j
.text:0040772D                 call    _errno
.text:00407732                 mov     esi, [eax]
.text:00407734
.text:00407734 loc_407734:                             ; CODE XREF: sub_4076F0+C7↓j
.text:00407734                 cmp     esi, 9
.text:00407737                 jz      short loc_4077A6
.text:00407739
.text:00407739 loc_407739:                             ; CODE XREF: sub_4076F0+B8↓j
.text:00407739                                         ; sub_4076F0+C1↓j
.text:00407739                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00407740                 call    ds:libintl_gettext
.text:00407746                 mov     ebx, eax
.text:00407748                 mov     eax, ds:dword_40B080
.text:0040774D                 test    eax, eax
.text:0040774F                 jz      short loc_407786
.text:00407751                 mov     [esp+2Ch+Stream], eax ; char *
.text:00407754                 call    sub_408900
.text:00407759                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040775D                 mov     edx, Code
.text:00407763                 mov     [esp+2Ch+var_1C], ebx
.text:00407767                 mov     [esp+2Ch+var_24], offset aSS_1 ; "%s: %s"
.text:0040776F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00407773                 mov     [esp+2Ch+Stream], edx ; Code
.text:00407776                 call    sub_408F00
.text:0040777B                 nop
.text:0040777C                 lea     esi, [esi+0]
.text:00407780
.text:00407780 loc_407780:                             ; CODE XREF: sub_4076F0+3B↑j
.text:00407780                                         ; sub_4076F0+B4↓j ...
.text:00407780                 add     esp, 24h
.text:00407783                 pop     ebx
.text:00407784                 pop     esi
.text:00407785                 retn
.text:00407786 ; ---------------------------------------------------------------------------
.text:00407786
.text:00407786 loc_407786:                             ; CODE XREF: sub_4076F0+5F↑j
.text:00407786                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040778A                 mov     ebx, Code
.text:00407790                 mov     [esp+2Ch+var_24], offset aS_3 ; "%s"
.text:00407798                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040779C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040779F                 call    sub_408F00
.text:004077A4                 jmp     short loc_407780
.text:004077A6 ; ---------------------------------------------------------------------------
.text:004077A6
.text:004077A6 loc_4077A6:                             ; CODE XREF: sub_4076F0+47↑j
.text:004077A6                 test    bl, bl
.text:004077A8                 jnz     short loc_407739
.text:004077AA                 cmp     [esp+2Ch+var_9], 0
.text:004077AF                 jnz     short loc_407780
.text:004077B1                 jmp     short loc_407739
.text:004077B3 ; ---------------------------------------------------------------------------
.text:004077B3
.text:004077B3 loc_4077B3:                             ; CODE XREF: sub_4076F0+33↑j
.text:004077B3                 xor     esi, esi
.text:004077B5                 test    al, al
.text:004077B7                 jz      loc_407734
.text:004077BD                 jmp     loc_40772D
.text:004077BD sub_4076F0      endp
.text:004077BD
.text:004077BD ; ---------------------------------------------------------------------------
.text:004077C2                 align 10h
.text:004077D0 aLiteral        db 'literal',0          ; DATA XREF: .text:00407810↓o
.text:004077D8 aShell          db 'shell',0            ; DATA XREF: .text:00407814↓o
.text:004077DE aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00407818↓o
.text:004077EB aC              db 'c',0                ; DATA XREF: .text:0040781C↓o
.text:004077ED aEscape         db 'escape',0           ; DATA XREF: .text:00407820↓o
.text:004077F4 aLocale         db 'locale',0           ; DATA XREF: .text:00407824↓o
.text:004077FB aClocale        db 'clocale',0          ; DATA XREF: .text:00407828↓o
.text:00407803                 align 10h
.text:00407810                 dd offset aLiteral      ; "literal"
.text:00407814                 dd offset aShell        ; "shell"
.text:00407818                 dd offset aShellAlways  ; "shell-always"
.text:0040781C                 dd offset aC            ; "c"
.text:00407820                 dd offset aEscape       ; "escape"
.text:00407824                 dd offset aLocale       ; "locale"
.text:00407828                 dd offset aClocale      ; "clocale"
.text:0040782C                 dd 2 dup(0)
.text:00407834                 dd 1, 2, 3, 4, 5, 6
.text:0040784C asc_40784C:                             ; DATA XREF: sub_407860+7E↓o
.text:0040784C                                         ; sub_407860+A39↓o ...
.text:0040784C                 text "UTF-16LE", '"',27h,'`'
.text:00407852                 align 10h
.text:00407860
.text:00407860 ; =============== S U B R O U T I N E =======================================
.text:00407860
.text:00407860
.text:00407860 ; int __cdecl sub_407860(int, int, char *Str, int, int, int)
.text:00407860 sub_407860      proc near               ; CODE XREF: sub_407860+43A↓p
.text:00407860                                         ; .text:00408423↓p ...
.text:00407860
.text:00407860 C               = dword ptr -4Ch
.text:00407860 Type            = dword ptr -48h
.text:00407860 SizeInBytes     = dword ptr -44h
.text:00407860 State           = dword ptr -40h
.text:00407860 var_3C          = dword ptr -3Ch
.text:00407860 var_38          = dword ptr -38h
.text:00407860 var_34          = dword ptr -34h
.text:00407860 var_30          = dword ptr -30h
.text:00407860 var_29          = byte ptr -29h
.text:00407860 var_28          = dword ptr -28h
.text:00407860 var_22          = byte ptr -22h
.text:00407860 var_21          = byte ptr -21h
.text:00407860 var_20          = dword ptr -20h
.text:00407860 var_1C          = dword ptr -1Ch
.text:00407860 var_18          = mbstate_t ptr -18h
.text:00407860 arg_0           = dword ptr  4
.text:00407860 arg_4           = dword ptr  8
.text:00407860 Str             = dword ptr  0Ch
.text:00407860 arg_C           = dword ptr  10h
.text:00407860 arg_10          = dword ptr  14h
.text:00407860 arg_14          = dword ptr  18h
.text:00407860
.text:00407860                 push    ebp
.text:00407861                 push    edi
.text:00407862                 push    esi
.text:00407863                 push    ebx
.text:00407864                 sub     esp, 3Ch
.text:00407867                 mov     edx, ds:__mb_cur_max
.text:0040786D                 mov     [esp+4Ch+var_34], 0
.text:00407875                 mov     [esp+4Ch+var_1C], 0
.text:0040787D                 cmp     dword ptr [edx], 1
.text:00407880                 mov     [esp+4Ch+var_20], 0
.text:00407888                 mov     [esp+4Ch+var_21], 0
.text:0040788D                 setz    [esp+4Ch+var_22]
.text:00407892                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00407897                 ja      short def_40789D ; jumptable 0040789D default case, cases 0,1
.text:00407899                 mov     edx, [esp+4Ch+arg_10]
.text:0040789D                 jmp     ds:jpt_40789D[edx*4] ; switch jump
.text:0040789D ; ---------------------------------------------------------------------------
.text:004078A4 jpt_40789D      dd offset def_40789D    ; DATA XREF: sub_407860+3D↑r
.text:004078A4                 dd offset def_40789D    ; jump table for switch statement
.text:004078A4                 dd offset loc_4081E5
.text:004078A4                 dd offset loc_4078C0
.text:004078A4                 dd offset loc_40820B
.text:004078A4                 dd offset loc_408215
.text:004078A4                 dd offset loc_408215
.text:004078C0 ; ---------------------------------------------------------------------------
.text:004078C0
.text:004078C0 loc_4078C0:                             ; CODE XREF: sub_407860+3D↑j
.text:004078C0                                         ; DATA XREF: sub_407860:jpt_40789D↑o
.text:004078C0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040789D case 3
.text:004078C4                 cmp     [esp+4Ch+var_34], eax
.text:004078C8                 jnb     short loc_4078D1
.text:004078CA                 mov     ebx, [esp+4Ch+arg_0]
.text:004078CE                 mov     byte ptr [ebx], 22h ; '"'
.text:004078D1
.text:004078D1 loc_4078D1:                             ; CODE XREF: sub_407860+68↑j
.text:004078D1                 mov     [esp+4Ch+var_34], 1
.text:004078D9                 mov     [esp+4Ch+var_21], 1
.text:004078DE                 mov     [esp+4Ch+var_1C], offset asc_40784C ; "\"'`"
.text:004078E6
.text:004078E6 loc_4078E6:                             ; CODE XREF: sub_407860+9A6↓j
.text:004078E6                 mov     [esp+4Ch+var_20], 1
.text:004078EE
.text:004078EE def_40789D:                             ; CODE XREF: sub_407860+37↑j
.text:004078EE                                         ; sub_407860+3D↑j ...
.text:004078EE                 xor     ebp, ebp        ; jumptable 0040789D default case, cases 0,1
.text:004078F0
.text:004078F0 loc_4078F0:                             ; CODE XREF: sub_407860+3DB↓j
.text:004078F0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004078F5                 jz      loc_4081D7
.text:004078FB                 cmp     ebp, [esp+4Ch+arg_C]
.text:004078FF
.text:004078FF loc_4078FF:                             ; CODE XREF: sub_407860+980↓j
.text:004078FF                 jz      loc_40816E
.text:00407905                 cmp     [esp+4Ch+var_21], 0
.text:0040790A                 jz      short loc_407950
.text:0040790C                 mov     esi, [esp+4Ch+var_20]
.text:00407910                 test    esi, esi
.text:00407912                 jz      short loc_407950
.text:00407914                 mov     ecx, [esp+4Ch+var_20]
.text:00407918                 lea     edi, [ecx+ebp]
.text:0040791B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040791F                 ja      short loc_407950
.text:00407921                 cld
.text:00407922                 mov     ebx, [esp+4Ch+Str]
.text:00407926                 mov     edi, [esp+4Ch+var_1C]
.text:0040792A                 add     ebx, ebp
.text:0040792C                 mov     esi, ebx
.text:0040792E                 cmp     ecx, ecx
.text:00407930                 repe cmpsb
.text:00407932                 jnz     short loc_407950
.text:00407934                 mov     edx, [esp+4Ch+arg_4]
.text:00407938                 cmp     [esp+4Ch+var_34], edx
.text:0040793C                 jnb     short loc_40794A
.text:0040793E                 mov     ecx, [esp+4Ch+arg_0]
.text:00407942                 mov     eax, [esp+4Ch+var_34]
.text:00407946                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040794A
.text:0040794A loc_40794A:                             ; CODE XREF: sub_407860+DC↑j
.text:0040794A                 inc     [esp+4Ch+var_34]
.text:0040794E                 mov     esi, esi
.text:00407950
.text:00407950 loc_407950:                             ; CODE XREF: sub_407860+AA↑j
.text:00407950                                         ; sub_407860+B2↑j ...
.text:00407950                 mov     edi, [esp+4Ch+Str]
.text:00407954                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00407959                 movzx   eax, bl
.text:0040795C                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040795F                 ja      def_407965      ; jumptable 00407965 default case, cases 1-6,14-31,64
.text:00407965                 jmp     ds:jpt_407965[eax*4] ; switch jump
.text:00407965 ; ---------------------------------------------------------------------------
.text:0040796C jpt_407965      dd offset loc_407B68, offset def_407965, offset def_407965
.text:0040796C                                         ; DATA XREF: sub_407860+105↑r
.text:0040796C                 dd offset def_407965, offset def_407965, offset def_407965 ; jump table for switch statement
.text:0040796C                 dd offset def_407965, offset loc_407C40, offset loc_407C5E
.text:0040796C                 dd offset loc_407C62, offset loc_407CA7, offset loc_407CAB
.text:0040796C                 dd offset loc_407CAF, offset loc_407CB3, offset def_407965
.text:0040796C                 dd offset def_407965, offset def_407965, offset def_407965
.text:0040796C                 dd offset def_407965, offset def_407965, offset def_407965
.text:0040796C                 dd offset def_407965, offset def_407965, offset def_407965
.text:0040796C                 dd offset def_407965, offset def_407965, offset def_407965
.text:0040796C                 dd offset def_407965, offset def_407965, offset def_407965
.text:0040796C                 dd offset def_407965, offset def_407965, offset loc_408138
.text:0040796C                 dd offset loc_408138, offset loc_408138, offset loc_40815A
.text:0040796C                 dd offset loc_408138, offset def_407D62, offset loc_408138
.text:0040796C                 dd offset loc_407CB7, offset loc_408138, offset loc_408138
.text:0040796C                 dd offset loc_408138, offset def_407D62, offset def_407D62
.text:0040796C                 dd offset def_407D62, offset def_407D62, offset def_407D62
.text:0040796C                 dd offset def_407D62, offset def_407D62, offset def_407D62
.text:0040796C                 dd offset def_407D62, offset def_407D62, offset def_407D62
.text:0040796C                 dd offset def_407D62, offset def_407D62, offset def_407D62
.text:0040796C                 dd offset def_407D62, offset def_407D62, offset loc_408138
.text:0040796C                 dd offset loc_408138, offset loc_408138, offset loc_408138
.text:0040796C                 dd offset loc_407D1C, offset def_407965, offset def_407D62
.text:0040796C                 dd offset def_407D62, offset def_407D62, offset def_407D62
.text:0040796C                 dd offset def_407D62, offset def_407D62, offset def_407D62
.text:0040796C                 dd offset def_407D62, offset def_407D62, offset def_407D62
.text:0040796C                 dd offset def_407D62, offset def_407D62, offset def_407D62
.text:0040796C                 dd offset def_407D62, offset def_407D62, offset def_407D62
.text:0040796C                 dd offset def_407D62, offset def_407D62, offset def_407D62
.text:0040796C                 dd offset def_407D62, offset def_407D62, offset def_407D62
.text:0040796C                 dd offset def_407D62, offset def_407D62, offset def_407D62
.text:0040796C                 dd offset def_407D62, offset loc_408138, offset loc_408131
.text:0040796C                 dd offset def_407D62, offset loc_408138, offset def_407D62
.text:0040796C                 dd offset loc_408138, offset def_407D62, offset def_407D62
.text:0040796C                 dd offset def_407D62, offset def_407D62, offset def_407D62
.text:0040796C                 dd offset def_407D62, offset def_407D62, offset def_407D62
.text:0040796C                 dd offset def_407D62, offset def_407D62, offset def_407D62
.text:0040796C                 dd offset def_407D62, offset def_407D62, offset def_407D62
.text:0040796C                 dd offset def_407D62, offset def_407D62, offset def_407D62
.text:0040796C                 dd offset def_407D62, offset def_407D62, offset def_407D62
.text:0040796C                 dd offset def_407D62, offset def_407D62, offset def_407D62
.text:0040796C                 dd offset def_407D62, offset def_407D62, offset def_407D62
.text:0040796C                 dd offset loc_408148, offset loc_408138, offset loc_408148
.text:0040796C                 dd offset loc_40815A
.text:00407B68 ; ---------------------------------------------------------------------------
.text:00407B68
.text:00407B68 loc_407B68:                             ; CODE XREF: sub_407860+105↑j
.text:00407B68                                         ; DATA XREF: sub_407860:jpt_407965↑o
.text:00407B68                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00407965 case 0
.text:00407B6D                 lea     eax, [ebp+1]
.text:00407B70                 jz      loc_407C20
.text:00407B76                 mov     esi, [esp+4Ch+arg_4]
.text:00407B7A                 cmp     [esp+4Ch+var_34], esi
.text:00407B7E                 jnb     short loc_407B8C
.text:00407B80                 mov     eax, [esp+4Ch+arg_0]
.text:00407B84                 mov     ebx, [esp+4Ch+var_34]
.text:00407B88                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00407B8C
.text:00407B8C loc_407B8C:                             ; CODE XREF: sub_407860+31E↑j
.text:00407B8C                 inc     [esp+4Ch+var_34]
.text:00407B90                 mov     edx, [esp+4Ch+arg_4]
.text:00407B94                 cmp     [esp+4Ch+var_34], edx
.text:00407B98                 jnb     short loc_407BA6
.text:00407B9A                 mov     edi, [esp+4Ch+arg_0]
.text:00407B9E                 mov     ecx, [esp+4Ch+var_34]
.text:00407BA2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00407BA6
.text:00407BA6 loc_407BA6:                             ; CODE XREF: sub_407860+338↑j
.text:00407BA6                 inc     [esp+4Ch+var_34]
.text:00407BAA                 mov     esi, [esp+4Ch+arg_4]
.text:00407BAE                 cmp     [esp+4Ch+var_34], esi
.text:00407BB2                 jnb     short loc_407BC0
.text:00407BB4                 mov     ebx, [esp+4Ch+arg_0]
.text:00407BB8                 mov     eax, [esp+4Ch+var_34]
.text:00407BBC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00407BC0
.text:00407BC0 loc_407BC0:                             ; CODE XREF: sub_407860+352↑j
.text:00407BC0                 inc     [esp+4Ch+var_34]
.text:00407BC4                 mov     bl, 30h ; '0'
.text:00407BC6                 lea     esi, [esi+0]
.text:00407BC9                 lea     edi, [edi+0]
.text:00407BD0
.text:00407BD0 def_407D62:                             ; CODE XREF: sub_407860+105↑j
.text:00407BD0                                         ; sub_407860+463↓j ...
.text:00407BD0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00407965 cases 37,43-58,65-90,93,95,97-122
.text:00407BD0                                         ; jumptable 00407D62 default case, cases 34-38,42-44,46,48-59
.text:00407BD5                 lea     eax, [ebp+1]
.text:00407BD8                 jz      short loc_407C20
.text:00407BDA                 mov     cl, bl
.text:00407BDC                 mov     edi, [esp+4Ch+arg_14]
.text:00407BE0                 mov     esi, 1
.text:00407BE5                 shr     cl, 5
.text:00407BE8                 movzx   edx, cl
.text:00407BEB                 mov     ecx, ebx
.text:00407BED                 and     ecx, 1Fh
.text:00407BF0                 shl     esi, cl
.text:00407BF2                 test    [edi+edx*4+4], esi
.text:00407BF6                 jz      short loc_407C12
.text:00407BF8
.text:00407BF8 loc_407BF8:                             ; CODE XREF: sub_407860+3FC↓j
.text:00407BF8                 mov     edx, [esp+4Ch+arg_4]
.text:00407BFC                 cmp     [esp+4Ch+var_34], edx
.text:00407C00                 jnb     short loc_407C0E
.text:00407C02                 mov     edi, [esp+4Ch+arg_0]
.text:00407C06                 mov     esi, [esp+4Ch+var_34]
.text:00407C0A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:00407C0E
.text:00407C0E loc_407C0E:                             ; CODE XREF: sub_407860+3A0↑j
.text:00407C0E                 inc     [esp+4Ch+var_34]
.text:00407C12
.text:00407C12 loc_407C12:                             ; CODE XREF: sub_407860+396↑j
.text:00407C12                 lea     eax, [ebp+1]
.text:00407C15                 lea     esi, [esi+0]
.text:00407C19                 lea     edi, [edi+0]
.text:00407C20
.text:00407C20 loc_407C20:                             ; CODE XREF: sub_407860+310↑j
.text:00407C20                                         ; sub_407860+378↑j ...
.text:00407C20                 mov     ebp, [esp+4Ch+arg_4]
.text:00407C24                 cmp     [esp+4Ch+var_34], ebp
.text:00407C28                 jnb     short loc_407C35
.text:00407C2A                 mov     edx, [esp+4Ch+arg_0]
.text:00407C2E                 mov     ecx, [esp+4Ch+var_34]
.text:00407C32                 mov     [ecx+edx], bl
.text:00407C35
.text:00407C35 loc_407C35:                             ; CODE XREF: sub_407860+3C8↑j
.text:00407C35                 inc     [esp+4Ch+var_34]
.text:00407C39                 mov     ebp, eax
.text:00407C3B                 jmp     loc_4078F0
.text:00407C40 ; ---------------------------------------------------------------------------
.text:00407C40
.text:00407C40 loc_407C40:                             ; CODE XREF: sub_407860+105↑j
.text:00407C40                                         ; DATA XREF: sub_407860:jpt_407965↑o
.text:00407C40                 mov     dl, 61h ; 'a'   ; jumptable 00407965 case 7
.text:00407C42                 lea     esi, [esi+0]
.text:00407C49                 lea     edi, [edi+0]
.text:00407C50
.text:00407C50 loc_407C50:                             ; CODE XREF: sub_407860+400↓j
.text:00407C50                                         ; sub_407860+409↓j ...
.text:00407C50                 cmp     [esp+4Ch+var_21], 0
.text:00407C55                 lea     eax, [ebp+1]
.text:00407C58                 jz      short loc_407C20
.text:00407C5A                 mov     bl, dl
.text:00407C5C                 jmp     short loc_407BF8
.text:00407C5E ; ---------------------------------------------------------------------------
.text:00407C5E
.text:00407C5E loc_407C5E:                             ; CODE XREF: sub_407860+105↑j
.text:00407C5E                                         ; DATA XREF: sub_407860:jpt_407965↑o
.text:00407C5E                 mov     dl, 62h ; 'b'   ; jumptable 00407965 case 8
.text:00407C60                 jmp     short loc_407C50
.text:00407C62 ; ---------------------------------------------------------------------------
.text:00407C62
.text:00407C62 loc_407C62:                             ; CODE XREF: sub_407860+105↑j
.text:00407C62                                         ; DATA XREF: sub_407860:jpt_407965↑o
.text:00407C62                 mov     dl, 74h ; 't'   ; jumptable 00407965 case 9
.text:00407C64
.text:00407C64 loc_407C64:                             ; CODE XREF: sub_407860+449↓j
.text:00407C64                                         ; sub_407860+455↓j ...
.text:00407C64                 cmp     [esp+4Ch+arg_10], 1
.text:00407C69                 jnz     short loc_407C50
.text:00407C6B
.text:00407C6B loc_407C6B:                             ; CODE XREF: sub_407860+45C↓j
.text:00407C6B                                         ; sub_407860+4C1↓j ...
.text:00407C6B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00408032 cases 91,92,94,96,124
.text:00407C73                 mov     eax, [esp+4Ch+arg_14]
.text:00407C77                 mov     edx, [esp+4Ch+arg_C]
.text:00407C7B                 mov     ecx, [esp+4Ch+Str]
.text:00407C7F                 mov     ebx, [esp+4Ch+arg_4]
.text:00407C83                 mov     [esp+4Ch+var_38], eax ; int
.text:00407C87                 mov     ebp, [esp+4Ch+arg_0]
.text:00407C8B                 mov     [esp+4Ch+State], edx ; int
.text:00407C8F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00407C93                 mov     [esp+4Ch+Type], ebx ; int
.text:00407C97                 mov     [esp+4Ch+C], ebp ; int
.text:00407C9A                 call    sub_407860
.text:00407C9F
.text:00407C9F loc_407C9F:                             ; CODE XREF: sub_407860+972↓j
.text:00407C9F                 add     esp, 3Ch
.text:00407CA2                 pop     ebx
.text:00407CA3                 pop     esi
.text:00407CA4                 pop     edi
.text:00407CA5                 pop     ebp
.text:00407CA6                 retn
.text:00407CA7 ; ---------------------------------------------------------------------------
.text:00407CA7
.text:00407CA7 loc_407CA7:                             ; CODE XREF: sub_407860+105↑j
.text:00407CA7                                         ; DATA XREF: sub_407860:jpt_407965↑o
.text:00407CA7                 mov     dl, 6Eh ; 'n'   ; jumptable 00407965 case 10
.text:00407CA9                 jmp     short loc_407C64
.text:00407CAB ; ---------------------------------------------------------------------------
.text:00407CAB
.text:00407CAB loc_407CAB:                             ; CODE XREF: sub_407860+105↑j
.text:00407CAB                                         ; DATA XREF: sub_407860:jpt_407965↑o
.text:00407CAB                 mov     dl, 76h ; 'v'   ; jumptable 00407965 case 11
.text:00407CAD                 jmp     short loc_407C50
.text:00407CAF ; ---------------------------------------------------------------------------
.text:00407CAF
.text:00407CAF loc_407CAF:                             ; CODE XREF: sub_407860+105↑j
.text:00407CAF                                         ; DATA XREF: sub_407860:jpt_407965↑o
.text:00407CAF                 mov     dl, 66h ; 'f'   ; jumptable 00407965 case 12
.text:00407CB1                 jmp     short loc_407C50
.text:00407CB3 ; ---------------------------------------------------------------------------
.text:00407CB3
.text:00407CB3 loc_407CB3:                             ; CODE XREF: sub_407860+105↑j
.text:00407CB3                                         ; DATA XREF: sub_407860:jpt_407965↑o
.text:00407CB3                 mov     dl, 72h ; 'r'   ; jumptable 00407965 case 13
.text:00407CB5                 jmp     short loc_407C64
.text:00407CB7 ; ---------------------------------------------------------------------------
.text:00407CB7
.text:00407CB7 loc_407CB7:                             ; CODE XREF: sub_407860+105↑j
.text:00407CB7                                         ; DATA XREF: sub_407860:jpt_407965↑o
.text:00407CB7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00407965 case 39
.text:00407CBC                 jz      short loc_407C6B ; jumptable 00408032 cases 91,92,94,96,124
.text:00407CBE                 cmp     [esp+4Ch+arg_10], 2
.text:00407CC3                 jnz     def_407D62      ; jumptable 00407965 cases 37,43-58,65-90,93,95,97-122
.text:00407CC3                                         ; jumptable 00407D62 default case, cases 34-38,42-44,46,48-59
.text:00407CC9                 mov     edx, [esp+4Ch+arg_4]
.text:00407CCD                 cmp     [esp+4Ch+var_34], edx
.text:00407CD1                 jnb     short loc_407CDF
.text:00407CD3                 mov     ecx, [esp+4Ch+arg_0]
.text:00407CD7                 mov     edi, [esp+4Ch+var_34]
.text:00407CDB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:00407CDF
.text:00407CDF loc_407CDF:                             ; CODE XREF: sub_407860+471↑j
.text:00407CDF                 inc     [esp+4Ch+var_34]
.text:00407CE3                 mov     eax, [esp+4Ch+arg_4]
.text:00407CE7                 cmp     [esp+4Ch+var_34], eax
.text:00407CEB                 jnb     short loc_407CF9
.text:00407CED                 mov     esi, [esp+4Ch+arg_0]
.text:00407CF1                 mov     edx, [esp+4Ch+var_34]
.text:00407CF5                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00407CF9
.text:00407CF9 loc_407CF9:                             ; CODE XREF: sub_407860+48B↑j
.text:00407CF9                 inc     [esp+4Ch+var_34]
.text:00407CFD                 mov     edi, [esp+4Ch+arg_4]
.text:00407D01                 cmp     [esp+4Ch+var_34], edi
.text:00407D05                 jnb     short loc_407D13
.text:00407D07                 mov     ecx, [esp+4Ch+arg_0]
.text:00407D0B                 mov     eax, [esp+4Ch+var_34]
.text:00407D0F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00407D13
.text:00407D13 loc_407D13:                             ; CODE XREF: sub_407860+4A5↑j
.text:00407D13                                         ; sub_407860+5C4↓j ...
.text:00407D13                 inc     [esp+4Ch+var_34]
.text:00407D17                 jmp     def_407D62      ; jumptable 00407965 cases 37,43-58,65-90,93,95,97-122
.text:00407D17                                         ; jumptable 00407D62 default case, cases 34-38,42-44,46,48-59
.text:00407D1C ; ---------------------------------------------------------------------------
.text:00407D1C
.text:00407D1C loc_407D1C:                             ; CODE XREF: sub_407860+105↑j
.text:00407D1C                                         ; DATA XREF: sub_407860:jpt_407965↑o
.text:00407D1C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00407965 case 63
.text:00407D21                 jz      loc_407C6B      ; jumptable 00408032 cases 91,92,94,96,124
.text:00407D27                 cmp     [esp+4Ch+arg_10], 3
.text:00407D2C                 jnz     def_407D62      ; jumptable 00407965 cases 37,43-58,65-90,93,95,97-122
.text:00407D2C                                         ; jumptable 00407D62 default case, cases 34-38,42-44,46,48-59
.text:00407D32                 lea     edx, [ebp+2]
.text:00407D35                 cmp     edx, [esp+4Ch+arg_C]
.text:00407D39                 jnb     def_407D62      ; jumptable 00407965 cases 37,43-58,65-90,93,95,97-122
.text:00407D39                                         ; jumptable 00407D62 default case, cases 34-38,42-44,46,48-59
.text:00407D3F                 mov     esi, [esp+4Ch+Str]
.text:00407D43                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00407D48                 jnz     def_407D62      ; jumptable 00407965 cases 37,43-58,65-90,93,95,97-122
.text:00407D48                                         ; jumptable 00407D62 default case, cases 34-38,42-44,46,48-59
.text:00407D4E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00407D53                 movsx   eax, cl
.text:00407D56                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00407D59                 cmp     eax, 1Dh
.text:00407D5C                 ja      def_407D62      ; jumptable 00407965 cases 37,43-58,65-90,93,95,97-122
.text:00407D5C                                         ; jumptable 00407D62 default case, cases 34-38,42-44,46,48-59
.text:00407D62                 jmp     ds:jpt_407D62[eax*4] ; switch jump
.text:00407D62 ; ---------------------------------------------------------------------------
.text:00407D69                 align 4
.text:00407D6C jpt_407D62      dd offset loc_407DE4    ; DATA XREF: sub_407860+502↑r
.text:00407D6C                 dd offset def_407D62    ; jump table for switch statement
.text:00407D6C                 dd offset def_407D62
.text:00407D6C                 dd offset def_407D62
.text:00407D6C                 dd offset def_407D62
.text:00407D6C                 dd offset def_407D62
.text:00407D6C                 dd offset loc_407DE4
.text:00407D6C                 dd offset loc_407DE4
.text:00407D6C                 dd offset loc_407DE4
.text:00407D6C                 dd offset def_407D62
.text:00407D6C                 dd offset def_407D62
.text:00407D6C                 dd offset def_407D62
.text:00407D6C                 dd offset loc_407DE4
.text:00407D6C                 dd offset def_407D62
.text:00407D6C                 dd offset loc_407DE4
.text:00407D6C                 dd offset def_407D62
.text:00407D6C                 dd offset def_407D62
.text:00407D6C                 dd offset def_407D62
.text:00407D6C                 dd offset def_407D62
.text:00407D6C                 dd offset def_407D62
.text:00407D6C                 dd offset def_407D62
.text:00407D6C                 dd offset def_407D62
.text:00407D6C                 dd offset def_407D62
.text:00407D6C                 dd offset def_407D62
.text:00407D6C                 dd offset def_407D62
.text:00407D6C                 dd offset def_407D62
.text:00407D6C                 dd offset def_407D62
.text:00407D6C                 dd offset loc_407DE4
.text:00407D6C                 dd offset loc_407DE4
.text:00407D6C                 dd offset loc_407DE4
.text:00407DE4 ; ---------------------------------------------------------------------------
.text:00407DE4
.text:00407DE4 loc_407DE4:                             ; CODE XREF: sub_407860+502↑j
.text:00407DE4                                         ; DATA XREF: sub_407860:jpt_407D62↑o
.text:00407DE4                 mov     ebp, edx        ; jumptable 00407D62 cases 33,39-41,45,47,60-62
.text:00407DE6                 mov     bl, cl
.text:00407DE8                 mov     edx, [esp+4Ch+arg_4]
.text:00407DEC                 cmp     [esp+4Ch+var_34], edx
.text:00407DF0                 jnb     short loc_407DFE
.text:00407DF2                 mov     ecx, [esp+4Ch+arg_0]
.text:00407DF6                 mov     edi, [esp+4Ch+var_34]
.text:00407DFA                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:00407DFE
.text:00407DFE loc_407DFE:                             ; CODE XREF: sub_407860+590↑j
.text:00407DFE                 inc     [esp+4Ch+var_34]
.text:00407E02                 mov     eax, [esp+4Ch+arg_4]
.text:00407E06                 cmp     [esp+4Ch+var_34], eax
.text:00407E0A                 jnb     short loc_407E18
.text:00407E0C                 mov     edx, [esp+4Ch+arg_0]
.text:00407E10                 mov     esi, [esp+4Ch+var_34]
.text:00407E14                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00407E18
.text:00407E18 loc_407E18:                             ; CODE XREF: sub_407860+5AA↑j
.text:00407E18                 inc     [esp+4Ch+var_34]
.text:00407E1C                 mov     edi, [esp+4Ch+arg_4]
.text:00407E20                 cmp     [esp+4Ch+var_34], edi
.text:00407E24                 jnb     loc_407D13
.text:00407E2A                 mov     eax, [esp+4Ch+arg_0]
.text:00407E2E                 mov     ecx, [esp+4Ch+var_34]
.text:00407E32                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00407E36                 jmp     loc_407D13
.text:00407E36 ; ---------------------------------------------------------------------------
.text:00407E3B                 align 10h
.text:00407E40
.text:00407E40 def_407965:                             ; CODE XREF: sub_407860+FF↑j
.text:00407E40                                         ; sub_407860+105↑j
.text:00407E40                                         ; DATA XREF: ...
.text:00407E40                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00407965 default case, cases 1-6,14-31,64
.text:00407E45                 jz      loc_407F70
.text:00407E4B                 mov     [esp+4Ch+var_28], 1
.text:00407E53                 mov     esi, ds:__mb_cur_max
.text:00407E59                 movzx   edx, bl
.text:00407E5C                 cmp     dword ptr [esi], 1
.text:00407E5F                 jz      loc_407F54
.text:00407E65                 mov     [esp+4Ch+Type], 157h ; Type
.text:00407E6D                 mov     [esp+4Ch+C], edx ; C
.text:00407E70                 call    _isctype
.text:00407E75
.text:00407E75 loc_407E75:                             ; CODE XREF: sub_407860+705↓j
.text:00407E75                 test    eax, eax
.text:00407E77                 setnz   [esp+4Ch+var_29]
.text:00407E7C
.text:00407E7C loc_407E7C:                             ; CODE XREF: sub_407860+7A5↓j
.text:00407E7C                 cmp     [esp+4Ch+var_21], 0
.text:00407E81                 lea     eax, [ebp+1]
.text:00407E84                 jz      loc_407C20
.text:00407E8A                 cmp     [esp+4Ch+var_29], 0
.text:00407E8F                 jnz     def_407D62      ; jumptable 00407965 cases 37,43-58,65-90,93,95,97-122
.text:00407E8F                                         ; jumptable 00407D62 default case, cases 34-38,42-44,46,48-59
.text:00407E95
.text:00407E95 loc_407E95:                             ; CODE XREF: sub_407860+7AB↓j
.text:00407E95                 mov     eax, [esp+4Ch+var_28]
.text:00407E99                 lea     edx, [eax+ebp]
.text:00407E9C                 lea     esi, [esi+0]
.text:00407EA0
.text:00407EA0 loc_407EA0:                             ; CODE XREF: sub_407860+6EF↓j
.text:00407EA0                 cmp     [esp+4Ch+var_21], 0
.text:00407EA5                 jz      short loc_407F20
.text:00407EA7                 cmp     [esp+4Ch+var_29], 0
.text:00407EAC                 jnz     short loc_407F20
.text:00407EAE                 mov     edi, [esp+4Ch+arg_4]
.text:00407EB2                 cmp     [esp+4Ch+var_34], edi
.text:00407EB6                 jnb     short loc_407EC4
.text:00407EB8                 mov     esi, [esp+4Ch+arg_0]
.text:00407EBC                 mov     eax, [esp+4Ch+var_34]
.text:00407EC0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00407EC4
.text:00407EC4 loc_407EC4:                             ; CODE XREF: sub_407860+656↑j
.text:00407EC4                 inc     [esp+4Ch+var_34]
.text:00407EC8                 mov     ecx, [esp+4Ch+arg_4]
.text:00407ECC                 cmp     [esp+4Ch+var_34], ecx
.text:00407ED0                 jnb     short loc_407EE5
.text:00407ED2                 mov     cl, bl
.text:00407ED4                 mov     esi, [esp+4Ch+arg_0]
.text:00407ED8                 mov     edi, [esp+4Ch+var_34]
.text:00407EDC                 shr     cl, 6
.text:00407EDF                 add     cl, 30h ; '0'
.text:00407EE2                 mov     [edi+esi], cl
.text:00407EE5
.text:00407EE5 loc_407EE5:                             ; CODE XREF: sub_407860+670↑j
.text:00407EE5                 inc     [esp+4Ch+var_34]
.text:00407EE9                 mov     edi, [esp+4Ch+arg_4]
.text:00407EED                 cmp     [esp+4Ch+var_34], edi
.text:00407EF1                 jnb     short loc_407F09
.text:00407EF3                 mov     cl, bl
.text:00407EF5                 mov     esi, [esp+4Ch+arg_0]
.text:00407EF9                 shr     cl, 3
.text:00407EFC                 mov     edi, [esp+4Ch+var_34]
.text:00407F00                 and     cl, 7
.text:00407F03                 add     cl, 30h ; '0'
.text:00407F06                 mov     [edi+esi], cl
.text:00407F09
.text:00407F09 loc_407F09:                             ; CODE XREF: sub_407860+691↑j
.text:00407F09                 inc     [esp+4Ch+var_34]
.text:00407F0D                 and     bl, 7
.text:00407F10                 add     bl, 30h ; '0'
.text:00407F13                 lea     esi, [esi+0]
.text:00407F19                 lea     edi, [edi+0]
.text:00407F20
.text:00407F20 loc_407F20:                             ; CODE XREF: sub_407860+645↑j
.text:00407F20                                         ; sub_407860+64C↑j
.text:00407F20                 lea     eax, [ebp+1]
.text:00407F23                 cmp     edx, eax
.text:00407F25                 jbe     loc_407C20
.text:00407F2B                 mov     ebp, [esp+4Ch+arg_4]
.text:00407F2F                 cmp     [esp+4Ch+var_34], ebp
.text:00407F33                 jnb     short loc_407F40
.text:00407F35                 mov     ecx, [esp+4Ch+arg_0]
.text:00407F39                 mov     edi, [esp+4Ch+var_34]
.text:00407F3D                 mov     [edi+ecx], bl
.text:00407F40
.text:00407F40 loc_407F40:                             ; CODE XREF: sub_407860+6D3↑j
.text:00407F40                 inc     [esp+4Ch+var_34]
.text:00407F44                 mov     ebp, eax
.text:00407F46                 mov     eax, [esp+4Ch+Str]
.text:00407F4A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:00407F4F                 jmp     loc_407EA0
.text:00407F54 ; ---------------------------------------------------------------------------
.text:00407F54
.text:00407F54 loc_407F54:                             ; CODE XREF: sub_407860+5FF↑j
.text:00407F54                 mov     ecx, ds:_pctype
.text:00407F5A                 mov     edi, [ecx]
.text:00407F5C                 movzx   eax, word ptr [edi+edx*2]
.text:00407F60                 and     eax, 157h
.text:00407F65                 jmp     loc_407E75
.text:00407F65 ; ---------------------------------------------------------------------------
.text:00407F6A                 align 10h
.text:00407F70
.text:00407F70 loc_407F70:                             ; CODE XREF: sub_407860+5E5↑j
.text:00407F70                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00407F75                 mov     [esp+4Ch+var_18._Wchar], 0
.text:00407F7D                 mov     [esp+4Ch+var_28], 0
.text:00407F85                 mov     [esp+4Ch+var_29], 1
.text:00407F8A                 jz      loc_40811C
.text:00407F90
.text:00407F90 loc_407F90:                             ; CODE XREF: sub_407860+8CC↓j
.text:00407F90                 mov     ecx, [esp+4Ch+arg_C]
.text:00407F94                 lea     edx, [esp+4Ch+var_18]
.text:00407F98                 mov     edi, [esp+4Ch+Str]
.text:00407F9C                 mov     [esp+4Ch+State], edx ; State
.text:00407FA0                 lea     esi, [esp+4Ch+var_18._State]
.text:00407FA4                 sub     ecx, ebp
.text:00407FA6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:00407FAA                 add     edi, ebp
.text:00407FAC                 mov     [esp+4Ch+var_30], edi
.text:00407FB0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00407FB4                 mov     [esp+4Ch+C], esi ; DstCh
.text:00407FB7                 call    mbrtowc
.text:00407FBC                 test    eax, eax
.text:00407FBE                 mov     edi, eax
.text:00407FC0                 jz      short loc_408000
.text:00407FC2                 cmp     eax, 0FFFFFFFFh
.text:00407FC5                 jz      loc_408112
.text:00407FCB                 cmp     eax, 0FFFFFFFEh
.text:00407FCE                 jz      loc_4080D2
.text:00407FD4                 cmp     [esp+4Ch+arg_10], 1
.text:00407FD9                 jz      short loc_408010
.text:00407FDB
.text:00407FDB loc_407FDB:                             ; CODE XREF: sub_407860+7B9↓j
.text:00407FDB                                         ; sub_407860+86D↓j
.text:00407FDB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00407FE0                 mov     [esp+4Ch+Type], 157h ; Type
.text:00407FE8                 mov     [esp+4Ch+C], ecx ; C
.text:00407FEB                 call    iswctype
.text:00407FF0                 test    eax, eax
.text:00407FF2                 jnz     short loc_407FF9
.text:00407FF4                 mov     [esp+4Ch+var_29], 0
.text:00407FF9
.text:00407FF9 loc_407FF9:                             ; CODE XREF: sub_407860+792↑j
.text:00407FF9                 mov     [esp+4Ch+var_28], edi
.text:00407FFD                 lea     esi, [esi+0]
.text:00408000
.text:00408000 loc_408000:                             ; CODE XREF: sub_407860+760↑j
.text:00408000                                         ; sub_407860+87B↓j ...
.text:00408000                 cmp     [esp+4Ch+var_28], 1
.text:00408005                 jbe     loc_407E7C
.text:0040800B                 jmp     loc_407E95
.text:00408010 ; ---------------------------------------------------------------------------
.text:00408010
.text:00408010 loc_408010:                             ; CODE XREF: sub_407860+779↑j
.text:00408010                 cmp     [esp+4Ch+arg_10], eax
.text:00408014                 mov     edx, 1
.text:00408019                 jnb     short loc_407FDB
.text:0040801B
.text:0040801B loc_40801B:                             ; CODE XREF: sub_407860+867↓j
.text:0040801B                 mov     ecx, [esp+4Ch+Str]
.text:0040801F                 lea     esi, [edx+ebp]
.text:00408022                 movsx   eax, byte ptr [esi+ecx]
.text:00408026                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00408029                 cmp     eax, 21h
.text:0040802C                 ja      def_408032      ; jumptable 00408032 default case, cases 93,95,97-123
.text:00408032                 jmp     ds:jpt_408032[eax*4] ; switch jump
.text:00408032 ; ---------------------------------------------------------------------------
.text:00408039                 align 4
.text:0040803C jpt_408032      dd offset loc_407C6B    ; DATA XREF: sub_407860+7D2↑r
.text:0040803C                 dd offset loc_407C6B    ; jump table for switch statement
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset loc_407C6B
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset loc_407C6B
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset def_408032
.text:0040803C                 dd offset loc_407C6B
.text:004080C4 ; ---------------------------------------------------------------------------
.text:004080C4
.text:004080C4 def_408032:                             ; CODE XREF: sub_407860+7CC↑j
.text:004080C4                                         ; sub_407860+7D2↑j
.text:004080C4                                         ; DATA XREF: ...
.text:004080C4                 inc     edx             ; jumptable 00408032 default case, cases 93,95,97-123
.text:004080C5                 cmp     edx, edi
.text:004080C7                 jb      loc_40801B
.text:004080CD                 jmp     loc_407FDB
.text:004080D2 ; ---------------------------------------------------------------------------
.text:004080D2
.text:004080D2 loc_4080D2:                             ; CODE XREF: sub_407860+76E↑j
.text:004080D2                 cmp     ebp, [esp+4Ch+arg_C]
.text:004080D6                 mov     [esp+4Ch+var_29], 0
.text:004080DB                 jnb     loc_408000
.text:004080E1                 mov     eax, [esp+4Ch+var_30]
.text:004080E5                 cmp     byte ptr [eax], 0
.text:004080E8                 jz      loc_408000
.text:004080EE
.text:004080EE loc_4080EE:                             ; CODE XREF: sub_407860+8AB↓j
.text:004080EE                 inc     [esp+4Ch+var_28]
.text:004080F2                 mov     esi, [esp+4Ch+var_28]
.text:004080F6                 lea     eax, [esi+ebp]
.text:004080F9                 cmp     eax, [esp+4Ch+arg_C]
.text:004080FD                 jnb     loc_408000
.text:00408103                 mov     edi, [esp+4Ch+Str]
.text:00408107                 cmp     byte ptr [eax+edi], 0
.text:0040810B                 jnz     short loc_4080EE
.text:0040810D                 jmp     loc_408000
.text:00408112 ; ---------------------------------------------------------------------------
.text:00408112
.text:00408112 loc_408112:                             ; CODE XREF: sub_407860+765↑j
.text:00408112                 mov     [esp+4Ch+var_29], 0
.text:00408117                 jmp     loc_408000
.text:0040811C ; ---------------------------------------------------------------------------
.text:0040811C
.text:0040811C loc_40811C:                             ; CODE XREF: sub_407860+72A↑j
.text:0040811C                 mov     edx, [esp+4Ch+Str]
.text:00408120                 mov     [esp+4Ch+C], edx ; Str
.text:00408123                 call    strlen
.text:00408128                 mov     [esp+4Ch+arg_C], eax
.text:0040812C                 jmp     loc_407F90
.text:00408131 ; ---------------------------------------------------------------------------
.text:00408131
.text:00408131 loc_408131:                             ; CODE XREF: sub_407860+105↑j
.text:00408131                                         ; DATA XREF: sub_407860:jpt_407965↑o
.text:00408131                 mov     dl, bl          ; jumptable 00407965 case 92
.text:00408133                 jmp     loc_407C64
.text:00408138 ; ---------------------------------------------------------------------------
.text:00408138
.text:00408138 loc_408138:                             ; CODE XREF: sub_407860+105↑j
.text:00408138                                         ; sub_407860+902↓j
.text:00408138                                         ; DATA XREF: ...
.text:00408138                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00407965 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040813D                 jnz     def_407D62      ; jumptable 00407965 cases 37,43-58,65-90,93,95,97-122
.text:0040813D                                         ; jumptable 00407D62 default case, cases 34-38,42-44,46,48-59
.text:00408143                 jmp     loc_407C6B      ; jumptable 00408032 cases 91,92,94,96,124
.text:00408148 ; ---------------------------------------------------------------------------
.text:00408148
.text:00408148 loc_408148:                             ; CODE XREF: sub_407860+105↑j
.text:00408148                                         ; DATA XREF: sub_407860:jpt_407965↑o
.text:00408148                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00407965 cases 123,125
.text:0040814D                 jz      short loc_408164
.text:0040814F                 cmp     [esp+4Ch+arg_C], 1
.text:00408154
.text:00408154 loc_408154:                             ; CODE XREF: sub_407860+90C↓j
.text:00408154                 jnz     def_407D62      ; jumptable 00407965 cases 37,43-58,65-90,93,95,97-122
.text:00408154                                         ; jumptable 00407D62 default case, cases 34-38,42-44,46,48-59
.text:0040815A
.text:0040815A loc_40815A:                             ; CODE XREF: sub_407860+105↑j
.text:0040815A                                         ; DATA XREF: sub_407860:jpt_407965↑o
.text:0040815A                 test    ebp, ebp        ; jumptable 00407965 cases 35,126
.text:0040815C                 jnz     def_407D62      ; jumptable 00407965 cases 37,43-58,65-90,93,95,97-122
.text:0040815C                                         ; jumptable 00407D62 default case, cases 34-38,42-44,46,48-59
.text:00408162                 jmp     short loc_408138 ; jumptable 00407965 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00408164 ; ---------------------------------------------------------------------------
.text:00408164
.text:00408164 loc_408164:                             ; CODE XREF: sub_407860+8ED↑j
.text:00408164                 mov     esi, [esp+4Ch+Str]
.text:00408168                 cmp     byte ptr [esi+1], 0
.text:0040816C                 jmp     short loc_408154
.text:0040816E ; ---------------------------------------------------------------------------
.text:0040816E
.text:0040816E loc_40816E:                             ; CODE XREF: sub_407860:loc_4078FF↑j
.text:0040816E                 test    ebp, ebp
.text:00408170                 jnz     short loc_40817D
.text:00408172                 cmp     [esp+4Ch+arg_10], 1
.text:00408177                 jz      loc_407C6B      ; jumptable 00408032 cases 91,92,94,96,124
.text:0040817D
.text:0040817D loc_40817D:                             ; CODE XREF: sub_407860+910↑j
.text:0040817D                 mov     esi, [esp+4Ch+var_1C]
.text:00408181                 test    esi, esi
.text:00408183                 jz      short loc_4081B8
.text:00408185                 mov     edi, [esp+4Ch+var_1C]
.text:00408189                 movzx   eax, byte ptr [edi]
.text:0040818C                 test    al, al
.text:0040818E                 jz      short loc_4081B8
.text:00408190
.text:00408190 loc_408190:                             ; CODE XREF: sub_407860+956↓j
.text:00408190                 mov     ebp, [esp+4Ch+arg_4]
.text:00408194                 cmp     [esp+4Ch+var_34], ebp
.text:00408198                 jnb     short loc_4081A5
.text:0040819A                 mov     ecx, [esp+4Ch+arg_0]
.text:0040819E                 mov     ebx, [esp+4Ch+var_34]
.text:004081A2                 mov     [ebx+ecx], al
.text:004081A5
.text:004081A5 loc_4081A5:                             ; CODE XREF: sub_407860+938↑j
.text:004081A5                 inc     [esp+4Ch+var_1C]
.text:004081A9                 inc     [esp+4Ch+var_34]
.text:004081AD                 mov     edx, [esp+4Ch+var_1C]
.text:004081B1                 movzx   eax, byte ptr [edx]
.text:004081B4                 test    al, al
.text:004081B6                 jnz     short loc_408190
.text:004081B8
.text:004081B8 loc_4081B8:                             ; CODE XREF: sub_407860+923↑j
.text:004081B8                                         ; sub_407860+92E↑j
.text:004081B8                 mov     eax, [esp+4Ch+arg_4]
.text:004081BC                 cmp     [esp+4Ch+var_34], eax
.text:004081C0                 jnb     short loc_4081CE
.text:004081C2                 mov     edi, [esp+4Ch+arg_0]
.text:004081C6                 mov     esi, [esp+4Ch+var_34]
.text:004081CA                 mov     byte ptr [esi+edi], 0
.text:004081CE
.text:004081CE loc_4081CE:                             ; CODE XREF: sub_407860+960↑j
.text:004081CE                 mov     eax, [esp+4Ch+var_34]
.text:004081D2                 jmp     loc_407C9F
.text:004081D7 ; ---------------------------------------------------------------------------
.text:004081D7
.text:004081D7 loc_4081D7:                             ; CODE XREF: sub_407860+95↑j
.text:004081D7                 mov     ebx, [esp+4Ch+Str]
.text:004081DB                 cmp     byte ptr [ebp+ebx+0], 0
.text:004081E0                 jmp     loc_4078FF
.text:004081E5 ; ---------------------------------------------------------------------------
.text:004081E5
.text:004081E5 loc_4081E5:                             ; CODE XREF: sub_407860+3D↑j
.text:004081E5                                         ; DATA XREF: sub_407860:jpt_40789D↑o
.text:004081E5                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040789D case 2
.text:004081E9                 cmp     [esp+4Ch+var_34], edx
.text:004081ED                 jnb     short loc_4081F6
.text:004081EF                 mov     ecx, [esp+4Ch+arg_0]
.text:004081F3                 mov     byte ptr [ecx], 27h ; '''
.text:004081F6
.text:004081F6 loc_4081F6:                             ; CODE XREF: sub_407860+98D↑j
.text:004081F6                 mov     [esp+4Ch+var_34], 1
.text:004081FE                 mov     [esp+4Ch+var_1C], 40784Eh
.text:00408206                 jmp     loc_4078E6
.text:0040820B ; ---------------------------------------------------------------------------
.text:0040820B
.text:0040820B loc_40820B:                             ; CODE XREF: sub_407860+3D↑j
.text:0040820B                                         ; DATA XREF: sub_407860:jpt_40789D↑o
.text:0040820B                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040789D case 4
.text:00408210                 jmp     def_40789D      ; jumptable 0040789D default case, cases 0,1
.text:00408215 ; ---------------------------------------------------------------------------
.text:00408215
.text:00408215 loc_408215:                             ; CODE XREF: sub_407860+3D↑j
.text:00408215                                         ; DATA XREF: sub_407860:jpt_40789D↑o
.text:00408215                 mov     [esp+4Ch+C], 407850h ; jumptable 0040789D cases 5,6
.text:0040821C                 call    ds:libintl_gettext
.text:00408222                 cmp     eax, 407850h
.text:00408227                 mov     edi, eax
.text:00408229                 jz      short loc_4082A0
.text:0040822B
.text:0040822B loc_40822B:                             ; CODE XREF: sub_407860+A45↓j
.text:0040822B                                         ; sub_407860+A4C↓j
.text:0040822B                 mov     [esp+4Ch+C], 40784Eh
.text:00408232                 call    ds:libintl_gettext
.text:00408238                 cmp     eax, 40784Eh
.text:0040823D                 mov     edx, eax
.text:0040823F                 jz      short loc_408292
.text:00408241
.text:00408241 loc_408241:                             ; CODE XREF: sub_407860+A37↓j
.text:00408241                                         ; sub_407860+A3E↓j
.text:00408241                 mov     [esp+4Ch+var_1C], edi
.text:00408245                 cmp     byte ptr [edi], 0
.text:00408248                 jz      short loc_408278
.text:0040824A
.text:0040824A loc_40824A:                             ; CODE XREF: sub_407860+A16↓j
.text:0040824A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040824E                 cmp     [esp+4Ch+var_34], ecx
.text:00408252                 jnb     short loc_408267
.text:00408254                 mov     ebp, [esp+4Ch+var_1C]
.text:00408258                 mov     edi, [esp+4Ch+arg_0]
.text:0040825C                 mov     esi, [esp+4Ch+var_34]
.text:00408260                 movzx   ebx, byte ptr [ebp+0]
.text:00408264                 mov     [esi+edi], bl
.text:00408267
.text:00408267 loc_408267:                             ; CODE XREF: sub_407860+9F2↑j
.text:00408267                 inc     [esp+4Ch+var_1C]
.text:0040826B                 inc     [esp+4Ch+var_34]
.text:0040826F                 mov     eax, [esp+4Ch+var_1C]
.text:00408273                 cmp     byte ptr [eax], 0
.text:00408276                 jnz     short loc_40824A
.text:00408278
.text:00408278 loc_408278:                             ; CODE XREF: sub_407860+9E8↑j
.text:00408278                 mov     [esp+4Ch+var_21], 1
.text:0040827D                 mov     [esp+4Ch+var_1C], edx
.text:00408281                 mov     [esp+4Ch+C], edx ; Str
.text:00408284                 call    strlen
.text:00408289                 mov     [esp+4Ch+var_20], eax
.text:0040828D                 jmp     def_40789D      ; jumptable 0040789D default case, cases 0,1
.text:00408292 ; ---------------------------------------------------------------------------
.text:00408292
.text:00408292 loc_408292:                             ; CODE XREF: sub_407860+9DF↑j
.text:00408292                 cmp     [esp+4Ch+arg_10], 6
.text:00408297                 jnz     short loc_408241
.text:00408299                 mov     edx, offset asc_40784C ; "\"'`"
.text:0040829E                 jmp     short loc_408241
.text:004082A0 ; ---------------------------------------------------------------------------
.text:004082A0
.text:004082A0 loc_4082A0:                             ; CODE XREF: sub_407860+9C9↑j
.text:004082A0                 cmp     [esp+4Ch+arg_10], 6
.text:004082A5                 jnz     short loc_40822B
.text:004082A7                 mov     edi, offset asc_40784C ; "\"'`"
.text:004082AC                 jmp     loc_40822B
.text:004082AC sub_407860      endp
.text:004082AC
.text:004082B1 ; ---------------------------------------------------------------------------
.text:004082B1                 jmp     short loc_4082C0
.text:004082B1 ; ---------------------------------------------------------------------------
.text:004082B3                 align 10h
.text:004082C0
.text:004082C0 loc_4082C0:                             ; CODE XREF: .text:004082B1↑j
.text:004082C0                 sub     esp, 0Ch
.text:004082C3                 mov     [esp+4], ebx
.text:004082C7                 mov     [esp+8], esi
.text:004082CB                 call    _errno
.text:004082D0                 mov     esi, [eax]
.text:004082D2                 mov     dword ptr [esp], 24h ; '$'
.text:004082D9                 call    sub_408BB0
.text:004082DE                 mov     edx, [esp+10h]
.text:004082E2                 mov     ebx, eax
.text:004082E4                 test    edx, edx
.text:004082E6                 jz      short loc_408331
.text:004082E8
.text:004082E8 loc_4082E8:                             ; CODE XREF: .text:00408336↓j
.text:004082E8                 mov     ecx, [edx]
.text:004082EA                 mov     [ebx], ecx
.text:004082EC                 mov     ecx, [edx+4]
.text:004082EF                 mov     [ebx+4], ecx
.text:004082F2                 mov     ecx, [edx+8]
.text:004082F5                 mov     [ebx+8], ecx
.text:004082F8                 mov     ecx, [edx+0Ch]
.text:004082FB                 mov     [ebx+0Ch], ecx
.text:004082FE                 mov     ecx, [edx+10h]
.text:00408301                 mov     [ebx+10h], ecx
.text:00408304                 mov     ecx, [edx+14h]
.text:00408307                 mov     [ebx+14h], ecx
.text:0040830A                 mov     ecx, [edx+18h]
.text:0040830D                 mov     [ebx+18h], ecx
.text:00408310                 mov     ecx, [edx+1Ch]
.text:00408313                 mov     [ebx+1Ch], ecx
.text:00408316                 mov     ecx, [edx+20h]
.text:00408319                 mov     [ebx+20h], ecx
.text:0040831C                 call    _errno
.text:00408321                 mov     [eax], esi
.text:00408323                 mov     esi, [esp+8]
.text:00408327                 mov     eax, ebx
.text:00408329                 mov     ebx, [esp+4]
.text:0040832D                 add     esp, 0Ch
.text:00408330                 retn
.text:00408331 ; ---------------------------------------------------------------------------
.text:00408331
.text:00408331 loc_408331:                             ; CODE XREF: .text:004082E6↑j
.text:00408331                 mov     edx, offset dword_40B190
.text:00408336                 jmp     short loc_4082E8
.text:00408336 ; ---------------------------------------------------------------------------
.text:00408338                 align 10h
.text:00408340                 mov     eax, [esp+4]
.text:00408344                 test    eax, eax
.text:00408346                 jz      short loc_408350
.text:00408348
.text:00408348 loc_408348:                             ; CODE XREF: .text:00408355↓j
.text:00408348                 mov     eax, [eax]
.text:0040834A                 retn
.text:0040834A ; ---------------------------------------------------------------------------
.text:0040834B                 align 10h
.text:00408350
.text:00408350 loc_408350:                             ; CODE XREF: .text:00408346↑j
.text:00408350                 mov     eax, offset dword_40B190
.text:00408355                 jmp     short loc_408348
.text:00408355 ; ---------------------------------------------------------------------------
.text:00408357                 align 10h
.text:00408360                 mov     edx, [esp+4]
.text:00408364                 test    edx, edx
.text:00408366                 jz      short loc_408370
.text:00408368
.text:00408368 loc_408368:                             ; CODE XREF: .text:00408375↓j
.text:00408368                 mov     ecx, [esp+8]
.text:0040836C                 mov     [edx], ecx
.text:0040836E                 retn
.text:0040836E ; ---------------------------------------------------------------------------
.text:0040836F                 align 10h
.text:00408370
.text:00408370 loc_408370:                             ; CODE XREF: .text:00408366↑j
.text:00408370                 mov     edx, offset dword_40B190
.text:00408375                 jmp     short loc_408368
.text:00408375 ; ---------------------------------------------------------------------------
.text:00408377                 align 10h
.text:00408380                 sub     esp, 8
.text:00408383                 mov     eax, [esp+0Ch]
.text:00408387                 movzx   ecx, byte ptr [esp+10h]
.text:0040838C                 mov     [esp], ebx
.text:0040838F                 mov     ebx, [esp+14h]
.text:00408393                 mov     [esp+4], esi
.text:00408397                 mov     dl, cl
.text:00408399                 shr     dl, 5
.text:0040839C                 movzx   edx, dl
.text:0040839F                 shl     edx, 2
.text:004083A2                 test    eax, eax
.text:004083A4                 lea     esi, [edx+eax+4]
.text:004083A8                 jz      short loc_4083D0
.text:004083AA
.text:004083AA loc_4083AA:                             ; CODE XREF: .text:004083D6↓j
.text:004083AA                 mov     edx, [esi]
.text:004083AC                 and     ecx, 1Fh
.text:004083AF                 and     ebx, 1
.text:004083B2                 mov     eax, edx
.text:004083B4                 shr     eax, cl
.text:004083B6                 and     eax, 1
.text:004083B9                 xor     ebx, eax
.text:004083BB                 shl     ebx, cl
.text:004083BD                 xor     edx, ebx
.text:004083BF                 mov     [esi], edx
.text:004083C1                 mov     ebx, [esp]
.text:004083C4                 mov     esi, [esp+4]
.text:004083C8                 add     esp, 8
.text:004083CB                 retn
.text:004083CB ; ---------------------------------------------------------------------------
.text:004083CC                 align 10h
.text:004083D0
.text:004083D0 loc_4083D0:                             ; CODE XREF: .text:004083A8↑j
.text:004083D0                 lea     esi, dword_40B194[edx]
.text:004083D6                 jmp     short loc_4083AA
.text:004083D6 ; ---------------------------------------------------------------------------
.text:004083D8                 align 10h
.text:004083E0                 sub     esp, 2Ch
.text:004083E3                 mov     [esp+24h], ebx
.text:004083E7                 mov     ebx, [esp+40h]
.text:004083EB                 mov     [esp+28h], esi
.text:004083EF                 test    ebx, ebx
.text:004083F1                 jz      short loc_408440
.text:004083F3
.text:004083F3 loc_4083F3:                             ; CODE XREF: .text:00408445↓j
.text:004083F3                 call    _errno
.text:004083F8                 mov     esi, [eax]
.text:004083FA                 mov     [esp+14h], ebx
.text:004083FE                 mov     edx, [ebx]
.text:00408400                 mov     ecx, [esp+38h]
.text:00408404                 mov     ebx, [esp+3Ch]
.text:00408408                 mov     [esp+10h], edx
.text:0040840C                 mov     edx, [esp+34h]
.text:00408410                 mov     [esp+0Ch], ebx
.text:00408414                 mov     [esp+8], ecx
.text:00408418                 mov     [esp+4], edx
.text:0040841C                 mov     edx, [esp+30h]
.text:00408420                 mov     [esp], edx
.text:00408423                 call    sub_407860
.text:00408428                 mov     ebx, eax
.text:0040842A                 call    _errno
.text:0040842F                 mov     [eax], esi
.text:00408431                 mov     esi, [esp+28h]
.text:00408435                 mov     eax, ebx
.text:00408437                 mov     ebx, [esp+24h]
.text:0040843B                 add     esp, 2Ch
.text:0040843E                 retn
.text:0040843E ; ---------------------------------------------------------------------------
.text:0040843F                 align 10h
.text:00408440
.text:00408440 loc_408440:                             ; CODE XREF: .text:004083F1↑j
.text:00408440                 mov     ebx, offset dword_40B190
.text:00408445                 jmp     short loc_4083F3
.text:00408445 ; ---------------------------------------------------------------------------
.text:00408447                 align 10h
.text:00408450                 push    ebp
.text:00408451                 push    edi
.text:00408452                 push    esi
.text:00408453                 push    ebx
.text:00408454                 sub     esp, 2Ch
.text:00408457                 mov     ebp, [esp+48h]
.text:0040845B                 call    _errno
.text:00408460                 mov     edx, [eax]
.text:00408462                 test    ebp, ebp
.text:00408464                 mov     ebx, ebp
.text:00408466                 mov     [esp+28h], edx
.text:0040846A                 jz      loc_408520
.text:00408470
.text:00408470 loc_408470:                             ; CODE XREF: .text:00408525↓j
.text:00408470                 call    _errno
.text:00408475                 mov     edi, [eax]
.text:00408477                 mov     esi, ebp
.text:00408479                 mov     [esp+14h], ebx
.text:0040847D                 mov     ecx, [ebx]
.text:0040847F                 mov     dword ptr [esp], 0
.text:00408486                 mov     edx, [esp+44h]
.text:0040848A                 mov     dword ptr [esp+4], 0
.text:00408492                 mov     eax, [esp+40h]
.text:00408496                 mov     [esp+10h], ecx
.text:0040849A                 mov     [esp+0Ch], edx
.text:0040849E                 mov     [esp+8], eax
.text:004084A2                 call    sub_407860
.text:004084A7                 mov     ebx, eax
.text:004084A9                 call    _errno
.text:004084AE                 mov     [eax], edi
.text:004084B0                 lea     edi, [ebx+1]
.text:004084B3                 mov     [esp], edi
.text:004084B6                 call    sub_408BB0
.text:004084BB                 mov     [esp+24h], eax
.text:004084BF                 test    ebp, ebp
.text:004084C1                 jz      short loc_408512
.text:004084C3
.text:004084C3 loc_4084C3:                             ; CODE XREF: .text:00408517↓j
.text:004084C3                 call    _errno
.text:004084C8                 mov     ebp, [eax]
.text:004084CA                 mov     [esp+14h], esi
.text:004084CE                 mov     ecx, [esi]
.text:004084D0                 mov     [esp+4], edi
.text:004084D4                 mov     edx, [esp+44h]
.text:004084D8                 mov     esi, [esp+24h]
.text:004084DC                 mov     [esp+10h], ecx
.text:004084E0                 mov     eax, [esp+40h]
.text:004084E4                 mov     [esp+0Ch], edx
.text:004084E8                 mov     [esp], esi
.text:004084EB                 mov     [esp+8], eax
.text:004084EF                 call    sub_407860
.text:004084F4                 call    _errno
.text:004084F9                 mov     [eax], ebp
.text:004084FB                 call    _errno
.text:00408500                 mov     ebx, [esp+28h]
.text:00408504                 mov     [eax], ebx
.text:00408506                 mov     eax, [esp+24h]
.text:0040850A                 add     esp, 2Ch
.text:0040850D                 pop     ebx
.text:0040850E                 pop     esi
.text:0040850F                 pop     edi
.text:00408510                 pop     ebp
.text:00408511                 retn
.text:00408512 ; ---------------------------------------------------------------------------
.text:00408512
.text:00408512 loc_408512:                             ; CODE XREF: .text:004084C1↑j
.text:00408512                 mov     esi, offset dword_40B190
.text:00408517                 jmp     short loc_4084C3
.text:00408517 ; ---------------------------------------------------------------------------
.text:00408519                 align 10h
.text:00408520
.text:00408520 loc_408520:                             ; CODE XREF: .text:0040846A↑j
.text:00408520                 mov     ebx, offset dword_40B190
.text:00408525                 jmp     loc_408470
.text:00408525 ; ---------------------------------------------------------------------------
.text:0040852A                 align 10h
.text:00408530                 sub     esp, 1Ch
.text:00408533                 mov     edx, [esp+24h]
.text:00408537                 mov     dword ptr [esp+0Ch], offset dword_40B190
.text:0040853F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00408547                 mov     [esp+4], edx
.text:0040854B                 mov     edx, [esp+20h]
.text:0040854F                 mov     [esp], edx
.text:00408552                 call    sub_4089A0
.text:00408557                 add     esp, 1Ch
.text:0040855A                 retn
.text:0040855A ; ---------------------------------------------------------------------------
.text:0040855B                 align 10h
.text:00408560                 sub     esp, 1Ch
.text:00408563                 mov     edx, [esp+20h]
.text:00408567                 mov     dword ptr [esp+0Ch], offset dword_40B190
.text:0040856F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00408577                 mov     [esp+4], edx
.text:0040857B                 mov     dword ptr [esp], 0
.text:00408582                 call    sub_4089A0
.text:00408587                 add     esp, 1Ch
.text:0040858A                 retn
.text:0040858A ; ---------------------------------------------------------------------------
.text:0040858B                 align 10h
.text:00408590
.text:00408590 ; =============== S U B R O U T I N E =======================================
.text:00408590
.text:00408590
.text:00408590 ; int __cdecl sub_408590(int, int, char *)
.text:00408590 sub_408590      proc near               ; CODE XREF: .text:0040703A↑p
.text:00408590                                         ; sub_407050+1A↑p
.text:00408590
.text:00408590 var_BC          = dword ptr -0BCh
.text:00408590 var_B8          = dword ptr -0B8h
.text:00408590 var_B4          = dword ptr -0B4h
.text:00408590 var_B0          = dword ptr -0B0h
.text:00408590 var_AC          = dword ptr -0ACh
.text:00408590 var_A8          = dword ptr -0A8h
.text:00408590 var_A4          = dword ptr -0A4h
.text:00408590 var_A0          = dword ptr -0A0h
.text:00408590 var_9C          = dword ptr -9Ch
.text:00408590 var_98          = dword ptr -98h
.text:00408590 var_94          = dword ptr -94h
.text:00408590 var_90          = dword ptr -90h
.text:00408590 var_8C          = dword ptr -8Ch
.text:00408590 var_7C          = dword ptr -7Ch
.text:00408590 var_78          = dword ptr -78h
.text:00408590 var_74          = dword ptr -74h
.text:00408590 var_70          = dword ptr -70h
.text:00408590 var_6C          = dword ptr -6Ch
.text:00408590 var_68          = dword ptr -68h
.text:00408590 var_64          = dword ptr -64h
.text:00408590 var_60          = dword ptr -60h
.text:00408590 var_5C          = dword ptr -5Ch
.text:00408590 var_4C          = dword ptr -4Ch
.text:00408590 var_48          = dword ptr -48h
.text:00408590 var_44          = dword ptr -44h
.text:00408590 var_40          = dword ptr -40h
.text:00408590 var_3C          = dword ptr -3Ch
.text:00408590 var_38          = dword ptr -38h
.text:00408590 var_34          = dword ptr -34h
.text:00408590 var_30          = dword ptr -30h
.text:00408590 var_2C          = dword ptr -2Ch
.text:00408590 arg_0           = dword ptr  4
.text:00408590 arg_4           = dword ptr  8
.text:00408590 arg_8           = dword ptr  0Ch
.text:00408590
.text:00408590                 push    ebp
.text:00408591                 xor     eax, eax
.text:00408593                 mov     ecx, 8
.text:00408598                 push    edi
.text:00408599                 push    esi
.text:0040859A                 push    ebx
.text:0040859B                 sub     esp, 0ACh
.text:004085A1                 mov     ebp, [esp+0BCh+arg_4]
.text:004085A8                 cld
.text:004085A9                 lea     edi, [esp+0BCh+var_A8]
.text:004085AD                 mov     [esp+0BCh+var_AC], ebp
.text:004085B1                 rep stosd
.text:004085B3                 mov     eax, [esp+0BCh+var_8C]
.text:004085B7                 mov     edi, [esp+0BCh+var_AC]
.text:004085BB                 mov     esi, [esp+0BCh+var_A8]
.text:004085BF                 mov     [esp+0BCh+var_5C], eax
.text:004085C3                 mov     ebp, [esp+0BCh+var_A4]
.text:004085C7                 mov     eax, [esp+0BCh+var_AC]
.text:004085CB                 mov     [esp+0BCh+var_7C], edi
.text:004085CF                 mov     ecx, [esp+0BCh+var_94]
.text:004085D3                 mov     edi, [esp+0BCh+var_A0]
.text:004085D7                 mov     [esp+0BCh+var_78], esi
.text:004085DB                 mov     edx, [esp+0BCh+var_90]
.text:004085DF                 mov     esi, [esp+0BCh+var_9C]
.text:004085E3                 mov     [esp+0BCh+var_4C], eax
.text:004085E7                 mov     ebx, [esp+0BCh+var_98]
.text:004085EB                 mov     eax, [esp+0BCh+var_A8]
.text:004085EF                 mov     [esp+0BCh+var_74], ebp
.text:004085F3                 mov     [esp+0BCh+var_70], edi
.text:004085F7                 mov     [esp+0BCh+var_6C], esi
.text:004085FB                 mov     [esp+0BCh+var_68], ebx
.text:004085FF                 mov     [esp+0BCh+var_64], ecx
.text:00408603                 mov     [esp+0BCh+var_60], edx
.text:00408607                 mov     [esp+0BCh+var_48], eax
.text:0040860B                 mov     [esp+0BCh+var_44], ebp
.text:0040860F                 mov     [esp+0BCh+var_40], edi
.text:00408613                 mov     [esp+0BCh+var_3C], esi
.text:0040861A                 mov     [esp+0BCh+var_38], ebx
.text:00408621                 mov     ebx, [esp+0BCh+var_8C]
.text:00408625                 mov     [esp+0BCh+var_30], edx
.text:0040862C                 mov     edx, [esp+0BCh+arg_8]
.text:00408633                 mov     [esp+0BCh+var_34], ecx
.text:0040863A                 lea     ecx, [esp+0BCh+var_4C]
.text:0040863E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00408642                 mov     edx, [esp+0BCh+arg_0]
.text:00408649                 mov     [esp+0BCh+var_2C], ebx
.text:00408650                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00408654                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:0040865C                 mov     [esp+0BCh+var_BC], edx ; int
.text:0040865F                 call    sub_4089A0
.text:00408664                 add     esp, 0ACh
.text:0040866A                 pop     ebx
.text:0040866B                 pop     esi
.text:0040866C                 pop     edi
.text:0040866D                 pop     ebp
.text:0040866E                 retn
.text:0040866E sub_408590      endp
.text:0040866E
.text:0040866E ; ---------------------------------------------------------------------------
.text:0040866F                 align 10h
.text:00408670                 push    ebp
.text:00408671                 xor     eax, eax
.text:00408673                 mov     ecx, 8
.text:00408678                 push    edi
.text:00408679                 push    esi
.text:0040867A                 push    ebx
.text:0040867B                 sub     esp, 0ACh
.text:00408681                 mov     edx, [esp+0C4h]
.text:00408688                 cld
.text:00408689                 lea     edi, [esp+14h]
.text:0040868D                 mov     [esp+10h], edx
.text:00408691                 rep stosd
.text:00408693                 mov     eax, [esp+30h]
.text:00408697                 mov     ebp, [esp+10h]
.text:0040869B                 mov     edi, [esp+14h]
.text:0040869F                 mov     [esp+60h], eax
.text:004086A3                 mov     esi, [esp+20h]
.text:004086A7                 mov     eax, [esp+10h]
.text:004086AB                 mov     [esp+40h], ebp
.text:004086AF                 mov     ecx, [esp+28h]
.text:004086B3                 mov     ebp, [esp+18h]
.text:004086B7                 mov     [esp+44h], edi
.text:004086BB                 mov     edx, [esp+2Ch]
.text:004086BF                 mov     edi, [esp+1Ch]
.text:004086C3                 mov     [esp+70h], eax
.text:004086C7                 mov     ebx, [esp+24h]
.text:004086CB                 mov     eax, [esp+14h]
.text:004086CF                 mov     [esp+48h], ebp
.text:004086D3                 mov     [esp+4Ch], edi
.text:004086D7                 mov     [esp+50h], esi
.text:004086DB                 mov     [esp+54h], ebx
.text:004086DF                 mov     [esp+58h], ecx
.text:004086E3                 mov     [esp+5Ch], edx
.text:004086E7                 mov     [esp+74h], eax
.text:004086EB                 mov     [esp+78h], ebp
.text:004086EF                 mov     [esp+7Ch], edi
.text:004086F3                 mov     [esp+80h], esi
.text:004086FA                 mov     [esp+84h], ebx
.text:00408701                 mov     esi, [esp+30h]
.text:00408705                 lea     ebx, [esp+70h]
.text:00408709                 mov     [esp+8Ch], edx
.text:00408710                 mov     edx, [esp+0C8h]
.text:00408717                 mov     [esp+88h], ecx
.text:0040871E                 mov     ecx, [esp+0CCh]
.text:00408725                 mov     [esp+4], edx
.text:00408729                 mov     edx, [esp+0C0h]
.text:00408730                 mov     [esp+90h], esi
.text:00408737                 mov     [esp+0Ch], ebx
.text:0040873B                 mov     [esp+8], ecx
.text:0040873F                 mov     [esp], edx
.text:00408742                 call    sub_4089A0
.text:00408747                 add     esp, 0ACh
.text:0040874D                 pop     ebx
.text:0040874E                 pop     esi
.text:0040874F                 pop     edi
.text:00408750                 pop     ebp
.text:00408751                 retn
.text:00408751 ; ---------------------------------------------------------------------------
.text:00408752                 align 10h
.text:00408760                 push    ebp
.text:00408761                 xor     eax, eax
.text:00408763                 mov     ecx, 8
.text:00408768                 push    edi
.text:00408769                 push    esi
.text:0040876A                 push    ebx
.text:0040876B                 sub     esp, 0ACh
.text:00408771                 mov     edi, [esp+0C0h]
.text:00408778                 cld
.text:00408779                 mov     [esp+10h], edi
.text:0040877D                 lea     edi, [esp+14h]
.text:00408781                 rep stosd
.text:00408783                 mov     eax, [esp+30h]
.text:00408787                 mov     esi, [esp+10h]
.text:0040878B                 mov     ebx, [esp+14h]
.text:0040878F                 mov     [esp+60h], eax
.text:00408793                 mov     ebp, [esp+18h]
.text:00408797                 mov     eax, [esp+10h]
.text:0040879B                 mov     [esp+40h], esi
.text:0040879F                 mov     edi, [esp+1Ch]
.text:004087A3                 mov     esi, [esp+20h]
.text:004087A7                 mov     [esp+44h], ebx
.text:004087AB                 mov     ecx, [esp+28h]
.text:004087AF                 mov     edx, [esp+2Ch]
.text:004087B3                 mov     [esp+70h], eax
.text:004087B7                 mov     ebx, [esp+24h]
.text:004087BB                 mov     eax, [esp+14h]
.text:004087BF                 mov     [esp+48h], ebp
.text:004087C3                 mov     [esp+4Ch], edi
.text:004087C7                 mov     [esp+50h], esi
.text:004087CB                 mov     [esp+54h], ebx
.text:004087CF                 mov     [esp+58h], ecx
.text:004087D3                 mov     [esp+5Ch], edx
.text:004087D7                 mov     [esp+74h], eax
.text:004087DB                 mov     [esp+78h], ebp
.text:004087DF                 mov     [esp+7Ch], edi
.text:004087E3                 mov     [esp+80h], esi
.text:004087EA                 mov     [esp+84h], ebx
.text:004087F1                 mov     [esp+8Ch], edx
.text:004087F8                 lea     edx, [esp+70h]
.text:004087FC                 mov     [esp+88h], ecx
.text:00408803                 mov     ecx, [esp+30h]
.text:00408807                 mov     [esp+0Ch], edx
.text:0040880B                 mov     edx, [esp+0C4h]
.text:00408812                 mov     [esp+90h], ecx
.text:00408819                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00408821                 mov     [esp+4], edx
.text:00408825                 mov     dword ptr [esp], 0
.text:0040882C                 call    sub_4089A0
.text:00408831                 add     esp, 0ACh
.text:00408837                 pop     ebx
.text:00408838                 pop     esi
.text:00408839                 pop     edi
.text:0040883A                 pop     ebp
.text:0040883B                 retn
.text:0040883B ; ---------------------------------------------------------------------------
.text:0040883C                 align 10h
.text:00408840                 push    edi
.text:00408841                 push    esi
.text:00408842                 push    ebx
.text:00408843                 sub     esp, 40h
.text:00408846                 mov     edx, ds:dword_40B19C
.text:0040884C                 mov     ebx, ds:dword_40B190
.text:00408852                 mov     esi, ds:dword_40B198
.text:00408858                 mov     edi, ds:dword_40B194
.text:0040885E                 mov     [esp+1Ch], edx
.text:00408862                 mov     ecx, ds:dword_40B1A0
.text:00408868                 mov     edx, ds:dword_40B1B0
.text:0040886E                 mov     [esp+10h], ebx
.text:00408872                 mov     ebx, ds:dword_40B1A4
.text:00408878                 mov     [esp+30h], edx
.text:0040887C                 movzx   edx, byte ptr [esp+54h]
.text:00408881                 mov     [esp+18h], esi
.text:00408885                 mov     esi, ds:dword_40B1AC
.text:0040888B                 mov     [esp+14h], edi
.text:0040888F                 mov     edi, ds:dword_40B1A8
.text:00408895                 mov     [esp+20h], ecx
.text:00408899                 mov     cl, dl
.text:0040889B                 shr     cl, 5
.text:0040889E                 mov     [esp+24h], ebx
.text:004088A2                 movzx   ebx, cl
.text:004088A5                 mov     [esp+2Ch], esi
.text:004088A9                 lea     esi, [esp+10h]
.text:004088AD                 mov     [esp+28h], edi
.text:004088B1                 lea     edi, [esi+ebx*4]
.text:004088B4                 mov     ebx, edx
.text:004088B6                 mov     edx, [edi+4]
.text:004088B9                 and     ebx, 1Fh
.text:004088BC                 mov     cl, bl
.text:004088BE                 mov     eax, edx
.text:004088C0                 shr     eax, cl
.text:004088C2                 and     eax, 1
.text:004088C5                 xor     eax, 1
.text:004088C8                 shl     eax, cl
.text:004088CA                 xor     edx, eax
.text:004088CC                 mov     [edi+4], edx
.text:004088CF                 mov     edx, [esp+50h]
.text:004088D3                 mov     [esp+0Ch], esi
.text:004088D7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004088DF                 mov     [esp+4], edx
.text:004088E3                 mov     dword ptr [esp], 0
.text:004088EA                 call    sub_4089A0
.text:004088EF                 add     esp, 40h
.text:004088F2                 pop     ebx
.text:004088F3                 pop     esi
.text:004088F4                 pop     edi
.text:004088F5                 retn
.text:004088F5 ; ---------------------------------------------------------------------------
.text:004088F6                 align 10h
.text:00408900
.text:00408900 ; =============== S U B R O U T I N E =======================================
.text:00408900
.text:00408900
.text:00408900 ; int __cdecl sub_408900(char *)
.text:00408900 sub_408900      proc near               ; CODE XREF: sub_4076F0+64↑p
.text:00408900
.text:00408900 var_4C          = dword ptr -4Ch
.text:00408900 var_48          = dword ptr -48h
.text:00408900 var_44          = dword ptr -44h
.text:00408900 var_40          = dword ptr -40h
.text:00408900 var_3C          = dword ptr -3Ch
.text:00408900 var_38          = dword ptr -38h
.text:00408900 var_34          = dword ptr -34h
.text:00408900 var_30          = dword ptr -30h
.text:00408900 var_2C          = dword ptr -2Ch
.text:00408900 var_28          = dword ptr -28h
.text:00408900 var_24          = dword ptr -24h
.text:00408900 var_20          = dword ptr -20h
.text:00408900 var_1C          = dword ptr -1Ch
.text:00408900 arg_0           = dword ptr  4
.text:00408900
.text:00408900                 sub     esp, 4Ch
.text:00408903                 mov     ecx, ds:dword_40B190
.text:00408909                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00408911                 mov     edx, ds:dword_40B194
.text:00408917                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040891E                 mov     [esp+4Ch+var_3C], ecx
.text:00408922                 mov     ecx, ds:dword_40B19C
.text:00408928                 mov     [esp+4Ch+var_38], edx
.text:0040892C                 mov     edx, ds:dword_40B198
.text:00408932                 mov     [esp+4Ch+var_30], ecx
.text:00408936                 mov     ecx, ds:dword_40B1A0
.text:0040893C                 mov     eax, edx
.text:0040893E                 shr     eax, 1Ah
.text:00408941                 and     eax, 1
.text:00408944                 xor     eax, 1
.text:00408947                 mov     [esp+4Ch+var_2C], ecx
.text:0040894B                 shl     eax, 1Ah
.text:0040894E                 mov     ecx, ds:dword_40B1A4
.text:00408954                 xor     edx, eax
.text:00408956                 mov     [esp+4Ch+var_34], edx
.text:0040895A                 mov     edx, [esp+4Ch+arg_0]
.text:0040895E                 mov     [esp+4Ch+var_28], ecx
.text:00408962                 mov     ecx, ds:dword_40B1A8
.text:00408968                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040896C                 mov     [esp+4Ch+var_24], ecx
.text:00408970                 mov     ecx, ds:dword_40B1AC
.text:00408976                 mov     [esp+4Ch+var_20], ecx
.text:0040897A                 mov     ecx, ds:dword_40B1B0
.text:00408980                 mov     [esp+4Ch+var_1C], ecx
.text:00408984                 lea     ecx, [esp+4Ch+var_3C]
.text:00408988                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040898C                 call    sub_4089A0
.text:00408991                 add     esp, 4Ch
.text:00408994                 retn
.text:00408994 sub_408900      endp
.text:00408994
.text:00408994 ; ---------------------------------------------------------------------------
.text:00408995                 align 10h
.text:004089A0
.text:004089A0 ; =============== S U B R O U T I N E =======================================
.text:004089A0
.text:004089A0
.text:004089A0 ; int __cdecl sub_4089A0(int, char *, int, int)
.text:004089A0 sub_4089A0      proc near               ; CODE XREF: .text:00408552↑p
.text:004089A0                                         ; .text:00408582↑p ...
.text:004089A0
.text:004089A0 Block           = dword ptr -2Ch
.text:004089A0 var_28          = dword ptr -28h
.text:004089A0 Str             = dword ptr -24h
.text:004089A0 var_20          = dword ptr -20h
.text:004089A0 var_1C          = dword ptr -1Ch
.text:004089A0 var_18          = dword ptr -18h
.text:004089A0 var_14          = dword ptr -14h
.text:004089A0 arg_0           = dword ptr  4
.text:004089A0 arg_4           = dword ptr  8
.text:004089A0 arg_8           = dword ptr  0Ch
.text:004089A0 arg_C           = dword ptr  10h
.text:004089A0
.text:004089A0                 push    ebp
.text:004089A1                 push    edi
.text:004089A2                 push    esi
.text:004089A3                 push    ebx
.text:004089A4                 sub     esp, 1Ch
.text:004089A7                 call    _errno
.text:004089AC                 mov     edx, [eax]
.text:004089AE                 mov     eax, [esp+2Ch+arg_0]
.text:004089B2                 mov     [esp+2Ch+var_14], edx
.text:004089B6                 test    eax, eax
.text:004089B8                 js      loc_408B5A
.text:004089BE                 mov     eax, [esp+2Ch+arg_0]
.text:004089C2                 cmp     dword_40A040, eax
.text:004089C8                 ja      short loc_408A40
.text:004089CA                 mov     esi, eax
.text:004089CC                 inc     esi
.text:004089CD                 cmp     esi, 1FFFFFFFh
.text:004089D3                 ja      loc_408B5F
.text:004089D9                 mov     ebx, off_40A04C
.text:004089DF                 cmp     ebx, offset dword_40A044
.text:004089E5                 jz      loc_408B31
.text:004089EB
.text:004089EB loc_4089EB:                             ; CODE XREF: sub_4089A0+1B5↓j
.text:004089EB                 mov     [esp+2Ch+Block], ebx ; void *
.text:004089EE                 lea     ecx, ds:0[esi*8]
.text:004089F5                 mov     ebp, esi
.text:004089F7                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:004089FB                 call    sub_408C40
.text:00408A00                 mov     off_40A04C, eax
.text:00408A05                 mov     ebx, dword_40A040
.text:00408A0B                 sub     ebp, ebx
.text:00408A0D                 lea     edi, [eax+ebx*8]
.text:00408A10                 lea     eax, ds:0[ebp*8]
.text:00408A17                 cmp     eax, 7
.text:00408A1A                 jbe     short loc_408A30
.text:00408A1C                 test    edi, 4
.text:00408A22                 jz      short loc_408A30
.text:00408A24                 mov     dword ptr [edi], 0
.text:00408A2A                 sub     eax, 4
.text:00408A2D                 add     edi, 4
.text:00408A30
.text:00408A30 loc_408A30:                             ; CODE XREF: sub_4089A0+7A↑j
.text:00408A30                                         ; sub_4089A0+82↑j
.text:00408A30                 cld
.text:00408A31                 mov     ecx, eax
.text:00408A33                 shr     ecx, 2
.text:00408A36                 xor     eax, eax
.text:00408A38                 rep stosd
.text:00408A3A                 mov     dword_40A040, esi
.text:00408A40
.text:00408A40 loc_408A40:                             ; CODE XREF: sub_4089A0+28↑j
.text:00408A40                 mov     esi, off_40A04C
.text:00408A46                 mov     eax, [esp+2Ch+arg_0]
.text:00408A4A                 mov     ebp, [esi+eax*8]
.text:00408A4D                 mov     edi, [esi+eax*8+4]
.text:00408A51                 mov     esi, [esp+2Ch+arg_C]
.text:00408A55                 test    esi, esi
.text:00408A57                 jz      loc_408B27
.text:00408A5D
.text:00408A5D loc_408A5D:                             ; CODE XREF: sub_4089A0+18C↓j
.text:00408A5D                 call    _errno
.text:00408A62                 mov     ebx, [eax]
.text:00408A64                 mov     [esp+2Ch+var_18], esi ; int
.text:00408A68                 mov     ecx, [esi]
.text:00408A6A                 mov     [esp+2Ch+Block], edi ; int
.text:00408A6D                 mov     edx, [esp+2Ch+arg_8]
.text:00408A71                 mov     [esp+2Ch+var_28], ebp ; int
.text:00408A75                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00408A79                 mov     ecx, [esp+2Ch+arg_4]
.text:00408A7D                 mov     [esp+2Ch+var_20], edx ; int
.text:00408A81                 mov     [esp+2Ch+Str], ecx ; Str
.text:00408A85                 call    sub_407860
.text:00408A8A                 mov     esi, eax
.text:00408A8C                 call    _errno
.text:00408A91                 mov     [eax], ebx
.text:00408A93                 cmp     ebp, esi
.text:00408A95                 ja      short loc_408B0B
.text:00408A97                 lea     ebp, [esi+1]
.text:00408A9A                 mov     ebx, off_40A04C
.text:00408AA0                 cmp     edi, offset unk_40B090
.text:00408AA6                 mov     esi, [esp+2Ch+arg_0]
.text:00408AAA                 mov     [ebx+esi*8], ebp
.text:00408AAD                 jz      short loc_408ABD
.text:00408AAF                 mov     [esp+2Ch+Block], edi ; Block
.text:00408AB2                 call    free
.text:00408AB7                 mov     ebx, off_40A04C
.text:00408ABD
.text:00408ABD loc_408ABD:                             ; CODE XREF: sub_4089A0+10D↑j
.text:00408ABD                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00408AC0                 call    sub_408BB0
.text:00408AC5                 mov     esi, [esp+2Ch+arg_C]
.text:00408AC9                 mov     edi, eax
.text:00408ACB                 mov     eax, [esp+2Ch+arg_0]
.text:00408ACF                 test    esi, esi
.text:00408AD1                 mov     [ebx+eax*8+4], edi
.text:00408AD5                 jz      short loc_408B20
.text:00408AD7
.text:00408AD7 loc_408AD7:                             ; CODE XREF: sub_4089A0+185↓j
.text:00408AD7                 call    _errno
.text:00408ADC                 mov     ebx, [eax]
.text:00408ADE                 mov     [esp+2Ch+var_18], esi ; int
.text:00408AE2                 mov     ecx, [esi]
.text:00408AE4                 mov     [esp+2Ch+Block], edi ; int
.text:00408AE7                 mov     edx, [esp+2Ch+arg_8]
.text:00408AEB                 mov     [esp+2Ch+var_28], ebp ; int
.text:00408AEF                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00408AF3                 mov     ecx, [esp+2Ch+arg_4]
.text:00408AF7                 mov     [esp+2Ch+var_20], edx ; int
.text:00408AFB                 mov     [esp+2Ch+Str], ecx ; Str
.text:00408AFF                 call    sub_407860
.text:00408B04                 call    _errno
.text:00408B09                 mov     [eax], ebx
.text:00408B0B
.text:00408B0B loc_408B0B:                             ; CODE XREF: sub_4089A0+F5↑j
.text:00408B0B                 call    _errno
.text:00408B10                 mov     ebp, [esp+2Ch+var_14]
.text:00408B14                 mov     [eax], ebp
.text:00408B16                 add     esp, 1Ch
.text:00408B19                 mov     eax, edi
.text:00408B1B                 pop     ebx
.text:00408B1C                 pop     esi
.text:00408B1D                 pop     edi
.text:00408B1E                 pop     ebp
.text:00408B1F                 retn
.text:00408B20 ; ---------------------------------------------------------------------------
.text:00408B20
.text:00408B20 loc_408B20:                             ; CODE XREF: sub_4089A0+135↑j
.text:00408B20                 mov     esi, offset dword_40B190
.text:00408B25                 jmp     short loc_408AD7
.text:00408B27 ; ---------------------------------------------------------------------------
.text:00408B27
.text:00408B27 loc_408B27:                             ; CODE XREF: sub_4089A0+B7↑j
.text:00408B27                 mov     esi, offset dword_40B190
.text:00408B2C                 jmp     loc_408A5D
.text:00408B31 ; ---------------------------------------------------------------------------
.text:00408B31
.text:00408B31 loc_408B31:                             ; CODE XREF: sub_4089A0+45↑j
.text:00408B31                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00408B38                 call    sub_408BB0
.text:00408B3D                 mov     off_40A04C, eax
.text:00408B42                 mov     edi, dword_40A044
.text:00408B48                 mov     ebx, eax
.text:00408B4A                 mov     ecx, off_40A048
.text:00408B50                 mov     [eax], edi
.text:00408B52                 mov     [eax+4], ecx
.text:00408B55                 jmp     loc_4089EB
.text:00408B5A ; ---------------------------------------------------------------------------
.text:00408B5A
.text:00408B5A loc_408B5A:                             ; CODE XREF: sub_4089A0+18↑j
.text:00408B5A                 call    abort
.text:00408B5F ; ---------------------------------------------------------------------------
.text:00408B5F
.text:00408B5F loc_408B5F:                             ; CODE XREF: sub_4089A0+33↑j
.text:00408B5F                 call    sub_408E60
.text:00408B5F sub_4089A0      endp
.text:00408B5F
.text:00408B5F ; ---------------------------------------------------------------------------
.text:00408B64                 align 10h
.text:00408B70
.text:00408B70 ; =============== S U B R O U T I N E =======================================
.text:00408B70
.text:00408B70
.text:00408B70 sub_408B70      proc near
.text:00408B70
.text:00408B70 Size            = dword ptr -0Ch
.text:00408B70 var_4           = dword ptr -4
.text:00408B70 arg_0           = dword ptr  4
.text:00408B70 arg_4           = dword ptr  8
.text:00408B70
.text:00408B70                 sub     esp, 0Ch
.text:00408B73                 xor     edx, edx
.text:00408B75                 mov     ecx, [esp+0Ch+arg_4]
.text:00408B79                 mov     [esp+0Ch+var_4], ebx
.text:00408B7D                 mov     eax, 0FFFFFFFFh
.text:00408B82                 mov     ebx, [esp+0Ch+arg_0]
.text:00408B86                 div     ecx
.text:00408B88                 cmp     eax, ebx
.text:00408B8A                 jb      short loc_408BA9
.text:00408B8C                 mov     edx, ebx
.text:00408B8E                 imul    edx, ecx
.text:00408B91                 mov     [esp+0Ch+Size], edx ; Size
.text:00408B94                 call    malloc
.text:00408B99                 test    eax, eax
.text:00408B9B                 jz      short loc_408BA5
.text:00408B9D
.text:00408B9D loc_408B9D:                             ; CODE XREF: sub_408B70+37↓j
.text:00408B9D                 mov     ebx, [esp+0Ch+var_4]
.text:00408BA1                 add     esp, 0Ch
.text:00408BA4                 retn
.text:00408BA5 ; ---------------------------------------------------------------------------
.text:00408BA5
.text:00408BA5 loc_408BA5:                             ; CODE XREF: sub_408B70+2B↑j
.text:00408BA5                 test    ebx, ebx
.text:00408BA7                 jz      short loc_408B9D
.text:00408BA9
.text:00408BA9 loc_408BA9:                             ; CODE XREF: sub_408B70+1A↑j
.text:00408BA9                 call    sub_408E60
.text:00408BA9 sub_408B70      endp
.text:00408BA9
.text:00408BA9 ; ---------------------------------------------------------------------------
.text:00408BAE                 align 10h
.text:00408BB0
.text:00408BB0 ; =============== S U B R O U T I N E =======================================
.text:00408BB0
.text:00408BB0
.text:00408BB0 ; int __cdecl sub_408BB0(size_t)
.text:00408BB0 sub_408BB0      proc near               ; CODE XREF: .text:004082D9↑p
.text:00408BB0                                         ; .text:004084B6↑p ...
.text:00408BB0
.text:00408BB0 Size            = dword ptr -0Ch
.text:00408BB0 var_4           = dword ptr -4
.text:00408BB0 arg_0           = dword ptr  4
.text:00408BB0
.text:00408BB0                 sub     esp, 0Ch
.text:00408BB3                 mov     [esp+0Ch+var_4], ebx
.text:00408BB7                 mov     ebx, [esp+0Ch+arg_0]
.text:00408BBB                 mov     [esp+0Ch+Size], ebx ; Size
.text:00408BBE                 call    malloc
.text:00408BC3                 test    eax, eax
.text:00408BC5                 jz      short loc_408BD0
.text:00408BC7
.text:00408BC7 loc_408BC7:                             ; CODE XREF: sub_408BB0+22↓j
.text:00408BC7                 mov     ebx, [esp+0Ch+var_4]
.text:00408BCB                 add     esp, 0Ch
.text:00408BCE                 retn
.text:00408BCE ; ---------------------------------------------------------------------------
.text:00408BCF                 align 10h
.text:00408BD0
.text:00408BD0 loc_408BD0:                             ; CODE XREF: sub_408BB0+15↑j
.text:00408BD0                 test    ebx, ebx
.text:00408BD2                 jz      short loc_408BC7
.text:00408BD4                 call    sub_408E60
.text:00408BD4 sub_408BB0      endp
.text:00408BD4
.text:00408BD4 ; ---------------------------------------------------------------------------
.text:00408BD9                 align 10h
.text:00408BE0                 sub     esp, 1Ch
.text:00408BE3                 xor     edx, edx
.text:00408BE5                 mov     eax, 0FFFFFFFFh
.text:00408BEA                 mov     [esp+14h], ebx
.text:00408BEE                 mov     ecx, [esp+20h]
.text:00408BF2                 mov     ebx, [esp+28h]
.text:00408BF6                 mov     [esp+18h], esi
.text:00408BFA                 mov     esi, [esp+24h]
.text:00408BFE                 div     ebx
.text:00408C00                 cmp     eax, esi
.text:00408C02                 jb      short loc_408C34
.text:00408C04                 mov     [esp], ecx
.text:00408C07                 mov     edx, esi
.text:00408C09                 imul    edx, ebx
.text:00408C0C                 mov     [esp+4], edx
.text:00408C10                 call    realloc
.text:00408C15                 test    eax, eax
.text:00408C17                 mov     ecx, eax
.text:00408C19                 jz      short loc_408C30
.text:00408C1B
.text:00408C1B loc_408C1B:                             ; CODE XREF: .text:00408C32↓j
.text:00408C1B                 mov     ebx, [esp+14h]
.text:00408C1F                 mov     eax, ecx
.text:00408C21                 mov     esi, [esp+18h]
.text:00408C25                 add     esp, 1Ch
.text:00408C28                 retn
.text:00408C28 ; ---------------------------------------------------------------------------
.text:00408C29                 align 10h
.text:00408C30
.text:00408C30 loc_408C30:                             ; CODE XREF: .text:00408C19↑j
.text:00408C30                 test    esi, esi
.text:00408C32                 jz      short loc_408C1B
.text:00408C34
.text:00408C34 loc_408C34:                             ; CODE XREF: .text:00408C02↑j
.text:00408C34                 call    sub_408E60
.text:00408C34 ; ---------------------------------------------------------------------------
.text:00408C39                 align 10h
.text:00408C40
.text:00408C40 ; =============== S U B R O U T I N E =======================================
.text:00408C40
.text:00408C40
.text:00408C40 ; int __cdecl sub_408C40(void *, size_t)
.text:00408C40 sub_408C40      proc near               ; CODE XREF: sub_4089A0+5B↑p
.text:00408C40
.text:00408C40 Block           = dword ptr -0Ch
.text:00408C40 Size            = dword ptr -8
.text:00408C40 var_4           = dword ptr -4
.text:00408C40 arg_0           = dword ptr  4
.text:00408C40 arg_4           = dword ptr  8
.text:00408C40
.text:00408C40                 sub     esp, 0Ch
.text:00408C43                 mov     edx, [esp+0Ch+arg_0]
.text:00408C47                 mov     [esp+0Ch+var_4], ebx
.text:00408C4B                 mov     ebx, [esp+0Ch+arg_4]
.text:00408C4F                 mov     [esp+0Ch+Block], edx ; Block
.text:00408C52                 mov     [esp+0Ch+Size], ebx ; Size
.text:00408C56                 call    realloc
.text:00408C5B                 test    eax, eax
.text:00408C5D                 jz      short loc_408C67
.text:00408C5F
.text:00408C5F loc_408C5F:                             ; CODE XREF: sub_408C40+29↓j
.text:00408C5F                 mov     ebx, [esp+0Ch+var_4]
.text:00408C63                 add     esp, 0Ch
.text:00408C66                 retn
.text:00408C67 ; ---------------------------------------------------------------------------
.text:00408C67
.text:00408C67 loc_408C67:                             ; CODE XREF: sub_408C40+1D↑j
.text:00408C67                 test    ebx, ebx
.text:00408C69                 jz      short loc_408C5F
.text:00408C6B                 call    sub_408E60
.text:00408C6B sub_408C40      endp
.text:00408C6B
.text:00408C70 ; ---------------------------------------------------------------------------
.text:00408C70                 jmp     sub_408DC0
.text:00408C70 ; ---------------------------------------------------------------------------
.text:00408C75                 align 10h
.text:00408C80                 sub     esp, 0Ch
.text:00408C83                 mov     edx, [esp+14h]
.text:00408C87                 mov     dword ptr [esp+8], 1
.text:00408C8F                 mov     [esp+4], edx
.text:00408C93                 mov     edx, [esp+10h]
.text:00408C97                 mov     [esp], edx
.text:00408C9A                 call    sub_408DC0
.text:00408C9F                 add     esp, 0Ch
.text:00408CA2                 retn
.text:00408CA2 ; ---------------------------------------------------------------------------
.text:00408CA3                 align 10h
.text:00408CB0                 sub     esp, 1Ch
.text:00408CB3                 mov     [esp+18h], ebx
.text:00408CB7                 mov     ebx, [esp+20h]
.text:00408CBB                 mov     [esp], ebx
.text:00408CBE                 call    malloc
.text:00408CC3                 test    eax, eax
.text:00408CC5                 jz      short loc_408CE3
.text:00408CC7
.text:00408CC7 loc_408CC7:                             ; CODE XREF: .text:00408CE5↓j
.text:00408CC7                 mov     [esp+8], ebx
.text:00408CCB                 mov     dword ptr [esp+4], 0
.text:00408CD3                 mov     [esp], eax
.text:00408CD6                 call    memset
.text:00408CDB                 mov     ebx, [esp+18h]
.text:00408CDF                 add     esp, 1Ch
.text:00408CE2                 retn
.text:00408CE3 ; ---------------------------------------------------------------------------
.text:00408CE3
.text:00408CE3 loc_408CE3:                             ; CODE XREF: .text:00408CC5↑j
.text:00408CE3                 test    ebx, ebx
.text:00408CE5                 jz      short loc_408CC7
.text:00408CE7                 call    sub_408E60
.text:00408CE7 ; ---------------------------------------------------------------------------
.text:00408CEC                 align 10h
.text:00408CF0                 sub     esp, 0Ch
.text:00408CF3                 xor     edx, edx
.text:00408CF5                 mov     ecx, [esp+14h]
.text:00408CF9                 mov     [esp+8], ebx
.text:00408CFD                 mov     eax, 0FFFFFFFFh
.text:00408D02                 mov     ebx, [esp+10h]
.text:00408D06                 div     ecx
.text:00408D08                 cmp     eax, ebx
.text:00408D0A                 jb      short loc_408D28
.text:00408D0C                 mov     [esp+4], ecx
.text:00408D10                 mov     [esp], ebx
.text:00408D13                 call    calloc
.text:00408D18                 test    eax, eax
.text:00408D1A                 jz      short loc_408D24
.text:00408D1C
.text:00408D1C loc_408D1C:                             ; CODE XREF: .text:00408D26↓j
.text:00408D1C                 mov     ebx, [esp+8]
.text:00408D20                 add     esp, 0Ch
.text:00408D23                 retn
.text:00408D24 ; ---------------------------------------------------------------------------
.text:00408D24
.text:00408D24 loc_408D24:                             ; CODE XREF: .text:00408D1A↑j
.text:00408D24                 test    ebx, ebx
.text:00408D26                 jz      short loc_408D1C
.text:00408D28
.text:00408D28 loc_408D28:                             ; CODE XREF: .text:00408D0A↑j
.text:00408D28                 call    sub_408E60
.text:00408D28 ; ---------------------------------------------------------------------------
.text:00408D2D                 align 10h
.text:00408D30                 sub     esp, 1Ch
.text:00408D33                 mov     [esp+18h], ebx
.text:00408D37                 mov     ebx, [esp+24h]
.text:00408D3B                 mov     [esp], ebx
.text:00408D3E                 call    malloc
.text:00408D43                 test    eax, eax
.text:00408D45                 mov     edx, eax
.text:00408D47                 jz      short loc_408D65
.text:00408D49
.text:00408D49 loc_408D49:                             ; CODE XREF: .text:00408D67↓j
.text:00408D49                 mov     [esp+8], ebx
.text:00408D4D                 mov     ecx, [esp+20h]
.text:00408D51                 mov     [esp], edx
.text:00408D54                 mov     [esp+4], ecx
.text:00408D58                 call    memcpy
.text:00408D5D                 mov     ebx, [esp+18h]
.text:00408D61                 add     esp, 1Ch
.text:00408D64                 retn
.text:00408D65 ; ---------------------------------------------------------------------------
.text:00408D65
.text:00408D65 loc_408D65:                             ; CODE XREF: .text:00408D47↑j
.text:00408D65                 test    ebx, ebx
.text:00408D67                 jz      short loc_408D49
.text:00408D69                 call    sub_408E60
.text:00408D69 ; ---------------------------------------------------------------------------
.text:00408D6E                 align 10h
.text:00408D70                 sub     esp, 1Ch
.text:00408D73                 mov     [esp+18h], esi
.text:00408D77                 mov     esi, [esp+20h]
.text:00408D7B                 mov     [esp+14h], ebx
.text:00408D7F                 mov     [esp], esi
.text:00408D82                 call    strlen
.text:00408D87                 lea     ebx, [eax+1]
.text:00408D8A                 mov     [esp], ebx
.text:00408D8D                 call    malloc
.text:00408D92                 test    eax, eax
.text:00408D94                 jz      short loc_408DB2
.text:00408D96
.text:00408D96 loc_408D96:                             ; CODE XREF: .text:00408DB4↓j
.text:00408D96                 mov     [esp+8], ebx
.text:00408D9A                 mov     [esp+4], esi
.text:00408D9E                 mov     [esp], eax
.text:00408DA1                 call    memcpy
.text:00408DA6                 mov     ebx, [esp+14h]
.text:00408DAA                 mov     esi, [esp+18h]
.text:00408DAE                 add     esp, 1Ch
.text:00408DB1                 retn
.text:00408DB2 ; ---------------------------------------------------------------------------
.text:00408DB2
.text:00408DB2 loc_408DB2:                             ; CODE XREF: .text:00408D94↑j
.text:00408DB2                 test    ebx, ebx
.text:00408DB4                 jz      short loc_408D96
.text:00408DB6                 call    sub_408E60
.text:00408DB6 ; ---------------------------------------------------------------------------
.text:00408DBB                 align 10h
.text:00408DC0
.text:00408DC0 ; =============== S U B R O U T I N E =======================================
.text:00408DC0
.text:00408DC0
.text:00408DC0 ; int __cdecl sub_408DC0(void *, int, int)
.text:00408DC0 sub_408DC0      proc near               ; CODE XREF: .text:00408C70↑j
.text:00408DC0                                         ; .text:00408C9A↑p
.text:00408DC0
.text:00408DC0 Block           = dword ptr -1Ch
.text:00408DC0 Size            = dword ptr -18h
.text:00408DC0 var_C           = dword ptr -0Ch
.text:00408DC0 var_8           = dword ptr -8
.text:00408DC0 var_4           = dword ptr -4
.text:00408DC0 arg_0           = dword ptr  4
.text:00408DC0 arg_4           = dword ptr  8
.text:00408DC0 arg_8           = dword ptr  0Ch
.text:00408DC0
.text:00408DC0                 sub     esp, 1Ch
.text:00408DC3                 mov     [esp+1Ch+var_8], esi
.text:00408DC7                 mov     esi, [esp+1Ch+arg_0]
.text:00408DCB                 mov     [esp+1Ch+var_4], edi
.text:00408DCF                 mov     edi, [esp+1Ch+arg_4]
.text:00408DD3                 test    esi, esi
.text:00408DD5                 mov     [esp+1Ch+var_C], ebx
.text:00408DD9                 mov     ecx, [edi]
.text:00408DDB                 mov     ebx, [esp+1Ch+arg_8]
.text:00408DDF                 jz      short loc_408E20
.text:00408DE1                 xor     edx, edx
.text:00408DE3                 mov     eax, 7FFFFFFFh
.text:00408DE8                 div     ebx
.text:00408DEA                 cmp     eax, ecx
.text:00408DEC                 jb      short loc_408E19
.text:00408DEE                 add     ecx, ecx
.text:00408DF0
.text:00408DF0 loc_408DF0:                             ; CODE XREF: sub_408DC0+62↓j
.text:00408DF0                                         ; sub_408DC0+71↓j ...
.text:00408DF0                 mov     [edi], ecx
.text:00408DF2                 imul    ebx, ecx
.text:00408DF5                 mov     [esp+1Ch+Block], esi ; Block
.text:00408DF8                 mov     [esp+1Ch+Size], ebx ; Size
.text:00408DFC                 call    realloc
.text:00408E01                 test    eax, eax
.text:00408E03                 jz      short loc_408E15
.text:00408E05
.text:00408E05 loc_408E05:                             ; CODE XREF: sub_408DC0+57↓j
.text:00408E05                 mov     ebx, [esp+1Ch+var_C]
.text:00408E09                 mov     esi, [esp+1Ch+var_8]
.text:00408E0D                 mov     edi, [esp+1Ch+var_4]
.text:00408E11                 add     esp, 1Ch
.text:00408E14                 retn
.text:00408E15 ; ---------------------------------------------------------------------------
.text:00408E15
.text:00408E15 loc_408E15:                             ; CODE XREF: sub_408DC0+43↑j
.text:00408E15                 test    ebx, ebx
.text:00408E17                 jz      short loc_408E05
.text:00408E19
.text:00408E19 loc_408E19:                             ; CODE XREF: sub_408DC0+2C↑j
.text:00408E19                 call    sub_408E60
.text:00408E19 ; ---------------------------------------------------------------------------
.text:00408E1E                 align 10h
.text:00408E20
.text:00408E20 loc_408E20:                             ; CODE XREF: sub_408DC0+1F↑j
.text:00408E20                 test    ecx, ecx
.text:00408E22                 jnz     short loc_408DF0
.text:00408E24                 xor     edx, edx
.text:00408E26                 mov     eax, 40h ; '@'
.text:00408E2B                 div     ebx
.text:00408E2D                 test    eax, eax
.text:00408E2F                 mov     ecx, eax
.text:00408E31                 jnz     short loc_408DF0
.text:00408E33                 mov     ecx, 1
.text:00408E38                 jmp     short loc_408DF0
.text:00408E38 sub_408DC0      endp
.text:00408E38
.text:00408E38 ; ---------------------------------------------------------------------------
.text:00408E3A                 align 10h
.text:00408E40 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_408E60+3↓o
.text:00408E51 ; const char aS_0[]
.text:00408E51 aS_0            db '%s',0               ; DATA XREF: sub_408E60+10↓o
.text:00408E54                 align 10h
.text:00408E60
.text:00408E60 ; =============== S U B R O U T I N E =======================================
.text:00408E60
.text:00408E60 ; Attributes: noreturn
.text:00408E60
.text:00408E60 sub_408E60      proc near               ; CODE XREF: sub_4089A0:loc_408B5F↑p
.text:00408E60                                         ; sub_408B70:loc_408BA9↑p ...
.text:00408E60
.text:00408E60 Code            = dword ptr -1Ch
.text:00408E60 ErrorMessage    = dword ptr -18h
.text:00408E60 var_14          = dword ptr -14h
.text:00408E60 var_10          = byte ptr -10h
.text:00408E60
.text:00408E60                 sub     esp, 1Ch
.text:00408E63                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:00408E6A                 call    ds:libintl_gettext
.text:00408E70                 mov     [esp+1Ch+var_14], offset aS_0 ; "%s"
.text:00408E78                 mov     edx, Code
.text:00408E7E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00408E86                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:00408E8A                 mov     [esp+1Ch+Code], edx ; Code
.text:00408E8D                 call    sub_408F00
.text:00408E92                 call    abort
.text:00408E92 sub_408E60      endp
.text:00408E92
.text:00408E92 ; ---------------------------------------------------------------------------
.text:00408E97                 align 10h
.text:00408EA0
.text:00408EA0 ; =============== S U B R O U T I N E =======================================
.text:00408EA0
.text:00408EA0 ; Attributes: thunk
.text:00408EA0
.text:00408EA0 libintl_bindtextdomain proc near
.text:00408EA0                 jmp     ds:__imp_libintl_bindtextdomain
.text:00408EA0 libintl_bindtextdomain endp
.text:00408EA0
.text:00408EA0 ; ---------------------------------------------------------------------------
.text:00408EA6                 align 10h
.text:00408EB0                 jmp     ds:libintl_textdomain
.text:00408EB0 ; ---------------------------------------------------------------------------
.text:00408EB6                 align 10h
.text:00408EC0                 jmp     ds:libintl_gettext
.text:00408EC0 ; ---------------------------------------------------------------------------
.text:00408EC6                 align 10h
.text:00408ED0                 jmp     ds:libintl_ngettext
.text:00408ED0 ; ---------------------------------------------------------------------------
.text:00408ED6                 align 10h
.text:00408EE0 ; const char aS_1[]
.text:00408EE0 aS_1            db ': %s',0             ; DATA XREF: sub_408F00+B8↓o
.text:00408EE0                                         ; sub_409004+122↓o
.text:00408EE5 aUnknownSystemE db 'Unknown system error',0
.text:00408EE5                                         ; DATA XREF: sub_408F00:loc_408FCD↓o
.text:00408EE5                                         ; sub_409004:loc_40913E↓o
.text:00408EFA ; const char aS_2[]
.text:00408EFA aS_2            db '%s: ',0             ; DATA XREF: sub_408F00:loc_408FD4↓o
.text:00408EFF                 align 10h
.text:00408F00
.text:00408F00 ; =============== S U B R O U T I N E =======================================
.text:00408F00
.text:00408F00
.text:00408F00 ; int __cdecl sub_408F00(int Code, int ErrorMessage, char *, char)
.text:00408F00 sub_408F00      proc near               ; CODE XREF: sub_4019A0+3EA↑p
.text:00408F00                                         ; sub_4019A0+426↑p ...
.text:00408F00
.text:00408F00 Stream          = dword ptr -1Ch
.text:00408F00 Format          = dword ptr -18h
.text:00408F00 ArgList         = dword ptr -14h
.text:00408F00 Code            = dword ptr  4
.text:00408F00 ErrorMessage    = dword ptr  8
.text:00408F00 arg_8           = dword ptr  0Ch
.text:00408F00 arg_C           = byte ptr  10h
.text:00408F00
.text:00408F00                 push    esi
.text:00408F01                 push    ebx
.text:00408F02                 sub     esp, 14h
.text:00408F05                 mov     edx, ds:_iob
.text:00408F0B                 mov     esi, [esp+1Ch+Code]
.text:00408F0F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00408F13                 add     edx, 20h ; ' '
.text:00408F16                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00408F19                 call    fflush
.text:00408F1E                 mov     eax, ds:dword_40B210
.text:00408F23                 test    eax, eax
.text:00408F25                 jz      loc_408FD4
.text:00408F2B                 call    eax ; dword_40B210
.text:00408F2D
.text:00408F2D loc_408F2D:                             ; CODE XREF: sub_408F00+F7↓j
.text:00408F2D                 lea     edx, [esp+1Ch+arg_C]
.text:00408F31                 mov     ecx, [esp+1Ch+arg_8]
.text:00408F35                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00408F39                 mov     edx, ds:_iob
.text:00408F3F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00408F43                 add     edx, 40h ; '@'
.text:00408F46                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00408F49                 call    vfprintf
.text:00408F4E                 inc     ds:dword_40B220
.text:00408F54                 test    ebx, ebx
.text:00408F56                 jnz     short loc_408FA2
.text:00408F58
.text:00408F58 loc_408F58:                             ; CODE XREF: sub_408F00+CB↓j
.text:00408F58                 mov     edx, ds:_iob
.text:00408F5E                 lea     ecx, [edx+40h]
.text:00408F61                 mov     ebx, [ecx+4]
.text:00408F64                 dec     ebx
.text:00408F65                 test    ebx, ebx
.text:00408F67                 mov     [ecx+4], ebx
.text:00408F6A                 js      short loc_408F90
.text:00408F6C                 mov     ecx, [edx+40h]
.text:00408F6F                 mov     byte ptr [ecx], 0Ah
.text:00408F72                 inc     dword ptr [edx+40h]
.text:00408F75
.text:00408F75 loc_408F75:                             ; CODE XREF: sub_408F00+A0↓j
.text:00408F75                 mov     edx, ds:_iob
.text:00408F7B                 add     edx, 40h ; '@'
.text:00408F7E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00408F81                 call    fflush
.text:00408F86                 test    esi, esi
.text:00408F88                 jnz     short loc_408FFC
.text:00408F8A                 add     esp, 14h
.text:00408F8D                 pop     ebx
.text:00408F8E                 pop     esi
.text:00408F8F                 retn
.text:00408F90 ; ---------------------------------------------------------------------------
.text:00408F90
.text:00408F90 loc_408F90:                             ; CODE XREF: sub_408F00+6A↑j
.text:00408F90                 mov     [esp+1Ch+Format], ecx ; File
.text:00408F94                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:00408F9B                 call    _flsbuf
.text:00408FA0                 jmp     short loc_408F75
.text:00408FA2 ; ---------------------------------------------------------------------------
.text:00408FA2
.text:00408FA2 loc_408FA2:                             ; CODE XREF: sub_408F00+56↑j
.text:00408FA2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00408FA5                 call    strerror
.text:00408FAA                 test    eax, eax
.text:00408FAC                 jz      short loc_408FCD
.text:00408FAE
.text:00408FAE loc_408FAE:                             ; CODE XREF: sub_408F00+D2↓j
.text:00408FAE                 mov     [esp+1Ch+ArgList], eax
.text:00408FB2                 mov     ebx, ds:_iob
.text:00408FB8                 mov     [esp+1Ch+Format], offset aS_1 ; ": %s"
.text:00408FC0                 add     ebx, 40h ; '@'
.text:00408FC3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00408FC6                 call    fprintf
.text:00408FCB                 jmp     short loc_408F58
.text:00408FCD ; ---------------------------------------------------------------------------
.text:00408FCD
.text:00408FCD loc_408FCD:                             ; CODE XREF: sub_408F00+AC↑j
.text:00408FCD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00408FD2                 jmp     short loc_408FAE
.text:00408FD4 ; ---------------------------------------------------------------------------
.text:00408FD4
.text:00408FD4 loc_408FD4:                             ; CODE XREF: sub_408F00+25↑j
.text:00408FD4                 mov     [esp+1Ch+Format], offset aS_2 ; "%s: "
.text:00408FDC                 mov     edx, ds:_iob
.text:00408FE2                 mov     ecx, ds:dword_40B1E0
.text:00408FE8                 add     edx, 40h ; '@'
.text:00408FEB                 mov     [esp+1Ch+ArgList], ecx
.text:00408FEF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00408FF2                 call    fprintf
.text:00408FF7                 jmp     loc_408F2D
.text:00408FFC ; ---------------------------------------------------------------------------
.text:00408FFC
.text:00408FFC loc_408FFC:                             ; CODE XREF: sub_408F00+88↑j
.text:00408FFC                 mov     [esp+1Ch+Stream], esi ; Code
.text:00408FFF                 call    exit
.text:00408FFF sub_408F00      endp
.text:00408FFF
.text:00409004
.text:00409004 ; =============== S U B R O U T I N E =======================================
.text:00409004
.text:00409004
.text:00409004 ; int __cdecl sub_409004(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00409004 sub_409004      proc near               ; DATA XREF: sub_409004+77↓o
.text:00409004
.text:00409004 Stream          = dword ptr -28h
.text:00409004 Format          = dword ptr -24h
.text:00409004 ArgList         = dword ptr -20h
.text:00409004 var_1C          = dword ptr -1Ch
.text:00409004 Code            = dword ptr  8
.text:00409004 ErrorMessage    = dword ptr  0Ch
.text:00409004 Str2            = dword ptr  10h
.text:00409004 arg_10          = dword ptr  14h
.text:00409004 arg_14          = dword ptr  18h
.text:00409004 arg_18          = byte ptr  1Ch
.text:00409004
.text:00409004                 and     eax, 64253A73h
.text:00409009                 cmp     ah, [eax]
.text:0040900B
.text:0040900B loc_40900B:                             ; DATA XREF: sub_409004:loc_409145↓o
.text:0040900B                 add     ds:55003A73h, ah
.text:00409011                 push    edi
.text:00409012                 push    esi
.text:00409013                 push    ebx
.text:00409014                 sub     esp, 1Ch
.text:00409017                 mov     edx, ds:dword_40B250
.text:0040901D                 mov     ebp, [esp+28h+Code]
.text:00409021                 mov     edi, [esp+28h+ErrorMessage]
.text:00409025                 test    edx, edx
.text:00409027                 mov     ebx, [esp+28h+Str2]
.text:0040902B                 mov     esi, [esp+28h+arg_10]
.text:0040902F                 jz      short loc_409049
.text:00409031                 cmp     ds:dword_40B1D0, esi
.text:00409037                 jz      loc_409170
.text:0040903D
.text:0040903D loc_40903D:                             ; CODE XREF: sub_409004+18D↓j
.text:0040903D                 mov     ds:Str1, ebx
.text:00409043                 mov     ds:dword_40B1D0, esi
.text:00409049
.text:00409049 loc_409049:                             ; CODE XREF: sub_409004+2B↑j
.text:00409049                 mov     edx, ds:_iob
.text:0040904F                 add     edx, 20h ; ' '
.text:00409052                 mov     [esp+28h+Stream], edx ; Stream
.text:00409055                 call    fflush
.text:0040905A                 mov     eax, ds:dword_40B210
.text:0040905F                 test    eax, eax
.text:00409061                 jz      loc_409145
.text:00409067                 call    eax ; dword_40B210
.text:00409069
.text:00409069 loc_409069:                             ; CODE XREF: sub_409004+164↓j
.text:00409069                 test    ebx, ebx
.text:0040906B                 jz      short loc_40908E
.text:0040906D                 mov     [esp+28h+ArgList], ebx
.text:00409071                 mov     ebx, ds:_iob
.text:00409077                 mov     [esp+28h+var_1C], esi
.text:0040907B                 mov     [esp+28h+Format], offset sub_409004 ; Format
.text:00409083                 add     ebx, 40h ; '@'
.text:00409086                 mov     [esp+28h+Stream], ebx ; Stream
.text:00409089                 call    fprintf
.text:0040908E
.text:0040908E loc_40908E:                             ; CODE XREF: sub_409004+67↑j
.text:0040908E                 mov     esi, ds:_iob
.text:00409094                 lea     edx, [esp+28h+arg_18]
.text:00409098                 mov     ecx, [esp+28h+arg_14]
.text:0040909C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:004090A0                 add     esi, 40h ; '@'
.text:004090A3                 mov     [esp+28h+Format], ecx ; Format
.text:004090A7                 mov     [esp+28h+Stream], esi ; Stream
.text:004090AA                 call    vfprintf
.text:004090AF                 inc     ds:dword_40B220
.text:004090B5                 test    edi, edi
.text:004090B7                 jnz     short loc_409110
.text:004090B9
.text:004090B9 loc_4090B9:                             ; CODE XREF: sub_409004+135↓j
.text:004090B9                 mov     edx, ds:_iob
.text:004090BF                 lea     ecx, [edx+40h]
.text:004090C2                 mov     ebx, [ecx+4]
.text:004090C5                 dec     ebx
.text:004090C6                 test    ebx, ebx
.text:004090C8                 mov     [ecx+4], ebx
.text:004090CB                 js      short loc_4090F7
.text:004090CD                 mov     esi, [edx+40h]
.text:004090D0                 mov     byte ptr [esi], 0Ah
.text:004090D3                 inc     dword ptr [edx+40h]
.text:004090D6
.text:004090D6 loc_4090D6:                             ; CODE XREF: sub_409004+103↓j
.text:004090D6                 mov     ecx, ds:_iob
.text:004090DC                 add     ecx, 40h ; '@'
.text:004090DF                 mov     [esp+28h+Stream], ecx ; Stream
.text:004090E2                 call    fflush
.text:004090E7                 test    ebp, ebp
.text:004090E9                 jnz     loc_409196
.text:004090EF
.text:004090EF loc_4090EF:                             ; CODE XREF: sub_409004+173↓j
.text:004090EF                                         ; sub_409004+187↓j
.text:004090EF                 add     esp, 1Ch
.text:004090F2                 pop     ebx
.text:004090F3                 pop     esi
.text:004090F4                 pop     edi
.text:004090F5                 pop     ebp
.text:004090F6                 retn
.text:004090F7 ; ---------------------------------------------------------------------------
.text:004090F7
.text:004090F7 loc_4090F7:                             ; CODE XREF: sub_409004+C7↑j
.text:004090F7                 mov     [esp+28h+Format], ecx ; File
.text:004090FB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00409102                 call    _flsbuf
.text:00409107                 jmp     short loc_4090D6
.text:00409107 ; ---------------------------------------------------------------------------
.text:00409109                 align 10h
.text:00409110
.text:00409110 loc_409110:                             ; CODE XREF: sub_409004+B3↑j
.text:00409110                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00409113                 call    strerror
.text:00409118                 test    eax, eax
.text:0040911A                 jz      short loc_40913E
.text:0040911C
.text:0040911C loc_40911C:                             ; CODE XREF: sub_409004+13F↓j
.text:0040911C                 mov     [esp+28h+ArgList], eax
.text:00409120                 mov     edi, ds:_iob
.text:00409126                 mov     [esp+28h+Format], offset aS_1 ; ": %s"
.text:0040912E                 add     edi, 40h ; '@'
.text:00409131                 mov     [esp+28h+Stream], edi ; Stream
.text:00409134                 call    fprintf
.text:00409139                 jmp     loc_4090B9
.text:0040913E ; ---------------------------------------------------------------------------
.text:0040913E
.text:0040913E loc_40913E:                             ; CODE XREF: sub_409004+116↑j
.text:0040913E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00409143                 jmp     short loc_40911C
.text:00409145 ; ---------------------------------------------------------------------------
.text:00409145
.text:00409145 loc_409145:                             ; CODE XREF: sub_409004+5D↑j
.text:00409145                 mov     [esp+28h+Format], (offset loc_40900B+1) ; Format
.text:0040914D                 mov     ecx, ds:_iob
.text:00409153                 mov     edx, ds:dword_40B1E0
.text:00409159                 add     ecx, 40h ; '@'
.text:0040915C                 mov     [esp+28h+ArgList], edx
.text:00409160                 mov     [esp+28h+Stream], ecx ; Stream
.text:00409163                 call    fprintf
.text:00409168                 jmp     loc_409069
.text:00409168 ; ---------------------------------------------------------------------------
.text:0040916D                 align 10h
.text:00409170
.text:00409170 loc_409170:                             ; CODE XREF: sub_409004+33↑j
.text:00409170                 mov     eax, ds:Str1
.text:00409175                 cmp     ebx, eax
.text:00409177                 jz      loc_4090EF
.text:0040917D                 mov     [esp+28h+Format], ebx ; Str2
.text:00409181                 mov     [esp+28h+Stream], eax ; Str1
.text:00409184                 call    strcmp
.text:00409189                 test    eax, eax
.text:0040918B                 jz      loc_4090EF
.text:00409191                 jmp     loc_40903D
.text:00409196 ; ---------------------------------------------------------------------------
.text:00409196
.text:00409196 loc_409196:                             ; CODE XREF: sub_409004+E5↑j
.text:00409196                 mov     [esp+28h+Stream], ebp ; Code
.text:00409199                 call    exit
.text:00409199 sub_409004      endp ; sp-analysis failed
.text:00409199
.text:00409199 ; ---------------------------------------------------------------------------
.text:0040919E                 align 10h
.text:004091A0
.text:004091A0 ; =============== S U B R O U T I N E =======================================
.text:004091A0
.text:004091A0
.text:004091A0 ; int __cdecl sub_4091A0(int, int, FILE *File)
.text:004091A0 sub_4091A0      proc near               ; CODE XREF: sub_4025F0+C3↑p
.text:004091A0
.text:004091A0 Block           = dword ptr -2Ch
.text:004091A0 Size            = dword ptr -28h
.text:004091A0 var_18          = dword ptr -18h
.text:004091A0 var_14          = dword ptr -14h
.text:004091A0 arg_0           = dword ptr  4
.text:004091A0 arg_4           = dword ptr  8
.text:004091A0 File            = dword ptr  0Ch
.text:004091A0
.text:004091A0                 push    ebp
.text:004091A1                 push    edi
.text:004091A2                 push    esi
.text:004091A3                 push    ebx
.text:004091A4                 sub     esp, 1Ch
.text:004091A7                 mov     eax, [esp+2Ch+arg_0]
.text:004091AB                 mov     edi, [esp+2Ch+File]
.text:004091AF                 test    eax, eax
.text:004091B1                 jz      loc_4092FF
.text:004091B7                 mov     eax, [esp+2Ch+arg_4]
.text:004091BB                 test    eax, eax
.text:004091BD                 jz      loc_4092FF
.text:004091C3                 test    byte ptr [edi+0Ch], 20h
.text:004091C7                 jnz     loc_4092F8
.text:004091CD                 mov     ecx, [esp+2Ch+arg_0]
.text:004091D1                 mov     edx, [ecx]
.text:004091D3                 test    edx, edx
.text:004091D5                 jz      loc_4092E7
.text:004091DB                 mov     ebx, [esp+2Ch+arg_4]
.text:004091DF                 mov     eax, [ebx]
.text:004091E1                 cmp     eax, 1
.text:004091E4                 ja      short loc_40921C
.text:004091E6                 mov     [esp+2Ch+Size], 100h ; Size
.text:004091EE                 mov     [esp+2Ch+Block], edx ; Block
.text:004091F1                 call    realloc
.text:004091F6
.text:004091F6 loc_4091F6:                             ; CODE XREF: sub_4091A0+153↓j
.text:004091F6                 mov     ebp, eax
.text:004091F8                 test    ebp, ebp
.text:004091FA                 mov     eax, 0FFFFFFFFh
.text:004091FF                 jz      loc_4092BD
.text:00409205                 mov     edx, [esp+2Ch+arg_0]
.text:00409209                 mov     eax, 100h
.text:0040920E                 mov     esi, [esp+2Ch+arg_4]
.text:00409212                 mov     [edx], ebp
.text:00409214                 mov     edx, ebp
.text:00409216                 mov     dword ptr [esi], 100h
.text:0040921C
.text:0040921C loc_40921C:                             ; CODE XREF: sub_4091A0+44↑j
.text:0040921C                 mov     [esp+2Ch+var_14], eax
.text:00409220                 mov     ebp, edx
.text:00409222                 mov     ebx, eax
.text:00409224                 mov     esi, edx
.text:00409226
.text:00409226 loc_409226:                             ; CODE XREF: sub_4091A0+F2↓j
.text:00409226                 dec     ebx
.text:00409227                 test    ebx, ebx
.text:00409229                 jle     short loc_409259
.text:0040922B                 nop
.text:0040922C                 lea     esi, [esi+0]
.text:00409230
.text:00409230 loc_409230:                             ; CODE XREF: sub_4091A0+B7↓j
.text:00409230                 mov     ecx, [edi+4]
.text:00409233                 dec     ecx
.text:00409234                 test    ecx, ecx
.text:00409236                 mov     [edi+4], ecx
.text:00409239                 js      loc_4092D8
.text:0040923F                 mov     ecx, [edi]
.text:00409241                 movzx   edx, byte ptr [ecx]
.text:00409244                 inc     ecx
.text:00409245                 mov     [edi], ecx
.text:00409247
.text:00409247 loc_409247:                             ; CODE XREF: sub_4091A0+142↓j
.text:00409247                 cmp     edx, 0FFFFFFFFh
.text:0040924A                 jz      short loc_409294
.text:0040924C                 mov     [esi], dl
.text:0040924E                 inc     esi
.text:0040924F                 cmp     dl, 0Ah
.text:00409252                 jz      short loc_4092CF
.text:00409254                 dec     ebx
.text:00409255                 test    ebx, ebx
.text:00409257                 jg      short loc_409230
.text:00409259
.text:00409259 loc_409259:                             ; CODE XREF: sub_4091A0+89↑j
.text:00409259                 mov     [esp+2Ch+Block], ebp ; Block
.text:0040925C                 mov     ebx, [esp+2Ch+var_14]
.text:00409260                 mov     eax, esi
.text:00409262                 sub     eax, ebp
.text:00409264                 mov     [esp+2Ch+var_18], eax
.text:00409268                 add     ebx, ebx
.text:0040926A                 mov     [esp+2Ch+var_14], ebx
.text:0040926E                 mov     [esp+2Ch+Size], ebx ; Size
.text:00409272                 call    realloc
.text:00409277                 test    eax, eax
.text:00409279                 mov     ebp, eax
.text:0040927B                 jz      short loc_409294
.text:0040927D                 mov     esi, [esp+2Ch+arg_4]
.text:00409281                 mov     edx, [esp+2Ch+var_18]
.text:00409285                 mov     ecx, [esp+2Ch+arg_0]
.text:00409289                 mov     [esi], ebx
.text:0040928B                 lea     esi, [edx+eax]
.text:0040928E                 sub     ebx, edx
.text:00409290                 mov     [ecx], eax
.text:00409292                 jmp     short loc_409226
.text:00409294 ; ---------------------------------------------------------------------------
.text:00409294
.text:00409294 loc_409294:                             ; CODE XREF: sub_4091A0+AA↑j
.text:00409294                                         ; sub_4091A0+DB↑j
.text:00409294                 mov     edi, [esp+2Ch+arg_0]
.text:00409298                 mov     eax, 0FFFFFFFFh
.text:0040929D                 mov     edx, [edi]
.text:0040929F                 cmp     esi, edx
.text:004092A1                 jz      short loc_4092BD
.text:004092A3
.text:004092A3 loc_4092A3:                             ; CODE XREF: sub_4091A0+136↓j
.text:004092A3                 lea     ebx, [esi-2]
.text:004092A6                 cmp     ebx, edx
.text:004092A8                 jb      short loc_4092B0
.text:004092AA                 cmp     byte ptr [esi-2], 0Dh
.text:004092AE                 jz      short loc_4092C5
.text:004092B0
.text:004092B0 loc_4092B0:                             ; CODE XREF: sub_4091A0+108↑j
.text:004092B0                                         ; sub_4091A0+12D↓j
.text:004092B0                 mov     byte ptr [esi], 0
.text:004092B3                 mov     eax, esi
.text:004092B5                 mov     ecx, [esp+2Ch+arg_0]
.text:004092B9                 mov     esi, [ecx]
.text:004092BB                 sub     eax, esi
.text:004092BD
.text:004092BD loc_4092BD:                             ; CODE XREF: sub_4091A0+5F↑j
.text:004092BD                                         ; sub_4091A0+101↑j ...
.text:004092BD                 add     esp, 1Ch
.text:004092C0                 pop     ebx
.text:004092C1                 pop     esi
.text:004092C2                 pop     edi
.text:004092C3                 pop     ebp
.text:004092C4                 retn
.text:004092C5 ; ---------------------------------------------------------------------------
.text:004092C5
.text:004092C5 loc_4092C5:                             ; CODE XREF: sub_4091A0+10E↑j
.text:004092C5                 movzx   edx, byte ptr [esi-1]
.text:004092C9                 mov     [esi-2], dl
.text:004092CC                 dec     esi
.text:004092CD                 jmp     short loc_4092B0
.text:004092CF ; ---------------------------------------------------------------------------
.text:004092CF
.text:004092CF loc_4092CF:                             ; CODE XREF: sub_4091A0+B2↑j
.text:004092CF                 mov     ebp, [esp+2Ch+arg_0]
.text:004092D3                 mov     edx, [ebp+0]
.text:004092D6                 jmp     short loc_4092A3
.text:004092D8 ; ---------------------------------------------------------------------------
.text:004092D8
.text:004092D8 loc_4092D8:                             ; CODE XREF: sub_4091A0+99↑j
.text:004092D8                 mov     [esp+2Ch+Block], edi ; File
.text:004092DB                 call    _filbuf
.text:004092E0                 mov     edx, eax
.text:004092E2                 jmp     loc_409247
.text:004092E7 ; ---------------------------------------------------------------------------
.text:004092E7
.text:004092E7 loc_4092E7:                             ; CODE XREF: sub_4091A0+35↑j
.text:004092E7                 mov     [esp+2Ch+Block], 100h ; Size
.text:004092EE                 call    malloc
.text:004092F3                 jmp     loc_4091F6
.text:004092F8 ; ---------------------------------------------------------------------------
.text:004092F8
.text:004092F8 loc_4092F8:                             ; CODE XREF: sub_4091A0+27↑j
.text:004092F8                                         ; sub_4091A0+16A↓j
.text:004092F8                 mov     eax, 0FFFFFFFFh
.text:004092FD                 jmp     short loc_4092BD
.text:004092FF ; ---------------------------------------------------------------------------
.text:004092FF
.text:004092FF loc_4092FF:                             ; CODE XREF: sub_4091A0+11↑j
.text:004092FF                                         ; sub_4091A0+1D↑j
.text:004092FF                 call    _errno
.text:00409304                 mov     dword ptr [eax], 16h
.text:0040930A                 jmp     short loc_4092F8
.text:0040930A sub_4091A0      endp
.text:0040930A
.text:0040930A ; ---------------------------------------------------------------------------
.text:0040930C                 align 10h
.text:00409310
.text:00409310 ; =============== S U B R O U T I N E =======================================
.text:00409310
.text:00409310 ; Attributes: thunk
.text:00409310
.text:00409310 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00409310 mbrtowc         proc near               ; CODE XREF: sub_407860+757↑p
.text:00409310
.text:00409310 DstCh           = dword ptr  4
.text:00409310 SrcCh           = dword ptr  8
.text:00409310 SizeInBytes     = dword ptr  0Ch
.text:00409310 State           = dword ptr  10h
.text:00409310
.text:00409310                 jmp     ds:__imp_mbrtowc
.text:00409310 mbrtowc         endp
.text:00409310
.text:00409310 ; ---------------------------------------------------------------------------
.text:00409316                 align 10h
.text:00409320
.text:00409320 ; =============== S U B R O U T I N E =======================================
.text:00409320
.text:00409320 ; Attributes: bp-based frame
.text:00409320
.text:00409320 sub_409320      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00409320                 push    ebp
.text:00409321                 mov     ecx, offset byte_40B000
.text:00409326                 cmp     ecx, offset byte_40B000
.text:0040932C                 mov     ebp, esp
.text:0040932E                 jnb     short loc_409346
.text:00409330
.text:00409330 loc_409330:                             ; CODE XREF: sub_409320+24↓j
.text:00409330                 mov     edx, [ecx+4]
.text:00409333                 mov     eax, [ecx]
.text:00409335                 add     ecx, 8
.text:00409338                 add     [edx+400000h], eax
.text:0040933E                 cmp     ecx, offset byte_40B000
.text:00409344                 jb      short loc_409330
.text:00409346
.text:00409346 loc_409346:                             ; CODE XREF: sub_409320+E↑j
.text:00409346                 pop     ebp
.text:00409347                 retn
.text:00409347 sub_409320      endp
.text:00409347
.text:00409347 ; ---------------------------------------------------------------------------
.text:00409348                 align 10h
.text:00409350
.text:00409350 ; =============== S U B R O U T I N E =======================================
.text:00409350
.text:00409350 ; Attributes: bp-based frame
.text:00409350
.text:00409350 sub_409350      proc near               ; CODE XREF: sub_401080+16↑p
.text:00409350                                         ; TopLevelExceptionFilter+D7↑p
.text:00409350                 push    ebp
.text:00409351                 mov     ebp, esp
.text:00409353                 fninit
.text:00409355                 pop     ebp
.text:00409356                 retn
.text:00409356 sub_409350      endp
.text:00409356
.text:00409356 ; ---------------------------------------------------------------------------
.text:00409357                 align 10h
.text:00409360
.text:00409360 ; =============== S U B R O U T I N E =======================================
.text:00409360
.text:00409360 ; Attributes: bp-based frame
.text:00409360
.text:00409360 ; void __cdecl sub_409360()
.text:00409360 sub_409360      proc near               ; DATA XREF: .text:loc_4093A9↓o
.text:00409360                                         ; sub_4093F0:loc_40941E↓o
.text:00409360                 push    ebp
.text:00409361                 mov     ebp, esp
.text:00409363                 sub     esp, 8
.text:00409366                 mov     eax, off_40A094
.text:0040936B                 mov     edx, [eax]
.text:0040936D                 test    edx, edx
.text:0040936F                 jnz     short loc_409375
.text:00409371
.text:00409371 loc_409371:                             ; CODE XREF: sub_409360+2C↓j
.text:00409371                 mov     esp, ebp
.text:00409373                 pop     ebp
.text:00409374                 retn
.text:00409375 ; ---------------------------------------------------------------------------
.text:00409375
.text:00409375 loc_409375:                             ; CODE XREF: sub_409360+F↑j
.text:00409375                                         ; sub_409360+2A↓j
.text:00409375                 call    dword ptr [eax]
.text:00409377                 mov     edx, off_40A094
.text:0040937D                 mov     ecx, [edx+4]
.text:00409380                 lea     eax, [edx+4]
.text:00409383                 mov     off_40A094, eax
.text:00409388                 test    ecx, ecx
.text:0040938A                 jnz     short loc_409375
.text:0040938C                 jmp     short loc_409371
.text:0040938C sub_409360      endp
.text:0040938C
.text:0040938C ; ---------------------------------------------------------------------------
.text:0040938E                 align 10h
.text:00409390                 push    ebp
.text:00409391                 mov     ebp, esp
.text:00409393                 sub     esp, 8
.text:00409396                 mov     [ebp-4], ebx
.text:00409399                 mov     eax, ds:dword_409710
.text:0040939E                 cmp     eax, 0FFFFFFFFh
.text:004093A1                 jz      short loc_4093CC
.text:004093A3
.text:004093A3 loc_4093A3:                             ; CODE XREF: .text:004093D6↓j
.text:004093A3                                         ; .text:004093E9↓j
.text:004093A3                 test    eax, eax
.text:004093A5                 mov     ebx, eax
.text:004093A7                 jnz     short loc_4093C0
.text:004093A9
.text:004093A9 loc_4093A9:                             ; CODE XREF: .text:004093CA↓j
.text:004093A9                 mov     dword ptr [esp], offset sub_409360
.text:004093B0                 call    sub_401040
.text:004093B5                 mov     ebx, [ebp-4]
.text:004093B8                 mov     esp, ebp
.text:004093BA                 pop     ebp
.text:004093BB                 retn
.text:004093BB ; ---------------------------------------------------------------------------
.text:004093BC                 align 10h
.text:004093C0
.text:004093C0 loc_4093C0:                             ; CODE XREF: .text:004093A7↑j
.text:004093C0                                         ; .text:004093C8↓j
.text:004093C0                 call    ds:dword_409710[ebx*4]
.text:004093C7                 dec     ebx
.text:004093C8                 jnz     short loc_4093C0
.text:004093CA                 jmp     short loc_4093A9
.text:004093CC ; ---------------------------------------------------------------------------
.text:004093CC
.text:004093CC loc_4093CC:                             ; CODE XREF: .text:004093A1↑j
.text:004093CC                 mov     ecx, ds:dword_409714
.text:004093D2                 xor     eax, eax
.text:004093D4                 test    ecx, ecx
.text:004093D6                 jz      short loc_4093A3
.text:004093D8                 mov     edx, offset dword_409710
.text:004093DD                 lea     esi, [esi+0]
.text:004093E0
.text:004093E0 loc_4093E0:                             ; CODE XREF: .text:004093E7↓j
.text:004093E0                 inc     eax
.text:004093E1                 mov     ecx, [edx+eax*4+4]
.text:004093E5                 test    ecx, ecx
.text:004093E7                 jnz     short loc_4093E0
.text:004093E9                 jmp     short loc_4093A3
.text:004093E9 ; ---------------------------------------------------------------------------
.text:004093EB                 align 10h
.text:004093F0
.text:004093F0 ; =============== S U B R O U T I N E =======================================
.text:004093F0
.text:004093F0 ; Attributes: bp-based frame
.text:004093F0
.text:004093F0 sub_4093F0      proc near               ; CODE XREF: sub_4019A0+18↑p
.text:004093F0
.text:004093F0 var_8           = dword ptr -8
.text:004093F0 var_4           = dword ptr -4
.text:004093F0
.text:004093F0                 push    ebp
.text:004093F1                 mov     ebp, esp
.text:004093F3                 sub     esp, 8
.text:004093F6                 mov     [ebp+var_4], ebx
.text:004093F9                 mov     edx, dword_40A090
.text:004093FF                 test    edx, edx
.text:00409401                 jnz     short loc_40942A
.text:00409403                 mov     eax, ds:dword_409710
.text:00409408                 mov     edx, 1
.text:0040940D                 mov     dword_40A090, edx
.text:00409413                 cmp     eax, 0FFFFFFFFh
.text:00409416                 jz      short loc_40943D
.text:00409418
.text:00409418 loc_409418:                             ; CODE XREF: sub_4093F0+57↓j
.text:00409418                                         ; sub_4093F0+69↓j
.text:00409418                 test    eax, eax
.text:0040941A                 mov     ebx, eax
.text:0040941C                 jnz     short loc_409431
.text:0040941E
.text:0040941E loc_40941E:                             ; CODE XREF: sub_4093F0+4B↓j
.text:0040941E                 mov     [esp+8+var_8], offset sub_409360 ; void (__cdecl *)()
.text:00409425                 call    sub_401040
.text:0040942A
.text:0040942A loc_40942A:                             ; CODE XREF: sub_4093F0+11↑j
.text:0040942A                 mov     ebx, [ebp+var_4]
.text:0040942D                 mov     esp, ebp
.text:0040942F                 pop     ebp
.text:00409430                 retn
.text:00409431 ; ---------------------------------------------------------------------------
.text:00409431
.text:00409431 loc_409431:                             ; CODE XREF: sub_4093F0+2C↑j
.text:00409431                                         ; sub_4093F0+49↓j
.text:00409431                 call    ds:dword_409710[ebx*4]
.text:00409438                 dec     ebx
.text:00409439                 jnz     short loc_409431
.text:0040943B                 jmp     short loc_40941E
.text:0040943D ; ---------------------------------------------------------------------------
.text:0040943D
.text:0040943D loc_40943D:                             ; CODE XREF: sub_4093F0+26↑j
.text:0040943D                 mov     ecx, ds:dword_409714
.text:00409443                 xor     eax, eax
.text:00409445                 test    ecx, ecx
.text:00409447                 jz      short loc_409418
.text:00409449                 mov     edx, offset dword_409710
.text:0040944E                 mov     esi, esi
.text:00409450
.text:00409450 loc_409450:                             ; CODE XREF: sub_4093F0+67↓j
.text:00409450                 inc     eax
.text:00409451                 mov     ebx, [edx+eax*4+4]
.text:00409455                 test    ebx, ebx
.text:00409457                 jnz     short loc_409450
.text:00409459                 jmp     short loc_409418
.text:00409459 sub_4093F0      endp
.text:00409459
.text:00409459 ; ---------------------------------------------------------------------------
.text:0040945B                 align 10h
.text:00409460
.text:00409460 ; =============== S U B R O U T I N E =======================================
.text:00409460
.text:00409460 ; Attributes: info_from_lumina
.text:00409460
.text:00409460 ; void *__cdecl _alloca(size_t Size)
.text:00409460 __alloca        proc near               ; CODE XREF: sub_4019A0+13↑p
.text:00409460                                         ; sub_403EA0+9↑p ...
.text:00409460                 push    ecx
.text:00409461                 mov     ecx, esp
.text:00409463                 add     ecx, 8
.text:00409466
.text:00409466 loc_409466:                             ; CODE XREF: __alloca+1B↓j
.text:00409466                 cmp     eax, 1000h
.text:0040946B                 jb      short loc_40947D
.text:0040946D                 sub     ecx, 1000h
.text:00409473                 or      dword ptr [ecx], 0
.text:00409476                 sub     eax, 1000h
.text:0040947B                 jmp     short loc_409466
.text:0040947D ; ---------------------------------------------------------------------------
.text:0040947D
.text:0040947D loc_40947D:                             ; CODE XREF: __alloca+B↑j
.text:0040947D                 sub     ecx, eax
.text:0040947F                 or      dword ptr [ecx], 0
.text:00409482                 mov     eax, esp
.text:00409484                 mov     esp, ecx
.text:00409486                 mov     ecx, [eax]
.text:00409488                 mov     eax, [eax+4]
.text:0040948B                 jmp     eax
.text:0040948B __alloca        endp
.text:0040948B
.text:0040948B ; ---------------------------------------------------------------------------
.text:0040948D                 align 10h
.text:00409490
.text:00409490 ; =============== S U B R O U T I N E =======================================
.text:00409490
.text:00409490 ; Attributes: thunk
.text:00409490
.text:00409490 ; int __cdecl isatty(int FileHandle)
.text:00409490 _isatty         proc near               ; CODE XREF: sub_4022D0+E6↑p
.text:00409490
.text:00409490 FileHandle      = dword ptr  4
.text:00409490
.text:00409490                 jmp     ds:__imp__isatty
.text:00409490 _isatty         endp
.text:00409490
.text:00409490 ; ---------------------------------------------------------------------------
.text:00409496                 align 10h
.text:004094A0                 jmp     ds:__set_app_type
.text:004094A0 ; ---------------------------------------------------------------------------
.text:004094A6                 align 10h
.text:004094B0
.text:004094B0 ; =============== S U B R O U T I N E =======================================
.text:004094B0
.text:004094B0 ; Attributes: thunk
.text:004094B0
.text:004094B0 ; void __cdecl cexit()
.text:004094B0 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:004094B0                 jmp     ds:__imp__cexit
.text:004094B0 _cexit          endp
.text:004094B0
.text:004094B0 ; ---------------------------------------------------------------------------
.text:004094B6                 align 10h
.text:004094C0
.text:004094C0 ; =============== S U B R O U T I N E =======================================
.text:004094C0
.text:004094C0 ; Attributes: thunk
.text:004094C0
.text:004094C0 ; char ***__cdecl _p__environ()
.text:004094C0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:004094C0                 jmp     ds:__imp___p__environ
.text:004094C0 __p__environ    endp
.text:004094C0
.text:004094C0 ; ---------------------------------------------------------------------------
.text:004094C6                 align 10h
.text:004094D0
.text:004094D0 ; =============== S U B R O U T I N E =======================================
.text:004094D0
.text:004094D0 ; Attributes: thunk
.text:004094D0
.text:004094D0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:004094D0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:004094D0                                         ; TopLevelExceptionFilter+88↑p ...
.text:004094D0
.text:004094D0 Signal          = dword ptr  4
.text:004094D0 Function        = dword ptr  8
.text:004094D0
.text:004094D0                 jmp     ds:__imp_signal
.text:004094D0 signal          endp
.text:004094D0
.text:004094D0 ; ---------------------------------------------------------------------------
.text:004094D6                 align 10h
.text:004094E0
.text:004094E0 ; =============== S U B R O U T I N E =======================================
.text:004094E0
.text:004094E0 ; Attributes: thunk
.text:004094E0
.text:004094E0 ; int *__cdecl _p__fmode()
.text:004094E0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:004094E0                 jmp     ds:__imp___p__fmode
.text:004094E0 __p__fmode      endp
.text:004094E0
.text:004094E0 ; ---------------------------------------------------------------------------
.text:004094E6                 align 10h
.text:004094F0
.text:004094F0 ; =============== S U B R O U T I N E =======================================
.text:004094F0
.text:004094F0 ; Attributes: thunk
.text:004094F0
.text:004094F0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:004094F0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:004094F0                                         ; sub_401080+90↑p ...
.text:004094F0
.text:004094F0 FileHandle      = dword ptr  4
.text:004094F0 Mode            = dword ptr  8
.text:004094F0
.text:004094F0                 jmp     ds:__imp__setmode
.text:004094F0 _setmode        endp
.text:004094F0
.text:004094F0 ; ---------------------------------------------------------------------------
.text:004094F6                 align 10h
.text:00409500
.text:00409500 ; =============== S U B R O U T I N E =======================================
.text:00409500
.text:00409500 ; Attributes: thunk
.text:00409500
.text:00409500 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00409500                 jmp     ds:__imp___getmainargs
.text:00409500 __getmainargs   endp
.text:00409500
.text:00409500 ; ---------------------------------------------------------------------------
.text:00409506                 align 10h
.text:00409510
.text:00409510 ; =============== S U B R O U T I N E =======================================
.text:00409510
.text:00409510 ; Attributes: thunk
.text:00409510
.text:00409510 ; size_t __cdecl fwrite(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:00409510 fwrite          proc near               ; CODE XREF: sub_4019A0:loc_401FD2↑p
.text:00409510
.text:00409510 Buffer          = dword ptr  4
.text:00409510 ElementSize     = dword ptr  8
.text:00409510 ElementCount    = dword ptr  0Ch
.text:00409510 Stream          = dword ptr  10h
.text:00409510
.text:00409510                 jmp     ds:__imp_fwrite
.text:00409510 fwrite          endp
.text:00409510
.text:00409510 ; ---------------------------------------------------------------------------
.text:00409516                 align 10h
.text:00409520
.text:00409520 ; =============== S U B R O U T I N E =======================================
.text:00409520
.text:00409520 ; Attributes: thunk
.text:00409520
.text:00409520 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00409520 setlocale       proc near               ; CODE XREF: sub_4019A0+43↑p
.text:00409520
.text:00409520 Category        = dword ptr  4
.text:00409520 Locale          = dword ptr  8
.text:00409520
.text:00409520                 jmp     ds:__imp_setlocale
.text:00409520 setlocale       endp
.text:00409520
.text:00409520 ; ---------------------------------------------------------------------------
.text:00409526                 align 10h
.text:00409530
.text:00409530 ; =============== S U B R O U T I N E =======================================
.text:00409530
.text:00409530 ; Attributes: thunk
.text:00409530
.text:00409530 ; void __cdecl free(void *Block)
.text:00409530 free            proc near               ; CODE XREF: sub_4025F0+3B6↑p
.text:00409530                                         ; sub_4089A0+112↑p
.text:00409530
.text:00409530 Block           = dword ptr  4
.text:00409530
.text:00409530                 jmp     ds:__imp_free
.text:00409530 free            endp
.text:00409530
.text:00409530 ; ---------------------------------------------------------------------------
.text:00409536                 align 10h
.text:00409540
.text:00409540 ; =============== S U B R O U T I N E =======================================
.text:00409540
.text:00409540 ; Attributes: thunk
.text:00409540
.text:00409540 ; int __cdecl tolower(int C)
.text:00409540 tolower         proc near               ; CODE XREF: sub_4025F0+463↑p
.text:00409540                                         ; sub_4025F0+48A↑p
.text:00409540
.text:00409540 C               = dword ptr  4
.text:00409540
.text:00409540                 jmp     ds:__imp_tolower
.text:00409540 tolower         endp
.text:00409540
.text:00409540 ; ---------------------------------------------------------------------------
.text:00409546                 align 10h
.text:00409550
.text:00409550 ; =============== S U B R O U T I N E =======================================
.text:00409550
.text:00409550 ; Attributes: thunk
.text:00409550
.text:00409550 ; int __cdecl fflush(FILE *Stream)
.text:00409550 fflush          proc near               ; CODE XREF: sub_4025F0+3E9↑p
.text:00409550                                         ; sub_408F00+19↑p ...
.text:00409550
.text:00409550 Stream          = dword ptr  4
.text:00409550
.text:00409550                 jmp     ds:__imp_fflush
.text:00409550 fflush          endp
.text:00409550
.text:00409550 ; ---------------------------------------------------------------------------
.text:00409556                 align 10h
.text:00409560
.text:00409560 ; =============== S U B R O U T I N E =======================================
.text:00409560
.text:00409560 ; Attributes: thunk
.text:00409560
.text:00409560 ; int __cdecl fclose(FILE *Stream)
.text:00409560 fclose          proc near               ; CODE XREF: sub_4019A0+3BD↑p
.text:00409560                                         ; sub_4022D0+58↑p ...
.text:00409560
.text:00409560 Stream          = dword ptr  4
.text:00409560
.text:00409560                 jmp     ds:__imp_fclose
.text:00409560 fclose          endp
.text:00409560
.text:00409560 ; ---------------------------------------------------------------------------
.text:00409566                 align 10h
.text:00409570
.text:00409570 ; =============== S U B R O U T I N E =======================================
.text:00409570
.text:00409570 ; Attributes: thunk
.text:00409570
.text:00409570 ; int *__cdecl errno()
.text:00409570 _errno          proc near               ; CODE XREF: sub_4019A0+3D4↑p
.text:00409570                                         ; sub_4022D0:loc_402340↑p ...
.text:00409570                 jmp     ds:__imp__errno
.text:00409570 _errno          endp
.text:00409570
.text:00409570 ; ---------------------------------------------------------------------------
.text:00409576                 align 10h
.text:00409580
.text:00409580 ; =============== S U B R O U T I N E =======================================
.text:00409580
.text:00409580 ; Attributes: thunk
.text:00409580
.text:00409580 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00409580 strncmp         proc near               ; CODE XREF: sub_402BA0+66↑p
.text:00409580                                         ; sub_403090+23F↑p ...
.text:00409580
.text:00409580 Str1            = dword ptr  4
.text:00409580 Str2            = dword ptr  8
.text:00409580 MaxCount        = dword ptr  0Ch
.text:00409580
.text:00409580                 jmp     ds:__imp_strncmp
.text:00409580 strncmp         endp
.text:00409580
.text:00409580 ; ---------------------------------------------------------------------------
.text:00409586                 align 10h
.text:00409590
.text:00409590 ; =============== S U B R O U T I N E =======================================
.text:00409590
.text:00409590 ; Attributes: thunk
.text:00409590
.text:00409590 ; size_t __cdecl strlen(const char *Str)
.text:00409590 strlen          proc near               ; CODE XREF: sub_4019A0+5B3↑p
.text:00409590                                         ; sub_402BA0+3A↑p ...
.text:00409590
.text:00409590 Str             = dword ptr  4
.text:00409590
.text:00409590                 jmp     ds:__imp_strlen
.text:00409590 strlen          endp
.text:00409590
.text:00409590 ; ---------------------------------------------------------------------------
.text:00409596                 align 10h
.text:004095A0
.text:004095A0 ; =============== S U B R O U T I N E =======================================
.text:004095A0
.text:004095A0 ; Attributes: noreturn thunk
.text:004095A0
.text:004095A0 ; void __cdecl __noreturn exit(int Code)
.text:004095A0 exit            proc near               ; CODE XREF: sub_4019A0:loc_401AB4↑p
.text:004095A0                                         ; .text:0040217B↑p ...
.text:004095A0
.text:004095A0 Code            = dword ptr  4
.text:004095A0
.text:004095A0                 jmp     ds:__imp_exit
.text:004095A0 exit            endp
.text:004095A0
.text:004095A0 ; ---------------------------------------------------------------------------
.text:004095A6                 align 10h
.text:004095B0
.text:004095B0 ; =============== S U B R O U T I N E =======================================
.text:004095B0
.text:004095B0 ; Attributes: thunk
.text:004095B0
.text:004095B0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:004095B0 fputs           proc near               ; CODE XREF: sub_4019A0+21A↑p
.text:004095B0                                         ; sub_4019A0+23C↑p ...
.text:004095B0
.text:004095B0 Buffer          = dword ptr  4
.text:004095B0 Stream          = dword ptr  8
.text:004095B0
.text:004095B0                 jmp     ds:__imp_fputs
.text:004095B0 fputs           endp
.text:004095B0
.text:004095B0 ; ---------------------------------------------------------------------------
.text:004095B6                 align 10h
.text:004095C0
.text:004095C0 ; =============== S U B R O U T I N E =======================================
.text:004095C0
.text:004095C0 ; Attributes: thunk
.text:004095C0
.text:004095C0 ; int printf(const char *const Format, ...)
.text:004095C0 printf          proc near               ; CODE XREF: sub_4019A0+1CD↑p
.text:004095C0                                         ; sub_4019A0+1F8↑p ...
.text:004095C0
.text:004095C0 Format          = dword ptr  4
.text:004095C0
.text:004095C0                 jmp     ds:__imp_printf
.text:004095C0 printf          endp
.text:004095C0
.text:004095C0 ; ---------------------------------------------------------------------------
.text:004095C6                 align 10h
.text:004095D0
.text:004095D0 ; =============== S U B R O U T I N E =======================================
.text:004095D0
.text:004095D0 ; Attributes: thunk
.text:004095D0
.text:004095D0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:004095D0 fprintf         proc near               ; CODE XREF: sub_4019A0+108↑p
.text:004095D0                                         ; sub_4019A0+450↑p ...
.text:004095D0
.text:004095D0 Stream          = dword ptr  4
.text:004095D0 Format          = dword ptr  8
.text:004095D0
.text:004095D0                 jmp     ds:__imp_fprintf
.text:004095D0 fprintf         endp
.text:004095D0
.text:004095D0 ; ---------------------------------------------------------------------------
.text:004095D6                 align 10h
.text:004095E0
.text:004095E0 ; =============== S U B R O U T I N E =======================================
.text:004095E0
.text:004095E0 ; Attributes: thunk
.text:004095E0
.text:004095E0 ; int __cdecl isctype(int C, int Type)
.text:004095E0 _isctype        proc near               ; CODE XREF: sub_4025F0+14D↑p
.text:004095E0                                         ; sub_407860+610↑p
.text:004095E0
.text:004095E0 C               = dword ptr  4
.text:004095E0 Type            = dword ptr  8
.text:004095E0
.text:004095E0                 jmp     ds:__imp__isctype
.text:004095E0 _isctype        endp
.text:004095E0
.text:004095E0 ; ---------------------------------------------------------------------------
.text:004095E6                 align 10h
.text:004095F0
.text:004095F0 ; =============== S U B R O U T I N E =======================================
.text:004095F0
.text:004095F0 ; Attributes: thunk
.text:004095F0
.text:004095F0 ; char *__cdecl strchr(const char *Str, int Val)
.text:004095F0 strchr          proc near               ; CODE XREF: sub_4019A0+50F↑p
.text:004095F0                                         ; sub_4019A0+765↑p ...
.text:004095F0
.text:004095F0 Str             = dword ptr  4
.text:004095F0 Val             = dword ptr  8
.text:004095F0
.text:004095F0                 jmp     ds:__imp_strchr
.text:004095F0 strchr          endp
.text:004095F0
.text:004095F0 ; ---------------------------------------------------------------------------
.text:004095F6                 align 10h
.text:00409600
.text:00409600 ; =============== S U B R O U T I N E =======================================
.text:00409600
.text:00409600 ; Attributes: thunk
.text:00409600
.text:00409600 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:00409600 fopen           proc near               ; CODE XREF: sub_4022D0+126↑p
.text:00409600                                         ; sub_4025F0+587↑p
.text:00409600
.text:00409600 FileName        = dword ptr  4
.text:00409600 Mode            = dword ptr  8
.text:00409600
.text:00409600                 jmp     ds:__imp_fopen
.text:00409600 fopen           endp
.text:00409600
.text:00409600 ; ---------------------------------------------------------------------------
.text:00409606                 align 10h
.text:00409610
.text:00409610 ; =============== S U B R O U T I N E =======================================
.text:00409610
.text:00409610 ; Attributes: thunk
.text:00409610
.text:00409610 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00409610 _flsbuf         proc near               ; CODE XREF: sub_4019A0+607↑p
.text:00409610                                         ; sub_4019A0+698↑p ...
.text:00409610
.text:00409610 File            = dword ptr  8
.text:00409610
.text:00409610                 jmp     ds:__imp__flsbuf
.text:00409610 _flsbuf         endp
.text:00409610
.text:00409610 ; ---------------------------------------------------------------------------
.text:00409616                 align 10h
.text:00409620
.text:00409620 ; =============== S U B R O U T I N E =======================================
.text:00409620
.text:00409620 ; Attributes: thunk
.text:00409620
.text:00409620 ; char *__cdecl getenv(const char *VarName)
.text:00409620 getenv          proc near               ; CODE XREF: sub_403090+B57↑p
.text:00409620
.text:00409620 VarName         = dword ptr  4
.text:00409620
.text:00409620                 jmp     ds:__imp_getenv
.text:00409620 getenv          endp
.text:00409620
.text:00409620 ; ---------------------------------------------------------------------------
.text:00409626                 align 10h
.text:00409630
.text:00409630 ; =============== S U B R O U T I N E =======================================
.text:00409630
.text:00409630 ; Attributes: thunk
.text:00409630
.text:00409630 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00409630 memcpy          proc near               ; CODE XREF: sub_403EA0+11B↑p
.text:00409630                                         ; sub_404180+47↑p ...
.text:00409630
.text:00409630 Src             = dword ptr  8
.text:00409630 Size            = dword ptr  0Ch
.text:00409630
.text:00409630                 jmp     ds:__imp_memcpy
.text:00409630 memcpy          endp
.text:00409630
.text:00409630 ; ---------------------------------------------------------------------------
.text:00409636                 align 10h
.text:00409640
.text:00409640 ; =============== S U B R O U T I N E =======================================
.text:00409640
.text:00409640 ; Attributes: thunk
.text:00409640
.text:00409640 ; size_t __cdecl fread(void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:00409640 fread           proc near               ; CODE XREF: sub_403EA0+9D↑p
.text:00409640                                         ; sub_4062C0+8D↑p
.text:00409640
.text:00409640 Buffer          = dword ptr  4
.text:00409640 ElementSize     = dword ptr  8
.text:00409640 ElementCount    = dword ptr  0Ch
.text:00409640 Stream          = dword ptr  10h
.text:00409640
.text:00409640                 jmp     ds:__imp_fread
.text:00409640 fread           endp
.text:00409640
.text:00409640 ; ---------------------------------------------------------------------------
.text:00409646                 align 10h
.text:00409650
.text:00409650 ; =============== S U B R O U T I N E =======================================
.text:00409650
.text:00409650 ; Attributes: thunk
.text:00409650
.text:00409650 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00409650 vfprintf        proc near               ; CODE XREF: sub_407370+C1↑p
.text:00409650                                         ; sub_408F00+49↑p ...
.text:00409650
.text:00409650 Stream          = dword ptr  4
.text:00409650 Format          = dword ptr  8
.text:00409650 ArgList         = dword ptr  0Ch
.text:00409650
.text:00409650                 jmp     ds:__imp_vfprintf
.text:00409650 vfprintf        endp
.text:00409650
.text:00409650 ; ---------------------------------------------------------------------------
.text:00409656                 align 10h
.text:00409660
.text:00409660 ; =============== S U B R O U T I N E =======================================
.text:00409660
.text:00409660 ; Attributes: noreturn thunk
.text:00409660
.text:00409660 ; void __cdecl __noreturn abort()
.text:00409660 abort           proc near               ; CODE XREF: sub_407370:loc_40740C↑p
.text:00409660                                         ; sub_4089A0:loc_408B5A↑p ...
.text:00409660                 jmp     ds:__imp_abort
.text:00409660 abort           endp
.text:00409660
.text:00409660 ; ---------------------------------------------------------------------------
.text:00409666                 align 10h
.text:00409670
.text:00409670 ; =============== S U B R O U T I N E =======================================
.text:00409670
.text:00409670 ; Attributes: thunk
.text:00409670
.text:00409670 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00409670 iswctype        proc near               ; CODE XREF: sub_407860+78B↑p
.text:00409670
.text:00409670 C               = word ptr  4
.text:00409670 Type            = word ptr  8
.text:00409670
.text:00409670                 jmp     ds:__imp_iswctype
.text:00409670 iswctype        endp
.text:00409670
.text:00409670 ; ---------------------------------------------------------------------------
.text:00409676                 align 10h
.text:00409680
.text:00409680 ; =============== S U B R O U T I N E =======================================
.text:00409680
.text:00409680 ; Attributes: thunk
.text:00409680
.text:00409680 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00409680 memset          proc near               ; CODE XREF: .text:00408CD6↑p
.text:00409680
.text:00409680 Val             = dword ptr  8
.text:00409680 Size            = dword ptr  0Ch
.text:00409680
.text:00409680                 jmp     ds:__imp_memset
.text:00409680 memset          endp
.text:00409680
.text:00409680 ; ---------------------------------------------------------------------------
.text:00409686                 align 10h
.text:00409690
.text:00409690 ; =============== S U B R O U T I N E =======================================
.text:00409690
.text:00409690 ; Attributes: thunk
.text:00409690
.text:00409690 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00409690 calloc          proc near               ; CODE XREF: .text:00408D13↑p
.text:00409690
.text:00409690 Count           = dword ptr  4
.text:00409690 Size            = dword ptr  8
.text:00409690
.text:00409690                 jmp     ds:__imp_calloc
.text:00409690 calloc          endp
.text:00409690
.text:00409690 ; ---------------------------------------------------------------------------
.text:00409696                 align 10h
.text:004096A0
.text:004096A0 ; =============== S U B R O U T I N E =======================================
.text:004096A0
.text:004096A0 ; Attributes: thunk
.text:004096A0
.text:004096A0 ; void *__cdecl realloc(void *Block, size_t Size)
.text:004096A0 realloc         proc near               ; CODE XREF: .text:00408C10↑p
.text:004096A0                                         ; sub_408C40+16↑p ...
.text:004096A0
.text:004096A0 Block           = dword ptr  4
.text:004096A0 Size            = dword ptr  8
.text:004096A0
.text:004096A0                 jmp     ds:__imp_realloc
.text:004096A0 realloc         endp
.text:004096A0
.text:004096A0 ; ---------------------------------------------------------------------------
.text:004096A6                 align 10h
.text:004096B0
.text:004096B0 ; =============== S U B R O U T I N E =======================================
.text:004096B0
.text:004096B0 ; Attributes: thunk
.text:004096B0
.text:004096B0 ; void *__cdecl malloc(size_t Size)
.text:004096B0 malloc          proc near               ; CODE XREF: sub_408B70+24↑p
.text:004096B0                                         ; sub_408BB0+E↑p ...
.text:004096B0
.text:004096B0 Size            = dword ptr  4
.text:004096B0
.text:004096B0                 jmp     ds:__imp_malloc
.text:004096B0 malloc          endp
.text:004096B0
.text:004096B0 ; ---------------------------------------------------------------------------
.text:004096B6                 align 10h
.text:004096C0
.text:004096C0 ; =============== S U B R O U T I N E =======================================
.text:004096C0
.text:004096C0 ; Attributes: thunk
.text:004096C0
.text:004096C0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:004096C0 strcmp          proc near               ; CODE XREF: sub_409004+180↑p
.text:004096C0
.text:004096C0 Str1            = dword ptr  4
.text:004096C0 Str2            = dword ptr  8
.text:004096C0
.text:004096C0                 jmp     ds:__imp_strcmp
.text:004096C0 strcmp          endp
.text:004096C0
.text:004096C0 ; ---------------------------------------------------------------------------
.text:004096C6                 align 10h
.text:004096D0
.text:004096D0 ; =============== S U B R O U T I N E =======================================
.text:004096D0
.text:004096D0 ; Attributes: thunk
.text:004096D0
.text:004096D0 ; char *__cdecl strerror(int ErrorMessage)
.text:004096D0 strerror        proc near               ; CODE XREF: sub_408F00+A5↑p
.text:004096D0                                         ; sub_409004+10F↑p
.text:004096D0
.text:004096D0 ErrorMessage    = dword ptr  4
.text:004096D0
.text:004096D0                 jmp     ds:__imp_strerror
.text:004096D0 strerror        endp
.text:004096D0
.text:004096D0 ; ---------------------------------------------------------------------------
.text:004096D6                 align 10h
.text:004096E0
.text:004096E0 ; =============== S U B R O U T I N E =======================================
.text:004096E0
.text:004096E0 ; Attributes: thunk
.text:004096E0
.text:004096E0 ; int __cdecl filbuf(FILE *File)
.text:004096E0 _filbuf         proc near               ; CODE XREF: sub_4091A0+13B↑p
.text:004096E0
.text:004096E0 File            = dword ptr  4
.text:004096E0
.text:004096E0                 jmp     ds:__imp__filbuf
.text:004096E0 _filbuf         endp
.text:004096E0
.text:004096E0 ; ---------------------------------------------------------------------------
.text:004096E6                 align 10h
.text:004096F0
.text:004096F0 ; =============== S U B R O U T I N E =======================================
.text:004096F0
.text:004096F0 ; Attributes: thunk
.text:004096F0
.text:004096F0 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:004096F0 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:004096F0
.text:004096F0 lpTopLevelExceptionFilter= dword ptr  4
.text:004096F0
.text:004096F0                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:004096F0 SetUnhandledExceptionFilter endp
.text:004096F0
.text:004096F0 ; ---------------------------------------------------------------------------
.text:004096F6                 align 10h
.text:00409700
.text:00409700 ; =============== S U B R O U T I N E =======================================
.text:00409700
.text:00409700 ; Attributes: noreturn thunk
.text:00409700
.text:00409700 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00409700 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00409700
.text:00409700 uExitCode       = dword ptr  4
.text:00409700
.text:00409700                 jmp     ds:__imp_ExitProcess
.text:00409700 ExitProcess     endp
.text:00409700
.text:00409700 ; ---------------------------------------------------------------------------
.text:00409706                 align 10h
.text:00409710 dword_409710    dd 0FFFFFFFFh           ; DATA XREF: .text:00409399↑r
.text:00409710                                         ; .text:loc_4093C0↑r ...
.text:00409714 dword_409714    dd 0                    ; DATA XREF: .text:loc_4093CC↑r
.text:00409714                                         ; sub_4093F0:loc_40943D↑r
.text:00409718                 dd 0FFFFFFFFh
.text:0040971C dword_40971C    dd 39h dup(0)           ; DATA XREF: .data:off_40A094↓o
.text:00409800                 dd 200h dup(?)
.text:00409800 _text           ends
.text:00409800
.data:0040A000 ; Section 2. (virtual address 0000A000)
.data:0040A000 ; Virtual size                  : 000000B0 (    176.)
.data:0040A000 ; Section size in file          : 00000200 (    512.)
.data:0040A000 ; Offset to raw data for section: 00008C00
.data:0040A000 ; Flags C0000040: Data Readable Writable
.data:0040A000 ; Alignment     : default
.data:0040A000 ; ===========================================================================
.data:0040A000
.data:0040A000 ; Segment type: Pure data
.data:0040A000 ; Segment permissions: Read/Write
.data:0040A000 _data           segment para public 'DATA' use32
.data:0040A000                 assume cs:_data
.data:0040A000                 ;org 40A000h
.data:0040A000 dword_40A000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:0040A000                                         ; sub_401080+CC↑r
.data:0040A004 dword_40A004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:0040A004                                         ; sub_401080+D4↑r
.data:0040A008                 align 10h
.data:0040A010 dword_40A010    dd 1                    ; DATA XREF: sub_4019A0+120↑r
.data:0040A010                                         ; sub_4019A0+18D↑r ...
.data:0040A014                 align 10h
.data:0040A020 dword_40A020    dd 1                    ; DATA XREF: sub_4019A0+35E↑r
.data:0040A020                                         ; sub_4019A0+49E↑r ...
.data:0040A024 dword_40A024    dd 1                    ; DATA XREF: sub_403C20+11↑r
.data:0040A024                                         ; .text:00403CC1↑r
.data:0040A028 dword_40A028    dd 3Fh                  ; DATA XREF: sub_403C20+7D↑w
.data:0040A028                                         ; .text:00403D2D↑w
.data:0040A02C                 align 10h
.data:0040A030 ; char *Buffer
.data:0040A030 Buffer          dd offset aCopyrightC2005
.data:0040A030                                         ; DATA XREF: sub_407370+DC↑r
.data:0040A030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:0040A034                 align 10h
.data:0040A040 dword_40A040    dd 1                    ; DATA XREF: sub_4089A0+22↑r
.data:0040A040                                         ; sub_4089A0+65↑r ...
.data:0040A044 dword_40A044    dd 100h                 ; DATA XREF: sub_4089A0+3F↑o
.data:0040A044                                         ; sub_4089A0+1A2↑r ...
.data:0040A048 off_40A048      dd offset unk_40B090    ; DATA XREF: sub_4089A0+1AA↑r
.data:0040A04C ; void *off_40A04C
.data:0040A04C off_40A04C      dd offset dword_40A044  ; DATA XREF: sub_4089A0+39↑r
.data:0040A04C                                         ; sub_4089A0+60↑w ...
.data:0040A050 ; int Code
.data:0040A050 Code            dd 1                    ; DATA XREF: sub_4076F0+6D↑r
.data:0040A050                                         ; sub_4076F0+9A↑r ...
.data:0040A054                 align 10h
.data:0040A060 dword_40A060    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:0040A064                 align 10h
.data:0040A070 ; int Mode
.data:0040A070 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:0040A070                                         ; sub_401080+80↑r ...
.data:0040A074                 align 10h
.data:0040A080 dword_40A080    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:0040A080                                         ; sub_401080+BA↑r
.data:0040A084                 align 10h
.data:0040A090 dword_40A090    dd 0                    ; DATA XREF: sub_4093F0+9↑r
.data:0040A090                                         ; sub_4093F0+1D↑w
.data:0040A094 off_40A094      dd offset dword_40971C  ; DATA XREF: sub_409360+6↑r
.data:0040A094                                         ; sub_409360+17↑r ...
.data:0040A098                 align 1000h
.data:0040A098 _data           ends
.data:0040A098
.bss:0040B000 ; Section 3. (virtual address 0000B000)
.bss:0040B000 ; Virtual size                  : 00000280 (    640.)
.bss:0040B000 ; Section size in file          : 00000000 (      0.)
.bss:0040B000 ; Offset to raw data for section: 00000000
.bss:0040B000 ; Flags C0000080: Bss Readable Writable
.bss:0040B000 ; Alignment     : default
.bss:0040B000 ; ===========================================================================
.bss:0040B000
.bss:0040B000 ; Segment type: Uninitialized
.bss:0040B000 ; Segment permissions: Read/Write
.bss:0040B000 _bss            segment para public 'BSS' use32
.bss:0040B000                 assume cs:_bss
.bss:0040B000                 ;org 40B000h
.bss:0040B000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0040B000 byte_40B000     db ?                    ; DATA XREF: sub_4019A0+2E9↑w
.bss:0040B000                                         ; sub_4019A0:loc_401CA0↑w ...
.bss:0040B001                 align 10h
.bss:0040B010 byte_40B010     db ?                    ; DATA XREF: sub_4019A0+2F0↑w
.bss:0040B010                                         ; sub_4019A0+307↑w ...
.bss:0040B011                 align 10h
.bss:0040B020 byte_40B020     db ?                    ; DATA XREF: sub_4019A0:loc_401D3A↑r
.bss:0040B020                                         ; sub_4022D0+25↑w ...
.bss:0040B021                 align 10h
.bss:0040B030 dword_40B030    dd ?                    ; DATA XREF: sub_4019A0+33D↑w
.bss:0040B030                                         ; sub_402BA0+162↑r ...
.bss:0040B034                 align 10h
.bss:0040B040 dword_40B040    dd ?                    ; DATA XREF: sub_4019A0+34A↑w
.bss:0040B040                                         ; sub_4019A0:loc_401EE0↑r ...
.bss:0040B044                 align 10h
.bss:0040B050 dword_40B050    dd ?                    ; DATA XREF: sub_403C20+9↑o
.bss:0040B050                                         ; sub_403C20+17↑w ...
.bss:0040B054 dword_40B054    dd ?                    ; DATA XREF: sub_403C20+21↑w
.bss:0040B054                                         ; .text:00403CD9↑w
.bss:0040B058 dword_40B058    dd ?                    ; DATA XREF: sub_403C20+77↑r
.bss:0040B058                                         ; .text:00403D27↑r
.bss:0040B05C dword_40B05C    dd ?                    ; DATA XREF: sub_403C20+6B↑r
.bss:0040B05C                                         ; .text:00403D1B↑r
.bss:0040B060                 align 40h
.bss:0040B080 ; char *dword_40B080
.bss:0040B080 dword_40B080    dd ?                    ; DATA XREF: .text:004076C4↑w
.bss:0040B080                                         ; sub_4076F0+58↑r
.bss:0040B084                 align 10h
.bss:0040B090 unk_40B090      db    ? ;               ; DATA XREF: sub_4089A0+100↑o
.bss:0040B090                                         ; .data:off_40A048↑o
.bss:0040B091                 db    ? ;
.bss:0040B092                 db    ? ;
.bss:0040B093                 db    ? ;
.bss:0040B094                 db    ? ;
.bss:0040B095                 db    ? ;
.bss:0040B096                 db    ? ;
.bss:0040B097                 db    ? ;
.bss:0040B098                 db    ? ;
.bss:0040B099                 db    ? ;
.bss:0040B09A                 db    ? ;
.bss:0040B09B                 db    ? ;
.bss:0040B09C                 db    ? ;
.bss:0040B09D                 db    ? ;
.bss:0040B09E                 db    ? ;
.bss:0040B09F                 db    ? ;
.bss:0040B0A0                 db    ? ;
.bss:0040B0A1                 db    ? ;
.bss:0040B0A2                 db    ? ;
.bss:0040B0A3                 db    ? ;
.bss:0040B0A4                 db    ? ;
.bss:0040B0A5                 db    ? ;
.bss:0040B0A6                 db    ? ;
.bss:0040B0A7                 db    ? ;
.bss:0040B0A8                 db    ? ;
.bss:0040B0A9                 db    ? ;
.bss:0040B0AA                 db    ? ;
.bss:0040B0AB                 db    ? ;
.bss:0040B0AC                 db    ? ;
.bss:0040B0AD                 db    ? ;
.bss:0040B0AE                 db    ? ;
.bss:0040B0AF                 db    ? ;
.bss:0040B0B0                 db    ? ;
.bss:0040B0B1                 db    ? ;
.bss:0040B0B2                 db    ? ;
.bss:0040B0B3                 db    ? ;
.bss:0040B0B4                 db    ? ;
.bss:0040B0B5                 db    ? ;
.bss:0040B0B6                 db    ? ;
.bss:0040B0B7                 db    ? ;
.bss:0040B0B8                 db    ? ;
.bss:0040B0B9                 db    ? ;
.bss:0040B0BA                 db    ? ;
.bss:0040B0BB                 db    ? ;
.bss:0040B0BC                 db    ? ;
.bss:0040B0BD                 db    ? ;
.bss:0040B0BE                 db    ? ;
.bss:0040B0BF                 db    ? ;
.bss:0040B0C0                 db    ? ;
.bss:0040B0C1                 db    ? ;
.bss:0040B0C2                 db    ? ;
.bss:0040B0C3                 db    ? ;
.bss:0040B0C4                 db    ? ;
.bss:0040B0C5                 db    ? ;
.bss:0040B0C6                 db    ? ;
.bss:0040B0C7                 db    ? ;
.bss:0040B0C8                 db    ? ;
.bss:0040B0C9                 db    ? ;
.bss:0040B0CA                 db    ? ;
.bss:0040B0CB                 db    ? ;
.bss:0040B0CC                 db    ? ;
.bss:0040B0CD                 db    ? ;
.bss:0040B0CE                 db    ? ;
.bss:0040B0CF                 db    ? ;
.bss:0040B0D0                 db    ? ;
.bss:0040B0D1                 db    ? ;
.bss:0040B0D2                 db    ? ;
.bss:0040B0D3                 db    ? ;
.bss:0040B0D4                 db    ? ;
.bss:0040B0D5                 db    ? ;
.bss:0040B0D6                 db    ? ;
.bss:0040B0D7                 db    ? ;
.bss:0040B0D8                 db    ? ;
.bss:0040B0D9                 db    ? ;
.bss:0040B0DA                 db    ? ;
.bss:0040B0DB                 db    ? ;
.bss:0040B0DC                 db    ? ;
.bss:0040B0DD                 db    ? ;
.bss:0040B0DE                 db    ? ;
.bss:0040B0DF                 db    ? ;
.bss:0040B0E0                 db    ? ;
.bss:0040B0E1                 db    ? ;
.bss:0040B0E2                 db    ? ;
.bss:0040B0E3                 db    ? ;
.bss:0040B0E4                 db    ? ;
.bss:0040B0E5                 db    ? ;
.bss:0040B0E6                 db    ? ;
.bss:0040B0E7                 db    ? ;
.bss:0040B0E8                 db    ? ;
.bss:0040B0E9                 db    ? ;
.bss:0040B0EA                 db    ? ;
.bss:0040B0EB                 db    ? ;
.bss:0040B0EC                 db    ? ;
.bss:0040B0ED                 db    ? ;
.bss:0040B0EE                 db    ? ;
.bss:0040B0EF                 db    ? ;
.bss:0040B0F0                 db    ? ;
.bss:0040B0F1                 db    ? ;
.bss:0040B0F2                 db    ? ;
.bss:0040B0F3                 db    ? ;
.bss:0040B0F4                 db    ? ;
.bss:0040B0F5                 db    ? ;
.bss:0040B0F6                 db    ? ;
.bss:0040B0F7                 db    ? ;
.bss:0040B0F8                 db    ? ;
.bss:0040B0F9                 db    ? ;
.bss:0040B0FA                 db    ? ;
.bss:0040B0FB                 db    ? ;
.bss:0040B0FC                 db    ? ;
.bss:0040B0FD                 db    ? ;
.bss:0040B0FE                 db    ? ;
.bss:0040B0FF                 db    ? ;
.bss:0040B100                 db    ? ;
.bss:0040B101                 db    ? ;
.bss:0040B102                 db    ? ;
.bss:0040B103                 db    ? ;
.bss:0040B104                 db    ? ;
.bss:0040B105                 db    ? ;
.bss:0040B106                 db    ? ;
.bss:0040B107                 db    ? ;
.bss:0040B108                 db    ? ;
.bss:0040B109                 db    ? ;
.bss:0040B10A                 db    ? ;
.bss:0040B10B                 db    ? ;
.bss:0040B10C                 db    ? ;
.bss:0040B10D                 db    ? ;
.bss:0040B10E                 db    ? ;
.bss:0040B10F                 db    ? ;
.bss:0040B110                 db    ? ;
.bss:0040B111                 db    ? ;
.bss:0040B112                 db    ? ;
.bss:0040B113                 db    ? ;
.bss:0040B114                 db    ? ;
.bss:0040B115                 db    ? ;
.bss:0040B116                 db    ? ;
.bss:0040B117                 db    ? ;
.bss:0040B118                 db    ? ;
.bss:0040B119                 db    ? ;
.bss:0040B11A                 db    ? ;
.bss:0040B11B                 db    ? ;
.bss:0040B11C                 db    ? ;
.bss:0040B11D                 db    ? ;
.bss:0040B11E                 db    ? ;
.bss:0040B11F                 db    ? ;
.bss:0040B120                 db    ? ;
.bss:0040B121                 db    ? ;
.bss:0040B122                 db    ? ;
.bss:0040B123                 db    ? ;
.bss:0040B124                 db    ? ;
.bss:0040B125                 db    ? ;
.bss:0040B126                 db    ? ;
.bss:0040B127                 db    ? ;
.bss:0040B128                 db    ? ;
.bss:0040B129                 db    ? ;
.bss:0040B12A                 db    ? ;
.bss:0040B12B                 db    ? ;
.bss:0040B12C                 db    ? ;
.bss:0040B12D                 db    ? ;
.bss:0040B12E                 db    ? ;
.bss:0040B12F                 db    ? ;
.bss:0040B130                 db    ? ;
.bss:0040B131                 db    ? ;
.bss:0040B132                 db    ? ;
.bss:0040B133                 db    ? ;
.bss:0040B134                 db    ? ;
.bss:0040B135                 db    ? ;
.bss:0040B136                 db    ? ;
.bss:0040B137                 db    ? ;
.bss:0040B138                 db    ? ;
.bss:0040B139                 db    ? ;
.bss:0040B13A                 db    ? ;
.bss:0040B13B                 db    ? ;
.bss:0040B13C                 db    ? ;
.bss:0040B13D                 db    ? ;
.bss:0040B13E                 db    ? ;
.bss:0040B13F                 db    ? ;
.bss:0040B140                 db    ? ;
.bss:0040B141                 db    ? ;
.bss:0040B142                 db    ? ;
.bss:0040B143                 db    ? ;
.bss:0040B144                 db    ? ;
.bss:0040B145                 db    ? ;
.bss:0040B146                 db    ? ;
.bss:0040B147                 db    ? ;
.bss:0040B148                 db    ? ;
.bss:0040B149                 db    ? ;
.bss:0040B14A                 db    ? ;
.bss:0040B14B                 db    ? ;
.bss:0040B14C                 db    ? ;
.bss:0040B14D                 db    ? ;
.bss:0040B14E                 db    ? ;
.bss:0040B14F                 db    ? ;
.bss:0040B150                 db    ? ;
.bss:0040B151                 db    ? ;
.bss:0040B152                 db    ? ;
.bss:0040B153                 db    ? ;
.bss:0040B154                 db    ? ;
.bss:0040B155                 db    ? ;
.bss:0040B156                 db    ? ;
.bss:0040B157                 db    ? ;
.bss:0040B158                 db    ? ;
.bss:0040B159                 db    ? ;
.bss:0040B15A                 db    ? ;
.bss:0040B15B                 db    ? ;
.bss:0040B15C                 db    ? ;
.bss:0040B15D                 db    ? ;
.bss:0040B15E                 db    ? ;
.bss:0040B15F                 db    ? ;
.bss:0040B160                 db    ? ;
.bss:0040B161                 db    ? ;
.bss:0040B162                 db    ? ;
.bss:0040B163                 db    ? ;
.bss:0040B164                 db    ? ;
.bss:0040B165                 db    ? ;
.bss:0040B166                 db    ? ;
.bss:0040B167                 db    ? ;
.bss:0040B168                 db    ? ;
.bss:0040B169                 db    ? ;
.bss:0040B16A                 db    ? ;
.bss:0040B16B                 db    ? ;
.bss:0040B16C                 db    ? ;
.bss:0040B16D                 db    ? ;
.bss:0040B16E                 db    ? ;
.bss:0040B16F                 db    ? ;
.bss:0040B170                 db    ? ;
.bss:0040B171                 db    ? ;
.bss:0040B172                 db    ? ;
.bss:0040B173                 db    ? ;
.bss:0040B174                 db    ? ;
.bss:0040B175                 db    ? ;
.bss:0040B176                 db    ? ;
.bss:0040B177                 db    ? ;
.bss:0040B178                 db    ? ;
.bss:0040B179                 db    ? ;
.bss:0040B17A                 db    ? ;
.bss:0040B17B                 db    ? ;
.bss:0040B17C                 db    ? ;
.bss:0040B17D                 db    ? ;
.bss:0040B17E                 db    ? ;
.bss:0040B17F                 db    ? ;
.bss:0040B180                 db    ? ;
.bss:0040B181                 db    ? ;
.bss:0040B182                 db    ? ;
.bss:0040B183                 db    ? ;
.bss:0040B184                 db    ? ;
.bss:0040B185                 db    ? ;
.bss:0040B186                 db    ? ;
.bss:0040B187                 db    ? ;
.bss:0040B188                 db    ? ;
.bss:0040B189                 db    ? ;
.bss:0040B18A                 db    ? ;
.bss:0040B18B                 db    ? ;
.bss:0040B18C                 db    ? ;
.bss:0040B18D                 db    ? ;
.bss:0040B18E                 db    ? ;
.bss:0040B18F                 db    ? ;
.bss:0040B190 dword_40B190    dd ?                    ; DATA XREF: .text:loc_408331↑o
.bss:0040B190                                         ; .text:loc_408350↑o ...
.bss:0040B194 dword_40B194    dd ?                    ; DATA XREF: .text:loc_4083D0↑o
.bss:0040B194                                         ; .text:00408858↑r ...
.bss:0040B198 dword_40B198    dd ?                    ; DATA XREF: .text:00408852↑r
.bss:0040B198                                         ; sub_408900+2C↑r
.bss:0040B19C dword_40B19C    dd ?                    ; DATA XREF: .text:00408846↑r
.bss:0040B19C                                         ; sub_408900+22↑r
.bss:0040B1A0 dword_40B1A0    dd ?                    ; DATA XREF: .text:00408862↑r
.bss:0040B1A0                                         ; sub_408900+36↑r
.bss:0040B1A4 dword_40B1A4    dd ?                    ; DATA XREF: .text:00408872↑r
.bss:0040B1A4                                         ; sub_408900+4E↑r
.bss:0040B1A8 dword_40B1A8    dd ?                    ; DATA XREF: .text:0040888F↑r
.bss:0040B1A8                                         ; sub_408900+62↑r
.bss:0040B1AC dword_40B1AC    dd ?                    ; DATA XREF: .text:00408885↑r
.bss:0040B1AC                                         ; sub_408900+70↑r
.bss:0040B1B0 dword_40B1B0    dd ?                    ; DATA XREF: .text:00408868↑r
.bss:0040B1B0                                         ; sub_408900+7A↑r
.bss:0040B1B4                 align 10h
.bss:0040B1C0 ; char *Str1
.bss:0040B1C0 Str1            dd ?                    ; DATA XREF: sub_409004:loc_40903D↑w
.bss:0040B1C0                                         ; sub_409004:loc_409170↑r
.bss:0040B1C4                 align 10h
.bss:0040B1D0 dword_40B1D0    dd ?                    ; DATA XREF: sub_409004+2D↑r
.bss:0040B1D0                                         ; sub_409004+3F↑w
.bss:0040B1D4                 align 10h
.bss:0040B1E0 dword_40B1E0    dd ?                    ; DATA XREF: sub_4019A0+3D↑w
.bss:0040B1E0                                         ; sub_4019A0+F4↑r ...
.bss:0040B1E4                 align 20h
.bss:0040B200 dword_40B200    dd ?                    ; DATA XREF: sub_403C20+71↑w
.bss:0040B200                                         ; .text:00403D21↑w
.bss:0040B204                 align 10h
.bss:0040B210 dword_40B210    dd ?                    ; CODE XREF: sub_409004+63↑p
.bss:0040B210                                         ; DATA XREF: sub_408F00+1E↑r ...
.bss:0040B214                 align 10h
.bss:0040B220 dword_40B220    dd ?                    ; DATA XREF: sub_408F00+4E↑w
.bss:0040B220                                         ; sub_409004+AB↑w
.bss:0040B224                 db    ? ;
.bss:0040B225                 db    ? ;
.bss:0040B226                 db    ? ;
.bss:0040B227                 db    ? ;
.bss:0040B228                 db    ? ;
.bss:0040B229                 db    ? ;
.bss:0040B22A                 db    ? ;
.bss:0040B22B                 db    ? ;
.bss:0040B22C                 db    ? ;
.bss:0040B22D                 db    ? ;
.bss:0040B22E                 db    ? ;
.bss:0040B22F                 db    ? ;
.bss:0040B230                 db    ? ;
.bss:0040B231                 db    ? ;
.bss:0040B232                 db    ? ;
.bss:0040B233                 db    ? ;
.bss:0040B234                 db    ? ;
.bss:0040B235                 db    ? ;
.bss:0040B236                 db    ? ;
.bss:0040B237                 db    ? ;
.bss:0040B238                 db    ? ;
.bss:0040B239                 db    ? ;
.bss:0040B23A                 db    ? ;
.bss:0040B23B                 db    ? ;
.bss:0040B23C                 db    ? ;
.bss:0040B23D                 db    ? ;
.bss:0040B23E                 db    ? ;
.bss:0040B23F                 db    ? ;
.bss:0040B240                 db    ? ;
.bss:0040B241                 db    ? ;
.bss:0040B242                 db    ? ;
.bss:0040B243                 db    ? ;
.bss:0040B244                 db    ? ;
.bss:0040B245                 db    ? ;
.bss:0040B246                 db    ? ;
.bss:0040B247                 db    ? ;
.bss:0040B248                 db    ? ;
.bss:0040B249                 db    ? ;
.bss:0040B24A                 db    ? ;
.bss:0040B24B                 db    ? ;
.bss:0040B24C                 db    ? ;
.bss:0040B24D                 db    ? ;
.bss:0040B24E                 db    ? ;
.bss:0040B24F                 db    ? ;
.bss:0040B250 dword_40B250    dd ?                    ; DATA XREF: sub_409004+13↑r
.bss:0040B254                 align 1000h
.bss:0040B254 _bss            ends
.bss:0040B254
.idata:0040C000 ; Section 4. (virtual address 0000C000)
.idata:0040C000 ; Virtual size                  : 000005FC (   1532.)
.idata:0040C000 ; Section size in file          : 00000600 (   1536.)
.idata:0040C000 ; Offset to raw data for section: 00008E00
.idata:0040C000 ; Flags C0000040: Data Readable Writable
.idata:0040C000 ; Alignment     : default
.idata:0040C000 ; ===========================================================================
.idata:0040C000
.idata:0040C000 ; Segment type: Externs
.idata:0040C000 ; _idata
.idata:0040C000
.idata:0040C001
.idata:0040C16C ;
.idata:0040C16C ; Imports from libintl3.dll
.idata:0040C16C ;
.idata:0040C16C                 extrn __imp_libintl_bindtextdomain:dword
.idata:0040C16C                                         ; CODE XREF: sub_4019A0+57↑p
.idata:0040C16C                                         ; DATA XREF: sub_4019A0+57↑r ...
.idata:0040C170                 extrn libintl_gettext:dword
.idata:0040C170                                         ; CODE XREF: sub_4019A0+E8↑p
.idata:0040C170                                         ; sub_4019A0+187↑p ...
.idata:0040C174                 extrn libintl_ngettext:dword
.idata:0040C174                                         ; CODE XREF: sub_4025F0+279↑p
.idata:0040C174                                         ; sub_4025F0+2CB↑p
.idata:0040C174                                         ; DATA XREF: ...
.idata:0040C178                 extrn libintl_textdomain:dword
.idata:0040C178                                         ; CODE XREF: sub_4019A0+64↑p
.idata:0040C178                                         ; DATA XREF: sub_4019A0+64↑r ...
.idata:0040C17C
.idata:0040C184 ;
.idata:0040C184 ; Imports from KERNEL32.dll
.idata:0040C184 ;
.idata:0040C184 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0040C184                 extrn __imp_ExitProcess:dword
.idata:0040C184                                         ; DATA XREF: ExitProcess↑r
.idata:0040C188 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0040C188                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0040C188                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:0040C18C
.idata:0040C194 ;
.idata:0040C194 ; Imports from msvcrt.dll
.idata:0040C194 ;
.idata:0040C194 ; int (__cdecl *_isatty)(int FileHandle)
.idata:0040C194                 extrn __imp__isatty:dword
.idata:0040C194                                         ; DATA XREF: _isatty↑r
.idata:0040C198
.idata:0040C1A0 ;
.idata:0040C1A0 ; Imports from MSVCP60.DLL
.idata:0040C1A0 ;
.idata:0040C1A0 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0040C1A0                 extrn __imp_mbrtowc:dword
.idata:0040C1A0                                         ; DATA XREF: mbrtowc↑r
.idata:0040C1A4
.idata:0040C1AC ;
.idata:0040C1AC ; Imports from msvcrt.dll
.idata:0040C1AC ;
.idata:0040C1AC                 extrn __imp___getmainargs:dword
.idata:0040C1AC                                         ; DATA XREF: __getmainargs↑r
.idata:0040C1B0 ; int _mb_cur_max
.idata:0040C1B0                 extrn __mb_cur_max:dword
.idata:0040C1B0                                         ; DATA XREF: sub_4025F0:loc_402720↑r
.idata:0040C1B0                                         ; sub_407860+7↑r ...
.idata:0040C1B4 ; char ***(__cdecl *__p__environ)()
.idata:0040C1B4                 extrn __imp___p__environ:dword
.idata:0040C1B4                                         ; DATA XREF: __p__environ↑r
.idata:0040C1B8 ; int *(__cdecl *__p__fmode)()
.idata:0040C1B8                 extrn __imp___p__fmode:dword
.idata:0040C1B8                                         ; DATA XREF: __p__fmode↑r
.idata:0040C1BC ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0040C1BC                 extrn __set_app_type:dword
.idata:0040C1BC                                         ; CODE XREF: start+D↑p
.idata:0040C1BC                                         ; .text:0040102D↑p
.idata:0040C1BC                                         ; DATA XREF: ...
.idata:0040C1C0 ; void (__cdecl *_cexit)()
.idata:0040C1C0                 extrn __imp__cexit:dword
.idata:0040C1C0                                         ; DATA XREF: _cexit↑r
.idata:0040C1C4 ; int *(__cdecl *_errno)()
.idata:0040C1C4                 extrn __imp__errno:dword
.idata:0040C1C4                                         ; DATA XREF: _errno↑r
.idata:0040C1C8 ; int (__cdecl *_filbuf)(FILE *File)
.idata:0040C1C8                 extrn __imp__filbuf:dword
.idata:0040C1C8                                         ; DATA XREF: _filbuf↑r
.idata:0040C1CC ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:0040C1CC                 extrn __imp__flsbuf:dword
.idata:0040C1CC                                         ; DATA XREF: _flsbuf↑r
.idata:0040C1D0 ; FILE iob[]
.idata:0040C1D0                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:0040C1D0                                         ; sub_401080+75↑r ...
.idata:0040C1D4 ; int (__cdecl *_isctype)(int C, int Type)
.idata:0040C1D4                 extrn __imp__isctype:dword
.idata:0040C1D4                                         ; DATA XREF: _isctype↑r
.idata:0040C1D8 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:0040C1D8                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:0040C1D8                                         ; DATA XREF: .text:0040106C↑r
.idata:0040C1DC ; const unsigned __int16 *pctype
.idata:0040C1DC                 extrn _pctype:dword     ; DATA XREF: sub_4025F0:loc_402B05↑r
.idata:0040C1DC                                         ; sub_407860:loc_407F54↑r
.idata:0040C1E0 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0040C1E0                 extrn __imp__setmode:dword
.idata:0040C1E0                                         ; DATA XREF: _setmode↑r
.idata:0040C1E4 ; void (__cdecl __noreturn *abort)()
.idata:0040C1E4                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:0040C1E8 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:0040C1E8                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:0040C1E8                                         ; DATA XREF: sub_401040+C↑r
.idata:0040C1EC ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:0040C1EC                 extrn __imp_calloc:dword
.idata:0040C1EC                                         ; DATA XREF: calloc↑r
.idata:0040C1F0 ; void (__cdecl __noreturn *exit)(int Code)
.idata:0040C1F0                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0040C1F4 ; int (__cdecl *fclose)(FILE *Stream)
.idata:0040C1F4                 extrn __imp_fclose:dword
.idata:0040C1F4                                         ; DATA XREF: fclose↑r
.idata:0040C1F8 ; int (__cdecl *fflush)(FILE *Stream)
.idata:0040C1F8                 extrn __imp_fflush:dword
.idata:0040C1F8                                         ; DATA XREF: fflush↑r
.idata:0040C1FC ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:0040C1FC                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:0040C200 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:0040C200                 extrn __imp_fprintf:dword
.idata:0040C200                                         ; DATA XREF: fprintf↑r
.idata:0040C204 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0040C204                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:0040C208 ; size_t (__cdecl *fread)(void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:0040C208                 extrn __imp_fread:dword ; DATA XREF: fread↑r
.idata:0040C20C ; void (__cdecl *free)(void *Block)
.idata:0040C20C                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0040C210 ; size_t (__cdecl *fwrite)(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:0040C210                 extrn __imp_fwrite:dword
.idata:0040C210                                         ; DATA XREF: fwrite↑r
.idata:0040C214 ; char *(__cdecl *getenv)(const char *VarName)
.idata:0040C214                 extrn __imp_getenv:dword
.idata:0040C214                                         ; DATA XREF: getenv↑r
.idata:0040C218 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0040C218                 extrn __imp_iswctype:dword
.idata:0040C218                                         ; DATA XREF: iswctype↑r
.idata:0040C21C ; void *(__cdecl *malloc)(size_t Size)
.idata:0040C21C                 extrn __imp_malloc:dword
.idata:0040C21C                                         ; DATA XREF: malloc↑r
.idata:0040C220 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0040C220                 extrn __imp_memcpy:dword
.idata:0040C220                                         ; DATA XREF: memcpy↑r
.idata:0040C224 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0040C224                 extrn __imp_memset:dword
.idata:0040C224                                         ; DATA XREF: memset↑r
.idata:0040C228 ; int (*printf)(const char *const Format, ...)
.idata:0040C228                 extrn __imp_printf:dword
.idata:0040C228                                         ; DATA XREF: printf↑r
.idata:0040C22C ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:0040C22C                 extrn __imp_realloc:dword
.idata:0040C22C                                         ; DATA XREF: realloc↑r
.idata:0040C230 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:0040C230                 extrn __imp_setlocale:dword
.idata:0040C230                                         ; DATA XREF: setlocale↑r
.idata:0040C234 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0040C234                 extrn __imp_signal:dword
.idata:0040C234                                         ; DATA XREF: signal↑r
.idata:0040C238 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0040C238                 extrn __imp_strchr:dword
.idata:0040C238                                         ; DATA XREF: strchr↑r
.idata:0040C23C ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0040C23C                 extrn __imp_strcmp:dword
.idata:0040C23C                                         ; DATA XREF: strcmp↑r
.idata:0040C240 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0040C240                 extrn __imp_strerror:dword
.idata:0040C240                                         ; DATA XREF: strerror↑r
.idata:0040C244 ; size_t (__cdecl *strlen)(const char *Str)
.idata:0040C244                 extrn __imp_strlen:dword
.idata:0040C244                                         ; DATA XREF: strlen↑r
.idata:0040C248 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0040C248                 extrn __imp_strncmp:dword
.idata:0040C248                                         ; DATA XREF: strncmp↑r
.idata:0040C24C ; int (__cdecl *tolower)(int C)
.idata:0040C24C                 extrn __imp_tolower:dword
.idata:0040C24C                                         ; DATA XREF: tolower↑r
.idata:0040C250 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0040C250                 extrn __imp_vfprintf:dword
.idata:0040C250                                         ; DATA XREF: vfprintf↑r
.idata:0040C254
.idata:0040C254
.idata:0040C254
.idata:0040C254                 end start
